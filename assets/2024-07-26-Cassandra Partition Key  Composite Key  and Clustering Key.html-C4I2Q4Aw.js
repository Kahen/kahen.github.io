import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as n,a as s}from"./app-D9qUUkNr.js";const i={},t=s(`<h1 id="cassandra分区键、复合键和聚簇键-baeldung" tabindex="-1"><a class="header-anchor" href="#cassandra分区键、复合键和聚簇键-baeldung"><span>Cassandra分区键、复合键和聚簇键 | Baeldung</span></a></h1><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p>在Cassandra NoSQL数据库中，数据分布和数据建模与传统的关系型数据库不同。</p><p>在本文中，我们将学习分区键、复合键和聚簇键如何构成主键。我们还将看到它们之间的差异。因此，我们将触及Cassandra中的数据分布架构和数据建模主题。</p><h2 id="_2-apache-cassandra架构" tabindex="-1"><a class="header-anchor" href="#_2-apache-cassandra架构"><span>2. Apache Cassandra架构</span></a></h2><p>Apache Cassandra是一个开源的NoSQL分布式数据库，旨在实现高可用性和线性可扩展性，而不影响性能。</p><p>这是Cassandra的高级架构图：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2021/08/apache-cassandra-diagrams-01-1024x504.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>在Cassandra中，数据是跨集群分布的。此外，一个集群可能由在地理区域的数据中心安装的机架上的节点组成的环。</p><p>在更细粒度的层面上，称为_vnodes_的虚拟节点将数据所有权分配给物理机器。Vnodes通过使用一致性哈希技术来分配数据，使每个节点能够拥有多个小分区范围。</p><p>分区器是一个函数，它对分区键进行哈希以生成一个令牌。此令牌值表示一行，并用于标识它属于节点中的哪个分区范围。</p><p>然而，Cassandra客户端将集群视为统一的整体数据库，并使用Cassandra驱动库与之通信。</p><h2 id="_3-cassandra数据建模" tabindex="-1"><a class="header-anchor" href="#_3-cassandra数据建模"><span>3. Cassandra数据建模</span></a></h2><p>通常，数据建模是一个分析应用程序需求、识别实体及其关系、组织数据等的过程。在关系数据建模中，查询通常是整个数据建模过程中的事后考虑。</p><p>然而，在Cassandra中，数据访问查询驱动数据建模。反过来，查询是由应用程序工作流程驱动的。</p><p>此外，Cassandra数据模型中没有表连接，这意味着查询中的所有所需数据必须来自单个表。因此，表中的数据以非规范化格式存在。</p><p>接下来，在逻辑数据建模步骤中，我们通过定义键空间、表甚至表列来<strong>指定实际的数据库架构</strong>。然后，在物理数据建模步骤中，我们使用Cassandra查询语言（CQL）在集群中创建物理键空间 - 带有所有数据类型的表。</p><h2 id="_4-主键" tabindex="-1"><a class="header-anchor" href="#_4-主键"><span>4. 主键</span></a></h2><p>在Cassandra中，主键的工作方式是一个重要的概念。</p><p>Cassandra中的主键<strong>由一个或多个分区键和零个或多个聚簇键组件组成</strong>。这些组件的顺序总是将分区键放在第一位，然后是聚簇键。</p><p>除了使数据唯一之外，主键的分区键组件在数据放置中还扮演着额外的重要角色。因此，它提高了跨集群多个节点的数据读写性能。</p><p>现在，让我们看看主键的每个组件。</p><h3 id="_4-1-分区键" tabindex="-1"><a class="header-anchor" href="#_4-1-分区键"><span>4.1. 分区键</span></a></h3><p>分区键的主要目标是在集群中均匀分布数据并有效查询数据。</p><p><strong>分区键用于数据放置，除了唯一标识数据外，并且始终是主键定义中的第一个值。</strong></p><p>让我们通过一个例子来理解 - 一个包含应用程序日志的简单表，具有一个主键：</p><div class="language-cql line-numbers-mode" data-ext="cql" data-title="cql"><pre class="language-cql"><code>CREATE TABLE application_logs (
  id INT,
  app_name VARCHAR,
  hostname VARCHAR,
  log_datetime TIMESTAMP,
  env VARCHAR,
  log_level VARCHAR,
  log_message TEXT,
  PRIMARY KEY (app_name)
);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下是上述表的一些示例数据：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2021/08/SampleTableDataPK.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>正如我们之前学到的，Cassandra使用一致性哈希技术来生成分区键（<em>app_name</em>）的哈希值，并将行数据分配到节点内的分区范围。</p><p>让我们看看可能的数据存储：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2021/08/DataDistributionNodes.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>上述图表是一个可能的场景，其中_app1_、_app2_和_app3_的哈希值导致每一行分别存储在三个不同的节点 - <em>Node1</em>、<em>Node2_和_Node3</em>。</p><p>所有_app1_日志都发送到_Node1_，<em>app2_日志发送到_Node2</em>，<em>app3_日志发送到_Node3</em>。</p><p>没有在_where_子句中指定分区键的数据获取查询将导致低效的全集群扫描。</p><p>另一方面，在_where_子句中有分区键时，Cassandra使用一致性哈希技术来识别集群中确切的节点和节点内的确切分区范围。因此，获取数据查询是快速和高效的：</p><div class="language-cql line-numbers-mode" data-ext="cql" data-title="cql"><pre class="language-cql"><code>select * from application_logs where app_name = &#39;app1&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-2-复合分区键" tabindex="-1"><a class="header-anchor" href="#_4-2-复合分区键"><span>4.2. 复合分区键</span></a></h3><p><strong>如果我们需要组合多个列值以形成一个单一的分区键，我们使用复合分区键。</strong></p><p>在这里，复合分区键的目标也是为了数据放置，除了唯一标识数据之外。因此，数据的存储和检索变得高效。</p><p>这里是一个将_app_name_和_env_列组合成复合分区键的表定义示例：</p><div class="language-cql line-numbers-mode" data-ext="cql" data-title="cql"><pre class="language-cql"><code>CREATE TABLE application_logs (
  id INT,
  app_name VARCHAR,
  hostname VARCHAR,
  log_datetime TIMESTAMP,
  env VARCHAR,
  log_level VARCHAR,
  log_message TEXT,
  PRIMARY KEY ((app_name, env))
);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>上述定义中需要注意的重要事项是内括号围绕_app_name_和_env_主键定义</strong>。这个内括号指定_app_name_和_env_是分区键的一部分，而不是聚簇键。</p><p><strong>如果我们去掉内括号并且只有单个括号，那么_app_name_就成为分区键，_env_成为聚簇键组件。</strong></p><p>这里是上述表的一些示例数据：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2021/08/CompositeSampleTableDataPK.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>让我们看看上述示例数据的可能数据分布。请注意：Cassandra为_app_name_和_env_列组合生成哈希值：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2021/08/CompositeDataDistributionNodes.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>正如我们在上面看到的，可能的场景是_app1:prod, app1:dev, app1:qa_的哈希值导致这三行分别存储在三个不同的节点 - <em>Node1</em>、<em>Node2_和_Node3</em>。</p><p>所有来自_prod_环境的_app1_日志都发送到_Node1_，来自_dev_环境的_app1_日志发送到_Node2_，来自_qa_环境的_app1_日志发送到_Node3_。</p><p>最重要的是，<strong>为了有效地检索数据，获取查询中的_where_子句必须包含与主键定义中指定的相同顺序的所有复合分区键</strong>：</p><div class="language-cql line-numbers-mode" data-ext="cql" data-title="cql"><pre class="language-cql"><code>select * from application_logs where app_name = &#39;app1&#39; and env = &#39;prod&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-3-聚簇键" tabindex="-1"><a class="header-anchor" href="#_4-3-聚簇键"><span>4.3. 聚簇键</span></a></h3><p>正如我们上面提到的，分区是确定数据在节点内放置到哪个分区范围的过程。相比之下，<strong>聚簇是存储引擎的过程，用于在分区内对数据进行排序，基于定义为聚簇键的列</strong>。</p><p>此外，需要事先确定聚簇键列的选择 - 这是因为我们选择聚簇键列取决于我们希望在我们的应用程序中如何使用数据。</p><p>所有分区内的数据都存储在连续的存储中，按聚簇键列排序。因此，检索所需的排序数据非常高效。</p><p>让我们看一个包含复合分区键的聚簇键的示例表定义：</p><div class="language-cql line-numbers-mode" data-ext="cql" data-title="cql"><pre class="language-cql"><code>CREATE TABLE application_logs (
  id INT,
  app_name VARCHAR,
  hostname VARCHAR,
  log_datetime TIMESTAMP,
  env VARCHAR,
  log_level VARCHAR,
  log_message TEXT,
  PRIMARY KEY ((app_name, env), hostname, log_datetime)
);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们看看一些示例数据：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2021/08/CompositeSampleTableData-1024x198.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>正如我们在上述表定义中看到的，我们已经将_hostname_和_log_datetime_作为聚簇键列。假设所有来自_app1_和_prod_环境的日志都存储在_Node1_中，Cassandra存储引擎将按_hostname_和_log_datetime_在分区内对这些日志进行字典排序。</p><p>默认情况下，Cassandra存储引擎按聚簇键列的升序排序数据，但我们可以通过在表定义中使用_WITH CLUSTERING ORDER BY_子句来<strong>控制聚簇列的排序顺序</strong>：</p><div class="language-cql line-numbers-mode" data-ext="cql" data-title="cql"><pre class="language-cql"><code>CREATE TABLE application_logs (
  id INT,
  app_name VARCHAR,
  hostname VARCHAR,
  log_datetime TIMESTAMP,
  env VARCHAR,
  log_level VARCHAR,
  log_message TEXT,
  PRIMARY KEY ((app_name,env), hostname, log_datetime)
)
WITH CLUSTERING ORDER BY (hostname ASC, log_datetime DESC);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据上述定义，Cassandra存储引擎将在分区内按_hostname_的字典升序存储所有日志，但在每个_hostname_组内按_log_datetime_的降序存储。</p><p>现在，让我们看一个在_where_子句中包含聚簇列的数据获取查询的示例：</p><div class="language-cql line-numbers-mode" data-ext="cql" data-title="cql"><pre class="language-cql"><code>select * from application_logs
where
app_name = &#39;app1&#39; and env = &#39;</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,66),d=[t];function l(p,r){return n(),e("div",null,d)}const m=a(i,[["render",l],["__file","2024-07-26-Cassandra Partition Key  Composite Key  and Clustering Key.html.vue"]]),g=JSON.parse(`{"path":"/posts/baeldung/2024-07-26/2024-07-26-Cassandra%20Partition%20Key%20%20Composite%20Key%20%20and%20Clustering%20Key.html","title":"Cassandra分区键、复合键和聚簇键 | Baeldung","lang":"zh-CN","frontmatter":{"date":"2021-08-01T00:00:00.000Z","category":["Database","Cassandra"],"tag":["Partition Key","Composite Key","Clustering Key"],"head":[["meta",{"name":"Cassandra Partition Key and Clustering Key","content":"Learn about Cassandra's partition key, composite key, and clustering key concepts and their role in data distribution and querying efficiency."}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-26/2024-07-26-Cassandra%20Partition%20Key%20%20Composite%20Key%20%20and%20Clustering%20Key.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Cassandra分区键、复合键和聚簇键 | Baeldung"}],["meta",{"property":"og:description","content":"Cassandra分区键、复合键和聚簇键 | Baeldung 1. 概述 在Cassandra NoSQL数据库中，数据分布和数据建模与传统的关系型数据库不同。 在本文中，我们将学习分区键、复合键和聚簇键如何构成主键。我们还将看到它们之间的差异。因此，我们将触及Cassandra中的数据分布架构和数据建模主题。 2. Apache Cassandra..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.baeldung.com/wp-content/uploads/2021/08/apache-cassandra-diagrams-01-1024x504.jpeg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-26T17:38:51.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Partition Key"}],["meta",{"property":"article:tag","content":"Composite Key"}],["meta",{"property":"article:tag","content":"Clustering Key"}],["meta",{"property":"article:published_time","content":"2021-08-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-26T17:38:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Cassandra分区键、复合键和聚簇键 | Baeldung\\",\\"image\\":[\\"https://www.baeldung.com/wp-content/uploads/2021/08/apache-cassandra-diagrams-01-1024x504.jpeg\\",\\"https://www.baeldung.com/wp-content/uploads/2021/08/SampleTableDataPK.png\\",\\"https://www.baeldung.com/wp-content/uploads/2021/08/DataDistributionNodes.png\\",\\"https://www.baeldung.com/wp-content/uploads/2021/08/CompositeSampleTableDataPK.png\\",\\"https://www.baeldung.com/wp-content/uploads/2021/08/CompositeDataDistributionNodes.png\\",\\"https://www.baeldung.com/wp-content/uploads/2021/08/CompositeSampleTableData-1024x198.png\\"],\\"datePublished\\":\\"2021-08-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-26T17:38:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Cassandra分区键、复合键和聚簇键 | Baeldung 1. 概述 在Cassandra NoSQL数据库中，数据分布和数据建模与传统的关系型数据库不同。 在本文中，我们将学习分区键、复合键和聚簇键如何构成主键。我们还将看到它们之间的差异。因此，我们将触及Cassandra中的数据分布架构和数据建模主题。 2. Apache Cassandra..."},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. Apache Cassandra架构","slug":"_2-apache-cassandra架构","link":"#_2-apache-cassandra架构","children":[]},{"level":2,"title":"3. Cassandra数据建模","slug":"_3-cassandra数据建模","link":"#_3-cassandra数据建模","children":[]},{"level":2,"title":"4. 主键","slug":"_4-主键","link":"#_4-主键","children":[{"level":3,"title":"4.1. 分区键","slug":"_4-1-分区键","link":"#_4-1-分区键","children":[]},{"level":3,"title":"4.2. 复合分区键","slug":"_4-2-复合分区键","link":"#_4-2-复合分区键","children":[]},{"level":3,"title":"4.3. 聚簇键","slug":"_4-3-聚簇键","link":"#_4-3-聚簇键","children":[]}]}],"git":{"createdTime":1722015531000,"updatedTime":1722015531000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":6.68,"words":2003},"filePathRelative":"posts/baeldung/2024-07-26/2024-07-26-Cassandra Partition Key  Composite Key  and Clustering Key.md","localizedDate":"2021年8月1日","excerpt":"\\n<h2>1. 概述</h2>\\n<p>在Cassandra NoSQL数据库中，数据分布和数据建模与传统的关系型数据库不同。</p>\\n<p>在本文中，我们将学习分区键、复合键和聚簇键如何构成主键。我们还将看到它们之间的差异。因此，我们将触及Cassandra中的数据分布架构和数据建模主题。</p>\\n<h2>2. Apache Cassandra架构</h2>\\n<p>Apache Cassandra是一个开源的NoSQL分布式数据库，旨在实现高可用性和线性可扩展性，而不影响性能。</p>\\n<p>这是Cassandra的高级架构图：</p>\\n<figure><img src=\\"https://www.baeldung.com/wp-content/uploads/2021/08/apache-cassandra-diagrams-01-1024x504.jpeg\\" alt=\\"img\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>img</figcaption></figure>","autoDesc":true}`);export{m as comp,g as data};
