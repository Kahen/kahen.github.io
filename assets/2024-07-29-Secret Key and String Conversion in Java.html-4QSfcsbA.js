import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as e}from"./app-DWhzy7sT.js";const t={},p=e(`<h1 id="java中的秘密密钥与字符串转换" tabindex="-1"><a class="header-anchor" href="#java中的秘密密钥与字符串转换"><span>Java中的秘密密钥与字符串转换</span></a></h1><p>在现实生活中，我们经常会遇到需要进行加密和解密以确保安全的情况。我们可以使用密钥来轻松实现这一点。因此，为了加密和解密密钥，我们需要知道如何将密钥转换为字符串以及反之。在本教程中，我们将看到Java中的秘密密钥和字符串转换。此外，我们还将通过示例了解在Java中以不同方式创建Secret Key。</p><p>密钥是用于加密和解密消息的信息或参数。在Java中，我们有SecretKey接口，它将密钥定义为秘密（对称）密钥。这个接口的目的是将所有秘密密钥接口分组（并提供类型安全性）。</p><p>在Java中生成密钥有两种方式：从随机数生成或从给定的密码派生。</p><p><strong>第一种方法是使用密码学安全的（伪）随机数生成器如SecureRandom类来生成密钥。</strong></p><p>为了生成密钥，我们可以使用KeyGenerator类。让我们定义一个生成SecretKey的方法——参数n指定了密钥的长度（128、192或256位）：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SecretKey</span> <span class="token function">generateKey</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span> <span class="token punctuation">{</span>
    <span class="token class-name">KeyGenerator</span> keyGenerator <span class="token operator">=</span> <span class="token class-name">KeyGenerator</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;AES&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    keyGenerator<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">SecretKey</span> originalKey <span class="token operator">=</span> keyGenerator<span class="token punctuation">.</span><span class="token function">generateKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> originalKey<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>第二种方法是使用基于密码的密钥派生函数如PBKDF2，从给定的密码派生密钥。</strong> 我们还需要一个盐值，用于将密码转换为密钥。盐也是一个随机值。</p><p>我们可以使用SecretKeyFactory类和PBKDF2WithHmacSHA256算法，从给定的密码生成密钥。</p><p>让我们定义一个方法，使用65,536次迭代和256位密钥长度从给定的密码生成SecretKey：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SecretKey</span> <span class="token function">getKeyFromPassword</span><span class="token punctuation">(</span><span class="token class-name">String</span> password<span class="token punctuation">,</span> <span class="token class-name">String</span> salt<span class="token punctuation">)</span>
  <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeySpecException</span> <span class="token punctuation">{</span>
    <span class="token class-name">SecretKeyFactory</span> factory <span class="token operator">=</span> <span class="token class-name">SecretKeyFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;PBKDF2WithHmacSHA256&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">KeySpec</span> spec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PBEKeySpec</span><span class="token punctuation">(</span>password<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> salt<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">65536</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">SecretKey</span> originalKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecretKeySpec</span><span class="token punctuation">(</span>factory<span class="token punctuation">.</span><span class="token function">generateSecret</span><span class="token punctuation">(</span>spec<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;AES&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> originalKey<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-1-secretkey-到-string" tabindex="-1"><a class="header-anchor" href="#_3-1-secretkey-到-string"><span>3.1. SecretKey 到 String</span></a></h3><p>我们将SecretKey转换为字节数组。然后，我们将字节数组使用Base64编码转换为String：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">convertSecretKeyToString</span><span class="token punctuation">(</span><span class="token class-name">SecretKey</span> secretKey<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span> <span class="token punctuation">{</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rawData <span class="token operator">=</span> secretKey<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> encodedKey <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>rawData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> encodedKey<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-string-到-secretkey" tabindex="-1"><a class="header-anchor" href="#_3-2-string-到-secretkey"><span>3.2. String 到 SecretKey</span></a></h3><p>我们将编码的String密钥使用Base64解码转换为字节数组。然后，使用SecretKeySpecs，我们将字节数组转换为SecretKey：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SecretKey</span> <span class="token function">convertStringToSecretKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> encodedKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> decodedKey <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>encodedKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">SecretKey</span> originalKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecretKeySpec</span><span class="token punctuation">(</span>decodedKey<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> decodedKey<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token string">&quot;AES&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> originalKey<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们快速验证转换：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">SecretKey</span> encodedKey <span class="token operator">=</span> <span class="token class-name">ConversionClassUtil</span><span class="token punctuation">.</span><span class="token function">getKeyFromPassword</span><span class="token punctuation">(</span><span class="token string">&quot;Baeldung@2021&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;@$#baelDunG@#^$*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> encodedString <span class="token operator">=</span> <span class="token class-name">ConversionClassUtil</span><span class="token punctuation">.</span><span class="token function">convertSecretKeyToString</span><span class="token punctuation">(</span>encodedKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">SecretKey</span> decodeKey <span class="token operator">=</span> <span class="token class-name">ConversionClassUtil</span><span class="token punctuation">.</span><span class="token function">convertStringToSecretKey</span><span class="token punctuation">(</span>encodedString<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>encodedKey<span class="token punctuation">,</span> decodeKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-结论" tabindex="-1"><a class="header-anchor" href="#_4-结论"><span>4. 结论</span></a></h2><p>总结来说，我们已经学会了如何在Java中将SecretKey转换为String以及反之。此外，我们还讨论了在Java中创建SecretKey的各种方式。</p><p>如常，文章的全部源代码可在GitHub上获取。</p>`,22),c=[p];function o(i,l){return s(),a("div",null,c)}const k=n(t,[["render",o],["__file","2024-07-29-Secret Key and String Conversion in Java.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-29/2024-07-29-Secret%20Key%20and%20String%20Conversion%20in%20Java.html","title":"Java中的秘密密钥与字符串转换","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","Security"],"tag":["Secret Key","String Conversion"],"head":[["meta",{"name":"keywords","content":"Java, Secret Key, String Conversion, Encryption, Decryption"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-29/2024-07-29-Secret%20Key%20and%20String%20Conversion%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Java中的秘密密钥与字符串转换"}],["meta",{"property":"og:description","content":"Java中的秘密密钥与字符串转换 在现实生活中，我们经常会遇到需要进行加密和解密以确保安全的情况。我们可以使用密钥来轻松实现这一点。因此，为了加密和解密密钥，我们需要知道如何将密钥转换为字符串以及反之。在本教程中，我们将看到Java中的秘密密钥和字符串转换。此外，我们还将通过示例了解在Java中以不同方式创建Secret Key。 密钥是用于加密和解密..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-29T14:19:06.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Secret Key"}],["meta",{"property":"article:tag","content":"String Conversion"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-29T14:19:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java中的秘密密钥与字符串转换\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-29T14:19:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Java中的秘密密钥与字符串转换 在现实生活中，我们经常会遇到需要进行加密和解密以确保安全的情况。我们可以使用密钥来轻松实现这一点。因此，为了加密和解密密钥，我们需要知道如何将密钥转换为字符串以及反之。在本教程中，我们将看到Java中的秘密密钥和字符串转换。此外，我们还将通过示例了解在Java中以不同方式创建Secret Key。 密钥是用于加密和解密..."},"headers":[{"level":3,"title":"3.1. SecretKey 到 String","slug":"_3-1-secretkey-到-string","link":"#_3-1-secretkey-到-string","children":[]},{"level":3,"title":"3.2. String 到 SecretKey","slug":"_3-2-string-到-secretkey","link":"#_3-2-string-到-secretkey","children":[]},{"level":2,"title":"4. 结论","slug":"_4-结论","link":"#_4-结论","children":[]}],"git":{"createdTime":1722262746000,"updatedTime":1722262746000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":2.33,"words":700},"filePathRelative":"posts/baeldung/2024-07-29/2024-07-29-Secret Key and String Conversion in Java.md","localizedDate":"2022年4月1日","excerpt":"\\n<p>在现实生活中，我们经常会遇到需要进行加密和解密以确保安全的情况。我们可以使用密钥来轻松实现这一点。因此，为了加密和解密密钥，我们需要知道如何将密钥转换为字符串以及反之。在本教程中，我们将看到Java中的秘密密钥和字符串转换。此外，我们还将通过示例了解在Java中以不同方式创建Secret Key。</p>\\n<p>密钥是用于加密和解密消息的信息或参数。在Java中，我们有SecretKey接口，它将密钥定义为秘密（对称）密钥。这个接口的目的是将所有秘密密钥接口分组（并提供类型安全性）。</p>\\n<p>在Java中生成密钥有两种方式：从随机数生成或从给定的密码派生。</p>\\n<p><strong>第一种方法是使用密码学安全的（伪）随机数生成器如SecureRandom类来生成密钥。</strong></p>","autoDesc":true}');export{k as comp,d as data};
