import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-DNwYcgl6.js";const e={},p=t(`<hr><h1 id="在java中设置线程名称" tabindex="-1"><a class="header-anchor" href="#在java中设置线程名称"><span>在Java中设置线程名称</span></a></h1><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p>在本教程中，我们将探讨在Java中设置_线程_名称的不同方法。首先，我们将创建一个示例，运行两个_线程_。一个打印偶数，另一个只打印奇数。然后，我们将为我们的_线程_设置自定义名称并显示它们。</p><h2 id="_2-设置-线程-名称的方法" tabindex="-1"><a class="header-anchor" href="#_2-设置-线程-名称的方法"><span>2. 设置_线程_名称的方法</span></a></h2><p>_线程_是一个轻量级进程，可以并发执行。<strong>Java中的_线程_类为线程提供了默认名称。</strong></p><p>在某些情况下，我们可能需要知道哪个线程正在运行，因此为_线程_提供自定义名称可以使它在其他运行线程中更容易识别。</p><p>让我们首先定义一个简单的类，创建两个_线程_。第一个_线程_将打印1到N之间的偶数。第二个_线程_将打印1到N之间的奇数。在我们的示例中，N是5。</p><p>我们还将打印_线程_的默认名称。</p><p>首先，让我们创建两个_线程_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomThreadNameTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> currentNumber <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">CustomThreadNameTest</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomThreadNameTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Thread</span> oddThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            test<span class="token punctuation">.</span><span class="token function">printOddNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Thread</span> evenThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            test<span class="token punctuation">.</span><span class="token function">printEvenNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        evenThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        oddThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
    <span class="token comment">// printEvenNumber() 和 printOddNumber()</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，无论是在_printEvenNumber_还是_printOddNumber_方法中，我们将检查当前数字是偶数还是奇数，并打印数字以及_线程_名称：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printEvenNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>currentNumber \`<span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>currentNumber <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; --&gt;\` &quot;</span> <span class="token operator">+</span> currentNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
            currentNumber<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printOddNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>currentNumber \`<span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>currentNumber <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; --&gt;\` &quot;</span> <span class="token operator">+</span> currentNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
            currentNumber<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行代码后，我们得到以下输出：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Thread-0 --&gt; 1
Thread-1 --&gt; 2
Thread-0 --&gt; 3
Thread-1 --&gt; 4
Thread-0 --&gt; 5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所有线程都有默认名称，如_Thread-0, Thread-1_等。</p><h3 id="_2-1-使用-线程-构造函数" tabindex="-1"><a class="header-anchor" href="#_2-1-使用-线程-构造函数"><span>2.1. 使用_线程_构造函数</span></a></h3><p><strong>_线程_类提供了一些构造函数，我们可以在创建_线程_时提供_线程_名称</strong>，例如：</p><ul><li><em>Thread(Runnable target, String name)</em></li><li><em>Thread(String name)</em></li></ul><p>这里的参数_name_是_线程_名称。</p><p>使用_线程_构造函数，我们可以在线程创建时提供线程名称。</p><p>让我们为我们的_线程_设置自定义名称：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Thread</span> oddThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    test<span class="token punctuation">.</span><span class="token function">printOddNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;ODD&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Thread</span> evenThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    test<span class="token punctuation">.</span><span class="token function">printEvenNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;EVEN&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，当我们运行代码时，将显示自定义名称：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>ODD --&gt; 1
EVEN --&gt; 2
ODD --&gt; 3
EVEN --&gt; 4
ODD --&gt; 5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-使用-setname-方法" tabindex="-1"><a class="header-anchor" href="#_2-2-使用-setname-方法"><span>2.2. 使用_setName()_方法</span></a></h3><p>此外，<strong>_线程_类提供了一个_setName_方法</strong>。</p><p>让我们通过_Thread.currentThread().setName()<em>调用_setName</em>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Thread</span> oddThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;ODD&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    test<span class="token punctuation">.</span><span class="token function">printOddNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Thread</span> evenThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;EVEN&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    test<span class="token punctuation">.</span><span class="token function">printEvenNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以通过_Thread.setName()_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Thread</span> oddThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    test<span class="token punctuation">.</span><span class="token function">printOddNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
oddThread<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;ODD&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Thread</span> evenThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    test<span class="token punctuation">.</span><span class="token function">printEvenNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
evenThread<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;EVEN&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次运行代码，将显示我们的_线程_的自定义名称：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>ODD --&gt; 1
EVEN --&gt; 2
ODD --&gt; 3
EVEN --&gt; 4
ODD --&gt; 5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-结论" tabindex="-1"><a class="header-anchor" href="#_3-结论"><span>3. 结论</span></a></h2><p>在本文中，我们探讨了如何在Java中设置_线程_的名称。首先，我们创建了一个具有默认名称的_线程_，然后使用_线程_构造函数和_setName_方法设置了自定义名称。</p><p>如往常一样，本文的示例代码可在GitHub上找到。</p>`,36),c=[p];function o(i,l){return s(),a("div",null,c)}const d=n(e,[["render",o],["__file","2024-07-23-Set the Name of a Thread in Java.html.vue"]]),k=JSON.parse('{"path":"/posts/baeldung/2024-07-23/2024-07-23-Set%20the%20Name%20of%20a%20Thread%20in%20Java.html","title":"在Java中设置线程名称","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","Concurrency"],"tag":["Thread","Thread Name"],"head":[["meta",{"name":"keywords","content":"Java, Thread, Thread Name"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-23/2024-07-23-Set%20the%20Name%20of%20a%20Thread%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"在Java中设置线程名称"}],["meta",{"property":"og:description","content":"在Java中设置线程名称 1. 概述 在本教程中，我们将探讨在Java中设置_线程_名称的不同方法。首先，我们将创建一个示例，运行两个_线程_。一个打印偶数，另一个只打印奇数。然后，我们将为我们的_线程_设置自定义名称并显示它们。 2. 设置_线程_名称的方法 _线程_是一个轻量级进程，可以并发执行。Java中的_线程_类为线程提供了默认名称。 在某些..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-23T04:48:22.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Thread"}],["meta",{"property":"article:tag","content":"Thread Name"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-23T04:48:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"在Java中设置线程名称\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-23T04:48:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"在Java中设置线程名称 1. 概述 在本教程中，我们将探讨在Java中设置_线程_名称的不同方法。首先，我们将创建一个示例，运行两个_线程_。一个打印偶数，另一个只打印奇数。然后，我们将为我们的_线程_设置自定义名称并显示它们。 2. 设置_线程_名称的方法 _线程_是一个轻量级进程，可以并发执行。Java中的_线程_类为线程提供了默认名称。 在某些..."},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. 设置_线程_名称的方法","slug":"_2-设置-线程-名称的方法","link":"#_2-设置-线程-名称的方法","children":[{"level":3,"title":"2.1. 使用_线程_构造函数","slug":"_2-1-使用-线程-构造函数","link":"#_2-1-使用-线程-构造函数","children":[]},{"level":3,"title":"2.2. 使用_setName()_方法","slug":"_2-2-使用-setname-方法","link":"#_2-2-使用-setname-方法","children":[]}]},{"level":2,"title":"3. 结论","slug":"_3-结论","link":"#_3-结论","children":[]}],"git":{"createdTime":1721710102000,"updatedTime":1721710102000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":2.78,"words":833},"filePathRelative":"posts/baeldung/2024-07-23/2024-07-23-Set the Name of a Thread in Java.md","localizedDate":"2022年4月1日","excerpt":"<hr>\\n<h1>在Java中设置线程名称</h1>\\n<h2>1. 概述</h2>\\n<p>在本教程中，我们将探讨在Java中设置_线程_名称的不同方法。首先，我们将创建一个示例，运行两个_线程_。一个打印偶数，另一个只打印奇数。然后，我们将为我们的_线程_设置自定义名称并显示它们。</p>\\n<h2>2. 设置_线程_名称的方法</h2>\\n<p>_线程_是一个轻量级进程，可以并发执行。<strong>Java中的_线程_类为线程提供了默认名称。</strong></p>\\n<p>在某些情况下，我们可能需要知道哪个线程正在运行，因此为_线程_提供自定义名称可以使它在其他运行线程中更容易识别。</p>","autoDesc":true}');export{d as comp,k as data};
