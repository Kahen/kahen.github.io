import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as t,a as n}from"./app-CseMoHkL.js";const s={},a=n('<h1 id="在thymeleaf中显示已登录用户信息" tabindex="-1"><a class="header-anchor" href="#在thymeleaf中显示已登录用户信息"><span>在Thymeleaf中显示已登录用户信息</span></a></h1><p>如果您正在使用Spring Security（特别是OAuth）实现，请务必查看《学习Spring安全》课程：</p><p><strong>&gt;&gt; 学习Spring</strong><strong>安全</strong></p><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p>在这个快速教程中，<strong>我们将看看如何</strong> <strong>在Thymeleaf中显示已登录用户的信息</strong>。 我们将扩展我们在Spring Security与Thymeleaf文章中构建的项目。首先，我们将添加一个自定义模型来存储用户信息和检索它们的服务。之后，我们将使用Thymeleaf Extras模块中的Spring Security方言来显示它。</p><h2 id="_2-userdetails实现" tabindex="-1"><a class="header-anchor" href="#_2-userdetails实现"><span>2. UserDetails实现</span></a></h2><p><em>UserDetails</em> 是Spring Security用来保存与安全无关的用户信息的接口。</p><p>我们将创建我们的_UserDetails_接口实现，其中包含一些自定义字段，作为存储我们认证用户详细信息的模型。但是，为了处理更少的字段和方法，我们将扩展默认框架实现，_User_类：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>public class CustomUserDetails extends User {\n\n    private final String firstName;\n    private final String lastName;\n    private final String email;\n\n    private CustomUserDetails(Builder builder) {\n        super(builder.username, builder.password, builder.authorities);\n        this.firstName = builder.firstName;\n        this.lastName = builder.lastName;\n        this.email = builder.email;\n    }\n\n    // 省略getter和静态Builder类\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-userdetailsservice实现" tabindex="-1"><a class="header-anchor" href="#_3-userdetailsservice实现"><span>3. UserDetailsService实现</span></a></h2><p>框架的_UserDetailsService_单一方法接口负责在认证过程中获取_UserDetails_。</p><p>因此，为了能够加载我们的_CustomUserDetails_，我们需要实现_UserDetailsService_接口。对于我们的示例，我们将在用户名作为键的_Map_中硬编码并存储用户详细信息：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>@Service\npublic class CustomUserDetailsService implements UserDetailsService {\n\n    private final PasswordEncoder passwordEncoder;\n    private final Map`&lt;String, CustomUserDetails&gt;` userRegistry = new HashMap&lt;&gt;();\n\n    // 省略构造器\n\n    @PostConstruct\n    public void init() {\n        userRegistry.put(&quot;user&quot;, new CustomUserDetails.Builder().withFirstName(&quot;Mark&quot;)\n          .withLastName(&quot;Johnson&quot;)\n          .withEmail(&quot;mark.johnson@email.com&quot;)\n          .withUsername(&quot;user&quot;)\n          .withPassword(passwordEncoder.encode(&quot;password&quot;))\n          .withAuthorities(Collections.singletonList(new SimpleGrantedAuthority(&quot;ROLE_USER&quot;)))\n          .build());\n        userRegistry.put(&quot;admin&quot;, new CustomUserDetails.Builder().withFirstName(&quot;James&quot;)\n          .withLastName(&quot;Davis&quot;)\n          .withEmail(&quot;james.davis@email.com&quot;)\n          .withUsername(&quot;admin&quot;)\n          .withPassword(passwordEncoder.encode(&quot;password&quot;))\n          .withAuthorities(Collections.singletonList(new SimpleGrantedAuthority(&quot;ROLE_ADMIN&quot;)))\n          .build());\n    }\n\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n        CustomUserDetails userDetails = userRegistry.get(username);\n        if (userDetails == null) {\n            throw new UsernameNotFoundException(username);\n        }\n        return userDetails;\n    }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，为了实现所需的_loadUserByUsername()_方法，我们通过用户名从注册_Map_中获取相应的_CustomUserDetails_对象。然而，在生产环境中，用户详细信息将从存储库中存储和检索。</p><h2 id="_4-spring-security配置" tabindex="-1"><a class="header-anchor" href="#_4-spring-security配置"><span>4. Spring Security配置</span></a></h2><p>首先，我们需要在Spring Security的配置中添加_UserDetailsService_，它将连接到_CustomUserDetailsService_实现。进一步，我们将通过相应的方法将其设置在_HttpSecurity_实例上。其余的只是最小的安全配置，要求用户经过认证，并配置_/login_、<em>/logout_和</em>/index_端点：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>@Configuration\n@EnableWebSecurity\npublic class SecurityConfiguration {\n\n    private final UserDetailsService userDetailsService;\n\n    // 省略构造器\n\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        http.userDetailsService(userDetailsService)\n            .authorizeHttpRequests(authorizationManagerRequestMatcherRegistry -&gt; authorizationManagerRequestMatcherRegistry\n                    .anyRequest().authenticated())\n            .formLogin(httpSecurityFormLoginConfigurer -&gt; httpSecurityFormLoginConfigurer\n                    .loginPage(&quot;/login&quot;).permitAll()\n                    .defaultSuccessUrl(&quot;/index&quot;))\n            .logout(httpSecurityLogoutConfigurer -&gt; httpSecurityLogoutConfigurer.permitAll()\n                    .logoutRequestMatcher(new AntPathRequestMatcher(&quot;/logout&quot;))\n                    .logoutSuccessUrl(&quot;/login&quot;));\n        return http.build();\n    }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Thymeleaf Extras模块提供了对_Authentication_对象的访问</strong>，通过安全方言，我们可以在Thymeleaf页面上显示已登录用户的信息。</p><p>_CustomUserDetails_对象可以通过_Authentication_对象上的_principal_字段访问。例如，我们可以使用_sec:authentication=&quot;principal.firstName&quot;_访问_firstName_字段：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>`&lt;!DOCTYPE html&gt;`\n`&lt;html xmlns:sec=&quot;http://www.thymeleaf.org/extras/spring-security&quot;&gt;`\n`&lt;head&gt;`\n`&lt;title&gt;`欢迎来到Spring Security Thymeleaf教程`&lt;/title&gt;`\n`&lt;/head&gt;`\n`&lt;body&gt;`\n    `&lt;h2&gt;`欢迎`&lt;/h2&gt;`\n    `&lt;p&gt;`Spring Security Thymeleaf教程`&lt;/p&gt;`\n    `&lt;div sec:authorize=&quot;hasRole(&#39;USER&#39;)&quot;&gt;`用户可见的文本。`````````&lt;/div&gt;`````````\n    `&lt;div sec:authorize=&quot;hasRole(&#39;ADMIN&#39;)&quot;&gt;`管理员可见的文本。`````````&lt;/div&gt;`````````\n    `&lt;div sec:authorize=&quot;isAuthenticated()&quot;&gt;`仅已认证用户可见的文本。`````````&lt;/div&gt;`````````\n    已认证用户名：\n    `&lt;div sec:authentication=&quot;name&quot;&gt;``````````&lt;/div&gt;`````````\n    已认证用户的名字：\n    `&lt;div sec:authentication=&quot;principal.firstName&quot;&gt;``````````&lt;/div&gt;`````````\n    已认证用户的姓氏：\n    `&lt;div sec:authentication=&quot;principal.lastName&quot;&gt;``````````&lt;/div&gt;`````````\n    已认证用户的电子邮件：\n    `&lt;div sec:authentication=&quot;principal.email&quot;&gt;``````````&lt;/div&gt;`````````\n    已认证用户的角色：\n    `&lt;div sec:authentication=&quot;principal.authorities&quot;&gt;``````````&lt;/div&gt;`````````\n`&lt;/body&gt;`\n`&lt;/html&gt;`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者，如果不使用_sec:authentication_属性，可以使用Spring表达式语言的等效语法来编写安全方言表达式。因此，如果我们更习惯使用它，我们可以使用Spring表达式语言格式来显示_firstName_字段：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>`&lt;div th:text=&quot;${#authentication.principal.firstName}&quot;&gt;``````````&lt;/div&gt;`````````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_6-结论" tabindex="-1"><a class="header-anchor" href="#_6-结论"><span>6. 结论</span></a></h2><p>在本文中，我们已经看到如何在Spring Boot应用程序中使用Spring Security的支持在Thymeleaf中显示已登录用户的信息。</p><p>像往常一样，示例的源代码可以在GitHub上找到。</p>',25),r=[a];function l(d,u){return t(),i("div",null,r)}const m=e(s,[["render",l],["__file","2024-07-16-Display Logged in User s Information in Thymeleaf.html.vue"]]),v=JSON.parse('{"path":"/posts/baeldung/2024-07-16/2024-07-16-Display%20Logged%20in%20User%20s%20Information%20in%20Thymeleaf.html","title":"在Thymeleaf中显示已登录用户信息","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Spring Security","Thymeleaf"],"tag":["Spring Security","Thymeleaf","User Information"],"head":[["meta",{"name":"keywords","content":"Spring Security, Thymeleaf, User Information Display"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-16/2024-07-16-Display%20Logged%20in%20User%20s%20Information%20in%20Thymeleaf.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"在Thymeleaf中显示已登录用户信息"}],["meta",{"property":"og:description","content":"在Thymeleaf中显示已登录用户信息 如果您正在使用Spring Security（特别是OAuth）实现，请务必查看《学习Spring安全》课程： >> 学习Spring 安全 1. 概述 在这个快速教程中，我们将看看如何 在Thymeleaf中显示已登录用户的信息。 我们将扩展我们在Spring Security与Thymeleaf文章中构建的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-16T13:14:39.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Spring Security"}],["meta",{"property":"article:tag","content":"Thymeleaf"}],["meta",{"property":"article:tag","content":"User Information"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-16T13:14:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"在Thymeleaf中显示已登录用户信息\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-16T13:14:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"在Thymeleaf中显示已登录用户信息 如果您正在使用Spring Security（特别是OAuth）实现，请务必查看《学习Spring安全》课程： >> 学习Spring 安全 1. 概述 在这个快速教程中，我们将看看如何 在Thymeleaf中显示已登录用户的信息。 我们将扩展我们在Spring Security与Thymeleaf文章中构建的..."},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. UserDetails实现","slug":"_2-userdetails实现","link":"#_2-userdetails实现","children":[]},{"level":2,"title":"3. UserDetailsService实现","slug":"_3-userdetailsservice实现","link":"#_3-userdetailsservice实现","children":[]},{"level":2,"title":"4. Spring Security配置","slug":"_4-spring-security配置","link":"#_4-spring-security配置","children":[]},{"level":2,"title":"6. 结论","slug":"_6-结论","link":"#_6-结论","children":[]}],"git":{"createdTime":1721135679000,"updatedTime":1721135679000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":3.36,"words":1009},"filePathRelative":"posts/baeldung/2024-07-16/2024-07-16-Display Logged in User s Information in Thymeleaf.md","localizedDate":"2022年4月1日","excerpt":"\\n<p>如果您正在使用Spring Security（特别是OAuth）实现，请务必查看《学习Spring安全》课程：</p>\\n<p><strong>&gt;&gt; 学习Spring</strong>\\n<strong>安全</strong></p>\\n<h2>1. 概述</h2>\\n<p>在这个快速教程中，<strong>我们将看看如何</strong> <strong>在Thymeleaf中显示已登录用户的信息</strong>。\\n我们将扩展我们在Spring Security与Thymeleaf文章中构建的项目。首先，我们将添加一个自定义模型来存储用户信息和检索它们的服务。之后，我们将使用Thymeleaf Extras模块中的Spring Security方言来显示它。</p>","autoDesc":true}');export{m as comp,v as data};
