import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,o as s,a as t}from"./app-0nXvcScy.js";const e={},p=t('<h1 id="生成包含n个重复字符的java字符串" tabindex="-1"><a class="header-anchor" href="#生成包含n个重复字符的java字符串"><span>生成包含N个重复字符的Java字符串</span></a></h1><p>在本教程中，我们将熟悉生成包含N个重复字符的<strong>字符串</strong>的不同选项。这在我们需要添加填充空白、生成ASCII艺术等时非常有用。</p><p>这个问题在JDK11中很容易解决，但如果我们使用的是早期版本，那么还有许多其他解决方案可用。我们将从最常见的方法开始，并添加一些来自第三方库的方法。</p><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><p>让我们定义所有解决方案中将使用的常量，以验证生成的字符串：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">EXPECTED_STRING</span> <span class="token operator">=</span> <span class="token string">&quot;aaaaaaa&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>所以，<code>EXPECTED_STRING</code> 常量表示我们需要在解决方案中生成的字符串。<code>N</code> 常量用于定义字符重复的次数。</p><p>现在，让我们检查生成N个字符<code>a</code>的字符串的选项。</p><h3 id="jdk11的string-repeat函数" tabindex="-1"><a class="header-anchor" href="#jdk11的string-repeat函数"><span>JDK11的<code>String.repeat</code>函数</span></a></h3><p>Java有一个<code>repeat</code>函数来构建源字符串的副本：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> newString <span class="token operator">=</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token constant">EXPECTED_STRING</span><span class="token punctuation">,</span> newString<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这允许我们重复单个字符或多字符字符串：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> newString <span class="token operator">=</span> <span class="token string">&quot;--&gt;&quot;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;--&gt;--&gt;--&gt;--&gt;--&gt;&quot;</span><span class="token punctuation">,</span> newString<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个算法背后使用循环来非常高效地填充字符数组。</p><p>如果我们没有JDK11，那么我们必须自己创建一个算法，或者使用来自第三方库的算法。这些最好的解决方案不太可能比JDK11内置解决方案更快或更容易使用。</p><h3 id="构建string的常见方法" tabindex="-1"><a class="header-anchor" href="#构建string的常见方法"><span>构建<code>String</code>的常见方法</span></a></h3><h4 id="_4-1-使用stringbuilder和for循环" tabindex="-1"><a class="header-anchor" href="#_4-1-使用stringbuilder和for循环"><span>4.1 使用<code>StringBuilder</code>和<code>for</code>循环</span></a></h4><p>让我们从<code>StringBuilder</code>类开始。我们将通过<code>for</code>循环N次来追加重复的字符：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i `<span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token class-name">String</span> newString <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token constant">EXPECTED_STRING</span><span class="token punctuation">,</span> newString<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方法可以得到我们想要的字符串。这可能是<strong>最容易理解的方法</strong>，但不一定是<strong>运行时最快的</strong>。</p><h4 id="_4-2-使用char数组和for循环" tabindex="-1"><a class="header-anchor" href="#_4-2-使用char数组和for循环"><span>4.2 使用<code>char</code>数组和<code>for</code>循环</span></a></h4><p>我们可以填充一个固定大小的<code>char</code>数组，并将其转换为字符串：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> charArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    charArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token class-name">String</span> newString <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>charArray<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token constant">EXPECTED_STRING</span><span class="token punctuation">,</span> newString<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这应该更快，因为<strong>它不需要一个动态大小的结构来存储我们构建字符串时的字符</strong>，Java可以高效地将<code>char</code>数组转换为<code>String</code>。</p><h4 id="_4-3-arrays-fill方法" tabindex="-1"><a class="header-anchor" href="#_4-3-arrays-fill方法"><span>4.3 <code>Arrays.fill</code>方法</span></a></h4><p>而不是使用循环，我们可以使用库函数来填充我们的数组：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">char</span> charToAppend <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> charArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>charArray<span class="token punctuation">,</span> charToAppend<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> newString <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>charArray<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token constant">EXPECTED_STRING</span><span class="token punctuation">,</span> newString<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>这更短，并且与之前的解决方案在运行时一样高效。</strong></p><h3 id="使用repeat方法生成字符串" tabindex="-1"><a class="header-anchor" href="#使用repeat方法生成字符串"><span>使用<code>repeat</code>方法生成字符串</span></a></h3><h4 id="_5-1-apache的repeat方法" tabindex="-1"><a class="header-anchor" href="#_5-1-apache的repeat方法"><span>5.1 Apache的<code>repeat</code>方法</span></a></h4><p>这个解决方案需要为Apache Commons库添加一个新的依赖项：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>``org.apache.commons``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>``commons-lang3``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>``3.13.0``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加这个依赖项后，我们可以使用<code>StringUtils</code>类的<code>repeat</code>方法。<strong>它接受一个字符用于重复和字符应该重复的次数作为参数</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">char</span> charToAppend <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> newString <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>charToAppend<span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token constant">EXPECTED_STRING</span><span class="token punctuation">,</span> newString<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-2-guava的repeat方法" tabindex="-1"><a class="header-anchor" href="#_5-2-guava的repeat方法"><span>5.2 Guava的<code>repeat</code>方法</span></a></h4><p>与前一种方法类似，这个解决方案需要为Guava库添加一个新的依赖项：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>``com.google.guava``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>``guava``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>``32.1.3-jre``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了它来自不同的库之外，这个解决方案与Apache Commons的解决方案是相同的：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> charToAppend <span class="token operator">=</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> newString <span class="token operator">=</span> <span class="token class-name">Strings</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>charToAppend<span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token constant">EXPECTED_STRING</span><span class="token punctuation">,</span> newString<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用ncopies方法生成字符串" tabindex="-1"><a class="header-anchor" href="#使用ncopies方法生成字符串"><span>使用<code>nCopies</code>方法生成字符串</span></a></h3><p>如果我们将目标字符串视为重复子字符串的集合，那么我们可以使用列表工具来构建列表，然后将结果列表转换为我们最终的<code>String</code>。为此，我们可以使用<code>java.util</code>包中的<code>Collections</code>类的<code>nCopies</code>方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> ``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>`` <span class="token class-name">List</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>`` <span class="token function">nCopies</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token class-name">T</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>虽然使用固定字符数组的解决方案比我们使用子字符串列表的解决方案更有效，但构建字符模式的重复而不是单个字符的重复可能很有帮助。</strong></p><h4 id="_6-1-string-join和ncopies方法" tabindex="-1"><a class="header-anchor" href="#_6-1-string-join和ncopies方法"><span>6.1 <code>String</code> <code>join</code>和<code>nCopies</code>方法</span></a></h4><p>让我们使用<code>nCopies</code>方法创建一个单字符字符串的列表，并使用<code>String.join</code>将其转换为我们的结果：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> charToAppend <span class="token operator">=</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> newString <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">nCopies</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">,</span> charToAppend<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token constant">EXPECTED_STRING</span><span class="token punctuation">,</span> newString<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>String.join</code>方法需要一个分隔符，我们在这里使用空字符串。</p><h4 id="_6-2-guava-joiner和ncopies方法" tabindex="-1"><a class="header-anchor" href="#_6-2-guava-joiner和ncopies方法"><span>6.2 Guava <code>Joiner</code>和<code>nCopies</code>方法</span></a></h4><p>Guava提供了一个替代字符串连接器，我们也可以使用：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> charToAppend <span class="token operator">=</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> newString <span class="token operator">=</span> <span class="token class-name">Joiner</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">nCopies</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">,</span> charToAppend<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token constant">EXPECTED_STRING</span><span class="token punctuation">,</span> newString<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用stream的generate方法生成字符串" tabindex="-1"><a class="header-anchor" href="#使用stream的generate方法生成字符串"><span>使用Stream的<code>generate</code>方法生成字符串</span></a></h3><p>创建子字符串列表的缺点是我们在构建最终字符串之前创建了一个潜在的大临时列表对象。</p><p>然而，自Java 8以来，我们可以使用<code>Stream</code> API的<code>generate</code>方法。<strong>结合<code>limit</code>方法（用于定义长度）和<code>collect</code>方法，我们可以生成N个重复字符的字符串</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> charToAppend <span class="token operator">=</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> newString <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> charToAppend<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token constant">EXPECTED_STRING</span><span class="token punctuation">,</span> newString<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用apache的randomstringutils" tabindex="-1"><a class="header-anchor" href="#使用apache的randomstringutils"><span>使用Apache的<code>RandomStringUtils</code></span></a></h3><p><strong>Apache Commons库中的<code>RandomStringUtils</code>类使用<code>random</code>方法可以生成N个重复字符的字符串</strong>。我们必须定义一个字符和重复次数：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> charToAppend <span class="token operator">=</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> newString <span class="token operator">=</span> <span class="token class-name">RandomStringUtils</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">,</span> charToAppend<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token constant">EXPECTED_STRING</span><span class="token punctuation">,</span> newString<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="结论" tabindex="-1"><a class="header-anchor" href="#结论"><span>结论</span></a></h3><p>在本文中，我们看到了生成N个重复字符字符串的各种解决方案。其中最简单的是<code>String.repeat</code>，从JDK 11开始可用。</p><p>对于Java的早期版本，还有许多其他可能的选项可用。最佳选择将取决于我们在运行时效率、编码便利性和库可用性方面的要求。</p><p>如往常一样，这些示例的代码可以在GitHub上找到。</p>',61),o=[p];function c(l,i){return s(),n("div",null,o)}const d=a(e,[["render",c],["__file","2024-07-22-Generating a Java String of N Repeated Characters.html.vue"]]),k=JSON.parse('{"path":"/posts/baeldung/2024-07-22/2024-07-22-Generating%20a%20Java%20String%20of%20N%20Repeated%20Characters.html","title":"生成包含N个重复字符的Java字符串","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","String Manipulation"],"tag":["Java String","Repeated Characters"],"head":[["meta",{"name":"keywords","content":"Java, String, Repeated Characters, String Manipulation"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-22/2024-07-22-Generating%20a%20Java%20String%20of%20N%20Repeated%20Characters.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"生成包含N个重复字符的Java字符串"}],["meta",{"property":"og:description","content":"生成包含N个重复字符的Java字符串 在本教程中，我们将熟悉生成包含N个重复字符的字符串的不同选项。这在我们需要添加填充空白、生成ASCII艺术等时非常有用。 这个问题在JDK11中很容易解决，但如果我们使用的是早期版本，那么还有许多其他解决方案可用。我们将从最常见的方法开始，并添加一些来自第三方库的方法。 示例 让我们定义所有解决方案中将使用的常量，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-22T17:23:59.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java String"}],["meta",{"property":"article:tag","content":"Repeated Characters"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-22T17:23:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"生成包含N个重复字符的Java字符串\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-22T17:23:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"生成包含N个重复字符的Java字符串 在本教程中，我们将熟悉生成包含N个重复字符的字符串的不同选项。这在我们需要添加填充空白、生成ASCII艺术等时非常有用。 这个问题在JDK11中很容易解决，但如果我们使用的是早期版本，那么还有许多其他解决方案可用。我们将从最常见的方法开始，并添加一些来自第三方库的方法。 示例 让我们定义所有解决方案中将使用的常量，..."},"headers":[{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":3,"title":"JDK11的String.repeat函数","slug":"jdk11的string-repeat函数","link":"#jdk11的string-repeat函数","children":[]},{"level":3,"title":"构建String的常见方法","slug":"构建string的常见方法","link":"#构建string的常见方法","children":[]},{"level":3,"title":"使用repeat方法生成字符串","slug":"使用repeat方法生成字符串","link":"#使用repeat方法生成字符串","children":[]},{"level":3,"title":"使用nCopies方法生成字符串","slug":"使用ncopies方法生成字符串","link":"#使用ncopies方法生成字符串","children":[]},{"level":3,"title":"使用Stream的generate方法生成字符串","slug":"使用stream的generate方法生成字符串","link":"#使用stream的generate方法生成字符串","children":[]},{"level":3,"title":"使用Apache的RandomStringUtils","slug":"使用apache的randomstringutils","link":"#使用apache的randomstringutils","children":[]},{"level":3,"title":"结论","slug":"结论","link":"#结论","children":[]}],"git":{"createdTime":1721669039000,"updatedTime":1721669039000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":4.76,"words":1429},"filePathRelative":"posts/baeldung/2024-07-22/2024-07-22-Generating a Java String of N Repeated Characters.md","localizedDate":"2022年4月1日","excerpt":"\\n<p>在本教程中，我们将熟悉生成包含N个重复字符的<strong>字符串</strong>的不同选项。这在我们需要添加填充空白、生成ASCII艺术等时非常有用。</p>\\n<p>这个问题在JDK11中很容易解决，但如果我们使用的是早期版本，那么还有许多其他解决方案可用。我们将从最常见的方法开始，并添加一些来自第三方库的方法。</p>\\n<h3>示例</h3>\\n<p>让我们定义所有解决方案中将使用的常量，以验证生成的字符串：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">final</span> <span class=\\"token class-name\\">String</span> <span class=\\"token constant\\">EXPECTED_STRING</span> <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"aaaaaaa\\"</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">final</span> <span class=\\"token keyword\\">int</span> <span class=\\"token class-name\\">N</span> <span class=\\"token operator\\">=</span> <span class=\\"token number\\">7</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}');export{d as comp,k as data};
