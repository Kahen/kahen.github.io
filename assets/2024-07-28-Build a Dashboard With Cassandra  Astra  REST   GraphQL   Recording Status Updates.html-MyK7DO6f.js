import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as a,a as n}from"./app-DFhKiB50.js";const s={},i=n('<hr><h1 id="使用cassandra、astra、rest和graphql构建仪表板-记录状态更新" tabindex="-1"><a class="header-anchor" href="#使用cassandra、astra、rest和graphql构建仪表板-记录状态更新"><span>使用Cassandra、Astra、REST和GraphQL构建仪表板 - 记录状态更新</span></a></h1><h2 id="_1-引言" tabindex="-1"><a class="header-anchor" href="#_1-引言"><span><strong>1. 引言</strong></span></a></h2><p>在我们之前的文章中，我们探讨了使用DataStax Astra（一个由Apache Cassandra提供支持的DBaaS，使用Stargate提供额外的API来使用它）来构建一个仪表板，用于查看复仇者联盟当前的状态。</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2021/06/cassandra-avengers-status-dashboard-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>使用Cassandra和Stargate构建的复仇者状态仪表板</p><p><strong>在本文中，我们将扩展此功能以存储离散事件，而不是汇总摘要。这将允许我们在用户界面中查看这些事件。</strong> 我们将允许用户单击单个卡片并获得一个表格，显示导致当前状态的事件。与摘要不同，这些事件将每个代表一个复仇者和一个离散的时间点。每次收到新事件时，它将被添加到表格中，与所有其他事件一起。</p><p>我们之所以选择Cassandra，是因为它提供了一种非常高效的方式来存储时间序列数据，我们写入的频率远高于读取的频率。这里的目标是一个可以频繁更新的系统——例如，每30秒更新一次——并允许用户轻松查看最近记录的事件。</p><h2 id="_2-构建数据库模式" tabindex="-1"><a class="header-anchor" href="#_2-构建数据库模式"><span><strong>2. 构建数据库模式</strong></span></a></h2><p>与我们在之前文章中使用的文档API不同，这将使用REST和GraphQL API构建。<strong>这些API在Cassandra表之上工作，并且这些API可以完全相互协作以及与CQL API协作。</strong></p><p>为了使用这些，我们需要已经定义了我们要存储数据的表的模式。我们使用的表旨在使用特定的模式——按发生的顺序查找给定复仇者的事件。</p><p>这个模式看起来如下：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>CREATE TABLE events (\n    avenger text,\n    timestamp timestamp,\n    latitude decimal,\n    longitude decimal,\n    status decimal,\n    PRIMARY KEY (avenger, timestamp)\n) WITH CLUSTERING ORDER BY (timestamp DESC);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数据看起来类似于这样：</p><table><thead><tr><th>avenger</th><th>timestamp</th><th>latitude</th><th>longitude</th><th>status</th></tr></thead><tbody><tr><td>falcon</td><td>2021-05-16 09:00:30.000000+0000</td><td>40.715255</td><td>-73.975353</td><td>0.999954</td></tr><tr><td>hawkeye</td><td>2021-05-16 09:00:30.000000+0000</td><td>40.714602</td><td>-73.975238</td><td>0.99986</td></tr><tr><td>hawkeye</td><td>2021-05-16 09:01:00.000000+0000</td><td>40.713572</td><td>-73.975289</td><td>0.999804</td></tr></tbody></table><p>这定义了我们的表具有多行分区，分区键为“avenger”，聚簇键为“timestamp”。分区键由Cassandra用于确定数据存储在哪个节点上。聚簇键用于确定数据在分区内的存储顺序。</p><p>通过指示“avenger”是我们的分区键，它将确保所有相同复仇者的数据都保持在一起。通过指示“timestamp”是我们的聚簇键，它将以最有效的顺序存储此分区内的数据。鉴于我们对这些数据的核心查询是选择单个复仇者的所有事件——我们的分区键——按事件的时间戳——我们的聚簇键——Cassandra可以让我们非常高效地访问这些数据。</p><p>此外，应用程序的设计使用方式意味着我们几乎在持续的基础上写入事件数据。例如，我们可能每30秒从每个复仇者那里获得一个新事件。以这种方式构建我们的表使其非常高效地将新事件插入到正确的分区的正确位置。</p><p>为了方便起见，我们为预填充数据库的脚本还将创建并填充此模式。</p><h2 id="_3-使用astra、rest和graphql-api构建客户端层" tabindex="-1"><a class="header-anchor" href="#_3-使用astra、rest和graphql-api构建客户端层"><span><strong>3. 使用Astra、REST和GraphQL API构建客户端层</strong></span></a></h2><p><strong>我们将使用REST和GraphQL API与Astra进行交互</strong>，用于不同的目的。REST API将用于将新事件插入表中。GraphQL API将用于再次检索它们。</p><p>为了最好地做到这一点，我们需要一个可以与Astra进行交互的客户端层。这些相当于我们在之前文章中为其他两个API构建的_DocumentClient_类。</p><h3 id="_3-1-rest客户端" tabindex="-1"><a class="header-anchor" href="#_3-1-rest客户端"><span><strong>3.1. REST客户端</strong></span></a></h3><p>首先，我们的REST客户端。<strong>我们将使用它来插入新的完整记录</strong>，因此只需要一个方法来接收要插入的数据：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>@Repository\npublic class RestClient {\n  @Value(&quot;https://${ASTRA_DB_ID}-${ASTRA_DB_REGION}.apps.astra.datastax.com/api/rest/v2/keyspaces/${ASTRA_DB_KEYSPACE}&quot;)\n  private String baseUrl;\n\n  @Value(&quot;${ASTRA_DB_APPLICATION_TOKEN}&quot;)\n  private String token;\n\n  private RestTemplate restTemplate;\n\n  public RestClient() {\n    this.restTemplate = new RestTemplate();\n    this.restTemplate.setRequestFactory(new HttpComponentsClientHttpRequestFactory());\n  }\n\n  public ```&lt;T&gt;``` void createRecord(String table, T record) {\n    var uri = UriComponentsBuilder.fromHttpUrl(baseUrl)\n      .pathSegment(table)\n      .build()\n      .toUri();\n    var request = RequestEntity.post(uri)\n      .header(&quot;X-Cassandra-Token&quot;, token)\n      .body(record);\n    restTemplate.exchange(request, Map.class);\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-graphql客户端" tabindex="-1"><a class="header-anchor" href="#_3-2-graphql客户端"><span><strong>3.2. GraphQL客户端</strong></span></a></h3><p>然后，我们的GraphQL客户端。<strong>这次我们接受一个完整的GraphQL查询并返回它获取的数据</strong>：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>@Repository\npublic class GraphqlClient {\n  @Value(&quot;https://${ASTRA_DB_ID}-${ASTRA_DB_REGION}.apps.astra.datastax.com/api/graphql/${ASTRA_DB_KEYSPACE}&quot;)\n  private String baseUrl;\n\n  @Value(&quot;${ASTRA_DB_APPLICATION_TOKEN}&quot;)\n  private String token;\n\n  private RestTemplate restTemplate;\n\n  public GraphqlClient() {\n    this.restTemplate = new RestTemplate();\n    this.restTemplate.setRequestFactory(new HttpComponentsClientHttpRequestFactory());\n  }\n\n  public ```&lt;T&gt;``` T query(String query, Class```&lt;T&gt;``` cls) {\n    var request = RequestEntity.post(baseUrl)\n      .header(&quot;X-Cassandra-Token&quot;, token)\n      .body(Map.of(&quot;query&quot;, query));\n    var response = restTemplate.exchange(request, cls);\n\n    return response.getBody();\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与之前一样，我们的_baseUrl_和_token_字段是从我们的属性中配置的，定义了如何与Astra通信。这些客户端类每个都知道如何构建与数据库交互所需的完整URL。我们可以使用它们来发出正确的HTTP请求以执行所需的操作。</p><p><strong>这就是与Astra交互所需的全部内容，因为这些API通过简单地在HTTP上交换JSON文档来工作。</strong></p><h2 id="_4-记录单个事件" tabindex="-1"><a class="header-anchor" href="#_4-记录单个事件"><span><strong>4. 记录单个事件</strong></span></a></h2><p>为了显示事件，我们需要能够记录它们。这将建立在之前更新_status_表的功能之上，并额外将新记录插入_events_表。</p><h3 id="_4-1-插入事件" tabindex="-1"><a class="header-anchor" href="#_4-1-插入事件"><span><strong>4.1. 插入事件</strong></span></a></h3><p>首先，我们需要这个表中数据的表示。这将被表示为一个Java记录：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>public record Event(String avenger,\n  String timestamp,\n  Double latitude,\n  Double longitude,\n  Double status) {}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>这直接对应于我们之前定义的模式。</strong> Jackson将在我们实际进行API调用时将此转换为REST API的正确JSON。</p><p>接下来，我们需要我们的服务层来实际记录这些。这将从外部获取适当的详细信息，用时间戳增强它们，并调用我们的REST客户端来创建新记录：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>@Service\npublic class EventsService {\n  @Autowired\n  private RestClient restClient;\n\n  public void createEvent(String avenger, Double latitude, Double longitude, Double status) {\n    var event = new Event(avenger, Instant.now().toString(), latitude, longitude, status);\n\n    restClient.createRecord(&quot;events&quot;, event);\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-更新api" tabindex="-1"><a class="header-anchor" href="#_4-2-更新api"><span><strong>4.2. 更新API</strong></span></a></h3><p>最后，我们需要一个控制器来接收事件。<strong>这是扩展我们在之前文章中编写的_UpdateController_，将其连接到新的_EventsService_，并从我们的_update_方法中调用它</strong>。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>@RestController\npublic class UpdateController {\n  ......\n\n  @Autowired\n  private EventsService eventsService;\n\n  @PostMapping(&quot;/update/{avenger}&quot;)\n  public void update(@PathVariable String avenger, @RequestBody UpdateBody body) throws Exception {\n    eventsService.createEvent(avenger, body.lat(), body.lng(), body.status());\n    statusesService.updateStatus(avenger, lookupLocation(body.lat(), body.lng()), getStatus(body.status()));\n  }\n  ......\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，对我们API的调用以记录复仇者的状态将同时更新状态文档并插入新记录到events表中。这将允许我们记录发生的每个更新事件。</p><p><strong>这意味着每次我们收到更新复仇者状态的调用时，我们都会向这个表中添加一条新记录。</strong> 实际上，我们需要通过修剪或添加额外的分区来支持存储的数据规模，但这超出了本文的范围。</p><h2 id="_5-通过graphql-api向用户显示事件" tabindex="-1"><a class="header-anchor" href="#_5-通过graphql-api向用户显示事件"><span><strong>5. 通过GraphQL API向用户显示事件</strong></span></a></h2><p>一旦我们在表中有了事件，下一步就是让用户可以使用它们。<strong>我们将使用GraphQL API来实现这一点，每次为给定的复仇者检索一页事件，始终按时间戳降序排列，以便最新的事件首先出现</strong>。</p><p>使用GraphQL，我们还可以仅检索我们实际感兴趣的字段子集，而不是全部。如果我们正在获取大量记录，这可以有助于保持有效载荷大小并因此提高性能。</p><h3 id="_5-1-检索事件" tabindex="-1"><a class="header-anchor" href="#_5-1-检索事件"><span><strong>5.1. 检索事件</strong></span></a></h3><p><strong>首先我们需要一个表示我们正在检索的数据的表示。</strong> 这是存储在表中的实际数据的一个子集。因此，我们将需要一个不同的类来表示它：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>public record EventSummary(String timestamp,\n  Double latitude,\n  Double longitude,\n  Double status) {}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们还需要一个类来表示GraphQL响应的列表。这将包括一个事件摘要列表和用于游标的下一页状态：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>public record Events(List`&lt;EventSummary&gt;` values, String pageState) {}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在我们可以在事件服务中创建一个新的方法来实际执行搜索。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>public class EventsService {\n  ......\n\n  @Autowired\n  private GraphqlClient graphqlClient;\n\n  public Events getEvents(String avenger, String offset) {\n    var query = &quot;query {&quot;\n      + &quot;  events(filter:{avenger:{eq:\\&quot;%s\\&quot;}}, orderBy:[timestamp_DESC], options:{pageSize:5, pageState:%s}) {&quot;\n      + &quot;    pageState &quot;\n      + &quot;    values {&quot;\n      + &quot;      timestamp &quot;\n      + &quot;      latitude &quot;\n      + &quot;      longitude &quot;\n      + &quot;      status&quot;\n      + &quot;    }&quot;\n      + &quot;  }&quot;\n      + &quot;}&quot;;\n\n    var fullQuery = String.format(query, avenger, offset == null ? &quot;null&quot; : &quot;\\&quot;&quot; + offset + &quot;\\&quot;&quot;);\n\n    return graphqlClient.query(fullQuery, EventsGraphqlResponse.class).data().events();\n  }\n\n  private static record EventsResponse(Events events) {}\n  private static record EventsGraphqlResponse(EventsResponse data) {}\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们有几个内部类，它们仅仅是为了表示GraphQL API返回的JSON结构到我们感兴趣的部分——这些完全是GraphQL API的产物。</p><p>然后我们有一个方法来构建我们想要的详细信息的GraphQL查询，按_avenger_字段过滤，并按_timestamp_字段降序排序。我们将实际的复仇者ID和要使用的页面状态代入其中，然后传递给我们的GraphQL客户端以获取实际数据。</p><h3 id="_5-2-在ui中显示事件" tabindex="-1"><a class="header-anchor" href="#_5-2-在ui中显示事件"><span><strong>5.2. 在UI中显示事件</strong></span></a></h3><p><strong>现在我们可以从数据库中获取事件，然后我们可以将其连接到我们的UI。</strong></p><p>首先，我们将更新我们在之前文章中编写的_StatusesController_，以支持UI端点来获取事件：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>public class StatusesController {\n  ......\n\n  @Autowired\n  private EventsService eventsService;\n\n  @GetMapping(&quot;/avenger/{avenger}&quot;)\n  public Object getAvengerStatus(@PathVariable String avenger, @RequestParam(required = false) String page) {\n    var result = new ModelAndView(&quot;dashboard&quot;);\n    result.addObject(&quot;avenger&quot;, avenger);\n    result.addObject(&quot;statuses&quot;, statusesService.getStatuses());\n    result.addObject(&quot;events&quot;, eventsService.getEvents(avenger, page));\n\n    return result;\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们需要更新我们的模板以渲染事件表。我们将在_dashboard.html_文件中添加一个新的表格，只有在从控制器接收到的模型中存在_events_对象时才会渲染：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>......\n`&lt;div th:if=&quot;${events}&quot;&gt;`\n  `&lt;div class=&quot;row&quot;&gt;`\n    `&lt;table class=&quot;table&quot;&gt;`\n      `&lt;thead&gt;`\n        `&lt;tr&gt;`\n          ````&lt;th scope=&quot;col&quot;&gt;````时间戳````&lt;/th&gt;````\n          ````&lt;th scope=&quot;col&quot;&gt;````纬度````&lt;/th&gt;````\n          ````&lt;th scope=&quot;col&quot;&gt;````经度````&lt;/th&gt;````\n          ````&lt;th scope=&quot;col&quot;&gt;````状态````&lt;/th&gt;````\n        ``&lt;/tr&gt;``\n      `&lt;/thead&gt;`\n      `&lt;tbody&gt;`\n        `&lt;tr th:each=&quot;data, iterstat : ${events.values}&quot;&gt;`\n          `&lt;th scope=&quot;row&quot; th:text=&quot;${data.timestamp}&quot;&gt;`\n          ````&lt;/td&gt;````\n          `&lt;td th:text=&quot;${data.latitude}&quot;&gt;`\n          ````&lt;/td&gt;````\n          `&lt;td th:text=&quot;${data.longitude}&quot;&gt;`\n          ````&lt;/td&gt;````\n          `&lt;td th:text=&quot;${(data.status * 100) + &#39;%&#39;}&quot;&gt;`\n          ````&lt;/td&gt;````\n        ``&lt;/tr&gt;``\n      `&lt;/tbody&gt;`\n    `&lt;/table&gt;`\n  ````&lt;/div&gt;````\n\n  `&lt;div class=&quot;row&quot; th:if=&quot;${events.pageState}&quot;&gt;`\n    `&lt;div class=&quot;col position-relative&quot;&gt;`\n      `&lt;a th:href=&quot;@{/avenger/{id}(id = ${avenger}, page = ${events.pageState})}&quot;\n        class=&quot;position-absolute top-50 start-50 translate-middle&quot;&gt;`下一页``&lt;/a&gt;``\n    ````&lt;/div&gt;````\n  ````&lt;/div&gt;````\n````&lt;/div&gt;````\n......\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这包括底部的一个链接，用于转到下一页，它从我们的事件数据中传递页面状态和我们正在查看的复仇者的ID。</p><p>最后，我们需要更新状态卡片，以便我们可以链接到此条目的事件表。这只是一个超链接，围绕每个卡片的标题，在_status.html_中渲染：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>......\n`&lt;a th:href=&quot;@{/avenger/{id}(id = ${data.avenger})}&quot;&gt;`\n  `&lt;h5 class=&quot;card-title&quot; th:text=&quot;${data.name}&quot;&gt;``&lt;/h5&gt;`\n``&lt;/a&gt;``\n......\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>现在我们可以启动应用程序，并从卡片中点击查看导致此状态的最新事件：</strong></p><figure><img src="https://www.baeldung.com/wp-content/uploads/2021/06/cassandra-avengers-status-dashboard-events.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>使用GraphQL扩展状态更新的复仇者状态仪表板</p><h2 id="_6-总结" tabindex="-1"><a class="header-anchor" href="#_6-总结"><span><strong>6. 总结</strong></span></a></h2><p><strong>在这里，我们已经看到了Astra REST和GraphQL API如何用于处理基于行的数据，以及它们如何协同工作</strong>。我们也开始看到Cassandra和这些API对于处理大量数据集的能力。</p><p>本文的所有代码都可以在GitHub上找到。</p><p>OK</p>',71),l=[i];function r(d,v){return a(),t("div",null,l)}const c=e(s,[["render",r],["__file","2024-07-28-Build a Dashboard With Cassandra  Astra  REST   GraphQL   Recording Status Updates.html.vue"]]),p=JSON.parse('{"path":"/posts/baeldung/2024-07-28/2024-07-28-Build%20a%20Dashboard%20With%20Cassandra%20%20Astra%20%20REST%20%20%20GraphQL%20%20%20Recording%20Status%20Updates.html","title":"使用Cassandra、Astra、REST和GraphQL构建仪表板 - 记录状态更新","lang":"zh-CN","frontmatter":{"date":"2021-06-01T00:00:00.000Z","category":["Cassandra","Astra","REST & GraphQL"],"tag":["DataStax Astra","Apache Cassandra","Stargate"],"head":[["meta",{"name":"keywords","content":"Cassandra, Astra, REST, GraphQL, Dashboard"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-28/2024-07-28-Build%20a%20Dashboard%20With%20Cassandra%20%20Astra%20%20REST%20%20%20GraphQL%20%20%20Recording%20Status%20Updates.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"使用Cassandra、Astra、REST和GraphQL构建仪表板 - 记录状态更新"}],["meta",{"property":"og:description","content":"使用Cassandra、Astra、REST和GraphQL构建仪表板 - 记录状态更新 1. 引言 在我们之前的文章中，我们探讨了使用DataStax Astra（一个由Apache Cassandra提供支持的DBaaS，使用Stargate提供额外的API来使用它）来构建一个仪表板，用于查看复仇者联盟当前的状态。 imgimg 使用Cassand..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.baeldung.com/wp-content/uploads/2021/06/cassandra-avengers-status-dashboard-1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-28T16:04:51.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"DataStax Astra"}],["meta",{"property":"article:tag","content":"Apache Cassandra"}],["meta",{"property":"article:tag","content":"Stargate"}],["meta",{"property":"article:published_time","content":"2021-06-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-28T16:04:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用Cassandra、Astra、REST和GraphQL构建仪表板 - 记录状态更新\\",\\"image\\":[\\"https://www.baeldung.com/wp-content/uploads/2021/06/cassandra-avengers-status-dashboard-1.png\\",\\"https://www.baeldung.com/wp-content/uploads/2021/06/cassandra-avengers-status-dashboard-events.png\\"],\\"datePublished\\":\\"2021-06-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-28T16:04:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"使用Cassandra、Astra、REST和GraphQL构建仪表板 - 记录状态更新 1. 引言 在我们之前的文章中，我们探讨了使用DataStax Astra（一个由Apache Cassandra提供支持的DBaaS，使用Stargate提供额外的API来使用它）来构建一个仪表板，用于查看复仇者联盟当前的状态。 imgimg 使用Cassand..."},"headers":[{"level":2,"title":"1. 引言","slug":"_1-引言","link":"#_1-引言","children":[]},{"level":2,"title":"2. 构建数据库模式","slug":"_2-构建数据库模式","link":"#_2-构建数据库模式","children":[]},{"level":2,"title":"3. 使用Astra、REST和GraphQL API构建客户端层","slug":"_3-使用astra、rest和graphql-api构建客户端层","link":"#_3-使用astra、rest和graphql-api构建客户端层","children":[{"level":3,"title":"3.1. REST客户端","slug":"_3-1-rest客户端","link":"#_3-1-rest客户端","children":[]},{"level":3,"title":"3.2. GraphQL客户端","slug":"_3-2-graphql客户端","link":"#_3-2-graphql客户端","children":[]}]},{"level":2,"title":"4. 记录单个事件","slug":"_4-记录单个事件","link":"#_4-记录单个事件","children":[{"level":3,"title":"4.1. 插入事件","slug":"_4-1-插入事件","link":"#_4-1-插入事件","children":[]},{"level":3,"title":"4.2. 更新API","slug":"_4-2-更新api","link":"#_4-2-更新api","children":[]}]},{"level":2,"title":"5. 通过GraphQL API向用户显示事件","slug":"_5-通过graphql-api向用户显示事件","link":"#_5-通过graphql-api向用户显示事件","children":[{"level":3,"title":"5.1. 检索事件","slug":"_5-1-检索事件","link":"#_5-1-检索事件","children":[]},{"level":3,"title":"5.2. 在UI中显示事件","slug":"_5-2-在ui中显示事件","link":"#_5-2-在ui中显示事件","children":[]}]},{"level":2,"title":"6. 总结","slug":"_6-总结","link":"#_6-总结","children":[]}],"git":{"createdTime":1722182691000,"updatedTime":1722182691000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":9.2,"words":2759},"filePathRelative":"posts/baeldung/2024-07-28/2024-07-28-Build a Dashboard With Cassandra  Astra  REST   GraphQL   Recording Status Updates.md","localizedDate":"2021年6月1日","excerpt":"<hr>\\n<h1>使用Cassandra、Astra、REST和GraphQL构建仪表板 - 记录状态更新</h1>\\n<h2><strong>1. 引言</strong></h2>\\n<p>在我们之前的文章中，我们探讨了使用DataStax Astra（一个由Apache Cassandra提供支持的DBaaS，使用Stargate提供额外的API来使用它）来构建一个仪表板，用于查看复仇者联盟当前的状态。</p>\\n<figure><img src=\\"https://www.baeldung.com/wp-content/uploads/2021/06/cassandra-avengers-status-dashboard-1.png\\" alt=\\"img\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>img</figcaption></figure>","autoDesc":true}');export{c as comp,p as data};
