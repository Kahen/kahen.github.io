import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-BwYTipZw.js";const p={},e=t(`<h1 id="在迭代期间修改流中的对象" tabindex="-1"><a class="header-anchor" href="#在迭代期间修改流中的对象"><span>在迭代期间修改流中的对象</span></a></h1><p>Java Stream API提供了多种方法，允许修改流元素。然而，这些方法中的操作必须是不干扰的和无状态的。否则，这将导致不正确的行为和输出。</p><p>在本教程中，我们将讨论在Java Stream中修改元素时常见的错误以及正确的方法。</p><h3 id="_2-1-使用-foreach-方法修改" tabindex="-1"><a class="header-anchor" href="#_2-1-使用-foreach-方法修改"><span>2.1. 使用_forEach()_方法修改</span></a></h3><p>让我们以一个_Person_类列表为例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> email<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 标准的getter和setter...</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将在流中修改_Person_元素的电子邮件ID并将其转换为大写。</p><h3 id="_2-2-使用-peek-方法修改" tabindex="-1"><a class="header-anchor" href="#_2-2-使用-peek-方法修改"><span>2.2. 使用_peek()_方法修改</span></a></h3><p>现在让我们看看_peek()_方法。我们经常倾向于使用它来修改流中元素的属性。</p><h3 id="_2-3-使用-map-方法修改" tabindex="-1"><a class="header-anchor" href="#_2-3-使用-map-方法修改"><span>2.3. 使用_map()_方法修改</span></a></h3><p>_forEach()_是一个流管道的终端操作。然而，_map()_像_peek()<em>一样是一个中间操作，它返回一个_Stream</em>。在_map()_中，我们将创建一个新的大写电子邮件的_Person_对象，然后将其收集到一个新的列表中。</p><h3 id="_3-1-使用-foreach-方法移除元素" tabindex="-1"><a class="header-anchor" href="#_3-1-使用-foreach-方法移除元素"><span>3.1. 使用_forEach()_方法移除元素</span></a></h3><p>如果我们想从流中移除一些元素呢？例如，让我们从列表中移除名叫_John_的人：</p><h3 id="_3-2-使用-copyonwritearraylist-移除元素" tabindex="-1"><a class="header-anchor" href="#_3-2-使用-copyonwritearraylist-移除元素"><span>3.2. 使用_CopyOnWriteArrayList_移除元素</span></a></h3><p>_CopyOnWriteArrayList_是_ArrayList_的线程安全版本。在迭代时可以移除元素：</p><h3 id="_3-3-使用-filter-方法移除元素" tabindex="-1"><a class="header-anchor" href="#_3-3-使用-filter-方法移除元素"><span>3.3. 使用_filter()_方法移除元素</span></a></h3><p>Java Stream API提供了_filter()_方法，以更优雅的方式移除元素。</p><h2 id="_4-结论" tabindex="-1"><a class="header-anchor" href="#_4-结论"><span>4. 结论</span></a></h2><p>在本文中，我们探讨了在流中正确修改元素的方法。重要的是，管道处理应该是不干扰的和无状态的。否则，这可能导致意想不到的结果。</p><p>如常，本文中使用的代码可以在GitHub上找到。--- date: 2022-04-01 category:</p><ul><li>Java</li><li>Stream API tag:</li><li>Stream</li><li>Java</li><li>修改 head:</li><li><ul><li>meta</li><li>name: keywords content: Java, Stream API, 修改, 迭代</li></ul></li></ul><hr><h1 id="在迭代期间修改流中的对象-1" tabindex="-1"><a class="header-anchor" href="#在迭代期间修改流中的对象-1"><span>在迭代期间修改流中的对象</span></a></h1><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>Java Stream API提供了多种方法，允许对流中的元素进行修改。然而，这些方法中的操作必须是不干扰的和无状态的。否则，这将导致不正确的行为和输出。</p><p>在本教程中，我们将讨论在Java Stream中修改元素时常见的错误以及正确的方法。</p><h2 id="修改流元素的状态" tabindex="-1"><a class="header-anchor" href="#修改流元素的状态"><span>修改流元素的状态</span></a></h2><p>让我们以一个<code>Person</code>类列表为例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> email<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 标准的getter和setter...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将在流中修改<code>Person</code>元素的电子邮件地址，并将其转换为大写。</p><h3 id="使用foreach-方法修改" tabindex="-1"><a class="header-anchor" href="#使用foreach-方法修改"><span>使用<code>forEach()</code>方法修改</span></a></h3><p>让我们首先使用<code>forEach()</code>方法，通过简单地使用此方法迭代列表来进行修改：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenPersonList_whenUpdatePersonEmailByInterferingWithForEach_thenPersonEmailUpdated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    personList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> e<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    personList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token function">assertEquals</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述方法中，我们在迭代<code>Person</code>对象列表时，将每个元素的电子邮件地址转换为大写。<strong>这看起来是合法的，但它违反了不干扰原则。这意味着在流管道中，我们永远不应该修改原始源。</strong></p><p>除非流源是并发的，否则在执行流管道期间修改流的数据源<strong>可能会导致异常、错误的答案或不符合规范的行为</strong>。</p><h3 id="使用peek-方法修改" tabindex="-1"><a class="header-anchor" href="#使用peek-方法修改"><span>使用<code>peek()</code>方法修改</span></a></h3><p>现在让我们看看<code>peek()</code>方法。我们经常倾向于使用它来修改流中元素的属性：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenPersonList_whenUpdatePersonEmailByInterferingWithPeek_thenPersonEmailUpdated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    personList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> e<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    personList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token function">assertEquals</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次，<strong>通过更新源<code>personList</code>，我们重复了前面部分提到的错误。</strong></p><h3 id="使用map-方法修改" tabindex="-1"><a class="header-anchor" href="#使用map-方法修改"><span>使用<code>map()</code>方法修改</span></a></h3><p><code>forEach()</code>是一个流管道的终端操作。然而，<code>map()</code>像<code>peek()</code>一样是一个中间操作，它返回一个<code>Stream</code>。在<code>map()</code>中，我们将创建一个新的大写电子邮件的<code>Person</code>对象，然后将其收集到一个新的列表中：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenPersonList_whenUpdatePersonEmailWithMapMethod_thenPersonEmailUpdated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span>\`\`\` newPersonList <span class="token operator">=</span> personList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    newPersonList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token function">assertEquals</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述方法中，我们没有修改原始列表。相反，我们从中创建了一个新的列表<code>newPersonList</code>。因此，它是不干扰的。它也是无状态的，因为其中的操作结果不会相互影响。大多数情况下，它们独立操作。这些原则无论是否是顺序或并行处理都是推荐的。</p><p>考虑到<strong>不可变性是函数式编程的本质之一</strong>，我们可以尝试创建一个不可变的<code>Person</code>类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImmutablePerson</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ImmutablePerson</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> email<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">ImmutablePerson</span> <span class="token function">withEmail</span><span class="token punctuation">(</span><span class="token class-name">String</span> email<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ImmutablePerson</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 标准的getter</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ImmutablePerson</code>类没有任何setter方法。然而，它提供了一个<code>withEmail()</code>方法，返回一个新的大写电子邮件的<code>ImmutablePerson</code>。</p><p>现在，让我们在修改流中的元素时使用它：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenPersonList_whenUpdateImmutablePersonEmailWithMapMethod_thenPersonEmailUpdated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ImmutablePerson</span><span class="token punctuation">&gt;</span></span>\` newImmutablePersonList <span class="token operator">=</span> immutablePersonList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> e<span class="token punctuation">.</span><span class="token function">withEmail</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    newImmutablePersonList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token function">assertEquals</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过这种方式，我们强制执行了不干扰原则。</p><h2 id="从流中移除元素" tabindex="-1"><a class="header-anchor" href="#从流中移除元素"><span>从流中移除元素</span></a></h2><p>在流中执行结构性更改甚至更加棘手。这比修改操作成本更高，因此<strong>如果不小心，可能会导致不一致和不期望的结果</strong>。让我们更详细地探讨这一点。</p><h3 id="使用foreach-方法移除元素" tabindex="-1"><a class="header-anchor" href="#使用foreach-方法移除元素"><span>使用<code>forEach()</code>方法移除元素</span></a></h3><p>如果我们想从流中移除一些元素呢？例如，让我们从列表中移除名叫John的人：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenPersonList_whenRemoveWhileIterating_thenThrowException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertThrows</span><span class="token punctuation">(</span><span class="token class-name">NullPointerException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        personList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                personList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们尝试在迭代时使用<code>forEach()</code>方法修改列表的结构。令人惊讶的是，这导致了<code>NullPointerException</code>，而<code>ArrayList</code>中的<code>forEach()</code>则抛出<code>ConcurrentModificationException</code>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenPersonList_whenRemoveWhileIteratingWithForEach_thenThrowException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertThrows</span><span class="token punctuation">(</span><span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        personList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                personList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用copyonwritearraylist移除元素" tabindex="-1"><a class="header-anchor" href="#使用copyonwritearraylist移除元素"><span>使用<code>CopyOnWriteArrayList</code>移除元素</span></a></h3><p><code>CopyOnWriteArrayList</code>是<code>ArrayList</code>的线程安全版本。在迭代时可以移除元素：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenPersonList_whenRemoveWhileIterating_thenPersonRemoved</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> personList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">CopyOnWriteArrayList</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span>\`\`\` cps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>personList<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cps<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cps<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> cps<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>它可以防止多个线程之间的干扰，但由于每次写操作都会创建一个快照，因此成本太高。</strong></p><h3 id="使用filter-方法移除元素" tabindex="-1"><a class="header-anchor" href="#使用filter-方法移除元素"><span>使用<code>filter()</code>方法移除元素</span></a></h3><p><strong>Java Stream API提供了<code>filter()</code>方法，以更优雅的方式移除元素</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenPersonList_whenRemovePersonWithFilter_thenPersonRemoved</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> personList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">List</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span>\`\`\` newPersonList <span class="token operator">=</span> personList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token operator">!</span>e<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> newPersonList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述方法中，<code>filter()</code>只允许那些名字不是John的<code>Person</code>对象在管道中继续前进。同样，filter方法中使用的谓词应该是不干扰的和无状态的。<strong>它看起来更简单，易于理解和调试。</strong></p><h2 id="结论" tabindex="-1"><a class="header-anchor" href="#结论"><span>结论</span></a></h2><p>在本文中，我们探讨了在流中正确修改元素的方法。重要的是，管道处理应该是不干扰的和无状态的。否则，这可能导致意想不到的结果。</p><p>如常，本文中使用的代码可以在GitHub上找到。</p><p>OK</p>`,68),o=[e];function c(i,l){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","2024-06-27-Modifying Objects Within Stream While Iterating.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-06-27/2024-06-27-Modifying%20Objects%20Within%20Stream%20While%20Iterating.html","title":"在迭代期间修改流中的对象","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","Stream API"],"tag":["Stream","Java","修改"],"head":[["meta",{"name":"keywords","content":"Java, Stream API, 修改, 迭代"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-06-27/2024-06-27-Modifying%20Objects%20Within%20Stream%20While%20Iterating.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"在迭代期间修改流中的对象"}],["meta",{"property":"og:description","content":"在迭代期间修改流中的对象 Java Stream API提供了多种方法，允许修改流元素。然而，这些方法中的操作必须是不干扰的和无状态的。否则，这将导致不正确的行为和输出。 在本教程中，我们将讨论在Java Stream中修改元素时常见的错误以及正确的方法。 2.1. 使用_forEach()_方法修改 让我们以一个_Person_类列表为例： 我们将在..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-27T20:52:41.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Stream"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"修改"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-27T20:52:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"在迭代期间修改流中的对象\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-27T20:52:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"在迭代期间修改流中的对象 Java Stream API提供了多种方法，允许修改流元素。然而，这些方法中的操作必须是不干扰的和无状态的。否则，这将导致不正确的行为和输出。 在本教程中，我们将讨论在Java Stream中修改元素时常见的错误以及正确的方法。 2.1. 使用_forEach()_方法修改 让我们以一个_Person_类列表为例： 我们将在..."},"headers":[{"level":3,"title":"2.1. 使用_forEach()_方法修改","slug":"_2-1-使用-foreach-方法修改","link":"#_2-1-使用-foreach-方法修改","children":[]},{"level":3,"title":"2.2. 使用_peek()_方法修改","slug":"_2-2-使用-peek-方法修改","link":"#_2-2-使用-peek-方法修改","children":[]},{"level":3,"title":"2.3. 使用_map()_方法修改","slug":"_2-3-使用-map-方法修改","link":"#_2-3-使用-map-方法修改","children":[]},{"level":3,"title":"3.1. 使用_forEach()_方法移除元素","slug":"_3-1-使用-foreach-方法移除元素","link":"#_3-1-使用-foreach-方法移除元素","children":[]},{"level":3,"title":"3.2. 使用_CopyOnWriteArrayList_移除元素","slug":"_3-2-使用-copyonwritearraylist-移除元素","link":"#_3-2-使用-copyonwritearraylist-移除元素","children":[]},{"level":3,"title":"3.3. 使用_filter()_方法移除元素","slug":"_3-3-使用-filter-方法移除元素","link":"#_3-3-使用-filter-方法移除元素","children":[]},{"level":2,"title":"4. 结论","slug":"_4-结论","link":"#_4-结论","children":[]},{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"修改流元素的状态","slug":"修改流元素的状态","link":"#修改流元素的状态","children":[{"level":3,"title":"使用forEach()方法修改","slug":"使用foreach-方法修改","link":"#使用foreach-方法修改","children":[]},{"level":3,"title":"使用peek()方法修改","slug":"使用peek-方法修改","link":"#使用peek-方法修改","children":[]},{"level":3,"title":"使用map()方法修改","slug":"使用map-方法修改","link":"#使用map-方法修改","children":[]}]},{"level":2,"title":"从流中移除元素","slug":"从流中移除元素","link":"#从流中移除元素","children":[{"level":3,"title":"使用forEach()方法移除元素","slug":"使用foreach-方法移除元素","link":"#使用foreach-方法移除元素","children":[]},{"level":3,"title":"使用CopyOnWriteArrayList移除元素","slug":"使用copyonwritearraylist移除元素","link":"#使用copyonwritearraylist移除元素","children":[]},{"level":3,"title":"使用filter()方法移除元素","slug":"使用filter-方法移除元素","link":"#使用filter-方法移除元素","children":[]}]},{"level":2,"title":"结论","slug":"结论","link":"#结论","children":[]}],"git":{"createdTime":1719521561000,"updatedTime":1719521561000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":5.84,"words":1753},"filePathRelative":"posts/baeldung/2024-06-27/2024-06-27-Modifying Objects Within Stream While Iterating.md","localizedDate":"2022年4月1日","excerpt":"\\n<p>Java Stream API提供了多种方法，允许修改流元素。然而，这些方法中的操作必须是不干扰的和无状态的。否则，这将导致不正确的行为和输出。</p>\\n<p>在本教程中，我们将讨论在Java Stream中修改元素时常见的错误以及正确的方法。</p>\\n<h3>2.1. 使用_forEach()_方法修改</h3>\\n<p>让我们以一个_Person_类列表为例：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Person</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">String</span> name<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">String</span> email<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">Person</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> name<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">String</span> email<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>name <span class=\\"token operator\\">=</span> name<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>email <span class=\\"token operator\\">=</span> email<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token comment\\">// 标准的getter和setter...</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n</code></pre></div>","autoDesc":true}');export{k as comp,d as data};
