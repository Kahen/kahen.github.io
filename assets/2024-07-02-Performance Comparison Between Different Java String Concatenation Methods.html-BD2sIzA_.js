import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-DP78wUIH.js";const e={},p=t('<h1 id="java中不同字符串连接方法的性能比较" tabindex="-1"><a class="header-anchor" href="#java中不同字符串连接方法的性能比较"><span>Java中不同字符串连接方法的性能比较</span></a></h1><p>在Java中，字符串连接是文本操作中常见的操作。然而，你选择连接字符串的方式可能会对你的应用程序性能产生重大影响。<strong>理解不同的连接方法及其性能特性对于编写高效和优化的代码至关重要。</strong></p><p>在本教程中，<strong>我们将深入探讨Java中的不同字符串连接方法。我们将使用JHM工具对这些方法的执行时间进行基准测试和比较。</strong></p><h2 id="_2-基准测试" tabindex="-1"><a class="header-anchor" href="#_2-基准测试"><span>2. 基准测试</span></a></h2><p>我们将采用JMH（Java Microbenchmark Harness）进行我们的基准测试。<strong>JMH提供了一个框架，用于测量小代码片段的性能，使开发人员能够分析和比较不同的实现。</strong></p><p>在我们继续之前，让我们设置我们的环境来运行基准测试。Core和Annotation Processors都可以在Maven Central中找到。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>``org.openjdk.jmh``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>``jmh-core``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>``1.37``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>``org.openjdk.jmh``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>``jmh-generator-annprocess``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>``1.37``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-不可变字符串连接" tabindex="-1"><a class="header-anchor" href="#_3-不可变字符串连接"><span>3. 不可变字符串连接</span></a></h2><p>不可变字符串连接涉及为每次连接操作创建一个新的不可变_String_实例。每次发生连接时，都会生成一个新的字符串对象。<strong>这种方法简单直接，但由于创建了多个对象，可能在内存效率上较低。</strong></p><p>现在，让我们快速看看各种不可变方法：</p><h3 id="_3-1-使用加法-运算符" tabindex="-1"><a class="header-anchor" href="#_3-1-使用加法-运算符"><span>3.1. 使用加法(+)运算符</span></a></h3><p>这是最简单的方式，可能也是我们最熟悉的方式。它可以使用加法+运算符连接字符串字面量、变量或两者的组合：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">&quot;String&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">&quot;Concat&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> result <span class="token operator">=</span> str1 <span class="token operator">+</span> str2<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-使用-concat-方法" tabindex="-1"><a class="header-anchor" href="#_3-2-使用-concat-方法"><span>3.2. 使用_concat()_方法</span></a></h3><p>_concat()_方法由_String_类提供，可用于连接两个字符串：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">&quot;String&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">&quot;Concat&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> result <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-使用-string-join-方法" tabindex="-1"><a class="header-anchor" href="#_3-3-使用-string-join-方法"><span>3.3. 使用_String.join()_方法</span></a></h3><p>_String.join()_是Java 8及以上版本中的一个新静态方法。它允许使用指定的分隔符连接多个字符串：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">&quot;String&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">&quot;Concat&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-使用-string-format-方法" tabindex="-1"><a class="header-anchor" href="#_3-4-使用-string-format-方法"><span>3.4. 使用_String.format()_方法</span></a></h3><p>_String.format()_用于使用占位符和格式说明符格式化字符串。它允许你通过用实际值替换占位符来创建格式化的字符串：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">&quot;String&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">&quot;Concat&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%s%s&quot;</span><span class="token punctuation">,</span> str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-5-使用java-stream-api" tabindex="-1"><a class="header-anchor" href="#_3-5-使用java-stream-api"><span>3.5. 使用Java <em>Stream</em> API</span></a></h3><p>最后，我们来看看Java <em>Stream</em> API，它也从Java 8开始可用。它提供了一种表达方式，用于对对象集合执行操作，并允许我们使用_Collectors.joining()_连接字符串：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>` strList <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;String&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Concat&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> result <span class="token operator">=</span> strList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-可变字符串连接" tabindex="-1"><a class="header-anchor" href="#_4-可变字符串连接"><span>4. 可变字符串连接</span></a></h2><p>现在让我们转向可变类别。这指的是使用可变字符序列连接字符串的过程，其中底层对象可以被修改以追加或插入字符。<strong>可变连接是高效的，不需要为每个操作创建新对象。</strong></p><p>让我们看看可用的可变方法：</p><h3 id="_4-1-使用-stringbuffer" tabindex="-1"><a class="header-anchor" href="#_4-1-使用-stringbuffer"><span>4.1. 使用_StringBuffer_</span></a></h3><p>_StringBuffer_提供了一个可变字符序列。它允许动态操作字符串而不需要创建新对象。值得一提的是，<strong>它被设计为线程安全的</strong>，这意味着它可以被多个线程同时安全访问和修改：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">StringBuffer</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nbuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;String&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nbuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;Concat&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> result <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-使用-stringbuilder" tabindex="-1"><a class="header-anchor" href="#_4-2-使用-stringbuilder"><span>4.2. 使用_StringBuilder_</span></a></h3><p>_StringBuilder_与_StringBuffer_具有相同的目的。它们之间的唯一区别是**_StringBuilder_不是线程安全的**，而_StringBuffer_是。<strong>它非常适合单线程场景，其中线程安全性不是问题：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nbuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;String&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nbuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;Concat&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> result <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-使用-stringjoiner" tabindex="-1"><a class="header-anchor" href="#_4-3-使用-stringjoiner"><span>4.3. 使用_StringJoiner_</span></a></h3><p>_StringJoiner_是Java 8及以上版本中的一个新类。它的功能与_StringBuilder_相似，提供了一种使用分隔符连接多个字符串的方式。虽然它与_StringBuilder_相同，<strong>_StringJoiner_不是线程安全的：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">StringJoiner</span> joiner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringJoiner</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\njoiner<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;String&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\njoiner<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;Concat&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> result <span class="token operator">=</span> joiner<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-性能评估" tabindex="-1"><a class="header-anchor" href="#_5-性能评估"><span>5. 性能评估</span></a></h2><p>在这一部分，我们将在不同场景下评估不同字符串连接方法的性能，包括循环迭代和批量处理。</p><h3 id="_5-1-循环迭代" tabindex="-1"><a class="header-anchor" href="#_5-1-循环迭代"><span>5.1. 循环迭代</span></a></h3><p>我们将在循环中评估字符串连接性能，其中字符串会重复连接。在这种情况下，我们将评估不同方法在不同迭代次数下的性能。</p><p>我们将使用不同的迭代次数（100、1000和10000）进行测试，以查看计算时间如何随着迭代次数的增加而扩展。让我们从不可变方法开始：</p><table><thead><tr><th>方法</th><th>迭代次数</th></tr></thead><tbody><tr><td>加法(+)运算符</td><td>3.369</td></tr><tr><td>concat()方法</td><td>3.479</td></tr><tr><td>String.join()方法</td><td>4.809</td></tr><tr><td>String.format()方法</td><td>19.831</td></tr><tr><td>流API</td><td>10.253</td></tr></tbody></table><p>现在，我们可以看到可变方法的性能：</p><table><thead><tr><th>方法</th><th>迭代次数</th></tr></thead><tbody><tr><td>StringBuffer</td><td>1.326</td></tr><tr><td>StringBuilder</td><td>0.512</td></tr><tr><td>StringJoiner</td><td>0.569</td></tr></tbody></table><p>从上面的数字中，我们可以观察到这些类别在计算时间随着迭代次数增加时的明显行为差异。</p><p><strong>在可变类别中，计算时间随着数据大小线性增加。而在不可变类别中，计算时间呈指数增长。连接操作增加十倍，计算时间增加一百倍。</strong></p><p>我们还可以观察到，可变类别中的大多数方法显示出相似的计算时间，除了_String.format()_。它明显比其他方法慢，需要花费几倍的时间。<strong>这种显著的性能差异可以归因于_String.format()_执行的额外解析和替换操作。</strong></p><p>在不可变类别中，_StringBuilder_是最快的选项，因为它没有与_StringBuffer_相比的同步开销。另一方面，<em>StringJoiner_的性能略慢于_StringBuilder</em>，因为它每次连接时都需要追加分隔符。</p><h3 id="_5-2-批量处理" tabindex="-1"><a class="header-anchor" href="#_5-2-批量处理"><span>5.2. 批量处理</span></a></h3><p>让我们通过一些方法来处理在可变类别中一次性连接多于2个字符串的方法。下面的例子说明了单个_String.join()_与5个连接：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> str1<span class="token punctuation">,</span> str2<span class="token punctuation">,</span> str3<span class="token punctuation">,</span> str4<span class="token punctuation">,</span> str5<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们将在这一部分访问这些方法的性能。与前一节类似，我们将在批量中运行不同数量的连接测试（100、1000和10000）：</p><table><thead><tr><th>方法</th><th>连接数量</th></tr></thead><tbody><tr><td>加法(+)运算符</td><td>0.777</td></tr><tr><td>String.join()方法</td><td>0.820</td></tr><tr><td>String.format()方法</td><td>3.871</td></tr><tr><td>流API</td><td>2.019</td></tr></tbody></table><p>当我们批量连接字符串时，我们观察到计算时间线性增长。再次，_String.format()_再次排在最后，这是意料之中的，由于额外的解析开销。</p><h2 id="_6-结论" tabindex="-1"><a class="header-anchor" href="#_6-结论"><span>6. 结论</span></a></h2><p>在本文中，我们探讨了Java中的不同字符串连接方法，并使用JMH评估了它们的性能。</p><p>我们通过循环迭代的性能评估观察到可变和不可变类别之间的明显行为差异。可变类别中的计算时间随着数据大小线性增加，而不可变类别显示出指数增长。<strong>由于规模模式，我们应该在循环中连接字符串时采用可变方法。</strong></p><p>在我们介绍的所有方法中，<strong>_StringBuilder_是最快速的，而_String.format()_是最慢的</strong>，这是由于它的额外解析和替换操作。</p><p>像往常一样，所有的源代码都可以在GitHub上找到。我已经完成了翻译，以下是翻译的最后部分：</p><h2 id="_6-结论-1" tabindex="-1"><a class="header-anchor" href="#_6-结论-1"><span>6. 结论</span></a></h2><p>在本文中，我们探讨了Java中的不同字符串连接方法，并使用JMH评估了它们的性能。</p><p>我们通过循环迭代的性能评估观察到可变和不可变类别之间的明显行为差异。可变类别中的计算时间随着数据大小线性增加，而不可变类别显示出指数增长。<strong>由于规模模式，我们应该在循环中连接字符串时采用可变方法。</strong></p><p>在我们介绍的所有方法中，<strong>_StringBuilder_是最快速的，而_String.format()_是最慢的</strong>，这是由于它的额外解析和替换操作。</p><p>像往常一样，所有的源代码都可以在GitHub上找到。</p><p>OK</p>',66),o=[p];function i(c,l){return s(),a("div",null,o)}const d=n(e,[["render",i],["__file","2024-07-02-Performance Comparison Between Different Java String Concatenation Methods.html.vue"]]),g=JSON.parse('{"path":"/posts/baeldung/2024-07-02/2024-07-02-Performance%20Comparison%20Between%20Different%20Java%20String%20Concatenation%20Methods.html","title":"Java中不同字符串连接方法的性能比较","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","性能比较"],"tag":["Java","字符串连接","性能"],"head":[["meta",{"name":"keywords","content":"Java, 字符串连接, 性能比较, JMH, StringBuffer, StringBuilder, String.format(), 流API"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-02/2024-07-02-Performance%20Comparison%20Between%20Different%20Java%20String%20Concatenation%20Methods.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Java中不同字符串连接方法的性能比较"}],["meta",{"property":"og:description","content":"Java中不同字符串连接方法的性能比较 在Java中，字符串连接是文本操作中常见的操作。然而，你选择连接字符串的方式可能会对你的应用程序性能产生重大影响。理解不同的连接方法及其性能特性对于编写高效和优化的代码至关重要。 在本教程中，我们将深入探讨Java中的不同字符串连接方法。我们将使用JHM工具对这些方法的执行时间进行基准测试和比较。 2. 基准测试..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-02T18:55:17.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"字符串连接"}],["meta",{"property":"article:tag","content":"性能"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-02T18:55:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java中不同字符串连接方法的性能比较\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-02T18:55:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Java中不同字符串连接方法的性能比较 在Java中，字符串连接是文本操作中常见的操作。然而，你选择连接字符串的方式可能会对你的应用程序性能产生重大影响。理解不同的连接方法及其性能特性对于编写高效和优化的代码至关重要。 在本教程中，我们将深入探讨Java中的不同字符串连接方法。我们将使用JHM工具对这些方法的执行时间进行基准测试和比较。 2. 基准测试..."},"headers":[{"level":2,"title":"2. 基准测试","slug":"_2-基准测试","link":"#_2-基准测试","children":[]},{"level":2,"title":"3. 不可变字符串连接","slug":"_3-不可变字符串连接","link":"#_3-不可变字符串连接","children":[{"level":3,"title":"3.1. 使用加法(+)运算符","slug":"_3-1-使用加法-运算符","link":"#_3-1-使用加法-运算符","children":[]},{"level":3,"title":"3.2. 使用_concat()_方法","slug":"_3-2-使用-concat-方法","link":"#_3-2-使用-concat-方法","children":[]},{"level":3,"title":"3.3. 使用_String.join()_方法","slug":"_3-3-使用-string-join-方法","link":"#_3-3-使用-string-join-方法","children":[]},{"level":3,"title":"3.4. 使用_String.format()_方法","slug":"_3-4-使用-string-format-方法","link":"#_3-4-使用-string-format-方法","children":[]},{"level":3,"title":"3.5. 使用Java Stream API","slug":"_3-5-使用java-stream-api","link":"#_3-5-使用java-stream-api","children":[]}]},{"level":2,"title":"4. 可变字符串连接","slug":"_4-可变字符串连接","link":"#_4-可变字符串连接","children":[{"level":3,"title":"4.1. 使用_StringBuffer_","slug":"_4-1-使用-stringbuffer","link":"#_4-1-使用-stringbuffer","children":[]},{"level":3,"title":"4.2. 使用_StringBuilder_","slug":"_4-2-使用-stringbuilder","link":"#_4-2-使用-stringbuilder","children":[]},{"level":3,"title":"4.3. 使用_StringJoiner_","slug":"_4-3-使用-stringjoiner","link":"#_4-3-使用-stringjoiner","children":[]}]},{"level":2,"title":"5. 性能评估","slug":"_5-性能评估","link":"#_5-性能评估","children":[{"level":3,"title":"5.1. 循环迭代","slug":"_5-1-循环迭代","link":"#_5-1-循环迭代","children":[]},{"level":3,"title":"5.2. 批量处理","slug":"_5-2-批量处理","link":"#_5-2-批量处理","children":[]}]},{"level":2,"title":"6. 结论","slug":"_6-结论","link":"#_6-结论","children":[]},{"level":2,"title":"6. 结论","slug":"_6-结论-1","link":"#_6-结论-1","children":[]}],"git":{"createdTime":1719946517000,"updatedTime":1719946517000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":6.86,"words":2059},"filePathRelative":"posts/baeldung/2024-07-02/2024-07-02-Performance Comparison Between Different Java String Concatenation Methods.md","localizedDate":"2022年4月1日","excerpt":"\\n<p>在Java中，字符串连接是文本操作中常见的操作。然而，你选择连接字符串的方式可能会对你的应用程序性能产生重大影响。<strong>理解不同的连接方法及其性能特性对于编写高效和优化的代码至关重要。</strong></p>\\n<p>在本教程中，<strong>我们将深入探讨Java中的不同字符串连接方法。我们将使用JHM工具对这些方法的执行时间进行基准测试和比较。</strong></p>\\n<h2>2. 基准测试</h2>\\n<p>我们将采用JMH（Java Microbenchmark Harness）进行我们的基准测试。<strong>JMH提供了一个框架，用于测量小代码片段的性能，使开发人员能够分析和比较不同的实现。</strong></p>","autoDesc":true}');export{d as comp,g as data};
