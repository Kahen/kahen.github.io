import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as a,a as n}from"./app-BTwZI-W8.js";const s={},i=n('<hr><h1 id="使用cassandra-astra和stargate构建仪表板" tabindex="-1"><a class="header-anchor" href="#使用cassandra-astra和stargate构建仪表板"><span>使用Cassandra, Astra和Stargate构建仪表板</span></a></h1><p>在本文中，我们将构建“托尼·斯塔克的复仇者状态仪表板”，复仇者联盟用来监控团队成员状态的仪表板。</p><p><strong>这将使用DataStax Astra构建，这是一个由Apache Cassandra提供支持的DBaaS，使用Stargate提供额外的API来使用它。</strong> 在此基础上，我们将使用Spring Boot应用程序来呈现仪表板并显示正在发生的情况。</p><p>我们将使用Java 16构建此项目，因此在继续之前，请确保已经安装并准备好使用。</p><h2 id="_2-什么是astra" tabindex="-1"><a class="header-anchor" href="#_2-什么是astra"><span>2. 什么是Astra？</span></a></h2><p>DataStax Astra是一个由Apache Cassandra提供支持的数据库即服务产品。<strong>这为我们提供了一个完全托管、完全管理的Cassandra数据库，我们可以用它来存储数据，包括Cassandra提供的所有可扩展性、高可用性和性能。</strong></p><p>除此之外，Astra还整合了Stargate数据平台，该平台通过不同的API暴露相同的底层数据。这使我们可以使用REST和GraphQL API访问传统的Cassandra表——这两种API都是100%兼容的，并且与传统的CQL API兼容。这些可以使我们的数据访问非常灵活，只需要一个标准的HTTP客户端——例如Spring的_RestTemplate_。</p><p>它还提供了一个JSON文档API，允许更灵活的数据访问。有了这个API，就不需要模式，并且每个记录都可以是不同的形状，如果需要的话。此外，记录可以尽可能复杂，支持JSON的全部功能来表示数据。</p><p>但这确实带来了成本——文档API与其他API不互换，因此重要的是事先决定如何建模数据以及使用哪些API来访问它。</p><h2 id="_3-我们的应用程序数据模型" tabindex="-1"><a class="header-anchor" href="#_3-我们的应用程序数据模型"><span>3. 我们的应用程序数据模型</span></a></h2><p><strong>我们正在围绕Cassandra上的Astra系统构建我们的系统。这将直接影响我们建模数据的方式。</strong></p><p>Cassandra旨在允许大量数据具有非常高的吞吐量，并且以表格形式存储记录。Astra增加了一些替代API——REST和GraphQL——以及使用文档API表示文档以及简单的表格数据的能力。</p><p>这仍然是由Cassandra支持的，它以不同的方式进行模式设计。在现代系统中，空间不再是限制。数据复制变得不再是问题，消除了跨集合或数据分区的连接的需求。这意味着我们可以在我们的集合中为我们的需求非规范化我们的数据。</p><p><strong>因此，我们的数据模型将围绕两个集合——_events_和_statuses_构建。</strong> _events_集合是曾经发生过的每个状态事件的记录——这可能变得非常大，这是Cassandra的理想选择。这将在下一篇文章中更详细地介绍。</p><p>这个集合中的记录如下所示：</p><table><thead><tr><th>avenger</th><th>falcon</th></tr></thead><tbody><tr><td>timestamp</td><td>2021-04-02T14:23:12Z</td></tr><tr><td>latitude</td><td>40.714558</td></tr><tr><td>longitude</td><td>-73.975029</td></tr><tr><td>status</td><td>0.72</td></tr></tbody></table><p>这为我们提供了一个单独的事件更新，提供了确切的时间戳和更新的位置以及复仇者状态的百分比值。</p><p>_statuses_集合包含一个包含仪表板数据的单个文档，这是对输入到_events_集合中的数据的非规范化、汇总视图。这个文档看起来类似于这样：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>{\n    &quot;falcon&quot;: {\n{        &quot;realName&quot;: &quot;Sam Wilson&quot;}\n{        &quot;location&quot;: &quot;New York&quot;}\n{        &quot;status&quot;: &quot;INJURED&quot;}\n{        &quot;name&quot;: &quot;Falcon&quot;}\n    },\n    &quot;wanda&quot;: {\n{        &quot;realName&quot;: &quot;Wanda Maximoff&quot;}\n{        &quot;location&quot;: &quot;New York&quot;}\n{        &quot;status&quot;: &quot;HEALTHY&quot;}\n    }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们有一些不经常改变的通用数据——_name_和_realName_字段——我们还有一些从这个复仇者的最新事件生成的汇总数据——_location_是从_latitude_和_longitude_值派生出来的，_status_是对事件中_status_字段的一般总结。</p><p>本文重点介绍_statuses_集合，并使用文档API访问它。我们的下一篇文章将展示如何使用基于行的数据的_events_集合。</p><h2 id="_4-如何设置datastax-astra" tabindex="-1"><a class="header-anchor" href="#_4-如何设置datastax-astra"><span>4. 如何设置DataStax Astra</span></a></h2><p>在我们开始应用程序之前，我们需要一个存储我们数据的地方。我们将使用DataStax Astra提供的Cassandra。<strong>为了开始，我们需要在Astra注册一个免费账户并创建一个新的数据库。</strong> 这需要为数据库和其中的keyspace提供合理的名称：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2021/05/db-setup.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>（注意 – 屏幕截图在发布时是准确的，但自那以后可能已经改变）</p><p><strong>这将需要几分钟来设置。一旦完成，我们需要创建一个访问令牌。</strong></p><p>为了做到这一点，我们需要访问新创建的数据库的“设置”选项卡并生成一个令牌：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2021/05/db-token.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>完成所有这些后，我们还需要我们的数据库详细信息。这包括：</p><ul><li>数据库ID</li><li>区域</li><li>Keyspace</li></ul><p>这些可以在“连接”选项卡上找到。</p><p>最后，我们需要一些数据。为了本文的目的，我们使用一些预填充的数据。这可以在这里的shell脚本中找到。</p><h2 id="_5-如何设置spring-boot" tabindex="-1"><a class="header-anchor" href="#_5-如何设置spring-boot"><span>5. 如何设置Spring Boot</span></a></h2><p>我们将使用Spring Initializr创建我们的新应用程序；<strong>我们还将使用Java 16 - 允许我们使用记录。</strong> 这反过来意味着我们需要Spring Boot 2.5 - 目前这意味着2.5.0-M3。</p><p>此外，我们需要Spring Web和Thymeleaf作为依赖项：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2021/05/spring-initaliz-avengers.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>一旦准备好，我们可以下载并解压到某个地方，然后我们就可以构建我们的应用程序了。</p><p>在继续之前，我们还需要配置我们的Cassandra凭据。这些都进入_src/main/resources/application.properties_，如从Astra仪表板中获取：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>ASTRA_DB_ID=e26d52c6-fb2d-4951-b606-4ea11f7309ba\nASTRA_DB_REGION=us-east-1\nASTRA_DB_KEYSPACE=avengers\nASTRA_DB_APPLICATION_TOKEN=AstraCS:xxx-token-here\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些密钥以这种方式管理仅仅是为了本文的目的。在真正的应用程序中，它们应该被安全地管理，例如使用Vault。</p><h2 id="_6-编写文档客户端" tabindex="-1"><a class="header-anchor" href="#_6-编写文档客户端"><span>6. 编写文档客户端</span></a></h2><p><strong>为了与Astra交互，我们需要一个客户端，可以进行必要的API调用。</strong> 这将直接在Astra公开的文档API方面工作，允许我们的应用程序以丰富的文档形式工作。在这里，我们需要能够通过ID获取单个记录，并对记录进行部分更新。</p><p>为了管理这一点，我们将编写一个_DocumentClient_ bean，封装所有这些：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>@Repository\npublic class DocumentClient {\n  @Value(&quot;https://${ASTRA_DB_ID}-${ASTRA_DB_REGION}.apps.astra.datastax.com/api/rest/v2/namespaces/${ASTRA_DB_KEYSPACE}&quot;)\n  private String baseUrl;\n\n  @Value(&quot;${ASTRA_DB_APPLICATION_TOKEN}&quot;)\n  private String token;\n\n  @Autowired\n  private ObjectMapper objectMapper;\n\n  private RestTemplate restTemplate;\n\n  public DocumentClient() {\n    this.restTemplate = new RestTemplate();\n    this.restTemplate.setRequestFactory(new HttpComponentsClientHttpRequestFactory());\n  }\n\n  public ``&lt;T&gt;`` T getDocument(String collection, String id, Class``&lt;T&gt;`` cls) {\n    var uri = UriComponentsBuilder.fromHttpUrl(baseUrl)\n      .pathSegment(&quot;collections&quot;, collection, id)\n      .build()\n      .toUri();\n    var request = RequestEntity.get(uri)\n      .header(&quot;X-Cassandra-Token&quot;, token)\n      .build();\n    var response = restTemplate.exchange(request, cls);\n    return response.getBody();\n  }\n\n  public void patchSubDocument(String collection, String id, String key, Map`&lt;String, Object&gt;` updates) {\n    var updateUri = UriComponentsBuilder.fromHttpUrl(baseUrl)\n      .pathSegment(&quot;collections&quot;, collection, id, key)\n      .build()\n      .toUri();\n    var updateRequest = RequestEntity.patch(updateUri)\n      .header(&quot;X-Cassandra-Token&quot;, token)\n      .body(updates);\n    restTemplate.exchange(updateRequest, Map.class);\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们的_baseUrl_和_token_字段是根据我们前面定义的属性配置的。然后我们有一个_getDocument()_方法，可以调用Astra从所需的集合中获取指定的记录，以及一个_patchSubDocument()_方法，可以调用Astra修补集合中任何单个文档的部分。</p><p><strong>这就是从Astra与文档API交互所需的全部内容，因为它通过简单地在HTTP上交换JSON文档来工作。</strong></p><p>请注意，我们需要更改我们的_RestTemplate_使用的请求工厂。这是因为Spring使用的默认请求工厂不支持HTTP调用中的PATCH方法。</p><h2 id="_7-通过文档api获取复仇者状态" tabindex="-1"><a class="header-anchor" href="#_7-通过文档api获取复仇者状态"><span>7. 通过文档API获取复仇者状态</span></a></h2><p><strong>我们的第一个需求是能够检索我们团队成员的状态。这是我们之前提到的_statuses_集合中的文档。</strong> 这将建立在我们之前编写的_DocumentClient_之上。</p><h3 id="_7-1-从astra检索状态" tabindex="-1"><a class="header-anchor" href="#_7-1-从astra检索状态"><span>7.1. 从Astra检索状态</span></a></h3><p>为了表示这些，我们需要如下记录：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>public record Status(String avger, String name, String realName, String status, String location) {}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们还需要一个记录来表示从Cassandra检索到的整个状态集合：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>public record Statuses(Map`&lt;String, Status&gt;` data) {}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个_Statuses_类表示将由文档API返回的完全相同的JSON，因此可以用于通过_RestTemplate_和Jackson接收数据。</p><p>然后我们需要一个服务层来从Cassandra检索状态并返回以供使用：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>@Service\npublic class StatusesService {\n  @Autowired\n  private DocumentClient client;\n\n  public List``&lt;Status&gt;`` getStatuses() {\n    var collection = client.getDocument(&quot;statuses&quot;, &quot;latest&quot;, Statuses.class);\n\n    var result = new ArrayList``&lt;Status&gt;``();\n    for (var entry : collection.data().entrySet()) {\n      var status = entry.getValue();\n      result.add(new Status(entry.getKey(), status.name(), status.realName(), status.status(), status.location()));\n    }\n\n    return result;\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在这里，我们使用我们的客户端从“statuses”集合中获取记录，以我们的_Statuses_记录形式表示。</strong> 检索后我们提取仅文档以返回给调用者。注意我们确实需要重新构建_Status_对象，以便也包含ID，因为这些实际上存储在Astra文档内的更高层次上。</p><h3 id="_7-2-显示仪表板" tabindex="-1"><a class="header-anchor" href="#_7-2-显示仪表板"><span>7.2. 显示仪表板</span></a></h3><p><strong>现在我们已经有一个服务层来检索数据，我们需要对它做一些事情。</strong> 这意味需要一个控制器来处理来自浏览器的传入HTTP请求，然后渲染一个模板以显示实际的仪表板。</p><p>首先是控制器：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>@Controller\npublic class StatusesController {\n  @Autowired\n  private StatusesService statusesService;\n\n  @GetMapping(&quot;/&quot;)\n  public ModelAndView getStatuses() {\n    var result = new ModelAndView(&quot;dashboard&quot;);\n    result.addObject(&quot;statuses&quot;, statusesService.getStatuses());\n\n    return result;\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这从Astra检索状态并将它们传递给模板以进行渲染。</p><p>我们的主要“dashboard.html”模板如下：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>`&lt;!doctype html&gt;`\n`&lt;html lang=&quot;en&quot;&gt;`\n`&lt;head&gt;`\n  `&lt;meta charset=&quot;utf-8&quot; /&gt;`\n  `&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;`\n  `&lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;\n    integrity=&quot;sha384-eOJMYsd53ii+scO/bJGFsiCZc+5NDVN2yr8+0RDqr0Ql0h+rP48ckxlpbzKgwra6&quot; crossorigin=&quot;anonymous&quot; /&gt;`\n  `&lt;title&gt;`Avengers Status Dashboard`&lt;/title&gt;`\n`&lt;/head&gt;`\n`&lt;body&gt;`\n  `&lt;nav class=&quot;navbar navbar-expand-lg navbar-dark bg-dark&quot;&gt;`\n    `&lt;div class=&quot;container-fluid&quot;&gt;`\n      `&lt;a class=&quot;navbar-brand&quot; href=&quot;#&quot;&gt;`Avengers Status Dashboard`&lt;/a&gt;`\n    `````````&lt;/div&gt;`````````\n  `&lt;/nav&gt;`\n\n  `&lt;div class=&quot;container-fluid mt-4&quot;&gt;`\n    `&lt;div class=&quot;row row-cols-4 g-4&quot;&gt;`\n      `&lt;div class=&quot;col&quot; th:each=&quot;data, iterstat: ${statuses}&quot;&gt;`\n        `&lt;th:block th:switch=&quot;${data.status}&quot;&gt;`\n          `&lt;div class=&quot;card text-white bg-danger&quot; th:case=&quot;DECEASED&quot; th:insert=&quot;~{common/status}&quot;&gt;``````````&lt;/div&gt;`````````\n          `&lt;div class=&quot;card text-dark bg-warning&quot; th:case=&quot;INJURED&quot; th:insert=&quot;~{common/status}&quot;&gt;``````````&lt;/div&gt;`````````\n          `&lt;div class=&quot;card text-dark bg-warning&quot; th:case=&quot;UNKNOWN&quot; th:insert=&quot;~{common/status}&quot;&gt;``````````&lt;/div&gt;`````````\n          `&lt;div class=&quot;card text-white bg-secondary&quot; th:case=&quot;RETIRED&quot; th:insert=&quot;~{common/status}&quot;&gt;``````````&lt;/div&gt;`````````\n          `&lt;div class=&quot;card text-dark bg-light&quot; th:case=&quot;*&quot; th:insert=&quot;~{common/status}&quot;&gt;``````````&lt;/div&gt;`````````\n        `&lt;/th:block&gt;`\n      `````````&lt;/div&gt;`````````\n    `````````&lt;/div&gt;`````````\n  `````````&lt;/div&gt;`````````\n\n  `&lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/js/bootstrap.bundle.min.js&quot;\n    integrity=&quot;sha384-JEW9xMcG8R+pH31jmWH6WWP0WintQrMb4s7ZOdauHnUtxwoG2vI5DkLtS3qm9Ekf&quot;\n    crossorigin=&quot;anonymous&quot;&gt;``&lt;/script&gt;`\n`&lt;/body&gt;`\n`&lt;/html&gt;`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它使用另一个嵌套模板“common/status.html”来显示单个复仇者的状态：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>`&lt;div class=&quot;card-body&quot;&gt;`\n  `&lt;h5 class=&quot;card-title&quot; th:text=&quot;${data.name}&quot;&gt;``&lt;/h5&gt;`\n  `&lt;h6 class=&quot;card-subtitle&quot;&gt;`&lt;spa\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',68),l=[i];function r(d,u){return a(),e("div",null,l)}const v=t(s,[["render",r],["__file","2024-07-29-Build a Dashboard Using Cassandra  Astra  and Stargate.html.vue"]]),p=JSON.parse('{"path":"/posts/baeldung/2024-07-29/2024-07-29-Build%20a%20Dashboard%20Using%20Cassandra%20%20Astra%20%20and%20Stargate.html","title":"使用Cassandra, Astra和Stargate构建仪表板","lang":"zh-CN","frontmatter":{"date":"2021-05-01T00:00:00.000Z","category":["Cassandra","Astra"],"tag":["DataStax","Stargate"],"head":[["meta",{"name":"keywords","content":"Cassandra, Astra, Stargate, Dashboard, Java, Spring Boot"}],["meta",{"name":"description","content":"构建一个使用Cassandra, Astra和Stargate的仪表板。"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-29/2024-07-29-Build%20a%20Dashboard%20Using%20Cassandra%20%20Astra%20%20and%20Stargate.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"使用Cassandra, Astra和Stargate构建仪表板"}],["meta",{"property":"og:description","content":"使用Cassandra, Astra和Stargate构建仪表板 在本文中，我们将构建“托尼·斯塔克的复仇者状态仪表板”，复仇者联盟用来监控团队成员状态的仪表板。 这将使用DataStax Astra构建，这是一个由Apache Cassandra提供支持的DBaaS，使用Stargate提供额外的API来使用它。 在此基础上，我们将使用Spring ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.baeldung.com/wp-content/uploads/2021/05/db-setup.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-29T16:29:44.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"DataStax"}],["meta",{"property":"article:tag","content":"Stargate"}],["meta",{"property":"article:published_time","content":"2021-05-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-29T16:29:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用Cassandra, Astra和Stargate构建仪表板\\",\\"image\\":[\\"https://www.baeldung.com/wp-content/uploads/2021/05/db-setup.png\\",\\"https://www.baeldung.com/wp-content/uploads/2021/05/db-token.png\\",\\"https://www.baeldung.com/wp-content/uploads/2021/05/spring-initaliz-avengers.png\\"],\\"datePublished\\":\\"2021-05-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-29T16:29:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"使用Cassandra, Astra和Stargate构建仪表板 在本文中，我们将构建“托尼·斯塔克的复仇者状态仪表板”，复仇者联盟用来监控团队成员状态的仪表板。 这将使用DataStax Astra构建，这是一个由Apache Cassandra提供支持的DBaaS，使用Stargate提供额外的API来使用它。 在此基础上，我们将使用Spring ..."},"headers":[{"level":2,"title":"2. 什么是Astra？","slug":"_2-什么是astra","link":"#_2-什么是astra","children":[]},{"level":2,"title":"3. 我们的应用程序数据模型","slug":"_3-我们的应用程序数据模型","link":"#_3-我们的应用程序数据模型","children":[]},{"level":2,"title":"4. 如何设置DataStax Astra","slug":"_4-如何设置datastax-astra","link":"#_4-如何设置datastax-astra","children":[]},{"level":2,"title":"5. 如何设置Spring Boot","slug":"_5-如何设置spring-boot","link":"#_5-如何设置spring-boot","children":[]},{"level":2,"title":"6. 编写文档客户端","slug":"_6-编写文档客户端","link":"#_6-编写文档客户端","children":[]},{"level":2,"title":"7. 通过文档API获取复仇者状态","slug":"_7-通过文档api获取复仇者状态","link":"#_7-通过文档api获取复仇者状态","children":[{"level":3,"title":"7.1. 从Astra检索状态","slug":"_7-1-从astra检索状态","link":"#_7-1-从astra检索状态","children":[]},{"level":3,"title":"7.2. 显示仪表板","slug":"_7-2-显示仪表板","link":"#_7-2-显示仪表板","children":[]}]}],"git":{"createdTime":1722270584000,"updatedTime":1722270584000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":8.63,"words":2590},"filePathRelative":"posts/baeldung/2024-07-29/2024-07-29-Build a Dashboard Using Cassandra  Astra  and Stargate.md","localizedDate":"2021年5月1日","excerpt":"<hr>\\n<h1>使用Cassandra, Astra和Stargate构建仪表板</h1>\\n<p>在本文中，我们将构建“托尼·斯塔克的复仇者状态仪表板”，复仇者联盟用来监控团队成员状态的仪表板。</p>\\n<p><strong>这将使用DataStax Astra构建，这是一个由Apache Cassandra提供支持的DBaaS，使用Stargate提供额外的API来使用它。</strong> 在此基础上，我们将使用Spring Boot应用程序来呈现仪表板并显示正在发生的情况。</p>\\n<p>我们将使用Java 16构建此项目，因此在继续之前，请确保已经安装并准备好使用。</p>\\n<h2>2. 什么是Astra？</h2>","autoDesc":true}');export{v as comp,p as data};
