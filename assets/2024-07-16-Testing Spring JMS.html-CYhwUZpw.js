import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-DWhzy7sT.js";const e={},p=t(`<hr><h1 id="spring-jms-测试" tabindex="-1"><a class="header-anchor" href="#spring-jms-测试"><span>Spring JMS 测试</span></a></h1><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span><strong>1. 概述</strong></span></a></h2><p>在本教程中，我们将创建一个简单的 Spring 应用程序，该程序连接到 ActiveMQ 来发送和接收消息。<strong>我们将专注于测试这个应用程序以及测试 Spring JMS 的不同方法。</strong></p><h2 id="_2-应用程序设置" tabindex="-1"><a class="header-anchor" href="#_2-应用程序设置"><span><strong>2. 应用程序设置</strong></span></a></h2><p>首先，让我们创建一个基本的应用程序，该程序可以用于测试。我们需要添加必要的依赖项并实现消息处理。</p><h3 id="_2-1-依赖项" tabindex="-1"><a class="header-anchor" href="#_2-1-依赖项"><span><strong>2.1. 依赖项</strong></span></a></h3><p>让我们向我们的项目的 <em>pom.xml</em> 添加所需的依赖项。<strong>我们需要 Spring JMS 才能监听 JMS 消息。我们将使用 ActiveMQ-Junit 启动嵌入式 ActiveMQ 实例的一部分测试，并使用 TestContainers 运行其他测试中的 ActiveMQ Docker 容器：</strong></p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\`\`\`
    \`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`\`org.springframework\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`\`
    \`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`\`spring-jms\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`\`
    \`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\`\`\`4.3.4.RELEASE\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\`\`\`
\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\`\`\`

\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\`\`\`
    \`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`\`org.apache.activemq.tooling\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`\`
    \`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`\`activemq-junit\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`\`
    \`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\`\`\`5.16.5\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\`\`\`
    \`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>\`\`test\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>\`\`
\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\`\`\`

\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\`\`\`
    \`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`\`org.testcontainers\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`\`
    \`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`\`testcontainers\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`\`
    \`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\`\`\`1.17.3\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\`\`\`
    \`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>\`\`test\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>\`\`
\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\`\`\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-应用程序代码" tabindex="-1"><a class="header-anchor" href="#_2-2-应用程序代码"><span><strong>2.2. 应用程序代码</strong></span></a></h3><p>现在让我们创建一个可以监听消息的 Spring 应用程序：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ComponentScan</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JmsApplication</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">JmsApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们需要创建一个配置类，并使用 <em>@EnableJms</em> 注解启用 JMS 并配置 <em>ConnectionFactory</em> 以连接到我们的 ActiveMQ 实例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableJms</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JmsConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">JmsListenerContainerFactory</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span>\`\`\` <span class="token function">jmsListenerContainerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">DefaultJmsListenerContainerFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultJmsListenerContainerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span><span class="token function">connectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> factory<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ConnectionFactory</span> <span class="token function">connectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQConnectionFactory</span><span class="token punctuation">(</span><span class="token string">&quot;tcp://localhost:61616&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">JmsTemplate</span> <span class="token function">jmsTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JmsTemplate</span><span class="token punctuation">(</span><span class="token function">connectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后，让我们创建我们的监听器，可以接收和处理消息：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageListener</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">MessageListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@JmsListener</span><span class="token punctuation">(</span>destination <span class="token operator">=</span> <span class="token string">&quot;queue-1&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sampleJmsListenerMethod</span><span class="token punctuation">(</span><span class="token class-name">TextMessage</span> message<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JMSException</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;JMS listener received text message: {}&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们还需要一个可以发送消息的类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageSender</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">JmsTemplate</span> jmsTemplate<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">MessageSender</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendTextMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> destination<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Sending message to {} destination with text {}&quot;</span><span class="token punctuation">,</span> destination<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        jmsTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>destination<span class="token punctuation">,</span> s <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">createTextMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-使用嵌入式-activemq-进行测试" tabindex="-1"><a class="header-anchor" href="#_3-使用嵌入式-activemq-进行测试"><span><strong>3. 使用嵌入式 ActiveMQ 进行测试</strong></span></a></h2><p>让我们测试我们的应用程序。<strong>我们首先使用嵌入式 ActiveMQ 实例。</strong> 让我们创建我们的测试类并添加一个 JUnit Rule 来管理我们的 ActiveMQ 实例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmbeddedActiveMqTests4</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@ClassRule</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">EmbeddedActiveMQBroker</span> embeddedBroker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EmbeddedActiveMQBroker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们运行这个空测试并检查日志。<strong>我们可以看到嵌入式代理与我们的测试一起启动：</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>INFO | Starting embedded ActiveMQ broker: embedded-broker
INFO | Using Persistence Adapter: MemoryPersistenceAdapter
INFO | Apache ActiveMQ 5.14.1 (embedded-broker, ID:DESKTOP-52539-254421135-0:1) is starting
INFO | Apache ActiveMQ 5.14.1 (embedded-broker, ID:DESKTOP-52539-254421135-0:1) started
INFO | For help or more information please see: http://activemq.apache.org
INFO | Connector vm://embedded-broker started
INFO | Successfully connected to vm://embedded-broker?create=false
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代理在测试类中的所有测试执行完毕后停止。</p><p>我们需要配置我们的应用程序以连接到这个 ActiveMQ 实例，以便我们可以正确测试我们的 <em>MessageListener</em> 和 <em>MessageSender</em> 类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableJms</span>
<span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">TestConfiguration</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">JmsListenerContainerFactory</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span>\`\`\` <span class="token function">jmsListenerContainerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">DefaultJmsListenerContainerFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultJmsListenerContainerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span><span class="token function">connectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> factory<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ConnectionFactory</span> <span class="token function">connectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQConnectionFactory</span><span class="token punctuation">(</span>embeddedBroker<span class="token punctuation">.</span><span class="token function">getVmURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">JmsTemplate</span> <span class="token function">jmsTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JmsTemplate</span><span class="token punctuation">(</span><span class="token function">connectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个类使用一个特殊的 <em>ConnectionFactory</em>，它从我们的嵌入式代理获取 URL。现在我们需要通过添加 <em>@ContextConfiguration</em> 注解到包含我们测试的类中来使用这个配置：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token class-name">TestConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">MessageSender</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmbeddedActiveMqTests</span> <span class="token punctuation">{</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-1-发送消息" tabindex="-1"><a class="header-anchor" href="#_3-1-发送消息"><span><strong>3.1. 发送消息</strong></span></a></h3><p>让我们编写我们的第一个测试并检查我们的 <em>MessageSender</em> 类的功能。首先，我们通过简单地将其注入为字段来获取这个类的实例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">MessageSender</span> messageSender<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们向 ActiveMQ 发送一个简单的消息并添加一些断言来检查功能：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenSendingMessage_thenCorrectQueueAndMessageText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JMSException</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> queueName <span class="token operator">=</span> <span class="token string">&quot;queue-2&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> messageText <span class="token operator">=</span> <span class="token string">&quot;Test message&quot;</span><span class="token punctuation">;</span>

    messageSender<span class="token punctuation">.</span><span class="token function">sendTextMessage</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> messageText<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> embeddedBroker<span class="token punctuation">.</span><span class="token function">getMessageCount</span><span class="token punctuation">(</span>queueName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">TextMessage</span> sentMessage <span class="token operator">=</span> embeddedBroker<span class="token punctuation">.</span><span class="token function">peekTextMessage</span><span class="token punctuation">(</span>queueName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span>messageText<span class="token punctuation">,</span> sentMessage<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>现在我们可以确定我们的 <em>MessageSender</em> 工作正常，因为在我们发送消息后，队列中恰好包含一个条目，并且文本正确。</strong></p><h3 id="_3-2-接收消息" tabindex="-1"><a class="header-anchor" href="#_3-2-接收消息"><span><strong>3.2. 接收消息</strong></span></a></h3><p>让我们也检查我们的监听器类。<strong>让我们从创建一个新的测试方法并使用嵌入式代理发送消息开始。</strong> 我们的监听器设置为使用 “queue-1” 作为其目标，因此我们需要确保我们在这里也使用相同的名称。</p><p>让我们使用 Mockito 来检查监听器的行为。我们将使用 <em>@SpyBean</em> 注解来获取 <em>MessageListener</em> 的实例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpyBean</span>
<span class="token keyword">private</span> <span class="token class-name">MessageListener</span> messageListener<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们将检查方法是否被调用，并使用 <em>ArgumentCaptor</em> 捕获接收到的方法参数：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenListening_thenReceivingCorrectMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JMSException</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> queueName <span class="token operator">=</span> <span class="token string">&quot;queue-1&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> messageText <span class="token operator">=</span> <span class="token string">&quot;Test message&quot;</span><span class="token punctuation">;</span>

    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> embeddedBroker<span class="token punctuation">.</span><span class="token function">getDestination</span><span class="token punctuation">(</span>queueName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDestinationStatistics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDispatched</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> embeddedBroker<span class="token punctuation">.</span><span class="token function">getDestination</span><span class="token punctuation">(</span>queueName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDestinationStatistics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMessages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    embeddedBroker<span class="token punctuation">.</span><span class="token function">pushMessage</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> messageText<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">ArgumentCaptor</span> messageCaptor <span class="token operator">=</span> <span class="token class-name">ArgumentCaptor</span><span class="token punctuation">.</span><span class="token function">forClass</span><span class="token punctuation">(</span><span class="token class-name">TextMessage</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>messageListener<span class="token punctuation">,</span> <span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">sampleJmsListenerMethod</span><span class="token punctuation">(</span>messageCaptor<span class="token punctuation">.</span><span class="token function">capture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">TextMessage</span> receivedMessage <span class="token operator">=</span> messageCaptor<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span>messageText<span class="token punctuation">,</span> receivedMessage<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> embeddedBroker<span class="token punctuation">.</span><span class="token function">getDestination</span><span class="token punctuation">(</span>queueName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDestinationStatistics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDispatched</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> embeddedBroker<span class="token punctuation">.</span><span class="token function">getDestination</span><span class="token punctuation">(</span>queueName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDestinationStatistics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMessages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>现在我们可以运行测试，并且它们都通过了。</strong></p><h2 id="_4-使用-testcontainers-进行测试" tabindex="-1"><a class="header-anchor" href="#_4-使用-testcontainers-进行测试"><span><strong>4. 使用 TestContainers 进行测试</strong></span></a></h2><p>让我们看看另一种测试 Spring 应用程序中 JMS 的方法。<strong>我们可以使用 TestContainers 运行一个 ActiveMQ Docker 容器并在我们的测试中连接到它。</strong></p><p>让我们创建一个新的测试类并包括 Docker 容器作为 JUnit Rule：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestContainersActiveMqTests</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@ClassRule</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">GenericContainer</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span>\`\`\` activeMqContainer
      <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericContainer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">DockerImageName</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot;rmohr/activemq:5.14.3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withExposedPorts</span><span class="token punctuation">(</span><span class="token number">61616</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JMSException</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们运行这个测试并检查日志。<strong>我们可以看到一些与 TestContainers 相关的信息，因为它正在拉取指定的 docker 镜像，并且它启动的容器：</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>INFO | Creating container for image: rmohr/activemq:5.14.3
INFO | Container rmohr/activemq:5.14.3 is starting: e9b0ddcd45c54fc9994aff99d734d84b5fae14b55fdc70887c4a2c2309b229a7
INFO | Container rmohr/activemq:5.14.3 started in PT2.635S
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们创建一个类似于我们使用 ActiveMQ 实现的配置类。唯一的区别是 <em>ConnectionFactory</em> 的配置：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">ConnectionFactory</span> <span class="token function">connectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> brokerUrlFormat <span class="token operator">=</span> <span class="token string">&quot;tcp://%s:%d&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> brokerUrl <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>brokerUrlFormat<span class="token punctuation">,</span> activeMqContainer<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> activeMqContainer<span class="token punctuation">.</span><span class="token function">getFirstMappedPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQConnectionFactory</span><span class="token punctuation">(</span>brokerUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-1-发送消息" tabindex="-1"><a class="header-anchor" href="#_4-1-发送消息"><span><strong>4.1. 发送消息</strong></span></a></h3><p>让我们测试我们的 <em>MessageSender</em> 类，看看它是否适用于这个 Docker 容器。<strong>这次我们不能使用 <em>EmbeddedBroker</em> 上的方法，但 Spring 的 <em>JmsTemplate</em> 也很容易使用：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">MessageSender</span> messageSender<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">JmsTemplate</span> jmsTemplate<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenSendingMessage_thenCorrectQueueAndMessageText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JMSException</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> queueName <span class="token operator">=</span> <span class="token string">&quot;queue-2&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> messageText <span class="token operator">=</span> <span class="token string">&quot;Test message&quot;</span><span class="token punctuation">;</span>

    messageSender<span class="token punctuation">.</span><span class="token function">sendTextMessage</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> messageText<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Message</span> sentMessage <span class="token operator">=</span> jmsTemplate<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>queueName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertThat</span><span class="token punctuation">(</span>sentMessage<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInstanceOf</span><span class="token punctuation">(</span><span class="token class-name">TextMessage</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">assertEquals</span><span class="token punctuation">(</span>messageText<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TextMessage</span><span class="token punctuation">)</span> sentMessage<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以使用 <em>JmsTemplate</em> 读取队列的内容并检查我们的类是否发送了正确的消息。</p><h3 id="_4-2-接收消息" tabindex="-1"><a class="header-anchor" href="#_4-2-接收消息"><span><strong>4.2. 接收消息</strong></span></a></h3><p>测试我们的监听器类也没有太大的不同。<strong>让我们使用 <em>JmsTemplate</em> 发送消息并验证我们的监听器是否接收到了正确的文本：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpyBean</span>
<span class="token keyword">private</span> <span class="token class-name">MessageListener</span> messageListener<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenListening_thenReceivingCorrectMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JMSException</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> queueName <span class="token operator">=</span> <span class="token string">&quot;queue-1&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> messageText <span class="token operator">=</span> <span class="token string">&quot;Test message&quot;</span><span class="token punctuation">;</span>

    jmsTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> s <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">createTextMessage</span><span class="token punctuation">(</span>messageText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">ArgumentCaptor</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TextMessage</span><span class="token punctuation">&gt;</span></span>\` messageCaptor <span class="token operator">=</span> <span class="token class-name">ArgumentCaptor</span><span class="token punctuation">.</span><span class="token function">forClass</span><span class="token punctuation">(</span><span class="token class-name">TextMessage</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>messageListener<span class="token punctuation">,</span> <span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sampleJmsListenerMethod</span><span class="token punctuation">(</span>messageCaptor<span class="token punctuation">.</span><span class="token function">capture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">TextMessage</span> receivedMessage <span class="token operator">=</span> messageCaptor<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span>messageText<span class="token punctuation">,</span> receivedMessage<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-结论" tabindex="-1"><a class="header-anchor" href="#_5-结论"><span><strong>5. 结论</strong></span></a></h2><p>在本文中，我们创建了一个基本的应用程序，该程序可以使用 Spring JMS 发送和接收消息。然后，我们讨论了两种测试它的方法。</p><p>首先，我们使用了一个嵌入式 ActiveMQ 实例，它甚至提供了一些方便的方法与代理交互。其次，我们使用 TestContainers 来测试我们的代码，使用 Docker 容器模拟了更接近真实世界的场景。</p><p>如往常一样，这些示例的源代码可以在 GitHub 上找到。</p><p><a href="kimi://action?name=cheer-on-kimi">给Kimi加油</a></p>`,61),o=[p];function c(i,l){return a(),s("div",null,o)}const k=n(e,[["render",c],["__file","2024-07-16-Testing Spring JMS.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-16/2024-07-16-Testing%20Spring%20JMS.html","title":"Spring JMS 测试","lang":"zh-CN","frontmatter":{"date":"2024-07-17T00:00:00.000Z","category":["Spring JMS","Testing"],"tag":["Spring","JMS","Testing"],"head":[["meta",{"name":"keywords","content":"Spring JMS, Testing, ActiveMQ, Embedded ActiveMQ, TestContainers"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-16/2024-07-16-Testing%20Spring%20JMS.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Spring JMS 测试"}],["meta",{"property":"og:description","content":"Spring JMS 测试 1. 概述 在本教程中，我们将创建一个简单的 Spring 应用程序，该程序连接到 ActiveMQ 来发送和接收消息。我们将专注于测试这个应用程序以及测试 Spring JMS 的不同方法。 2. 应用程序设置 首先，让我们创建一个基本的应用程序，该程序可以用于测试。我们需要添加必要的依赖项并实现消息处理。 2.1. 依赖..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-16T21:08:31.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:tag","content":"JMS"}],["meta",{"property":"article:tag","content":"Testing"}],["meta",{"property":"article:published_time","content":"2024-07-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-16T21:08:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring JMS 测试\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-17T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-16T21:08:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Spring JMS 测试 1. 概述 在本教程中，我们将创建一个简单的 Spring 应用程序，该程序连接到 ActiveMQ 来发送和接收消息。我们将专注于测试这个应用程序以及测试 Spring JMS 的不同方法。 2. 应用程序设置 首先，让我们创建一个基本的应用程序，该程序可以用于测试。我们需要添加必要的依赖项并实现消息处理。 2.1. 依赖..."},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. 应用程序设置","slug":"_2-应用程序设置","link":"#_2-应用程序设置","children":[{"level":3,"title":"2.1. 依赖项","slug":"_2-1-依赖项","link":"#_2-1-依赖项","children":[]},{"level":3,"title":"2.2. 应用程序代码","slug":"_2-2-应用程序代码","link":"#_2-2-应用程序代码","children":[]}]},{"level":2,"title":"3. 使用嵌入式 ActiveMQ 进行测试","slug":"_3-使用嵌入式-activemq-进行测试","link":"#_3-使用嵌入式-activemq-进行测试","children":[{"level":3,"title":"3.1. 发送消息","slug":"_3-1-发送消息","link":"#_3-1-发送消息","children":[]},{"level":3,"title":"3.2. 接收消息","slug":"_3-2-接收消息","link":"#_3-2-接收消息","children":[]}]},{"level":2,"title":"4. 使用 TestContainers 进行测试","slug":"_4-使用-testcontainers-进行测试","link":"#_4-使用-testcontainers-进行测试","children":[{"level":3,"title":"4.1. 发送消息","slug":"_4-1-发送消息","link":"#_4-1-发送消息","children":[]},{"level":3,"title":"4.2. 接收消息","slug":"_4-2-接收消息","link":"#_4-2-接收消息","children":[]}]},{"level":2,"title":"5. 结论","slug":"_5-结论","link":"#_5-结论","children":[]}],"git":{"createdTime":1721164111000,"updatedTime":1721164111000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":5.94,"words":1781},"filePathRelative":"posts/baeldung/2024-07-16/2024-07-16-Testing Spring JMS.md","localizedDate":"2024年7月17日","excerpt":"<hr>\\n<h1>Spring JMS 测试</h1>\\n<h2><strong>1. 概述</strong></h2>\\n<p>在本教程中，我们将创建一个简单的 Spring 应用程序，该程序连接到 ActiveMQ 来发送和接收消息。<strong>我们将专注于测试这个应用程序以及测试 Spring JMS 的不同方法。</strong></p>\\n<h2><strong>2. 应用程序设置</strong></h2>\\n<p>首先，让我们创建一个基本的应用程序，该程序可以用于测试。我们需要添加必要的依赖项并实现消息处理。</p>\\n<h3><strong>2.1. 依赖项</strong></h3>","autoDesc":true}');export{k as comp,d as data};
