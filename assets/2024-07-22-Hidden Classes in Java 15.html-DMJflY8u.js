import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,o as s,a as t}from"./app-Bx_7oN2A.js";const e={},p=t(`<hr><h1 id="java-15中的隐藏类-baeldung" tabindex="-1"><a class="header-anchor" href="#java-15中的隐藏类-baeldung"><span>Java 15中的隐藏类 | Baeldung</span></a></h1><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p>Java 15引入了许多新特性。在本文中，我们将讨论一个名为隐藏类的新特性，该特性在JEP-371下推出。这个特性被引入作为Unsafe API的替代品，Unsafe API不推荐在JDK之外使用。</p><p>隐藏类特性对于任何使用动态字节码或JVM语言的人来说都非常有用。</p><p>动态生成的类为低延迟应用程序提供了效率和灵活性。它们只需要在有限的时间内使用。将它们保留为静态生成类的生命周期会增加内存占用。现有的解决方案，如每个类的类加载器，既繁琐又低效。</p><p>从Java 15开始，隐藏类已成为生成动态类的标准方式。</p><p><strong>隐藏类是不能被字节码或其他类直接使用的类。</strong> 尽管它被称为类，但它应该被理解为隐藏类或接口。它也可以被定义为访问控制巢的成员，并且可以独立于其他类卸载。</p><p>让我们看看这些动态生成类的属性：</p><ul><li>无法发现 - 隐藏类在字节码链接期间不会被JVM发现，也不会被显式使用类加载器的程序发现。反射方法_Class::forName_、_ClassLoader::findLoadedClass_和_Lookup::findClass_都不会找到它们。</li><li>我们不能使用隐藏类作为超类、字段类型、返回类型或参数类型。</li><li>隐藏类中的代码可以直接使用它，而不需要依赖类对象。</li><li>隐藏类中声明的_final_字段无论其可访问标志如何都是不可修改的。</li><li>它通过不可发现的类扩展了访问控制巢。</li><li>即使其概念定义类加载器仍然可达，它也可能被卸载。</li><li>默认情况下，堆栈跟踪不会显示隐藏类的方法或名称，但是可以通过调整JVM选项来显示它们。</li></ul><p><strong>隐藏类不是由任何类加载器创建的。</strong> 它具有与查找类相同的定义类加载器、运行时包和保护域。</p><p>首先，让我们创建一个_Lookup_对象：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">MethodHandles<span class="token punctuation">.</span>Lookup</span> lookup <span class="token operator">=</span> <span class="token class-name">MethodHandles</span><span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>_Lookup::defineHiddenClass_方法创建隐藏类。此方法接受一个字节数组。</p><p>为了简单起见，我们将定义一个名为_HiddenClass_的简单类，该类有一个将给定字符串转换为大写的方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HiddenClass</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">convertToUpperCase</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们获取类的路径并将其加载到输入流中。然后，我们将使用_IOUtils.toByteArray()_将这个类转换为字节：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Class</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span>\`\` clazz <span class="token operator">=</span> <span class="token class-name">HiddenClass</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> className <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> classAsPath <span class="token operator">=</span> className<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token char">&#39;.&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.class&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">InputStream</span> stream <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>classAsPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们将这些构造的字节传递到_Lookup::defineHiddenClass_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Class</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span>\`\` hiddenClass <span class="token operator">=</span> lookup<span class="token punctuation">.</span><span class="token function">defineHiddenClass</span><span class="token punctuation">(</span><span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token class-name">ClassOption</span><span class="token punctuation">.</span><span class="token constant">NESTMATE</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lookupClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>第二个_boolean_参数_true_初始化类。第三个参数_ClassOption.NESTMATE_指定创建的隐藏类将被添加为查找类的巢成员，以便它可以访问同一巢中所有类和接口的_private_成员。</p><p>假设我们希望将隐藏类与其类加载器强绑定，<em>ClassOption.STRONG</em>。这意味着只有在其定义加载器不可达时，隐藏类才能被卸载。</p><p>隐藏类被在运行时生成类的框架使用，并通过反射间接使用。</p><p>在上一节中，我们创建了一个隐藏类。在本节中，我们将看到如何使用它并创建一个实例。</p><p>由于无法将从_Lookup.defineHiddenClass_获得的类与任何其他类对象进行强制转换，我们使用_Object_来存储隐藏类实例。如果我们希望将隐藏类强制转换，我们可以定义一个接口并创建一个实现该接口的隐藏类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Object</span> hiddenClassObject <span class="token operator">=</span> hiddenClass<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在，让我们从隐藏类中获取方法。获取方法后，我们将像调用任何其他标准方法一样调用它：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Method</span> method <span class="token operator">=</span> hiddenClassObject<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">&quot;convertToUpperCase&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;HELLO&quot;</span><span class="token punctuation">,</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>hiddenClassObject<span class="token punctuation">,</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们可以通过调用一些方法来验证隐藏类的一些属性：</p><p>_isHidden()<em>方法将为此类返回_true</em>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> hiddenClass<span class="token punctuation">.</span><span class="token function">isHidden</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>另外，由于隐藏类没有实际名称，其规范名称将为_null_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> hiddenClass<span class="token punctuation">.</span><span class="token function">getCanonicalName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>隐藏类将具有与执行查找的类相同的定义加载器。由于查找发生在同一个类中，以下断言将成功：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> hiddenClass<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们尝试通过任何方法访问隐藏类，它们将抛出_ClassNotFoundException_。这是显而易见的，因为隐藏类名称足够不寻常且未限定，以至于对其他类不可见。让我们检查几个断言以证明隐藏类是不可见的：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertThrows</span><span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>hiddenClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertThrows</span><span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> lookup<span class="token punctuation">.</span><span class="token function">findClass</span><span class="token punctuation">(</span>hiddenClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，其他类只能通过其_Class_对象来使用隐藏类。</p><p>我们在前面的部分中创建了一个隐藏类并玩弄了一些它的属性。现在，让我们详细说明匿名类（没有显式名称的内部类）与隐藏类之间的区别：</p><ul><li>匿名类有一个动态生成的名称，名称之间有一个$，而从_com.baeldung.reflection.hiddenclass.HiddenClass_派生的隐藏类将是_com.baeldung.reflection.hiddenclass.HiddenClass/1234_。</li><li>匿名类使用_Unsafe::defineAnonymousClass_实例化，这已被弃用，而_Lookup::defineHiddenClass_实例化隐藏类。</li><li>隐藏类不支持常量池修补。它有助于定义其常量池条目已经解析为具体值的匿名类。</li><li>与隐藏类不同，匿名类可以访问主机类的_protected_成员，即使它在不同的包中且不是子类。</li><li>匿名类可以封装其他类以访问其成员，但隐藏类不能封装其他类。</li></ul><p>尽管<strong>隐藏类不是匿名类的替代品</strong>，但它们正在替代JDK中匿名类的某些用法。<strong>从Java 15开始，lambda表达式使用隐藏类</strong>。</p><h2 id="_7-结论" tabindex="-1"><a class="header-anchor" href="#_7-结论"><span>7. 结论</span></a></h2><p>在本文中，我们详细讨论了一种名为隐藏类的新语言特性。像往常一样，代码可以在GitHub上找到。好的，翻译已经完成。以下是文章的其余部分：</p><hr><h2 id="_7-结论-1" tabindex="-1"><a class="header-anchor" href="#_7-结论-1"><span>7. 结论</span></a></h2><p>在本文中，我们详细讨论了Java 15中的一个新语言特性——隐藏类。如常，代码可以在GitHub上找到。</p><p><img src="https://www.baeldung.com/wp-content/themes/baeldung/icon/logo.svg" alt="img" loading="lazy"><img src="https://secure.gravatar.com/avatar/dc417739e22ae675b0e1f7012bbddaa5?s=50&amp;r=g" alt="img" loading="lazy"><img src="https://secure.gravatar.com/avatar/629fdde67cb23f9d3799635d89c7b250?s=50&amp;r=g" alt="img" loading="lazy"><img src="https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png" alt="img" loading="lazy"><img src="https://www.baeldung.com/wp-content/uploads/2016/05/baeldung-rest-post-footer-main-1.2.0.jpg" alt="img" loading="lazy"><img src="https://www.baeldung.com/wp-content/uploads/2016/05/baeldung-rest-post-footer-icn-1.0.0.png" alt="img" loading="lazy"></p><p>OK</p>`,48),o=[p];function c(l,i){return s(),n("div",null,o)}const r=a(e,[["render",c],["__file","2024-07-22-Hidden Classes in Java 15.html.vue"]]),k=JSON.parse('{"path":"/posts/baeldung/2024-07-22/2024-07-22-Hidden%20Classes%20in%20Java%2015.html","title":"Java 15中的隐藏类 | Baeldung","lang":"zh-CN","frontmatter":{"date":"2024-07-22T00:00:00.000Z","category":["Java","JEP-371"],"tag":["Hidden Classes","Java 15"],"head":[["meta",{"name":"keywords","content":"Java 15, Hidden Classes, JEP-371"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-22/2024-07-22-Hidden%20Classes%20in%20Java%2015.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Java 15中的隐藏类 | Baeldung"}],["meta",{"property":"og:description","content":"Java 15中的隐藏类 | Baeldung 1. 概述 Java 15引入了许多新特性。在本文中，我们将讨论一个名为隐藏类的新特性，该特性在JEP-371下推出。这个特性被引入作为Unsafe API的替代品，Unsafe API不推荐在JDK之外使用。 隐藏类特性对于任何使用动态字节码或JVM语言的人来说都非常有用。 动态生成的类为低延迟应用程序..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.baeldung.com/wp-content/themes/baeldung/icon/logo.svg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-22T15:15:41.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Hidden Classes"}],["meta",{"property":"article:tag","content":"Java 15"}],["meta",{"property":"article:published_time","content":"2024-07-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-22T15:15:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 15中的隐藏类 | Baeldung\\",\\"image\\":[\\"https://www.baeldung.com/wp-content/themes/baeldung/icon/logo.svg\\",\\"https://secure.gravatar.com/avatar/dc417739e22ae675b0e1f7012bbddaa5?s=50&r=g\\",\\"https://secure.gravatar.com/avatar/629fdde67cb23f9d3799635d89c7b250?s=50&r=g\\",\\"https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png\\",\\"https://www.baeldung.com/wp-content/uploads/2016/05/baeldung-rest-post-footer-main-1.2.0.jpg\\",\\"https://www.baeldung.com/wp-content/uploads/2016/05/baeldung-rest-post-footer-icn-1.0.0.png\\"],\\"datePublished\\":\\"2024-07-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-22T15:15:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Java 15中的隐藏类 | Baeldung 1. 概述 Java 15引入了许多新特性。在本文中，我们将讨论一个名为隐藏类的新特性，该特性在JEP-371下推出。这个特性被引入作为Unsafe API的替代品，Unsafe API不推荐在JDK之外使用。 隐藏类特性对于任何使用动态字节码或JVM语言的人来说都非常有用。 动态生成的类为低延迟应用程序..."},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"7. 结论","slug":"_7-结论","link":"#_7-结论","children":[]},{"level":2,"title":"7. 结论","slug":"_7-结论-1","link":"#_7-结论-1","children":[]}],"git":{"createdTime":1721661341000,"updatedTime":1721661341000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":5.46,"words":1639},"filePathRelative":"posts/baeldung/2024-07-22/2024-07-22-Hidden Classes in Java 15.md","localizedDate":"2024年7月22日","excerpt":"<hr>\\n<h1>Java 15中的隐藏类 | Baeldung</h1>\\n<h2>1. 概述</h2>\\n<p>Java 15引入了许多新特性。在本文中，我们将讨论一个名为隐藏类的新特性，该特性在JEP-371下推出。这个特性被引入作为Unsafe API的替代品，Unsafe API不推荐在JDK之外使用。</p>\\n<p>隐藏类特性对于任何使用动态字节码或JVM语言的人来说都非常有用。</p>\\n<p>动态生成的类为低延迟应用程序提供了效率和灵活性。它们只需要在有限的时间内使用。将它们保留为静态生成类的生命周期会增加内存占用。现有的解决方案，如每个类的类加载器，既繁琐又低效。</p>\\n<p>从Java 15开始，隐藏类已成为生成动态类的标准方式。</p>","autoDesc":true}');export{r as comp,k as data};
