import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as t,a}from"./app-DFhKiB50.js";const l={},s=a(`<h1 id="kotlin-中的-let-与-if-not-null-的比较" tabindex="-1"><a class="header-anchor" href="#kotlin-中的-let-与-if-not-null-的比较"><span>Kotlin 中的 ?.let() 与 if not null 的比较</span></a></h1><p>如果你有几年的 Kotlin 语言和服务器端开发经验，并且有兴趣与社区分享这些经验，请查看我们的<strong>贡献指南</strong>。</p><h2 id="_1-引言" tabindex="-1"><a class="header-anchor" href="#_1-引言"><span>1. 引言</span></a></h2><p>Kotlin 的现代设计强调安全性和清晰性，特别是在空值处理方面。Kotlin 开发者之间一个常见的问题是选择使用 <em>?.let()</em> 和传统的 <em>if (x != null)</em> 进行空值检查。</p><p>本教深入探讨这两种方法，突出它们的使用场景、优势以及各自擅长的场景。</p><h2 id="_2-使用-let" tabindex="-1"><a class="header-anchor" href="#_2-使用-let"><span>2. 使用 <em>?.let()</em></span></a></h2><p><strong><em>?.let()</em> 扩展函数是一种强大且简洁的方式来执行一个转换代码块，仅当对象非空时执行</strong>。这种方法允许通过确保仅在对象非空时才运行转换，来更安全地处理可空变量：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> <span class="token function">fetchNameFromDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">val</span> uppercased <span class="token operator">=</span> name<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span><span class="token function">uppercase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们模拟从数据库中获取一个名字，然后使用 <em>?.let()</em> 将 <em>name</em> 转换为大写，仅当它非空时。这展示了 <em>let()</em> 在可空值上运行转换函数的能力。</p><h2 id="_3-使用-if-x-null" tabindex="-1"><a class="header-anchor" href="#_3-使用-if-x-null"><span>3. 使用 <em>if (x != null)</em></span></a></h2><p>相比之下，处理空值的另一种传统方法是 <em>if (x != null)</em> 语句。这种方法直接明了，可以在变量非空时执行特定操作：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> <span class="token function">fetchNameFromDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">val</span> uppercased <span class="token operator">=</span> <span class="token keyword">if</span><span class="token punctuation">(</span>name <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> name<span class="token punctuation">.</span><span class="token function">uppercase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token keyword">null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们在调用 <em>uppercase()</em> 之前检查 <em>name</em> 是否非空。<strong>这种方法对来自其他编程语言的开发者来说很熟悉，为处理空值提供了一种清晰的方式</strong>。</p><h2 id="_4-比较-let-和-if-x-null" tabindex="-1"><a class="header-anchor" href="#_4-比较-let-和-if-x-null"><span>4. 比较 <em>?.let()</em> 和 <em>if (x != null)</em></span></a></h2><p>在探索了这两种风格之后，比较和对比它们是有益的：</p><ul><li><strong><em>?.let()</em> 用于转换</strong>：理想用于在可空类型上运行转换函数。它简洁，清晰地传达意图，并避免代码重复。</li><li><strong><em>if(x != null)</em> 用于副作用</strong>：更适合不需要返回值的动作，如日志记录。它提供了熟悉的语法，适用于简单的空值检查场景。</li></ul><p>尽管两者可以执行相同的操作，但 <em>?.let()</em> 是处理需要操作潜在可空类型的返回值的更惯用选项。我们之前看到，当 <em>if (x != null)</em> 作为语句使用时可能很熟悉，但也不那么流畅和惯用。</p><h2 id="_5-结论" tabindex="-1"><a class="header-anchor" href="#_5-结论"><span>5. 结论</span></a></h2><p>Kotlin 提供了多种处理空值的方法，选择 <em>?.let()</em> 和 <em>if (x != null)</em> 取决于我们的编码风格、项目需求和个人偏好。<em>?.let()</em> 扩展函数在简洁性和可读性方面表现出色，而 <em>if (x != null)</em> 提供了一种更传统和熟悉的方法。最终，决定应基于我们的 Kotlin 项目的具体需求。</p><p>通过理解这两种方法，我们可以做出明智的选择，编写更健壮和可维护的 Kotlin 代码。空安全是 Kotlin 设计理念的关键方面，这些工具使开发人员能够有效地处理空值。如往常一样，本文中使用的代码可以在 GitHub 上找到。</p>`,20),o=[s];function i(p,r){return t(),e("div",null,o)}const m=n(l,[["render",i],["__file","2024-07-29-Kotlin  .let   vs if not null.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-29/2024-07-29-Kotlin%20%20.let%20%20%20vs%20if%20not%20null.html","title":"Kotlin 中的 ?.let() 与 if not null 的比较","lang":"zh-CN","frontmatter":{"date":"2022-11-01T00:00:00.000Z","category":["Kotlin","Programming"],"tag":["Kotlin","Null Safety","if not null","?.let"],"head":[["meta",{"name":"keywords","content":"Kotlin, Null Safety, ?.let, if not null"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-29/2024-07-29-Kotlin%20%20.let%20%20%20vs%20if%20not%20null.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Kotlin 中的 ?.let() 与 if not null 的比较"}],["meta",{"property":"og:description","content":"Kotlin 中的 ?.let() 与 if not null 的比较 如果你有几年的 Kotlin 语言和服务器端开发经验，并且有兴趣与社区分享这些经验，请查看我们的贡献指南。 1. 引言 Kotlin 的现代设计强调安全性和清晰性，特别是在空值处理方面。Kotlin 开发者之间一个常见的问题是选择使用 ?.let() 和传统的 if (x != n..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-29T15:07:46.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Kotlin"}],["meta",{"property":"article:tag","content":"Null Safety"}],["meta",{"property":"article:tag","content":"if not null"}],["meta",{"property":"article:tag","content":"?.let"}],["meta",{"property":"article:published_time","content":"2022-11-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-29T15:07:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Kotlin 中的 ?.let() 与 if not null 的比较\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-11-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-29T15:07:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Kotlin 中的 ?.let() 与 if not null 的比较 如果你有几年的 Kotlin 语言和服务器端开发经验，并且有兴趣与社区分享这些经验，请查看我们的贡献指南。 1. 引言 Kotlin 的现代设计强调安全性和清晰性，特别是在空值处理方面。Kotlin 开发者之间一个常见的问题是选择使用 ?.let() 和传统的 if (x != n..."},"headers":[{"level":2,"title":"1. 引言","slug":"_1-引言","link":"#_1-引言","children":[]},{"level":2,"title":"2. 使用 ?.let()","slug":"_2-使用-let","link":"#_2-使用-let","children":[]},{"level":2,"title":"3. 使用 if (x != null)","slug":"_3-使用-if-x-null","link":"#_3-使用-if-x-null","children":[]},{"level":2,"title":"4. 比较 ?.let() 和 if (x != null)","slug":"_4-比较-let-和-if-x-null","link":"#_4-比较-let-和-if-x-null","children":[]},{"level":2,"title":"5. 结论","slug":"_5-结论","link":"#_5-结论","children":[]}],"git":{"createdTime":1722265666000,"updatedTime":1722265666000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":2.76,"words":827},"filePathRelative":"posts/baeldung/2024-07-29/2024-07-29-Kotlin  .let   vs if not null.md","localizedDate":"2022年11月1日","excerpt":"\\n<p>如果你有几年的 Kotlin 语言和服务器端开发经验，并且有兴趣与社区分享这些经验，请查看我们的<strong>贡献指南</strong>。</p>\\n<h2>1. 引言</h2>\\n<p>Kotlin 的现代设计强调安全性和清晰性，特别是在空值处理方面。Kotlin 开发者之间一个常见的问题是选择使用 <em>?.let()</em> 和传统的 <em>if (x != null)</em> 进行空值检查。</p>\\n<p>本教深入探讨这两种方法，突出它们的使用场景、优势以及各自擅长的场景。</p>\\n<h2>2. 使用 <em>?.let()</em></h2>\\n<p><strong><em>?.let()</em> 扩展函数是一种强大且简洁的方式来执行一个转换代码块，仅当对象非空时执行</strong>。这种方法允许通过确保仅在对象非空时才运行转换，来更安全地处理可空变量：</p>","autoDesc":true}');export{m as comp,d as data};
