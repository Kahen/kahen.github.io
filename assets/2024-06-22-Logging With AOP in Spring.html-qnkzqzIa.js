import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-Ceves8Ok.js";const e={},p=t(`<h1 id="使用spring-aop进行日志记录" tabindex="-1"><a class="header-anchor" href="#使用spring-aop进行日志记录"><span>使用Spring AOP进行日志记录</span></a></h1><p>我们经常使用日志记录来记录程序执行过程中有意义的步骤和有价值的信息。它允许我们记录以后可用于调试和分析代码的数据。</p><p>此外，面向切面编程（简称AOP）是一种范式，它让我们能够在不扰乱业务逻辑的情况下，将事务管理或日志记录等跨领域关注点分离到整个应用程序中。</p><p>在本教程中，我们将学习如何使用AOP和Spring框架实现日志记录。</p><h2 id="_2-无aop的日志记录" tabindex="-1"><a class="header-anchor" href="#_2-无aop的日志记录"><span>2. 无AOP的日志记录</span></a></h2><p>在日志记录方面，我们通常在方法的开始和结束处放置日志。这样，我们可以轻松地跟踪应用程序的执行流程。此外，我们可以捕获传递给特定方法的值以及它们返回的值。</p><p>为了演示，让我们创建一个带有<code>greet()</code>方法的<code>GreetingService</code>类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;&gt;&gt; greet() - {}&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;Hello %s&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;\`\`&lt;&lt; greet() - {}&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>尽管上述实现看起来像是一个标准的解决方案，但<strong>日志语句可能会让我们的代码看起来像是不必要的杂乱</strong>。</p><p>此外，我们为代码引入了额外的复杂性。如果没有日志记录，我们可以将这个方法重写为一行代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;Hello %s&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-面向切面编程" tabindex="-1"><a class="header-anchor" href="#_3-面向切面编程"><span>3. 面向切面编程</span></a></h2><p>顾名思义，面向切面编程侧重于切面而不是对象和类。<strong>我们使用AOP为特定应用程序部分实现额外的功能，而无需修改它们当前的实现</strong>。</p><h3 id="_3-1-aop概念" tabindex="-1"><a class="header-anchor" href="#_3-1-aop概念"><span>3.1. AOP概念</span></a></h3><p>在我们深入研究之前，让我们在非常高的层次上检查一下AOP的基本概念。</p><ul><li>切面：我们希望在整个应用程序中应用的跨领域关注点或功能。</li><li>连接点：我们想要应用切面的应用程序流程点。</li><li>通知：应该在特定连接点执行的操作。</li><li>切点：应该应用切面的连接点集合。</li></ul><p>此外，<strong>值得注意的是Spring AOP仅支持方法执行的连接点</strong>。我们应该考虑使用编译时库，如AspectJ，为字段、构造函数、静态初始化器等创建切面。</p><h3 id="_3-2-maven依赖" tabindex="-1"><a class="header-anchor" href="#_3-2-maven依赖"><span>3.2. Maven依赖</span></a></h3><p>要使用Spring AOP，让我们在<code>pom.xml</code>中添加<code>spring-boot-starter-aop</code>依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\`\`
    \`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`org.springframework.boot\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`
    \`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`spring-boot-starter-aop\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`
\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\`\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Spring中实现AOP的一种方法是使用带有<code>@Aspect</code>注解的Spring Bean：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Aspect</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoggingAspect</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>@Aspect</code>注解作为标记注解，因此Spring不会自动将其视为组件。为了指示它应该由Spring管理并通过组件扫描检测到，我们还使用<code>@Component</code>注解来注解这个类。</p><p>接下来，让我们定义一个切点。简单来说，切点允许我们指定我们想要用切面拦截的连接点执行：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">&quot;execution(public * com.baeldung.logging.*.*(..))&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">publicMethodsFromLoggingPackage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们定义了一个切点表达式，它只包括<code>com.baeldung.logging</code>包中的公共方法。</p><p>接下来，让我们看看如何定义通知以记录方法执行的开始和结束。</p><h3 id="_4-1-使用-around-通知" tabindex="-1"><a class="header-anchor" href="#_4-1-使用-around-通知"><span>4.1. 使用_Around_通知</span></a></h3><p>我们将从更通用的通知类型开始——_Around_通知。<strong>它允许我们在方法调用之前和之后实现自定义行为</strong>。此外，有了这个通知，我们可以决定是否继续特定的连接点，返回自定义结果或抛出异常。</p><p>让我们使用<code>@Around</code>注解定义通知：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">&quot;publicMethodsFromLoggingPackage()&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">logAround</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;&gt;&gt; {}() - {}&quot;</span><span class="token punctuation">,</span> methodName<span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Object</span> result <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;\`\`&lt;&lt; {}() - {}&quot;</span><span class="token punctuation">,</span> methodName<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>value</code>属性将这个_Around_通知与之前定义的切点关联起来。通知在由<code>publicMethodsFromLoggingPackage()</code>切点签名匹配的方法执行周围运行。</p><p>该方法接受一个<code>ProceedingJoinPoint</code>参数。它是<code>JoinPoint</code>类的子类，允许我们调用<code>proceed()</code>方法来执行下一个通知（如果存在）或目标方法。</p><p>我们在<code>joinPoint</code>上调用<code>getArgs()</code>方法以检索方法参数数组。此外，我们使用<code>getSignature().getName()</code>方法来获取我们正在拦截的方法的名称。</p><p>接下来，我们调用<code>proceed()</code>方法来执行目标方法并检索结果。</p><p>最后，让我们调用我们之前提到的<code>greet()</code>方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenName_whenGreet_thenReturnCorrectResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> result <span class="token operator">=</span> greetingService<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token string">&quot;Baeldung&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertNotNull</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Hello Baeldung&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行我们的测试后，我们可以在控制台看到以下结果：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span>\`<span class="token variable"><span class="token variable">\`</span><span class="token operator">&gt;</span> greet<span class="token punctuation">(</span><span class="token punctuation">)</span> - <span class="token punctuation">[</span>Baeldung<span class="token punctuation">]</span>
<span class="token variable">\`</span></span>\`<span class="token operator">&lt;&lt;</span> greet<span class="token punctuation">(</span><span class="token punctuation">)</span> - Hello Baeldung
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-使用最少侵入性的通知" tabindex="-1"><a class="header-anchor" href="#_5-使用最少侵入性的通知"><span>5. 使用最少侵入性的通知</span></a></h2><p><strong>在决定使用哪种类型的通知时，建议我们使用最不强大的通知来满足我们的需求</strong>。如果我们选择一个通用的通知，如_Around_通知，我们更有可能遇到潜在的错误和性能问题。</p><p>也就是说，让我们看看如何使用_Before_和_After_通知来实现相同的功能。与_Around_通知不同，它们不会包装方法执行，因此没有必要显式调用<code>proceed()</code>方法来继续连接点执行。具体来说，我们使用这些类型的通知在方法执行之前或之后立即拦截方法。</p><h3 id="_5-1-使用-before-通知" tabindex="-1"><a class="header-anchor" href="#_5-1-使用-before-通知"><span>5.1. 使用_Before_通知</span></a></h3><p><strong>要在方法执行之前拦截它，我们将使用<code>@Before</code>注解创建一个通知：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">&quot;publicMethodsFromLoggingPackage()&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logBefore</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;&gt;\`\`&gt; {}() - {}&quot;</span><span class="token punctuation">,</span> methodName<span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与之前的例子类似，我们使用<code>getArgs()</code>方法获取方法参数，并使用<code>getSignature().getName()</code>方法获取方法名称。</p><h3 id="_5-2-使用-afterreturning-通知" tabindex="-1"><a class="header-anchor" href="#_5-2-使用-afterreturning-通知"><span>5.2. 使用_AfterReturning_通知</span></a></h3><p>进一步地，<strong>为了在方法执行后添加日志，我们将创建一个<code>@AfterReturning</code>通知，如果方法执行完成且没有抛出任何异常，则会运行它：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;publicMethodsFromLoggingPackage()&quot;</span><span class="token punctuation">,</span> returning <span class="token operator">=</span> <span class="token string">&quot;result&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logAfter</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">Object</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;\`&lt;&lt; {}() - {}&quot;</span><span class="token punctuation">,</span> methodName<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，<strong>我们定义了<code>returning</code>属性来获取方法返回的值</strong>。此外，我们在属性中提供的值应该与参数的名称匹配。返回值将作为参数传递给通知方法。</p><h3 id="_5-3-使用-afterthrowing-通知" tabindex="-1"><a class="header-anchor" href="#_5-3-使用-afterthrowing-通知"><span>5.3. 使用_AfterThrowing_通知</span></a></h3><p>另一方面，为了记录方法调用以异常完成的情况，我们可以使用<code>@AfterThrowing</code>通知：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>pointcut <span class="token operator">=</span> <span class="token string">&quot;publicMethodsFromLoggingPackage()&quot;</span><span class="token punctuation">,</span> throwing <span class="token operator">=</span> <span class="token string">&quot;exception&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logException</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;&lt; {}() - {}&quot;</span><span class="token punctuation">,</span> methodName<span class="token punctuation">,</span> exception<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这一次，我们将在通知方法中获取抛出的异常，而不是返回值。</p><h2 id="_6-spring-aop的陷阱" tabindex="-1"><a class="header-anchor" href="#_6-spring-aop的陷阱"><span>6. Spring AOP的陷阱</span></a></h2><p>最后，让我们讨论一下在使用Spring AOP时应该考虑的一些关注点。</p><p>Spring AOP是一个基于代理的框架。它创建代理对象来拦截方法调用并应用在通知中定义的逻辑。<strong>这可能会对我们应用程序的性能产生负面影响</strong>。</p><p>为了减少AOP对性能的影响，我们应该考虑只在必要时使用AOP。我们应该避免为孤立和不频繁的操作创建切面。</p><p>最后，如果我们只为开发目的使用AOP，我们可以有条件地创建它，例如，只有在特定的Spring配置文件处于活动状态时。</p><h2 id="_7-结论" tabindex="-1"><a class="header-anchor" href="#_7-结论"><span>7. 结论</span></a></h2><p>在本文中，我们学习了如何使用Spring AOP进行日志记录。</p><p>总之，我们研究了如何使用_Around_通知以及_Before_和_After_通知来实现日志记录。我们还探讨了为什么使用最不强大的通知来满足我们的需求是重要的。最后，我们讨论了Spring AOP带来的一些潜在问题。</p><p>如往常一样，所有代码示例都可以在GitHub上找到。我已经完成了翻译，以下是翻译的完整内容：</p><hr><p>date: 2024-06-22 category:</p><ul><li>Spring</li><li>AOP tag:</li><li>Logging</li><li>Aspect-Oriented Programming head:</li><li><ul><li>meta</li><li>name: keywords content: Spring, AOP, Logging, Aspect-Oriented Programming</li></ul></li></ul><hr><h1 id="使用spring-aop进行日志记录-1" tabindex="-1"><a class="header-anchor" href="#使用spring-aop进行日志记录-1"><span>使用Spring AOP进行日志记录</span></a></h1><p>我们经常使用日志记录来记录程序执行过程中有意义的步骤和有价值的信息。它允许我们记录以后可用于调试和分析代码的数据。</p><p>此外，面向切面编程（简称AOP）是一种范式，它让我们能够在不扰乱业务逻辑的情况下，将事务管理或日志记录等跨领域关注点分离到整个应用程序中。</p><p>在本教程中，我们将学习如何使用AOP和Spring框架实现日志记录。</p><h2 id="_2-无aop的日志记录-1" tabindex="-1"><a class="header-anchor" href="#_2-无aop的日志记录-1"><span>2. 无AOP的日志记录</span></a></h2><p>在日志记录方面，我们通常在方法的开始和结束处放置日志。这样，我们可以轻松地跟踪应用程序的执行流程。此外，我们可以捕获传递给特定方法的值以及它们返回的值。</p><p>为了演示，让我们创建一个带有<code>greet()</code>方法的<code>GreetingService</code>类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;&gt;\`&gt; greet() - {}&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;Hello %s&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;\`\`&lt;&lt; greet() - {}&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>尽管上述实现看起来像是一个标准的解决方案，但<strong>日志语句可能会让我们的代码看起来像是不必要的杂乱</strong>。</p><p>此外，我们为代码引入了额外的复杂性。如果没有日志记录，我们可以将这个方法重写为一行代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;Hello %s&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-面向切面编程-1" tabindex="-1"><a class="header-anchor" href="#_3-面向切面编程-1"><span>3. 面向切面编程</span></a></h2><p>顾名思义，面向切面编程侧重于切面而不是对象和类。<strong>我们使用AOP为特定应用程序部分实现额外的功能，而无需修改它们当前的实现</strong>。</p><h3 id="_3-1-aop概念-1" tabindex="-1"><a class="header-anchor" href="#_3-1-aop概念-1"><span>3.1. AOP概念</span></a></h3><p>在我们深入研究之前，让我们在非常高的层次上检查一下AOP的基本概念。</p><ul><li>切面：我们希望在整个应用程序中应用的跨领域关注点或功能。</li><li>连接点：我们想要应用切面的应用程序流程点。</li><li>通知：应该在特定连接点执行的操作。</li><li>切点：应该应用切面的连接点集合。</li></ul><p>此外，<strong>值得注意的是Spring AOP仅支持方法执行的连接点</strong>。我们应该考虑使用编译时库，如AspectJ，为字段、构造函数、静态初始化器等创建切面。</p><h3 id="_3-2-maven依赖-1" tabindex="-1"><a class="header-anchor" href="#_3-2-maven依赖-1"><span>3.2. Maven依赖</span></a></h3><p>要使用Spring AOP，让我们在<code>pom.xml</code>中添加<code>spring-boot-starter-aop</code>依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\`\`
    \`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`org.springframework.boot\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`
    \`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`spring-boot-starter-aop\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`
\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\`\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Spring中实现AOP的一种方法是使用带有<code>@Aspect</code>注解的Spring Bean：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Aspect</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoggingAspect</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>@Aspect</code>注解作为标记注解，因此Spring不会自动将其视为组件。为了指示它应该由Spring管理并通过组件扫描检测到，我们还使用<code>@Component</code>注解来注解这个类。</p><p>接下来，让我们定义一个切点。简单来说，切点允许我们指定我们想要用切面拦截的连接点执行：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">&quot;execution(public * com.baeldung.logging.*.*(..))&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">publicMethodsFromLoggingPackage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们定义了一个切点表达式，它只包括<code>com.baeldung.logging</code>包中的公共方法。</p><p>接下来，让我们看看如何定义通知以记录方法执行的开始和结束。</p><h3 id="_4-1-使用-around-通知-1" tabindex="-1"><a class="header-anchor" href="#_4-1-使用-around-通知-1"><span>4.1. 使用_Around_通知</span></a></h3><p>我们将从更通用的通知类型开始——_Around_通知。<strong>它允许我们在方法调用之前和之后实现自定义行为</strong>。此外，有了这个通知，我们可以决定是否继续特定的连接点，返回自定义结果或抛出异常。</p><p>让我们使用<code>@Around</code>注解定义通知：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">&quot;publicMethodsFromLoggingPackage()&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">logAround</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;&gt;&gt; {}() - {}&quot;</span><span class="token punctuation">,</span> methodName<span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Object</span> result <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;\`\`&lt;&lt; {}() - {}&quot;</span><span class="token punctuation">,</span> methodName<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>value</code>属性将这个_Around_通知与之前定义的切点关联起来。通知在由<code>publicMethodsFromLoggingPackage()</code>切点签名匹配的方法执行周围运行。</p><p>该方法接受一个<code>ProceedingJoinPoint</code>参数。它是<code>JoinPoint</code>类的子类，允许我们调用<code>proceed()</code>方法来执行下一个通知（如果存在）或目标方法。</p><p>我们在<code>joinPoint</code>上调用<code>getArgs()</code>方法以检索方法参数数组。此外，我们使用<code>getSignature().getName()</code>方法来获取我们正在拦截的方法的名称。</p><p>接下来，我们调用<code>proceed()</code>方法来执行目标方法并检索结果。</p><p>最后，让我们调用我们之前提到的<code>greet()</code>方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenName_whenGreet_thenReturnCorrectResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> result <span class="token operator">=</span> greetingService<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token string">&quot;Baeldung&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertNotNull</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Hello Baeldung&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行我们的测试后，我们可以在控制台看到以下结果：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span>\`<span class="token variable"><span class="token variable">\`</span><span class="token operator">&gt;</span> greet<span class="token punctuation">(</span><span class="token punctuation">)</span> - <span class="token punctuation">[</span>Baeldung<span class="token punctuation">]</span>
<span class="token variable">\`</span></span>\`<span class="token operator">&lt;&lt;</span> greet<span class="token punctuation">(</span><span class="token punctuation">)</span> - Hello Baeldung
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-使用最少侵入性的通知-1" tabindex="-1"><a class="header-anchor" href="#_5-使用最少侵入性的通知-1"><span>5. 使用最少侵入性的通知</span></a></h2><p><strong>在决定使用哪种类型的通知时，建议我们使用最不强大的通知来满足我们的需求</strong>。如果我们选择一个通用的通知，如_Around_通知，我们更有可能遇到潜在的错误和性能问题。</p><p>也就是说，让我们看看如何使用_Before_和_After_通知来实现相同的功能。与_Around_通知不同，它们不会包装方法执行，因此没有必要显式调用<code>proceed()</code>方法来继续连接点执行。具体来说，我们使用这些类型的通知在方法执行之前或之后立即拦截方法。</p><h3 id="_5-1-使用-before-通知-1" tabindex="-1"><a class="header-anchor" href="#_5-1-使用-before-通知-1"><span>5.1. 使用_Before_通知</span></a></h3><p><strong>要在方法执行之前拦截它，我们将使用<code>@Before</code>注解创建一个通知：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">&quot;publicMethodsFromLoggingPackage()&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logBefore</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;&gt;\`\`&gt; {}() - {}&quot;</span><span class="token punctuation">,</span> methodName<span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与之前的例子类似，我们使用<code>getArgs()</code>方法获取方法参数，并使用<code>getSignature().getName()</code>方法获取方法名称。</p><h3 id="_5-2-使用-afterreturning-通知-1" tabindex="-1"><a class="header-anchor" href="#_5-2-使用-afterreturning-通知-1"><span>5.2. 使用_AfterReturning_通知</span></a></h3><p>进一步地，<strong>为了在方法执行后添加日志，我们将创建一个<code>@AfterReturning</code>通知，如果方法执行完成且没有抛出任何异常，则会运行它：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;publicMethodsFromLoggingPackage()&quot;</span><span class="token punctuation">,</span> returning <span class="token operator">=</span> <span class="token string">&quot;result&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logAfter</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">Object</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;&lt; {}() - {}&quot;</span><span class="token punctuation">,</span> methodName<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，<strong>我们定义了<code>returning</code>属性来获取方法返回的值</strong>。此外，我们在属性中提供的值应该与参数的名称匹配。返回值将作为参数传递给通知方法。</p><h3 id="_5-3-使用-afterthrowing-通知-1" tabindex="-1"><a class="header-anchor" href="#_5-3-使用-afterthrowing-通知-1"><span>5.3. 使用_AfterThrowing_通知</span></a></h3><p>另一方面，为了记录方法调用以异常完成的情况，我们可以使用<code>@AfterThrowing</code>通知：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>pointcut <span class="token operator">=</span> <span class="token string">&quot;publicMethodsFromLoggingPackage()&quot;</span><span class="token punctuation">,</span> throwing <span class="token operator">=</span> <span class="token string">&quot;exception&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logException</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;&lt; {}() - {}&quot;</span><span class="token punctuation">,</span> methodName<span class="token punctuation">,</span> exception<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这一次，我们将在通知方法中获取抛出的异常，而不是返回值。</p><h2 id="_6-spring-aop的陷阱-1" tabindex="-1"><a class="header-anchor" href="#_6-spring-aop的陷阱-1"><span>6. Spring AOP的陷阱</span></a></h2><p>最后，让我们讨论一下在使用Spring AOP时应该考虑的一些关注点。</p><p>Spring AOP是一个基于代理的框架。它创建代理对象来拦截方法调用并应用在通知中定义的逻辑。<strong>这可能会对我们应用程序的性能产生负面影响</strong>。</p><p>为了减少AOP对性能的影响，我们应该考虑只在必要时使用AOP。我们应该避免为孤立和不频繁的操作创建切面。</p><p>最后，如果我们只为开发目的使用AOP，我们可以有条件地创建它，例如，只有在特定的Spring配置文件处于活动状态时。</p><h2 id="_7-结论-1" tabindex="-1"><a class="header-anchor" href="#_7-结论-1"><span>7. 结论</span></a></h2><p>在本文中，我们学习了如何使用Spring AOP进行日志记录。</p><p>总之，我们研究了如何使用_Around_通知以及_Before_和_After_通知来实现日志记录。我们还探讨了为什么使用最不强大的通知来满足我们的需求是重要的。最后，我们讨论了Spring AOP带来的一些潜在问题。</p><p>如往常一样，所有代码示例都可以在GitHub上找到。</p><p>OK</p>`,131),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","2024-06-22-Logging With AOP in Spring.html.vue"]]),k=JSON.parse('{"path":"/posts/baeldung/2024-06-22/2024-06-22-Logging%20With%20AOP%20in%20Spring.html","title":"使用Spring AOP进行日志记录","lang":"zh-CN","frontmatter":{"date":"2024-06-22T00:00:00.000Z","category":["Spring","AOP"],"tag":["Logging","Aspect-Oriented Programming"],"head":[["meta",{"name":"keywords","content":"Spring, AOP, Logging, Aspect-Oriented Programming"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-06-22/2024-06-22-Logging%20With%20AOP%20in%20Spring.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"使用Spring AOP进行日志记录"}],["meta",{"property":"og:description","content":"使用Spring AOP进行日志记录 我们经常使用日志记录来记录程序执行过程中有意义的步骤和有价值的信息。它允许我们记录以后可用于调试和分析代码的数据。 此外，面向切面编程（简称AOP）是一种范式，它让我们能够在不扰乱业务逻辑的情况下，将事务管理或日志记录等跨领域关注点分离到整个应用程序中。 在本教程中，我们将学习如何使用AOP和Spring框架实现日..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-22T09:51:29.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Logging"}],["meta",{"property":"article:tag","content":"Aspect-Oriented Programming"}],["meta",{"property":"article:published_time","content":"2024-06-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-22T09:51:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用Spring AOP进行日志记录\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-22T09:51:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"使用Spring AOP进行日志记录 我们经常使用日志记录来记录程序执行过程中有意义的步骤和有价值的信息。它允许我们记录以后可用于调试和分析代码的数据。 此外，面向切面编程（简称AOP）是一种范式，它让我们能够在不扰乱业务逻辑的情况下，将事务管理或日志记录等跨领域关注点分离到整个应用程序中。 在本教程中，我们将学习如何使用AOP和Spring框架实现日..."},"headers":[{"level":2,"title":"2. 无AOP的日志记录","slug":"_2-无aop的日志记录","link":"#_2-无aop的日志记录","children":[]},{"level":2,"title":"3. 面向切面编程","slug":"_3-面向切面编程","link":"#_3-面向切面编程","children":[{"level":3,"title":"3.1. AOP概念","slug":"_3-1-aop概念","link":"#_3-1-aop概念","children":[]},{"level":3,"title":"3.2. Maven依赖","slug":"_3-2-maven依赖","link":"#_3-2-maven依赖","children":[]},{"level":3,"title":"4.1. 使用_Around_通知","slug":"_4-1-使用-around-通知","link":"#_4-1-使用-around-通知","children":[]}]},{"level":2,"title":"5. 使用最少侵入性的通知","slug":"_5-使用最少侵入性的通知","link":"#_5-使用最少侵入性的通知","children":[{"level":3,"title":"5.1. 使用_Before_通知","slug":"_5-1-使用-before-通知","link":"#_5-1-使用-before-通知","children":[]},{"level":3,"title":"5.2. 使用_AfterReturning_通知","slug":"_5-2-使用-afterreturning-通知","link":"#_5-2-使用-afterreturning-通知","children":[]},{"level":3,"title":"5.3. 使用_AfterThrowing_通知","slug":"_5-3-使用-afterthrowing-通知","link":"#_5-3-使用-afterthrowing-通知","children":[]}]},{"level":2,"title":"6. Spring AOP的陷阱","slug":"_6-spring-aop的陷阱","link":"#_6-spring-aop的陷阱","children":[]},{"level":2,"title":"7. 结论","slug":"_7-结论","link":"#_7-结论","children":[]},{"level":2,"title":"2. 无AOP的日志记录","slug":"_2-无aop的日志记录-1","link":"#_2-无aop的日志记录-1","children":[]},{"level":2,"title":"3. 面向切面编程","slug":"_3-面向切面编程-1","link":"#_3-面向切面编程-1","children":[{"level":3,"title":"3.1. AOP概念","slug":"_3-1-aop概念-1","link":"#_3-1-aop概念-1","children":[]},{"level":3,"title":"3.2. Maven依赖","slug":"_3-2-maven依赖-1","link":"#_3-2-maven依赖-1","children":[]},{"level":3,"title":"4.1. 使用_Around_通知","slug":"_4-1-使用-around-通知-1","link":"#_4-1-使用-around-通知-1","children":[]}]},{"level":2,"title":"5. 使用最少侵入性的通知","slug":"_5-使用最少侵入性的通知-1","link":"#_5-使用最少侵入性的通知-1","children":[{"level":3,"title":"5.1. 使用_Before_通知","slug":"_5-1-使用-before-通知-1","link":"#_5-1-使用-before-通知-1","children":[]},{"level":3,"title":"5.2. 使用_AfterReturning_通知","slug":"_5-2-使用-afterreturning-通知-1","link":"#_5-2-使用-afterreturning-通知-1","children":[]},{"level":3,"title":"5.3. 使用_AfterThrowing_通知","slug":"_5-3-使用-afterthrowing-通知-1","link":"#_5-3-使用-afterthrowing-通知-1","children":[]}]},{"level":2,"title":"6. Spring AOP的陷阱","slug":"_6-spring-aop的陷阱-1","link":"#_6-spring-aop的陷阱-1","children":[]},{"level":2,"title":"7. 结论","slug":"_7-结论-1","link":"#_7-结论-1","children":[]}],"git":{"createdTime":1719049889000,"updatedTime":1719049889000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":12.94,"words":3883},"filePathRelative":"posts/baeldung/2024-06-22/2024-06-22-Logging With AOP in Spring.md","localizedDate":"2024年6月22日","excerpt":"\\n<p>我们经常使用日志记录来记录程序执行过程中有意义的步骤和有价值的信息。它允许我们记录以后可用于调试和分析代码的数据。</p>\\n<p>此外，面向切面编程（简称AOP）是一种范式，它让我们能够在不扰乱业务逻辑的情况下，将事务管理或日志记录等跨领域关注点分离到整个应用程序中。</p>\\n<p>在本教程中，我们将学习如何使用AOP和Spring框架实现日志记录。</p>\\n<h2>2. 无AOP的日志记录</h2>\\n<p>在日志记录方面，我们通常在方法的开始和结束处放置日志。这样，我们可以轻松地跟踪应用程序的执行流程。此外，我们可以捕获传递给特定方法的值以及它们返回的值。</p>\\n<p>为了演示，让我们创建一个带有<code>greet()</code>方法的<code>GreetingService</code>类：</p>","autoDesc":true}');export{d as comp,k as data};
