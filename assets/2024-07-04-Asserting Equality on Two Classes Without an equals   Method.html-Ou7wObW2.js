import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-813qSKfg.js";const p={},e=t('<h1 id="在没有equals-方法的情况下断言两个类的相等性" tabindex="-1"><a class="header-anchor" href="#在没有equals-方法的情况下断言两个类的相等性"><span>在没有equals()方法的情况下断言两个类的相等性</span></a></h1><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p>有时我们无法重写一个类中的_equals()_方法。尽管如此，我们仍然希望比较一个对象与另一个对象以检查它们是否相同。</p><p>在本教程中，我们将学习几种在不使用_equals()_方法的情况下测试两个对象相等性的方法。</p><h2 id="_2-示例类" tabindex="-1"><a class="header-anchor" href="#_2-示例类"><span>2. 示例类</span></a></h2><p>在我们深入之前，让我们创建我们将在示例中使用的类。我们将使用_Person_和_Address_类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">Address</span> address<span class="token punctuation">;</span>\n\n    <span class="token comment">// getters and setters</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> city<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> street<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> country<span class="token punctuation">;</span>\n\n    <span class="token comment">// getters and setters</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们没有重写这些类中的_equals()_方法。因此，默认实现将在确定相等性时执行。换句话说，<strong>Java在检查相等性时检查两个引用是否指向同一个对象</strong>。</p><h2 id="_3-使用assertj" tabindex="-1"><a class="header-anchor" href="#_3-使用assertj"><span>3. 使用AssertJ</span></a></h2><p>AssertJ库提供了一种使用递归比较来比较对象的方式。使用内省，它确定应该比较哪些字段和值。</p><p>首先，要使用AssertJ库，让我们在_pom.xml_中添加assertj-core依赖项：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>````org.assertj````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>````assertj-core````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>````3.21.0````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>````test````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>````\n````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要检查两个_Person_实例中的字段是否包含相同的值，我们将在调用_isEqualTo()_方法之前使用_usingRecursiveComparison()_方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Person</span> expected <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;Jane&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Doe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Person</span> actual <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;Jane&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Doe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">assertThat</span><span class="token punctuation">(</span>actual<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">usingRecursiveComparison</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span>expected<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，该算法获取实际对象的字段，然后将它们与预期对象的相应字段进行比较。<strong>然而，比较不是对称的</strong>。预期对象可以比实际对象有更多的字段。</p><p>此外，我们可以使用_ignoringFields()_方法忽略某个字段：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Person</span> expected <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;Jane&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Doe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Person</span> actual <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">2L</span><span class="token punctuation">,</span> <span class="token string">&quot;Jane&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Doe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">assertThat</span><span class="token punctuation">(</span>actual<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">usingRecursiveComparison</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">ignoringFields</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span>expected<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，当我们想要比较复杂对象时，它也工作得非常有效：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Person</span> expected <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;Jane&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Doe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Address</span> address1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;New York&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Sesame Street&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;United States&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nexpected<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span>address1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">Person</span> actual <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;Jane&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Doe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Address</span> address2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;New York&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Sesame Street&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;United States&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nactual<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span>address2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">assertThat</span><span class="token punctuation">(</span>actual<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">usingRecursiveComparison</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span>expected<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-使用hamcrest" tabindex="-1"><a class="header-anchor" href="#_4-使用hamcrest"><span>4. 使用Hamcrest</span></a></h2><p>Hamcrest库使用反射来检查两个对象是否包含相同的属性。此外，它创建了一个匹配器来检查实际对象是否包含与预期对象相同的值。</p><p>首先，让我们在_pom.xml_中添加Hamcrest依赖项：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>````org.hamcrest````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>````hamcrest````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>````2.2````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>````test````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>````\n````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，让我们调用_samePropertyValuesAs()_方法并传递预期对象：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Person</span> expected <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;Jane&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Doe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Person</span> actual <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;Jane&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Doe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">MatcherAssert</span><span class="token punctuation">.</span><span class="token function">assertThat</span><span class="token punctuation">(</span>actual<span class="token punctuation">,</span> <span class="token function">samePropertyValuesAs</span><span class="token punctuation">(</span>expected<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类似于前面的示例，我们可以传递我们想要忽略的字段名称。它们将从预期和实际对象中删除。</p><p>然而，在幕后，Hamcrest使用反射从特定字段获取值。<strong>当检查相等性时，将调用每个字段的_equals()_方法</strong>。</p><p>也就是说，<strong>如果我们使用复杂对象，上述代码将不起作用</strong>，因为我们也没有重写_Address_类的_equals()_方法。因此，它将检查两个_Address_引用是否指向内存中的同一个对象。因此，断言将失败。</p><p>如果我们想要比较复杂对象，<strong>我们需要单独比较它们</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Person</span> expected <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;Jane&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Doe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Address</span> address1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;New York&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Sesame Street&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;United States&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nexpected<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span>address1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">Person</span> actual <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;Jane&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Doe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Address</span> address2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;New York&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Sesame Street&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;United States&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nactual<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span>address2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">MatcherAssert</span><span class="token punctuation">.</span><span class="token function">assertThat</span><span class="token punctuation">(</span>actual<span class="token punctuation">,</span> <span class="token function">samePropertyValuesAs</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> <span class="token string">&quot;address&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">MatcherAssert</span><span class="token punctuation">.</span><span class="token function">assertThat</span><span class="token punctuation">(</span>actual<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">samePropertyValuesAs</span><span class="token punctuation">(</span>expected<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们首先从第一个断言中排除了_address_字段，然后在第二个断言中进行了比较。</p><h2 id="_5-使用apache-commons-lang3" tabindex="-1"><a class="header-anchor" href="#_5-使用apache-commons-lang3"><span>5. 使用Apache Commons Lang3</span></a></h2><p>现在，让我们看看如何使用Apache Commons库来检查相等性。</p><p>我们将在_pom.xml_中添加Apache Commons Lang3依赖项：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>````org.apache.commons````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>````commons-lang3````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>````3.14.0````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>````test````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>````\n````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-1-reflectiontostringbuilder-类" tabindex="-1"><a class="header-anchor" href="#_5-1-reflectiontostringbuilder-类"><span>5.1. <em>ReflectionToStringBuilder</em> 类</span></a></h3><p>Apache Commons提供的其中一个类是_ReflectionToStringBuilder_类。它允许我们通过反映其字段和值来生成对象的字符串表示。</p><p>通过比较两个对象的字符串表示，我们可以在不需要使用_equals()_方法的情况下断言它们的相等性：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Person</span> expected <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;Jane&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Doe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Person</span> actual <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;Jane&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Doe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">assertThat</span><span class="token punctuation">(</span><span class="token class-name">ReflectionToStringBuilder</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>actual<span class="token punctuation">,</span> <span class="token class-name">ToStringStyle</span><span class="token punctuation">.</span><span class="token constant">SHORT_PREFIX_STYLE</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token class-name">ReflectionToStringBuilder</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> <span class="token class-name">ToStringStyle</span><span class="token punctuation">.</span><span class="token constant">SHORT_PREFIX_STYLE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>然而，我们仍然需要在我们的类中重写_toString()_方法</strong>。</p><h3 id="_5-2-equalsbuilder-类" tabindex="-1"><a class="header-anchor" href="#_5-2-equalsbuilder-类"><span>5.2. <em>EqualsBuilder</em> 类</span></a></h3><p>或者，我们可以使用_EqualsBuilder_类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Person</span> expected <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;Jane&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Doe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Person</span> actual <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;Jane&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Doe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token class-name">EqualsBuilder</span><span class="token punctuation">.</span><span class="token function">reflectionEquals</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> actual<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它使用Java反射API比较两个对象的字段。<strong>需要注意的是，_reflectionEquals()_方法使用浅相等检查</strong>。</p><p>因此，当比较两个复杂对象时，我们需要忽略这些字段并单独比较它们：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Person</span> expected <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;Jane&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Doe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Address</span> address1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;New York&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Sesame Street&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;United States&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nexpected<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span>address1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">Person</span> actual <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;Jane&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Doe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Address</span> address2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;New York&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Sesame Street&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;United States&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nactual<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span>address2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token class-name">EqualsBuilder</span><span class="token punctuation">.</span><span class="token function">reflectionEquals</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> actual<span class="token punctuation">,</span> <span class="token string">&quot;address&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token class-name">EqualsBuilder</span><span class="token punctuation">.</span><span class="token function">reflectionEquals</span><span class="token punctuation">(</span>expected<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> actual<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-使用mockito" tabindex="-1"><a class="header-anchor" href="#_6-使用mockito"><span>6. 使用Mockito</span></a></h2><p>我们可以通过使用Mockito来断言两个实例的相等性。</p><p>我们需要mockito-core依赖项：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>````org.mockito````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>````mockito-core````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>````5.11.0````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>````test````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>````\n````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们可以使用Mockito的_ReflectionEquals_类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Person</span> expected <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;Jane&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Doe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Person</span> actual <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;Jane&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Doe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ReflectionEquals</span><span class="token punctuation">(</span>expected<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>actual<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>此外，当检查相等性时，将调用Apache Commons库中的_EqualsBuilder_</strong>。</p><p>再次，我们将需要使用与_EqualsBuilder_相同的修补程序来比较复杂对象：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Person</span> expected <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;Jane&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Doe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Address</span> address1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;New York&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Sesame Street&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;United States&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nexpected<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span>address1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">Person</span> actual <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;Jane&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Doe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Address</span> address2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;New York&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Sesame Street&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;United States&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nactual<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span>address2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ReflectionEquals</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> <span class="token string">&quot;address&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>actual<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ReflectionEquals</span><span class="token punctuation">(</span>expected<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>actual<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-结论" tabindex="-1"><a class="header-anchor" href="#_7-结论"><span>7. 结论</span></a></h2><p>在本文中，我们学习了如何在不使用_equals()</p>',57),o=[e];function c(l,u){return a(),s("div",null,o)}const r=n(p,[["render",c],["__file","2024-07-04-Asserting Equality on Two Classes Without an equals   Method.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-04/2024-07-04-Asserting%20Equality%20on%20Two%20Classes%20Without%20an%20equals%20%20%20Method.html","title":"在没有equals()方法的情况下断言两个类的相等性","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","Testing"],"tag":["equals","assert","comparison"],"head":[["meta",{"name":"keywords","content":"Java, Testing, equals, assert, comparison"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-04/2024-07-04-Asserting%20Equality%20on%20Two%20Classes%20Without%20an%20equals%20%20%20Method.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"在没有equals()方法的情况下断言两个类的相等性"}],["meta",{"property":"og:description","content":"在没有equals()方法的情况下断言两个类的相等性 1. 概述 有时我们无法重写一个类中的_equals()_方法。尽管如此，我们仍然希望比较一个对象与另一个对象以检查它们是否相同。 在本教程中，我们将学习几种在不使用_equals()_方法的情况下测试两个对象相等性的方法。 2. 示例类 在我们深入之前，让我们创建我们将在示例中使用的类。我们将使用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-04T05:56:43.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"equals"}],["meta",{"property":"article:tag","content":"assert"}],["meta",{"property":"article:tag","content":"comparison"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-04T05:56:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"在没有equals()方法的情况下断言两个类的相等性\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-04T05:56:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"在没有equals()方法的情况下断言两个类的相等性 1. 概述 有时我们无法重写一个类中的_equals()_方法。尽管如此，我们仍然希望比较一个对象与另一个对象以检查它们是否相同。 在本教程中，我们将学习几种在不使用_equals()_方法的情况下测试两个对象相等性的方法。 2. 示例类 在我们深入之前，让我们创建我们将在示例中使用的类。我们将使用..."},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. 示例类","slug":"_2-示例类","link":"#_2-示例类","children":[]},{"level":2,"title":"3. 使用AssertJ","slug":"_3-使用assertj","link":"#_3-使用assertj","children":[]},{"level":2,"title":"4. 使用Hamcrest","slug":"_4-使用hamcrest","link":"#_4-使用hamcrest","children":[]},{"level":2,"title":"5. 使用Apache Commons Lang3","slug":"_5-使用apache-commons-lang3","link":"#_5-使用apache-commons-lang3","children":[{"level":3,"title":"5.1. ReflectionToStringBuilder 类","slug":"_5-1-reflectiontostringbuilder-类","link":"#_5-1-reflectiontostringbuilder-类","children":[]},{"level":3,"title":"5.2. EqualsBuilder 类","slug":"_5-2-equalsbuilder-类","link":"#_5-2-equalsbuilder-类","children":[]}]},{"level":2,"title":"6. 使用Mockito","slug":"_6-使用mockito","link":"#_6-使用mockito","children":[]},{"level":2,"title":"7. 结论","slug":"_7-结论","link":"#_7-结论","children":[]}],"git":{"createdTime":1720072603000,"updatedTime":1720072603000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":4.87,"words":1461},"filePathRelative":"posts/baeldung/2024-07-04/2024-07-04-Asserting Equality on Two Classes Without an equals   Method.md","localizedDate":"2022年4月1日","excerpt":"\\n<h2>1. 概述</h2>\\n<p>有时我们无法重写一个类中的_equals()_方法。尽管如此，我们仍然希望比较一个对象与另一个对象以检查它们是否相同。</p>\\n<p>在本教程中，我们将学习几种在不使用_equals()_方法的情况下测试两个对象相等性的方法。</p>\\n<h2>2. 示例类</h2>\\n<p>在我们深入之前，让我们创建我们将在示例中使用的类。我们将使用_Person_和_Address_类：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Person</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">Long</span> id<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">String</span> firstName<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">String</span> lastName<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">Address</span> address<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// getters and setters</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Address</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">Long</span> id<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">String</span> city<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">String</span> street<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">String</span> country<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// getters and setters</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{r as comp,d as data};
