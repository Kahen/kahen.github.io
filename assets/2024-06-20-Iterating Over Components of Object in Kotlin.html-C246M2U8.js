import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-DRh-WJAL.js";const e={},p=t(`<h1 id="在kotlin中迭代对象组件" tabindex="-1"><a class="header-anchor" href="#在kotlin中迭代对象组件"><span>在Kotlin中迭代对象组件</span></a></h1><p>本文将探讨迭代对象组件的不同方法。我们将深入研究如何使用多种方法访问Kotlin中的类和数据类的属性和函数，例如使用反射。这在我们需要在运行时动态地自省或操作对象时非常有用。</p><h2 id="_2-依赖项" tabindex="-1"><a class="header-anchor" href="#_2-依赖项"><span>2. 依赖项</span></a></h2><p>在本文中，我们将使用<strong>kotlin-reflect</strong>模块，因此让我们在_pom.xml_中包含它：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>\`&lt;dependency&gt;\`
    \`&lt;groupId&gt;\`org.jetbrains.kotlin\`&lt;/groupId&gt;\`
    \`&lt;artifactId&gt;\`kotlin-reflect\`&lt;/artifactId&gt;\`
    \`&lt;version&gt;\`1.9.22\`&lt;/version&gt;\`
\`&lt;/dependency&gt;\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，让我们创建一个_Person_和一个_Employee_类来使用：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> age<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> isAdult<span class="token operator">:</span> Boolean
        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> age <span class="token operator">&gt;=</span> <span class="token number">18</span>

    <span class="token keyword">val</span> Person<span class="token punctuation">.</span>isTeenager<span class="token operator">:</span> Boolean
        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> age <span class="token keyword">in</span> <span class="token number">13</span><span class="token operator">..</span><span class="token number">19</span>

    <span class="token keyword">fun</span> Person<span class="token punctuation">.</span><span class="token function">isRetired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token punctuation">{</span>
        <span class="token keyword">return</span> age <span class="token operator">&gt;=</span> <span class="token number">65</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">open</span> <span class="token keyword">class</span> <span class="token function">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> employeeId<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">var</span> salary<span class="token operator">:</span> Double <span class="token operator">=</span> <span class="token number">0.0</span>

    <span class="token keyword">val</span> currentSalary<span class="token operator">:</span> Double
        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> salary

    <span class="token keyword">val</span> Employee<span class="token punctuation">.</span>isSenior<span class="token operator">:</span> Boolean
        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> salary <span class="token operator">&gt;=</span> <span class="token number">1000.0</span>

    <span class="token keyword">fun</span> Employee<span class="token punctuation">.</span><span class="token function">isPromoted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token punctuation">{</span>
        <span class="token keyword">return</span> salary <span class="token operator">&gt;=</span> <span class="token number">2000.0</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-使用kotlin反射" tabindex="-1"><a class="header-anchor" href="#_3-使用kotlin反射"><span>3. 使用Kotlin反射</span></a></h2><p>一旦导入模块，我们就可以使用各种属性，每种属性都有其特定的功能和优势，可以在类和数据类中使用。我们将看看提供的最常见的一些，并然后实现一个简单的示例。</p><h3 id="_3-1-类成员" tabindex="-1"><a class="header-anchor" href="#_3-1-类成员"><span>3.1. 类成员</span></a></h3><p>让我们首先看看如何获取一个类或数据类的所有成员。为了做到这一点，我们将使用_members_和_declaredMembers_。</p><p><strong>_members_属性返回所有类成员（属性和函数）</strong>，包括那些从超类和接口继承的。**_declaredMembers_只返回在类或接口中明确声明的，不包括从超类和接口继承的。</p><p>两者<strong>都提供了对当前类的所有公共、私有、受保护和内部成员的访问</strong>。</p><p>让我们看一些例子：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Test</span>
<span class="token keyword">fun</span> <span class="token function">\`获取Person数据类成员\`</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> person <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Daniel&quot;</span></span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">)</span>

    <span class="token function">assertThat</span><span class="token punctuation">(</span>person<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>members<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">extracting</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;age&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;isAdult&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;currentSalary&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;employeeId&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;salary&quot;</span></span><span class="token punctuation">)</span>

    <span class="token function">assertThat</span><span class="token punctuation">(</span>person<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>declaredMembers<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">extracting</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;age&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;isAdult&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-类属性" tabindex="-1"><a class="header-anchor" href="#_3-2-类属性"><span>3.2. 类属性</span></a></h3><p>虽然检查_members_返回了类的所有属性和函数，但在某些情况下，我们可能只需要类属性。为此，我们可以访问_memberProperties_, <em>declaredMemberProperties</em>, <em>memberExtensionProperties</em>, <em>declaredMemberExtensionProperties</em>, 和 <em>staticProperties</em>。</p><p>它们的功能非常直接。一方面，我们有**_memberProperties_和_memberExtensionProperties_返回所有类属性**，包括那些从超类和接口继承的：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Test</span>
<span class="token keyword">fun</span> <span class="token function">\`获取Person数据类的成员属性\`</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> person <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Daniel&quot;</span></span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span>

    <span class="token function">assertThat</span><span class="token punctuation">(</span>person<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>memberProperties<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">extracting</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;age&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;isAdult&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;employeeId&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;salary&quot;</span></span><span class="token punctuation">)</span>

    <span class="token function">assertThat</span><span class="token punctuation">(</span>person<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>memberExtensionProperties<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">extracting</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">containsOnly</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;isTeenager&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;isSenior&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另一方面，我们可以使用**_declaredMemberProperties_和_declaredMemberExtensionProperties_只包括那些直接在类中声明的**，而不是从其他类或接口继承的：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Test</span>
<span class="token keyword">fun</span> <span class="token function">\`获取Person数据类声明的成员属性\`</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> person <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Daniel&quot;</span></span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">)</span>

    <span class="token function">assertThat</span><span class="token punctuation">(</span>person<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>declaredMemberProperties<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">extracting</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">containsOnly</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;age&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;isAdult&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">)</span>

    <span class="token function">assertThat</span><span class="token punctuation">(</span>person<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>declaredMemberExtensionProperties<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">extracting</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">containsOnly</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;isTeenager&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在_Person类_的上下文中，扩展属性附加了额外的属性，如_isTeenager_和_isSenior_，到类中。</p><p><strong>使用_staticProperties_，我们可以直接访问Java类中的静态字段</strong>，这些字段具有_static_修饰符。具体来说，我们需要创建_Circle_ Java _类_并存储一个常量值：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> <span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Test</span>
<span class="token keyword">fun</span> <span class="token function">\`获取Java类静态属性\`</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> circle <span class="token operator">=</span> <span class="token function">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token function">assertThat</span><span class="token punctuation">(</span>Circle<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>staticProperties<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">extracting</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">containsOnly</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;PI&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>值得注意的是，Kotlin支持静态成员的概念，尽管与Java的方式不同。在Kotlin中实现这种行为的主要方式是使用伴生对象。</p><h3 id="_3-3-类函数" tabindex="-1"><a class="header-anchor" href="#_3-3-类函数"><span>3.3. 类函数</span></a></h3><p>就像迭代属性一样，我们也可以迭代类的函数，使用_memberFunctions_, <em>memberExtensionFunctions</em>, <em>declaredMemberFunctions</em>, <em>declaredMemberExtensionFunctions</em>, 和 <em>staticFunctions</em>。</p><p>通过使用**_memberFunctions_和_memberExtensionFunctions_我们可以返回所有类函数**，包括那些从超类和接口继承的：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Test</span>
<span class="token keyword">fun</span> <span class="token function">\`获取Person数据类的成员函数\`</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> person <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Daniel&quot;</span></span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">)</span>

    <span class="token function">assertThat</span><span class="token punctuation">(</span>person<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>memberFunctions<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">extracting</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;component1&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;component2&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;copy&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;equals&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;hashCode&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;toString&quot;</span></span><span class="token punctuation">)</span>

    <span class="token function">assertThat</span><span class="token punctuation">(</span>person<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>memberExtensionFunctions<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">extracting</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">containsOnly</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;isRetired&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;isPromoted&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者，<strong>_declaredMemberFunctions_和_declaredMemberExtensionFunctions_让我们直接访问类中声明的函数</strong>，而不是从其他类或接口继承的：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Test</span>
<span class="token keyword">fun</span> <span class="token function">\`获取Person数据类声明的成员函数\`</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> person <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Daniel&quot;</span></span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">)</span>

    <span class="token function">assertThat</span><span class="token punctuation">(</span>person<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>declaredMemberFunctions<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">extracting</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;component1&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;component2&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;copy&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;equals&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;hashCode&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;toString&quot;</span></span><span class="token punctuation">)</span>

    <span class="token function">assertThat</span><span class="token punctuation">(</span>person<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>declaredMemberExtensionFunctions<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">extracting</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">containsOnly</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;isRetired&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与_staticProperties_一样，它返回Java类中的静态字段，<strong>我们可以使用_staticFunctions_来获取所有可用的函数</strong>。让我们为我们的_Circle_ _类_添加一个静态函数，看看我们如何检索它：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">calculateArea</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token constant">PI</span> <span class="token operator">*</span> radius <span class="token operator">*</span> radius<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Test</span>
<span class="token keyword">fun</span> <span class="token function">\`获取Person数据类的静态函数\`</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> circle <span class="token operator">=</span> <span class="token function">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token function">assertThat</span><span class="token punctuation">(</span>circle<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>staticFunctions<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">extracting</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;calculateArea&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-伴生对象和嵌套类" tabindex="-1"><a class="header-anchor" href="#_3-4-伴生对象和嵌套类"><span>3.4. 伴生对象和嵌套类</span></a></h3><p>在前面的小节中，我们讨论了伴生对象作为Java静态属性和函数的替代品。现在让我们更深入地看看如何迭代它们。让我们向_Person类_添加_Create_ <em>伴生对象</em>：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">companion</span> <span class="token keyword">object</span> Create <span class="token punctuation">{</span>
    <span class="token keyword">fun</span> <span class="token function">create</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token punctuation">,</span> age<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们编写一个测试，使用_companionObject_属性返回_Create_伴生对象：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Test</span>
<span class="token keyword">fun</span> <span class="token function">\`获取Person数据类的伴生对象\`</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> person <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Daniel&quot;</span></span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">)</span>

    <span class="token function">assertThat</span><span class="token punctuation">(</span>person<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>companionObject<span class="token punctuation">)</span>
        <span class="token punctuation">.</span>isNotNull
        <span class="token punctuation">.</span><span class="token function">extracting</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;simpleName&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Create&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>随着最近对_Person类_的添加，值得注意的是，如果我们执行检查类成员的测试，它返回正确的结果。这是因为_members_只考虑属性和函数，不包括伴生对象。这也适用于内部类和对象。</p><p>让我们向我们的_Person类_添加_Job_内部_data class_和_Address_ <em>object</em>：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Job</span><span class="token punctuation">(</span><span class="token keyword">val</span> title<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> salary<span class="token operator">:</span> Float<span class="token punctuation">)</span>

<span class="token keyword">object</span> Address <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token keyword">val</span> planet<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Earth&quot;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要迭代这些嵌套对象，我们使用_nestedClasses_属性：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Test</span>
<span class="token keyword">fun</span> <span class="token function">\`获取Person的内部data class\`</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> person <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Daniel&quot;</span></span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">)</span>

    <span class="token function">assertThat</span><span class="token punctuation">(</span>person<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>nestedClasses<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">extracting</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;simpleName&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Job&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;Address&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-解构声明" tabindex="-1"><a class="header-anchor" href="#_4-解构声明"><span>4. 解构声明</span></a></h2><p>Kotlin支持解构声明，它允许你将一个对象分解为其部分，并将它们分配给单个语句的变量。这个特性在迭代具有固定数量组件的对象时特别有用，例如对或三元组。现在，让我们将解构声明逻辑应用到_Person类_：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Test</span>
<span class="token keyword">fun</span> <span class="token function">\`解构声明用于数据类\`</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> person <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Daniel&quot;</span></span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token operator">=</span> person

    <span class="token function">assertThat</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Daniel&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">assertThat</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token number">37</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-自定义迭代器函数" tabindex="-1"><a class="header-anchor" href="#_5-自定义迭代器函数"><span>5. 自定义迭代器函数</span></a></h2><p>反射为我们提供了浏览对象组件所需的工具。另一种方法是为_Person类_创建一个扩展函数：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> Person<span class="token punctuation">.</span><span class="token function">components</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Iterator\`<span class="token operator">&lt;</span>Pair<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Any<span class="token operator">&gt;</span>\`<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">listOf</span><span class="token punctuation">(</span>
        <span class="token string-literal singleline"><span class="token string">&quot;name&quot;</span></span> <span class="token keyword">to</span> name<span class="token punctuation">,</span>
        <span class="token string-literal singleline"><span class="token string">&quot;age&quot;</span></span> <span class="token keyword">to</span> age<span class="token punctuation">,</span>
        <span class="token string-literal singleline"><span class="token string">&quot;isAdult&quot;</span></span> <span class="token keyword">to</span> isAdult<span class="token punctuation">,</span>
        <span class="token string-literal singleline"><span class="token string">&quot;isTeenager&quot;</span></span> <span class="token keyword">to</span> isTeenager<span class="token punctuation">,</span>
        <span class="token string-literal singleline"><span class="token string">&quot;isRetired&quot;</span></span> <span class="token keyword">to</span> <span class="token function">isRetired</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的缺点是，如果类结构发生变化，_components_函数也必须更新。</p><h2 id="_6-结论" tabindex="-1"><a class="header-anchor" href="#_6-结论"><span>6. 结论</span></a></h2><p>在本文中，我们探讨了多种迭代对象组件的方法。</p><p>首先，我们看到了Kotlin反射，它帮助我们访问类成员、属性和函数。</p><p>然后，我们检查了一种更简单的迭代对象的方法，即使用解构声明，当处理少量属性时。</p><p>最后，我们用一个自定义扩展函数将它们结合起来，实现了相同的目标，而没有使用反射。</p><p>如往常一样，这些示例的完整实现可以在GitHub上找到。</p><p>OK</p>`,59),o=[p];function l(i,c){return a(),s("div",null,o)}const k=n(e,[["render",l],["__file","2024-06-20-Iterating Over Components of Object in Kotlin.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/Archive/2024-06-20-Iterating%20Over%20Components%20of%20Object%20in%20Kotlin.html","title":"在Kotlin中迭代对象组件","lang":"zh-CN","frontmatter":{"date":"2024-06-20T00:00:00.000Z","category":["Kotlin","Programming"],"tag":["Kotlin","Reflection","Iteration"],"head":[["meta",{"name":"keywords","content":"Kotlin, Reflection, Iteration, Object Components"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/Archive/2024-06-20-Iterating%20Over%20Components%20of%20Object%20in%20Kotlin.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"在Kotlin中迭代对象组件"}],["meta",{"property":"og:description","content":"在Kotlin中迭代对象组件 本文将探讨迭代对象组件的不同方法。我们将深入研究如何使用多种方法访问Kotlin中的类和数据类的属性和函数，例如使用反射。这在我们需要在运行时动态地自省或操作对象时非常有用。 2. 依赖项 在本文中，我们将使用kotlin-reflect模块，因此让我们在_pom.xml_中包含它： 最后，让我们创建一个_Person_和..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-21T09:54:56.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Kotlin"}],["meta",{"property":"article:tag","content":"Reflection"}],["meta",{"property":"article:tag","content":"Iteration"}],["meta",{"property":"article:published_time","content":"2024-06-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-21T09:54:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"在Kotlin中迭代对象组件\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-21T09:54:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"在Kotlin中迭代对象组件 本文将探讨迭代对象组件的不同方法。我们将深入研究如何使用多种方法访问Kotlin中的类和数据类的属性和函数，例如使用反射。这在我们需要在运行时动态地自省或操作对象时非常有用。 2. 依赖项 在本文中，我们将使用kotlin-reflect模块，因此让我们在_pom.xml_中包含它： 最后，让我们创建一个_Person_和..."},"headers":[{"level":2,"title":"2. 依赖项","slug":"_2-依赖项","link":"#_2-依赖项","children":[]},{"level":2,"title":"3. 使用Kotlin反射","slug":"_3-使用kotlin反射","link":"#_3-使用kotlin反射","children":[{"level":3,"title":"3.1. 类成员","slug":"_3-1-类成员","link":"#_3-1-类成员","children":[]},{"level":3,"title":"3.2. 类属性","slug":"_3-2-类属性","link":"#_3-2-类属性","children":[]},{"level":3,"title":"3.3. 类函数","slug":"_3-3-类函数","link":"#_3-3-类函数","children":[]},{"level":3,"title":"3.4. 伴生对象和嵌套类","slug":"_3-4-伴生对象和嵌套类","link":"#_3-4-伴生对象和嵌套类","children":[]}]},{"level":2,"title":"4. 解构声明","slug":"_4-解构声明","link":"#_4-解构声明","children":[]},{"level":2,"title":"5. 自定义迭代器函数","slug":"_5-自定义迭代器函数","link":"#_5-自定义迭代器函数","children":[]},{"level":2,"title":"6. 结论","slug":"_6-结论","link":"#_6-结论","children":[]}],"git":{"createdTime":1718963696000,"updatedTime":1718963696000,"contributors":[{"name":"Lance Li","email":"lance.jx.li@gtomato.com","commits":1}]},"readingTime":{"minutes":5.77,"words":1731},"filePathRelative":"posts/baeldung/Archive/2024-06-20-Iterating Over Components of Object in Kotlin.md","localizedDate":"2024年6月20日","excerpt":"\\n<p>本文将探讨迭代对象组件的不同方法。我们将深入研究如何使用多种方法访问Kotlin中的类和数据类的属性和函数，例如使用反射。这在我们需要在运行时动态地自省或操作对象时非常有用。</p>\\n<h2>2. 依赖项</h2>\\n<p>在本文中，我们将使用<strong>kotlin-reflect</strong>模块，因此让我们在_pom.xml_中包含它：</p>\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code>`&lt;dependency&gt;`\\n    `&lt;groupId&gt;`org.jetbrains.kotlin`&lt;/groupId&gt;`\\n    `&lt;artifactId&gt;`kotlin-reflect`&lt;/artifactId&gt;`\\n    `&lt;version&gt;`1.9.22`&lt;/version&gt;`\\n`&lt;/dependency&gt;`\\n</code></pre></div>","autoDesc":true}');export{k as comp,d as data};
