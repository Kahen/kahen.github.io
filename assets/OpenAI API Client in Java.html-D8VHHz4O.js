import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-ClL0N6XE.js";const e={},p=t(`<h1 id="java中的openai-api客户端-baeldung" tabindex="-1"><a class="header-anchor" href="#java中的openai-api客户端-baeldung"><span>Java中的OpenAI API客户端 | Baeldung</span></a></h1><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p>随着生成性AI的广泛使用，特别是ChatGPT，许多语言都开始提供与OpenAI API交互的库。Java也不例外。</p><p>在本教程中，我们将讨论_openai-java_。这是一个客户端，允许我们更方便地与OpenAI API进行通信。然而，在一篇文章中回顾整个库是不可能的。<strong>因此，我们将使用一个实际的例子，构建一个连接到ChatGPT的简单控制台工具。</strong></p><h2 id="_2-依赖项" tabindex="-1"><a class="header-anchor" href="#_2-依赖项"><span>2. 依赖项</span></a></h2><p>首先，我们必须为我们的项目导入所需的依赖项。我们可以在Maven仓库中找到这些库。<strong>这三个模块专门用于交互的不同方面：</strong></p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>\\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency\\</span><span class="token punctuation">&gt;</span></span>
    \\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId\\</span><span class="token punctuation">&gt;</span></span>com.theokanning.openai-gpt3-java\\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId\\</span><span class="token punctuation">&gt;</span></span>
    \\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId\\</span><span class="token punctuation">&gt;</span></span>service\\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId\\</span><span class="token punctuation">&gt;</span></span>
    \\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version\\</span><span class="token punctuation">&gt;</span></span>0.18.2\\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version\\</span><span class="token punctuation">&gt;</span></span>
\\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency\\</span><span class="token punctuation">&gt;</span></span>

\\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency\\</span><span class="token punctuation">&gt;</span></span>
    \\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId\\</span><span class="token punctuation">&gt;</span></span>com.theokanning.openai-gpt3-java\\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId\\</span><span class="token punctuation">&gt;</span></span>
    \\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId\\</span><span class="token punctuation">&gt;</span></span>api\\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId\\</span><span class="token punctuation">&gt;</span></span>
    \\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version\\</span><span class="token punctuation">&gt;</span></span>0.18.2\\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version\\</span><span class="token punctuation">&gt;</span></span>
\\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency\\</span><span class="token punctuation">&gt;</span></span>

\\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency\\</span><span class="token punctuation">&gt;</span></span>
    \\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId\\</span><span class="token punctuation">&gt;</span></span>com.theokanning.openai-gpt3-java\\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId\\</span><span class="token punctuation">&gt;</span></span>
    \\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId\\</span><span class="token punctuation">&gt;</span></span>client\\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId\\</span><span class="token punctuation">&gt;</span></span>
    \\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version\\</span><span class="token punctuation">&gt;</span></span>0.18.2\\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version\\</span><span class="token punctuation">&gt;</span></span>
\\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency\\</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，名称明确提到了GPT3，但它也适用于GPT4。</p><h2 id="_3-baeldung-tutor" tabindex="-1"><a class="header-anchor" href="#_3-baeldung-tutor"><span>3. Baeldung Tutor</span></a></h2><p><strong>在本教程中，我们将构建一个工具，帮助我们根据我们最喜欢的学习平台上的文章和教程来创建我们的课程，或者至少尝试这样做。</strong> 虽然互联网为我们提供了无限的资源，我们可以在线找到几乎所有东西，但整理信息已经变得更加困难。</p><p>学习新事物变得越来越令人不知所措，因为很难确定最佳的学习路径并筛选出对我们没有帮助的东西。<strong>为了解决这个问题，我们将构建一个简单的客户端与ChatGPT交互，并要求它在我们庞大的Baeldung文章海洋中指导我们。</strong></p><h2 id="_4-openai-api令牌" tabindex="-1"><a class="header-anchor" href="#_4-openai-api令牌"><span>4. OpenAI API令牌</span></a></h2><p>第一步是将我们的应用程序连接到OpenAI API。为此，我们需要提供一个可以在网站上生成的OpenAI令牌：</p><p><strong>然而，我们应该小心令牌并避免暴露它。</strong> <em>openai-java</em> 示例使用环境变量来实现这一点。<strong>这可能不是生产环境的最佳解决方案，但对于小型实验效果很好。</strong> 在运行过程中，我们不必为我们的整个机器识别环境变量；我们可以使用IDE中的配置。例如，IntelliJ IDEA提供了一种简单的方法。</p><p><strong>我们可以生成两种类型的令牌：个人和服务账户。</strong> 个人令牌是不言而喻的。服务账户的令牌用于可以连接到OpenAI项目的机器人或应用程序。尽管两者都可以工作，但个人令牌对我们的目的来说已经足够了。</p><h2 id="_5-openaiservice" tabindex="-1"><a class="header-anchor" href="#_5-openaiservice"><span>5. <em>OpenAiService</em></span></a></h2><p>OpenAI API的入口点是方便地命名为_OpenAiService_的类。<strong>这个类的实例允许我们与API交互并从ChatGPT接收响应。</strong> 要创建它，我们应该传递我们在前一步生成的令牌：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> token <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">&quot;OPENAI_TOKEN&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">OpenAiService</span> service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OpenAiService</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这是我们旅程的第一步；我们需要识别信息并填充请求。</p><h3 id="_5-1-chatcompletionrequest" tabindex="-1"><a class="header-anchor" href="#_5-1-chatcompletionrequest"><span>5.1. <em>ChatCompletionRequest</em></span></a></h3><p>我们使用_ChatCompletionRequest_创建一个请求。最低配置要求我们只需提供消息和模型：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ChatCompletionRequest</span> chatCompletionRequest <span class="token operator">=</span> <span class="token class-name">ChatCompletionRequest</span>
  <span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token constant">GPT_3_5_TURBO_0301</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">messages</span><span class="token punctuation">(</span>messages<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们逐步审查这些参数。</p><h3 id="_5-2-模型" tabindex="-1"><a class="header-anchor" href="#_5-2-模型"><span>5.2. 模型</span></a></h3><p><strong>选择适合我们需求的模型至关重要，这也会影响成本。</strong> 因此，我们需要做出合理的选择。例如，通常没有必要使用最先进的模型来清理文本或根据一些简单格式解析它。同时，更复杂或重要的任务需要更高级的模型来实现我们的目标。</p><p>虽然我们可以直接传递模型名称，但最好使用_ModelEnum_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Getter</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">ModelEnum</span> <span class="token punctuation">{</span>
    <span class="token function">GPT_3_5_TURBO</span><span class="token punctuation">(</span><span class="token string">&quot;gpt-3.5-turbo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">GPT_3_5_TURBO_0301</span><span class="token punctuation">(</span><span class="token string">&quot;gpt-3.5-turbo-0301&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">GPT_4</span><span class="token punctuation">(</span><span class="token string">&quot;gpt-4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">GPT_4_0314</span><span class="token punctuation">(</span><span class="token string">&quot;gpt-4-0314&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">GPT_4_32K</span><span class="token punctuation">(</span><span class="token string">&quot;gpt-4-32k&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">GPT_4_32K_0314</span><span class="token punctuation">(</span><span class="token string">&quot;gpt-4-32k-0314&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">GPT_4_1106_preview</span><span class="token punctuation">(</span><span class="token string">&quot;gpt-4-1106-preview&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它不包含所有模型，但在我们的案例中已经足够了。如果我们想使用不同的模型，我们可以将其名称作为_String_提供。</p><h3 id="_5-3-消息" tabindex="-1"><a class="header-anchor" href="#_5-3-消息"><span>5.3. 消息</span></a></h3><p>接下来是我们创建的消息。我们使用_ChatMessage_类来实现它。在我们的案例中，我们只传递角色和消息本身：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span>\\<span class="token operator">&lt;</span><span class="token class-name">ChatMessage</span>\\<span class="token operator">&gt;</span> messages <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span>\\<span class="token operator">&lt;</span>\\<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ChatMessage</span> systemMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChatMessage</span><span class="token punctuation">(</span><span class="token class-name">ChatMessageRole</span><span class="token punctuation">.</span><span class="token constant">SYSTEM</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">PROMPT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
messages<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>systemMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>有趣的部分是我们发送的是消息集合。</strong> 尽管在通常的聊天中，我们通过逐条发送消息进行交流，但在这种情况下，它更像是电子邮件线程。</p><p>系统通过完成工作并在链上附加下一条消息来工作。这样，我们可以保持对话的上下文。<strong>我们可以将这视为一个无状态服务。</strong> 然而，这意味着我们必须传递消息以保持上下文。</p><p><strong>同时，我们可以采取另一种方式并创建一个助手。</strong> 通过这种方法，我们将消息存储在线程中，它不需要来回发送整个历史记录。</p><p><strong>在传递时，消息内容是合理的，但角色的目的不是。</strong> 因为我们一次性发送所有消息，我们需要提供一种方法，根据它们的角色来识别消息和用户之间的关系。</p><h3 id="_5-4-角色" tabindex="-1"><a class="header-anchor" href="#_5-4-角色"><span>5.4. 角色</span></a></h3><p><strong>正如所提到的，角色对于ChatGPT理解对话的上下文至关重要。</strong> 我们可以使用它们来识别消息背后的参与者。这样，我们可以帮助ChatGPT正确解释消息。<strong>_ChatMessages_支持四种角色：chat、system、assistant和function：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">ChatMessageRole</span> <span class="token punctuation">{</span>
    <span class="token function">SYSTEM</span><span class="token punctuation">(</span><span class="token string">&quot;system&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">USER</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">ASSISTANT</span><span class="token punctuation">(</span><span class="token string">&quot;assistant&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">FUNCTION</span><span class="token punctuation">(</span><span class="token string">&quot;function&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> value<span class="token punctuation">;</span>

    <span class="token class-name">ChatMessageRole</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>通常，SYSTEM角色指的是初始上下文或提示。</strong> 用户代表ChatGPT的用户，助手是ChatGPT本身。这意味着，从技术上讲，我们也可以以助手的角度写消息。顾名思义，function角色识别助手可以使用的功能。</p><h3 id="_5-5-令牌" tabindex="-1"><a class="header-anchor" href="#_5-5-令牌"><span>5.5. 令牌</span></a></h3><p>虽然我们之前讨论了API的访问令牌，但在模型和消息的上下文中，它的含义是不同的。<strong>我们可以将令牌视为我们可以处理的信息量以及我们希望在响应中获得的信息量。</strong></p><p>我们可以通过限制响应中的令牌数量来限制模型生成巨大的响应：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ChatCompletionRequest</span> chatCompletionRequest <span class="token operator">=</span> <span class="token class-name">ChatCompletionRequest</span>
  <span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token constant">MODEL</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">maxTokens</span><span class="token punctuation">(</span><span class="token constant">MAX_TOKENS</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">messages</span><span class="token punctuation">(</span>messages<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>单词和令牌之间没有直接的映射，因为每个模型对它们的处理都略有不同。此参数将答案限制在特定的令牌数量。<strong>使用默认值可能会允许过度响应并增加使用费用。</strong> 因此，明确配置它是一个好习惯。</p><p>我们可以在每个响应后添加有关使用令牌的信息：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">long</span> usedTokens <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">getUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTotalTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Total tokens used: &quot;</span> <span class="token operator">+</span> usedTokens<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-6-标记" tabindex="-1"><a class="header-anchor" href="#_5-6-标记"><span>5.6. 标记</span></a></h3><p>在前一个示例中，我们显示了响应中使用的令牌数量。虽然这些信息很有价值，但我们通常需要估计请求的大小。为了实现这一点，我们可以使用OpenAI提供的标记器。</p><p>为了以更自动化的方式做到这一点，openai-java为我们提供了_TikTokensUtil_，我们可以将模型名称和消息传递给它，并得到令牌数量作为结果。</p><h3 id="_5-7-选项" tabindex="-1"><a class="header-anchor" href="#_5-7-选项"><span>5.7. 选项</span></a></h3><p>我们可以用来配置请求的另一种方法是神秘地命名为_n()_，它控制我们希望为每个请求获得多少响应。<strong>简单来说，我们可以对同一个请求有两个不同的答案。</strong> 默认情况下，我们只有一个。</p><p>有时，对于机器人和网站助手来说，这可能很有用。<strong>然而，所有选项的响应都是根据所有选项的令牌计费的。</strong></p><h3 id="_5-8-偏见和随机化" tabindex="-1"><a class="header-anchor" href="#_5-8-偏见和随机化"><span>5.8. 偏见和随机化</span></a></h3><p>我们可以使用一些额外的选项来控制ChatGPT答案的随机性和偏见。例如，_logitBias()_可以使看到或不看到特定令牌的可能性更大。请注意，我们在这里谈论的是令牌，而不是特定的单词。然而，这并不意味着这个令牌不会出现100%。</p><p>我们还可以使用_topP()_和_temperature()_来随机化响应。虽然这对某些情况很有用，但我们将不会为我们的学习工具更改默认设置。</p><h2 id="_6-课程" tabindex="-1"><a class="header-anchor" href="#_6-课程"><span>6. 课程</span></a></h2><p>现在，让我们检查一下我们的工具在实际操作中的表现。我们将有以下整体代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> token <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">&quot;OPENAI_TOKEN&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">OpenAiService</span> service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OpenAiService</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">List</span>\\<span class="token operator">&lt;</span><span class="token class-name">ChatMessage</span>\\<span class="token operator">&gt;</span> messages <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span>\\<span class="token operator">&lt;</span>\\<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ChatMessage</span> systemMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChatMessage</span><span class="token punctuation">(</span><span class="token class-name">ChatMessageRole</span><span class="token punctuation">.</span><span class="token constant">SYSTEM</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">PROMPT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    messages<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>systemMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token constant">GREETING</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ChatMessage</span> firstMsg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChatMessage</span><span class="token punctuation">(</span><span class="token class-name">ChatMessageRole</span><span class="token punctuation">.</span><span class="token constant">USER</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    messages<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>firstMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ChatCompletionRequest</span> chatCompletionRequest <span class="token operator">=</span> <span class="token class-name">ChatCompletionRequest</span>
          <span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token constant">GPT_3_5_TURBO_0301</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">messages</span><span class="token punctuation">(</span>messages<span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ChatCompletionResult</span> result <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">createChatCompletion</span><span class="token punctuation">(</span>chatCompletionRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> usedTokens <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">getUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTotalTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ChatMessage</span> response <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">getChoices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        messages<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Total tokens used: &quot;</span> <span class="token operator">+</span> usedTokens<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;Anything else?\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> nextLine <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextLine<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">&quot;exit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        messages<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChatMessage</span><span class="token punctuation">(</span><span class="token class-name">ChatMessageRole</span><span class="token punctuation">.</span><span class="token constant">USER</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nextLine<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果运行它，我们可以通过控制台与它进行交互：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>Hello<span class="token operator">!</span>
What <span class="token keyword">do</span> you want to learn?
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>作为响应，我们可以写我们感兴趣的主题：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ I would like to learn about binary trees.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>正如预期的那样，工具将为我们提供一些文章，我们可以使用它们来学习主题：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>Great<span class="token operator">!</span> Here<span class="token string">&#39;s a suggested order for Baeldung&#39;</span>s articles on binary trees:

<span class="token number">1</span>. Introduction to Binary Trees: https://www.baeldung.com/java-binary-tree-intro
<span class="token number">2</span>. Implementing a Binary Tree <span class="token keyword">in</span> Java: https://www.baeldung.com/java-binary-tree
<span class="token number">3</span>. Depth First Traversal of Binary Tree: https://www.baeldung.com/java-depth-first-binary-tree-traversal
<span class="token number">4</span>. Breadth First Traversal of Binary Tree: https://www.baeldung.com/java-breadth-first-binary-tree-traversal
<span class="token number">5</span>. Finding the Maximum Element <span class="token keyword">in</span> a Binary Tree: https://www.baeldung.com/java-binary-tree-maximum-element
<span class="token number">6</span>. Binary Search Trees <span class="token keyword">in</span> Java: https://www.baeldung.com/java-binary-search-tree
<span class="token number">7</span>. Deleting from a Binary Search Tree: https://www.baeldung.com/java-binary-search-tree-delete

I hope this helps you out<span class="token operator">!</span>
Total tokens used: <span class="token number">288</span>
Anything else?
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过这种方式，我们通过创建课程解决了学习新事物的问题。<strong>然而，并非一切都那么美好；问题是只有一个文章是真实的。</strong> 大部分情况下，ChatGPT列出了不存在的文章和适当的链接。虽然名称和链接听起来合理，但它们不会带我们去任何地方。</p><p>这是任何AI工具的一个关键方面。<strong>生成模型很难检查信息的有效性。</strong> 由于它们基于预测和选择最合适的下一个单词，可能很难验证信息。<strong>我们不能完全依赖生成模型的信息。</strong></p><h2 id="_7-结论" tabindex="-1"><a class="header-anchor" href="#_7-结论"><span><strong>7</strong> <strong>. 结论</strong></span></a></h2><p>AI工具很棒，可以帮助我们改进应用程序和自动化日常琐事，从处理电子邮件和创建购物清单到优化教育。Java提供了几种与OpenAI API交互的方式，_openai-java_就是这样一个库。</p><p><strong>然而，重要的是要记住，尽管生成模型相当有说服力，但它们在验证信息是否真实方面存在困难。</strong> 因此，我们的责任是重新检查关键信息，或者提供足够的信息给模型，以便它能够给我们提供有效的答案。</p><p>像往常一样，本教程的所有代码都可以在GitHub上找到。</p><p>OK</p>`,71),o=[p];function c(l,i){return a(),s("div",null,o)}const k=n(e,[["render",c],["__file","OpenAI API Client in Java.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/OpenAI%20API%20Client%20in%20Java.html","title":"Java中的OpenAI API客户端 | Baeldung","lang":"zh-CN","frontmatter":{"date":"2024-06-13T00:00:00.000Z","category":["Java","OpenAI API"],"tag":["Java","AI","ChatGPT","API"],"description":"Java中的OpenAI API客户端 | Baeldung 1. 概述 随着生成性AI的广泛使用，特别是ChatGPT，许多语言都开始提供与OpenAI API交互的库。Java也不例外。 在本教程中，我们将讨论_openai-java_。这是一个客户端，允许我们更方便地与OpenAI API进行通信。然而，在一篇文章中回顾整个库是不可能的。因此，我...","head":[["meta",{"property":"og:url","content":"https://kahen.github.io/posts/baeldung/OpenAI%20API%20Client%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文站"}],["meta",{"property":"og:title","content":"Java中的OpenAI API客户端 | Baeldung"}],["meta",{"property":"og:description","content":"Java中的OpenAI API客户端 | Baeldung 1. 概述 随着生成性AI的广泛使用，特别是ChatGPT，许多语言都开始提供与OpenAI API交互的库。Java也不例外。 在本教程中，我们将讨论_openai-java_。这是一个客户端，允许我们更方便地与OpenAI API进行通信。然而，在一篇文章中回顾整个库是不可能的。因此，我..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-14T03:42:46.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"AI"}],["meta",{"property":"article:tag","content":"ChatGPT"}],["meta",{"property":"article:tag","content":"API"}],["meta",{"property":"article:published_time","content":"2024-06-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-14T03:42:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java中的OpenAI API客户端 | Baeldung\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-13T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-14T03:42:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://kahen.github.io\\"}]}"]]},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. 依赖项","slug":"_2-依赖项","link":"#_2-依赖项","children":[]},{"level":2,"title":"3. Baeldung Tutor","slug":"_3-baeldung-tutor","link":"#_3-baeldung-tutor","children":[]},{"level":2,"title":"4. OpenAI API令牌","slug":"_4-openai-api令牌","link":"#_4-openai-api令牌","children":[]},{"level":2,"title":"5. OpenAiService","slug":"_5-openaiservice","link":"#_5-openaiservice","children":[{"level":3,"title":"5.1. ChatCompletionRequest","slug":"_5-1-chatcompletionrequest","link":"#_5-1-chatcompletionrequest","children":[]},{"level":3,"title":"5.2. 模型","slug":"_5-2-模型","link":"#_5-2-模型","children":[]},{"level":3,"title":"5.3. 消息","slug":"_5-3-消息","link":"#_5-3-消息","children":[]},{"level":3,"title":"5.4. 角色","slug":"_5-4-角色","link":"#_5-4-角色","children":[]},{"level":3,"title":"5.5. 令牌","slug":"_5-5-令牌","link":"#_5-5-令牌","children":[]},{"level":3,"title":"5.6. 标记","slug":"_5-6-标记","link":"#_5-6-标记","children":[]},{"level":3,"title":"5.7. 选项","slug":"_5-7-选项","link":"#_5-7-选项","children":[]},{"level":3,"title":"5.8. 偏见和随机化","slug":"_5-8-偏见和随机化","link":"#_5-8-偏见和随机化","children":[]}]},{"level":2,"title":"6. 课程","slug":"_6-课程","link":"#_6-课程","children":[]},{"level":2,"title":"7 . 结论","slug":"_7-结论","link":"#_7-结论","children":[]}],"git":{"createdTime":1718284291000,"updatedTime":1718336566000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1},{"name":"Lance Li","email":"lance.jx.li@gtomato.com","commits":1}]},"readingTime":{"minutes":9.26,"words":2777},"filePathRelative":"posts/baeldung/OpenAI API Client in Java.md","localizedDate":"2024年6月13日","excerpt":"\\n<h2>1. 概述</h2>\\n<p>随着生成性AI的广泛使用，特别是ChatGPT，许多语言都开始提供与OpenAI API交互的库。Java也不例外。</p>\\n<p>在本教程中，我们将讨论_openai-java_。这是一个客户端，允许我们更方便地与OpenAI API进行通信。然而，在一篇文章中回顾整个库是不可能的。<strong>因此，我们将使用一个实际的例子，构建一个连接到ChatGPT的简单控制台工具。</strong></p>\\n<h2>2. 依赖项</h2>\\n<p>首先，我们必须为我们的项目导入所需的依赖项。我们可以在Maven仓库中找到这些库。<strong>这三个模块专门用于交互的不同方面：</strong></p>","autoDesc":true}');export{k as comp,d as data};
