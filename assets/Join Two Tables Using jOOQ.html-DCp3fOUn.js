import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-8nMxFfgp.js";const p={},e=t('<h1 id="使用jooq连接两个表" tabindex="-1"><a class="header-anchor" href="#使用jooq连接两个表"><span>使用jOOQ连接两个表</span></a></h1><p>jOOQ（Java Object Oriented Querying）是一个强大的库，它通过使我们能够以面向对象的方式编写SQL查询，从而简化了Java中的数据库交互。在关系数据库中，连接表是一个基本操作，它允许我们根据特定条件从多个表中组合数据。在本教程中，我们将探索jOOQ中可用的各种连接类型。</p><h2 id="_2-设置jooq" tabindex="-1"><a class="header-anchor" href="#_2-设置jooq"><span>2. 设置jOOQ</span></a></h2><p>使用jOOQ连接两个表涉及使用jOOQ提供的DSL（领域特定语言）来构建SQL查询。</p><p>要使用jOOQ，我们需要将jOOQ和PostgreSQL依赖项添加到我们的Maven项目的_pom.xml_文件中：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>``&lt;dependency&gt;``\n    ``&lt;groupId&gt;``org.jooq``&lt;/groupId&gt;``\n    ``&lt;artifactId&gt;``jooq``&lt;/artifactId&gt;``\n``&lt;/dependency&gt;``\n``&lt;dependency&gt;``\n    ``&lt;groupId&gt;``org.postgresql``&lt;/groupId&gt;``\n    ``&lt;artifactId&gt;``postgresql``&lt;/artifactId&gt;``\n``&lt;/dependency&gt;``\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在开始使用连接之前，我们需要使用jOOQ建立到数据库的连接。让我们创建一个_getConnection()_方法来获取用于数据库交互的_DSLContext_对象：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">DSLContext</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token constant">URL</span><span class="token punctuation">,</span> <span class="token constant">USERNAME</span><span class="token punctuation">,</span> <span class="token constant">PASSWORD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">DSLContext</span> context <span class="token operator">=</span> <span class="token constant">DSL</span><span class="token punctuation">.</span><span class="token function">using</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> <span class="token class-name">SQLDialect</span><span class="token punctuation">.</span><span class="token constant">POSTGRES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> context<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将在整个教程中使用_context_对象与数据库交互：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">DSLContext</span> context <span class="token operator">=</span> <span class="token class-name">DBConnection</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>此外，jOOQ提供了一个代码生成器，它根据我们的数据库架构生成Java类。</strong> 我们将假设数据库中已经创建了_Store_、_Book_和_BookAuthor_表及其各自的架构。</p><p>接下来，我们可以使用_DSLContext_对象在注解为_@BeforeClass_的方法中插入测试数据，以确保它在每个测试之前运行。让我们将试数据插入集成到我们的设置方法中：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@BeforeClass</span>\n<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    context <span class="token operator">=</span> <span class="token class-name">DBConnection</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    context<span class="token punctuation">.</span><span class="token function">insertInto</span><span class="token punctuation">(</span><span class="token class-name">Tables</span><span class="token punctuation">.</span><span class="token constant">STORE</span><span class="token punctuation">,</span> <span class="token class-name">Store</span><span class="token punctuation">.</span><span class="token constant">STORE</span><span class="token punctuation">.</span><span class="token constant">ID</span><span class="token punctuation">,</span> <span class="token class-name">Store</span><span class="token punctuation">.</span><span class="token constant">STORE</span><span class="token punctuation">.</span><span class="token constant">NAME</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;ABC Branch I &quot;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;ABC Branch II&quot;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    context<span class="token punctuation">.</span><span class="token function">insertInto</span><span class="token punctuation">(</span><span class="token class-name">Tables</span><span class="token punctuation">.</span><span class="token constant">BOOK</span><span class="token punctuation">,</span> <span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token constant">BOOK</span><span class="token punctuation">.</span><span class="token constant">ID</span><span class="token punctuation">,</span> <span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token constant">BOOK</span><span class="token punctuation">.</span><span class="token constant">TITLE</span><span class="token punctuation">,</span> <span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token constant">BOOK</span><span class="token punctuation">.</span><span class="token constant">DESCRIPTION</span><span class="token punctuation">,</span>\n      <span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token constant">BOOK</span><span class="token punctuation">.</span><span class="token constant">AUTHOR_ID</span><span class="token punctuation">,</span> <span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token constant">BOOK</span><span class="token punctuation">.</span><span class="token constant">STORE_ID</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;Article 1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;This is article 1&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;Article 2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;This is article 2&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;Article 3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;This is article 3&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&quot;Article 4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;This is article 4&quot;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    context<span class="token punctuation">.</span><span class="token function">insertInto</span><span class="token punctuation">(</span><span class="token class-name">Tables</span><span class="token punctuation">.</span><span class="token constant">BOOKAUTHOR</span><span class="token punctuation">,</span> <span class="token class-name">Bookauthor</span><span class="token punctuation">.</span><span class="token constant">BOOKAUTHOR</span><span class="token punctuation">.</span><span class="token constant">ID</span><span class="token punctuation">,</span> <span class="token class-name">Bookauthor</span><span class="token punctuation">.</span><span class="token constant">BOOKAUTHOR</span><span class="token punctuation">.</span><span class="token constant">NAME</span><span class="token punctuation">,</span>\n      <span class="token class-name">Bookauthor</span><span class="token punctuation">.</span><span class="token constant">BOOKAUTHOR</span><span class="token punctuation">.</span><span class="token constant">COUNTRY</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;John Smith&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Japan&quot;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;William Walce&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Japan&quot;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;Marry Sity&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;South Korea&quot;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&quot;Morry Toh&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;England&quot;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-使用-join-子句" tabindex="-1"><a class="header-anchor" href="#_3-使用-join-子句"><span>3. 使用_join_子句</span></a></h2><p>在jOOQ中，_SelectJoinStep<code>&lt;Record&gt;</code>_是一个接口，代表在构建带有连接的_SELECT_查询的过程中的一个步骤。我们可以使用_select()_等方法来指定我们想要从涉及的表中检索哪些列。</p><p>jOOQ中的_join()_方法用于根据指定条件执行表之间的内连接。<strong>内连接检索在两个表中都满足特定条件的行。</strong></p><p>以下是一个基于作者ID连接_Book_和_BookAuthor_表的示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">SelectJoinStep</span>````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Record</span><span class="token punctuation">&gt;</span></span>```````` query <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name">Tables</span><span class="token punctuation">.</span><span class="token constant">BOOK</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token class-name">Tables</span><span class="token punctuation">.</span><span class="token constant">BOOKAUTHOR</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token class-name">Tables</span><span class="token punctuation">.</span><span class="token constant">BOOK</span><span class="token punctuation">.</span><span class="token constant">AUTHOR_ID</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token class-name">Tables</span><span class="token punctuation">.</span><span class="token constant">BOOKAUTHOR</span><span class="token punctuation">.</span><span class="token constant">ID</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> query<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是一个扩展示例，展示了连接多个表：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">SelectJoinStep</span>````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Record</span><span class="token punctuation">&gt;</span></span>```````` query <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name">Tables</span><span class="token punctuation">.</span><span class="token constant">BOOK</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token class-name">Tables</span><span class="token punctuation">.</span><span class="token constant">BOOKAUTHOR</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token class-name">Tables</span><span class="token punctuation">.</span><span class="token constant">BOOK</span><span class="token punctuation">.</span><span class="token constant">AUTHOR_ID</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token class-name">Tables</span><span class="token punctuation">.</span><span class="token constant">BOOKAUTHOR</span><span class="token punctuation">.</span><span class="token constant">ID</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token class-name">Tables</span><span class="token punctuation">.</span><span class="token constant">STORE</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token class-name">Tables</span><span class="token punctuation">.</span><span class="token constant">BOOK</span><span class="token punctuation">.</span><span class="token constant">STORE_ID</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token class-name">Tables</span><span class="token punctuation">.</span><span class="token constant">STORE</span><span class="token punctuation">.</span><span class="token constant">ID</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> query<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们向_Store_表添加了另一个连接。这个连接操作基于_Book_表中的_STORE_ID_列和_Store_表中的ID列，将_Book_和_Store_表连接起来。通过添加这个额外的连接，查询现在从三个表中检索数据：<em>Book</em>、<em>BookAuthor_和_Store</em>。</p><h2 id="_4-使用外连接" tabindex="-1"><a class="header-anchor" href="#_4-使用外连接"><span>4. 使用外连接</span></a></h2><p>jOOQ支持各种连接类型，除了默认的内连接，还有外连接。<strong>外连接允许我们检索记录，即使在连接的表中没有匹配的记录。</strong></p><h3 id="_4-1-左外连接" tabindex="-1"><a class="header-anchor" href="#_4-1-左外连接"><span>4.1. 左外连接</span></a></h3><p>左连接包括左表_Book_的所有行和右表_BookAuthor_的匹配行。来自右表的任何不匹配的行将为特定于作者的列具有_null_值。</p><p>让我们看看如何使用jOOQ执行左外连接：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">SelectJoinStep</span>````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Record</span><span class="token punctuation">&gt;</span></span>```````` query <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name">Tables</span><span class="token punctuation">.</span><span class="token constant">BOOK</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">leftOuterJoin</span><span class="token punctuation">(</span><span class="token class-name">Tables</span><span class="token punctuation">.</span><span class="token constant">BOOKAUTHOR</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token class-name">Tables</span><span class="token punctuation">.</span><span class="token constant">BOOK</span><span class="token punctuation">.</span><span class="token constant">AUTHOR_ID</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token class-name">Tables</span><span class="token punctuation">.</span><span class="token constant">BOOKAUTHOR</span><span class="token punctuation">.</span><span class="token constant">ID</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> query<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在输出中，最后一行的作者列显示_null_而不是相应的作者条目：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>+----+---------+---------+-----------------+--------+------+-------------+-------+\n|  id|author_id|title    |description      |store_id|    id|name         |country|\n+----+---------+---------+-----------------+--------+------+-------------+-------+\n|   1|        1|   Book 1|This is    book 1|       1|     1|John Smith   |Japan  |\n|   2|        2|   Book 2|This is    book 2|       2|     2|William Walce|Japan  |\n|   3|        1|   Book 3|This is    book 3|       2|     1|John Smith   |Japan  |\n|   4|        5|   Book 4|This is    book 4|       1|{null}|{null}       |{null} |\n+----+---------+---------+-----------------+--------+------+-------------+-------+\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在执行左外连接时，如查询所示，左表_Book_的所有行都包含在结果集中。<strong>在这种情况下，尽管最后一行在_BookAuthor_表中没有匹配的_author_id_，它仍然出现在输出中。</strong> 然而，由于_BookAuthor_表中没有相应的数据可用，因此这一行的特定于作者的列（<em>id</em>、<em>name</em>、<em>country</em>）具有_null_值。</p><h3 id="_4-2-右外连接" tabindex="-1"><a class="header-anchor" href="#_4-2-右外连接"><span>4.2. 右外连接</span></a></h3><p>与此相反，右连接包括右表_BookAuthor_的所有行，并将其与左表_Book_的行进行匹配。左表中没有与右表中的任何条目匹配的行将具有书籍特定列的_null_值。</p><p>让我们看看如何使用jOOQ执行右外连接：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">SelectJoinStep</span>````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Record</span><span class="token punctuation">&gt;</span></span>```````` query <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name">Tables</span><span class="token punctuation">.</span><span class="token constant">BOOK</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">rightOuterJoin</span><span class="token punctuation">(</span><span class="token class-name">Tables</span><span class="token punctuation">.</span><span class="token constant">BOOKAUTHOR</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token class-name">Tables</span><span class="token punctuation">.</span><span class="token constant">BOOK</span><span class="token punctuation">.</span><span class="token constant">AUTHOR_ID</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token class-name">Tables</span><span class="token punctuation">.</span><span class="token constant">BOOKAUTHOR</span><span class="token punctuation">.</span><span class="token constant">ID</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> query<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与左外连接类似，在输出中，最后两位作者没有相关的图书记录，导致_null_值：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>+------+---------+---------+-----------------+--------+----+-------------+-----------+\n|    id|author_id|title    |description      |store_id|  id|name         |    country|\n+------+---------+---------+-----------------+--------+----+-------------+-----------+\n...\n|{null}|   {null}|{null}   |{null}           |  {null}|   4|Morry Toh    |England    |\n|{null}|   {null}|{null}   |{null}           |  {null}|   3|Marry Sity   |South Korea|\n+------+---------+---------+-----------------+--------+----+-------------+-----------+\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-全外连接" tabindex="-1"><a class="header-anchor" href="#_4-3-全外连接"><span>4.3. 全外连接</span></a></h3><p>全外连接结合了_Book_和_BookAuthor_表的所有行，无论是否有匹配。**<strong>没有匹配的行在相反表中的列具有_null_值。</strong></p><p>要在jOOQ中执行全外连接，我们可以使用以下语法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">SelectJoinStep</span>````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Record</span><span class="token punctuation">&gt;</span></span>```````` query <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name">Tables</span><span class="token punctuation">.</span><span class="token constant">BOOK</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">fullOuterJoin</span><span class="token punctuation">(</span><span class="token class-name">Tables</span><span class="token punctuation">.</span><span class="token constant">BOOKAUTHOR</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token class-name">Tables</span><span class="token punctuation">.</span><span class="token constant">BOOK</span><span class="token punctuation">.</span><span class="token constant">AUTHOR_ID</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token class-name">Tables</span><span class="token punctuation">.</span><span class="token constant">BOOKAUTHOR</span><span class="token punctuation">.</span><span class="token constant">ID</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> query<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自然连接根据匹配的列名自动确定连接条件。这在连接条件使用如_AUTHOR_ID_这样的公共列时非常有帮助：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">SelectJoinStep</span>````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Record</span><span class="token punctuation">&gt;</span></span>```````` query <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name">Tables</span><span class="token punctuation">.</span><span class="token constant">BOOK</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">naturalJoin</span><span class="token punctuation">(</span><span class="token class-name">Tables</span><span class="token punctuation">.</span><span class="token constant">BOOKAUTHOR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> query<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然而，如果列名不打算用于连接或数据类型不匹配，可能会发生意外的结果。在输出中，我们观察到有一条记录被错误地匹配了：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>+----+---------+---------+-----------------+--------+----+-------------+-------+\n|  id|author_id|title    |description      |store_id|  id|name         |country|\n+----+---------+---------+-----------------+--------+----+-------------+-------+\n...\n|   4|        5|   Book 4|This is    book 4|       1|   4|Morry Toh    |England|\n+----+---------+---------+-----------------+--------+----+-------------+-------+\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-使用交叉连接" tabindex="-1"><a class="header-anchor" href="#_6-使用交叉连接"><span>6. 使用交叉连接</span></a></h2><p><strong>交叉连接是最基本的连接类型，其中一个表的每一行都与另一个表的每一行结合。</strong> 这在特定场景中可能很有用，比如我们有一个_Store_和_Book_表。我们想要显示所有可能的商店-书籍组合列表。</p><p>让我们检查执行交叉连接的结果：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">SelectJoinStep</span>````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Record</span><span class="token punctuation">&gt;</span></span>```````` query <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name">Tables</span><span class="token punctuation">.</span><span class="token constant">STORE</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">crossJoin</span><span class="token punctuation">(</span><span class="token class-name">Tables</span><span class="token punctuation">.</span><span class="token constant">BOOK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> query<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>交叉连接有效地生成了每种可能的组合，使我们能够展示像“<em>Branch I – Book 1</em>”、“<em>Branch I – Book 2</em>”等选项。<strong>然而，由于交叉连接可能会创建非常大的数据集，特别是在涉及的表有很多行的情况下，应该谨慎使用。</strong></p><h2 id="_7-结论" tabindex="-1"><a class="header-anchor" href="#_7-结论"><span>7. 结论</span></a></h2><p>在本文中，我们学习了如何在jOOQ中连接表。我们讨论了各种类型的连接，包括内连接、外连接（左、右和全外连接）、自然连接和交叉连接。此外，我们看到自然连接和交叉连接可能很有用，但由于潜在的意外结果或性能问题，尤其是在处理大型数据集时，应该小心使用。</p><p>如常，示例的源代码可在GitHub上找到。</p><p>文章发布后30天内开放评论。对于此日期之后的任何问题，请使用网站上的联系表单。</p><p>OK</p>',54),o=[e];function c(l,u){return a(),s("div",null,o)}const r=n(p,[["render",c],["__file","Join Two Tables Using jOOQ.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/Archive/Join%20Two%20Tables%20Using%20jOOQ.html","title":"使用jOOQ连接两个表","lang":"zh-CN","frontmatter":{"date":"2024-06-19T00:00:00.000Z","category":["Java","jOOQ"],"tag":["jOOQ","SQL","Java"],"head":[["meta",{"name":"keywords","content":"jOOQ, SQL, Java, 数据库, 表连接"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/Archive/Join%20Two%20Tables%20Using%20jOOQ.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"使用jOOQ连接两个表"}],["meta",{"property":"og:description","content":"使用jOOQ连接两个表 jOOQ（Java Object Oriented Querying）是一个强大的库，它通过使我们能够以面向对象的方式编写SQL查询，从而简化了Java中的数据库交互。在关系数据库中，连接表是一个基本操作，它允许我们根据特定条件从多个表中组合数据。在本教程中，我们将探索jOOQ中可用的各种连接类型。 2. 设置jOOQ 使用jO..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-21T09:54:56.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"jOOQ"}],["meta",{"property":"article:tag","content":"SQL"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2024-06-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-21T09:54:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用jOOQ连接两个表\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-19T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-21T09:54:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"使用jOOQ连接两个表 jOOQ（Java Object Oriented Querying）是一个强大的库，它通过使我们能够以面向对象的方式编写SQL查询，从而简化了Java中的数据库交互。在关系数据库中，连接表是一个基本操作，它允许我们根据特定条件从多个表中组合数据。在本教程中，我们将探索jOOQ中可用的各种连接类型。 2. 设置jOOQ 使用jO..."},"headers":[{"level":2,"title":"2. 设置jOOQ","slug":"_2-设置jooq","link":"#_2-设置jooq","children":[]},{"level":2,"title":"3. 使用_join_子句","slug":"_3-使用-join-子句","link":"#_3-使用-join-子句","children":[]},{"level":2,"title":"4. 使用外连接","slug":"_4-使用外连接","link":"#_4-使用外连接","children":[{"level":3,"title":"4.1. 左外连接","slug":"_4-1-左外连接","link":"#_4-1-左外连接","children":[]},{"level":3,"title":"4.2. 右外连接","slug":"_4-2-右外连接","link":"#_4-2-右外连接","children":[]},{"level":3,"title":"4.3. 全外连接","slug":"_4-3-全外连接","link":"#_4-3-全外连接","children":[]}]},{"level":2,"title":"6. 使用交叉连接","slug":"_6-使用交叉连接","link":"#_6-使用交叉连接","children":[]},{"level":2,"title":"7. 结论","slug":"_7-结论","link":"#_7-结论","children":[]}],"git":{"createdTime":1718963696000,"updatedTime":1718963696000,"contributors":[{"name":"Lance Li","email":"lance.jx.li@gtomato.com","commits":1}]},"readingTime":{"minutes":6.08,"words":1824},"filePathRelative":"posts/baeldung/Archive/Join Two Tables Using jOOQ.md","localizedDate":"2024年6月19日","excerpt":"\\n<p>jOOQ（Java Object Oriented Querying）是一个强大的库，它通过使我们能够以面向对象的方式编写SQL查询，从而简化了Java中的数据库交互。在关系数据库中，连接表是一个基本操作，它允许我们根据特定条件从多个表中组合数据。在本教程中，我们将探索jOOQ中可用的各种连接类型。</p>\\n<h2>2. 设置jOOQ</h2>\\n<p>使用jOOQ连接两个表涉及使用jOOQ提供的DSL（领域特定语言）来构建SQL查询。</p>\\n<p>要使用jOOQ，我们需要将jOOQ和PostgreSQL依赖项添加到我们的Maven项目的_pom.xml_文件中：</p>\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code>``&lt;dependency&gt;``\\n    ``&lt;groupId&gt;``org.jooq``&lt;/groupId&gt;``\\n    ``&lt;artifactId&gt;``jooq``&lt;/artifactId&gt;``\\n``&lt;/dependency&gt;``\\n``&lt;dependency&gt;``\\n    ``&lt;groupId&gt;``org.postgresql``&lt;/groupId&gt;``\\n    ``&lt;artifactId&gt;``postgresql``&lt;/artifactId&gt;``\\n``&lt;/dependency&gt;``\\n</code></pre></div>","autoDesc":true}');export{r as comp,d as data};
