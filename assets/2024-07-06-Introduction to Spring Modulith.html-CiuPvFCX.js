import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-BaCIpe-N.js";const e={},p=t(`<h1 id="spring-modulith-介绍" tabindex="-1"><a class="header-anchor" href="#spring-modulith-介绍"><span>Spring Modulith 介绍</span></a></h1><p>模块化单体架构是一种架构风格，我们的源代码是围绕模块的概念构建的。对于许多组织来说，模块化单体可能是一个极好的选择。它有助于保持一定程度的独立性，这有助于我们在需要时过渡到微服务架构。</p><p>Spring Modulith 是 Spring 的一个实验性项目，可用于构建模块化单体应用程序。它还支持开发人员构建结构良好、与领域对齐的 Spring Boot 应用程序。</p><p>在本教程中，我们将讨论 Spring Modulith 项目的基础，并展示如何在实践中使用它。</p><h2 id="_2-模块化单体架构" tabindex="-1"><a class="header-anchor" href="#_2-模块化单体架构"><span>2. 模块化单体架构</span></a></h2><p>我们有不同的方式来组织应用程序的代码。传统上，我们围绕基础设施设计软件解决方案。但是，当我们围绕业务设计应用程序时，可以更好地理解和维护系统。模块化单体架构就是这样一种设计。</p><p>模块化单体架构因其简单性和可维护性而在架构师和开发人员中越来越受欢迎。如果我们将领域驱动设计（DDD）应用于现有的单体应用程序，我们可以将其重构为模块化单体架构：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2023/04/Figures-Page-9.drawio.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>我们可以通过识别应用程序的领域并定义有界上下文来将单体的核心分割成模块。</p><p>让我们看看如何在 Spring Boot 框架内实现模块化单体应用程序。Spring Modulith 包括一套库，帮助开发人员构建模块化的 Spring Boot 应用程序。</p><h2 id="_3-spring-modulith-基础" tabindex="-1"><a class="header-anchor" href="#_3-spring-modulith-基础"><span>3. Spring Modulith 基础</span></a></h2><p>Spring Modulith 帮助开发人员使用由领域驱动的应用程序模块进行工作。同时，它还支持验证和记录这种模块化安排。</p><h3 id="_3-1-maven-依赖项" tabindex="-1"><a class="header-anchor" href="#_3-1-maven-依赖项"><span>3.1. Maven 依赖项</span></a></h3><p>让我们从将 <em>spring-modulith-bom</em> 依赖项作为物料清单（BOM）导入到 <em>pom.xml</em> 的 <em><code>&lt;dependencyManagement&gt;</code></em> 部分开始：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>\`\`
    \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>\`
        \`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\`\`\`
            \`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`\`org.springframework.experimental\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`\`
            \`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`\`spring-modulith-bom\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`\`
            \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\`0.5.1\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\`
            \`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>\`\`import\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>\`\`
            \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>\`pom\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>\`
        \`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\`\`\`
    \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>\`
\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们还需要一些核心的 Spring Modulith 依赖项：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\`\`\`
    \`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`\`org.springframework.experimental\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`\`
    \`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`\`spring-modulith-api\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`\`
\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\`\`\`
\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\`\`\`
    \`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`\`org.springframework.experimental\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`\`
    \`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`\`spring-modulith-starter-test\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`\`
    \`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>\`\`test\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>\`\`
\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\`\`\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-应用程序模块" tabindex="-1"><a class="header-anchor" href="#_3-2-应用程序模块"><span>3.2. 应用程序模块</span></a></h3><p>Spring Modulith 的主要概念是应用程序模块。<strong>应用程序模块是暴露 API 给其他模块的功能单元</strong>。同时，它还有一些内部实现，不应该被其他模块访问。当我们设计应用程序时，我们考虑每个领域都有一个应用程序模块。</p><p>Spring Modulith 提供了不同的方式来表达模块。<strong>我们可以将应用程序的领域或业务模块视为应用程序主包的直接子包</strong>。换句话说，应用程序模块是一个与 Spring Boot 主类（用 <em>@SpringBootApplication</em> 注解）位于同一级别的包：</p><div class="language-plaintext line-numbers-mode" data-ext="plaintext" data-title="plaintext"><pre class="language-plaintext"><code>├───pom.xml
├───src
    ├───main
    │   ├───java
    │   │   └───main-package
    │   │       ├───module A
    │   │       ├───module B
    │   │       └───module C
    │   │           ├───sub-module C
    │   │       │ MainApplication.java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，让我们看看一个包括 <em>product</em> 和 <em>notification</em> 领域的简单应用程序。在这个示例中，我们从 <em>product</em> 模块调用一个服务，然后 <em>product</em> 模块再调用 <em>notification</em> 模块的服务。</p><p>首先，我们将创建两个应用程序模块：<em>product</em> 和 <em>notification</em>。为此，我们需要在主包中创建两个直接子包：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2023/04/m-3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>让我们以 <em>product</em> 模块为例。我们在 <em>product</em> 模块中有一个简单的 <em>Product</em> 类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> description<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> price<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> description<span class="token punctuation">,</span> <span class="token keyword">int</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>description <span class="token operator">=</span> description<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// getters and setters</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，让我们在 <em>product</em> 模块中定义 <em>ProductService</em> bean：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductService</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">NotificationService</span> notificationService<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ProductService</span><span class="token punctuation">(</span><span class="token class-name">NotificationService</span> notificationService<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>notificationService <span class="token operator">=</span> notificationService<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Product</span> product<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        notificationService<span class="token punctuation">.</span><span class="token function">createNotification</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Notification</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">NotificationType</span><span class="token punctuation">.</span><span class="token constant">SMS</span><span class="token punctuation">,</span> product<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个类中，<em>create()</em> 方法调用了来自 <em>notification</em> 模块的公开 <em>NotificationService</em> API，并且还创建了 <em>Notification</em> 类的一个实例。</p><p>让我们看看 <em>notification</em> 模块。<em>notification</em> 模块包括 <em>Notification</em>、<em>NotificationType</em> 和 <em>NotificationService</em> 类。</p><p>让我们看看 <em>NotificationService</em> bean：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotificationService</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> <span class="token constant">LOG</span> <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">NotificationService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createNotification</span><span class="token punctuation">(</span><span class="token class-name">Notification</span> notification<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Received notification by module dependency for product {} in date {} by {}.&quot;</span><span class="token punctuation">,</span>
                notification<span class="token punctuation">.</span><span class="token function">getProductName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                notification<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                notification<span class="token punctuation">.</span><span class="token function">getFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个服务中，我们只是记录了创建的产品。</p><p>最后，在 <em>main()</em> 方法中，我们从 <em>product</em> 模块调用 <em>ProductService</em> API 的 <em>create()</em> 方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">ProductService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token string">&quot;baeldung&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;course&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>目录结构如下所示：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2023/04/m-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="_3-3-应用程序模块模型" tabindex="-1"><a class="header-anchor" href="#_3-3-应用程序模块模型"><span>3.3. 应用程序模块模型</span></a></h3><p><strong>我们可以根据安排从代码库中派生出应用程序模块模型</strong>。<em>ApplicationModules</em> 类提供了创建应用程序模块安排的功能。</p><p>让我们创建一个应用程序模块模型：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">createApplicationModuleModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ApplicationModules</span> modules <span class="token operator">=</span> <span class="token class-name">ApplicationModules</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    modules<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们查看控制台输出，我们可以看到我们的应用程序模块安排：</p><div class="language-plaintext line-numbers-mode" data-ext="plaintext" data-title="plaintext"><pre class="language-plaintext"><code># Notification
&gt; Logical name: notification
&gt; Base package: com.baeldung.ecommerce.notification
&gt; Spring beans:
  + ….NotificationService

# Product
&gt; Logical name: product
&gt; Base package: com.baeldung.ecommerce.product
&gt; Spring beans:
  + ….ProductService
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如我们所看到的，它检测到了我们的两个模块：<em>notification</em> 和 <em>product</em>。它还列出了每个模块的 Spring 组件。</p><h3 id="_3-4-模块封装" tabindex="-1"><a class="header-anchor" href="#_3-4-模块封装"><span>3.4. 模块封装</span></a></h3><p><strong>值得注意的是，当前设计存在问题。<em>ProductService</em> API 可以访问 <em>Notification</em> 类，这是 <em>notification</em> 模块的内部功能</strong>。</p><p>在模块化设计中，我们必须保护和隐藏特定信息，并控制对内部实现的访问。<strong>Spring Modulith 使用应用程序模块基包的子包提供模块封装</strong>。</p><p><strong>它还隐藏了类型，防止其他包中的代码引用。一个模块可以访问任何其他模块的内容，但不能访问其他模块的子包</strong>。</p><p>现在，让我们在每个模块内创建一个 <em>internal</em> 子包，并将内部实现移动到其中：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2023/04/m-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>在这种安排中，<em>notification</em> 包被视为 API 包。其他应用程序模块的源代码可以引用该包中的类型。但是，来自 <em>notification.internal</em> 包的源代码不应被其他模块引用。</p><h3 id="_3-5-验证模块结构" tabindex="-1"><a class="header-anchor" href="#_3-5-验证模块结构"><span>3.5. 验证模块结构</span></a></h3><p>这种设计还有另一个问题。在上面的例子中，<em>Notification</em> 类位于 <em>notification.internal</em> 包中。但是，我们从其他包，比如 <em>product</em> 包，引用了 <em>Notification</em> 类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Product</span> product<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    notificationService<span class="token punctuation">.</span><span class="token function">createNotification</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Notification</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">NotificationType</span><span class="token punctuation">.</span><span class="token constant">SMS</span><span class="token punctuation">,</span> product<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不幸的是，这意味着它违反了模块访问规则。在这种情况下，Spring Modulith 不能使 Java 编译失败以防止这些非法引用。它使用单元测试来实现这一点：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">verifiesModularStructure</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ApplicationModules</span> modules <span class="token operator">=</span> <span class="token class-name">ApplicationModules</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    modules<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>我们使用 <em>ApplicationModules</em> 实例上的 <em>verify()</em> 方法来确定我们的代码安排是否符合预期的约束</strong>。Spring Modulith 使用 ArchUnit 项目提供此功能。</p><p>我们的验证测试因上面的例子而失败，并抛出了 _org.springframework.modulith.core.Violations_exception：</p><p>org.springframework.modulith.core.Violations:</p><ul><li>Module &#39;product&#39; depends on non-exposed type com.baeldung.modulith.notification.internal.Notification within module &#39;notification&#39;! Method <code>&lt;com.baeldung.modulith.product.ProductService.create(com.baeldung.modulith.product.internal.Product)&gt;</code> calls constructor <code>&lt;com.baeldung.modulith.notification.internal.Notification.&lt;init&gt;</code>(java.util.Date, com.baeldung.modulith.notification.internal.NotificationType, java.lang.String)&gt; in (ProductService.java:25)</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>
测试失败是因为 _product_ 模块试图访问 _notification_ 模块的内部类 _Notification_。

现在，让我们通过在 _notification_ 模块中添加一个 _NotificationDTO_ 类来修复它：

\`\`\`java
public class NotificationDTO {
    private Date date;
    private String format;
    private String productName;

    // getters and setters
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后，我们在 <em>product</em> 模块中使用 <em>NotificationDTO</em> 实例，而不是 <em>Notification</em>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Product</span> product<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    notificationService<span class="token punctuation">.</span><span class="token function">createNotification</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NotificationDTO</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;SMS&quot;</span><span class="token punctuation">,</span> product<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终的目录结构如下所示：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2023/04/3.5.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="_3-6-记录模块" tabindex="-1"><a class="header-anchor" href="#_3-6-记录模块"><span>3.6. 记录模块</span></a></h3><p><strong>我们可以记录项目中模块之间的关系</strong>。Spring Modulith 提供了基于 PlantUML 生成图表的功能，具有 UML 或 C4 外观。</p><p>让我们将应用程序模块导出为 C4 组件图表：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">createModuleDocumentation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ApplicationModules</span> modules <span class="token operator">=</span> <span class="token class-name">ApplicationModules</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">new</span> <span class="token class-name">Documenter</span><span class="token punctuation">(</span>modules<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">writeDocumentation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">writeIndividualModulesAsPlantUml</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>C4 图表将作为 <em>puml</em> 文件在 <em>target/modulith-docs</em> 目录中创建。</p><p>让我们使用在线 PlantUML 服务器呈现生成的组件图表：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2023/04/component-diagram.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这个图表显示了 <em>product</em> 模块使用了 <em>notification</em> 模块的 API。</p><h2 id="_4-使用事件进行模块间交互" tabindex="-1"><a class="header-anchor" href="#_4-使用事件进行模块间交互"><span>4. 使用事件进行模块间交互</span></a></h2><p><strong>我们有两种方法来进行模块间交互：依赖其他应用程序模块的 Spring bean 或使用事件</strong>。</p><p>在前一节中，我们将 <em>notification</em> 模块 API 注入到 <em>product</em> 模块中。然而，Spring Modulith 鼓励使用 Spring Framework 应用程序事件进行模块间通信。为了使应用程序模块尽可能地解耦，我们使用事件发布和消费作为主要的交互手段。</p><h3 id="_4-1-事件发布" tabindex="-1"><a class="header-anchor" href="#_4-1-事件发布"><span>4.1. 事件发布</span></a></h3><p>现在，让我们使用 Spring 的 <em>ApplicationEventPublisher</em> 来发布一个领域事件：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductService</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ApplicationEventPublisher</span> events<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ProductService</span><span class="token punctuation">(</span><span class="token class-name">ApplicationEventPublisher</span> events<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>events <span class="token operator">=</span> events<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Product</span> product<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        events<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NotificationDTO</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;SMS&quot;</span><span class="token punctuation">,</span> product<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们简单地注入了 <em>ApplicationEventPublisher</em> 并使用了 <em>publishEvent()</em> API。</p><h3 id="_4-2-应用程序模块监听器" tabindex="-1"><a class="header-anchor" href="#_4-2-应用程序模块监听器"><span>4.2. 应用程序模块监听器</span></a></h3><p>要注册一个监听器，Spring Modulith 提供了 <em>@ApplicationModuleListener</em> 注解：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotificationService</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@ApplicationModuleListener</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notificationEvent</span><span class="token punctuation">(</span><span class="token class-name">NotificationDTO</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Notification</span> notification <span class="token operator">=</span> <span class="token function">toEntity</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Received notification by event for product {} in date {} by {}.&quot;</span><span class="token punctuation">,</span>
                notification<span class="token punctuation">.</span><span class="token function">getProductName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                notification<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                notification<span class="token punctuation">.</span><span class="token function">getFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以在方法级别使用 <em>@ApplicationModuleListener</em> 注解。在上面的例子中，我们消费了 <em>NotificationDTO</em> 事件并记录了详细信息。</p><h3 id="_4-3-异步事件处理" tabindex="-1"><a class="header-anchor" href="#_4-3-异步事件处理"><span>4.3. 异步事件处理</span></a></h3><p>对于异步事件处理，我们需要在监听器上添加 <em>@Async</em> 注解：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Async</span>
<span class="token annotation punctuation">@ApplicationModuleListener</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notificationEvent</span><span class="token punctuation">(</span><span class="token class-name">NotificationDTO</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，异步行为需要在 Spring 上下文中通过 <em>@EnableAsync</em> 注解启用。它可以添加到主应用程序类中：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableAsync</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-结论" tabindex="-1"><a class="header-anchor" href="#_5-结论"><span>5. 结论</span></a></h2><p>在本指南中，我们专注于并涵盖了 Spring Modulith 项目的基础知识。我们首先讨论了什么是模块化单体设计。</p><p>接下来，我们讨论了应用程序模块。我们还详细涵盖了创建应用程序模块模型和验证其结构。</p><p>最后，我们解释了使用事件进行模块间交互。</p><p>如常，文章的完整源代码可在 GitHub 上获取。</p>`,94),i=[p];function o(c,l){return s(),a("div",null,i)}const r=n(e,[["render",o],["__file","2024-07-06-Introduction to Spring Modulith.html.vue"]]),k=JSON.parse('{"path":"/posts/baeldung/2024-07-06/2024-07-06-Introduction%20to%20Spring%20Modulith.html","title":"Spring Modulith 介绍","lang":"zh-CN","frontmatter":{"date":"2023-04-26T00:00:00.000Z","category":["Spring","Modular Monolith"],"tag":["Spring Modulith","Modular Monolith Architecture"],"head":[["meta",{"name":"keywords","content":"Spring, Spring Modulith, Modular Monolith Architecture, Spring Boot"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-06/2024-07-06-Introduction%20to%20Spring%20Modulith.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Spring Modulith 介绍"}],["meta",{"property":"og:description","content":"Spring Modulith 介绍 模块化单体架构是一种架构风格，我们的源代码是围绕模块的概念构建的。对于许多组织来说，模块化单体可能是一个极好的选择。它有助于保持一定程度的独立性，这有助于我们在需要时过渡到微服务架构。 Spring Modulith 是 Spring 的一个实验性项目，可用于构建模块化单体应用程序。它还支持开发人员构建结构良好、与..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.baeldung.com/wp-content/uploads/2023/04/Figures-Page-9.drawio.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-06T12:51:57.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Spring Modulith"}],["meta",{"property":"article:tag","content":"Modular Monolith Architecture"}],["meta",{"property":"article:published_time","content":"2023-04-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-06T12:51:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring Modulith 介绍\\",\\"image\\":[\\"https://www.baeldung.com/wp-content/uploads/2023/04/Figures-Page-9.drawio.png\\",\\"https://www.baeldung.com/wp-content/uploads/2023/04/m-3.png\\",\\"https://www.baeldung.com/wp-content/uploads/2023/04/m-1.png\\",\\"https://www.baeldung.com/wp-content/uploads/2023/04/m-2.png\\",\\"https://www.baeldung.com/wp-content/uploads/2023/04/3.5.png\\",\\"https://www.baeldung.com/wp-content/uploads/2023/04/component-diagram.png\\"],\\"datePublished\\":\\"2023-04-26T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-06T12:51:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Spring Modulith 介绍 模块化单体架构是一种架构风格，我们的源代码是围绕模块的概念构建的。对于许多组织来说，模块化单体可能是一个极好的选择。它有助于保持一定程度的独立性，这有助于我们在需要时过渡到微服务架构。 Spring Modulith 是 Spring 的一个实验性项目，可用于构建模块化单体应用程序。它还支持开发人员构建结构良好、与..."},"headers":[{"level":2,"title":"2. 模块化单体架构","slug":"_2-模块化单体架构","link":"#_2-模块化单体架构","children":[]},{"level":2,"title":"3. Spring Modulith 基础","slug":"_3-spring-modulith-基础","link":"#_3-spring-modulith-基础","children":[{"level":3,"title":"3.1. Maven 依赖项","slug":"_3-1-maven-依赖项","link":"#_3-1-maven-依赖项","children":[]},{"level":3,"title":"3.2. 应用程序模块","slug":"_3-2-应用程序模块","link":"#_3-2-应用程序模块","children":[]},{"level":3,"title":"3.3. 应用程序模块模型","slug":"_3-3-应用程序模块模型","link":"#_3-3-应用程序模块模型","children":[]},{"level":3,"title":"3.4. 模块封装","slug":"_3-4-模块封装","link":"#_3-4-模块封装","children":[]},{"level":3,"title":"3.5. 验证模块结构","slug":"_3-5-验证模块结构","link":"#_3-5-验证模块结构","children":[]},{"level":3,"title":"3.6. 记录模块","slug":"_3-6-记录模块","link":"#_3-6-记录模块","children":[]}]},{"level":2,"title":"4. 使用事件进行模块间交互","slug":"_4-使用事件进行模块间交互","link":"#_4-使用事件进行模块间交互","children":[{"level":3,"title":"4.1. 事件发布","slug":"_4-1-事件发布","link":"#_4-1-事件发布","children":[]},{"level":3,"title":"4.2. 应用程序模块监听器","slug":"_4-2-应用程序模块监听器","link":"#_4-2-应用程序模块监听器","children":[]},{"level":3,"title":"4.3. 异步事件处理","slug":"_4-3-异步事件处理","link":"#_4-3-异步事件处理","children":[]}]},{"level":2,"title":"5. 结论","slug":"_5-结论","link":"#_5-结论","children":[]}],"git":{"createdTime":1720270317000,"updatedTime":1720270317000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":8.22,"words":2467},"filePathRelative":"posts/baeldung/2024-07-06/2024-07-06-Introduction to Spring Modulith.md","localizedDate":"2023年4月26日","excerpt":"\\n<p>模块化单体架构是一种架构风格，我们的源代码是围绕模块的概念构建的。对于许多组织来说，模块化单体可能是一个极好的选择。它有助于保持一定程度的独立性，这有助于我们在需要时过渡到微服务架构。</p>\\n<p>Spring Modulith 是 Spring 的一个实验性项目，可用于构建模块化单体应用程序。它还支持开发人员构建结构良好、与领域对齐的 Spring Boot 应用程序。</p>\\n<p>在本教程中，我们将讨论 Spring Modulith 项目的基础，并展示如何在实践中使用它。</p>\\n<h2>2. 模块化单体架构</h2>\\n<p>我们有不同的方式来组织应用程序的代码。传统上，我们围绕基础设施设计软件解决方案。但是，当我们围绕业务设计应用程序时，可以更好地理解和维护系统。模块化单体架构就是这样一种设计。</p>","autoDesc":true}');export{r as comp,k as data};
