import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-BaCIpe-N.js";const p={},e=t(`<h1 id="使用tablesaw库处理表格数据" tabindex="-1"><a class="header-anchor" href="#使用tablesaw库处理表格数据"><span>使用Tablesaw库处理表格数据</span></a></h1><h2 id="_1-引言" tabindex="-1"><a class="header-anchor" href="#_1-引言"><span>1. 引言</span></a></h2><p>在本文中，我们将学习如何使用Tablesaw库来处理表格数据。首先，我们将导入一些数据。然后，我们将通过操作数据来获得一些见解。</p><p>我们将使用鳄梨价格数据集。简而言之，它包含了美国多个市场鳄梨价格和销售量的的历史数据。</p><h2 id="_2-在tablesaw中导入数据" tabindex="-1"><a class="header-anchor" href="#_2-在tablesaw中导入数据"><span>2. 在Tablesaw中导入数据</span></a></h2><p>首先，我们需要导入数据。Tablesaw支持包括CSV在内的多种格式，我们数据集的格式就是CSV。因此，让我们从CSV文件加载数据集开始：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">CsvReadOptions</span> csvReadOptions <span class="token operator">=</span>
    <span class="token class-name">CsvReadOptions</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">separator</span><span class="token punctuation">(</span><span class="token char">&#39;,&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">dateFormat</span><span class="token punctuation">(</span>formatter<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
table <span class="token operator">=</span> <span class="token class-name">Table</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">usingOptions</span><span class="token punctuation">(</span>csvReadOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中，我们通过将文件对象传递给构建器来创建_CsvReadOptions_类。然后，我们通过正确配置选项对象来描述如何读取CSV文件。</p><p>首先，我们使用_separator()_方法设置列分隔符。其次，我们将文件的第一行作为标题读取。第三，我们提供一个_DateTimeFormatter_来正确解析日期和时间。最后，我们使用新创建的_CsvReadOptions_来读取表格数据。</p><h3 id="_2-1-验证导入的数据" tabindex="-1"><a class="header-anchor" href="#_2-1-验证导入的数据"><span>2.1 验证导入的数据</span></a></h3><p>让我们使用_structure()_方法来检查表格的设计。它返回另一个包含列名、索引和数据类型的表格：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>         鳄梨.csv的结构
 索引  |  列名        |  列类型  
------------------------------------------
     0  |            C0  |      INTEGER  
     1  |          日期  |   LOCAL_DATE  
     2  |  平均价格    |       DOUBLE  
     3  |  总销量      |       DOUBLE  
    ... |       ...      |       ...    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，让我们使用_shape()_方法来检查其形状：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">assertThat</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span><span class="token function">shape</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;鳄梨.csv: 18249 行 X 14 列&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个方法返回一个字符串，后跟文件名，然后是行数和列数。我们的数据集总共包含18249行数据和14列。</p><h2 id="_3-tablesaw中的数据表示" tabindex="-1"><a class="header-anchor" href="#_3-tablesaw中的数据表示"><span>3. Tablesaw中的数据表示</span></a></h2><p><strong>Tablesaw主要使用表格和列，这构成了所谓的数据框的基础</strong>。简而言之，一个表格是一组具有固定类型的列。表格中的一行是一组值，每个值都分配给它匹配的列。</p><p>Tablesaw支持多种列类型。除了扩展Java中的原始类型之外，它还提供了文本和时间列。</p><h3 id="_3-1-文本类型" tabindex="-1"><a class="header-anchor" href="#_3-1-文本类型"><span>3.1 文本类型</span></a></h3><p>在Tablesaw中，有两种文本类型：<em>TextColumn_和_StringColumn</em>。第一种是通用类型，可以保存任何文本。另一方面，<strong>_StringColumn_在存储之前将值编码为类似字典的数据结构</strong>。这可以有效地保存数据，而不是在列向量中重复值。</p><p>例如，在鳄梨数据集中，地区和类型列的类型是_StringColumn_。它们在列向量中的重复值存储得更有效，并指向文本的相同实例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">StringColumn</span> type <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">stringColumn</span><span class="token punctuation">(</span><span class="token string">&quot;类型&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>\` conventional <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;传统&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertThat</span><span class="token punctuation">(</span>conventional<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isSameAs</span><span class="token punctuation">(</span>conventional<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-时间类型" tabindex="-1"><a class="header-anchor" href="#_3-2-时间类型"><span>3.2 时间类型</span></a></h3><p>Tablesaw中有四种时间类型可供选择。它们映射到它们等效的Java对象：<em>DateColumn</em>, <em>DateTimeColumn</em>, <em>TimeColumn</em>, 和 <em>InstantColumn</em>。如上所见，我们可以在导入时配置如何解析这些值。</p><h2 id="_4-使用列" tabindex="-1"><a class="header-anchor" href="#_4-使用列"><span>4. 使用列</span></a></h2><p>接下来，让我们看看如何处理导入的数据并从中提取见解。例如，在Tablesaw中，我们可以转换单个列或使用整个表格。</p><h3 id="_4-1-创建新列" tabindex="-1"><a class="header-anchor" href="#_4-1-创建新列"><span>4.1 创建新列</span></a></h3><p>让我们通过调用每种可用列类型上定义的静态方法_.create()<em>来创建新列。例如，要创建一个名为_time_的_TimeColumn</em>，我们编写：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">TimeColumn</span> time <span class="token operator">=</span> <span class="token class-name">TimeColumn</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;时间&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后，我们可以使用_.addColumns()_方法将此列添加到表格中：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Table</span> table <span class="token operator">=</span> <span class="token class-name">Table</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;测试&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
table<span class="token punctuation">.</span><span class="token function">addColumns</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertThat</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span><span class="token function">columnNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;时间&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-添加或修改列数据" tabindex="-1"><a class="header-anchor" href="#_4-2-添加或修改列数据"><span>4.2 添加或修改列数据</span></a></h3><p>让我们使用_.append()_方法将数据添加到列的末尾：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">DoubleColumn</span> averagePrice <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">doubleColumn</span><span class="token punctuation">(</span><span class="token string">&quot;平均价格&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
averagePrice<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">1.123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertThat</span><span class="token punctuation">(</span>averagePrice<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>averagePrice<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token number">1.123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于表格，我们必须为每个列提供至少一个值。否则，在创建具有不同大小列的表格时，将抛出_IllegalArgumentException_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">DoubleColumn</span> averagePrice2 <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">doubleColumn</span><span class="token punctuation">(</span><span class="token string">&quot;平均价格&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
averagePrice2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;平均价格2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
averagePrice2<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">1.123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertThatExceptionOfType</span><span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isThrownBy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> table<span class="token punctuation">.</span><span class="token function">addColumns</span><span class="token punctuation">(</span>averagePrice2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用_.set()_方法来更改列向量中的特定值。要使用它，我们必须知道我们想要更改的值的索引：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>stringColumn<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;Baeldung&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>从列中删除数据可能会有问题，特别是在表格的情况下。因此，<strong>Tablesaw不允许从列向量中删除值</strong>。相反，让我们将我们希望删除的值标记为缺失，使用_.setMissing()_并传递每个值的索引给这个方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">DoubleColumn</span> averagePrice <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">doubleColumn</span><span class="token punctuation">(</span><span class="token string">&quot;平均价格&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMissing</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertThat</span><span class="token punctuation">(</span>averagePrice<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>结果，它不会从向量中删除值持有者，而是将其设置为_null_。因此，向量的大小保持不变。</p><h2 id="_5-对数据进行排序" tabindex="-1"><a class="header-anchor" href="#_5-对数据进行排序"><span>5. 对数据进行排序</span></a></h2><p>接下来，让我们对之前导入的数据进行排序。首先，我们将根据一组列对我们的表格行进行排序。为此，我们<strong>使用_.sortAscending()<em>和</em>.sortDescending()_方法</strong>，它们接受列的名称。让我们排序以获取数据集中存在的最旧和最近的日期：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Table</span> ascendingDateSortedTable <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">sortAscendingOn</span><span class="token punctuation">(</span><span class="token string">&quot;日期&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertThat</span><span class="token punctuation">(</span>ascendingDateSortedTable<span class="token punctuation">.</span><span class="token function">dateColumn</span><span class="token punctuation">(</span><span class="token string">&quot;日期&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot;2015-01-04&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Table</span> descendingDateSortedTable <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">sortDescendingOn</span><span class="token punctuation">(</span><span class="token string">&quot;日期&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertThat</span><span class="token punctuation">(</span>descendingDateSortedTable<span class="token punctuation">.</span><span class="token function">dateColumn</span><span class="token punctuation">(</span><span class="token string">&quot;日期&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot;2018-03-25&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然而，<strong>这些方法非常有限</strong>。例如，我们不能混合升序和降序排序顺序。<strong>为了解决这些限制，我们使用_.sortOn()_方法</strong>。它接受一组列名称，并默认按顺序排序。要在降序排序特定列，我们在列名称前加上减号“-”。例如，让我们按年份排序，并以降序排序最高的平均价格：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Table</span> ascendingYearAndAveragePriceSortedTable <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">sortOn</span><span class="token punctuation">(</span><span class="token string">&quot;年份&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-平均价格&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertThat</span><span class="token punctuation">(</span>ascendingYearAndAveragePriceSortedTable<span class="token punctuation">.</span><span class="token function">intColumn</span><span class="token punctuation">(</span><span class="token string">&quot;年份&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token number">2015</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertThat</span><span class="token punctuation">(</span>ascendingYearAndAveragePriceSortedTable<span class="token punctuation">.</span><span class="token function">numberColumn</span><span class="token punctuation">(</span><span class="token string">&quot;平均价格&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token number">2.79</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>这些方法并不适合所有用例。对于这种情况，Tablesaw接受_Comparator<code>&lt;VRow&gt;</code><em>的自定义实现用于</em>.sortOn()_方法</strong>。</p><h2 id="_6-过滤数据" tabindex="-1"><a class="header-anchor" href="#_6-过滤数据"><span>6. 过滤数据</span></a></h2><p>过滤器允许我们从原始表中获取数据的子集。过滤表会返回另一个表，我们使用_.where()<em>和</em>.dropWhere()_方法来应用过滤器。第一种方法将返回与我们指定的标准匹配的值或行。而第二种方法则相反，会删除它们。</p><p>要指定过滤条件，我们首先需要了解_Selections_。</p><h3 id="_6-1-选择" tabindex="-1"><a class="header-anchor" href="#_6-1-选择"><span>6.1. 选择</span></a></h3><p><strong>_选择_是一个逻辑位图</strong>。换句话说，它是一个包含布尔值的数组，这些布尔值掩盖了列向量上的值。例如，将选择应用于列将产生另一个包含过滤值的列 - 例如，在给定索引的掩码为0时删除值。此外，选择向量将与其原始列具有相同的大小。</p><p>让我们通过获取2017年平均价格高于2美元的数据表来实践这一点：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">DateColumn</span> dateTable <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">dateColumn</span><span class="token punctuation">(</span><span class="token string">&quot;日期&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">DoubleColumn</span> averagePrice <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">doubleColumn</span><span class="token punctuation">(</span><span class="token string">&quot;平均价格&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Selection</span> selection <span class="token operator">=</span> dateTable<span class="token punctuation">.</span><span class="token function">isInYear</span><span class="token punctuation">(</span><span class="token number">2017</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>averagePrice<span class="token punctuation">.</span><span class="token function">isGreaterThan</span><span class="token punctuation">(</span><span class="token number">2D</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Table</span> table2017 <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>selection<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertThat</span><span class="token punctuation">(</span>table2017<span class="token punctuation">.</span><span class="token function">intColumn</span><span class="token punctuation">(</span><span class="token string">&quot;年份&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">containsOnly</span><span class="token punctuation">(</span><span class="token number">2017</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertThat</span><span class="token punctuation">(</span>table2017<span class="token punctuation">.</span><span class="token function">doubleColumn</span><span class="token punctuation">(</span><span class="token string">&quot;平均价格&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">allMatch</span><span class="token punctuation">(</span>avrgPrice <span class="token operator">-&gt;</span> avrgPrice <span class="token operator">&gt;</span> <span class="token number">2D</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面，我们使用了在_DateColumn_上定义的_.isInYear()<em>方法和在_DoubleColumn_上定义的</em>.isGreaterThan()<em>方法。我们结合了它们在查询式语言中的使用，使用</em>.and()<em>方法。Tablesaw提供了许多这样的内置辅助方法。因此，我们很少需要为简单任务自己构建自定义选择。对于复杂任务，我们使用</em>.and(), .andNot(), or()_和其他列过滤器来组合它们。</p><p>或者，我们可以通过创建_Predicate_并将其传递给每个列上可用的_.eval()_方法来编写自定义过滤器。此方法返回我们用于过滤表格或列的_Selection_对象。</p><h2 id="_7-汇总数据" tabindex="-1"><a class="header-anchor" href="#_7-汇总数据"><span>7. 汇总数据</span></a></h2><p>在处理数据之后，我们想从中提取一些见解。我们使用_.summarize()_方法来聚合数据以了解它。例如，从鳄梨数据集中，让我们提取平均价格的最小值、最大值、平均值和标准偏差：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Table</span> summary <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">summarize</span><span class="token punctuation">(</span><span class="token string">&quot;平均价格&quot;</span><span class="token punctuation">,</span> max<span class="token punctuation">,</span> min<span class="token punctuation">,</span> mean<span class="token punctuation">,</span> stdDev<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">by</span><span class="token punctuation">(</span><span class="token string">&quot;年份&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>summary<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，我们将我们想要聚合的列名和_AggregateFunction_列表传递给_.summarize()<em>方法。接下来，我们使用</em>.by()_方法按每年分组结果。最后，我们将结果打印在标准输出上：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>                                             鳄梨.csv摘要
 年份  |  平均价格平均值  |  平均价格最大值  |  平均价格最小值  |  平均价格标准偏差  
-----------------------------------------------------------------------------------------------------------------
 2015  |    1.375590382902939  |                2.79  |                0.49  |            0.37559477067238917  
 2016  |   1.3386396011396013  |                3.25  |                0.51  |            0.39370799476072077  
 2017  |   1.5151275777700104  |                3.17  |                0.44  |             0.4329056466203253  
 2018  |   1.3475308641975308  |                 2.3  |                0.56  |             0.3058577391135024  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Tablesaw为大多数常见操作提供了_AggregateFunction_。或者，我们可以实现自定义_AggregateFunction_对象，但由于这超出了本文的范围，我们将保持简单。</p><h2 id="_8-保存数据" tabindex="-1"><a class="header-anchor" href="#_8-保存数据"><span>8. 保存数据</span></a></h2><p>到目前为止，我们一直在将数据打印到标准输出。在验证我们的即时结果时，打印到控制台是很好的，但我们需要将数据保存到文件中，以便其他人可以重用结果。因此，让我们直接在表格上使用_.write()_方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>summary<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">csv</span><span class="token punctuation">(</span><span class="token string">&quot;summary.csv&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上述，我们使用_.csv()<em>方法将数据保存为CSV格式。目前，<strong>Tablesaw仅支持CSV格式和固定宽度格式</strong>，这类似于</em>.print()_方法在控制台上显示的内容。此外，我们使用_CsvWriterOptions_来自定义我们数据的CSV输出。</p><h2 id="_9-结论" tabindex="-1"><a class="header-anchor" href="#_9-结论"><span>9. 结论</span></a></h2><p>在本文中，我们探索了使用Tablesaw库处理表格数据。</p><p>首先，我们解释了如何导入数据。然后，我们描述了数据的内部表示以及如何使用它。接下来，我们探索了修改导入表的结构并创建过滤器以提取必要的数据，然后进行聚合。最后，我们将其保存到CSV文件中。</p><p>如往常一样，完整的源代码可在GitHub上获得。</p><p><a href="kimi://action?name=cheer-on-kimi">给Kimi加油</a></p><p>OK</p>`,72),o=[e];function c(l,u){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","2024-07-12-Working with Tabular Data Using Tablesaw.html.vue"]]),d=JSON.parse(`{"path":"/posts/baeldung/2024-07-12/2024-07-12-Working%20with%20Tabular%20Data%20Using%20Tablesaw.html","title":"使用Tablesaw库处理表格数据","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","Tablesaw"],"tag":["Java","Tablesaw","数据库","数据分析"],"head":[["meta",{"name":"keywords","content":"Tablesaw库, 数据分析, Java"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-12/2024-07-12-Working%20with%20Tabular%20Data%20Using%20Tablesaw.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"使用Tablesaw库处理表格数据"}],["meta",{"property":"og:description","content":"使用Tablesaw库处理表格数据 1. 引言 在本文中，我们将学习如何使用Tablesaw库来处理表格数据。首先，我们将导入一些数据。然后，我们将通过操作数据来获得一些见解。 我们将使用鳄梨价格数据集。简而言之，它包含了美国多个市场鳄梨价格和销售量的的历史数据。 2. 在Tablesaw中导入数据 首先，我们需要导入数据。Tablesaw支持包括CS..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-12T06:04:27.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Tablesaw"}],["meta",{"property":"article:tag","content":"数据库"}],["meta",{"property":"article:tag","content":"数据分析"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-12T06:04:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用Tablesaw库处理表格数据\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-12T06:04:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"使用Tablesaw库处理表格数据 1. 引言 在本文中，我们将学习如何使用Tablesaw库来处理表格数据。首先，我们将导入一些数据。然后，我们将通过操作数据来获得一些见解。 我们将使用鳄梨价格数据集。简而言之，它包含了美国多个市场鳄梨价格和销售量的的历史数据。 2. 在Tablesaw中导入数据 首先，我们需要导入数据。Tablesaw支持包括CS..."},"headers":[{"level":2,"title":"1. 引言","slug":"_1-引言","link":"#_1-引言","children":[]},{"level":2,"title":"2. 在Tablesaw中导入数据","slug":"_2-在tablesaw中导入数据","link":"#_2-在tablesaw中导入数据","children":[{"level":3,"title":"2.1 验证导入的数据","slug":"_2-1-验证导入的数据","link":"#_2-1-验证导入的数据","children":[]}]},{"level":2,"title":"3. Tablesaw中的数据表示","slug":"_3-tablesaw中的数据表示","link":"#_3-tablesaw中的数据表示","children":[{"level":3,"title":"3.1 文本类型","slug":"_3-1-文本类型","link":"#_3-1-文本类型","children":[]},{"level":3,"title":"3.2 时间类型","slug":"_3-2-时间类型","link":"#_3-2-时间类型","children":[]}]},{"level":2,"title":"4. 使用列","slug":"_4-使用列","link":"#_4-使用列","children":[{"level":3,"title":"4.1 创建新列","slug":"_4-1-创建新列","link":"#_4-1-创建新列","children":[]},{"level":3,"title":"4.2 添加或修改列数据","slug":"_4-2-添加或修改列数据","link":"#_4-2-添加或修改列数据","children":[]}]},{"level":2,"title":"5. 对数据进行排序","slug":"_5-对数据进行排序","link":"#_5-对数据进行排序","children":[]},{"level":2,"title":"6. 过滤数据","slug":"_6-过滤数据","link":"#_6-过滤数据","children":[{"level":3,"title":"6.1. 选择","slug":"_6-1-选择","link":"#_6-1-选择","children":[]}]},{"level":2,"title":"7. 汇总数据","slug":"_7-汇总数据","link":"#_7-汇总数据","children":[]},{"level":2,"title":"8. 保存数据","slug":"_8-保存数据","link":"#_8-保存数据","children":[]},{"level":2,"title":"9. 结论","slug":"_9-结论","link":"#_9-结论","children":[]}],"git":{"createdTime":1720764267000,"updatedTime":1720764267000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":8.25,"words":2475},"filePathRelative":"posts/baeldung/2024-07-12/2024-07-12-Working with Tabular Data Using Tablesaw.md","localizedDate":"2022年4月1日","excerpt":"\\n<h2>1. 引言</h2>\\n<p>在本文中，我们将学习如何使用Tablesaw库来处理表格数据。首先，我们将导入一些数据。然后，我们将通过操作数据来获得一些见解。</p>\\n<p>我们将使用鳄梨价格数据集。简而言之，它包含了美国多个市场鳄梨价格和销售量的的历史数据。</p>\\n<h2>2. 在Tablesaw中导入数据</h2>\\n<p>首先，我们需要导入数据。Tablesaw支持包括CSV在内的多种格式，我们数据集的格式就是CSV。因此，让我们从CSV文件加载数据集开始：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token class-name\\">CsvReadOptions</span> csvReadOptions <span class=\\"token operator\\">=</span>\\n    <span class=\\"token class-name\\">CsvReadOptions</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">builder</span><span class=\\"token punctuation\\">(</span>file<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">separator</span><span class=\\"token punctuation\\">(</span><span class=\\"token char\\">','</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">header</span><span class=\\"token punctuation\\">(</span><span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">dateFormat</span><span class=\\"token punctuation\\">(</span>formatter<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">build</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\ntable <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Table</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">read</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">usingOptions</span><span class=\\"token punctuation\\">(</span>csvReadOptions<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}`);export{k as comp,d as data};
