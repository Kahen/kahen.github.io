import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-CM1q4_9A.js";const e={},p=t(`<h1 id="spring-data-jpa-中使用-spel-支持的查询定义-baeldung" tabindex="-1"><a class="header-anchor" href="#spring-data-jpa-中使用-spel-支持的查询定义-baeldung"><span>Spring Data JPA 中使用 SpEL 支持的查询定义 | Baeldung</span></a></h1><p>SpEL 是 Spring 表达式语言（Spring Expression Language）的缩写，它是一个强大的工具，可以显著增强我们与 Spring 的交互，并在配置、属性设置和查询操作中提供额外的抽象。</p><p>在本教程中，我们将学习如何使用这个工具使我们的自定义查询更加动态，并在存储库层隐藏数据库特定的操作。我们将使用 <em>@Query</em> 注解，它允许我们使用 JPQL 或原生 SQL 来定制与数据库的交互。</p><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><h2 id="_2-访问参数" tabindex="-1"><a class="header-anchor" href="#_2-访问参数"><span>2. 访问参数</span></a></h2><h3 id="_2-1-按索引访问" tabindex="-1"><a class="header-anchor" href="#_2-1-按索引访问"><span>2.1. 按索引访问</span></a></h3><p>按索引访问参数不是最佳选择，因为它可能会给代码带来难以调试的问题。特别是当参数类型相同时。</p><p>同时，它为我们提供了更多的灵活性，特别是在开发阶段，当参数名称经常改变时。IDE 可能无法正确处理代码和查询的更新。</p><p>JDBC 为我们提供了 <em>?</em> 占位符，我们可以用它来标识查询中参数的位置。Spring 支持这种约定，并允许编写以下代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Modifying</span>
<span class="token annotation punctuation">@Transactional</span>
<span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;INSERT INTO articles (id, title, content, language) &quot;</span>
  <span class="token operator">+</span> <span class="token string">&quot;VALUES (?1, ?2, ?3, ?4)&quot;</span><span class="token punctuation">,</span>
  nativeQuery <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">saveWithPositionalArguments</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> title<span class="token punctuation">,</span> <span class="token class-name">String</span> content<span class="token punctuation">,</span> <span class="token class-name">String</span> language<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到目前为止，没有发生什么有趣的事情。我们使用的是我们以前在 JDBC 应用程序中使用的方法。注意，对于任何在数据库中进行更改的查询，都需要 <em>@Modifying</em> 和 <em>@Transactional</em> 注解，而 INSERT 是其中之一。所有 INSERT 的示例都将使用原生查询，因为 JPQL 不支持它们。</p><p>我们可以使用 SpEL 重写上面的查询：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Modifying</span>
<span class="token annotation punctuation">@Transactional</span>
<span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;INSERT INTO articles (id, title, content, language) &quot;</span>
  <span class="token operator">+</span> <span class="token string">&quot;VALUES (?#{[0]}, ?#{[1]}, ?#{[2]}, ?#{[3]})&quot;</span><span class="token punctuation">,</span>
  nativeQuery <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">saveWithPositionalSpELArguments</span><span class="token punctuation">(</span><span class="token keyword">long</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> title<span class="token punctuation">,</span> <span class="token class-name">String</span> content<span class="token punctuation">,</span> <span class="token class-name">String</span> language<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果类似，但看起来比前一个更杂乱。然而，由于它是 SpEL，它提供了所有丰富的功能。例如，我们可以使用条件逻辑在查询中：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Modifying</span>
<span class="token annotation punctuation">@Transactional</span>
<span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;INSERT INTO articles (id, title, content, language) &quot;</span>
  <span class="token operator">+</span> <span class="token string">&quot;VALUES (?#{[0]}, ?#{[1]}, ?#{[2] ?: &#39;Empty Article&#39;}, ?#{[3]})&quot;</span><span class="token punctuation">,</span>
  nativeQuery <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">saveWithPositionalSpELArgumentsWithEmptyCheck</span><span class="token punctuation">(</span><span class="token keyword">long</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> title<span class="token punctuation">,</span> <span class="token class-name">String</span> content<span class="token punctuation">,</span> <span class="token class-name">String</span> isoCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在这个查询中使用了 Elvis 运算符来检查是否提供了内容。尽管我们可以在查询中编写更复杂的逻辑，但应该谨慎使用，因为它可能会引入调试和验证代码时的问题。</p><h3 id="_2-2-按名称访问" tabindex="-1"><a class="header-anchor" href="#_2-2-按名称访问"><span>2.2. 按名称访问</span></a></h3><p>我们可以通过使用命名占位符来访问参数，这通常与参数名称匹配，但这不是严格要求。这是 JDBC 的另一种约定；命名参数用 <em>:name</em> 占位符标记。我们可以直接使用它：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Modifying</span>
<span class="token annotation punctuation">@Transactional</span>
<span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;INSERT INTO articles (id, title, content, language) &quot;</span>
  <span class="token operator">+</span> <span class="token string">&quot;VALUES (:id, :title, :content, :language)&quot;</span><span class="token punctuation">,</span>
  nativeQuery <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">saveWithNamedArguments</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token keyword">long</span> id<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> title<span class="token punctuation">,</span>
  <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;content&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> content<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;isoCode&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> language<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>唯一额外需要做的是确保 Spring 知道参数的名称。我们可以通过使用 <em>-parameters</em> 标志编译代码的更隐式方式来做，或者使用 <em>@Param</em> 注解明确地做。</p><p>明确的方式总是更好的，因为它提供了对名称的更多控制，我们不会因为错误的编译而遇到问题。</p><p>然而，让我们使用 SpEL 重写同一个查询：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Modifying</span>
<span class="token annotation punctuation">@Transactional</span>
<span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;INSERT INTO articles (id, title, content, language) &quot;</span>
  <span class="token operator">+</span> <span class="token string">&quot;VALUES (:#{#id}, :#{#title}, :#{#content}, :#{#language})&quot;</span><span class="token punctuation">,</span>
  nativeQuery <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">saveWithNamedSpELArguments</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token keyword">long</span> id<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> title<span class="token punctuation">,</span>
  <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;content&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> content<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;language&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> language<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们有标准的 SpEL 语法，但此外，我们需要使用 <em>#</em> 来区分参数名称和应用程序中的 bean 名称。如果我们省略它，Spring 将尝试在上下文中查找名为 <em>id</em>、<em>title</em>、<em>content</em> 和 <em>language</em> 的 bean。</p><p>总的来说，这个版本与没有 SpEL 的简单方法非常相似。然而，正如前一节所讨论的，SpEL 提供了更多的功能和功能。例如，我们可以在传递的对象上调用函数：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Modifying</span>
<span class="token annotation punctuation">@Transactional</span>
<span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;INSERT INTO articles (id, title, content, language) &quot;</span>
  <span class="token operator">+</span> <span class="token string">&quot;VALUES (:#{#id}, :#{#title}, :#{#content}, :#{#language.toLowerCase()})&quot;</span><span class="token punctuation">,</span>
  nativeQuery <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">saveWithNamedSpELArgumentsAndLowerCaseLanguage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token keyword">long</span> id<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> title<span class="token punctuation">,</span>
  <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;content&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> content<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;language&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> language<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以使用 <em>toLowerCase()</em> 方法在 <em>String</em> 对象上。我们可以进行条件逻辑、方法调用、字符串连接等。同时，拥有太多的逻辑在 <em>@Query</em> 中可能会使其模糊不清，并诱使我们将业务逻辑泄露到基础设施代码中。</p><h3 id="_2-3-访问对象的字段" tabindex="-1"><a class="header-anchor" href="#_2-3-访问对象的字段"><span>2.3. 访问对象的字段</span></a></h3><p>虽然前面的方法是或多或少地反映了 JDBC 和准备查询的能力，但这种方法允许我们以更面向对象的方式使用原生查询。正如我们之前看到的，我们可以在 SpEL 中使用简单的逻辑并调用对象的方法。此外，我们可以访问对象的字段：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Modifying</span>
<span class="token annotation punctuation">@Transactional</span>
<span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;INSERT INTO articles (id, title, content, language) &quot;</span>
  <span class="token operator">+</span> <span class="token string">&quot;VALUES (:#{#article.id}, :#{#article.title}, :#{#article.content}, :#{#article.language})&quot;</span><span class="token punctuation">,</span>
  nativeQuery <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">saveWithSingleObjectSpELArgument</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;article&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Article</span> article<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以使用对象的公共 API 来获取其内部。这是一种非常有用的技术，因为它允许我们保持存储库的签名整洁，并且不过多地暴露。</p><p>它甚至允许我们访问嵌套对象。假设我们有一个文章包装器：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArticleWrapper</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Article</span> article<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">ArticleWrapper</span><span class="token punctuation">(</span><span class="token class-name">Article</span> article<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>article <span class="token operator">=</span> article<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">Article</span> <span class="token function">getArticle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> article<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以在我们的示例中使用它：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Modifying</span>
<span class="token annotation punctuation">@Transactional</span>
<span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;INSERT INTO articles (id, title, content, language) &quot;</span>
  <span class="token operator">+</span> <span class="token string">&quot;VALUES (:#{#wrapper.article.id}, :#{#wrapper.article.title}, &quot;</span>
  <span class="token operator">+</span> <span class="token string">&quot;:#{#wrapper.article.content}, :#{#wrapper.article.language})&quot;</span><span class="token punctuation">,</span>
  nativeQuery <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">saveWithSingleWrappedObjectSpELArgument</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;wrapper&quot;</span><span class="token punctuation">)</span> <span class="token class-name">ArticleWrapper</span> articleWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，我们可以将参数作为 SpEL 中的 Java 对象，并使用任何可用的字段或方法。我们也可以在这个查询中添加逻辑和方法调用。</p><p>此外，我们可以将此技术与 <em>Pageable</em> 结合使用，以获取对象中的信息，例如偏移量或页面大小，并将其添加到我们的原生查询中。虽然 <em>Sort</em> 也是一个对象，但它的结构更复杂，使用起来会更困难。</p><h2 id="_3-引用实体" tabindex="-1"><a class="header-anchor" href="#_3-引用实体"><span>3. 引用实体</span></a></h2><p>减少重复代码是一个好的实践。然而，自定义查询可能会使其变得具有挑战性。即使我们有类似的逻辑要提取到基础存储库中，表名的不同使得重用变得困难。</p><p>SpEL 提供了一个实体名称的占位符，它从存储库参数化中推断出来。让我们创建这样一个基础存储库：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@NoRepositoryBean</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BaseNewsApplicationRepository</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> ID<span class="token punctuation">&gt;</span></span>\`\` <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> ID<span class="token punctuation">&gt;</span></span>\`\` <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;select e from #{#entityName} e&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">List</span>\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\` <span class="token function">findAllEntitiesUsingEntityPlaceholder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;SELECT * FROM #{#entityName}&quot;</span><span class="token punctuation">,</span> nativeQuery <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token class-name">List</span>\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\` <span class="token function">findAllEntitiesUsingEntityPlaceholderWithNativeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>我们需要使用一些额外的注解来使其工作。</strong> 第一个注解是 <em>@NoRepositoryBean.</em> 我们需要这个来排除这个基础存储库的实例化。由于它没有特定的参数化，尝试创建这样的存储库将会失败上下文。因此，我们需要将其排除。</p><p>使用 JPQL 的查询相当直接，将使用给定存储库的实体名称：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;select e from #{#entityName} e&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">List</span>\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\` <span class="token function">findAllEntitiesUsingEntityPlaceholder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然而，原生查询的情况并不那么简单。<strong>如果不进行额外的更改和配置，它将尝试使用实体名称，在我们的情况下是 <em>Article</em>，来查找表：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;SELECT * FROM #{#entityName}&quot;</span><span class="token punctuation">,</span> nativeQuery <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token class-name">List</span>\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\` <span class="token function">findAllEntitiesUsingEntityPlaceholderWithNativeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然而，我们的数据库中并没有这样的表。在实体定义中，我们明确指出了表的名称：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span>
<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;articles&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Article</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了解决这个问题，我们需要为我们的表提供匹配的实体名称：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;articles&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;articles&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Article</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这种情况下，JPQL 和原生查询都将推断出正确的实体名称，我们将能够跨应用程序中的所有实体重用相同的基础查询。</p><h2 id="_4-添加-spel-上下文" tabindex="-1"><a class="header-anchor" href="#_4-添加-spel-上下文"><span>4. 添加 SpEL 上下文</span></a></h2><p>正如所指出的，虽然在引用参数或占位符时，我们必须在它们的名字前提供额外的 <em>#</em>。这是为了区分 bean 名称和参数名称。</p><p>然而，我们不能直接在查询中使用 Spring 上下文中的 beans。IDE 通常提供有关上下文 beans 的提示，但上下文会失败。<strong>这是因为 <em>@Value</em> 和类似的注解以及 <em>@Query</em> 以不同的方式处理。</strong> 我们可以在前者的上下文中引用 beans，但不能在后者中。</p><p><strong>同时，我们可以使用 <em>EvaluationContextExtension</em> 在 SpEL 上下文中注册 beans，这样我们就可以在</strong> <em>@Query</em> <strong>中使用它们。</strong> 让我们想象以下情况 - 我们想要找到我们数据库中的所有文章，但根据用户的区域设置进行过滤：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;SELECT * FROM articles WHERE language = :#{locale.language}&quot;</span><span class="token punctuation">,</span> nativeQuery <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token class-name">List</span>\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\` <span class="token function">findAllArticlesUsingLocaleWithNativeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个查询会失败，因为我们不能默认访问 locale。我们需要提供我们的自定义 <em>EvaluationContextExtension</em>，它将持有有关用户区域设置的信息：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocaleContextHolderExtension</span> <span class="token keyword">implements</span> <span class="token class-name">EvaluationContextExtension</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getExtensionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;locale&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Locale</span> <span class="token function">getRootObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">LocaleContextHolder</span><span class="token punctuation">.</span><span class="token function">getLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以使用 <em>LocaleContextHolder</em> 在应用程序的任何地方访问当前区域设置。<strong>唯一要注意的是，它与用户的请求绑定，并且在此范围之外无法访问。</strong> 我们需要提供我们的根对象和名称。我们还可以选择添加属性和函数，但在这个例子中，我们将只使用根对象。</p><p>在我们能够使用 <em>@Query</em> 中的 <em>locale</em> 之前，我们需要采取的另一个步骤是注册区域设置拦截器：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebMvcConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">LocaleChangeInterceptor</span> localeChangeInterceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocaleChangeInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        localeChangeInterceptor<span class="token punctuation">.</span><span class="token function">setParamName</span><span class="token punctuation">(</span><span class="token string">&quot;locale&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>localeChangeInterceptor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们可以添加有关我们将要跟踪的参数的信息，因此每当请求包含区域设置参数时，上下文中的区域设置将被更新。我们可以通过在请求中提供区域设置来检查逻辑：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ParameterizedTest</span>
<span class="token annotation punctuation">@CsvSource</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;eng,2&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;fr,2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;esp,2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;deu, 2&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;jp,0&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">whenAskForNewsGetAllNewsInSpecificLanguageBasedOnLocale</span><span class="token punctuation">(</span><span class="token class-name">String</span> language<span class="token punctuation">,</span> <span class="token keyword">int</span> expectedResultSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    webTestClient<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">&quot;/articles?locale=&quot;</span> <span class="token operator">+</span> language<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">expectStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">expectBodyList</span><span class="token punctuation">(</span><span class="token class-name">Article</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">hasSize</span><span class="token punctuation">(</span>expectedResultSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><em>EvaluationContextExtension</em> 可以显著增加 SpEL 的能力，特别是在使用 @Query 注解时。</strong> 使用这种方法的方式可以包括从安全和角色限制到功能标志以及模式之间的交互。</p><h2 id="_5-结论" tabindex="-1"><a class="header-anchor" href="#_5-结论"><span>5. 结论</span></a></h2><p>SpEL 是一个强大的工具，正如所有强大的工具一样，人们倾向于过度使用它们，并试图只使用它来解决所有问题。最好合理地使用复杂表达式，并且只在必要时使用。</p><p><strong>尽管 IDE 提供了 SpEL 支持和高亮显示，复杂的逻辑可能会隐藏难以调试和验证的错误。</strong> 因此，要谨慎使用 SpEL，避免使用可能更好地用 Java 表达而不是隐藏在 SpEL 中的“聪明代码”。</p><p>像往常一样，教程中使用的所有代码都可以在 GitHub 上找到。</p><p>OK</p>`,69),o=[p];function i(c,l){return s(),a("div",null,o)}const d=n(e,[["render",i],["__file","2024-06-25- Query Definitions With SpEL Support in Spring Data JPA.html.vue"]]),k=JSON.parse('{"path":"/posts/baeldung/2024-06-25/2024-06-25-%20Query%20Definitions%20With%20SpEL%20Support%20in%20Spring%20Data%20JPA.html","title":"Spring Data JPA 中使用 SpEL 支持的查询定义 | Baeldung","lang":"zh-CN","frontmatter":{"date":"2024-06-25T00:00:00.000Z","category":["Spring Data JPA","SpEL"],"tag":["Spring","JPA","Query","SpEL"],"head":[["meta",{"name":"keywords","content":"Spring Data JPA, SpEL, Query Definitions"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-06-25/2024-06-25-%20Query%20Definitions%20With%20SpEL%20Support%20in%20Spring%20Data%20JPA.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Spring Data JPA 中使用 SpEL 支持的查询定义 | Baeldung"}],["meta",{"property":"og:description","content":"Spring Data JPA 中使用 SpEL 支持的查询定义 | Baeldung SpEL 是 Spring 表达式语言（Spring Expression Language）的缩写，它是一个强大的工具，可以显著增强我们与 Spring 的交互，并在配置、属性设置和查询操作中提供额外的抽象。 在本教程中，我们将学习如何使用这个工具使我们的自定义查..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-25T09:30:27.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:tag","content":"JPA"}],["meta",{"property":"article:tag","content":"Query"}],["meta",{"property":"article:tag","content":"SpEL"}],["meta",{"property":"article:published_time","content":"2024-06-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-25T09:30:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring Data JPA 中使用 SpEL 支持的查询定义 | Baeldung\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-25T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-25T09:30:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Spring Data JPA 中使用 SpEL 支持的查询定义 | Baeldung SpEL 是 Spring 表达式语言（Spring Expression Language）的缩写，它是一个强大的工具，可以显著增强我们与 Spring 的交互，并在配置、属性设置和查询操作中提供额外的抽象。 在本教程中，我们将学习如何使用这个工具使我们的自定义查..."},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. 访问参数","slug":"_2-访问参数","link":"#_2-访问参数","children":[{"level":3,"title":"2.1. 按索引访问","slug":"_2-1-按索引访问","link":"#_2-1-按索引访问","children":[]},{"level":3,"title":"2.2. 按名称访问","slug":"_2-2-按名称访问","link":"#_2-2-按名称访问","children":[]},{"level":3,"title":"2.3. 访问对象的字段","slug":"_2-3-访问对象的字段","link":"#_2-3-访问对象的字段","children":[]}]},{"level":2,"title":"3. 引用实体","slug":"_3-引用实体","link":"#_3-引用实体","children":[]},{"level":2,"title":"4. 添加 SpEL 上下文","slug":"_4-添加-spel-上下文","link":"#_4-添加-spel-上下文","children":[]},{"level":2,"title":"5. 结论","slug":"_5-结论","link":"#_5-结论","children":[]}],"git":{"createdTime":1719307827000,"updatedTime":1719307827000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":9.14,"words":2741},"filePathRelative":"posts/baeldung/2024-06-25/2024-06-25- Query Definitions With SpEL Support in Spring Data JPA.md","localizedDate":"2024年6月25日","excerpt":"\\n<p>SpEL 是 Spring 表达式语言（Spring Expression Language）的缩写，它是一个强大的工具，可以显著增强我们与 Spring 的交互，并在配置、属性设置和查询操作中提供额外的抽象。</p>\\n<p>在本教程中，我们将学习如何使用这个工具使我们的自定义查询更加动态，并在存储库层隐藏数据库特定的操作。我们将使用 <em>@Query</em> 注解，它允许我们使用 JPQL 或原生 SQL 来定制与数据库的交互。</p>\\n<h2>1. 概述</h2>\\n<h2>2. 访问参数</h2>\\n<h3>2.1. 按索引访问</h3>\\n<p>按索引访问参数不是最佳选择，因为它可能会给代码带来难以调试的问题。特别是当参数类型相同时。</p>","autoDesc":true}');export{d as comp,k as data};
