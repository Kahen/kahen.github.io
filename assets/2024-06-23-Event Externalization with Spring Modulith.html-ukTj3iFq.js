import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-fqmKfGa8.js";const e={},p=t('<h1 id="spring-modulith中的事件外部化" tabindex="-1"><a class="header-anchor" href="#spring-modulith中的事件外部化"><span>Spring Modulith中的事件外部化</span></a></h1><p>在本文中，我们将讨论在 <code>@Transactional</code> 块内发布消息的需求以及相关的性能挑战，例如延长的数据库连接时间。为了解决这个问题，我们将利用 Spring Modulith 的特性来监听 Spring 应用程序事件，并自动将它们发布到 Kafka 主题。</p><h2 id="_2-事务性操作和消息代理" tabindex="-1"><a class="header-anchor" href="#_2-事务性操作和消息代理"><span>2. 事务性操作和消息代理</span></a></h2><p>对于本文的代码示例，我们假设我们正在编写负责在 Baeldung 上保存 <code>Article</code> 的功能：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>\n<span class="token keyword">class</span> <span class="token class-name">Baeldung</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ArticleRepository</span> articleRepository<span class="token punctuation">;</span>\n\n    <span class="token comment">// 构造函数</span>\n\n    <span class="token annotation punctuation">@Transactional</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createArticle</span><span class="token punctuation">(</span><span class="token class-name">Article</span> article<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">validateArticle</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        article <span class="token operator">=</span> <span class="token function">addArticleTags</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// ...其他业务逻辑</span>\n\n        articleRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，我们还需要通知系统的其他部分关于这个新的 <code>Article</code>。有了这些信息，其他模块或服务将相应地做出反应，创建报告或向网站的读者发送新闻通讯。</p><p>实现这一目标的最简单方法是注入一个知道如何发布此事件的依赖项。对于我们的示例，让我们使用 <code>KafkaOperations</code> 向 “baeldung.articles.published” 主题发送消息，并使用 <code>Article</code> 的 <code>slug()</code> 作为键：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>\n<span class="token keyword">class</span> <span class="token class-name">Baeldung</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ArticleRepository</span> articleRepository<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">KafkaOperations</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ArticlePublishedEvent</span><span class="token punctuation">&gt;</span></span>`` messageProducer<span class="token punctuation">;</span>\n\n    <span class="token comment">// 构造函数</span>\n\n    <span class="token annotation punctuation">@Transactional</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createArticle</span><span class="token punctuation">(</span><span class="token class-name">Article</span> article<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// ...业务逻辑</span>\n        <span class="token function">validateArticle</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        article <span class="token operator">=</span> <span class="token function">addArticleTags</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        article <span class="token operator">=</span> articleRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        messageProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>\n          <span class="token string">&quot;baeldung.articles.published&quot;</span><span class="token punctuation">,</span>\n          article<span class="token punctuation">.</span><span class="token function">slug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token keyword">new</span> <span class="token class-name">ArticlePublishedEvent</span><span class="token punctuation">(</span>article<span class="token punctuation">.</span><span class="token function">slug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> article<span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然而，这种方法并不理想，原因有几个。从设计角度来看，我们将领域服务与消息生产者耦合了。此外，领域服务直接依赖于较低级别的组件，打破了 Clean Architecture 的一个基本原则。</p><p>此外，这种方法还将对性能产生影响，因为一切都发生在 <code>@Transactional</code> 方法中。结果，用于保存 <code>Article</code> 的数据库连接将保持打开状态，直到消息成功发布。</p><p>最后，这个解决方案还创建了数据持久化和消息发布之间的错误倾向关系：</p><ul><li><strong>如果生产者无法发布消息，事务将回滚；</strong></li><li><strong>即使消息已经发布，事务最终也可能回滚；</strong></li></ul><h2 id="_3-使用-spring-事件进行依赖反转" tabindex="-1"><a class="header-anchor" href="#_3-使用-spring-事件进行依赖反转"><span>3. 使用 Spring 事件进行依赖反转</span></a></h2><p><strong>我们可以利用 Spring 事件来改进我们的解决方案设计。</strong> 我们的目标是避免直接从我们的领域服务发布消息到 Kafka。让我们移除 <code>KafkaOperations</code> 依赖项，改为发布一个内部应用程序事件：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Baeldung</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ApplicationEventPublisher</span> applicationEvents<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ArticleRepository</span> articleRepository<span class="token punctuation">;</span>\n\n    <span class="token comment">// 构造函数</span>\n\n    <span class="token annotation punctuation">@Transactional</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createArticle</span><span class="token punctuation">(</span><span class="token class-name">Article</span> article<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// ...业务逻辑</span>\n        <span class="token function">validateArticle</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        article <span class="token operator">=</span> <span class="token function">addArticleTags</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        article <span class="token operator">=</span> articleRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        applicationEvents<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span>\n          <span class="token keyword">new</span> <span class="token class-name">ArticlePublishedEvent</span><span class="token punctuation">(</span>article<span class="token punctuation">.</span><span class="token function">slug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> article<span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除此之外，我们将有一个专用的 Kafka 生产者作为我们基础设施层的一部分。这个组件将监听 <code>ArticlePublishedEvent</code> 并将发布任务委托给底层的 <code>KafkaOperations</code> bean：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>\n<span class="token keyword">class</span> <span class="token class-name">ArticlePublishedKafkaProducer</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">KafkaOperations</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ArticlePublishedEvent</span><span class="token punctuation">&gt;</span></span>`` messageProducer<span class="token punctuation">;</span>\n\n    <span class="token comment">// 构造函数</span>\n\n    <span class="token annotation punctuation">@EventListener</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">publish</span><span class="token punctuation">(</span><span class="token class-name">ArticlePublishedEvent</span> article<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>article<span class="token punctuation">.</span><span class="token function">slug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;Article Slug must not be null!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        messageProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;baeldung.articles.published&quot;</span><span class="token punctuation">,</span> article<span class="token punctuation">.</span><span class="token function">slug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>通过这种抽象，基础设施组件现在依赖于领域服务产生的事件。换句话说，我们已经成功地减少了耦合并反转了源代码依赖。</strong> 此外，如果其他模块对 <code>Article</code> 创建感兴趣，它们现在可以无缝地监听这些应用程序事件并相应地做出反应。</p><p>另一方面，<code>publish()</code> 方法将在与我们的业务逻辑相同的事务内被调用。间接地，两个操作仍然相对于彼此的失败可能导致另一个失败或回滚的事实耦合在一起。</p><h2 id="_4-原子与非原子操作" tabindex="-1"><a class="header-anchor" href="#_4-原子与非原子操作"><span>4. 原子与非原子操作</span></a></h2><p>现在，让我们深入探讨性能考虑。首先，我们必须确定当与消息代理的通信失败时回滚是否是期望的行为。这个选择根据特定上下文而变化。</p><p><strong>如果我们不需要这种原子性，那么释放数据库连接并异步发布事件至关重要。</strong> 为了模拟这一点，我们可以尝试创建一个没有 <code>slug</code> 的文章，导致 <code>ArticlePublishedKafkaProducer::publish</code> 失败：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">whenPublishingMessageFails_thenArticleIsStillSavedToDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> article <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Article</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;Introduction to Spring Boot&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;John Doe&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;`&lt;p&gt;` Spring Boot is [...] `&lt;/p&gt;`&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    baeldung<span class="token punctuation">.</span><span class="token function">createArticle</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">assertThat</span><span class="token punctuation">(</span>repository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">hasSize</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">extracting</span><span class="token punctuation">(</span><span class="token class-name">Article</span><span class="token operator">::</span><span class="token function">title</span><span class="token punctuation">,</span> <span class="token class-name">Article</span><span class="token operator">::</span><span class="token function">author</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">containsExactly</span><span class="token punctuation">(</span><span class="token string">&quot;Introduction to Spring Boot&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;John Doe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们现在运行测试，它将会失败。这是因为 <code>ArticlePublishedKafkaProducer</code> 抛出了一个异常，这将导致领域服务回滚事务。<strong>然而，我们可以通过将 <code>@EventListener</code> 注解替换为 <code>@TransactionalEventListener</code> 和 <code>@Async</code> 来使事件监听器异步：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Async</span>\n<span class="token annotation punctuation">@TransactionalEventListener</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">publish</span><span class="token punctuation">(</span><span class="token class-name">ArticlePublishedEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">slug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;Article Slug must not be null!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    messageProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;baeldung.articles.published&quot;</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们现在重新运行测试，我们将注意到异常被记录，事件没有被发布，实体被保存到数据库中。此外，数据库连接更早地被释放，允许其他线程使用它。</p><p>我们通过两步方法成功解决了原始代码示例的设计和性能问题：</p><ul><li>使用 Spring 应用程序事件进行依赖反转</li><li>使用 <code>@TransactionalEventListener</code> 和 <code>@Async</code> 进行异步发布</li></ul><p><strong>Spring Modulith 允许我们进一步简化我们的代码，为这种模式提供内置支持。</strong> 让我们首先向我们的 <code>pom.xml</code> 添加 <code>spring-modulith-events-api</code> 的 maven 依赖项：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```org.springframework.modulith```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```spring-modulith-events-api```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```1.1.3```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>这个模块可以配置为监听应用程序事件，并自动将它们外部化到各种消息系统中。</strong> 我们将坚持我们最初的示例，并专注于 Kafka。为此集成，我们需要添加 <code>spring-modulith-events-kafka</code> 依赖项：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```org.springframework.modulith```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```spring-modulith-events-kafka```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```1.1.3```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>`runtime`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>`\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们需要更新 <code>ArticlePublishedEvent</code> 并用 <code>@Externalized</code> 注解它。这个注解需要路由目标的名称和键。换句话说，Kafka 主题和消息键。对于键，我们将使用一个 SpEL 表达式，将调用 <code>Article</code>::<code>slug()</code>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Externalized</span><span class="token punctuation">(</span><span class="token string">&quot;baeldung.article.published::#{slug()}&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">record</span> <span class="token class-name">ArticlePublishedEvent</span><span class="token punctuation">(</span><span class="token class-name">String</span> slug<span class="token punctuation">,</span> <span class="token class-name">String</span> title<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-事件发布注册表" tabindex="-1"><a class="header-anchor" href="#_6-事件发布注册表"><span>6. 事件发布注册表</span></a></h2><p>正如先前讨论的，我们仍然有数据持久化和消息发布之间的错误倾向关系——发布消息失败会导致事务回滚。另一方面，即使消息成功发布，事务仍然可能稍后回滚。</p><p>Spring Modulith 的事件发布注册表实现了“事务性出站箱”模式来解决这个问题，确保系统之间的最终一致性。<strong>当事务性操作发生时，而不是立即向外部系统发送消息，事件存储在同一个业务事务中的事件发布日志中。</strong></p><h3 id="_6-1-事件发布日志" tabindex="-1"><a class="header-anchor" href="#_6-1-事件发布日志"><span>6.1. 事件发布日志</span></a></h3><p>首先，我们需要引入与我们的持久性技术相对应的 <code>spring-modulith-starter</code> 依赖项。我们可以查阅官方文档以获取支持的启动器的完整列表。由于我们使用 Spring Data JPA 和 PostgreSQL 数据库，我们将添加 <code>spring-modulith-starter-jpa</code> 依赖项：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```org.springframework.modulith```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```spring-modulith-starter-jpa```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```1.1.2```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，我们将启用 Spring Modulith 创建 “event_publication” 表。这个表包含有关外部化应用程序事件的相关数据。让我们将以下属性添加到我们的 <code>application.yml</code>：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">spring.modulith</span><span class="token punctuation">:</span>\n  <span class="token key atrule">events.jdbc-schema-initialization.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们的设置使用 Testcontainer 启动一个带有 PostgreSQL 数据库的 Docker 容器。因此，我们可以利用 Testcontainers 桌面应用程序来“冻结容器关闭”并“打开一个终端”附加到该文档的翻译已经结束。以下是翻译的继续部分：</p><p>容器本身。然后，我们可以使用以下命令检查数据库：</p><ul><li><code>“psql -U test_user -d test_db”</code> - 打开 PostgreSQL 交互式终端</li><li><code>“\\d”</code> - 列出数据库对象</li></ul><p>正如我们所看到的，“event_publication” 表已成功创建。让我们执行一个查询，查看我们的测试持久化的事件：</p><p>在第一行，我们可以看到我们的第一个测试创建的事件，它涵盖了正常流程。然而，在第二个测试中，我们故意创建了一个无效的事件，省略了 “slug”，以模拟事件发布期间的失败。由于这个 <code>Article</code> 被保存到数据库中但没有成功发布，它出现在 <code>events_publication</code> 表中，缺少 <code>completion_date</code>。</p><h3 id="_6-2-重新提交事件" tabindex="-1"><a class="header-anchor" href="#_6-2-重新提交事件"><span>6.2. 重新提交事件</span></a></h3><p><strong>我们可以通过 <code>republish-outstanding-events-on-restart</code> 属性启用 Spring Modulith，在应用程序重新启动时自动重新提交事件：</strong></p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">spring.modulith</span><span class="token punctuation">:</span>\n  <span class="token key atrule">republish-outstanding-events-on-restart</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>此外，我们可以使用 <code>IncompleteEventPublications</code> bean 以编程方式重新提交给定时间之前失败的事件：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>\n<span class="token keyword">class</span> <span class="token class-name">EventPublications</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">IncompleteEventPublications</span> incompleteEvents<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">CompletedEventPublications</span> completeEvents<span class="token punctuation">;</span>\n\n    <span class="token comment">// 构造函数</span>\n\n    <span class="token keyword">void</span> <span class="token function">resubmitUnpublishedEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        incompleteEvents<span class="token punctuation">.</span><span class="token function">resubmitIncompletePublicationsOlderThan</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类似地，我们可以使用 <code>CompletedEventPublications</code> bean 轻松查询或清除 <code>event_publications</code> 表：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">clearPublishedEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    completeEvents<span class="token punctuation">.</span><span class="token function">deletePublicationsOlderThan</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-事件外部化配置" tabindex="-1"><a class="header-anchor" href="#_7-事件外部化配置"><span>7. 事件外部化配置</span></a></h2><p>尽管 <code>@Externalized</code> 注解的值对于简洁的 SpEL 表达式很有用，但有些情况下我们可能想要避免使用它：</p><ul><li>当表达式变得过于复杂时</li><li>当我们旨在将主题信息与应用程序事件分开时</li><li>如果我们想要为应用程序事件和外部化事件使用不同的模型</li></ul><p>对于这些用例，<strong>我们可以使用 <code>EventExternalizationConfiguration</code> 的构建器配置必要的路由和事件映射。</strong> 之后，我们只需要将此配置作为 Spring bean 暴露：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n<span class="token class-name">EventExternalizationConfiguration</span> <span class="token function">eventExternalizationConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">EventExternalizationConfiguration</span><span class="token punctuation">.</span><span class="token function">externalizing</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">EventExternalizationConfiguration</span><span class="token punctuation">.</span><span class="token function">annotatedAsExternalized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span>\n        <span class="token class-name">ArticlePublishedEvent</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>\n        it <span class="token operator">-&gt;</span> <span class="token class-name">RoutingTarget</span><span class="token punctuation">.</span><span class="token function">forTarget</span><span class="token punctuation">(</span><span class="token string">&quot;baeldung.articles.published&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">andKey</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">slug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">mapping</span><span class="token punctuation">(</span>\n        <span class="token class-name">ArticlePublishedEvent</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>\n        it <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">PostPublishedKafkaEvent</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">slug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> it<span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>EventExternalizationConfiguration</code> 使我们能够以声明方式定义应用程序事件的 <em>路由</em> 和 <em>映射</em>。此外，<strong>它让我们能够处理各种类型的应用程序事件。</strong> 例如，如果我们需要处理像 <code>WeeklySummaryPublishedEvent</code> 这样的额外事件，我们可以通过添加一个更多类型特定的 <em>路由</em> 和 <em>映射</em> 来轻松完成：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n<span class="token class-name">EventExternalizationConfiguration</span> <span class="token function">eventExternalizationConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">EventExternalizationConfiguration</span><span class="token punctuation">.</span><span class="token function">externalizing</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">EventExternalizationConfiguration</span><span class="token punctuation">.</span><span class="token function">annotatedAsExternalized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span>\n        <span class="token class-name">ArticlePublishedEvent</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>\n        it <span class="token operator">-&gt;</span> <span class="token class-name">RoutingTarget</span><span class="token punctuation">.</span><span class="token function">forTarget</span><span class="token punctuation">(</span><span class="token string">&quot;baeldung.articles.published&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">andKey</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">slug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">mapping</span><span class="token punctuation">(</span>\n        <span class="token class-name">ArticlePublishedEvent</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>\n        it <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">PostPublishedKafkaEvent</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">slug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> it<span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span>\n        <span class="token class-name">WeeklySummaryPublishedEvent</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>\n        it <span class="token operator">-&gt;</span> <span class="token class-name">RoutingTarget</span><span class="token punctuation">.</span><span class="token function">forTarget</span><span class="token punctuation">(</span><span class="token string">&quot;baeldung.articles.published&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">andKey</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">mapping</span><span class="token punctuation">(</span>\n        <span class="token class-name">WeeklySummaryPublishedEvent</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>\n        it <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">PostPublishedKafkaEvent</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> it<span class="token punctuation">.</span><span class="token function">heading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如我们所观察到的，映射和路由需要两件事：类型本身和一个用于解析 Kafka 主题和有效载荷的函数。在我们的示例中，两个应用程序事件将被映射到一个共同的类型，并发送到同一个主题。</p><p>此外，由于我们现在在配置中声明了路由，我们可以从事件本身中移除此信息。因此，事件将只有 <code>@Externalized</code> 注解，没有值：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Externalized</span>\n<span class="token keyword">public</span> <span class="token keyword">record</span> <span class="token class-name">ArticlePublishedEvent</span><span class="token punctuation">(</span><span class="token class-name">String</span> slug<span class="token punctuation">,</span> <span class="token class-name">String</span> title<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Externalized</span>\n<span class="token keyword">public</span> <span class="token keyword">record</span> <span class="token class-name">WeeklySummaryPublishedEvent</span><span class="token punctuation">(</span><span class="token class-name">String</span> handle<span class="token punctuation">,</span> <span class="token class-name">String</span> heading<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-结论" tabindex="-1"><a class="header-anchor" href="#_8-结论"><span>8. 结论</span></a></h2><p>在本文中，我们讨论了需要在事务性块内发布消息的场景。我们发现这种模式可能会有重大的性能影响，因为它可能会阻塞数据库连接更长的时间。</p><p>之后，我们使用 Spring Modulith 的特性来监听 Spring 应用程序事件，并自动将它们发布到 Kafka 主题。这种方法允许我们异步地外部化事件并更快地释放数据库连接。</p><p>完整的源代码可以在 GitHub 上找到。</p><p>OK</p>',69),c=[p];function o(i,l){return a(),s("div",null,c)}const r=n(e,[["render",o],["__file","2024-06-23-Event Externalization with Spring Modulith.html.vue"]]),k=JSON.parse('{"path":"/posts/baeldung/2024-06-23/2024-06-23-Event%20Externalization%20with%20Spring%20Modulith.html","title":"Spring Modulith中的事件外部化","lang":"zh-CN","frontmatter":{"date":"2024-06-23T00:00:00.000Z","category":["Spring Modulith","Event Externalization"],"tag":["Spring","Kafka","Event-Driven"],"head":[["meta",{"name":"keywords","content":"Spring Modulith, Event Externalization, Kafka, Transactional, Asynchronous"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-06-23/2024-06-23-Event%20Externalization%20with%20Spring%20Modulith.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Spring Modulith中的事件外部化"}],["meta",{"property":"og:description","content":"Spring Modulith中的事件外部化 在本文中，我们将讨论在 @Transactional 块内发布消息的需求以及相关的性能挑战，例如延长的数据库连接时间。为了解决这个问题，我们将利用 Spring Modulith 的特性来监听 Spring 应用程序事件，并自动将它们发布到 Kafka 主题。 2. 事务性操作和消息代理 对于本文的代码示例..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-23T13:51:37.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:tag","content":"Kafka"}],["meta",{"property":"article:tag","content":"Event-Driven"}],["meta",{"property":"article:published_time","content":"2024-06-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-23T13:51:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring Modulith中的事件外部化\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-23T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-23T13:51:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Spring Modulith中的事件外部化 在本文中，我们将讨论在 @Transactional 块内发布消息的需求以及相关的性能挑战，例如延长的数据库连接时间。为了解决这个问题，我们将利用 Spring Modulith 的特性来监听 Spring 应用程序事件，并自动将它们发布到 Kafka 主题。 2. 事务性操作和消息代理 对于本文的代码示例..."},"headers":[{"level":2,"title":"2. 事务性操作和消息代理","slug":"_2-事务性操作和消息代理","link":"#_2-事务性操作和消息代理","children":[]},{"level":2,"title":"3. 使用 Spring 事件进行依赖反转","slug":"_3-使用-spring-事件进行依赖反转","link":"#_3-使用-spring-事件进行依赖反转","children":[]},{"level":2,"title":"4. 原子与非原子操作","slug":"_4-原子与非原子操作","link":"#_4-原子与非原子操作","children":[]},{"level":2,"title":"6. 事件发布注册表","slug":"_6-事件发布注册表","link":"#_6-事件发布注册表","children":[{"level":3,"title":"6.1. 事件发布日志","slug":"_6-1-事件发布日志","link":"#_6-1-事件发布日志","children":[]},{"level":3,"title":"6.2. 重新提交事件","slug":"_6-2-重新提交事件","link":"#_6-2-重新提交事件","children":[]}]},{"level":2,"title":"7. 事件外部化配置","slug":"_7-事件外部化配置","link":"#_7-事件外部化配置","children":[]},{"level":2,"title":"8. 结论","slug":"_8-结论","link":"#_8-结论","children":[]}],"git":{"createdTime":1719150697000,"updatedTime":1719150697000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":9.25,"words":2774},"filePathRelative":"posts/baeldung/2024-06-23/2024-06-23-Event Externalization with Spring Modulith.md","localizedDate":"2024年6月23日","excerpt":"\\n<p>在本文中，我们将讨论在 <code>@Transactional</code> 块内发布消息的需求以及相关的性能挑战，例如延长的数据库连接时间。为了解决这个问题，我们将利用 Spring Modulith 的特性来监听 Spring 应用程序事件，并自动将它们发布到 Kafka 主题。</p>\\n<h2>2. 事务性操作和消息代理</h2>\\n<p>对于本文的代码示例，我们假设我们正在编写负责在 Baeldung 上保存 <code>Article</code> 的功能：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token annotation punctuation\\">@Service</span>\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Baeldung</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">final</span> <span class=\\"token class-name\\">ArticleRepository</span> articleRepository<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// 构造函数</span>\\n\\n    <span class=\\"token annotation punctuation\\">@Transactional</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">createArticle</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Article</span> article<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">validateArticle</span><span class=\\"token punctuation\\">(</span>article<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        article <span class=\\"token operator\\">=</span> <span class=\\"token function\\">addArticleTags</span><span class=\\"token punctuation\\">(</span>article<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">// ...其他业务逻辑</span>\\n\\n        articleRepository<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">save</span><span class=\\"token punctuation\\">(</span>article<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{r as comp,k as data};
