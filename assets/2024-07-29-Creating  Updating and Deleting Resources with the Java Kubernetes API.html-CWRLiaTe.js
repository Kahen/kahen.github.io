import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-CseMoHkL.js";const e={},p=t(`<h1 id="使用java-kubernetes-api进行资源的创建、更新和删除" tabindex="-1"><a class="header-anchor" href="#使用java-kubernetes-api进行资源的创建、更新和删除"><span>使用Java Kubernetes API进行资源的创建、更新和删除</span></a></h1><p>在本教程中，我们将使用Kubernetes的官方Java API来执行资源的CRUD操作。</p><p>我们已经在之前的文章中介绍了这个API的基本使用方法，包括基本项目设置以及我们可以使用它来获取有关运行中集群的各种信息。</p><p>通常，Kubernetes部署大多是静态的。我们创建一些描述我们想要创建的内容的工件（例如YAML文件），然后将它们提交到DevOps流水线。然后，我们系统的各个部分保持不变，直到我们添加一个新组件或升级一个现有组件。</p><p>然而，有时我们需要即时添加资源。一个常见的例子是响应用户启动的请求来运行作业。作为响应，应用程序将启动一个后台作业来处理报告，并使其可供以后检索。</p><p>这里的关键是，通过使用这些API，我们可以更好地利用可用的基础设施，因为我们只有在需要时才消耗资源，之后释放它们。</p><h3 id="_2-创建新资源" tabindex="-1"><a class="header-anchor" href="#_2-创建新资源"><span>2. 创建新资源</span></a></h3><p>在这个例子中，我们将在Kubernetes集群中创建一个作业资源。作业是一种与其他类型不同的Kubernetes工作负载，它运行到完成为止。也就是说，一旦其pod中运行的程序终止，作业本身也会终止。它的YAML表示与其他资源类似：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> batch/v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Job
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> jobs
  <span class="token key atrule">name</span><span class="token punctuation">:</span> report<span class="token punctuation">-</span>job
  <span class="token key atrule">labels</span><span class="token punctuation">:</span>
    <span class="token key atrule">app</span><span class="token punctuation">:</span> reports
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">template</span><span class="token punctuation">:</span>
    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>
      <span class="token key atrule">name</span><span class="token punctuation">:</span> payroll<span class="token punctuation">-</span>report
    <span class="token key atrule">spec</span><span class="token punctuation">:</span>
      <span class="token key atrule">containers</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> main
        <span class="token key atrule">image</span><span class="token punctuation">:</span> report<span class="token punctuation">-</span>runner
        <span class="token key atrule">command</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> payroll
        <span class="token key atrule">args</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>date
        <span class="token punctuation">-</span> <span class="token datetime number">2021-05-01</span>
      <span class="token key atrule">restartPolicy</span><span class="token punctuation">:</span> Never
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Kubernetes API提供了两种创建等效Java对象的方法：</p><ul><li>使用_new_创建POJOS并通过setter填充所有必需的属性</li><li>使用流畅的API构建Java资源表示</li></ul><p>使用哪种方法主要是个人偏好。在这里，我们将使用流畅的方法来创建_V1Job_对象，因为构建过程看起来非常类似于它的YAML对应物：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ApiClient</span> client  <span class="token operator">=</span> <span class="token class-name">Config</span><span class="token punctuation">.</span><span class="token function">defaultClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BatchV1Api</span> api <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BatchV1Api</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">V1Job</span> body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">V1JobBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">withNewMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">withNamespace</span><span class="token punctuation">(</span><span class="token string">&quot;report-jobs&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">withName</span><span class="token punctuation">(</span><span class="token string">&quot;payroll-report-job&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">endMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">withNewSpec</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">withNewTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">withNewMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">addToLabels</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;payroll-report&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">endMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">editOrNewSpec</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">addNewContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">withName</span><span class="token punctuation">(</span><span class="token string">&quot;main&quot;</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">withImage</span><span class="token punctuation">(</span><span class="token string">&quot;report-runner&quot;</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">addNewCommand</span><span class="token punctuation">(</span><span class="token string">&quot;payroll&quot;</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">addNewArg</span><span class="token punctuation">(</span><span class="token string">&quot;--date&quot;</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">addNewArg</span><span class="token punctuation">(</span><span class="token string">&quot;2021-05-01&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">endContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">withRestartPolicy</span><span class="token punctuation">(</span><span class="token string">&quot;Never&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">endSpec</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">endTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">endSpec</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">V1Job</span> createdJob <span class="token operator">=</span> api<span class="token punctuation">.</span><span class="token function">createNamespacedJob</span><span class="token punctuation">(</span><span class="token string">&quot;report-jobs&quot;</span><span class="token punctuation">,</span> body<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们首先创建_ApiClient_，然后创建API存根实例。_作业_资源是_Batch API_的一部分，所以我们创建一个_BatchV1Api_实例，我们将使用它来调用集群的API服务器。</p><p>接下来，我们实例化一个_V1JobBuilder_实例，它引导我们完成填充所有属性的过程。注意使用嵌套构建器：要“关闭”一个嵌套构建器，我们必须调用它的_endXXX()_方法，这使我们回到它的父构建器。</p><p>另外，我们还可以使用_withXXX_方法直接注入一个嵌套对象。当我们想要重用一组常见的属性，如元数据、标签和注解时，这很有用。</p><p>最后一步只是一个对API存根的调用。这将序列化我们的资源对象，并将请求POST到服务器。如预期的那样，API有同步（如上所述）和异步版本。</p><p>返回的对象将包含与创建的作业相关的元数据和状态字段。在_作业_的情况下，我们可以使用其状态字段来检查它何时完成。我们还可以使用我们在关于监控资源的文章中介绍的一种技术来接收此通知。</p><h3 id="_3-更新现有资源" tabindex="-1"><a class="header-anchor" href="#_3-更新现有资源"><span>3. 更新现有资源</span></a></h3><p>更新现有资源包括向Kubernetes API服务器发送一个PATCH请求，其中包含我们想要修改的字段。截至Kubernetes版本1.16，有四种方法可以指定这些字段：</p><ul><li>JSON Patch（RFC 6092）</li><li>JSON Merge Patch（RFC 7396）</li><li>Strategic Merge Patch</li><li>应用YAML</li></ul><p>其中最后一个是最容易使用的，因为它将所有合并和冲突解决留给了服务器：我们所要做的就是发送一个带有我们想要修改的字段的YAML文档。</p><p>不幸的是，Java API没有提供一种简单的方法来构建这个部分YAML文档。相反，我们必须使用_PatchUtil_辅助类来发送原始的YAML或JSON字符串。然而，我们可以使用_ApiClient_对象提供的内置JSON序列化器来实现：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">V1Job</span> patchedJob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">V1JobBuilder</span><span class="token punctuation">(</span>createdJob<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">withNewMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">withName</span><span class="token punctuation">(</span>createdJob<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">withNamespace</span><span class="token punctuation">(</span>createdJob<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">endMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">editSpec</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">withParallelism</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">endSpec</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">String</span> patchedJobJSON <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span>patchedJob<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">PatchUtils</span><span class="token punctuation">.</span><span class="token function">patch</span><span class="token punctuation">(</span>
  <span class="token class-name">V1Job</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> api<span class="token punctuation">.</span><span class="token function">patchNamespacedJobCall</span><span class="token punctuation">(</span>
    createdJob<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    createdJob<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">V1Patch</span><span class="token punctuation">(</span>patchedJobJSON<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token string">&quot;baeldung&quot;</span><span class="token punctuation">,</span>
    <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token class-name">V1Patch</span><span class="token punctuation">.</span><span class="token constant">PATCH_FORMAT_APPLY_YAML</span><span class="token punctuation">,</span>
  api<span class="token punctuation">.</span><span class="token function">getApiClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们使用从_createNamespacedJob()<em>返回的对象作为模板，我们将构建修补过的版本。在这种情况下，我们只是将_parallelism_值从1增加到2，其他所有字段保持不变。一个重要的点是，当我们构建修改后的资源时，我们必须使用_withNewMetadata()</em>。这确保我们不会构建一个包含在创建资源后返回的对象中存在的托管字段的对象。有关托管字段及其在Kubernetes中的使用方式的完整描述，请参考文档。</p><p>一旦我们构建了一个带有修改字段的对象，然后我们使用_serialize_方法将其转换为其JSON表示。然后我们使用这个序列化版本来构建用作PATCH调用有效载荷的_V1Patch_对象。<em>patch_方法还接受一个额外的参数，我们在这里告知请求中存在的数据类型。在我们的例子中，这是_PATCH_FORMAT_APPLY_YAML</em>，库使用它作为HTTP请求中包含的_Content-Type_头。</p><p>传递给_fieldManager_参数的“baeldung”值定义了操作资源字段的行为者的名称。Kubernetes在内部使用这个值来解决两个或更多客户端尝试修改同一资源时可能出现的冲突。我们还传递_true_到_force_参数，这意味着我们将拥有任何修改字段的所有权。</p><h3 id="_4-删除资源" tabindex="-1"><a class="header-anchor" href="#_4-删除资源"><span>4. 删除资源</span></a></h3><p>与之前的操作相比，删除资源相当直接：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">V1Status</span> response <span class="token operator">=</span> api<span class="token punctuation">.</span><span class="token function">deleteNamespacedJob</span><span class="token punctuation">(</span>
  createdJob<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  createdJob<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token keyword">null</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们只是使用_deleteNamespacedJob_方法使用这种特定资源的默认选项来删除作业。如果需要，我们可以使用最后一个参数来控制删除过程的细节。这采用了_V1DeleteOptions_对象的形式，我们可以使用它来指定任何依赖资源的宽限期和级联行为。</p><h3 id="_5-结论" tabindex="-1"><a class="header-anchor" href="#_5-结论"><span>5. 结论</span></a></h3><p>在本文中，我们介绍了如何使用Java Kubernetes API库来操作Kubernetes资源。像往常一样，示例的完整源代码可以在GitHub上找到。</p>`,33),c=[p];function o(l,i){return s(),a("div",null,c)}const r=n(e,[["render",o],["__file","2024-07-29-Creating  Updating and Deleting Resources with the Java Kubernetes API.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-29/2024-07-29-Creating%20%20Updating%20and%20Deleting%20Resources%20with%20the%20Java%20Kubernetes%20API.html","title":"使用Java Kubernetes API进行资源的创建、更新和删除","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Kubernetes","Java"],"tag":["Java","Kubernetes","API"],"head":[["meta",{"name":"keywords","content":"Java, Kubernetes, CRUD, API"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-29/2024-07-29-Creating%20%20Updating%20and%20Deleting%20Resources%20with%20the%20Java%20Kubernetes%20API.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"使用Java Kubernetes API进行资源的创建、更新和删除"}],["meta",{"property":"og:description","content":"使用Java Kubernetes API进行资源的创建、更新和删除 在本教程中，我们将使用Kubernetes的官方Java API来执行资源的CRUD操作。 我们已经在之前的文章中介绍了这个API的基本使用方法，包括基本项目设置以及我们可以使用它来获取有关运行中集群的各种信息。 通常，Kubernetes部署大多是静态的。我们创建一些描述我们想要创..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-29T08:07:42.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Kubernetes"}],["meta",{"property":"article:tag","content":"API"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-29T08:07:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用Java Kubernetes API进行资源的创建、更新和删除\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-29T08:07:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"使用Java Kubernetes API进行资源的创建、更新和删除 在本教程中，我们将使用Kubernetes的官方Java API来执行资源的CRUD操作。 我们已经在之前的文章中介绍了这个API的基本使用方法，包括基本项目设置以及我们可以使用它来获取有关运行中集群的各种信息。 通常，Kubernetes部署大多是静态的。我们创建一些描述我们想要创..."},"headers":[{"level":3,"title":"2. 创建新资源","slug":"_2-创建新资源","link":"#_2-创建新资源","children":[]},{"level":3,"title":"3. 更新现有资源","slug":"_3-更新现有资源","link":"#_3-更新现有资源","children":[]},{"level":3,"title":"4. 删除资源","slug":"_4-删除资源","link":"#_4-删除资源","children":[]},{"level":3,"title":"5. 结论","slug":"_5-结论","link":"#_5-结论","children":[]}],"git":{"createdTime":1722240462000,"updatedTime":1722240462000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":5.68,"words":1705},"filePathRelative":"posts/baeldung/2024-07-29/2024-07-29-Creating  Updating and Deleting Resources with the Java Kubernetes API.md","localizedDate":"2022年4月1日","excerpt":"\\n<p>在本教程中，我们将使用Kubernetes的官方Java API来执行资源的CRUD操作。</p>\\n<p>我们已经在之前的文章中介绍了这个API的基本使用方法，包括基本项目设置以及我们可以使用它来获取有关运行中集群的各种信息。</p>\\n<p>通常，Kubernetes部署大多是静态的。我们创建一些描述我们想要创建的内容的工件（例如YAML文件），然后将它们提交到DevOps流水线。然后，我们系统的各个部分保持不变，直到我们添加一个新组件或升级一个现有组件。</p>\\n<p>然而，有时我们需要即时添加资源。一个常见的例子是响应用户启动的请求来运行作业。作为响应，应用程序将启动一个后台作业来处理报告，并使其可供以后检索。</p>","autoDesc":true}');export{r as comp,d as data};
