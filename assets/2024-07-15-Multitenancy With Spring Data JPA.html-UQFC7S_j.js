import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-0nXvcScy.js";const e={},p=t(`<h1 id="spring-data-jpa-多租户支持" tabindex="-1"><a class="header-anchor" href="#spring-data-jpa-多租户支持"><span>Spring Data JPA 多租户支持</span></a></h1><p>多租户是指一个软件应用实例服务于多个租户或客户。它确保了租户之间所需的隔离程度，使得租户使用的数据和资源与其他租户分离。本教程将展示如何在Spring Boot应用程序中使用Spring Data JPA配置多租户，同时使用JWT为租户添加安全性。</p><h2 id="_2-多租户模型" tabindex="-1"><a class="header-anchor" href="#_2-多租户模型"><span>2. 多租户模型</span></a></h2><p>多租户系统主要有三种方法：</p><ul><li>独立数据库</li><li>共享数据库和独立架构</li><li>共享数据库和共享架构</li></ul><h3 id="_2-1-独立数据库" tabindex="-1"><a class="header-anchor" href="#_2-1-独立数据库"><span>2.1. 独立数据库</span></a></h3><p>在这种方法中，每个租户的数据保存在独立的数据库实例中，与其他租户隔离。这也被称为“每个租户一个数据库”：<img src="https://www.baeldung.com/wp-content/uploads/2022/08/database_per_tenant.png" alt="img" loading="lazy"></p><h3 id="_2-2-共享数据库和独立架构" tabindex="-1"><a class="header-anchor" href="#_2-2-共享数据库和独立架构"><span>2.2. 共享数据库和独立架构</span></a></h3><p>在这种方法中，每个租户的数据保存在共享数据库的不同架构中。有时这被称为“每个租户一个架构”：<img src="https://www.baeldung.com/wp-content/uploads/2022/08/separate_schema.png" alt="img" loading="lazy"></p><h3 id="_2-3-共享数据库和共享架构" tabindex="-1"><a class="header-anchor" href="#_2-3-共享数据库和共享架构"><span>2.3. 共享数据库和共享架构</span></a></h3><p>在这种方法中，所有租户共享一个数据库，每个表都有一个带有租户标识符的列：<img src="https://www.baeldung.com/wp-content/uploads/2022/08/shareddatabase.png" alt="img" loading="lazy"></p><h2 id="_3-maven依赖" tabindex="-1"><a class="header-anchor" href="#_3-maven依赖"><span>3. Maven依赖</span></a></h2><p>让我们首先在Spring Boot应用程序的_pom.xml_中声明_spring-boot-starter-data-jpa_依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>\`\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\`\`\`\`
    \`\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`\`\`org.springframework.boot\`\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`\`\`
    \`\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`\`\`spring-boot-starter-data-jpa\`\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`\`\`
\`\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\`\`\`\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们还将在本教程中使用_PostgreSQL_数据库，因此让我们也在_pom.xml_文件中添加_postgresql_依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>\`\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\`\`\`\`
    \`\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`\`\`org.postgresql\`\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`\`\`
    \`\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`\`\`postgresql\`\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`\`\`
    \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>\`runtime\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>\`
\`\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\`\`\`\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>独立数据库和共享数据库以及独立架构的方法在Spring Boot应用程序的配置中是相似的。本教程<strong>我们专注于独立数据库方法</strong>。</p><h2 id="_4-动态-datasource-路由" tabindex="-1"><a class="header-anchor" href="#_4-动态-datasource-路由"><span>4. 动态_DataSource_路由</span></a></h2><p>在本节中，我们将描述“数据库每个租户”模型背后的一般思想。</p><h3 id="_4-1-abstractroutingdatasource" tabindex="-1"><a class="header-anchor" href="#_4-1-abstractroutingdatasource"><span>4.1. <em>AbstractRoutingDataSource</em></span></a></h3><p>实现Spring Data JPA多租户的一般思想是<strong>基于当前租户标识符在运行时路由数据源</strong>。为了做到这一点，我们可以使用_AbstractRoutingDatasource_来动态确定当前租户的实际_DataSource_。让我们创建一个扩展_AbstractRoutingDataSource_类的_MultitenantDataSource_类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MultitenantDataSource</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractRoutingDataSource</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">String</span> <span class="token function">determineCurrentLookupKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">TenantContext</span><span class="token punctuation">.</span><span class="token function">getCurrentTenant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>_AbstractRoutingDataSource_根据查找键将_getConnection_调用路由到不同的目标_DataSources_之一。查找键通常通过某些线程绑定的事务上下文来确定。因此，<strong>我们创建一个_TenantContext_类来存储每个请求中的当前租户</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TenantContext</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>\`\` <span class="token constant">CURRENT_TENANT</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>\`\`<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getCurrentTenant</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">CURRENT_TENANT</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setCurrentTenant</span><span class="token punctuation">(</span><span class="token class-name">String</span> tenant<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token constant">CURRENT_TENANT</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>tenant<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用_ThreadLocal_对象来保存当前请求的租户ID。此外，我们使用_set_方法存储租户ID，使用_get()_方法检索它。</p><h3 id="_4-2-每个请求设置租户id" tabindex="-1"><a class="header-anchor" href="#_4-2-每个请求设置租户id"><span>4.2. 每个请求设置租户ID</span></a></h3><p>在此配置设置之后，<strong>当我们执行任何租户操作时，我们需要在创建任何事务之前知道租户ID</strong>。因此，我们需要在控制器端点之前，在_Filter_或_Interceptor_中设置租户ID。让我们添加一个_TenantFilter_来在_TenantContext_中设置当前租户：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">TenantFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span>
      <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>

        <span class="token class-name">HttpServletRequest</span> req <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> request<span class="token punctuation">;</span>
        <span class="token class-name">String</span> tenantName <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">&quot;X-TenantID&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TenantContext</span><span class="token punctuation">.</span><span class="token function">setCurrentTenant</span><span class="token punctuation">(</span>tenantName<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token class-name">TenantContext</span><span class="token punctuation">.</span><span class="token function">setCurrentTenant</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个过滤器中，我们从请求头_X-TenantID_中获取租户ID并将其设置在_TenantContext_中。我们沿着过滤器链传递控制权。我们的_finally_块确保在下一个请求之前重置当前租户。这避免了跨租户请求污染的任何风险。在下一节中，我们将在“每个租户数据库”模型中实现租户和数据源声明。</p><h2 id="_5-数据库方法" tabindex="-1"><a class="header-anchor" href="#_5-数据库方法"><span>5. 数据库方法</span></a></h2><p>在本节中，我们将基于“每个租户数据库”模型实现多租户。</p><h3 id="_5-1-租户声明" tabindex="-1"><a class="header-anchor" href="#_5-1-租户声明"><span>5.1. 租户声明</span></a></h3><p>在这种方法中，我们有多个数据库，所以我们需要在Spring Boot应用程序中声明多个数据源。我们可以在单独的租户文件中配置_DataSources_。因此，我们在_allTenants_目录中创建_tenant_1.properties_文件，并声明租户的数据源：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">name</span><span class="token punctuation">=</span><span class="token value attr-value">tenant_1</span>
<span class="token key attr-name">datasource.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:postgresql://localhost:5432/tenant1</span>
<span class="token key attr-name">datasource.username</span><span class="token punctuation">=</span><span class="token value attr-value">postgres</span>
<span class="token key attr-name">datasource.password</span><span class="token punctuation">=</span><span class="token value attr-value">123456</span>
<span class="token key attr-name">datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">org.postgresql.Driver</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，我们为另一个租户创建_tenant_2.properties_文件：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">name</span><span class="token punctuation">=</span><span class="token value attr-value">tenant_2</span>
<span class="token key attr-name">datasource.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:postgresql://localhost:5432/tenant2</span>
<span class="token key attr-name">datasource.username</span><span class="token punctuation">=</span><span class="token value attr-value">postgres</span>
<span class="token key attr-name">datasource.password</span><span class="token punctuation">=</span><span class="token value attr-value">123456</span>
<span class="token key attr-name">datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">org.postgresql.Driver</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将为每个租户最终得到一个文件：<img src="https://www.baeldung.com/wp-content/uploads/2022/08/tenants.png" alt="img" loading="lazy"></p><h3 id="_5-2-datasource-声明" tabindex="-1"><a class="header-anchor" href="#_5-2-datasource-声明"><span>5.2. _DataSource_声明</span></a></h3><p>现在我们需要<strong>使用_DataSourceBuilder_类读取租户的数据并创建_DataSource_</strong>。此外，我们需要在_AbstractRoutingDataSource_类中设置_DataSources_。让我们添加一个_MultitenantConfiguration_类来做这件事：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MultitenantConfiguration</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${defaultTenant}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> defaultTenant<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;tenants&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;allTenants&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>\`\` resolvedDataSources <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>\`\`<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> propertyFile <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Properties</span> tenantProperties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">DataSourceBuilder</span> dataSourceBuilder <span class="token operator">=</span> <span class="token class-name">DataSourceBuilder</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                tenantProperties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>propertyFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">String</span> tenantId <span class="token operator">=</span> tenantProperties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                dataSourceBuilder<span class="token punctuation">.</span><span class="token function">driverClassName</span><span class="token punctuation">(</span>tenantProperties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;datasource.driver-class-name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                dataSourceBuilder<span class="token punctuation">.</span><span class="token function">username</span><span class="token punctuation">(</span>tenantProperties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;datasource.username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                dataSourceBuilder<span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span>tenantProperties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;datasource.password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                dataSourceBuilder<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span>tenantProperties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;datasource.url&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                resolvedDataSources<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tenantId<span class="token punctuation">,</span> dataSourceBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> exp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;Problem in tenant datasource:&quot;</span> <span class="token operator">+</span> exp<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">AbstractRoutingDataSource</span> dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MultitenantDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSource<span class="token punctuation">.</span><span class="token function">setDefaultTargetDataSource</span><span class="token punctuation">(</span>resolvedDataSources<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>defaultTenant<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSource<span class="token punctuation">.</span><span class="token function">setTargetDataSources</span><span class="token punctuation">(</span>resolvedDataSources<span class="token punctuation">)</span><span class="token punctuation">;</span>

        dataSource<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> dataSource<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，我们从_allTenants_目录中读取租户的定义，并使用_DataSourceBuilder_类创建_DataSource_ bean。之后，我们需要为_MultitenantDataSource_类设置默认数据源和目标源，分别使用_setDefaultTargetDataSource_和_setTargetDataSources_。我们使用_application.properties_文件中的_defaultTenant_属性将一个租户的名称设置为默认数据源。为了完成数据源的初始化，我们调用_afterPropertiesSet()_方法。现在我们的设置已经准备好了。</p><h2 id="_6-测试" tabindex="-1"><a class="header-anchor" href="#_6-测试"><span>6. 测试</span></a></h2><h3 id="_6-1-为租户创建数据库" tabindex="-1"><a class="header-anchor" href="#_6-1-为租户创建数据库"><span>6.1. 为租户创建数据库</span></a></h3><p>首先，我们需要在_PostgreSQL_中定义两个数据库：<img src="https://www.baeldung.com/wp-content/uploads/2022/08/tenants-db.png" alt="img" loading="lazy"> 之后，我们使用以下脚本在每个数据库中创建一个_employee_表：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> employee <span class="token punctuation">(</span>id int8 generated <span class="token keyword">by</span> <span class="token keyword">default</span> <span class="token keyword">as</span> <span class="token keyword">identity</span><span class="token punctuation">,</span> name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_6-2-示例控制器" tabindex="-1"><a class="header-anchor" href="#_6-2-示例控制器"><span>6.2. 示例控制器</span></a></h3><p>让我们创建一个_EmployeeController_类，用于在请求头中指定的租户中创建并保存_Employee_实体：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@Transactional</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmployeeController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">EmployeeRepository</span> employeeRepository<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;/employee&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span>\` <span class="token function">createEmployee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Employee</span> newEmployee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        newEmployee<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;Baeldung&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        employeeRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>newEmployee<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>newEmployee<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-3-示例请求" tabindex="-1"><a class="header-anchor" href="#_6-3-示例请求"><span>6.3. 示例请求</span></a></h3><p>让我们使用Postman创建一个在租户ID <em>tenant_1</em> 中插入_employee_实体的post请求：<img src="https://www.baeldung.com/wp-content/uploads/2022/08/tenant_1.png" alt="img" loading="lazy"> 此外，我们向_tenant_2_发送请求：检查数据库后，我们发现每个请求都已保存在相关租户的数据库中。</p><h2 id="_7-安全性" tabindex="-1"><a class="header-anchor" href="#_7-安全性"><span>7. 安全性</span></a></h2><p>多租户应保护共享环境中客户的数据。这意味着每个租户只能访问他们的数据。因此，我们需要为租户添加安全性。让我们构建一个系统，用户必须登录应用程序并<strong>获取JWT，然后使用它来证明访问租户的权利。</strong></p><h3 id="_7-1-maven依赖" tabindex="-1"><a class="header-anchor" href="#_7-1-maven依赖"><span>7.1. Maven依赖</span></a></h3><p>让我们首先在_pom.xml_中添加_spring-boot-starter-security_依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>\`\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\`\`\`\`
    \`\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`\`\`org.springframework.boot\`\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`\`\`
    \`\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`\`\`spring-boot-starter-security\`\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`\`\`
\`\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\`\`\`\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，我们需要生成并验证JWT。为此，我们在_pom.xml_中添加_jjwt_：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>\`\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\`\`\`\`
    \`\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`\`\`io.jsonwebtoken\`\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`\`\`
    \`\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`\`\`jjwt-api\`\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`\`\`
    \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\`0.12.3\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\`
\`\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\`\`\`\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-2-安全配置" tabindex="-1"><a class="header-anchor" href="#_7-2-安全配置"><span>7.2. 安全配置</span></a></h3><p>首先，我们需要为租户的用户提供认证能力。为了简单起见，我们在_SecurityConfiguration_类中使用内存中用户声明。从Spring Security 5.7.0-M2开始，类_<strong>WebSecurityConfigurerAdapter</strong><em>被弃用，并鼓励使用基于组件的安全配置。让我们创建一个带有</em><strong>UserDetails</strong>_的bean：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">InMemoryUserDetailsManager</span> <span class="token function">userDetailsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">UserDetails</span> user1 <span class="token operator">=</span> <span class="token class-name">User</span>
      <span class="token punctuation">.</span><span class="token function">withUsername</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">&quot;baeldung&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">&quot;tenant_1&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">UserDetails</span> user2 <span class="token operator">=</span> <span class="token class-name">User</span>
      <span class="token punctuation">.</span><span class="token function">withUsername</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">&quot;baeldung&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">&quot;tenant_2&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">InMemoryUserDetailsManager</span><span class="token punctuation">(</span>user1<span class="token punctuation">,</span> user2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们为两个租户添加了两个用户。此外，我们将租户视为角色。根据上述代码，用户名_user_和_admin_分别可以访问_tenant_1_和_tenant_2_。现在，我们创建一个过滤器用于用户认证。让我们添加_<strong>LoginFilter</strong>_类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginFilter</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractAuthenticationProcessingFilter</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">LoginFilter</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">AuthenticationManager</span> authManager<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AntPathRequestMatcher</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setAuthenticationManager</span><span class="token punctuation">(</span>authManager<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Authentication</span> <span class="token function">attemptAuthentication</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> res<span class="token punctuation">)</span>
      <span class="token keyword">throws</span> <span class="token class-name">AuthenticationException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>

        <span class="token class-name">AccountCredentials</span> creds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
          <span class="token function">readValue</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">AccountCredentials</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token function">getAuthenticationManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticate</span><span class="token punctuation">(</span>
          <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>creds<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            creds<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>_<strong>LoginFilter</strong><em>类扩展了_AbstractAuthenticationProcessingFilter</em>。_AbstractAuthenticationProcessingFilter_拦截请求并尝试使用_attemptAuthentication()<em>方法进行身份验证。在这个方法中，我们将用户凭据映射到_AccountCredentials</em> DTO类，并使用内存认证管理器对用户进行身份验证：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountCredentials</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>

   <span class="token comment">// getter和setter方法</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-3-jwt" tabindex="-1"><a class="header-anchor" href="#_7-3-jwt"><span>7.3. JWT</span></a></h3><p>现在我们需要生成JWT并添加租户ID。为此，我们覆盖_successfulAuthentication()_方法。在成功认证后执行这个方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">successfulAuthentication</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> res<span class="token punctuation">,</span>
  <span class="token class-name">FilterChain</span> chain<span class="token punctuation">,</span> <span class="token class-name">Authentication</span> auth<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>

    <span class="token class-name">Collection</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GrantedAuthority</span><span class="token punctuation">&gt;</span></span>\` authorities <span class="token operator">=</span> auth<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> tenant <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">GrantedAuthority</span> gauth <span class="token operator">:</span> authorities<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tenant <span class="token operator">=</span> gauth<span class="token punctuation">.</span><span class="token function">getAuthority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">AuthenticationService</span><span class="token punctuation">.</span><span class="token function">addToken</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> auth<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tenant<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据上述代码，我们获取用户的角色并将其添加到JWT中。为此，我们创建了_AuthenticationService_类和_addToken()_方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthenticationService</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token constant">EXPIRATIONTIME</span> <span class="token operator">=</span> <span class="token number">864_000_00</span><span class="token punctuation">;</span> <span class="token comment">// 1天的毫秒数</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SECRETKEY</span> <span class="token operator">=</span> <span class="token string">&quot;q3t6w9zCFJNcQfTjWnq3t6w9zCFJNcQfTjWnZr4u7xADGKaPd&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">SecretKey</span> <span class="token constant">SIGNINGKEY</span> <span class="token operator">=</span> <span class="token class-name">Keys</span><span class="token punctuation">.</span><span class="token function">hmacShaKeyFor</span><span class="token punctuation">(</span><span class="token constant">SECRETKEY</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">PREFIX</span> <span class="token operator">=</span> <span class="token string">&quot;Bearer&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">addToken</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span> res<span class="token punctuation">,</span> <span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> tenant<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> <span class="token class-name">JwtToken</span> <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">subject</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">audience</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tenant<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">issuedAt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">expiration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token constant">EXPIRATIONTIME</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span><span class="token constant">SIGNINGKEY</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        res<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Authorization&quot;</span><span class="token punctuation">,</span> <span class="token constant">PREFIX</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> <span class="token class-name">JwtToken</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>addToken_方法生成了包含租户ID作为_audience_声明的JWT，并将其添加到响应的_Authorization_头中。最后，我们在_SecurityConfiguration_类中添加</em><strong>LoginFilter</strong><em>。正如我们上面提到的关于</em><strong>WebSecurityConfigurerAdapter</strong>_的弃用。通过这种方式，我们将创建一个带有所有配置的bean：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">SecurityFilterChain</span> <span class="token function">filterChain</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">AuthenticationManager</span> authenticationManager <span class="token operator">=</span> <span class="token function">authenticationManager</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span><span class="token function">getSharedObject</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    http
      <span class="token punctuation">.</span><span class="token function">authorizeHttpRequests</span><span class="token punctuation">(</span>authorize <span class="token operator">-&gt;</span>
        authorize<span class="token punctuation">.</span><span class="token function">requestMatchers</span><span class="token punctuation">(</span><span class="token string">&quot;/login&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">sessionManagement</span><span class="token punctuation">(</span>securityContext <span class="token operator">-&gt;</span> securityContext<span class="token punctuation">.</span><span class="token function">sessionCreationPolicy</span><span class="token punctuation">(</span><span class="token class-name">SessionCreationPolicy</span><span class="token punctuation">.</span><span class="token constant">STATELESS</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">addFilterBefore</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoginFilter</span><span class="token punctuation">(</span><span class="token string">&quot;/login&quot;</span><span class="token punctuation">,</span> authenticationManager<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">UsernamePasswordAuthenticationFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">addFilterBefore</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AuthenticationFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">UsernamePasswordAuthenticationFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span>csrf <span class="token operator">-&gt;</span> csrf<span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span>header <span class="token operator">-&gt;</span> header<span class="token punctuation">.</span><span class="token function">frameOptions</span><span class="token punctuation">(</span><span class="token class-name">HeadersConfigurer<span class="token punctuation">.</span>FrameOptionsConfig</span><span class="token operator">::</span><span class="token function">disable</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">httpBasic</span><span class="token punctuation">(</span><span class="token class-name">Customizer</span><span class="token punctuation">.</span><span class="token function">withDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> http<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，我们为在_SecurityContextHolder_类中设置_Authentication_添加_AuthenticationFilter_类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthenticationFilter</span> <span class="token keyword">extends</span> <span class="token class-name">GenericFilterBean</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> res<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span>
      <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>

        <span class="token class-name">Authentication</span> authentication <span class="token operator">=</span> <span class="token class-name">AuthenticationService</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> req<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAuthentication</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>

        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-4-从jwt获取租户id" tabindex="-1"><a class="header-anchor" href="#_7-4-从jwt获取租户id"><span>7.4. 从JWT获取租户ID</span></a></h3><p>让我们修改_TenantFilter_以在_TenantContext_中设置当前租户：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> tenant <span class="token operator">=</span> <span class="token class-name">AuthenticationService</span><span class="token punctuation">.</span><span class="token function">getTenant</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> req<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">TenantContext</span><span class="token punctuation">.</span><span class="token function">setCurrentTenant</span><span class="token punctuation">(</span>tenant<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在这种情况下，我们使用_AuthenticationService_类的_getTenant()_方法从JWT中获取租户ID：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getTenant</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> token <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Authorization&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>token <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">String</span> tenant <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span><span class="token constant">SIGNINGKEY</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">PREFIX</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">getAudience</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> tenant<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-安全性测试" tabindex="-1"><a class="header-anchor" href="#_8-安全性测试"><span>8. 安全性测试</span></a></h2><h3 id="_8-1-jwt生成" tabindex="-1"><a class="header-anchor" href="#_8-1-jwt生成"><span>8.1. JWT生成</span></a></h3><p>让我们为用户名_user_生成JWT。为此，我们将凭据发布到_/login_端点：让我们检查令牌：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ1c2VyIiwiYXVkIjoidGVuYW50XzEiLCJleHAiOjE2NTk2MDk1Njd9.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当我们解码令牌时，我们发现租户ID被设置为_audience_声明：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;sub&quot;</span><span class="token operator">:</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;aud&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;tenant_1&quot;</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;iat&quot;</span><span class="token operator">:</span> <span class="token number">1705473402</span><span class="token punctuation">,</span>
  <span class="token property">&quot;exp&quot;</span><span class="token operator">:</span> <span class="token number">1705559802</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-2-示例请求" tabindex="-1"><a class="header-anchor" href="#_8-2-示例请求"><span>8.2. 示例请求</span></a></h3><p>让我们使用生成的令牌创建一个插入_employee_实体的post请求：我们把生成的令牌设置在_Authorization_头中。租户ID已从令牌中提取并设置在_TenantContext_中。</p><h2 id="_9-结论" tabindex="-1"><a class="header-anchor" href="#_9-结论"><span>9. 结论</span></a></h2><p>在本文中，我们查看了不同的多租户模型。我们描述了在Spring Boot应用程序中添加多租户所需的类，使用Spring Data JPA针对独立数据库、共享数据库和独立架构模型。然后，我们为在PostgreSQL数据库中测试多租户设置了所需的环境</p>`,88),o=[p];function c(l,i){return a(),s("div",null,o)}const k=n(e,[["render",c],["__file","2024-07-15-Multitenancy With Spring Data JPA.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-15/2024-07-15-Multitenancy%20With%20Spring%20Data%20JPA.html","title":"Spring Data JPA 多租户支持","lang":"zh-CN","frontmatter":{"date":"2022-08-01T00:00:00.000Z","category":["Spring Data JPA","多租户"],"tag":["Spring Boot","多租户架构","数据库"],"head":[["meta",{"name":"keywords","content":"Spring Data JPA, 多租户, 数据库架构"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-15/2024-07-15-Multitenancy%20With%20Spring%20Data%20JPA.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Spring Data JPA 多租户支持"}],["meta",{"property":"og:description","content":"Spring Data JPA 多租户支持 多租户是指一个软件应用实例服务于多个租户或客户。它确保了租户之间所需的隔离程度，使得租户使用的数据和资源与其他租户分离。本教程将展示如何在Spring Boot应用程序中使用Spring Data JPA配置多租户，同时使用JWT为租户添加安全性。 2. 多租户模型 多租户系统主要有三种方法： 独立数据库 共..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.baeldung.com/wp-content/uploads/2022/08/database_per_tenant.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-15T12:09:03.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Spring Boot"}],["meta",{"property":"article:tag","content":"多租户架构"}],["meta",{"property":"article:tag","content":"数据库"}],["meta",{"property":"article:published_time","content":"2022-08-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-15T12:09:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring Data JPA 多租户支持\\",\\"image\\":[\\"https://www.baeldung.com/wp-content/uploads/2022/08/database_per_tenant.png\\",\\"https://www.baeldung.com/wp-content/uploads/2022/08/separate_schema.png\\",\\"https://www.baeldung.com/wp-content/uploads/2022/08/shareddatabase.png\\",\\"https://www.baeldung.com/wp-content/uploads/2022/08/tenants.png\\",\\"https://www.baeldung.com/wp-content/uploads/2022/08/tenants-db.png\\",\\"https://www.baeldung.com/wp-content/uploads/2022/08/tenant_1.png\\"],\\"datePublished\\":\\"2022-08-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-15T12:09:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Spring Data JPA 多租户支持 多租户是指一个软件应用实例服务于多个租户或客户。它确保了租户之间所需的隔离程度，使得租户使用的数据和资源与其他租户分离。本教程将展示如何在Spring Boot应用程序中使用Spring Data JPA配置多租户，同时使用JWT为租户添加安全性。 2. 多租户模型 多租户系统主要有三种方法： 独立数据库 共..."},"headers":[{"level":2,"title":"2. 多租户模型","slug":"_2-多租户模型","link":"#_2-多租户模型","children":[{"level":3,"title":"2.1. 独立数据库","slug":"_2-1-独立数据库","link":"#_2-1-独立数据库","children":[]},{"level":3,"title":"2.2. 共享数据库和独立架构","slug":"_2-2-共享数据库和独立架构","link":"#_2-2-共享数据库和独立架构","children":[]},{"level":3,"title":"2.3. 共享数据库和共享架构","slug":"_2-3-共享数据库和共享架构","link":"#_2-3-共享数据库和共享架构","children":[]}]},{"level":2,"title":"3. Maven依赖","slug":"_3-maven依赖","link":"#_3-maven依赖","children":[]},{"level":2,"title":"4. 动态_DataSource_路由","slug":"_4-动态-datasource-路由","link":"#_4-动态-datasource-路由","children":[{"level":3,"title":"4.1. AbstractRoutingDataSource","slug":"_4-1-abstractroutingdatasource","link":"#_4-1-abstractroutingdatasource","children":[]},{"level":3,"title":"4.2. 每个请求设置租户ID","slug":"_4-2-每个请求设置租户id","link":"#_4-2-每个请求设置租户id","children":[]}]},{"level":2,"title":"5. 数据库方法","slug":"_5-数据库方法","link":"#_5-数据库方法","children":[{"level":3,"title":"5.1. 租户声明","slug":"_5-1-租户声明","link":"#_5-1-租户声明","children":[]},{"level":3,"title":"5.2. _DataSource_声明","slug":"_5-2-datasource-声明","link":"#_5-2-datasource-声明","children":[]}]},{"level":2,"title":"6. 测试","slug":"_6-测试","link":"#_6-测试","children":[{"level":3,"title":"6.1. 为租户创建数据库","slug":"_6-1-为租户创建数据库","link":"#_6-1-为租户创建数据库","children":[]},{"level":3,"title":"6.2. 示例控制器","slug":"_6-2-示例控制器","link":"#_6-2-示例控制器","children":[]},{"level":3,"title":"6.3. 示例请求","slug":"_6-3-示例请求","link":"#_6-3-示例请求","children":[]}]},{"level":2,"title":"7. 安全性","slug":"_7-安全性","link":"#_7-安全性","children":[{"level":3,"title":"7.1. Maven依赖","slug":"_7-1-maven依赖","link":"#_7-1-maven依赖","children":[]},{"level":3,"title":"7.2. 安全配置","slug":"_7-2-安全配置","link":"#_7-2-安全配置","children":[]},{"level":3,"title":"7.3. JWT","slug":"_7-3-jwt","link":"#_7-3-jwt","children":[]},{"level":3,"title":"7.4. 从JWT获取租户ID","slug":"_7-4-从jwt获取租户id","link":"#_7-4-从jwt获取租户id","children":[]}]},{"level":2,"title":"8. 安全性测试","slug":"_8-安全性测试","link":"#_8-安全性测试","children":[{"level":3,"title":"8.1. JWT生成","slug":"_8-1-jwt生成","link":"#_8-1-jwt生成","children":[]},{"level":3,"title":"8.2. 示例请求","slug":"_8-2-示例请求","link":"#_8-2-示例请求","children":[]}]},{"level":2,"title":"9. 结论","slug":"_9-结论","link":"#_9-结论","children":[]}],"git":{"createdTime":1721045343000,"updatedTime":1721045343000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":9.16,"words":2749},"filePathRelative":"posts/baeldung/2024-07-15/2024-07-15-Multitenancy With Spring Data JPA.md","localizedDate":"2022年8月1日","excerpt":"\\n<p>多租户是指一个软件应用实例服务于多个租户或客户。它确保了租户之间所需的隔离程度，使得租户使用的数据和资源与其他租户分离。本教程将展示如何在Spring Boot应用程序中使用Spring Data JPA配置多租户，同时使用JWT为租户添加安全性。</p>\\n<h2>2. 多租户模型</h2>\\n<p>多租户系统主要有三种方法：</p>\\n<ul>\\n<li>独立数据库</li>\\n<li>共享数据库和独立架构</li>\\n<li>共享数据库和共享架构</li>\\n</ul>\\n<h3>2.1. 独立数据库</h3>\\n<p>在这种方法中，每个租户的数据保存在独立的数据库实例中，与其他租户隔离。这也被称为“每个租户一个数据库”：<img src=\\"https://www.baeldung.com/wp-content/uploads/2022/08/database_per_tenant.png\\" alt=\\"img\\" loading=\\"lazy\\"></p>","autoDesc":true}');export{k as comp,d as data};
