import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as a,a as n}from"./app-0nXvcScy.js";const i={},s=n('<hr><h1 id="java中按多个分隔符分割字符串" tabindex="-1"><a class="header-anchor" href="#java中按多个分隔符分割字符串"><span>Java中按多个分隔符分割字符串</span></a></h1><h2 id="_1-引言" tabindex="-1"><a class="header-anchor" href="#_1-引言"><span>1. 引言</span></a></h2><p>我们都知道，分割字符串是一个非常常见的任务。然而，我们通常只使用一个分隔符进行分割。</p><p>在本教程中，我们将详细讨论<strong>按多个分隔符分割字符串的不同选项</strong>。</p><p>为了展示下面每种解决方案如何执行分割，我们将使用相同的示例字符串：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>String example = &quot;Mary;Thomas:Jane-Kate&quot;;\nString[] expectedArray = new String[]{&quot;Mary&quot;, &quot;Thomas&quot;, &quot;Jane&quot;, &quot;Kate&quot;};\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-1-正则表达式解决方案" tabindex="-1"><a class="header-anchor" href="#_2-1-正则表达式解决方案"><span>2.1. 正则表达式解决方案</span></a></h3><p>程序员经常使用不同的正则表达式来定义字符串的搜索模式。当涉及到分割字符串时，它们也是非常流行的解决方案。那么，让我们看看如何使用正则表达式在Java中按多个分隔符分割字符串。</p><p>首先，我们不需要添加新的依赖，因为正则表达式在_java.util.regex_包中是可用的。我们只需要定义我们想要分割的输入字符串和一个模式。</p><p>接下来，应用一个模式。<strong>一个模式可以匹配零次或多次。为了按不同的分隔符分割，我们只需要在模式中设置所有的字符。</strong></p><p>我们将编写一个简单的测试来演示这种方法：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>String[] names = example.split(&quot;[;:-]&quot;);\nAssertions.assertEquals(4, names.length);\nAssertions.assertArrayEquals(expectedArray, names);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们定义了一个测试字符串，其中的名字应该按模式中的字符分割。模式本身包含分号、冒号和连字符。当应用于示例字符串时，我们将在数组中得到四个名字。</p><h3 id="_2-2-guava解决方案" tabindex="-1"><a class="header-anchor" href="#_2-2-guava解决方案"><span>2.2. Guava解决方案</span></a></h3><p>Guava也为按多个分隔符分割字符串提供了解决方案。它的解决方案基于_Splitter_类。这个类使用分隔符序列从输入字符串中提取子字符串。我们可以以多种方式定义这个序列：</p><ul><li>作为一个单独的字符</li><li>一个固定字符串</li><li>一个正则表达式</li><li>一个_CharMatcher_实例</li></ul><p>进一步地，_Splitter_类有两种方法来定义分隔符。所以，让我们测试这两种方法。</p><p>首先，我们将添加Guava依赖：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>``&lt;dependency&gt;``\n    ``&lt;groupId&gt;``com.google.guava``&lt;/groupId&gt;``\n    ``&lt;artifactId&gt;``guava``&lt;/artifactId&gt;``\n    ``&lt;version&gt;``32.1.3-jre``&lt;/version&gt;``\n``&lt;/dependency&gt;``\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们将从_on_方法开始：<em>public static Splitter on(Pattern separatorPattern)</em></p><p>它采用用于定义分割的分隔符模式的模式。首先，我们将定义分隔符的组合并编译模式。之后，我们可以分割字符串。</p><p>在我们的示例中，我们将使用正则表达式来指定分隔符：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Iterable```&lt;String&gt;``` names = Splitter.on(Pattern.compile(&quot;[;:-])).split(example);\nAssertions.assertEquals(4, Iterators.size(names.iterator()));\nAssertions.assertIterableEquals(Arrays.asList(expectedArray), names);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另一种方法是_onPattern_方法：<em>public static Splitter onPattern(String separatorPattern)</em></p><p>这与前面的方法的区别在于_onPattern_方法以字符串形式接受模式。不需要像_on_方法那样编译。我们将为测试_onPattern_方法定义相同的分隔符组合：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Iterable```&lt;String&gt;``` names = Splitter.onPattern(&quot;[;:-]&quot;).split(example);\nAssertions.assertEquals(4, Iterators.size(names.iterator()));\nAssertions.assertIterableEquals(Arrays.asList(expectedArray), names);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在两种测试中，我们都成功地分割了字符串并得到了包含四个名字的数组。</p><p>由于我们正在使用多个分隔符分割输入字符串，我们还可以使用_CharMatcher_类的_anyOf_方法：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Iterable```&lt;String&gt;``` names = Splitter.on(CharMatcher.anyOf(&quot;;:-&quot;)).split(example);\nAssertions.assertEquals(4, Iterators.size(names.iterator()));\nAssertions.assertIterableEquals(Arrays.asList(expectedArray), names);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个选项只与_Splitter_类的_on_方法一起使用。结果与前两个测试相同。</p><h3 id="_2-3-apache-commons解决方案" tabindex="-1"><a class="header-anchor" href="#_2-3-apache-commons解决方案"><span>2.3. Apache Commons解决方案</span></a></h3><p>我们将讨论的最后一个选项可在Apache Commons Lang 3库中找到。</p><p>我们将从我们的_pom.xml_文件中添加Apache Commons Lang依赖开始：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>``&lt;dependency&gt;``\n    ``&lt;groupId&gt;``org.apache.commons``&lt;/groupId&gt;``\n    ``&lt;artifactId&gt;``commons-lang3``&lt;/artifactId&gt;``\n    ``&lt;version&gt;``3.13.0``&lt;/version&gt;``\n``&lt;/dependency&gt;``\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们将使用_StringUtils_类的_split_方法：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>String[] names = StringUtils.split(example, &quot;;:-&quot;);\nAssertions.assertEquals(4, names.length);\nAssertions.assertArrayEquals(expectedArray, names);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们只需要定义我们将用于分割字符串的所有字符。调用_split_方法将把_example_字符串分割成四个名字。</p><h2 id="_3-结论" tabindex="-1"><a class="header-anchor" href="#_3-结论"><span>3. 结论</span></a></h2><p>在本文中，我们看到了按多个分隔符分割输入字符串的不同选项。首先，我们讨论了基于正则表达式和纯Java的解决方案。后来，我们展示了Guava中可用的不同选项。最后，我们用基于Apache Commons Lang 3库的解决方案结束了我们的示例。</p><p>如常，这些示例的代码可以在GitHub上找到。</p>',41),r=[s];function l(d,p){return a(),t("div",null,r)}const m=e(i,[["render",l],["__file","2024-07-24-Splitting a Java String by Multiple Delimiters.html.vue"]]),u=JSON.parse('{"path":"/posts/baeldung/2024-07-24/2024-07-24-Splitting%20a%20Java%20String%20by%20Multiple%20Delimiters.html","title":"Java中按多个分隔符分割字符串","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","String Manipulation"],"tag":["Java","String","Split"],"head":[["meta",{"name":"keywords","content":"Java, String, Split, Multiple Delimiters, Regular Expressions, Guava, Apache Commons"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-24/2024-07-24-Splitting%20a%20Java%20String%20by%20Multiple%20Delimiters.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Java中按多个分隔符分割字符串"}],["meta",{"property":"og:description","content":"Java中按多个分隔符分割字符串 1. 引言 我们都知道，分割字符串是一个非常常见的任务。然而，我们通常只使用一个分隔符进行分割。 在本教程中，我们将详细讨论按多个分隔符分割字符串的不同选项。 为了展示下面每种解决方案如何执行分割，我们将使用相同的示例字符串： 2.1. 正则表达式解决方案 程序员经常使用不同的正则表达式来定义字符串的搜索模式。当涉及到..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-24T21:51:55.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"String"}],["meta",{"property":"article:tag","content":"Split"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-24T21:51:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java中按多个分隔符分割字符串\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-24T21:51:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Java中按多个分隔符分割字符串 1. 引言 我们都知道，分割字符串是一个非常常见的任务。然而，我们通常只使用一个分隔符进行分割。 在本教程中，我们将详细讨论按多个分隔符分割字符串的不同选项。 为了展示下面每种解决方案如何执行分割，我们将使用相同的示例字符串： 2.1. 正则表达式解决方案 程序员经常使用不同的正则表达式来定义字符串的搜索模式。当涉及到..."},"headers":[{"level":2,"title":"1. 引言","slug":"_1-引言","link":"#_1-引言","children":[{"level":3,"title":"2.1. 正则表达式解决方案","slug":"_2-1-正则表达式解决方案","link":"#_2-1-正则表达式解决方案","children":[]},{"level":3,"title":"2.2. Guava解决方案","slug":"_2-2-guava解决方案","link":"#_2-2-guava解决方案","children":[]},{"level":3,"title":"2.3. Apache Commons解决方案","slug":"_2-3-apache-commons解决方案","link":"#_2-3-apache-commons解决方案","children":[]}]},{"level":2,"title":"3. 结论","slug":"_3-结论","link":"#_3-结论","children":[]}],"git":{"createdTime":1721857915000,"updatedTime":1721857915000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":3.73,"words":1118},"filePathRelative":"posts/baeldung/2024-07-24/2024-07-24-Splitting a Java String by Multiple Delimiters.md","localizedDate":"2022年4月1日","excerpt":"<hr>\\n<h1>Java中按多个分隔符分割字符串</h1>\\n<h2>1. 引言</h2>\\n<p>我们都知道，分割字符串是一个非常常见的任务。然而，我们通常只使用一个分隔符进行分割。</p>\\n<p>在本教程中，我们将详细讨论<strong>按多个分隔符分割字符串的不同选项</strong>。</p>\\n<p>为了展示下面每种解决方案如何执行分割，我们将使用相同的示例字符串：</p>\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code>String example = \\"Mary;Thomas:Jane-Kate\\";\\nString[] expectedArray = new String[]{\\"Mary\\", \\"Thomas\\", \\"Jane\\", \\"Kate\\"};\\n</code></pre></div>","autoDesc":true}');export{m as comp,u as data};
