import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as n,a as s}from"./app-CbPcg273.js";const t={},r=s(`<hr><h1 id="jmx-端口" tabindex="-1"><a class="header-anchor" href="#jmx-端口"><span>JMX 端口</span></a></h1><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p>在本教程中，我们将解释为什么 JMX 在启动时会打开三个端口。此外，我们将展示如何在 Java 中启动 JMX。之后，我们将展示如何限制打开的端口数量。</p><h2 id="_2-jmx-定义" tabindex="-1"><a class="header-anchor" href="#_2-jmx-定义"><span>2. JMX 定义</span></a></h2><p>首先让我们定义 JMX 框架是什么。<strong>Java 管理扩展 (JMX)</strong> 框架为管理 Java 应用程序提供了一个可配置、可扩展和可靠的基础设施。此外，它定义了一个 MBean 概念，用于应用程序的实时管理。该框架允许本地或远程管理应用程序。</p><h2 id="_3-在-java-中启用-jmx" tabindex="-1"><a class="header-anchor" href="#_3-在-java-中启用-jmx"><span>3. 在 Java 中启用 JMX</span></a></h2><p>现在让我们看看如何启用 JMX。<strong>对于 Java 版本 1.5 及更早版本，有一个系统属性</strong> <em><strong>com.sun.management.jmxremote</strong></em>。使用该属性启动的应用程序可以从本地和远程连接到 JConsole。另一方面，没有该属性启动的应用程序在 JConsole 中不可见。</p><p><strong>然而，从 Java 6 及更高版本开始，该参数是不必要的</strong>。应用程序在启动后自动可用于管理。此外，默认配置会自动分配端口并仅在本地公开。</p><p>在我们的示例中，我们将使用 Java 6 或更高版本。首先，让我们创建一个带有无限循环的类。该类什么也不做，但它允许我们检查哪些端口被打开：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JMXConfiguration</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 确保应用程序不会终止</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们将编译该类并启动它：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">java</span> com.baeldung.jmx.JMXConfiguration
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>之后，我们可以<strong>检查分配给进程的 pid 并检查进程打开的端口</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">netstat</span> <span class="token parameter variable">-ao</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token variable"><span class="token variable">\`</span><span class="token operator">&lt;</span>pid<span class="token operator">&gt;</span><span class="token variable">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果，我们将获得应用程序公开的端口列表：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Active Connections
Proto  Local Address          Foreign Address        State           PID
TCP    127.0.0.1:55846        wujek:55845            ESTABLISHED     2604
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，<strong>在重启的情况下，端口将更改</strong>。它是随机分配的。自 Java 6 以来，此功能自动公开应用程序以供 Java Attach API 使用。换句话说，它自动公开应用程序以通过本地进程连接到 JConsole。</p><p>现在，让我们通过向 JVM 提供选项来启用远程连接：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token parameter variable">-Dcom.sun.management.jmxremote</span><span class="token operator">=</span>true
<span class="token parameter variable">-Dcom.sun.management.jmxremote.port</span><span class="token operator">=</span><span class="token number">1234</span>
<span class="token parameter variable">-Dcom.sun.management.jmxremote.authenticate</span><span class="token operator">=</span>false
<span class="token parameter variable">-Dcom.sun.management.jmxremote.ssl</span><span class="token operator">=</span>false
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>端口号是我们必须提供的强制性参数，以便公开 JMX 进行远程连接。我们仅出于测试目的禁用了身份验证和 SSL。</p><p>现在，<em>netstat</em> 命令返回：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Proto  Local Address    Foreign Address State       PID
TCP    0.0.0.0:1234     wujek:0         LISTENING   11088
TCP    0.0.0.0:58738    wujek:0         LISTENING   11088
TCP    0.0.0.0:58739    wujek:0         LISTENING   11088
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如我们所看到的，应用程序公开了三个端口。RMI/JMX 公开了两个端口。第三个是一个随机端口，用于本地连接。</p><h2 id="_5-限制打开的端口数量" tabindex="-1"><a class="header-anchor" href="#_5-限制打开的端口数量"><span>5. 限制打开的端口数量</span></a></h2><p>首先，我们可以使用 <em>-XX:+DisableAttachMechanism</em> 选项禁用从 JConsole 公开应用程序的本地连接：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">java</span> <span class="token parameter variable">-XX:+DisableAttachMechanism</span> com.baeldung.jmx.JMXConfiguration
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>之后，应用程序不公开任何 JMX/RMI 端口。</strong></p><p>此外，从 JDK 16 开始，我们可以设置本地端口号：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">java</span>
  <span class="token parameter variable">-Dcom.sun.management.jmxremote</span><span class="token operator">=</span>true
  <span class="token parameter variable">-Dcom.sun.management.jmxremote.local.port</span><span class="token operator">=</span><span class="token number">1235</span>
  com.baeldung.jmx.JMXConfiguration
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在让我们更改配置并尝试远程端口。</p><p>还有一个额外的选项 <em>-Dcom.sun.management.jmxremote.rmi.port=1234</em>，允许我们将 RMI 端口设置为与 JMX 端口相同的值。现在，完整的命令是：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">java</span>
  <span class="token parameter variable">-Dcom.sun.management.jmxremote</span><span class="token operator">=</span>true
  <span class="token parameter variable">-Dcom.sun.management.jmxremote.port</span><span class="token operator">=</span><span class="token number">1234</span>
  <span class="token parameter variable">-Dcom.sun.management.jmxremote.rmi.port</span><span class="token operator">=</span><span class="token number">1234</span>
  <span class="token parameter variable">-Dcom.sun.management.jmxremote.local.port</span><span class="token operator">=</span><span class="token number">1235</span>
  <span class="token parameter variable">-Dcom.sun.management.jmxremote.authenticate</span><span class="token operator">=</span>false
  <span class="token parameter variable">-Dcom.sun.management.jmxremote.ssl</span><span class="token operator">=</span>false
  com.baeldung.jmx.JMXConfiguration
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后，<em>netstat</em> 命令返回：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Proto  Local Address    Foreign Address State       PID
TCP    0.0.0.0:1234     wujek:0         LISTENING   19504
TCP    0.0.0.0:1235     wujek:0         LISTENING   19504
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是说，应用程序只公开了两个端口，一个用于 JMX/RMI 远程连接，一个用于本地连接。这样，我们可以完全控制公开的端口并避免与其他进程公开的端口发生冲突。</p><p>然而，当我们启用远程连接并禁用附加机制时：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">java</span>
  <span class="token parameter variable">-XX:+DisableAttachMechanism</span>
  <span class="token parameter variable">-Dcom.sun.management.jmxremote</span><span class="token operator">=</span>true
  <span class="token parameter variable">-Dcom.sun.management.jmxremote.port</span><span class="token operator">=</span><span class="token number">1234</span>
  <span class="token parameter variable">-Dcom.sun.management.jmxremote.rmi.port</span><span class="token operator">=</span><span class="token number">1234</span>
  <span class="token parameter variable">-Dcom.sun.management.jmxremote.authenticate</span><span class="token operator">=</span>false
  <span class="token parameter variable">-Dcom.sun.management.jmxremote.ssl</span><span class="token operator">=</span>false
  com.baeldung.jmx.JMXConfiguration
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，应用程序仍然公开两个端口：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Proto Local Address     Foreign Address     State       PID
TCP   0.0.0.0:1234      wujek:0             LISTENING   9856
TCP   0.0.0.0:60565     wujek:0             LISTENING   9856
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-结论" tabindex="-1"><a class="header-anchor" href="#_6-结论"><span>6. 结论</span></a></h2><p>在这篇简短的文章中，我们解释了如何在 Java 中启动 JMX。然后，我们展示了 JMX 在启动时打开哪些端口。最后，我们展示了如何限制 JMX 打开的端口数量。</p><p>一如既往，示例的源代码可以在 GitHub 上找到。</p>`,43),i=[r];function l(o,p){return n(),e("div",null,i)}const m=a(t,[["render",l],["__file","2024-07-23-JMX Ports.html.vue"]]),u=JSON.parse('{"path":"/posts/baeldung/2024-07-23/2024-07-23-JMX%20Ports.html","title":"JMX 端口","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","JMX"],"tag":["JMX","Java","端口"],"head":[["meta",{"name":"keywords","content":"JMX, Java, 端口"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-23/2024-07-23-JMX%20Ports.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"JMX 端口"}],["meta",{"property":"og:description","content":"JMX 端口 1. 概述 在本教程中，我们将解释为什么 JMX 在启动时会打开三个端口。此外，我们将展示如何在 Java 中启动 JMX。之后，我们将展示如何限制打开的端口数量。 2. JMX 定义 首先让我们定义 JMX 框架是什么。Java 管理扩展 (JMX) 框架为管理 Java 应用程序提供了一个可配置、可扩展和可靠的基础设施。此外，它定义了..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-23T18:48:52.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"JMX"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"端口"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-23T18:48:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JMX 端口\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-23T18:48:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"JMX 端口 1. 概述 在本教程中，我们将解释为什么 JMX 在启动时会打开三个端口。此外，我们将展示如何在 Java 中启动 JMX。之后，我们将展示如何限制打开的端口数量。 2. JMX 定义 首先让我们定义 JMX 框架是什么。Java 管理扩展 (JMX) 框架为管理 Java 应用程序提供了一个可配置、可扩展和可靠的基础设施。此外，它定义了..."},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. JMX 定义","slug":"_2-jmx-定义","link":"#_2-jmx-定义","children":[]},{"level":2,"title":"3. 在 Java 中启用 JMX","slug":"_3-在-java-中启用-jmx","link":"#_3-在-java-中启用-jmx","children":[]},{"level":2,"title":"5. 限制打开的端口数量","slug":"_5-限制打开的端口数量","link":"#_5-限制打开的端口数量","children":[]},{"level":2,"title":"6. 结论","slug":"_6-结论","link":"#_6-结论","children":[]}],"git":{"createdTime":1721760532000,"updatedTime":1721760532000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":3.63,"words":1090},"filePathRelative":"posts/baeldung/2024-07-23/2024-07-23-JMX Ports.md","localizedDate":"2022年4月1日","excerpt":"<hr>\\n<h1>JMX 端口</h1>\\n<h2>1. 概述</h2>\\n<p>在本教程中，我们将解释为什么 JMX 在启动时会打开三个端口。此外，我们将展示如何在 Java 中启动 JMX。之后，我们将展示如何限制打开的端口数量。</p>\\n<h2>2. JMX 定义</h2>\\n<p>首先让我们定义 JMX 框架是什么。<strong>Java 管理扩展 (JMX)</strong> 框架为管理 Java 应用程序提供了一个可配置、可扩展和可靠的基础设施。此外，它定义了一个 MBean 概念，用于应用程序的实时管理。该框架允许本地或远程管理应用程序。</p>\\n<h2>3. 在 Java 中启用 JMX</h2>","autoDesc":true}');export{m as comp,u as data};
