import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-CbPcg273.js";const p={},o=t(`<hr><h1 id="bean-validation中的约束组合" tabindex="-1"><a class="header-anchor" href="#bean-validation中的约束组合"><span>Bean Validation中的约束组合</span></a></h1><p>在本教程中，我们将讨论Bean Validation的约束组合。</p><p><strong>将多个约束组合在一个自定义注解下可以减少代码重复并提高可读性</strong>。我们将看到如何创建组合约束以及如何根据我们的需求进行自定义。</p><p>对于代码示例，我们将使用与Java Bean Validation基础相同的依赖项。</p><h2 id="_2-理解问题" tabindex="-1"><a class="header-anchor" href="#_2-理解问题"><span>2. 理解问题</span></a></h2><p>首先，让我们熟悉数据模型。我们将使用_Account_类作为本文大多数示例的基础：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@NotNull</span>
    <span class="token annotation punctuation">@Pattern</span><span class="token punctuation">(</span>regexp <span class="token operator">=</span> <span class="token string">&quot;.*\\\\d.*&quot;</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">&quot;必须包含至少一个数字字符&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Length</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">&quot;必须有6到32个字符&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@NotNull</span>
    <span class="token annotation punctuation">@Pattern</span><span class="token punctuation">(</span>regexp <span class="token operator">=</span> <span class="token string">&quot;.*\\\\d.*&quot;</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">&quot;必须包含至少一个数字字符&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Length</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">&quot;必须有6到32个字符&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> nickname<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@NotNull</span>
    <span class="token annotation punctuation">@Pattern</span><span class="token punctuation">(</span>regexp <span class="token operator">=</span> <span class="token string">&quot;.*\\\\d.*&quot;</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">&quot;必须包含至少一个数字字符&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Length</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">&quot;必须有6到32个字符&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>

    <span class="token comment">// getters and setters</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以注意到，对于这三个字段，重复了_@NotNull, @Pattern,_ 和 <em>@Length</em> 约束组。</p><p><strong>此外，如果这些字段中的一个出现在不同层的不同类中，约束应该匹配——导致更多的代码重复</strong>。</p><p>例如，我们可以想象在DTO对象和_@Entity_模型中都有_username_字段。</p><h2 id="_3-创建组合约束" tabindex="-1"><a class="header-anchor" href="#_3-创建组合约束"><span>3. 创建组合约束</span></a></h2><p>我们可以通过将三个约束组合在一个合适名称的自定义注解下，避免代码重复：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@NotNull</span>
<span class="token annotation punctuation">@Pattern</span><span class="token punctuation">(</span>regexp <span class="token operator">=</span> <span class="token string">&quot;.*\\\\d.*&quot;</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">&quot;必须包含至少一个数字字符&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Length</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">&quot;必须有6到32个字符&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token constant">METHOD</span><span class="token punctuation">,</span> <span class="token constant">FIELD</span><span class="token punctuation">,</span> <span class="token constant">ANNOTATION_TYPE</span><span class="token punctuation">,</span> <span class="token constant">CONSTRUCTOR</span><span class="token punctuation">,</span> <span class="token constant">PARAMETER</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Constraint</span><span class="token punctuation">(</span>validatedBy <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">ValidAlphanumeric</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> <span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;字段应具有有效长度并包含数字字符。&quot;</span><span class="token punctuation">;</span>

    <span class="token class-name">Class</span>\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span>\`\`\`\`<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">groups</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token class-name">Class</span>\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Payload</span><span class="token punctuation">&gt;</span></span>\`\`\`\`<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，我们现在可以使用_@ValidAlphanumeric_来验证_Account_字段：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@ValidAlphanumeric</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@ValidAlphanumeric</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@ValidAlphanumeric</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> nickname<span class="token punctuation">;</span>

    <span class="token comment">// getters and setters</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果，我们可以测试_@ValidAlphanumeric_注解，并期望违反的约束数量与违反的约束一样多。</p><p>例如，如果我们将_username_设置为_“john”，_我们应该期望有两个违规，因为它既太短又没有包含数字字符：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenUsernameIsInvalid_validationShouldReturnTwoViolations</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Account</span> account <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    account<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">&quot;valid_password123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    account<span class="token punctuation">.</span><span class="token function">setNickname</span><span class="token punctuation">(</span><span class="token string">&quot;valid_nickname123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    account<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;john&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Set</span>\`\`\`<span class="token operator">&lt;</span><span class="token class-name">ConstraintViolation</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Account</span><span class="token punctuation">&gt;</span></span>\`\`\`<span class="token operator">&gt;</span> violations <span class="token operator">=</span> validator<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">assertThat</span><span class="token punctuation">(</span>violations<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasSize</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-使用-reportassingleviolation" tabindex="-1"><a class="header-anchor" href="#_4-使用-reportassingleviolation"><span>4. 使用_@ReportAsSingleViolation_</span></a></h2><p>另一方面，<strong>我们可能希望验证返回整个组的单个_ConstraintViolation_</strong>。</p><p>为了实现这一点，我们必须用_@ReportAsSingleViolation_注解我们的组合约束：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@NotNull</span>
<span class="token annotation punctuation">@Pattern</span><span class="token punctuation">(</span>regexp <span class="token operator">=</span> <span class="token string">&quot;.*\\\\d.*&quot;</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">&quot;必须包含至少一个数字字符&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Length</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">&quot;必须有6到32个字符&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token constant">METHOD</span><span class="token punctuation">,</span> <span class="token constant">FIELD</span><span class="token punctuation">,</span> <span class="token constant">ANNOTATION_TYPE</span><span class="token punctuation">,</span> <span class="token constant">CONSTRUCTOR</span><span class="token punctuation">,</span> <span class="token constant">PARAMETER</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Constraint</span><span class="token punctuation">(</span>validatedBy <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ReportAsSingleViolation</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">ValidAlphanumericWithSingleViolation</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> <span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;字段应具有有效长度并包含数字字符。&quot;</span><span class="token punctuation">;</span>

    <span class="token class-name">Class</span>\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span>\`\`\`\`<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">groups</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token class-name">Class</span>\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Payload</span><span class="token punctuation">&gt;</span></span>\`\`\`\`<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后，我们可以使用_password_字段测试我们的新注解，并期望单个违规：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenPasswordIsInvalid_validationShouldReturnSingleViolation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Account</span> account <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    account<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;valid_username123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    account<span class="token punctuation">.</span><span class="token function">setNickname</span><span class="token punctuation">(</span><span class="token string">&quot;valid_nickname123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    account<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">&quot;john&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Set</span>\`\`\`<span class="token operator">&lt;</span><span class="token class-name">ConstraintViolation</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Account</span><span class="token punctuation">&gt;</span></span>\`\`\`<span class="token operator">&gt;</span> violations <span class="token operator">=</span> validator<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">assertThat</span><span class="token punctuation">(</span>violations<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasSize</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-布尔约束组合" tabindex="-1"><a class="header-anchor" href="#_5-布尔约束组合"><span>5. 布尔约束组合</span></a></h2><p>到目前为止，只有当所有组合约束都有效时，验证才会通过。这是由于**_ConstraintComposition_的值默认为** <em><strong>CompositionType.AND</strong></em>。</p><p>然而，如果我们想要检查至少有一个有效的约束，我们可以改变这种行为。</p><p>为了实现这一点，我们需要将_ConstraintComposition_切换为_CompositionType._ <em>OR</em>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Pattern</span><span class="token punctuation">(</span>regexp <span class="token operator">=</span> <span class="token string">&quot;.*\\\\d.*&quot;</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">&quot;必须包含至少一个数字字符&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Length</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">&quot;必须有6到32个字符&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token constant">METHOD</span><span class="token punctuation">,</span> <span class="token constant">FIELD</span><span class="token punctuation">,</span> <span class="token constant">ANNOTATION_TYPE</span><span class="token punctuation">,</span> <span class="token constant">CONSTRUCTOR</span><span class="token punctuation">,</span> <span class="token constant">PARAMETER</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Constraint</span><span class="token punctuation">(</span>validatedBy <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ConstraintComposition</span><span class="token punctuation">(</span><span class="token class-name">CompositionType</span><span class="token punctuation">.</span><span class="token constant">OR</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">ValidLengthOrNumericCharacter</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> <span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;字段应具有有效长度或包含数字字符。&quot;</span><span class="token punctuation">;</span>

    <span class="token class-name">Class</span>\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span>\`\`\`\`<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">groups</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token class-name">Class</span>\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Payload</span><span class="token punctuation">&gt;</span></span>\`\`\`\`<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如，给定一个太短但至少有一个数字字符的值，应该没有违规。</p><p>让我们使用模型中的_nickname_字段测试这个新注解：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenNicknameIsTooShortButContainsNumericCharacter_validationShouldPass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Account</span> account <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    account<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;valid_username123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    account<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">&quot;valid_password123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    account<span class="token punctuation">.</span><span class="token function">setNickname</span><span class="token punctuation">(</span><span class="token string">&quot;doe1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Set</span>\`\`\`<span class="token operator">&lt;</span><span class="token class-name">ConstraintViolation</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Account</span><span class="token punctuation">&gt;</span></span>\`\`\`<span class="token operator">&gt;</span> violations <span class="token operator">=</span> validator<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">assertThat</span><span class="token punctuation">(</span>violations<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类似地，我们可以使用_CompositionType._ <em>ALL_FALSE</em> 如果我们想确保约束失败。</p><h2 id="_6-使用组合约束进行方法验证" tabindex="-1"><a class="header-anchor" href="#_6-使用组合约束进行方法验证"><span>6. 使用组合约束进行方法验证</span></a></h2><p>此外，我们可以使用组合约束作为方法约束。</p><p>为了验证方法的返回值，我们只需要将_@SupportedValidationTarget(ValidationTarget.ANNOTATED_ELEMENT)_添加到组合约束中：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@NotNull</span>
<span class="token annotation punctuation">@Pattern</span><span class="token punctuation">(</span>regexp <span class="token operator">=</span> <span class="token string">&quot;.*\\\\d.*&quot;</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">&quot;必须包含至少一个数字字符&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Length</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">&quot;必须有6到32个字符&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token constant">METHOD</span><span class="token punctuation">,</span> <span class="token constant">FIELD</span><span class="token punctuation">,</span> <span class="token constant">ANNOTATION_TYPE</span><span class="token punctuation">,</span> <span class="token constant">CONSTRUCTOR</span><span class="token punctuation">,</span> <span class="token constant">PARAMETER</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Constraint</span><span class="token punctuation">(</span>validatedBy <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SupportedValidationTarget</span><span class="token punctuation">(</span><span class="token class-name">ValidationTarget</span><span class="token punctuation">.</span><span class="token constant">ANNOTATED_ELEMENT</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">AlphanumericReturnValue</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> <span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;方法返回值应具有有效长度并包含数字字符。&quot;</span><span class="token punctuation">;</span>

    <span class="token class-name">Class</span>\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span>\`\`\`\`<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">groups</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token class-name">Class</span>\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Payload</span><span class="token punctuation">&gt;</span></span>\`\`\`\`<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了举例说明，我们将使用_@AlphanumericReturnValue_注解的_getAnInvalidAlphanumericValue_方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Validated</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@AlphanumericReturnValue</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getAnInvalidAlphanumericValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;john&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，让我们调用这个方法并期望抛出_ConstraintViolationException_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenMethodReturnValuesIsInvalid_validationShouldFail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertThatThrownBy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> accountService<span class="token punctuation">.</span><span class="token function">getAnInvalidAlphanumericValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">isInstanceOf</span><span class="token punctuation">(</span><span class="token class-name">ConstraintViolationException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">hasMessageContaining</span><span class="token punctuation">(</span><span class="token string">&quot;必须包含至少一个数字字符&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">hasMessageContaining</span><span class="token punctuation">(</span><span class="token string">&quot;必须有6到32个字符&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-结论" tabindex="-1"><a class="header-anchor" href="#_7-结论"><span>7. 结论</span></a></h2><p>在本文中，我们看到了如何使用组合约束避免代码重复。</p><p>之后，我们学习了如何自定义组合约束以使用布尔逻辑进行验证，返回单个约束违规，并应用于方法返回值。</p><p>如往常一样，源代码可在GitHub上获取。</p>`,46),e=[o];function c(i,l){return s(),a("div",null,e)}const r=n(p,[["render",c],["__file","2024-07-18-Constraint Composition with Bean Validation.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-18/2024-07-18-Constraint%20Composition%20with%20Bean%20Validation.html","title":"Bean Validation中的约束组合","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","Spring"],"tag":["Bean Validation","Constraint Composition"],"head":[["meta",{"name":"keywords","content":"Java Bean Validation, Constraint Composition, Custom Annotation"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-18/2024-07-18-Constraint%20Composition%20with%20Bean%20Validation.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Bean Validation中的约束组合"}],["meta",{"property":"og:description","content":"Bean Validation中的约束组合 在本教程中，我们将讨论Bean Validation的约束组合。 将多个约束组合在一个自定义注解下可以减少代码重复并提高可读性。我们将看到如何创建组合约束以及如何根据我们的需求进行自定义。 对于代码示例，我们将使用与Java Bean Validation基础相同的依赖项。 2. 理解问题 首先，让我们熟悉数..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-18T15:32:41.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Bean Validation"}],["meta",{"property":"article:tag","content":"Constraint Composition"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-18T15:32:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Bean Validation中的约束组合\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-18T15:32:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Bean Validation中的约束组合 在本教程中，我们将讨论Bean Validation的约束组合。 将多个约束组合在一个自定义注解下可以减少代码重复并提高可读性。我们将看到如何创建组合约束以及如何根据我们的需求进行自定义。 对于代码示例，我们将使用与Java Bean Validation基础相同的依赖项。 2. 理解问题 首先，让我们熟悉数..."},"headers":[{"level":2,"title":"2. 理解问题","slug":"_2-理解问题","link":"#_2-理解问题","children":[]},{"level":2,"title":"3. 创建组合约束","slug":"_3-创建组合约束","link":"#_3-创建组合约束","children":[]},{"level":2,"title":"4. 使用_@ReportAsSingleViolation_","slug":"_4-使用-reportassingleviolation","link":"#_4-使用-reportassingleviolation","children":[]},{"level":2,"title":"5. 布尔约束组合","slug":"_5-布尔约束组合","link":"#_5-布尔约束组合","children":[]},{"level":2,"title":"6. 使用组合约束进行方法验证","slug":"_6-使用组合约束进行方法验证","link":"#_6-使用组合约束进行方法验证","children":[]},{"level":2,"title":"7. 结论","slug":"_7-结论","link":"#_7-结论","children":[]}],"git":{"createdTime":1721316761000,"updatedTime":1721316761000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":4.49,"words":1348},"filePathRelative":"posts/baeldung/2024-07-18/2024-07-18-Constraint Composition with Bean Validation.md","localizedDate":"2022年4月1日","excerpt":"<hr>\\n<h1>Bean Validation中的约束组合</h1>\\n<p>在本教程中，我们将讨论Bean Validation的约束组合。</p>\\n<p><strong>将多个约束组合在一个自定义注解下可以减少代码重复并提高可读性</strong>。我们将看到如何创建组合约束以及如何根据我们的需求进行自定义。</p>\\n<p>对于代码示例，我们将使用与Java Bean Validation基础相同的依赖项。</p>\\n<h2>2. 理解问题</h2>\\n<p>首先，让我们熟悉数据模型。我们将使用_Account_类作为本文大多数示例的基础：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Account</span> <span class=\\"token punctuation\\">{</span>\\n\\n    <span class=\\"token annotation punctuation\\">@NotNull</span>\\n    <span class=\\"token annotation punctuation\\">@Pattern</span><span class=\\"token punctuation\\">(</span>regexp <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\".*\\\\\\\\d.*\\"</span><span class=\\"token punctuation\\">,</span> message <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"必须包含至少一个数字字符\\"</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token annotation punctuation\\">@Length</span><span class=\\"token punctuation\\">(</span>min <span class=\\"token operator\\">=</span> <span class=\\"token number\\">6</span><span class=\\"token punctuation\\">,</span> max <span class=\\"token operator\\">=</span> <span class=\\"token number\\">32</span><span class=\\"token punctuation\\">,</span> message <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"必须有6到32个字符\\"</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">String</span> username<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token annotation punctuation\\">@NotNull</span>\\n    <span class=\\"token annotation punctuation\\">@Pattern</span><span class=\\"token punctuation\\">(</span>regexp <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\".*\\\\\\\\d.*\\"</span><span class=\\"token punctuation\\">,</span> message <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"必须包含至少一个数字字符\\"</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token annotation punctuation\\">@Length</span><span class=\\"token punctuation\\">(</span>min <span class=\\"token operator\\">=</span> <span class=\\"token number\\">6</span><span class=\\"token punctuation\\">,</span> max <span class=\\"token operator\\">=</span> <span class=\\"token number\\">32</span><span class=\\"token punctuation\\">,</span> message <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"必须有6到32个字符\\"</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">String</span> nickname<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token annotation punctuation\\">@NotNull</span>\\n    <span class=\\"token annotation punctuation\\">@Pattern</span><span class=\\"token punctuation\\">(</span>regexp <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\".*\\\\\\\\d.*\\"</span><span class=\\"token punctuation\\">,</span> message <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"必须包含至少一个数字字符\\"</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token annotation punctuation\\">@Length</span><span class=\\"token punctuation\\">(</span>min <span class=\\"token operator\\">=</span> <span class=\\"token number\\">6</span><span class=\\"token punctuation\\">,</span> max <span class=\\"token operator\\">=</span> <span class=\\"token number\\">32</span><span class=\\"token punctuation\\">,</span> message <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"必须有6到32个字符\\"</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">String</span> password<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// getters and setters</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{r as comp,d as data};
