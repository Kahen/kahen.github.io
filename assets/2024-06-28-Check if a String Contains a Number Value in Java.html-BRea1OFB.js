import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-DpDzgwdT.js";const p={},e=t(`<h1 id="在java中检查字符串是否包含数字值" tabindex="-1"><a class="header-anchor" href="#在java中检查字符串是否包含数字值"><span>在Java中检查字符串是否包含数字值</span></a></h1><p>在这篇简短的文章中，我们将重点介绍如何在Java中检查一个字符串是否包含数字。</p><p>首先，我们将考虑使用JDK的解决方案。然后，我们将展示如何使用如Guava和Apache Commons Lang等外部库来实现相同的目标。</p><h3 id="_2-问题介绍" tabindex="-1"><a class="header-anchor" href="#_2-问题介绍"><span>2. 问题介绍</span></a></h3><p>我们的主要目标是检查一个字符串是否包含数字。因此，基本思想是创建方法，如果给定的字符串包含数字则返回true，否则返回false。</p><p>请注意，我们<strong>假设我们的字符串非空且非null</strong>，以避免重复编写空和null检查的样板代码。</p><h3 id="_3-使用string类" tabindex="-1"><a class="header-anchor" href="#_3-使用string类"><span>3. 使用String类</span></a></h3><p>String类带有一组方便的方法，我们可以使用它们来检查特定字符串是否包含数字。</p><p>让我们更仔细地看看这些方法中的每一个。</p><h4 id="_3-1-string-matches方法" tabindex="-1"><a class="header-anchor" href="#_3-1-string-matches方法"><span>3.1. String#matches方法</span></a></h4><p>matches()方法通常用于将字符串与正则表达式进行测试。顾名思义，它只是检查字符串是否与给定的正则表达式匹配。</p><p><strong>简而言之，我们所要做的就是定义正确的正则表达式，表示“包含一个数字”</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">checkUsingMatchesMethod</span><span class="token punctuation">(</span><span class="token class-name">String</span> input<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> input<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">&quot;.*\\\\d.*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通常，我们使用“.<em>\\d.</em>”作为正则表达式，表示字符串至少包含一个数字。<strong>或者，我们可将“\\d”替换为“[0-9]”，因为它们描述的是同一件事（数字/数字）</strong>。</p><p>现在，让我们创建一个测试用例来单元测试我们的方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StrContainsNumberUtilsUnitTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">INPUT_WITH_NUMBERS</span> <span class="token operator">=</span> <span class="token string">&quot;We hope 2024 will be great&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">INPUT_WITHOUT_NUMBERS</span> <span class="token operator">=</span> <span class="token string">&quot;Hello world&quot;</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenInputString_whenUsingMatchesMethod_ThenCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token class-name">StrContainsNumberUtils</span><span class="token punctuation">.</span><span class="token function">checkUsingMatchesMethod</span><span class="token punctuation">(</span><span class="token constant">INPUT_WITH_NUMBERS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token class-name">StrContainsNumberUtils</span><span class="token punctuation">.</span><span class="token function">checkUsingMatchesMethod</span><span class="token punctuation">(</span><span class="token constant">INPUT_WITHOUT_NUMBERS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token class-name">StrContainsNumberUtils</span><span class="token punctuation">.</span><span class="token function">checkUsingMatchesMethod</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token class-name">StrContainsNumberUtils</span><span class="token punctuation">.</span><span class="token function">checkUsingMatchesMethod</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-string-replaceall方法" tabindex="-1"><a class="header-anchor" href="#_3-2-string-replaceall方法"><span>3.2. String#replaceAll方法</span></a></h4><p>我们还可以使用replaceAll()方法来解决我们的核心问题。<strong>它返回一个字符串，将所有匹配指定正则表达式的字符替换掉</strong>。</p><p>这里的基本思想是使用匹配数字的正则表达式来替换特定字符串中的所有数字：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">checkUsingReplaceAllMethod</span><span class="token punctuation">(</span><span class="token class-name">String</span> input<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> result <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\d&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> input<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们用空格替换了所有的数字。<strong>因此，如果返回的字符串长度与原始字符串不同，那么输入就包含数字</strong>。</p><p>请注意，matches()方法提供了一种更简洁、更直接的方式来解决我们的核心问题，与replaceAll()相比。</p><p>现在，让我们添加一个测试用例来确认一切按预期工作：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenInputString_whenUsingReplaceAllMethod_ThenCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token class-name">StrContainsNumberUtils</span><span class="token punctuation">.</span><span class="token function">checkUsingReplaceAllMethod</span><span class="token punctuation">(</span><span class="token constant">INPUT_WITH_NUMBERS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token class-name">StrContainsNumberUtils</span><span class="token punctuation">.</span><span class="token function">checkUsingReplaceAllMethod</span><span class="token punctuation">(</span><span class="token constant">INPUT_WITHOUT_NUMBERS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token class-name">StrContainsNumberUtils</span><span class="token punctuation">.</span><span class="token function">checkUsingReplaceAllMethod</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token class-name">StrContainsNumberUtils</span><span class="token punctuation">.</span><span class="token function">checkUsingReplaceAllMethod</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-使用pattern类" tabindex="-1"><a class="header-anchor" href="#_4-使用pattern类"><span>4. 使用Pattern类</span></a></h3><p>同样，我们可以使用Pattern类来实现相同的目标。<strong>这个类提供了一种方便的方式来编译一个正则表达式，并将其与给定的字符串匹配</strong>。</p><p>所以，让我们重用我们在前面的例子中已经定义的相同正则表达式：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">checkUsingPatternClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> input<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&quot;.*\\\\d.*&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简而言之，compile()方法让我们可以从“.<em>\\d.</em>”正则表达式创建一个模式。matcher()方法创建了一个Matcher对象，可以将我们的输入与编译的“包含一个数字”正则表达式匹配。</p><p><strong>正如名字所示，matches()方法负责检查我们的输入是否包含一个数字</strong>。</p><p>最后，让我们再添加一个测试用例来为我们的方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenInputString_whenUsingPatternClass_ThenCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token class-name">StrContainsNumberUtils</span><span class="token punctuation">.</span><span class="token function">checkUsingPatternClass</span><span class="token punctuation">(</span><span class="token constant">INPUT_WITH_NUMBERS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token class-name">StrContainsNumberUtils</span><span class="token punctuation">.</span><span class="token function">checkUsingPatternClass</span><span class="token punctuation">(</span><span class="token constant">INPUT_WITHOUT_NUMBERS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token class-name">StrContainsNumberUtils</span><span class="token punctuation">.</span><span class="token function">checkUsingPatternClass</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token class-name">StrContainsNumberUtils</span><span class="token punctuation">.</span><span class="token function">checkUsingPatternClass</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-使用character-isdigit方法" tabindex="-1"><a class="header-anchor" href="#_5-使用character-isdigit方法"><span>5. 使用Character#isDigit方法</span></a></h3><p>检查字符串是否包含数字的另一种方法是使用Character.isDigit()方法，该方法确定特定字符是否是数字。</p><p>我们可以遍历字符串并调用isDigit()来检查当前字符是否表示数字：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">checkUsingIsDigitMethod</span><span class="token punctuation">(</span><span class="token class-name">String</span> input<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> input<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
   
   <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们将创建一个新的测试用例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenInputString_whenUsingIsDigitMethod_ThenCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token class-name">StrContainsNumberUtils</span><span class="token punctuation">.</span><span class="token function">checkUsingIsDigitMethod</span><span class="token punctuation">(</span><span class="token constant">INPUT_WITH_NUMBERS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token class-name">StrContainsNumberUtils</span><span class="token punctuation">.</span><span class="token function">checkUsingIsDigitMethod</span><span class="token punctuation">(</span><span class="token constant">INPUT_WITHOUT_NUMBERS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token class-name">StrContainsNumberUtils</span><span class="token punctuation">.</span><span class="token function">checkUsingIsDigitMethod</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token class-name">StrContainsNumberUtils</span><span class="token punctuation">.</span><span class="token function">checkUsingIsDigitMethod</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-使用stream-api" tabindex="-1"><a class="header-anchor" href="#_6-使用stream-api"><span>6. 使用Stream API</span></a></h3><p>Stream API提供了一种方便的方式来检查给定字符串是否包含数字。Java 8在String类中引入了一个新的方法chars()。此方法返回一个IntStream，包含给定字符串中字符的代码值。</p><p>让我们看看它在实际中的应用：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">checkUsingStreamApi</span><span class="token punctuation">(</span><span class="token class-name">String</span> input<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> input<span class="token punctuation">.</span><span class="token function">chars</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token operator">::</span><span class="token function">isDigit</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>如上所示，我们使用anyMatch()方法来检查是否有任何字符表示数字</strong>。</p><p>一如既往，让我们添加另一个测试用例来确认我们的新方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenInputString_whenUsingStreamApi_ThenCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token class-name">StrContainsNumberUtils</span><span class="token punctuation">.</span><span class="token function">checkUsingStreamApi</span><span class="token punctuation">(</span><span class="token constant">INPUT_WITH_NUMBERS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token class-name">StrContainsNumberUtils</span><span class="token punctuation">.</span><span class="token function">checkUsingStreamApi</span><span class="token punctuation">(</span><span class="token constant">INPUT_WITHOUT_NUMBERS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token class-name">StrContainsNumberUtils</span><span class="token punctuation">.</span><span class="token function">checkUsingStreamApi</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token class-name">StrContainsNumberUtils</span><span class="token punctuation">.</span><span class="token function">checkUsingStreamApi</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-使用apache-commons-lang" tabindex="-1"><a class="header-anchor" href="#_7-使用apache-commons-lang"><span>7. 使用Apache Commons Lang</span></a></h3><p>此外，我们可以使用Apache Commons Lang库来解决关键问题。但是，我们首先需要将它的依赖项添加到我们的pom.xml中：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\`\`
    \`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`org.apache.commons\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`
    \`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`commons-lang3\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`
    \`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\`\`3.14.0\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\`\`
\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\`\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>这个库提供了StringUtils类，以一种null安全的方式实现字符串操作</strong>。该类带有getDigits()方法，它从特定字符串中提取数字。</p><p>让我们看看它在实践中如何使用：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">checkUsingApacheCommonsLang</span><span class="token punctuation">(</span><span class="token class-name">String</span> input<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">getDigits</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>result<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上所示，getDigits()返回一个只包含数字的新字符串。<strong>所以，我们所要做的就是检查我们返回的字符串是否不为空，以确保我们的输入包含数字</strong>。</p><p>按照通常的方式，让我们创建一个测试用例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenInputString_whenUsingApacheCommonsLang_ThenCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token class-name">StrContainsNumberUtils</span><span class="token punctuation">.</span><span class="token function">checkUsingApacheCommonsLang</span><span class="token punctuation">(</span><span class="token constant">INPUT_WITH_NUMBERS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token class-name">StrContainsNumberUtils</span><span class="token punctuation">.</span><span class="token function">checkUsingApacheCommonsLang</span><span class="token punctuation">(</span><span class="token constant">INPUT_WITHOUT_NUMBERS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token class-name">StrContainsNumberUtils</span><span class="token punctuation">.</span><span class="token function">checkUsingApacheCommonsLang</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token class-name">StrContainsNumberUtils</span><span class="token punctuation">.</span><span class="token function">checkUsingApacheCommonsLang</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-使用guava" tabindex="-1"><a class="header-anchor" href="#_8-使用guava"><span>8. 使用Guava</span></a></h3><p>如果我们想要检查给定字符串是否包含数字，Guava库是另一个可以考虑的选项。让我们从将它的依赖项添加到我们的pom.xml开始：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\`\`
    \`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`com.google.guava\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`
    \`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`guava\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`
    \`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\`\`31.0.1-jre\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\`\`
\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\`\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，让我们看看使用Guava库的快速示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">checkUsingGuava</span><span class="token punctuation">(</span><span class="token class-name">String</span> input<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token class-name">CharMatcher</span><span class="token punctuation">.</span><span class="token function">forPredicate</span><span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token operator">::</span><span class="token function">isDigit</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">retainFrom</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">!</span>result<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Guava提供了CharMatcher()类来操作字符。<strong>在这里，我们使用forPredicate()方法来过滤只有数字，并使用retainfrom()方法返回它们</strong>。</p><p>最后，我们将为我们的方法添加一个新的测试用例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenInputString_whenUsingGuava_ThenCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token class-name">StrContainsNumberUtils</span><span class="token punctuation">.</span><span class="token function">checkUsingGuava</span><span class="token punctuation">(</span><span class="token constant">INPUT_WITH_NUMBERS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token class-name">StrContainsNumberUtils</span><span class="token punctuation">.</span><span class="token function">checkUsingGuava</span><span class="token punctuation">(</span><span class="token constant">INPUT_WITHOUT_NUMBERS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token class-name">StrContainsNumberUtils</span><span class="token punctuation">.</span><span class="token function">checkUsingGuava</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token class-name">StrContainsNumberUtils</span><span class="token punctuation">.</span><span class="token function">checkUsingGuava</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h3>`,63),c=[e];function o(i,l){return a(),s("div",null,c)}const r=n(p,[["render",o],["__file","2024-06-28-Check if a String Contains a Number Value in Java.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-06-28/2024-06-28-Check%20if%20a%20String%20Contains%20a%20Number%20Value%20in%20Java.html","title":"在Java中检查字符串是否包含数字值","lang":"zh-CN","frontmatter":{"date":"2024-06-28T00:00:00.000Z","category":["Java","String Manipulation"],"tag":["Java","String","Number Detection"],"head":[["meta",{"name":"keywords","content":"Java, String, Number Detection, Regular Expressions, Apache Commons Lang, Guava, Stream API"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-06-28/2024-06-28-Check%20if%20a%20String%20Contains%20a%20Number%20Value%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"在Java中检查字符串是否包含数字值"}],["meta",{"property":"og:description","content":"在Java中检查字符串是否包含数字值 在这篇简短的文章中，我们将重点介绍如何在Java中检查一个字符串是否包含数字。 首先，我们将考虑使用JDK的解决方案。然后，我们将展示如何使用如Guava和Apache Commons Lang等外部库来实现相同的目标。 2. 问题介绍 我们的主要目标是检查一个字符串是否包含数字。因此，基本思想是创建方法，如果给定..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-28T13:03:14.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"String"}],["meta",{"property":"article:tag","content":"Number Detection"}],["meta",{"property":"article:published_time","content":"2024-06-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-28T13:03:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"在Java中检查字符串是否包含数字值\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-28T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-28T13:03:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"在Java中检查字符串是否包含数字值 在这篇简短的文章中，我们将重点介绍如何在Java中检查一个字符串是否包含数字。 首先，我们将考虑使用JDK的解决方案。然后，我们将展示如何使用如Guava和Apache Commons Lang等外部库来实现相同的目标。 2. 问题介绍 我们的主要目标是检查一个字符串是否包含数字。因此，基本思想是创建方法，如果给定..."},"headers":[{"level":3,"title":"2. 问题介绍","slug":"_2-问题介绍","link":"#_2-问题介绍","children":[]},{"level":3,"title":"3. 使用String类","slug":"_3-使用string类","link":"#_3-使用string类","children":[]},{"level":3,"title":"4. 使用Pattern类","slug":"_4-使用pattern类","link":"#_4-使用pattern类","children":[]},{"level":3,"title":"5. 使用Character#isDigit方法","slug":"_5-使用character-isdigit方法","link":"#_5-使用character-isdigit方法","children":[]},{"level":3,"title":"6. 使用Stream API","slug":"_6-使用stream-api","link":"#_6-使用stream-api","children":[]},{"level":3,"title":"7. 使用Apache Commons Lang","slug":"_7-使用apache-commons-lang","link":"#_7-使用apache-commons-lang","children":[]},{"level":3,"title":"8. 使用Guava","slug":"_8-使用guava","link":"#_8-使用guava","children":[]},{"level":3,"title":"","slug":"","link":"#","children":[]}],"git":{"createdTime":1719579794000,"updatedTime":1719579794000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":5.31,"words":1593},"filePathRelative":"posts/baeldung/2024-06-28/2024-06-28-Check if a String Contains a Number Value in Java.md","localizedDate":"2024年6月28日","excerpt":"\\n<p>在这篇简短的文章中，我们将重点介绍如何在Java中检查一个字符串是否包含数字。</p>\\n<p>首先，我们将考虑使用JDK的解决方案。然后，我们将展示如何使用如Guava和Apache Commons Lang等外部库来实现相同的目标。</p>\\n<h3>2. 问题介绍</h3>\\n<p>我们的主要目标是检查一个字符串是否包含数字。因此，基本思想是创建方法，如果给定的字符串包含数字则返回true，否则返回false。</p>\\n<p>请注意，我们<strong>假设我们的字符串非空且非null</strong>，以避免重复编写空和null检查的样板代码。</p>\\n<h3>3. 使用String类</h3>","autoDesc":true}');export{r as comp,d as data};
