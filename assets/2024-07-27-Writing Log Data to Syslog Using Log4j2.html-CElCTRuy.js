import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as l,a as n}from"./app-D9qUUkNr.js";const o={},i=n('<h1 id="使用log4j2将日志数据写入syslog" tabindex="-1"><a class="header-anchor" href="#使用log4j2将日志数据写入syslog"><span>使用Log4j2将日志数据写入Syslog</span></a></h1><p>日志记录是每个应用程序中的重要组成部分。当我们在应用程序中使用日志记录机制时，我们可以将日志存储在文件或数据库中。此外，我们还可以将日志数据发送到集中的日志管理应用程序，如Graylog或Syslog。</p><p>在本教程中，我们将描述如何使用Log4j2在Spring Boot应用程序中将日志信息发送到Syslog服务器。</p><p>Log4j2是Log4j的最新版本。它是高性能日志记录的常见选择，并在许多生产应用程序中使用。</p><h3 id="_2-1-maven依赖" tabindex="-1"><a class="header-anchor" href="#_2-1-maven依赖"><span>2.1. Maven依赖</span></a></h3><p>让我们首先向我们的_pom.xml_添加_spring-boot-starter-log4j2_依赖项：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>``&lt;dependency&gt;``\n    ```&lt;groupId&gt;```org.springframework.boot```&lt;/groupId&gt;```\n    ```&lt;artifactId&gt;```spring-boot-starter-log4j2```&lt;/artifactId&gt;```\n``&lt;/dependency&gt;``\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了在Spring Boot应用程序中配置Log4j2，我们需要从_pom.xml_中的任何启动库中排除默认的_Logback_日志记录框架。在我们的项目中，只有_spring-boot-starter-web_启动依赖项。让我们从它中排除默认的日志记录：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>``&lt;dependency&gt;``\n    ```&lt;groupId&gt;```org.springframework.boot```&lt;/groupId&gt;```\n    ```&lt;artifactId&gt;```spring-boot-starter-web```&lt;/artifactId&gt;```\n    `&lt;exclusions&gt;`\n        `&lt;exclusion&gt;`\n            ```&lt;groupId&gt;```org.springframework.boot```&lt;/groupId&gt;```\n            ```&lt;artifactId&gt;```spring-boot-starter-logging```&lt;/artifactId&gt;```\n        `&lt;/exclusion&gt;`\n    `&lt;/exclusions&gt;`\n``&lt;/dependency&gt;``\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-log4j2配置" tabindex="-1"><a class="header-anchor" href="#_2-2-log4j2配置"><span>2.2. Log4j2配置</span></a></h3><p>现在，我们将创建Log4j2配置文件。Spring Boot项目在类路径中搜索_log4j2-spring.xml_或_log4j2.xml_文件。让我们在_resource_目录中配置一个简单的_log4j2-spring.xml_：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>`&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;`\n`&lt;Configuration&gt;`\n    `&lt;Appenders&gt;`\n        `&lt;Console name=&quot;ConsoleAppender&quot; target=&quot;SYSTEM_OUT&quot;&gt;`\n            `&lt;PatternLayout\n                pattern=&quot;%style{%date{DEFAULT}}{yellow} %highlight{%-5level}{FATAL=bg_red, ERROR=red, WARN=yellow, INFO=green} %message&quot;/&gt;`\n        `&lt;/Console&gt;`\n    `&lt;/Appenders&gt;`\n    `&lt;Loggers&gt;`\n        `&lt;Root level=&quot;info&quot;&gt;`\n            `&lt;AppenderRef ref=&quot;ConsoleAppender&quot;/&gt;`\n        `&lt;/Root&gt;`\n    `&lt;/Loggers&gt;`\n`&lt;/Configuration&gt;`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该配置具有一个_Console_附加器，用于将日志数据显示到控制台。</p><h3 id="_2-3-syslog附加器" tabindex="-1"><a class="header-anchor" href="#_2-3-syslog附加器"><span>2.3. Syslog附加器</span></a></h3><p>附加器是日志框架中将日志数据传递到目的地的主要组件。Log4j2支持许多附加器，例如Syslog附加器。让我们更新我们的_log4j2-spring.xml_文件，以添加Syslog附加器，将日志数据发送到Syslog服务器：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>`&lt;Syslog name=&quot;Syslog&quot; format=&quot;RFC5424&quot; host=&quot;localhost&quot; port=&quot;514&quot;\n    protocol=&quot;UDP&quot; appName=&quot;baeldung&quot; facility=&quot;LOCAL0&quot; /&gt;`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Syslog附加器具有许多属性：</p><ul><li><em>name</em>: 附加器的名称</li><li><em>format</em>: 可以设置为BSD或RFC5424</li><li><em>host</em>: Syslog服务器的地址</li><li><em>port</em>: Syslog服务器的端口</li><li><em>protocol</em>: 是否使用TCP或UDP</li><li><em>appName</em>: 记录日志的应用程序的名称</li><li><em>facility</em>: 消息的类别</li></ul><h2 id="_3-syslog服务器" tabindex="-1"><a class="header-anchor" href="#_3-syslog服务器"><span>3. Syslog服务器</span></a></h2><p>现在，让我们设置Syslog服务器。在许多Linux发行版中，_rsyslog_是主要的日志记录机制。它包含在大多数Linux发行版中，例如Ubuntu和CentOS。</p><h3 id="_3-1-syslog配置" tabindex="-1"><a class="header-anchor" href="#_3-1-syslog配置"><span>3.1. Syslog配置</span></a></h3><p><strong>我们的_rsyslog_配置应与Log4j2设置匹配。</strong> <em>rsyslog_配置定义在</em>/etc/rsyslog.conf_文件中。我们在Log4j2配置中分别使用UDP和端口514作为_protocol_和_port_。因此，我们将添加或取消注释_rsyslog.conf_文件中的以下行：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code># provides UDP syslog reception\nmodule(load=&quot;imudp&quot;)\ninput(type=&quot;imudp&quot; port=&quot;514&quot;)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这种情况下，我们设置_module(load=&quot;imudp&quot;)_来加载_imudp_模块通过UDP接收Syslog消息。然后，我们使用_input_配置将_port_设置为514。_input_将端口分配给模块。之后，我们应该重启_rsyslog_服务器：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>sudo service rsyslog restart\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在配置已经准备好了。</p><h3 id="_3-2-测试" tabindex="-1"><a class="header-anchor" href="#_3-2-测试"><span>3.2. 测试</span></a></h3><p>让我们创建一个简单的Spring Boot应用程序，记录一些消息：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>@SpringBootApplication\npublic class SpringBootSyslogApplication {\n    private static final Logger logger = LogManager.getLogger(SpringBootSyslogApplication.class);\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringBootSyslogApplication.class, args);\n\n        logger.debug(&quot;Debug log message&quot;);\n        logger.info(&quot;Info log message&quot;);\n        logger.error(&quot;Error log message&quot;);\n        logger.warn(&quot;Warn log message&quot;);\n        logger.fatal(&quot;Fatal log message&quot;);\n        logger.trace(&quot;Trace log message&quot;);\n    }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>日志信息存储在_/var/log/_目录中。让我们检查_syslog_文件：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>tail -f /var/log/syslog\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当我们运行我们的Spring Boot应用程序时，我们将看到我们的日志消息：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Jun 30 19:49:35 baeldung[16841] Info log message\nJun 30 19:49:35 baeldung[16841] Error log message\nJun 30 19:49:35 baeldung[16841] Warn log message\nJun 30 19:49:35 baeldung[16841] Fatal log message\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-结论" tabindex="-1"><a class="header-anchor" href="#_4-结论"><span>4. 结论</span></a></h2><p>在本教程中，我们描述了在Spring Boot应用程序中Log4j2的Syslog配置。我们还配置了_rsyslog_服务器作为Syslog服务器。像往常一样，完整的源代码可以在GitHub上找到。</p>',35),s=[i];function a(r,g){return l(),t("div",null,s)}const c=e(o,[["render",a],["__file","2024-07-27-Writing Log Data to Syslog Using Log4j2.html.vue"]]),p=JSON.parse('{"path":"/posts/baeldung/2024-07-27/2024-07-27-Writing%20Log%20Data%20to%20Syslog%20Using%20Log4j2.html","title":"使用Log4j2将日志数据写入Syslog","lang":"zh-CN","frontmatter":{"date":"2021-07-07T00:00:00.000Z","category":["Spring Boot","Log4j2"],"tag":["Syslog","Logging","Configuration"],"head":[["meta",{"name":"keywords","content":"Log4j2, Syslog, Spring Boot, Logging, Configuration"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-27/2024-07-27-Writing%20Log%20Data%20to%20Syslog%20Using%20Log4j2.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"使用Log4j2将日志数据写入Syslog"}],["meta",{"property":"og:description","content":"使用Log4j2将日志数据写入Syslog 日志记录是每个应用程序中的重要组成部分。当我们在应用程序中使用日志记录机制时，我们可以将日志存储在文件或数据库中。此外，我们还可以将日志数据发送到集中的日志管理应用程序，如Graylog或Syslog。 在本教程中，我们将描述如何使用Log4j2在Spring Boot应用程序中将日志信息发送到Syslog服..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-27T20:59:02.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Syslog"}],["meta",{"property":"article:tag","content":"Logging"}],["meta",{"property":"article:tag","content":"Configuration"}],["meta",{"property":"article:published_time","content":"2021-07-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-27T20:59:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用Log4j2将日志数据写入Syslog\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-07-07T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-27T20:59:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"使用Log4j2将日志数据写入Syslog 日志记录是每个应用程序中的重要组成部分。当我们在应用程序中使用日志记录机制时，我们可以将日志存储在文件或数据库中。此外，我们还可以将日志数据发送到集中的日志管理应用程序，如Graylog或Syslog。 在本教程中，我们将描述如何使用Log4j2在Spring Boot应用程序中将日志信息发送到Syslog服..."},"headers":[{"level":3,"title":"2.1. Maven依赖","slug":"_2-1-maven依赖","link":"#_2-1-maven依赖","children":[]},{"level":3,"title":"2.2. Log4j2配置","slug":"_2-2-log4j2配置","link":"#_2-2-log4j2配置","children":[]},{"level":3,"title":"2.3. Syslog附加器","slug":"_2-3-syslog附加器","link":"#_2-3-syslog附加器","children":[]},{"level":2,"title":"3. Syslog服务器","slug":"_3-syslog服务器","link":"#_3-syslog服务器","children":[{"level":3,"title":"3.1. Syslog配置","slug":"_3-1-syslog配置","link":"#_3-1-syslog配置","children":[]},{"level":3,"title":"3.2. 测试","slug":"_3-2-测试","link":"#_3-2-测试","children":[]}]},{"level":2,"title":"4. 结论","slug":"_4-结论","link":"#_4-结论","children":[]}],"git":{"createdTime":1722113942000,"updatedTime":1722113942000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":3.41,"words":1024},"filePathRelative":"posts/baeldung/2024-07-27/2024-07-27-Writing Log Data to Syslog Using Log4j2.md","localizedDate":"2021年7月7日","excerpt":"\\n<p>日志记录是每个应用程序中的重要组成部分。当我们在应用程序中使用日志记录机制时，我们可以将日志存储在文件或数据库中。此外，我们还可以将日志数据发送到集中的日志管理应用程序，如Graylog或Syslog。</p>\\n<p>在本教程中，我们将描述如何使用Log4j2在Spring Boot应用程序中将日志信息发送到Syslog服务器。</p>\\n<p>Log4j2是Log4j的最新版本。它是高性能日志记录的常见选择，并在许多生产应用程序中使用。</p>\\n<h3>2.1. Maven依赖</h3>\\n<p>让我们首先向我们的_pom.xml_添加_spring-boot-starter-log4j2_依赖项：</p>","autoDesc":true}');export{c as comp,p as data};
