import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-Cwx3bya4.js";const p={},e=t('<h1 id="如何在-webflux-中拦截请求并添加头部信息-baeldung" tabindex="-1"><a class="header-anchor" href="#如何在-webflux-中拦截请求并添加头部信息-baeldung"><span>如何在 WebFlux 中拦截请求并添加头部信息 | Baeldung</span></a></h1><p>拦截器，也被称为过滤器，是 Spring 的一个特性，允许我们拦截客户端请求。这使我们能够在控制器处理它或向客户端返回响应之前检查和转换请求。</p><p>在本教程中，我们将讨论使用 WebFlux 框架拦截客户端请求并添加自定义头部的各种方式。我们首先探索如何为特定端点执行此操作。然后，我们将确定拦截所有传入请求的方法。</p><p>我们将使用以下 spring-boot-starter-webflux Maven 依赖项，以支持 Spring 框架的响应式 Web 功能：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`org.springframework.boot`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`spring-boot-starter-webflux`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`3.1.5`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Spring WebFlux 过滤器可以分为 WebFilter 和 HandlerFilterFunction。我们将使用这些过滤器来拦截服务器 Web 请求并添加新的自定义头部或修改现有头部。</p><h3 id="_3-1-使用-webfilter" tabindex="-1"><a class="header-anchor" href="#_3-1-使用-webfilter"><span>3.1 使用 WebFilter</span></a></h3><p>WebFilter 是以链式、拦截式的方式处理服务器 Web 请求的约定。<strong>WebFilter 作用于全局，一旦启用，就会拦截所有请求和响应。</strong></p><p>首先，我们应该定义基于注解的控制器：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/trace-annotated&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">Mono</span>``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````` <span class="token function">trace</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;traceId&quot;</span><span class="token punctuation">)</span> <span class="token keyword">final</span> <span class="token class-name">String</span> traceId<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;TraceId: &quot;</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>traceId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们拦截服务器 Web 请求并使用 TraceWebFilter 实现添加一个新的头部 traceId：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TraceWebFilter</span> <span class="token keyword">implements</span> <span class="token class-name">WebFilter</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">Mono</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span>`` <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">WebFilterChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mutate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&quot;traceId&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ANNOTATED-TRACE-ID&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们可以使用 WebTestClient 发送 GET 请求到 trace-annotated 端点，并验证响应是否包含我们添加的 traceId 头部值，即 &quot;TraceId: ANNOTATED-TRACE-ID&quot;：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">whenCallAnnotatedTraceEndpoint_thenResponseContainsTraceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">EntityExchangeResult</span>``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````` result <span class="token operator">=</span> webTestClient<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">&quot;/trace-annotated&quot;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">expectStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">expectBody</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">returnResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">String</span> body <span class="token operator">=</span> <span class="token string">&quot;TraceId: ANNOTATED-TRACE-ID&quot;</span><span class="token punctuation">;</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getResponseBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>重要的一点是，我们不能像响应头部那样直接修改请求头部，因为请求头部映射是只读的：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>\n<span class="token keyword">public</span> <span class="token class-name">Mono</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span>`` <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">WebFilterChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;/trace-exceptional&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;traceId&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;TRACE-ID&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>这种实现会抛出 UnsupportedOperationException。</strong></p><p>让我们使用 WebTestClient 验证过滤器抛出异常，导致在发送 GET 请求到 trace-exceptional 端点后服务器错误：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/trace-exceptional&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">Mono</span>``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````` <span class="token function">traceExceptional</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;Traced&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">whenCallTraceExceptionalEndpoint_thenThrowsException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">EntityExchangeResult</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&gt;</span></span>` result <span class="token operator">=</span> webTestClient<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">&quot;/trace-exceptional&quot;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">expectStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">is5xxServerError</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">expectBody</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">returnResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">assertNotNull</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getResponseBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-使用-handlerfilterfunction" tabindex="-1"><a class="header-anchor" href="#_3-2-使用-handlerfilterfunction"><span>3.2 使用 HandlerFilterFunction</span></a></h3><p>在函数式风格中，路由器函数拦截请求并调用适当的处理函数。</p><p>我们可以启用零个或多个 HandlerFilterFunction，它们作为过滤 HandlerFunction 的函数。<strong>HandlerFilterFunction 实现仅适用于基于路由器的。</strong></p><p>对于函数式端点，我们需要首先创建一个处理器：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TraceRouterHandler</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token class-name">Mono</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerResponse</span><span class="token punctuation">&gt;</span></span>````` <span class="token function">handle</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ServerRequest</span> serverRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> traceId <span class="token operator">=</span> serverRequest<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">firstHeader</span><span class="token punctuation">(</span><span class="token string">&quot;traceId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">assert</span> traceId <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n        <span class="token class-name">Mono</span>``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````` body <span class="token operator">=</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;TraceId: &quot;</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>traceId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在配置了路由器配置的处理器之后，我们拦截服务器 Web 请求并使用 TraceHandlerFilterFunction 实现添加一个新的头部 traceId：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">RouterFunction</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerResponse</span><span class="token punctuation">&gt;</span></span>````` <span class="token function">routes</span><span class="token punctuation">(</span><span class="token class-name">TraceRouterHandler</span> routerHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">RouterFunctions</span>\n      <span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/trace-functional-filter&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> routerHandler<span class="token operator">::</span><span class="token function">handle</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TraceHandlerFilterFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TraceHandlerFilterFunction</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerFilterFunction</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerResponse</span><span class="token punctuation">,</span> <span class="token class-name">ServerResponse</span><span class="token punctuation">&gt;</span></span>` <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">Mono</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerResponse</span><span class="token punctuation">&gt;</span></span>````` <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HandlerFunction</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerResponse</span><span class="token punctuation">&gt;</span></span>````` handlerFunction<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">ServerRequest</span> serverRequest <span class="token operator">=</span> <span class="token class-name">ServerRequest</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&quot;traceId&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;FUNCTIONAL-TRACE-ID&quot;</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> handlerFunction<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>serverRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，在触发 GET 调用到 trace-functional-filter 端点后，我们可以验证响应是否包含我们添加的 traceId 头部值，即 &quot;TraceId: FUNCTIONAL-TRACE-ID&quot;：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">whenCallTraceFunctionalEndpoint_thenResponseContainsTraceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">EntityExchangeResult</span>``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````` result <span class="token operator">=</span> webTestClient<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">&quot;/trace-functional-filter&quot;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">expectStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">expectBody</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">returnResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">String</span> body <span class="token operator">=</span> <span class="token string">&quot;TraceId: FUNCTIONAL-TRACE-ID&quot;</span><span class="token punctuation">;</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getResponseBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-使用自定义-processor-函数" tabindex="-1"><a class="header-anchor" href="#_3-3-使用自定义-processor-函数"><span>3.3 使用自定义 Processor 函数</span></a></h3><p>处理器函数类似于路由器函数，它拦截请求并调用适当的处理函数。</p><p>功能性路由 API 使我们能够添加零个或多个自定义 Function 实例，这些实例在 HandlerFunction 之前应用。</p><p>这个过滤器函数拦截由构建器创建的服务器 Web 请求并添加一个新的头部 traceId：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">RouterFunction</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerResponse</span><span class="token punctuation">&gt;</span></span>````` <span class="token function">routes</span><span class="token punctuation">(</span><span class="token class-name">TraceRouterHandler</span> routerHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">route</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/trace-functional-before&quot;</span><span class="token punctuation">,</span> routerHandler<span class="token operator">::</span><span class="token function">handle</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span>request <span class="token operator">-&gt;</span> <span class="token class-name">ServerRequest</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&quot;traceId&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;FUNCTIONAL-TRACE-ID&quot;</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在发送 GET 请求到 trace-functional-before 端点后，让我们验证响应是否包含我们添加的 traceId 头部值，即 &quot;TraceId: FUNCTIONAL-TRACE-ID&quot;：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">whenCallTraceFunctionalBeforeEndpoint_thenResponseContainsTraceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">EntityExchangeResult</span>``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````` result <span class="token operator">=</span> webTestClient<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">&quot;/trace-functional-before&quot;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">expectStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">expectBody</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">returnResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">String</span> body <span class="token operator">=</span> <span class="token string">&quot;TraceId: FUNCTIONAL-TRACE-ID&quot;</span><span class="token punctuation">;</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getResponseBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-客户端请求拦截和转换" tabindex="-1"><a class="header-anchor" href="#_4-客户端请求拦截和转换"><span>4. 客户端请求拦截和转换</span></a></h2><p>我们将使用 ExchangeFilterFunction 来拦截 Spring WebClient 的客户端请求。</p><h3 id="_4-1-使用-exchangefilterfunction" tabindex="-1"><a class="header-anchor" href="#_4-1-使用-exchangefilterfunction"><span>4.1 使用 ExchangeFilterFunction</span></a></h3><p>ExchangeFilterFunction 与 Spring WebClient 相关。我们使用它来拦截 WebFlux WebClient 的客户端请求。ExchangeFilterFunction 用于在发送之前或接收之后转换请求或响应。</p><p>让我们定义交换过滤器函数以拦截 WebClient 请求并添加一个新的头部 traceId。我们将跟踪所有请求头部以验证 ExchangeFilterFunction：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ExchangeFilterFunction</span> <span class="token function">modifyRequestHeaders</span><span class="token punctuation">(</span><span class="token class-name">MultiValueMap</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`` changedMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>request<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n        <span class="token class-name">ClientRequest</span> clientRequest <span class="token operator">=</span> <span class="token class-name">ClientRequest</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&quot;traceId&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;TRACE-ID&quot;</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        changedMap<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>clientRequest<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> next<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>clientRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于我们定义了过滤器函数，然后我们可以将其附加到 WebClient 实例。这只能在我们创建 WebClient 时完成：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">WebClient</span> <span class="token function">webclient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">WebClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token function">modifyRequestHeaders</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LinkedMultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们可以使用 Wiremock 测试自定义 ExchangeFilterFunction：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RegisterExtension</span>\n<span class="token keyword">static</span> <span class="token class-name">WireMockExtension</span> extension <span class="token operator">=</span> <span class="token class-name">WireMockExtension</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span><span class="token function">wireMockConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dynamicPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dynamicHttpsPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">whenCallEndpoint_thenRequestHeadersModified</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    extension<span class="token punctuation">.</span><span class="token function">stubFor</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">willReturn</span><span class="token punctuation">(</span><span class="token function">aResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withStatus</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">withBody</span><span class="token punctuation">(</span><span class="token string">&quot;SUCCESS&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">MultiValueMap</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`` map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedMultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    <span class="token class-name">WebClient</span> webClient <span class="token operator">=</span> <span class="token class-name">WebClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token function">modifyRequestHeaders</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> receivedResponse <span class="token operator">=</span> <span class="token function">triggerGetRequest</span><span class="token punctuation">(</span>webClient<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">String</span> body <span class="token operator">=</span> <span class="token string">&quot;SUCCESS&quot;</span><span class="token punctuation">;</span>\n    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>receivedResponse<span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;TRACE-ID&quot;</span><span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token string">&quot;traceId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，通过 Wiremock，我们通过检查 MultivalueMap 实例中是否包含新的 traceId 头部来验证 ExchangeFilterFunction。</p><h2 id="_5" tabindex="-1"><a class="header-anchor" href="#_5"><span>5</span></a></h2>',50),c=[e];function o(l,u){return a(),s("div",null,c)}const r=n(p,[["render",o],["__file","How to Intercept a Request and Add Headers in WebFlux.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/How%20to%20Intercept%20a%20Request%20and%20Add%20Headers%20in%20WebFlux.html","title":"如何在 WebFlux 中拦截请求并添加头部信息 | Baeldung","lang":"zh-CN","frontmatter":{"date":"2024-06-19T00:00:00.000Z","category":["Spring WebFlux","Reactive Programming"],"tag":["WebFlux","Interceptor","Headers"],"head":[["meta",{"name":"keywords","content":"Spring WebFlux, Interceptor, Reactive Programming, Headers"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/How%20to%20Intercept%20a%20Request%20and%20Add%20Headers%20in%20WebFlux.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"如何在 WebFlux 中拦截请求并添加头部信息 | Baeldung"}],["meta",{"property":"og:description","content":"如何在 WebFlux 中拦截请求并添加头部信息 | Baeldung 拦截器，也被称为过滤器，是 Spring 的一个特性，允许我们拦截客户端请求。这使我们能够在控制器处理它或向客户端返回响应之前检查和转换请求。 在本教程中，我们将讨论使用 WebFlux 框架拦截客户端请求并添加自定义头部的各种方式。我们首先探索如何为特定端点执行此操作。然后，我们..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-18T16:17:14.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"WebFlux"}],["meta",{"property":"article:tag","content":"Interceptor"}],["meta",{"property":"article:tag","content":"Headers"}],["meta",{"property":"article:published_time","content":"2024-06-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-18T16:17:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"如何在 WebFlux 中拦截请求并添加头部信息 | Baeldung\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-19T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-18T16:17:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"如何在 WebFlux 中拦截请求并添加头部信息 | Baeldung 拦截器，也被称为过滤器，是 Spring 的一个特性，允许我们拦截客户端请求。这使我们能够在控制器处理它或向客户端返回响应之前检查和转换请求。 在本教程中，我们将讨论使用 WebFlux 框架拦截客户端请求并添加自定义头部的各种方式。我们首先探索如何为特定端点执行此操作。然后，我们..."},"headers":[{"level":3,"title":"3.1 使用 WebFilter","slug":"_3-1-使用-webfilter","link":"#_3-1-使用-webfilter","children":[]},{"level":3,"title":"3.2 使用 HandlerFilterFunction","slug":"_3-2-使用-handlerfilterfunction","link":"#_3-2-使用-handlerfilterfunction","children":[]},{"level":3,"title":"3.3 使用自定义 Processor 函数","slug":"_3-3-使用自定义-processor-函数","link":"#_3-3-使用自定义-processor-函数","children":[]},{"level":2,"title":"4. 客户端请求拦截和转换","slug":"_4-客户端请求拦截和转换","link":"#_4-客户端请求拦截和转换","children":[{"level":3,"title":"4.1 使用 ExchangeFilterFunction","slug":"_4-1-使用-exchangefilterfunction","link":"#_4-1-使用-exchangefilterfunction","children":[]}]},{"level":2,"title":"5","slug":"_5","link":"#_5","children":[]}],"git":{"createdTime":1718727434000,"updatedTime":1718727434000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":4.53,"words":1358},"filePathRelative":"posts/baeldung/How to Intercept a Request and Add Headers in WebFlux.md","localizedDate":"2024年6月19日","excerpt":"\\n<p>拦截器，也被称为过滤器，是 Spring 的一个特性，允许我们拦截客户端请求。这使我们能够在控制器处理它或向客户端返回响应之前检查和转换请求。</p>\\n<p>在本教程中，我们将讨论使用 WebFlux 框架拦截客户端请求并添加自定义头部的各种方式。我们首先探索如何为特定端点执行此操作。然后，我们将确定拦截所有传入请求的方法。</p>\\n<p>我们将使用以下 spring-boot-starter-webflux Maven 依赖项，以支持 Spring 框架的响应式 Web 功能：</p>\\n<div class=\\"language-xml\\" data-ext=\\"xml\\" data-title=\\"xml\\"><pre class=\\"language-xml\\"><code>`<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>dependency</span><span class=\\"token punctuation\\">&gt;</span></span>`\\n    `<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>groupId</span><span class=\\"token punctuation\\">&gt;</span></span>`org.springframework.boot`<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>groupId</span><span class=\\"token punctuation\\">&gt;</span></span>`\\n    `<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>artifactId</span><span class=\\"token punctuation\\">&gt;</span></span>`spring-boot-starter-webflux`<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>artifactId</span><span class=\\"token punctuation\\">&gt;</span></span>`\\n    `<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>version</span><span class=\\"token punctuation\\">&gt;</span></span>`3.1.5`<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>version</span><span class=\\"token punctuation\\">&gt;</span></span>`\\n`<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>dependency</span><span class=\\"token punctuation\\">&gt;</span></span>`\\n</code></pre></div>","autoDesc":true}');export{r as comp,d as data};
