import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-DAOx5Ihl.js";const p={},e=t(`<hr><h1 id="从java代码运行maven" tabindex="-1"><a class="header-anchor" href="#从java代码运行maven"><span>从Java代码运行Maven</span></a></h1><p>Maven 是大多数Java项目中不可或缺的工具。它提供了一种方便的方式来运行和配置构建。<strong>然而，在某些情况下，我们需要对过程有更多的控制。</strong> 从Java运行Maven构建使其更加可配置，因为我们可以实时做出许多决策。</p><p>在本教程中，我们将学习如何与Maven交互，并直接从代码中运行构建。</p><h2 id="_2-学习平台" tabindex="-1"><a class="header-anchor" href="#_2-学习平台"><span>2. 学习平台</span></a></h2><p>让我们考虑以下示例，以更好地理解直接从Java使用Maven的目标和有用性：想象一个Java学习平台，学生可以从各种主题中选择并从事作业。</p><p><strong>因为我们的平台主要针对初学者，我们希望尽可能简化整个体验。</strong> 这样，学生就可以选择他们想要的任何主题，甚至可以组合它们。我们在服务器上生成项目，学生可以在线完成。</p><p>从头开始生成项目，我们将使用Apache的_maven-model_库：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\`\`\`
    \`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`\`org.apache.maven\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`\`
    \`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`\`maven-model\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`\`
    \`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\`\`\`3.9.6\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\`\`\`
\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\`\`\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们的构建器将采取简单的步骤，使用初始信息创建POM文件：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProjectBuilder</span> <span class="token punctuation">{</span>
    <span class="token comment">// 常量</span>

    <span class="token keyword">public</span> <span class="token class-name">ProjectBuilder</span> <span class="token function">addDependency</span><span class="token punctuation">(</span><span class="token class-name">String</span> groupId<span class="token punctuation">,</span> <span class="token class-name">String</span> artifactId<span class="token punctuation">,</span> <span class="token class-name">String</span> version<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Dependency</span> dependency <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dependency</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dependency<span class="token punctuation">.</span><span class="token function">setGroupId</span><span class="token punctuation">(</span>groupId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        dependency<span class="token punctuation">.</span><span class="token function">setArtifactId</span><span class="token punctuation">(</span>artifactId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        dependency<span class="token punctuation">.</span><span class="token function">setVersion</span><span class="token punctuation">(</span>version<span class="token punctuation">)</span><span class="token punctuation">;</span>
        dependencies<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dependency<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">ProjectBuilder</span> <span class="token function">setJavaVersion</span><span class="token punctuation">(</span><span class="token class-name">JavaVersion</span> version<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>javaVersion <span class="token operator">=</span> version<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">String</span> userName<span class="token punctuation">,</span> <span class="token class-name">Path</span> projectPath<span class="token punctuation">,</span> <span class="token class-name">String</span> packageName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Model</span> model <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Model</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">configureModel</span><span class="token punctuation">(</span>userName<span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>
        dependencies<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>model<span class="token operator">::</span><span class="token function">addDependency</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Build</span> build <span class="token operator">=</span> <span class="token function">configureJavaVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        model<span class="token punctuation">.</span><span class="token function">setBuild</span><span class="token punctuation">(</span>build<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">MavenXpp3Writer</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MavenXpp3Writer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>projectPath<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token constant">POM_XML</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">generateFolders</span><span class="token punctuation">(</span>projectPath<span class="token punctuation">,</span> <span class="token constant">SRC_TEST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Path</span> generatedPackage <span class="token operator">=</span> <span class="token function">generateFolders</span><span class="token punctuation">(</span>projectPath<span class="token punctuation">,</span>
          <span class="token constant">SRC_MAIN_JAVA</span> <span class="token operator">+</span>
            packageName<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">PACKAGE_DELIMITER</span><span class="token punctuation">,</span> <span class="token class-name">FileSystems</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSeparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> generatedClass <span class="token operator">=</span> <span class="token function">generateMainClass</span><span class="token punctuation">(</span><span class="token constant">PACKAGE</span> <span class="token operator">+</span> packageName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span>generatedPackage<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token constant">MAIN_JAVA</span><span class="token punctuation">)</span><span class="token punctuation">,</span> generatedClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
   <span class="token comment">// 实用方法</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，我们确保所有学生都有正确的环境。其次，我们减少他们需要采取的步骤，从获取作业到开始编码。设置环境可能是微不足道的，但在编写第一个“Hello World”程序之前处理依赖管理和配置可能对初学者来说太多了。</p><p>我们还想引入一个包装器，该包装器将从Java与Maven交互：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Maven</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> <span class="token constant">POM_XML</span> <span class="token operator">=</span> <span class="token string">&quot;pom.xml&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> <span class="token constant">COMPILE_GOAL</span> <span class="token operator">=</span> <span class="token string">&quot;compile&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> <span class="token constant">USE_CUSTOM_POM</span> <span class="token operator">=</span> <span class="token string">&quot;-f&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token constant">OK</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> <span class="token constant">MVN</span> <span class="token operator">=</span> <span class="token string">&quot;mvn&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">compile</span><span class="token punctuation">(</span><span class="token class-name">Path</span> projectFolder<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>目前，这个包装器只会编译项目。然而，我们可以扩展它以包含额外的操作。</p><h2 id="_3-通用执行器" tabindex="-1"><a class="header-anchor" href="#_3-通用执行器"><span>3. 通用执行器</span></a></h2><p>首先，让我们检查我们可以运行简单脚本的工具。<strong>因此，解决方案不是特定于Maven的，但我们可以运行_mvn_命令。</strong> 我们有两个选项：<em>Runtime.exec_和_ProcessBuilder</em>。它们非常相似，以至于我们可以使用一个额外的抽象类来处理异常：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">MavenExecutorAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">Maven</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">compile</span><span class="token punctuation">(</span><span class="token class-name">Path</span> projectFolder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> exitCode<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            exitCode <span class="token operator">=</span> <span class="token function">execute</span><span class="token punctuation">(</span>projectFolder<span class="token punctuation">,</span> <span class="token constant">COMPILE_GOAL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MavenCompilationException</span><span class="token punctuation">(</span><span class="token string">&quot;编译期间中断&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MavenCompilationException</span><span class="token punctuation">(</span><span class="token string">&quot;执行不正确&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>exitCode <span class="token operator">!=</span> <span class="token constant">OK</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MavenCompilationException</span><span class="token punctuation">(</span><span class="token string">&quot;编译失败：&quot;</span> <span class="token operator">+</span> exitCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Path</span> projectFolder<span class="token punctuation">,</span> <span class="token class-name">String</span> compileGoal<span class="token punctuation">)</span>
      <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-1-运行时执行器" tabindex="-1"><a class="header-anchor" href="#_3-1-运行时执行器"><span>3.1. 运行时执行器</span></a></h3><p>让我们看看如何使用_Runtime.exec(String[])_运行一个简单的命令：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MavenRuntimeExec</span> <span class="token keyword">extends</span> <span class="token class-name">MavenExecutorAdapter</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Path</span> projectFolder<span class="token punctuation">,</span> <span class="token class-name">String</span> compileGoal<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arguments <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token constant">MVN</span><span class="token punctuation">,</span> <span class="token constant">USE_CUSTOM_POM</span><span class="token punctuation">,</span> projectFolder<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token constant">POM_XML</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">COMPILE_GOAL</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">Process</span> process <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> process<span class="token punctuation">.</span><span class="token function">waitFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是从Java运行任何脚本和命令的非常直接的方法。</p><h3 id="_3-2-进程构建器" tabindex="-1"><a class="header-anchor" href="#_3-2-进程构建器"><span>3.2. 进程构建器</span></a></h3><p>另一个选择是_ProcessBuilder_。它类似于之前的解决方案，但提供了稍微更好的API：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MavenProcessBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">MavenExecutorAdapter</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ProcessBuilder</span> <span class="token constant">PROCESS_BUILDER</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProcessBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Path</span> projectFolder<span class="token punctuation">,</span> <span class="token class-name">String</span> compileGoal<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Process</span> process <span class="token operator">=</span> <span class="token constant">PROCESS_BUILDER</span>
          <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token constant">MVN</span><span class="token punctuation">,</span> <span class="token constant">USE_CUSTOM_POM</span><span class="token punctuation">,</span> projectFolder<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token constant">POM_XML</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> compileGoal<span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> process<span class="token punctuation">.</span><span class="token function">waitFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从Java 9开始，_ProcessBuilder_可以使用类似于_Streams_的管道。这样，我们可以运行构建并触发额外的处理。</p><h2 id="_4-maven-api" tabindex="-1"><a class="header-anchor" href="#_4-maven-api"><span>4. Maven API</span></a></h2><p>现在，让我们考虑为Maven量身定制的解决方案。有两个选项：<em>MavenEmbedder_和_MavenInvoker</em>。</p><h3 id="_4-1-mavenembedder" tabindex="-1"><a class="header-anchor" href="#_4-1-mavenembedder"><span>4.1. <em>MavenEmbedder</em></span></a></h3><p>虽然之前的解决方案不需要任何额外的依赖项，但对于这个，我们需要使用以下包：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\`\`\`
    \`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`\`org.apache.maven\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`\`
    \`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`\`maven-embedder\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`\`
    \`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\`\`\`3.9.6\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\`\`\`
\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\`\`\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个库为我们提供了一个高级API，并简化了与Maven的交互：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MavenEmbedder</span> <span class="token keyword">implements</span> <span class="token class-name">Maven</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">MVN_HOME</span> <span class="token operator">=</span> <span class="token string">&quot;maven.multiModuleProjectDirectory&quot;</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">compile</span><span class="token punctuation">(</span><span class="token class-name">Path</span> projectFolder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">MavenCli</span> cli <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MavenCli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token constant">MVN_HOME</span><span class="token punctuation">,</span> projectFolder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cli<span class="token punctuation">.</span><span class="token function">doMain</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token constant">COMPILE_GOAL</span><span class="token punctuation">}</span><span class="token punctuation">,</span> projectFolder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-maveninvoker" tabindex="-1"><a class="header-anchor" href="#_4-2-maveninvoker"><span>4.2. <em>MavenInvoker</em></span></a></h3><p>类似于_MavenEmbedder_的另一个工具是_MavenInvoker_。要使用它，我们还需要导入一个库：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\`\`\`
    \`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`\`org.apache.maven.shared\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`\`
    \`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`\`maven-invoker\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`\`
    \`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\`\`\`3.2.0\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\`\`\`
\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\`\`\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它也提供了一个不错的高级API用于交互：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MavenInvoker</span> <span class="token keyword">implements</span> <span class="token class-name">Maven</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">compile</span><span class="token punctuation">(</span><span class="token class-name">Path</span> projectFolder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">InvocationRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultInvocationRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        request<span class="token punctuation">.</span><span class="token function">setPomFile</span><span class="token punctuation">(</span>projectFolder<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token constant">POM_XML</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        request<span class="token punctuation">.</span><span class="token function">setGoals</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span><span class="token class-name">Maven</span><span class="token punctuation">.</span><span class="token constant">COMPILE_GOAL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Invoker</span> invoker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultInvoker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">InvocationResult</span> result <span class="token operator">=</span> invoker<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getExitCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MavenCompilationException</span><span class="token punctuation">(</span><span class="token string">&quot;构建失败&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">getExecutionException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MavenInvocationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MavenCompilationException</span><span class="token punctuation">(</span><span class="token string">&quot;Maven调用期间异常&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-测试" tabindex="-1"><a class="header-anchor" href="#_5-测试"><span>5. 测试</span></a></h2><p>现在，我们可以确保我们创建并编译了一个项目：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">MavenRuntimeExecUnitTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">PACKAGE_NAME</span> <span class="token operator">=</span> <span class="token string">&quot;com.baeldung.generatedcode&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">USER_NAME</span> <span class="token operator">=</span> <span class="token string">&quot;john_doe&quot;</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@TempDir</span>
    <span class="token keyword">private</span> <span class="token class-name">Path</span> tempDir<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@BeforeEach</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">ProjectBuilder</span> projectBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProjectBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        projectBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token constant">USER_NAME</span><span class="token punctuation">,</span> tempDir<span class="token punctuation">,</span> <span class="token constant">PACKAGE_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@ParameterizedTest</span>
    <span class="token annotation punctuation">@MethodSource</span>
    <span class="token keyword">void</span> <span class="token function">givenMavenInterface_whenCompileMavenProject_thenCreateTargetDirectory</span><span class="token punctuation">(</span><span class="token class-name">Maven</span> maven<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        maven<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>tempDir<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>tempDir<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token class-name">Stream</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Maven</span><span class="token punctuation">&gt;</span></span>\` <span class="token function">givenMavenInterface_whenCompileMavenProject_thenCreateTargetDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>
          <span class="token keyword">new</span> <span class="token class-name">MavenRuntimeExec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token keyword">new</span> <span class="token class-name">MavenProcessBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token keyword">new</span> <span class="token class-name">MavenEmbedder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token keyword">new</span> <span class="token class-name">MavenInvoker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>我们从头开始生成了一个对象，并直接从Java代码编译了它。</strong> 尽管我们不是每天都遇到这样的需求，但自动化Maven流程可能会使一些项目受益。</p><h2 id="_6-结论" tabindex="-1"><a class="header-anchor" href="#_6-结论"><span><strong>6. 结论</strong></span></a></h2><p>Maven根据POM文件配置和构建项目。然而，XML配置不适用于动态参数和条件逻辑。</p><p><strong>我们可以利用Java代码通过直接从代码中运行来设置Maven构建。</strong> 实现这一点的最佳方式是使用特定的库，如_MavenEmbedder_或_MavenInvoker_。同时，还有一些更底层的方法可以获得类似的结果。</p><p>像往常一样，</p>`,46),o=[e];function c(l,i){return a(),s("div",null,o)}const r=n(p,[["render",c],["__file","2024-06-22-Run Maven From Java Code.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-06-22/2024-06-22-Run%20Maven%20From%20Java%20Code.html","title":"从Java代码运行Maven","lang":"zh-CN","frontmatter":{"date":"2024-06-23T00:00:00.000Z","category":["Java","Maven"],"tag":["Maven","Java"],"head":[["meta",{"name":"keywords","content":"Maven, Java, 编程"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-06-22/2024-06-22-Run%20Maven%20From%20Java%20Code.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"从Java代码运行Maven"}],["meta",{"property":"og:description","content":"从Java代码运行Maven Maven 是大多数Java项目中不可或缺的工具。它提供了一种方便的方式来运行和配置构建。然而，在某些情况下，我们需要对过程有更多的控制。 从Java运行Maven构建使其更加可配置，因为我们可以实时做出许多决策。 在本教程中，我们将学习如何与Maven交互，并直接从代码中运行构建。 2. 学习平台 让我们考虑以下示例，以..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-22T17:30:43.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Maven"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2024-06-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-22T17:30:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"从Java代码运行Maven\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-23T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-22T17:30:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"从Java代码运行Maven Maven 是大多数Java项目中不可或缺的工具。它提供了一种方便的方式来运行和配置构建。然而，在某些情况下，我们需要对过程有更多的控制。 从Java运行Maven构建使其更加可配置，因为我们可以实时做出许多决策。 在本教程中，我们将学习如何与Maven交互，并直接从代码中运行构建。 2. 学习平台 让我们考虑以下示例，以..."},"headers":[{"level":2,"title":"2. 学习平台","slug":"_2-学习平台","link":"#_2-学习平台","children":[]},{"level":2,"title":"3. 通用执行器","slug":"_3-通用执行器","link":"#_3-通用执行器","children":[{"level":3,"title":"3.1. 运行时执行器","slug":"_3-1-运行时执行器","link":"#_3-1-运行时执行器","children":[]},{"level":3,"title":"3.2. 进程构建器","slug":"_3-2-进程构建器","link":"#_3-2-进程构建器","children":[]}]},{"level":2,"title":"4. Maven API","slug":"_4-maven-api","link":"#_4-maven-api","children":[{"level":3,"title":"4.1. MavenEmbedder","slug":"_4-1-mavenembedder","link":"#_4-1-mavenembedder","children":[]},{"level":3,"title":"4.2. MavenInvoker","slug":"_4-2-maveninvoker","link":"#_4-2-maveninvoker","children":[]}]},{"level":2,"title":"5. 测试","slug":"_5-测试","link":"#_5-测试","children":[]},{"level":2,"title":"6. 结论","slug":"_6-结论","link":"#_6-结论","children":[]}],"git":{"createdTime":1719077443000,"updatedTime":1719077443000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":4.74,"words":1421},"filePathRelative":"posts/baeldung/2024-06-22/2024-06-22-Run Maven From Java Code.md","localizedDate":"2024年6月23日","excerpt":"<hr>\\n<h1>从Java代码运行Maven</h1>\\n<p>Maven 是大多数Java项目中不可或缺的工具。它提供了一种方便的方式来运行和配置构建。<strong>然而，在某些情况下，我们需要对过程有更多的控制。</strong> 从Java运行Maven构建使其更加可配置，因为我们可以实时做出许多决策。</p>\\n<p>在本教程中，我们将学习如何与Maven交互，并直接从代码中运行构建。</p>\\n<h2>2. 学习平台</h2>\\n<p>让我们考虑以下示例，以更好地理解直接从Java使用Maven的目标和有用性：想象一个Java学习平台，学生可以从各种主题中选择并从事作业。</p>\\n<p><strong>因为我们的平台主要针对初学者，我们希望尽可能简化整个体验。</strong> 这样，学生就可以选择他们想要的任何主题，甚至可以组合它们。我们在服务器上生成项目，学生可以在线完成。</p>","autoDesc":true}');export{r as comp,d as data};
