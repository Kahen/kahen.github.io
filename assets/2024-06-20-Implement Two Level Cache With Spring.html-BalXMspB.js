import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-CnPmfeyP.js";const e={},p=t('<hr><h1 id="使用spring实现两级缓存" tabindex="-1"><a class="header-anchor" href="#使用spring实现两级缓存"><span>使用Spring实现两级缓存</span></a></h1><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p>缓存数据意味着我们的应用程序不必访问较慢的存储层，从而提高它们的性能和响应能力。我们可以使用任何内存实现库来实现缓存，比如Caffeine。</p><p><strong>尽管这样做提高了数据检索的性能，但如果应用程序部署到多个副本集上，那么缓存就不会在实例之间共享</strong>。为了克服这个问题，我们可以引入一个所有实例都可以访问的分布式缓存层。</p><p>在本教程中，我们将学习如何在Spring中实现两级缓存机制。我们将展示如何使用Spring的缓存支持来实现这两个层，并演示当本地缓存层发生缓存未命中时，分布式缓存层是如何被调用的。</p><h2 id="_2-spring-boot中的示例应用程序" tabindex="-1"><a class="header-anchor" href="#_2-spring-boot中的示例应用程序"><span>2. Spring Boot中的示例应用程序</span></a></h2><p>让我们想象我们需要构建一个简单的应用程序，该程序调用数据库来获取一些数据。</p><h3 id="_2-1-maven依赖项" tabindex="-1"><a class="header-anchor" href="#_2-1-maven依赖项"><span>2.1. Maven依赖项</span></a></h3><p>首先，让我们包括<code>spring-boot-starter-web</code>依赖项：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>````org.springframework.boot````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>````spring-boot-starter-web````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>````3.1.5````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>````\n````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-实现spring服务" tabindex="-1"><a class="header-anchor" href="#_2-2-实现spring服务"><span>2.2. 实现Spring服务</span></a></h3><p>我们将实现一个从存储库中获取数据的Spring服务。</p><p>首先，让我们模拟<code>Customer</code>类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>\n    <span class="token comment">// 标准getter和setter</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后让我们实现<code>CustomerService</code>类和<code>getCustomer</code>方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerService</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">CustomerRepository</span> customerRepository<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Customer</span> <span class="token function">getCustomer</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> customerRepository<span class="token punctuation">.</span><span class="token function">getCustomerById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，让我们定义<code>CustomerRepository</code>接口：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CustomerRepository</span> <span class="token keyword">extends</span> <span class="token class-name">CrudRepository</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Customer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>` <span class="token punctuation">{</span> <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在我们将实现两级缓存。</p><h2 id="_3-实现第一级缓存" tabindex="-1"><a class="header-anchor" href="#_3-实现第一级缓存"><span>3. 实现第一级缓存</span></a></h2><p>我们将利用Spring的缓存支持和Caffeine库来实现第一级缓存层。</p><h3 id="_3-1-caffeine依赖项" tabindex="-1"><a class="header-anchor" href="#_3-1-caffeine依赖项"><span>3.1. Caffeine依赖项</span></a></h3><p>让我们包括<code>spring-boot-starter-cache</code>和<code>caffeine</code>依赖项：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>````org.springframework.boot````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>````spring-boot-starter-cache````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>````3.1.5````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>````\n````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>````com.github.ben-manes.caffeine````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>````caffeine````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>````3.1.8````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>````\n````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-启用caffeine缓存" tabindex="-1"><a class="header-anchor" href="#_3-2-启用caffeine缓存"><span>3.2. 启用Caffeine缓存</span></a></h3><p>为了启用Caffeine缓存，我们需要添加一些与缓存相关的配置。</p><p>首先，我们将在<code>CacheConfig</code>类中添加<code>@EnableCaching</code>注解，并包括一些Caffeine缓存配置：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>\n<span class="token annotation punctuation">@EnableCaching</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CacheConfig</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Bean</span>\n    <span class="token keyword">public</span> <span class="token class-name">CaffeineCache</span> <span class="token function">caffeineCacheConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CaffeineCache</span><span class="token punctuation">(</span><span class="token string">&quot;customerCache&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Caffeine</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">expireAfterWrite</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMinutes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">initialCapacity</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">maximumSize</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们将使用<code>SimpleCacheManager</code>类添加<code>CaffeineCacheManager</code> bean并设置缓存配置：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">CacheManager</span> <span class="token function">caffeineCacheManager</span><span class="token punctuation">(</span><span class="token class-name">CaffeineCache</span> caffeineCache<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">SimpleCacheManager</span> manager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleCacheManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    manager<span class="token punctuation">.</span><span class="token function">setCaches</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>caffeineCache<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> manager<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-包含-cacheable注解" tabindex="-1"><a class="header-anchor" href="#_3-3-包含-cacheable注解"><span>3.3. 包含@Cacheable注解</span></a></h3><p>为了启用上述缓存，我们需要在<code>getCustomer</code>方法中添加<code>@Cacheable</code>注解：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">&quot;customerCache&quot;</span><span class="token punctuation">,</span> cacheManager <span class="token operator">=</span> <span class="token string">&quot;caffeineCacheManager&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">Customer</span> <span class="token function">getCustomer</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如前所述，<strong>这在单实例部署环境中工作得很好，但当应用程序使用多个副本运行时，效果并不理想</strong>。</p><h2 id="_4-实现第二级缓存" tabindex="-1"><a class="header-anchor" href="#_4-实现第二级缓存"><span>4. 实现第二级缓存</span></a></h2><p>我们将使用Redis服务器实现第二级缓存。当然，我们也可以像使用Memcached一样使用任何其他分布式缓存。</p><h3 id="_4-1-redis依赖项" tabindex="-1"><a class="header-anchor" href="#_4-1-redis依赖项"><span>4.1. Redis依赖项</span></a></h3><p>让我们添加<code>spring-boot-starter-redis</code>依赖项：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>````org.springframework.boot````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>````spring-boot-starter-data-redis````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>````3.1.5````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>````\n````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-启用redis缓存" tabindex="-1"><a class="header-anchor" href="#_4-2-启用redis缓存"><span>4.2. 启用Redis缓存</span></a></h3><p>我们需要添加Redis缓存相关的配置以在应用程序中启用它。</p><p>首先，让我们使用一些属性配置<code>RedisCacheConfiguration</code> bean：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">RedisCacheConfiguration</span> <span class="token function">cacheConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">RedisCacheConfiguration</span><span class="token punctuation">.</span><span class="token function">defaultCacheConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">entryTtl</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMinutes</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">disableCachingNullValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">serializeValuesWith</span><span class="token punctuation">(</span><span class="token class-name">RedisSerializationContext<span class="token punctuation">.</span>SerializationPair</span><span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后让我们使用<code>RedisCacheManager</code>类启用<code>CacheManager</code>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">CacheManager</span> <span class="token function">redisCacheManager</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> connectionFactory<span class="token punctuation">,</span> <span class="token class-name">RedisCacheConfiguration</span> cacheConfiguration<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">RedisCacheManager<span class="token punctuation">.</span>RedisCacheManagerBuilder</span>\n      <span class="token punctuation">.</span><span class="token function">fromConnectionFactory</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">withCacheConfiguration</span><span class="token punctuation">(</span><span class="token string">&quot;customerCache&quot;</span><span class="token punctuation">,</span> cacheConfiguration<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-包含-caching和-cacheable注解" tabindex="-1"><a class="header-anchor" href="#_4-3-包含-caching和-cacheable注解"><span>4.3. 包含@Caching和@Cacheable注解</span></a></h3><p>我们将使用<code>@Caching</code>和<code>@Cacheable</code>注解在<code>getCustomer</code>方法中包含第二级缓存：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Caching</span><span class="token punctuation">(</span>cacheable <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">&quot;customerCache&quot;</span><span class="token punctuation">,</span> cacheManager <span class="token operator">=</span> <span class="token string">&quot;caffeineCacheManager&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">&quot;customerCache&quot;</span><span class="token punctuation">,</span> cacheManager <span class="token operator">=</span> <span class="token string">&quot;redisCacheManager&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">Customer</span> <span class="token function">getCustomer</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们应该注意到<strong>Spring将从第一个可用的缓存中获取缓存对象</strong>。<strong>如果两个缓存管理器都未命中，它将运行实际的方法</strong>。</p><h2 id="_5-实施集成测试" tabindex="-1"><a class="header-anchor" href="#_5-实施集成测试"><span>5. 实施集成测试</span></a></h2><p>为了验证我们的设置，我们将实施一些集成测试并验证两个缓存。</p><p>首先，我们将创建一个集成测试来使用嵌入式Redis服务器验证两个缓存：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenCustomerIsPresent_whenGetCustomerCalled_thenReturnCustomerAndCacheIt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> <span class="token constant">CUSTOMER_ID</span> <span class="token operator">=</span> <span class="token string">&quot;100&quot;</span><span class="token punctuation">;</span>\n    <span class="token class-name">Customer</span> customer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token constant">CUSTOMER_ID</span><span class="token punctuation">,</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test@mail.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">given</span><span class="token punctuation">(</span>customerRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token constant">CUSTOMER_ID</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">willReturn</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">Customer</span> customerCacheMiss <span class="token operator">=</span> customerService<span class="token punctuation">.</span><span class="token function">getCustomer</span><span class="token punctuation">(</span><span class="token constant">CUSTOMER_ID</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">assertThat</span><span class="token punctuation">(</span>customerCacheMiss<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">verify</span><span class="token punctuation">(</span>customerRepository<span class="token punctuation">,</span> <span class="token function">times</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token constant">CUSTOMER_ID</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertThat</span><span class="token punctuation">(</span>caffeineCacheManager<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token string">&quot;customerCache&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">CUSTOMER_ID</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertThat</span><span class="token punctuation">(</span>redisCacheManager<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token string">&quot;customerCache&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">CUSTOMER_ID</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将运行上述测试用例并发现它运行良好。</p><p>接下来，让我们想象一个场景，第一级缓存数据由于过期而被逐出，我们将尝试获取同一个客户。那么它应该是第二级缓存，Redis的缓存命中。对于同一个客户的任何进一步的缓存命中应该是第一级缓存。</p><p>让我们实现上述测试场景，以检查本地缓存过期后两个缓存的情况：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenCustomerIsPresent_whenGetCustomerCalledTwiceAndFirstCacheExpired_thenReturnCustomerAndCacheIt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> <span class="token constant">CUSTOMER_ID</span> <span class="token operator">=</span> <span class="token string">&quot;102&quot;</span><span class="token punctuation">;</span>\n    <span class="token class-name">Customer</span> customer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token constant">CUSTOMER_ID</span><span class="token punctuation">,</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test@mail.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">given</span><span class="token punctuation">(</span>customerRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token constant">CUSTOMER_ID</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">willReturn</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">Customer</span> customerCacheMiss <span class="token operator">=</span> customerService<span class="token punctuation">.</span><span class="token function">getCustomer</span><span class="token punctuation">(</span><span class="token constant">CUSTOMER_ID</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Customer</span> customerCacheHit <span class="token operator">=</span> customerService<span class="token punctuation">.</span><span class="token function">getCustomer</span><span class="token punctuation">(</span><span class="token constant">CUSTOMER_ID</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">verify</span><span class="token punctuation">(</span>customerRepository<span class="token punctuation">,</span> <span class="token function">times</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token constant">CUSTOMER_ID</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertThat</span><span class="token punctuation">(</span>customerCacheMiss<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertThat</span><span class="token punctuation">(</span>customerCacheHit<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertThat</span><span class="token punctuation">(</span>caffeineCacheManager<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token string">&quot;customerCache&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">CUSTOMER_ID</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertThat</span><span class="token punctuation">(</span>redisCacheManager<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token string">&quot;customerCache&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">CUSTOMER_ID</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们运行上述测试时，我们将看到<strong>Caffeine缓存对象的一个意外的断言错误</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>opentest4j<span class="token punctuation">.</span></span>AssertionFailedError</span><span class="token operator">:</span>\nexpected<span class="token operator">:</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">102</span><span class="token punctuation">,</span> name<span class="token operator">=</span>test<span class="token punctuation">,</span> email<span class="token operator">=</span>test<span class="token annotation punctuation">@mail.com</span><span class="token punctuation">)</span>\nbut was<span class="token operator">:</span> <span class="token keyword">null</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\nat <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>baeldung<span class="token punctuation">.</span>caching<span class="token punctuation">.</span>twolevelcaching<span class="token punctuation">.</span></span>CustomerServiceCachingIntegrationTest</span><span class="token punctuation">.</span><span class="token function">givenCustomerIsPresent_whenGetCustomerCalledTwiceAndFirstCacheExpired_thenReturnCustomerAndCacheIt</span><span class="token punctuation">(</span><span class="token class-name">CustomerServiceCachingIntegrationTest</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">91</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上述日志中，很明显Caffeine缓存在逐出后没有客户对象，即使我们再次调用相同的方法，它也没有从第二级缓存中恢复。这不是这种情况的理想情况，因为每次第一级缓存过期，它就不会更新，直到第二级缓存也过期。这会给Redis缓存增加额外的负载。</p><p><strong>我们应该注意到，即使它们为相同的方法声明，Spring也不会管理多个缓存之间的任何数据</strong>。</p><p>这告诉我们<strong>我们需要在再次访问时更新第一级缓存</strong>。</p><h2 id="_6-实现自定义cacheinterceptor" tabindex="-1"><a class="header-anchor" href="#_6-实现自定义cacheinterceptor"><span>6. 实现自定义<code>CacheInterceptor</code></span></a></h2><p>为了更新第一级缓存，我们需要实现一个自定义的缓存拦截器来拦截每次缓存被访问。</p><p>我们将添加一个拦截器来检查当前缓存类是否为<code>Redis</code>类型，如果本地缓存不存在，则可以更新缓存值。</p><p>让我们通过重写<code>doGet</code>方法来实现自定义的<code>CacheInterceptor</code>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerCacheInterceptor</span> <span class="token keyword">extends</span> <span class="token class-name">CacheInterceptor</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">CacheManager</span> caffeineCacheManager<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">protected</span> <span class="token class-name">Cache<span class="token punctuation">.</span>ValueWrapper</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">Cache</span> cache<span class="token punctuation">,</span> <span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Cache<span class="token punctuation">.</span>ValueWrapper</span> existingCacheValue <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>cache<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>existingCacheValue <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> cache<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">RedisCache</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">Cache</span> caffeineCache <span class="token operator">=</span> caffeineCacheManager<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>caffeineCache <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                caffeineCache<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> existingCacheValue<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">return</span> existingCacheValue<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们还需要注册<code>CustomerCacheInterceptor</code> bean以启用它：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">CacheInterceptor</span> <span class="token function">cacheInterceptor</span><span class="token punctuation">(</span><span class="token class-name">CacheManager</span> caffeineCacheManager<span class="token punctuation">,</span> <span class="token class-name">CacheOperationSource</span> cacheOperationSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">CacheInterceptor</span> interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomerCacheInterceptor</span><span class="token punctuation">(</span>caffeineCacheManager<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    interceptor<span class="token punctuation">.</span><span class="token function">setCacheOperationSources</span><span class="token punctuation">(</span>cacheOperationSource<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> interceptor<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">CacheOperationSource</span> <span class="token function">cacheOperationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationCacheOperationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>我们应该注意到，自定义拦截器将在Spring代理方法内部调用获取缓存方法时拦截调用</strong>。</p><p>我们将重新运行集成测试，并看到上述测试用例通过。</p><h2 id="_7-结论" tabindex="-1"><a class="header-anchor" href="#_7-结论"><span>7. 结论</span></a></h2><p>在本文中，我们学习了如何使用Spring的缓存支持和Caffeine与Redis实现两级缓存。我们还演示了如何通过自定义缓存拦截器实现更新第一级Caffeine缓存。</p><p>如往常一样，示例代码可以在GitHub上找到。</p><p>OK</p>',76),c=[p];function o(i,l){return s(),a("div",null,c)}const k=n(e,[["render",o],["__file","2024-06-20-Implement Two Level Cache With Spring.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/Archive/2024-06-20-Implement%20Two%20Level%20Cache%20With%20Spring.html","title":"使用Spring实现两级缓存","lang":"zh-CN","frontmatter":{"date":"2024-06-21T00:00:00.000Z","category":["Spring Framework","Caching"],"tag":["Spring Boot","Caffeine","Redis"],"head":[["meta",{"name":"keywords","content":"Spring, Caching, Two-Level Cache, Performance Optimization"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/Archive/2024-06-20-Implement%20Two%20Level%20Cache%20With%20Spring.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"使用Spring实现两级缓存"}],["meta",{"property":"og:description","content":"使用Spring实现两级缓存 1. 概述 缓存数据意味着我们的应用程序不必访问较慢的存储层，从而提高它们的性能和响应能力。我们可以使用任何内存实现库来实现缓存，比如Caffeine。 尽管这样做提高了数据检索的性能，但如果应用程序部署到多个副本集上，那么缓存就不会在实例之间共享。为了克服这个问题，我们可以引入一个所有实例都可以访问的分布式缓存层。 在本..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-21T09:54:56.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Spring Boot"}],["meta",{"property":"article:tag","content":"Caffeine"}],["meta",{"property":"article:tag","content":"Redis"}],["meta",{"property":"article:published_time","content":"2024-06-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-21T09:54:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用Spring实现两级缓存\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-21T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-21T09:54:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"使用Spring实现两级缓存 1. 概述 缓存数据意味着我们的应用程序不必访问较慢的存储层，从而提高它们的性能和响应能力。我们可以使用任何内存实现库来实现缓存，比如Caffeine。 尽管这样做提高了数据检索的性能，但如果应用程序部署到多个副本集上，那么缓存就不会在实例之间共享。为了克服这个问题，我们可以引入一个所有实例都可以访问的分布式缓存层。 在本..."},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. Spring Boot中的示例应用程序","slug":"_2-spring-boot中的示例应用程序","link":"#_2-spring-boot中的示例应用程序","children":[{"level":3,"title":"2.1. Maven依赖项","slug":"_2-1-maven依赖项","link":"#_2-1-maven依赖项","children":[]},{"level":3,"title":"2.2. 实现Spring服务","slug":"_2-2-实现spring服务","link":"#_2-2-实现spring服务","children":[]}]},{"level":2,"title":"3. 实现第一级缓存","slug":"_3-实现第一级缓存","link":"#_3-实现第一级缓存","children":[{"level":3,"title":"3.1. Caffeine依赖项","slug":"_3-1-caffeine依赖项","link":"#_3-1-caffeine依赖项","children":[]},{"level":3,"title":"3.2. 启用Caffeine缓存","slug":"_3-2-启用caffeine缓存","link":"#_3-2-启用caffeine缓存","children":[]},{"level":3,"title":"3.3. 包含@Cacheable注解","slug":"_3-3-包含-cacheable注解","link":"#_3-3-包含-cacheable注解","children":[]}]},{"level":2,"title":"4. 实现第二级缓存","slug":"_4-实现第二级缓存","link":"#_4-实现第二级缓存","children":[{"level":3,"title":"4.1. Redis依赖项","slug":"_4-1-redis依赖项","link":"#_4-1-redis依赖项","children":[]},{"level":3,"title":"4.2. 启用Redis缓存","slug":"_4-2-启用redis缓存","link":"#_4-2-启用redis缓存","children":[]},{"level":3,"title":"4.3. 包含@Caching和@Cacheable注解","slug":"_4-3-包含-caching和-cacheable注解","link":"#_4-3-包含-caching和-cacheable注解","children":[]}]},{"level":2,"title":"5. 实施集成测试","slug":"_5-实施集成测试","link":"#_5-实施集成测试","children":[]},{"level":2,"title":"6. 实现自定义CacheInterceptor","slug":"_6-实现自定义cacheinterceptor","link":"#_6-实现自定义cacheinterceptor","children":[]},{"level":2,"title":"7. 结论","slug":"_7-结论","link":"#_7-结论","children":[]}],"git":{"createdTime":1718963696000,"updatedTime":1718963696000,"contributors":[{"name":"Lance Li","email":"lance.jx.li@gtomato.com","commits":1}]},"readingTime":{"minutes":6,"words":1799},"filePathRelative":"posts/baeldung/Archive/2024-06-20-Implement Two Level Cache With Spring.md","localizedDate":"2024年6月21日","excerpt":"<hr>\\n<h1>使用Spring实现两级缓存</h1>\\n<h2>1. 概述</h2>\\n<p>缓存数据意味着我们的应用程序不必访问较慢的存储层，从而提高它们的性能和响应能力。我们可以使用任何内存实现库来实现缓存，比如Caffeine。</p>\\n<p><strong>尽管这样做提高了数据检索的性能，但如果应用程序部署到多个副本集上，那么缓存就不会在实例之间共享</strong>。为了克服这个问题，我们可以引入一个所有实例都可以访问的分布式缓存层。</p>\\n<p>在本教程中，我们将学习如何在Spring中实现两级缓存机制。我们将展示如何使用Spring的缓存支持来实现这两个层，并演示当本地缓存层发生缓存未命中时，分布式缓存层是如何被调用的。</p>","autoDesc":true}');export{k as comp,d as data};
