import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-Bx_7oN2A.js";const e={},p=t('<h1 id="kotlin中读取yaml内容指南" tabindex="-1"><a class="header-anchor" href="#kotlin中读取yaml内容指南"><span>Kotlin中读取YAML内容指南</span></a></h1><p>YAML（YAML Ain’t Markup Language）是一种人类可读的数据序列化格式，通常用于配置文件。官方的Kotlin库kotlinx-serialization并不直接支持YAML格式。然而，有一些社区支持的库，比如kaml和YamlKt，它们内部使用kotlinx-serialization来支持YAML格式。</p><p>在本文中，我们将<strong>学习在Kotlin中读取YAML内容的反序列化过程</strong>。</p><h2 id="_2-依赖设置" tabindex="-1"><a class="header-anchor" href="#_2-依赖设置"><span>2. 依赖设置</span></a></h2><p>首先，让我们<strong>在项目的pom.xml中添加kaml-jvm依赖</strong>：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```com.charleskorn.kaml```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```kaml-jvm```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```0.58.0```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，也让我们<strong>添加yamlkt-jvm依赖</strong>：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```net.mamoe.yamlkt```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```yamlkt-jvm```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```0.13.0```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们必须在Kotlin编译插件中<strong>配置序列化插件</strong>：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sourceDirectory</span><span class="token punctuation">&gt;</span></span>`src/main/kotlin`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sourceDirectory</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>testSourceDirectory</span><span class="token punctuation">&gt;</span></span>`src/test/kotlin`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>testSourceDirectory</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>`\n        ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>``\n            ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```org.jetbrains.kotlin```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n            ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```kotlin-maven-plugin```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n            ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```${kotlin.version}```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n            `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">&gt;</span></span>`\n                ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">&gt;</span></span>``\n                    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>``compile``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>``\n                    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">&gt;</span></span>``compile``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">&gt;</span></span>``\n                    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">&gt;</span></span>``\n                        ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">&gt;</span></span>``compile``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">&gt;</span></span>``\n                    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">&gt;</span></span>``\n                ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">&gt;</span></span>``\n                ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">&gt;</span></span>``\n                    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>``test-compile``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>``\n                    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">&gt;</span></span>``test-compile``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">&gt;</span></span>``\n                    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">&gt;</span></span>``\n                        ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">&gt;</span></span>``test-compile``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">&gt;</span></span>``\n                    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">&gt;</span></span>``\n                ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">&gt;</span></span>``\n            `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">&gt;</span></span>`\n            `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>`\n                `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>compilerPlugins</span><span class="token punctuation">&gt;</span></span>`\n                    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>``kotlinx-serialization``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>``\n                `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>compilerPlugins</span><span class="token punctuation">&gt;</span></span>`\n            `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>`\n        ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>``\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们必须使用兼容的最新版本的库和插件。</p><h2 id="_3-读取标量值" tabindex="-1"><a class="header-anchor" href="#_3-读取标量值"><span>3. 读取标量值</span></a></h2><p>标量值如字符串、数字、布尔值和null是YAML中最简单的数据形式。在本节中，让我们学习如何读取标量值。</p><h3 id="_3-1-使用kaml" tabindex="-1"><a class="header-anchor" href="#_3-1-使用kaml"><span>3.1. 使用kaml</span></a></h3><p>让我们<strong>创建com.charleskorn.kaml.Yaml类的实例</strong>，使用库的默认行为：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> yamlDefault <span class="token operator">=</span> com<span class="token punctuation">.</span>charleskorn<span class="token punctuation">.</span>kaml<span class="token punctuation">.</span>Yaml<span class="token punctuation">.</span>default\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们也将在后面的章节中重用这个实例。</p><p>现在，让我们<strong>使用decodeFromString()方法来解码scalarStringYamlStr的值</strong>：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> scalarStringYamlStr <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Hello!&quot;</span></span>\n<span class="token keyword">val</span> parsedData<span class="token operator">:</span> String <span class="token operator">=</span> yamlDefault<span class="token punctuation">.</span><span class="token function">decodeFromString</span><span class="token punctuation">(</span>scalarStringYamlStr<span class="token punctuation">)</span>\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello!&quot;</span></span><span class="token punctuation">,</span> parsedData<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它正确地解析了。</p><p>或者，我们可以使用<strong>parseToYamlNode()函数将内容解析为YamlScalar值</strong>：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> parsedData<span class="token operator">:</span> YamlScalar <span class="token operator">=</span> yamlDefault<span class="token punctuation">.</span><span class="token function">parseToYamlNode</span><span class="token punctuation">(</span>scalarStringYamlStr<span class="token punctuation">)</span><span class="token punctuation">.</span>yamlScalar\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;k1&quot;</span></span><span class="token punctuation">,</span> parsedData<span class="token punctuation">.</span>content<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用YamlNode的yamlScalar属性来提取标量值。进一步地，我们使用YamlScalar的内容属性来提取parsedData对象的内容。</p><p>类似地，我们可以解析其他标量值，如数字、布尔值和null。</p><h3 id="_3-2-使用yamlkt" tabindex="-1"><a class="header-anchor" href="#_3-2-使用yamlkt"><span>3.2. 使用YamlKt</span></a></h3><p>要使用YamlKt来反序列化YAML内容，我们必须创建net.mamoe.yamlkt.Yaml类的实例：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> yamlDefault <span class="token operator">=</span> net<span class="token punctuation">.</span>mamoe<span class="token punctuation">.</span>yamlkt<span class="token punctuation">.</span>Yaml<span class="token punctuation">.</span>Default\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们<strong>使用库的默认配置来创建yamlDefault</strong>。</p><p>像之前一样，我们可以使用decodeFromString()方法来获取scalarStringYamlStr字符串的内容：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> scalarStringYamlStr <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Hello!&quot;</span></span>\n<span class="token keyword">val</span> parsedData<span class="token operator">:</span> String <span class="token operator">=</span> yamlDefault<span class="token punctuation">.</span><span class="token function">decodeFromString</span><span class="token punctuation">(</span>scalarStringYamlStr<span class="token punctuation">)</span>\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello!&quot;</span></span><span class="token punctuation">,</span> parsedData<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看起来我们做对了这个！</p><p>另外，重要的是要注意，两个库中的<strong>Yaml类实现了SerialFormat接口，该接口定义了decodeFromString()函数</strong>。因此，我们正在使用库特定的decodeFromString()实现来解析标量值。</p><h2 id="_4-读取列表" tabindex="-1"><a class="header-anchor" href="#_4-读取列表"><span>4. 读取列表</span></a></h2><p>在本节中，我们将学习如何使用YAML列表数据类型读取项目集合。</p><h3 id="_4-1-块风格和流风格" tabindex="-1"><a class="header-anchor" href="#_4-1-块风格和流风格"><span>4.1. 块风格和流风格</span></a></h3><p>我们可以以两种格式编写项目列表，即块风格和流风格。</p><p>让我们使用块风格在numberListYamlStr字符串中指定数字列表：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> numberListYamlStr <span class="token operator">=</span>\n<span class="token string-literal multiline"><span class="token string">&quot;&quot;&quot;\n  - 123\n  - 456\n&quot;&quot;&quot;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用三引号字符串来指定多行字符串。进一步地，我们通常<strong>更倾向于这种表示法用于更长的列表</strong>，因为每行保持一个项目更易读。</p><p>或者，我们可以使用流风格使用双引号字符串指定数字列表：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> numberListYamlStr <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;[123,456]&quot;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>尽管我们可以将所有项目放在单行中，但对于更长的列表来说，它将变得不易读。因此，我们将<strong>将此用法限制在较小的列表</strong>。</p><h3 id="_4-2-使用kaml" tabindex="-1"><a class="header-anchor" href="#_4-2-使用kaml"><span>4.2. 使用kaml</span></a></h3><p>首先，让我们<strong>使用decodeFromString()方法将项目列表读取为Kotlin Int列表</strong>：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> parsedData<span class="token operator">:</span> List`<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span>` <span class="token operator">=</span> yamlDefault<span class="token punctuation">.</span><span class="token function">decodeFromString</span><span class="token punctuation">(</span>numberListYamlStr<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们可以验证parsedData变量的值是否符合预期的数字列表：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token function">listOf</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">,</span> parsedData<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来，让我们<strong>使用parseToYamlNode()方法将项目列表读取为YamlList值</strong>：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> parsedData<span class="token operator">:</span> YamlList <span class="token operator">=</span> yamlDefault<span class="token punctuation">.</span><span class="token function">parseToYamlNode</span><span class="token punctuation">(</span>numberListYamlStr<span class="token punctuation">)</span><span class="token punctuation">.</span>yamlList\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们使用YamlNode的yamlList属性来提取YamlList值。</p><p>最后，让我们通过提取单独的标量值来验证YamlList值对象的内容：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> item1 <span class="token operator">=</span> parsedData<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>yamlScalar<span class="token punctuation">.</span>content\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> item1<span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token keyword">val</span> item2 <span class="token operator">=</span> parsedData<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>yamlScalar<span class="token punctuation">.</span>content\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">456</span><span class="token punctuation">,</span> item2<span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们得到了正确的结果。</p><h3 id="_4-3-使用yamlkt" tabindex="-1"><a class="header-anchor" href="#_4-3-使用yamlkt"><span>4.3. 使用YamlKt</span></a></h3><p>使用YamlKt，我们可以使用decodeFromString()方法提取项目列表，就像我们使用kaml时一样。然而，这个库中的<strong>Yaml类支持使用decodeListFromString()方法作为解析项目列表的替代方法</strong>。</p><p>让我们将数字列表读取为Kotlin列表：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> parsedData<span class="token operator">:</span> List`<span class="token operator">&lt;</span>Any<span class="token operator">?</span><span class="token operator">&gt;</span>` <span class="token operator">=</span> yamlDefault<span class="token punctuation">.</span><span class="token function">decodeListFromString</span><span class="token punctuation">(</span>numberListYamlStr<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>进一步地，让我们验证解析后我们是否得到了正确的结果：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token function">listOf</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">,</span> parsedData<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>太棒了！它按预期工作。</p><h2 id="_5-读取映射" tabindex="-1"><a class="header-anchor" href="#_5-读取映射"><span>5. 读取映射</span></a></h2><p>在本节中，我们将学习如何在Kotlin中从YAML内容读取键值映射。</p><h3 id="_5-1-使用kaml" tabindex="-1"><a class="header-anchor" href="#_5-1-使用kaml"><span>5.1. 使用kaml</span></a></h3><p>让我们定义mapWithScalarValuesYamlStr变量来存储YAML字符串：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> mapWithScalarValuesYamlStr <span class="token operator">=</span>\n<span class="token string-literal multiline"><span class="token string">&quot;&quot;&quot;\nk1: v1\nk2: 123\nk3: false\nk4: 12.3\nk5: 1.2e1\nk6: ~\n&quot;&quot;&quot;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在映射中，我们定义了不同类型的异构值，如字符串、数字、布尔值、浮点数等</strong>。</p><p>现在，让我们将映射读取为YamlMap值对象：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> yamlMapNode<span class="token operator">:</span> YamlMap <span class="token operator">=</span> yamlDefault<span class="token punctuation">.</span><span class="token function">parseToYamlNode</span><span class="token punctuation">(</span>mapWithScalarValuesYamlStr<span class="token punctuation">)</span><span class="token punctuation">.</span>yamlMap\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们使用yamlMap属性从中间的YamlNode对象中提取YamlMap的内容。</p><p>最后，让我们验证解析的各个键值对：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;v1&quot;</span></span><span class="token punctuation">,</span> yamlMapNode<span class="token punctuation">.</span><span class="token function">getScalar</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;k1&quot;</span></span><span class="token punctuation">)</span><span class="token operator">!!</span><span class="token punctuation">.</span>content<span class="token punctuation">)</span>\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> yamlMapNode<span class="token punctuation">.</span><span class="token function">getScalar</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;k2&quot;</span></span><span class="token punctuation">)</span><span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> yamlMapNode<span class="token punctuation">.</span><span class="token function">getScalar</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;k3&quot;</span></span><span class="token punctuation">)</span><span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">toBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">12.3f</span><span class="token punctuation">,</span> yamlMapNode<span class="token punctuation">.</span><span class="token function">getScalar</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;k4&quot;</span></span><span class="token punctuation">)</span><span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">toFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">12.0f</span><span class="token punctuation">,</span> yamlMapNode<span class="token punctuation">.</span><span class="token function">getScalar</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;k5&quot;</span></span><span class="token punctuation">)</span><span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">toFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token function">assertTrue</span><span class="token punctuation">(</span>yamlMapNode<span class="token punctuation">.</span>get<span class="token function">`&lt;YamlNode&gt;`</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;k6&quot;</span></span><span class="token punctuation">)</span><span class="token operator">!!</span> <span class="token keyword">is</span> YamlNull<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们<strong>使用getScalar()方法提取YamlScalar内容</strong>。之后，我们使用字符串值的内容属性和类型特定的方法，比如toInt()、toBoolean()、toFloat()以及YamlNull()，来获取标量值的内容。</p><p>此外，我们还使用了非空操作符(!!)来确保我们期待的是非空值。</p><h3 id="_5-2-使用yamlkt" tabindex="-1"><a class="header-anchor" href="#_5-2-使用yamlkt"><span>5.2. 使用YamlKt</span></a></h3><p>使用YamlKt库，我们可以使用decodeFromString()方法将Yaml映射解码为YamlMap对象：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> parsedData<span class="token operator">:</span> YamlMap <span class="token operator">=</span> yamlDefault<span class="token punctuation">.</span><span class="token function">decodeFromString</span><span class="token punctuation">(</span>mapWithScalarValuesYamlStr<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>进一步地，让我们使用数据类型特定的getter方法来验证解析的值：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;v1&quot;</span></span><span class="token punctuation">,</span> parsedData<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;k1&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> parsedData<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;k2&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> parsedData<span class="token punctuation">.</span><span class="token function">getPrimitive</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;k3&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">12.3f</span><span class="token punctuation">,</span> parsedData<span class="token punctuation">.</span><span class="token function">getFloat</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;k4&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">12.0f</span><span class="token punctuation">,</span> parsedData<span class="token punctuation">.</span><span class="token function">getFloat</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;k5&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token function">assertTrue</span><span class="token punctuation">(</span>parsedData<span class="token punctuation">[</span><span class="token string-literal singleline"><span class="token string">&quot;k6&quot;</span></span><span class="token punctuation">]</span> <span class="token keyword">is</span> YamlNull<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们必须注意YamlNull是null值的对象表示。</p><p>另外，<strong>YamlKt还提供了decodeMapFromString()方法，可以直接将映射读取为Kotlin Map</strong>：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> parsedData<span class="token operator">:</span> Map`<span class="token operator">&lt;</span>String<span class="token operator">?</span><span class="token punctuation">,</span> Any<span class="token operator">?</span><span class="token operator">&gt;</span>` <span class="token operator">=</span> yamlDefault<span class="token punctuation">.</span><span class="token function">decodeMapFromString</span><span class="token punctuation">(</span>mapWithScalarValuesYamlStr<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后，让我们验证我们的方法是否正确：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;v1&quot;</span></span><span class="token punctuation">,</span> parsedData<span class="token punctuation">[</span><span class="token string-literal singleline"><span class="token string">&quot;k1&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> parsedData<span class="token punctuation">[</span><span class="token string-literal singleline"><span class="token string">&quot;k2&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> parsedData<span class="token punctuation">[</span><span class="token string-literal singleline"><span class="token string">&quot;k3&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">12.3</span><span class="token punctuation">,</span> parsedData<span class="token punctuation">[</span><span class="token string-literal singleline"><span class="token string">&quot;k4&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">12.0</span><span class="token punctuation">,</span> parsedData<span class="token punctuation">[</span><span class="token string-literal singleline"><span class="token string">&quot;k5&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> parsedData<span class="token punctuation">[</span><span class="token string-literal singleline"><span class="token string">&quot;k6&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>太好了！看起来我们做对了！</p><h2 id="_6-使用用户定义的模式读取" tabindex="-1"><a class="header-anchor" href="#_6-使用用户定义的模式读取"><span>6. 使用用户定义的模式读取</span></a></h2><p>在本节中，我们将学习如何将YAML内容反序列化到用户定义的模式中。</p><h3 id="_6-1-yaml文档和模式" tabindex="-1"><a class="header-anchor" href="#_6-1-yaml文档和模式"><span>6.1. YAML文档和模式</span></a></h3><p>让我们看看<strong>示例users.yaml文档</strong>：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">users</span><span class="token punctuation">:</span>\n  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Alice\n    <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">30</span>\n    <span class="token key atrule">address</span><span class="token punctuation">:</span>\n      <span class="token key atrule">city</span><span class="token punctuation">:</span> New York\n      <span class="token key atrule">country</span><span class="token punctuation">:</span> USA\n  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Bob\n    <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">35</span>\n    <span class="token key atrule">address</span><span class="token punctuation">:</span>\n      <span class="token key atrule">city</span><span class="token punctuation">:</span> London\n      <span class="token key atrule">country</span><span class="token punctuation">:</span> UK\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，让我们定义带有city和country属性的Address数据类：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Serializable</span>\n<span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Address</span><span class="token punctuation">(</span>\n    <span class="token keyword">val</span> city<span class="token operator">:</span> String<span class="token punctuation">,</span>\n    <span class="token keyword">val</span> country<span class="token operator">:</span> String<span class="token punctuation">,</span>\n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进一步地，我们可以定义带有name、age和address属性的User数据类：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Serializable</span>\n<span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">User</span><span class="token punctuation">(</span>\n    <span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span>\n    <span class="token keyword">val</span> age<span class="token operator">:</span> Int<span class="token punctuation">,</span>\n    <span class="token keyword">val</span> address<span class="token operator">:</span> Address\n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们得到了带有users属性的Users数据类，它表示User对象的列表：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Serializable</span>\n<span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Users</span><span class="token punctuation">(</span>\n    <span class="token keyword">val</span> users<span class="token operator">:</span> List`<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span>`\n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们用@Serializable注解标记了它们每一个，以准备序列化和反序列化。</p><h3 id="_6-2-verifyusers-函数" tabindex="-1"><a class="header-anchor" href="#_6-2-verifyusers-函数"><span>6.2. verifyUsers()函数</span></a></h3><p>**从可重用性的角度来看，让我们定义一个辅助函数verifyUsers()，**来验证反序列化过程：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">verifyUsers</span><span class="token punctuation">(</span>users<span class="token operator">:</span> Users<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">assertNotNull</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span>\n\n    <span class="token keyword">val</span> user1 <span class="token operator">=</span> users<span class="token punctuation">.</span>users<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n    <span class="token function">assertNotNull</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Alice&quot;</span></span><span class="token punctuation">,</span> user1<span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> user1<span class="token punctuation">.</span>age<span class="token punctuation">)</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;New York&quot;</span></span><span class="token punctuation">,</span> user1<span class="token punctuation">.</span>address<span class="token punctuation">.</span>city<span class="token punctuation">)</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;USA&quot;</span></span><span class="token punctuation">,</span> user1<span class="token punctuation">.</span>address<span class="token punctuation">.</span>country<span class="token punctuation">)</span>\n\n    <span class="token keyword">val</span> user2 <span class="token operator">=</span> users<span class="token punctuation">.</span>users<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>\n    <span class="token function">assertNotNull</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Bob&quot;</span></span><span class="token punctuation">,</span> user2<span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">,</span> user2<span class="token punctuation">.</span>age<span class="token punctuation">)</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;London&quot;</span></span><span class="token punctuation">,</span> user2<span class="token punctuation">.</span>address<span class="token punctuation">.</span>city<span class="token punctuation">)</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;UK&quot;</span></span><span class="token punctuation">,</span> user2<span class="token punctuation">.</span>address<span class="token punctuation">.</span>country<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将在以下部分中使用这个来验证来自users.yaml的YAML字符串的反序列化。</p><h3 id="_6-3-使用kaml" tabindex="-1"><a class="header-anchor" href="#_6-3-使用kaml"><span>6.3. 使用kaml</span></a></h3><p>让我们定义getUsersUsingUsersSerializer()函数来将YAML内容读取到Users对象中：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">getUsersUsingUsersSerializer</span><span class="token punctuation">(</span>fileContent<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> Users <span class="token punctuation">{</span>\n    <span class="token keyword">val</span> yaml <span class="token operator">=</span> <span class="token function">Yaml</span><span class="token punctuation">(</span>configuration <span class="token operator">=</span> <span class="token function">YamlConfiguration</span><span class="token punctuation">(</span>strictMode <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token keyword">val</span> <span class="token keyword">data</span> <span class="token operator">=</span> yaml<span class="token punctuation">.</span>decodeFromString<span class="token function">`&lt;Users&gt;`</span><span class="token punctuation">(</span>fileContent<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token keyword">data</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们<strong>定义了Yaml类的实例，并使用decodeFromString()方法进行解析</strong>。</p><p>进一步地，让我们调用getUsersUsingUsersSerializer()并验证结果：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> users <span class="token operator">=</span> <span class="token function">getUsersUsingUsersSerializer</span><span class="token punctuation">(</span>fileContent<span class="token punctuation">)</span>\n<span class="token function">verifyUsers</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>它工作得很好！</p><h3 id="_6-4-使用yamlkt" tabindex="-1"><a class="header-anchor" href="#_6-4-使用yamlkt"><span>6.4. 使用YamlKt</span></a></h3><p>类似地，我们可以定义getUsersUsingUsersSerializer()来使用YamlKt库进行解析：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">getUsersUsingUsersSerializer</span><span class="token punctuation">(</span>fileContent<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> Users <span class="token punctuation">{</span>\n    <span class="token keyword">val</span> users<span class="token operator">:</span> Users <span class="token operator">=</span> Yaml<span class="token punctuation">.</span>Default<span class="token punctuation">.</span><span class="token function">decodeFromString</span><span class="token punctuation">(</span>Users<span class="token punctuation">.</span><span class="token function">serializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fileContent<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> users\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重要的是要注意<strong>两个库中的Yaml类是不同的</strong>。</p><p>最后，让我们验证我们的方法和相应的结果：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> users <span class="token operator">=</span> <span class="token function">getUsersUsingUsersSerializer</span><span class="token punctuation">(</span>fileContent<span class="token punctuation">)</span>\n<span class="token function">verifyUsers</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>太好了！我们已经让它工作了。</p><h2 id="_7-结论" tabindex="-1"><a class="header-anchor" href="#_7-结论"><span>7. 结论</span></a></h2><p>在本文中，我们<strong>学习了如何使用kaml和YamlKt库读取YAML内容</strong>。进一步地，我们通过使用deserializeFromString()方法详细探讨了它，使用它来反序列化YAML字符串中支持的不同数据类型。</p><p>像往常一样，本文的代码可以在GitHub上找到。</p><p><a href="https://www.baeldung.com/kotlin/wp-content/themes/baeldung/icon/logo.svg" target="_blank" rel="noopener noreferrer">Baeldung Kotlin logo</a><a href="https://www.baeldung.com/wp-content/uploads/sites/5/2022/11/kotlin_sublogo.png" target="_blank" rel="noopener noreferrer">Kotlin logo</a><a href="https://secure.gravatar.com/avatar/353305b4d53354d666bdb529e3f98fca?s=50&amp;r=g" target="_blank" rel="noopener noreferrer">Gravatar image</a><a href="https://www.baeldung.com/kotlin/wp-content/themes/baeldung/icon/whiteleaf.svg" target="_blank" rel="noopener noreferrer">Baeldung Whiteleaf icon</a></p><p>OK</p>',119),l=[p];function o(i,c){return s(),a("div",null,l)}const k=n(e,[["render",o],["__file","2024-06-30-Guide to Reading YAML Content in Kotlin.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-06-30/2024-06-30-Guide%20to%20Reading%20YAML%20Content%20in%20Kotlin.html","title":"Kotlin中读取YAML内容指南","lang":"zh-CN","frontmatter":{"date":"2022-11-01T00:00:00.000Z","category":["Kotlin","YAML"],"tag":["Kotlin","YAML","kotlinx-serialization","kaml","YamlKt"],"head":[["meta",{"name":"keywords","content":"Kotlin, YAML, 序列化, 反序列化, kaml, YamlKt"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-06-30/2024-06-30-Guide%20to%20Reading%20YAML%20Content%20in%20Kotlin.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Kotlin中读取YAML内容指南"}],["meta",{"property":"og:description","content":"Kotlin中读取YAML内容指南 YAML（YAML Ain’t Markup Language）是一种人类可读的数据序列化格式，通常用于配置文件。官方的Kotlin库kotlinx-serialization并不直接支持YAML格式。然而，有一些社区支持的库，比如kaml和YamlKt，它们内部使用kotlinx-serialization来支持Y..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-30T21:54:57.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Kotlin"}],["meta",{"property":"article:tag","content":"YAML"}],["meta",{"property":"article:tag","content":"kotlinx-serialization"}],["meta",{"property":"article:tag","content":"kaml"}],["meta",{"property":"article:tag","content":"YamlKt"}],["meta",{"property":"article:published_time","content":"2022-11-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-30T21:54:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Kotlin中读取YAML内容指南\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-11-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-30T21:54:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Kotlin中读取YAML内容指南 YAML（YAML Ain’t Markup Language）是一种人类可读的数据序列化格式，通常用于配置文件。官方的Kotlin库kotlinx-serialization并不直接支持YAML格式。然而，有一些社区支持的库，比如kaml和YamlKt，它们内部使用kotlinx-serialization来支持Y..."},"headers":[{"level":2,"title":"2. 依赖设置","slug":"_2-依赖设置","link":"#_2-依赖设置","children":[]},{"level":2,"title":"3. 读取标量值","slug":"_3-读取标量值","link":"#_3-读取标量值","children":[{"level":3,"title":"3.1. 使用kaml","slug":"_3-1-使用kaml","link":"#_3-1-使用kaml","children":[]},{"level":3,"title":"3.2. 使用YamlKt","slug":"_3-2-使用yamlkt","link":"#_3-2-使用yamlkt","children":[]}]},{"level":2,"title":"4. 读取列表","slug":"_4-读取列表","link":"#_4-读取列表","children":[{"level":3,"title":"4.1. 块风格和流风格","slug":"_4-1-块风格和流风格","link":"#_4-1-块风格和流风格","children":[]},{"level":3,"title":"4.2. 使用kaml","slug":"_4-2-使用kaml","link":"#_4-2-使用kaml","children":[]},{"level":3,"title":"4.3. 使用YamlKt","slug":"_4-3-使用yamlkt","link":"#_4-3-使用yamlkt","children":[]}]},{"level":2,"title":"5. 读取映射","slug":"_5-读取映射","link":"#_5-读取映射","children":[{"level":3,"title":"5.1. 使用kaml","slug":"_5-1-使用kaml","link":"#_5-1-使用kaml","children":[]},{"level":3,"title":"5.2. 使用YamlKt","slug":"_5-2-使用yamlkt","link":"#_5-2-使用yamlkt","children":[]}]},{"level":2,"title":"6. 使用用户定义的模式读取","slug":"_6-使用用户定义的模式读取","link":"#_6-使用用户定义的模式读取","children":[{"level":3,"title":"6.1. YAML文档和模式","slug":"_6-1-yaml文档和模式","link":"#_6-1-yaml文档和模式","children":[]},{"level":3,"title":"6.2. verifyUsers()函数","slug":"_6-2-verifyusers-函数","link":"#_6-2-verifyusers-函数","children":[]},{"level":3,"title":"6.3. 使用kaml","slug":"_6-3-使用kaml","link":"#_6-3-使用kaml","children":[]},{"level":3,"title":"6.4. 使用YamlKt","slug":"_6-4-使用yamlkt","link":"#_6-4-使用yamlkt","children":[]}]},{"level":2,"title":"7. 结论","slug":"_7-结论","link":"#_7-结论","children":[]}],"git":{"createdTime":1719784497000,"updatedTime":1719784497000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":7.34,"words":2202},"filePathRelative":"posts/baeldung/2024-06-30/2024-06-30-Guide to Reading YAML Content in Kotlin.md","localizedDate":"2022年11月1日","excerpt":"\\n<p>YAML（YAML Ain’t Markup Language）是一种人类可读的数据序列化格式，通常用于配置文件。官方的Kotlin库kotlinx-serialization并不直接支持YAML格式。然而，有一些社区支持的库，比如kaml和YamlKt，它们内部使用kotlinx-serialization来支持YAML格式。</p>\\n<p>在本文中，我们将<strong>学习在Kotlin中读取YAML内容的反序列化过程</strong>。</p>\\n<h2>2. 依赖设置</h2>\\n<p>首先，让我们<strong>在项目的pom.xml中添加kaml-jvm依赖</strong>：</p>","autoDesc":true}');export{k as comp,d as data};
