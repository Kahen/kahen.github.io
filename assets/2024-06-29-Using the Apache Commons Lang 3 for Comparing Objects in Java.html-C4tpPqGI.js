import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-0nXvcScy.js";const p={},e=t(`<h1 id="使用apache-commons-lang-3在java中比较对象" tabindex="-1"><a class="header-anchor" href="#使用apache-commons-lang-3在java中比较对象"><span>使用Apache Commons Lang 3在Java中比较对象</span></a></h1><p>比较对象是Java以及许多其他编程语言中的核心概念之一。它在处理排序、搜索和过滤数据时是一个基本的概念，这在编程的各个方面都起着至关重要的作用。</p><p>在Java中比较对象可以通过手动实现比较逻辑或使用具有对象比较能力的库来完成。可以用于Java中比较对象的各种库，例如JaVers或Apache Commons Lang 3，本文将介绍后者。</p><p>Apache Commons Lang 3是Apache Commons Lang库的3.0版本，提供了许多功能。</p><p>我们将探索_DiffBuilder_类来比较并获取两个相同类型对象之间的差异。结果差异通过_DiffResult_类表示。</p><p>还有一个_DiffBuilder_的替代品——<em>ReflectionDiffBuilder</em>——它的目的相同，但是基于反射，而_DiffBuilder_则不是。</p><h3 id="_3-maven依赖性" tabindex="-1"><a class="header-anchor" href="#_3-maven依赖性"><span>3. Maven依赖性</span></a></h3><p>要使用Apache Commons Lang 3，我们首先需要添加Maven依赖性：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>\`&lt;dependency&gt;\`
    \`&lt;groupId&gt;\`org.apache.commons\`&lt;/groupId&gt;\`
    \`&lt;artifactId&gt;\`commons-lang3\`&lt;/artifactId&gt;\`
    \`&lt;version&gt;\`3.14.0\`&lt;/version&gt;\`
\`&lt;/dependency&gt;\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-模型" tabindex="-1"><a class="header-anchor" href="#_4-模型"><span>4. 模型</span></a></h3><p>为了演示比较两个对象并获取它们的差异，我们将使用一个_Person_类，以及_PhoneNumber_和_Address_类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span>\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PhoneNumber</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\` phoneNumbers<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Address</span> address<span class="token punctuation">;</span>

    <span class="token comment">// 标准构造函数，getter和setter</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhoneNumber</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> type<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> number<span class="token punctuation">;</span>

    <span class="token comment">// 标准构造函数，getter和setter</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> streetAddress<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> city<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> postalCode<span class="token punctuation">;</span>

    <span class="token comment">// 标准构造函数，getter和setter</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-使用-diffbuilder-类比较对象" tabindex="-1"><a class="header-anchor" href="#_5-使用-diffbuilder-类比较对象"><span>5. 使用_DiffBuilder_类比较对象</span></a></h3><p>让我们通过使用_DiffBuilder_类来演示如何比较_Person_对象。我们将首先定义一个_PersonDiffBuilder_类，其中包含一个_compare()_方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">DiffResult</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Person</span> first<span class="token punctuation">,</span> <span class="token class-name">Person</span> second<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">DiffBuilder</span> diffBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiffBuilder</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> second<span class="token punctuation">,</span> <span class="token class-name">ToStringStyle</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_STYLE</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;person&quot;</span><span class="token punctuation">,</span> first<span class="token punctuation">.</span><span class="token function">getFirstName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> second<span class="token punctuation">.</span><span class="token function">getFirstName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;lastName&quot;</span><span class="token punctuation">,</span> first<span class="token punctuation">.</span><span class="token function">getLastName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> second<span class="token punctuation">.</span><span class="token function">getLastName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;streetAddress&quot;</span><span class="token punctuation">,</span> first<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStreetAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        second<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStreetAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;city&quot;</span><span class="token punctuation">,</span> first<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> second<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;postalCode&quot;</span><span class="token punctuation">,</span> first<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPostalCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        second<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPostalCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> first<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> second<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> first<span class="token punctuation">.</span><span class="token function">getPhoneNumbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        diffBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;phoneNumbers[&quot;</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">&quot;].number&quot;</span><span class="token punctuation">,</span>
          first<span class="token punctuation">.</span><span class="token function">getPhoneNumbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          second<span class="token punctuation">.</span><span class="token function">getPhoneNumbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> diffBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们使用_DiffBuilder_来实现_compare()_方法。<strong>在使用_append()_方法生成_DiffBuilder_时，我们可以精确控制用于比较的字段。</strong></p><p>为了演示目的，在比较嵌套的_PhoneNumber_对象时，我们省略了比较_type_字段，因此具有相同_number_和不同_type_字段的两个_PhoneNumber_对象将被视为相等。</p><p>或者，我们可以让我们的_Person_类实现_Diffable_接口，然后类似地使用_DiffBuilder_来实现_diff()_方法。</p><p>让我们看看如何将_PersonDiffBuilder_类付诸实践并比较两个_Person_对象：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenTwoPeopleDifferent_whenComparingWithDiffBuilder_thenDifferencesFound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span>\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PhoneNumber</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\` phoneNumbers1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    phoneNumbers1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PhoneNumber</span><span class="token punctuation">(</span><span class="token string">&quot;home&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123-456-7890&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    phoneNumbers1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PhoneNumber</span><span class="token punctuation">(</span><span class="token string">&quot;work&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;987-654-3210&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">List</span>\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PhoneNumber</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\` phoneNumbers2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    phoneNumbers2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PhoneNumber</span><span class="token punctuation">(</span><span class="token string">&quot;mobile1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123-456-7890&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    phoneNumbers2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PhoneNumber</span><span class="token punctuation">(</span><span class="token string">&quot;mobile2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;987-654-3210&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Address</span> address1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token string">&quot;123 Main St&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;London&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;12345&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Address</span> address2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token string">&quot;123 Main St&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Paris&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;54321&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Person</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Doe&quot;</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> phoneNumbers1<span class="token punctuation">,</span> address1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Person</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;Jane&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Smith&quot;</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> phoneNumbers2<span class="token punctuation">,</span> address2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">DiffResult</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span>\`\` diff <span class="token operator">=</span> <span class="token class-name">PersonDiffBuilder</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>person1<span class="token punctuation">,</span> person2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Diff</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span>\`\` d <span class="token operator">:</span> diff<span class="token punctuation">.</span><span class="token function">getDiffs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">getFieldName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;: &quot;</span> <span class="token operator">+</span> d<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; != &quot;</span> <span class="token operator">+</span> d<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">assertFalse</span><span class="token punctuation">(</span>diff<span class="token punctuation">.</span><span class="token function">getDiffs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>产生的_DiffResult_提供了一个_getDiffs()_方法，用于获取发现的差异作为_Diff_对象的列表。</strong> _Diff_类还提供了实用的方法来获取比较的字段。</p><p>在这个例子中，被比较的人有不同的名字、姓氏、城市和邮政编码。电话号码有不同的类型但数字相同。</p><p>如果我们看看_System.out.println()_的输出，我们可以看到所有的差异都已经被找到：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>person: John != Jane
lastName: Doe != Smith
city: London != Paris
postalCode: 12345 != 54321
age: 30 != 28
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-使用-reflectiondiffbuilder-类比较对象" tabindex="-1"><a class="header-anchor" href="#_6-使用-reflectiondiffbuilder-类比较对象"><span>6. 使用_ReflectionDiffBuilder_类比较对象</span></a></h3><p>让我们通过使用_ReflectionDiffBuilder_类来演示如何比较_Person_对象。我们将首先定义一个_PersonReflectionDiffBuilder_类，其中包含一个_compare()_方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">DiffResult</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Person</span> first<span class="token punctuation">,</span> <span class="token class-name">Person</span> second<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ReflectionDiffBuilder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> second<span class="token punctuation">,</span> <span class="token class-name">ToStringStyle</span><span class="token punctuation">.</span><span class="token constant">SHORT_PREFIX_STYLE</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们使用_ReflectionDiffBuilder_来实现_compare()_方法。<strong>不需要附加个别字段进行比较，因为所有非静态和非瞬态字段都是通过反射发现的。</strong></p><p>在这个例子中，发现的字段将是_firstName_、<em>lastName</em>、<em>age</em>、<em>phoneNumbers_和_address</em>。内部地，<em>ReflectionDiffBuilder_使用_DiffBuilder</em>，并且它是使用发现的字段构建的。</p><p>假设我们想要从比较中排除一个特定的发现字段。在这种情况下，我们可以使用_@DiffExclude_注解来标记我们希望从_ReflectionDiffBuilder_的使用中排除的字段。</p><p>由于我们的_Person_类具有复杂的结构，包含嵌套对象，为了确保_ReflectionDiffBuilder_正确识别差异，我们必须实现_equals()_和_hashCode()_方法。</p><p>为了演示目的，我们将_Person_类的_address_字段标记为_@DiffExclude_注解：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span>\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PhoneNumber</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\` phoneNumbers<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@DiffExclude</span>
    <span class="token keyword">private</span> <span class="token class-name">Address</span> address<span class="token punctuation">;</span>

    <span class="token comment">// 标准构造函数，getter和setter</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们还将省略使用_PhoneNumber_类的_type_字段在_equals()_和_hashCode()_方法中：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">PhoneNumber</span> that <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">PhoneNumber</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span> that<span class="token punctuation">.</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们看看如何使用_PersonReflectionDiffBuilder_类来比较两个_Person_对象：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenTwoPeopleDifferent_whenComparingWithReflectionDiffBuilder_thenDifferencesFound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span>\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PhoneNumber</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\` phoneNumbers1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    phoneNumbers1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PhoneNumber</span><span class="token punctuation">(</span><span class="token string">&quot;home&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123-456-7890&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    phoneNumbers1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PhoneNumber</span><span class="token punctuation">(</span><span class="token string">&quot;work&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;987-654-3210&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">List</span>\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PhoneNumber</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\` phoneNumbers2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    phoneNumbers2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PhoneNumber</span><span class="token punctuation">(</span><span class="token string">&quot;mobile1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123-456-7890&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    phoneNumbers2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PhoneNumber</span><span class="token punctuation">(</span><span class="token string">&quot;mobile2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;987-654-3210&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Address</span> address1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token string">&quot;123 Main St&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;London&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;12345&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Address</span> address2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token string">&quot;123 Main St&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Paris&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;54321&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Person</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Doe&quot;</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> phoneNumbers1<span class="token punctuation">,</span> address1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Person</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;Jane&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Smith&quot;</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> phoneNumbers2<span class="token punctuation">,</span> address2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">DiffResult</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span>\`\` diff <span class="token operator">=</span> <span class="token class-name">PersonReflectionDiffBuilder</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>person1<span class="token punctuation">,</span> person2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Diff</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span>\`\` d <span class="token operator">:</span> <span class="token function">diffDiff</span><span class="token punctuation">(</span><span class="token punctuation">)</span>_方法中<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">getFieldName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;: &quot;</span> <span class="token operator">+</span> d<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; != &quot;</span> <span class="token operator">+</span> d<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">assertFalse</span><span class="token punctuation">(</span>diff<span class="token punctuation">.</span><span class="token function">getDiffs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

在这个例子中，被比较的人有不同的名字、姓氏和地址。电话号码有不同的类型但数字相同。然而，我们对_Person_类的_address_字段使用了_<span class="token annotation punctuation">@DiffExclude_</span>注解，将其从比较中排除。

如果我们看看_System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>_的输出，我们可以看到所有差异都已经被找到：

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>firstName: John != Jane lastName: Doe != Smith age: 30 != 28</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>
### 7. 结论

在本文中，我们展示了如何使用Apache Commons Lang 3库中的_DiffBuilder_和_ReflectionDiffBuilder_来比较Java对象。

这两个类都很容易使用，并提供了一种方便的方式来比较对象，尽管它们各自有优点和缺点。

通过本文的例子，我们可以看到_DiffBuilder_提供了更多的定制选项并且更加明确。然而，它可能会导致更复杂的对象的复杂性增加。

_ReflectionDiffBuilder_提供了更多的简单性，但定制选项有限，并且可能会引入性能开销，因为它使用了反射。

本文的代码可以在GitHub上找到。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>OK</p>`,42),o=[e];function c(i,l){return a(),s("div",null,o)}const r=n(p,[["render",c],["__file","2024-06-29-Using the Apache Commons Lang 3 for Comparing Objects in Java.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-06-29/2024-06-29-Using%20the%20Apache%20Commons%20Lang%203%20for%20Comparing%20Objects%20in%20Java.html","title":"使用Apache Commons Lang 3在Java中比较对象","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","Apache Commons Lang"],"tag":["Java","比较对象","Apache Commons Lang 3"],"head":[["meta",{"name":"keywords","content":"Java, 比较对象, Apache Commons Lang 3"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-06-29/2024-06-29-Using%20the%20Apache%20Commons%20Lang%203%20for%20Comparing%20Objects%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"使用Apache Commons Lang 3在Java中比较对象"}],["meta",{"property":"og:description","content":"使用Apache Commons Lang 3在Java中比较对象 比较对象是Java以及许多其他编程语言中的核心概念之一。它在处理排序、搜索和过滤数据时是一个基本的概念，这在编程的各个方面都起着至关重要的作用。 在Java中比较对象可以通过手动实现比较逻辑或使用具有对象比较能力的库来完成。可以用于Java中比较对象的各种库，例如JaVers或Apac..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-29T01:41:22.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"比较对象"}],["meta",{"property":"article:tag","content":"Apache Commons Lang 3"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-29T01:41:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用Apache Commons Lang 3在Java中比较对象\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-29T01:41:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"使用Apache Commons Lang 3在Java中比较对象 比较对象是Java以及许多其他编程语言中的核心概念之一。它在处理排序、搜索和过滤数据时是一个基本的概念，这在编程的各个方面都起着至关重要的作用。 在Java中比较对象可以通过手动实现比较逻辑或使用具有对象比较能力的库来完成。可以用于Java中比较对象的各种库，例如JaVers或Apac..."},"headers":[{"level":3,"title":"3. Maven依赖性","slug":"_3-maven依赖性","link":"#_3-maven依赖性","children":[]},{"level":3,"title":"4. 模型","slug":"_4-模型","link":"#_4-模型","children":[]},{"level":3,"title":"5. 使用_DiffBuilder_类比较对象","slug":"_5-使用-diffbuilder-类比较对象","link":"#_5-使用-diffbuilder-类比较对象","children":[]},{"level":3,"title":"6. 使用_ReflectionDiffBuilder_类比较对象","slug":"_6-使用-reflectiondiffbuilder-类比较对象","link":"#_6-使用-reflectiondiffbuilder-类比较对象","children":[]}],"git":{"createdTime":1719625282000,"updatedTime":1719625282000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":5.47,"words":1641},"filePathRelative":"posts/baeldung/2024-06-29/2024-06-29-Using the Apache Commons Lang 3 for Comparing Objects in Java.md","localizedDate":"2022年4月1日","excerpt":"\\n<p>比较对象是Java以及许多其他编程语言中的核心概念之一。它在处理排序、搜索和过滤数据时是一个基本的概念，这在编程的各个方面都起着至关重要的作用。</p>\\n<p>在Java中比较对象可以通过手动实现比较逻辑或使用具有对象比较能力的库来完成。可以用于Java中比较对象的各种库，例如JaVers或Apache Commons Lang 3，本文将介绍后者。</p>\\n<p>Apache Commons Lang 3是Apache Commons Lang库的3.0版本，提供了许多功能。</p>\\n<p>我们将探索_DiffBuilder_类来比较并获取两个相同类型对象之间的差异。结果差异通过_DiffResult_类表示。</p>","autoDesc":true}');export{r as comp,d as data};
