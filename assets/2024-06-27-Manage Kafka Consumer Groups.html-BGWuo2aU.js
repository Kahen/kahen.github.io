import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-CseMoHkL.js";const p={},e=t(`<h1 id="kafka消费者组管理" tabindex="-1"><a class="header-anchor" href="#kafka消费者组管理"><span>Kafka消费者组管理</span></a></h1><h2 id="_1-引言" tabindex="-1"><a class="header-anchor" href="#_1-引言"><span>1. 引言</span></a></h2><p>消费者组有助于通过允许多个消费者从同一主题读取，来创建更可扩展的Kafka应用程序。</p><p>在本教程中，我们将了解消费者组以及它们如何在消费者之间重新平衡分区。</p><h2 id="_2-什么是消费者组" tabindex="-1"><a class="header-anchor" href="#_2-什么是消费者组"><span>2. 什么是消费者组？</span></a></h2><p>消费者组是与一个或多个主题相关联的一组独特的消费者。每个消费者可以读取零个、一个或多个分区。此外，每个分区在给定时间只能分配给一个消费者。当组成员变化时，分区分配会发生变化。这被称为组重新平衡。</p><p>消费者组是Kafka应用程序的关键部分。这允许将类似的消费者分组，并使它们能够并行地从分区主题中读取。因此，它提高了Kafka应用程序的性能和可扩展性。</p><h3 id="_2-1-组协调器和组领导者" tabindex="-1"><a class="header-anchor" href="#_2-1-组协调器和组领导者"><span>2.1. 组协调器和组领导者</span></a></h3><p>当我们实例化一个消费者组时，Kafka也会创建组协调器。组协调器定期从消费者那里接收请求，称为心跳。如果消费者停止发送心跳，协调器就假定消费者已经离开了组或崩溃了。这是触发分区重新平衡的一个可能的原因。</p><p>请求加入组的第一个消费者成为组领导者。当出于任何原因发生重新平衡时，组领导者从组协调器那里接收组成员列表。然后，<strong>组领导者使用在_partition.assignment.strategy_配置中设置的可定制策略，在列表中的消费者之间重新分配分区</strong>。</p><h3 id="_2-2-提交的偏移量" tabindex="-1"><a class="header-anchor" href="#_2-2-提交的偏移量"><span>2.2. 提交的偏移量</span></a></h3><p>Kafka使用提交的偏移量来跟踪从主题读取的最后位置。<strong>提交的偏移量是消费者确认已成功处理的主题位置</strong>。换句话说，它是它和其他消费者在后续轮次中读取事件的起始点。</p><p>Kafka在名为__consumer_offsets_的内部主题中存储所有分区的提交偏移量。我们可以安全地信任其信息，因为主题对于复制的代理是持久和容错的。</p><h3 id="_2-3-分区重新平衡" tabindex="-1"><a class="header-anchor" href="#_2-3-分区重新平衡"><span>2.3. 分区重新平衡</span></a></h3><p>分区重新平衡会将分区所有权从一个消费者转移到另一个消费者。当组中的新消费者加入或组中的消费者崩溃或取消订阅时，Kafka会自动执行重新平衡。</p><p>为了提高可扩展性，当新消费者加入组时，Kafka公平地与其他消费者共享分区。此外，<strong>当消费者崩溃时，其分区必须分配给组中的其余消费者，以避免丢失任何未处理的消息</strong>。</p><p>分区重新平衡使用__consumer_offsets_主题，使消费者从正确的位置开始读取重新分配的分区。</p><p>在重新平衡期间，消费者无法消费消息。换句话说，直到重新平衡完成，代理对消费者不可用。此外，消费者会丢失其状态并需要重新计算其缓存的值。分区重新平衡期间的不可用性和缓存重新计算使事件消费变慢。</p><h2 id="_3-设置应用程序" tabindex="-1"><a class="header-anchor" href="#_3-设置应用程序"><span>3. 设置应用程序</span></a></h2><p>在这一部分，我们将配置基本设置以启动并运行Spring Kafka应用程序。</p><h3 id="_3-1-创建基本配置" tabindex="-1"><a class="header-anchor" href="#_3-1-创建基本配置"><span>3.1. 创建基本配置</span></a></h3><p>首先，让我们配置主题及其分区：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KafkaTopicConfiguration</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;\${spring.kafka.bootstrap-servers}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> bootstrapAddress<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">KafkaAdmin</span> <span class="token function">kafkaAdmin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Map</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>\`\`\` configs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        configs<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">AdminClientConfig</span><span class="token punctuation">.</span><span class="token constant">BOOTSTRAP_SERVERS_CONFIG</span><span class="token punctuation">,</span> bootstrapAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">KafkaAdmin</span><span class="token punctuation">(</span>configs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">NewTopic</span> <span class="token function">celciusTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">TopicBuilder</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">&quot;topic-1&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">partitions</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述配置非常简单。我们只是配置了一个名为_topic-1_的新主题，它有两个分区。</p><p>现在，让我们配置生产者：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KafkaProducerConfiguration</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;\${spring.kafka.bootstrap-servers}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> bootstrapAddress<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ProducerFactory</span>\`\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\`\` <span class="token function">kafkaProducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Map</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>\`\`\` configProps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        configProps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">BOOTSTRAP_SERVERS_CONFIG</span><span class="token punctuation">,</span> bootstrapAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>
        configProps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">KEY_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">StringSerializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        configProps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">VALUE_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">DoubleSerializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultKafkaProducerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>configProps<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">KafkaTemplate</span>\`\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\`\` <span class="token function">kafkaProducerTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">KafkaTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token function">kafkaProducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的Kafka生产者配置中，我们设置了代理地址以及它们用于写消息的序列化器。</p><p>最后，让我们配置消费者：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KafkaConsumerConfiguration</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;\${spring.kafka.bootstrap-servers}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> bootstrapAddress<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ConsumerFactory</span>\`\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\`\` <span class="token function">kafkaConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Map</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>\`\`\` props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span><span class="token constant">BOOTSTRAP_SERVERS_CONFIG</span><span class="token punctuation">,</span> bootstrapAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>
        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span><span class="token constant">KEY_DESERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">StringDeserializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span><span class="token constant">VALUE_DESERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">DoubleDeserializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultKafkaConsumerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ConcurrentKafkaListenerContainerFactory</span>\`\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\`\` <span class="token function">kafkaConsumerContainerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ConcurrentKafkaListenerContainerFactory</span>\`\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\`\` factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentKafkaListenerContainerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setConsumerFactory</span><span class="token punctuation">(</span><span class="token function">kafkaConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> factory<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-设置消费者" tabindex="-1"><a class="header-anchor" href="#_3-2-设置消费者"><span>3.2. 设置消费者</span></a></h3><p>在我们的演示应用程序中，我们将从属于_group-1_组的两个消费者开始，它们监听来自_topic-1_的消息：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageConsumerService</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>topics <span class="token operator">=</span> <span class="token string">&quot;topic-1&quot;</span><span class="token punctuation">,</span> groupId <span class="token operator">=</span> <span class="token string">&quot;group-1&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">consumer0</span><span class="token punctuation">(</span><span class="token class-name">ConsumerRecord</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span>\`\`\` consumerRecord<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">trackConsumedPartitions</span><span class="token punctuation">(</span><span class="token string">&quot;consumer-0&quot;</span><span class="token punctuation">,</span> consumerRecord<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>topics <span class="token operator">=</span> <span class="token string">&quot;topic-1&quot;</span><span class="token punctuation">,</span> groupId <span class="token operator">=</span> <span class="token string">&quot;group-1&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">consumer1</span><span class="token punctuation">(</span><span class="token class-name">ConsumerRecord</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span>\`\`\` consumerRecord<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">trackConsumedPartitions</span><span class="token punctuation">(</span><span class="token string">&quot;consumer-1&quot;</span><span class="token punctuation">,</span> consumerRecord<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>MessageConsumerService_类使用</em>@KafkaListener_注解注册了两个消费者，监听_group-1_中的_topic-1_。</p><p>现在，让我们在_MessageConsumerService_类中定义一个字段和方法，以跟踪消费的分区：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Map</span>\`<span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>\`<span class="token operator">&gt;</span> consumedPartitions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">trackConsumedPartitions</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">ConsumerRecord</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span>\`\`\` record<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    consumedPartitions<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> k <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    consumedPartitions<span class="token punctuation">.</span><span class="token function">computeIfPresent</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        v<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> v<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，我们使用_ConcurrentHashMap_将每个消费者名称映射到一个由该消费者消费的所有分区的_HashSet_。</p><h2 id="_4-当消费者离开时可视化分区重新平衡" tabindex="-1"><a class="header-anchor" href="#_4-当消费者离开时可视化分区重新平衡"><span>4. 当消费者离开时可视化分区重新平衡</span></a></h2><p>现在我们已经设置了所有配置并注册了消费者，我们可以可视化Kafka在_group-1_中的一个消费者离开时所做的事情。为了做到这一点，让我们定义一个使用嵌入式代理的Kafka集成测试的框架：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token class-name">ManagingConsumerGroupsApplicationKafkaApp</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@EmbeddedKafka</span><span class="token punctuation">(</span>partitions <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> brokerProperties <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;listeners=PLAINTEXT://localhost:9092&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;port=9092&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ManagingConsumerGroupsIntegrationTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">CONSUMER_1_IDENTIFIER</span> <span class="token operator">=</span> <span class="token string">&quot;org.springframework.kafka.KafkaListenerEndpointContainer#1&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">TOTAL_PRODUCED_MESSAGES</span> <span class="token operator">=</span> <span class="token number">50000</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MESSAGE_WHERE_CONSUMER_1_LEAVES_GROUP</span> <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">KafkaTemplate</span>\`\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\`\` kafkaTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">KafkaListenerEndpointRegistry</span> kafkaListenerEndpointRegistry<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">MessageConsumerService</span> consumerService<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，我们注入了生产和消费消息所需的bean：<em>kafkaTemplate_和_consumerService</em>。我们还注入了bean _kafkaListenerEndpointRegistry_来操作注册的消费者。</p><p>最后，我们定义了将在测试用例中使用的三个常量。</p><p>现在，让我们定义测试用例方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenContinuousMessageFlow_whenAConsumerLeavesTheGroup_thenKafkaTriggersPartitionRebalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> currentMessage <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">do</span> <span class="token punctuation">{</span>
        kafkaTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;topic-1&quot;</span><span class="token punctuation">,</span> <span class="token class-name">RandomUtils</span><span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token number">10.0</span><span class="token punctuation">,</span> <span class="token number">20.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        currentMessage<span class="token operator">++</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentMessage <span class="token operator">==</span> <span class="token constant">MESSAGE_WHERE_CONSUMER_1_LEAVES_GROUP</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> containerId <span class="token operator">=</span> kafkaListenerEndpointRegistry<span class="token punctuation">.</span><span class="token function">getListenerContainerIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>a <span class="token operator">-&gt;</span> a<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token constant">CONSUMER_1_IDENTIFIER</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">MessageListenerContainer</span> container <span class="token operator">=</span> kafkaListenerEndpointRegistry<span class="token punctuation">.</span><span class="token function">getListenerContainer</span><span class="token punctuation">(</span>containerId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            kafkaListenerEndpointRegistry<span class="token punctuation">.</span><span class="token function">unregisterListenerContainer</span><span class="token punctuation">(</span>containerId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>currentMessage <span class="token operator">%</span> <span class="token number">1000</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Processed {} of {}&quot;</span><span class="token punctuation">,</span> currentMessage<span class="token punctuation">,</span> <span class="token constant">TOTAL_PRODUCED_MESSAGES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>currentMessage</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,43),o=[e];function c(l,i){return a(),s("div",null,o)}const r=n(p,[["render",c],["__file","2024-06-27-Manage Kafka Consumer Groups.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-06-27/2024-06-27-Manage%20Kafka%20Consumer%20Groups.html","title":"Kafka消费者组管理","lang":"zh-CN","frontmatter":{"date":"2024-06-27T00:00:00.000Z","category":["Kafka","Consumer Groups"],"tag":["Kafka","Consumer Group","Partition Rebalancing"],"head":[["meta",{"name":"keywords","content":"Kafka, Consumer Groups, Partition Rebalancing, Scalability"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-06-27/2024-06-27-Manage%20Kafka%20Consumer%20Groups.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Kafka消费者组管理"}],["meta",{"property":"og:description","content":"Kafka消费者组管理 1. 引言 消费者组有助于通过允许多个消费者从同一主题读取，来创建更可扩展的Kafka应用程序。 在本教程中，我们将了解消费者组以及它们如何在消费者之间重新平衡分区。 2. 什么是消费者组？ 消费者组是与一个或多个主题相关联的一组独特的消费者。每个消费者可以读取零个、一个或多个分区。此外，每个分区在给定时间只能分配给一个消费者。..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-27T06:36:40.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Kafka"}],["meta",{"property":"article:tag","content":"Consumer Group"}],["meta",{"property":"article:tag","content":"Partition Rebalancing"}],["meta",{"property":"article:published_time","content":"2024-06-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-27T06:36:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Kafka消费者组管理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-27T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-27T06:36:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Kafka消费者组管理 1. 引言 消费者组有助于通过允许多个消费者从同一主题读取，来创建更可扩展的Kafka应用程序。 在本教程中，我们将了解消费者组以及它们如何在消费者之间重新平衡分区。 2. 什么是消费者组？ 消费者组是与一个或多个主题相关联的一组独特的消费者。每个消费者可以读取零个、一个或多个分区。此外，每个分区在给定时间只能分配给一个消费者。..."},"headers":[{"level":2,"title":"1. 引言","slug":"_1-引言","link":"#_1-引言","children":[]},{"level":2,"title":"2. 什么是消费者组？","slug":"_2-什么是消费者组","link":"#_2-什么是消费者组","children":[{"level":3,"title":"2.1. 组协调器和组领导者","slug":"_2-1-组协调器和组领导者","link":"#_2-1-组协调器和组领导者","children":[]},{"level":3,"title":"2.2. 提交的偏移量","slug":"_2-2-提交的偏移量","link":"#_2-2-提交的偏移量","children":[]},{"level":3,"title":"2.3. 分区重新平衡","slug":"_2-3-分区重新平衡","link":"#_2-3-分区重新平衡","children":[]}]},{"level":2,"title":"3. 设置应用程序","slug":"_3-设置应用程序","link":"#_3-设置应用程序","children":[{"level":3,"title":"3.1. 创建基本配置","slug":"_3-1-创建基本配置","link":"#_3-1-创建基本配置","children":[]},{"level":3,"title":"3.2. 设置消费者","slug":"_3-2-设置消费者","link":"#_3-2-设置消费者","children":[]}]},{"level":2,"title":"4. 当消费者离开时可视化分区重新平衡","slug":"_4-当消费者离开时可视化分区重新平衡","link":"#_4-当消费者离开时可视化分区重新平衡","children":[]}],"git":{"createdTime":1719470200000,"updatedTime":1719470200000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":5.28,"words":1584},"filePathRelative":"posts/baeldung/2024-06-27/2024-06-27-Manage Kafka Consumer Groups.md","localizedDate":"2024年6月27日","excerpt":"\\n<h2>1. 引言</h2>\\n<p>消费者组有助于通过允许多个消费者从同一主题读取，来创建更可扩展的Kafka应用程序。</p>\\n<p>在本教程中，我们将了解消费者组以及它们如何在消费者之间重新平衡分区。</p>\\n<h2>2. 什么是消费者组？</h2>\\n<p>消费者组是与一个或多个主题相关联的一组独特的消费者。每个消费者可以读取零个、一个或多个分区。此外，每个分区在给定时间只能分配给一个消费者。当组成员变化时，分区分配会发生变化。这被称为组重新平衡。</p>\\n<p>消费者组是Kafka应用程序的关键部分。这允许将类似的消费者分组，并使它们能够并行地从分区主题中读取。因此，它提高了Kafka应用程序的性能和可扩展性。</p>","autoDesc":true}');export{r as comp,d as data};
