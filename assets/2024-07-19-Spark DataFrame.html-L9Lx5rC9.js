import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,o as s,a as t}from"./app-D0vunQyr.js";const p={},e=t('<h1 id="apache-spark-dataframe-教程" tabindex="-1"><a class="header-anchor" href="#apache-spark-dataframe-教程"><span>Apache Spark DataFrame 教程</span></a></h1><p>Apache Spark 是一个开源的分布式分析和处理系统，它通过提供统一的 API 来简化面向分析的应用程序的开发，支持数据传输、大规模转换和分布式处理。</p><p>DataFrame 是 Spark API 中一个重要且必不可少的组件。本教程将通过一个简单的客户数据示例，探讨一些 Spark DataFrame API。</p><p>从逻辑上讲，<strong>DataFrame 是一个不可变的记录集合，这些记录被组织成名为列</strong>。它与 RDBMS 中的表或 Java 中的 ResultSet 有相似之处。</p><p>作为 API，DataFrame 提供了统一的访问多个 Spark 库的方式，包括 Spark SQL、Spark Streaming、MLlib 和 GraphX。</p><p><strong>在 Java 中，我们使用 Dataset<code>&lt;Row&gt;</code> 来表示 DataFrame。</strong></p><p>本质上，Row 使用了一种称为 Tungsten 的高效存储方式，与前身相比，这极大地优化了 Spark 操作。</p><h2 id="_3-maven-依赖项" tabindex="-1"><a class="header-anchor" href="#_3-maven-依赖项"><span>3. Maven 依赖项</span></a></h2><p>让我们首先通过在我们的 pom.xml 中添加 spark-core 和 spark-sql 依赖项来开始：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>``org.apache.spark``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>``spark-core_2.11``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>``2.4.8``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>``org.apache.spark``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>``spark-sql_2.11``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>``2.4.8``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-dataframe-和-schema" tabindex="-1"><a class="header-anchor" href="#_4-dataframe-和-schema"><span>4. DataFrame 和 Schema</span></a></h2><p>本质上，DataFrame 是一个带有 schema 的 RDD。schema 可以是推断出来的，也可以定义为 StructType。</p><p><strong>StructType 是 Spark SQL 中的内置数据类型，我们用它来表示 StructField 对象的集合。</strong></p><p>让我们定义一个示例 Customer schema StructType：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">StructType</span> <span class="token function">minimumCustomerDataSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">DataTypes</span><span class="token punctuation">.</span><span class="token function">createStructType</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StructField</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n      <span class="token class-name">DataTypes</span><span class="token punctuation">.</span><span class="token function">createStructField</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token class-name">DataTypes<span class="token punctuation">.</span>StringType</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token class-name">DataTypes</span><span class="token punctuation">.</span><span class="token function">createStructField</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token class-name">DataTypes<span class="token punctuation">.</span>StringType</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token class-name">DataTypes</span><span class="token punctuation">.</span><span class="token function">createStructField</span><span class="token punctuation">(</span><span class="token string">&quot;gender&quot;</span><span class="token punctuation">,</span> <span class="token class-name">DataTypes<span class="token punctuation">.</span>StringType</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token class-name">DataTypes</span><span class="token punctuation">.</span><span class="token function">createStructField</span><span class="token punctuation">(</span><span class="token string">&quot;transaction_amount&quot;</span><span class="token punctuation">,</span> <span class="token class-name">DataTypes<span class="token punctuation">.</span>IntegerType</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，每个 StructField 都有一个名称，表示 DataFrame 列名称，类型，以及表示它是否可为空的布尔值。</p><h2 id="_5-构建-dataframes" tabindex="-1"><a class="header-anchor" href="#_5-构建-dataframes"><span>5. 构建 DataFrames</span></a></h2><p>每个 Spark 应用程序的首要操作是通过对 master 获取 SparkSession。</p><p><strong>它为我们提供了访问 DataFrames 的入口点。</strong> 让我们首先创建 SparkSession：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SparkSession</span> <span class="token function">getSparkSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">SparkSession</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">appName</span><span class="token punctuation">(</span><span class="token string">&quot;Customer Aggregation pipeline&quot;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">master</span><span class="token punctuation">(</span><span class="token string">&quot;local&quot;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">getOrCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意这里我们使用本地 master 连接到 Spark。如果我们想要连接到集群，我们将提供集群地址。</p><p>一旦我们有了 SparkSession，我们可以使用各种方法创建 DataFrame。让我们简要看看其中的一些。</p><h3 id="_5-1-从-list-pojo-创建-dataframe" tabindex="-1"><a class="header-anchor" href="#_5-1-从-list-pojo-创建-dataframe"><span>5.1. 从 List<code>&lt;POJO&gt;</code> 创建 DataFrame</span></a></h3><p>让我们首先构建一个 List<code>&lt;Customer&gt;</code>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span>``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Customer</span><span class="token punctuation">&gt;</span></span>`````` customers <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>\n  <span class="token function">aCustomerWith</span><span class="token punctuation">(</span><span class="token string">&quot;01&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Female&quot;</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token function">aCustomerWith</span><span class="token punctuation">(</span><span class="token string">&quot;02&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jack&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Male&quot;</span><span class="token punctuation">,</span> <span class="token number">1200</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，让我们使用 createDataFrame 从 List<code>&lt;Customer&gt;</code> 构建 DataFrame：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Dataset</span>``````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Row</span><span class="token punctuation">&gt;</span></span>`````````````` df <span class="token operator">=</span> <span class="token constant">SPARK_SESSION</span>\n  <span class="token punctuation">.</span><span class="token function">createDataFrame</span><span class="token punctuation">(</span>customerList<span class="token punctuation">,</span> <span class="token class-name">Customer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-从-dataset-创建-dataframe" tabindex="-1"><a class="header-anchor" href="#_5-2-从-dataset-创建-dataframe"><span>5.2. 从 Dataset 创建 DataFrame</span></a></h3><p>如果我们有一个 Dataset，我们可以很容易地通过在 Dataset 上调用 toDF 将其转换为 DataFrame。</p><p>让我们首先使用 createDataset 创建一个 Dataset<code>&lt;Customer&gt;</code>，它采用 org.apache.spark.sql.Encoders：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Dataset</span>``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Customer</span><span class="token punctuation">&gt;</span></span>`````` customerPOJODataSet <span class="token operator">=</span> <span class="token constant">SPARK_SESSION</span>\n  <span class="token punctuation">.</span><span class="token function">createDataset</span><span class="token punctuation">(</span><span class="token constant">CUSTOMERS</span><span class="token punctuation">,</span> <span class="token class-name">Encoders</span><span class="token punctuation">.</span><span class="token function">bean</span><span class="token punctuation">(</span><span class="token class-name">Customer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，让我们将其转换为 DataFrame：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Dataset</span>``````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Row</span><span class="token punctuation">&gt;</span></span>`````````````` df <span class="token operator">=</span> customerPOJODataSet<span class="token punctuation">.</span><span class="token function">toDF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-3-使用-rowfactory-从-pojo-创建-row" tabindex="-1"><a class="header-anchor" href="#_5-3-使用-rowfactory-从-pojo-创建-row"><span>5.3. 使用 RowFactory 从 POJO 创建 Row</span></a></h3><p>由于 DataFrame 本质上是 Dataset<code>&lt;Row&gt;</code>，让我们看看如何从 Customer POJO 创建 Row。</p><p>基本上，通过实现 MapFunction<code>&lt;Customer, Row&gt;</code> 并重写 call 方法，我们可以使用 RowFactory.create 将每个 Customer 映射到一个 Row：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerToRowMapper</span> <span class="token keyword">implements</span> <span class="token class-name">MapFunction</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Customer</span><span class="token punctuation">,</span> <span class="token class-name">Row</span><span class="token punctuation">&gt;</span></span>`` <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">Row</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">Customer</span> customer<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Row</span> row <span class="token operator">=</span> <span class="token class-name">RowFactory</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>\n          customer<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          customer<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>customer<span class="token punctuation">.</span><span class="token function">getGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          customer<span class="token punctuation">.</span><span class="token function">getTransaction_amount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> row<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们应该注意到，我们可以在将数据转换为 Row 之前在这里操作 Customer 数据。</p><h3 id="_5-4-从-list-row-创建-dataframe" tabindex="-1"><a class="header-anchor" href="#_5-4-从-list-row-创建-dataframe"><span>5.4. 从 List<code>&lt;Row&gt;</code> 创建 DataFrame</span></a></h3><p>我们也可以从一个 Row 对象列表创建 DataFrame：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span>``````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Row</span><span class="token punctuation">&gt;</span></span>`````````````` rows <span class="token operator">=</span> customer<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>c <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">CustomerToRowMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，让我们将这个 List<code>&lt;Row&gt;</code> 连同 StructType schema 一起给 SparkSession：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Dataset</span>``````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Row</span><span class="token punctuation">&gt;</span></span>`````````````` df <span class="token operator">=</span> <span class="token class-name">SparkDriver</span><span class="token punctuation">.</span><span class="token function">getSparkSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">createDataFrame</span><span class="token punctuation">(</span>rows<span class="token punctuation">,</span> <span class="token class-name">SchemaFactory</span><span class="token punctuation">.</span><span class="token function">minimumCustomerDataSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意这里，<strong>List<code>&lt;Row&gt;</code> 将根据 schema 定义转换为 DataFrame。</strong> 任何不在 schema 中的字段都不会成为 DataFrame 的一部分。</p><h3 id="_5-5-从结构化文件和数据库创建-dataframe" tabindex="-1"><a class="header-anchor" href="#_5-5-从结构化文件和数据库创建-dataframe"><span>5.5. 从结构化文件和数据库创建 DataFrame</span></a></h3><p>DataFrames 可以存储列信息，比如 CSV 文件，以及嵌套字段和数组，比如 JSON 文件。</p><p><strong>无论我们是使用 CSV 文件、JSON 文件还是其他格式以及数据库，DataFrame API 都是相同的。</strong></p><p>让我们从多行 JSON 数据创建 DataFrame：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Dataset</span>``````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Row</span><span class="token punctuation">&gt;</span></span>`````````````` df <span class="token operator">=</span> <span class="token class-name">SparkDriver</span><span class="token punctuation">.</span><span class="token function">getSparkSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;org.apache.spark.sql.execution.datasources.json.JsonFileFormat&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&quot;multiline&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&quot;data/minCustomerData.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类似地，在从数据库读取的情况下，我们将有：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Dataset</span>``````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Row</span><span class="token punctuation">&gt;</span></span>`````````````` df <span class="token operator">=</span> <span class="token class-name">SparkDriver</span><span class="token punctuation">.</span><span class="token function">getSparkSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&quot;url&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jdbc:postgresql://localhost:5432/customerdb&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&quot;dbtable&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;customer&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&quot;serverTimezone&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;EST&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-将-dataframe-转换为-dataset" tabindex="-1"><a class="header-anchor" href="#_6-将-dataframe-转换为-dataset"><span>6. 将 DataFrame 转换为 Dataset</span></a></h2><p>现在，让我们看看如何将我们的 DataFrame 转换为 Dataset。如果我们想要操作现有的 POJOs 以及仅适用于 DataFrame 的扩展 API，这种转换是有用的。</p><p>我们将使用上一节中从 JSON 创建的 DataFrame。</p><p>让我们调用一个映射器函数，它将 Dataset<code>&lt;Row&gt;</code> 的每一行转换为 Customer 对象：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Dataset</span>``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Customer</span><span class="token punctuation">&gt;</span></span>`````` ds <span class="token operator">=</span> df<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>\n  <span class="token keyword">new</span> <span class="token class-name">CustomerMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token class-name">Encoders</span><span class="token punctuation">.</span><span class="token function">bean</span><span class="token punctuation">(</span><span class="token class-name">Customer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，CustomerMapper 实现了 MapFunction<code>&lt;Row, Customer&gt;</code>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerMapper</span> <span class="token keyword">implements</span> <span class="token class-name">MapFunction</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Row</span><span class="token punctuation">,</span> <span class="token class-name">Customer</span><span class="token punctuation">&gt;</span></span>``` <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">Customer</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">Row</span> row<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Customer</span> customer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        customer<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>row<span class="token punctuation">.</span><span class="token function">getAs</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        customer<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>row<span class="token punctuation">.</span><span class="token function">getAs</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        customer<span class="token punctuation">.</span><span class="token function">setGender</span><span class="token punctuation">(</span>row<span class="token punctuation">.</span><span class="token function">getAs</span><span class="token punctuation">(</span><span class="token string">&quot;gender&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        customer<span class="token punctuation">.</span><span class="token function">setTransaction_amount</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">toIntExact</span><span class="token punctuation">(</span>row<span class="token punctuation">.</span><span class="token function">getAs</span><span class="token punctuation">(</span><span class="token string">&quot;transaction_amount&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> customer<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们应该注意到 <strong>MapFunction<code>&lt;Row, Customer&gt;</code> 只实例化一次，无论我们要处理的记录数量有多少。</strong></p><h2 id="_7-dataframe-操作和转换" tabindex="-1"><a class="header-anchor" href="#_7-dataframe-操作和转换"><span>7. DataFrame 操作和转换</span></a></h2><p>现在，让我们使用客户数据示例构建一个简单的管道。我们想要从两个不同的文件源以 DataFrame 的形式摄取客户数据，对它们进行规范化，然后对数据执行一些转换。</p><p>最后，我们将转换后的数据写入数据库。</p><p>这些转换的目的是找出按性别和来源排序的年度支出。</p><h3 id="_7-1-摄取数据" tabindex="-1"><a class="header-anchor" href="#_7-1-摄取数据"><span>7.1. 摄取数据</span></a></h3><p>首先，让我们使用 SparkSession 的 read 方法从几个来源摄取数据，从 JSON 数据开始：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Dataset</span>``````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Row</span><span class="token punctuation">&gt;</span></span>`````````````` jsonDataToDF <span class="token operator">=</span> <span class="token constant">SPARK_SESSION</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;org.apache.spark.sql.execution.datasources.json.JsonFileFormat&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&quot;multiline&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&quot;data/customerData.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，让我们对 CSV 源执行相同的操作：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Dataset</span>``````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Row</span><span class="token punctuation">&gt;</span></span>`````````````` csvDataToDF <span class="token operator">=</span> <span class="token constant">SPARK_SESSION</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;csv&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&quot;header&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">schema</span><span class="token punctuation">(</span><span class="token class-name">SchemaFactory</span><span class="token punctuation">.</span><span class="token function">customerSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&quot;dateFormat&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;m/d/YYYY&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&quot;data/customerData.csv&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ncsvDataToDF<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ncsvDataToDF<span class="token punctuation">.</span><span class="token function">printSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">return</span> csvData<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重要的是，为了读取此 CSV 数据，我们提供了一个 StructType schema，它决定了列数据类型。</p><p><strong>一旦我们摄取了数据，我们可以使用 show 方法检查 DataFrame 的内容。</strong></p><p>此外，我们还可以通过在 show 方法中提供大小来限制行</p>',71),o=[e];function c(l,u){return s(),n("div",null,o)}const k=a(p,[["render",c],["__file","2024-07-19-Spark DataFrame.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-19/2024-07-19-Spark%20DataFrame.html","title":"Apache Spark DataFrame 教程","lang":"zh-CN","frontmatter":{"date":"2022-05-23T00:00:00.000Z","category":["Spark","DataFrame"],"tag":["Spark","DataFrame","Java","数据处理"],"head":[["meta",{"name":"keywords","content":"Spark, DataFrame, Java, 数据处理"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-19/2024-07-19-Spark%20DataFrame.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Apache Spark DataFrame 教程"}],["meta",{"property":"og:description","content":"Apache Spark DataFrame 教程 Apache Spark 是一个开源的分布式分析和处理系统，它通过提供统一的 API 来简化面向分析的应用程序的开发，支持数据传输、大规模转换和分布式处理。 DataFrame 是 Spark API 中一个重要且必不可少的组件。本教程将通过一个简单的客户数据示例，探讨一些 Spark DataFra..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-19T06:37:54.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Spark"}],["meta",{"property":"article:tag","content":"DataFrame"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"数据处理"}],["meta",{"property":"article:published_time","content":"2022-05-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-19T06:37:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Apache Spark DataFrame 教程\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-05-23T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-19T06:37:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Apache Spark DataFrame 教程 Apache Spark 是一个开源的分布式分析和处理系统，它通过提供统一的 API 来简化面向分析的应用程序的开发，支持数据传输、大规模转换和分布式处理。 DataFrame 是 Spark API 中一个重要且必不可少的组件。本教程将通过一个简单的客户数据示例，探讨一些 Spark DataFra..."},"headers":[{"level":2,"title":"3. Maven 依赖项","slug":"_3-maven-依赖项","link":"#_3-maven-依赖项","children":[]},{"level":2,"title":"4. DataFrame 和 Schema","slug":"_4-dataframe-和-schema","link":"#_4-dataframe-和-schema","children":[]},{"level":2,"title":"5. 构建 DataFrames","slug":"_5-构建-dataframes","link":"#_5-构建-dataframes","children":[{"level":3,"title":"5.1. 从 List<POJO> 创建 DataFrame","slug":"_5-1-从-list-pojo-创建-dataframe","link":"#_5-1-从-list-pojo-创建-dataframe","children":[]},{"level":3,"title":"5.2. 从 Dataset 创建 DataFrame","slug":"_5-2-从-dataset-创建-dataframe","link":"#_5-2-从-dataset-创建-dataframe","children":[]},{"level":3,"title":"5.3. 使用 RowFactory 从 POJO 创建 Row","slug":"_5-3-使用-rowfactory-从-pojo-创建-row","link":"#_5-3-使用-rowfactory-从-pojo-创建-row","children":[]},{"level":3,"title":"5.4. 从 List<Row> 创建 DataFrame","slug":"_5-4-从-list-row-创建-dataframe","link":"#_5-4-从-list-row-创建-dataframe","children":[]},{"level":3,"title":"5.5. 从结构化文件和数据库创建 DataFrame","slug":"_5-5-从结构化文件和数据库创建-dataframe","link":"#_5-5-从结构化文件和数据库创建-dataframe","children":[]}]},{"level":2,"title":"6. 将 DataFrame 转换为 Dataset","slug":"_6-将-dataframe-转换为-dataset","link":"#_6-将-dataframe-转换为-dataset","children":[]},{"level":2,"title":"7. DataFrame 操作和转换","slug":"_7-dataframe-操作和转换","link":"#_7-dataframe-操作和转换","children":[{"level":3,"title":"7.1. 摄取数据","slug":"_7-1-摄取数据","link":"#_7-1-摄取数据","children":[]}]}],"git":{"createdTime":1721371074000,"updatedTime":1721371074000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":5.02,"words":1506},"filePathRelative":"posts/baeldung/2024-07-19/2024-07-19-Spark DataFrame.md","localizedDate":"2022年5月23日","excerpt":"\\n<p>Apache Spark 是一个开源的分布式分析和处理系统，它通过提供统一的 API 来简化面向分析的应用程序的开发，支持数据传输、大规模转换和分布式处理。</p>\\n<p>DataFrame 是 Spark API 中一个重要且必不可少的组件。本教程将通过一个简单的客户数据示例，探讨一些 Spark DataFrame API。</p>\\n<p>从逻辑上讲，<strong>DataFrame 是一个不可变的记录集合，这些记录被组织成名为列</strong>。它与 RDBMS 中的表或 Java 中的 ResultSet 有相似之处。</p>\\n<p>作为 API，DataFrame 提供了统一的访问多个 Spark 库的方式，包括 Spark SQL、Spark Streaming、MLlib 和 GraphX。</p>","autoDesc":true}');export{k as comp,d as data};
