import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-Bx_7oN2A.js";const e={},p=t(`<h1 id="使用spring-data-mongodb连接到多个数据库" tabindex="-1"><a class="header-anchor" href="#使用spring-data-mongodb连接到多个数据库"><span>使用Spring Data MongoDB连接到多个数据库</span></a></h1><p>在使用Spring Data MongoDB时，我们可以创建一个_MongoClient_来对数据库执行操作。然而，有时我们的应用程序可能需要使用多个数据库。</p><p>本教程中，<strong>我们将创建多个连接到MongoDB的连接。我们还将添加一些Spring Boot测试来模拟此场景。</strong></p><h3 id="_2-1-依赖设置" tabindex="-1"><a class="header-anchor" href="#_2-1-依赖设置"><span>2.1. 依赖设置</span></a></h3><p>让我们从向_pom.xml_添加依赖开始。首先，我们需要一个spring boot starter：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>\`
    \`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`\`org.springframework.boot\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`\`
    \`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`\`spring-boot-starter-parent\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`\`
    \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span> <span class="token punctuation">/&gt;</span></span>\`
\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们需要一个web starter和data MongoDB的依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\`\`
    \`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`\`org.springframework.boot\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`\`
    \`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`\`spring-boot-starter-data-mongodb\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`\`
\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\`\`
\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\`\`
    \`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`\`org.springframework.boot\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`\`
    \`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`\`spring-boot-starter-web\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`\`
\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\`\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样，如果我们使用Gradle，我们向_build.gradle_添加：</p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code>plugins <span class="token punctuation">{</span>
    id <span class="token string">&#39;org.springframework.boot&#39;</span> version <span class="token string">&#39;2.6.4&#39;</span>
<span class="token punctuation">}</span>

compile <span class="token string">&#39;org.springframework.boot:spring-boot-starter-data-mongodb&#39;</span>
compile <span class="token string">&#39;org.springframework.boot:spring-boot-starter-web&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>作为替代，我们可以使用Spring Initializer。</p><h3 id="_2-2-模型" tabindex="-1"><a class="header-anchor" href="#_2-2-模型"><span>2.2. 模型</span></a></h3><p><strong>首先，让我们添加我们的模型。我们将创建两个文档，这两个文档将由两个不同的数据库使用。</strong></p><p>例如，我们将创建一个_User_文档：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Document</span><span class="token punctuation">(</span>collection <span class="token operator">=</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@MongoId</span>
    <span class="token keyword">private</span> <span class="token class-name">ObjectId</span> id<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> surname<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>

    <span class="token comment">// getters and setters</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，让我们也添加一个_Account_文档：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Document</span><span class="token punctuation">(</span>collection <span class="token operator">=</span> <span class="token string">&quot;account&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@MongoId</span>
    <span class="token keyword">private</span> <span class="token class-name">ObjectId</span> id<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> userEmail<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> nickName<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> accountDomain<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>

    <span class="token comment">// getters and setters</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-仓库" tabindex="-1"><a class="header-anchor" href="#_2-3-仓库"><span>2.3. 仓库</span></a></h3><p>然后，我们为每个模型类创建一个具有一些Spring Data方法的仓库。</p><p>首先，让我们添加一个_UserRepository_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Repository</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">MongoRepository</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>\` <span class="token punctuation">{</span>

    <span class="token class-name">User</span> <span class="token function">findByEmail</span><span class="token punctuation">(</span><span class="token class-name">String</span> email<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们添加一个_AccountRepository_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Repository</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountRepository</span> <span class="token keyword">extends</span> <span class="token class-name">MongoRepository</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Account</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>\` <span class="token punctuation">{</span>

    <span class="token class-name">Account</span> <span class="token function">findByAccountDomain</span><span class="token punctuation">(</span><span class="token class-name">String</span> account<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-连接属性" tabindex="-1"><a class="header-anchor" href="#_2-4-连接属性"><span>2.4. 连接属性</span></a></h3><p>让我们定义我们正在使用的多个数据库的属性：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">mongodb.primary.host</span><span class="token punctuation">=</span><span class="token value attr-value">localhost</span>
<span class="token key attr-name">mongodb.primary.database</span><span class="token punctuation">=</span><span class="token value attr-value">db1</span>
<span class="token key attr-name">mongodb.primary.authenticationDatabase</span><span class="token punctuation">=</span><span class="token value attr-value">admin</span>
<span class="token key attr-name">mongodb.primary.username</span><span class="token punctuation">=</span><span class="token value attr-value">user1</span>
<span class="token key attr-name">mongodb.primary.password</span><span class="token punctuation">=</span><span class="token value attr-value">password</span>
<span class="token key attr-name">mongodb.primary.port</span><span class="token punctuation">=</span><span class="token value attr-value">27017</span>

<span class="token key attr-name">mongodb.secondary.host</span><span class="token punctuation">=</span><span class="token value attr-value">localhost</span>
<span class="token key attr-name">mongodb.secondary.database</span><span class="token punctuation">=</span><span class="token value attr-value">db2</span>
<span class="token key attr-name">mongodb.secondary.authenticationDatabase</span><span class="token punctuation">=</span><span class="token value attr-value">admin</span>
<span class="token key attr-name">mongodb.secondary.username</span><span class="token punctuation">=</span><span class="token value attr-value">user2</span>
<span class="token key attr-name">mongodb.secondary.password</span><span class="token punctuation">=</span><span class="token value attr-value">password</span>
<span class="token key attr-name">mongodb.secondary.port</span><span class="token punctuation">=</span><span class="token value attr-value">27017</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>值得注意的是，我们有一个用于认证的特定数据库的属性。</p><h3 id="_2-5-主配置" tabindex="-1"><a class="header-anchor" href="#_2-5-主配置"><span>2.5. 主配置</span></a></h3><p>现在，我们需要我们的配置。我们将为每个数据库制作一个配置。</p><p>让我们看看我们用于_UserRepository_的类定义：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableMongoRepositories</span><span class="token punctuation">(</span>basePackageClasses <span class="token operator">=</span> <span class="token class-name">UserRepository</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> mongoTemplateRef <span class="token operator">=</span> <span class="token string">&quot;primaryMongoTemplate&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrimaryConfig</span> <span class="token punctuation">{</span>
    <span class="token comment">// beans</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了演示，让我们分解所有的bean和注释。</p><p>首先，我们将使用_MongoProperties_检索并设置属性。这样，我们直接将所有属性映射到一个bean：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;primaryProperties&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;mongodb.primary&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Primary</span>
<span class="token keyword">public</span> <span class="token class-name">MongoProperties</span> <span class="token function">primaryProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MongoProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了允许多个用户的访问，我们使用MongoDB认证机制与_MongoCredential_。我们通过添加一个认证数据库，这里是_admin_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;primaryMongoClient&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">MongoClient</span> <span class="token function">mongoClient</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;primaryProperties&quot;</span><span class="token punctuation">)</span> <span class="token class-name">MongoProperties</span> mongoProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token class-name">MongoCredential</span> credential <span class="token operator">=</span> <span class="token class-name">MongoCredential</span>
      <span class="token punctuation">.</span><span class="token function">createCredential</span><span class="token punctuation">(</span>mongoProperties<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mongoProperties<span class="token punctuation">.</span><span class="token function">getAuthenticationDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mongoProperties<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token class-name">MongoClients</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">MongoClientSettings</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">applyToClusterSettings</span><span class="token punctuation">(</span>builder <span class="token operator">-&gt;</span> builder
        <span class="token punctuation">.</span><span class="token function">hosts</span><span class="token punctuation">(</span><span class="token function">singletonList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServerAddress</span><span class="token punctuation">(</span>mongoProperties<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mongoProperties<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">credential</span><span class="token punctuation">(</span>credential<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>正如最新版本建议的，我们使用</strong><em>SimpleMongoClientDatabaseFactory</em><strong>而不是从连接字符串创建一个_MongoTemplate_：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Primary</span>
<span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;primaryMongoDBFactory&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">MongoDatabaseFactory</span> <span class="token function">mongoDatabaseFactory</span><span class="token punctuation">(</span>
  <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;primaryMongoClient&quot;</span><span class="token punctuation">)</span> <span class="token class-name">MongoClient</span> mongoClient<span class="token punctuation">,</span>
  <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;primaryProperties&quot;</span><span class="token punctuation">)</span> <span class="token class-name">MongoProperties</span> mongoProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMongoClientDatabaseFactory</span><span class="token punctuation">(</span>mongoClient<span class="token punctuation">,</span> mongoProperties<span class="token punctuation">.</span><span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>我们需要我们的bean在这里是_@Primary_，因为我们将添加更多的数据库配置。否则，我们将陷入我们之前讨论唯一性约束。</strong></p><p><strong>我们在使用JPA映射多个_EntityManager_时也是如此，我们将需要一个对_Mongotemplate_的引用在我们的_@EnableMongoRepositories:_</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableMongoRepositories</span><span class="token punctuation">(</span>basePackageClasses <span class="token operator">=</span> <span class="token class-name">UserRepository</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> mongoTemplateRef <span class="token operator">=</span> <span class="token string">&quot;primaryMongoTemplate&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-6-次级配置" tabindex="-1"><a class="header-anchor" href="#_2-6-次级配置"><span>2.6. 次级配置</span></a></h3><p>最后，为了双重检查，让我们看看第二个数据库配置：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableMongoRepositories</span><span class="token punctuation">(</span>basePackageClasses <span class="token operator">=</span> <span class="token class-name">AccountRepository</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> mongoTemplateRef <span class="token operator">=</span> <span class="token string">&quot;secondaryMongoTemplate&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecondaryConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;secondaryProperties&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;mongodb.secondary&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">MongoProperties</span> <span class="token function">secondaryProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MongoProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;secondaryMongoClient&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">MongoClient</span> <span class="token function">mongoClient</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;secondaryProperties&quot;</span><span class="token punctuation">)</span> <span class="token class-name">MongoProperties</span> mongoProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">MongoCredential</span> credential <span class="token operator">=</span> <span class="token class-name">MongoCredential</span>
          <span class="token punctuation">.</span><span class="token function">createCredential</span><span class="token punctuation">(</span>mongoProperties<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mongoProperties<span class="token punctuation">.</span><span class="token function">getAuthenticationDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mongoProperties<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token class-name">MongoClients</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">MongoClientSettings</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">applyToClusterSettings</span><span class="token punctuation">(</span>builder <span class="token operator">-&gt;</span> builder
            <span class="token punctuation">.</span><span class="token function">hosts</span><span class="token punctuation">(</span><span class="token function">singletonList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServerAddress</span><span class="token punctuation">(</span>mongoProperties<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mongodProperties<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">credential</span><span class="token punctuation">(</span>credential<span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;secondaryMongoDBFactory&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">MongoDatabaseFactory</span> <span class="token function">mongoDatabaseFactory</span><span class="token punctuation">(</span>
      <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;secondaryMongoClient&quot;</span><span class="token punctuation">)</span> <span class="token class-name">MongoClient</span> mongoClient<span class="token punctuation">,</span>
      <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;secondaryProperties&quot;</span><span class="token punctuation">)</span> <span class="token class-name">MongoProperties</span> mongoProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMongoClientDatabaseFactory</span><span class="token punctuation">(</span>mongoClient<span class="token punctuation">,</span> mongoProperties<span class="token punctuation">.</span><span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;secondaryMongoTemplate&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">MongoTemplate</span> <span class="token function">mongoTemplate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;secondaryMongoDBFactory&quot;</span><span class="token punctuation">)</span> <span class="token class-name">MongoDatabaseFactory</span> mongoDatabaseFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MongoTemplate</span><span class="token punctuation">(</span>mongoDatabaseFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这种情况下，它将引用_AccountRepository_或属于同一包的所有类_。</p><h3 id="_3-测试" tabindex="-1"><a class="header-anchor" href="#_3-测试"><span>3. 测试</span></a></h3><p>我们将对MongoDB实例进行应用程序测试。我们可以使用Docker中的MongoDB。</p><h3 id="_3-1-启动mongodb容器" tabindex="-1"><a class="header-anchor" href="#_3-1-启动mongodb容器"><span>3.1. 启动MongoDB容器</span></a></h3><p>让我们使用Docker Compose运行MongoDB容器。让我们看看我们的YAML模板：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">mongo</span><span class="token punctuation">:</span>
    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> localhost
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> <span class="token string">&#39;mongo&#39;</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">&#39;mongo:latest&#39;</span>
    <span class="token key atrule">expose</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token number">27017</span>
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 27017<span class="token punctuation">:</span><span class="token number">27017</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> MONGO_INITDB_DATABASE=admin
      <span class="token punctuation">-</span> MONGO_INITDB_ROOT_USERNAME=admin
      <span class="token punctuation">-</span> MONGO_INITDB_ROOT_PASSWORD=admin
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> ./mongo<span class="token punctuation">-</span>init.js<span class="token punctuation">:</span>/docker<span class="token punctuation">-</span>entrypoint<span class="token punctuation">-</span>initdb.d/mongo<span class="token punctuation">-</span>init.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>如果我们想要启用认证，我们需要用root用户进行初始化。为了向数据库中添加更多用户，我们添加了一个绑定到JavaScript init文件的挂载：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>db<span class="token punctuation">.</span><span class="token function">createUser</span><span class="token punctuation">(</span>
    <span class="token punctuation">{</span>
        <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">&quot;user1&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">pwd</span><span class="token operator">:</span> <span class="token string">&quot;password&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">roles</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span> <span class="token literal-property property">role</span><span class="token operator">:</span> <span class="token string">&quot;readWrite&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">db</span><span class="token operator">:</span> <span class="token string">&quot;db1&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">)</span>

db<span class="token punctuation">.</span><span class="token function">createUser</span><span class="token punctuation">(</span>
    <span class="token punctuation">{</span>
        <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">&quot;user2&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">pwd</span><span class="token operator">:</span> <span class="token string">&quot;password&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">roles</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span> <span class="token literal-property property">role</span><span class="token operator">:</span> <span class="token string">&quot;readWrite&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">db</span><span class="token operator">:</span> <span class="token string">&quot;db2&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们运行我们的容器：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当容器启动时，它为_mongo-init.js_文件创建了一个卷，并将该文件复制到容器的入口点。</p><h3 id="_3-2-spring-boot测试" tabindex="-1"><a class="header-anchor" href="#_3-2-spring-boot测试"><span>3.2. Spring Boot测试</span></a></h3><p>让我们将所有内容包装在一些基本的Spring Boot测试中：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token class-name">SpringBootMultipeDbApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@TestPropertySource</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:/multipledb/multidb.properties&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MultipleDbUnitTest</span> <span class="token punctuation">{</span>

    <span class="token comment">// setup</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">whenFindUserByEmail_thenNameOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> userRepository<span class="token punctuation">.</span><span class="token function">findByEmail</span><span class="token punctuation">(</span><span class="token string">&quot;user@gmail.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">whenFindAccountByDomain_thenNickNameOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;nickname&quot;</span><span class="token punctuation">,</span> accountRepository<span class="token punctuation">.</span><span class="token function">findByAccountDomain</span><span class="token punctuation">(</span>&quot;account<span class="token annotation punctuation">@jira.baeldung.com</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,58),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","2024-07-15-Connect to Multiple Databases Using Spring Data MongoDB.html.vue"]]),k=JSON.parse('{"path":"/posts/baeldung/2024-07-15/2024-07-15-Connect%20to%20Multiple%20Databases%20Using%20Spring%20Data%20MongoDB.html","title":"使用Spring Data MongoDB连接到多个数据库","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Spring Data MongoDB","MongoDB"],"tag":["Spring Boot","MongoDB","Configuration"],"head":[["meta",{"name":"keywords","content":"Spring Data MongoDB, MongoDB, Spring Boot, Configuration"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-15/2024-07-15-Connect%20to%20Multiple%20Databases%20Using%20Spring%20Data%20MongoDB.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"使用Spring Data MongoDB连接到多个数据库"}],["meta",{"property":"og:description","content":"使用Spring Data MongoDB连接到多个数据库 在使用Spring Data MongoDB时，我们可以创建一个_MongoClient_来对数据库执行操作。然而，有时我们的应用程序可能需要使用多个数据库。 本教程中，我们将创建多个连接到MongoDB的连接。我们还将添加一些Spring Boot测试来模拟此场景。 2.1. 依赖设置 让我..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-15T02:14:56.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Spring Boot"}],["meta",{"property":"article:tag","content":"MongoDB"}],["meta",{"property":"article:tag","content":"Configuration"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-15T02:14:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用Spring Data MongoDB连接到多个数据库\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-15T02:14:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"使用Spring Data MongoDB连接到多个数据库 在使用Spring Data MongoDB时，我们可以创建一个_MongoClient_来对数据库执行操作。然而，有时我们的应用程序可能需要使用多个数据库。 本教程中，我们将创建多个连接到MongoDB的连接。我们还将添加一些Spring Boot测试来模拟此场景。 2.1. 依赖设置 让我..."},"headers":[{"level":3,"title":"2.1. 依赖设置","slug":"_2-1-依赖设置","link":"#_2-1-依赖设置","children":[]},{"level":3,"title":"2.2. 模型","slug":"_2-2-模型","link":"#_2-2-模型","children":[]},{"level":3,"title":"2.3. 仓库","slug":"_2-3-仓库","link":"#_2-3-仓库","children":[]},{"level":3,"title":"2.4. 连接属性","slug":"_2-4-连接属性","link":"#_2-4-连接属性","children":[]},{"level":3,"title":"2.5. 主配置","slug":"_2-5-主配置","link":"#_2-5-主配置","children":[]},{"level":3,"title":"2.6. 次级配置","slug":"_2-6-次级配置","link":"#_2-6-次级配置","children":[]},{"level":3,"title":"3. 测试","slug":"_3-测试","link":"#_3-测试","children":[]},{"level":3,"title":"3.1. 启动MongoDB容器","slug":"_3-1-启动mongodb容器","link":"#_3-1-启动mongodb容器","children":[]},{"level":3,"title":"3.2. Spring Boot测试","slug":"_3-2-spring-boot测试","link":"#_3-2-spring-boot测试","children":[]}],"git":{"createdTime":1721009696000,"updatedTime":1721009696000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":4.13,"words":1240},"filePathRelative":"posts/baeldung/2024-07-15/2024-07-15-Connect to Multiple Databases Using Spring Data MongoDB.md","localizedDate":"2022年4月1日","excerpt":"\\n<p>在使用Spring Data MongoDB时，我们可以创建一个_MongoClient_来对数据库执行操作。然而，有时我们的应用程序可能需要使用多个数据库。</p>\\n<p>本教程中，<strong>我们将创建多个连接到MongoDB的连接。我们还将添加一些Spring Boot测试来模拟此场景。</strong></p>\\n<h3>2.1. 依赖设置</h3>\\n<p>让我们从向_pom.xml_添加依赖开始。首先，我们需要一个spring boot starter：</p>\\n<div class=\\"language-xml\\" data-ext=\\"xml\\" data-title=\\"xml\\"><pre class=\\"language-xml\\"><code>`<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>parent</span><span class=\\"token punctuation\\">&gt;</span></span>`\\n    ```<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>groupId</span><span class=\\"token punctuation\\">&gt;</span></span>```org.springframework.boot```<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>groupId</span><span class=\\"token punctuation\\">&gt;</span></span>```\\n    ```<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>artifactId</span><span class=\\"token punctuation\\">&gt;</span></span>```spring-boot-starter-parent```<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>artifactId</span><span class=\\"token punctuation\\">&gt;</span></span>```\\n    `<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>relativePath</span> <span class=\\"token punctuation\\">/&gt;</span></span>`\\n`<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>parent</span><span class=\\"token punctuation\\">&gt;</span></span>`\\n</code></pre></div>","autoDesc":true}');export{d as comp,k as data};
