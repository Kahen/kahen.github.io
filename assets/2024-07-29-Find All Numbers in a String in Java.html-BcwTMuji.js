import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-D0vunQyr.js";const p={},e=t('<h1 id="在java中查找字符串中的所有数字-baeldung" tabindex="-1"><a class="header-anchor" href="#在java中查找字符串中的所有数字-baeldung"><span>在Java中查找字符串中的所有数字 | Baeldung</span></a></h1><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p>有时我们需要在字符串中查找数字或完整的数字。我们可以使用正则表达式或某些库函数来实现。</p><p>在本文中，我们将<strong>使用正则表达式来查找和提取字符串中的数字</strong>。我们还将介绍一些计数数字的方法。</p><h2 id="_2-计数数字" tabindex="-1"><a class="header-anchor" href="#_2-计数数字"><span>2. 计数数字</span></a></h2><p>让我们先从计数字符串中找到的数字开始。</p><h3 id="_2-1-使用正则表达式" tabindex="-1"><a class="header-anchor" href="#_2-1-使用正则表达式"><span>2.1. 使用正则表达式</span></a></h3><p>我们可以使用Java正则表达式来计算一个数字的匹配次数。</p><p>在正则表达式中，<strong>“<em>[d]</em>”表示“任何单个数字”</strong>。让我们使用这个表达式来计数字符串中的数字：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token function">countDigits</span><span class="token punctuation">(</span><span class="token class-name">String</span> stringToSearch<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Pattern</span> digitRegex <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Matcher</span> countEmailMatcher <span class="token operator">=</span> digitRegex<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>stringToSearch<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>countEmailMatcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        count<span class="token operator">++</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> count<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一旦我们为正则表达式定义了一个_Matcher_，我们就可以在一个循环中使用它来_find_并计算所有匹配项。让我们测试它：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token function">countDigits</span><span class="token punctuation">(</span><span class="token string">&quot;64x6xxxxx453xxxxx9xx038x68xxxxxx95786xxx7986&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">assertThat</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> <span class="token function">equalTo</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-使用google-guava的-charmatcher" tabindex="-1"><a class="header-anchor" href="#_2-2-使用google-guava的-charmatcher"><span>2.2. 使用Google Guava的_CharMatcher_</span></a></h3><p>要使用Guava，我们首先需要添加Maven依赖项：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`com.google.guava`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`guava`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`31.0.1-jre`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Guava提供了_CharMatcher.inRange_方法来计数数字：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token class-name">CharMatcher</span><span class="token punctuation">.</span><span class="token function">inRange</span><span class="token punctuation">(</span><span class="token char">&#39;0&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;9&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">countIn</span><span class="token punctuation">(</span><span class="token string">&quot;64x6xxxxx453xxxxx9xx038x68xxxxxx95786xxx7986&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">assertThat</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> <span class="token function">equalTo</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-查找数字" tabindex="-1"><a class="header-anchor" href="#_3-查找数字"><span>3. 查找数字</span></a></h2><p>计数数字需要能够捕捉到有效数字表达式所有数字的模式。</p><h3 id="_3-1-查找整数" tabindex="-1"><a class="header-anchor" href="#_3-1-查找整数"><span>3.1. 查找整数</span></a></h3><p>为了构建一个表达式来识别整数，我们必须考虑到它们可以是正数或负数，并且由一个或多个数字组成。我们还注意到，负整数前面有一个减号。</p><p>因此，我们可以通过扩展我们的正则表达式到“<em>-?\\d+</em>”来找到整数。这个模式的意思是“一个可选的减号，后面跟着一个或多个数字”。</p><p>让我们创建一个示例方法，使用这个正则表达式在字符串中查找整数：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span>``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````` <span class="token function">findIntegers</span><span class="token punctuation">(</span><span class="token class-name">String</span> stringToSearch<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Pattern</span> integerPattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&quot;-?\\\\d+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> integerPattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>stringToSearch<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">List</span>``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````` integerList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        integerList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> integerList<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一旦我们创建了一个正则表达式的_Matcher_，我们就在一个循环中使用它来_find_字符串中的所有整数。我们在每个匹配项上调用_group_来获取所有整数。</p><p>让我们测试_findIntegers_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span>``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````` integersFound <span class="token operator">=</span>\n  <span class="token function">findIntegers</span><span class="token punctuation">(</span><span class="token string">&quot;646xxxx4-53xxx34xxxxxxxxx-35x45x9xx3868xxxxxx-95786xxx79-86&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">assertThat</span><span class="token punctuation">(</span>integersFound<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">containsExactly</span><span class="token punctuation">(</span><span class="token string">&quot;646&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-53&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;34&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-35&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;45&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;9&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3868&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-95786&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;79&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-86&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-查找小数" tabindex="-1"><a class="header-anchor" href="#_3-2-查找小数"><span>3.2. 查找小数</span></a></h3><p>要创建一个正则表达式来查找小数，我们需要考虑书写它们时使用的字符模式。</p><p>如果一个小数是负数，它以一个减号开始。这是由一个或多个数字和一个可选的小数部分跟随的。这个小数部分以一个小数点开始，后面是另一个一个或多个数字的序列。</p><p>我们可以使用正则表达式_“-?\\d+(.\\d+)?”_来定义这个：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span>``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````` <span class="token function">findDecimalNums</span><span class="token punctuation">(</span><span class="token class-name">String</span> stringToSearch<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Pattern</span> decimalNumPattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&quot;-?\\\\d+(\\\\.\\\\d+)?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> decimalNumPattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>stringToSearch<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">List</span>``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````` decimalNumList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        decimalNumList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> decimalNumList<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们将测试_findDecimalNums_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span>``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````` decimalNumsFound <span class="token operator">=</span>\n  <span class="token function">findDecimalNums</span><span class="token punctuation">(</span><span class="token string">&quot;x7854.455xxxxxxxxxxxx-3x-553.00x53xxxxxxxxx3456xxxxxxxx3567.4xxxxx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">assertThat</span><span class="token punctuation">(</span>decimalNumsFound<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">containsExactly</span><span class="token punctuation">(</span><span class="token string">&quot;7854.455&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-553.00&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;53&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3456&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3567.4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-将找到的字符串转换为数值" tabindex="-1"><a class="header-anchor" href="#_4-将找到的字符串转换为数值"><span>4. 将找到的字符串转换为数值</span></a></h2><p>我们可能还希望将找到的数字转换为它们的Java类型。</p><p>让我们使用_Stream_映射将我们的整数转换为_Long_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">LongStream</span> integerValuesFound <span class="token operator">=</span> <span class="token function">findIntegers</span><span class="token punctuation">(</span><span class="token string">&quot;x7854x455xxxxxxxxxxxxx-3xxxxx34x56&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">mapToLong</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token operator">::</span><span class="token function">valueOf</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">assertThat</span><span class="token punctuation">(</span>integerValuesFound<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">containsExactly</span><span class="token punctuation">(</span><span class="token number">7854L</span><span class="token punctuation">,</span> <span class="token number">455L</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3L</span><span class="token punctuation">,</span> <span class="token number">34L</span><span class="token punctuation">,</span> <span class="token number">56L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们将以相同的方式将小数转换为_Double_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">DoubleStream</span> decimalNumValuesFound <span class="token operator">=</span> <span class="token function">findDecimalNums</span><span class="token punctuation">(</span><span class="token string">&quot;x7854.455xxxxxxxxxxxxx-3xxxxx34.56&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">mapToDouble</span><span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token operator">::</span><span class="token function">valueOf</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">assertThat</span><span class="token punctuation">(</span>decimalNumValuesFound<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">containsExactly</span><span class="token punctuation">(</span><span class="token number">7854.455</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3.0</span><span class="token punctuation">,</span> <span class="token number">34.56</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-查找其他类型的数字" tabindex="-1"><a class="header-anchor" href="#_5-查找其他类型的数字"><span>5. 查找其他类型的数字</span></a></h2><p>数字可以以其他格式表示，我们可以通过调整我们的正则表达式来检测它们。</p><h3 id="_5-1-科学记数法" tabindex="-1"><a class="header-anchor" href="#_5-1-科学记数法"><span>5.1. 科学记数法</span></a></h3><p>让我们找到使用科学记数法格式化的一些数字：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> strToSearch <span class="token operator">=</span> <span class="token string">&quot;xx1.25E-3xxx2e109xxx-70.96E+105xxxx-8.7312E-102xx919.3822e+31xxx&quot;</span><span class="token punctuation">;</span>\n\n<span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&quot;-?\\\\d+(\\\\.\\\\d+)?[eE][+-]?\\\\d+&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>strToSearch<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 循环遍历matcher</span>\n\n<span class="token function">assertThat</span><span class="token punctuation">(</span>sciNotationNums<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">containsExactly</span><span class="token punctuation">(</span><span class="token string">&quot;1.25E-3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2e109&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-70.96E+105&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-8.7312E-102&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;919.3822e+31&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-十六进制" tabindex="-1"><a class="header-anchor" href="#_5-2-十六进制"><span>5.2. 十六进制</span></a></h3><p>现在我们将在字符串中找到十六进制数字：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> strToSearch <span class="token operator">=</span> <span class="token string">&quot;xaF851Bxxx-3f6Cxx-2Ad9eExx70ae19xxx&quot;</span><span class="token punctuation">;</span>\n\n<span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&quot;-?[0-9a-fA-F]+&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>strToSearch<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 循环遍历matcher</span>\n\n<span class="token function">assertThat</span><span class="token punctuation">(</span>hexNums<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">containsExactly</span><span class="token punctuation">(</span><span class="token string">&quot;aF851B&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-3f6C&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-2Ad9eE&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;70ae19&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-结论" tabindex="-1"><a class="header-anchor" href="#_6-结论"><span>6. 结论</span></a></h2><p>在本文中，我们首先讨论了如何使用正则表达式和Google Guava的_CharMatcher_类来计数字符串中的数字。</p><p>然后，我们探索了使用正则表达式来查找整数和小数。</p><p>最后，我们涵盖了以其他格式（如科学记数法和十六进制）查找数字。</p><p>如往常一样，本教程的源代码可以在GitHub上找到。</p>',53),c=[e];function o(l,i){return s(),a("div",null,c)}const d=n(p,[["render",o],["__file","2024-07-29-Find All Numbers in a String in Java.html.vue"]]),k=JSON.parse('{"path":"/posts/baeldung/2024-07-29/2024-07-29-Find%20All%20Numbers%20in%20a%20String%20in%20Java.html","title":"在Java中查找字符串中的所有数字 | Baeldung","lang":"zh-CN","frontmatter":{"date":"2024-07-29T00:00:00.000Z","category":["Java","编程"],"tag":["Java","正则表达式","字符串处理"],"head":[["meta",{"name":"keywords","content":"Java, 正则表达式, 字符串处理, 数字识别"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-29/2024-07-29-Find%20All%20Numbers%20in%20a%20String%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"在Java中查找字符串中的所有数字 | Baeldung"}],["meta",{"property":"og:description","content":"在Java中查找字符串中的所有数字 | Baeldung 1. 概述 有时我们需要在字符串中查找数字或完整的数字。我们可以使用正则表达式或某些库函数来实现。 在本文中，我们将使用正则表达式来查找和提取字符串中的数字。我们还将介绍一些计数数字的方法。 2. 计数数字 让我们先从计数字符串中找到的数字开始。 2.1. 使用正则表达式 我们可以使用Java正..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-29T12:08:02.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"正则表达式"}],["meta",{"property":"article:tag","content":"字符串处理"}],["meta",{"property":"article:published_time","content":"2024-07-29T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-29T12:08:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"在Java中查找字符串中的所有数字 | Baeldung\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-29T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-29T12:08:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"在Java中查找字符串中的所有数字 | Baeldung 1. 概述 有时我们需要在字符串中查找数字或完整的数字。我们可以使用正则表达式或某些库函数来实现。 在本文中，我们将使用正则表达式来查找和提取字符串中的数字。我们还将介绍一些计数数字的方法。 2. 计数数字 让我们先从计数字符串中找到的数字开始。 2.1. 使用正则表达式 我们可以使用Java正..."},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. 计数数字","slug":"_2-计数数字","link":"#_2-计数数字","children":[{"level":3,"title":"2.1. 使用正则表达式","slug":"_2-1-使用正则表达式","link":"#_2-1-使用正则表达式","children":[]},{"level":3,"title":"2.2. 使用Google Guava的_CharMatcher_","slug":"_2-2-使用google-guava的-charmatcher","link":"#_2-2-使用google-guava的-charmatcher","children":[]}]},{"level":2,"title":"3. 查找数字","slug":"_3-查找数字","link":"#_3-查找数字","children":[{"level":3,"title":"3.1. 查找整数","slug":"_3-1-查找整数","link":"#_3-1-查找整数","children":[]},{"level":3,"title":"3.2. 查找小数","slug":"_3-2-查找小数","link":"#_3-2-查找小数","children":[]}]},{"level":2,"title":"4. 将找到的字符串转换为数值","slug":"_4-将找到的字符串转换为数值","link":"#_4-将找到的字符串转换为数值","children":[]},{"level":2,"title":"5. 查找其他类型的数字","slug":"_5-查找其他类型的数字","link":"#_5-查找其他类型的数字","children":[{"level":3,"title":"5.1. 科学记数法","slug":"_5-1-科学记数法","link":"#_5-1-科学记数法","children":[]},{"level":3,"title":"5.2. 十六进制","slug":"_5-2-十六进制","link":"#_5-2-十六进制","children":[]}]},{"level":2,"title":"6. 结论","slug":"_6-结论","link":"#_6-结论","children":[]}],"git":{"createdTime":1722254882000,"updatedTime":1722254882000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":4.03,"words":1210},"filePathRelative":"posts/baeldung/2024-07-29/2024-07-29-Find All Numbers in a String in Java.md","localizedDate":"2024年7月29日","excerpt":"\\n<h2>1. 概述</h2>\\n<p>有时我们需要在字符串中查找数字或完整的数字。我们可以使用正则表达式或某些库函数来实现。</p>\\n<p>在本文中，我们将<strong>使用正则表达式来查找和提取字符串中的数字</strong>。我们还将介绍一些计数数字的方法。</p>\\n<h2>2. 计数数字</h2>\\n<p>让我们先从计数字符串中找到的数字开始。</p>\\n<h3>2.1. 使用正则表达式</h3>\\n<p>我们可以使用Java正则表达式来计算一个数字的匹配次数。</p>\\n<p>在正则表达式中，<strong>“<em>[d]</em>”表示“任何单个数字”</strong>。让我们使用这个表达式来计数字符串中的数字：</p>","autoDesc":true}');export{d as comp,k as data};
