import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-C-OIrTa1.js";const p={},e=t(`<h1 id="apache-kafka消费者延迟处理消息概述" tabindex="-1"><a class="header-anchor" href="#apache-kafka消费者延迟处理消息概述"><span>Apache Kafka消费者延迟处理消息概述</span></a></h1><p>Apache Kafka是一个事件流平台，用于大规模地收集、处理、存储和集成数据。有时，我们可能希望延迟从Kafka处理消息。例如，一个客户订单处理系统设计为在X秒的延迟后处理订单，以适应这个时间框架内的取消。</p><p>在本文中，我们将使用Spring Kafka探索Kafka消息的延迟消费者处理。尽管Kafka没有提供开箱即用的延迟消费消息支持，但我们将查看实现的替代选项。</p><h2 id="_2-应用上下文" tabindex="-1"><a class="header-anchor" href="#_2-应用上下文"><span>2. 应用上下文</span></a></h2><p><strong>Kafka提供了多种方式来在错误时重试。我们将使用这种重试机制来延迟消费者处理消息。因此，了解Kafka重试的工作方式是值得的。</strong></p><p>让我们考虑一个订单处理应用程序，客户可以在UI上下单。用户可以在10秒内取消错误下的订单。这些订单进入Kafka主题_web.orders_，我们的应用程序在那里处理它们。</p><p>一个外部服务公开了最新的订单状态(<em>CREATED, ORDER_CONFIRMED, ORDER_PROCESSED, DELETED</em>)。我们的应用程序需要接收消息，等待10秒钟，并与外部服务检查订单是否处于_CONFIRMED_状态，即用户在10秒内没有取消它。</p><p>对于测试，从_web.orders.internal_接收的内部订单不应延迟。</p><p>让我们添加一个简单的_Order_模型，该模型具有由生产者填充的_orderGeneratedDateTime_和由消费者在延迟持续时间后填充的_orderProcessedTime_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Builder</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">UUID</span> orderId<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> orderGeneratedDateTime<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> orderProcessedTime<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">List</span>\\<span class="token operator">&lt;</span><span class="token class-name">String</span>\\<span class="token operator">&gt;</span> address<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">double</span> price<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-kafka监听器和外部服务" tabindex="-1"><a class="header-anchor" href="#_3-kafka监听器和外部服务"><span>3. Kafka监听器和外部服务</span></a></h2><p>接下来，<strong>我们将添加一个用于主题消费的监听器和一个公开订单状态的服务。</strong></p><p>让我们添加一个_KafkaListener_，它从_web.orders_和_web.internal.orders_主题读取和处理消息：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RetryableTopic</span><span class="token punctuation">(</span>attempts <span class="token operator">=</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> include <span class="token operator">=</span> <span class="token class-name">KafkaBackoffException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> dltStrategy <span class="token operator">=</span> <span class="token class-name">DltStrategy</span><span class="token punctuation">.</span><span class="token constant">NO_DLT</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>topics <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;web.orders&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;web.internal.orders&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> groupId <span class="token operator">=</span> <span class="token string">&quot;orders&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleOrders</span><span class="token punctuation">(</span><span class="token class-name">String</span> order<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JsonProcessingException</span> <span class="token punctuation">{</span>
    <span class="token class-name">Order</span> orderDetails <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>order<span class="token punctuation">,</span> <span class="token class-name">Order</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">OrderService<span class="token punctuation">.</span>Status</span> orderStatus <span class="token operator">=</span> orderService<span class="token punctuation">.</span><span class="token function">findStatusById</span><span class="token punctuation">(</span>orderDetails<span class="token punctuation">.</span><span class="token function">getOrderId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>orderStatus<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">OrderService<span class="token punctuation">.</span>Status</span><span class="token punctuation">.</span><span class="token constant">ORDER_CONFIRMED</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        orderService<span class="token punctuation">.</span><span class="token function">processOrder</span><span class="token punctuation">(</span>orderDetails<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重要的是要包括_KafkaBackoffException_，以便监听器允许重试。为了简单起见，让我们假设外部_OrderService_始终将订单状态返回为_CONFIRMED_。另外，_processOrder()_方法将订单处理时间设置为当前时间，并将订单保存到_HashMap_中：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderService</span> <span class="token punctuation">{</span>
    <span class="token class-name">HashMap</span>\\<span class="token operator">&lt;</span><span class="token constant">UUID</span><span class="token punctuation">,</span> <span class="token class-name">Order</span>\\<span class="token operator">&gt;</span> orders <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span>\\<span class="token operator">&lt;</span>\\<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Status</span> <span class="token function">findStatusById</span><span class="token punctuation">(</span><span class="token class-name">UUID</span> orderId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Status</span><span class="token punctuation">.</span><span class="token constant">ORDER_CONFIRMED</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processOrder</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        order<span class="token punctuation">.</span><span class="token function">setOrderProcessedTime</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        orders<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getOrderId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-自定义延迟消息监听器" tabindex="-1"><a class="header-anchor" href="#_4-自定义延迟消息监听器"><span>4. 自定义延迟消息监听器</span></a></h2><p>Spring-Kafka提供了_KafkaBackoffAwareMessageListenerAdapter_，它扩展了_AbstractAdaptableMessageListener_并实现了_AcknowledgingConsumerAwareMessageListener_。<strong>这个适配器检查由于Timestamp头的延迟，并要么通过调用_KafkaConsumerBackoffManager_延迟消息，要么重试处理。</strong></p><p>现在让我们实现类似于_KafkaBackoffAwareMessageListenerAdapter_的_DelayedMessageListenerAdapter_。这个适配器应该提供灵活性，以按主题配置延迟，以及默认延迟_0_秒：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelayedMessageListenerAdapter</span>\\<span class="token operator">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span>\\<span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractDelegatingMessageListenerAdapter</span>\\<span class="token operator">&lt;</span><span class="token class-name">MessageListener</span>\\<span class="token operator">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span>\\<span class="token operator">&gt;</span>\\<span class="token operator">&gt;</span>
  <span class="token keyword">implements</span> <span class="token class-name">AcknowledgingConsumerAwareMessageListener</span>\\<span class="token operator">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span>\\<span class="token operator">&gt;</span> <span class="token punctuation">{</span>

    <span class="token comment">// 字段声明和构造函数</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDelayForTopic</span><span class="token punctuation">(</span><span class="token class-name">String</span> topic<span class="token punctuation">,</span> <span class="token class-name">Duration</span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> <span class="token string">&quot;Topic cannot be null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>delay<span class="token punctuation">,</span> <span class="token string">&quot;Delay cannot be null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span>\\<span class="token operator">&gt;</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;Setting delay %s for listener id %s&quot;</span><span class="token punctuation">,</span> delay<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listenerId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>delaysPerTopic<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDefaultDelay</span><span class="token punctuation">(</span><span class="token class-name">Duration</span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>delay<span class="token punctuation">,</span> <span class="token string">&quot;Delay cannot be null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span>\\<span class="token operator">&gt;</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;Setting delay %s for listener id %s&quot;</span><span class="token punctuation">,</span> delay<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listenerId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>defaultDelay <span class="token operator">=</span> delay<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">ConsumerRecord</span>\\<span class="token operator">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span>\\<span class="token operator">&gt;</span> consumerRecord<span class="token punctuation">,</span> <span class="token class-name">Acknowledgment</span> acknowledgment<span class="token punctuation">,</span> <span class="token class-name">Consumer</span>\\<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span>\\<span class="token operator">&gt;</span> consumer<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">KafkaBackoffException</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>kafkaConsumerBackoffManager<span class="token punctuation">.</span><span class="token function">backOffIfNecessary</span><span class="token punctuation">(</span><span class="token function">createContext</span><span class="token punctuation">(</span>consumerRecord<span class="token punctuation">,</span>
          consumerRecord<span class="token punctuation">.</span><span class="token function">timestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> delaysPerTopic<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>consumerRecord<span class="token punctuation">.</span><span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultDelay<span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> consumer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">invokeDelegateOnMessage</span><span class="token punctuation">(</span>consumerRecord<span class="token punctuation">,</span> acknowledgment<span class="token punctuation">,</span> consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">KafkaConsumerBackoffManager<span class="token punctuation">.</span>Context</span> <span class="token function">createContext</span><span class="token punctuation">(</span><span class="token class-name">ConsumerRecord</span>\\<span class="token operator">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span>\\<span class="token operator">&gt;</span> data<span class="token punctuation">,</span> <span class="token keyword">long</span> nextExecutionTimestamp<span class="token punctuation">,</span> <span class="token class-name">Consumer</span>\\<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span>\\<span class="token operator">&gt;</span> consumer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>kafkaConsumerBackoffManager<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span>nextExecutionTimestamp<span class="token punctuation">,</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>listenerId<span class="token punctuation">,</span>
          <span class="token keyword">new</span> <span class="token class-name">TopicPartition</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于每个传入的消息，这个适配器首先接收记录并检查为该主题设置的延迟。这将在配置中设置，如果没有设置，则使用默认延迟。</p><p>现有的_KafkaConsumerBackoffManager#backOffIfNecessary_方法的实现检查上下文记录的时间戳和当前时间戳之间的差异。如果差异是正的，表明没有消费到期，分区暂停并引发_KafkaBackoffException_。否则，它将记录发送到_KafkaListener_方法进行消费。</p><h2 id="_5-监听器配置" tabindex="-1"><a class="header-anchor" href="#_5-监听器配置"><span>5. 监听器配置</span></a></h2><p>**_ConcurrentKafkaListenerContainerFactory_是Spring Kafka的默认实现，负责构建_KafkaListener_的容器。**它允许我们配置并发_KafkaListener_实例的数量。每个容器可以被视为一个逻辑线程池，其中每个线程负责监听来自一个或多个Kafka主题的消息。</p><p><em>DelayedMessageListenerAdapter_需要通过声明自定义_ConcurrentKafkaListenerContainerFactory_与监听器一起配置。我们可以为特定主题如_web.orders_设置延迟，并为任何其他主题设置默认延迟_0</em>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">ConcurrentKafkaListenerContainerFactory</span>\\<span class="token operator">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span>\\<span class="token operator">&gt;</span> <span class="token function">kafkaListenerContainerFactory</span><span class="token punctuation">(</span><span class="token class-name">ConsumerFactory</span>\\<span class="token operator">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span>\\<span class="token operator">&gt;</span> consumerFactory<span class="token punctuation">,</span>
  <span class="token class-name">ListenerContainerRegistry</span> registry<span class="token punctuation">,</span> <span class="token class-name">TaskScheduler</span> scheduler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ConcurrentKafkaListenerContainerFactory</span>\\<span class="token operator">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span>\\<span class="token operator">&gt;</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentKafkaListenerContainerFactory</span>\\<span class="token operator">&lt;</span>\\<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    factory<span class="token punctuation">.</span><span class="token function">setConsumerFactory</span><span class="token punctuation">(</span>consumerFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">KafkaConsumerBackoffManager</span> backOffManager <span class="token operator">=</span> <span class="token function">createBackOffManager</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> scheduler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    factory<span class="token punctuation">.</span><span class="token function">getContainerProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">setAckMode</span><span class="token punctuation">(</span><span class="token class-name">ContainerProperties<span class="token punctuation">.</span>AckMode</span><span class="token punctuation">.</span><span class="token constant">RECORD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    factory<span class="token punctuation">.</span><span class="token function">setContainerCustomizer</span><span class="token punctuation">(</span>container <span class="token operator">-</span>\\<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">DelayedMessageListenerAdapter</span>\\<span class="token operator">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span>\\<span class="token operator">&gt;</span> delayedAdapter <span class="token operator">=</span> <span class="token function">wrapWithDelayedMessageListenerAdapter</span><span class="token punctuation">(</span>backOffManager<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span>
        delayedAdapter<span class="token punctuation">.</span><span class="token function">setDelayForTopic</span><span class="token punctuation">(</span><span class="token string">&quot;web.orders&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        delayedAdapter<span class="token punctuation">.</span><span class="token function">setDefaultDelay</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token constant">ZERO</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        container<span class="token punctuation">.</span><span class="token function">setupMessageListener</span><span class="token punctuation">(</span>delayedAdapter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> factory<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">DelayedMessageListenerAdapter</span>\\<span class="token operator">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span>\\<span class="token operator">&gt;</span> <span class="token function">wrapWithDelayedMessageListenerAdapter</span><span class="token punctuation">(</span><span class="token class-name">KafkaConsumerBackoffManager</span> backOffManager<span class="token punctuation">,</span>
  <span class="token class-name">ConcurrentMessageListenerContainer</span>\\<span class="token operator">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span>\\<span class="token operator">&gt;</span> container<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DelayedMessageListenerAdapter</span>\\<span class="token operator">&lt;</span>\\<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">MessageListener</span>\\<span class="token operator">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span>\\<span class="token operator">&gt;</span><span class="token punctuation">)</span> container<span class="token punctuation">.</span><span class="token function">getContainerProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">getMessageListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> backOffManager<span class="token punctuation">,</span> container<span class="token punctuation">.</span><span class="token function">getListenerId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token class-name">ContainerPartitionPausingBackOffManager</span> <span class="token function">createBackOffManager</span><span class="token punctuation">(</span><span class="token class-name">ListenerContainerRegistry</span> registry<span class="token punctuation">,</span> <span class="token class-name">TaskScheduler</span> scheduler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ContainerPartitionPausingBackOffManager</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span>
      <span class="token keyword">new</span> <span class="token class-name">ContainerPausingBackOffHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ListenerContainerPauseService</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> scheduler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>值得注意的是，将确认模式设置在_RECORD_级别是至关重要的，以确保如果处理过程中发生错误，消费者将重新传递消息。</p><p>最后，我们需要定义一个_TaskScheduler_ bean，以在延迟持续时间后恢复暂停的分区，并且这个调度器需要注入到_BackOffManager_中，后者将被_DelayedMessageListenerAdapter_使用：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">TaskScheduler</span> <span class="token function">taskScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-测试" tabindex="-1"><a class="header-anchor" href="#_6-测试"><span>6. 测试</span></a></h2><p>让我们确保_web.orders_主题上的订单在处理前经过10秒的延迟：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenKafkaBrokerExists_whenCreateOrderIsReceived_thenMessageShouldBeDelayed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token comment">// Given</span>
    <span class="token keyword">var</span> orderId <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Order</span> order <span class="token operator">=</span> <span class="token class-name">Order</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">orderId</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">price</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">orderGeneratedDateTime</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">address</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;41 Felix Avenue, Luton&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> orderString <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ProducerRecord</span>\\<span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span>\\<span class="token operator">&gt;</span> record <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span>\\<span class="token operator">&lt;</span>\\<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string">&quot;web.orders&quot;</span><span class="token punctuation">,</span> orderString<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// When</span>
    testKafkaProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">atMost</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">1800</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">until</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span>\\<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
          <span class="token comment">// then</span>
          <span class="token class-name">Map</span>\\<span class="token operator">&lt;</span><span class="token constant">UUID</span><span class="token punctuation">,</span> <span class="token class-name">Order</span>\\<span class="token operator">&gt;</span> orders <span class="token operator">=</span> orderService<span class="token punctuation">.</span>getOrder继续翻译：

\`\`\`java
      <span class="token punctuation">.</span><span class="token function">getOrders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span> orders <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> orders<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>orders<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">getOrderGeneratedDateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> orders<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">getOrderProcessedTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> \\<span class="token operator">&gt;=</span> <span class="token number">10</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们将测试任何发送到_web.internal.orders_的订单遵循默认的0秒延迟：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenKafkaBrokerExists_whenCreateOrderIsReceivedForOtherTopics_thenMessageShouldNotBeDelayed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token comment">// Given</span>
    <span class="token keyword">var</span> orderId <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Order</span> order <span class="token operator">=</span> <span class="token class-name">Order</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">orderId</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">price</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">orderGeneratedDateTime</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">address</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;41 Felix Avenue, Luton&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> orderString <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ProducerRecord</span>\\<span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span>\\<span class="token operator">&gt;</span> record <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span>\\<span class="token operator">&lt;</span>\\<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string">&quot;web.internal.orders&quot;</span><span class="token punctuation">,</span> orderString<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// When</span>
    testKafkaProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">atMost</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">1800</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">until</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span>\\<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
          <span class="token comment">// Then</span>
          <span class="token class-name">Map</span>\\<span class="token operator">&lt;</span><span class="token constant">UUID</span><span class="token punctuation">,</span> <span class="token class-name">Order</span>\\<span class="token operator">&gt;</span> orders <span class="token operator">=</span> orderService<span class="token punctuation">.</span><span class="token function">getOrders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Time....&quot;</span> <span class="token operator">+</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>orders<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">getOrderGeneratedDateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> orders<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">getOrderProcessedTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span> orders <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> orders<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>orders<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">getOrderGeneratedDateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> orders<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">getOrderProcessedTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> \\<span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-结论" tabindex="-1"><a class="header-anchor" href="#_7-结论"><span>7. 结论</span></a></h2><p>在本教程中，我们探讨了Kafka消费者如何通过固定间隔延迟处理消息。</p><p>我们可以通过使用消息中嵌入的消息持续时间来动态设置处理延迟来修改实现。</p><p>如常，示例的源代码可在GitHub上找到。 OK</p>`,38),o=[e];function c(l,i){return a(),s("div",null,o)}const k=n(p,[["render",c],["__file","Consumer Processing of Kafka Messages With Delay.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/Archive/Consumer%20Processing%20of%20Kafka%20Messages%20With%20Delay.html","title":"Apache Kafka消费者延迟处理消息概述","lang":"zh-CN","frontmatter":{"date":"2024-06-13T00:00:00.000Z","category":["Kafka","Spring"],"tag":["Kafka","Consumer","Delay","Spring Kafka"],"description":"Apache Kafka消费者延迟处理消息概述 Apache Kafka是一个事件流平台，用于大规模地收集、处理、存储和集成数据。有时，我们可能希望延迟从Kafka处理消息。例如，一个客户订单处理系统设计为在X秒的延迟后处理订单，以适应这个时间框架内的取消。 在本文中，我们将使用Spring Kafka探索Kafka消息的延迟消费者处理。尽管Kafka...","head":[["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/Archive/Consumer%20Processing%20of%20Kafka%20Messages%20With%20Delay.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Apache Kafka消费者延迟处理消息概述"}],["meta",{"property":"og:description","content":"Apache Kafka消费者延迟处理消息概述 Apache Kafka是一个事件流平台，用于大规模地收集、处理、存储和集成数据。有时，我们可能希望延迟从Kafka处理消息。例如，一个客户订单处理系统设计为在X秒的延迟后处理订单，以适应这个时间框架内的取消。 在本文中，我们将使用Spring Kafka探索Kafka消息的延迟消费者处理。尽管Kafka..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-21T09:54:56.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Kafka"}],["meta",{"property":"article:tag","content":"Consumer"}],["meta",{"property":"article:tag","content":"Delay"}],["meta",{"property":"article:tag","content":"Spring Kafka"}],["meta",{"property":"article:published_time","content":"2024-06-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-21T09:54:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Apache Kafka消费者延迟处理消息概述\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-13T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-21T09:54:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]]},"headers":[{"level":2,"title":"2. 应用上下文","slug":"_2-应用上下文","link":"#_2-应用上下文","children":[]},{"level":2,"title":"3. Kafka监听器和外部服务","slug":"_3-kafka监听器和外部服务","link":"#_3-kafka监听器和外部服务","children":[]},{"level":2,"title":"4. 自定义延迟消息监听器","slug":"_4-自定义延迟消息监听器","link":"#_4-自定义延迟消息监听器","children":[]},{"level":2,"title":"5. 监听器配置","slug":"_5-监听器配置","link":"#_5-监听器配置","children":[]},{"level":2,"title":"6. 测试","slug":"_6-测试","link":"#_6-测试","children":[]},{"level":2,"title":"7. 结论","slug":"_7-结论","link":"#_7-结论","children":[]}],"git":{"createdTime":1718963696000,"updatedTime":1718963696000,"contributors":[{"name":"Lance Li","email":"lance.jx.li@gtomato.com","commits":1}]},"readingTime":{"minutes":5.33,"words":1599},"filePathRelative":"posts/baeldung/Archive/Consumer Processing of Kafka Messages With Delay.md","localizedDate":"2024年6月13日","excerpt":"\\n<p>Apache Kafka是一个事件流平台，用于大规模地收集、处理、存储和集成数据。有时，我们可能希望延迟从Kafka处理消息。例如，一个客户订单处理系统设计为在X秒的延迟后处理订单，以适应这个时间框架内的取消。</p>\\n<p>在本文中，我们将使用Spring Kafka探索Kafka消息的延迟消费者处理。尽管Kafka没有提供开箱即用的延迟消费消息支持，但我们将查看实现的替代选项。</p>\\n<h2>2. 应用上下文</h2>\\n<p><strong>Kafka提供了多种方式来在错误时重试。我们将使用这种重试机制来延迟消费者处理消息。因此，了解Kafka重试的工作方式是值得的。</strong></p>","autoDesc":true}');export{k as comp,d as data};
