import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as e}from"./app-BaMF6Agx.js";const t={},p=e(`<h1 id="使用spock的数据管道和表格提高测试覆盖率和可读性" tabindex="-1"><a class="header-anchor" href="#使用spock的数据管道和表格提高测试覆盖率和可读性"><span>使用Spock的数据管道和表格提高测试覆盖率和可读性</span></a></h1><p>Spock是编写测试的一个很好的框架，特别是在提高测试覆盖率方面。</p><p>在本教程中，我们将探讨Spock的数据管道以及如何通过向数据管道添加额外数据来提高我们的行和分支代码覆盖率。我们还将看看当数据变得太大时该怎么办。</p><h2 id="_2-我们测试的主题" tabindex="-1"><a class="header-anchor" href="#_2-我们测试的主题"><span>2. 我们测试的主题</span></a></h2><p>让我们从一个添加两个数字的方法开始，但有一个转折。如果第一个或第二个数字是42，则返回42：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataPipesSubject</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token function">addWithATwist</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> first<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> second<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> <span class="token number">42</span> <span class="token operator">||</span> second <span class="token operator">==</span> <span class="token number">42</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">42</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> first <span class="token operator">+</span> second<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们想使用各种输入组合来测试这个方法。</p><p>让我们看看如何编写和演变一个简单的测试，通过数据管道来输入我们的输入。</p><h2 id="_3-准备我们的数据驱动测试" tabindex="-1"><a class="header-anchor" href="#_3-准备我们的数据驱动测试"><span>3. 准备我们的数据驱动测试</span></a></h2><p>让我们创建一个测试类，用单个场景的测试开始，然后构建它以添加数据管道：</p><p>首先，让我们创建我们的_DataPipesTest_类，包含我们测试的主题：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Title</span><span class="token punctuation">(</span><span class="token string">&quot;测试使用数据管道的各种方式&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">DataPipesTest</span> <span class="token keyword">extends</span> <span class="token class-name">Specification</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Subject</span>
    def dataPipesSubject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataPipesSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用Spock的_Title_注解围绕类，为我们即将进行的测试提供一些额外的上下文。</p><p>我们还使用Spock的_Subject_注解标记了我们的测试主题。注意，我们应该小心从_spock.lang_而不是_javax.security.auth_导入我们的_Subject_。</p><p>虽然不是绝对必要，但这种语法糖有助于我们快速识别正在测试的内容。</p><p>现在让我们用Spock的_given_/<em>when</em>/_then_语法创建一个测试，使用我们的前两个输入1和2：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>def <span class="token string">&quot;given two numbers when we add them then our result is the sum of the inputs&quot;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    given<span class="token operator">:</span> <span class="token string">&quot;some inputs&quot;</span>
    def first <span class="token operator">=</span> <span class="token number">1</span>
    def second <span class="token operator">=</span> <span class="token number">2</span>

    and<span class="token operator">:</span> <span class="token string">&quot;an expected result&quot;</span>
    def expectedResult <span class="token operator">=</span> <span class="token number">3</span>

    when<span class="token operator">:</span> <span class="token string">&quot;we add them together&quot;</span>
    def result <span class="token operator">=</span> dataPipesSubject<span class="token punctuation">.</span><span class="token function">addWithATwist</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> second<span class="token punctuation">)</span>

    then<span class="token operator">:</span> <span class="token string">&quot;we get our expected answer&quot;</span>
    result <span class="token operator">==</span> expectedResult
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了准备我们的测试进行数据管道，让我们将我们的输入从_given/and_块移动到一个_where_块：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>def <span class="token string">&quot;given a where clause with our inputs when we add them then our result is the sum of the inputs&quot;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    when<span class="token operator">:</span> <span class="token string">&quot;we add our inputs together&quot;</span>
    def result <span class="token operator">=</span> dataPipesSubject<span class="token punctuation">.</span><span class="token function">addWithATwist</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> second<span class="token punctuation">)</span>

    then<span class="token operator">:</span> <span class="token string">&quot;we get our expected answer&quot;</span>
    result <span class="token operator">==</span> expectedResult

    where<span class="token operator">:</span> <span class="token string">&quot;we have various inputs&quot;</span>
    first <span class="token operator">=</span> <span class="token number">1</span>
    second <span class="token operator">=</span> <span class="token number">2</span>
    expectedResult <span class="token operator">=</span> <span class="token number">3</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Spock评估_where_块，并隐式地将任何变量作为参数添加到测试中。因此，Spock看到我们的方法声明如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>def <span class="token string">&quot;given some declared method parameters when we add our inputs then those types are used&quot;</span><span class="token punctuation">(</span><span class="token keyword">int</span> first<span class="token punctuation">,</span> <span class="token keyword">int</span> second<span class="token punctuation">,</span> <span class="token keyword">int</span> expectedResult<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>注意，当我们将数据强制转换为特定类型时，我们声明类型和变量作为方法参数。</strong></p><p>由于我们的测试非常简单，让我们将_when_和_then_块合并到一个单独的_expect_块中：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>def <span class="token string">&quot;given an expect block to simplify our test when we add our inputs then our result is the sum of the two numbers&quot;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    expect<span class="token operator">:</span> <span class="token string">&quot;our addition to get the right result&quot;</span>
    dataPipesSubject<span class="token punctuation">.</span><span class="token function">addWithATwist</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> second<span class="token punctuation">)</span> <span class="token operator">==</span> expectedResult

    where<span class="token operator">:</span> <span class="token string">&quot;we have various inputs&quot;</span>
    first <span class="token operator">=</span> <span class="token number">1</span>
    second <span class="token operator">=</span> <span class="token number">2</span>
    expectedResult <span class="token operator">=</span> <span class="token number">3</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们已经简化了我们的测试，我们准备添加我们的第一个数据管道。</p><h2 id="_4-数据管道是什么" tabindex="-1"><a class="header-anchor" href="#_4-数据管道是什么"><span>4. 数据管道是什么？</span></a></h2><p><strong>Spock中的数据管道是将不同的数据组合输入到我们的测试中的一种方式</strong>。这有助于在考虑多个场景时保持我们的测试代码的可读性。</p><p><strong>管道可以是任何_Iterable_ - 我们甚至可以创建自己的，如果它实现了_Iterable_接口</strong>！</p><h3 id="_4-1-简单的数据管道" tabindex="-1"><a class="header-anchor" href="#_4-1-简单的数据管道"><span>4.1. 简单的数据管道</span></a></h3><p>由于数组是_Iterable_，让我们首先将我们的单一输入转换为数组，并使用数据管道‘&lt;&lt;’将它们输入到我们的测试中：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>where<span class="token operator">:</span> <span class="token string">&quot;we have various inputs&quot;</span>
first <span class="token operator">&lt;&lt;</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
second <span class="token operator">&lt;&lt;</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
expectedResult <span class="token operator">&lt;&lt;</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以通过向每个数组数据管道添加条目来添加额外的测试用例。</p><p>所以让我们为我们的场景2 + 2 = 4和3 + 5 = 8添加一些数据到我们的管道：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>first <span class="token operator">&lt;&lt;</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
second <span class="token operator">&lt;&lt;</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
expectedResult <span class="token operator">&lt;&lt;</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了使我们的测试更易于阅读，让我们将我们的_first_和_second_输入组合成一个多变量数组数据管道，暂时将我们的_expectedResult_分开：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>where<span class="token operator">:</span> <span class="token string">&quot;we have various inputs&quot;</span>
<span class="token punctuation">[</span>first<span class="token punctuation">,</span> second<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span>

and<span class="token operator">:</span> <span class="token string">&quot;an expected result&quot;</span>
expectedResult <span class="token operator">&lt;&lt;</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于<strong>我们可以引用我们已经定义的输入</strong>，我们可以将我们的预期结果数据管道替换为以下内容：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>expectedResult <span class="token operator">=</span> first <span class="token operator">+</span> second
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但是让我们将其与我们的输入管道结合起来，因为我们正在测试的方法有一些微妙之处，这会破坏一个简单的加法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token punctuation">[</span>first<span class="token punctuation">,</span> second<span class="token punctuation">,</span> expectedResult<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-映射和方法" tabindex="-1"><a class="header-anchor" href="#_4-2-映射和方法"><span>4.2. 映射和方法</span></a></h3><p>当我们想要更多的灵活性，并且我们使用Spock 2.2或更高版本时，我们可以使用_Map_作为我们的输入数据管道：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>where<span class="token operator">:</span> <span class="token string">&quot;we have various inputs in the form of a map&quot;</span>
<span class="token punctuation">[</span>first<span class="token punctuation">,</span> second<span class="token punctuation">,</span> expectedResult<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span>
        first <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
        second<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
        expectedResult<span class="token operator">:</span> <span class="token number">3</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>
        first <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
        second<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
        expectedResult<span class="token operator">:</span> <span class="token number">4</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们也可以从单独的方法中输入我们的数据。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token punctuation">[</span>first<span class="token punctuation">,</span> second<span class="token punctuation">,</span> expectedResult<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token function">dataFeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>让我们看看当我们将我们的映射数据管道移动到一个_dataFeed_方法时，它是什么样子：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>def <span class="token function">dataFeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>
        <span class="token punctuation">[</span>
            first <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
            second<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
            expectedResult<span class="token operator">:</span> <span class="token number">3</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span>
            first <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
            second<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
            expectedResult<span class="token operator">:</span> <span class="token number">4</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>尽管这种方法有效，但使用多个输入仍然感觉笨拙。让我们看看Spock的DataTable如何改进这一点。</p><p>Spock的DataTable格式采用一个或多个数据管道，使它们更具视觉吸引力。</p><p>让我们将我们的测试方法中的_where_块重写为使用DataTable而不是一组数据管道：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>where<span class="token operator">:</span> <span class="token string">&quot;we have various inputs&quot;</span>
first <span class="token operator">|</span> second <span class="token operator">||</span> expectedResult
<span class="token number">1</span>     <span class="token operator">|</span> <span class="token number">2</span>      <span class="token operator">||</span> <span class="token number">3</span>
<span class="token number">2</span>     <span class="token operator">|</span> <span class="token number">2</span>      <span class="token operator">||</span> <span class="token number">4</span>
<span class="token number">3</span>     <span class="token operator">|</span> <span class="token number">5</span>      <span class="token operator">||</span> <span class="token number">8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，每一行都包含了特定场景的输入和预期结果，这使我们的测试场景更容易阅读。</p><p><strong>作为一个视觉提示和最佳实践，我们使用了双‘||’来分隔我们的输入和预期结果</strong>。</p><p>当我们用这三个迭代的代码覆盖率运行我们的测试时，我们看到并非所有的执行行都被覆盖了。我们的_addWithATwist_方法有一个特殊情况，当任一输入是42时：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> <span class="token number">42</span> <span class="token operator">||</span> second <span class="token operator">==</span> <span class="token number">42</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">42</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以，让我们添加一个场景，我们的_first_输入是42，确保我们的代码执行我们的_if_语句内的行。让我们也添加一个场景，我们的_second_输入是42，以确保我们的测试覆盖所有的执行分支：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token number">42</span>    <span class="token operator">|</span> <span class="token number">10</span>     <span class="token operator">||</span> <span class="token number">42</span>
<span class="token number">1</span>     <span class="token operator">|</span> <span class="token number">42</span>     <span class="token operator">||</span> <span class="token number">42</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>所以这是我们最终的_where_块，迭代使我们的代码行和分支覆盖：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>where<span class="token operator">:</span> <span class="token string">&quot;we have various inputs&quot;</span>
first <span class="token operator">|</span> second <span class="token operator">||</span> expectedResult
<span class="token number">1</span>     <span class="token operator">|</span> <span class="token number">2</span>      <span class="token operator">||</span> <span class="token number">3</span>
<span class="token number">2</span>     <span class="token operator">|</span> <span class="token number">2</span>      <span class="token operator">||</span> <span class="token number">4</span>
<span class="token number">3</span>     <span class="token operator">|</span> <span class="token number">5</span>      <span class="token operator">||</span> <span class="token number">8</span>
<span class="token number">42</span>    <span class="token operator">|</span> <span class="token number">10</span>     <span class="token operator">||</span> <span class="token number">42</span>
<span class="token number">1</span>     <span class="token operator">|</span> <span class="token number">42</span>     <span class="token operator">||</span> <span class="token number">42</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们执行这些测试时，我们的测试运行器为每次迭代渲染了一行：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">DataPipesTest</span>
 <span class="token operator">-</span> use table <span class="token keyword">to</span> <span class="token namespace">supply</span> the inputs
    <span class="token operator">-</span> use table <span class="token keyword">to</span> <span class="token namespace">supply</span> the inputs <span class="token punctuation">[</span>first<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> second<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> expectedResult<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> #<span class="token number">0</span><span class="token punctuation">]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-可读性改进" tabindex="-1"><a class="header-anchor" href="#_6-可读性改进"><span>6. 可读性改进</span></a></h2><p>我们有一些技术可以使我们的测试更加易于阅读。</p><h3 id="_6-1-在我们的方法名称中插入变量" tabindex="-1"><a class="header-anchor" href="#_6-1-在我们的方法名称中插入变量"><span>6.1. 在我们的方法名称中插入变量</span></a></h3><p><strong>当我们想要更具表现力的测试执行时，我们可以在方法名称中添加变量。</strong></p><p>所以让我们通过插入来自我们表格的列标题变量，前缀为‘#’，并添加一个场景列来增强我们测试的方法名称：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>def <span class="token string">&quot;given a #scenario case when we add our inputs, #first and #second, then we get our expected result: #expectedResult&quot;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    expect<span class="token operator">:</span> <span class="token string">&quot;our addition to get the right result&quot;</span>
    dataPipesSubject<span class="token punctuation">.</span><span class="token function">addWithATwist</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> second<span class="token punctuation">)</span> <span class="token operator">==</span> expectedResult

    where<span class="token operator">:</span> <span class="token string">&quot;we have various inputs&quot;</span>
    scenario       <span class="token operator">|</span> first <span class="token operator">|</span> second <span class="token operator">||</span> expectedResult
    <span class="token string">&quot;simple&quot;</span>       <span class="token operator">|</span> <span class="token number">1</span>     <span class="token operator">|</span> <span class="token number">2</span>      <span class="token operator">||</span> <span class="token number">3</span>
    <span class="token string">&quot;double 2&quot;</span>     <span class="token operator">|</span> <span class="token number">2</span>     <span class="token operator">|</span> <span class="token number">2</span>      <span class="token operator">||</span> <span class="token number">4</span>
    <span class="token string">&quot;special case&quot;</span> <span class="token operator">|</span> <span class="token number">42</span>    <span class="token operator">|</span> <span class="token number">10</span>     <span class="token operator">||</span> <span class="token number">42</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，当我们运行测试时，我们的测试运行器将输出渲染为更具表现力的：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">DataPipesTest</span>
<span class="token operator">-</span> given a #scenario <span class="token keyword">case</span> when we add our inputs<span class="token punctuation">,</span> #first and #second<span class="token punctuation">,</span> then we get our expected result<span class="token operator">:</span> #expectedResult
  <span class="token operator">-</span> given a simple <span class="token keyword">case</span> when we add our inputs<span class="token punctuation">,</span> <span class="token number">1</span> and <span class="token number">2</span><span class="token punctuation">,</span> then we get our expected result<span class="token operator">:</span> <span class="token number">3</span>
  <span class="token operator">-</span> given a <span class="token keyword">double</span> <span class="token number">2</span> <span class="token keyword">case</span> when we add our inputs<span class="token punctuation">,</span> <span class="token number">2</span> and <span class="token number">2</span><span class="token punctuation">,</span> then we get our expected result<span class="token operator">:</span> <span class="token number">4</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们使用这种方法，但如果输入数据管道名称错误，Spock将用类似于以下的消息失败测试：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Error</span> in <span class="token annotation punctuation">@Unroll</span><span class="token punctuation">,</span> could not find a matching variable <span class="token keyword">for</span> expression<span class="token operator">:</span> myWrongVariableName
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>和以前一样，<strong>我们可以在表格数据中使用我们已经声明的输入，即使在同一行中</strong>。</p><p>所以，让我们添加一行，引用我们的列标题变量：<em>first_和_second</em>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>scenario              <span class="token operator">|</span> first <span class="token operator">|</span> second <span class="token operator">||</span> expectedResult
<span class="token string">&quot;double 2 referenced&quot;</span> <span class="token operator">|</span> <span class="token number">2</span>     <span class="token operator">|</span> first  <span class="token operator">||</span> first <span class="token operator">+</span> second
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2-当表格列太宽时" tabindex="-1"><a class="header-anchor" href="#_6-2-当表格列太宽时"><span>6.2. 当表格列太宽时</span></a></h3><p>我们的IDE可能包含对Spock表格的内在支持 - 我们可以使用IntelliJ的“格式化代码”功能( <em>Ctrl+Alt+L)</em> 为我们对齐表格列！知道这一点，我们可以快速添加数据，而不必担心布局，并在之后格式化它。</p><p>然而，有时我们表格中的数据项长度会导致格式化的表格行太宽而无法适应一行。通常，这是当我们在输入中有字符串时。</p><p>为了演示这一点，让我们创建一个方法，它将字符串作为输入，然后简单地添加一个感叹号：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> <span class="token function">addExclamation</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> first<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> first <span class="token operator">+</span> <span class="token char">&#39;!&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在让我们用一个长字符串作为输入创建一个测试：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>def <span class="token string">&quot;given long strings when our tables our too big then we can use shared or static variables to shorten the table&quot;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    expect<span class="token operator">:</span> <span class="token string">&quot;our addition to get the right result&quot;</span>
    dataPipesSubject<span class="token punctuation">.</span><span class="token function">addExclamation</span><span class="token punctuation">(</span>longString<span class="token punctuation">)</span> <span class="token operator">==</span> expectedResult

    where<span class="token operator">:</span> <span class="token string">&quot;we have various inputs&quot;</span>
    longString                                                                                                  <span class="token operator">||</span> expectedResult
    &#39;<span class="token class-name">When</span> we have a very <span class="token keyword">long</span> string we can use a <span class="token keyword">static</span> or <span class="token annotation punctuation">@Shared</span> variable <span class="token keyword">to</span> <span class="token namespace">make</span> our tables easier <span class="token keyword">to</span> <span class="token namespace">read</span><span class="token char">&#39; || &#39;</span><span class="token class-name">When</span> we have a very <span class="token keyword">long</span> string we can use a <span class="token keyword">static</span> or <span class="token annotation punctuation">@Shared</span> variable <span class="token keyword">to</span> <span class="token namespace">make</span> our tables easier <span class="token keyword">to</span> <span class="token namespace">read</span><span class="token operator">!</span>&#39;
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，让我们通过用静态或@Shared变量替换字符串来使这个表格更紧凑。注意，我们的表格不能使用在测试中声明的变量 - <strong>我们的表格只能使用静态，<em>@Shared</em>，或计算值。</strong></p><p>所以，让我们声明一个静态和共享变量，并在表格中使用这些变量：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> def <span class="token constant">STATIC_VARIABLE</span> <span class="token operator">=</span> &#39;<span class="token class-name">When</span> we have a very <span class="token keyword">long</span> string we can use a <span class="token keyword">static</span> variable&#39;
<span class="token annotation punctuation">@Shared</span> def <span class="token constant">SHARED_VARIABLE</span> <span class="token operator">=</span> &#39;<span class="token class-name">When</span> we have a very <span class="token keyword">long</span> string we can annotate our variable <span class="token keyword">with</span> <span class="token annotation punctuation">@Shared</span>&#39;
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

scenario         <span class="token operator">|</span> longString      <span class="token operator">||</span> expectedResult
&#39;use of <span class="token keyword">static</span>&#39;  <span class="token operator">|</span> <span class="token constant">STATIC_VARIABLE</span> <span class="token operator">||</span> <span class="token string">&quot;$STATIC_VARIABLE!&quot;</span>
&#39;use of <span class="token annotation punctuation">@Shared</span>&#39; <span class="token operator">|</span> <span class="token constant">SHARED_VARIABLE</span> <span class="token operator">||</span> <span class="token string">&quot;$SHARED_VARIABLE!&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们的表格更加紧凑了！我们还使用了Groovy的_String_插值，在预期结果的双引号字符串中扩展变量，以展示这如何帮助可读性。注意，对于简单的变量替换，仅使用_$<em>就足够了，但对于更复杂的情况，我们需要将表达式包装在花括号</em>{}_内。</p><p>我们可以使一个大表格更易于阅读的另一种方式是<strong>通过使用两个或更多的下划线‘__’将表格分成多个部分</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>where<span class="token operator">:</span> <span class="token string">&quot;we have various inputs&quot;</span>
first <span class="token operator">|</span> second
<span class="token number">1</span>     <span class="token operator">|</span> <span class="token number">2</span>
<span class="token number">2</span>     <span class="token operator">|</span> <span class="token number">3</span>
<span class="token number">3</span>     <span class="token operator">|</span> <span class="token number">5</span>
__
expectedResult <span class="token operator">|</span> _
<span class="token number">3</span>              <span class="token operator">|</span> _
<span class="token number">5</span>              <span class="token operator">|</span> _
<span class="token number">8</span>              <span class="token operator">|</span> _
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，我们需要在分割的表格中具有相同数量的行。</p><p><strong>Spock表格至少必须有两列，但在我们分割表格后，<em>expectedResult_将独自一人，所以我们添加了一个空的‘</em>’列</strong>以满足这个要求。</p><h3 id="_6-3-替代表格分隔符" tabindex="-1"><a class="header-anchor" href="#_6-3-替代表格分隔符"><span>6.3. 替代表格分隔符</span></a></h3><p>有时，我们可能不想使用‘|’作为分隔符。在这种情下，我们可以使用‘;’代替：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>first <span class="token punctuation">;</span> second <span class="token punctuation">;</span><span class="token punctuation">;</span> expectedResult
<span class="token number">1</span>     <span class="token punctuation">;</span> <span class="token number">2</span>      <span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token number">3</span>
<span class="token number">2</span>     <span class="token punctuation">;</span> <span class="token number">3</span>      <span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token number">5</span>
<span class="token number">3</span>     <span class="token punctuation">;</span> <span class="token number">5</span>      <span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token number">8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但我们不能在同一个表格中混合使用‘|’和‘;’列分隔符！</p><h2 id="_7-结论" tabindex="-1"><a class="header-anchor" href="#_7-结论"><span>7. 结论</span></a></h2><p>在本文中，我们学习了如何在Spock的_where_块中使用数据输入。我们了解到数据表格是数据输入的更美观的表示，并且我们可以通过简单地向数据表格添加一行数据来提高测试覆盖率。我们还探索了几种使我们的数据更易于阅读的方法，特别是当处理大的数据值或当我们的表格变得太大时。</p><p>像往常一样，本文的源代码可以在GitHub上找到。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div>`,97),o=[p];function l(c,i){return a(),s("div",null,o)}const d=n(t,[["render",l],["__file","2024-06-23-Improving Test Coverage and Readability With Spock s Data Pipes and Tables.html.vue"]]),k=JSON.parse('{"path":"/posts/baeldung/2024-06-23/2024-06-23-Improving%20Test%20Coverage%20and%20Readability%20With%20Spock%20s%20Data%20Pipes%20and%20Tables.html","title":"使用Spock的数据管道和表格提高测试覆盖率和可读性","lang":"zh-CN","frontmatter":{"date":"2024-06-23T00:00:00.000Z","category":["Java","Spock"],"tag":["测试覆盖率","数据管道"],"head":[["meta",{"name":"keywords","content":"Spock, 测试覆盖率, 数据管道, 数据表格"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-06-23/2024-06-23-Improving%20Test%20Coverage%20and%20Readability%20With%20Spock%20s%20Data%20Pipes%20and%20Tables.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"使用Spock的数据管道和表格提高测试覆盖率和可读性"}],["meta",{"property":"og:description","content":"使用Spock的数据管道和表格提高测试覆盖率和可读性 Spock是编写测试的一个很好的框架，特别是在提高测试覆盖率方面。 在本教程中，我们将探讨Spock的数据管道以及如何通过向数据管道添加额外数据来提高我们的行和分支代码覆盖率。我们还将看看当数据变得太大时该怎么办。 2. 我们测试的主题 让我们从一个添加两个数字的方法开始，但有一个转折。如果第一个或..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-23T14:31:38.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"测试覆盖率"}],["meta",{"property":"article:tag","content":"数据管道"}],["meta",{"property":"article:published_time","content":"2024-06-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-23T14:31:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用Spock的数据管道和表格提高测试覆盖率和可读性\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-23T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-23T14:31:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"使用Spock的数据管道和表格提高测试覆盖率和可读性 Spock是编写测试的一个很好的框架，特别是在提高测试覆盖率方面。 在本教程中，我们将探讨Spock的数据管道以及如何通过向数据管道添加额外数据来提高我们的行和分支代码覆盖率。我们还将看看当数据变得太大时该怎么办。 2. 我们测试的主题 让我们从一个添加两个数字的方法开始，但有一个转折。如果第一个或..."},"headers":[{"level":2,"title":"2. 我们测试的主题","slug":"_2-我们测试的主题","link":"#_2-我们测试的主题","children":[]},{"level":2,"title":"3. 准备我们的数据驱动测试","slug":"_3-准备我们的数据驱动测试","link":"#_3-准备我们的数据驱动测试","children":[]},{"level":2,"title":"4. 数据管道是什么？","slug":"_4-数据管道是什么","link":"#_4-数据管道是什么","children":[{"level":3,"title":"4.1. 简单的数据管道","slug":"_4-1-简单的数据管道","link":"#_4-1-简单的数据管道","children":[]},{"level":3,"title":"4.2. 映射和方法","slug":"_4-2-映射和方法","link":"#_4-2-映射和方法","children":[]}]},{"level":2,"title":"6. 可读性改进","slug":"_6-可读性改进","link":"#_6-可读性改进","children":[{"level":3,"title":"6.1. 在我们的方法名称中插入变量","slug":"_6-1-在我们的方法名称中插入变量","link":"#_6-1-在我们的方法名称中插入变量","children":[]},{"level":3,"title":"6.2. 当表格列太宽时","slug":"_6-2-当表格列太宽时","link":"#_6-2-当表格列太宽时","children":[]},{"level":3,"title":"6.3. 替代表格分隔符","slug":"_6-3-替代表格分隔符","link":"#_6-3-替代表格分隔符","children":[]}]},{"level":2,"title":"7. 结论","slug":"_7-结论","link":"#_7-结论","children":[]}],"git":{"createdTime":1719153098000,"updatedTime":1719153098000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":10.17,"words":3050},"filePathRelative":"posts/baeldung/2024-06-23/2024-06-23-Improving Test Coverage and Readability With Spock s Data Pipes and Tables.md","localizedDate":"2024年6月23日","excerpt":"\\n<p>Spock是编写测试的一个很好的框架，特别是在提高测试覆盖率方面。</p>\\n<p>在本教程中，我们将探讨Spock的数据管道以及如何通过向数据管道添加额外数据来提高我们的行和分支代码覆盖率。我们还将看看当数据变得太大时该怎么办。</p>\\n<h2>2. 我们测试的主题</h2>\\n<p>让我们从一个添加两个数字的方法开始，但有一个转折。如果第一个或第二个数字是42，则返回42：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">DataPipesSubject</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">addWithATwist</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">final</span> <span class=\\"token keyword\\">int</span> first<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">final</span> <span class=\\"token keyword\\">int</span> second<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>first <span class=\\"token operator\\">==</span> <span class=\\"token number\\">42</span> <span class=\\"token operator\\">||</span> second <span class=\\"token operator\\">==</span> <span class=\\"token number\\">42</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">42</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">return</span> first <span class=\\"token operator\\">+</span> second<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{d as comp,k as data};
