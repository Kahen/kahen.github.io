import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-D9qUUkNr.js";const p={},e=t('<hr><h1 id="使用testcontainers与spring-data-cassandra" tabindex="-1"><a class="header-anchor" href="#使用testcontainers与spring-data-cassandra"><span>使用Testcontainers与Spring Data Cassandra</span></a></h1><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p>Apache Cassandra 是一个开源的分布式 NoSQL 数据库。它被设计用来<strong>处理大量数据，具有快速的读写性能，并且没有单点故障</strong>。</p><p>在本教程中，我们将探讨测试一个使用 Cassandra 数据库的 Spring Boot 应用程序。我们将解释如何使用 Testcontainers 库中的 Cassandra 容器设置集成测试。此外，我们将利用 Spring Data 仓库抽象来处理 Cassandra 的数据层。</p><p>最后，我们将展示如何在多个集成测试中重用共享的 Cassandra 容器实例。</p><p>Testcontainers 是一个 Java 库，它<strong>提供了 Docker 容器的轻量级、一次性实例</strong>。因此，我们通常在 Spring 中使用它来进行使用数据库的应用程序的集成测试。Testcontainers 使我们能够在不需要在本地机器上安装和管理数据库的情况下，在真实的数据库实例上进行测试。</p><h3 id="_2-1-maven-依赖" tabindex="-1"><a class="header-anchor" href="#_2-1-maven-依赖"><span>2.1. Maven 依赖</span></a></h3><p>Cassandra 容器在 Cassandra Testcontainers 模块中可用。这使得我们可以<strong>使用容器化的 Cassandra 实例</strong>。</p><p>与 <em>cassandra-unit</em> 库不同，Testcontainers 库<strong>完全兼容 JUnit 5</strong>。让我们从列出所需的 Maven 依赖开始：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```org.testcontainers```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```testcontainers```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```1.19.5```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>```test```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>```\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```org.testcontainers```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```cassandra```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```1.19.5```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>```test```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>```\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```org.testcontainers```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```junit-jupiter```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```1.19.5```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>```test```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>```\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-cassandra-容器" tabindex="-1"><a class="header-anchor" href="#_2-2-cassandra-容器"><span>2.2. Cassandra 容器</span></a></h3><p>容器化的数据库实例通常用于集成测试。同时<strong>确保我们的数据访问层代码与特定数据库版本完全兼容</strong>。</p><p>首先，我们需要使用 <em>@SpringBootTest</em> 和 <em>@Testcontainers</em> 注解我们的测试类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>\n<span class="token annotation punctuation">@Testcontainers</span>\n<span class="token keyword">class</span> <span class="token class-name">CassandraSimpleIntegrationTest</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们可以<strong>定义一个 Cassandra 容器并暴露其特定端口</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">CassandraContainer</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span>`` cassandra\n  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CassandraContainer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;cassandra:3.11.2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withExposedPorts</span><span class="token punctuation">(</span><span class="token number">9042</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们暴露了容器端口 <em>9042</em>。不过，需要注意的是，Testcontainers 会将其链接到一个随机的主机端口，稍后我们可以获取这个端口。</p><p>使用上述方法，Testcontainers 库会自动为我们启动一个 Docker 化的 Cassandra 容器实例，<strong>与测试类的生命周期对齐</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenCassandraContainer_whenSpringContextIsBootstrapped_thenContainerIsRunningWithNoExceptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">assertThat</span><span class="token punctuation">(</span>cassandra<span class="token punctuation">.</span><span class="token function">isRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们有一个运行中的 Cassandra 容器。然而，Spring 应用程序还不知道它。</p><h3 id="_2-3-覆盖测试属性" tabindex="-1"><a class="header-anchor" href="#_2-3-覆盖测试属性"><span>2.3. 覆盖测试属性</span></a></h3><p>为了让 Spring Data 能够<strong>与 Cassandra 容器建立连接</strong>，我们需要提供一些连接属性。我们将通过 <em>java.lang.System</em> 类定义系统属性来覆盖默认的 Cassandra 连接属性：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@BeforeAll</span>\n<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setupCassandraConnectionProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&quot;spring.cassandra.keyspace-name&quot;</span><span class="token punctuation">,</span> <span class="token constant">KEYSPACE_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&quot;spring.cassandra.contact-points&quot;</span><span class="token punctuation">,</span> cassandra<span class="token punctuation">.</span><span class="token function">getContainerIpAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&quot;spring.cassandra.port&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>cassandra<span class="token punctuation">.</span><span class="token function">getMappedPort</span><span class="token punctuation">(</span><span class="token number">9042</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们配置了 Spring Data 连接我们的 Cassandra 容器。不过，我们还需要创建一个 keyspace。</p><h3 id="_2-4-创建-keyspace" tabindex="-1"><a class="header-anchor" href="#_2-4-创建-keyspace"><span>2.4. 创建 Keyspace</span></a></h3><p>在 Cassandra 中创建任何表之前，我们需要创建一个 keyspace：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">createKeyspace</span><span class="token punctuation">(</span><span class="token class-name">Cluster</span> cluster<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Session</span> session <span class="token operator">=</span> cluster<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        session<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">&quot;CREATE KEYSPACE IF NOT EXISTS &quot;</span> <span class="token operator">+</span> <span class="token constant">KEYSPACE_NAME</span> <span class="token operator">+</span>\n          <span class="token string">&quot; WITH replication = &quot;</span> <span class="token operator">+</span>\n          <span class="token string">&quot;{&#39;class&#39;:&#39;SimpleStrategy&#39;,&#39;replication_factor&#39;:&#39;1&#39;};&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Cassandra 中，keyspace 非常类似于 RDBMS 中的数据库。它定义了数据在 Cassandra 集群节点上的复制方式。</p><h2 id="_3-spring-data-for-cassandra" tabindex="-1"><a class="header-anchor" href="#_3-spring-data-for-cassandra"><span>3. Spring Data for Cassandra</span></a></h2><p>Spring Data for Apache Cassandra <strong>将核心 Spring 概念应用于使用 Cassandra 的应用程序开发</strong>。它提供了仓库、查询构建器和简单的注释，用于丰富的对象映射。因此，它为使用不同数据库的 Spring 开发人员提供了熟悉的接口。</p><h3 id="_3-1-数据访问对象" tabindex="-1"><a class="header-anchor" href="#_3-1-数据访问对象"><span>3.1. 数据访问对象</span></a></h3><p>让我们首先准备一个简单的 DAO 类，我们将在稍后的集成测试中使用它：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Table</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@PrimaryKey</span>\n    <span class="token keyword">private</span> <span class="token class-name">UUID</span> id<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> make<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> model<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">int</span> year<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token class-name">UUID</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> make<span class="token punctuation">,</span> <span class="token class-name">String</span> model<span class="token punctuation">,</span> <span class="token keyword">int</span> year<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>make <span class="token operator">=</span> make<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>model <span class="token operator">=</span> model<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>year <span class="token operator">=</span> year<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">//getters, setters, equals 和 hashcode</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关键是要<strong>使用 <em>@Table</em> 注解</strong>从 <em>org.springframework.data.cassandra.core.mapping</em> 包。实际上，这个注解启用了自动领域对象映射。</p><h3 id="_3-2-cassandra-仓库" tabindex="-1"><a class="header-anchor" href="#_3-2-cassandra-仓库"><span>3.2. Cassandra 仓库</span></a></h3><p>Spring Data 使得为我们的 DAO 创建一个仓库变得非常简单。首先，我们需要在 Spring Boot 主类中启用 Cassandra 仓库：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>\n<span class="token annotation punctuation">@EnableCassandraRepositories</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">&quot;org.baeldung.springcassandra.repository&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringCassandraApplication</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们只需要创建一个扩展 <em>CassandraRepository</em> 的接口：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Repository</span>\n<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CarRepository</span> <span class="token keyword">extends</span> <span class="token class-name">CassandraRepository</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Car</span><span class="token punctuation">,</span> UUID<span class="token punctuation">&gt;</span></span>` <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在开始集成测试之前，我们需要定义两个额外的属性：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.data.cassandra.local-datacenter</span><span class="token punctuation">=</span><span class="token value attr-value">datacenter1</span>\n<span class="token key attr-name">spring.data.cassandra.schema-action</span><span class="token punctuation">=</span><span class="token value attr-value">create_if_not_exists</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>第一个属性定义了默认的本地数据中心名称。第二个属性将确保 Spring Data 为我们自动创建所需的数据库表。我们应该注意到，<strong>这个设置不应该在生产系统中使用</strong>。</p><p>由于我们正在使用 Testcontainers，我们不需要担心测试完成后删除表。每次运行测试时，都会为我们启动一个新的容器。</p><h2 id="_4-集成测试" tabindex="-1"><a class="header-anchor" href="#_4-集成测试"><span>4. 集成测试</span></a></h2><p>现在我们有了 Cassandra 容器、一个简单的 DAO 类和一个 Spring Data 仓库，我们准备开始编写集成测试。</p><h3 id="_4-1-保存记录测试" tabindex="-1"><a class="header-anchor" href="#_4-1-保存记录测试"><span>4.1. 保存记录测试</span></a></h3><p>让我们从测试将新记录插入 Cassandra 数据库开始：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenValidCarRecord_whenSavingIt_thenRecordIsSaved</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">UUID</span> carId <span class="token operator">=</span> <span class="token class-name">UUIDs</span><span class="token punctuation">.</span><span class="token function">timeBased</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Car</span> newCar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span>carId<span class="token punctuation">,</span> <span class="token string">&quot;Nissan&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Qashqai&quot;</span><span class="token punctuation">,</span> <span class="token number">2018</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    carRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>newCar<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">List</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Car</span><span class="token punctuation">&gt;</span></span>```` savedCars <span class="token operator">=</span> carRepository<span class="token punctuation">.</span><span class="token function">findAllById</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>carId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertThat</span><span class="token punctuation">(</span>savedCars<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span>newCar<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-更新记录测试" tabindex="-1"><a class="header-anchor" href="#_4-2-更新记录测试"><span>4.2. 更新记录测试</span></a></h3><p>然后，我们可以为更新现有数据库记录编写类似的测试：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenExistingCarRecord_whenUpdatingIt_thenRecordIsUpdated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">UUID</span> carId <span class="token operator">=</span> <span class="token class-name">UUIDs</span><span class="token punctuation">.</span><span class="token function">timeBased</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Car</span> existingCar <span class="token operator">=</span> carRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span>carId<span class="token punctuation">,</span> <span class="token string">&quot;Nissan&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Qashqai&quot;</span><span class="token punctuation">,</span> <span class="token number">2018</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    existingCar<span class="token punctuation">.</span><span class="token function">setModel</span><span class="token punctuation">(</span><span class="token string">&quot;X-Trail&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    carRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>existingCar<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">List</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Car</span><span class="token punctuation">&gt;</span></span>```` savedCars <span class="token operator">=</span> carRepository<span class="token punctuation">.</span><span class="token function">findAllById</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>carId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertThat</span><span class="token punctuation">(</span>savedCars<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;X-Trail&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-删除记录测试" tabindex="-1"><a class="header-anchor" href="#_4-3-删除记录测试"><span>4.3. 删除记录测试</span></a></h3><p>最后，让我们为删除现有数据库记录编写一个测试：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenExistingCarRecord_whenDeletingIt_thenRecordIsDeleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">UUID</span> carId <span class="token operator">=</span> <span class="token class-name">UUIDs</span><span class="token punctuation">.</span><span class="token function">timeBased</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Car</span> existingCar <span class="token operator">=</span> carRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span>carId<span class="token punctuation">,</span> <span class="token string">&quot;Nissan&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Qashqai&quot;</span><span class="token punctuation">,</span> <span class="token number">2018</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    carRepository<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>existingCar<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">List</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Car</span><span class="token punctuation">&gt;</span></span>```` savedCars <span class="token operator">=</span> carRepository<span class="token punctuation">.</span><span class="token function">findAllById</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>carId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertThat</span><span class="token punctuation">(</span>savedCars<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大多数时候，在使用集成测试时，我们希望<strong>在多个测试之间重用同一个数据库实例</strong>。我们可以通过使用多个嵌套测试类来共享同一个容器实例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Testcontainers</span>\n<span class="token annotation punctuation">@SpringBootTest</span>\n<span class="token keyword">class</span> <span class="token class-name">CassandraNestedIntegrationTest</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">KEYSPACE_NAME</span> <span class="token operator">=</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Container</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">CassandraContainer</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span>`` cassandra\n      <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CassandraContainer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;cassandra:3.11.2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withExposedPorts</span><span class="token punctuation">(</span><span class="token number">9042</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 设置连接属性并创建 keyspace</span>\n\n    <span class="token annotation punctuation">@Nested</span>\n    <span class="token keyword">class</span> <span class="token class-name">ApplicationContextIntegrationTest</span> <span class="token punctuation">{</span>\n        <span class="token annotation punctuation">@Test</span>\n        <span class="token keyword">void</span> <span class="token function">givenCassandraContainer_whenSpringContextIsBootstrapped_thenContainerIsRunningWithNoExceptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">assertThat</span><span class="token punctuation">(</span>cassandra<span class="token punctuation">.</span><span class="token function">isRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Nested</span>\n    <span class="token keyword">class</span> <span class="token class-name">CarRepositoryIntegrationTest</span> <span class="token punctuation">{</span>\n\n        <span class="token annotation punctuation">@Autowired</span>\n        <span class="token keyword">private</span> <span class="token class-name">CarRepository</span> carRepository<span class="token punctuation">;</span>\n\n        <span class="token annotation punctuation">@Test</span>       <span class="token annotation punctuation">@Test</span>\n        <span class="token keyword">void</span> <span class="token function">givenValidCarRecord_whenSavingIt_thenRecordIsSaved</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">UUID</span> carId <span class="token operator">=</span> <span class="token class-name">UUIDs</span><span class="token punctuation">.</span><span class="token function">timeBased</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">Car</span> newCar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span>carId<span class="token punctuation">,</span> <span class="token string">&quot;Nissan&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Qashqai&quot;</span><span class="token punctuation">,</span> <span class="token number">2018</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            carRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>newCar<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token class-name">List</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Car</span><span class="token punctuation">&gt;</span></span>```` savedCars <span class="token operator">=</span> carRepository<span class="token punctuation">.</span><span class="token function">findAllById</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>carId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token function">assertThat</span><span class="token punctuation">(</span>savedCars<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span>newCar<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">// 更新和删除的测试</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n由于 <span class="token class-name">Docker</span> 容器启动需要时间，<span class="token operator">*</span><span class="token operator">*</span>在多个嵌套测试类之间共享同一个容器实例将确保更快的执行<span class="token operator">*</span><span class="token operator">*</span>。不过，需要注意的是，这个共享实例不会在测试之间自动清除。\n\n## <span class="token number">6.</span> 结论\n\n在本文中，我们探讨了<span class="token operator">*</span><span class="token operator">*</span>使用 <span class="token class-name">Cassandra</span> 容器测试使用 <span class="token class-name">Cassandra</span> 数据库的 <span class="token class-name">Spring</span> <span class="token class-name">Boot</span> 应用程序<span class="token operator">*</span><span class="token operator">*</span>。\n\n在示例中，我们涵盖了设置 <span class="token class-name">Docker</span> 化的 <span class="token class-name">Cassandra</span> 容器实例、覆盖测试属性、创建 keyspace、<span class="token constant">DAO</span> 类和 <span class="token class-name">Cassandra</span> 仓库接口。\n\n我们看到了如何编写利用 <span class="token class-name">Cassandra</span> 容器的集成测试。因此，我们的示例测试不需要模拟。最后，我们看到了如何在多个嵌套测试类中重用同一个容器实例。\n\n如往常一样，源代码可在 <span class="token class-name">GitHub</span> 上获取。\n<span class="token constant">OK</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',57),o=[e];function c(i,l){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","2024-07-25-Using Test Containers With Spring Data Cassandra.html.vue"]]),k=JSON.parse('{"path":"/posts/baeldung/2024-07-25/2024-07-25-Using%20Test%20Containers%20With%20Spring%20Data%20Cassandra.html","title":"使用Testcontainers与Spring Data Cassandra","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Spring Data Cassandra","Testcontainers"],"tag":["Spring Boot","Cassandra","Integration Testing"],"head":[["meta",{"name":"keywords","content":"Spring Data Cassandra, Testcontainers, Spring Boot, Cassandra, Integration Testing"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-25/2024-07-25-Using%20Test%20Containers%20With%20Spring%20Data%20Cassandra.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"使用Testcontainers与Spring Data Cassandra"}],["meta",{"property":"og:description","content":"使用Testcontainers与Spring Data Cassandra 1. 概述 Apache Cassandra 是一个开源的分布式 NoSQL 数据库。它被设计用来处理大量数据，具有快速的读写性能，并且没有单点故障。 在本教程中，我们将探讨测试一个使用 Cassandra 数据库的 Spring Boot 应用程序。我们将解释如何使用 Te..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-25T03:56:00.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Spring Boot"}],["meta",{"property":"article:tag","content":"Cassandra"}],["meta",{"property":"article:tag","content":"Integration Testing"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-25T03:56:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用Testcontainers与Spring Data Cassandra\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-25T03:56:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"使用Testcontainers与Spring Data Cassandra 1. 概述 Apache Cassandra 是一个开源的分布式 NoSQL 数据库。它被设计用来处理大量数据，具有快速的读写性能，并且没有单点故障。 在本教程中，我们将探讨测试一个使用 Cassandra 数据库的 Spring Boot 应用程序。我们将解释如何使用 Te..."},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[{"level":3,"title":"2.1. Maven 依赖","slug":"_2-1-maven-依赖","link":"#_2-1-maven-依赖","children":[]},{"level":3,"title":"2.2. Cassandra 容器","slug":"_2-2-cassandra-容器","link":"#_2-2-cassandra-容器","children":[]},{"level":3,"title":"2.3. 覆盖测试属性","slug":"_2-3-覆盖测试属性","link":"#_2-3-覆盖测试属性","children":[]},{"level":3,"title":"2.4. 创建 Keyspace","slug":"_2-4-创建-keyspace","link":"#_2-4-创建-keyspace","children":[]}]},{"level":2,"title":"3. Spring Data for Cassandra","slug":"_3-spring-data-for-cassandra","link":"#_3-spring-data-for-cassandra","children":[{"level":3,"title":"3.1. 数据访问对象","slug":"_3-1-数据访问对象","link":"#_3-1-数据访问对象","children":[]},{"level":3,"title":"3.2. Cassandra 仓库","slug":"_3-2-cassandra-仓库","link":"#_3-2-cassandra-仓库","children":[]}]},{"level":2,"title":"4. 集成测试","slug":"_4-集成测试","link":"#_4-集成测试","children":[{"level":3,"title":"4.1. 保存记录测试","slug":"_4-1-保存记录测试","link":"#_4-1-保存记录测试","children":[]},{"level":3,"title":"4.2. 更新记录测试","slug":"_4-2-更新记录测试","link":"#_4-2-更新记录测试","children":[]},{"level":3,"title":"4.3. 删除记录测试","slug":"_4-3-删除记录测试","link":"#_4-3-删除记录测试","children":[]}]}],"git":{"createdTime":1721879760000,"updatedTime":1721879760000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":5.83,"words":1749},"filePathRelative":"posts/baeldung/2024-07-25/2024-07-25-Using Test Containers With Spring Data Cassandra.md","localizedDate":"2022年4月1日","excerpt":"<hr>\\n<h1>使用Testcontainers与Spring Data Cassandra</h1>\\n<h2>1. 概述</h2>\\n<p>Apache Cassandra 是一个开源的分布式 NoSQL 数据库。它被设计用来<strong>处理大量数据，具有快速的读写性能，并且没有单点故障</strong>。</p>\\n<p>在本教程中，我们将探讨测试一个使用 Cassandra 数据库的 Spring Boot 应用程序。我们将解释如何使用 Testcontainers 库中的 Cassandra 容器设置集成测试。此外，我们将利用 Spring Data 仓库抽象来处理 Cassandra 的数据层。</p>","autoDesc":true}');export{d as comp,k as data};
