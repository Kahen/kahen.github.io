import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-BXAsn5ym.js";const e={},p=t(`<h1 id="在java中使用二叉搜索树查找节点的父节点-baeldung" tabindex="-1"><a class="header-anchor" href="#在java中使用二叉搜索树查找节点的父节点-baeldung"><span>在Java中使用二叉搜索树查找节点的父节点 | Baeldung</span></a></h1><h2 id="_1-引言" tabindex="-1"><a class="header-anchor" href="#_1-引言"><span>1. 引言</span></a></h2><p>二叉搜索树（BST）是一种数据结构，它帮助我们高效地解决现实世界的问题。</p><p>在这篇文章中，我们将探讨如何在二叉搜索树中找到节点的父节点的问题。</p><h2 id="_2-什么是二叉搜索树" tabindex="-1"><a class="header-anchor" href="#_2-什么是二叉搜索树"><span>2. 什么是二叉搜索树？</span></a></h2><p><strong>二叉搜索树是一种树状数据结构，其中每个节点最多指向两个节点，通常称为左孩子和右孩子。此外，每个节点的值都大于其左孩子并且小于其右孩子。</strong></p><p>例如，让我们想象三个节点，A=2，B=1和C=4。因此，一个可能的BST以A作为根节点，B作为其左孩子，C作为其右孩子。</p><p>在接下来的部分中，我们将使用一个具有默认_insert()_方法的BST结构来练习查找节点父节点的问题。</p><p>在下面的部分中，我们将描述在BST中查找节点父节点的问题，并练习一些解决方法。</p><h3 id="_3-1-问题描述" tabindex="-1"><a class="header-anchor" href="#_3-1-问题描述"><span>3.1. 问题描述</span></a></h3><p>正如我们在文章中看到的，BST中的一个给定节点有指向其左右孩子的指针。</p><p>例如，让我们想象一个有三个节点的简单BST：</p><p>节点_8_有两个子节点，<em>5_和_12</em>。因此，节点_8_是节点_5_和_12_的父节点。</p><p><strong>问题在于找到任何给定节点值的父节点</strong>。换句话说，我们必须找到其任何子节点等于目标值的节点。例如，在上图中的BST中，如果我们将_5_输入到我们的程序中，我们期望得到_8_作为输出。如果我们输入_12_，我们也期望得到_8_。</p><p>这个问题的边缘情况是为最顶层的根节点或在BST中不存在的节点找到父节点。在这两种情况下，都没有父节点。</p><h3 id="_3-2-测试结构" tabindex="-1"><a class="header-anchor" href="#_3-2-测试结构"><span>3.2. 测试结构</span></a></h3><p>在深入各种解决方案之前，我们首先定义我们的测试的基本结构：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">BinaryTreeParentNodeFinderUnitTest</span> <span class="token punctuation">{</span>

    <span class="token class-name">TreeNode</span> subject<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@BeforeEach</span>
    <span class="token keyword">void</span> <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        subject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        subject<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        subject<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        subject<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        subject<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        subject<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        subject<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        subject<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        subject<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        subject<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        subject<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>_BinaryTreeParentNodeFinderUnitTest_定义了一个_setUp()_方法，它创建了以下BST：</p><h2 id="_4-实现递归解决方案" tabindex="-1"><a class="header-anchor" href="#_4-实现递归解决方案"><span>4. 实现递归解决方案</span></a></h2><p><strong>解决这个问题的直接方法是使用递归来遍历树，并提前返回其中任何一个子节点等于目标值的节点。</strong></p><p>让我们首先在_TreeNode_类中定义一个公共方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">TreeNode</span> <span class="token function">parent</span><span class="token punctuation">(</span><span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchElementException</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">parent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，让我们在_TreeNode_类中定义_parent()_方法的递归版本：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">TreeNode</span> <span class="token function">parent</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> current<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> target<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchElementException</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token operator">||</span> current <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;没有为&#39;target.value=%s&#39;找到父节点 &quot;</span>
            <span class="token operator">+</span> <span class="token string">&quot;目标不在树中或目标是最顶层的根节点。&quot;</span><span class="token punctuation">,</span>
            target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">||</span> target<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> current<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token function">parent</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>value \`<span class="token operator">&lt;</span> current<span class="token punctuation">.</span>value <span class="token operator">?</span> current<span class="token punctuation">.</span>left <span class="token operator">:</span> current<span class="token punctuation">.</span>right<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该算法首先检查当前节点是否是最顶层的根节点或节点不存在于树中。在这两种情况下，节点没有父节点，所以我们抛出一个_NoSuchElementException_。</p><p>然后，算法检查当前节点的任何子节点是否等于_target_。如果是，当前节点是目标节点的父节点。因此，我们返回_current_。</p><p>最后，我们使用递归调用遍历BST，根据_target_值向左或向右。</p><p>让我们测试我们的递归解决方案：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenBinaryTree_whenFindParentNode_thenReturnCorrectParentNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertThrows</span><span class="token punctuation">(</span><span class="token class-name">NoSuchElementException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span>\` subject<span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token number">1231</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertThrows</span><span class="token punctuation">(</span><span class="token class-name">NoSuchElementException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> subject<span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> subject<span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> subject<span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> subject<span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> subject<span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 其他节点的断言</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在最坏的情况下，该算法执行最多_n_次递归操作，每次操作成本为_O(1)<em>，以找到父节点，其中_n_是BST中的节点数。因此，它是_O(n)<em>的时间复杂度。如果BST平衡良好，由于其高度始终最多为_log n</em>，时间复杂度可以降低到_O(log n)</em>。</p><p>此外，算法使用堆栈空间进行递归调用。因此，在最坏的情况下，递归调用在找到叶节点时停止。因此，算法最多堆叠_h_个递归调用，这使其具有_O(h)_的空间复杂度，其中_h_是BST的高度。</p><h2 id="_5-实现迭代解决方案" tabindex="-1"><a class="header-anchor" href="#_5-实现迭代解决方案"><span>5. 实现迭代解决方案</span></a></h2><p>几乎任何递归解决方案都有一个迭代版本。<strong>特别是，我们也可以使用栈和_while_循环而不是递归来找到BST的父节点。</strong></p><p>为此，让我们向_TreeNode_类添加_iterativeParent()_方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">TreeNode</span> <span class="token function">iterativeParent</span><span class="token punctuation">(</span><span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">iterativeParent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述方法只是一个接口，用于下面的辅助方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">TreeNode</span> <span class="token function">iterativeParent</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> current<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Deque</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">&gt;</span></span>\` parentCandidates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> notFoundMessage <span class="token operator">=</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;没有为&#39;target.value=%s&#39;找到父节点 &quot;</span>
        <span class="token operator">+</span> <span class="token string">&quot;目标不在树中或目标是最顶层的根节点。&quot;</span><span class="token punctuation">,</span>
        target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span>notFoundMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>parentCandidates<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            parentCandidates<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>
            current <span class="token operator">=</span> current<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        current <span class="token operator">=</span> parentCandidates<span class="token punctuation">.</span><span class="token function">pollFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">||</span> target<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> current<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        current <span class="token operator">=</span> current<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span>notFoundMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该算法首先初始化一个栈来存储父候选项。然后它主要依赖于四个主要部分：</p><ol><li>外层_while_循环检查我们是否正在访问一个非叶节点或父候选栈是否不为空。在这两种情况下，我们应该继续遍历BST直到找到目标父节点。</li><li>内层_while_循环再次检查我们是否正在访问一个非叶节点。在那时，访问一个非叶节点意味着我们应该首先遍历左侧，因为我们使用中序遍历。因此，我们将父候选添加到栈中并继续向左遍历。</li><li>在访问完左侧节点后，我们从Deque中取出一个节点，检查该节点是否是目标的父节点，并在找到时返回它。如果我们没有找到父节点，我们继续向右遍历。</li><li>最后，如果主循环在没有返回任何节点的情况下完成，我们可以假设节点不存在或它是最顶层的根节点。</li></ol><p>现在，让我们测试迭代方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenBinaryTree_whenFindParentNodeIteratively_thenReturnCorrectParentNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertThrows</span><span class="token punctuation">(</span><span class="token class-name">NoSuchElementException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> subject<span class="token punctuation">.</span><span class="token function">iterativeParent</span><span class="token punctuation">(</span><span class="token number">1231</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertThrows</span><span class="token punctuation">(</span><span class="token class-name">NoSuchElementException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> subject<span class="token punctuation">.</span><span class="token function">iterativeParent</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> subject<span class="token punctuation">.</span><span class="token function">iterativeParent</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> subject<span class="token punctuation">.</span><span class="token function">iterativeParent</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> subject<span class="token punctuation">.</span><span class="token function">iterativeParent</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> subject<span class="token punctuation">.</span><span class="token function">iterativeParent</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 其他节点的断言</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在最坏的情况下，我们需要遍历整个树来找到父节点，这使得迭代解决方案具有_O(n)_的空间复杂度。同样，如果BST平衡良好，我们可以用_O(log n)_来做同样的事情。</p><p>当我们到达一个叶节点时，我们开始从_parentCandidates_栈中轮询元素。因此，那个额外的栈来存储父候选项最多包含_h_个元素，其中_h_是BST的高度。因此，它也具有_O(h)_的空间复杂度。</p><h2 id="_6-创建带有父指针的bst" tabindex="-1"><a class="header-anchor" href="#_6-创建带有父指针的bst"><span>6. 创建带有父指针的BST</span></a></h2><p>解决这个问题的另一种方法是修改现有的BST数据结构，以存储每个节点的父节点。</p><p>为此，让我们创建另一个名为_ParentKeeperTreeNode_的类，其中包含一个名为_parent_的新字段：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">ParentKeeperTreeNode</span> <span class="token punctuation">{</span>

    <span class="token keyword">int</span> value<span class="token punctuation">;</span>
    <span class="token class-name">ParentKeeperTreeNode</span> parent<span class="token punctuation">;</span>
    <span class="token class-name">ParentKeeperTreeNode</span> left<span class="token punctuation">;</span>
    <span class="token class-name">ParentKeeperTreeNode</span> right<span class="token punctuation">;</span>

    <span class="token comment">// value字段参数构造函数</span>

    <span class="token comment">// equals和hashcode</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们需要创建一个自定义_insert()_方法来同时保存父节点：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">ParentKeeperTreeNode</span> currentNode<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> value \`<span class="token operator">&lt;</span> currentNode<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        currentNode<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParentKeeperTreeNode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        currentNode<span class="token punctuation">.</span>left<span class="token punctuation">.</span>parent <span class="token operator">=</span> currentNode<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

\`\`\`java
<span class="token keyword">if</span> <span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> value <span class="token operator">&gt;</span>\` currentNode<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    currentNode<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParentKeeperTreeNode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    currentNode<span class="token punctuation">.</span>right<span class="token punctuation">.</span>parent <span class="token operator">=</span> currentNode<span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&gt;</span> currentNode<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">insert</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>right<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> currentNode<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">insert</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>left<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>_insert()_方法在为当前节点创建新的左右子节点时也会保存父节点。在这种情况下，由于我们正在创建一个新的子节点，父节点总是我们正在访问的当前节点。</strong></p><p>最后，我们可以测试存储父指针的BST版本：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenParentKeeperBinaryTree_whenGetParent_thenReturnCorrectParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ParentKeeperTreeNode</span> subject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParentKeeperTreeNode</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    subject<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    subject<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    subject<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    subject<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    subject<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    subject<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    subject<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    subject<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    subject<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    subject<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">assertNull</span><span class="token punctuation">(</span>subject<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> subject<span class="token punctuation">.</span>left<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> subject<span class="token punctuation">.</span>right<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> subject<span class="token punctuation">.</span>left<span class="token punctuation">.</span>left<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> subject<span class="token punctuation">.</span>left<span class="token punctuation">.</span>right<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 其他节点的测试</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这种类型的BST中，我们在节点插入期间计算父节点。因此，为了验证结果，我们可以简单地检查每个节点的父引用。</p><p>因此，我们不是在_O(h)<em>的时间内计算每个给定节点的_parent()</em>，而是可以通过引用立即在_O(1)<em>时间内得到它。此外，每个节点的父节点只是对内存中另一个现有对象的引用。因此，空间复杂度也是_O(1)</em>。</p><p><strong>这种BST版本在我们经常需要检索节点的父节点时很有帮助，因为_parent()_操作已经很好地优化了。</strong></p><h2 id="_7-结论" tabindex="-1"><a class="header-anchor" href="#_7-结论"><span>7. 结论</span></a></h2><p>在这篇文章中，我们看到了查找BST中任何给定节点的父节点的问题。</p><p>我们练习了三种解决方案，并提供了代码示例。一种使用递归来遍历BST。另一种使用栈来存储父候选项并遍历BST。最后一种在每个节点中保留父引用，以便在恒定时间内获取。</p><p>像往常一样，源代码在GitHub上可用。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>
OK</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,61),c=[p];function o(u,l){return a(),s("div",null,c)}const k=n(e,[["render",o],["__file","2024-06-21-Finding the Parent of a Node in a Binary Search Tree with Java.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-06-21/2024-06-21-Finding%20the%20Parent%20of%20a%20Node%20in%20a%20Binary%20Search%20Tree%20with%20Java.html","title":"在Java中使用二叉搜索树查找节点的父节点 | Baeldung","lang":"zh-CN","frontmatter":{"date":"2024-06-21T00:00:00.000Z","category":["Java","数据结构"],"tag":["二叉搜索树","算法"],"head":[["meta",{"name":"keywords","content":"Java, 二叉搜索树, 父节点, 算法"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-06-21/2024-06-21-Finding%20the%20Parent%20of%20a%20Node%20in%20a%20Binary%20Search%20Tree%20with%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"在Java中使用二叉搜索树查找节点的父节点 | Baeldung"}],["meta",{"property":"og:description","content":"在Java中使用二叉搜索树查找节点的父节点 | Baeldung 1. 引言 二叉搜索树（BST）是一种数据结构，它帮助我们高效地解决现实世界的问题。 在这篇文章中，我们将探讨如何在二叉搜索树中找到节点的父节点的问题。 2. 什么是二叉搜索树？ 二叉搜索树是一种树状数据结构，其中每个节点最多指向两个节点，通常称为左孩子和右孩子。此外，每个节点的值都大于..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-21T12:47:49.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"二叉搜索树"}],["meta",{"property":"article:tag","content":"算法"}],["meta",{"property":"article:published_time","content":"2024-06-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-21T12:47:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"在Java中使用二叉搜索树查找节点的父节点 | Baeldung\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-21T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-21T12:47:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"在Java中使用二叉搜索树查找节点的父节点 | Baeldung 1. 引言 二叉搜索树（BST）是一种数据结构，它帮助我们高效地解决现实世界的问题。 在这篇文章中，我们将探讨如何在二叉搜索树中找到节点的父节点的问题。 2. 什么是二叉搜索树？ 二叉搜索树是一种树状数据结构，其中每个节点最多指向两个节点，通常称为左孩子和右孩子。此外，每个节点的值都大于..."},"headers":[{"level":2,"title":"1. 引言","slug":"_1-引言","link":"#_1-引言","children":[]},{"level":2,"title":"2. 什么是二叉搜索树？","slug":"_2-什么是二叉搜索树","link":"#_2-什么是二叉搜索树","children":[{"level":3,"title":"3.1. 问题描述","slug":"_3-1-问题描述","link":"#_3-1-问题描述","children":[]},{"level":3,"title":"3.2. 测试结构","slug":"_3-2-测试结构","link":"#_3-2-测试结构","children":[]}]},{"level":2,"title":"4. 实现递归解决方案","slug":"_4-实现递归解决方案","link":"#_4-实现递归解决方案","children":[]},{"level":2,"title":"5. 实现迭代解决方案","slug":"_5-实现迭代解决方案","link":"#_5-实现迭代解决方案","children":[]},{"level":2,"title":"6. 创建带有父指针的BST","slug":"_6-创建带有父指针的bst","link":"#_6-创建带有父指针的bst","children":[]},{"level":2,"title":"7. 结论","slug":"_7-结论","link":"#_7-结论","children":[]}],"git":{"createdTime":1718974069000,"updatedTime":1718974069000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":7.76,"words":2327},"filePathRelative":"posts/baeldung/2024-06-21/2024-06-21-Finding the Parent of a Node in a Binary Search Tree with Java.md","localizedDate":"2024年6月21日","excerpt":"\\n<h2>1. 引言</h2>\\n<p>二叉搜索树（BST）是一种数据结构，它帮助我们高效地解决现实世界的问题。</p>\\n<p>在这篇文章中，我们将探讨如何在二叉搜索树中找到节点的父节点的问题。</p>\\n<h2>2. 什么是二叉搜索树？</h2>\\n<p><strong>二叉搜索树是一种树状数据结构，其中每个节点最多指向两个节点，通常称为左孩子和右孩子。此外，每个节点的值都大于其左孩子并且小于其右孩子。</strong></p>\\n<p>例如，让我们想象三个节点，A=2，B=1和C=4。因此，一个可能的BST以A作为根节点，B作为其左孩子，C作为其右孩子。</p>\\n<p>在接下来的部分中，我们将使用一个具有默认_insert()_方法的BST结构来练习查找节点父节点的问题。</p>","autoDesc":true}');export{k as comp,d as data};
