import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-DFhKiB50.js";const e={},p=t('<hr><h1 id="在spring-boot中动态启用和禁用端点" tabindex="-1"><a class="header-anchor" href="#在spring-boot中动态启用和禁用端点"><span>在Spring Boot中动态启用和禁用端点</span></a></h1><p>端点在Spring Boot应用程序中是与应用程序交互的机制。在计划外的维护窗口期间，我们可能想要临时限制应用程序与外部的交互。</p><p>在本教程中，<strong>我们将学习如何在Spring Boot应用程序中在运行时启用和禁用端点</strong>，使用一些流行的库，如Spring Cloud、Spring Actuator和Apache的Commons Configuration。### 2. 设置</p><p>在这一部分，让我们关注设置Spring Boot项目的关键方面。</p><h4 id="_2-1-maven依赖" tabindex="-1"><a class="header-anchor" href="#_2-1-maven依赖"><span>2.1. Maven依赖</span></a></h4><p>首先，我们需要让我们的Spring Boot应用程序<strong>暴露_/refresh_端点</strong>，所以让我们在项目的_pom.xml_文件中添加_spring-boot-starter-actuator_依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>````org.springframework.boot````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>````spring-boot-starter-actuator````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>````3.1.5````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>````\n````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，由于我们稍后需要_@RefreshScope_注解来重新加载环境中的属性源，让我们添加_spring-cloud-starter_依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>````org.springframework.cloud````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>````spring-cloud-starter````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>````3.1.5````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>````\n````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进一步，我们还必须<strong>在项目_pom.xml_文件的依赖管理部分添加Spring Cloud的BOM</strong>，以便Maven使用兼容版本的_spring-cloud-starter_：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>`\n        ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n            ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>````org.springframework.cloud````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>````\n            ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>````spring-cloud-dependencies````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>````\n            ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>````2021.0.5````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>````\n            `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>`pom`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>`\n            `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>`import`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>`\n        ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，由于我们需要在运行时重新加载文件的能力，让我们也添加_commons-configuration_依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>````commons-configuration````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>````commons-configuration````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>````1.10````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>````\n````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-配置" tabindex="-1"><a class="header-anchor" href="#_2-2-配置"><span>2.2. 配置</span></a></h4><p>首先，让我们在_application.properties_文件中添加配置以<strong>在应用程序中启用_/refresh_端点</strong>：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">management.server.port</span><span class="token punctuation">=</span><span class="token value attr-value">8081</span>\n<span class="token key attr-name">management.endpoints.web.exposure.include</span><span class="token punctuation">=</span><span class="token value attr-value">refresh</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，让我们定义一个我们可以用于重新加载属性的附加源：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">dynamic.endpoint.config.location</span><span class="token punctuation">=</span><span class="token value attr-value">file:extra.properties</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此外，让我们在_application.properties_文件中定义_spring.properties.refreshDelay_属性：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.properties.refreshDelay</span><span class="token punctuation">=</span><span class="token value attr-value">1</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后，让我们在_extra.properties_文件中添加两个属性：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">endpoint.foo</span><span class="token punctuation">=</span><span class="token value attr-value">false</span>\n<span class="token key attr-name">endpoint.regex</span><span class="token punctuation">=</span><span class="token value attr-value">.*</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在后续部分中，我们将理解这些附加属性的核心重要性。</p><h4 id="_2-3-api端点" tabindex="-1"><a class="header-anchor" href="#_2-3-api端点"><span>2.3. API端点</span></a></h4><p>首先，让我们定义一个在_/foo_路径上可用的示例**<em>GET</em> API**：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/foo&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">fooHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，让我们分别在_/bar1_和_/bar2_路径上定义两个更多的**<em>GET</em> API**：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/bar1&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">bar1Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;bar1&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/bar2&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">bar2Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;bar2&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在接下来的部分中，我们将学习如何切换单个端点，例如_/foo_。此外，我们还将看到如何切换一组端点，即通过简单的正则表达式标识的_/bar1_和_/bar2_。</p><h4 id="_2-4-配置-dynamicendpointfilter" tabindex="-1"><a class="header-anchor" href="#_2-4-配置-dynamicendpointfilter"><span>2.4. 配置_DynamicEndpointFilter_</span></a></h4><p>要在运行时切换一组端点，我们可以使用_Filter_。通过使用_endpoint.regex_模式匹配请求的端点，我们可以在成功时允许它，或者在不匹配时发送_503_ HTTP响应状态。</p><p>所以，让我们<strong>通过扩展_OncePerRequestFilter_来定义_DynamicEndpointFilter_类</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicEndpointFilter</span> <span class="token keyword">extends</span> <span class="token class-name">OncePerRequestFilter</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">Environment</span> environment<span class="token punctuation">;</span>\n\n    <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进一步，我们需要通过覆盖_doFilterInternal()_方法来添加模式匹配的逻辑：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>\n<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doFilterInternal</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span>\n  <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> path <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;endpoint.regex&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">boolean</span> matches <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>matches<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        response<span class="token punctuation">.</span><span class="token function">sendError</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">SERVICE_UNAVAILABLE</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;Service is unavailable&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们必须注意_initial value of the endpoint.regex property is “<em>.*</em>” that allows all the requests through this Filter._</p><h2 id="_3-使用环境属性切换" tabindex="-1"><a class="header-anchor" href="#_3-使用环境属性切换"><span>3. 使用环境属性切换</span></a></h2><p>在这一部分，我们将学习如何从_extra.properties_文件中热重载环境属性。</p><h4 id="_3-1-重新加载配置" tabindex="-1"><a class="header-anchor" href="#_3-1-重新加载配置"><span>3.1. 重新加载配置</span></a></h4><p>为此，让我们首先使用_FileChangedReloadingStrategy_定义一个_PropertiesConfiguration_ bean：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n<span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;dynamic.endpoint.config.location&quot;</span><span class="token punctuation">,</span> matchIfMissing <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">PropertiesConfiguration</span> <span class="token function">propertiesConfiguration</span><span class="token punctuation">(</span>\n  <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;${dynamic.endpoint.config.location}&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> path<span class="token punctuation">,</span>\n  <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;${spring.properties.refreshDelay}&quot;</span><span class="token punctuation">)</span> <span class="token keyword">long</span> refreshDelay<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> filePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token string">&quot;file:&quot;</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">PropertiesConfiguration</span> configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PropertiesConfiguration</span><span class="token punctuation">(</span>\n      <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCanonicalPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">FileChangedReloadingStrategy</span> fileChangedReloadingStrategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileChangedReloadingStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    fileChangedReloadingStrategy<span class="token punctuation">.</span><span class="token function">setRefreshDelay</span><span class="token punctuation">(</span>refreshDelay<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    configuration<span class="token punctuation">.</span><span class="token function">setReloadingStrategy</span><span class="token punctuation">(</span>fileChangedReloadingStrategy<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> configuration<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们必须注意_properties source is derived using the dynamic.endpoint.config.location property_ in the <em>application.properties</em> file. Additionally, the reload happens with a time delay of <em>1</em> second, as defined by the <em>spring.properties.refreshDelay</em> property.</p><p>接下来，我们需要在运行时读取特定于端点的属性。所以，让我们定义具有属性getter的_EnvironmentConfigBean_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnvironmentConfigBean</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Environment</span> environment<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">EnvironmentConfigBean</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Autowired</span> <span class="token class-name">Environment</span> environment<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>environment <span class="token operator">=</span> environment<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getEndpointRegex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;endpoint.regex&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFooEndpointEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token function">parseBoolean</span><span class="token punctuation">(</span>environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;endpoint.foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Environment</span> <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> environment<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，让我们<strong>创建一个_FilterRegistrationBean_来注册_DynamicEndpointFilter_</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n<span class="token annotation punctuation">@ConditionalOnBean</span><span class="token punctuation">(</span><span class="token class-name">EnvironmentConfigBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">FilterRegistrationBean</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DynamicEndpointFilter</span><span class="token punctuation">&gt;</span></span>`` <span class="token function">dynamicEndpointFilterFilterRegistrationBean</span><span class="token punctuation">(</span>\n  <span class="token class-name">EnvironmentConfigBean</span> environmentConfigBean<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">FilterRegistrationBean</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DynamicEndpointFilter</span><span class="token punctuation">&gt;</span></span>`` registrationBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    registrationBean<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DynamicEndpointFilter</span><span class="token punctuation">(</span>environmentConfigBean<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    registrationBean<span class="token punctuation">.</span><span class="token function">addUrlPatterns</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> registrationBean<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-验证" tabindex="-1"><a class="header-anchor" href="#_3-2-验证"><span>3.2. 验证</span></a></h4><p>首先，让我们运行应用程序并访问_/bar1_或_/bar2_ API：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-iXGET</span> http://localhost:9090/bar1\nHTTP/1.1 <span class="token number">200</span>\nContent-Type: text/plain<span class="token punctuation">;</span><span class="token assign-left variable">charset</span><span class="token operator">=</span>ISO-8859-1\nContent-Length: <span class="token number">4</span>\nDate: Sat, <span class="token number">12</span> Nov <span class="token number">2022</span> <span class="token number">12</span>:46:32 GMT\n\nbar1\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如预期的那样，<strong>我们得到了_200 OK_ HTTP响应，因为我们将_initial value of the endpoint.regex property_设置为允许所有端点</strong>。</p><p>接下来，让我们通过更改_extra.properties_文件中的_endpoint.regex_属性来仅启用_/foo_端点：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">endpoint.regex</span><span class="token punctuation">=</span><span class="token value attr-value">.*/foo</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>继续进行，让我们看看我们是否能够访问_/bar1_ API端点：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-iXGET</span> http://localhost:9090/bar1\nHTTP/1.1 <span class="token number">503</span>\nContent-Type: application/json\nTransfer-Encoding: chunked\nDate: Sat, <span class="token number">12</span> Nov <span class="token number">2022</span> <span class="token number">12</span>:56:12 GMT\nConnection: close\n\n<span class="token punctuation">{</span><span class="token string">&quot;timestamp&quot;</span>:1668257772354,<span class="token string">&quot;status&quot;</span>:503,<span class="token string">&quot;error&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;Service Unavailable&quot;</span>,<span class="token string">&quot;message&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;Service is unavailable&quot;</span>,<span class="token string">&quot;path&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;/springbootapp/bar1&quot;</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如预期的那样，_DynamicEndpointFilter_禁用了此端点，并发送了带有HTTP _503_状态码的错误响应。</p><p>最后，我们也可以检查我们是否能够访问_/foo_ API端点：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-iXGET</span> http://localhost:9090/foo\nHTTP/1.1 <span class="token number">200</span>\nContent-Type: text/plain<span class="token punctuation">;</span><span class="token assign-left variable">charset</span><span class="token operator">=</span>ISO-8859-1\nContent-Length: <span class="token number">3</span>\nDate: Sat, <span class="token number">12</span> Nov <span class="token number">2022</span> <span class="token number">12</span>:57:39 GMT\n\nfoo\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>太棒了！看起来我们做对了。</p><h2 id="_4-使用spring-cloud和actuator切换" tabindex="-1"><a class="header-anchor" href="#_4-使用spring-cloud和actuator切换"><span>4. 使用Spring Cloud和Actuator切换</span></a></h2><p>在这一部分，我们将学习使用_@RefreshScope_注解和actuator _/refresh_端点在运行时切换API端点的替代方法。</p><h4 id="_4-1-使用-refreshscope-配置端点" tabindex="-1"><a class="header-anchor" href="#_4-1-使用-refreshscope-配置端点"><span>4.1. 使用_@RefreshScope_配置端点</span></a></h4><p>首先，我们需要<strong>定义用于切换端点的配置bean，并用_@RefreshScope_注解</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>\n<span class="token annotation punctuation">@RefreshScope</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EndpointRefreshConfigBean</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">boolean</span> foo<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> regex<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">EndpointRefreshConfigBean</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;${endpoint.foo}&quot;</span><span class="token punctuation">)</span> <span class="token keyword">boolean</span> foo<span class="token punctuation">,</span>\n      <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;${endpoint.regex}&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> regex<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>foo <span class="token operator">=</span> foo<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>regex <span class="token operator">=</span> regex</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',64),o=[p];function i(c,l){return s(),a("div",null,o)}const d=n(e,[["render",i],["__file","2024-07-12-Enable and Disable Endpoints at Runtime With Spring Boot.html.vue"]]),k=JSON.parse('{"path":"/posts/baeldung/2024-07-12/2024-07-12-Enable%20and%20Disable%20Endpoints%20at%20Runtime%20With%20Spring%20Boot.html","title":"在Spring Boot中动态启用和禁用端点","lang":"zh-CN","frontmatter":{"date":"2022-11-12T00:00:00.000Z","category":["Spring Boot","Actuator"],"tag":["Endpoints","Dynamic Configuration"],"head":[["meta",{"name":"keywords","content":"Spring Boot, Actuator, Endpoints, Dynamic Configuration"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-12/2024-07-12-Enable%20and%20Disable%20Endpoints%20at%20Runtime%20With%20Spring%20Boot.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"在Spring Boot中动态启用和禁用端点"}],["meta",{"property":"og:description","content":"在Spring Boot中动态启用和禁用端点 端点在Spring Boot应用程序中是与应用程序交互的机制。在计划外的维护窗口期间，我们可能想要临时限制应用程序与外部的交互。 在本教程中，我们将学习如何在Spring Boot应用程序中在运行时启用和禁用端点，使用一些流行的库，如Spring Cloud、Spring Actuator和Apache的C..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-12T11:39:09.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Endpoints"}],["meta",{"property":"article:tag","content":"Dynamic Configuration"}],["meta",{"property":"article:published_time","content":"2022-11-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-12T11:39:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"在Spring Boot中动态启用和禁用端点\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-11-12T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-12T11:39:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"在Spring Boot中动态启用和禁用端点 端点在Spring Boot应用程序中是与应用程序交互的机制。在计划外的维护窗口期间，我们可能想要临时限制应用程序与外部的交互。 在本教程中，我们将学习如何在Spring Boot应用程序中在运行时启用和禁用端点，使用一些流行的库，如Spring Cloud、Spring Actuator和Apache的C..."},"headers":[{"level":2,"title":"3. 使用环境属性切换","slug":"_3-使用环境属性切换","link":"#_3-使用环境属性切换","children":[]},{"level":2,"title":"4. 使用Spring Cloud和Actuator切换","slug":"_4-使用spring-cloud和actuator切换","link":"#_4-使用spring-cloud和actuator切换","children":[]}],"git":{"createdTime":1720784349000,"updatedTime":1720784349000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":4.73,"words":1419},"filePathRelative":"posts/baeldung/2024-07-12/2024-07-12-Enable and Disable Endpoints at Runtime With Spring Boot.md","localizedDate":"2022年11月12日","excerpt":"<hr>\\n<h1>在Spring Boot中动态启用和禁用端点</h1>\\n<p>端点在Spring Boot应用程序中是与应用程序交互的机制。在计划外的维护窗口期间，我们可能想要临时限制应用程序与外部的交互。</p>\\n<p>在本教程中，<strong>我们将学习如何在Spring Boot应用程序中在运行时启用和禁用端点</strong>，使用一些流行的库，如Spring Cloud、Spring Actuator和Apache的Commons Configuration。### 2. 设置</p>\\n<p>在这一部分，让我们关注设置Spring Boot项目的关键方面。</p>\\n<h4>2.1. Maven依赖</h4>","autoDesc":true}');export{d as comp,k as data};
