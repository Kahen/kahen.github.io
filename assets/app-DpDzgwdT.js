const __vite__fileDeps=["assets/index.html-DW-cAaXP.js","assets/plugin-vue_export-helper-DlAUqK2U.js","assets/gRPC Authentication in Java Using Application Layer Transport Security (ALTS).html-CrjTwchd.js","assets/mongo-share.html-Bmwz8o8w.js","assets/在Mac说安装postgresql并且创建一个数据库单独给一个用户赋予权限.html-eswedOXd.js","assets/2024-06-21- DataJpaTest and Repository Class in JUnit.html-C1fvk-Ne.js","assets/2024-06-21-Count the Number of Unique Digits in an Integer using Java.html-DhCjpC5P.js","assets/2024-06-21-Create JavaType From Class with Jackson.html-2GNsDXkt.js","assets/2024-06-21-Custom Event Handlers and Listeners in Netty.html-CCxPKUL0.js","assets/2024-06-21-Difference Between GroupId and ConsumerId in Apache Kafka.html-Ci326SpX.js","assets/2024-06-21-Document Query Parameters with Spring REST Docs.html-BpHDZBkN.js","assets/2024-06-21-Find an Unique Email Address in a List.html-CR9Fv2by.js","assets/2024-06-21-Finding the Parent of a Node in a Binary Search Tree with Java.html-R-4SWvDX.js","assets/2024-06-21-Generate Juggler Sequence in Java.html-C_-rOEDw.js","assets/2024-06-21-Get First n Characters in a String in Java.html-BRijXMWT.js","assets/2024-06-21-Get the Initials of a Name in Java.html-B6u_50A3.js","assets/2024-06-21-Gson TypeToken With Dynamic List Item Type.html-Bexik6cq.js","assets/2024-06-21-How to Mock Amazon S3 for Integration Test.html-DLBgbatJ.js","assets/2024-06-21-How to Pretty Print a Map in Java.html-BG4dXhCK.js","assets/2024-06-21-Implementing GraphQL Mutation Without Returning Data.html-CiUW-4p_.js","assets/2024-06-21-Increase the Memory Size Limit on IntelliJ IDEA.html-hiIH6uhV.js","assets/2024-06-21-Iterating All Fields of a Data Class Without Reflection in Kotlin.html-Bi5Yi8wR.js","assets/2024-06-21-Migrate Application from Spring Security 5 to Spring Security 6 Spring Boot 3.html-CFdN4Eyx.js","assets/2024-06-21-Modify and Print List Items With Java Streams.html-TVGu9gXv.js","assets/2024-06-21-Query Hints in Spring Data JPA.html-qZnd2XOi.js","assets/2024-06-21-Railway Oriented Programming in Kotlin.html-CTuMmPeT.js","assets/2024-06-21-Remove Only Trailing Spaces or Whitespace From a String in Java.html-DHStYn5O.js","assets/2024-06-21-Serialization with FlatBuffers in Java.html-evqmCeXb.js","assets/2024-06-21-Simplified Array Operations on JsonNode Without Typecasting in Jackson.html-47FT12m_.js","assets/2024-06-21-Skip Select Before Insert in Spring Data JPA.html-DeROGmEJ.js","assets/2024-06-21-Spring Data JPA Repository for Database View.html-OtAzCWKu.js","assets/2024-06-21-Testcontainers Desktop.html-DuOZDpaS.js","assets/2024-06-22-A Guide to etcd.html-CUMo2UY0.js","assets/2024-06-22-A Guide to the  SoftDelete Annotation in Hibernate.html-C2Tf9rsH.js","assets/2024-06-22-Add Camel Route at Runtime in Java.html-a2e3Cl8i.js","assets/2024-06-22-Calculate Weighted Mean in Java.html-mDS7Wwax.js","assets/2024-06-22-Check if String is Base64 Encoded.html-Bq24aDtY.js","assets/2024-06-22-Check if Two Strings Are Rotations of Each Other.html-D30P_Vcz.js","assets/2024-06-22-Check if a String Is Equal to Its Mirror Reflection.html-C4heShb1.js","assets/2024-06-22-Collect Stream of entrySet   to a LinkedHashMap.html-CkvNFLmX.js","assets/2024-06-22-CompletableFuture runAsync   vs. supplyAsync   in Java.html-BTNFt-f7.js","assets/2024-06-22-Convert Date to Unix Timestamp in Java.html-BGAArZS1.js","assets/2024-06-22-Convert Infix to Postfix Expressions in Java.html-zXX7Fu_M.js","assets/2024-06-22-Count Uppercase and Lowercase Letters in a String.html-CjcOcrG0.js","assets/2024-06-22-CountDownLatch vs. Semaphore.html-BYlPsemv.js","assets/2024-06-22-Creating a Custom URL Connection.html-ssW2ncg3.js","assets/2024-06-22-Difference Between thenApply   and thenApplyAsync   in CompletableFuture.html-KgUWn7HH.js","assets/2024-06-22-Find The Largest Number in a String.html-BdSPnLoD.js","assets/2024-06-22-Find the Equilibrium Indexes of an Array in Java.html-CZ28cBoT.js","assets/2024-06-22-Find the First Non repeating Element of a List.html-BTdzCeg6.js","assets/2024-06-22-Get All Results at Once in a Spring Boot Paged Query Method.html-D77t3W8Z.js","assets/2024-06-22-Get a Range of Items from a Stream in Java.html-DwSOVrhL.js","assets/2024-06-22-Guide to System.in.read  .html-Fuka9YBY.js","assets/2024-06-22-How To Use findBy   With Multiple Columns in JPA.html-655KIJeE.js","assets/2024-06-22-How to Check if a Variable Is Defined in Thymeleaf.html-CjfOQkk8.js","assets/2024-06-22-Injecting  Mock and  Captor in JUnit 5 Method Parameters.html-BE1I_RKL.js","assets/2024-06-22-Install OpenJDK on Windows.html-Bqdghl8S.js","assets/2024-06-22-Instantiate an Inner Class With Reflection in Java.html-CYk4n6yU.js","assets/2024-06-22-Introduction to OpenGrok.html-BThpYiA1.js","assets/2024-06-22-Logging With AOP in Spring.html-D8c0XMXf.js","assets/2024-06-22-Mask an Email Address and Phone Number in Java.html-BmwY_LRs.js","assets/2024-06-22-Moves Zeros to the End of an Array in Java.html-vs4NrBD6.js","assets/2024-06-22-Mutable vs. Immutable Objects in Java.html-DPGNcqTf.js","assets/2024-06-22-OAuth2 Backend for Frontend With Spring Cloud Gateway.html-DinWGwfT.js","assets/2024-06-22-Pagination With JDBC.html-DFm5trM3.js","assets/2024-06-22-Parse String With Thousands Separator in Kotlin.html-B5NAmzrs.js","assets/2024-06-22-Preventing Gson from Expressing Integers as Floats.html-D9tN0lJH.js","assets/2024-06-22-Quarkus and Virtual Threads.html-skU8P8tt.js","assets/2024-06-22-Run Maven From Java Code.html-CjaB8QNp.js","assets/2024-06-22-Simple Web Server in Java 18.html-C2BmkFBF.js","assets/2024-06-22-Solving Rod Cutting Problem in Java.html-DELDP4w2.js","assets/2024-06-22-Storing UUID as Base64 String in Java.html-CGf6K_co.js","assets/2024-06-22-Translating Space Characters in URLEncoder.html-BZ7eotwv.js","assets/2024-06-22-Understanding  Raw type. References to generic types should be parameterized  Error.html-BF5XzYlM.js","assets/2024-06-22-Understanding Kafka InstanceAlreadyExistsException in Java.html-2yP-lD2G.js","assets/2024-06-22-View Kafka Headers in Java.html-kyPv_1Sh.js","assets/2024-06-23-Access Job Parameters From ItemReader in Spring Batch.html-DNwLDQpY.js","assets/2024-06-23-Apply Bold Text Style for an Entire Row Using Apache POI.html-ClpCRC6k.js","assets/2024-06-23-Builder Pattern and Inheritance.html-Df-rGGt4.js","assets/2024-06-23-Calculate Number of Weekdays Between Two Dates in Java.html-C5-q3jaz.js","assets/2024-06-23-Calculating the Power of Any Number in Java Without Using Math pow   Method.html-DJOwvPpu.js","assets/2024-06-23-Check if Two Date Ranges Overlap.html-BTo0y9RN.js","assets/2024-06-23-Convert Gregorian to Hijri Date in Java.html-BdaeYKhG.js","assets/2024-06-23-Convert Long to Date in Java.html-BeFBovsm.js","assets/2024-06-23-Convert String Date to XMLGregorianCalendar in Java.html-cT6qB1Im.js","assets/2024-06-23-Convert byte to int Type in Java.html-oJFvv8ku.js","assets/2024-06-23-Creating Unicode Character From Its Code Point Hex String.html-R9yQD7rr.js","assets/2024-06-23-Custom JSON Deserialization Using Spring WebClient.html-C2ABB_qs.js","assets/2024-06-23-Difference Between  mvn verify  and  mvn test .html-BGNZPu0Z.js","assets/2024-06-23-Difference Between mvn install and mvn verify.html-C_vgHXVO.js","assets/2024-06-23-Difference between ZoneOffset.UTC and ZoneId.of  UTC  .html-CS0328Ww.js","assets/2024-06-23-Enable Java SSL Debug Logging.html-WCH2k3NB.js","assets/2024-06-23-Event Driven Microservices With Orkes Conductor.html-BqWpnHZs.js","assets/2024-06-23-Event Externalization with Spring Modulith.html-baPL3QNA.js","assets/2024-06-23-Generating Unique Positive Long Using SecureRandom in Java.html-CRMlMoER.js","assets/2024-06-23-How to Catch Deserialization Errors in Spring Kafka .html-5JKcinI5.js","assets/2024-06-23-How to Determine if a String Contains Invalid Encoded Characters.html-Cga7hAOr.js","assets/2024-06-23-How to Find the URL of a Service in Kubernetes.html-CMTVg1oH.js","assets/2024-06-23-Improving Test Coverage and Readability With Spock s Data Pipes and Tables.html-jbbuh9UN.js","assets/2024-06-23-Introduction to KotlinPoet.html-LFQPjd6R.js","assets/2024-06-23-Introduction to gRPC with Spring Boot.html-0TthjLB6.js","assets/2024-06-23-JFR View Command in Java 21.html-Cu9PycaG.js","assets/2024-06-23-List vs. Set in  OneToMany JPA.html-D2o1k3KP.js","assets/2024-06-23-Looking for a Backend Java Spring Team Lead with Integration Experience  Remote   Part Time    not open.html-DvrbfVkX.js","assets/2024-06-23-Monkey Patching in Java.html-CIWYpd4G.js","assets/2024-06-23-N 1 Problem in Hibernate and Spring Data JPA.html-BkCFSHk0.js","assets/2024-06-23-Normalize a URL in Java.html-GRUz7B5d.js","assets/2024-06-23-Print a Java 2D Array.html-BWQidSwy.js","assets/2024-06-23-Read and Write Files in Java Using Separate Threads.html-BppWlkoH.js","assets/2024-06-23-Regular Expression for Password Validation in Java.html-BbSOov02.js","assets/2024-06-23-Reset ListIterator to First Element of the List in Java.html-Ato2PUfE.js","assets/2024-06-23-Rotate a Vertex Around a Certain Point in Java.html-v-QDCOPi.js","assets/2024-06-23-Run Length Encoding and Decoding in Java.html-C3bdtBix.js","assets/2024-06-23-Set an Environment Variable at Runtime in Java.html-CB8cNSD3.js","assets/2024-06-23-Setting up and Using Spock With Gradle.html-B3ZDrQmi.js","assets/2024-06-23-Shutting Down on OutOfMemoryError in Java.html-Bp6e-GFa.js","assets/2024-06-23-Simple Morse Code Translation in Java.html-iwc0d6cl.js","assets/2024-06-23-Structured Logging in Java.html-qml8neZv.js","assets/2024-06-23-Using Current Time as Filename in Java.html-CSSKyLIr.js","assets/2024-06-24-Accessing Private Java Fields via Kotlin Extension Functions.html-Dg6HlFhj.js","assets/2024-06-24-Add Authorities as Custom Claims in JWT Access Tokens in Spring Authorization Server.html-s3HCOwNd.js","assets/2024-06-24-Call a Method on Each Element of a List in Java.html-CtVzCt_-.js","assets/2024-06-24-Check if List Contains at Least One Enum.html-ChdopFL5.js","assets/2024-06-24-Check if a Float Value is Equivalent to an Integer Value in Java.html-DHKNI_Do.js","assets/2024-06-24-Check if a Point Is Between Two Points Drawn on a Straight Line in Java.html-SeyslqMH.js","assets/2024-06-24-Convert Joda Time DateTime to Date and Vice Versa.html-CgCADnyw.js","assets/2024-06-24-Convert Null Value to a Default Value in Java.html-COyvYgIO.js","assets/2024-06-24-Converting BigDecimal to Integer in Java.html-MO4DmvY3.js","assets/2024-06-24-Converting Integer to BigDecimal in Java.html-D_os4gb8.js","assets/2024-06-24-Create Kubernetes Operators with the Java Operator SDK.html-Uhpe7k4c.js","assets/2024-06-24-Creating Reactive APIs With Micronaut and MongoDB.html-vk-9aDOG.js","assets/2024-06-24-Difference Between Xmx and MaxRAM JVM Parameters.html-Bi1-dYd6.js","assets/2024-06-24-Difference Between a Future and a Promise in Java.html-DsL-ksjv.js","assets/2024-06-24-Generational ZGC in Java 21.html-DKKMbq8F.js","assets/2024-06-24-Getting Query String Parameters from HttpServletRequest.html-D71qnkTF.js","assets/2024-06-24-Introduction to Apache Calcite.html-CtFgboUF.js","assets/2024-06-24-Introduction to Postman.html-D5B-0nfK.js","assets/2024-06-24-Introduction to Spring AI.html-B1sDRd7g.js","assets/2024-06-24-Introduction to Spring Cloud AWS 3.0   SQS Integration.html-B5Z1UWRA.js","assets/2024-06-24-Java 8 Stream Operation on the Empty List.html-DtTUUhvJ.js","assets/2024-06-24-Maven Dependencies Failing With a 501 Error  HTTPS Required .html-BSs01Sa2.js","assets/2024-06-24-Printing Message on Console without Using main   Method in Java.html-DatD7awB.js","assets/2024-06-24-PriorityQueue iterator   Method in Java.html-DbZkDv-l.js","assets/2024-06-24-Read Input Character by Character in Java.html-BQjg4kTh.js","assets/2024-06-24-Remove Characters From a String That Are in the Other String.html-CQSeV06c.js","assets/2024-06-24-Removing the Last Node in a Linked List.html-COTajqrI.js","assets/2024-06-24-Replace Non Printable Unicode Characters in Java.html-DoYQ_sKo.js","assets/2024-06-24-Solving the ParameterResolutionException in JUnit 5.html-qKhMk3Oh.js","assets/2024-06-24-Upload Multiple Files Using WebFlux.html-GqFY7Csb.js","assets/2024-06-24-Using Static Methods Instead of Deprecated JsonParser.html-DqILM5Pf.js","assets/2024-06-24-What Happens When the JVM Runs Out of Memory to Allocate During Runtime .html-3SiuulGf.js","assets/2024-06-24-What Is the Error   Non static method cannot be referenced from a static context  .html-D3pZf9EY.js","assets/2024-06-25- Query Definitions With SpEL Support in Spring Data JPA.html-DkSlaiUk.js","assets/2024-06-25-BigDecimal.ZERO vs. new BigDecimal 0 .html-CfKPxhv2.js","assets/2024-06-25-Calculate Months Between Two Dates in Java.html-Bg_0crG4.js","assets/2024-06-25-Callbacks in ListenableFuture and CompletableFuture.html-Di7xbfhW.js","assets/2024-06-25-Check If a Java StringBuilder Object Contains a Character.html-D06hFPUJ.js","assets/2024-06-25-Comparing One String With Multiple Values in One Expression in Java.html-C5e-VXtK.js","assets/2024-06-25-Comparison of for Loops and Iterators.html-C8FWqOXU.js","assets/2024-06-25-Convert Byte Array to JSON and Vice Versa in Java.html-D5VYaokg.js","assets/2024-06-25-Convert Excel Files to PDF Using Java.html-BtwM0gpg.js","assets/2024-06-25-Convert String to long or Long in Java.html-vqPtpqP1.js","assets/2024-06-25-Convert a String to a List of Characters in Java.html-DdTg9y6j.js","assets/2024-06-25-Convert an OutputStream to a Byte Array in Java.html-BsjkGXOs.js","assets/2024-06-25-Detect the Last Iteration in for Loops in Java.html-ClB5lqR-.js","assets/2024-06-25-Difference Between 1L and  long  1.html-DSBkdktL.js","assets/2024-06-25-Difference Between execute   and submit   in Executor Service.html-c-Qvf4jd.js","assets/2024-06-25-Dijkstra s Algorithm in Kotlin.html-DmUAwwHw.js","assets/2024-06-25-Find Files by Extension in Specified Directory in Java.html-D-E-myNd.js","assets/2024-06-25-Find Missing Number From a Given Array in Java.html-BF0dQFhs.js","assets/2024-06-25-Fixing Hibernate QueryException  Named Parameter Not Bound.html-CFf_D4yC.js","assets/2024-06-25-Format LocalDate to ISO 8601 With T and Z.html-B6NY9NmS.js","assets/2024-06-25-Get Client Information From HTTP Request in Java.html-DCF_D5tq.js","assets/2024-06-25-Getting All Field Names of a Class Using Kotlin Reflection.html-CN1BX3A0.js","assets/2024-06-25-How to Get Last Record in Spring Data JPA.html-1N6OYEir.js","assets/2024-06-25-How to Write Strings to OutputStream in Java.html-BiFre8yV.js","assets/2024-06-25-Java System.currentTimeMillis   Vs. System.nanoTime  .html-CajDW3YY.js","assets/2024-06-25-Java s String.length   and String.getBytes  .length.html-D21gR9NX.js","assets/2024-06-25-Lazy Field Initialization with Lambdas.html-CcRe4Ju4.js","assets/2024-06-25-Print a Double Value Without Scientific Notation in Java.html-BJHpP-Ik.js","assets/2024-06-25-Reactor WebFlux vs Virtual Threads.html-BA8Q7Rim.js","assets/2024-06-25-Read a File and Split It Into Multiple Files in Java.html-4BlDtnUF.js","assets/2024-06-25-Return Map Instead of List in Spring Data JPA.html-DSc9mH0I.js","assets/2024-06-25-Rotating a Java String By n Characters.html-Bb08tEj1.js","assets/2024-06-25-Sending Data to a Specific Partition in Kafka.html-CSGwCepz.js","assets/2024-06-25-Sorting One List Based on Another List in Java.html-CslXiWCH.js","assets/2024-06-25-UTF 8 Validation in Java.html-BxbLC7HB.js","assets/2024-06-25-What Does It Mean to Hydrate an Object .html-vhBByzxn.js","assets/2024-06-25-When to Use the getReferenceById   and findById   Methods in Spring Data JPA.html-BQHdQxQm.js","assets/2024-06-26-A Guide to Timefold Solver for Employee Scheduling.html-CHcfG0EG.js","assets/2024-06-26-All the Ways Java Uses the Colon Character.html-CrdmT_Pb.js","assets/2024-06-26-Catch Common Mistakes with Error Prone Library in Java.html-Ck_UONcF.js","assets/2024-06-26-Check Certificate Name and Alias in Keystore File.html-C665b8SU.js","assets/2024-06-26-Check if a double Is an Integer in Java.html-CTit8v1s.js","assets/2024-06-26-Connect to Database Through Intellij Data Sources and Drivers.html-DdvjONPe.js","assets/2024-06-26-Convert Long Timestamp to LocalDateTime in Java.html-D6e_Ne6M.js","assets/2024-06-26-Convert Positive Integer to Negative and Vice Versa in Java.html-E5NdTkw5.js","assets/2024-06-26-Convert an XML File to CSV File.html-De2EczO6.js","assets/2024-06-26-Deserializing JSON to Java Record using Gson.html-CAfYpvAL.js","assets/2024-06-26-Differences Between Entities and DTOs.html-CD1IdMmQ.js","assets/2024-06-26-Extract Numbers From a String in Kotlin.html-DeGfaQxx.js","assets/2024-06-26-Generating Unique Positive long Using UUID in Java.html-SopLdMn8.js","assets/2024-06-26-Get Index of First Element Matching Boolean Using Java Streams.html-B6Y0SCH3.js","assets/2024-06-26-Handling NullPointerException in findFirst   When the First Element Is Null.html-By2k7_sN.js","assets/2024-06-26-How to Convert Byte Array to Char Array.html-BsT8ynNF.js","assets/2024-06-26-How to Convert JsonNode to ObjectNode.html-8GjHyWdz.js","assets/2024-06-26-How to Effectively Unit Test CompletableFuture.html-xOAN1Wr9.js","assets/2024-06-26-How to Increment a Map Value in Java.html-BwiBr-15.js","assets/2024-06-26-How to Sort LinkedHashMap by Values in Java.html-B18h9MYz.js","assets/2024-06-26-How to Use a Custom Font in Java.html-BhNak1rI.js","assets/2024-06-26-Inter Process Communication Methods in Java.html-DfWmvn7g.js","assets/2024-06-26-Limiting the Max Size of a HashMap in Java.html-Bl0QTjfI.js","assets/2024-06-26-Merging Kotlin Flows.html-DFtXd8yA.js","assets/2024-06-26-Methods in Java.html-DBZxYKrx.js","assets/2024-06-26-Modify Request Body Before Reaching Controller in Spring Boot.html-B5U3bzyn.js","assets/2024-06-26-Passing JVM Options from Gradle bootRun.html-C8wbYdDd.js","assets/2024-06-26-Recursively Sum the Integers in an Array.html-CvZaXA1Y.js","assets/2024-06-26-Resolving Gson s  Multiple JSON Fields  Exception.html-uOJ_Gcdc.js","assets/2024-06-26-Retrieving Unix Time in Java.html-BWgPvVbs.js","assets/2024-06-26-Return First Non null Value in Java.html-Df8PGrny.js","assets/2024-06-26-Rounding Up a Number to Nearest Multiple of 5 in Java.html-CYPWc_hv.js","assets/2024-06-26-Setup Asynchronous Retry Mechanism in Spring.html-Cef4E6zB.js","assets/2024-06-26-Skip Bytes in InputStream in Java.html-Bf_hvjTq.js","assets/2024-06-26-Spring Kafka Trusted Packages Feature.html-CKxAixF5.js","assets/2024-06-26-Static Final Variables in Java.html-C7_8PEbp.js","assets/2024-06-26-String s Maximum Length in Java.html-Cf1-S99y.js","assets/2024-06-26-String vs StringBuffer Comparison in Java.html-DxT6k7Jc.js","assets/2024-06-26-Verify That Lambda Expression Was Called Using Mockito.html-DWztAs2W.js","assets/2024-06-26-Working With HarperDB and Java.html-BdtVBoSH.js","assets/2024-06-27-A Guide to OpenRewrite.html-NqbtHRnq.js","assets/2024-06-27-Add a List as Query Parameter in Jersey.html-DHVOBTMm.js","assets/2024-06-27-Asserting Nested Map With JUnit.html-Hr-LAeM6.js","assets/2024-06-27-Async Exception Handling in Kotlin.html-2g2zJlyc.js","assets/2024-06-27-Checking if an Object s Type Is Enum.html-lIHr-KJA.js","assets/2024-06-27-Combining Multiple Kotlin Flows.html-7iEQZdxZ.js","assets/2024-06-27-Compare StringBuilder Objects in Java.html-CSPz0teF.js","assets/2024-06-27-Comparing the Values of Two Generic Numbers in Java.html-CkMo5m2n.js","assets/2024-06-27-Context Specific Deserialization Filters in Java 17.html-BUW6HMOz.js","assets/2024-06-27-Convert File to Byte Array in Java.html-B1ywj7xV.js","assets/2024-06-27-Convert ResultSet Into Map.html-C8o1Ref6.js","assets/2024-06-27-Convert Timestamp String to Long in Java.html-DXG_23lD.js","assets/2024-06-27-Convert a Hex String to an Integer in Java.html-PmgjYlhI.js","assets/2024-06-27-Convert a Stream into a Map or Multimap in Java.html-B9f3P-Lc.js","assets/2024-06-27-Create Table Using ASCII in a Console in Java.html-Car28977.js","assets/2024-06-27-Create a  Mutable  String in Java.html-BM52YGEI.js","assets/2024-06-27-Difference Between String isEmpty   and isBlank  .html-B9eg5_JC.js","assets/2024-06-27-Differences Between   and   in Cron Expressions.html-28_o_I92.js","assets/2024-06-27-Ensuring Message Ordering in Kafka  Strategies and Configurations.html-BDsTF_Od.js","assets/2024-06-27-Executable Comments in Java.html-avlfPqbl.js","assets/2024-06-27-Finding the N th Occurrence of a Substring in a String in Java.html-BhrLyL_I.js","assets/2024-06-27-Gradle Proxy Configuration.html-C7gHYkcI.js","assets/2024-06-27-HashSet toArray   Method in Java.html-C16oO8Bw.js","assets/2024-06-27-How to Avoid NoSuchElementException in Stream API.html--UsXmeLG.js","assets/2024-06-27-How to Parse XML to HashMap in Java.html-BrNfyB2r.js","assets/2024-06-27-How to Write and Read a File with a Java HashMap.html-CQv-wjbd.js","assets/2024-06-27-Manage Kafka Consumer Groups.html-4gI_qDuh.js","assets/2024-06-27-Modifying Objects Within Stream While Iterating.html-xfF-34kg.js","assets/2024-06-27-MongoDB Atlas Search Using the Java Driver and Spring Data.html-uey_2UXw.js","assets/2024-06-27-Overriding Spring Beans in Integration Test.html-CfW--9eR.js","assets/2024-06-27-Representing Furthest Possible Date in Java.html-CWA3_oMk.js","assets/2024-06-27-Round the Date in Java.html-uwcjpeNR.js","assets/2024-06-27-Setting a Spring Bean to Null.html-BkfN0ppo.js","assets/2024-06-27-Sharing Memory Between JVMs.html-C9irVETl.js","assets/2024-06-27-Sorting List with String Dates in Kotlin.html-BHIPNf3O.js","assets/2024-06-27-Switching Between Frames Using Selenium WebDriver in Java.html-B8x0GqYv.js","assets/2024-06-27-Synchronize a Static Variable Among Different Threads.html-D8hPhgzm.js","assets/2024-06-27-Time Complexity of Java Collections Sort in Java.html-CfMmqXa8.js","assets/2024-06-27-Time Conversions Using TimeUnit.html-9pJM0Q-f.js","assets/2024-06-27-Unreachable Statements in Java.html-D6SIWMA5.js","assets/2024-06-27-Why Is sun.misc.Unsafe.park Actually Unsafe .html-DAhM93Gp.js","assets/2024-06-27-Working With MathFlux.html-PMh97fEY.js","assets/2024-06-27-Working with Exceptions in Java CompletableFuture.html-WeemqXI6.js","assets/2024-06-28- ConditionalOnThreading Annotation Spring.html-BjusR_Dl.js","assets/2024-06-28-A Guide to RestClient in Spring Boot.html-CO9zxfdN.js","assets/2024-06-28-A Guide to Spring 6 JdbcClient API.html-CTMumkuK.js","assets/2024-06-28-Arrays mismatch   Method in Java.html-Bi177gaY.js","assets/2024-06-28-Capitalize the First Letter of Each Word in a String.html-BWxr-ajX.js","assets/2024-06-28-Check if a String Contains Only Unicode Letters.html-wCItp-wo.js","assets/2024-06-28-Check if a String Contains a Number Value in Java.html-BRea1OFB.js","assets/2024-06-28-Conditional Exception Throwing in Kotlin.html-wgf8hp0g.js","assets/2024-06-28-Configuring the GlassFish Server in Eclipse.html-C5bLY0EW.js","assets/2024-06-28-Convert From List of CompletableFuture to CompletableFuture List.html-DPKfY0mv.js","assets/2024-06-28-Convert String Containing XML to org.w3c.dom.Document.html-BBwtcD5E.js","assets/2024-06-28-Convert an XML Object to a String in Java.html-Dxow0qwG.js","assets/2024-06-28-Difference Between  final static  and  static final .html-B5R3LkQp.js","assets/2024-06-28-Difference Between ZipFile and ZipInputStream in Java.html-7Jx9hfLe.js","assets/2024-06-28-Drawbacks of the Singleton Design Pattern.html-XD-kZMpG.js","assets/2024-06-28-How To Manage Timeout for CompletableFuture.html-CkBHed7J.js","assets/2024-06-28-How to Center Text Output in Java.html-BsYFlARD.js","assets/2024-06-28-How to Create CSV File from POJO with Custom Column Headers and Positions.html-Be3_5ddT.js","assets/2024-06-28-How to Document Generic Type Parameters in Javadoc.html-ab1A-xtv.js","assets/2024-06-28-How to Get First or Last Entry From a LinkedHashMap in Java.html-ByCpmR2b.js","assets/2024-06-28-How to Iterate Over the String Characters in Java.html-qbpQ9Nq3.js","assets/2024-06-28-How to Mock Environment Variables in Unit Tests.html-C46_Eh3a.js","assets/2024-06-28-How to Reuse Testcontainers in Java.html-CTC-dBTp.js","assets/2024-06-28-How to Set Up Environment Variables in IntelliJ IDEA.html-BALcaxbR.js","assets/2024-06-28-How to Write Hashmap to CSV File.html-Bzww2COI.js","assets/2024-06-28-HttpSecurity vs. WebSecurity in Spring Security.html-BSXgdThl.js","assets/2024-06-28-Implement Connect 4 Game with Java.html-D6smdJLS.js","assets/2024-06-28-Intro to Vector Class in Java.html-9yeibiY3.js","assets/2024-06-28-Introduction to LangChain.html-BVH_lbz7.js","assets/2024-06-28-JNDI   What Is java comp env .html-CVDVqnRU.js","assets/2024-06-28-Localized Validation Messages in REST.html-B9iO0VPC.js","assets/2024-06-28-Optional as a Record Parameter in Java.html-CtQXzdXr.js","assets/2024-06-28-Overriding Cucumber Option Values.html-jta4RlUq.js","assets/2024-06-28-Passing Strings by Reference in Java.html-C5EbLC17.js","assets/2024-06-28-PrintWriter vs. FileWriter in Java.html-BIxScoZi.js","assets/2024-06-28-Remove Elements From a Queue Using Loop.html-01XK-b6t.js","assets/2024-06-28-Retry Logic with CompletableFuture.html-BhATmMl8.js","assets/2024-06-28-Split Java String Into Key Value Pairs.html-9rXLjZSQ.js","assets/2024-06-28-Spring Boot 3.1 s ConnectionDetails Abstraction.html-DaeCb1si.js","assets/2024-06-28-Taking Every N th Element from Finite and Infinite Streams in Java.html-BueqzVZW.js","assets/2024-06-28-Why wait   Requires Synchronization .html-BnV1Qwbl.js","assets/2024-06-28-Wrapping a String After a Number of Characters Word Wise.html-BOdpJa1D.js","assets/2024-06-29-API Versioning in Micronaut.html-DLKlG-g5.js","assets/2024-06-29-Check if a List Contains a String Element While Ignoring Case.html-Bh3QJhsr.js","assets/2024-06-29-Check if a String Is Strictly Alphanumeric With Java.html-BmWVzP1x.js","assets/2024-06-29-Checking if Two Objects Have the Same Class in Kotlin.html-DWGnUhW4.js","assets/2024-06-29-Convert Char Array to Int Array in Java.html-J9Jn69fS.js","assets/2024-06-29-Convert a String with Unicode Encoding to a String of Letters.html-BjHg-GSM.js","assets/2024-06-29-Converting HashMap Values to an ArrayList in Java.html-DF6miZV8.js","assets/2024-06-29-Create a GraalVM Docker Image.html-BS52Shs4.js","assets/2024-06-29-Create an ArrayList with Multiple Object Types.html-CaMRnB7P.js","assets/2024-06-29-Deprecate Finalization in Java 18.html-CKGh8Rrz.js","assets/2024-06-29-Difference Between Arrays.sort   and Collections.sort  .html-Dqh0NLSO.js","assets/2024-06-29-Difference Between Information Hiding and Encapsulation.html-TXrnZu5o.js","assets/2024-06-29-Difference Between putIfAbsent   and computeIfAbsent   in Java s Map.html-Dh1uLkSm.js","assets/2024-06-29-Finding the Square Root of a BigInteger in Java.html-CsIzWfbv.js","assets/2024-06-29-Get All Record Fields and Its Values via Reflection.html-DFj0lNWG.js","assets/2024-06-29-Get File Extension From MIME Type in Java.html-D-j4dlbF.js","assets/2024-06-29-How to Convert Double to Float in Java.html-Cwm1XxP8.js","assets/2024-06-29-How to Detect the Username Using Java.html-Qvwu5JZ-.js","assets/2024-06-29-How to Subscribe a Kafka Consumer to Multiple Topics.html-CL4PDuIj.js","assets/2024-06-29-How to Support UTF 8 Encoding in Eclipse.html-C-b7Ekxl.js","assets/2024-06-29-Increment Character in Java.html-Hw3vfO7a.js","assets/2024-06-29-Introduction to Apache Kafka.html-D64DSmS7.js","assets/2024-06-29-Is Java Reflection Bad Practice .html-2HsfxoGv.js","assets/2024-06-29-Joining a List String  in Java With Commas and  and .html-D6cTK_DQ.js","assets/2024-06-29-Partition a Stream in Java.html-Dcww3kOp.js","assets/2024-06-29-Pass a Function as Parameter to Another in Kotlin.html-xr5KJLhT.js","assets/2024-06-29-RSocket Interface in Spring 6.html-D4_aFU21.js","assets/2024-06-29-Rotate Arrays in Java.html-iwNqSKyn.js","assets/2024-06-29-Skipping the First Iteration in Java.html-BIp5A7t4.js","assets/2024-06-29-Spring Boot Application on Liberica Runtime Container.html-Bn72u7C6.js","assets/2024-06-29-SpringRunner vs. SpringBootTest.html-BQUv6SvX.js","assets/2024-06-29-String Templates in Java 21.html-DdHZLsZX.js","assets/2024-06-29-Testing Interface Contract in Java.html-DXn-ybN0.js","assets/2024-06-29-Truncate a Double to Two Decimal Places in Java.html-Dp8wYFab.js","assets/2024-06-29-Trunk Based Development.html-BS5HWzM9.js","assets/2024-06-29-Unnamed Classes and Instance Main Methods in Java 21.html-sMNDVOGi.js","assets/2024-06-29-Unnamed Patterns and Variables in Java 21.html-CsiuFT9t.js","assets/2024-06-29-Using the Apache Commons Lang 3 for Comparing Objects in Java.html-DH9vnqJH.js","assets/2024-06-29-Validate Boolean Type in Spring Boot.html-CBT7-Jg0.js","assets/2024-06-30-A Guide to Log4j and the log4j.properties File in Java.html-64iQdvRV.js","assets/2024-06-30-Add Minutes to a Time String in Java.html-UKZoPJYH.js","assets/2024-06-30-Assert Regex Matches in JUnit.html-zHuFSStF.js","assets/2024-06-30-CATALINA OPTS vs. JAVA OPTS in Apache Tomcat.html-CjF8JpxK.js","assets/2024-06-30-Check if Letter Is Emoji With Java.html-R-HZI1s2.js","assets/2024-06-30-Closing Java IO Streams.html-yQZttJft.js","assets/2024-06-30-Constructing Java Objects From Only the Class Name.html-BjzFlD3m.js","assets/2024-06-30-Convert Double to String Removing Scientific Notation.html-ipi4K5r2.js","assets/2024-06-30-Create List of Object From Another Type Using Java 8.html-COpu597Q.js","assets/2024-06-30-Creating Stream of Regex Matches.html-CabcXwfN.js","assets/2024-06-30-Detect EOF in Java.html-CrWVX6ad.js","assets/2024-06-30-Detect Security Vulnerabilities with Snyk.html-CrwBH5Aq.js","assets/2024-06-30-Difference Between Hashtable and ConcurrentHashMap in Java.html-DK1h7WD6.js","assets/2024-06-30-Difference Between permitAll   and anonymous   in Spring Security.html-O9FWNKej.js","assets/2024-06-30-Differences Between Heap Dump  Thread Dump and Core Dump.html-tVONAn7b.js","assets/2024-06-30-Expand Columns with Apache POI.html-BDqHBNTS.js","assets/2024-06-30-Extract CN From X509 Certificate in Java.html-DtrDYIxw.js","assets/2024-06-30-Find the Middle Element of an Array in Java.html-DGPgRBQI.js","assets/2024-06-30-Guide to Reading YAML Content in Kotlin.html-Cvjx-qvq.js","assets/2024-06-30-How To Convert Excel Data Into List Of Java Objects.html-zNlWIqGJ.js","assets/2024-06-30-How to Get Index of an Item in Java Set.html-B36YOzGg.js","assets/2024-06-30-How to Mock Constructors for Unit Testing using Mockito.html-DI1uoYRC.js","assets/2024-06-30-How to Permanently Enable Line Numbers in IntelliJ IDEA .html-BPX4iwzN.js","assets/2024-06-30-How to Replace Deprecated jdbcTemplate.queryForObject and jdbcTemplate.query in Spring Boot 2.4.X and above.html-BWdDDyzy.js","assets/2024-06-30-How to Split an Integer Number Into Digits in Java.html-DXdfx89-.js","assets/2024-06-30-How to Use Conditional Mapping With MapStruct.html-BtAvEvf9.js","assets/2024-06-30-Intro to Gradle Lint Plugin.html-s5Xufom_.js","assets/2024-06-30-Invoke Spring  Cacheable from Another Method of Same Bean.html-B-1Rcdkt.js","assets/2024-06-30-JSON File Data Into Kafka Topic.html-DVx_LbGH.js","assets/2024-06-30-Java Double vs. BigDecimal.html-CTWk0hJf.js","assets/2024-06-30-Log4j 2 Configuration Using a Properties File.html-D6Uj7Ojc.js","assets/2024-06-30-Maven Multi Module Project Coverage With Jacoco.html-C_LCPS_E.js","assets/2024-06-30-Mock Same Method with Different Parameters.html-CksdThsU.js","assets/2024-06-30-Overview of Mockito MockedConstruction.html-D5qbcSyx.js","assets/2024-06-30-Query With IN Clause in Spring Data Cassandra.html-CojHHFo8.js","assets/2024-06-30-Replacing Single Quote with    in Java String.html-DyW0gXKi.js","assets/2024-06-30-Secure Kubernetes Secrets with Vault.html-Czso8Aui.js","assets/2024-06-30-Securing Spring Boot 3 Applications With SSL Bundles.html-B39SLD2m.js","assets/2024-06-30-Sequenced Collections in Java 21.html-DeJsKFiM.js","assets/2024-06-30-Streams vs. Loops in Java.html-46Qq7zWf.js","assets/2024-06-30-Test Main Method with JUnit.html-DN_DMNwE.js","assets/2024-06-30-Value Based Classes in Java.html-5a4zw7_j.js","assets/2024-06-30-What Is a TLAB or Thread Local Allocation Buffer in Java .html-XQc-Na8Q.js","assets/2024-06-30-When to Call System.out.flush   in Java .html-CAuuaNQd.js","assets/2024-07-01-Aggregate Runtime Exceptions in Java Streams.html-BwVkmntH.js","assets/2024-07-01-Amazon SNS vs. Amazon SQS.html-B5mnt8Ul.js","assets/2024-07-01-Breadth First Search Algorithm in Kotlin.html-CDGs4gwl.js","assets/2024-07-01-Built in Testcontainers Support in Spring Boot.html-Cpsm12O8.js","assets/2024-07-01-Calculate Distance Between Two Coordinates in Java.html-CcMUnBUA.js","assets/2024-07-01-Calculating the Sum of Two Arrays in Java.html-DBWYu49x.js","assets/2024-07-01-Clamp Function in Java.html-hUpisFqk.js","assets/2024-07-01-Conversion From 12 Hour Time to 24 Hour Time in Java.html-CARYFv2E.js","assets/2024-07-01-Convert Between Java LocalDate and Epoch.html-_YlQdctk.js","assets/2024-07-01-Convert Epoch Time to LocalDate and LocalDateTime.html-Cb-9cXDp.js","assets/2024-07-01-Convert List to Long   Array in Java.html-hSLVNleD.js","assets/2024-07-01-Convert an ArrayList of String to a String Array in Java.html-D2A4BT7l.js","assets/2024-07-01-Convert int to Long in Java.html-DbNgPnDV.js","assets/2024-07-01-Creating a Magic Square in Java.html-CwBmn5TD.js","assets/2024-07-01-Creating a Telegram Bot with Spring Boot.html-C-fAfUX4.js","assets/2024-07-01-Executing SQL Script File in Java.html-WB0wUtDA.js","assets/2024-07-01-Extract Text Between Square Brackets.html-LoodhTI1.js","assets/2024-07-01-Format Multiple  or  Conditions in an If Statement in Java.html-Dbs5ihDZ.js","assets/2024-07-01-Generate Models Using OpenAPI With Lombok Annotations.html-DNUe6BuU.js","assets/2024-07-01-Get Values and Keys as ArrayList From a HashMap.html-B7wgHL2m.js","assets/2024-07-01-Get a Random Element From a Set in Java.html-C3Wl5lZx.js","assets/2024-07-01-Get the First n Elements of a List Into an Array.html-MgeNIkoB.js","assets/2024-07-01-Get the Indexes of Regex Pattern Matches in Java.html-DZaLlEa0.js","assets/2024-07-01-HashMap with Multiple Values for the Same Key.html-CZs-jVtv.js","assets/2024-07-01-How To Rename Files and Folders in Amazon S3.html-DzsG4Sba.js","assets/2024-07-01-How to Check if a Value Exists in a JSON Array for a Particular Key.html-DIVoZnzw.js","assets/2024-07-01-How to Fix  Error in Opening Zip File  When Running Maven.html-BeaIJvjk.js","assets/2024-07-01-How to Speed Up Maven Build.html-BPfDfQMG.js","assets/2024-07-01-Inner Classes vs. Subclasses in Java.html-C3Yj6Nlw.js","assets/2024-07-01-Lock Header Rows With Apache POI.html-C36FXoH3.js","assets/2024-07-01-Programmatic Generation of JSON Schemas in Java.html-DH9P2Mze.js","assets/2024-07-01-Reading JSON Documents as Maps and Comparing Them.html-Dr4BIi5C.js","assets/2024-07-01-Set a Parameter in an HttpServletRequest in Java.html-Df3gi8Ei.js","assets/2024-07-01-Sorting Java Map in Descending Order.html-COD2UFyk.js","assets/2024-07-01-Stop Executing Further Code in Java.html-ViWcAT0B.js","assets/2024-07-01-The Composite Pattern in Kotlin.html-BBhfTeQ3.js","assets/2024-07-01-Update an Existing Amazon S3 Object Using Java.html-pPfVj3ED.js","assets/2024-07-01-What Does       Mean in Java .html-DRB94w62.js","assets/2024-07-01-Why There Is No Sorted List in Java .html-3PuSqa_s.js","assets/2024-07-01-bootstrap server in Kafka Configuration.html-BruqmTSG.js","assets/2024-07-02- JsonSubTypes vs. Reflections for Polymorphic Deserialization in Jackson.html-DudH7-U2.js","assets/2024-07-02-A Guide to ShardingSphere.html-FJnZ3ENY.js","assets/2024-07-02-Check if a String Has All Unique Characters in Java.html-BUBs1Ucw.js","assets/2024-07-02-CompletableFuture allOf  .join   vs. CompletableFuture.join  .html-Cmrc4MJE.js","assets/2024-07-02-Convert JSON Array to Java List.html-HPLbLLvq.js","assets/2024-07-02-Converting JsonNode Object to Map.html-DViLHr59.js","assets/2024-07-02-Converting Relative to Absolute Paths in Java.html-BGSfoKPD.js","assets/2024-07-02-Converting String or String Array to Map in Java.html-CQ60dPux.js","assets/2024-07-02-Converting an int   to HashSet in Java.html-UkMbIGRi.js","assets/2024-07-02-Custom DLL Load   Fixing the  java.lang.UnsatisfiedLinkError  Error.html-zoL2AWWP.js","assets/2024-07-02-Difference Between Future  CompletableFuture  and Rxjava s Observable.html-DAbQhPAK.js","assets/2024-07-02-Difference Between Map.clear   and Instantiating a New Map.html-Cp6_SxfO.js","assets/2024-07-02-Difference between Gson  Expose and  SerializedName.html-BK17u_wW.js","assets/2024-07-02-Docker Compose Support in Spring Boot 3.html-BM4nMAdx.js","assets/2024-07-02-Escape HTML Symbols in Java.html-BKtTblYa.js","assets/2024-07-02-Fail Maven Build if JUnit Coverage Falls Below Certain Threshold.html-CwGy70zw.js","assets/2024-07-02-Get a Continuous Stream of Logs for Pods in Kubernetes.html-hiL3JpT4.js","assets/2024-07-02-Getting Started With Apache Pulsar and Spring Boot.html-BiFgpc_r.js","assets/2024-07-02-Guide to Java Jackson jr Library.html-Ct6c0cO-.js","assets/2024-07-02-Guide to the yield Keyword in Java.html-ZYEFKE5V.js","assets/2024-07-02-How to Get First Item From a Java Set.html-CdMHdvoE.js","assets/2024-07-02-How to Get Notified When a Task Completes in Java Executors.html-D9stBvas.js","assets/2024-07-02-How to Get the Start and End Dates of a Year Using Java.html-D9qEYy5F.js","assets/2024-07-02-How to Modify a Key in a HashMap .html-DYIngITS.js","assets/2024-07-02-JDBC vs. R2DBC vs. Spring JDBC vs. Spring Data JDBC.html-TkeilJod.js","assets/2024-07-02-Law of Demeter in Java.html-B4to7Eq2.js","assets/2024-07-02-Matching Varargs Using MockK in Kotlin.html-Ce0PIcTw.js","assets/2024-07-02-Metadata GC Threshold in Java.html-BwuDEiV8.js","assets/2024-07-02-Pagination in Spring Webflux and Spring Data Reactive.html-UaVMIVe5.js","assets/2024-07-02-Parameterized Logging With SLF4J.html-C7Dtp3Dh.js","assets/2024-07-02-Performance Comparison Between Different Java String Concatenation Methods.html-CVDULcCa.js","assets/2024-07-02-Property Based Testing with jqwik.html-_JYkKl-i.js","assets/2024-07-02-Receiving PostreSQL Push Notifications with Spring Integration.html-BokF3V6C.js","assets/2024-07-02-Remove Duplicate Values From HashMap in Java.html-BmeRoS6_.js","assets/2024-07-02-Remove Whitespaces From a JSON in Java.html-BkRu49pR.js","assets/2024-07-02-Scroll API in Spring Data JPA.html-DFpoHaTa.js","assets/2024-07-02-Stateless Object in Java.html-DJF5nz-T.js","assets/2024-07-02-Understanding Kafka Topics and Partitions.html-Dx9c2GC_.js","assets/2024-07-02-Understanding the java.net.SocketException Broken Pipe Error.html-BLFJRtgy.js","assets/2024-07-02-Unit Testing of System.in With JUnit.html-OCLxyewG.js","assets/2024-07-02-What Does the Holder T  Class Do in Java .html-o9CkIKsi.js","assets/2024-07-02-What s the Difference Between Iterator and ListIterator .html-Cx6cTkkY.js","assets/2024-07-03-Accessing Session Attributes in Thymeleaf.html-Cpg6QJWV.js","assets/2024-07-03-Adding One Month to Current Date in Java.html-DN9LD0gL.js","assets/2024-07-03-Check if a File Is Empty in Java.html-CqGMxjs5.js","assets/2024-07-03-Check if a String Contains Non Alphanumeric Characters.html-CK5sF_o_.js","assets/2024-07-03-CompletableFuture and ThreadPool in Java.html-CHhOVb4_.js","assets/2024-07-03-Convert One Enum to Another Enum in Java.html-BDKMpAZK.js","assets/2024-07-03-Count the Number of Rows in Spring Data JPA.html-uJ1CVAKz.js","assets/2024-07-03-Difference Between Boolean.TRUE and true in Java.html-DrSYnVLP.js","assets/2024-07-03-Difference Between Instant and LocalDateTime.html-CcsYOt4Q.js","assets/2024-07-03-Disable Wildcard Import in IntelliJ.html-CXaK7ZYP.js","assets/2024-07-03-Documenting Spring Event Driven API Using AsyncAPI and Springwolf.html-f6WLESGN.js","assets/2024-07-03-Does Java Read Integers in Little Endian or Big Endian .html-DeuwpAso.js","assets/2024-07-03-Extracting a Tar File in Java.html-Cbp9RfMx.js","assets/2024-07-03-Get Partition Count for a Topic in Kafka.html-D1KRfYxF.js","assets/2024-07-03-Getting Yesterday s Date in Java.html-BhFR52pN.js","assets/2024-07-03-Gradle Toolchains Support for JVM Projects.html-bzRDICnp.js","assets/2024-07-03-How to Convert application.properties to application.yml for Spring Boot.html-WoDyGSA2.js","assets/2024-07-03-How to Deep Copy an ArrayList in Java.html-COhz0KVY.js","assets/2024-07-03-How to Get Last Day of a Month in Java.html-DGDvGZCu.js","assets/2024-07-03-How to Read Zip Files Entries With Java.html-DXJgU5yw.js","assets/2024-07-03-How to Solve 403 Error in Spring Boot POST Request.html-Cqa13CFe.js","assets/2024-07-03-Integer.class vs Integer.TYPE vs int.class.html-dsTIKhW2.js","assets/2024-07-03-Introduction to JeroMQ.html-DLFor16d.js","assets/2024-07-03-Introduction to Selenide.html-DL-G6DhZ.js","assets/2024-07-03-JAXP vs JAXB  XML Processing APIs Compared.html-B9HHsIeE.js","assets/2024-07-03-MongoDB   Field Level Encryption.html-Bj0FCXHc.js","assets/2024-07-03-New Features in Java 20.html-BQ6kr2H0.js","assets/2024-07-03-Parallelize for Loop in Java.html-BiGw_pdO.js","assets/2024-07-03-Passing a Class to a Function in Kotlin.html-DQjAyxGW.js","assets/2024-07-03-Pretty Print a JSON in Java.html-BV83NSm2.js","assets/2024-07-03-Qualified this and Implicit this in Kotlin.html-C21t3iUq.js","assets/2024-07-03-Quick Guide to YugabyteDB.html-LJzp5gVM.js","assets/2024-07-03-Reading a JSP Variable From JavaScript.html-COWAxaT7.js","assets/2024-07-03-Removing JSON Elements With Jackson.html-STCrfW6G.js","assets/2024-07-03-Scheduling Repeating Task in Kotlin.html-CBwADe7A.js","assets/2024-07-03-Setting Default Values to Null Fields in Jackson Mapping.html-DY1n5zrN.js","assets/2024-07-03-Setup Http Patch Request With OpenFeign.html-Do8S9ulv.js","assets/2024-07-03-Smart Batching in Java.html-DbZ4QK5I.js","assets/2024-07-03-Split a String Into Digit and Non Digit Substrings.html-Dv7HC6uA.js","assets/2024-07-03-Starting the Maven Build From the Point Where It Failed.html-BA9RUaZE.js","assets/2024-07-03-The Vector API in Java 19.html-CYkiNcap.js","assets/2024-07-03-What Is the Maximum Depth of the Java Call Stack .html-Cn8cTTE2.js","assets/2024-07-04- JsonMerge Annotation in Jackson.html-DM-VVdsu.js","assets/2024-07-04-Add a Checked Attribute to Input Conditionally in Thymeleaf.html-D1mIM_ja.js","assets/2024-07-04-Asserting Equality on Two Classes Without an equals   Method.html-Czn8Q59-.js","assets/2024-07-04-Assignment in While Expression in Kotlin.html-Cjz3DnXP.js","assets/2024-07-04-Check if a String Is All Uppercase or Lowercase in Java.html-BVUB8iO4.js","assets/2024-07-04-Cloning an Object in Kotlin.html-CFZFSNKh.js","assets/2024-07-04-Cognitive Complexity and Its Effect on the Code.html-htu1u-zw.js","assets/2024-07-04-Combining Two or More Byte Arrays.html-DYN11DIi.js","assets/2024-07-04-Converting Map String  Object  to Map String  String  in Java.html-BwEcDXqe.js","assets/2024-07-04-Converting Object To Map in Java.html-DK425FFV.js","assets/2024-07-04-Difference Between findBy and findOneBy in Spring Data JPA.html-CjBDw5xN.js","assets/2024-07-04-Difference Between get   and navigate   in Selenium WebDriver.html-xxciotT5.js","assets/2024-07-04-Difference Between single   and first   in Kotlin Flows.html-DzzFbq5y.js","assets/2024-07-04-Fix  Command Line is Too Long  in IntelliJ.html-DlqlL4c6.js","assets/2024-07-04-Generating WSDL Stubs With Gradle.html-D-RejGpO.js","assets/2024-07-04-Get Unique Values From an ArrayList in Java.html-BSjUk-6O.js","assets/2024-07-04-Gray Box Testing Using the OAT Technique.html-DAybozYO.js","assets/2024-07-04-Hex Representation of a SHA 1 Digest of a String in Java.html-CQxklHs0.js","assets/2024-07-04-How Many Days Are There in a Particular Month of a Given Year .html-D-7H67Uu.js","assets/2024-07-04-How to Display a Full HTTP Response Body With Gatling.html-Biaz4w7d.js","assets/2024-07-04-Is a Key Required as Part of Sending Messages to Kafka .html-BOZCNcKl.js","assets/2024-07-04-Java IllegalStateException   getInputStream   has already been called for this request .html-cAFp-Ycw.js","assets/2024-07-04-Java Serialization  readObject   vs. readResolve  .html-BFQVWTek.js","assets/2024-07-04-Listing All AWS S3 Objects in a Bucket Using Java.html-DRnKJnhL.js","assets/2024-07-04-Lossy and Lossless Image Compression Using Java.html-BxrCxCVq.js","assets/2024-07-04-Matching Null With Mockito.html-rC7zOn_w.js","assets/2024-07-04-Mock a URL Connection in Java.html-BbY3UtA9.js","assets/2024-07-04-Mocking Private Fields With Mockito.html-Du3tBgyg.js","assets/2024-07-04-Need for Default Constructor in JPA Entities.html-CT_ZOqA7.js","assets/2024-07-04-Read Data From the Beginning Using Kafka Consumer API.html-DNjRcfMw.js","assets/2024-07-04-Read Date in Java Using Scanner.html-BpNa2QHm.js","assets/2024-07-04-Replacing Variables in a Document Template with Java.html-CukQlI-a.js","assets/2024-07-04-Resolving Mockito Exception  Wanted But Not Invoked.html-Xb6c6gVO.js","assets/2024-07-04-Returning a Value After Finishing Thread s Job in Java.html-CKu8PqXv.js","assets/2024-07-04-Run JMeter .jmx File From the Command Line and Configure the Report File.html-BjQ_AAoL.js","assets/2024-07-04-Sort Date Strings in Java.html-BJrFcXUI.js","assets/2024-07-04-Spring Boot Properties Prefix Must Be in Canonical Form.html-DoU23K_t.js","assets/2024-07-04-The Difference Between findById and getById in Spring Data.html-Ct4idfTy.js","assets/2024-07-04-Throw Exception for Unexpected Input for Enum With MapStruct.html-DQ7jorR2.js","assets/2024-07-04-Understanding JPA Hibernate Associations.html-BywRnEF3.js","assets/2024-07-04-Using PostgreSQL as a Message Broker.html-CDUhXNr8.js","assets/2024-07-04-What Is Elasticsearch .html-BR4ivgxb.js","assets/2024-07-05-Array vs. List Performance in Java.html-BjJiXkWd.js","assets/2024-07-05-ArrayBlockingQueue vs. LinkedBlockingQueue.html-DNH92pSv.js","assets/2024-07-05-Calculate Percentage in Kotlin.html-CEXaz4T_.js","assets/2024-07-05-Check if a List Contains an Element From Another List in Java.html-CM2G1W_9.js","assets/2024-07-05-Classpath vs. Modulepath in Java.html-CLLRk5UD.js","assets/2024-07-05-Configuring Gradle Tasks in Spring Boot 3.html-CMIOhn75.js","assets/2024-07-05-Convert Hashmap to JSON Object in Java.html-8HkVwz3b.js","assets/2024-07-05-Convert String to Int Using Encapsulation.html-DSPAcFbL.js","assets/2024-07-05-Convert an OutputStream to an InputStream.html-DvWfhruj.js","assets/2024-07-05-Converting JSON to XML in Java.html-CThaZbP6.js","assets/2024-07-05-Converting a cURL Into Postman and Vice Versa.html-DtyQSQIa.js","assets/2024-07-05-Correct Use of flush   in JPA.html-B1jt_AM1.js","assets/2024-07-05-Creating Custom Iterator in Java.html-CxVsv6U6.js","assets/2024-07-05-Custom WebFlux Exceptions in Spring Boot 3.html-GxbDDyJ9.js","assets/2024-07-05-Difference Between implementation and compile in Gradle.html-YujWNcdR.js","assets/2024-07-05-Difference Between null and Empty String in Java.html-KQFLbzv_.js","assets/2024-07-05-Different Dependency Version Declarations in Gradle.html-C3DeYYfj.js","assets/2024-07-05-Encoding Special Characters in XML.html-CunDrut5.js","assets/2024-07-05-Execute a Method Only Once in Java.html-VZ1GS6f3.js","assets/2024-07-05-Generating Javadoc With Gradle.html-B0qnXAh2.js","assets/2024-07-05-Get Last N Messages in Apache Kafka Topic.html-P3W4wnO0.js","assets/2024-07-05-Handle NoSuchElementException When Reading a File Through Scanner.html-LW7cLvh1.js","assets/2024-07-05-Hashing With Argon2 in Java.html-Bi2U2FbN.js","assets/2024-07-05-Hibernate Natural IDs in Spring Boot.html-CqH3kARK.js","assets/2024-07-05-How to Take Input as String With Spaces in Java Using Scanner .html-ColxZjoh.js","assets/2024-07-05-How to View Logs of a Pod in Kubernetes .html-f6pGY0V9.js","assets/2024-07-05-Introduction to MinIO.html-RmWzmwVb.js","assets/2024-07-05-Java PrintStream to String.html-P3IXSqJs.js","assets/2024-07-05-Object.toString   vs String.valueOf  .html-BC1XQ1eh.js","assets/2024-07-05-Opening a New Tab Using Selenium WebDriver in Java.html-CRGsKNtm.js","assets/2024-07-05-Read Multiple Inputs on the Same Line in Java.html-Bm7W9ISd.js","assets/2024-07-05-Regular Expression   z vs  Z Anchors in Java.html-DHWUA-vQ.js","assets/2024-07-05-Securing Spring Boot API With API Key and Secret.html-Of8F7UYh.js","assets/2024-07-05-Shared Secret Authentication in Spring Boot Application.html-T5I_hLdt.js","assets/2024-07-05-Should We Create an Interface for Only One Implementation .html-jDoTrMcK.js","assets/2024-07-05-Spring Boot Actuator Without Spring Boot.html-DQnv8gql.js","assets/2024-07-05-What s the Difference between Scanner next   and nextLine   Methods .html-BYmfBqAs.js","assets/2024-07-05-Working With Empty Stream in Java.html-B693CJ0E.js","assets/2024-07-05-Write Console Output to Text File in Java.html-CDal3K6Z.js","assets/2024-07-06-A Guide to FlexyPool.html-DawhN1sd.js","assets/2024-07-06-Add Custom Headers to a Kafka Message.html-C4jYb96I.js","assets/2024-07-06-Analyze  Generate and Transform Code Using Spoon in Java.html-UjZ34QYN.js","assets/2024-07-06-Automatically Create Schemas for H2 In Memory Database.html-RnCT6iok.js","assets/2024-07-06-Best Practices for Passing Many Arguments to a Method in Java.html-D2tjBWpB.js","assets/2024-07-06-Boolean Converters in Hibernate 6.html-w-vJuIpF.js","assets/2024-07-06-Cancel an Ongoing Flux in Spring WebFlux.html-DQPkIsOw.js","assets/2024-07-06-Check if the First Letter of a String Is a Number.html-Bw1RrVD1.js","assets/2024-07-06-Comparing Two Byte Arrays in Java.html-BhDsjTOe.js","assets/2024-07-06-Converting an AAR File to a JAR File.html-CzbM_93x.js","assets/2024-07-06-Creating a Test Suite With JUnit.html-DW82FIUa.js","assets/2024-07-06-Custom Protocol Mapper with Keycloak.html-kBQAoFFL.js","assets/2024-07-06-Difference Between th text and th value in Thymeleaf.html-BbDPXhL_.js","assets/2024-07-06-Encode Passwords With Spring Boot CLI.html-wkfX_nTw.js","assets/2024-07-06-Find the Index of an Element in a Java Array.html-wNyjxSdM.js","assets/2024-07-06-Find the Longest Word in a Given String in Java.html-IDNM0Lgh.js","assets/2024-07-06-Generate UUIDs as Primary Keys With Hibernate.html-CyE77nEB.js","assets/2024-07-06-Getting Pixel Array From Image in Java.html-CXvaseqE.js","assets/2024-07-06-Getting the Text That Follows After the Regex Match in Java.html-FZ53XSmd.js","assets/2024-07-06-Guide to Swagger Parser.html-Eku4EBx1.js","assets/2024-07-06-How to Persist a List of String in JPA .html-dXtRoaMw.js","assets/2024-07-06-In Place Modification of Map Entry in Kotlin.html-CZ0fREut.js","assets/2024-07-06-Integer.parseInt scanner.nextLine    and scanner.nextInt   in Java.html-B1F3g3nT.js","assets/2024-07-06-Introduction to Spring Modulith.html-BJXEJciX.js","assets/2024-07-06-Is CompletableFuture Non blocking .html-Bsb_pRW9.js","assets/2024-07-06-JAVA HOME vs PATH Environment Variables.html-BmSk2MN0.js","assets/2024-07-06-Lombok EqualsAndHashCode Annotation.html-BnqVj4gF.js","assets/2024-07-06-Overriding hashCode   And equals   For Records.html-9wNAB96T.js","assets/2024-07-06-Overview of NLP Libraries in Java.html-kqxP--n7.js","assets/2024-07-06-Print    Quotes Around a String in Java.html-C1fGXFPy.js","assets/2024-07-06-Remove Punctuation From a String in Java.html-BVDhpkTx.js","assets/2024-07-06-Retrieve the Value of an HTML Input in Selenium WebDriver.html-FKtjloVo.js","assets/2024-07-06-Scoped Values in Java 20.html-DW7De9HE.js","assets/2024-07-06-Self Injection With Spring.html-CmC0Acxr.js","assets/2024-07-06-Spring Boot H2 JdbcSQLSyntaxErrorException expected  identifier .html-COhQNz8o.js","assets/2024-07-06-StaleElementReferenceException in Selenium.html-okRc2l2z.js","assets/2024-07-06-Testing Ktor Controllers.html-CxYX0ZKz.js","assets/2024-07-06-URL Query Manipulation in Java.html-DjbeWbuK.js","assets/2024-07-06-Uploading File Using Selenium Webdriver in Java.html-DjjtSxeP.js","assets/2024-07-06-Using OpenAI ChatGPT APIs in Spring Boot.html-HHQ_sjuK.js","assets/2024-07-06-Working with Virtual Threads in Spring 6.html-DxX1ayA0.js","assets/2024-07-07-A Guide to  Timeout Annotation in JUnit 5.html-DXkR4dAm.js","assets/2024-07-07-A Guide to Spring Cloud Azure Key Vault.html-BVsC5O6c.js","assets/2024-07-07-Accessing Methods Outside Companion Object in Kotlin.html-xtmiKEQN.js","assets/2024-07-07-Buffer Overflows in Java.html-DaYSjlNk.js","assets/2024-07-07-Check if a Specified Key Exists in a Given S3 Bucket Using Java.html-DaDd25ff.js","assets/2024-07-07-Convert Boolean to String in Java.html-1SQFwsyF.js","assets/2024-07-07-Convert Integer to Hexadecimal in Java.html-BUP0563o.js","assets/2024-07-07-Deserialize Generic Type with Jackson.html-C0p03e59.js","assets/2024-07-07-Differences Between Classpath and Sourcepath.html-BUy3Gebe.js","assets/2024-07-07-External Debugging With JMXTerm.html-B7rW-MwV.js","assets/2024-07-07-Fix Spring Data JPA Exception  No Property Found for Type.html-DpoffC0k.js","assets/2024-07-07-Fix the JsonMappingException  Can not deserialize instance of java.util.ArrayList from Object value  token  JsonToken.START OBJECT  .html-B6h6Tb6P.js","assets/2024-07-07-Functional vs. Non Functional Testing.html-BBZqsZRD.js","assets/2024-07-07-Generate the Same UUID From a String in Java.html-iM7N1RGN.js","assets/2024-07-07-Generating Time Based UUIDs.html-B2SjQj4f.js","assets/2024-07-07-Get All Cached Keys with Caffeine Cache in Spring Boot.html-BxHIj0M7.js","assets/2024-07-07-How to Determine Date of the First Day of the Week Using LocalDate in Java.html-ARfhfXvn.js","assets/2024-07-07-Implicit Wait vs Explicit Wait in Selenium Webdriver.html-DxjDPIpX.js","assets/2024-07-07-Integrate AWS Secrets Manager in Spring Boot.html-B87s-kE9.js","assets/2024-07-07-Java Helper vs. Utility Classes.html-Dxglg4P-.js","assets/2024-07-07-Loading Multiple YAML Configuration Files in Spring Boot.html-fAFod_jE.js","assets/2024-07-07-OffsetDateTime Serialization With Jackson.html-Cu5fGz5x.js","assets/2024-07-07-Parsing Date Strings with Varying Formats.html-CfuJ0yMN.js","assets/2024-07-07-Possible Root Causes for High CPU Usage in Java.html-DLN_s2va.js","assets/2024-07-07-Private Constructors in Kotlin.html-s0g-wodz.js","assets/2024-07-07-Remove Entity with Many to Many Relationship in JPA.html-CeDrn4ve.js","assets/2024-07-07-Resilience4j Events Endpoints.html-BZxIgRx8.js","assets/2024-07-07-Retrying Requests using Apache HttpClient.html-BDUcXjaz.js","assets/2024-07-07-Reuse StringBuilder for Efficiency.html-4L3CrWVz.js","assets/2024-07-07-SAML with Spring Boot and Spring Security.html-BfOjASFR.js","assets/2024-07-07-Search Users With Keycloak in Java.html-C68jaBVZ.js","assets/2024-07-07-The Difference Between junit vintage engine and junit jupiter engine.html-CkCFJUH5.js","assets/2024-07-07-Unidirectional One to Many and Cascading Delete in JPA.html-CX4zxSZG.js","assets/2024-07-07-Use Mapper in Another Mapper with Mapstruct and Java.html-B4bPwbsa.js","assets/2024-07-07-Using Spy in MockK.html-CTHfZDtr.js","assets/2024-07-08-API First Development with Spring Boot and OpenAPI 3.0.html-Dp1Aqak9.js","assets/2024-07-08-Add Field to an Existing MongoDB Bson Filter in Java.html-DdObJIVL.js","assets/2024-07-08-Anemic vs. Rich Domain Objects.html-C9Hu04Ft.js","assets/2024-07-08-Authenticating Users with AzureAD in Spring Boot.html-BBOsXDYK.js","assets/2024-07-08-Can Stream.collect   Return the null Value .html--ZByjg6K.js","assets/2024-07-08-Change Swagger UI URL prefix.html-G9t0MLxZ.js","assets/2024-07-08-Check if an Enum Value Contains a Given String in Kotlin.html-DIykeIeS.js","assets/2024-07-08-Configuring Spring Cloud FeignClient URL.html-C9F8oZdK.js","assets/2024-07-08-Convert a Collection Into an ArrayList in Kotlin.html-Rl529Mwj.js","assets/2024-07-08-Convert a Number to a Letter in Java.html-BAhVFr9C.js","assets/2024-07-08-Copying All Keys and Values From One Hashmap Onto Another Without Replacing Existing Keys and Values.html-DFEWCNio.js","assets/2024-07-08-Custom Constructor in Java Records.html-DoTe7ppG.js","assets/2024-07-08-Debugging Spring Method Annotations Using Lightrun.html-DqdBiViH.js","assets/2024-07-08-Difference Between Fluent Interface and Builder Pattern in Java.html-DPfbvnN6.js","assets/2024-07-08-Difference Between Javac and the Eclipse Compiler.html-CObqaF9V.js","assets/2024-07-08-Different Ways to Create an Object in Java.html-CSuyZmPG.js","assets/2024-07-08-Download a Webpage in Java.html-DOl5pdb_.js","assets/2024-07-08-Exclude a Dependency in a Maven Plugin.html-tgf-Xiri.js","assets/2024-07-08-Get the Desktop Path in Java.html-C9sVx-Cq.js","assets/2024-07-08-Guide to Java Project Panama.html-BNv2VlXR.js","assets/2024-07-08-Handle Duplicate Keys When Producing Map Using Java Stream.html-DUebBJxQ.js","assets/2024-07-08-How to Post Raw Body Data With cURL.html-DvIFgC1F.js","assets/2024-07-08-How to configure Redis TTL with Spring Data Redis .html-DREi9ZZE.js","assets/2024-07-08-Implementing toString   on enums in Java.html-Crhe8_uR.js","assets/2024-07-08-Introduction to Interface Driven Development  IDD .html-DMdKH2It.js","assets/2024-07-08-Introduction to QuestDB.html-ua8Nq79e.js","assets/2024-07-08-Kotlin AES Encryption and Decryption.html-tcCN2CHp.js","assets/2024-07-08-Load Testing Rest Endpoint Using Gatling.html-YM-SWIQ6.js","assets/2024-07-08-Managing Multiple JDK Installations With jEnv.html-CRdf_Z3A.js","assets/2024-07-08-Maven Reactor.html-Cm23LaAk.js","assets/2024-07-08-Moving Items Around in an Arraylist.html-CnZ385iF.js","assets/2024-07-08-New CRUD Repository Interfaces in Spring Data 3.html-FCAH8ezt.js","assets/2024-07-08-Pipeline Design Pattern in Java.html-D7Gb4dUI.js","assets/2024-07-08-Pitfalls on Testing with Spring Boot.html-DMK17tFR.js","assets/2024-07-08-Post form url encoded Data with Spring Cloud Feign.html-COFgchaQ.js","assets/2024-07-08-Run a Spring Boot Application in AWS Lambda.html-DFemCSkr.js","assets/2024-07-08-Spring Kafka  Configure Multiple Listeners on Same Topic.html-Cl7YReAf.js","assets/2024-07-08-TRUNCATE TABLE in Spring Data JPA.html-UH28cUrJ.js","assets/2024-07-08-Testing Spring OAuth2 Access Control.html-CMPcI9OC.js","assets/2024-07-08-UUID vs. Sequential ID as Primary Key.html-DK6FyP1k.js","assets/2024-07-08-Using Java Records with JPA.html-PqFemWY0.js","assets/2024-07-09-Accessing Private Constructor in Java.html-C4uzWUYT.js","assets/2024-07-09-Cassandra   Object Mapping with DataStax Java Driver.html-BhOYgn60.js","assets/2024-07-09-Check if Object Is an Array in Java.html-BQ34k31t.js","assets/2024-07-09-Combining Two Lists Into a Map in Java.html-vuTCnCme.js","assets/2024-07-09-Convert Array to Set and Vice Versa in Kotlin.html-OfCfMprL.js","assets/2024-07-09-Convert Hex to RGB Using Java.html-gysWNy5o.js","assets/2024-07-09-Create Dynamic Queues in RabbitMQ.html-TQjjoGjz.js","assets/2024-07-09-Difference Between Class.forName   and Class.forName  .newInstance  .html-C4-n48Ig.js","assets/2024-07-09-Difference Between findBy and findAllBy in Spring Data JPA.html-e0TucXBz.js","assets/2024-07-09-Find the First Embedded Occurrence of an Integer in a Java String.html-B1PlsZ72.js","assets/2024-07-09-Finding All Duplicates in a List in Java.html-DN7i4usG.js","assets/2024-07-09-Fix EmptyResultDataAccessException When Using JdbcTemplate.html-BWn8d1Xa.js","assets/2024-07-09-Getting Started With RethinkDB.html-DQOtbgnm.js","assets/2024-07-09-Getting the Current ApplicationContext in Spring.html-CDrsb9yk.js","assets/2024-07-09-Guide to HTTPie for Terminal.html-j3GXP0gP.js","assets/2024-07-09-Guide to Merging Two Maps in Kotlin.html-Wp_ymTNm.js","assets/2024-07-09-Guide to Quarkus Funqy.html-tzgi5kRK.js","assets/2024-07-09-How Do I Generate a Dashboard Report in JMeter .html-Q90heVpt.js","assets/2024-07-09-Initialize an ArrayList with Zeroes or Null in Java.html-B1T7K-PX.js","assets/2024-07-09-Introduction to Roaring Bitmap.html-DUPVQQs4.js","assets/2024-07-09-Jakarta EE 10.html-OApETz4p.js","assets/2024-07-09-Mapping an Array of Integers to Strings Using Java Streams.html-DxTcMApI.js","assets/2024-07-09-Memory Types in JVM.html-DLv8JlPt.js","assets/2024-07-09-Migrate From Java 8 to Java 17.html-DlhiXvIj.js","assets/2024-07-09-OpenTelemetry Setup in Spring Boot Application.html-DIN4mmji.js","assets/2024-07-09-Reading PDF File Using Java.html-CyhRLzsi.js","assets/2024-07-09-Return Absolute Difference of Two Integers in Java.html-DvXrgr4O.js","assets/2024-07-09-Single Assert Call for Multiple Properties in Java Unit Testing.html-0mAJDaxE.js","assets/2024-07-09-Thread.sleep   vs Awaitility.await  .html-Cq9B4RXX.js","assets/2024-07-09-Understanding the Difference Between Stream.of   and IntStream.range  .html-YgiZL86y.js","assets/2024-07-09-Validating IPv4 Address in Java.html-bq1rou8C.js","assets/2024-07-09-VarArgs vs Array Input Parameters in Java.html-D9EgDD6w.js","assets/2024-07-10-Ahead of Time Optimizations in Spring 6.html-yEKV0yDY.js","assets/2024-07-10-Case Insensitive Searching in ArrayList.html-B3-hKox8.js","assets/2024-07-10-Check If All the Variables of an Object Are Null.html-tRj2VotE.js","assets/2024-07-10-Check if Command Line Arguments Are Null in Java.html-DIH9piHs.js","assets/2024-07-10-Check if an Integer Value Is Null or Zero in Java.html-CJAbo7r4.js","assets/2024-07-10-Class Methods vs Instance Methods in Java.html-BGLz1P8L.js","assets/2024-07-10-Comparing Two JAR Files in Java.html-roQrk_FR.js","assets/2024-07-10-Comparing a String to an Enum Value in Java.html-YxXq0Aes.js","assets/2024-07-10-Compiling and Executing Code From a String in Java.html-BB1KmaDX.js","assets/2024-07-10-Convert String to Char in Kotlin.html-BnuqCHj2.js","assets/2024-07-10-Convert an ArrayList of Object to an ArrayList of String Elements.html-CN4Pjg7t.js","assets/2024-07-10-Convert byte   to MultipartFile in Java.html-BWq8vhDA.js","assets/2024-07-10-Converting a Number from One Base to Another in Java.html--R2teoI_.js","assets/2024-07-10-Converting a String Array Into an int Array in Java.html-Ck-P-wwS.js","assets/2024-07-10-Difference Between JPA and Spring Data JPA.html-BwlsAUu1.js","assets/2024-07-10-Differences Between Spring Data JPA findFirst   and findTop  .html-Cq8CMYbj.js","assets/2024-07-10-Encoding of URI Variables on RestTemplate.html-Cs9esQQx.js","assets/2024-07-10-Flyway Out of Order Migrations.html-B3UMxHp5.js","assets/2024-07-10-Getting Class Type From a String in Java.html-Be9Afch8.js","assets/2024-07-10-Implementing Retry in Kafka Consumer.html-Bf2EGTQQ.js","assets/2024-07-10-Introduction to ScyllaDB with Java.html-BXmmPW6Y.js","assets/2024-07-10-Java List Interface.html-AOwHis-P.js","assets/2024-07-10-Kotlin when vs. Java switch Statement.html-BYDFYi0Q.js","assets/2024-07-10-Lambda Expression vs. Anonymous Inner Class.html-BJmdbMmP.js","assets/2024-07-10-Monads in Java   Optional.html-Dz5HJTUJ.js","assets/2024-07-10-Multiply a BigDecimal by an Integer in Java.html-B_9oHeYk.js","assets/2024-07-10-NonUniqueResultException in Spring Data JPA.html-BqQ2YORd.js","assets/2024-07-10-PrintStream vs PrintWriter in Java.html-PzN211Tu.js","assets/2024-07-10-RESTful Microservices With RestExpress.html-hdC8hQ9q.js","assets/2024-07-10-Record Patterns in Java 19.html-Bta4dqBi.js","assets/2024-07-10-Spring Boot Logback and Log4j2 Extensions.html-CA2dlyoj.js","assets/2024-07-10-Spring MVC   Mapping the Root URL to a Page.html-CMYOZzrA.js","assets/2024-07-10-Storing Data Triple in a List in Java.html-RS7y-Wl3.js","assets/2024-07-10-Stream to Iterable in Java.html-BaJh4AV7.js","assets/2024-07-10-Structured Concurrency in Java 19.html-CPL57lx4.js","assets/2024-07-10-The JVM Run Time Data Areas.html-BxhkJ8qj.js","assets/2024-07-10-Working With Multiple Repositories in Gradle.html-BmIb55-F.js","assets/2024-07-10-any   vs. none   vs. all   in Kotlin.html-Dr9CyM_s.js","assets/2024-07-11-A Guide to Spring CredHub.html-Bnz3iJlW.js","assets/2024-07-11-Alternatives for instanceof Operator in Java.html-joq97SgP.js","assets/2024-07-11-Check JWT Expiry Without Throwing Exceptions.html-CkQ-40tr.js","assets/2024-07-11-Choosing the Right Java Collection.html-BAU_l963.js","assets/2024-07-11-Common Exceptions of Crypto APIs in Java.html-BJ69GUFa.js","assets/2024-07-11-Convert Anonymous Class into Lambda in Java.html-UTPqm_uS.js","assets/2024-07-11-Convert Between int and char in Java.html-srbWcp8Q.js","assets/2024-07-11-Convert a List of Integers to a List of Strings.html-D9GoGAFo.js","assets/2024-07-11-Converting a List of Maps to a Map Grouped by Key in Kotlin.html-BRgV_3qV.js","assets/2024-07-11-Difference Between Map.ofEntries   and Map.of  .html-Cn93uGHx.js","assets/2024-07-11-Errors and Exceptions in Java.html-DO4CuRHs.js","assets/2024-07-11-Extract Values using AssertJ in Java.html-BwlUSjwO.js","assets/2024-07-11-Extracting JAR to a Specified Directory.html-BWruzJMw.js","assets/2024-07-11-Fixing the No Main Manifest Attribute in Spring Boot.html-XQVAcPUx.js","assets/2024-07-11-Form Login and Basic Authentication in springdoc openapi.html-Bn14SLpF.js","assets/2024-07-11-Functors in Java.html-CHTGmO_S.js","assets/2024-07-11-Getting Started with Blaze Persistence.html-DgDBZfkW.js","assets/2024-07-11-Getting a Value in JSONObject.html-D-uQ-LWC.js","assets/2024-07-11-Guide to Java PriorityQueue.html-CAbk-YE2.js","assets/2024-07-11-Guide to Splitting a String by Whitespace in Java.html-D7FN5z3D.js","assets/2024-07-11-Handle Browser Tabs With Selenium.html-13_Oc2HV.js","assets/2024-07-11-Java Generics PECS   Producer Extends Consumer Super.html-BEa6mtMe.js","assets/2024-07-11-Java Program to Print Pascal s Triangle.html-zlE3bz4R.js","assets/2024-07-11-Kotlin and Spring Boot  Injecting Configuration Properties Using  Value.html-BU-wWHAy.js","assets/2024-07-11-Managing JWT With Auth0 java jwt.html-XUPMMa4g.js","assets/2024-07-11-MongoDB vs. Couchbase.html-DCmfQCz9.js","assets/2024-07-11-REST vs. GraphQL vs. gRPC   Which API to Choose .html-B4g7bwGn.js","assets/2024-07-11-Rate Limiting With Client IP in Spring Cloud Gateway.html-GLQfQW6f.js","assets/2024-07-11-Reading and Writing With a ConcurrentHashMap.html-DoHtT3TA.js","assets/2024-07-11-Reinitialize Singleton Bean in Spring Context.html-0_cu-qcf.js","assets/2024-07-11-Reversing a Stack in Java.html-DX30q-bd.js","assets/2024-07-11-Running Multiple Thread Groups in JMeter.html-C7yenpYN.js","assets/2024-07-11-Running Spring Boot Applications with the Embedded Camunda Engine.html-DhTx0che.js","assets/2024-07-11-RxJava Single.just   vs Single.fromCallable  .html-Cfh-LFib.js","assets/2024-07-11-Set the Date Format Using Apache POI.html-BD1JOSXI.js","assets/2024-07-11-Sorting a HashSet in Java.html-D8o_2e-5.js","assets/2024-07-11-Spring Boot FeignClient vs. WebClient.html-CRlGbtao.js","assets/2024-07-11-Stream Large Byte   to File With WebClient.html-Dlg40I5S.js","assets/2024-07-11-String Interpolation in Java.html-D9twcTP2.js","assets/2024-07-11-The Implicit Name Of the Single Parameter in Lambda Expressions  it.html-VeaEHQ2-.js","assets/2024-07-11-Using Firebase Cloud Messaging in Spring Boot Applications.html-DqL6cByn.js","assets/2024-07-11-Using Watermarks with iText in Java.html-BZRrzrBp.js","assets/2024-07-11-When to Use Callable and Supplier in Java.html-D63dMQ-u.js","assets/2024-07-12-Access HTTPS REST Service Using Spring RestTemplate.html-BcWKCXx9.js","assets/2024-07-12-BuildScripts Blocks in Gradle.html-BLuFE3YU.js","assets/2024-07-12-Can a Java Application Use More Memory Than the Heap Size .html-CLp5DaV-.js","assets/2024-07-12-Check if a Number Is Prime in Kotlin.html-D-t2IcDZ.js","assets/2024-07-12-Convert Between LocalDateTime and ZonedDateTime.html-CIq40Q0w.js","assets/2024-07-12-Convert String to Instant.html-DXpdxIAT.js","assets/2024-07-12-Convert java.util.Date to java.sql.Date.html-CqJb0GvU.js","assets/2024-07-12-Determine Operating System in Kotlin.html-C2jMcD_B.js","assets/2024-07-12-Enable and Disable Endpoints at Runtime With Spring Boot.html-BkBXk_DW.js","assets/2024-07-12-Expression Types in Thymeleaf.html-BsHxsgNR.js","assets/2024-07-12-Filling a List With All Enum Values in Java.html-DQLi7gqF.js","assets/2024-07-12-Find the First Non Repeating Character in a String in Java.html-C9BsYNy6.js","assets/2024-07-12-Finding Max Date in List Using Streams.html-D-aO0aIt.js","assets/2024-07-12-Fixing Selenium WebDriver Executable Path Error.html-Don26ck3.js","assets/2024-07-12-Generate Unique ObjectId in MongoDB.html-Jwfgb79A.js","assets/2024-07-12-Get Information About a PDF in Java.html-Dh9_FpYU.js","assets/2024-07-12-Guide to Filters in MongoDB.html-BpLBVQXQ.js","assets/2024-07-12-How to Insert a HashMap Into MongoDB With Java .html-BRSacHEO.js","assets/2024-07-12-Inserting an Object in an ArrayList at a Specific Position.html-BhPUHcNf.js","assets/2024-07-12-JUnit   Testing Methods That Call System.exit  .html-CEYIQz7l.js","assets/2024-07-12-Jackson s Deserialization With Lombok.html-j6buRxYa.js","assets/2024-07-12-Java Course Team Lead with Spring Experience  Remote   Part Time   not open .html-wIUNMRAt.js","assets/2024-07-12-Kafka s Shift from ZooKeeper to Kraft.html-BzaMjVu9.js","assets/2024-07-12-Kong Ingress Controller with Spring Boot.html-CrSNBfKM.js","assets/2024-07-12-Object Validation After Deserialization.html-BXsis6Up.js","assets/2024-07-12-Overriding the Values of Remote Properties in Spring Cloud Config.html-BpSUZ2_t.js","assets/2024-07-12-Persisting the Query Model.html-BQtz5hYZ.js","assets/2024-07-12-Retain Only Digits and Decimal Separator in String.html-ILx0M1lO.js","assets/2024-07-12-Slicing Arrays in Java.html-DjMX5fHN.js","assets/2024-07-12-Sort Collection of Objects by Multiple Fields in Java.html-Bdh7VuMP.js","assets/2024-07-12-Spring  EnableMethodSecurity Annotation.html-BRDmgV1i.js","assets/2024-07-12-SpringRunner vs MockitoJUnitRunner.html-DMY4LdAM.js","assets/2024-07-12-Strong  Weak  Soft  and Phantom References in Java.html-BRv4TMrr.js","assets/2024-07-12-The Factory Design Pattern in Java.html-KPi-rQ4m.js","assets/2024-07-12-The Visitor Pattern in Kotlin.html-B4ZjML6H.js","assets/2024-07-12-Thread vs. Single Thread Executor Service.html-Bdzbe4-s.js","assets/2024-07-12-Uses for Optional in Java.html-CPJh1nZA.js","assets/2024-07-12-Working with Tabular Data Using Tablesaw.html-DXRjMtLT.js","assets/2024-07-13-Capitalize the First Letter of a String in Java.html-B2PNA7uI.js","assets/2024-07-13-Channels and Connections in RabbitMQ.html-CWByz16-.js","assets/2024-07-13-Comparison Between Mono s doOnNext   and doOnSuccess  .html-Bb1gs5HD.js","assets/2024-07-13-Convert String to String Array.html-DkLXXVCS.js","assets/2024-07-13-Convert String to char in Java.html-CP4Mmqxa.js","assets/2024-07-13-Counting Occurrences of a Value in a List in Kotlin.html-DvqUJ78B.js","assets/2024-07-13-Coupling in Java.html-kBN7OplT.js","assets/2024-07-13-Creating a Map from Two Arrays in Kotlin.html-tqhxscfN.js","assets/2024-07-13-Dealing with  java.lang.OutOfMemoryError  PermGen space  Error.html-Wtwp8Req.js","assets/2024-07-13-Difference Between Flux and Mono.html-_UwBEp3B.js","assets/2024-07-13-Difference Between Java Enumeration and Iterator.html-DbLzwFeh.js","assets/2024-07-13-Difference Between Map and MultivaluedMap in Java.html-C1Sv9ef1.js","assets/2024-07-13-Difference Between URI.create   and new URI  .html-DpMdm3kJ.js","assets/2024-07-13-Difference Between Value and Emit in MutableStateFlow Kotlin.html-D1GhO4jE.js","assets/2024-07-13-Editing Existing PDF Files in Java.html-BAQrPvTP.js","assets/2024-07-13-Fixing the  java  integer number too large  Error.html-wN26F-rE.js","assets/2024-07-13-Gravity Bead Sort in Java.html-CqgCxKuz.js","assets/2024-07-13-Guide to Resilience4j With Spring Boot.html-BkMx1fd-.js","assets/2024-07-13-Guide to Simple Binary Encoding.html-Bbhy6o46.js","assets/2024-07-13-How to Access the First Element of a Flux.html-C2c_NDCa.js","assets/2024-07-13-How to Log to the Console in Color.html-CS3piFw1.js","assets/2024-07-13-How to Resolve Spring Webflux DataBufferLimitException.html-bZXDutb_.js","assets/2024-07-13-Implementing Factory Pattern With Generics in Java.html-_A2OZ-pw.js","assets/2024-07-13-Infinity in Java.html-BTre1EE1.js","assets/2024-07-13-Java Literals.html-GWaBtT1P.js","assets/2024-07-13-Kotlin Spring Developer to help with brainstorming topics for a site  Remote   Part Time .html-CdMLhyJT.js","assets/2024-07-13-Limiting the Requests per Second With WebClient.html-UA1vcFb4.js","assets/2024-07-13-Log Properties in a Spring Boot Application.html-BvSQuHL6.js","assets/2024-07-13-Message Delivery Semantics in Streaming Platforms.html-Dc61jkub.js","assets/2024-07-13-Mocking Java InputStream Object.html-DOsCIPaY.js","assets/2024-07-13-Patterns for Iterating Over Large Result Sets With Spring Data JPA.html-BeOcaav7.js","assets/2024-07-13-Port Scanning With Java.html-Dk1uIFPG.js","assets/2024-07-13-Redis Sentinel vs Clustering.html-DXBSAagD.js","assets/2024-07-13-Send Array as Part of x www form urlencoded Using Postman.html-BeEMA1iw.js","assets/2024-07-13-Setting Time To Live Value for Caching.html-CrzCmpVm.js","assets/2024-07-13-TLS Setup in MySQL and Spring Boot Application.html-C1zdoDlF.js","assets/2024-07-13-Understanding java.lang.Thread.State  WAITING  parking .html-DhUghQ8Q.js","assets/2024-07-13-Uploading a File and JSON Data in Postman.html-BEQTkbbD.js","assets/2024-07-13-Using Groovy in Spring.html-D0RwRbmS.js","assets/2024-07-13-Using Streams to Collect Into a TreeSet.html-BlZ_klqq.js","assets/2024-07-13-Validating URL in Java.html-BQaSBNPf.js","assets/2024-07-13-Variable Instantiation on Declaration vs. on Constructor in Java.html-B63chBRu.js","assets/2024-07-13-assertAll   vs Multiple Assertions in JUnit5.html-iL1WE1in.js","assets/2024-07-14-A Guide to Variables in Postman.html-DyJhd6zY.js","assets/2024-07-14-Constructing a Relative Path From Two Absolute Paths in Java.html-BchzIGEC.js","assets/2024-07-14-Convert a List to a Comma Separated String.html-BcIWIT2-.js","assets/2024-07-14-Convert between JSON and Protobuf.html-C9n9vH8M.js","assets/2024-07-14-Create Date From Unix Timestamp in Java.html-DtQVRU2l.js","assets/2024-07-14-Create a BMI Calculator in Java.html-DuJyE8Yk.js","assets/2024-07-14-Creating Random Numbers With No Duplicates in Java.html-ysMPQUtm.js","assets/2024-07-14-Difference Between Class.getResource   and ClassLoader.getResource  .html-BmC4qOqF.js","assets/2024-07-14-Differences Between Paths.get and Path.of.html-IWNWayss.js","assets/2024-07-14-Dispatching Queries in Axon Framework.html-DuLhsT7v.js","assets/2024-07-14-Generate the MD5 Checksum for a File in Java.html-Dc3-v8St.js","assets/2024-07-14-Getting Binary Representation of Int in Kotlin.html-ka6gps4b.js","assets/2024-07-14-Getting the Filename From a String Containing an Absolute File Path.html-Br9I-M96.js","assets/2024-07-14-Guide to Classgraph Library.html-DzU1FAqw.js","assets/2024-07-14-Guide to Find the Java .class Version.html-BSPVXLYX.js","assets/2024-07-14-Guide to the Storage Engine in Apache Cassandra.html-XaNctJMB.js","assets/2024-07-14-Handle Classes With the Same Name in Java.html-DOGkfbhJ.js","assets/2024-07-14-Insert Array Inside an Object in MongoDB.html-BIXvmG48.js","assets/2024-07-14-Java Program to Find the Roots of a Quadratic Equation.html-BFPMy5JA.js","assets/2024-07-14-Java Scanner Taking a Character Input.html-BfQHS6K5.js","assets/2024-07-14-Set vs List in Java.html-BpShSorX.js","assets/2024-07-14-Static Fields and Garbage Collection.html-CDr-ylfP.js","assets/2024-07-14-String Concatenation in Java.html-DqU3E4uF.js","assets/2024-07-14-The Proxy Pattern in Kotlin.html-qX64VO7N.js","assets/2024-07-14-TriFunction Interface in Java.html-D_s5imtP.js","assets/2024-07-14-Using HAProxy as an API Gateway for Routing and Rate Limiting.html-BFbXT5zi.js","assets/2024-07-14-What Is the null Type in Java .html-BePrVvmB.js","assets/2024-07-14-Writing a List of Strings Into a Text File.html-BsIw35gE.js","assets/2024-07-15-Algorithm to Identify and Validate a Credit Card Number.html-DaC8U39h.js","assets/2024-07-15-Apache Camel Conditional Routing.html-BwiVBhxX.js","assets/2024-07-15-Armstrong Numbers in Java.html-CUtCQ_CL.js","assets/2024-07-15-Check if a Number Is Positive or Negative in Java.html-zuH8rYOD.js","assets/2024-07-15-Compare Characters in Java.html-CQKjLgah.js","assets/2024-07-15-Connect to Multiple Databases Using Spring Data MongoDB.html-DZJoe3Ji.js","assets/2024-07-15-Debugging an Application Running in Docker With IntelliJ IDEA.html-CShxxbwH.js","assets/2024-07-15-Define an Array of Varying Types in OpenAPI.html-CoHg4H6L.js","assets/2024-07-15-Difference Between Arrays.asList   and List.of  .html-Dt_IxHYj.js","assets/2024-07-15-Feign Client Exception Handling.html-D_thJc-P.js","assets/2024-07-15-How to Fix Git  Refusing to Merge Unrelated Histories .html-CMurSZP9.js","assets/2024-07-15-How to Parse an INI File in Java.html-kUZmJV_A.js","assets/2024-07-15-List All Factors of a Number in Java.html-Bchz7woR.js","assets/2024-07-15-Make Division of Two Integers Result in a Float.html-CBH-mDJ5.js","assets/2024-07-15-Multitenancy With Spring Data JPA.html-LkWAjMxH.js","assets/2024-07-15-PKCE Support for Secret Clients with Spring Security.html-CbG_dQiT.js","assets/2024-07-15-Reading JSON From a URL in Java.html-BuJKv48d.js","assets/2024-07-15-Remove the Last Character of a Java StringBuilder.html-CTWp4AYS.js","assets/2024-07-15-Spring JDBC Batch Inserts.html-D5yDf2mx.js","assets/2024-07-15-Swagger  Specify Two Responses with the Same Response Code.html-BgarDDuj.js","assets/2024-07-15-Toggle a Boolean Variable in Java.html-DSLe6wcq.js","assets/2024-07-15-What Is  Locked Ownable Synchronizers  in Thread Dump .html-DM3uAYOA.js","assets/2024-07-16- Operation vs  ApiResponse in Swagger.html-_nKujwo6.js","assets/2024-07-16-A Guide to Java Source and Target Options.html-CH2iY2Mp.js","assets/2024-07-16-Apply Default Global SecurityScheme in springdoc openapi.html-DDCb5_JP.js","assets/2024-07-16-Arrays.asList   vs Collections.singletonList  .html-BTJCUR9f.js","assets/2024-07-16-Check if a Number Can Be Expressed as Sum of Two Prime Numbers in Kotlin.html-BpSaUTlM.js","assets/2024-07-16-Convert File to Byte Array in Kotlin.html-DD9npjr2.js","assets/2024-07-16-Display Logged in User s Information in Thymeleaf.html-BmgcOBKs.js","assets/2024-07-16-Dockerizing a Java Application.html-B8VGEvEk.js","assets/2024-07-16-Filter Java Stream to 1 and Only 1 Element.html-CT0SwKuw.js","assets/2024-07-16-Get the Current Stack Trace in Java.html-CHr2PXO4.js","assets/2024-07-16-Get the Number of Messages in an Apache Kafka Topic.html-qoP93vKX.js","assets/2024-07-16-How To Find Maven Dependencies.html-CoctX_RU.js","assets/2024-07-16-How to Check Whether an Integer Exists in a Range with Java.html-CyFPEjQk.js","assets/2024-07-16-How to Configure Conditional Dependencies in Gradle.html-CwrbS7La.js","assets/2024-07-16-Implementing a Map with Multiple Keys in Java.html-rkK4YSyj.js","assets/2024-07-16-Import Swagger APIs into Postman.html-BSxBCIHd.js","assets/2024-07-16-Integer.toString   vs String.valueOf   in Java.html-BvTwKsDC.js","assets/2024-07-16-Java 8 Streams  Multiple Filters vs. Complex Condition.html-DI42HsNC.js","assets/2024-07-16-Log4j2   Logging to Both File and Console.html-BqHCEQEP.js","assets/2024-07-16-Maven Snapshot Repository vs Release Repository.html-B0xL4mUx.js","assets/2024-07-16-Named Placeholders in String Formatting.html-CvwYgNar.js","assets/2024-07-16-Permutations of a String in Java.html-BJn5eEjQ.js","assets/2024-07-16-Reading Flux Into a Single InputStream Using Spring Reactive WebClient.html-D0tm2KDH.js","assets/2024-07-16-Remove Whitespace From a String in Java.html-D4M9SwWD.js","assets/2024-07-16-Replace Element at a Specific Index in a Java ArrayList.html-B0uNZABe.js","assets/2024-07-16-Scanning Java Annotations at Runtime.html-CNeJ2TjK.js","assets/2024-07-16-Sending SOAP Request via Postman.html-BwoSVn2e.js","assets/2024-07-16-Skip Null Values When Converting a List to a Map in Kotlin.html-Dx1xCsB_.js","assets/2024-07-16-Spring Boot 3 and Spring Framework 6.0   What s New.html-BErxDY1T.js","assets/2024-07-16-Spring Data MongoDB   Configure Connection.html-CB_kGLOj.js","assets/2024-07-16-Spring Security  Upgrading the Deprecated WebSecurityConfigurerAdapter.html-yXNswgzB.js","assets/2024-07-16-Static vs. Instance Initializer Block in Java.html-7OSM7tcW.js","assets/2024-07-16-Testing Spring JMS.html-C4CrrJP5.js","assets/2024-07-16-Upload Image With Spring Boot and Thymeleaf.html-DNah-fq6.js","assets/2024-07-16-Using Environment Variables in Spring Boot s Properties Files.html-sDfiRd11.js","assets/2024-07-16-Volatile vs. Atomic Variables in Java.html-B-glIDsH.js","assets/2024-07-17-A Guide to Maven Encoding.html-DBIGrnDo.js","assets/2024-07-17-Advantages and Disadvantages of Using Java Wildcard Imports.html-WDkDV553.js","assets/2024-07-17-Check if a Number Is Odd or Even in Java.html-DhWoO07B.js","assets/2024-07-17-Check if at Least Two Out of Three Booleans Are True in Java.html-BrGqP4HH.js","assets/2024-07-17-Clearing a StringBuilder or StringBuffer.html-D7xTcB9E.js","assets/2024-07-17-Convert String Array to Int Array in Kotlin.html-B5SM3g_B.js","assets/2024-07-17-Count Documents Using Spring Data MongoDB Repository.html-BXr7HUT6.js","assets/2024-07-17-Creating JAR Files Programmatically.html-DWdi0HZ9.js","assets/2024-07-17-Delete Files and Subdirectories in a Directory in Kotlin.html-CaOJ0gub.js","assets/2024-07-17-Difference Between Flux.create and Flux.generate.html-BlxrJ9Ml.js","assets/2024-07-17-Difference Between Java SE EE ME.html-DfoX3-mD.js","assets/2024-07-17-Difference Between collect   and collectLatest   in Kotlin Flows.html-Bp6OcVxT.js","assets/2024-07-17-Difference Between form data  x www form urlencoded and raw in Postman.html-C0b8KqJF.js","assets/2024-07-17-Get the Full Path of a JAR File From a Class.html-D2o_MOUU.js","assets/2024-07-17-Guide to Creating Jar Executables and Windows Executables from Java.html-DNokS8To.js","assets/2024-07-17-Guide to Find in MongoDB.html-DrxArTFO.js","assets/2024-07-17-Handle Spring Security Exceptions With  ExceptionHandler.html-62D8_jT1.js","assets/2024-07-17-Hibernate s  Detached Entity Passed to Persist  Error.html-jWaUVc7n.js","assets/2024-07-17-How to Calculate  Time Ago  in Java.html-CYIPMZbm.js","assets/2024-07-17-How to Convert InputStream to Base64 String.html-pVX-Dm-w.js","assets/2024-07-17-How to Split a Stream into Multiple Streams.html-B0qI4QN4.js","assets/2024-07-17-How to Truncate a String in Java.html-DLAJB-nD.js","assets/2024-07-17-Instantiating Multiple Beans of the Same Class with Spring Annotations.html-WOMwm08s.js","assets/2024-07-17-Introduction to Lightrun with Java.html-DhPIU7Uw.js","assets/2024-07-17-Is There a Destructor in Java .html-C8F8NmoA.js","assets/2024-07-17-Java 14 Record vs. Lombok.html-BlmZv200.js","assets/2024-07-17-JavaScript Function Call with Thymeleaf.html-DIoG2KA-.js","assets/2024-07-17-Kotlin Equivalent of Java s equalsIgnoreCase  .html-B8tVhDDi.js","assets/2024-07-17-Processing the Response Body in Spring Cloud Gateway.html-ChS1Xv2t.js","assets/2024-07-17-Query Documents using Document ID in MongoDB.html-ZgAmNMz-.js","assets/2024-07-17-Spring Boot   Keycloak Integration Testing with Testcontainers.html-C1-EXtnR.js","assets/2024-07-17-Spring Boot   Testing Redis With Testcontainers.html-C2LNle4x.js","assets/2024-07-17-Spring Data JPA   Run an App Without a Database.html-sUB7cud9.js","assets/2024-07-17-Spring Data Rest   Serializing the Entity ID.html-BPj3gRtK.js","assets/2024-07-17-UUID as Entity ID in MongoDB.html-DgHzwrE-.js","assets/2024-07-17-Unique Field in MongoDB Document in Spring Data.html-DJJdxzuy.js","assets/2024-07-17-Unit Test Private Methods in Java.html-BicDaWzF.js","assets/2024-07-17-Use Cases for Static Methods in Java.html-iSve7gyV.js","assets/2024-07-17-Using Dates in CRUD Operations in MongoDB.html-Ho__do76.js","assets/2024-07-17-Validate an XML File Against an XSD File.html-BmAG0OmS.js","assets/2024-07-17-What Are the Spring Boot Default Memory Settings .html-Dj2ALzU3.js","assets/2024-07-18- RequestMapping Value in Properties File.html-BKvWW8Cd.js","assets/2024-07-18-Adding Parameters to Java HttpClient Requests.html-CjFLcceL.js","assets/2024-07-18-Apache ActiveMQ vs. Kafka.html-DOO8Azbo.js","assets/2024-07-18-Building Native Images With Spring Native and Liberica Tools With a Speed Comparison.html-Cpmw7Dgw.js","assets/2024-07-18-Calling Private Methods of a Class From Outside the Class.html-CC5xUhR9.js","assets/2024-07-18-Check if BigDecimal Value Is Zero.html-Dr8zhmB3.js","assets/2024-07-18-Check if a Character Is a Vowel in Java.html-CywFicgL.js","assets/2024-07-18-Configure JWT Authentication for OpenAPI.html-Ge4j3mH0.js","assets/2024-07-18-Configure MongoDB Collection Name for a Class in Spring Data.html-CqnUrHR1.js","assets/2024-07-18-Constraint Composition with Bean Validation.html-CGWTUkFH.js","assets/2024-07-18-Converting a JDBC ResultSet to JSON in Java.html-JK28UtfU.js","assets/2024-07-18-Custom HTTP Header With the Java HttpClient.html-BddqHkvl.js","assets/2024-07-18-Difference Between Thread s Context Class Loader and Normal Class Loader.html-bXX2R34n.js","assets/2024-07-18-Disabling Keycloak Security in Spring Boot.html-CcOJc9hu.js","assets/2024-07-18-Expose GraphQL Field with Different Name.html-D2vfqtUA.js","assets/2024-07-18-Find Files That Match Wildcard Strings in Java.html-CR2HPijx.js","assets/2024-07-18-Get Domain Name From Given URL in Java.html-DM6BvMPd.js","assets/2024-07-18-Get Keycloak User ID in Spring.html-CdbF0d-M.js","assets/2024-07-18-How to Change a Value in a Mutable List in Kotlin.html-BzJqkljz.js","assets/2024-07-18-How to Mock HttpServletRequest.html-WMpz9_7D.js","assets/2024-07-18-How to Play Sound With Java.html-CROvrG9i.js","assets/2024-07-18-Introduction to Spring Cloud Sidecar.html-6UY_Hhjr.js","assets/2024-07-18-Java  int char Cannot Be Dereferenced  Error.html-BKzlL4T7.js","assets/2024-07-18-Java HttpClient Timeout.html-RMJHJibc.js","assets/2024-07-18-Java Scanner useDelimiter with Examples.html-2QIW0yZc.js","assets/2024-07-18-Joining Tables With Spring Data JPA Specifications.html-DfUDku7t.js","assets/2024-07-18-Posting with Java HttpClient.html-D90NocmA.js","assets/2024-07-18-Printing All Elements of a String Array in a Single Line in Kotlin.html-B1mD-okI.js","assets/2024-07-18-Reverse a Number in Java.html-Tj_4-EJe.js","assets/2024-07-18-Sending CSRF Token From Postman REST Client.html-DZZW6ZyL.js","assets/2024-07-18-Setting Request Headers Using Feign.html-Dj_UPGwV.js","assets/2024-07-18-Sorting Objects in a List by Date.html-mtCq5Xjp.js","assets/2024-07-18-Spring Web Service Integration Tests with  WebServiceServerTest.html-DS-yRmly.js","assets/2024-07-18-Starting Spring Boot Application in Docker With Profile.html-xdbqPGgN.js","assets/2024-07-18-Tomcat Warning  To Prevent a Memory Leak  the JDBC Driver Has Been Forcibly Unregistered .html-BpgQmtt2.js","assets/2024-07-18-Using Enums With when   in Kotlin.html-BE3Z_K6E.js","assets/2024-07-18-Using Transactions for Read Only Operations.html-DVz_-tWD.js","assets/2024-07-18-What Is the JDK com.sun.proxy. Proxy Class .html-Bcn4HVRn.js","assets/2024-07-19-Add Header to Every Request in Postman.html-B8S7r4nR.js","assets/2024-07-19-Check Whether a String Is Valid JSON in Java.html-BNH2ccfQ.js","assets/2024-07-19-Checking Connection to MongoDB.html-cKXRU9sz.js","assets/2024-07-19-Compile Multiple Java Source Files Using the Command Line.html-yNTnGgAd.js","assets/2024-07-19-Convert Between boolean and int in Java.html-DycsrRBK.js","assets/2024-07-19-Create a Function That Works for All Enum Classes in Kotlin.html-D7OZt4ui.js","assets/2024-07-19-Creating a Java Array from Regular Expression Matches.html-By7G2e5T.js","assets/2024-07-19-Deduction Based Polymorphism in Jackson 2.12.html-CrAXRI0T.js","assets/2024-07-19-Difference Between    and equals   in Java.html-DE-2kAlR.js","assets/2024-07-19-Differences Between Iterator and Iterable and How to Use Them .html-DjS39-I8.js","assets/2024-07-19-Differences Between set   and lazySet   in Java Atomic Variables.html-Cbsyyds_.js","assets/2024-07-19-Distinct Queries in HQL.html-Dhebgdt1.js","assets/2024-07-19-Error Handling in GraphQL With Spring Boot.html-DI7VswAK.js","assets/2024-07-19-Exception Handling With Jersey.html-CG1c7bgH.js","assets/2024-07-19-Finding All Beans with a Custom Annotation.html-BZuVIxOr.js","assets/2024-07-19-Generate a Random Value From an Enum.html-U3mH-glX.js","assets/2024-07-19-Get the ASCII Value of a Character in Java.html-NVvEMFjD.js","assets/2024-07-19-Get the IP Address of the Current Machine Using Java.html-CU9GfeiD.js","assets/2024-07-19-Gradle Build Cache Basics.html-C6aYUltk.js","assets/2024-07-19-Handle Spring Security Exceptions.html-MJjVl85c.js","assets/2024-07-19-Hibernate s  Not Null Property References a Null or Transient Value  Error.html-B30--OK8.js","assets/2024-07-19-Hide a Request Field in Swagger API.html-az2K5uOv.js","assets/2024-07-19-How to Disable a Maven Plugin Defined in a Parent POM.html-DL4uy663.js","assets/2024-07-19-How to Initialize a List of Lists in Kotlin.html-DZgqhPS5.js","assets/2024-07-19-How to Remove Null and Empty Values from a List in Kotlin.html-0YOe-TPm.js","assets/2024-07-19-Illegal Character Compilation Error.html-BfiiOMaY.js","assets/2024-07-19-Implements vs. Extends in Java.html-DeSM6JAO.js","assets/2024-07-19-JPA and Hibernate   Criteria vs. JPQL vs. HQL Query.html-DcXrUutI.js","assets/2024-07-19-Java 9 Illegal Reflective Access Warning.html-Y1DDhlcu.js","assets/2024-07-19-Java HttpClient Basic Authentication.html-D4K3NKnf.js","assets/2024-07-19-Java HttpClient With SSL.html-CPRh2nar.js","assets/2024-07-19-Java Scanner.skip Method with Examples.html-D4h-vDmV.js","assets/2024-07-19-Liquibase vs Flyway.html-DWMix1Yl.js","assets/2024-07-19-List vs. ArrayList in Java.html-i0mFfzGB.js","assets/2024-07-19-Return Map from GraphQL.html-BVxQvot9.js","assets/2024-07-19-Serialize a Lambda in Java.html-Oe5HIWdU.js","assets/2024-07-19-Single Sign On Solutions for Java Applications.html-DS6FR5id.js","assets/2024-07-19-Spark DataFrame.html-DL2QAv69.js","assets/2024-07-19-Spring Cloud   Disable Discovery Clients with Profiles.html-B8tQVTAN.js","assets/2024-07-19-Spring Security Authorization with OPA.html-DtwgC96Y.js","assets/2024-07-19-Swap Two Variables in Java.html-MtxFopbM.js","assets/2024-07-20-Acquire a Lock by a Key in Java.html-Dry-EEWt.js","assets/2024-07-20-Add Prefix to All Spring Boot Controllers.html-CBc1YSv0.js","assets/2024-07-20-Apache Camel Routes Testing in Spring Boot.html-BcT4qEr8.js","assets/2024-07-20-Authentication With Spring Security and MongoDB.html-B5FLjBuI.js","assets/2024-07-20-Automorphic Numbers in Java.html-Ds9ZcXdY.js","assets/2024-07-20-Basic Authentication in JMeter.html-Owber4ka.js","assets/2024-07-20-BootstrapMode for JPA Repositories.html-B-Nz8Ibc.js","assets/2024-07-20-Bulk Update of Documents in MongoDB.html-B7fLfOBY.js","assets/2024-07-20-Case Insensitive Sorting in MongoDB.html-DEE9qPlv.js","assets/2024-07-20-Common Command Line Compile Errors in Java.html-BqRI6CUT.js","assets/2024-07-20-Compile All Java Classes in Directory Structure with javac.html-B4PxrgUo.js","assets/2024-07-20-Convert Byte Size Into a Human Readable Format in Java.html-B49w2gAk.js","assets/2024-07-20-Convert long to int Type in Java.html-uFVxremA.js","assets/2024-07-20-Creating a Web Application With Ktor and Thymeleaf.html-BWnn2DIz.js","assets/2024-07-20-Difference Between POJO  JavaBeans  DTO and VO.html-Do9hIuM8.js","assets/2024-07-20-Format Instant to String in Java.html-Bw9Yboay.js","assets/2024-07-20-Get the Number of Rows in a ResultSet.html-B0J-Cxee.js","assets/2024-07-20-Getting Started With GraphQL SPQR and Spring Boot.html-DPkJzOpo.js","assets/2024-07-20-Guide to Upsert in MongoDB.html-B-FqiKrn.js","assets/2024-07-20-How Does the Spring Singleton Bean Serve Concurrent Requests .html-BYeMtsJ0.js","assets/2024-07-20-Import Data to MongoDB From JSON File Using Java.html-zXX2wTw0.js","assets/2024-07-20-Introduction to Jakarta EE MVC   Eclipse Krazo.html-2UAH-3sb.js","assets/2024-07-20-Iterate Through a List and Add Items in Kotlin.html-Cn0rSy7T.js","assets/2024-07-20-Java Error  bad operand types for binary operator .html-Cz1BYl3e.js","assets/2024-07-20-Java Error  variable might not have been initialized .html-B_j9dG6A.js","assets/2024-07-20-Java Operators.html-DTyryjJ1.js","assets/2024-07-20-Logging MongoDB Queries with Spring Boot.html-_bo7RtBR.js","assets/2024-07-20-Pretty Print XML in Java.html-BDkQN0sc.js","assets/2024-07-20-Push Operations in MongoDB.html-CUsFo8WD.js","assets/2024-07-20-Push and Set Operations in Same MongoDB Update.html-q3BB8fBD.js","assets/2024-07-20-Read User Input Until a Condition Is Met.html-D2Pg-GqH.js","assets/2024-07-20-Retrieve a Value from MongoDB by Its Key Name.html-D8ITnoj0.js","assets/2024-07-20-SSO with Apache Tomcat.html-DdVSuA3k.js","assets/2024-07-20-Send a SOAP Object with Feign Client.html-C1p0Eafv.js","assets/2024-07-20-Set List of Objects in Swagger API Response.html-DX88t5qX.js","assets/2024-07-20-Sorting a String Alphabetically in Kotlin.html-BASYg8aF.js","assets/2024-07-20-Subtract Days from a Date in Java.html-BcwAVJjB.js","assets/2024-07-20-The for each Loop in Java.html-CGTaCt_n.js","assets/2024-07-20-Underscore Operator for Type Arguments in Kotlin.html-6sFaOLsW.js","assets/2024-07-20-Using Nginx as a Forward Proxy.html-cTskm6dG.js","assets/2024-07-21-Building a Web App Using Fauna and Spring for Your First Web Agency Client.html-D5t6yr3X.js","assets/2024-07-21-Check Collection Existence in MongoDB.html-D5t2ZGSP.js","assets/2024-07-21-Check if a User Is Logged in With Servlets and JSP.html-Dua8_GKk.js","assets/2024-07-21-Configure and Use Multiple DataSources in Spring Boot.html-Cson38NU.js","assets/2024-07-21-Connecting to a NoSQL Database with Spring Boot.html-C0dYAGSU.js","assets/2024-07-21-Convert Between Byte Array and UUID in Java.html-BM3OoycD.js","assets/2024-07-21-Create a Simple  Rock Paper Scissors  Game in Java.html-CX7agiUQ.js","assets/2024-07-21-Create an Empty Map in Java.html-C5AU6jkU.js","assets/2024-07-21-Customizing Zuul Exceptions.html-BlW5FW1t.js","assets/2024-07-21-Difference Between Map and HashMap in Java.html-BX81uZmR.js","assets/2024-07-21-Document Enum in Swagger.html-dGYGL9Gp.js","assets/2024-07-21-Does GC Release Back Memory to OS .html-R2jGfC8N.js","assets/2024-07-21-Enable Logging for Spring Security.html-C0piAHnr.js","assets/2024-07-21-Error   trustAnchors parameter must be non empty .html-B3KhbED2.js","assets/2024-07-21-Gradle  sourceCompatiblity vs targetCompatibility.html-D5xshUlt.js","assets/2024-07-21-Guide to ByteBuffer.html-Dn906YkE.js","assets/2024-07-21-Hibernate s addScalar   Method.html-CCrXcbn2.js","assets/2024-07-21-How to Calculate Standard Deviation in Kotlin.html-J5L6BUFj.js","assets/2024-07-21-How to Create a New Entry in a Map.html-B_hB7O_1.js","assets/2024-07-21-How to Invert a Map in Java.html-CdVooMPK.js","assets/2024-07-21-How to use JNI s RegisterNatives   method .html-s4CfiLqJ.js","assets/2024-07-21-HttpMessageNotWritableException  No Converter for  class    With Preset Content Type.html-DiFTYWTM.js","assets/2024-07-21-Introduction to OAuth2RestTemplate.html-DZCnFWu0.js","assets/2024-07-21-JDBC Connection Status.html-BKUDnMu8.js","assets/2024-07-21-Java ArrayIndexOutOfBoundsException.html-DWvh5dYf.js","assets/2024-07-21-Java Missing Return Statement.html-DCm4KM9C.js","assets/2024-07-21-Looking for a Java Developer with Spring Experience  Remote   Part Time   not open .html-BTz3Krul.js","assets/2024-07-21-Make a Call to a GraphQL Service from a Java Application.html-DIrEocH4.js","assets/2024-07-21-Mediator Pattern in Kotlin.html-CXY856Zb.js","assets/2024-07-21-Producer Consumer Problem With Example in Java.html-C59sKu9R.js","assets/2024-07-21-Provide an OAuth2 Token to a Feign Client.html-3V-np7e5.js","assets/2024-07-21-Retrieve Original Message From Feign ErrorDecoder.html-Cxot6K1t.js","assets/2024-07-21-Secondary Indexes in Cassandra.html-CtPzUtqj.js","assets/2024-07-21-Spring  Autowired Field Null   Common Causes and Solutions.html-D6i1yhxe.js","assets/2024-07-21-Spring Security   Configuring Different URLs.html-78JTHoQd.js","assets/2024-07-21-URL Rewriting With Spring Cloud Gateway.html-BCj6a8Os.js","assets/2024-07-21-Update Documents in MongoDB.html-CdwT9qQ8.js","assets/2024-07-21-Update Multiple Fields in a MongoDB Document.html-Cs4XGmzz.js","assets/2024-07-21-What Is an Apache Maven Artifact .html-D_9nH7Yn.js","assets/2024-07-22-A Brief History of the Java Programming Language.html-BRKv8XA2.js","assets/2024-07-22-Adding EventHandler to JavaFX Button.html-baE7k19E.js","assets/2024-07-22-An Introduction to Domain Graph Service  DGS  Framework.html-BjHiHPmF.js","assets/2024-07-22-An Introduction to InstantSource in Java 17.html-B0YmpJfe.js","assets/2024-07-22-Cassandra Batch in Cassandra Query Language and Java.html-BZTyoclH.js","assets/2024-07-22-Cassandra Query Cheat Sheet.html-B-FO_1On.js","assets/2024-07-22-Check if a String Ends with a Certain Pattern in Java.html-CnDrpckS.js","assets/2024-07-22-Comparing wait    sleep    and delay   in Kotlin.html-BMKwJJ79.js","assets/2024-07-22-Computing an X509 Certificate s Thumbprint in Java.html-DKKqI9v5.js","assets/2024-07-22-Constructor Specification in Java.html-MLmLVvIp.js","assets/2024-07-22-Data Objects in Kotlin.html-D4TlwX_9.js","assets/2024-07-22-Failed to Load ApplicationContext for JUnit Test of Spring Controller.html-sr_smSgM.js","assets/2024-07-22-Find All Jars Containing Given Class.html-DgFWGUsU.js","assets/2024-07-22-Generating a Java String of N Repeated Characters.html-CMyDJ5iQ.js","assets/2024-07-22-Generating a Secure AES Key in Java.html-S2ODuLS4.js","assets/2024-07-22-Get Current Trace ID in Spring Cloud Sleuth.html-BSZugGJP.js","assets/2024-07-22-Get Last Inserted Document ID in MongoDB With Java Driver.html-C5BmLz1-.js","assets/2024-07-22-Get the Name of the Currently Executing Test in JUnit.html-adytH2S7.js","assets/2024-07-22-Hibernate Validator Annotation Processor in Depth.html-vkz9Thqg.js","assets/2024-07-22-Hidden Classes in Java 15.html-B0qVMw_T.js","assets/2024-07-22-How to Access EntityManager with Spring Data.html-CqS_5pTJ.js","assets/2024-07-22-How to Extract Individual Values From a JSON String.html-bRMugYEB.js","assets/2024-07-22-Introduction to Spring Cloud Load Balancer.html-BZStn9o9.js","assets/2024-07-22-Java Concurrent HashSet Equivalent to ConcurrentHashMap.html-fAaYdSVc.js","assets/2024-07-22-Java IdentityHashMap Class and Its Use Cases.html-CiGkuz5r.js","assets/2024-07-22-Keycloak Integration   OAuth2 and OpenID with Swagger UI.html-DHX91qiT.js","assets/2024-07-22-Lombok Configuration System.html-BhHNYccd.js","assets/2024-07-22-Multiple Line Code Example in Javadoc Comment.html-B7DBd7LH.js","assets/2024-07-22-Printing Thread Info in Log File Using Log4j2.html-BGXbl3zd.js","assets/2024-07-22-Random Number Generators in Java 17.html-Y5_qNRmS.js","assets/2024-07-22-Remove Basic Error Controller In SpringFox Swagger UI.html-D2hjn5dD.js","assets/2024-07-22-Retrying Feign Calls.html-BXK1VuYx.js","assets/2024-07-22-SequenceInputStream Class in Java.html-BUlLjVAl.js","assets/2024-07-22-Setting Example and Description with Swagger.html-CpAQabVf.js","assets/2024-07-22-Split a String Every n Characters in Java.html-Bc1Qra8_.js","assets/2024-07-22-String equals   Vs contentEquals   in Java.html-kEQ1sJHx.js","assets/2024-07-22-Using Spring Cloud Gateway with OAuth 2.0 Patterns.html-C8nhfV8x.js","assets/2024-07-22-What Is the Difference Between NIO and NIO.2 .html-CFZO8xF4.js","assets/2024-07-22-Working with  Unknown Source  Stack Traces in Java.html-BgXMYJRa.js","assets/2024-07-23-415 Unsupported MediaType in Spring Application.html-BtZwfVlg.js","assets/2024-07-23-Check if an Enum Value Exists in Java.html-9cEUPpOe.js","assets/2024-07-23-Content Security Policy with Spring Security.html-tzIcAISU.js","assets/2024-07-23-Convert String to Float and Back in Java.html-ffqYFoAp.js","assets/2024-07-23-Custom Validation with Swagger Codegen.html-BULkzY4v.js","assets/2024-07-23-Getting a Bit at a Certain Position from Integral Values.html-CRQ0iC4_.js","assets/2024-07-23-Guide to Netflix Spectator.html-Cy-fRbhu.js","assets/2024-07-23-Is Cassandra a Column Oriented or Column Family Database .html-BaNf_cUj.js","assets/2024-07-23-JMX Ports.html-Bhb74AFs.js","assets/2024-07-23-Java HashMap With Different Value Types.html-CK8n9o1_.js","assets/2024-07-23-Kafka Streams With Spring Boot.html-Bjcba2Gu.js","assets/2024-07-23-Micronaut vs. Spring Boot.html-C1yTX9xA.js","assets/2024-07-23-Reading Values From Excel in Java.html-Df6cN5iz.js","assets/2024-07-23-Remote Monitoring with VisualVM and JMX.html-Bb0XSGmu.js","assets/2024-07-23-Remove Duplicate Dependencies with Maven.html-PvirpRyT.js","assets/2024-07-23-Replication Strategies and Partitioning in Cassandra.html-BqHUsXJN.js","assets/2024-07-23-Serialize and Deserialize Booleans as Integers With Jackson.html-DzG17NET.js","assets/2024-07-23-Set the Name of a Thread in Java.html-Dr7vPe-O.js","assets/2024-07-23-Simulate touch Command in Java.html-k0gVW0_4.js","assets/2024-07-23-Solving the Hide Utility Class Public Constructor Sonar Warning.html-CUGV4dRg.js","assets/2024-07-23-Speed up Spring Boot Startup Time.html-DyMFtfl7.js","assets/2024-07-23-Unix Domain Socket in Java 16.html-iu02-90F.js","assets/2024-07-23-Use Dot  .  as the Decimal Separator in Java.html-C12dZbXV.js","assets/2024-07-23-Using return Inside a Lambda in Kotlin.html-B8zm4pUB.js","assets/2024-07-23-Volatile Variables and Thread Safety.html-CMqI5xbo.js","assets/2024-07-23-Why Maven Uses a Different JDK.html-Cjw1Tfuf.js","assets/2024-07-24-Assert That a Java Optional Has a Certain Value.html-CVkZBit-.js","assets/2024-07-24-CassandraUnit Test Tutorial.html-Cy_bWwHF.js","assets/2024-07-24-Chaining Constructors in Java.html-BaGi7b-H.js","assets/2024-07-24-Check if the First Letter of a String Is Uppercase.html-DmkxO0ar.js","assets/2024-07-24-Constructors in Java Abstract Classes.html-DTZ4faTg.js","assets/2024-07-24-Declaring Val and Var Variables in Lombok.html-GhSbYxYw.js","assets/2024-07-24-Deserialize Snake Case to Camel Case With Jackson.html-8gDbluRn.js","assets/2024-07-24-Get all the Keys in a JSON String Using JsonNode.html-B6mwqbeh.js","assets/2024-07-24-HMAC in Java.html-CaKrb24A.js","assets/2024-07-24-Ignoring Commas in Quotes When Splitting a Comma separated String.html-wWzjh1st.js","assets/2024-07-24-Importing Maven Project into Eclipse.html-DAKKpMVN.js","assets/2024-07-24-Introduction to HexFormat in Java 17.html-D6SCSULx.js","assets/2024-07-24-Invoke a Static Method Using Java Reflection API.html-CKU3S0OY.js","assets/2024-07-24-Iterate Through an Array in Reverse Order in Kotlin.html-YddvSwRI.js","assets/2024-07-24-LDAP Authentication Using Pure Java.html-Buazu8QJ.js","assets/2024-07-24-List All the Classes Loaded in the JVM.html-CHUuHrB_.js","assets/2024-07-24-Logging Queries with Spring Data Cassandra.html-DO8ZFzqg.js","assets/2024-07-24-New Features in Java 17.html-FbVhJyIe.js","assets/2024-07-24-Overriding Spring Boot Managed Dependency Versions.html-DEhS77Fe.js","assets/2024-07-24-Remove HTML Tags Using Java.html-CYIqfepA.js","assets/2024-07-24-Request Routing and Snitches in Cassandra.html-CyNLYHPs.js","assets/2024-07-24-Split a String Only on the First Occurrence of Delimiter.html-Bc7qW1md.js","assets/2024-07-24-Splitting a Java String by Multiple Delimiters.html-dzK-Ce6w.js","assets/2024-07-24-What Is OncePerRequestFilter .html-BP70iCG5.js","assets/2024-07-25-Add a Reference to Method Parameters in Javadoc.html-CYER_QO2.js","assets/2024-07-25-Cassandra Frozen Keyword.html-C31X5fp4.js","assets/2024-07-25-Convert Long to String in Java.html-CINAMlui.js","assets/2024-07-25-Convert a Byte Array to a Numeric Representation in Java.html-BqqsPHs3.js","assets/2024-07-25-Convert an Object to a Byte Array in Java.html-DQpQzvRV.js","assets/2024-07-25-Format Swagger Text Descriptions.html-BhopcVWe.js","assets/2024-07-25-Get a Field s Annotations Using Reflection.html-jbHxMYu3.js","assets/2024-07-25-Get a Submap From a HashMap in Java.html-DZfX7-Qo.js","assets/2024-07-25-Guide to Using ModelMapper.html-CgWUX_TR.js","assets/2024-07-25-Hibernate s  Object References an Unsaved Transient Instance  Error.html-J1ntr35N.js","assets/2024-07-25-JUnit 4 on How to Ignore a Base Test Class.html-CS93cFTc.js","assets/2024-07-25-Java Map   keySet   vs. entrySet   vs. values   Methods.html-DBWei-8v.js","assets/2024-07-25-Multiline Text in Excel Cell Using Apache POI.html-BO8fu3a_.js","assets/2024-07-25-New Features in Java 16.html-Bc_QgGqr.js","assets/2024-07-25-Parallel Test Execution for JUnit 5.html-DZfqpwpj.js","assets/2024-07-25-Pattern Matching for Switch.html-C_qke-bn.js","assets/2024-07-25-Prim s Algorithm in Kotlin.html-DXDZunbq.js","assets/2024-07-25-Reactive Streams API with Ratpack.html-ZVKMxwuw.js","assets/2024-07-25-Saving Date Values in Spring Data Cassandra.html-Dwg-la6q.js","assets/2024-07-25-Snapshotting Aggregates in Axon.html-BQ0tyi3x.js","assets/2024-07-25-Spring Boot vs Quarkus.html-BhIOYnTS.js","assets/2024-07-25-Spring Security   Request Rejected Exception.html-Ddo_qZtN.js","assets/2024-07-25-Update the Value Associated With a Key in a HashMap.html-B1jQBCEl.js","assets/2024-07-25-Using Test Containers With Spring Data Cassandra.html-Bv6q0K8_.js","assets/2024-07-25-Using a Custom Class as a Key in a Java HashMap.html-CK6ieZ7o.js","assets/2024-07-26-Access Control Models.html-D0m9c-B0.js","assets/2024-07-26-Cassandra Partition Key  Composite Key  and Clustering Key.html-OEzBVu-Z.js","assets/2024-07-26-Change the Default Location of the Log4j2 Configuration File in Spring Boot.html-CYq5Xuz3.js","assets/2024-07-26-Compare the Content of Two Files in Java.html-Bzzsbxue.js","assets/2024-07-26-Connect to Apache Kafka Running in Docker.html-BRoWhV5X.js","assets/2024-07-26-Connecting to a Specific Schema in JDBC.html-CUOR8o3H.js","assets/2024-07-26-Convert an Array to a String.html-DelfNIMH.js","assets/2024-07-26-Count Spaces in a Java String.html-DbxAzkvp.js","assets/2024-07-26-Custom Serializers in Apache Kafka.html-iTZaxGDz.js","assets/2024-07-26-Deploying a Java War in a Docker Container.html-BxzzIa5b.js","assets/2024-07-26-Enabling Unlimited Strength Cryptography in Java.html-BCvv3nGJ.js","assets/2024-07-26-Fixing the  Declared package does not match the expected package  Error.html-CHVqj819.js","assets/2024-07-26-Format a Milliseconds Duration to HH MM SS.html-CRYygA-Z.js","assets/2024-07-26-Generate a Java Class From JSON.html-BkPqs3bB.js","assets/2024-07-26-Get All Running JVM Threads.html-CpxaUfN9.js","assets/2024-07-26-Handling Exceptions in Project Reactor.html-CwBPNiND.js","assets/2024-07-26-Inserting Delays Between Requests in Apache JMeter.html-XcFYwvar.js","assets/2024-07-26-Is Kotlin Pass By Value or Pass By Reference .html-BfNKIz_U.js","assets/2024-07-26-Maven dependencyManagement vs. dependencies Tags.html-BaTkk_g-.js","assets/2024-07-26-Priority of a Thread in Java.html-Biod6Q51.js","assets/2024-07-26-Result Class in Kotlin.html-DRB4UgpB.js","assets/2024-07-26-Run JUnit Test Cases From the Command Line.html-DWiPPNPZ.js","assets/2024-07-26-Running a Single Test or Method With Maven.html-CcCKDSPS.js","assets/2024-07-26-Spring Data with ArangoDB.html-Dyp3cC_C.js","assets/2024-07-26-Test WebSocket APIs With Postman.html-CJhGhlfJ.js","assets/2024-07-27-Additional Source Directories in Maven.html-BasKWQ7U.js","assets/2024-07-27-An Intro to Dapr with Spring Cloud Gateway.html-62ivn1sk.js","assets/2024-07-27-Architecture of a Geospatial Application with Java.html-BTc1db06.js","assets/2024-07-27-Converting a PEM File to Java KeyStore Format.html-D0tEOsyf.js","assets/2024-07-27-Creating a Kubernetes Admission Controller in Java.html-CSbmyIDe.js","assets/2024-07-27-Creating a Self Signed Certificate With OpenSSL.html-B4u-UjN6.js","assets/2024-07-27-Cyclically Rotate Array by One in Kotlin.html-1BmoXs5C.js","assets/2024-07-27-Default Values for Maven Properties.html-T1PXDmZl.js","assets/2024-07-27-Difference Between MVC and MVP Patterns.html-CJqdEHoC.js","assets/2024-07-27-Disable the Maven Javadoc Plugin.html-CUBoGpgf.js","assets/2024-07-27-Find Whether an IP Address Is in the Specified Range or Not in Java.html-BOFEPQue.js","assets/2024-07-27-Guava s Futures and ListenableFuture.html-C-2Bk1zX.js","assets/2024-07-27-Guide to Java BigInteger.html-DEDl47To.js","assets/2024-07-27-Hosting a Maven Repository on GitHub.html-Be0cGsac.js","assets/2024-07-27-How to Create Password Protected Zip Files and Unzip Them in Java.html-BJZdVHMJ.js","assets/2024-07-27-How to Implement LRU Cache in Java.html-Cp2jOFR4.js","assets/2024-07-27-Intro to Ktorm  ORM Framework for Kotlin.html-S46FX2KF.js","assets/2024-07-27-Is java.sql.Connection Thread Safe .html-D5Y2vKE6.js","assets/2024-07-27-Java Annotation Attribute Value Restrictions.html-DATDSo6V.js","assets/2024-07-27-Looking for a Java Team Lead with Spring Experience  Remote   Part Time   not open .html-COK4yLR9.js","assets/2024-07-27-Set JWT with Spring Boot and Swagger UI.html-BVZ8ImE2.js","assets/2024-07-27-Significance of Getters and Setters in Java.html-BA0xkOhr.js","assets/2024-07-27-Throwing Exceptions in Constructors.html-WazGjokh.js","assets/2024-07-27-Util Classes in Kotlin.html-Dgzjm0Fw.js","assets/2024-07-27-Why Missing Annotations Don t Cause ClassNotFoundException.html-DTneud5L.js","assets/2024-07-27-Writing Log Data to Syslog Using Log4j2.html-B4eNdIRI.js","assets/2024-07-28- Code too large  Compilation Error in Java.html-C71JGTba.js","assets/2024-07-28-3DES in Java.html-DiPMX78R.js","assets/2024-07-28-A Comparison Between JPA and JDBC.html-BkplFtxa.js","assets/2024-07-28-Build a Dashboard With Cassandra  Astra  REST   GraphQL   Recording Status Updates.html-D1aYi5FK.js","assets/2024-07-28-Cluster  Datacenters  Racks and Nodes in Cassandra.html-ChnInF1R.js","assets/2024-07-28-Collection.toArray new T 0   or .toArray new T size  .html-DJHQPKZs.js","assets/2024-07-28-Converting Camel Case and Title Case to Words in Java.html-DypOGSbm.js","assets/2024-07-28-Converting String to BigInteger in Java.html-DpPTSkat.js","assets/2024-07-28-Determine if All Elements Are the Same in a Kotlin List.html-te19mKzi.js","assets/2024-07-28-Difference Between Maven Surefire and Failsafe Plugins.html-oHtmxxkN.js","assets/2024-07-28-Download a Binary File Using OkHttp.html-Z1qNuEf_.js","assets/2024-07-28-Enabling Logging for Apache HttpClient.html-riSLf4gg.js","assets/2024-07-28-Find the GC Algorithm Used by a JVM Instance.html-C88Zp-Vv.js","assets/2024-07-28-Guide to the ModelAssert Library for JSON.html-CC_QjqM4.js","assets/2024-07-28-How to Convert Integer List to IntArray in Kotlin.html-DON8lH7d.js","assets/2024-07-28-How to Get the Number of Threads in a Java Process.html-DqH93gGW.js","assets/2024-07-28-How to Implement Min Max Heap in Java.html-Xo9JLzUS.js","assets/2024-07-28-Interface With Default Methods vs Abstract Class.html-CPSEtfFb.js","assets/2024-07-28-JPA Entities and the Serializable Interface.html-6t5EpJnU.js","assets/2024-07-28-Mask Sensitive Data in Logs With Logback.html-BTFvQh3B.js","assets/2024-07-28-Monitor the Consumer Lag in Apache Kafka.html-DqDADxvU.js","assets/2024-07-28-The java.lang.NoClassDefFoundError in JUnit.html-DmQXcT4m.js","assets/2024-07-28-What Does Mono.defer   Do .html-Bplv68rM.js","assets/2024-07-28-Wire Tap Enterprise Integration Pattern.html-Ht5oINLR.js","assets/2024-07-29-Build a Dashboard Using Cassandra  Astra  and Stargate.html-CHujYkv-.js","assets/2024-07-29-Converting String to BigDecimal in Java.html-tH9tZCQH.js","assets/2024-07-29-Creating  Updating and Deleting Resources with the Java Kubernetes API.html-DLRGf-tV.js","assets/2024-07-29-Defining Unique Constraints in JPA.html-BJ7qvEff.js","assets/2024-07-29-Difference Between Super  Simplest  and Effective POM.html-BZW1AGGB.js","assets/2024-07-29-Find All Numbers in a String in Java.html-BAoRCBLY.js","assets/2024-07-29-Finding All Classes in a Java Package.html-BZVyWLPY.js","assets/2024-07-29-How to Implement a Soft Delete with Spring JPA.html-88QSpVBg.js","assets/2024-07-29-IllegalAccessError in Java.html-CzFkGsEi.js","assets/2024-07-29-Inserting Null Into an Integer Column Using JDBC.html-I8i_MDPo.js","assets/2024-07-29-JPA Support   State of the Tools Ecosystem in 2021.html-Bf32gcCf.js","assets/2024-07-29-JVM Parameters InitialRAMPercentage  MinRAMPercentage  and MaxRAMPercentage.html-BLpdTCl_.js","assets/2024-07-29-Kotlin  .let   vs if not null.html-BYFNGNE5.js","assets/2024-07-29-Local JAR Files as Gradle Dependencies.html-C9EIqg87.js","assets/2024-07-29-Multipart Request Handling in Spring.html-5LJtMSUy.js","assets/2024-07-29-Non Capturing Regex Groups in Java.html-DBfC3SLa.js","assets/2024-07-29-Observability in Distributed Systems.html-DlvjLkSL.js","assets/2024-07-29-Private Methods in Java Interfaces.html-DOcs51kE.js","assets/2024-07-29-Remove Elements From a List While Iterating in Kotlin.html-P6xvix1I.js","assets/2024-07-29-Secret Key and String Conversion in Java.html-TZf53ip9.js","assets/2024-07-29-Spring Boot Error ApplicationContextException.html-CRfLCpBl.js","assets/2024-07-29-Spring Validation in the Service Layer.html-CWIM4z7U.js","assets/2024-06-19-Check if an Element Is Present in a Set in Java.html-gW5RuI3H.js","assets/2024-06-19-Checking Which Java Version Is Running in Eclipse.html-Dwi33kJA.js","assets/2024-06-19-Convert TemporalAccessor to LocalDate.html-CQ8Z2Qny.js","assets/2024-06-19-Convert a Phone Number in Words to Number with Java.html-Co4KYM8m.js","assets/2024-06-19-Disable  Cacheable in Spring Boot.html-BCrCQNPP.js","assets/2024-06-19-Disable  EnableScheduling on Spring Tests.html-SwrtYuM5.js","assets/2024-06-19-Get Last n Characters From a String.html-GerHzvH3.js","assets/2024-06-19-Get a Path to a Resource in a Java JAR File.html-CTrV8dyM.js","assets/2024-06-19-How to Check Number Perfection.html-J4Yx9t4x.js","assets/2024-06-19-How to Scale a Bufferedimage in Java .html-k1KBfQ3Z.js","assets/2024-06-19-How to Test Spring Application Events.html-CFmhqhzv.js","assets/2024-06-19-Immutable vs Unmodifiable Collection in Java.html-C6hxaF1V.js","assets/2024-06-19-Internet Address Resolution SPI in Java.html-BuCsIi6D.js","assets/2024-06-19-Introduction to Light 4J.html-BSSyhdUo.js","assets/2024-06-19-Logging in Apache Camel.html-6cvIb92S.js","assets/2024-06-19-Logging in Spring Boot With Loki.html-DjVcGKT9.js","assets/2024-06-19-Multiple Level Mock Injection Into Mockito Spy Objects.html-Cgf_GdEr.js","assets/2024-06-19-New Features in Java 21.html-DA6eCg-7.js","assets/2024-06-19-Opening HTML File Using Java.html-Bi-6urjy.js","assets/2024-06-19-Statements Before super   in Java.html-BeRTIvnw.js","assets/2024-06-19-The  Struct Annotation Type in Hibernate   Structured User Defined Types.html-BeNOtU0O.js","assets/2024-06-19-The Difference Between Throwing an Exception and Mono.error   in Spring Webflux.html-_wdsLIUj.js","assets/2024-06-20- Subselect Annotation in Hibernate.html-CPQMH3eQ.js","assets/2024-06-20-A Guide to Kotlin Context Receivers.html-cU6T3jBo.js","assets/2024-06-20-Add One Element to an Immutable List in Java.html-DlVNSUMF.js","assets/2024-06-20-Avoiding the ConcurrentModificationException in Kotlin.html-XMcgixap.js","assets/2024-06-20-Check if a Given Time Lies Between Two Times Regardless of Date.html-BVXXtRkN.js","assets/2024-06-20-Checking if a Date Object Equals Yesterday.html-DaMrRBdA.js","assets/2024-06-20-Convert RxJava Single to Kotlin Coroutine Deferred.html-DfGBV7e9.js","assets/2024-06-20-Converting UTF 8 to ISO 8859 1 in Java.html-BKRHry2z.js","assets/2024-06-20-Create Spring Prototype Scope Bean with Runtime Arguments.html-BuTvF4d4.js","assets/2024-06-20-Creating a Spring Security Key for Signing a JWT Token.html-BjllnOMP.js","assets/2024-06-20-Difference Between eachCount   and eachCountTo   Methods in Kotlin.html-DgBNECEJ.js","assets/2024-06-20-Dynamically Managing Kafka Listeners in Spring Boot.html-GzmB7mLR.js","assets/2024-06-20-Dynamically Register Spring Beans Based on Properties.html-Biil_4qk.js","assets/2024-06-20-Finding Element by Attribute in Selenium.html-DWIGsxMv.js","assets/2024-06-20-Fix Ambiguous Method Call Error in Mockito.html-DrbrNVtJ.js","assets/2024-06-20-Flatten a Stream of Maps to a Single Map in Java.html-Bu9ROQQl.js","assets/2024-06-20-Getting a Kotlin KClass from a Package Class Name String.html-B2qjigVD.js","assets/2024-06-20-Guide to Duration in Kotlin.html-C986aJRP.js","assets/2024-06-20-Guide to ExecutorService vs. CompletableFuture.html-jMv4ZM4s.js","assets/2024-06-20-Guide to the HexFormat API.html-CtxZTyDl.js","assets/2024-06-20-How to Convert Excel to JSON in Java.html-ChBrc4b4.js","assets/2024-06-20-Implement Two Level Cache With Spring.html-YLQBNhpC.js","assets/2024-06-20-Include null Value in JSON Serialization.html-rpzDckCd.js","assets/2024-06-20-Invalid Characters in XML.html-BKf_xiKX.js","assets/2024-06-20-Iterating Over Components of Object in Kotlin.html-DPhM55Z6.js","assets/2024-06-20-Java InputStream vs. InputStreamReader.html-HA6xnLb1.js","assets/2024-06-20-Normalizing the EOL Character in Java.html-BbvMtQx8.js","assets/2024-06-20-Parallel Operations on Kotlin Collections.html-DPx0wWmh.js","assets/2024-06-20-Passing a Type to Generic Method in Kotlin.html-C203V5VE.js","assets/2024-06-20-Querydsl vs. JPA Criteria.html-JPEm7zSX.js","assets/2024-06-20-Reading a .gz File Line by Line Using GZIPInputStream.html-ByU0BTig.js","assets/2024-06-20-Representation of Integers at a Bit Level in Java.html-DB8KFEO2.js","assets/2024-06-20-Saga Pattern in a Microservices Architecture.html-BzhYgbQY.js","assets/2024-06-20-Serialize Enum Property to JSON in Kotlin.html-CRV6fXI3.js","assets/2024-06-20-Use of Backticks in Kotlin.html-DNgiVuHe.js","assets/2024-06-20-Using the  Value Annotation in Kotlin.html-mdH8PEqG.js","assets/2024-06-20-Variable Shadowing in Kotlin.html-CgWDPpk0.js","assets/2024-06-20-Vigen re Cipher in Java.html-Di_jTtEW.js","assets/2024-06-20-When to Use Setter Methods or Constructors for Setting a Variable s Value in Java.html-fnKEiHfD.js","assets/2024-06-21-Adding Elements to a Collection During Iteration.html-BnXQwvv_.js","assets/2024-06-21-Calculate Percentiles in Java.html-CzEZdH_n.js","assets/2024-06-21-Capturing Method Arguments When Running Spock Tests.html-BRTofdFi.js","assets/2024-06-21-Check if a Number Is a Happy Number in Java.html-BpxqyKxv.js","assets/2024-06-21-Commit Offsets in Kafka.html-C1m08sXY.js","assets/2024-06-21-Find the Largest Number Possible After Removing k Digits of a Number.html-CLzm6xFw.js","assets/2024-06-21-Finding the Majority Element of an Array in Java.html-Btk7Y5zK.js","assets/2024-06-21-Finding the Peak Elements of a List.html-WIDO7TWN.js","assets/2024-06-21-HTML Builder in Kotlin.html-CwhhF_4-.js","assets/2024-06-21-How to Autowire a Spring Bean in a Servlet Filter.html-D-Xash19.js","assets/2024-06-21-Intro to the Apache Commons CLI.html-DkdWbtaL.js","assets/2024-06-21-Introduction to Redpanda.html-Bs6Qbsud.js","assets/2024-06-21-Obtaining the Last Path Segment of a URI in Java.html-D9Pbat9c.js","assets/2024-06-21-Parsing HTML Table in Java With Jsoup.html-CbRZLHCY.js","assets/2024-06-21-Refresh and Fetch an Entity After Save in JPA.html-JRnbvXmU.js","assets/2024-06-21-Spring Security AuthorizationManager.html-CihXGITR.js","assets/Add Global Exception Interceptor in gRPC Server.html-BFMTzGna.js","assets/Add an Aggregation to an Elasticsearch Query.html-XVUDeHeu.js","assets/BigDecimal equals   vs. compareTo  .html-DSBdp9wR.js","assets/Calculating Moving Averages in Java.html-CHm-X0yH.js","assets/Can  Transactional and  Async Work Together .html-CIhF9nG0.js","assets/Check if Two Strings Are Permutations of Each Other in Java.html-CS3U31mw.js","assets/Check if a Number Is Power of 2 in Java.html-B3plK7TB.js","assets/Clear Managed Entities in JPA Hibernate.html-DuLlhkTz.js","assets/Code Coverage vs. Test Coverage.html-Eb1s0U1Q.js","assets/Collecting into Map using Collectors.toMap   vs Collectors.groupingBy  .html-CJrsRtmh.js","assets/Compare the Numbers of Different Types.html-B-sNg6PI.js","assets/Comparison Between Flux.map() and Flux.doOnNext().html-qEIWmGJd.js","assets/CompletableFuture vs. Mono.html-DqG7uDLd.js","assets/Compress and Create a Byte Array Using GZip.html-BCsnXPbg.js","assets/Configuring Retry Policy for gRPC Request.html-CrW8ZHRM.js","assets/Consumer Processing of Kafka Messages With Delay.html--k2p8IY4.js","assets/Continue the Test Even After Assertion Failure in TestNG.html-UtSBB911.js","assets/Convert 2D Array Into 1D Array.html-C2Qm40hm.js","assets/Convert Between CLOB and String in Java.html-BkvFSy98.js","assets/Convert Decimal to Fraction in Java.html-bxjakNtB.js","assets/Convert From int to short in Java.html-C6JpN5z7.js","assets/Convert Google Protocol Buffer Timestamp to LocalDate.html-D8W9lCM8.js","assets/Convert InputStream to Stream in Java.html-aXQFCEg5.js","assets/Convert Jackson JsonNode to Typed Collection.html-BuettmqD.js","assets/Convert a Queue to a List.html-i99DAqMq.js","assets/Convert an Optional to an ArrayList in Java.html-D6kCJPKO.js","assets/Converting Float ArrayList to Primitive Array in Java.html-B8OUgtmR.js","assets/Converting Image to BufferedImage in Java.html-DYcGJqFk.js","assets/Converting short to byte   in Java.html-B49g6zrq.js","assets/Create HashMap with Character Count of a String in Java.html-DE-RRQt0.js","assets/Create and Run Apache JMeter Test Scripts via Java Program.html-D7-UfIfE.js","assets/Declare an Enum in an Inner Class in Java.html-CkWfvyb2.js","assets/Difference Between Casting to String and String.valueOf  .html-YliaOj5q.js","assets/Difference Between Iterator.forEachRemaining   and Iterable.forEach  .html-DJFUGqd0.js","assets/Difference Between Lombok  AllArgsConstructor   RequiredArgsConstructor and  NoArgConstructor.html-BDDt5g35.js","assets/Difference Between Optional.of   and Optional.ofNullable   in Java.html-DDVi2MIb.js","assets/Disable Logging From a Specific Class in Logback.html-Ck3iC3T9.js","assets/Download File from S3 Given a URL.html-frkacwGH.js","assets/Exploring Complex Number Arithmetic Operations in Java.html-DUqijzqD.js","assets/Extract Text From a HTML Tag with Regex.html-Cu0GxEBu.js","assets/Extracting Text Between Parentheses in Java.html-DvqcMD9q.js","assets/Fault Tolerance in Java Using Failsafe.html-PsprNKxb.js","assets/Find the Date of Easter Sunday for the Given Year.html-Bt96HilX.js","assets/Find the Length of the Longest Symmetric Substring.html-DPZKusvW.js","assets/Finding Minimum and Maximum in a 2D Array.html-SK8tyhlH.js","assets/Finding the Index of the Smallest Element in an Array.html-D-8P7NOU.js","assets/Finding the Next Higher Number With the Same Digits.html-CBwMVXcv.js","assets/Finding the Redirected URL of a URL in Java.html-DlimE9Ly.js","assets/Finding the Second Smallest Integer in an Array in Java.html-BJv2S2c-.js","assets/Finding the nth Last Occurrence of char in String.html-9NDi48ES.js","assets/Fix Spring Boot H2 JdbcSQLSyntaxErrorException  Table not found .html-BG_TtgjV.js","assets/Full and Partial Text Search in MongoDB.html-DmNNePlr.js","assets/Generate Java Classes From Avro Schemas Using Gradle.html-DKznh3UU.js","assets/Get 2 s Complement of a Number in Java.html-CnGUFguA.js","assets/Get JSON Content as Object Using MockMVC.html-tWTp1GVs.js","assets/Get Nextval From Sequence With Spring JPA.html-DbAIte4P.js","assets/Get the First and the Last Elements From an Array in Java.html-DwtZoqt6.js","assets/Get the Indices of an Array After Sorting in Java.html-CcOByGos.js","assets/Get the Position of Key Value in LinkedHashMap Using Its Key.html-n9TTUes6.js","assets/Get the Response Body in Spring Boot Filter.html-DAJFG2GX.js","assets/Git Integration in IntelliJ IDEA.html-SSQ9NTy6.js","assets/Handling Nulls in ArrayList.addAll  .html-Yiw2jLJY.js","assets/How to Check if Optional Contains Value Equal to T Object.html-3OuO2mkx.js","assets/How to Compile Java to WASM  Web Assembly .html-CJVw1Q6J.js","assets/How to Convert Between java.sql.Timestamp and ZonedDateTime in Java.html-G5JrvzY_.js","assets/How to Convert XML to PDF.html-BuOax8Od.js","assets/How to Convert org.w3c.dom.Document to String in Java.html-CZ297rg1.js","assets/How to Fix EOFException in Java.html-BFdG6FuM.js","assets/How to Implement Elvis Operator in Java 8.html-ZO5kQpH6.js","assets/How to Intercept a Request and Add Headers in WebFlux.html-B47Uu0NH.js","assets/How to Iterate a List of Maps in Java.html-BTsP908a.js","assets/How to Make Multiple REST Calls in CompletableFuture.html-CvZQCmRT.js","assets/How to Set JVM Arguments in IntelliJ IDEA .html-CTd_ATBA.js","assets/How to Specify the logback.xml Location.html-CrkS9DW6.js","assets/How to Test a Spring AOP Aspect.html-CSMXdz6V.js","assets/How to Unit Test an ExecutorService Without Using Thread.sleep  .html-BZibCon2.js","assets/How to Use Pair With Java PriorityQueue.html-D-qnKPZe.js","assets/Implement Update Or Insert in Spring Data JPA.html-9bCPWOWq.js","assets/Implement the Builder Pattern in Java 8.html-2iyGAMgG.js","assets/Inheritance vs. Composition in JPA.html-u8krXeCP.js","assets/Install Java on macOS.html-ta1ZQ0Hj.js","assets/Intro to Apache Commons Configuration Project.html-UZYm1U0G.js","assets/Intro to the Apache Commons Compress Project.html-vRKAaChG.js","assets/Introduction to Brave.html-LwuQ08Dv.js","assets/Introduction to DuckDB.html-BAhuuF5p.js","assets/Introduction to JFreeChart.html-DmusnwPq.js","assets/Introduction to Java 22.html-DtwgttzB.js","assets/Introduction to JavaParser.html-B6j6a2FK.js","assets/Introduction to SSHJ.html-CDXh5DbD.js","assets/Introduction to Simple Java Mail.html-B2CU_NEW.js","assets/Java中不同数值类型的比较.html-BVWj13QS.js","assets/Java中将int转换为无符号字节.html-X4lQ3FAO.js","assets/Java中将字符串转换为OffsetDateTime.html-BgUUusbC.js","assets/Join Two Tables Using jOOQ.html-zxrdPaWi.js","assets/Logging SQL Queries to the Console in Mybatis.html-q9HAQuyy.js","assets/Map LocalDateTime to Instant in MapStruct.html-DhHGZ4JD.js","assets/Mapping Enum to String Using MapStruct.html-CocJ65Zq.js","assets/Merge Multiple PDF Files Into a Single PDF Using Java.html-DJHaOhzn.js","assets/Mocking Protected Method in Java.html-D8qGyyPl.js","assets/Monads in Java.html-BuVtPCgM.js","assets/Monitor a Spring Boot App Using Prometheus.html-Cn_KoF3r.js","assets/OpenAI API Client in Java.html-BmPGM67H.js","assets/Parallel Collection Processing with Parallel Collectors and Virtual Threads.html-DD_jF611.js","assets/Pass a Class as a Parameter in Java.html-_ienn9Rr.js","assets/Perform Action Only if All Optionals Are Available.html-xyWkMjaf.js","assets/PersistenceUnit vs. PersistenceContext.html-B0S42cxn.js","assets/Polymorphism with Gson.html-CQ2DDihp.js","assets/Print Distinct Characters of a String in Java.html-CVNnfKf6.js","assets/Print the Default Value When Overriding toString   Method.html-D21QDV4X.js","assets/PrintWriter write   vs print   Method in Java.html-BiMQy58T.js","assets/Reading CSV Headers Into a List.html-BLmK8F-6.js","assets/Remove All Characters Before a Specific Character in Java.html-BpjvQbhi.js","assets/Replacing Strings in Java Using Regex_ Back Reference vs. Lookaround.html-CNvT1NwP.js","assets/Resolving Security Exception  java.security.UnrecoverableKeyException  Cannot Recover Key.html-BxJ_zkrF.js","assets/Return Non-null Elements From Java Map Operation.html-Bi-SFeNN.js","assets/Role Based Access Control in Quarkus.html-BCPVIsUo.js","assets/Save Child Objects Automatically Using JPA.html-kSn4eObK.js","assets/Set Matrix Elements to Zero in Java.html-BaAtBDg3.js","assets/Solving Spring Data JPA ConverterNotFoundException_ No converter found.html-BKk5GiUq.js","assets/Spring WebClient exchange   vs retrieve  .html-DqB2F_WJ.js","assets/Static Code Analysis Using Infer.html-Cb-_jdUQ.js","assets/Supply Enum Value to an Annotation From a Constant in Java.html-D1USmr9D.js","assets/The Difference Between doAnswer   and thenReturn   in Mockito.html-d_9CDEoy.js","assets/Understanding Maven Dependency Graph or Tree.html-BWNzpDX5.js","assets/Unit Test for hashCode   in Java.html-j60oIPg-.js","assets/Using @Autowired and @InjectMocks in Spring Boot Tests.html-C14AtEh5.js","assets/Using Comparator.nullsLast() to Avoid NullPointerException When Sorting.html-Bmt_7LPp.js","assets/Using Reactor Mono.cache   for Memoization.html-BLVnpar5.js","assets/探索Java中将枚举值从常量传递到注解的可能性.html-2NEsGwIB.js","assets/404.html----rE2O9.js","assets/index.html-BDvYkpYE.js","assets/index.html-DblTIlu5.js","assets/index.html-D6jrwtJV.js","assets/index.html-DdaFtUtm.js","assets/index.html-CfxxzV1Y.js","assets/index.html-BD7VCSlO.js","assets/index.html-CMJhu6oS.js","assets/index.html-BvrLUlKL.js","assets/index.html-CoV1fVOm.js","assets/index.html-BqXNz32E.js","assets/index.html-CimQ-Hei.js","assets/index.html-BNAcozQf.js","assets/index.html-DY6g-UEN.js","assets/index.html-CZo51bjC.js","assets/index.html-URYi09FU.js","assets/index.html-C9v7pWqr.js","assets/index.html-Ch-zSR7L.js","assets/index.html-C-cWHMqR.js","assets/index.html-DpRq2VJh.js","assets/index.html-BSRVBJzZ.js","assets/index.html-BFoPCaQI.js","assets/index.html-DD-8Aq4H.js","assets/index.html-9ueu0GbV.js","assets/index.html-CUcws5gK.js","assets/index.html-CMXgDx2i.js","assets/index.html-CUdkcKTX.js","assets/index.html-M0SUYSY2.js","assets/index.html-CsXQ7EwG.js","assets/index.html-BuoalrSE.js","assets/index.html-BkOa7vG0.js","assets/index.html-CO2ipHqe.js","assets/index.html-CzabNg1X.js","assets/index.html-ConyP7gb.js","assets/index.html-BkhG84rS.js","assets/index.html-ywWwayLb.js","assets/index.html-BgL-9bPp.js","assets/index.html-BiWM4vpF.js","assets/index.html-BT6WgWC3.js","assets/index.html-CitzKiKs.js","assets/index.html-3Bd9agFS.js","assets/index.html-CpaB6ShX.js","assets/index.html-Drum0ilJ.js","assets/index.html-DLH6YdcT.js","assets/index.html-D0aMfbwZ.js","assets/index.html-DN7vU131.js","assets/index.html-Bu3HG-SJ.js","assets/index.html-BnJTeRmV.js","assets/index.html-BQ6MX8Qj.js","assets/index.html-d7Hw_ZnO.js","assets/index.html-DAkIj-3y.js","assets/index.html-PucM616g.js","assets/index.html-DDhJRbx_.js","assets/index.html-BiDWvMci.js","assets/index.html-Dq9Bjv65.js","assets/index.html-KRBxnCrX.js","assets/index.html-BojmcB-t.js","assets/index.html-Djrvzp4s.js","assets/index.html-OqjRgp5q.js","assets/index.html-CjgpSVMc.js","assets/index.html-Cq2eSid0.js","assets/index.html-Cfkryg4c.js","assets/index.html-ckE-My5G.js","assets/index.html-Dm5Yyj6M.js","assets/index.html-DPN19fSZ.js","assets/index.html-ArMcQItG.js","assets/index.html-Cfs1un4g.js","assets/index.html-MZuzruaE.js","assets/index.html-CET6aLOI.js","assets/index.html-BiAu9fQc.js","assets/index.html-d_xYHwxH.js","assets/index.html-B2fsyBdF.js","assets/index.html-72PbqVGU.js","assets/index.html-CI25rqXD.js","assets/index.html-BfWasv6o.js","assets/index.html-CIpgCXXM.js","assets/index.html-C4SVAzT4.js","assets/index.html-C_ztcBud.js","assets/index.html-BPA8GT10.js","assets/index.html-C6ap0YwV.js","assets/index.html-DxGmgXrr.js","assets/index.html-BTWocShe.js","assets/index.html-JkBGSMHO.js","assets/index.html-B1n-svO2.js","assets/index.html-edhn42lL.js","assets/index.html-_3YCuTlx.js","assets/index.html-q2-FxPrc.js","assets/index.html-HOrlPP9j.js","assets/index.html-CiYKMHOL.js","assets/index.html-qvfF1C56.js","assets/index.html-CKRAtik5.js","assets/index.html-3x3SRXz8.js","assets/index.html-CJtVbsmH.js","assets/index.html-DN0aGa3h.js","assets/index.html-BYGuUFSz.js","assets/index.html-auimAPuF.js","assets/index.html-BhQXnyVL.js","assets/index.html-BikauQxF.js","assets/index.html-PAd4-D8P.js","assets/index.html-ubZ2puiJ.js","assets/index.html-6BvKMIhC.js","assets/index.html-EBqrIIWB.js","assets/index.html-GWEI9VVe.js","assets/index.html-BZsZivR7.js","assets/index.html-CvttUJF3.js","assets/index.html-BVLUW6pb.js","assets/index.html-eQ7FutSZ.js","assets/index.html-Zjg31sQZ.js","assets/index.html-CCowZIbr.js","assets/index.html-D7eGawHM.js","assets/index.html-CTpqi3-t.js","assets/index.html-C4cGAXkp.js","assets/index.html-Bx7kt5Rb.js","assets/index.html-CYLwlmPQ.js","assets/index.html-rAcFOQC3.js","assets/index.html-B7D64uLh.js","assets/index.html-BrSVycBL.js","assets/index.html-BnJYXP8Z.js","assets/index.html-C3ikuDS3.js","assets/index.html-CHxZeCtn.js","assets/index.html-DEICmUu_.js","assets/index.html-BPgRl3zN.js","assets/index.html-qRP1efbt.js","assets/index.html-DqPTz8Td.js","assets/index.html-BifoanR9.js","assets/index.html-By1SeUeL.js","assets/index.html-BNvOypZc.js","assets/index.html-YF7Wupgl.js","assets/index.html-DKl-EHso.js","assets/index.html-BCleoc1A.js","assets/index.html-Dn7d242M.js","assets/index.html-CkLwwA0G.js","assets/index.html-6JNkRHk-.js","assets/index.html-CvTM_-WV.js","assets/index.html-c-qMZ7_l.js","assets/index.html-Blj5BE7H.js","assets/index.html-BAHhA2A7.js","assets/index.html-rmZd1Bh3.js","assets/index.html-DbeFpE4u.js","assets/index.html-D0RW5468.js","assets/index.html-936qCcDM.js","assets/index.html-BK4PXoCV.js","assets/index.html-Cs7WeL_z.js","assets/index.html-aSlVh9e0.js","assets/index.html-LLxyRKsy.js","assets/index.html-BxMWkUDy.js","assets/index.html-5Jtg7oMh.js","assets/index.html-D2RiqvEP.js","assets/index.html-Dq4Wt4S7.js","assets/index.html-Do15sdQr.js","assets/index.html-9ApUysAo.js","assets/index.html-Czqw4Vn6.js","assets/index.html-DfvCj0MC.js","assets/index.html-xl25ewGv.js","assets/index.html-D-y6VJYA.js","assets/index.html-Bd0TVy5w.js","assets/index.html-C7VsagT0.js","assets/index.html-CpqH5kkA.js","assets/index.html-CbLLD-qM.js","assets/index.html-B6Q5sbvq.js","assets/index.html-D0yTd2CK.js","assets/index.html-DmI_Znex.js","assets/index.html-DFExVd6i.js","assets/index.html-CHJkw4tH.js","assets/index.html-0GcwcnSq.js","assets/index.html-DCzQa_Bu.js","assets/index.html-CIbnRXPx.js","assets/index.html-S703O7XO.js","assets/index.html-BiEaINH3.js","assets/index.html-Nl22vAnH.js","assets/index.html-B6F1xqyU.js","assets/index.html-p_9WxE6a.js","assets/index.html-DXkA9JQV.js","assets/index.html-PrnE1vaF.js","assets/index.html-BY8ZvK_P.js","assets/index.html-BMfuaQ4K.js","assets/index.html-CL4wxJbl.js","assets/index.html-DjNy3bKN.js","assets/index.html-N-QcioaN.js","assets/index.html-C2ZCrhOB.js","assets/index.html-BRG5vRti.js","assets/index.html-Ws_8W59g.js","assets/index.html-DtuPT50x.js","assets/index.html-Dd58JXb7.js","assets/index.html-BvacTolL.js","assets/index.html-l3oGguAn.js","assets/index.html-BDTIs44n.js","assets/index.html-f67KO9SA.js","assets/index.html-DOBrcCsL.js","assets/index.html-CpsXvReW.js","assets/index.html-DQhYiB-F.js","assets/index.html-CTdrwDqf.js","assets/index.html-DZ3rdpK2.js","assets/index.html-CV-D8V4M.js","assets/index.html-CVTHsh3K.js","assets/index.html-D-I_038-.js","assets/index.html-DaVg8HpO.js","assets/index.html-Dymk9rtC.js","assets/index.html-BjYEDWQc.js","assets/index.html-BQQih2vT.js","assets/index.html-BZQcGRDN.js","assets/index.html-C3vH4Nk-.js","assets/index.html-KTW73dhw.js","assets/index.html-DGWzNMox.js","assets/index.html-ChjV_Y4T.js","assets/index.html-C5q8oVuq.js","assets/index.html-DqJpIOc_.js","assets/index.html-eACp7TfO.js","assets/index.html-XbhWRkKC.js","assets/index.html-8KG2Lo1C.js","assets/index.html-DjNd-VsB.js","assets/index.html-W2mRgEHZ.js","assets/index.html-CzmW8V2p.js","assets/index.html-Dsw8AJpx.js","assets/index.html-2qFlYNzi.js","assets/index.html-CuWdbzYz.js","assets/index.html-swvZcfsd.js","assets/index.html-Bxrwy9d7.js","assets/index.html-DzxYQ1F-.js","assets/index.html-BT_kqRi9.js","assets/index.html-CnHKk7HO.js","assets/index.html-CUjHzgJP.js","assets/index.html-DTbv-xXi.js","assets/index.html-DvfZ48qn.js","assets/index.html-z3vcw6Yv.js","assets/index.html-DIzqxj_n.js","assets/index.html-ClcGb4VU.js","assets/index.html-DYUjOs8y.js","assets/index.html-KgWjzdxO.js","assets/index.html-6dq9qsgJ.js","assets/index.html-YVZS8eGd.js","assets/index.html-Cu-Le0Ei.js","assets/index.html-Cf9nrcd6.js","assets/index.html-CQ-WWvsJ.js","assets/index.html-B0NCfLlg.js","assets/index.html-DTbtiTdO.js","assets/index.html-Ci95EHiT.js","assets/index.html-U3IjQZRg.js","assets/index.html-DjNp8ppw.js","assets/index.html-BQY-0kkD.js","assets/index.html-BLPYSlqK.js","assets/index.html-C8_flujd.js","assets/index.html-CDnEToIL.js","assets/index.html-BoJdt1Sl.js","assets/index.html-DyUX1Kv2.js","assets/index.html-LW7jZI0O.js","assets/index.html-6nQ0M5Zq.js","assets/index.html-BhKc-nJy.js","assets/index.html-GDj8xn--.js","assets/index.html-Kbnfj2Q_.js","assets/index.html-IALsur4W.js","assets/index.html-WqQNYQGM.js","assets/index.html--YWS82u5.js","assets/index.html-iurfsrn5.js","assets/index.html-BvG_4VKS.js","assets/index.html-CA9GhMWr.js","assets/index.html-Q8YLvXIX.js","assets/index.html-C62lR2MK.js","assets/index.html-BaAMLo9T.js","assets/index.html-T2n0uUvN.js","assets/index.html-l17N1UC4.js","assets/index.html-BCMnxnRY.js","assets/index.html-2fK_n1O1.js","assets/index.html-BcAODoD-.js","assets/index.html-CgKAMCgf.js","assets/index.html-C8pHND-q.js","assets/index.html-DZnkEx0P.js","assets/index.html-JuROhDOZ.js","assets/index.html-C-jYv8yJ.js","assets/index.html-D8D7W4Jo.js","assets/index.html-8kUvN36u.js","assets/index.html--gverB38.js","assets/index.html-DrPlasoE.js","assets/index.html-DKXkDLM7.js","assets/index.html-D7D7I3vl.js","assets/index.html-B7ZkiSLa.js","assets/index.html-Czj8Twv8.js","assets/index.html-DMqfEh8o.js","assets/index.html-DSag-Wax.js","assets/index.html-DL_-RhNT.js","assets/index.html-CPCKZQy0.js","assets/index.html-D8-wxTEV.js","assets/index.html-BVFrISWb.js","assets/index.html-CCK6SQSZ.js","assets/index.html-C1ekTlta.js","assets/index.html-XZ1GZX_l.js","assets/index.html-CCbDXAq5.js","assets/index.html-tPWZ4tTa.js","assets/index.html-DYn_P5zj.js","assets/index.html-CO2NpdIx.js","assets/index.html-DLJHG8a-.js","assets/index.html-CRfNluzH.js","assets/index.html-CdaWQMZU.js","assets/index.html-BGZ_Qdl9.js","assets/index.html-BXAJ5G2-.js","assets/index.html-CCW-yx9h.js","assets/index.html-Dr1_PtZA.js","assets/index.html-DvU4gM-l.js","assets/index.html-C2anEuC7.js","assets/index.html-nP8sGygh.js","assets/index.html-DSlXmTuS.js","assets/index.html-X4fkpxBM.js","assets/index.html-IR5ZxvnP.js","assets/index.html-BuQTwCLb.js","assets/index.html-CktcnKw_.js","assets/index.html-C_2BYdZV.js","assets/index.html-tFbKdP1h.js","assets/index.html-Be0vT1SG.js","assets/index.html-DtxNyohG.js","assets/index.html-CvXg3EXj.js","assets/index.html-CGIfGINr.js","assets/index.html-DtF-MIs5.js","assets/index.html-bL9eIjSb.js","assets/index.html-D47JM9RH.js","assets/index.html-CMZyKcWq.js","assets/index.html-gz0GyF2P.js","assets/index.html-Dsh0kb9u.js","assets/index.html-DmsyHCM3.js","assets/index.html-ijKWyIXu.js","assets/index.html-qaSklvyo.js","assets/index.html-DAJhh3hx.js","assets/index.html-DxrOiUWy.js","assets/index.html-Bo-9Ci8g.js","assets/index.html-Dz_G6NU9.js","assets/index.html-D28tOige.js","assets/index.html-C0z9B9Z2.js","assets/index.html-BhG6eANF.js","assets/index.html-BsYw2-cg.js","assets/index.html-b9sd7OWr.js","assets/index.html-CwVsxOa2.js","assets/index.html-DEwEw01F.js","assets/index.html-D4Rd7C4X.js","assets/index.html-DZ8uv-3X.js","assets/index.html-Ds_vurvn.js","assets/index.html-B7coE2ko.js","assets/index.html-CEV1D6qa.js","assets/index.html-CCoW0kng.js","assets/index.html-DS2xfHeW.js","assets/index.html-CIkQWA0n.js","assets/index.html-CEssu2Yl.js","assets/index.html-BkfkF6z6.js","assets/index.html-u-f4UBrb.js","assets/index.html-C87Xr1EF.js","assets/index.html-Wqgy48rq.js","assets/index.html-DmsOjdw_.js","assets/index.html-Cy51Yqdi.js","assets/index.html-BtAJV9oD.js","assets/index.html-CJ2MYycl.js","assets/index.html-uxJZOncq.js","assets/index.html-R5noy0ej.js","assets/index.html-fYYEiRCh.js","assets/index.html-CQifB6N8.js","assets/index.html-DYqTUQX7.js","assets/index.html-Bm8j8cFc.js","assets/index.html-TYUeG44I.js","assets/index.html-24ecb0_r.js","assets/index.html-BG_CGcwG.js","assets/index.html-DZh9Qimb.js","assets/index.html-DQreNkI-.js","assets/index.html-DpV6B-ZR.js","assets/index.html-DwA-3Jvm.js","assets/index.html-BGvhf1QG.js","assets/index.html-Br82cyqy.js","assets/index.html-BrqV6cpr.js","assets/index.html-Dckcu1hv.js","assets/index.html-Dz_KuGz6.js","assets/index.html-_TjvrvEd.js","assets/index.html-NkPDgNke.js","assets/index.html-eTSeMxzY.js","assets/index.html-QCNBQejS.js","assets/index.html-C7s47pfk.js","assets/index.html-Bd_01oJI.js","assets/index.html--rFyPZFq.js","assets/index.html-CI0A18Go.js","assets/index.html-N_OUXlVi.js","assets/index.html-xdyg7KiF.js","assets/index.html-B5KY-HxQ.js","assets/index.html-X3azi_5p.js","assets/index.html-BIhdzJxN.js","assets/index.html-BLCBDHDZ.js","assets/index.html-BGYkv3bu.js","assets/index.html-CCqNOqei.js","assets/index.html-BKk3Uq8-.js","assets/index.html-DKWRNNXp.js","assets/index.html-DEyuPRhs.js","assets/index.html-BkEObjVt.js","assets/index.html-yfiOMO8Y.js","assets/index.html-Cn2idgLF.js","assets/index.html-xINQapdM.js","assets/index.html-DtydJKs-.js","assets/index.html-CJSBLUUQ.js","assets/index.html-kmoPkcZ6.js","assets/index.html-DThxc1GV.js","assets/index.html-C4nPE4Je.js","assets/index.html-BdDuPOnF.js","assets/index.html-zY3EcP--.js","assets/index.html-ByicKkgo.js","assets/index.html-B4GPaF7c.js","assets/index.html-C8Vi4GwD.js","assets/index.html-A2DUgzMC.js","assets/index.html-CNx4ayd_.js","assets/index.html-LpjbxtuH.js","assets/index.html-CYt1Dp4r.js","assets/index.html-DxmCEj2E.js","assets/index.html--JBVhe2_.js","assets/index.html-BHMx6X1F.js","assets/index.html-BGMSX1Ng.js","assets/index.html-BylPI3jI.js","assets/index.html-CONAPJnu.js","assets/index.html-DCVpZAEi.js","assets/index.html-CBSOaUqb.js","assets/index.html-C4PLc6Tv.js","assets/index.html-BWHNU_d3.js","assets/index.html-HzRCjgnb.js","assets/index.html-TnmmLV1X.js","assets/index.html-D-hOL1v9.js","assets/index.html-C7Hhsq9C.js","assets/index.html-Bt7LWv_D.js","assets/index.html-Qg10G8qP.js","assets/index.html-Bbw3UDHb.js","assets/index.html-BFo3sPS-.js","assets/index.html-s9jP76gL.js","assets/index.html-DRVQ_F7o.js","assets/index.html-N79Xb-Dl.js","assets/index.html-DhFPUS1N.js","assets/index.html-DxoIqWKE.js","assets/index.html-CzdrjfdS.js","assets/index.html-CUQ_hSzp.js","assets/index.html-BMNlJYYc.js","assets/index.html-COyTd0i_.js","assets/index.html-CPe2S0dP.js","assets/index.html-C_E9IZyN.js","assets/index.html-DeXaBw4G.js","assets/index.html-RAdqDC5O.js","assets/index.html-reOZjNo0.js","assets/index.html-DwbE8nKi.js","assets/index.html-DD3rB_9c.js","assets/index.html-DWxvmUDA.js","assets/index.html-TSgLKTlo.js","assets/index.html-CKZ4ZcM1.js","assets/index.html-DfnQyYmn.js","assets/index.html-CVXhRWY_.js","assets/index.html-Da_Ni_78.js","assets/index.html-NzJZI99J.js","assets/index.html-DwxwIkn_.js","assets/index.html-CQLzV2dw.js","assets/index.html-BNsXphCU.js","assets/index.html-CHf2UJI-.js","assets/index.html-D9YXd8Wn.js","assets/index.html-CmSGhYcK.js","assets/index.html-AkzUSvJZ.js","assets/index.html-BqNK__le.js","assets/index.html-D1a39X-0.js","assets/index.html-BEkBEklS.js","assets/index.html-CoLlq_Vv.js","assets/index.html-BkwW4rX3.js","assets/index.html-BW3pTJjn.js","assets/index.html-RDYHTV6Z.js","assets/index.html-Ht0r6yTY.js","assets/index.html-Hls0h1Vm.js","assets/index.html-H0B44G3s.js","assets/index.html-BLLqJMpL.js","assets/index.html-D5i5pNu5.js","assets/index.html-Bo6SWtRb.js","assets/index.html-Buq2jOfj.js","assets/index.html-B2OyN-2c.js","assets/index.html-BY1n4Zga.js","assets/index.html-Dg0PkbBp.js","assets/index.html-Bbf7kOoO.js","assets/index.html-BS2z5x8N.js","assets/index.html-DoKsGDaA.js","assets/index.html-BnPVgJhJ.js","assets/index.html-CEDgztmC.js","assets/index.html-C0w1TrNl.js","assets/index.html-Bz_QFMxu.js","assets/index.html-UzOBxZ-6.js","assets/index.html-DK-_wkMv.js","assets/index.html-BzrA6hls.js","assets/index.html-CaZDy4u0.js","assets/index.html-DkhsAhDW.js","assets/index.html-oMfUqh6o.js","assets/index.html-CXoGUGMW.js","assets/index.html-BLIgtBwp.js","assets/index.html-CWHTpSbp.js","assets/index.html-BSZj0nMr.js","assets/index.html-OilyFhCO.js","assets/index.html-BvzaP0hR.js","assets/index.html-BKOMOgQH.js","assets/index.html-BwXbqdU_.js","assets/index.html-fhc0_XHG.js","assets/index.html-DNmqRAWx.js","assets/index.html-CsroYUgo.js","assets/index.html-vjk7WGVy.js","assets/index.html-DM4aDTFo.js","assets/index.html-0eauxDxJ.js","assets/index.html-B9bsriZD.js","assets/index.html-BXvMgJFx.js","assets/index.html-Dz9MJscj.js","assets/index.html-BAMt9bAk.js","assets/index.html-C7Hn_zHI.js","assets/index.html-BCHCH6Tw.js","assets/index.html-B-arleca.js","assets/index.html-D8S8TJl7.js","assets/index.html-DDra5egE.js","assets/index.html-ybdT_YSz.js","assets/index.html-J_NGoB92.js","assets/index.html-CSZgvf5L.js","assets/index.html-icGzTCDX.js","assets/index.html-B5WHYtnB.js","assets/index.html-DC5Uj0Q_.js","assets/index.html-CAXCWNY9.js","assets/index.html-DMhJvpr8.js","assets/index.html-DOZCyVve.js","assets/index.html-BO1sa1bD.js","assets/index.html-D-pG8pFs.js","assets/index.html-Cw5Ttgr_.js","assets/index.html-B70Io-fs.js","assets/index.html-Cu_up9x2.js","assets/index.html-B-F9daZo.js","assets/index.html-3XsWBBkc.js","assets/index.html-DxWJZSVM.js","assets/index.html-vLWpVI3i.js","assets/index.html-CHdg3epK.js","assets/index.html-B-Lvu6U1.js","assets/index.html-BPGG0uox.js","assets/index.html-DVmvRz_c.js","assets/index.html-eX7sWl7U.js","assets/index.html-BDYRqTU8.js","assets/index.html-C0jk11j9.js","assets/index.html-BWoaRQDr.js","assets/index.html-_Zhme0_r.js","assets/index.html-CIvwufyo.js","assets/index.html-Dl8VmuuX.js","assets/index.html-Do93UKsE.js","assets/index.html-BbcRMM_R.js","assets/index.html-DhyqrqNn.js","assets/index.html-Cyb3KeOW.js","assets/index.html-D8qsNGJr.js","assets/index.html-DW5NrpJE.js","assets/index.html-CzQYXgni.js","assets/index.html-BnjNHXZB.js","assets/index.html-C3VHWUpx.js","assets/index.html-CC3njBLF.js","assets/index.html-Bp-CvxKl.js","assets/index.html-CXsxF28J.js","assets/index.html-DrqXL9m3.js","assets/index.html-C1aFKp2j.js","assets/index.html-BX8s3OaK.js","assets/index.html-DXN6j8mL.js","assets/index.html-CkO9Z78M.js","assets/index.html-DKQlfURq.js","assets/index.html-BIzDCXjq.js","assets/index.html-DHcGMaHT.js","assets/index.html-BFb35Ot6.js","assets/index.html-B65n1q5B.js","assets/index.html-DMT7pjSH.js","assets/index.html-ZpXFeS82.js","assets/index.html-CNCCptFM.js","assets/index.html-DZoeYgtf.js","assets/index.html-DverTfxj.js","assets/index.html-D_FPiK4g.js","assets/index.html-BSCCEDGf.js","assets/index.html-BEoGOslT.js","assets/index.html-3jD70i5W.js","assets/index.html-DQr_3lfx.js","assets/index.html-3wE0OvTt.js","assets/index.html-CC0Zv-So.js","assets/index.html-DD4QEngw.js","assets/index.html-PKYS-kmq.js","assets/index.html-LzXzqqiz.js","assets/index.html-B_eAvIhO.js","assets/index.html-Ox6A6wL6.js","assets/index.html-CIQZVDin.js","assets/index.html-DL5C365S.js","assets/index.html-BslrQigf.js","assets/index.html-DObnwzma.js","assets/index.html-B1DecbdN.js","assets/index.html-D8pttfI8.js","assets/index.html-CfabDwDV.js","assets/index.html-GP69KiBN.js","assets/index.html-GQCcvFwm.js","assets/index.html-CKtll1Zp.js","assets/index.html-utcxIWl0.js","assets/index.html-Bc_F7ght.js","assets/index.html-BpKdWB_9.js","assets/index.html-DqhYNGC2.js","assets/index.html-BdfGu5Gd.js","assets/index.html-C2Z2NypW.js","assets/index.html-GTGkdf01.js","assets/index.html-lrAtsUsn.js","assets/index.html-X8SE1qwf.js","assets/index.html-ByQf_Vj3.js","assets/index.html-D8-HOA85.js","assets/index.html-DoKXxq1c.js","assets/index.html-D4qORWPN.js","assets/index.html-CynLJFb9.js","assets/index.html-BahXirie.js","assets/index.html-Cg-7ToiR.js","assets/index.html-Cy4OPmYd.js","assets/index.html-B19iV7wE.js","assets/index.html-BWxeCZvx.js","assets/index.html-zK49NceE.js","assets/index.html-DqacUBLr.js","assets/index.html-DqTMKTVy.js","assets/index.html-C_U8cNH7.js","assets/index.html-DkEiuGSZ.js","assets/index.html-CqJWqzew.js","assets/index.html-DMIHWCo9.js","assets/index.html-B6nmy9iR.js","assets/index.html-DRt0VeNU.js","assets/index.html-Bea3BVxH.js","assets/index.html-BIkwQDZr.js","assets/index.html-DqxOMMST.js","assets/index.html-BAcoVLF-.js","assets/index.html-wrt9hqkE.js","assets/index.html-DTb-7tqA.js","assets/index.html-QbCYnlwR.js","assets/index.html-IoCR6fdS.js","assets/index.html-CjS8JOAJ.js","assets/index.html-DxNj2279.js","assets/index.html-BsUP7Q3r.js","assets/index.html-zAOgo4KN.js","assets/index.html-Ciu3u5nm.js","assets/index.html-BLUM7hrL.js","assets/index.html-C6q2A-9b.js","assets/index.html-Hlv8NjbK.js","assets/index.html-QJxvm-3F.js","assets/index.html-BEgncmj2.js","assets/index.html-Je8RnItX.js","assets/index.html-DgG_nmpk.js","assets/index.html-CxYvMpgY.js","assets/index.html-CiEXqQZd.js","assets/index.html-DTxw7bp8.js","assets/index.html-C_pB7UPn.js","assets/index.html-BLGtO5e9.js","assets/index.html-BJOzF3PZ.js","assets/index.html-qVf_5GJ3.js","assets/index.html-Z6K4U2z-.js","assets/index.html-CZTMtUYy.js","assets/index.html-CLI64ZUe.js","assets/index.html-Bjb4kKfE.js","assets/index.html-DR_UTqu4.js","assets/index.html-BCd9pTEg.js","assets/index.html-CXjQ3POd.js","assets/index.html-DpHJkD1z.js","assets/index.html-Ck4eOqyD.js","assets/index.html-GrM9-gPT.js","assets/index.html-D2bxAdxZ.js","assets/index.html-D-PDMqRZ.js","assets/index.html-D2-DP06f.js","assets/index.html-DCQm6tpY.js","assets/index.html-o1pjAyW7.js","assets/index.html-CHIszqPx.js","assets/index.html-D1kG9rT6.js","assets/index.html-Doa9OZUP.js","assets/index.html-DC0pLEuQ.js","assets/index.html-BbzK5mHG.js","assets/index.html-BqUt9DR5.js","assets/index.html-BDl9nVxI.js","assets/index.html-DgOMxRaA.js","assets/index.html-CYDCq9nO.js","assets/index.html-eih8_SVQ.js","assets/index.html-Ds9l_Y3c.js","assets/index.html-DjnEQa-t.js","assets/index.html-DRnnSE4J.js","assets/index.html-07qH-8bn.js","assets/index.html-TP77ljRf.js","assets/index.html-D-psLuW2.js","assets/index.html-C8gO6sav.js","assets/index.html-0I2I8BRB.js","assets/index.html-BgWPbz1f.js","assets/index.html-Cn32YSuH.js","assets/index.html-Djrw2NQe.js","assets/index.html-roGOpo9u.js","assets/index.html-DMdpPLi7.js","assets/index.html-BA-3ILg0.js","assets/index.html-CqYdmPyB.js","assets/index.html-CbPHk6hL.js","assets/index.html-Cvvzslwn.js","assets/index.html-DZ-YK6K7.js","assets/index.html-BaAPiBmN.js","assets/index.html-BPoPO44Z.js","assets/index.html-DMwc8-HN.js","assets/index.html-D3HD2YYe.js","assets/index.html-CXbYqawh.js","assets/index.html-VBB7ffA8.js","assets/index.html-DdePspGW.js","assets/index.html-DYhEUrIj.js","assets/index.html-CvO9IfaD.js","assets/index.html-CAVz0cFJ.js","assets/index.html-D3StsCy9.js","assets/index.html-x3rbtYZQ.js","assets/index.html-BWMik1ET.js","assets/index.html-CP3Cb8_O.js","assets/index.html-C0XgokKf.js","assets/index.html-oN2uN0HW.js","assets/index.html-DOivz3ly.js","assets/index.html-BDC149TD.js","assets/index.html-CeMg9Jyb.js","assets/index.html-D-RD4NIP.js","assets/index.html-BJ68DI0k.js","assets/index.html-a-G1ho4y.js","assets/index.html-DdNS4ezh.js","assets/index.html-DPlV8NhR.js","assets/index.html-BHvaRwD_.js","assets/index.html-DPgxrDkN.js","assets/index.html-o01zt9e3.js","assets/index.html-45IhPKOs.js","assets/index.html-CTbZ0aWq.js","assets/index.html-CGtFwkUa.js","assets/index.html-s-2iR5Kq.js","assets/index.html-DgyBBVHJ.js","assets/index.html-Ca6DD1G_.js","assets/index.html-D_XZPg0-.js","assets/index.html-BJG_sRVm.js","assets/index.html-DVACygbL.js","assets/index.html-CxIklPcI.js","assets/index.html-B1xtXuOB.js","assets/index.html-BA3IWeGz.js","assets/index.html-DgiAk9uP.js","assets/index.html-CJwbvsmb.js","assets/index.html-DDToGDDg.js","assets/index.html-C3gX7ugZ.js","assets/index.html-DEDCWTGT.js","assets/index.html-DArkrzN6.js","assets/index.html-DDygiyfO.js","assets/index.html-BAkaEfNd.js","assets/index.html-C0iKjp-b.js","assets/index.html-CKJF3bnr.js","assets/index.html-BWHq7u81.js","assets/index.html-Cfy5QRWZ.js","assets/index.html-D1HZ240f.js","assets/index.html-C8XHgw5u.js","assets/index.html-DPiD7FHs.js","assets/index.html-DyTRyL8J.js","assets/index.html-jCLLT66Q.js","assets/index.html-bT5NmzjR.js","assets/index.html-BN4w5k0q.js","assets/index.html-Dr-xB9rg.js","assets/index.html-Dn--pReK.js","assets/index.html-BFrzKSM6.js","assets/index.html-BE3_R9ly.js","assets/index.html-DRRQty0b.js","assets/index.html-DjRIXPzB.js","assets/index.html-DMmYJgAf.js","assets/index.html-BSwm5ueZ.js","assets/index.html-BwI3VwcI.js","assets/index.html-3EalKTut.js","assets/index.html-C3BAa-dY.js","assets/index.html-BIqFJdis.js","assets/index.html-BgQZRiHu.js","assets/index.html-CQyPbKPb.js","assets/index.html-UQHepx0R.js","assets/index.html-BXQf6N0m.js","assets/index.html-CQ6bGDuN.js","assets/index.html-CDwTnlhg.js","assets/index.html-CsZhO9DQ.js","assets/index.html-CXo7VbWm.js","assets/index.html-JYjcffBv.js","assets/index.html-dLyNv99O.js","assets/index.html-BNQiKo93.js","assets/index.html-B5QmlAol.js","assets/index.html-Cf5aEXTG.js","assets/index.html-BZqVEnYn.js","assets/index.html-C2-0l_lK.js","assets/index.html-Bx4ySZpM.js","assets/index.html-CjcAB3UK.js","assets/index.html-B9K9fFGq.js","assets/index.html-D7lSfI4J.js","assets/index.html-DDShDncB.js","assets/index.html-B_L4etaf.js","assets/index.html-Cvbiw44h.js","assets/index.html-BpfAUpRw.js","assets/index.html-DM14UGU6.js","assets/index.html-FlCEvksT.js","assets/index.html-p5TzRiZj.js","assets/index.html-Bi_67X1c.js","assets/index.html--XdWYAxt.js","assets/index.html-GHLd8_-J.js","assets/index.html-keGEMiYb.js","assets/index.html-ClrM-x4m.js","assets/index.html-5_yw3kzE.js","assets/index.html-CML1zCNN.js","assets/index.html-y2A9qwhe.js","assets/index.html-BOJNYL0J.js","assets/index.html-C8u-7_2E.js","assets/index.html-CMeI1EaQ.js","assets/index.html-QkdwWATF.js","assets/index.html-_vmqyye3.js","assets/index.html-CrVaXDYD.js","assets/index.html-Cv6UoqGx.js","assets/index.html-Onw5UyK8.js","assets/index.html-D3L4kJj4.js","assets/index.html-CxE806__.js","assets/index.html-CTyPFwsc.js","assets/index.html-DsE89hek.js","assets/index.html-BKNbMgJW.js","assets/index.html-BoARI0fm.js","assets/index.html-B9cEnCEX.js","assets/index.html-CPV8pwoj.js","assets/index.html-D9vVN9Iw.js","assets/index.html-BByTURbv.js","assets/index.html-DMCttZEz.js","assets/index.html-thDjsN9d.js","assets/index.html-C0zbD8jP.js","assets/index.html-CMxLgLGL.js","assets/index.html-DdV2wTqS.js","assets/index.html-BRwa9uBd.js","assets/index.html-DzKNVCRd.js","assets/index.html-Yp4yBm6z.js","assets/index.html-Dyay9xgT.js","assets/index.html-CvjyUiYt.js","assets/index.html-DQnvCnJf.js","assets/index.html-D6rN21i_.js","assets/index.html-CpqL5Hbq.js","assets/index.html-Can1beyc.js","assets/index.html-NEnGhYiV.js","assets/index.html-uoK81CSE.js","assets/index.html-BaEviHTR.js","assets/index.html-BJdvE8KF.js","assets/index.html-D9BC3gKd.js","assets/index.html-BPKQkbKz.js","assets/index.html-Bw62CsSB.js","assets/index.html-B8WZb2nZ.js","assets/index.html-5XiDBMfk.js","assets/index.html-qGRSdyYO.js","assets/index.html-B3h_y2mv.js","assets/index.html-U2DQT2xD.js","assets/index.html-DtnlwCHm.js","assets/index.html-Bq-wK7X9.js","assets/index.html-CdsbATWU.js","assets/index.html-Bw-UINDN.js","assets/index.html-rVsY0v9M.js","assets/index.html-CwC_CIaD.js","assets/index.html-Bk9qQp4G.js","assets/index.html-BTFXFPmZ.js","assets/index.html-CLF5cNHH.js","assets/index.html-Be6aVzEj.js","assets/index.html-DPiJ0I_R.js","assets/index.html-CYFc1Izw.js","assets/index.html-C1k5uMQP.js","assets/index.html-UNm8wvcS.js","assets/index.html-DxaurCy8.js","assets/index.html-DI6nRxmT.js","assets/index.html-DH4L2BTK.js","assets/index.html-DmMEGpa4.js","assets/index.html-BQL5lq_U.js","assets/index.html-CvB2Fw9k.js","assets/index.html-Bmzjuc_y.js","assets/index.html-DVYocQK6.js","assets/index.html-CroJWr-i.js","assets/index.html-JAKPd5Vk.js","assets/index.html-BtZYZxyY.js","assets/index.html-BxUtPgp3.js","assets/index.html-qKRVPrB7.js","assets/index.html-ChTUJVNX.js","assets/index.html-BfBIHwxV.js","assets/index.html-Bqs_9Lbv.js","assets/index.html-DaFd3_n8.js","assets/index.html-BmG5oBfG.js","assets/index.html-D03kgUNF.js","assets/index.html-CYh5xzDx.js","assets/index.html-B-PE-5md.js","assets/index.html-DTfZojU2.js","assets/index.html-COUQ4UwV.js","assets/index.html-D9lVcezD.js","assets/index.html-DSl7v6hL.js","assets/index.html-Cku57uS6.js","assets/index.html-Cu4SArqS.js","assets/index.html-T9iTYoER.js","assets/index.html-36SgF-p6.js","assets/index.html-CHOhUU_t.js","assets/index.html-BnA_qv9O.js","assets/index.html-lpfJ2Ex9.js","assets/index.html-B9SSlV4k.js","assets/index.html-C0o0srSq.js","assets/index.html-BIbKML5L.js","assets/index.html-BjqwsHos.js","assets/index.html-D2aIMvA3.js","assets/index.html-CKf_wrNg.js","assets/index.html-BR4gC4gT.js","assets/index.html-D_ID5fsB.js","assets/index.html-BV2c8LB7.js","assets/index.html-DrvszrS1.js","assets/index.html-DZ_tI-6t.js","assets/index.html-CKSZXQ1u.js","assets/index.html-I4fX_gyF.js","assets/index.html-QJEiEG2k.js","assets/index.html-DuiAxRyP.js","assets/index.html-Ducu2_1X.js","assets/index.html-DET7D6As.js","assets/index.html-dOkOnBin.js","assets/index.html-CYbN_m1E.js","assets/index.html-Bkwn7Twh.js","assets/index.html-rfm85_u5.js","assets/index.html-Be7M-lvE.js","assets/index.html-BYrrduIt.js","assets/index.html-B5W053y6.js","assets/index.html-DXkAj4ec.js","assets/index.html-CjdHl-_T.js","assets/index.html-BogF_eSe.js","assets/index.html-s7iyHd7H.js","assets/index.html-BuAWbrt4.js","assets/index.html-lv9zfNSA.js","assets/index.html-Tdxtmkvb.js","assets/index.html-B9o9eG0I.js","assets/index.html-B1aBuAYl.js","assets/index.html-D9a2PPVx.js","assets/index.html-B6w3GWQS.js","assets/index.html-CAG7T498.js","assets/index.html-ImLOmoFc.js","assets/index.html-C25TxQ3Q.js","assets/index.html-DJdDS6Km.js","assets/index.html-CvxZYhqP.js","assets/index.html-D4fs3_3n.js","assets/index.html-BgsP2h4F.js","assets/index.html-C52jstDv.js","assets/index.html-BXjdWoiK.js","assets/index.html-qFtNF6HG.js","assets/index.html-CqMyEGA2.js","assets/index.html-BFWglzfX.js","assets/index.html-BRbGi8jH.js","assets/index.html-CFXN9Gh5.js","assets/index.html-Bi7mJgHm.js","assets/index.html-CbvPJHxW.js","assets/index.html-BMfX1cZo.js","assets/index.html-BUNhV9rn.js","assets/index.html-BMdGiCB3.js","assets/index.html-CMzT7Du3.js","assets/index.html-BmVrcPRF.js","assets/index.html-BCIpkirq.js","assets/index.html-Bf07sd3w.js","assets/index.html-By5yBtVJ.js","assets/index.html-DnDRCmZX.js","assets/index.html-CtRxfhf7.js","assets/index.html-6ENY33Ow.js","assets/index.html-CLyHlAIf.js","assets/index.html-Bz51mExI.js","assets/index.html-BD7x6yq9.js","assets/index.html-1vVLTTJY.js","assets/index.html-DADLvpKM.js","assets/index.html-CCNSWYbp.js","assets/index.html-4wywJQ40.js","assets/index.html-D2vgvbp5.js","assets/index.html-BS98J1nL.js","assets/index.html-DtnCBxd1.js","assets/index.html-CeQPUKWX.js","assets/index.html-C5qFkwxY.js","assets/index.html-DWOFDIQZ.js","assets/index.html-9d1Mj3lU.js","assets/index.html-CKhX86vl.js","assets/index.html-BouZQoas.js","assets/index.html-3jDh6UEO.js","assets/index.html-TeW9m8kY.js","assets/index.html-DTxhB654.js","assets/index.html-BTbQc0em.js","assets/index.html-BZ-FTwhU.js","assets/index.html-DyWu66tP.js","assets/index.html-BwqulMee.js","assets/index.html-CfACB67c.js","assets/index.html-CAW2AKmY.js","assets/index.html-DUZPaScC.js","assets/index.html-BIfbtfKm.js","assets/index.html-B0sev9XN.js","assets/index.html-CdPvNycy.js","assets/index.html-0vl5BicL.js","assets/index.html-B4ignask.js","assets/index.html-c0gk1SMG.js","assets/index.html-Bw24m1f1.js","assets/index.html-DZpX2KZI.js","assets/index.html-BxUwoX_A.js","assets/index.html-BiClqyKj.js","assets/index.html-COi-RG10.js","assets/index.html-CMthnfxM.js","assets/index.html-D9Ou7n3Z.js","assets/index.html-CInZYX3v.js","assets/index.html-BuosH0Aa.js","assets/index.html-KuseMFDO.js","assets/index.html-DG3HEuR3.js","assets/index.html-5rwVYkoA.js","assets/index.html-BEHoYazi.js","assets/index.html-B6KMAu5o.js","assets/index.html-BypO2m-H.js","assets/index.html-Ihk2tX1i.js","assets/index.html-DBytiBt5.js","assets/index.html-gvlHdX_Z.js","assets/index.html-DVbNZC7K.js","assets/index.html-xrYFWKxQ.js","assets/index.html-2LTBC4M5.js","assets/index.html-d3LzzSw9.js","assets/index.html-BmX750mA.js","assets/index.html-V-W3U2Kz.js","assets/index.html-CorDa-rE.js","assets/index.html-brlqmnf_.js","assets/index.html-BePSLWt5.js","assets/index.html-Dm2pPA9S.js","assets/index.html-C_I5hcCG.js","assets/index.html-CEkGfNqR.js","assets/index.html-BxCbUg75.js","assets/index.html-uz9dH-zh.js","assets/index.html-Dtt3CGYe.js","assets/index.html-BUTTeil8.js","assets/index.html-Dl75Cec-.js","assets/index.html-BbXb7fwx.js","assets/index.html-Dn1sT_NI.js","assets/index.html-CfY3SZIy.js","assets/index.html-BVBKeHeA.js","assets/index.html-DyrF5Cou.js","assets/index.html-Bk8lI1rT.js","assets/index.html-ms7ZxBB7.js","assets/index.html-r0hGiY-l.js","assets/index.html-DMhRNrPC.js","assets/index.html-D4nbKfFY.js","assets/index.html-CntZ0dUj.js","assets/index.html-XubvQil_.js","assets/index.html-ls4Xjo_0.js","assets/index.html-qG8HUGS6.js","assets/index.html-F7gVx6pW.js","assets/index.html-DWG1v5au.js","assets/index.html-xasRAouD.js","assets/index.html-BFcfRrTs.js","assets/index.html-DT2ruy2V.js","assets/index.html-DFNRNuBz.js","assets/index.html-TwWBllcO.js","assets/index.html-CSVaGslS.js","assets/index.html-D5Q_M2Lu.js","assets/index.html-BjLoHWNn.js","assets/index.html-DMRBLNqQ.js","assets/index.html-Rsrg66ev.js","assets/index.html-Ixv0cB1b.js","assets/index.html-e1uuY-AV.js","assets/index.html-GSX2kUO0.js","assets/index.html-CrpG84jH.js","assets/index.html-C7gSAC6f.js","assets/index.html-CUt8haLr.js","assets/index.html-BQ5KacZi.js","assets/index.html-PE4KopHq.js","assets/index.html-riA4E7DX.js","assets/index.html-CdQ5rT5h.js","assets/index.html-Cqn_9m1Q.js","assets/index.html-CjCYaTbT.js","assets/index.html-DPSbD_qj.js","assets/index.html-Br0-wzaB.js","assets/index.html-98BkMfft.js","assets/index.html-BLGdNSz_.js","assets/index.html-CMQb54Ic.js","assets/index.html-BN7U-AIw.js","assets/index.html-DJSlFvBG.js","assets/index.html-CPUQVa-M.js","assets/index.html-ZzaHLWcD.js","assets/index.html-wv2VNigd.js","assets/index.html-6TFFqFsF.js","assets/index.html-Bad0OgJe.js","assets/index.html-KxVHv6On.js","assets/index.html-jSoKVp2Y.js","assets/index.html-Fum9ujEd.js","assets/index.html-Ba8IionT.js","assets/index.html-zW9CYC4W.js","assets/index.html-gxHXwctx.js","assets/index.html-PWFCa_SK.js","assets/index.html-CHBMeV2Z.js","assets/index.html-Bjb8w7ot.js","assets/index.html-DSyDYx_R.js","assets/index.html-D_xAy8JU.js","assets/index.html-CBiiVyc2.js","assets/index.html-By8I9OHf.js","assets/index.html-CpyygrMP.js","assets/index.html-DT2GnAgr.js","assets/index.html-CfIfRyOm.js","assets/index.html-BTiUiaMz.js","assets/index.html-C5daXUsH.js","assets/index.html-DnROx5pO.js","assets/index.html-CF0OvxQa.js","assets/index.html-CeoCz5AX.js","assets/index.html-Brh2siR8.js","assets/index.html-CNw6pR_i.js","assets/index.html-wYdqMku6.js","assets/index.html-c4lBsGt1.js","assets/index.html-BPhjbIm4.js","assets/index.html-B4hSPNM4.js","assets/index.html-BpY2_v7L.js","assets/index.html-DRfWmxh4.js","assets/index.html-wM1NBCYI.js","assets/index.html-ComsYGfv.js","assets/index.html-g5AFw3U-.js","assets/index.html-D0YyjZw2.js","assets/index.html-yrwOQET1.js","assets/index.html-Bq2xosRb.js","assets/index.html-Db0m7DkC.js","assets/index.html-n2z2-IHb.js","assets/index.html-t_mmEKT6.js","assets/index.html-DcpVF66f.js","assets/index.html-gjcKbEcl.js","assets/index.html-BA_Ys2Ip.js","assets/index.html-CfOfWZX-.js","assets/index.html-Da-H_NSC.js","assets/index.html-CQOKRjNk.js","assets/index.html-3iolcG_Y.js","assets/index.html-KuzBGuFl.js","assets/index.html-DYG4hxi2.js","assets/index.html-CSmdiGKj.js","assets/index.html-Ds2riILl.js","assets/index.html-C_UwcddE.js","assets/index.html-Cm_CqXm1.js","assets/index.html-BhjdV8Dl.js","assets/index.html-CXwFX3n9.js","assets/index.html-P924sruC.js","assets/index.html-CYDmz8NP.js","assets/index.html-BDOSgmHO.js","assets/index.html--e1FutLA.js","assets/index.html-XwVM3F6p.js","assets/index.html-U3KU0OME.js","assets/index.html-C2xRZTty.js","assets/index.html-BE62gVN1.js","assets/index.html-BSWlWHrf.js","assets/index.html-DspQKEBT.js","assets/index.html-CidMRv9U.js","assets/index.html-D_AYrqcX.js","assets/index.html-DzZePes7.js","assets/index.html-U9QPCeNN.js","assets/index.html-DpjxPAus.js","assets/index.html-C3e_Wozz.js","assets/index.html-DAvY9Hpl.js","assets/index.html-DyMwyfpo.js","assets/index.html-BATr6qdT.js","assets/index.html-DRlBHlcX.js","assets/index.html-CBxaUu1g.js","assets/index.html-C-WWTdX0.js","assets/index.html-Dtu2iGV-.js","assets/index.html-CM4crSM0.js","assets/index.html-DeGvOv4g.js","assets/index.html-CJv8f6vj.js","assets/index.html-BILWLSuX.js","assets/index.html-CF0r_eZL.js","assets/index.html-CtCVXcsn.js","assets/index.html-CEXEs5BO.js","assets/index.html-DWbEYqNb.js","assets/index.html-CF4nKW9N.js","assets/index.html-CXPiM06e.js","assets/index.html-LJlS_Odj.js","assets/index.html-FbesOjwF.js","assets/index.html-Cu0ACOWL.js","assets/index.html-C2LfX7Wo.js","assets/index.html-C8ld4SZL.js","assets/index.html-cGayFXE4.js","assets/index.html-BlqNw7tk.js","assets/index.html-VIj3UU7E.js","assets/index.html-Bx24nJ-k.js","assets/index.html-Dcm2hud4.js","assets/index.html-HGa6-6yf.js","assets/index.html-BKFWW00Q.js","assets/index.html-D-wi55MQ.js","assets/index.html-C3L0I_57.js","assets/index.html-CXmc9lHH.js","assets/index.html-DnQadmq6.js","assets/index.html-C2lEOWFM.js","assets/index.html-86xas-tM.js","assets/index.html-I40YXCm4.js","assets/index.html-CRAvfSI7.js","assets/index.html-CQXwmhKl.js","assets/index.html-DQySMDk2.js","assets/index.html-B0lig2Y0.js","assets/index.html-t_KfQIbS.js","assets/index.html-DNPIjDdo.js","assets/index.html-D_iWquXc.js","assets/index.html-U5_BdNsw.js","assets/index.html-BRCbnykW.js","assets/index.html-rvBXukMO.js","assets/index.html-4kgxcvy0.js","assets/index.html-BOW_hk6A.js","assets/index.html-BaNAjp0A.js","assets/index.html-DMOiXuOh.js","assets/index.html-BxNBJ1i3.js","assets/index.html-NnpFC9R7.js","assets/index.html-DmEQZixI.js","assets/index.html-DtPsWtlN.js","assets/index.html-Bn883GKA.js","assets/index.html-BE_OmyDz.js","assets/index.html-HR4z_ZbS.js","assets/index.html-DVszgLVH.js","assets/index.html-BmcBKgcg.js","assets/index.html-BWWXOsGt.js","assets/index.html-KWluqoyh.js","assets/index.html-CrTytglh.js","assets/index.html-Brm35bx6.js","assets/index.html-B6_iax2o.js","assets/index.html-CP_8nP2V.js","assets/index.html-DiN9IK_n.js","assets/index.html-BrPmhLQi.js","assets/index.html-BW0Yq6G5.js","assets/index.html-D7X_Jk_-.js","assets/index.html-1a86f8ha.js","assets/index.html-CGAIyp3b.js","assets/index.html-DiAzj8hw.js","assets/index.html-DKAQ991-.js","assets/index.html-isi9QOlz.js","assets/index.html-CZR9VGB2.js","assets/index.html-B_ZJyhqN.js","assets/index.html-Dz0o_EEK.js","assets/index.html-BWDxX-sg.js","assets/index.html-V2wbhWwX.js","assets/index.html-q4Poi92i.js","assets/index.html-BIZGjiKw.js","assets/index.html-0qtipdWl.js","assets/index.html-BH5MuM6u.js","assets/index.html-CwbVjbrj.js","assets/index.html-DrbjckTY.js","assets/index.html-Cd6FzG6n.js","assets/index.html-D_0D12X1.js","assets/index.html-CCbgIYXa.js","assets/index.html-DshNkwxU.js","assets/index.html-S6lmKd1K.js","assets/index.html-Dbr4eUpX.js","assets/index.html-i3syRRYq.js","assets/index.html-D6GOQRVl.js","assets/index.html-D0rbc0Fh.js","assets/index.html-DmF2Imnn.js","assets/index.html-DmnI5172.js","assets/index.html-CjrVO-66.js","assets/index.html-BuFMm1Up.js","assets/index.html-BdkLLWQj.js","assets/index.html-BRbCXRMA.js","assets/index.html-DuzjiqCb.js","assets/index.html-CA-NKnd7.js","assets/index.html-BoRsWUbs.js","assets/index.html-m25x8O8x.js","assets/index.html-CrIPs8gk.js","assets/index.html-BivNl46a.js","assets/index.html-RxTdklzv.js","assets/index.html-_BlQ2T_Z.js","assets/index.html-Cfj1hF4s.js","assets/index.html-DgYEcTRZ.js","assets/index.html-D1aal1PR.js","assets/index.html-B9d_hcCz.js","assets/index.html-Drt9lxBl.js","assets/index.html-C-ZV-uvB.js","assets/index.html-CQXP1kPf.js","assets/index.html-DaNGwyey.js","assets/index.html-Ca5qqsBD.js","assets/index.html-CApGuL8V.js","assets/index.html-DELrf5Yx.js","assets/index.html-dGeGfJhE.js","assets/index.html-GSZ63Eou.js","assets/index.html-C30kjEMz.js","assets/index.html-C4OwZJ6O.js","assets/index.html-BmQqlj1S.js","assets/index.html-DsQQCTyB.js","assets/index.html-DafFY9e8.js","assets/index.html-Bnu0Sz5K.js","assets/index.html-Dun-wy2w.js","assets/index.html-CeZMRAey.js","assets/index.html-BR3naCv6.js","assets/index.html-BSjYbUw5.js","assets/index.html-wz91Opc3.js","assets/index.html-Dp0gmGop.js","assets/index.html-DBrIBoI6.js","assets/index.html-C-L6kC87.js","assets/index.html-B-Uw_l0D.js","assets/index.html-BSK6quVh.js","assets/index.html-BjfKF35k.js","assets/index.html-BZig0qgt.js","assets/index.html-pcFfSd4e.js","assets/index.html-CfGGcM8t.js","assets/index.html-Dt-N0Vt5.js","assets/index.html-BvpSIfTf.js","assets/index.html-CFDpZi8Z.js","assets/index.html-BqfM3ukU.js","assets/index.html-DRM22gHJ.js","assets/index.html-BIaRVZpR.js","assets/index.html-xnbXbu_f.js","assets/index.html-CAjJfdEt.js","assets/index.html-Cls3nk7I.js","assets/index.html-B6S1ZgHA.js","assets/index.html-DQH1Fq2P.js","assets/index.html-e00tChr3.js","assets/index.html-dUFJTDuN.js","assets/index.html-ar5Qpx9i.js","assets/index.html-Ct8i_Jit.js","assets/index.html-ukKwf-m5.js","assets/index.html-CVYYiXxo.js","assets/index.html-m-7VXX6-.js","assets/index.html-IGJ88TXZ.js","assets/index.html-CnwWwr46.js","assets/index.html-CrCZmA7f.js","assets/index.html-QON0FkDK.js","assets/index.html-C07nj7JT.js","assets/index.html-zDaelfb3.js","assets/index.html-BFKDA0du.js","assets/index.html-D0YlbqQ3.js","assets/index.html-LiZlAHZk.js","assets/index.html-D5h3yY6o.js","assets/index.html-UV4EtiDj.js","assets/index.html-DLp7mnij.js","assets/index.html-I9N9Szdx.js","assets/index.html-D6T4mNI2.js","assets/index.html-BERV01FT.js","assets/index.html-CnBqsjyv.js","assets/index.html-Cz0L9LAp.js","assets/index.html-C9uayhG-.js","assets/index.html-BLxRlMx5.js","assets/index.html-u4LZgO4l.js","assets/index.html-COsZsQ5z.js","assets/index.html-Ds-ARP_E.js","assets/index.html-AgKINwes.js","assets/index.html-Bok3fZVU.js","assets/index.html-DFPu2Hkd.js","assets/index.html-Dc3auNtY.js","assets/index.html-C_UYjpBO.js","assets/index.html-CMlRkC4M.js","assets/index.html-DCLnYmeQ.js","assets/index.html-jQgLNQzb.js","assets/index.html-BqhT0OzB.js","assets/index.html-CtyWEAoM.js","assets/index.html-BCMmZrgg.js","assets/index.html-Brqm0pKD.js","assets/index.html-CAb5jscy.js","assets/index.html-BBzGzLVu.js","assets/index.html-BfQLqdX9.js","assets/index.html-BMXUXm6a.js","assets/index.html-Drr7Yxsy.js","assets/index.html-LCRRIsiN.js","assets/index.html-Dc77ksck.js","assets/index.html-DIF7UlLx.js","assets/index.html-Cyoi_1d6.js","assets/index.html-CyGMhWKF.js","assets/index.html-D-DCLOUH.js","assets/index.html-wIwzWWHh.js","assets/index.html-YVPLGtFL.js","assets/index.html-B3lvcFwK.js","assets/index.html-DKqXAQLz.js","assets/index.html-Duw1WvYY.js","assets/index.html-DgrlJtxW.js","assets/index.html-jOH5Iq5i.js","assets/index.html-C2IFjbLn.js","assets/index.html-DcuPtpZK.js","assets/index.html-C6UipZlx.js","assets/index.html-B5DDJfuZ.js","assets/index.html-BuMI0f2I.js","assets/index.html-CAjCCWrA.js","assets/index.html-DofGJGSc.js","assets/index.html-Daasd0QB.js","assets/index.html-Dm1okwQE.js","assets/index.html-yCfHUgha.js","assets/index.html-BMvTrdGJ.js","assets/index.html-CoQyBVdd.js","assets/index.html-DoQ7_DXF.js","assets/index.html-B_wVw6EJ.js","assets/index.html-B765GEuG.js","assets/index.html-DSBhQhjg.js","assets/index.html-BHOMCupf.js","assets/index.html-EzXaoq_V.js","assets/index.html-CB08G-SM.js","assets/index.html-pgn-PMTW.js","assets/index.html-CcNZzqk9.js","assets/index.html-aosG79Rk.js","assets/index.html-DX_08HOO.js","assets/index.html-C8xvb4h1.js","assets/index.html-DmJoxckQ.js","assets/index.html-Crva0FEk.js","assets/index.html-BPDeuTDi.js","assets/index.html-D7qM_ywM.js","assets/index.html-CGBincH-.js","assets/index.html-D9b7u0jK.js","assets/index.html-C4Zj4jhZ.js","assets/index.html-v9f_FPm_.js","assets/index.html-Cna2Py_m.js","assets/index.html-DfYMQLLc.js","assets/index.html-D3qOhBIz.js","assets/index.html-CnwcILVw.js","assets/index.html-G0CIyggV.js","assets/index.html-BN0BhE2t.js","assets/index.html-BNS9RYrG.js","assets/index.html-D8tAZmAU.js","assets/index.html-CMzpuAO0.js","assets/index.html-DOoomGaF.js","assets/index.html-BTi6kNsV.js","assets/index.html-BZAVsPNn.js","assets/index.html-DNklrRhR.js","assets/index.html-D_PEs0Oc.js","assets/index.html-CYNALuNu.js","assets/index.html-D8khCRrt.js","assets/index.html-xAfXd-9n.js","assets/index.html-B5rcITW1.js","assets/index.html-CgcQ7AfJ.js","assets/index.html-DMzyc2LX.js","assets/index.html-Ba9CfxTQ.js","assets/index.html-Bb2t-dGX.js","assets/index.html-DSqylvyw.js","assets/index.html-BtoDSzub.js","assets/index.html-DRCa1T9M.js","assets/index.html-CdYN5P7p.js","assets/index.html-DdCHSfKS.js","assets/index.html-BsR3V_JN.js","assets/index.html-Cs8HDnrt.js","assets/index.html-DWilPb7w.js","assets/index.html-Or-X4WtK.js","assets/index.html-CG61mOHr.js","assets/index.html-TzEw5YpW.js","assets/index.html-BmTxTme5.js","assets/index.html-CNJ8GBK6.js","assets/index.html-wkZHZafb.js","assets/index.html-btpMXSMq.js","assets/index.html-C9--f9Y8.js","assets/index.html-CUkI364I.js","assets/index.html-NuSwNkTg.js","assets/index.html-D0-DVkaC.js","assets/index.html-B6I145Sn.js","assets/index.html-BXU8P70e.js","assets/index.html-Cg7i2ljf.js","assets/index.html-CVFTHeDV.js","assets/index.html-gJrqnL3R.js","assets/index.html-cMthZk2d.js","assets/index.html-DY50ovuC.js","assets/index.html-DgCeX4rB.js","assets/index.html-C_miNNUM.js","assets/index.html-B11ORoCt.js","assets/index.html-xLWiDCT_.js","assets/index.html-BNseEMO6.js","assets/index.html-Dy6-CNAE.js","assets/index.html-irdcsGF-.js","assets/index.html-DZdanQUy.js","assets/index.html-DOurWnji.js","assets/index.html-LFfGyB_7.js","assets/index.html-CjcaGelp.js","assets/index.html-DKoRsbzN.js","assets/index.html-BxaiuC1T.js","assets/index.html-B7EBVRYz.js","assets/index.html-tPl8wTFL.js","assets/index.html-B_o8MRMk.js","assets/index.html-zECIr0Yb.js","assets/index.html-BGS_g5FC.js","assets/index.html-DXheDoxZ.js","assets/index.html-2lKdX_ZT.js","assets/index.html-CDnsNubJ.js","assets/index.html-DvGQVnx5.js","assets/index.html-DR-c7t1T.js","assets/index.html-C-2jXpZ7.js","assets/index.html-BaTmC5rz.js","assets/index.html-AyCua0X4.js","assets/index.html-Dml3golN.js","assets/index.html-69ZYN9wU.js","assets/index.html-BYVs0_uT.js","assets/index.html-B0hbvSye.js","assets/index.html-CS7YhXxx.js","assets/index.html-DWNLpte1.js","assets/index.html-CbaJPtrV.js","assets/index.html-CkbDD5z-.js","assets/index.html-Cnvwg6n9.js","assets/index.html-C0VkRISD.js","assets/index.html-vgMQZbbk.js","assets/index.html-BoW1onKN.js","assets/index.html-DbM-G3q4.js","assets/index.html-CEPfvJXq.js","assets/index.html-CDu0XFOp.js","assets/index.html-YZCwkhSw.js","assets/index.html-BkdNvs1T.js","assets/index.html-CB-bYpcH.js","assets/index.html-CeKvqcc7.js","assets/index.html-Co1JctQq.js","assets/index.html-_mGhZqVv.js","assets/index.html-ygLK056h.js","assets/index.html-6XazyMvx.js","assets/index.html-CKpLdAAA.js","assets/index.html-Ycl5Db4y.js","assets/index.html-Da4nJ6ZE.js","assets/index.html-DGoqbFg-.js","assets/index.html-C5D0cVLt.js","assets/index.html-V-L51T_O.js","assets/index.html-CqB_Zv1F.js","assets/index.html-DiYPmjDI.js","assets/index.html-Bk8U5S7X.js","assets/index.html-BekXGiu2.js","assets/index.html-uFUnpiNx.js","assets/index.html-DXwEQjJF.js","assets/index.html-BZBMpJIL.js","assets/index.html-BDCog6Gk.js","assets/index.html-C6kOzb9S.js","assets/index.html-BXRPyK54.js","assets/index.html-Cp9ZeZ5B.js","assets/index.html-ZUVzXGgg.js","assets/index.html-_Tkqc2Yi.js","assets/index.html-BjCJLA38.js","assets/index.html-vFokApTz.js","assets/index.html-B0nC5Msr.js","assets/index.html-Ck0iMOzn.js","assets/index.html-BxI1oLGm.js","assets/index.html-BjR4xAj_.js","assets/index.html-DGsBYlf8.js","assets/index.html-9ODggA76.js","assets/index.html-BMe55HZM.js","assets/index.html-Cu9iKG1b.js","assets/index.html-CBEq7fWa.js","assets/index.html-CP9JFR3g.js","assets/index.html-CVGNH2sa.js","assets/index.html-DgCrlnnO.js","assets/index.html-C02f0jGp.js","assets/index.html-bT8ksnAI.js","assets/index.html-BlFj3SYk.js","assets/index.html-BqVkuggQ.js","assets/index.html-pBgI9Xpv.js","assets/index.html-ToxULdb5.js","assets/index.html-OgDstoiT.js","assets/index.html-B8PlWbzd.js","assets/index.html-CLa3EnBw.js","assets/index.html-BD4Bt6fN.js","assets/index.html-SK52rnrB.js","assets/index.html-BYgMlSbl.js","assets/index.html-CrVv3OVR.js","assets/index.html-BD4KkM5j.js","assets/index.html-CmeUu6cf.js","assets/index.html-BflErDl9.js","assets/index.html-DEuMSu4y.js","assets/index.html-CJapRUbP.js","assets/index.html-D1-BTbJh.js","assets/index.html-GkmmG9Gv.js","assets/index.html-B9-axkMj.js","assets/index.html-x1HURoJB.js","assets/index.html-C5g8d3mE.js","assets/index.html-D-L4Fn-d.js","assets/index.html-CLAGmjRv.js","assets/index.html-Bjrcwube.js","assets/index.html-BjvXgcar.js","assets/index.html-DlzClLzB.js","assets/index.html-B7r5i7ta.js","assets/index.html-DDhxH7Fw.js","assets/index.html-BX6LOhHy.js","assets/index.html-DRz5ofJ9.js","assets/index.html-8LPM2qr5.js","assets/index.html-BQ9uEdYq.js","assets/index.html-3ZmAswO9.js","assets/index.html-DiGUZlYy.js","assets/index.html-OjVB2KJY.js","assets/index.html-BSfyrC1C.js","assets/index.html-BJgGM6fB.js","assets/index.html-BQUwx3kO.js","assets/index.html-tFCouEfM.js","assets/index.html-CbzaB7A2.js","assets/index.html-C8Ofock6.js","assets/index.html-SP9VtYEF.js","assets/index.html-RfIbKs29.js","assets/index.html-CQlgBYQ1.js","assets/index.html-D-jwm_QC.js","assets/index.html-D9vB0rdQ.js","assets/index.html-D5CP_1tQ.js","assets/index.html-COn3bh20.js","assets/index.html--mzjVmTW.js","assets/index.html-CjbkmeMo.js","assets/index.html-DwL3e0Ct.js","assets/index.html-fOhjrBtS.js","assets/index.html-tKWVD63S.js","assets/index.html-BskWcJd6.js","assets/index.html-CfhZwSVH.js","assets/index.html-B3-L_eTj.js","assets/index.html-BS-CAdej.js","assets/index.html-DpooO55Z.js","assets/index.html-5KbAjPkw.js","assets/index.html-CMhKymry.js","assets/index.html-DARSdCH6.js","assets/index.html-BmKh1YR8.js","assets/index.html-B3u6_99n.js","assets/index.html-CUbtz28V.js","assets/index.html-B0C7mDiX.js","assets/index.html-Cjx1-nEx.js","assets/index.html-DeV17xRD.js","assets/index.html-BvLucis1.js","assets/index.html-C4ehozJA.js","assets/index.html-CLCW1xeJ.js","assets/index.html-DRfeTm5L.js","assets/index.html-CVlclyAE.js","assets/index.html-CNDKBIh6.js","assets/index.html-DCikflCn.js","assets/index.html-C9ZnGlto.js","assets/index.html-8njpoMWN.js","assets/index.html-DpCD7cei.js","assets/index.html-TpGC16nm.js","assets/index.html-CTnHecKT.js","assets/index.html-DepqOJB9.js","assets/index.html-CJchtZ2y.js","assets/index.html-CxFNIprY.js","assets/index.html-C67NKXjQ.js","assets/index.html-DQ-6-11i.js","assets/index.html-Bl3CsLUJ.js","assets/index.html-B0tvaZtf.js","assets/index.html-BONxWJ_t.js","assets/index.html-8jjfAuRV.js","assets/index.html-CTRtAb5v.js","assets/index.html-BRp_jPR9.js","assets/index.html-C0-ZsSXy.js","assets/index.html-C4ibTS4q.js","assets/index.html-B6FS0f5G.js","assets/index.html-BWjRqmQU.js","assets/index.html-CBvclHle.js","assets/index.html-CL7elJHG.js","assets/index.html-WeRwIfUp.js","assets/index.html-eTjlPVnb.js","assets/index.html-H2QKP2Or.js","assets/index.html-CPCrpg4b.js","assets/index.html-Bbf_Ml0x.js","assets/index.html-DZ1um47E.js","assets/index.html-BwFMzC-Q.js","assets/index.html-D6wafLJM.js","assets/index.html-CnyXrTG_.js","assets/index.html-AZo5HVda.js","assets/index.html-BzAoe8OP.js","assets/index.html-B6HP61od.js","assets/index.html-DsSiXsuU.js","assets/index.html-Wc-EhANg.js","assets/index.html-BK-oCvnK.js","assets/index.html-ClKa86WM.js","assets/index.html-9xB4M77z.js","assets/index.html-DcGLRWw6.js","assets/index.html-BpMXgeDN.js","assets/index.html-C4TK71a4.js","assets/index.html-BtGC08nj.js","assets/index.html-BXPMGp5t.js","assets/index.html-Bf9sRq78.js","assets/index.html-CuDP8vRJ.js","assets/index.html-CbwZkH99.js","assets/index.html-k2x8ds9R.js","assets/index.html-2TogxTiH.js","assets/index.html-JYwfU5vZ.js","assets/index.html-AT3-O6Hc.js","assets/index.html-BRw41DRo.js","assets/index.html-CGPpHfuE.js","assets/index.html-B8hEu704.js","assets/index.html-FlcWLYC_.js","assets/index.html-CHTaQQAR.js","assets/index.html-LXUIJSki.js","assets/index.html-C07QdPiO.js","assets/index.html-DsnbWLNc.js","assets/index.html-qszcwub_.js","assets/index.html-pEe-wadr.js","assets/index.html-DVnESiK3.js","assets/index.html-6zcXWbBs.js","assets/index.html-CCSoJ4px.js","assets/index.html-Cz35Upfk.js","assets/index.html-BibSM0E1.js","assets/index.html-HK_eCL8E.js","assets/index.html-FhfYO3MX.js","assets/index.html-BNPigu58.js","assets/index.html-DPrVMJ-D.js","assets/index.html-CIUF9Bsr.js","assets/index.html-B9y9RTzR.js","assets/index.html-Dz0XRMdy.js","assets/index.html-BXt23JWU.js","assets/index.html-BNcsk0ZS.js","assets/index.html-Du0ytlcK.js","assets/index.html-BrubeWEI.js","assets/index.html-C0tTrJhj.js","assets/index.html-DGzANAFI.js","assets/index.html-BoEmyuqT.js","assets/index.html-2Wk7ZICo.js","assets/index.html-Bl6k96Wa.js","assets/index.html-CXeD5-1e.js","assets/index.html-ByOAUG2a.js","assets/index.html-B8j74u1S.js","assets/index.html-D86va9a0.js","assets/index.html-CwPqWJ_t.js","assets/index.html-F0pXk3gv.js","assets/index.html-C1pQA8ZO.js","assets/index.html-DPZZTjUL.js","assets/index.html-DP49Hjm1.js","assets/index.html-CanSwhtz.js","assets/index.html-BLvHsjhA.js","assets/index.html-z81j8OMD.js","assets/index.html-BL9CGZQI.js","assets/index.html-CsEVXEgm.js","assets/index.html-8-7c-wqh.js","assets/index.html-CdpN64Z5.js","assets/index.html-TWLHi6UQ.js","assets/index.html-CHzdCD0b.js","assets/index.html-VSEtWecG.js","assets/index.html-AZtrJ6WX.js","assets/index.html-CFHN1mj2.js","assets/index.html-C5l9rvmG.js","assets/index.html-YSWzKvOz.js","assets/index.html-ChsI6kcs.js","assets/index.html-C8isgdEu.js","assets/index.html-PMj80QEn.js","assets/index.html-DtTJjiE7.js","assets/index.html-DgAbeTfs.js","assets/index.html-CEW_lzBK.js","assets/index.html-tUwDRk4i.js","assets/index.html-DNaUxe1A.js","assets/index.html-B_soEmC6.js","assets/index.html-DTYKSLCo.js","assets/index.html-D7F8j0oQ.js","assets/index.html-BjCB5Cid.js","assets/index.html-Dg9saSLR.js","assets/index.html-oqXrVsTR.js","assets/index.html-BfeZn4F-.js","assets/index.html-BkhX6hNS.js","assets/index.html-BXzlCQNs.js","assets/index.html-4WZjr6YF.js","assets/index.html-Dy6rpSt0.js","assets/index.html-G7F8aTK9.js","assets/index.html-Dd8N0hSC.js","assets/index.html-CnDdzmKR.js","assets/index.html-aQSyKrOV.js","assets/index.html-PT8VtCln.js","assets/index.html-Bg-OdpZ3.js","assets/index.html-CB4j4HI7.js","assets/index.html-CzNOpA7X.js","assets/index.html-Bw7w8lNh.js","assets/index.html-C_bRYPKB.js","assets/index.html-BvnvDLXH.js","assets/index.html-DIdUfJwt.js","assets/index.html-C0v8zi28.js","assets/index.html-qdrm9SXl.js","assets/index.html-dgwZ90oV.js","assets/index.html-HyfcxuYf.js","assets/index.html-C8bKuorX.js","assets/index.html-CGxouxeW.js","assets/index.html-Cq68vOov.js","assets/index.html-D6DPoxCQ.js","assets/index.html-DD55WSdr.js","assets/index.html-B--fbh94.js","assets/index.html-BDYTahqh.js","assets/index.html-Dqlf_MWO.js","assets/index.html-DCEFzR8t.js","assets/index.html-CDddXHNP.js","assets/index.html-dNvJiDhF.js","assets/index.html-GVSCA9fP.js","assets/index.html-BkgR5qnm.js","assets/index.html-CONrikxt.js","assets/index.html-C2dp2v7O.js","assets/index.html-BSk_9qRQ.js","assets/index.html-rRk86bUz.js","assets/index.html-BRvm5kBr.js","assets/index.html-CCOaZG_f.js","assets/index.html-l9NyOFNn.js","assets/index.html-DJbpQFyP.js","assets/index.html-MKqQkRfK.js","assets/index.html-CEAYizWZ.js","assets/index.html-fatGLvb-.js","assets/index.html-CjoFEGGn.js","assets/index.html-B99W8CCI.js","assets/index.html-By5EV8Lo.js","assets/index.html-KaQa7C2T.js","assets/index.html-BJLHm9N6.js","assets/index.html-Cm9PKjCX.js","assets/index.html-BKIGaAB_.js","assets/index.html-Dk7QZH8Y.js","assets/index.html-BoxwfJV7.js","assets/index.html--wK4zOPo.js","assets/index.html-DGxcTHmI.js","assets/index.html-DUgO4N0z.js","assets/index.html-DPUyb5cQ.js","assets/index.html-BtJM0uUj.js","assets/index.html-Bg9TOBe-.js","assets/index.html-DPCif3_k.js","assets/index.html-haB5N_k0.js","assets/index.html-C-a3PUGh.js","assets/index.html-CPJ51UEo.js","assets/index.html-2kKaYEWC.js","assets/index.html-ceCtGE4F.js","assets/index.html-BDXmWhDY.js","assets/index.html-CIzXNB7B.js","assets/index.html-78Jv0B3W.js","assets/index.html-WbVLRZLG.js","assets/index.html-pnsT-of7.js","assets/index.html-CTdUd7cG.js","assets/index.html-DeN5S5tH.js","assets/index.html-D3Ome75_.js","assets/index.html-52c3i5qv.js","assets/index.html-DupsTlBc.js","assets/index.html-CX28CK3M.js","assets/index.html-DCBkHMF9.js","assets/index.html-tc4bSvjL.js","assets/index.html-C_FPG32-.js","assets/index.html-06XN9Pzx.js","assets/index.html-T0JXwxHb.js","assets/index.html-Bge9ZcX8.js","assets/index.html-BJP0h89m.js","assets/index.html-I5rtxjKd.js","assets/index.html-H68XKuDA.js","assets/index.html-DwxpHsHV.js","assets/index.html-CHdvfeKO.js","assets/index.html-BbWMMUsm.js","assets/index.html-Bdp-IChI.js","assets/index.html-l_t1U9LE.js","assets/index.html-C6tdv5kx.js","assets/index.html-ClQPZ3vq.js","assets/index.html-By8vQ-dg.js","assets/index.html-CBMoQcMA.js","assets/index.html-C-a8gkD7.js","assets/index.html-CrU2KYxz.js","assets/index.html-By7QlB-D.js","assets/index.html-B79dUgqp.js","assets/index.html-BFw1CI49.js","assets/index.html-DWWFGDrZ.js","assets/index.html-BgB2xl_W.js","assets/index.html-BI7uHFdb.js","assets/index.html-DC56qYA5.js","assets/index.html-8E17VxQi.js","assets/index.html-CVGQe8Q3.js","assets/index.html-CtX6TeX3.js","assets/index.html-CES36aca.js","assets/index.html-CLPRKCMP.js","assets/index.html-Dxub32Ug.js","assets/index.html-DZsw0PlJ.js","assets/index.html-BK6OwiDL.js","assets/index.html-DUXTux5r.js","assets/index.html-jyH0pXrG.js","assets/index.html-U7OL4oFR.js","assets/index.html-CjBAgSOw.js","assets/index.html-9S9uHERF.js","assets/index.html-CaEExTa3.js","assets/index.html-CNgTCgQh.js","assets/index.html-Crxh6HgD.js","assets/index.html-BcTcIBaS.js","assets/index.html-Cb53PwVx.js","assets/index.html-Ls-YRayV.js","assets/index.html-DGY91LE4.js","assets/index.html-h8kyElDt.js","assets/index.html-DuFVeDHO.js","assets/index.html-vdiHQX68.js","assets/index.html-Ci5u-8Xg.js","assets/index.html-BIDUgASU.js","assets/index.html-BgCDvyQl.js","assets/index.html-houa6i4m.js","assets/index.html-Cqktl2to.js","assets/index.html-C5i-MuLt.js","assets/index.html-B_KOQNKC.js","assets/index.html-Dl2fmCr1.js","assets/index.html-BjzuEiFd.js","assets/index.html-whPek5Fm.js","assets/index.html-x2UZelKb.js","assets/index.html-Dg1NdcUh.js","assets/index.html-CiWvC53G.js","assets/index.html-C8Kt6dN8.js","assets/index.html-Dr4duTyW.js","assets/index.html-DHOr13-7.js","assets/index.html-D5CKQ3ci.js","assets/index.html-Q5WYHE8-.js","assets/index.html-CNUTooIF.js","assets/index.html-DEgllOBH.js","assets/index.html-LlN0vVGB.js","assets/index.html-uXs0Juh2.js","assets/index.html-DlHZeC_H.js","assets/index.html-D9XyTmIO.js","assets/index.html-DGFGZE0f.js","assets/index.html-n8ZCtFpi.js","assets/index.html-DhM6oIk_.js","assets/index.html-Bx29tomA.js","assets/index.html-DRqP5DLD.js","assets/index.html-Xc51PG_a.js","assets/index.html-BfYjJn0B.js","assets/index.html-OYe8GcMe.js","assets/index.html-BOGWX0tI.js","assets/index.html-DDsir6-0.js","assets/index.html-RqSoxc9u.js","assets/index.html-BJaK2y-6.js","assets/index.html-DSEA-XsC.js","assets/index.html-Da7Vs-WZ.js","assets/index.html-CcIm1Tcs.js","assets/index.html-DQR82J9v.js","assets/index.html-C9txtKfH.js","assets/index.html--EJKhYgQ.js","assets/index.html-gJAww62I.js","assets/index.html-C7prz1_o.js","assets/index.html-C4mLaoQl.js","assets/index.html-CMJINi_h.js","assets/index.html-mILyU8Wx.js","assets/index.html-TNP2uIuH.js","assets/index.html-BMxg6Bpd.js","assets/index.html-CMuF70z1.js","assets/index.html-CMnSjWjc.js","assets/index.html-PMDQyeGR.js","assets/index.html-CmL26rfI.js","assets/index.html-CGXevLOT.js","assets/index.html-BNpg8JlU.js","assets/index.html-CiLZnD7w.js","assets/index.html-BDNREtmb.js","assets/index.html-CrtEHxQo.js","assets/index.html-C8WytyJ0.js","assets/index.html-CF50h40h.js","assets/index.html-Bi3eMUcn.js","assets/index.html-CQtnT6j6.js","assets/index.html-CdN7FKKS.js","assets/index.html-DGzfaK-h.js","assets/index.html-D5TfUJFl.js","assets/index.html-DOmg18oG.js","assets/index.html-B12CfgSa.js","assets/index.html-B2rLVxxn.js","assets/index.html-BRBEp6ye.js","assets/index.html-DKYqN3rc.js","assets/index.html-Cc0i4nAb.js","assets/index.html-ClHapl_C.js","assets/index.html-Di8dc1b4.js","assets/index.html-DR0CJ_al.js","assets/index.html-CaQvZu_U.js","assets/index.html-pCuvu2tp.js","assets/index.html-DzQXViiL.js","assets/index.html-Ca6waXRf.js","assets/index.html-BbMTupRM.js","assets/index.html-DM4XdbC3.js","assets/index.html-DblM9oPO.js","assets/index.html-CCb66atK.js","assets/index.html-0D_-rWQd.js","assets/index.html-BQ2oAkZq.js","assets/index.html-xCbhgBbw.js","assets/index.html-DbiXliHg.js","assets/index.html-uj6uh6--.js","assets/index.html-D2Fe_eWC.js","assets/index.html-BmeFzH1V.js","assets/index.html-C8hmd0CS.js","assets/index.html-Se7By-Yj.js","assets/index.html-BfRkI_IO.js","assets/index.html-BgAAUFIC.js","assets/index.html-Cz2nLZ-y.js","assets/index.html-DoZ-NAvF.js","assets/index.html-aO2h4SfB.js","assets/index.html-BJH0ULt3.js","assets/index.html-ChzggmS3.js","assets/index.html--Ci66W_d.js","assets/index.html-DsObaOlb.js","assets/index.html-Y8t-Czzo.js","assets/index.html-Cov5hF21.js","assets/index.html-CLqL8Yqe.js","assets/index.html-O4GzqZUz.js","assets/index.html-BIlFZxRO.js","assets/index.html-BvTyk0-X.js","assets/index.html-B2eQXpe7.js","assets/index.html-C_ogb_-q.js","assets/index.html-Bx5amRiY.js","assets/index.html-C60JDMkR.js","assets/index.html-DEN9_Ccy.js","assets/index.html-CANPgU9c.js","assets/index.html-BpNYPPWK.js","assets/index.html-DgcPw6vr.js","assets/index.html-BjwPhUVN.js","assets/index.html-SeK-RUVb.js","assets/index.html-DSx4Gyi1.js","assets/index.html-ex0siSff.js","assets/index.html-DHhBvTOj.js","assets/index.html-CyqhfE2E.js","assets/index.html-B-qZl3w7.js","assets/index.html-D81_o8hQ.js","assets/index.html-Bg1Nyun6.js","assets/index.html-0MoYNIsz.js","assets/index.html-9nD0CT6C.js","assets/index.html-BFnNYwLS.js","assets/index.html-BaTPeum9.js","assets/index.html-PkepY4OM.js","assets/index.html-BE0cfWnr.js","assets/index.html-BPW6JDw9.js","assets/index.html-Bm3gAEF1.js","assets/index.html-CAxp5FKg.js","assets/index.html-Loe5fAtF.js","assets/index.html-B9IGIq3B.js","assets/index.html-B9yZxNbZ.js","assets/index.html-CLIuNi6Q.js","assets/index.html-BRhYdVi0.js","assets/index.html-CMBqaQLH.js","assets/index.html-CxMd5Yyq.js","assets/index.html-DIoyH_9F.js","assets/index.html-DqXaRxDJ.js","assets/index.html-CgmDfLek.js","assets/index.html-eMx3R7eO.js","assets/index.html-BrqVZIse.js","assets/index.html-mmuwyO1O.js","assets/index.html-BZxywoay.js","assets/index.html-CoXIWRY1.js","assets/index.html-DR5NNhvC.js","assets/index.html-CWd-X1DP.js","assets/index.html-D1OhDOjk.js","assets/index.html-DlPiNVal.js","assets/index.html-BV6W4ODn.js","assets/index.html-BneYbq09.js","assets/index.html-DJBeYsuE.js","assets/index.html-Bb8O8AUV.js","assets/index.html-D_bL0-Zi.js","assets/index.html-Ciq3ux3s.js","assets/index.html-CxSOtqwG.js","assets/index.html-BQv7ONVa.js","assets/index.html-C_-5j3je.js","assets/index.html-aQipBvYz.js","assets/index.html-DzhT8tyq.js","assets/index.html-CQxHX2Ik.js","assets/index.html-CEkv7Pn3.js","assets/index.html-Cz6XAs0a.js","assets/index.html-CVe1HtKE.js","assets/index.html-B_A-gPoI.js","assets/index.html-Df97dVLX.js","assets/index.html-Cy8EDfdX.js","assets/index.html-DZQ36a1B.js","assets/index.html-CWgKmheM.js","assets/index.html-B-Ul4Ahq.js","assets/index.html-CvXMxsHf.js","assets/index.html-BrtKgSzt.js","assets/index.html-CNc_IZUY.js","assets/index.html-CjKyse0B.js","assets/index.html-DHPch2Ox.js","assets/index.html-CDniq8-b.js","assets/index.html-DCrgQi9-.js","assets/index.html-CoEA2DBr.js","assets/index.html-CKLkXL_D.js","assets/index.html-lbqdah8d.js","assets/index.html-BONSo6L3.js","assets/index.html-Cgb673sk.js","assets/index.html-Bhjl6aEg.js","assets/index.html-Dz-xS2cH.js","assets/index.html-DMYka6ye.js","assets/index.html-DiNS5Oqr.js","assets/index.html-b4ZMXhy2.js","assets/index.html-C5kEdtNy.js","assets/index.html-Bop0x0Ia.js","assets/index.html-ycDm496C.js","assets/index.html-CPQQfTpn.js","assets/index.html-CwPpdElB.js","assets/index.html-DbY2idC6.js","assets/index.html-Ldv1ojVH.js","assets/index.html-DWZlESsm.js","assets/index.html-D8S7JyLk.js","assets/index.html-MFrnvkkz.js","assets/index.html-B0RVcSEl.js","assets/index.html-C8hUsdxY.js","assets/index.html-cWo0E8I5.js","assets/index.html-Dbu2xeSH.js","assets/index.html-rE242bBL.js","assets/index.html-DcwEtH7T.js","assets/index.html-BVSghCBi.js","assets/index.html-GCFhAC0m.js","assets/index.html-DYQSlQmb.js","assets/index.html-DYtmEV2d.js","assets/index.html-CtGdMst9.js","assets/index.html-BlJehSc9.js","assets/index.html-uw15L_bh.js","assets/index.html-CbtRckzF.js","assets/index.html-DOGYmc7f.js","assets/index.html-Cm1Kjvt-.js","assets/index.html-BFW1p-F7.js","assets/index.html-CjSZ_Aff.js","assets/index.html-TGbgf0hX.js","assets/index.html-D2M696kA.js","assets/index.html-C4n4iVx2.js","assets/index.html-D6pA6TeN.js","assets/index.html-PZ-JogGr.js","assets/index.html-DvuwfdtM.js","assets/index.html-Y9Cxn5eR.js","assets/index.html-BAmOf82n.js","assets/index.html-DLRvm7aL.js","assets/index.html-CAVhZEri.js","assets/index.html-CRtXM-hv.js","assets/index.html-CtCFOo2M.js","assets/index.html-aQ3whcL0.js","assets/index.html-DwxBlUzN.js","assets/index.html-DtA1mURB.js","assets/index.html-QgBp_1K3.js","assets/index.html-BBzgzSv_.js","assets/index.html-DjR56iQV.js","assets/index.html-bxJgGcWa.js","assets/index.html-D_aq3B_1.js","assets/index.html-BjT8dXEU.js","assets/index.html-ByJEj_l4.js","assets/index.html-DzSZcvKn.js","assets/index.html-DIssAUPZ.js","assets/index.html-Bh5isuFd.js","assets/index.html-BJWDkoLW.js","assets/index.html-oHjlg47D.js","assets/index.html-BadZ_LnX.js","assets/index.html-1aKiod3x.js","assets/index.html-BY7sNcw7.js","assets/index.html-CJTHm-UK.js","assets/index.html-C8ie8YFI.js","assets/index.html-C8cxpZH1.js","assets/index.html-B93WjiJy.js","assets/index.html-CJMxMT4F.js","assets/index.html-XTTEPniB.js","assets/index.html-C_MYaiIM.js","assets/index.html-f9L9HmNf.js","assets/index.html-lZisZ3CO.js","assets/index.html-B9BYvmH0.js","assets/index.html-Bitf1jW1.js","assets/index.html-DxHTEMW3.js","assets/index.html-BXxj3WhM.js","assets/index.html-x07WjW67.js","assets/index.html-C3dFmHm6.js","assets/index.html-DqEdXW2l.js","assets/index.html-CGblR38C.js","assets/index.html-Bt9oDY94.js","assets/index.html-BfOhT_ou.js","assets/index.html-DNNPIRS5.js","assets/index.html-B0HXiwvF.js","assets/index.html-fKYhFp0e.js","assets/index.html-gqmCER_U.js","assets/index.html-3rIydQsW.js","assets/index.html-Dv32sMLI.js","assets/index.html-LPCDnOoq.js","assets/index.html-BjaDwxZl.js","assets/index.html-DkNRfH9d.js","assets/index.html-Cf1Be4Lw.js","assets/index.html-zV4FQIJf.js","assets/index.html-Bd7zf_Q7.js","assets/index.html-BRc7ODKh.js","assets/index.html-Dy_dL0mW.js","assets/index.html-BCGNrfHu.js","assets/index.html-D6_r94MM.js","assets/index.html-Cd1wcZz6.js","assets/index.html-BLvDzQmj.js","assets/index.html-BW7b-yIs.js","assets/index.html-BS88RKci.js","assets/index.html-Bcc4GzOK.js","assets/index.html-DRw4tHAM.js","assets/index.html-DI9JGq50.js","assets/index.html-CC4jURjk.js","assets/index.html-CN3Vzm2q.js","assets/index.html-Ct63TzDM.js","assets/index.html-B3lpQN0a.js","assets/index.html-DEL0m4R1.js","assets/index.html-N4TfopvK.js","assets/index.html-DvWKwytC.js","assets/index.html-CW8UCIJg.js","assets/index.html-FXI-jA5w.js","assets/index.html-BqrM7tDj.js","assets/index.html-DJEFIl05.js","assets/index.html-C6wAFz5M.js","assets/index.html-CKO2sqz7.js","assets/index.html-Bo-Y-NDU.js","assets/index.html-d5eybOLC.js","assets/index.html-BhBSlbw0.js","assets/index.html-Eg6lpGJl.js","assets/index.html-C1dFS2L9.js","assets/index.html-DikkFFoA.js","assets/index.html-C-V7ka3F.js","assets/index.html-CgX65CBA.js","assets/index.html-ChMWRpdJ.js","assets/index.html-C7yx2bxI.js","assets/index.html-C57wII9d.js","assets/index.html-BmFG8sLm.js","assets/index.html-BIdxNiaA.js","assets/index.html-DzjgpfZ_.js","assets/index.html-BJvr5071.js","assets/index.html-DaUZ3QQJ.js","assets/index.html-DHulRoh_.js","assets/index.html-BlmtOYno.js","assets/index.html-r79AgXXn.js","assets/index.html-C5NYh_Qu.js","assets/index.html-o8HTh1aI.js","assets/index.html-Co7_TTtl.js","assets/index.html-CxvFYHB2.js","assets/index.html-B2WNOjKN.js","assets/index.html-DJJeDYAo.js","assets/index.html-CYBksxat.js","assets/index.html-Dft84WSb.js","assets/index.html-DcSLPvf3.js","assets/index.html-JxdEbztH.js","assets/index.html--yQ32OWW.js","assets/index.html-DD8bWtBz.js","assets/index.html-CcXLm9KH.js","assets/index.html-46njzWt7.js","assets/index.html-_nE0vL3m.js","assets/index.html-6kI6LrQT.js","assets/index.html-rOOI1GcR.js","assets/index.html-CU-YaS2g.js","assets/index.html-BDXuRY2J.js","assets/index.html-BOv653PK.js","assets/index.html-CakSvZ88.js","assets/index.html-DvCHtATM.js","assets/index.html-3Lne7LjE.js","assets/index.html-CCS5mPzM.js","assets/index.html-BMsgmbeu.js","assets/index.html-CB271D5E.js","assets/index.html-DxZiSd6o.js","assets/index.html-DQfc6x9W.js","assets/index.html-tGsKL6kn.js","assets/index.html-Cn9FCB4s.js","assets/index.html-BgiBzsTj.js","assets/index.html-BaLYfDUZ.js","assets/index.html-BuJy1mze.js","assets/index.html-CNDpfTxL.js","assets/index.html-BCfWOhvQ.js","assets/index.html-CKQA3WP2.js","assets/index.html-CLMnw4D8.js","assets/index.html-R3G-Qq6-.js","assets/index.html-C2jWgrWH.js","assets/index.html-CYkTni1E.js","assets/index.html-swNNltGf.js","assets/index.html-COKy-VgB.js","assets/index.html-BzxjYImu.js","assets/index.html-BWG5VUPP.js","assets/index.html-tqfTJjqA.js","assets/index.html-ChhXw1aJ.js","assets/index.html-a96kxRXv.js","assets/index.html-Dy5Y-SXA.js","assets/index.html-CSCFmTON.js","assets/index.html-BOeCE4YK.js","assets/index.html-CWU6LmgQ.js","assets/index.html-BGPZvxdT.js","assets/index.html-DAiMnzoh.js","assets/index.html-B9mzOT-5.js","assets/index.html-Dkxv6qE-.js","assets/index.html-BbMg3IFt.js","assets/index.html-BwnLQyp0.js","assets/index.html-BEWyJS4C.js","assets/index.html-CoIn2kdM.js","assets/index.html-IpKG5JUv.js","assets/index.html-qagQb749.js","assets/index.html-DcaT8vWc.js","assets/index.html-C0jw-gJG.js","assets/index.html-BG-KlgW0.js","assets/index.html-T3DeM6cz.js","assets/index.html-f_s6SUoD.js","assets/index.html-BEFNu4TO.js","assets/index.html-BRRudV-9.js","assets/index.html-BwGtlimQ.js","assets/index.html-DhzQl4jG.js","assets/index.html-DBTBsD4X.js","assets/index.html-BSPSI3wI.js","assets/index.html-GZXG03eh.js","assets/index.html-qcT2FXCf.js","assets/index.html-ChQq3ono.js","assets/index.html-CWevJOya.js","assets/index.html-Bv1fSUik.js","assets/index.html-B7LNYG-7.js","assets/index.html-6ijXJDmP.js","assets/index.html-CNFg7VK7.js","assets/index.html-CEDmfMJO.js","assets/index.html-CTQJj5Us.js","assets/index.html-X_KvqngP.js","assets/index.html-Cxod3_Rj.js","assets/index.html-B7C3OyPc.js","assets/index.html-BKnn7iI-.js","assets/index.html-MYXbzpwI.js","assets/index.html-KhNOB4rI.js","assets/index.html-BxTpazK4.js","assets/index.html-B1WBg8Pn.js","assets/index.html-GmPuOGMr.js","assets/index.html-CDP4XKXG.js","assets/index.html-BW-RhOp1.js","assets/index.html-DZBrqlfY.js","assets/index.html-DvSOIwxE.js","assets/index.html-CamZLykg.js","assets/index.html-CW60G35m.js","assets/index.html-D01wLkPm.js","assets/index.html-0bzqr3oX.js","assets/index.html-CLA8u-P7.js","assets/index.html-D6k9vXPX.js","assets/index.html-yDvvG5sx.js","assets/index.html-CvYFbN6y.js","assets/index.html-2nH4EwJ5.js","assets/index.html-C8NLfnil.js","assets/index.html-DGvCyTf8.js","assets/index.html-BdeJw-J5.js","assets/index.html-DmtH3cBB.js","assets/index.html-CrP2mf0P.js","assets/index.html-Tz8zY4az.js","assets/index.html-Ch8aedIK.js","assets/index.html-eFoamue5.js","assets/index.html-B3jgOxOF.js","assets/index.html-CaoMxq20.js","assets/index.html-DHAswnnG.js","assets/index.html-CBQgsb_8.js","assets/index.html-DT662O2R.js","assets/index.html-HDp6BLwa.js","assets/index.html--vt6lr10.js","assets/index.html-Cjo4UnyL.js","assets/index.html-BnNl7a8h.js","assets/index.html-A6jVKA03.js","assets/index.html-BkEKGUv2.js","assets/index.html-CHZON9YZ.js","assets/index.html-DsmISv4D.js","assets/index.html-VsmKWl3-.js","assets/index.html-CpIl9bpa.js","assets/index.html-BIIpSzTt.js","assets/index.html-Dv1b8btJ.js","assets/index.html-aF54pr8K.js","assets/index.html-BrL1Ty6H.js","assets/index.html-CX1DVjfC.js","assets/index.html-C_2Kci8h.js","assets/index.html-fzAAZTLX.js","assets/index.html-CslQU7xS.js","assets/index.html-Blm6iUBv.js","assets/index.html-ByfoEpEo.js","assets/index.html-BVY9uk37.js","assets/index.html-C4BMPOb3.js","assets/index.html-CCPYtNYF.js","assets/index.html-D4Vd3IQP.js","assets/index.html-Bk4dVcDQ.js","assets/index.html-D5rKSVqD.js","assets/index.html-BVES6v9n.js","assets/index.html-C2IxjMmK.js","assets/index.html-BBjd4D4i.js","assets/index.html-PAUIyi3s.js","assets/index.html-HAfM5rUV.js","assets/index.html-IrN19lY-.js","assets/index.html-Bef_Knye.js","assets/index.html-Bh0_zdeV.js","assets/index.html-CK06mBZr.js","assets/index.html-DhI2lhfj.js","assets/index.html-gkdBaT7-.js","assets/index.html-B2S6DzXo.js","assets/index.html-BJC8YGWa.js","assets/index.html-Bciz0oM_.js","assets/index.html-Cyyn77nN.js","assets/index.html-KBGvoyoa.js","assets/index.html-BdaiFYOo.js","assets/index.html-DNJj8UWb.js","assets/index.html-B-nva2tH.js","assets/index.html-BTsLe9wS.js","assets/index.html-CjpuUgdM.js","assets/index.html-bPbwTjSt.js","assets/index.html-3dZ3VocQ.js","assets/index.html-DsYC5vcl.js","assets/index.html-wdtE2QnE.js","assets/index.html-QAwPelBr.js","assets/index.html-BZ4zWlvX.js","assets/index.html-eEl5N_GA.js","assets/index.html-B4Z0kl-p.js","assets/index.html-YpHOM4M6.js","assets/index.html-BlYoeJ0p.js","assets/index.html-rh_YxTPy.js","assets/index.html-U1s93n6O.js","assets/index.html-B0ZfnaMI.js","assets/index.html-u-lZUE9e.js","assets/index.html-DfbCAvyN.js","assets/index.html-gyQW92CR.js","assets/index.html-B1_ZOQrI.js","assets/index.html-Bm8zJlNw.js","assets/index.html-Dgda2Irs.js","assets/index.html-DHWxhEaS.js","assets/index.html-D1MPRBrf.js","assets/index.html-CxEV3jTJ.js","assets/index.html-C1wEw1gO.js","assets/index.html-DAtQHg6v.js","assets/index.html-oHvdV7_s.js","assets/index.html-DBOo4xDC.js","assets/index.html-De3mQpzb.js","assets/index.html-BLATa7Vi.js","assets/index.html-C7yF2mKI.js","assets/index.html-CC30gxSn.js","assets/index.html-CkYsQ7WZ.js","assets/index.html-C8Kykmpo.js","assets/index.html-DRX1DlgY.js","assets/index.html-Dpwhkx-u.js","assets/index.html-Gqbo5EVu.js","assets/index.html-DAIcX9vY.js","assets/index.html-D8l92-Wh.js","assets/index.html-D0RbCzLQ.js","assets/index.html--313qxlq.js","assets/index.html-2t0oBfby.js","assets/index.html-C0mwuE7I.js","assets/index.html-BNjP_zM6.js","assets/index.html-MbVWmjle.js","assets/index.html-BvFtO50w.js","assets/index.html-iUOWFJsj.js","assets/index.html-DROzqk5r.js","assets/index.html-BuR0oQFl.js","assets/index.html-CIeZpmgb.js","assets/index.html-CdrtBjoj.js","assets/index.html-BsGjk-OK.js","assets/index.html-D4dWOy8C.js","assets/index.html-C_75rlke.js","assets/index.html-BSSiQk4U.js","assets/index.html-CFQeO_Ka.js","assets/index.html-BXKoDVS4.js","assets/index.html-FrUEjI3q.js","assets/index.html-ucXbmGyh.js","assets/index.html-Dv2hPPpw.js","assets/index.html-v8zR5Dkm.js","assets/index.html-CUVWoSSR.js","assets/index.html-BujFvh3E.js","assets/index.html-C0Lh5iLw.js","assets/index.html-GK_sxAHN.js","assets/index.html-D4-vyZdy.js","assets/index.html-DKL2wKtS.js","assets/index.html-Ca0Pcp8z.js","assets/index.html-B-5tn8et.js","assets/index.html-Ba_w6ft2.js","assets/index.html-CvfSB6nm.js","assets/index.html-BTOA9OaK.js","assets/index.html-BvcIX5_B.js","assets/index.html-imMXKsni.js","assets/index.html-DpxvCrPM.js","assets/index.html-B01SD_Wd.js","assets/index.html-BKGAm0M_.js","assets/index.html-CcM0bVX7.js","assets/index.html-CQ72ZKIs.js","assets/index.html-DvxlQ8Ax.js","assets/index.html-DLloETXI.js","assets/index.html-PPgCl1_j.js","assets/index.html-8nl1ctLj.js","assets/index.html-BYROFcyw.js","assets/index.html-Ddf9xaC3.js","assets/index.html-DvSiI2sK.js","assets/index.html-CzxTj1Un.js","assets/index.html-BlOJjiuA.js","assets/index.html-GgCeKxsE.js","assets/index.html-CMIZTQjx.js","assets/index.html-Db_dUG_r.js","assets/index.html-DOD3JHMk.js","assets/index.html-CKgioTc1.js","assets/index.html-ClTvphCa.js","assets/index.html-DiH5V9oV.js","assets/index.html-DrdnLsrc.js","assets/index.html-Cad3MNMH.js","assets/index.html-CP3qkBR_.js","assets/index.html-DKgqdaA0.js","assets/index.html-CkNG8pX4.js","assets/index.html-DGPCCrK1.js","assets/index.html-BQKZt8iv.js","assets/index.html-C3dd-C3F.js","assets/index.html-D950IU2b.js","assets/index.html-nqZgNBOO.js","assets/index.html-DbijfANN.js","assets/index.html-Dt6uipu9.js","assets/index.html-RquD44MT.js","assets/index.html-ByyH3mVC.js","assets/index.html-D5YzpCgT.js","assets/index.html-DJnoROSL.js","assets/index.html-DXUPhSAA.js","assets/index.html-OKXxhMnt.js","assets/index.html-D4c8Pw1w.js","assets/index.html-70DrA6T-.js","assets/index.html-CEbFd2Ac.js","assets/index.html-QdInjvvg.js","assets/index.html-C8mQSmo3.js","assets/index.html-CZrgNATY.js","assets/index.html-BLk6AuLX.js","assets/index.html-pgrpF3DF.js","assets/index.html-C-DRkrku.js","assets/index.html-CGMAxb5c.js","assets/index.html-DEj3dD76.js","assets/index.html-Dm9NjMfY.js","assets/index.html-C0kWxa8L.js","assets/index.html-BEZ3NQwp.js","assets/index.html-D8oQhdmc.js","assets/index.html-BPWQ6Bqz.js","assets/index.html-BoWCVHC5.js","assets/index.html-DnP1XIzo.js","assets/index.html-_1rc6Oh8.js","assets/index.html-Dm7tpIy2.js","assets/index.html-Ckhy3Upe.js","assets/index.html-B5R4YWg7.js","assets/index.html-C4JTnEbn.js","assets/index.html-DFkk0P_L.js","assets/index.html-DW8nphEG.js","assets/index.html-Sz97Y9Pp.js","assets/index.html-BmEsqyfm.js","assets/index.html-CPRhuN1N.js","assets/index.html-BxbnwxIc.js","assets/index.html-VF7cu1uB.js","assets/index.html-CQlLv3dC.js","assets/index.html-CQknQyox.js","assets/index.html-B4PnNs1V.js","assets/index.html-CEEgXlCF.js","assets/index.html-dcNcTih8.js","assets/index.html-BjBxVPiF.js","assets/index.html-mPl_sv_A.js","assets/index.html-BdMnEjPI.js","assets/index.html-DjM6cTM4.js","assets/index.html-D1aaq9iw.js","assets/index.html-PAKaauRN.js","assets/index.html-DBXdc9-a.js","assets/index.html-B62J73ri.js","assets/index.html-C8UMr4gE.js","assets/index.html-Bzq6O2W9.js","assets/index.html-BjsMp41Z.js","assets/index.html-DWWH6GFB.js","assets/index.html-Cr4EXE5u.js","assets/index.html-CypnEE5C.js","assets/index.html-BllaWRgc.js","assets/index.html-CU8viLeS.js","assets/index.html-Bflkqcc7.js","assets/index.html-e_hE-h3O.js","assets/index.html-C9IuYYRd.js","assets/index.html-DErtjLaC.js","assets/index.html-CSkas68j.js","assets/index.html-Dw2u2Xn1.js","assets/index.html-BMFMl9ys.js","assets/index.html-CIgGFNJR.js","assets/index.html-C0dMeX4p.js","assets/index.html-GafbP-o2.js","assets/index.html-BN83e2DE.js","assets/index.html-CTJnCoYx.js","assets/index.html-DoHLD90l.js","assets/index.html-RpkY23cL.js","assets/index.html-q915yIAR.js","assets/index.html-B7byuYqH.js","assets/index.html-D5GdRtW7.js","assets/index.html-Dme67JNR.js","assets/index.html-5yLoKS2b.js","assets/index.html-Cs9iSiRZ.js","assets/index.html-CA79lthX.js","assets/index.html-BBalmBvH.js","assets/index.html-jZnwq92S.js","assets/index.html-DIDPNwGH.js","assets/index.html-DQm9kouZ.js","assets/index.html-CuxxxtoF.js","assets/index.html-DplkWPpg.js","assets/index.html-BprSm3ai.js","assets/index.html-gYIK_Fmk.js","assets/index.html-PmlGIY0w.js","assets/index.html-BuZgWPTe.js","assets/index.html-CA442oas.js","assets/index.html-C7p9uy2w.js","assets/index.html-Bdj0JabA.js","assets/index.html-DtTfBa72.js","assets/index.html-CVZ03snZ.js","assets/index.html-sxXiFT6X.js","assets/index.html-cyj01XY2.js","assets/index.html-DyGBdn6A.js","assets/index.html-BIW9za2e.js","assets/index.html-n0XYxlSj.js","assets/index.html-DwOdFGsc.js","assets/index.html-CwM-8Dl4.js","assets/index.html-CebRACKH.js","assets/index.html-Y7joX6q7.js","assets/index.html-CngBDk8_.js","assets/index.html-C5irVuh8.js","assets/index.html-COVndX9y.js","assets/index.html-Dn3iKnO4.js","assets/index.html-BThug1P1.js","assets/index.html-BZJC1Qy4.js","assets/index.html-zjW4AD0f.js","assets/index.html-DZTcMDa7.js","assets/index.html-CIiz06I2.js","assets/index.html-CnsU7PbE.js","assets/index.html-CjyVcTyh.js","assets/index.html-C5FsjWyZ.js","assets/index.html-Diepu2dY.js","assets/index.html-D0MnbsFU.js","assets/index.html-C1XEkrwh.js","assets/index.html-CTanSnHz.js","assets/index.html-k98FGvqq.js","assets/index.html-DxZmTvBJ.js","assets/index.html-CbRyEhjH.js","assets/index.html-or_0kuXj.js","assets/index.html-DLwRzSUa.js","assets/index.html-CgXxwo1c.js","assets/index.html-BWXchyEt.js","assets/index.html-BSjSaa2V.js","assets/index.html-DLtWKk5t.js","assets/index.html-iLcJ1UYo.js","assets/index.html-9FSxDtSm.js","assets/index.html-D3JVi_Wg.js","assets/index.html-CbmPcI1b.js","assets/index.html-zf2iAvHD.js","assets/index.html-DxBDa5Fx.js","assets/index.html-C-BUcFHU.js","assets/index.html-DdIKVbMX.js","assets/index.html-C_eSpdS8.js","assets/index.html-Cg_hqaO9.js","assets/index.html-CRIIM3cQ.js","assets/index.html-Co2fNwNc.js","assets/index.html-MPhvEUUA.js","assets/index.html-CHcjbp0P.js","assets/index.html-Cjsvkw9C.js","assets/index.html-NboGRhnJ.js","assets/index.html-DYwQ_H0E.js","assets/index.html-B-pe639p.js","assets/index.html-CbpUvbN0.js","assets/index.html-DZGvjV0z.js","assets/index.html-Bc87GnZV.js","assets/index.html-B_VvUrTd.js","assets/index.html-DnqeRTtD.js","assets/index.html-BArjNRRW.js","assets/index.html-CXGi1h3R.js","assets/index.html-x897yBEf.js","assets/index.html-Cu4clJYm.js","assets/index.html-ByocT82X.js","assets/index.html-BOvpM_dz.js","assets/index.html-CilP0Xoh.js","assets/index.html-Cv2jn6s-.js","assets/index.html-BmoPn50S.js","assets/index.html-CDSl2p92.js","assets/index.html-CeYeGqpg.js","assets/index.html-DcauUBnm.js","assets/index.html-BTkHT5ZI.js","assets/index.html-Bp-3CQVs.js","assets/index.html-D76B8I3u.js","assets/index.html-S9K66oUx.js","assets/index.html-EnOFQdRp.js","assets/index.html-DuD7Nkd0.js","assets/index.html-COJnRNSb.js","assets/index.html-C50lYIcn.js","assets/index.html-BqqND4wK.js","assets/index.html-C8tpXo8o.js","assets/index.html-CJGSqNrT.js","assets/index.html-ggXFK8E2.js","assets/index.html-7G8qpnFA.js","assets/index.html-Ct1T984V.js","assets/index.html-B1MFnctp.js","assets/index.html-BZPfBJkk.js","assets/index.html-DxTsideo.js","assets/index.html-Bkw2iKjN.js","assets/index.html-CVuaOkSg.js","assets/index.html-CBlnzerD.js","assets/index.html-BHcKLVt7.js","assets/index.html-D3VWE-cV.js","assets/index.html-3N2xu8gI.js","assets/index.html-ByQKygWg.js","assets/index.html-Bv5f_1vY.js","assets/index.html-GceZceX4.js","assets/index.html-DQZ0atcR.js","assets/index.html-TeFqlF6v.js","assets/index.html-DBhIvE1J.js","assets/index.html-CluP6X74.js","assets/index.html-CmcrjfMz.js","assets/index.html-DejtE-2R.js","assets/index.html-0l2Vee-F.js","assets/index.html-Df1qjbJV.js","assets/index.html-D493WE6C.js","assets/index.html-CAdVO-DF.js","assets/index.html-Bi4KMU4r.js","assets/index.html-eHdCEMdh.js","assets/index.html-CBURVd6m.js","assets/index.html-B54sxhsT.js","assets/index.html-x6npVI--.js","assets/index.html-gx0jjfC3.js","assets/index.html-DNAQUafK.js","assets/index.html-DT1W0kmS.js","assets/index.html-DGN6C1ye.js","assets/index.html-Dff3odCH.js","assets/index.html-DaytNhJw.js","assets/index.html-D4o82O_l.js","assets/index.html-DPT1448Z.js","assets/index.html-Di8XGvbB.js","assets/index.html-BdEP_7wo.js","assets/index.html-CwqpZ8KK.js","assets/index.html-BrY-elCv.js","assets/index.html-QOFtXboa.js","assets/index.html-DIUmvRES.js","assets/index.html-Dq4O3KFU.js","assets/index.html-COO2pDde.js","assets/index.html-CpF-54fM.js","assets/index.html-BhIDy67C.js","assets/index.html-DIyjjlzM.js","assets/index.html-BSnrPo4j.js","assets/index.html-BIRJQGnc.js","assets/index.html-qED2Vts6.js","assets/index.html-DY4T5AI9.js","assets/index.html-CYZnz0s_.js","assets/index.html-BJD31QYx.js","assets/index.html-B5KvPEg5.js","assets/index.html-CO-1Tpoo.js","assets/index.html-D7o1liOQ.js","assets/index.html-CTxRWz6A.js","assets/index.html--EZe7rgc.js","assets/index.html-CuC5GAdy.js","assets/index.html-DWnaV3kt.js","assets/index.html-BguNztEO.js","assets/index.html-KuJAQM8D.js","assets/index.html-BYA93oPW.js","assets/index.html-B2fSx9Ar.js","assets/index.html-BfI3n1iJ.js","assets/index.html-dciXAeX0.js","assets/index.html-EOu_fYBm.js","assets/index.html-B9M25DKp.js","assets/index.html-BQ_BJOkr.js","assets/index.html-DPrKhZqw.js","assets/index.html-C_HD6Ws0.js","assets/index.html-cAplacdo.js","assets/index.html-CNFnCXXK.js","assets/index.html-DBNBMZj3.js","assets/index.html-WsHR0jSo.js","assets/index.html-DQDcL6w_.js","assets/index.html-Cg14bqU3.js","assets/index.html-DmDh8B_E.js","assets/index.html-BczWCjx0.js","assets/index.html-BcGp8UC3.js","assets/index.html-B1U5890p.js","assets/index.html-mmRmeZJu.js","assets/index.html-VuDIiqUW.js","assets/index.html-Bd-L52NJ.js","assets/index.html-CJDfZyQC.js","assets/index.html-wPiTUVeN.js","assets/index.html-CXsK6GIa.js","assets/index.html-CKgFEJqz.js","assets/index.html-DiNwA98V.js","assets/index.html-BEh-74b9.js","assets/index.html-BkpjegsB.js","assets/index.html-BSGkoyC8.js","assets/index.html-hRanrdU1.js","assets/index.html-C02pFsaB.js","assets/index.html--JibzmYb.js","assets/index.html-C_SWEN6t.js","assets/index.html-h4spoJkj.js","assets/index.html-C5aqg5nA.js","assets/index.html-BCiB28DE.js","assets/index.html-COPBbTEt.js","assets/index.html-BPkiQacq.js","assets/index.html-CqUeotqS.js","assets/index.html-DsMStVn6.js","assets/index.html-BN0Tllhy.js","assets/index.html-C2KMPfQv.js","assets/index.html-DH2KW9Rx.js","assets/index.html-DLu9k4_2.js","assets/index.html-CaNyRcF9.js","assets/index.html-DGs7DoaU.js","assets/index.html-DeJ4qQkb.js","assets/index.html-D_HJUSMf.js","assets/index.html-wE4Czono.js","assets/index.html-BKJeWHRy.js","assets/index.html-BMN2dxJt.js","assets/index.html-HDu6_wsd.js","assets/index.html-M4Kwogwa.js","assets/index.html-zNK-kO4O.js","assets/index.html-DHUrrtMM.js","assets/index.html-CIhZy_wL.js","assets/index.html-CKDefzD-.js","assets/index.html-c6piUMWk.js","assets/index.html-WMIm5UwY.js","assets/index.html-C4mWIttA.js","assets/index.html-THajXv_4.js","assets/index.html-CV5NjHB2.js","assets/index.html-BeiVfUfQ.js","assets/index.html-BqweqA7t.js","assets/index.html-ChOTOf6f.js","assets/index.html-iyCRwPQ6.js","assets/index.html-wrEjmX7-.js","assets/index.html-Ck8Nc7gm.js","assets/index.html-CwedcAG4.js","assets/index.html-oRoO44J8.js","assets/index.html-BHRSi6tg.js","assets/index.html-_M1xn5AN.js","assets/index.html-BidE2FM1.js","assets/index.html-CfYRyLTF.js","assets/index.html-Zonemov2.js","assets/index.html-C5y_GlgQ.js","assets/index.html-C1fuqDH8.js","assets/index.html-Ch6Z4J8_.js","assets/index.html-Deo0beYF.js","assets/index.html-BaVRo2QM.js","assets/index.html-CgtTTbcc.js","assets/index.html-Dddy_M9a.js","assets/index.html-C7MEJWR4.js","assets/index.html-DXf0sKkY.js","assets/index.html-DszRIIhL.js","assets/index.html-BorIWBj7.js","assets/index.html-CNXitSmg.js","assets/index.html-vhjhdbky.js","assets/index.html-C2t5bz0n.js","assets/index.html-D1GSExrS.js","assets/index.html-BPxoJET_.js","assets/index.html-CV6foL9s.js","assets/index.html-DRZNbvOo.js","assets/index.html-CytaIsSn.js","assets/index.html-1mKjA0H6.js","assets/index.html-C8VwX2b4.js","assets/index.html-b8YPerEv.js","assets/index.html-BtDURFEX.js","assets/index.html-Dn-NNxUU.js","assets/index.html-Cnborh_e.js","assets/index.html-DvefaKFn.js","assets/index.html-D1mbbgNW.js","assets/index.html-BfSb5m37.js","assets/index.html-ChYi9Ksw.js","assets/index.html-CJ0qVbsh.js","assets/index.html-CV-6pgm7.js","assets/index.html-D-RFiwTQ.js","assets/index.html-CypUOGyx.js","assets/index.html-3BBBP5BJ.js","assets/index.html-CJcKnQAj.js","assets/index.html-T1EWTC7U.js","assets/index.html-C1PMeI3I.js","assets/index.html-GLSX71sO.js","assets/index.html-Cx_N-eQv.js","assets/index.html-CTX3eE9n.js","assets/index.html-BrqKhAG-.js","assets/index.html-C5m3_IYn.js","assets/index.html-C3AHKdJN.js","assets/index.html-BgxXUBZ-.js","assets/index.html-BJyeMNEj.js","assets/index.html-Cpz9eEW7.js","assets/index.html-CMmivxbw.js","assets/index.html-DCLbVFGA.js","assets/index.html-cPHiQJKb.js","assets/index.html-CJhFp2gj.js","assets/index.html-CxNCeshr.js","assets/index.html-z1N0HFuj.js","assets/index.html-Dw5Llp2h.js","assets/index.html-C7s_gr0D.js","assets/index.html-B01jDY1x.js","assets/index.html-CzrNEEvS.js","assets/index.html-D4vHPHI-.js","assets/index.html-sTB8xnvp.js","assets/index.html-BWsEAotN.js","assets/index.html-BKyEsS2P.js","assets/index.html-C7GNQNOQ.js","assets/index.html-NakQvjHl.js","assets/index.html-taPt2GHK.js","assets/index.html-est45O8-.js","assets/index.html-Cuf_AH8C.js","assets/index.html-Rc9U-OGB.js","assets/index.html-C5v4uiJ5.js","assets/index.html-BKinnnLs.js","assets/index.html-DtVlnPbR.js","assets/index.html-BoHc3tEA.js","assets/index.html-BA-XHZ_-.js","assets/index.html-pg1JDoDC.js","assets/index.html-BsUzBAox.js","assets/index.html-BgQ15KLP.js","assets/index.html-D_t_i4FV.js","assets/index.html-BR0okIEN.js","assets/index.html-EPeaKV9S.js"],__vite__mapDeps=i=>i.map(i=>__vite__fileDeps[i]);
var Al=Object.defineProperty;var fl=(n,t,e)=>t in n?Al(n,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):n[t]=e;var Bs=(n,t,e)=>(fl(n,typeof t!="symbol"?t+"":t,e),e);/**
* @vue/shared v3.4.27
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**//*! #__NO_SIDE_EFFECTS__ */function Vo(n,t){const e=new Set(n.split(","));return s=>e.has(s)}const Sa={},Jt=[],pn=()=>{},Il=()=>!1,Ie=n=>n.charCodeAt(0)===111&&n.charCodeAt(1)===110&&(n.charCodeAt(2)>122||n.charCodeAt(2)<97),Mo=n=>n.startsWith("onUpdate:"),Ta=Object.assign,Fo=(n,t)=>{const e=n.indexOf(t);e>-1&&n.splice(e,1)},yl=Object.prototype.hasOwnProperty,la=(n,t)=>yl.call(n,t),Y=Array.isArray,Pt=n=>Es(n)==="[object Map]",tr=n=>Es(n)==="[object Set]",ea=n=>typeof n=="function",Ba=n=>typeof n=="string",vt=n=>typeof n=="symbol",Aa=n=>n!==null&&typeof n=="object",er=n=>(Aa(n)||ea(n))&&ea(n.then)&&ea(n.catch),sr=Object.prototype.toString,Es=n=>sr.call(n),Sl=n=>Es(n).slice(8,-1),or=n=>Es(n)==="[object Object]",jo=n=>Ba(n)&&n!=="NaN"&&n[0]!=="-"&&""+parseInt(n,10)===n,Tt=Vo(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),ks=n=>{const t=Object.create(null);return e=>t[e]||(t[e]=n(e))},bl=/-(\w)/g,un=ks(n=>n.replace(bl,(t,e)=>e?e.toUpperCase():"")),Dl=/\B([A-Z])/g,Ft=ks(n=>n.replace(Dl,"-$1").toLowerCase()),ye=ks(n=>n.charAt(0).toUpperCase()+n.slice(1)),Cs=ks(n=>n?`on${ye(n)}`:""),Zn=(n,t)=>!Object.is(n,t),ws=(n,t)=>{for(let e=0;e<n.length;e++)n[e](t)},pr=(n,t,e,s=!1)=>{Object.defineProperty(n,t,{configurable:!0,enumerable:!1,writable:s,value:e})},Jl=n=>{const t=parseFloat(n);return isNaN(t)?n:t},Pl=n=>{const t=Ba(n)?Number(n):NaN;return isNaN(t)?n:t};let Rp;const ir=()=>Rp||(Rp=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{});function Ho(n){if(Y(n)){const t={};for(let e=0;e<n.length;e++){const s=n[e],o=Ba(s)?Ol(s):Ho(s);if(o)for(const p in o)t[p]=o[p]}return t}else if(Ba(n)||Aa(n))return n}const Tl=/;(?![^(]*\))/g,Ll=/:([^]+)/,Rl=/\/\*[^]*?\*\//g;function Ol(n){const t={};return n.replace(Rl,"").split(Tl).forEach(e=>{if(e){const s=e.split(Ll);s.length>1&&(t[s[0].trim()]=s[1].trim())}}),t}function Uo(n){let t="";if(Ba(n))t=n;else if(Y(n))for(let e=0;e<n.length;e++){const s=Uo(n[e]);s&&(t+=s+" ")}else if(Aa(n))for(const e in n)n[e]&&(t+=e+" ");return t.trim()}const xl="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",Bl=Vo(xl);function rr(n){return!!n||n===""}const Yh=n=>Ba(n)?n:n==null?"":Y(n)||Aa(n)&&(n.toString===sr||!ea(n.toString))?JSON.stringify(n,lr,2):String(n),lr=(n,t)=>t&&t.__v_isRef?lr(n,t.value):Pt(t)?{[`Map(${t.size})`]:[...t.entries()].reduce((e,[s,o],p)=>(e[Vs(s,p)+" =>"]=o,e),{})}:tr(t)?{[`Set(${t.size})`]:[...t.values()].map(e=>Vs(e))}:vt(t)?Vs(t):Aa(t)&&!Y(t)&&!or(t)?String(t):t,Vs=(n,t="")=>{var e;return vt(n)?`Symbol(${(e=n.description)!=null?e:t})`:n};/**
* @vue/reactivity v3.4.27
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/let Za;class Cl{constructor(t=!1){this.detached=t,this._active=!0,this.effects=[],this.cleanups=[],this.parent=Za,!t&&Za&&(this.index=(Za.scopes||(Za.scopes=[])).push(this)-1)}get active(){return this._active}run(t){if(this._active){const e=Za;try{return Za=this,t()}finally{Za=e}}}on(){Za=this}off(){Za=this.parent}stop(t){if(this._active){let e,s;for(e=0,s=this.effects.length;e<s;e++)this.effects[e].stop();for(e=0,s=this.cleanups.length;e<s;e++)this.cleanups[e]();if(this.scopes)for(e=0,s=this.scopes.length;e<s;e++)this.scopes[e].stop(!0);if(!this.detached&&this.parent&&!t){const o=this.parent.scopes.pop();o&&o!==this&&(this.parent.scopes[this.index]=o,o.index=this.index)}this.parent=void 0,this._active=!1}}}function wl(n,t=Za){t&&t.active&&t.effects.push(n)}function cr(){return Za}function Vl(n){Za&&Za.cleanups.push(n)}let gt;class No{constructor(t,e,s,o){this.fn=t,this.trigger=e,this.scheduler=s,this.active=!0,this.deps=[],this._dirtyLevel=4,this._trackId=0,this._runnings=0,this._shouldSchedule=!1,this._depsLength=0,wl(this,o)}get dirty(){if(this._dirtyLevel===2||this._dirtyLevel===3){this._dirtyLevel=1,nt();for(let t=0;t<this._depsLength;t++){const e=this.deps[t];if(e.computed&&(Ml(e.computed),this._dirtyLevel>=4))break}this._dirtyLevel===1&&(this._dirtyLevel=0),tt()}return this._dirtyLevel>=4}set dirty(t){this._dirtyLevel=t?4:0}run(){if(this._dirtyLevel=0,!this.active)return this.fn();let t=$n,e=gt;try{return $n=!0,gt=this,this._runnings++,Op(this),this.fn()}finally{xp(this),this._runnings--,gt=e,$n=t}}stop(){this.active&&(Op(this),xp(this),this.onStop&&this.onStop(),this.active=!1)}}function Ml(n){return n.value}function Op(n){n._trackId++,n._depsLength=0}function xp(n){if(n.deps.length>n._depsLength){for(let t=n._depsLength;t<n.deps.length;t++)ur(n.deps[t],n);n.deps.length=n._depsLength}}function ur(n,t){const e=n.get(t);e!==void 0&&t._trackId!==e&&(n.delete(t),n.size===0&&n.cleanup())}let $n=!0,io=0;const dr=[];function nt(){dr.push($n),$n=!1}function tt(){const n=dr.pop();$n=n===void 0?!0:n}function Ko(){io++}function Wo(){for(io--;!io&&ro.length;)ro.shift()()}function gr(n,t,e){if(t.get(n)!==n._trackId){t.set(n,n._trackId);const s=n.deps[n._depsLength];s!==t?(s&&ur(s,n),n.deps[n._depsLength++]=t):n._depsLength++}}const ro=[];function mr(n,t,e){Ko();for(const s of n.keys()){let o;s._dirtyLevel<t&&(o??(o=n.get(s)===s._trackId))&&(s._shouldSchedule||(s._shouldSchedule=s._dirtyLevel===0),s._dirtyLevel=t),s._shouldSchedule&&(o??(o=n.get(s)===s._trackId))&&(s.trigger(),(!s._runnings||s.allowRecurse)&&s._dirtyLevel!==2&&(s._shouldSchedule=!1,s.scheduler&&ro.push(s.scheduler)))}Wo()}const _r=(n,t)=>{const e=new Map;return e.cleanup=n,e.computed=t,e},cs=new WeakMap,mt=Symbol(""),lo=Symbol("");function Qa(n,t,e){if($n&&gt){let s=cs.get(n);s||cs.set(n,s=new Map);let o=s.get(e);o||s.set(e,o=_r(()=>s.delete(e))),gr(gt,o)}}function Bn(n,t,e,s,o,p){const i=cs.get(n);if(!i)return;let l=[];if(t==="clear")l=[...i.values()];else if(e==="length"&&Y(n)){const c=Number(s);i.forEach((u,d)=>{(d==="length"||!vt(d)&&d>=c)&&l.push(u)})}else switch(e!==void 0&&l.push(i.get(e)),t){case"add":Y(n)?jo(e)&&l.push(i.get("length")):(l.push(i.get(mt)),Pt(n)&&l.push(i.get(lo)));break;case"delete":Y(n)||(l.push(i.get(mt)),Pt(n)&&l.push(i.get(lo)));break;case"set":Pt(n)&&l.push(i.get(mt));break}Ko();for(const c of l)c&&mr(c,4);Wo()}function Fl(n,t){const e=cs.get(n);return e&&e.get(t)}const jl=Vo("__proto__,__v_isRef,__isVue"),hr=new Set(Object.getOwnPropertyNames(Symbol).filter(n=>n!=="arguments"&&n!=="caller").map(n=>Symbol[n]).filter(vt)),Bp=Hl();function Hl(){const n={};return["includes","indexOf","lastIndexOf"].forEach(t=>{n[t]=function(...e){const s=ca(this);for(let p=0,i=this.length;p<i;p++)Qa(s,"get",p+"");const o=s[t](...e);return o===-1||o===!1?s[t](...e.map(ca)):o}}),["push","pop","shift","unshift","splice"].forEach(t=>{n[t]=function(...e){nt(),Ko();const s=ca(this)[t].apply(this,e);return Wo(),tt(),s}}),n}function Ul(n){vt(n)||(n=String(n));const t=ca(this);return Qa(t,"has",n),t.hasOwnProperty(n)}class vr{constructor(t=!1,e=!1){this._isReadonly=t,this._isShallow=e}get(t,e,s){const o=this._isReadonly,p=this._isShallow;if(e==="__v_isReactive")return!o;if(e==="__v_isReadonly")return o;if(e==="__v_isShallow")return p;if(e==="__v_raw")return s===(o?p?nc:fr:p?Ar:kr).get(t)||Object.getPrototypeOf(t)===Object.getPrototypeOf(s)?t:void 0;const i=Y(t);if(!o){if(i&&la(Bp,e))return Reflect.get(Bp,e,s);if(e==="hasOwnProperty")return Ul}const l=Reflect.get(t,e,s);return(vt(e)?hr.has(e):jl(e))||(o||Qa(t,"get",e),p)?l:Fa(l)?i&&jo(e)?l:l.value:Aa(l)?o?Et(l):Se(l):l}}class Er extends vr{constructor(t=!1){super(!1,t)}set(t,e,s,o){let p=t[e];if(!this._isShallow){const c=ie(p);if(!us(s)&&!ie(s)&&(p=ca(p),s=ca(s)),!Y(t)&&Fa(p)&&!Fa(s))return c?!1:(p.value=s,!0)}const i=Y(t)&&jo(e)?Number(e)<t.length:la(t,e),l=Reflect.set(t,e,s,o);return t===ca(o)&&(i?Zn(s,p)&&Bn(t,"set",e,s):Bn(t,"add",e,s)),l}deleteProperty(t,e){const s=la(t,e);t[e];const o=Reflect.deleteProperty(t,e);return o&&s&&Bn(t,"delete",e,void 0),o}has(t,e){const s=Reflect.has(t,e);return(!vt(e)||!hr.has(e))&&Qa(t,"has",e),s}ownKeys(t){return Qa(t,"iterate",Y(t)?"length":mt),Reflect.ownKeys(t)}}class Nl extends vr{constructor(t=!1){super(!0,t)}set(t,e){return!0}deleteProperty(t,e){return!0}}const Kl=new Er,Wl=new Nl,Gl=new Er(!0);const Go=n=>n,As=n=>Reflect.getPrototypeOf(n);function We(n,t,e=!1,s=!1){n=n.__v_raw;const o=ca(n),p=ca(t);e||(Zn(t,p)&&Qa(o,"get",t),Qa(o,"get",p));const{has:i}=As(o),l=s?Go:e?Qo:re;if(i.call(o,t))return l(n.get(t));if(i.call(o,p))return l(n.get(p));n!==o&&n.get(t)}function Ge(n,t=!1){const e=this.__v_raw,s=ca(e),o=ca(n);return t||(Zn(n,o)&&Qa(s,"has",n),Qa(s,"has",o)),n===o?e.has(n):e.has(n)||e.has(o)}function ze(n,t=!1){return n=n.__v_raw,!t&&Qa(ca(n),"iterate",mt),Reflect.get(n,"size",n)}function Cp(n){n=ca(n);const t=ca(this);return As(t).has.call(t,n)||(t.add(n),Bn(t,"add",n,n)),this}function wp(n,t){t=ca(t);const e=ca(this),{has:s,get:o}=As(e);let p=s.call(e,n);p||(n=ca(n),p=s.call(e,n));const i=o.call(e,n);return e.set(n,t),p?Zn(t,i)&&Bn(e,"set",n,t):Bn(e,"add",n,t),this}function Vp(n){const t=ca(this),{has:e,get:s}=As(t);let o=e.call(t,n);o||(n=ca(n),o=e.call(t,n)),s&&s.call(t,n);const p=t.delete(n);return o&&Bn(t,"delete",n,void 0),p}function Mp(){const n=ca(this),t=n.size!==0,e=n.clear();return t&&Bn(n,"clear",void 0,void 0),e}function qe(n,t){return function(s,o){const p=this,i=p.__v_raw,l=ca(i),c=t?Go:n?Qo:re;return!n&&Qa(l,"iterate",mt),i.forEach((u,d)=>s.call(o,c(u),c(d),p))}}function Qe(n,t,e){return function(...s){const o=this.__v_raw,p=ca(o),i=Pt(p),l=n==="entries"||n===Symbol.iterator&&i,c=n==="keys"&&i,u=o[n](...s),d=e?Go:t?Qo:re;return!t&&Qa(p,"iterate",c?lo:mt),{next(){const{value:g,done:m}=u.next();return m?{value:g,done:m}:{value:l?[d(g[0]),d(g[1])]:d(g),done:m}},[Symbol.iterator](){return this}}}}function Fn(n){return function(...t){return n==="delete"?!1:n==="clear"?void 0:this}}function zl(){const n={get(p){return We(this,p)},get size(){return ze(this)},has:Ge,add:Cp,set:wp,delete:Vp,clear:Mp,forEach:qe(!1,!1)},t={get(p){return We(this,p,!1,!0)},get size(){return ze(this)},has:Ge,add:Cp,set:wp,delete:Vp,clear:Mp,forEach:qe(!1,!0)},e={get(p){return We(this,p,!0)},get size(){return ze(this,!0)},has(p){return Ge.call(this,p,!0)},add:Fn("add"),set:Fn("set"),delete:Fn("delete"),clear:Fn("clear"),forEach:qe(!0,!1)},s={get(p){return We(this,p,!0,!0)},get size(){return ze(this,!0)},has(p){return Ge.call(this,p,!0)},add:Fn("add"),set:Fn("set"),delete:Fn("delete"),clear:Fn("clear"),forEach:qe(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach(p=>{n[p]=Qe(p,!1,!1),e[p]=Qe(p,!0,!1),t[p]=Qe(p,!1,!0),s[p]=Qe(p,!0,!0)}),[n,e,t,s]}const[ql,Ql,$l,Xl]=zl();function zo(n,t){const e=t?n?Xl:$l:n?Ql:ql;return(s,o,p)=>o==="__v_isReactive"?!n:o==="__v_isReadonly"?n:o==="__v_raw"?s:Reflect.get(la(e,o)&&o in s?e:s,o,p)}const Zl={get:zo(!1,!1)},Yl={get:zo(!1,!0)},ac={get:zo(!0,!1)};const kr=new WeakMap,Ar=new WeakMap,fr=new WeakMap,nc=new WeakMap;function tc(n){switch(n){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function ec(n){return n.__v_skip||!Object.isExtensible(n)?0:tc(Sl(n))}function Se(n){return ie(n)?n:qo(n,!1,Kl,Zl,kr)}function Ir(n){return qo(n,!1,Gl,Yl,Ar)}function Et(n){return qo(n,!0,Wl,ac,fr)}function qo(n,t,e,s,o){if(!Aa(n)||n.__v_raw&&!(t&&n.__v_isReactive))return n;const p=o.get(n);if(p)return p;const i=ec(n);if(i===0)return n;const l=new Proxy(n,i===2?s:e);return o.set(n,l),l}function Xt(n){return ie(n)?Xt(n.__v_raw):!!(n&&n.__v_isReactive)}function ie(n){return!!(n&&n.__v_isReadonly)}function us(n){return!!(n&&n.__v_isShallow)}function yr(n){return n?!!n.__v_raw:!1}function ca(n){const t=n&&n.__v_raw;return t?ca(t):n}function sc(n){return Object.isExtensible(n)&&pr(n,"__v_skip",!0),n}const re=n=>Aa(n)?Se(n):n,Qo=n=>Aa(n)?Et(n):n;class Sr{constructor(t,e,s,o){this.getter=t,this._setter=e,this.dep=void 0,this.__v_isRef=!0,this.__v_isReadonly=!1,this.effect=new No(()=>t(this._value),()=>Zt(this,this.effect._dirtyLevel===2?2:3)),this.effect.computed=this,this.effect.active=this._cacheable=!o,this.__v_isReadonly=s}get value(){const t=ca(this);return(!t._cacheable||t.effect.dirty)&&Zn(t._value,t._value=t.effect.run())&&Zt(t,4),$o(t),t.effect._dirtyLevel>=2&&Zt(t,2),t._value}set value(t){this._setter(t)}get _dirty(){return this.effect.dirty}set _dirty(t){this.effect.dirty=t}}function oc(n,t,e=!1){let s,o;const p=ea(n);return p?(s=n,o=pn):(s=n.get,o=n.set),new Sr(s,o,p||!o,e)}function $o(n){var t;$n&&gt&&(n=ca(n),gr(gt,(t=n.dep)!=null?t:n.dep=_r(()=>n.dep=void 0,n instanceof Sr?n:void 0)))}function Zt(n,t=4,e){n=ca(n);const s=n.dep;s&&mr(s,t)}function Fa(n){return!!(n&&n.__v_isRef===!0)}function X(n){return br(n,!1)}function La(n){return br(n,!0)}function br(n,t){return Fa(n)?n:new pc(n,t)}class pc{constructor(t,e){this.__v_isShallow=e,this.dep=void 0,this.__v_isRef=!0,this._rawValue=e?t:ca(t),this._value=e?t:re(t)}get value(){return $o(this),this._value}set value(t){const e=this.__v_isShallow||us(t)||ie(t);t=e?t:ca(t),Zn(t,this._rawValue)&&(this._rawValue=t,this._value=e?t:re(t),Zt(this,4))}}function _t(n){return Fa(n)?n.value:n}const ic={get:(n,t,e)=>_t(Reflect.get(n,t,e)),set:(n,t,e,s)=>{const o=n[t];return Fa(o)&&!Fa(e)?(o.value=e,!0):Reflect.set(n,t,e,s)}};function Dr(n){return Xt(n)?n:new Proxy(n,ic)}class rc{constructor(t){this.dep=void 0,this.__v_isRef=!0;const{get:e,set:s}=t(()=>$o(this),()=>Zt(this));this._get=e,this._set=s}get value(){return this._get()}set value(t){this._set(t)}}function Jr(n){return new rc(n)}class lc{constructor(t,e,s){this._object=t,this._key=e,this._defaultValue=s,this.__v_isRef=!0}get value(){const t=this._object[this._key];return t===void 0?this._defaultValue:t}set value(t){this._object[this._key]=t}get dep(){return Fl(ca(this._object),this._key)}}class cc{constructor(t){this._getter=t,this.__v_isRef=!0,this.__v_isReadonly=!0}get value(){return this._getter()}}function jt(n,t,e){return Fa(n)?n:ea(n)?new cc(n):Aa(n)&&arguments.length>1?uc(n,t,e):X(n)}function uc(n,t,e){const s=n[t];return Fa(s)?s:new lc(n,t,e)}/**
* @vue/runtime-core v3.4.27
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/function Xn(n,t,e,s){try{return s?n(...s):n()}catch(o){be(o,t,e)}}function ln(n,t,e,s){if(ea(n)){const o=Xn(n,t,e,s);return o&&er(o)&&o.catch(p=>{be(p,t,e)}),o}if(Y(n)){const o=[];for(let p=0;p<n.length;p++)o.push(ln(n[p],t,e,s));return o}}function be(n,t,e,s=!0){const o=t?t.vnode:null;if(t){let p=t.parent;const i=t.proxy,l=`https://vuejs.org/error-reference/#runtime-${e}`;for(;p;){const u=p.ec;if(u){for(let d=0;d<u.length;d++)if(u[d](n,i,l)===!1)return}p=p.parent}const c=t.appContext.config.errorHandler;if(c){nt(),Xn(c,null,10,[n,i,l]),tt();return}}dc(n,e,o,s)}function dc(n,t,e,s=!0){console.error(n)}let le=!1,co=!1;const Ua=[];let Dn=0;const Lt=[];let Wn=null,ct=0;const Pr=Promise.resolve();let Xo=null;function wn(n){const t=Xo||Pr;return n?t.then(this?n.bind(this):n):t}function gc(n){let t=Dn+1,e=Ua.length;for(;t<e;){const s=t+e>>>1,o=Ua[s],p=ce(o);p<n||p===n&&o.pre?t=s+1:e=s}return t}function fs(n){(!Ua.length||!Ua.includes(n,le&&n.allowRecurse?Dn+1:Dn))&&(n.id==null?Ua.push(n):Ua.splice(gc(n.id),0,n),Tr())}function Tr(){!le&&!co&&(co=!0,Xo=Pr.then(Lr))}function mc(n){const t=Ua.indexOf(n);t>Dn&&Ua.splice(t,1)}function _c(n){Y(n)?Lt.push(...n):(!Wn||!Wn.includes(n,n.allowRecurse?ct+1:ct))&&Lt.push(n),Tr()}function Fp(n,t,e=le?Dn+1:0){for(;e<Ua.length;e++){const s=Ua[e];if(s&&s.pre){if(n&&s.id!==n.uid)continue;Ua.splice(e,1),e--,s()}}}function ds(n){if(Lt.length){const t=[...new Set(Lt)].sort((e,s)=>ce(e)-ce(s));if(Lt.length=0,Wn){Wn.push(...t);return}for(Wn=t,ct=0;ct<Wn.length;ct++)Wn[ct]();Wn=null,ct=0}}const ce=n=>n.id==null?1/0:n.id,hc=(n,t)=>{const e=ce(n)-ce(t);if(e===0){if(n.pre&&!t.pre)return-1;if(t.pre&&!n.pre)return 1}return e};function Lr(n){co=!1,le=!0,Ua.sort(hc);try{for(Dn=0;Dn<Ua.length;Dn++){const t=Ua[Dn];t&&t.active!==!1&&Xn(t,null,14)}}finally{Dn=0,Ua.length=0,ds(),le=!1,Xo=null,(Ua.length||Lt.length)&&Lr()}}function vc(n,t,...e){if(n.isUnmounted)return;const s=n.vnode.props||Sa;let o=e;const p=t.startsWith("update:"),i=p&&t.slice(7);if(i&&i in s){const d=`${i==="modelValue"?"model":i}Modifiers`,{number:g,trim:m}=s[d]||Sa;m&&(o=e.map(_=>Ba(_)?_.trim():_)),g&&(o=e.map(Jl))}let l,c=s[l=Cs(t)]||s[l=Cs(un(t))];!c&&p&&(c=s[l=Cs(Ft(t))]),c&&ln(c,n,6,o);const u=s[l+"Once"];if(u){if(!n.emitted)n.emitted={};else if(n.emitted[l])return;n.emitted[l]=!0,ln(u,n,6,o)}}function Rr(n,t,e=!1){const s=t.emitsCache,o=s.get(n);if(o!==void 0)return o;const p=n.emits;let i={},l=!1;if(!ea(n)){const c=u=>{const d=Rr(u,t,!0);d&&(l=!0,Ta(i,d))};!e&&t.mixins.length&&t.mixins.forEach(c),n.extends&&c(n.extends),n.mixins&&n.mixins.forEach(c)}return!p&&!l?(Aa(n)&&s.set(n,null),null):(Y(p)?p.forEach(c=>i[c]=null):Ta(i,p),Aa(n)&&s.set(n,i),i)}function Is(n,t){return!n||!Ie(t)?!1:(t=t.slice(2).replace(/Once$/,""),la(n,t[0].toLowerCase()+t.slice(1))||la(n,Ft(t))||la(n,t))}let rn=null,Or=null;function gs(n){const t=rn;return rn=n,Or=n&&n.type.__scopeId||null,t}function Ec(n,t=rn,e){if(!t||n._n)return n;const s=(...o)=>{s._d&&Xp(-1);const p=gs(t);let i;try{i=n(...o)}finally{gs(p),s._d&&Xp(1)}return i};return s._n=!0,s._c=!0,s._d=!0,s}function Ms(n){const{type:t,vnode:e,proxy:s,withProxy:o,propsOptions:[p],slots:i,attrs:l,emit:c,render:u,renderCache:d,props:g,data:m,setupState:_,ctx:v,inheritAttrs:A}=n,S=gs(n);let f,y;try{if(e.shapeFlag&4){const D=o||s,M=D;f=_n(u.call(M,D,d,g,_,m,v)),y=l}else{const D=t;f=_n(D.length>1?D(g,{attrs:l,slots:i,emit:c}):D(g,null)),y=t.props?l:kc(l)}}catch(D){ee.length=0,be(D,n,1),f=xa(hn)}let k=f;if(y&&A!==!1){const D=Object.keys(y),{shapeFlag:M}=k;D.length&&M&7&&(p&&D.some(Mo)&&(y=Ac(y,p)),k=Yn(k,y,!1,!0))}return e.dirs&&(k=Yn(k,null,!1,!0),k.dirs=k.dirs?k.dirs.concat(e.dirs):e.dirs),e.transition&&(k.transition=e.transition),f=k,gs(S),f}const kc=n=>{let t;for(const e in n)(e==="class"||e==="style"||Ie(e))&&((t||(t={}))[e]=n[e]);return t},Ac=(n,t)=>{const e={};for(const s in n)(!Mo(s)||!(s.slice(9)in t))&&(e[s]=n[s]);return e};function fc(n,t,e){const{props:s,children:o,component:p}=n,{props:i,children:l,patchFlag:c}=t,u=p.emitsOptions;if(t.dirs||t.transition)return!0;if(e&&c>=0){if(c&1024)return!0;if(c&16)return s?jp(s,i,u):!!i;if(c&8){const d=t.dynamicProps;for(let g=0;g<d.length;g++){const m=d[g];if(i[m]!==s[m]&&!Is(u,m))return!0}}}else return(o||l)&&(!l||!l.$stable)?!0:s===i?!1:s?i?jp(s,i,u):!0:!!i;return!1}function jp(n,t,e){const s=Object.keys(t);if(s.length!==Object.keys(n).length)return!0;for(let o=0;o<s.length;o++){const p=s[o];if(t[p]!==n[p]&&!Is(e,p))return!0}return!1}function Ic({vnode:n,parent:t},e){for(;t;){const s=t.subTree;if(s.suspense&&s.suspense.activeBranch===n&&(s.el=n.el),s===n)(n=t.vnode).el=e,t=t.parent;else break}}const xr="components";function cn(n,t){return Sc(xr,n,!0,t)||n}const yc=Symbol.for("v-ndc");function Sc(n,t,e=!0,s=!1){const o=rn||Ma;if(o){const p=o.type;if(n===xr){const l=ku(p,!1);if(l&&(l===t||l===un(t)||l===ye(un(t))))return p}const i=Hp(o[n]||p[n],t)||Hp(o.appContext[n],t);return!i&&s?p:i}}function Hp(n,t){return n&&(n[t]||n[un(t)]||n[ye(un(t))])}const bc=n=>n.__isSuspense;function Br(n,t){t&&t.pendingBranch?Y(n)?t.effects.push(...n):t.effects.push(n):_c(n)}const Dc=Symbol.for("v-scx"),Jc=()=>ba(Dc);function Cr(n,t){return Zo(n,null,t)}const $e={};function ua(n,t,e){return Zo(n,t,e)}function Zo(n,t,{immediate:e,deep:s,flush:o,once:p,onTrack:i,onTrigger:l}=Sa){if(t&&p){const B=t;t=(...L)=>{B(...L),M()}}const c=Ma,u=B=>s===!0?B:bt(B,s===!1?1:void 0);let d,g=!1,m=!1;if(Fa(n)?(d=()=>n.value,g=us(n)):Xt(n)?(d=()=>u(n),g=!0):Y(n)?(m=!0,g=n.some(B=>Xt(B)||us(B)),d=()=>n.map(B=>{if(Fa(B))return B.value;if(Xt(B))return u(B);if(ea(B))return Xn(B,c,2)})):ea(n)?t?d=()=>Xn(n,c,2):d=()=>(_&&_(),ln(n,c,3,[v])):d=pn,t&&s){const B=d;d=()=>bt(B())}let _,v=B=>{_=k.onStop=()=>{Xn(B,c,4),_=k.onStop=void 0}},A;if(Te)if(v=pn,t?e&&ln(t,c,3,[d(),m?[]:void 0,v]):d(),o==="sync"){const B=Jc();A=B.__watcherHandles||(B.__watcherHandles=[])}else return pn;let S=m?new Array(n.length).fill($e):$e;const f=()=>{if(!(!k.active||!k.dirty))if(t){const B=k.run();(s||g||(m?B.some((L,O)=>Zn(L,S[O])):Zn(B,S)))&&(_&&_(),ln(t,c,3,[B,S===$e?void 0:m&&S[0]===$e?[]:S,v]),S=B)}else k.run()};f.allowRecurse=!!t;let y;o==="sync"?y=f:o==="post"?y=()=>Ga(f,c&&c.suspense):(f.pre=!0,c&&(f.id=c.uid),y=()=>fs(f));const k=new No(d,pn,y),D=cr(),M=()=>{k.stop(),D&&Fo(D.effects,k)};return t?e?f():S=k.run():o==="post"?Ga(k.run.bind(k),c&&c.suspense):k.run(),A&&A.push(M),M}function Pc(n,t,e){const s=this.proxy,o=Ba(n)?n.includes(".")?wr(s,n):()=>s[n]:n.bind(s,s);let p;ea(t)?p=t:(p=t.handler,e=t);const i=Pe(this),l=Zo(o,p.bind(s),e);return i(),l}function wr(n,t){const e=t.split(".");return()=>{let s=n;for(let o=0;o<e.length&&s;o++)s=s[e[o]];return s}}function bt(n,t=1/0,e){if(t<=0||!Aa(n)||n.__v_skip||(e=e||new Set,e.has(n)))return n;if(e.add(n),t--,Fa(n))bt(n.value,t,e);else if(Y(n))for(let s=0;s<n.length;s++)bt(n[s],t,e);else if(tr(n)||Pt(n))n.forEach(s=>{bt(s,t,e)});else if(or(n))for(const s in n)bt(n[s],t,e);return n}function bn(n,t,e,s){const o=n.dirs,p=t&&t.dirs;for(let i=0;i<o.length;i++){const l=o[i];p&&(l.oldValue=p[i].value);let c=l.dir[s];c&&(nt(),ln(c,e,8,[n.el,l,n,t]),tt())}}const Gn=Symbol("_leaveCb"),Xe=Symbol("_enterCb");function Vr(){const n={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return Ea(()=>{n.isMounted=!0}),Ur(()=>{n.isUnmounting=!0}),n}const en=[Function,Array],Mr={mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:en,onEnter:en,onAfterEnter:en,onEnterCancelled:en,onBeforeLeave:en,onLeave:en,onAfterLeave:en,onLeaveCancelled:en,onBeforeAppear:en,onAppear:en,onAfterAppear:en,onAppearCancelled:en},Tc={name:"BaseTransition",props:Mr,setup(n,{slots:t}){const e=Je(),s=Vr();return()=>{const o=t.default&&Yo(t.default(),!0);if(!o||!o.length)return;let p=o[0];if(o.length>1){for(const m of o)if(m.type!==hn){p=m;break}}const i=ca(n),{mode:l}=i;if(s.isLeaving)return Fs(p);const c=Up(p);if(!c)return Fs(p);const u=ue(c,i,s,e);de(c,u);const d=e.subTree,g=d&&Up(d);if(g&&g.type!==hn&&!ut(c,g)){const m=ue(g,i,s,e);if(de(g,m),l==="out-in"&&c.type!==hn)return s.isLeaving=!0,m.afterLeave=()=>{s.isLeaving=!1,e.update.active!==!1&&(e.effect.dirty=!0,e.update())},Fs(p);l==="in-out"&&c.type!==hn&&(m.delayLeave=(_,v,A)=>{const S=Fr(s,g);S[String(g.key)]=g,_[Gn]=()=>{v(),_[Gn]=void 0,delete u.delayedLeave},u.delayedLeave=A})}return p}}},Lc=Tc;function Fr(n,t){const{leavingVNodes:e}=n;let s=e.get(t.type);return s||(s=Object.create(null),e.set(t.type,s)),s}function ue(n,t,e,s){const{appear:o,mode:p,persisted:i=!1,onBeforeEnter:l,onEnter:c,onAfterEnter:u,onEnterCancelled:d,onBeforeLeave:g,onLeave:m,onAfterLeave:_,onLeaveCancelled:v,onBeforeAppear:A,onAppear:S,onAfterAppear:f,onAppearCancelled:y}=t,k=String(n.key),D=Fr(e,n),M=(O,G)=>{O&&ln(O,s,9,G)},B=(O,G)=>{const x=G[1];M(O,G),Y(O)?O.every(W=>W.length<=1)&&x():O.length<=1&&x()},L={mode:p,persisted:i,beforeEnter(O){let G=l;if(!e.isMounted)if(o)G=A||l;else return;O[Gn]&&O[Gn](!0);const x=D[k];x&&ut(n,x)&&x.el[Gn]&&x.el[Gn](),M(G,[O])},enter(O){let G=c,x=u,W=d;if(!e.isMounted)if(o)G=S||c,x=f||u,W=y||d;else return;let C=!1;const aa=O[Xe]=Ja=>{C||(C=!0,Ja?M(W,[O]):M(x,[O]),L.delayedLeave&&L.delayedLeave(),O[Xe]=void 0)};G?B(G,[O,aa]):aa()},leave(O,G){const x=String(n.key);if(O[Xe]&&O[Xe](!0),e.isUnmounting)return G();M(g,[O]);let W=!1;const C=O[Gn]=aa=>{W||(W=!0,G(),aa?M(v,[O]):M(_,[O]),O[Gn]=void 0,D[x]===n&&delete D[x])};D[x]=n,m?B(m,[O,C]):C()},clone(O){return ue(O,t,e,s)}};return L}function Fs(n){if(De(n))return n=Yn(n),n.children=null,n}function Up(n){if(!De(n))return n;const{shapeFlag:t,children:e}=n;if(e){if(t&16)return e[0];if(t&32&&ea(e.default))return e.default()}}function de(n,t){n.shapeFlag&6&&n.component?de(n.component.subTree,t):n.shapeFlag&128?(n.ssContent.transition=t.clone(n.ssContent),n.ssFallback.transition=t.clone(n.ssFallback)):n.transition=t}function Yo(n,t=!1,e){let s=[],o=0;for(let p=0;p<n.length;p++){let i=n[p];const l=e==null?i.key:String(e)+String(i.key!=null?i.key:p);i.type===Ya?(i.patchFlag&128&&o++,s=s.concat(Yo(i.children,t,l))):(t||i.type!==hn)&&s.push(l!=null?Yn(i,{key:l}):i)}if(o>1)for(let p=0;p<s.length;p++)s[p].patchFlag=-2;return s}/*! #__NO_SIDE_EFFECTS__ */function j(n,t){return ea(n)?Ta({name:n.name},t,{setup:n}):n}const Yt=n=>!!n.type.__asyncLoader;/*! #__NO_SIDE_EFFECTS__ */function Rc(n){ea(n)&&(n={loader:n});const{loader:t,loadingComponent:e,errorComponent:s,delay:o=200,timeout:p,suspensible:i=!0,onError:l}=n;let c=null,u,d=0;const g=()=>(d++,c=null,m()),m=()=>{let _;return c||(_=c=t().catch(v=>{if(v=v instanceof Error?v:new Error(String(v)),l)return new Promise((A,S)=>{l(v,()=>A(g()),()=>S(v),d+1)});throw v}).then(v=>_!==c&&c?c:(v&&(v.__esModule||v[Symbol.toStringTag]==="Module")&&(v=v.default),u=v,v)))};return j({name:"AsyncComponentWrapper",__asyncLoader:m,get __asyncResolved(){return u},setup(){const _=Ma;if(u)return()=>js(u,_);const v=y=>{c=null,be(y,_,13,!s)};if(i&&_.suspense||Te)return m().then(y=>()=>js(y,_)).catch(y=>(v(y),()=>s?xa(s,{error:y}):null));const A=X(!1),S=X(),f=X(!!o);return o&&setTimeout(()=>{f.value=!1},o),p!=null&&setTimeout(()=>{if(!A.value&&!S.value){const y=new Error(`Async component timed out after ${p}ms.`);v(y),S.value=y}},p),m().then(()=>{A.value=!0,_.parent&&De(_.parent.vnode)&&(_.parent.effect.dirty=!0,fs(_.parent.update))}).catch(y=>{v(y),S.value=y}),()=>{if(A.value&&u)return js(u,_);if(S.value&&s)return xa(s,{error:S.value});if(e&&!f.value)return xa(e)}}})}function js(n,t){const{ref:e,props:s,children:o,ce:p}=t.vnode,i=xa(n,s,o);return i.ref=e,i.ce=p,delete t.vnode.ce,i}const De=n=>n.type.__isKeepAlive;function Oc(n,t){jr(n,"a",t)}function xc(n,t){jr(n,"da",t)}function jr(n,t,e=Ma){const s=n.__wdc||(n.__wdc=()=>{let o=e;for(;o;){if(o.isDeactivated)return;o=o.parent}return n()});if(ys(t,s,e),e){let o=e.parent;for(;o&&o.parent;)De(o.parent.vnode)&&Bc(s,t,e,o),o=o.parent}}function Bc(n,t,e,s){const o=ys(t,n,s,!0);Ht(()=>{Fo(s[t],o)},e)}function ys(n,t,e=Ma,s=!1){if(e){const o=e[n]||(e[n]=[]),p=t.__weh||(t.__weh=(...i)=>{if(e.isUnmounted)return;nt();const l=Pe(e),c=ln(t,e,n,i);return l(),tt(),c});return s?o.unshift(p):o.push(p),p}}const Vn=n=>(t,e=Ma)=>(!Te||n==="sp")&&ys(n,(...s)=>t(...s),e),Cc=Vn("bm"),Ea=Vn("m"),wc=Vn("bu"),Hr=Vn("u"),Ur=Vn("bum"),Ht=Vn("um"),Vc=Vn("sp"),Mc=Vn("rtg"),Fc=Vn("rtc");function jc(n,t=Ma){ys("ec",n,t)}const uo=n=>n?o0(n)?ep(n)||n.proxy:uo(n.parent):null,ae=Ta(Object.create(null),{$:n=>n,$el:n=>n.vnode.el,$data:n=>n.data,$props:n=>n.props,$attrs:n=>n.attrs,$slots:n=>n.slots,$refs:n=>n.refs,$parent:n=>uo(n.parent),$root:n=>uo(n.root),$emit:n=>n.emit,$options:n=>ap(n),$forceUpdate:n=>n.f||(n.f=()=>{n.effect.dirty=!0,fs(n.update)}),$nextTick:n=>n.n||(n.n=wn.bind(n.proxy)),$watch:n=>Pc.bind(n)}),Hs=(n,t)=>n!==Sa&&!n.__isScriptSetup&&la(n,t),Hc={get({_:n},t){if(t==="__v_skip")return!0;const{ctx:e,setupState:s,data:o,props:p,accessCache:i,type:l,appContext:c}=n;let u;if(t[0]!=="$"){const _=i[t];if(_!==void 0)switch(_){case 1:return s[t];case 2:return o[t];case 4:return e[t];case 3:return p[t]}else{if(Hs(s,t))return i[t]=1,s[t];if(o!==Sa&&la(o,t))return i[t]=2,o[t];if((u=n.propsOptions[0])&&la(u,t))return i[t]=3,p[t];if(e!==Sa&&la(e,t))return i[t]=4,e[t];go&&(i[t]=0)}}const d=ae[t];let g,m;if(d)return t==="$attrs"&&Qa(n.attrs,"get",""),d(n);if((g=l.__cssModules)&&(g=g[t]))return g;if(e!==Sa&&la(e,t))return i[t]=4,e[t];if(m=c.config.globalProperties,la(m,t))return m[t]},set({_:n},t,e){const{data:s,setupState:o,ctx:p}=n;return Hs(o,t)?(o[t]=e,!0):s!==Sa&&la(s,t)?(s[t]=e,!0):la(n.props,t)||t[0]==="$"&&t.slice(1)in n?!1:(p[t]=e,!0)},has({_:{data:n,setupState:t,accessCache:e,ctx:s,appContext:o,propsOptions:p}},i){let l;return!!e[i]||n!==Sa&&la(n,i)||Hs(t,i)||(l=p[0])&&la(l,i)||la(s,i)||la(ae,i)||la(o.config.globalProperties,i)},defineProperty(n,t,e){return e.get!=null?n._.accessCache[t]=0:la(e,"value")&&this.set(n,t,e.value,null),Reflect.defineProperty(n,t,e)}};function Np(n){return Y(n)?n.reduce((t,e)=>(t[e]=null,t),{}):n}let go=!0;function Uc(n){const t=ap(n),e=n.proxy,s=n.ctx;go=!1,t.beforeCreate&&Kp(t.beforeCreate,n,"bc");const{data:o,computed:p,methods:i,watch:l,provide:c,inject:u,created:d,beforeMount:g,mounted:m,beforeUpdate:_,updated:v,activated:A,deactivated:S,beforeDestroy:f,beforeUnmount:y,destroyed:k,unmounted:D,render:M,renderTracked:B,renderTriggered:L,errorCaptured:O,serverPrefetch:G,expose:x,inheritAttrs:W,components:C,directives:aa,filters:Ja}=t;if(u&&Nc(u,s,null),i)for(const na in i){const q=i[na];ea(q)&&(s[na]=q.bind(e))}if(o){const na=o.call(e,e);Aa(na)&&(n.data=Se(na))}if(go=!0,p)for(const na in p){const q=p[na],Ra=ea(q)?q.bind(e,e):ea(q.get)?q.get.bind(e,e):pn,In=!ea(q)&&ea(q.set)?q.set.bind(e):pn,tn=I({get:Ra,set:In});Object.defineProperty(s,na,{enumerable:!0,configurable:!0,get:()=>tn.value,set:wa=>tn.value=wa})}if(l)for(const na in l)Nr(l[na],s,e,na);if(c){const na=ea(c)?c.call(e):c;Reflect.ownKeys(na).forEach(q=>{En(q,na[q])})}d&&Kp(d,n,"c");function z(na,q){Y(q)?q.forEach(Ra=>na(Ra.bind(e))):q&&na(q.bind(e))}if(z(Cc,g),z(Ea,m),z(wc,_),z(Hr,v),z(Oc,A),z(xc,S),z(jc,O),z(Fc,B),z(Mc,L),z(Ur,y),z(Ht,D),z(Vc,G),Y(x))if(x.length){const na=n.exposed||(n.exposed={});x.forEach(q=>{Object.defineProperty(na,q,{get:()=>e[q],set:Ra=>e[q]=Ra})})}else n.exposed||(n.exposed={});M&&n.render===pn&&(n.render=M),W!=null&&(n.inheritAttrs=W),C&&(n.components=C),aa&&(n.directives=aa)}function Nc(n,t,e=pn){Y(n)&&(n=mo(n));for(const s in n){const o=n[s];let p;Aa(o)?"default"in o?p=ba(o.from||s,o.default,!0):p=ba(o.from||s):p=ba(o),Fa(p)?Object.defineProperty(t,s,{enumerable:!0,configurable:!0,get:()=>p.value,set:i=>p.value=i}):t[s]=p}}function Kp(n,t,e){ln(Y(n)?n.map(s=>s.bind(t.proxy)):n.bind(t.proxy),t,e)}function Nr(n,t,e,s){const o=s.includes(".")?wr(e,s):()=>e[s];if(Ba(n)){const p=t[n];ea(p)&&ua(o,p)}else if(ea(n))ua(o,n.bind(e));else if(Aa(n))if(Y(n))n.forEach(p=>Nr(p,t,e,s));else{const p=ea(n.handler)?n.handler.bind(e):t[n.handler];ea(p)&&ua(o,p,n)}}function ap(n){const t=n.type,{mixins:e,extends:s}=t,{mixins:o,optionsCache:p,config:{optionMergeStrategies:i}}=n.appContext,l=p.get(t);let c;return l?c=l:!o.length&&!e&&!s?c=t:(c={},o.length&&o.forEach(u=>ms(c,u,i,!0)),ms(c,t,i)),Aa(t)&&p.set(t,c),c}function ms(n,t,e,s=!1){const{mixins:o,extends:p}=t;p&&ms(n,p,e,!0),o&&o.forEach(i=>ms(n,i,e,!0));for(const i in t)if(!(s&&i==="expose")){const l=Kc[i]||e&&e[i];n[i]=l?l(n[i],t[i]):t[i]}return n}const Kc={data:Wp,props:Gp,emits:Gp,methods:Qt,computed:Qt,beforeCreate:Ka,created:Ka,beforeMount:Ka,mounted:Ka,beforeUpdate:Ka,updated:Ka,beforeDestroy:Ka,beforeUnmount:Ka,destroyed:Ka,unmounted:Ka,activated:Ka,deactivated:Ka,errorCaptured:Ka,serverPrefetch:Ka,components:Qt,directives:Qt,watch:Gc,provide:Wp,inject:Wc};function Wp(n,t){return t?n?function(){return Ta(ea(n)?n.call(this,this):n,ea(t)?t.call(this,this):t)}:t:n}function Wc(n,t){return Qt(mo(n),mo(t))}function mo(n){if(Y(n)){const t={};for(let e=0;e<n.length;e++)t[n[e]]=n[e];return t}return n}function Ka(n,t){return n?[...new Set([].concat(n,t))]:t}function Qt(n,t){return n?Ta(Object.create(null),n,t):t}function Gp(n,t){return n?Y(n)&&Y(t)?[...new Set([...n,...t])]:Ta(Object.create(null),Np(n),Np(t??{})):t}function Gc(n,t){if(!n)return t;if(!t)return n;const e=Ta(Object.create(null),n);for(const s in t)e[s]=Ka(n[s],t[s]);return e}function Kr(){return{app:null,config:{isNativeTag:Il,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let zc=0;function qc(n,t){return function(s,o=null){ea(s)||(s=Ta({},s)),o!=null&&!Aa(o)&&(o=null);const p=Kr(),i=new WeakSet;let l=!1;const c=p.app={_uid:zc++,_component:s,_props:o,_container:null,_context:p,_instance:null,version:fu,get config(){return p.config},set config(u){},use(u,...d){return i.has(u)||(u&&ea(u.install)?(i.add(u),u.install(c,...d)):ea(u)&&(i.add(u),u(c,...d))),c},mixin(u){return p.mixins.includes(u)||p.mixins.push(u),c},component(u,d){return d?(p.components[u]=d,c):p.components[u]},directive(u,d){return d?(p.directives[u]=d,c):p.directives[u]},mount(u,d,g){if(!l){const m=xa(s,o);return m.appContext=p,g===!0?g="svg":g===!1&&(g=void 0),d&&t?t(m,u):n(m,u,g),l=!0,c._container=u,u.__vue_app__=c,ep(m.component)||m.component.proxy}},unmount(){l&&(n(null,c._container),delete c._container.__vue_app__)},provide(u,d){return p.provides[u]=d,c},runWithContext(u){const d=ne;ne=c;try{return u()}finally{ne=d}}};return c}}let ne=null;function En(n,t){if(Ma){let e=Ma.provides;const s=Ma.parent&&Ma.parent.provides;s===e&&(e=Ma.provides=Object.create(s)),e[n]=t}}function ba(n,t,e=!1){const s=Ma||rn;if(s||ne){const o=s?s.parent==null?s.vnode.appContext&&s.vnode.appContext.provides:s.parent.provides:ne._context.provides;if(o&&n in o)return o[n];if(arguments.length>1)return e&&ea(t)?t.call(s&&s.proxy):t}}const Wr={},Gr=()=>Object.create(Wr),zr=n=>Object.getPrototypeOf(n)===Wr;function Qc(n,t,e,s=!1){const o={},p=Gr();n.propsDefaults=Object.create(null),qr(n,t,o,p);for(const i in n.propsOptions[0])i in o||(o[i]=void 0);e?n.props=s?o:Ir(o):n.type.props?n.props=o:n.props=p,n.attrs=p}function $c(n,t,e,s){const{props:o,attrs:p,vnode:{patchFlag:i}}=n,l=ca(o),[c]=n.propsOptions;let u=!1;if((s||i>0)&&!(i&16)){if(i&8){const d=n.vnode.dynamicProps;for(let g=0;g<d.length;g++){let m=d[g];if(Is(n.emitsOptions,m))continue;const _=t[m];if(c)if(la(p,m))_!==p[m]&&(p[m]=_,u=!0);else{const v=un(m);o[v]=_o(c,l,v,_,n,!1)}else _!==p[m]&&(p[m]=_,u=!0)}}}else{qr(n,t,o,p)&&(u=!0);let d;for(const g in l)(!t||!la(t,g)&&((d=Ft(g))===g||!la(t,d)))&&(c?e&&(e[g]!==void 0||e[d]!==void 0)&&(o[g]=_o(c,l,g,void 0,n,!0)):delete o[g]);if(p!==l)for(const g in p)(!t||!la(t,g))&&(delete p[g],u=!0)}u&&Bn(n.attrs,"set","")}function qr(n,t,e,s){const[o,p]=n.propsOptions;let i=!1,l;if(t)for(let c in t){if(Tt(c))continue;const u=t[c];let d;o&&la(o,d=un(c))?!p||!p.includes(d)?e[d]=u:(l||(l={}))[d]=u:Is(n.emitsOptions,c)||(!(c in s)||u!==s[c])&&(s[c]=u,i=!0)}if(p){const c=ca(e),u=l||Sa;for(let d=0;d<p.length;d++){const g=p[d];e[g]=_o(o,c,g,u[g],n,!la(u,g))}}return i}function _o(n,t,e,s,o,p){const i=n[e];if(i!=null){const l=la(i,"default");if(l&&s===void 0){const c=i.default;if(i.type!==Function&&!i.skipFactory&&ea(c)){const{propsDefaults:u}=o;if(e in u)s=u[e];else{const d=Pe(o);s=u[e]=c.call(null,t),d()}}else s=c}i[0]&&(p&&!l?s=!1:i[1]&&(s===""||s===Ft(e))&&(s=!0))}return s}function Qr(n,t,e=!1){const s=t.propsCache,o=s.get(n);if(o)return o;const p=n.props,i={},l=[];let c=!1;if(!ea(n)){const d=g=>{c=!0;const[m,_]=Qr(g,t,!0);Ta(i,m),_&&l.push(..._)};!e&&t.mixins.length&&t.mixins.forEach(d),n.extends&&d(n.extends),n.mixins&&n.mixins.forEach(d)}if(!p&&!c)return Aa(n)&&s.set(n,Jt),Jt;if(Y(p))for(let d=0;d<p.length;d++){const g=un(p[d]);zp(g)&&(i[g]=Sa)}else if(p)for(const d in p){const g=un(d);if(zp(g)){const m=p[d],_=i[g]=Y(m)||ea(m)?{type:m}:Ta({},m);if(_){const v=$p(Boolean,_.type),A=$p(String,_.type);_[0]=v>-1,_[1]=A<0||v<A,(v>-1||la(_,"default"))&&l.push(g)}}}const u=[i,l];return Aa(n)&&s.set(n,u),u}function zp(n){return n[0]!=="$"&&!Tt(n)}function qp(n){return n===null?"null":typeof n=="function"?n.name||"":typeof n=="object"&&n.constructor&&n.constructor.name||""}function Qp(n,t){return qp(n)===qp(t)}function $p(n,t){return Y(t)?t.findIndex(e=>Qp(e,n)):ea(t)&&Qp(t,n)?0:-1}const $r=n=>n[0]==="_"||n==="$stable",np=n=>Y(n)?n.map(_n):[_n(n)],Xc=(n,t,e)=>{if(t._n)return t;const s=Ec((...o)=>np(t(...o)),e);return s._c=!1,s},Xr=(n,t,e)=>{const s=n._ctx;for(const o in n){if($r(o))continue;const p=n[o];if(ea(p))t[o]=Xc(o,p,s);else if(p!=null){const i=np(p);t[o]=()=>i}}},Zr=(n,t)=>{const e=np(t);n.slots.default=()=>e},Zc=(n,t)=>{const e=n.slots=Gr();if(n.vnode.shapeFlag&32){const s=t._;s?(Ta(e,t),pr(e,"_",s,!0)):Xr(t,e)}else t&&Zr(n,t)},Yc=(n,t,e)=>{const{vnode:s,slots:o}=n;let p=!0,i=Sa;if(s.shapeFlag&32){const l=t._;l?e&&l===1?p=!1:(Ta(o,t),!e&&l===1&&delete o._):(p=!t.$stable,Xr(t,o)),i=t}else t&&(Zr(n,t),i={default:1});if(p)for(const l in o)!$r(l)&&i[l]==null&&delete o[l]};function _s(n,t,e,s,o=!1){if(Y(n)){n.forEach((m,_)=>_s(m,t&&(Y(t)?t[_]:t),e,s,o));return}if(Yt(s)&&!o)return;const p=s.shapeFlag&4?ep(s.component)||s.component.proxy:s.el,i=o?null:p,{i:l,r:c}=n,u=t&&t.r,d=l.refs===Sa?l.refs={}:l.refs,g=l.setupState;if(u!=null&&u!==c&&(Ba(u)?(d[u]=null,la(g,u)&&(g[u]=null)):Fa(u)&&(u.value=null)),ea(c))Xn(c,l,12,[i,d]);else{const m=Ba(c),_=Fa(c);if(m||_){const v=()=>{if(n.f){const A=m?la(g,c)?g[c]:d[c]:c.value;o?Y(A)&&Fo(A,p):Y(A)?A.includes(p)||A.push(p):m?(d[c]=[p],la(g,c)&&(g[c]=d[c])):(c.value=[p],n.k&&(d[n.k]=c.value))}else m?(d[c]=i,la(g,c)&&(g[c]=i)):_&&(c.value=i,n.k&&(d[n.k]=i))};i?(v.id=-1,Ga(v,e)):v()}}}let jn=!1;const au=n=>n.namespaceURI.includes("svg")&&n.tagName!=="foreignObject",nu=n=>n.namespaceURI.includes("MathML"),Ze=n=>{if(au(n))return"svg";if(nu(n))return"mathml"},Ye=n=>n.nodeType===8;function tu(n){const{mt:t,p:e,o:{patchProp:s,createText:o,nextSibling:p,parentNode:i,remove:l,insert:c,createComment:u}}=n,d=(k,D)=>{if(!D.hasChildNodes()){e(null,k,D),ds(),D._vnode=k;return}jn=!1,g(D.firstChild,k,null,null,null),ds(),D._vnode=k,jn&&console.error("Hydration completed but contains mismatches.")},g=(k,D,M,B,L,O=!1)=>{O=O||!!D.dynamicChildren;const G=Ye(k)&&k.data==="[",x=()=>A(k,D,M,B,L,G),{type:W,ref:C,shapeFlag:aa,patchFlag:Ja}=D;let Ia=k.nodeType;D.el=k,Ja===-2&&(O=!1,D.dynamicChildren=null);let z=null;switch(W){case xt:Ia!==3?D.children===""?(c(D.el=o(""),i(k),k),z=k):z=x():(k.data!==D.children&&(jn=!0,k.data=D.children),z=p(k));break;case hn:y(k)?(z=p(k),f(D.el=k.content.firstChild,k,M)):Ia!==8||G?z=x():z=p(k);break;case te:if(G&&(k=p(k),Ia=k.nodeType),Ia===1||Ia===3){z=k;const na=!D.children.length;for(let q=0;q<D.staticCount;q++)na&&(D.children+=z.nodeType===1?z.outerHTML:z.data),q===D.staticCount-1&&(D.anchor=z),z=p(z);return G?p(z):z}else x();break;case Ya:G?z=v(k,D,M,B,L,O):z=x();break;default:if(aa&1)(Ia!==1||D.type.toLowerCase()!==k.tagName.toLowerCase())&&!y(k)?z=x():z=m(k,D,M,B,L,O);else if(aa&6){D.slotScopeIds=L;const na=i(k);if(G?z=S(k):Ye(k)&&k.data==="teleport start"?z=S(k,k.data,"teleport end"):z=p(k),t(D,na,null,M,B,Ze(na),O),Yt(D)){let q;G?(q=xa(Ya),q.anchor=z?z.previousSibling:na.lastChild):q=k.nodeType===3?s0(""):xa("div"),q.el=k,D.component.subTree=q}}else aa&64?Ia!==8?z=x():z=D.type.hydrate(k,D,M,B,L,O,n,_):aa&128&&(z=D.type.hydrate(k,D,M,B,Ze(i(k)),L,O,n,g))}return C!=null&&_s(C,null,B,D),z},m=(k,D,M,B,L,O)=>{O=O||!!D.dynamicChildren;const{type:G,props:x,patchFlag:W,shapeFlag:C,dirs:aa,transition:Ja}=D,Ia=G==="input"||G==="option";if(Ia||W!==-1){aa&&bn(D,null,M,"created");let z=!1;if(y(k)){z=Yr(B,Ja)&&M&&M.vnode.props&&M.vnode.props.appear;const q=k.content.firstChild;z&&Ja.beforeEnter(q),f(q,k,M),D.el=k=q}if(C&16&&!(x&&(x.innerHTML||x.textContent))){let q=_(k.firstChild,D,k,M,B,L,O);for(;q;){jn=!0;const Ra=q;q=q.nextSibling,l(Ra)}}else C&8&&k.textContent!==D.children&&(jn=!0,k.textContent=D.children);if(x)if(Ia||!O||W&48)for(const q in x)(Ia&&(q.endsWith("value")||q==="indeterminate")||Ie(q)&&!Tt(q)||q[0]===".")&&s(k,q,null,x[q],void 0,void 0,M);else x.onClick&&s(k,"onClick",null,x.onClick,void 0,void 0,M);let na;(na=x&&x.onVnodeBeforeMount)&&sn(na,M,D),aa&&bn(D,null,M,"beforeMount"),((na=x&&x.onVnodeMounted)||aa||z)&&Br(()=>{na&&sn(na,M,D),z&&Ja.enter(k),aa&&bn(D,null,M,"mounted")},B)}return k.nextSibling},_=(k,D,M,B,L,O,G)=>{G=G||!!D.dynamicChildren;const x=D.children,W=x.length;for(let C=0;C<W;C++){const aa=G?x[C]:x[C]=_n(x[C]);if(k)k=g(k,aa,B,L,O,G);else{if(aa.type===xt&&!aa.children)continue;jn=!0,e(null,aa,M,null,B,L,Ze(M),O)}}return k},v=(k,D,M,B,L,O)=>{const{slotScopeIds:G}=D;G&&(L=L?L.concat(G):G);const x=i(k),W=_(p(k),D,x,M,B,L,O);return W&&Ye(W)&&W.data==="]"?p(D.anchor=W):(jn=!0,c(D.anchor=u("]"),x,W),W)},A=(k,D,M,B,L,O)=>{if(jn=!0,D.el=null,O){const W=S(k);for(;;){const C=p(k);if(C&&C!==W)l(C);else break}}const G=p(k),x=i(k);return l(k),e(null,D,x,G,M,B,Ze(x),L),G},S=(k,D="[",M="]")=>{let B=0;for(;k;)if(k=p(k),k&&Ye(k)&&(k.data===D&&B++,k.data===M)){if(B===0)return p(k);B--}return k},f=(k,D,M)=>{const B=D.parentNode;B&&B.replaceChild(k,D);let L=M;for(;L;)L.vnode.el===D&&(L.vnode.el=L.subTree.el=k),L=L.parent},y=k=>k.nodeType===1&&k.tagName.toLowerCase()==="template";return[d,g]}const Ga=Br;function eu(n){return su(n,tu)}function su(n,t){const e=ir();e.__VUE__=!0;const{insert:s,remove:o,patchProp:p,createElement:i,createText:l,createComment:c,setText:u,setElementText:d,parentNode:g,nextSibling:m,setScopeId:_=pn,insertStaticContent:v}=n,A=(h,E,b,T=null,P=null,V=null,U=void 0,w=null,F=!!E.dynamicChildren)=>{if(h===E)return;h&&!ut(h,E)&&(T=J(h),wa(h,P,V,!0),h=null),E.patchFlag===-2&&(F=!1,E.dynamicChildren=null);const{type:R,ref:K,shapeFlag:Z}=E;switch(R){case xt:S(h,E,b,T);break;case hn:f(h,E,b,T);break;case te:h==null&&y(E,b,T,U);break;case Ya:C(h,E,b,T,P,V,U,w,F);break;default:Z&1?M(h,E,b,T,P,V,U,w,F):Z&6?aa(h,E,b,T,P,V,U,w,F):(Z&64||Z&128)&&R.process(h,E,b,T,P,V,U,w,F,Q)}K!=null&&P&&_s(K,h&&h.ref,V,E||h,!E)},S=(h,E,b,T)=>{if(h==null)s(E.el=l(E.children),b,T);else{const P=E.el=h.el;E.children!==h.children&&u(P,E.children)}},f=(h,E,b,T)=>{h==null?s(E.el=c(E.children||""),b,T):E.el=h.el},y=(h,E,b,T)=>{[h.el,h.anchor]=v(h.children,E,b,T,h.el,h.anchor)},k=({el:h,anchor:E},b,T)=>{let P;for(;h&&h!==E;)P=m(h),s(h,b,T),h=P;s(E,b,T)},D=({el:h,anchor:E})=>{let b;for(;h&&h!==E;)b=m(h),o(h),h=b;o(E)},M=(h,E,b,T,P,V,U,w,F)=>{E.type==="svg"?U="svg":E.type==="math"&&(U="mathml"),h==null?B(E,b,T,P,V,U,w,F):G(h,E,P,V,U,w,F)},B=(h,E,b,T,P,V,U,w)=>{let F,R;const{props:K,shapeFlag:Z,transition:$,dirs:ta}=h;if(F=h.el=i(h.type,V,K&&K.is,K),Z&8?d(F,h.children):Z&16&&O(h.children,F,null,T,P,Us(h,V),U,w),ta&&bn(h,null,T,"created"),L(F,h,h.scopeId,U,T),K){for(const _a in K)_a!=="value"&&!Tt(_a)&&p(F,_a,null,K[_a],V,h.children,T,P,Oa);"value"in K&&p(F,"value",null,K.value,V),(R=K.onVnodeBeforeMount)&&sn(R,T,h)}ta&&bn(h,null,T,"beforeMount");const oa=Yr(P,$);oa&&$.beforeEnter(F),s(F,E,b),((R=K&&K.onVnodeMounted)||oa||ta)&&Ga(()=>{R&&sn(R,T,h),oa&&$.enter(F),ta&&bn(h,null,T,"mounted")},P)},L=(h,E,b,T,P)=>{if(b&&_(h,b),T)for(let V=0;V<T.length;V++)_(h,T[V]);if(P){let V=P.subTree;if(E===V){const U=P.vnode;L(h,U,U.scopeId,U.slotScopeIds,P.parent)}}},O=(h,E,b,T,P,V,U,w,F=0)=>{for(let R=F;R<h.length;R++){const K=h[R]=w?zn(h[R]):_n(h[R]);A(null,K,E,b,T,P,V,U,w)}},G=(h,E,b,T,P,V,U)=>{const w=E.el=h.el;let{patchFlag:F,dynamicChildren:R,dirs:K}=E;F|=h.patchFlag&16;const Z=h.props||Sa,$=E.props||Sa;let ta;if(b&&it(b,!1),(ta=$.onVnodeBeforeUpdate)&&sn(ta,b,E,h),K&&bn(E,h,b,"beforeUpdate"),b&&it(b,!0),R?x(h.dynamicChildren,R,w,b,T,Us(E,P),V):U||q(h,E,w,null,b,T,Us(E,P),V,!1),F>0){if(F&16)W(w,E,Z,$,b,T,P);else if(F&2&&Z.class!==$.class&&p(w,"class",null,$.class,P),F&4&&p(w,"style",Z.style,$.style,P),F&8){const oa=E.dynamicProps;for(let _a=0;_a<oa.length;_a++){const ya=oa[_a],Va=Z[ya],gn=$[ya];(gn!==Va||ya==="value")&&p(w,ya,Va,gn,P,h.children,b,T,Oa)}}F&1&&h.children!==E.children&&d(w,E.children)}else!U&&R==null&&W(w,E,Z,$,b,T,P);((ta=$.onVnodeUpdated)||K)&&Ga(()=>{ta&&sn(ta,b,E,h),K&&bn(E,h,b,"updated")},T)},x=(h,E,b,T,P,V,U)=>{for(let w=0;w<E.length;w++){const F=h[w],R=E[w],K=F.el&&(F.type===Ya||!ut(F,R)||F.shapeFlag&70)?g(F.el):b;A(F,R,K,null,T,P,V,U,!0)}},W=(h,E,b,T,P,V,U)=>{if(b!==T){if(b!==Sa)for(const w in b)!Tt(w)&&!(w in T)&&p(h,w,b[w],null,U,E.children,P,V,Oa);for(const w in T){if(Tt(w))continue;const F=T[w],R=b[w];F!==R&&w!=="value"&&p(h,w,R,F,U,E.children,P,V,Oa)}"value"in T&&p(h,"value",b.value,T.value,U)}},C=(h,E,b,T,P,V,U,w,F)=>{const R=E.el=h?h.el:l(""),K=E.anchor=h?h.anchor:l("");let{patchFlag:Z,dynamicChildren:$,slotScopeIds:ta}=E;ta&&(w=w?w.concat(ta):ta),h==null?(s(R,b,T),s(K,b,T),O(E.children||[],b,K,P,V,U,w,F)):Z>0&&Z&64&&$&&h.dynamicChildren?(x(h.dynamicChildren,$,b,P,V,U,w),(E.key!=null||P&&E===P.subTree)&&a0(h,E,!0)):q(h,E,b,K,P,V,U,w,F)},aa=(h,E,b,T,P,V,U,w,F)=>{E.slotScopeIds=w,h==null?E.shapeFlag&512?P.ctx.activate(E,b,T,U,F):Ja(E,b,T,P,V,U,F):Ia(h,E,F)},Ja=(h,E,b,T,P,V,U)=>{const w=h.component=mu(h,T,P);if(De(h)&&(w.ctx.renderer=Q),_u(w),w.asyncDep){if(P&&P.registerDep(w,z),!h.el){const F=w.subTree=xa(hn);f(null,F,E,b)}}else z(w,h,E,b,P,V,U)},Ia=(h,E,b)=>{const T=E.component=h.component;if(fc(h,E,b))if(T.asyncDep&&!T.asyncResolved){na(T,E,b);return}else T.next=E,mc(T.update),T.effect.dirty=!0,T.update();else E.el=h.el,T.vnode=E},z=(h,E,b,T,P,V,U)=>{const w=()=>{if(h.isMounted){let{next:K,bu:Z,u:$,parent:ta,vnode:oa}=h;{const ft=n0(h);if(ft){K&&(K.el=oa.el,na(h,K,U)),ft.asyncDep.then(()=>{h.isUnmounted||w()});return}}let _a=K,ya;it(h,!1),K?(K.el=oa.el,na(h,K,U)):K=oa,Z&&ws(Z),(ya=K.props&&K.props.onVnodeBeforeUpdate)&&sn(ya,ta,K,oa),it(h,!0);const Va=Ms(h),gn=h.subTree;h.subTree=Va,A(gn,Va,g(gn.el),J(gn),h,P,V),K.el=Va.el,_a===null&&Ic(h,Va.el),$&&Ga($,P),(ya=K.props&&K.props.onVnodeUpdated)&&Ga(()=>sn(ya,ta,K,oa),P)}else{let K;const{el:Z,props:$}=E,{bm:ta,m:oa,parent:_a}=h,ya=Yt(E);if(it(h,!1),ta&&ws(ta),!ya&&(K=$&&$.onVnodeBeforeMount)&&sn(K,_a,E),it(h,!0),Z&&va){const Va=()=>{h.subTree=Ms(h),va(Z,h.subTree,h,P,null)};ya?E.type.__asyncLoader().then(()=>!h.isUnmounted&&Va()):Va()}else{const Va=h.subTree=Ms(h);A(null,Va,b,T,h,P,V),E.el=Va.el}if(oa&&Ga(oa,P),!ya&&(K=$&&$.onVnodeMounted)){const Va=E;Ga(()=>sn(K,_a,Va),P)}(E.shapeFlag&256||_a&&Yt(_a.vnode)&&_a.vnode.shapeFlag&256)&&h.a&&Ga(h.a,P),h.isMounted=!0,E=b=T=null}},F=h.effect=new No(w,pn,()=>fs(R),h.scope),R=h.update=()=>{F.dirty&&F.run()};R.id=h.uid,it(h,!0),R()},na=(h,E,b)=>{E.component=h;const T=h.vnode.props;h.vnode=E,h.next=null,$c(h,E.props,T,b),Yc(h,E.children,b),nt(),Fp(h),tt()},q=(h,E,b,T,P,V,U,w,F=!1)=>{const R=h&&h.children,K=h?h.shapeFlag:0,Z=E.children,{patchFlag:$,shapeFlag:ta}=E;if($>0){if($&128){In(R,Z,b,T,P,V,U,w,F);return}else if($&256){Ra(R,Z,b,T,P,V,U,w,F);return}}ta&8?(K&16&&Oa(R,P,V),Z!==R&&d(b,Z)):K&16?ta&16?In(R,Z,b,T,P,V,U,w,F):Oa(R,P,V,!0):(K&8&&d(b,""),ta&16&&O(Z,b,T,P,V,U,w,F))},Ra=(h,E,b,T,P,V,U,w,F)=>{h=h||Jt,E=E||Jt;const R=h.length,K=E.length,Z=Math.min(R,K);let $;for($=0;$<Z;$++){const ta=E[$]=F?zn(E[$]):_n(E[$]);A(h[$],ta,b,null,P,V,U,w,F)}R>K?Oa(h,P,V,!0,!1,Z):O(E,b,T,P,V,U,w,F,Z)},In=(h,E,b,T,P,V,U,w,F)=>{let R=0;const K=E.length;let Z=h.length-1,$=K-1;for(;R<=Z&&R<=$;){const ta=h[R],oa=E[R]=F?zn(E[R]):_n(E[R]);if(ut(ta,oa))A(ta,oa,b,null,P,V,U,w,F);else break;R++}for(;R<=Z&&R<=$;){const ta=h[Z],oa=E[$]=F?zn(E[$]):_n(E[$]);if(ut(ta,oa))A(ta,oa,b,null,P,V,U,w,F);else break;Z--,$--}if(R>Z){if(R<=$){const ta=$+1,oa=ta<K?E[ta].el:T;for(;R<=$;)A(null,E[R]=F?zn(E[R]):_n(E[R]),b,oa,P,V,U,w,F),R++}}else if(R>$)for(;R<=Z;)wa(h[R],P,V,!0),R++;else{const ta=R,oa=R,_a=new Map;for(R=oa;R<=$;R++){const Xa=E[R]=F?zn(E[R]):_n(E[R]);Xa.key!=null&&_a.set(Xa.key,R)}let ya,Va=0;const gn=$-oa+1;let ft=!1,Pp=0;const Wt=new Array(gn);for(R=0;R<gn;R++)Wt[R]=0;for(R=ta;R<=Z;R++){const Xa=h[R];if(Va>=gn){wa(Xa,P,V,!0);continue}let Sn;if(Xa.key!=null)Sn=_a.get(Xa.key);else for(ya=oa;ya<=$;ya++)if(Wt[ya-oa]===0&&ut(Xa,E[ya])){Sn=ya;break}Sn===void 0?wa(Xa,P,V,!0):(Wt[Sn-oa]=R+1,Sn>=Pp?Pp=Sn:ft=!0,A(Xa,E[Sn],b,null,P,V,U,w,F),Va++)}const Tp=ft?ou(Wt):Jt;for(ya=Tp.length-1,R=gn-1;R>=0;R--){const Xa=oa+R,Sn=E[Xa],Lp=Xa+1<K?E[Xa+1].el:T;Wt[R]===0?A(null,Sn,b,Lp,P,V,U,w,F):ft&&(ya<0||R!==Tp[ya]?tn(Sn,b,Lp,2):ya--)}}},tn=(h,E,b,T,P=null)=>{const{el:V,type:U,transition:w,children:F,shapeFlag:R}=h;if(R&6){tn(h.component.subTree,E,b,T);return}if(R&128){h.suspense.move(E,b,T);return}if(R&64){U.move(h,E,b,Q);return}if(U===Ya){s(V,E,b);for(let Z=0;Z<F.length;Z++)tn(F[Z],E,b,T);s(h.anchor,E,b);return}if(U===te){k(h,E,b);return}if(T!==2&&R&1&&w)if(T===0)w.beforeEnter(V),s(V,E,b),Ga(()=>w.enter(V),P);else{const{leave:Z,delayLeave:$,afterLeave:ta}=w,oa=()=>s(V,E,b),_a=()=>{Z(V,()=>{oa(),ta&&ta()})};$?$(V,oa,_a):_a()}else s(V,E,b)},wa=(h,E,b,T=!1,P=!1)=>{const{type:V,props:U,ref:w,children:F,dynamicChildren:R,shapeFlag:K,patchFlag:Z,dirs:$}=h;if(w!=null&&_s(w,null,b,h,!0),K&256){E.ctx.deactivate(h);return}const ta=K&1&&$,oa=!Yt(h);let _a;if(oa&&(_a=U&&U.onVnodeBeforeUnmount)&&sn(_a,E,h),K&6)yn(h.component,b,T);else{if(K&128){h.suspense.unmount(b,T);return}ta&&bn(h,null,E,"beforeUnmount"),K&64?h.type.remove(h,E,b,P,Q,T):R&&(V!==Ya||Z>0&&Z&64)?Oa(R,E,b,!1,!0):(V===Ya&&Z&384||!P&&K&16)&&Oa(F,E,b),T&&$a(h)}(oa&&(_a=U&&U.onVnodeUnmounted)||ta)&&Ga(()=>{_a&&sn(_a,E,h),ta&&bn(h,null,E,"unmounted")},b)},$a=h=>{const{type:E,el:b,anchor:T,transition:P}=h;if(E===Ya){Tn(b,T);return}if(E===te){D(h);return}const V=()=>{o(b),P&&!P.persisted&&P.afterLeave&&P.afterLeave()};if(h.shapeFlag&1&&P&&!P.persisted){const{leave:U,delayLeave:w}=P,F=()=>U(b,V);w?w(h.el,V,F):F()}else V()},Tn=(h,E)=>{let b;for(;h!==E;)b=m(h),o(h),h=b;o(E)},yn=(h,E,b)=>{const{bum:T,scope:P,update:V,subTree:U,um:w}=h;T&&ws(T),P.stop(),V&&(V.active=!1,wa(U,h,E,b)),w&&Ga(w,E),Ga(()=>{h.isUnmounted=!0},E),E&&E.pendingBranch&&!E.isUnmounted&&h.asyncDep&&!h.asyncResolved&&h.suspenseId===E.pendingId&&(E.deps--,E.deps===0&&E.resolve())},Oa=(h,E,b,T=!1,P=!1,V=0)=>{for(let U=V;U<h.length;U++)wa(h[U],E,b,T,P)},J=h=>h.shapeFlag&6?J(h.component.subTree):h.shapeFlag&128?h.suspense.next():m(h.anchor||h.el);let N=!1;const H=(h,E,b)=>{h==null?E._vnode&&wa(E._vnode,null,null,!0):A(E._vnode||null,h,E,null,null,null,b),N||(N=!0,Fp(),ds(),N=!1),E._vnode=h},Q={p:A,um:wa,m:tn,r:$a,mt:Ja,mc:O,pc:q,pbc:x,n:J,o:n};let ia,va;return t&&([ia,va]=t(Q)),{render:H,hydrate:ia,createApp:qc(H,ia)}}function Us({type:n,props:t},e){return e==="svg"&&n==="foreignObject"||e==="mathml"&&n==="annotation-xml"&&t&&t.encoding&&t.encoding.includes("html")?void 0:e}function it({effect:n,update:t},e){n.allowRecurse=t.allowRecurse=e}function Yr(n,t){return(!n||n&&!n.pendingBranch)&&t&&!t.persisted}function a0(n,t,e=!1){const s=n.children,o=t.children;if(Y(s)&&Y(o))for(let p=0;p<s.length;p++){const i=s[p];let l=o[p];l.shapeFlag&1&&!l.dynamicChildren&&((l.patchFlag<=0||l.patchFlag===32)&&(l=o[p]=zn(o[p]),l.el=i.el),e||a0(i,l)),l.type===xt&&(l.el=i.el)}}function ou(n){const t=n.slice(),e=[0];let s,o,p,i,l;const c=n.length;for(s=0;s<c;s++){const u=n[s];if(u!==0){if(o=e[e.length-1],n[o]<u){t[s]=o,e.push(s);continue}for(p=0,i=e.length-1;p<i;)l=p+i>>1,n[e[l]]<u?p=l+1:i=l;u<n[e[p]]&&(p>0&&(t[s]=e[p-1]),e[p]=s)}}for(p=e.length,i=e[p-1];p-- >0;)e[p]=i,i=t[i];return e}function n0(n){const t=n.subTree.component;if(t)return t.asyncDep&&!t.asyncResolved?t:n0(t)}const pu=n=>n.__isTeleport,Ya=Symbol.for("v-fgt"),xt=Symbol.for("v-txt"),hn=Symbol.for("v-cmt"),te=Symbol.for("v-stc"),ee=[];let vn=null;function av(n=!1){ee.push(vn=n?null:[])}function iu(){ee.pop(),vn=ee[ee.length-1]||null}let ge=1;function Xp(n){ge+=n}function ru(n){return n.dynamicChildren=ge>0?vn||Jt:null,iu(),ge>0&&vn&&vn.push(n),n}function nv(n,t,e,s,o,p){return ru(e0(n,t,e,s,o,p,!0))}function ho(n){return n?n.__v_isVNode===!0:!1}function ut(n,t){return n.type===t.type&&n.key===t.key}const t0=({key:n})=>n??null,is=({ref:n,ref_key:t,ref_for:e})=>(typeof n=="number"&&(n=""+n),n!=null?Ba(n)||Fa(n)||ea(n)?{i:rn,r:n,k:t,f:!!e}:n:null);function e0(n,t=null,e=null,s=0,o=null,p=n===Ya?0:1,i=!1,l=!1){const c={__v_isVNode:!0,__v_skip:!0,type:n,props:t,key:t&&t0(t),ref:t&&is(t),scopeId:Or,slotScopeIds:null,children:e,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:p,patchFlag:s,dynamicProps:o,dynamicChildren:null,appContext:null,ctx:rn};return l?(tp(c,e),p&128&&n.normalize(c)):e&&(c.shapeFlag|=Ba(e)?8:16),ge>0&&!i&&vn&&(c.patchFlag>0||p&6)&&c.patchFlag!==32&&vn.push(c),c}const xa=lu;function lu(n,t=null,e=null,s=0,o=null,p=!1){if((!n||n===yc)&&(n=hn),ho(n)){const l=Yn(n,t,!0);return e&&tp(l,e),ge>0&&!p&&vn&&(l.shapeFlag&6?vn[vn.indexOf(n)]=l:vn.push(l)),l.patchFlag|=-2,l}if(Au(n)&&(n=n.__vccOpts),t){t=cu(t);let{class:l,style:c}=t;l&&!Ba(l)&&(t.class=Uo(l)),Aa(c)&&(yr(c)&&!Y(c)&&(c=Ta({},c)),t.style=Ho(c))}const i=Ba(n)?1:bc(n)?128:pu(n)?64:Aa(n)?4:ea(n)?2:0;return e0(n,t,e,s,o,i,p,!0)}function cu(n){return n?yr(n)||zr(n)?Ta({},n):n:null}function Yn(n,t,e=!1,s=!1){const{props:o,ref:p,patchFlag:i,children:l,transition:c}=n,u=t?uu(o||{},t):o,d={__v_isVNode:!0,__v_skip:!0,type:n.type,props:u,key:u&&t0(u),ref:t&&t.ref?e&&p?Y(p)?p.concat(is(t)):[p,is(t)]:is(t):p,scopeId:n.scopeId,slotScopeIds:n.slotScopeIds,children:l,target:n.target,targetAnchor:n.targetAnchor,staticCount:n.staticCount,shapeFlag:n.shapeFlag,patchFlag:t&&n.type!==Ya?i===-1?16:i|16:i,dynamicProps:n.dynamicProps,dynamicChildren:n.dynamicChildren,appContext:n.appContext,dirs:n.dirs,transition:c,component:n.component,suspense:n.suspense,ssContent:n.ssContent&&Yn(n.ssContent),ssFallback:n.ssFallback&&Yn(n.ssFallback),el:n.el,anchor:n.anchor,ctx:n.ctx,ce:n.ce};return c&&s&&(d.transition=c.clone(d)),d}function s0(n=" ",t=0){return xa(xt,null,n,t)}function tv(n,t){const e=xa(te,null,n);return e.staticCount=t,e}function _n(n){return n==null||typeof n=="boolean"?xa(hn):Y(n)?xa(Ya,null,n.slice()):typeof n=="object"?zn(n):xa(xt,null,String(n))}function zn(n){return n.el===null&&n.patchFlag!==-1||n.memo?n:Yn(n)}function tp(n,t){let e=0;const{shapeFlag:s}=n;if(t==null)t=null;else if(Y(t))e=16;else if(typeof t=="object")if(s&65){const o=t.default;o&&(o._c&&(o._d=!1),tp(n,o()),o._c&&(o._d=!0));return}else{e=32;const o=t._;!o&&!zr(t)?t._ctx=rn:o===3&&rn&&(rn.slots._===1?t._=1:(t._=2,n.patchFlag|=1024))}else ea(t)?(t={default:t,_ctx:rn},e=32):(t=String(t),s&64?(e=16,t=[s0(t)]):e=8);n.children=t,n.shapeFlag|=e}function uu(...n){const t={};for(let e=0;e<n.length;e++){const s=n[e];for(const o in s)if(o==="class")t.class!==s.class&&(t.class=Uo([t.class,s.class]));else if(o==="style")t.style=Ho([t.style,s.style]);else if(Ie(o)){const p=t[o],i=s[o];i&&p!==i&&!(Y(p)&&p.includes(i))&&(t[o]=p?[].concat(p,i):i)}else o!==""&&(t[o]=s[o])}return t}function sn(n,t,e,s=null){ln(n,t,7,[e,s])}const du=Kr();let gu=0;function mu(n,t,e){const s=n.type,o=(t?t.appContext:n.appContext)||du,p={uid:gu++,vnode:n,type:s,parent:t,appContext:o,root:null,next:null,subTree:null,effect:null,update:null,scope:new Cl(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:t?t.provides:Object.create(o.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:Qr(s,o),emitsOptions:Rr(s,o),emit:null,emitted:null,propsDefaults:Sa,inheritAttrs:s.inheritAttrs,ctx:Sa,data:Sa,props:Sa,attrs:Sa,slots:Sa,refs:Sa,setupState:Sa,setupContext:null,attrsProxy:null,slotsProxy:null,suspense:e,suspenseId:e?e.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return p.ctx={_:p},p.root=t?t.root:p,p.emit=vc.bind(null,p),n.ce&&n.ce(p),p}let Ma=null;const Je=()=>Ma||rn;let hs,vo;{const n=ir(),t=(e,s)=>{let o;return(o=n[e])||(o=n[e]=[]),o.push(s),p=>{o.length>1?o.forEach(i=>i(p)):o[0](p)}};hs=t("__VUE_INSTANCE_SETTERS__",e=>Ma=e),vo=t("__VUE_SSR_SETTERS__",e=>Te=e)}const Pe=n=>{const t=Ma;return hs(n),n.scope.on(),()=>{n.scope.off(),hs(t)}},Zp=()=>{Ma&&Ma.scope.off(),hs(null)};function o0(n){return n.vnode.shapeFlag&4}let Te=!1;function _u(n,t=!1){t&&vo(t);const{props:e,children:s}=n.vnode,o=o0(n);Qc(n,e,o,t),Zc(n,s);const p=o?hu(n,t):void 0;return t&&vo(!1),p}function hu(n,t){const e=n.type;n.accessCache=Object.create(null),n.proxy=new Proxy(n.ctx,Hc);const{setup:s}=e;if(s){const o=n.setupContext=s.length>1?Eu(n):null,p=Pe(n);nt();const i=Xn(s,n,0,[n.props,o]);if(tt(),p(),er(i)){if(i.then(Zp,Zp),t)return i.then(l=>{Yp(n,l,t)}).catch(l=>{be(l,n,0)});n.asyncDep=i}else Yp(n,i,t)}else p0(n,t)}function Yp(n,t,e){ea(t)?n.type.__ssrInlineRender?n.ssrRender=t:n.render=t:Aa(t)&&(n.setupState=Dr(t)),p0(n,e)}let ai;function p0(n,t,e){const s=n.type;if(!n.render){if(!t&&ai&&!s.render){const o=s.template||ap(n).template;if(o){const{isCustomElement:p,compilerOptions:i}=n.appContext.config,{delimiters:l,compilerOptions:c}=s,u=Ta(Ta({isCustomElement:p,delimiters:l},i),c);s.render=ai(o,u)}}n.render=s.render||pn}{const o=Pe(n);nt();try{Uc(n)}finally{tt(),o()}}}const vu={get(n,t){return Qa(n,"get",""),n[t]}};function Eu(n){const t=e=>{n.exposed=e||{}};return{attrs:new Proxy(n.attrs,vu),slots:n.slots,emit:n.emit,expose:t}}function ep(n){if(n.exposed)return n.exposeProxy||(n.exposeProxy=new Proxy(Dr(sc(n.exposed)),{get(t,e){if(e in t)return t[e];if(e in ae)return ae[e](n)},has(t,e){return e in t||e in ae}}))}function ku(n,t=!0){return ea(n)?n.displayName||n.name:n.name||t&&n.__name}function Au(n){return ea(n)&&"__vccOpts"in n}const I=(n,t)=>oc(n,t,Te);function r(n,t,e){const s=arguments.length;return s===2?Aa(t)&&!Y(t)?ho(t)?xa(n,null,[t]):xa(n,t):xa(n,null,t):(s>3?e=Array.prototype.slice.call(arguments,2):s===3&&ho(e)&&(e=[e]),xa(n,t,e))}const fu="3.4.27";/**
* @vue/runtime-dom v3.4.27
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/const Iu="http://www.w3.org/2000/svg",yu="http://www.w3.org/1998/Math/MathML",qn=typeof document<"u"?document:null,ni=qn&&qn.createElement("template"),Su={insert:(n,t,e)=>{t.insertBefore(n,e||null)},remove:n=>{const t=n.parentNode;t&&t.removeChild(n)},createElement:(n,t,e,s)=>{const o=t==="svg"?qn.createElementNS(Iu,n):t==="mathml"?qn.createElementNS(yu,n):qn.createElement(n,e?{is:e}:void 0);return n==="select"&&s&&s.multiple!=null&&o.setAttribute("multiple",s.multiple),o},createText:n=>qn.createTextNode(n),createComment:n=>qn.createComment(n),setText:(n,t)=>{n.nodeValue=t},setElementText:(n,t)=>{n.textContent=t},parentNode:n=>n.parentNode,nextSibling:n=>n.nextSibling,querySelector:n=>qn.querySelector(n),setScopeId(n,t){n.setAttribute(t,"")},insertStaticContent(n,t,e,s,o,p){const i=e?e.previousSibling:t.lastChild;if(o&&(o===p||o.nextSibling))for(;t.insertBefore(o.cloneNode(!0),e),!(o===p||!(o=o.nextSibling)););else{ni.innerHTML=s==="svg"?`<svg>${n}</svg>`:s==="mathml"?`<math>${n}</math>`:n;const l=ni.content;if(s==="svg"||s==="mathml"){const c=l.firstChild;for(;c.firstChild;)l.appendChild(c.firstChild);l.removeChild(c)}t.insertBefore(l,e)}return[i?i.nextSibling:t.firstChild,e?e.previousSibling:t.lastChild]}},Hn="transition",Gt="animation",Bt=Symbol("_vtc"),at=(n,{slots:t})=>r(Lc,r0(n),t);at.displayName="Transition";const i0={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},bu=at.props=Ta({},Mr,i0),rt=(n,t=[])=>{Y(n)?n.forEach(e=>e(...t)):n&&n(...t)},ti=n=>n?Y(n)?n.some(t=>t.length>1):n.length>1:!1;function r0(n){const t={};for(const C in n)C in i0||(t[C]=n[C]);if(n.css===!1)return t;const{name:e="v",type:s,duration:o,enterFromClass:p=`${e}-enter-from`,enterActiveClass:i=`${e}-enter-active`,enterToClass:l=`${e}-enter-to`,appearFromClass:c=p,appearActiveClass:u=i,appearToClass:d=l,leaveFromClass:g=`${e}-leave-from`,leaveActiveClass:m=`${e}-leave-active`,leaveToClass:_=`${e}-leave-to`}=n,v=Du(o),A=v&&v[0],S=v&&v[1],{onBeforeEnter:f,onEnter:y,onEnterCancelled:k,onLeave:D,onLeaveCancelled:M,onBeforeAppear:B=f,onAppear:L=y,onAppearCancelled:O=k}=t,G=(C,aa,Ja)=>{Kn(C,aa?d:l),Kn(C,aa?u:i),Ja&&Ja()},x=(C,aa)=>{C._isLeaving=!1,Kn(C,g),Kn(C,_),Kn(C,m),aa&&aa()},W=C=>(aa,Ja)=>{const Ia=C?L:y,z=()=>G(aa,C,Ja);rt(Ia,[aa,z]),ei(()=>{Kn(aa,C?c:p),Rn(aa,C?d:l),ti(Ia)||si(aa,s,A,z)})};return Ta(t,{onBeforeEnter(C){rt(f,[C]),Rn(C,p),Rn(C,i)},onBeforeAppear(C){rt(B,[C]),Rn(C,c),Rn(C,u)},onEnter:W(!1),onAppear:W(!0),onLeave(C,aa){C._isLeaving=!0;const Ja=()=>x(C,aa);Rn(C,g),Rn(C,m),c0(),ei(()=>{C._isLeaving&&(Kn(C,g),Rn(C,_),ti(D)||si(C,s,S,Ja))}),rt(D,[C,Ja])},onEnterCancelled(C){G(C,!1),rt(k,[C])},onAppearCancelled(C){G(C,!0),rt(O,[C])},onLeaveCancelled(C){x(C),rt(M,[C])}})}function Du(n){if(n==null)return null;if(Aa(n))return[Ns(n.enter),Ns(n.leave)];{const t=Ns(n);return[t,t]}}function Ns(n){return Pl(n)}function Rn(n,t){t.split(/\s+/).forEach(e=>e&&n.classList.add(e)),(n[Bt]||(n[Bt]=new Set)).add(t)}function Kn(n,t){t.split(/\s+/).forEach(s=>s&&n.classList.remove(s));const e=n[Bt];e&&(e.delete(t),e.size||(n[Bt]=void 0))}function ei(n){requestAnimationFrame(()=>{requestAnimationFrame(n)})}let Ju=0;function si(n,t,e,s){const o=n._endId=++Ju,p=()=>{o===n._endId&&s()};if(e)return setTimeout(p,e);const{type:i,timeout:l,propCount:c}=l0(n,t);if(!i)return s();const u=i+"end";let d=0;const g=()=>{n.removeEventListener(u,m),p()},m=_=>{_.target===n&&++d>=c&&g()};setTimeout(()=>{d<c&&g()},l+1),n.addEventListener(u,m)}function l0(n,t){const e=window.getComputedStyle(n),s=v=>(e[v]||"").split(", "),o=s(`${Hn}Delay`),p=s(`${Hn}Duration`),i=oi(o,p),l=s(`${Gt}Delay`),c=s(`${Gt}Duration`),u=oi(l,c);let d=null,g=0,m=0;t===Hn?i>0&&(d=Hn,g=i,m=p.length):t===Gt?u>0&&(d=Gt,g=u,m=c.length):(g=Math.max(i,u),d=g>0?i>u?Hn:Gt:null,m=d?d===Hn?p.length:c.length:0);const _=d===Hn&&/\b(transform|all)(,|$)/.test(s(`${Hn}Property`).toString());return{type:d,timeout:g,propCount:m,hasTransform:_}}function oi(n,t){for(;n.length<t.length;)n=n.concat(n);return Math.max(...t.map((e,s)=>pi(e)+pi(n[s])))}function pi(n){return n==="auto"?0:Number(n.slice(0,-1).replace(",","."))*1e3}function c0(){return document.body.offsetHeight}function Pu(n,t,e){const s=n[Bt];s&&(t=(t?[t,...s]:[...s]).join(" ")),t==null?n.removeAttribute("class"):e?n.setAttribute("class",t):n.className=t}const ii=Symbol("_vod"),Tu=Symbol("_vsh"),Lu=Symbol(""),Ru=/(^|;)\s*display\s*:/;function Ou(n,t,e){const s=n.style,o=Ba(e);let p=!1;if(e&&!o){if(t)if(Ba(t))for(const i of t.split(";")){const l=i.slice(0,i.indexOf(":")).trim();e[l]==null&&rs(s,l,"")}else for(const i in t)e[i]==null&&rs(s,i,"");for(const i in e)i==="display"&&(p=!0),rs(s,i,e[i])}else if(o){if(t!==e){const i=s[Lu];i&&(e+=";"+i),s.cssText=e,p=Ru.test(e)}}else t&&n.removeAttribute("style");ii in n&&(n[ii]=p?s.display:"",n[Tu]&&(s.display="none"))}const ri=/\s*!important$/;function rs(n,t,e){if(Y(e))e.forEach(s=>rs(n,t,s));else if(e==null&&(e=""),t.startsWith("--"))n.setProperty(t,e);else{const s=xu(n,t);ri.test(e)?n.setProperty(Ft(s),e.replace(ri,""),"important"):n[s]=e}}const li=["Webkit","Moz","ms"],Ks={};function xu(n,t){const e=Ks[t];if(e)return e;let s=un(t);if(s!=="filter"&&s in n)return Ks[t]=s;s=ye(s);for(let o=0;o<li.length;o++){const p=li[o]+s;if(p in n)return Ks[t]=p}return t}const ci="http://www.w3.org/1999/xlink";function Bu(n,t,e,s,o){if(s&&t.startsWith("xlink:"))e==null?n.removeAttributeNS(ci,t.slice(6,t.length)):n.setAttributeNS(ci,t,e);else{const p=Bl(t);e==null||p&&!rr(e)?n.removeAttribute(t):n.setAttribute(t,p?"":e)}}function Cu(n,t,e,s,o,p,i){if(t==="innerHTML"||t==="textContent"){s&&i(s,o,p),n[t]=e??"";return}const l=n.tagName;if(t==="value"&&l!=="PROGRESS"&&!l.includes("-")){const u=l==="OPTION"?n.getAttribute("value")||"":n.value,d=e??"";(u!==d||!("_value"in n))&&(n.value=d),e==null&&n.removeAttribute(t),n._value=e;return}let c=!1;if(e===""||e==null){const u=typeof n[t];u==="boolean"?e=rr(e):e==null&&u==="string"?(e="",c=!0):u==="number"&&(e=0,c=!0)}try{n[t]=e}catch{}c&&n.removeAttribute(t)}function wu(n,t,e,s){n.addEventListener(t,e,s)}function Vu(n,t,e,s){n.removeEventListener(t,e,s)}const ui=Symbol("_vei");function Mu(n,t,e,s,o=null){const p=n[ui]||(n[ui]={}),i=p[t];if(s&&i)i.value=s;else{const[l,c]=Fu(t);if(s){const u=p[t]=Uu(s,o);wu(n,l,u,c)}else i&&(Vu(n,l,i,c),p[t]=void 0)}}const di=/(?:Once|Passive|Capture)$/;function Fu(n){let t;if(di.test(n)){t={};let s;for(;s=n.match(di);)n=n.slice(0,n.length-s[0].length),t[s[0].toLowerCase()]=!0}return[n[2]===":"?n.slice(3):Ft(n.slice(2)),t]}let Ws=0;const ju=Promise.resolve(),Hu=()=>Ws||(ju.then(()=>Ws=0),Ws=Date.now());function Uu(n,t){const e=s=>{if(!s._vts)s._vts=Date.now();else if(s._vts<=e.attached)return;ln(Nu(s,e.value),t,5,[s])};return e.value=n,e.attached=Hu(),e}function Nu(n,t){if(Y(t)){const e=n.stopImmediatePropagation;return n.stopImmediatePropagation=()=>{e.call(n),n._stopped=!0},t.map(s=>o=>!o._stopped&&s&&s(o))}else return t}const gi=n=>n.charCodeAt(0)===111&&n.charCodeAt(1)===110&&n.charCodeAt(2)>96&&n.charCodeAt(2)<123,Ku=(n,t,e,s,o,p,i,l,c)=>{const u=o==="svg";t==="class"?Pu(n,s,u):t==="style"?Ou(n,e,s):Ie(t)?Mo(t)||Mu(n,t,e,s,i):(t[0]==="."?(t=t.slice(1),!0):t[0]==="^"?(t=t.slice(1),!1):Wu(n,t,s,u))?Cu(n,t,s,p,i,l,c):(t==="true-value"?n._trueValue=s:t==="false-value"&&(n._falseValue=s),Bu(n,t,s,u))};function Wu(n,t,e,s){if(s)return!!(t==="innerHTML"||t==="textContent"||t in n&&gi(t)&&ea(e));if(t==="spellcheck"||t==="draggable"||t==="translate"||t==="form"||t==="list"&&n.tagName==="INPUT"||t==="type"&&n.tagName==="TEXTAREA")return!1;if(t==="width"||t==="height"){const o=n.tagName;if(o==="IMG"||o==="VIDEO"||o==="CANVAS"||o==="SOURCE")return!1}return gi(t)&&Ba(e)?!1:t in n}const u0=new WeakMap,d0=new WeakMap,vs=Symbol("_moveCb"),mi=Symbol("_enterCb"),g0={name:"TransitionGroup",props:Ta({},bu,{tag:String,moveClass:String}),setup(n,{slots:t}){const e=Je(),s=Vr();let o,p;return Hr(()=>{if(!o.length)return;const i=n.moveClass||`${n.name||"v"}-move`;if(!Xu(o[0].el,e.vnode.el,i))return;o.forEach(qu),o.forEach(Qu);const l=o.filter($u);c0(),l.forEach(c=>{const u=c.el,d=u.style;Rn(u,i),d.transform=d.webkitTransform=d.transitionDuration="";const g=u[vs]=m=>{m&&m.target!==u||(!m||/transform$/.test(m.propertyName))&&(u.removeEventListener("transitionend",g),u[vs]=null,Kn(u,i))};u.addEventListener("transitionend",g)})}),()=>{const i=ca(n),l=r0(i);let c=i.tag||Ya;if(o=[],p)for(let u=0;u<p.length;u++){const d=p[u];d.el&&d.el instanceof Element&&(o.push(d),de(d,ue(d,l,s,e)),u0.set(d,d.el.getBoundingClientRect()))}p=t.default?Yo(t.default()):[];for(let u=0;u<p.length;u++){const d=p[u];d.key!=null&&de(d,ue(d,l,s,e))}return xa(c,null,p)}}},Gu=n=>delete n.mode;g0.props;const zu=g0;function qu(n){const t=n.el;t[vs]&&t[vs](),t[mi]&&t[mi]()}function Qu(n){d0.set(n,n.el.getBoundingClientRect())}function $u(n){const t=u0.get(n),e=d0.get(n),s=t.left-e.left,o=t.top-e.top;if(s||o){const p=n.el.style;return p.transform=p.webkitTransform=`translate(${s}px,${o}px)`,p.transitionDuration="0s",n}}function Xu(n,t,e){const s=n.cloneNode(),o=n[Bt];o&&o.forEach(l=>{l.split(/\s+/).forEach(c=>c&&s.classList.remove(c))}),e.split(/\s+/).forEach(l=>l&&s.classList.add(l)),s.style.display="none";const p=t.nodeType===1?t:t.parentNode;p.appendChild(s);const{hasTransform:i}=l0(s);return p.removeChild(s),i}const Zu=Ta({patchProp:Ku},Su);let Gs,_i=!1;function Yu(){return Gs=_i?Gs:eu(Zu),_i=!0,Gs}const ad=(...n)=>{const t=Yu().createApp(...n),{mount:e}=t;return t.mount=s=>{const o=td(s);if(o)return e(o,!0,nd(o))},t};function nd(n){if(n instanceof SVGElement)return"svg";if(typeof MathMLElement=="function"&&n instanceof MathMLElement)return"mathml"}function td(n){return Ba(n)?document.querySelector(n):n}var ed=["link","meta","script","style","noscript","template"],sd=["title","base"],od=([n,t,e])=>sd.includes(n)?n:ed.includes(n)?n==="meta"&&t.name?`${n}.${t.name}`:n==="template"&&t.id?`${n}.${t.id}`:JSON.stringify([n,Object.entries(t).map(([s,o])=>typeof o=="boolean"?o?[s,""]:null:[s,o]).filter(s=>s!=null).sort(([s],[o])=>s.localeCompare(o)),e]):null,pd=n=>{const t=new Set,e=[];return n.forEach(s=>{const o=od(s);o&&!t.has(o)&&(t.add(o),e.push(s))}),e},id=n=>n[0]==="/"?n:`/${n}`,m0=n=>n[n.length-1]==="/"||n.endsWith(".html")?n:`${n}/`,et=n=>/^(https?:)?\/\//.test(n),rd=/.md((\?|#).*)?$/,Ss=(n,t="/")=>!!(et(n)||n.startsWith("/")&&!n.startsWith(t)&&!rd.test(n)),bs=n=>/^[a-z][a-z0-9+.-]*:/.test(n),Ut=n=>Object.prototype.toString.call(n)==="[object Object]",ld=n=>{const[t,...e]=n.split(/(\?|#)/);if(!t||t.endsWith("/"))return n;let s=t.replace(/(^|\/)README.md$/i,"$1index.html");return s.endsWith(".md")?s=s.substring(0,s.length-3)+".html":s.endsWith(".html")||(s=s+".html"),s.endsWith("/index.html")&&(s=s.substring(0,s.length-10)),s+e.join("")},sp=n=>n[n.length-1]==="/"?n.slice(0,-1):n,_0=n=>n[0]==="/"?n.slice(1):n,cd=(n,t)=>{const e=Object.keys(n).sort((s,o)=>{const p=o.split("/").length-s.split("/").length;return p!==0?p:o.length-s.length});for(const s of e)if(t.startsWith(s))return s;return"/"},Da=n=>typeof n=="string";const ud="modulepreload",dd=function(n){return"/"+n},hi={},a=function(t,e,s){let o=Promise.resolve();if(e&&e.length>0){document.getElementsByTagName("link");const p=document.querySelector("meta[property=csp-nonce]"),i=(p==null?void 0:p.nonce)||(p==null?void 0:p.getAttribute("nonce"));o=Promise.all(e.map(l=>{if(l=dd(l),l in hi)return;hi[l]=!0;const c=l.endsWith(".css"),u=c?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${l}"]${u}`))return;const d=document.createElement("link");if(d.rel=c?"stylesheet":ud,c||(d.as="script",d.crossOrigin=""),d.href=l,i&&d.setAttribute("nonce",i),document.head.appendChild(d),c)return new Promise((g,m)=>{d.addEventListener("load",g),d.addEventListener("error",()=>m(new Error(`Unable to preload CSS for ${l}`)))})}))}return o.then(()=>t()).catch(p=>{const i=new Event("vite:preloadError",{cancelable:!0});if(i.payload=p,window.dispatchEvent(i),!i.defaultPrevented)throw p})},gd=JSON.parse('{"/posts/baeldung/Archive/Replacing%20Strings%20in%20Java%20Using%20Regex:%20Back%20Reference%20vs.%20Lookaround.html":"/posts/baeldung/Archive/Replacing%20Strings%20in%20Java%20Using%20Regex_%20Back%20Reference%20vs.%20Lookaround.html","/posts/baeldung/Archive/Solving%20Spring%20Data%20JPA%20ConverterNotFoundException:%20No%20converter%20found.html":"/posts/baeldung/Archive/Solving%20Spring%20Data%20JPA%20ConverterNotFoundException_%20No%20converter%20found.html"}'),md=Object.fromEntries([["/",{loader:()=>a(()=>import("./index.html-DW-cAaXP.js"),__vite__mapDeps([0,1])),meta:{t:"Baeldung 中文网",i:"home"}}],["/posts/articles/gRPC%20Authentication%20in%20Java%20Using%20Application%20Layer%20Transport%20Security%20(ALTS).html",{loader:()=>a(()=>import("./gRPC Authentication in Java Using Application Layer Transport Security (ALTS).html-CrjTwchd.js"),__vite__mapDeps([2,1])),meta:{d:17182368e5,l:"2024年6月13日",c:["Java","gRPC"],g:["ALTS","安全"],e:`
<p>在本教程中，我们将探讨 ALTS（应用层传输安全）在 gRPC 应用程序中的作用。众所周知，在分布式架构中确保认证和数据安全是困难但至关重要的。</p>
<p>ALTS 是 Google 专为其云基础设施定制构建的内置双向认证和传输加密解决方案。ALTS 简化了 gRPC 服务之间的认证和数据加密，并且可以通过最小的代码更改启用。因此，它在开发者中很受欢迎，因为他们可以更多地专注于编写业务逻辑。</p>
<p>ALTS 与 TLS 类似，但具有针对 Google 基础设施优化的不同信任模型。让我们快速看一下它们之间的主要区别：</p>
<table>
<thead>
<tr>
<th>特性</th>
<th>ALTS</th>
<th>TLS</th>
</tr>
</thead>
<tbody>
<tr>
<td>信任模型</td>
<td>基于身份，依赖于 GCP IAM 服务账户</td>
<td>基于证书，需要证书管理，包括续订和撤销</td>
</tr>
<tr>
<td>设计</td>
<td>更简单</td>
<td>更复杂</td>
</tr>
<tr>
<td>使用上下文</td>
<td>用于保护在 Google 数据中心运行的 gRPC 服务</td>
<td>用于保护 Web 浏览（HTTPS）、电子邮件、即时消息、VoIP 等</td>
</tr>
<tr>
<td>消息序列化</td>
<td>使用 Protocol Buffers</td>
<td>使用用 ASN.1 编码的 X.509 证书</td>
</tr>
<tr>
<td>性能</td>
<td>为通用用途设计</td>
<td>针对 Google 数据中心中的低延迟、高吞吐量通信进行优化</td>
</tr>
</tbody>
</table>`,r:{minutes:6,words:1801},t:"gRPC 在 Java 中使用应用层传输安全（ALTS）进行认证",y:"a"}}],["/posts/articles/mongo-share.html",{loader:()=>a(()=>import("./mongo-share.html-Bmwz8o8w.js"),__vite__mapDeps([3,1])),meta:{d:1718246262e3,e:`
<h2>MongoDB 基础</h2>
<h3>MongoDB 是什么？</h3>
<p>MongoDB 是一个基于 <strong>分布式文件存储</strong> 的开源 NoSQL 数据库系统，由 <strong>C++</strong> 编写的。MongoDB 提供了 <strong>面向文档</strong> 的存储方式，操作起来比较简单和容易，支持“<strong>无模式</strong>”的数据建模，可以存储比较复杂的数据类型，是一款非常流行的 <strong>文档类型数据库</strong> 。</p>
<p>在高负载的情况下，MongoDB 天然支持水平扩展和高可用，可以很方便地添加更多的节点/实例，以保证服务性能和可用性。在许多场景下，MongoDB 可以用于代替传统的关系型数据库或键/值存储方式，皆在为 Web 应用提供可扩展的高可用高性能数据存储解决方案。</p>`,r:{minutes:7.2,words:2159},t:"Mongo 经验总结分享",y:"a"}}],["/posts/articles/postgresql/%E5%9C%A8Mac%E8%AF%B4%E5%AE%89%E8%A3%85postgresql%E5%B9%B6%E4%B8%94%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8D%95%E7%8B%AC%E7%BB%99%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7%E8%B5%8B%E4%BA%88%E6%9D%83%E9%99%90.html",{loader:()=>a(()=>import("./在Mac说安装postgresql并且创建一个数据库单独给一个用户赋予权限.html-eswedOXd.js"),__vite__mapDeps([4,1])),meta:{d:17188416e5,l:"2024年6月20日",c:["PostgreSQL","MacOS"],g:["PostgreSQL","MacOS","Homebrew","Database"],e:`
<h2>1. 安装PostgreSQL</h2>
<h3>先决条件：您的计算机上已安装 Homebrew。如果没有，您可以随时访问 https://brew.sh/zh-cn/ 获取安装说明。</h3>
<p>使用以下命令安装 PostgreSQL：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>brew <span class="token function">install</span> postgresql@16
</code></pre></div>`,r:{minutes:3.94,words:1182},t:"在MacOS使用Homebrew安装postgresql并且创建新用户和数据库，并将数据库的所有权分配给新用户。",y:"a"}}],["/posts/baeldung/2024-06-21/2024-06-21-%20DataJpaTest%20and%20Repository%20Class%20in%20JUnit.html",{loader:()=>a(()=>import("./2024-06-21- DataJpaTest and Repository Class in JUnit.html-C1fvk-Ne.js"),__vite__mapDeps([5,1])),meta:{d:17190144e5,l:"2024年6月22日",c:["Spring Boot","JUnit"],g:["DataJpaTest","Repository"],e:`
<ol>
<li>引言</li>
</ol>
<p>在使用 Spring Boot 应用程序和 Spring Data JPA 进行数据持久化时，测试与数据库交互的仓库至关重要。本教程将探讨如何使用 Spring Boot 提供的 @DataJpaTest 注解以及 JUnit 来有效测试 Spring Data JPA 仓库。</p>
<ol start="2">
<li>理解 @DataJpaTest 和 Repository 类</li>
</ol>
<p>在本节中，我们将深入了解 @DataJpaTest 和 Spring Boot 应用程序中类仓库之间的交互。</p>
<p>2.1. @DataJpaTest</p>`,r:{minutes:6.89,words:2067},t:"@DataJpaTest 和 JUnit 中的 Repository 类",y:"a"}}],["/posts/baeldung/2024-06-21/2024-06-21-Count%20the%20Number%20of%20Unique%20Digits%20in%20an%20Integer%20using%20Java.html",{loader:()=>a(()=>import("./2024-06-21-Count the Number of Unique Digits in an Integer using Java.html-DhCjpC5P.js"),__vite__mapDeps([6,1])),meta:{d:1718928e6,l:"2024年6月21日",c:["Java","数字处理"],g:["数字唯一性","集合","流API","位操作"],e:`
<h2>1. 概述</h2>
<p>在这个简短的教程中，我们将探讨如何使用Java来计算一个整数中包含的唯一数字的数量。</p>
<h2>2. 理解问题</h2>
<p>给定一个整数，我们的目标是计算它包含多少个不同的数字。例如，整数567890有六个不同的数字，而115577只有三个不同的数字（1、5和7）。</p>
<h2>3. 使用集合</h2>
<p>找到整数中唯一数字数量的最直接方式是使用集合。集合本质上可以消除重复项，这使得它们非常适合我们的需求：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">countWithSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    number <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Set</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">&gt;</span></span>\` uniqueDigits <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> numberStr <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> digit <span class="token operator">:</span> numberStr<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        uniqueDigits<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>digit<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> uniqueDigits<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.53,words:760},t:"使用Java计算整数中唯一数字的数量",y:"a"}}],["/posts/baeldung/2024-06-21/2024-06-21-Create%20JavaType%20From%20Class%20with%20Jackson.html",{loader:()=>a(()=>import("./2024-06-21-Create JavaType From Class with Jackson.html-2GNsDXkt.js"),__vite__mapDeps([7,1])),meta:{d:17190144e5,l:"2024年6月22日",c:["Java","Jackson"],g:["JavaType","Class"],e:`
<h2>1. 引言</h2>
<p>在使用Jackson时，我们可能会遇到需要从给定的类对象生成JavaType的情况。</p>
<p><strong>在本教程中，我们将看到如何利用Jackson库从类创建JavaType。</strong></p>
<h2>2. JavaType和Class简介</h2>
<p>在深入细节之前，让我们先看看JavaType和Class。</p>
<h3>2.1 Java中的JavaType</h3>
<p>在Jackson中，JavaType类代表Java类型。它是一种机制，可以让我们处理泛型类型，例如参数化类型和数组。</p>
<p><strong>创建JavaType实例非常重要，特别是当我们在处理JSON时处理泛型结构。</strong></p>`,r:{minutes:2.12,words:637},t:"使用Jackson从类创建JavaType",y:"a"}}],["/posts/baeldung/2024-06-21/2024-06-21-Custom%20Event%20Handlers%20and%20Listeners%20in%20Netty.html",{loader:()=>a(()=>import("./2024-06-21-Custom Event Handlers and Listeners in Netty.html-CCxPKUL0.js"),__vite__mapDeps([8,1])),meta:{d:17050176e5,l:"2024年1月12日",c:["Netty","编程"],g:["Netty","事件处理器","监听器"],e:`
<p>在本教程中，我们将使用Netty来创建一个聊天室应用程序。在网络编程中，Netty以其强大的框架脱颖而出，简化了异步I/O操作的复杂性。我们将探索如何构建一个基本的聊天服务器，允许多个客户端连接并进行实时对话。</p>
<h2>场景</h2>
<p>发送到服务器的消息将被转发给所有连接的客户端。它还将保留最后几条消息的列表，以便新客户端在连接时可以从当前对话中获得上下文。为此，我们只需要几个事件处理器来维护通道之间的通信：</p>
<p>在Netty中，通信是通过通道完成的，这抽象了任何协议上的异步I/O操作。这使我们能够专注于应用逻辑而不是网络代码。我们的应用程序将通过命令行工作。我们将编写服务器和客户端应用程序。</p>`,r:{minutes:8.23,words:2468},t:"Netty中自定义事件处理器和监听器",y:"a"}}],["/posts/baeldung/2024-06-21/2024-06-21-Difference%20Between%20GroupId%20and%20ConsumerId%20in%20Apache%20Kafka.html",{loader:()=>a(()=>import("./2024-06-21-Difference Between GroupId and ConsumerId in Apache Kafka.html-Ci326SpX.js"),__vite__mapDeps([9,1])),meta:{d:17190144e5,l:"2024年6月22日",c:["Apache Kafka","GroupId vs ConsumerId"],g:["GroupId","ConsumerId"],e:`
<h2>1. 引言</h2>
<p>在本教程中，我们将阐明Apache Kafka中GroupId和ConsumerId的区别，这对于正确设置消费者至关重要。此外，我们还将讨论ClientId与ConsumerId的区别以及它们之间的关联。</p>
<h2>2. 消费者组</h2>
<p>在探讨Apache Kafka中标识符类型的区别之前，让我们先了解消费者组。</p>
<p><strong>消费者组由多个协同工作以从一个或多个主题中消费消息的消费者组成</strong>，实现并行消息处理。它们在分布式Kafka环境中实现了可扩展性、容错性和高效的消息并行处理。</p>
<p>关键的是，<strong>组内的每个消费者只负责处理其主题的一个子集</strong>，即分区。</p>`,r:{minutes:4.9,words:1470},t:"Apache Kafka中GroupId和ConsumerId的区别 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-21/2024-06-21-Document%20Query%20Parameters%20with%20Spring%20REST%20Docs.html",{loader:()=>a(()=>import("./2024-06-21-Document Query Parameters with Spring REST Docs.html-BpHDZBkN.js"),__vite__mapDeps([10,1])),meta:{d:1718928e6,l:"2024年6月21日",c:["Spring","REST Docs"],g:["API文档","Spring Boot"],e:`
<p>现在，新版本的《REST With Spring - "REST With Spring Boot"》终于发布了，当前价格将在本周五之前有效，之后将永久上涨50美元。</p>
<p><strong>&gt;获取访问权限</strong></p>
<p><strong>现在</strong></p>
<h2>1. 概述</h2>
<p>文档对于我们打算与世界分享的任何代码都是至关重要的，特别是当这段代码相对复杂时。良好的API文档不仅吸引开发者使用它，还展示了产品的质量。一个文档编写草率的公司可能也有一个编写草率的API。</p>
<p>然而，开发者喜欢为机器编写代码，而不是为人编写文本。</p>`,r:{minutes:6,words:1800},t:"使用Spring REST Docs记录REST API查询参数",y:"a"}}],["/posts/baeldung/2024-06-21/2024-06-21-Find%20an%20Unique%20Email%20Address%20in%20a%20List.html",{loader:()=>a(()=>import("./2024-06-21-Find an Unique Email Address in a List.html-CR9Fv2by.js"),__vite__mapDeps([11,1])),meta:{d:1719013699e3,e:`<p>由于提供的网页内容无法解析，因此无法获取到具体的category、tag、date、keywords和SEO content等信息。根据您提供的要求，以下是翻译后的格式示例：</p>
<hr>
<p>date: {具体日期}
category:</p>
<ul>
<li 类别1=""></li>
<li>{类别2}
tag:</li>
<li 标签1=""></li>
<li>{标签2}
head:</li>
<li>
<ul>
<li>meta</li>
<li seo内容="">name: {关键词}
content:</li>
</ul>
</li>
</ul>
<hr>
<h1>在Java中查找唯一的电子邮件地址</h1>`,r:{minutes:.54,words:161},t:"在Java中查找唯一的电子邮件地址",y:"a"}}],["/posts/baeldung/2024-06-21/2024-06-21-Finding%20the%20Parent%20of%20a%20Node%20in%20a%20Binary%20Search%20Tree%20with%20Java.html",{loader:()=>a(()=>import("./2024-06-21-Finding the Parent of a Node in a Binary Search Tree with Java.html-R-4SWvDX.js"),__vite__mapDeps([12,1])),meta:{d:1718928e6,l:"2024年6月21日",c:["Java","数据结构"],g:["二叉搜索树","算法"],e:`
<h2>1. 引言</h2>
<p>二叉搜索树（BST）是一种数据结构，它帮助我们高效地解决现实世界的问题。</p>
<p>在这篇文章中，我们将探讨如何在二叉搜索树中找到节点的父节点的问题。</p>
<h2>2. 什么是二叉搜索树？</h2>
<p><strong>二叉搜索树是一种树状数据结构，其中每个节点最多指向两个节点，通常称为左孩子和右孩子。此外，每个节点的值都大于其左孩子并且小于其右孩子。</strong></p>
<p>例如，让我们想象三个节点，A=2，B=1和C=4。因此，一个可能的BST以A作为根节点，B作为其左孩子，C作为其右孩子。</p>
<p>在接下来的部分中，我们将使用一个具有默认_insert()_方法的BST结构来练习查找节点父节点的问题。</p>`,r:{minutes:7.76,words:2327},t:"在Java中使用二叉搜索树查找节点的父节点 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-21/2024-06-21-Generate%20Juggler%20Sequence%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-21-Generate Juggler Sequence in Java.html-C_-rOEDw.js"),__vite__mapDeps([13,1])),meta:{d:1718928e6,l:"2024年6月21日",c:["Java","算法"],g:["序列","递归"],e:`
<p>杂耍序列以其迷人的行为和优雅的简单性而脱颖而出。</p>
<p>在本教程中，我们将理解杂耍序列，并探索如何使用Java中的给定初始数字生成序列。</p>
<h3>2. 理解杂耍序列</h3>
<p>在我们深入到生成杂耍序列的代码之前，让我们快速了解一下杂耍序列是什么。</p>
<p>在数论中，杂耍序列是一个整数序列，定义为递归如下：​​</p>
<ul>
<li>以正整数( n )作为序列的第一项。</li>
<li>如果 ( n ) 是偶数，下一项是 ( n ) 的平方根，向下取整到最近的整数。</li>
<li>如果 ( n ) 是奇数，则下一项是 ( n \\times \\sqrt{n} )，向下取整到最近的整数。</li>
</ul>`,r:{minutes:3.85,words:1156},t:"Java中生成杂耍序列",y:"a"}}],["/posts/baeldung/2024-06-21/2024-06-21-Get%20First%20n%20Characters%20in%20a%20String%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-21-Get First n Characters in a String in Java.html-BRijXMWT.js"),__vite__mapDeps([14,1])),meta:{d:17190144e5,l:"2024年6月22日",c:["Java","String Manipulation"],g:["Java","String","substring","Apache Commons Lang","Guava"],e:`
<p>在这篇简短的教程中，我们将探讨在Java中获取字符串前n个字符的不同方法。</p>
<p>首先，我们将学习如何使用Java核心开发工具包（JDK）的方法和类来实现这一目标。然后，我们将看到如何使用如Apache Commons Lang和Guava等外部库来达到相同的结果。</p>
<h3>使用Java核心开发工具包（JDK）</h3>
<p>JDK提供了几种我们可以用于获取给定字符串的前n个字符的方法。让我们仔细看看每个选项。</p>
<h4>2.1 使用String#substring方法</h4>
<p>String类的substring()方法提供了一个简单的解决方案来回答我们的中心问题。顾名思义，这个方法返回给定字符串的一个子集作为一个新的字符串。</p>`,r:{minutes:3.9,words:1169},t:"Java中获取字符串前n个字符的不同方法",y:"a"}}],["/posts/baeldung/2024-06-21/2024-06-21-Get%20the%20Initials%20of%20a%20Name%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-21-Get the Initials of a Name in Java.html-B6u_50A3.js"),__vite__mapDeps([15,1])),meta:{d:1718928e6,l:"2024年6月21日",c:["Java","编程"],g:["缩写","姓名缩写"],e:`
<h2>1. 引言</h2>
<p>在处理姓名时，将它们缩短为使用每个单词的第一个字符组成的缩写字符串可能会很有帮助。在本教程中，们来看看在Java中实现这一功能的几种不同方法。</p>
<h2>2. 假设</h2>
<p><strong>在创建缩写时，我们只考虑以字母开头的单词。</strong> 任何其他单词都从过程中排除。此外，缩写可能最终是一个空字符串，没有有效的单词。此外，我们将整个字符串转换为大写。</p>
<h2>3. 使用循环</h2>
<p><strong>我们可以通过空格分割文本，并使用for循环来遍历每个单词。</strong> 随后，我们可以取每个有效单词的第一个字符并构建缩写：</p>`,r:{minutes:3.09,words:926},t:"在Java中获取姓名的首字母缩写",y:"a"}}],["/posts/baeldung/2024-06-21/2024-06-21-Gson%20TypeToken%20With%20Dynamic%20List%20Item%20Type.html",{loader:()=>a(()=>import("./2024-06-21-Gson TypeToken With Dynamic List Item Type.html-Bexik6cq.js"),__vite__mapDeps([16,1])),meta:{d:17190144e5,l:"2024年6月22日",c:["Java","Gson"],g:["JSON","Java List","TypeToken"],e:`
<p>在本教程中，我们将讨论如何将 JSON 数组转换为等价的 java.util.List 对象。Gson 是 Google 提供的一个 Java 库，它帮助将 JSON 字符串转换为 Java 对象，反之亦然。</p>
<p>这个库中的 Gson 类有一个 fromJson() 方法，它接受两个参数，第一个参数是 JSON 字符串，第二个参数是 java.lang.reflect.Type 类型。该方法将 JSON 字符串转换为由其第二个参数表示类型的等价 Java 对象。</p>
<p>我们将创建一个通用方法，比如 convertJsonArrayToListOfAnyType(String jsonArray, T elementType)，它可以将 JSON 数组转换为 List<code>&lt;T&gt;</code>，其中 T 是 List 中元素的类型。</p>`,r:{minutes:5.31,words:1593},t:"Gson 使用 TypeToken 处理动态列表项类型",y:"a"}}],["/posts/baeldung/2024-06-21/2024-06-21-How%20to%20Mock%20Amazon%20S3%20for%20Integration%20Test.html",{loader:()=>a(()=>import("./2024-06-21-How to Mock Amazon S3 for Integration Test.html-DLBgbatJ.js"),__vite__mapDeps([17,1])),meta:{d:1718928e6,l:"2024年6月21日",c:["Java","AWS"],g:["S3","Mock","Testing"],e:`
<h2>1. 引言</h2>
<p>在本文中，我们将学习如何模拟Amazon S3（简单存储服务）以运行Java应用程序的集成测试。</p>
<p>为了演示它的工作原理，我们将创建一个使用AWS SDK与S3交互的CRUD（创建、读取、更新、删除）服务。然后，我们将使用模拟的S3服务为每个操作编写集成测试。</p>
<h2>2. S3概述</h2>
<p>Amazon Simple Storage Service（S3）是由Amazon Web Services（AWS）提供的高可扩展性和安全的云存储服务。它使用<strong>对象存储模型，允许用户从网络上的任何地方存储和检索数据</strong>。</p>`,r:{minutes:4.54,words:1363},t:"如何为集成测试模拟Amazon S3 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-21/2024-06-21-How%20to%20Pretty%20Print%20a%20Map%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-21-How to Pretty Print a Map in Java.html-BG4dXhCK.js"),__vite__mapDeps([18,1])),meta:{d:17190144e5,l:"2024年6月22日",c:["Java","教程"],g:["Java","地图","格式化输出"],e:`
<p>漂亮打印Java中的<code>Map</code>涉及到以一种视觉上吸引人且易于阅读的方式格式化和显示Map中的键值对。尽管Java没有提供内置的漂亮打印Map的方法，我们必须实现自定义解决方案。</p>
<p>在本教程中，我们将学习如何实现这一目标。根据我们的偏好和详细程度，我们将探索使用标准JDK和外部库的多种方法。</p>
<h2>2. 创建一个<code>Map</code></h2>
<p>在我们继续之前，让我们创建一个Map来操作：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Map</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>\` map <span class="token operator">=</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>
  <span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token string">"inner"</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>
    <span class="token string">"ten"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span>
    <span class="token string">"eleven"</span><span class="token punctuation">,</span> <span class="token number">11</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:5.7,words:1709},t:"Java中漂亮打印Map的方法",y:"a"}}],["/posts/baeldung/2024-06-21/2024-06-21-Implementing%20GraphQL%20Mutation%20Without%20Returning%20Data.html",{loader:()=>a(()=>import("./2024-06-21-Implementing GraphQL Mutation Without Returning Data.html-CiUW-4p_.js"),__vite__mapDeps([19,1])),meta:{d:17190144e5,l:"2024年6月22日",c:["GraphQL","Java"],g:["GraphQL Mutation","Spring Boot"],e:`
<h2>1. 引言</h2>
<p><strong>GraphQL 是一种强大的 API 查询语言，为我们与数据的交互提供了灵活而高效的方式。</strong> 当处理 mutation（变更）时，我们通常会在服务器上执行数据的更新或添加。然而，在某些场景中，我们可能需要进行变更而不返回任何数据。</p>
<p>在 GraphQL 中，默认行为是强制字段在模式中为非空性，这意味着除非明确标记为可空，否则字段必须始终返回一个值，不能为 null。虽然这种严格性有助于 API 的清晰度和可预测性，但有时返回 null 可能是必要的。然而，通常认为避免返回 null 值是一个最佳实践。</p>
<p>在本文中，我们将探讨实现不检索或返回特定信息的 GraphQL mutation 的技术。</p>`,r:{minutes:6.03,words:1810},t:"在不返回数据的情况下实现GraphQL Mutation",y:"a"}}],["/posts/baeldung/2024-06-21/2024-06-21-Increase%20the%20Memory%20Size%20Limit%20on%20IntelliJ%20IDEA.html",{loader:()=>a(()=>import("./2024-06-21-Increase the Memory Size Limit on IntelliJ IDEA.html-hiIH6uhV.js"),__vite__mapDeps([20,1])),meta:{d:1719010108e3,c:["REST with Spring Boot","Learn Spring Security"],g:["Spring","Spring Security","Spring Data JPA"],e:`<hr>
<h1>在 IntelliJ IDEA 中增加内存大小限制</h1>
<ul>
<li>
<p>从这里开始</p>
</li>
<li>
<p>课程▼▲</p>
</li>
<li>
<p><strong>使用 Spring Boot 构建 REST</strong><br>
构建生产级 API 的标准参考 Spring <strong>（周末价格将上涨 $50）</strong></p>
</li>
<li>
<p><strong>学习 Spring Security▼▲</strong><br>
如果你是今天使用 Java 的工作者，这是唯一的 Spring Security 教育</p>
</li>
<li>
<p><strong>学习 Spring Security 核心▼▲</strong><br>
专注于 Spring Security 6 的核心</p>
</li>
<li>
<p><strong>学习 Spring Security OAuth▼▲</strong><br>
专注于 Spring Security 6 中新的 OAuth2 栈</p>
</li>
<li>
<p><strong>学习 Spring▼▲</strong><br>
从无经验到实际构建东西</p>
</li>
<li>
<p><strong>学习 Spring Data JPA▼▲</strong><br>
使用 Spring Data JPA 的完整持久性指南</p>
</li>
<li>
<p>指南▼▲</p>
</li>
<li>
<p><strong>持久性</strong><br>
使用 Spring 的持久性指南</p>
</li>
<li>
<p><strong>REST</strong><br>
使用 Spring 构建 REST API 的指南</p>
</li>
<li>
<p><strong>安全</strong><br>
Spring Security 指南</p>
</li>
<li>
<p>关于▼▲</p>
</li>
<li>
<p><strong>完整存档</strong><br>
网站上所有文章的高级概述。</p>
</li>
<li>
<p><strong>Baeldung 电子书</strong><br>
发现我们所有的电子书</p>
</li>
<li>
<p><strong>关于 Baeldung</strong><br>
关于 Baeldung 的信息。</p>
</li>
<li>
<p><strong>为 Baeldung 写作</strong><br>
成为网站上的作者。</p>
</li>
<li>
<p>RSS</p>
</li>
<li>
<p>搜索在 IntelliJ IDEA 中增加内存大小限制</p>
</li>
</ul>`,r:{minutes:.98,words:293},t:"在 IntelliJ IDEA 中增加内存大小限制",y:"a"}}],["/posts/baeldung/2024-06-21/2024-06-21-Iterating%20All%20Fields%20of%20a%20Data%20Class%20Without%20Reflection%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-06-21-Iterating All Fields of a Data Class Without Reflection in Kotlin.html-Bi5Yi8wR.js"),__vite__mapDeps([21,1])),meta:{d:1718977697e3,e:`<p>由于我无法访问外部链接，因此无法获取网页的具体内容，包括标题、日期、类别、标签和元数据。但是，我可以为您提供一个示例格式，您可以根据网页内容填充相关信息：</p>
<hr>
<p>date: {yyyy-MM-DD}
category:</p>
<ul>
<li category=""></li>
<li>{category2}
tag:</li>
<li tag1=""></li>
<li>{tag2}
head:</li>
<li>
<ul>
<li>meta</li>
<li seo="" content="">name: {keywords}
content:</li>
</ul>
</li>
</ul>`,r:{minutes:.52,words:156},t:"",y:"a"}}],["/posts/baeldung/2024-06-21/2024-06-21-Migrate%20Application%20from%20Spring%20Security%205%20to%20Spring%20Security%206%20Spring%20Boot%203.html",{loader:()=>a(()=>import("./2024-06-21-Migrate Application from Spring Security 5 to Spring Security 6 Spring Boot 3.html-CFdN4Eyx.js"),__vite__mapDeps([22,1])),meta:{d:1718928e6,l:"2024年6月21日",c:["Spring Security","Spring Boot"],g:["迁移","安全"],e:`
<p>Spring Security 6带来了几个重大变化，包括移除类、弃用方法以及引入新方法。</p>
<p>从Spring Security 5迁移到Spring Security 6可以逐步进行，不会破坏现有的代码库。此外，我们可以使用第三方插件如OpenRewrite来促进迁移到最新版本。</p>
<p>在本教程中，我们将学习如何将使用Spring Security 5的现有应用程序迁移到Spring Security 6。我们将替换弃用的方法，并利用lambda DSL简化配置。此外，我们将利用OpenRewrite使迁移更快。</p>
<p>Spring Boot基于Spring框架，Spring Boot的版本使用Spring框架的最新版本。Spring Boot 2默认使用Spring Security 5，而Spring Boot 3使用Spring Security 6。</p>`,r:{minutes:5.85,words:1755},t:"将应用程序从Spring Security 5迁移到Spring Security 6/Spring Boot 3 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-21/2024-06-21-Modify%20and%20Print%20List%20Items%20With%20Java%20Streams.html",{loader:()=>a(()=>import("./2024-06-21-Modify and Print List Items With Java Streams.html-TVGu9gXv.js"),__vite__mapDeps([23,1])),meta:{d:1718928e6,l:"2024年6月21日",c:["Java","编程"],g:["Java","流","列表","打印"],e:'\n<h2>1. 概述</h2>\n<p>在使用Java时，操作列表是一项基本技能。</p>\n<p>在这个快速教程中，我们将探索不同的方法来修改或转换列表，然后打印其元素。</p>\n<h2>2. 修改和打印列表</h2>\n<p>打印列表中的元素对我们来说不是挑战。例如，我们可以在<code>forEach()</code>方法中调用打印操作：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span>``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````` theList <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"Kai"</span><span class="token punctuation">,</span> <span class="token string">"Liam"</span><span class="token punctuation">,</span> <span class="token string">"Eric"</span><span class="token punctuation">,</span> <span class="token string">"Kevin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ntheList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>element <span class="token operator">-&gt;</span> log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div>',r:{minutes:3.65,words:1095},t:"使用Java流修改和打印列表项",y:"a"}}],["/posts/baeldung/2024-06-21/2024-06-21-Query%20Hints%20in%20Spring%20Data%20JPA.html",{loader:()=>a(()=>import("./2024-06-21-Query Hints in Spring Data JPA.html-qZnd2XOi.js"),__vite__mapDeps([24,1])),meta:{d:1718928e6,l:"2024年6月21日",c:["Spring Data JPA","Query Optimization"],g:["Query Hints","Performance"],e:`
<p>在本教程中，我们将探讨Spring Data JPA中查询提示的基础知识。这些提示有助于优化数据库查询，并通过影响优化器的决策过程来潜在地提高应用程序性能。我们还将讨论它们的功能以及如何有效地应用它们。</p>
<h2>2. 理解查询提示</h2>
<p>Spring Data JPA中的查询提示是一个强大的工具，可以帮助优化数据库查询并提高应用程序性能。与直接控制执行不同，它们影响优化器的决策过程。</p>
<p>在Spring Data JPA中，我们可以在<code>org.hibernate.annotations</code>包中找到这些提示，以及与Hibernate相关的各种注释和类，Hibernate是一种普遍的持久性提供者。<strong>值得注意的是，这些提示的解释和执行通常取决于底层的持久性提供者，如Hibernate或EclipseLink，使它们成为特定于供应商的。</strong></p>`,r:{minutes:5.16,words:1548},t:"Spring Data JPA中的查询提示",y:"a"}}],["/posts/baeldung/2024-06-21/2024-06-21-Railway%20Oriented%20Programming%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-06-21-Railway Oriented Programming in Kotlin.html-CTuMmPeT.js"),__vite__mapDeps([25,1])),meta:{d:17190144e5,l:"2024年6月22日",c:["Kotlin","编程"],g:["函数式编程","Railway Oriented Programming"],e:`
<p>在本教程中，我们将实现 Scott Wlaschin 创造的铁路导向编程（ROP），ROP 帮助我们使用函数式编程（FP）编写带有验证、日志记录、网络和服务错误以及其他副作用的代码。</p>
<p>ROP 中的“快乐路径”指的是代码在没有异常和错误的情况下运行的路径。“不快乐或失败路径”是当一些异常和错误由开发人员处理时。我们将解释如何在 FP 中使用 ROP 来处理成功和失败的路径。</p>
<p>假设我们有一个函数，它从用户那里接收客户详细信息，如姓名和电子邮件地址。然后它创建 <em>Customer</em> 对象以保存到数据库中。</p>
<p>让我们看看快乐路径是什么样子的：</p>`,r:{minutes:3.61,words:1084},t:"用 Kotlin 实现铁路导向编程",y:"a"}}],["/posts/baeldung/2024-06-21/2024-06-21-Remove%20Only%20Trailing%20Spaces%20or%20Whitespace%20From%20a%20String%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-21-Remove Only Trailing Spaces or Whitespace From a String in Java.html-DHStYn5O.js"),__vite__mapDeps([26,1])),meta:{d:17190144e5,l:"2024年6月22日",c:["Java","String Manipulation"],g:["trailing spaces","whitespace","regex","stripTrailing"],e:`
<p>字符串操作是Java编程中的一项常见任务。有时，尾部的空白字符可能会导致不一致性，增加存储大小，甚至引起意外的bug。</p>
<p>在这个快速教程中，我们将探索有效的技术来从给定的字符串中仅移除尾部的空格或空白字符。</p>
<h2>2. 问题介绍</h2>
<p>首先，我们创建一个输入字符串作为示例：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">INPUT</span> <span class="token operator">=</span> <span class="token string">"  a b c d e \\t  "</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:2.86,words:858},t:"在Java中仅移除字符串尾部的空格或空白字符",y:"a"}}],["/posts/baeldung/2024-06-21/2024-06-21-Serialization%20with%20FlatBuffers%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-21-Serialization with FlatBuffers in Java.html-evqmCeXb.js"),__vite__mapDeps([27,1])),meta:{d:1718928e6,l:"2024年6月21日",c:["Java","Serialization"],g:["FlatBuffers","Tutorial"],e:`
<p>在这个教程中，我们将探索Java中的FlatBuffers，并使用它进行序列化和反序列化操作。</p>
<p>序列化是将Java对象转换为可以在网络上传输或在文件中持久化的字节流的过程。Java通过_java.io.Serializable_接口以及_java.io.ObjectOutputStream_和_java.io.ObjectInputStream_类提供了内置的对象序列化机制。</p>
<p>然而，由于它在处理复杂对象图和依赖类时的方法复杂，以及一些其他缺点，Java中有几种库可用于序列化和反序列化。</p>
<p>一些广泛使用的Java序列化库包括Jackson和Gson。一个较新的Java对象序列化格式标准是Protocol Buffers。Protocol Buffers是由Google开发的一种与语言无关的二进制序列化格式。它们在高性能环境和分布式系统中使用，其中效率和互操作性至关重要。</p>`,r:{minutes:7.11,words:2132},t:"Java中使用FlatBuffers进行序列化",y:"a"}}],["/posts/baeldung/2024-06-21/2024-06-21-Simplified%20Array%20Operations%20on%20JsonNode%20Without%20Typecasting%20in%20Jackson.html",{loader:()=>a(()=>import("./2024-06-21-Simplified Array Operations on JsonNode Without Typecasting in Jackson.html-47FT12m_.js"),__vite__mapDeps([28,1])),meta:{d:1718928e6,l:"2024年6月21日",c:["Java","Jackson"],g:["JsonNode","ArrayNode"],e:`
<p>在Java中使用JSON（JavaScript对象标记）通常涉及到使用像Jackson这样的库，它提供了多种类来表示这种类型的数据，比如_JsonNode, ObjectNode,_ 和 <em>ArrayNode</em>。</p>
<p><strong>在本教程中，我们将</strong> <strong>探索不同的方法来简化对_JsonNode_的数组操作，而无需在Java中显式地将其转换为_ArrayNode_。</strong> 这在我们直接在代码中操作数据时是必要的。</p>
<p><em>JsonNode</em> 是Jackson库中的一个抽象类，它表示JSON树中的一个节点。它是所有节点的基类，并且能够存储不同类型的数据，包括对象、数组、字符串、数字、布尔值和null值。<strong><em>JsonNode</em> 实例是不可变的，这意味着我们不能在它们上面设置属性。</strong></p>`,r:{minutes:3.22,words:965},t:"Jackson中无需类型转换简化JsonNode数组操作",y:"a"}}],["/posts/baeldung/2024-06-21/2024-06-21-Skip%20Select%20Before%20Insert%20in%20Spring%20Data%20JPA.html",{loader:()=>a(()=>import("./2024-06-21-Skip Select Before Insert in Spring Data JPA.html-DeROGmEJ.js"),__vite__mapDeps([29,1])),meta:{d:17190144e5,l:"2024年6月22日",c:["Spring Data JPA","JPA"],g:["Hibernate","Performance"],e:`<hr>
<h1>Spring Data JPA 中跳过插入前的 SELECT 查询</h1>
<h2>1. 概述</h2>
<p>在使用 Spring Data JPA Repository 保存实体时，我们可能会在日志中遇到额外的 <em>SELECT</em> 查询。这可能会导致由于大量额外调用而引起的性能问题。</p>
<p><strong>在本教程中，我们将探讨一些跳过日志中 <em>SELECT</em> 的方法并提高性能。</strong></p>
<h2>2. 配置</h2>
<p>在深入研究 Spring Data JPA 并进行测试之前，我们需要采取一些准备步骤。</p>
`,r:{minutes:6.62,words:1986},t:"Spring Data JPA 中跳过插入前的 SELECT 查询",y:"a"}}],["/posts/baeldung/2024-06-21/2024-06-21-Spring%20Data%20JPA%20Repository%20for%20Database%20View.html",{loader:()=>a(()=>import("./2024-06-21-Spring Data JPA Repository for Database View.html-OtAzCWKu.js"),__vite__mapDeps([30,1])),meta:{d:17190144e5,l:"2024年6月22日",c:["Spring Data JPA","数据库视图"],g:["Spring Boot","REST API","Spring Security"],e:`
<ul>
<li>
<p>开始这里</p>
</li>
<li>
<p>课程▼▲</p>
</li>
<li>
<p><strong>Spring Boot REST</strong><br>
\\ 构建生产级API的标准参考与Spring <strong>(几天后价格将上涨50美元)</strong></p>
</li>
<li>
<p><strong>学习Spring Security ▶</strong><br>
\\ 今天Java工作中唯一的Spring Security教育</p>
</li>
<li>
<p><strong>学习Spring Security Core</strong><br>
\\ 专注于Spring Security 6的核心</p>
</li>
<li>
<p><strong>学习Spring Security OAuth</strong><br>
\\ 专注于Spring Security 6中的新OAuth2堆栈</p>
</li>
<li>
<p><strong>学习Spring</strong><br>
\\ 从无经验到实际构建东西</p>
</li>
<li>
<p><strong>学习Spring Data JPA</strong><br>
\\ 完整的Spring Data JPA持久性指南</p>
</li>
<li>
<p>指南▼▲</p>
</li>
<li>
<p><strong>持久性</strong><br>
\\ Spring持久性的指南</p>
</li>
<li>
<p><strong>REST</strong><br>
\\ 构建Spring REST API的指南</p>
</li>
<li>
<p><strong>安全性</strong><br>
\\ Spring Security指南</p>
</li>
<li>
<p>关于▼▲</p>
</li>
<li>
<p><strong>完整存档</strong><br>
\\ 网站上所有文章的高层次概述。</p>
</li>
<li>
<p><strong>Baeldung电子书</strong><br>
\\ 发现我们所有的电子书</p>
</li>
<li>
<p><strong>关于Baeldung</strong><br>
\\ 关于Baeldung。</p>
</li>
<li>
<p><strong>为Baeldung写作</strong><br>
\\ 成为网站上的作者。</p>
</li>
<li>
<p>RSS</p>
</li>
<li>
<p>搜索</p>
</li>
</ul>`,r:{minutes:.8,words:241},t:"Spring Data JPA Repository 用于数据库视图 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-21/2024-06-21-Testcontainers%20Desktop.html",{loader:()=>a(()=>import("./2024-06-21-Testcontainers Desktop.html-DuOZDpaS.js"),__vite__mapDeps([31,1])),meta:{d:17190144e5,l:"2024年6月22日",c:["Software Engineering","Testing"],g:["Testcontainers","Docker","Testing Tools"],e:`
<p>在本教程中，我们将探索 Testcontainers 桌面应用程序，这是一个简单但功能强大的工具，用于运行 Testcontainers。我们将学习如何使用它来配置我们的 Docker 环境，管理容器生命周期，并了解我们开发和测试模式的见解。</p>
<p>Testcontainers 桌面提供了一个最小化的 UI 设计，旨在简化 Testcontainer 配置和调试。我们可以从官方网站免费下载 Testcontainers 桌面。要开始使用它，我们将通过创建账户或通过第三方如 Google、GitHub 或 Docker 进行注册。</p>
<p>就是这样！一旦我们安装了应用程序并登录，我们就可以在开发工作流程中开始使用 Testcontainers 桌面：</p>`,r:{minutes:7.94,words:2381},t:"Testcontainers 桌面应用 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-22/2024-06-22-A%20Guide%20to%20etcd.html",{loader:()=>a(()=>import("./2024-06-22-A Guide to etcd.html-CUMo2UY0.js"),__vite__mapDeps([32,1])),meta:{d:17190144e5,l:"2024年6月22日",c:["Java","etcd"],g:["分布式系统","键值存储"],e:`
<p>在分布式系统的复杂世界中，确保高效的数据管理至关重要。分布式可靠的键值存储在维护分布式环境中的数据一致性和可扩展性方面发挥着关键作用。</p>
<p>在这篇全面的教程中，我们将深入探讨 etcd，这是一个开源的分布式键值存储。我们将探索它的基本概念、特性和用例，并提供一个实践快速入门指南。最后，我们将比较 etcd 与其他几种分布式键值存储，以了解它的优势和独特之处。</p>
<h2>2. 分布式键值存储是什么？</h2>
<p><strong>分布式键值存储是一种 NoSQL 数据库，它将数据存储为跨多个物理或虚拟机的键值对。</strong></p>
<p>这种分布本质上增强了可扩展性、容错性和性能。此外，每个数据片段（值）都与一个唯一的标识符（键）相关联。这种模型对于某些用例非常高效，例如缓存、配置管理和快速数据检索。</p>`,r:{minutes:12.89,words:3866},t:"etcd 指南",y:"a"}}],["/posts/baeldung/2024-06-22/2024-06-22-A%20Guide%20to%20the%20%20SoftDelete%20Annotation%20in%20Hibernate.html",{loader:()=>a(()=>import("./2024-06-22-A Guide to the  SoftDelete Annotation in Hibernate.html-C2Tf9rsH.js"),__vite__mapDeps([33,1])),meta:{d:17191008e5,l:"2024年6月23日",c:["Hibernate","SoftDelete"],g:["Java","Annotation","SoftDelete"],e:`
<h2>1. 概述</h2>
<p>在应用程序中使用数据库时，我们通常需要处理不再有用的记录的删除。然而，由于业务或法规要求，例如数据恢复、审计追踪或引用完整性目的，我们可能需要隐藏这些记录而不是删除它们。</p>
<p>在本教程中，我们将了解Hibernate的@SoftDelete注解并学习如何实现它。</p>
<h2>2. 理解@SoftDelete注解</h2>
<p>**@SoftDelete注解提供了一种方便的机制来标记任何记录为活动状态或已删除状态。**它有三个不同的配置部分：</p>
<ul>
<li>**策略配置是跟踪活动行还是已删除行。**我们可以通过将_strategy_设置为_ACTIVE_或_DELETED_来配置它。</li>
<li>**指示器列确定将使用哪个列来跟踪行。**如果没有指定列，则策略使用默认列（<em>active_或_deleted</em>）。</li>
<li>**转换器定义了指示器列在数据库中的设置方式。**领域类型是一个布尔值，指示记录是活动状态还是已删除状态。然而，通过实现_AttributeConverter_，我们可以将关系类型设置为转换器定义的任何类型。可用的转换器有_NumericBooleanConverter_、<em>YesNoConverter_和_TrueFalseConverter</em>。</li>
</ul>`,r:{minutes:3.69,words:1107},t:"Hibernate中的@SoftDelete注解指南",y:"a"}}],["/posts/baeldung/2024-06-22/2024-06-22-Add%20Camel%20Route%20at%20Runtime%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-22-Add Camel Route at Runtime in Java.html-a2e3Cl8i.js"),__vite__mapDeps([34,1])),meta:{d:17190144e5,l:"2024年6月22日",c:["Java","Apache Camel"],g:["动态路由","企业集成模式"],e:`<hr>
<h1>在Java中动态添加Camel路由</h1>
<p>Apache Camel是一个Java框架，它简化了各种企业集成模式（EIPs）的实现，为企业提供解决方案。</p>
<p>在集成模式中，一个常见的任务是根据特定规则和条件在运行时确定消息路由。Apache Camel通过提供实现动态路由器EIP的方法简化了这一过程。</p>
<p>在本教程中，我们将深入了解如何在Apache Camel中实现动态路由，并演示一个示例。</p>
<h3>2. 理解动态路由器</h3>
<p>有时，我们希望根据运行时的特定规则和条件将消息发送到不同的路由。像路由滑片EIP这样的解决方案可以帮助解决问题，但由于它使用试错法，效率较低。</p>`,r:{minutes:5.7,words:1711},t:"在Java中动态添加Camel路由",y:"a"}}],["/posts/baeldung/2024-06-22/2024-06-22-Calculate%20Weighted%20Mean%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-22-Calculate Weighted Mean in Java.html-mDS7Wwax.js"),__vite__mapDeps([35,1])),meta:{d:17191008e5,l:"2024年6月23日",c:["Java","编程"],g:["权重平均数","计算"],e:`
<h2><strong>1. 引言</strong></h2>
<p>在本文中，我们将探讨几种不同的方法来解决同一个问题——计算一组数值的加权平均数。</p>
<h2><strong>2. 什么是加权平均数？</strong></h2>
<p>我们通过将一组数字全部相加，然后除以数字的个数来计算标准平均数。例如，数字1、3、5、7、9的平均数将是(1 + 3 + 5 + 7 + 9) / 5，等于5。</p>
<p><strong>当我们计算加权平均数时，我们有一组每个数字都有权重的数字：</strong></p>
<table>
<thead>
<tr>
<th>数字</th>
<th>权重</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>10</td>
</tr>
<tr>
<td>3</td>
<td>20</td>
</tr>
<tr>
<td>5</td>
<td>30</td>
</tr>
<tr>
<td>7</td>
<td>50</td>
</tr>
<tr>
<td>9</td>
<td>40</td>
</tr>
</tbody>
</table>`,r:{minutes:7.89,words:2367},t:"在Java中计算加权平均数",y:"a"}}],["/posts/baeldung/2024-06-22/2024-06-22-Check%20if%20String%20is%20Base64%20Encoded.html",{loader:()=>a(()=>import("./2024-06-22-Check if String is Base64 Encoded.html-Bq24aDtY.js"),__vite__mapDeps([36,1])),meta:{d:17190144e5,l:"2024年6月22日",c:["Java","Base64"],g:["Base64编码","数据编码"],e:`
<p>在Java编程中，我们经常需要处理数据编码和解码。此外，Base64编码因其流行而被广泛用于将二进制数据转换为ASCII文本格式。</p>
<h2>1. 引言</h2>
<p>本文将探讨在Java中可用于验证给定字符串是否为Base64编码的技术。</p>
<h2>2. 理解Base64编码</h2>
<p>Base64是一种将二进制数据编码为ASCII字符串格式的二进制到文本的编码方案。</p>
<p>每3个字节对应四个字符，这使得通信过程更加安全，因为数据将通过文本协议发送。</p>
<h2>3. 使用 <em>Base64.getDecoder().decode()</em></h2>`,r:{minutes:2.29,words:687},t:"如何在Java中检查字符串是否为Base64编码",y:"a"}}],["/posts/baeldung/2024-06-22/2024-06-22-Check%20if%20Two%20Strings%20Are%20Rotations%20of%20Each%20Other.html",{loader:()=>a(()=>import("./2024-06-22-Check if Two Strings Are Rotations of Each Other.html-D30P_Vcz.js"),__vite__mapDeps([37,1])),meta:{d:17190144e5,l:"2024年6月22日",c:["Java","String Algorithms"],g:["String Rotation","Java"],e:`<hr>
<h1>如何检查两个字符串是否是彼此的旋转</h1>
<p>在本教程中，我们将学习如何检查一个字符串是否是另一个字符串的旋转。</p>
<p>我们将简要讨论什么是字符串旋转。然后，我们将查看一些算法来解决这个问题，并进行代码洞察和复杂度分析。</p>
<h2>2. 字符串旋转简介</h2>
<p>在深入一些解决方案之前，让我们讨论一下字符串旋转以及我们应该为算法测试什么。</p>
<h3>2.1. 字符串和字符串旋转</h3>
<p>字符串是原始字符的序列，在Java中，它被包装在_String_类中。尽管两个字符串可能是不同的对象，我们可以比较它们的内部字符，并检查，例如，它们是否相等或包含共同的模式。</p>`,r:{minutes:7.61,words:2283},t:"如何检查两个字符串是否是彼此的旋转",y:"a"}}],["/posts/baeldung/2024-06-22/2024-06-22-Check%20if%20a%20String%20Is%20Equal%20to%20Its%20Mirror%20Reflection.html",{loader:()=>a(()=>import("./2024-06-22-Check if a String Is Equal to Its Mirror Reflection.html-C4heShb1.js"),__vite__mapDeps([38,1])),meta:{d:17190144e5,l:"2024年6月22日",c:["Java","字符串"],g:["字符串反转","镜像测试"],e:`
<p>当我们在Java中工作时，字符串操作和比较是日常任务。</p>
<p>在这个快速教程中，我们将深入探讨一个有趣的问题：检查字符串是否等于其镜像反射。</p>
<h2>2. 问题介绍</h2>
<p>一个常见的误解是，获取字符串的镜像反射仅仅涉及反转其顺序。以字符串“ALL”为例。直观上，人们可能会期望它的镜像反射是“LLA”。然而，通过实际使用镜子仔细检查，我们发现“LLA”并不符合“ALL”的镜像版本。</p>
<p>关键的误解在于，字符串中的<strong>每个单独字符在其镜像反射中都会发生反转</strong>。因此，“ALL”的镜像反射实际上看起来像“⅃⅃A”。</p>
<p>字符可以根据其反转行为被归类为对称或不对称。<strong>对称字符是指在反转时保持不变的字符</strong>，例如‘A’、‘O’、‘o’、‘V’、‘v’、‘M’、‘8’、‘+’、‘-’等。相反，不对称字符与其反转形式不同，例如‘L’、‘S’、‘p’、‘h’、‘/’、‘3’等。</p>`,r:{minutes:3.26,words:977},t:"检查字符串是否等于其镜像反射",y:"a"}}],["/posts/baeldung/2024-06-22/2024-06-22-Collect%20Stream%20of%20entrySet%20%20%20to%20a%20LinkedHashMap.html",{loader:()=>a(()=>import("./2024-06-22-Collect Stream of entrySet   to a LinkedHashMap.html-CkvNFLmX.js"),__vite__mapDeps([39,1])),meta:{d:17190144e5,l:"2024年6月22日",c:["Java","Tutorial"],g:["LinkedHashMap","Stream","Java 8"],e:`
<p>在本教程中，我们将探讨将 Map.Entry 对象的流以不同方式收集到 LinkedHashMap 中。LinkedHashMap 与 HashMap 类似，但不同之处在于它保持插入顺序。</p>
<h2>2. 理解问题</h2>
<p>我们可以通过调用 entrySet() 方法后跟 stream() 方法来获取地图条目的流。这个流使我们能够处理每个条目。</p>
<p>处理是通过中间操作实现的，可以涉及使用 filter() 方法进行过滤或使用 map() 方法进行转换。<strong>最终，我们必须通过适当的终端操作来决定如何处理我们的流。</strong> 在我们的情况下，我们面临的挑战是将流收集到 LinkedHashMap 中。</p>`,r:{minutes:3.89,words:1166},t:"将 entrySet() 流收集到 LinkedHashMap",y:"a"}}],["/posts/baeldung/2024-06-22/2024-06-22-CompletableFuture%20runAsync%20%20%20vs.%20supplyAsync%20%20%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-22-CompletableFuture runAsync   vs. supplyAsync   in Java.html-BTNFt-f7.js"),__vite__mapDeps([40,1])),meta:{d:17190144e5,l:"2024年6月22日",c:["Java","CompletableFuture"],g:["CompletableFuture","runAsync","supplyAsync"],e:`
<p>Java的_CompletableFuture_框架提供了强大的异步编程能力，方便了任务的并发执行。</p>
<p>在本教程中，我们将深入探讨_CompletableFuture_提供的两个基本方法——runAsync()和supplyAsync()。我们将探索它们的区别、使用场景以及何时选择其中一个。</p>
<h3>2. CompletableFuture, runAsync() 和 supplyAsync() 的理解</h3>
<p>CompletableFuture是Java中一个强大的框架，它支持异步编程，允许任务并发执行而不会阻塞主线程。runAsync()和supplyAsync()是由CompletableFuture类提供的方法。</p>`,r:{minutes:8.51,words:2554},t:"Java中CompletableFuture的runAsync()与supplyAsync()对比 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-22/2024-06-22-Convert%20Date%20to%20Unix%20Timestamp%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-22-Convert Date to Unix Timestamp in Java.html-BGAArZS1.js"),__vite__mapDeps([41,1])),meta:{d:17191008e5,l:"2024年6月23日",c:["Java","Date-Time"],g:["Unix Timestamp","Java 8"],e:`
<p>在计算机科学中，Unix时间戳，也称为纪元时间，是一种标准的表示特定时间点的方式。它表示自1970年1月1日以来经过的秒数。</p>
<p>本教程将介绍如何将传统日期转换为Unix时间戳。首先，我们将探讨如何使用内置的JDK方法来实现这一点。然后，我们将展示如何使用Joda-Time等外部库来达到相同的目标。</p>
<h2>2. 使用Java 8+日期时间API</h2>
<p>Java 8引入了一个新的日期时间API，我们可以使用它来回答我们的核心问题。这个新API带有几种方法和类来操作日期。那么，让我们仔细看看每个选项。</p>
<h3>2.1. 使用Instant类</h3>
`,r:{minutes:3.73,words:1120},t:"Java中将日期转换为Unix时间戳",y:"a"}}],["/posts/baeldung/2024-06-22/2024-06-22-Convert%20Infix%20to%20Postfix%20Expressions%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-22-Convert Infix to Postfix Expressions in Java.html-zXX7Fu_M.js"),__vite__mapDeps([42,1])),meta:{d:17190144e5,l:"2024年6月22日",c:["Java","算法"],g:["表达式转换","逆波兰表示法"],e:`
<p>在本教程中，我们将讨论将数学表达式的中缀表示法转换为后缀表示法的算法和代码。像Java这样的编程语言允许我们定义和使用不同的数学表达式。表达式可以通过变量、常量和运算符的组合来书写。</p>
<h3>2.1. 算术表达式</h3>
<p>算术表达式包括加法(+)、减法(-)、乘法(*)、除法(/)和取模(%)等运算符。这些运算符与变量或常量一起使用，会产生算术评估：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> sum <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token keyword">int</span> prod <span class="token operator">=</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span>

<span class="token keyword">int</span> remainder <span class="token operator">=</span> x <span class="token operator">%</span> y<span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:8.94,words:2683},t:"Java中将中缀表达式转换为后缀表达式",y:"a"}}],["/posts/baeldung/2024-06-22/2024-06-22-Count%20Uppercase%20and%20Lowercase%20Letters%20in%20a%20String.html",{loader:()=>a(()=>import("./2024-06-22-Count Uppercase and Lowercase Letters in a String.html-CjcOcrG0.js"),__vite__mapDeps([43,1])),meta:{d:1719056965e3,c:["Java","String Manipulation"],g:["uppercase","lowercase","count"],e:`
<p>当在Java中使用字符串类型时，经常需要分析其中的字符组成。一个常见的任务是计算给定字符串中的大写字母和小写字母的数量。</p>
<p>在本教程中，我们将探索使用Java实现这一任务的几种简单实用的方法。</p>
<h2>2. 问题介绍</h2>
<p>在深入代码之前，我们首先明确手头的问题。我们想要创建一个Java方法，它接受一个字符串作为输入，并同时计算大写字母和小写字母的数量。换句话说，<strong>解决方案将产生包含两个计数器的结果</strong>。</p>
<p>例如，我们将以下面的字符串作为输入：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>static final String MY_STRING = "Hi, Welcome to Baeldung! Let's count letters!";
</code></pre></div>`,r:{minutes:3.83,words:1150},t:"在Java中统计字符串中的大写和小写字母",y:"a"}}],["/posts/baeldung/2024-06-22/2024-06-22-CountDownLatch%20vs.%20Semaphore.html",{loader:()=>a(()=>import("./2024-06-22-CountDownLatch vs. Semaphore.html-BYlPsemv.js"),__vite__mapDeps([44,1])),meta:{d:17191008e5,l:"2024年6月23日",c:["Java","Concurrency"],g:["CountDownLatch","Semaphore"],e:`
<p>在Java多线程编程中，线程间的有效协调对于确保适当的同步和防止数据损坏至关重要。两种常用的线程协调机制是_CountDownLatch_和_Semaphore_。在本教程中，我们将探讨_CountDownLatch_和_Semaphore_之间的区别，并讨论何时使用它们。</p>
<h3>2.1. <em>CountDownLatch</em></h3>
<p>**_CountDownLatch_允许一个或多个线程在指定的任务集完成之前优雅地暂停。**它通过将计数器递减，直到它达到零，这表明所有先决任务都已完成。</p>
<h3>2.2. <em>Semaphore</em></h3>`,r:{minutes:5.78,words:1735},t:"CountDownLatch与Semaphore的对比",y:"a"}}],["/posts/baeldung/2024-06-22/2024-06-22-Creating%20a%20Custom%20URL%20Connection.html",{loader:()=>a(()=>import("./2024-06-22-Creating a Custom URL Connection.html-ssW2ncg3.js"),__vite__mapDeps([45,1])),meta:{d:17191008e5,l:"2024年6月23日",c:["Java","网络编程"],g:["URLConnection","自定义连接"],e:`
<p>在Java中，_URLConnection_类为通过_URL_指定的资源提供本的连接功能。然而，在某些情况下，开发者可能需要自定义实现以适应特定的需求。本教程将探讨创建自定义URL连接的过程。</p>
<h3>为什么创建自定义URL连接</h3>
<p>由于与默认_URLConnection_类相关联的各种限制，创建自定义URL连接变得迫切。在这一部分中，我们将讨论这些限制并概述需要定制的场景。</p>
<h4>2.1. <strong>解决协议限制</strong></h4>
<p>默认的_URLConnection_类为通过URL连接资源提供了基本机制。**它主要设计用于HTTP和HTTPS协议。**在应用程序需要使用组织内或特定应用程序开发的自定义协议与资源交互的情况下，自定义连接是必要的。例如，我们可能需要连接到公司内部网络协议或自定义数据库协议。</p>`,r:{minutes:6.23,words:1869},t:"创建自定义URL连接",y:"a"}}],["/posts/baeldung/2024-06-22/2024-06-22-Difference%20Between%20thenApply%20%20%20and%20thenApplyAsync%20%20%20in%20CompletableFuture.html",{loader:()=>a(()=>import("./2024-06-22-Difference Between thenApply   and thenApplyAsync   in CompletableFuture.html-KgUWn7HH.js"),__vite__mapDeps([46,1])),meta:{d:17190144e5,l:"2024年6月22日",c:["Java","CompletableFuture"],g:["thenApply","thenApplyAsync"],e:`
<p>在 CompletableFuture 框架中，thenApply() 和 thenApplyAsync() 是支持异步编程的关键方法。</p>
<p>在本教程中，我们将深入探讨 CompletableFuture 中 thenApply() 和 thenApplyAsync() 之间的差异。我们将探索它们的功能、使用案例，以及何时选择其中一个而不是另一个。</p>
<p>CompletableFuture 提供了 thenApply() 和 thenApplyAsync() 方法，用于对计算结果应用转换。这两种方法都允许在 CompletableFuture 的结果上执行操作链。</p>`,r:{minutes:6.88,words:2065},t:"CompletableFuture 中的 thenApply() 和 thenApplyAsync() 之间的区别",y:"a"}}],["/posts/baeldung/2024-06-22/2024-06-22-Find%20The%20Largest%20Number%20in%20a%20String.html",{loader:()=>a(()=>import("./2024-06-22-Find The Largest Number in a String.html-BdSPnLoD.js"),__vite__mapDeps([47,1])),meta:{d:17190144e5,l:"2024年6月22日",c:["Java","编程技巧"],g:["字符串处理","数字提取"],e:`<hr>
<h1>在字符串中找到最大数字</h1>
<h2>1. 引言</h2>
<p>在处理多种编程场景时，经常会遇到包含数字的字符串，可能需要找到这些值中的最大值。</p>
<p><strong>本教程将深入探讨不同的方法和Java代码示例，以正确识别并提取给定字符串中的最大数值。</strong></p>
<h2>2. 使用比较的字符串解析</h2>
<p>最简单的方法包括读取字符串并识别数字子字符串。我们可以通过比较前缀来检测最大数字。让我们来看一个例子：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> inputString <span class="token operator">=</span> <span class="token string">"The numbers are 10, 20, and 5"</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> expectedLargestNumber <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenInputString_whenUsingBasicApproach_thenFindingLargestNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers <span class="token operator">=</span> inputString<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"[^0-9]+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> largestNumber <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> number <span class="token operator">:</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>number<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> currentNumber <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>currentNumber <span class="token operator">&gt;</span> largestNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                largestNumber <span class="token operator">=</span> currentNumber<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span>expectedLargestNumber<span class="token punctuation">,</span> largestNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:6.18,words:1853},t:"在字符串中找到最大数字",y:"a"}}],["/posts/baeldung/2024-06-22/2024-06-22-Find%20the%20Equilibrium%20Indexes%20of%20an%20Array%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-22-Find the Equilibrium Indexes of an Array in Java.html-CZ28cBoT.js"),__vite__mapDeps([48,1])),meta:{d:17191008e5,l:"2024年6月23日",c:["Java","Algorithm"],g:["Equilibrium Index","Array"],e:`
<h2>1. 概述</h2>
<p>在本教程中，我们首先学习数组平衡索引的定义。随后，我们将编写一个方法来识别和定位它们。</p>
<h2>2. 问题陈述</h2>
<p><strong>给定一个大小为N的零索引数组_A_，如果索引_i_满足左侧元素之和等于右侧元素之和，则该索引是平衡索引。</strong> 也就是说：A[0] + A[1] + … + A[i-1] = A[i+1] + A[i+2] + … + A[N-1]。特别是，对于数组的第一个和最后一个索引，其他元素的和应该是0。例如，考虑数组_{1, -3, 0, 4, -5, 4, 0, 1, -2, -1}_：</p>
<ul>
<li>1是一个平衡索引，因为A[0] = 1且A[2] + A[3] + A[4] + A[5] + A[6] + A[7] + A[8] + A[9] = 0 + 4 + (-5) + 4 + 0 + 1 + (-2) + (-1) = 1</li>
<li>4也是一个平衡索引，因为A[0] + A[1] + A[2] + A[3] = 1 + (-3) + 0 + 4 = 2且A[5] + A[6] + A[7] + A[8] + A[9] = 4 + 0 + 1 + (-2) + (-1) = 2</li>
<li>A[0] + A[1] + A[2] + A[3] + A[4] + A[5] + A[6] + A[7] + A[8] = 1 + (-3) + 0 + 4 + (-5) + 4 + 0 + 1 + (-2) = 0且没有索引大于9的元素，所以9也是这个数组的平衡索引</li>
<li>另一方面，5不是平衡索引，因为A[0] + A[1] + A[2] + A[3] + A[4] = 1 + (-3) + 0 + 4 + (-5) = -3，而A[6] + A[7] + A[8] + A[9] = 0 + 1 + (-2) + (-1) = -2</li>
</ul>`,r:{minutes:3.93,words:1178},t:"在Java中查找数组的平衡索引",y:"a"}}],["/posts/baeldung/2024-06-22/2024-06-22-Find%20the%20First%20Non%20repeating%20Element%20of%20a%20List.html",{loader:()=>a(()=>import("./2024-06-22-Find the First Non repeating Element of a List.html-BTdzCeg6.js"),__vite__mapDeps([49,1])),meta:{d:17190144e5,l:"2024年6月22日",c:["Java","算法"],g:["非重复元素","列表处理"],e:`
<h2>1. 引言</h2>
<p>在本教程中，我们将探讨在列表中找到第一个不重复元素的问题。我们首先理解问题陈述，然后实现几种方法来达到期望的结果。</p>
<h2>2. 问题陈述</h2>
<p>给定一个元素列表，任务是找到列表中不重复的第一个元素。换句话说，**我们需要识别列表中只出现一次的第一个元素。**如果没有不重复的元素，我们则返回一个适当的指示，例如，<em>null</em>。</p>
<h2>3. 使用 <em>for</em> 循环</h2>
<p>这种方法使用嵌套的 <em>for</em> 循环来遍历列表并检查重复元素。它很直接但效率较低。</p>
<h3>3.1. 实现</h3>`,r:{minutes:7.76,words:2327},t:"寻找列表中第一个不重复的元素",y:"a"}}],["/posts/baeldung/2024-06-22/2024-06-22-Get%20All%20Results%20at%20Once%20in%20a%20Spring%20Boot%20Paged%20Query%20Method.html",{loader:()=>a(()=>import("./2024-06-22-Get All Results at Once in a Spring Boot Paged Query Method.html-D77t3W8Z.js"),__vite__mapDeps([50,1])),meta:{d:17190144e5,l:"2024年6月22日",c:["Spring Boot","Pagination"],g:["Spring Data","JPA"],e:`<hr>
<h1>在Spring Boot分页查询方法中一次性获取所有结果</h1>
<p>在Spring Boot应用程序中，我们经常需要将表格数据以每次20行或50行的块呈现给客户端。分页是返回大型数据集中一部分数据的常见做法。然而，在某些场景下，我们需要一次性获取所有结果。</p>
<p>在本教程中，我们首先回顾了如何在Spring Boot中使用分页来检索数据。接下来，我们将探讨如何一次性从数据库表中检索所有结果。最后，我们将深入到一个更复杂的情景，即检索具有关系的数据显示。</p>
<h2>2. 仓库（Repository）</h2>
<p>仓库是Spring Data接口，提供了数据访问抽象。根据我们选择的仓库子接口，抽象提供了一组预定义的数据库操作。我们不需要为标准数据库操作如选择、保存和删除编写代码。我们所需做的只是为我们的实体创建一个接口，并将其扩展到所选的仓库子接口。</p>`,r:{minutes:8.46,words:2539},t:"在Spring Boot分页查询方法中一次性获取所有结果",y:"a"}}],["/posts/baeldung/2024-06-22/2024-06-22-Get%20a%20Range%20of%20Items%20from%20a%20Stream%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-22-Get a Range of Items from a Stream in Java.html-DwSOVrhL.js"),__vite__mapDeps([51,1])),meta:{d:1719031697e3,c:["REST with Spring Boot"],g:["Learn Spring Security","Learn Spring Security Core","Learn Spring Security OAuth","Learn Spring","Learn Spring Data JPA"],e:`
<ul>
<li>
<p><strong>REST与Spring Boot</strong><br>
即将提高价格的权威参考，用于构建Spring的商业级API（周末价格将上涨50美元）</p>
</li>
<li>
<p><strong>学习Spring Security</strong><br>
如果您今天使用Java工作，这是唯一的Spring Security教育</p>
</li>
<li>
<p><strong>学习Spring Security核心</strong><br>
专注于Spring Security 6的核心</p>
</li>
<li>
<p><strong>学习Spring Security OAuth</strong><br>
专注于Spring Security 6中的新OAuth2堆栈</p>
</li>
<li>
<p><strong>学习Spring</strong><br>
从无经验到实际构建东西</p>
</li>
<li>
<p><strong>学习Spring Data JPA</strong><br>
关于使用Spring Data JPA进行持久化的完整指南---
date: {页面未提供具体日期，无法确定}
category:</p>
<ul>
<li>REST with Spring Boot
tag:</li>
<li>Learn Spring Security</li>
<li>Learn Spring Security Core</li>
<li>Learn Spring Security OAuth</li>
<li>Learn Spring</li>
<li>Learn Spring Data JPA
head:</li>
<li>
<ul>
<li>meta</li>
<li>name: keywords
content: Java Stream, Range, Spring Boot, Spring Security, Spring Data JPA</li>
</ul>
</li>
</ul>
</li>
</ul>`,r:{minutes:1.29,words:387},t:"在Java流中获取一系列项目的教程 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-22/2024-06-22-Guide%20to%20System.in.read%20%20.html",{loader:()=>a(()=>import("./2024-06-22-Guide to System.in.read  .html-Fuka9YBY.js"),__vite__mapDeps([52,1])),meta:{d:17190144e5,l:"2024年6月22日",c:["Java","编程"],g:["System.in.read()","用户输入"],e:`
<p>Java提供了多种工具和函数来处理用户输入。<em>System.in.read()</em> 是Java中用于从控制台读取输入的常用方法之一。在本文中，我们将探讨它的功能以及如何在Java中使用它。</p>
<h2>2. System.in.read()是什么？</h2>
<p>Java方法_System.in.read()_ 从标准输入流中读取一个字节，通常与键盘或其他来源相关联。它是_System_类的一部分，提供了一种低级别的机制来读取基于字节的输入：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span>
</code></pre></div>`,r:{minutes:4.34,words:1301},t:"Java中System.in.read()方法指南",y:"a"}}],["/posts/baeldung/2024-06-22/2024-06-22-How%20To%20Use%20findBy%20%20%20With%20Multiple%20Columns%20in%20JPA.html",{loader:()=>a(()=>import("./2024-06-22-How To Use findBy   With Multiple Columns in JPA.html-655KIJeE.js"),__vite__mapDeps([53,1])),meta:{d:17074368e5,l:"2024年2月9日",c:["Spring Data JPA","JPA"],g:["findBy","多列查询"],e:`<hr>
<h1>如何在JPA中使用findBy()与多列查询</h1>
<p>Spring Data JPA提供了一个查询派生特性，通过遵循方法命名约定，我们可以自动派生查询。</p>
<p>在本文中，我们将使用查询派生特性通过一个或多个列来查找实体。</p>
<h2>2. 示例设置</h2>
<p>为了示例目的，我们将使用一个包含与用户账户相关的属性的_Account_实体：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span>
<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"ACCOUNTS"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Id</span>
    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">SEQUENCE</span><span class="token punctuation">,</span> generator <span class="token operator">=</span> <span class="token string">"accounts_seq"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@SequenceGenerator</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"accounts_seq"</span><span class="token punctuation">,</span> sequenceName <span class="token operator">=</span> <span class="token string">"accounts_seq"</span><span class="token punctuation">,</span> allocationSize <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"user_id"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> userId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Timestamp</span> createdOn<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Timestamp</span> lastLogin<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@OneToOne</span>
    <span class="token annotation punctuation">@JoinColumn</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"permissions_id"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Permission</span> permission<span class="token punctuation">;</span>

    <span class="token comment">// getters and setters</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:3.01,words:904},t:"如何在JPA中使用findBy()与多列查询",y:"a"}}],["/posts/baeldung/2024-06-22/2024-06-22-How%20to%20Check%20if%20a%20Variable%20Is%20Defined%20in%20Thymeleaf.html",{loader:()=>a(()=>import("./2024-06-22-How to Check if a Variable Is Defined in Thymeleaf.html-CjfOQkk8.js"),__vite__mapDeps([54,1])),meta:{d:17190144e5,l:"2024年6月22日",c:["Spring","Thymeleaf"],g:["Thymeleaf","Spring MVC"],e:'<hr>\n<h1>如何在Thymeleaf中检查变量是否已定义</h1>\n<p>在这个教程中，我们将学习使用三种不同的方法来检查Thymeleaf中的变量是否已定义。为此，我们将使用Spring MVC和Thymeleaf构建一个简单的Web应用程序，该程序在设置给定变量的情况下显示服务器的日期和时间。</p>\n<h2>2. 设置</h2>\n<p>在深入研究这些方法之前，我们需要进行一些初始设置。让我们从Thymeleaf依赖项开始：</p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```org.thymeleaf```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```thymeleaf```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```3.1.2.RELEASE```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```org.thymeleaf```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```thymeleaf-spring5```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```3.1.2.RELEASE```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```org.thymeleaf.extras```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```thymeleaf-extras-java8time```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```3.0.4.RELEASE```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n</code></pre></div>',r:{minutes:4.24,words:1271},t:"如何在Thymeleaf中检查变量是否已定义",y:"a"}}],["/posts/baeldung/2024-06-22/2024-06-22-Injecting%20%20Mock%20and%20%20Captor%20in%20JUnit%205%20Method%20Parameters.html",{loader:()=>a(()=>import("./2024-06-22-Injecting  Mock and  Captor in JUnit 5 Method Parameters.html-BE1I_RKL.js"),__vite__mapDeps([55,1])),meta:{d:17191008e5,l:"2024年6月23日",c:["JUnit 5","Mockito"],g:["JUnit 5","Mockito","测试"],e:'\n<h2>1. 概述</h2>\n<p>在本教程中，我们将了解如何在单元测试方法参数中注入 @Mock 和 @Captor 注解。</p>\n<p>我们可以使用 @Mock 在单元测试中创建模拟对象。另一方面，我们可以使用 @Captor 捕获并存储传递给模拟方法的参数，以便稍后进行断言。JUnit 5 的引入使得将参数注入测试方法变得非常容易，从而实现了这一新特性。</p>\n<h2>2. 示例设置</h2>\n<p>要使用此功能，我们需要使用 JUnit 5。库的最新版本可以在 Maven Central Repository 中找到。让我们将依赖项添加到我们的 pom.xml 中：</p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```org.junit.jupiter```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```junit-jupiter-engine```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```5.10.2```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>```test```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>```\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n</code></pre></div>',r:{minutes:4.05,words:1216},t:"JUnit 5 方法参数注入 @Mock 和 @Captor",y:"a"}}],["/posts/baeldung/2024-06-22/2024-06-22-Install%20OpenJDK%20on%20Windows.html",{loader:()=>a(()=>import("./2024-06-22-Install OpenJDK on Windows.html-Bqdghl8S.js"),__vite__mapDeps([56,1])),meta:{d:17190144e5,l:"2024年6月22日",c:["OpenJDK","Windows"],g:["Java","JDK","安装"],e:`
<p>Java在现代软件开发中扮演着关键角色，为许多应用程序和系统提供支持。为了在我们的机器上利用Java的力量，我们需要安装Java开发工具包（JDK）。虽然Oracle JDK是一个流行的选择，但OpenJDK提供了一个具有相似功能的开源替代品。</p>
<p>在本文中，我们将探讨在Windows环境中安装OpenJDK的各种方法，以满足不同的偏好和需求。</p>
<h2>2. 手动安装</h2>
<p>这种方法涉及直接从官方网站或受信任的存储库（如AdoptOpenJDK）下载OpenJDK发行版。</p>
<p>下载后，将归档的内容解压到我们机器上的首选位置。配置环境变量，如_PATH_和_JAVA_HOME_，指向OpenJDK安装的目录至关重要。让我们通过访问控制面板并导航到_系统设置_来继续操作：</p>`,r:{minutes:3.04,words:913},t:"在Windows上安装OpenJDK",y:"a"}}],["/posts/baeldung/2024-06-22/2024-06-22-Instantiate%20an%20Inner%20Class%20With%20Reflection%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-22-Instantiate an Inner Class With Reflection in Java.html-CYk4n6yU.js"),__vite__mapDeps([57,1])),meta:{d:17191008e5,l:"2024年6月23日",c:["Java","编程"],g:["Java反射","内嵌类实例化"],e:`
<p>在本教程中，我们将讨论如何使用Java反射API来实例化内部类或嵌套类。</p>
<p>反射API在需要读取Java类的构造并动态实例化类的场合中尤为重要。特定场景包括扫描注解、查找并使用bean名称实例化Java bean等。Spring和Hibernate等流行库以及代码分析工具广泛使用它。</p>
<p>与普通类相比，实例化内部类存在挑战。让我们进一步探索。</p>
<h2>2. 内部类编译</h2>
<p>要使用Java反射API对内部类进行操作，我们必须了解编译器如何处理它。首先，我们定义一个_Person_类，我们将使用它来演示实例化内部类：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token class-name">Address</span> address<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> zip<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token class-name">String</span> zip<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>zip <span class="token operator">=</span> zip<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:3.61,words:1083},t:"使用Java反射API实例化内部类",y:"a"}}],["/posts/baeldung/2024-06-22/2024-06-22-Introduction%20to%20OpenGrok.html",{loader:()=>a(()=>import("./2024-06-22-Introduction to OpenGrok.html-BThpYiA1.js"),__vite__mapDeps([58,1])),meta:{d:1719074051e3,c:["OpenGrok","代码搜索"],g:["源代码搜索引擎","跨引用","安装指南"],e:`<hr>
<h1>OpenGrok简介</h1>
<ol>
<li>概述</li>
</ol>
<p>OpenGrok是一个开源且功能强大的源代码搜索和交叉引用引擎，它允许我们高效地探索、搜索和浏览各种项目的源代码。</p>
<p>在本文中，我们将探索OpenGrok的特性和优势，并了解如何利用其能力进行有效的代码浏览。</p>
<ol start="2">
<li>什么是OpenGrok？</li>
</ol>
<p><strong>OpenGrok是一个快速且可扩展的源代码搜索和交叉引用引擎，它提供了一个用户友好的Web界面，用于探索代码库。</strong> 它使用Java开发，支持多种编程语言，使其多功能且适用于各种项目。</p>`,r:{minutes:3.66,words:1098},t:"OpenGrok简介",y:"a"}}],["/posts/baeldung/2024-06-22/2024-06-22-Logging%20With%20AOP%20in%20Spring.html",{loader:()=>a(()=>import("./2024-06-22-Logging With AOP in Spring.html-D8c0XMXf.js"),__vite__mapDeps([59,1])),meta:{d:17190144e5,l:"2024年6月22日",c:["Spring","AOP"],g:["Logging","Aspect-Oriented Programming"],e:`
<p>我们经常使用日志记录来记录程序执行过程中有意义的步骤和有价值的信息。它允许我们记录以后可用于调试和分析代码的数据。</p>
<p>此外，面向切面编程（简称AOP）是一种范式，它让我们能够在不扰乱业务逻辑的情况下，将事务管理或日志记录等跨领域关注点分离到整个应用程序中。</p>
<p>在本教程中，我们将学习如何使用AOP和Spring框架实现日志记录。</p>
<h2>2. 无AOP的日志记录</h2>
<p>在日志记录方面，我们通常在方法的开始和结束处放置日志。这样，我们可以轻松地跟踪应用程序的执行流程。此外，我们可以捕获传递给特定方法的值以及它们返回的值。</p>
<p>为了演示，让我们创建一个带有<code>greet()</code>方法的<code>GreetingService</code>类：</p>`,r:{minutes:12.94,words:3883},t:"使用Spring AOP进行日志记录",y:"a"}}],["/posts/baeldung/2024-06-22/2024-06-22-Mask%20an%20Email%20Address%20and%20Phone%20Number%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-22-Mask an Email Address and Phone Number in Java.html-BmwY_LRs.js"),__vite__mapDeps([60,1])),meta:{d:17190144e5,l:"2024年6月22日",c:["Java","编程"],g:["邮箱地址","电话号码","脱敏","正则表达式"],e:`<hr>
<h1>在Java中遮罩电子邮件地址和电话号码</h1>
<p>隐私和数据安全是软件开发的重要组成部分。遮罩敏感细节，如用户的电子邮件地址和电话号码，通常是保护用户信息和防止其泄露的程序之一。</p>
<p><strong>在本教程中，我们将探讨如何在Java中遮罩电子邮件地址和电话号码。</strong></p>
<h3>2.1 使用字符串操作遮罩电子邮件地址</h3>
<p>字符串操作是隐藏电子邮件的一种方式，通过编辑字符并将其中一些替换为星号。以下是一个简单的Java代码片段，演示了这种方法：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> email <span class="token operator">=</span> <span class="token string">"testemailaddress@example.com"</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> expectedMaskedEmail <span class="token operator">=</span> <span class="token string">"te**************@example.com"</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenEmailAddress_whenUsingStringManipulation_thenMaskEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> atIndex <span class="token operator">=</span> email<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token char">'@'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> repeatedString <span class="token operator">=</span> <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> atIndex <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapToObj</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> maskedPart <span class="token operator">=</span> email<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> atIndex <span class="token operator">-</span> repeatedString<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> repeatedString<span class="token punctuation">;</span>
    <span class="token class-name">String</span> maskedEmail <span class="token operator">=</span> maskedPart <span class="token operator">+</span> email<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>atIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">assertEquals</span><span class="token punctuation">(</span>expectedMaskedEmail<span class="token punctuation">,</span> maskedEmail<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:3.39,words:1018},t:"在Java中遮罩电子邮件地址和电话号码",y:"a"}}],["/posts/baeldung/2024-06-22/2024-06-22-Moves%20Zeros%20to%20the%20End%20of%20an%20Array%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-22-Moves Zeros to the End of an Array in Java.html-vs4NrBD6.js"),__vite__mapDeps([61,1])),meta:{d:17190144e5,l:"2024年6月22日",c:["Java","Arrays"],g:["Algorithm","Tutorial"],e:`
<h2>1. 概述</h2>
<p>在Java中使用数组时，一个常见的任务是重新排列数组以优化它们的结构。其中一种场景涉及将零移动到数组的末尾。</p>
<p>在本教程中，我们将探索使用Java实现此任务的不同方法。</p>
<h2>2. 问题介绍</h2>
<p>在我们深入实现之前，首先让我们理解这个问题的要求。</p>
<p>我们的输入是一个整数数组。我们的目标是重新排列整数，以便<strong>所有零都被移动到数组的末尾</strong>。此外，<strong>非零元素的顺序必须保持不变</strong>。</p>
<p>一个例子可以帮助我们快速理解问题。假设我们给定一个整数数组：</p>`,r:{minutes:4.07,words:1220},t:"Java中将数组中的零移动到末尾的方法 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-22/2024-06-22-Mutable%20vs.%20Immutable%20Objects%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-22-Mutable vs. Immutable Objects in Java.html-DPGNcqTf.js"),__vite__mapDeps([62,1])),meta:{d:17190144e5,l:"2024年6月22日",c:["Java","编程"],g:["可变对象","不可变对象"],e:`
<ol>
<li>引言</li>
</ol>
<p>在Java中使用对象时，理解可变对象（mutable objects）和不可变对象（immutable objects）之间的区别至关重要。这些概念影响您的Java代码的行为和设计。</p>
<p>在本教程中，我们将探讨可变和不可变对象的定义、示例、优势和考虑因素。</p>
<p>不可变对象是指一旦创建后其状态就无法改变的对象。一旦不可变对象被实例化，其值和属性在其生命周期内保持不变。</p>
<p>让我们探索Java中一些内置的不可变类的示例。</p>
<p>2.1. String类</p>
<p>Java中String的不可变性确保了线程安全性，增强了安全性，并通过String Pool机制帮助高效使用内存。</p>`,r:{minutes:6.35,words:1904},t:"Java中的可变对象与不可变对象",y:"a"}}],["/posts/baeldung/2024-06-22/2024-06-22-OAuth2%20Backend%20for%20Frontend%20With%20Spring%20Cloud%20Gateway.html",{loader:()=>a(()=>import("./2024-06-22-OAuth2 Backend for Frontend With Spring Cloud Gateway.html-DinWGwfT.js"),__vite__mapDeps([63,1])),meta:{d:1696896e6,l:"2023年10月10日",c:["Spring Cloud","OAuth2"],g:["Spring Security","Backend for Frontend"],e:`
<p>如果您正在研究Spring Security（特别是OAuth）的实现，一定要看看《Learn Spring Security》课程。</p>
<p><strong>&gt;&gt; 点击这里学习 Spring</strong>
<strong>安全</strong></p>
<h2>1. 概述</h2>
<p>在本教程中，我们将使用Spring Cloud Gateway和spring-addons实现OAuth2后端前端分离（BFF）模式，以从三个不同的单页应用程序（Angular、React和Vue）消费无状态REST API。</p>
<p>使用调试工具检查时，我们不会在以使用OAuth2而闻名的任何主要网站上找到任何_Bearer_令牌（例如Google、Facebook、Github或LinkedIn）。为什么会这样？</p>`,r:{minutes:7.01,words:2102},t:"使用Spring Cloud Gateway和OAuth2实现后端前端分离模式",y:"a"}}],["/posts/baeldung/2024-06-22/2024-06-22-Pagination%20With%20JDBC.html",{loader:()=>a(()=>import("./2024-06-22-Pagination With JDBC.html-DFm5trM3.js"),__vite__mapDeps([64,1])),meta:{d:17191008e5,l:"2024年6月23日",c:["Java","JDBC"],g:["Pagination","JDBC"],e:'\n<h2>1. 引言</h2>\n<p>大量表格读取可能会导致应用程序内存不足。它们还会给数据库增加额外的负载，并需要更多的带宽来执行。在读取大型表格时推荐的方法是使用分页查询。本质上，我们读取数据的一个子集（页面），处理数据，然后移动到下一页。</p>\n<p>在本文中，我们将讨论并实现使用JDBC进行分页的不同策略。</p>\n<h2>2. 设置</h2>\n<p>首先，我们需要根据我们的数据库在_pom.xml_文件中添加适当的JDBC依赖项，以便我们可以连接到我们的数据库。例如，如果我们的数据库是PostgreSQL，我们需要添加PostgreSQL依赖项：</p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`org.postgresql`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`postgresql`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`42.6.0`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n</code></pre></div>',r:{minutes:5.2,words:1561},t:"JDBC分页查询",y:"a"}}],["/posts/baeldung/2024-06-22/2024-06-22-Parse%20String%20With%20Thousands%20Separator%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-06-22-Parse String With Thousands Separator in Kotlin.html-B5NAmzrs.js"),__vite__mapDeps([65,1])),meta:{d:1719091621e3,c:["Kotlin","Programming"],g:["Kotlin","String Parsing","Number Format"],e:`<hr>
<h1>Kotlin中解析带有千位分隔符的字符串</h1>
<h2>1. 引言</h2>
<p>当处理以字符串形式表示的数字时，通常需要将它们转换为数值以进行后续计算。当表示较大数值的字符串使用逗号（“，”）或点（“.”）作为千位分隔符时，情况就变得复杂了。Kotlin提供了几种方法将这些字符串解析为数值。</p>
<p>在本教程中，我们将探索将这些字符串解析为数值的几种方法。</p>
<h2>2. DecimalFormatSymbols 类</h2>
<p>DecimalFormatSymbols 类在我们的解析技术中起着至关重要的作用。<strong>它允许我们获取特定于区域设置的格式符号，例如千位分隔符</strong>。我们可以使用 groupingSeparator 获取这个符号：</p>`,r:{minutes:3.21,words:964},t:"Kotlin中解析带有千位分隔符的字符串",y:"a"}}],["/posts/baeldung/2024-06-22/2024-06-22-Preventing%20Gson%20from%20Expressing%20Integers%20as%20Floats.html",{loader:()=>a(()=>import("./2024-06-22-Preventing Gson from Expressing Integers as Floats.html-D9tN0lJH.js"),__vite__mapDeps([66,1])),meta:{d:17190144e5,l:"2024年6月22日",c:["Java","Gson"],g:["Serialization","Deserialization"],e:`
<p>Gson是由Google开发的库，非常适合将Java对象序列化和反序列化到JSON格式。除此之外，我们通常会碰到Gson在序列化对象时将整数显示为浮点数的问题。</p>
<h2>1. 引言</h2>
<p><strong>在本教程中，我们将了解为什么整数被视为浮点数。此外，我们将提供一个解决方案来防止Gson这样做。</strong></p>
<h2>2. 问题定义</h2>
<p>Gson将Java对象序列化为JSON。默认情况下，Gson将整数序列化为浮点数，以更准确地表示。这里有一个简单的例子：</p>
<p>现在，我们将使用Gson库将JSON字符串反序列化为<code>Hashtable</code>&lt;String, Object&gt;\`\`对象列表。</p>`,r:{minutes:2.21,words:664},t:"防止Gson将整数表示为浮点数",y:"a"}}],["/posts/baeldung/2024-06-22/2024-06-22-Quarkus%20and%20Virtual%20Threads.html",{loader:()=>a(()=>import("./2024-06-22-Quarkus and Virtual Threads.html-skU8P8tt.js"),__vite__mapDeps([67,1])),meta:{d:17191008e5,l:"2024年6月23日",c:["Java","Quarkus"],g:["Java虚拟线程","并发"],e:`
<p>在Java开发领域不断发展的今天，Java 21引入了一个革命性的特性——虚拟线程。这些由Java虚拟机(JVM)管理的轻量级线程，承诺将重塑开发者在Java应用程序中处理并发的方式。长期以来，并发应用程序的开发一直充满挑战，管理传统的操作系统(OS)管理线程时常常遇到复杂性。</p>
<p>Quarkus框架的核心是一个现代的、以开发者为中心的工具包，专为云原生时代设计。它拥有极快的启动时间和低内存消耗，同时为开发者提供了一套广泛的工具，用于构建微服务和云原生应用程序。</p>
<p>在本教程中，我们将探索Quarkus如何利用Java的虚拟线程，转变Java应用程序中并发的管理方式。</p>`,r:{minutes:6.85,words:2055},t:"Quarkus和虚拟线程",y:"a"}}],["/posts/baeldung/2024-06-22/2024-06-22-Run%20Maven%20From%20Java%20Code.html",{loader:()=>a(()=>import("./2024-06-22-Run Maven From Java Code.html-CjaB8QNp.js"),__vite__mapDeps([68,1])),meta:{d:17191008e5,l:"2024年6月23日",c:["Java","Maven"],g:["Maven","Java"],e:`<hr>
<h1>从Java代码运行Maven</h1>
<p>Maven 是大多数Java项目中不可或缺的工具。它提供了一种方便的方式来运行和配置构建。<strong>然而，在某些情况下，我们需要对过程有更多的控制。</strong> 从Java运行Maven构建使其更加可配置，因为我们可以实时做出许多决策。</p>
<p>在本教程中，我们将学习如何与Maven交互，并直接从代码中运行构建。</p>
<h2>2. 学习平台</h2>
<p>让我们考虑以下示例，以更好地理解直接从Java使用Maven的目标和有用性：想象一个Java学习平台，学生可以从各种主题中选择并从事作业。</p>
<p><strong>因为我们的平台主要针对初学者，我们希望尽可能简化整个体验。</strong> 这样，学生就可以选择他们想要的任何主题，甚至可以组合它们。我们在服务器上生成项目，学生可以在线完成。</p>`,r:{minutes:4.74,words:1421},t:"从Java代码运行Maven",y:"a"}}],["/posts/baeldung/2024-06-22/2024-06-22-Simple%20Web%20Server%20in%20Java%2018.html",{loader:()=>a(()=>import("./2024-06-22-Simple Web Server in Java 18.html-C2BmkFBF.js"),__vite__mapDeps([69,1])),meta:{d:17074368e5,l:"2024年2月9日",c:["Java","Web Server"],g:["Java 18","Simple Web Server"],e:`
<p>从Java 18开始，我们可以使用JEP 408中引入的简单Web服务器。我们可以通过命令行工具和API访问其功能。</p>
<p>简单Web服务器提供了一个基础的Web服务器，用于服务静态文件。它被描述为对测试、原型设计和教育非常有用。服务器故意设置得非常简单，并且不打算与Apache Tomcat或Jetty等更完全功能的选项竞争或取代。</p>
<p>引入该工具的目标之一是让开发人员尽可能少地设置障碍，快速开始Web开发。</p>
<p>在本教程中，我们将了解简单Web服务器及其工作原理。</p>
<p>启动服务器最简单和最直接的方法是使用提供的命令行工具。</p>
<h3>2.1. 启动</h3>`,r:{minutes:6.55,words:1964},t:"Java 18中的简单Web服务器教程",y:"a"}}],["/posts/baeldung/2024-06-22/2024-06-22-Solving%20Rod%20Cutting%20Problem%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-22-Solving Rod Cutting Problem in Java.html-DELDP4w2.js"),__vite__mapDeps([70,1])),meta:{d:17190144e5,l:"2024年6月22日",c:["Java","算法"],g:["动态规划","递归"],e:`
<p>切割杆问题是一个经典的优化问题，它涉及到找到切割杆成段的最佳方式以最大化总收入。</p>
<p>在本教程中，我们将理解切割杆问题，并探索在Java中解决它的各种方法。</p>
<h3>2. 理解问题</h3>
<p>想象我们有一根长度为_n_的杆。我们可以将这根杆切割成不同长度的段，并将这些切割后的段出售。此外，我们拥有不同长度切割杆的价格表。我们的目标是最大化总收入。</p>
<p>例如，考虑一根长度为_n_=4的杆，价格_Pi_ = [1,5,8,9]。_Pi_数组表示长度为_i_的杆段的价格。这意味着：</p>
<p>P1 = 1 表示长度为1的杆段的价格是1单位。</p>
<p>P2 = 5 表示长度为2的杆段的价格是5单位。</p>`,r:{minutes:7.09,words:2128},t:"Java中解决切割杆问题",y:"a"}}],["/posts/baeldung/2024-06-22/2024-06-22-Storing%20UUID%20as%20Base64%20String%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-22-Storing UUID as Base64 String in Java.html-CGf6K_co.js"),__vite__mapDeps([71,1])),meta:{d:17191008e5,l:"2024年6月23日",c:["Java","UUID"],g:["Base64","Encoding"],e:`
<p>使用Base64编码的字符串是存储通用唯一识别码（UUID）的广泛采用方法。与标准的UUID字符串表示相比，这提供了更紧凑的结果。在本文中，我们将探讨将UUID编码为Base64字符串的不同方法。</p>
<h2>2. 使用_byte[]_和_Base64.Encoder_进行编码</h2>
<p>我们将从使用_byte[]_和_Base64.Encoder_的最直接方法开始编码。</p>
<h3>2.1. 编码</h3>
<p>我们将从我们的UUID位创建一个字节数组。为此，我们将取UUID的最高有效位和最低有效位，并将它们分别放在数组的0-7和8-15位置：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">convertToByteArray</span><span class="token punctuation">(</span><span class="token class-name">UUID</span> uuid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">long</span> mostSignificantBits <span class="token operator">=</span> uuid<span class="token punctuation">.</span><span class="token function">getMostSignificantBits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fillByteArray</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> result<span class="token punctuation">,</span> mostSignificantBits<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">long</span> leastSignificantBits <span class="token operator">=</span> uuid<span class="token punctuation">.</span><span class="token function">getLeastSignificantBits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fillByteArray</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> result<span class="token punctuation">,</span> leastSignificantBits<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:4.35,words:1305},t:"在Java中将UUID存储为Base64字符串",y:"a"}}],["/posts/baeldung/2024-06-22/2024-06-22-Translating%20Space%20Characters%20in%20URLEncoder.html",{loader:()=>a(()=>import("./2024-06-22-Translating Space Characters in URLEncoder.html-BZ7eotwv.js"),__vite__mapDeps([72,1])),meta:{d:17191008e5,l:"2024年6月23日",c:["Java","URL编码"],g:["URLEncoder","编码","特殊字符"],e:`
<p>当在Java中使用URL时，确保它们被正确编码以避免错误并保持数据传输的准确性是至关重要的。URL可能包含特殊字符，包括空格，这些字符需要编码以实现在不同系统间的统一解释。</p>
<p>在本教程中，我们将探讨如何使用_URLEncoder_类在URL中处理空格。</p>
<h3>2. <strong>理解URL编码</strong></h3>
<p>URL不能直接包含空格。要包含它们，我们需要使用URL编码。</p>
<p>URL编码，也称为百分号编码，是一种将特殊字符和非ASCII字符转换为适合通过URL传输的格式的标准机制。</p>
<p>**在URL编码中，我们用百分号‘%’替换每个字符，然后是它的十六进制表示。**例如，空格表示为_%20_。这种做法确保了Web服务器和浏览器能够正确解析和解释URL，防止在数据传输过程中出现歧义和错误。</p>`,r:{minutes:3.1,words:930},t:"Java中URLEncoder转换空格字符",y:"a"}}],["/posts/baeldung/2024-06-22/2024-06-22-Understanding%20%20Raw%20type.%20References%20to%20generic%20types%20should%20be%20parameterized%20%20Error.html",{loader:()=>a(()=>import("./2024-06-22-Understanding  Raw type. References to generic types should be parameterized  Error.html-BF5XzYlM.js"),__vite__mapDeps([73,1])),meta:{d:17191008e5,l:"2024年6月23日",c:["Java","编程"],g:["Raw Type","Java Generics"],e:`
<p>原始类型是Java中的一个高级主题。它需要对参数化类有良好的理解，但可能仍然令人困惑。幸运的是，IDE可以在我们出错时帮助我们。特别是Eclipse IDE会在我们出错时发出警告。</p>
<p>在本教程中，我们将检查这个警告以及缓解问题的步骤。</p>
<p>考虑以下代码：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>List strings = new ArrayList();
</code></pre></div><p>_List_和随后的_ArrayList_是参数化类型。我们可以在类声明中看到这一点：</p>`,r:{minutes:1.96,words:588},t:"理解“原始类型：应参数化引用泛型类型”错误 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-22/2024-06-22-Understanding%20Kafka%20InstanceAlreadyExistsException%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-22-Understanding Kafka InstanceAlreadyExistsException in Java.html-2yP-lD2G.js"),__vite__mapDeps([74,1])),meta:{d:17190144e5,l:"2024年6月22日",c:["Java","Kafka"],g:["InstanceAlreadyExistsException","Kafka producer","Kafka consumer"],e:`
<p>Apache Kafka是一个功能强大的分布式流处理平台，广泛用于构建实时数据管道和流处理应用程序。然而，在操作过程中，Kafka可能会遇到各种异常和错误。其中一种常见的异常是_InstanceAlreadyExistsException_。</p>
<p>在本教程中，我们将探讨Kafka中这种异常的重要性，深入了解其根本原因以及Java应用程序的有效处理技术。</p>
<p>_InstanceAlreadyExistsException_是_java.lang.RuntimeException_类的子类。<strong>在Kafka的上下文中，这种异常通常在尝试使用与现有生产者或消费者相同的客户端ID创建Kafka生产者或消费者时出现。</strong></p>`,r:{minutes:7.2,words:2160},t:"Apache Kafka中InstanceAlreadyExistsException的解析",y:"a"}}],["/posts/baeldung/2024-06-22/2024-06-22-View%20Kafka%20Headers%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-22-View Kafka Headers in Java.html-kyPv_1Sh.js"),__vite__mapDeps([75,1])),meta:{d:17190144e5,l:"2024年6月22日",c:["Java","Kafka"],g:["Apache Kafka","Kafka Headers","Java"],e:`
<p>Apache Kafka是一个分布式流处理平台，允许我们发布和订阅记录流，通常被称为消息。此外，Kafka消息头提供了一种将元数据附加到Kafka消息的方式，使得在消息处理中增加了额外的上下文和灵活性。</p>
<p>在本教程中，我们将深入探讨常用的Kafka消息头，并学习如何使用Java查看和提取它们。</p>
<p>Kafka消息头表示附加到Kafka消息的键值对，提供了一种在主要消息内容旁边包含补充元数据的方式。</p>
<p>例如，Kafka消息头通过提供数据来促进消息路由，将消息定向到特定的处理管道或消费者。此外，消息头在携带定制的应用程序元数据方面非常灵活，这些元数据适合应用程序的处理逻辑。</p>`,r:{minutes:4.01,words:1203},t:"Kafka消息头在Java中的查看",y:"a"}}],["/posts/baeldung/2024-06-23/2024-06-23-Access%20Job%20Parameters%20From%20ItemReader%20in%20Spring%20Batch.html",{loader:()=>a(()=>import("./2024-06-23-Access Job Parameters From ItemReader in Spring Batch.html-DNwLDQpY.js"),__vite__mapDeps([76,1])),meta:{d:17191008e5,l:"2024年6月23日",c:["Spring Batch","Java"],g:["JobParameters","ItemReader"],e:`
<p>Spring Batch是一个功能强大的Java批处理框架，因此成为数据处理活动和计划作业运行的热门选择。根据业务逻辑的复杂性，作业可能依赖不同的配置值和动态参数。</p>
<p>在本文中，我们将探讨如何使用_JobParameters_以及如何从关键的批处理组件中访问它们。</p>
<h3>2.1. 依赖项</h3>
<p>要开始演示应用程序，<strong>我们需要添加Spring Batch和H2依赖项：</strong></p>
<h3>2.2. 准备测试数据</h3>
<p>让我们通过定义_schema-all.sql_中的模式开始：</p>
<h3>2.3. <em>Medicine</em> 领域类</h3>`,r:{minutes:3.01,words:903},t:"Spring Batch中从ItemReader访问作业参数",y:"a"}}],["/posts/baeldung/2024-06-23/2024-06-23-Apply%20Bold%20Text%20Style%20for%20an%20Entire%20Row%20Using%20Apache%20POI.html",{loader:()=>a(()=>import("./2024-06-23-Apply Bold Text Style for an Entire Row Using Apache POI.html-ClpCRC6k.js"),__vite__mapDeps([77,1])),meta:{d:17191872e5,l:"2024年6月24日",c:["Apache POI","Excel"],g:["教程","Java"],e:'\n<p>在这个快速教程中，我们将探索使用Apache POI库在Excel工作表中为整行应用粗体字体样式的有效方法。通过简单的例子和有价值的见解，我们将了解每种方法的细微差别。</p>\n<h2>2. 依赖性</h2>\n<p>让我们从编写和加载Excel文件所需的依赖性开始，poi：</p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`org.apache.poi`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`poi`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`5.2.5`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n</code></pre></div>',r:{minutes:4.37,words:1310},t:"使用Apache POI为整个行应用粗体文本样式",y:"a"}}],["/posts/baeldung/2024-06-23/2024-06-23-Builder%20Pattern%20and%20Inheritance.html",{loader:()=>a(()=>import("./2024-06-23-Builder Pattern and Inheritance.html-Df-rGGt4.js"),__vite__mapDeps([78,1])),meta:{d:17191872e5,l:"2024年6月24日",c:["Software Engineering"],g:["Java","Design Pattern","Builder Pattern"],e:`
<p>在这个教程中，我们将学习在处理层次继承时实现建造者设计模式所面临的挑战。层次继承的一个例子可能是电动汽车、汽车和车辆之间的继承关系。</p>
<p>建造者模式是一种创建型设计模式，它通过方法链的帮助，以逐步过程简化了构建具有许多属性的复杂对象。虽然继承有助于简化设计，但它也导致了在建造者模式中实现方法链以创建对象时的复杂性。</p>
<p>此外，我们将通过Java泛型API的帮助，找到一个高效的实现方法。</p>
<h2>2. 问题描述</h2>
<p>让我们以在创建_Vehicle_、_Car_和_ElectricCar_类型对象时应用建造者模式为例：</p>
<p>在对象层次结构的顶部，有_Vehicle_类。<strong>类_Car_扩展了_Vehicle_，然后_ElectricCar_扩展了_Car_。类似于这些对象，它们的建造者在它们之间也有层次关系。</strong></p>`,r:{minutes:5.07,words:1520},t:"建造者模式与继承",y:"a"}}],["/posts/baeldung/2024-06-23/2024-06-23-Calculate%20Number%20of%20Weekdays%20Between%20Two%20Dates%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-23-Calculate Number of Weekdays Between Two Dates in Java.html-C5-q3jaz.js"),__vite__mapDeps([79,1])),meta:{d:17191872e5,l:"2024年6月24日",c:["Java","教程"],g:["工作日计算","Java日期操作"],e:`
<h2>1. 概述</h2>
<p>在本教程中，我们将探讨Java中计算两个日期之间工作日数量的两种不同方法。我们将看到一种使用_流_的可读版本，以及一种不那么易读但更高效的选项，它根本不进行循环。</p>
<h2>2. 使用_流_的全搜索</h2>
<p>首先，让我们看看如何使用_流_来实现。<strong>计划是循环遍历我们两个日期之间的每一天，并计算工作日</strong>：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>long getWorkingDaysWithStream(LocalDate start, LocalDate end){
    return start.datesUntil(end)
      .map(LocalDate::getDayOfWeek)
      .filter(day -&gt; !Arrays.asList(DayOfWeek.SATURDAY, DayOfWeek.SUNDAY).contains(day))
      .count();
}
</code></pre></div>`,r:{minutes:4.33,words:1299},t:"Java中计算两个日期之间工作日的数量 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-23/2024-06-23-Calculating%20the%20Power%20of%20Any%20Number%20in%20Java%20Without%20Using%20Math%20pow%20%20%20Method.html",{loader:()=>a(()=>import("./2024-06-23-Calculating the Power of Any Number in Java Without Using Math pow   Method.html-DJOwvPpu.js"),__vite__mapDeps([80,1])),meta:{d:17191008e5,l:"2024年6月23日",c:["Java","编程技巧"],g:["数学运算","递归","算法"],e:`
<h2>1. 引言</h2>
<p>计算一个数的幂是数学中的基本操作。虽然Java提供了方便的_Math.pow()_方法，但有时我们可能更倾向于实现自己的幂运算计算。</p>
<p><strong>在本教程中，我们将探索几种在Java中计算数的幂的方法，而不是依赖内置的方法。</strong></p>
<h2>2. 迭代方法</h2>
<p>通过迭代来计算一个数的幂是一种直接的方法。在这里，我们将指定次数地将基数乘以自身。一个简单的例子：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>double result = 1;
double base = 2;
int exponent = 3;

@Test
void givenBaseAndExponentNumbers_whenUtilizingIterativeApproach_thenReturnThePower() {
    for (int i = 0; i &lt; exponent; i++) {
        result *= base;
    }
    assertEquals(8, result);
}
</code></pre></div>`,r:{minutes:2.56,words:767},t:"Java中不使用Math.pow()方法计算任何数的幂",y:"a"}}],["/posts/baeldung/2024-06-23/2024-06-23-Check%20if%20Two%20Date%20Ranges%20Overlap.html",{loader:()=>a(()=>import("./2024-06-23-Check if Two Date Ranges Overlap.html-BTo0y9RN.js"),__vite__mapDeps([81,1])),meta:{d:1719168562e3,c:["REST with Spring Boot","Learn Spring Security"],g:["Persistence","REST","Security"],e:`<hr>
<h1>检查两个日期范围是否重叠 | Baeldung---</h1>
<p>date: {待获取页面更新日期}
category:</p>
<ul>
<li>与Spring Boot一起使用REST</li>
<li>学习Spring Security
tag:</li>
<li>持久性</li>
<li>REST</li>
<li>安全性
head:</li>
<li>
<ul>
<li>meta</li>
<li>name: keywords
content: Java, 日期范围, 重叠</li>
</ul>
</li>
</ul>
<hr>
<h1>检查两个日期范围是否重叠 | Baeldung</h1>`,r:{minutes:.34,words:101},t:"检查两个日期范围是否重叠 | Baeldung---",y:"a"}}],["/posts/baeldung/2024-06-23/2024-06-23-Convert%20Gregorian%20to%20Hijri%20Date%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-23-Convert Gregorian to Hijri Date in Java.html-BdaeYKhG.js"),__vite__mapDeps([82,1])),meta:{d:17191008e5,l:"2024年6月23日",c:["Java","日期转换"],g:["Gregorian","Hijri"],e:`<hr>
<h1>Java中将公历转换为回历日期</h1>
<h2>1. 概述</h2>
<p>公历和回历代表了两种不同的时间测量系统。</p>
<p>在本教程中，我们将探讨将公历日期转换为回历日期的各种方法。</p>
<h2>2. 公历与回历日历的区别</h2>
<p>让我们了解公历和回历日历之间的区别。公历遵循太阳年，由12个长度固定的月份组成。回历遵循月亮年，有12个月，每个月交替为29天和30天。</p>
<p>在回历中，每个月的长度取决于月亮绕地球完整旋转的周期。<strong>公历年包含365天或366天，而回历年有354天或355天。这意味着回历年比公历年大约短11天。</strong></p>`,r:{minutes:2.71,words:812},t:"Java中将公历转换为回历日期",y:"a"}}],["/posts/baeldung/2024-06-23/2024-06-23-Convert%20Long%20to%20Date%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-23-Convert Long to Date in Java.html-BeFBovsm.js"),__vite__mapDeps([83,1])),meta:{d:17191008e5,l:"2024年6月23日",c:["Java","日期时间"],g:["Java","日期转换","Instant","LocalDate","Joda-Time"],e:`
<p>在Java中处理日期时，我们经常看到日期/时间值以_long_值的形式表示，它表示自纪元（1970年1月1日，00:00:00 GMT）以来的天数、秒数或毫秒数。</p>
<p>在这个简短的教程中，我们将探索将_long_值转换为Java中的日期的不同方法。首先，我们将解释如何使用核心JDK类来完成这项操作。然后，我们将展示如何使用第三方Joda-Time库来实现相同的目标。</p>
<h2>2. 使用Java 8+的日期时间API</h2>
<p>Java 8因其引入的新的日期时间API而受到赞誉。这个API主要是为了覆盖旧日期API的缺点。那么，让我们仔细看看这个API为我们的中心问题提供了什么。</p>`,r:{minutes:3.57,words:1071},t:"Java中将long值转换为日期",y:"a"}}],["/posts/baeldung/2024-06-23/2024-06-23-Convert%20String%20Date%20to%20XMLGregorianCalendar%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-23-Convert String Date to XMLGregorianCalendar in Java.html-cT6qB1Im.js"),__vite__mapDeps([84,1])),meta:{d:17191008e5,l:"2024年6月23日",c:["Java","XMLGregorianCalendar"],g:["String Date Conversion","XML Schema"],e:`<hr>
<h1>Java中将字符串日期转换为XMLGregorianCalendar</h1>
<p>在本教程中，我们将探讨将字符串日期转换为XMLGregorianCalendar的各种方法。</p>
<p>XML Schema标准为在XML格式中指定日期定义了明确的规则。为了使用这种格式，Java类XMLGregorianCalendar在Java 1.5中引入，代表W3C XML Schema 1.0日期/时间数据类型。</p>
<p>javax.xml.datatype包中的DatatypeFactory类提供了创建各种XML模式内置类型的工厂方法。我们将使用这个类来生成XMLGregorianCalendar的新实例。</p>`,r:{minutes:2.96,words:888},t:"Java中将字符串日期转换为XMLGregorianCalendar",y:"a"}}],["/posts/baeldung/2024-06-23/2024-06-23-Convert%20byte%20to%20int%20Type%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-23-Convert byte to int Type in Java.html-oJFvv8ku.js"),__vite__mapDeps([85,1])),meta:{d:17191872e5,l:"2024年6月24日",c:["Java","编程"],g:["byte","int","转换"],e:`
<p>将byte转换为int是一个常见的操作，尤其是在处理低级数据操作、文件I/O或网络通信时。在本文中，我们将探索实现byte到int转换的各种方法。</p>
<p>在Java中，byte和int是基本数据类型，它们在表示数值时具有不同的目的。<strong>byte是一个8位的有符号数据类型，其值范围从-128到127。</strong> <strong>int数据类型是一个32位的有符号整数，比byte提供更宽的范围，从-2<sup>31到2</sup>31-1（-2,147,483,648到2,147,483,647）。</strong></p>
<h3>使用类型转换</h3>
<p>执行转换的最直接和常见的方法是简单地将byte变量类型转换为int变量：</p>`,r:{minutes:2.83,words:848},t:"Java中byte到int类型的转换",y:"a"}}],["/posts/baeldung/2024-06-23/2024-06-23-Creating%20Unicode%20Character%20From%20Its%20Code%20Point%20Hex%20String.html",{loader:()=>a(()=>import("./2024-06-23-Creating Unicode Character From Its Code Point Hex String.html-R9yQD7rr.js"),__vite__mapDeps([86,1])),meta:{d:17191008e5,l:"2024年6月23日",c:["Java","Unicode"],g:["Unicode","Java"],e:`
<p>Java对Unicode的支持使其能够轻松处理来自不同语言和脚本的字符。</p>
<p>在本教程中，我们将探索并学习如何在Java中从它们的编码点获取Unicode字符。</p>
<h3>2. 问题介绍</h3>
<p>Java的Unicode支持使我们能够快速构建国际化应用程序。让我们看几个例子：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">U_CHECK</span> <span class="token operator">=</span> <span class="token string">"✅"</span><span class="token punctuation">;</span> <span class="token comment">// U+2705</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">U_STRONG</span> <span class="token operator">=</span> <span class="token string">"强"</span><span class="token punctuation">;</span> <span class="token comment">// U+5F3A</span>
</code></pre></div>`,r:{minutes:3.58,words:1074},t:"从十六进制编码点字符串创建Unicode字符 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-23/2024-06-23-Custom%20JSON%20Deserialization%20Using%20Spring%20WebClient.html",{loader:()=>a(()=>import("./2024-06-23-Custom JSON Deserialization Using Spring WebClient.html-C2ABB_qs.js"),__vite__mapDeps([87,1])),meta:{d:17057088e5,l:"2024年1月20日",c:["Spring","WebFlux"],g:["Spring WebClient","JSON","Custom Deserialization"],e:`
<p>在本文中，我们将探讨自定义反序列化的需求以及如何使用Spring WebClient实现它。</p>
<h2>2. 为什么我们需要自定义反序列化？</h2>
<p>Spring WebFlux模块中的Spring WebClient通过_Encoder_和_Decoder_组件处理序列化和反序列化。<em>Encoder_和_Decoder_作为接口存在，代表读取和写入内容的合同。默认情况下，spring-core模块提供了_byte</em>[]、<em>ByteBuffer</em>、<em>DataBuffer</em>、_Resource_和_String_编码器和解码器实现。</p>`,r:{minutes:4.91,words:1472},t:"使用Spring WebClient自定义JSON反序列化",y:"a"}}],["/posts/baeldung/2024-06-23/2024-06-23-Difference%20Between%20%20mvn%20verify%20%20and%20%20mvn%20test%20.html",{loader:()=>a(()=>import("./2024-06-23-Difference Between  mvn verify  and  mvn test .html-BGNZPu0Z.js"),__vite__mapDeps([88,1])),meta:{d:17191008e5,l:"2024年6月23日",c:["Java","Maven"],g:["mvn verify","mvn test"],e:`
<p>Maven是Java开发的构建工具，理解其命令，特别是mvn verify和mvn test，对开发者至关重要。</p>
<p>在本教程中，我们将深入探讨这些命令，包括它们的区别和常见用例。</p>
<h2><strong>2. Maven理解</strong></h2>
<p>Maven是Java构建工具的基础，对简化开发过程至关重要。</p>
<p>它的主要职责包括：</p>
<ul>
<li>依赖管理，确保所有必要的组件自动获取并集成到项目中</li>
<li>执行测试，这是维护代码质量的关键步骤</li>
<li>高效地打包Java应用程序，准备分发</li>
<li>发布最终构件，这有助于部署步骤</li>
</ul>`,r:{minutes:4.91,words:1472},t:"Maven中的“mvn verify”与“mvn test”的区别",y:"a"}}],["/posts/baeldung/2024-06-23/2024-06-23-Difference%20Between%20mvn%20install%20and%20mvn%20verify.html",{loader:()=>a(()=>import("./2024-06-23-Difference Between mvn install and mvn verify.html-C_vgHXVO.js"),__vite__mapDeps([89,1])),meta:{d:17191872e5,l:"2024年6月24日",c:["Maven","构建工具"],g:["mvn install","mvn verify"],e:`<hr>
<h1>Apache Maven 中 mvn install 与 mvn verify 的区别</h1>
<p>Apache Maven 是一个强大的构建管理工具，它为项目构建生命周期提供了结构化的方式。Maven 构建由生命周期组成，这些生命周期明确定义了项目的构建和分发方式。</p>
<p>在构建过程中，两个非常有用的命令是 <em>mvn install</em> 和 <em>mvn verify</em>。在本教程中，我们将比较和对比这两个命令，理解它们之间的区别。</p>
<h2>2. Maven 生命周期</h2>
<p>Maven 定义了三个标准生命周期 — 清洁（clean）、默认（default）和站点（site） — 每个都有不同的目的：</p>`,r:{minutes:4.47,words:1342},t:"Apache Maven 中 mvn install 与 mvn verify 的区别",y:"a"}}],["/posts/baeldung/2024-06-23/2024-06-23-Difference%20between%20ZoneOffset.UTC%20and%20ZoneId.of%20%20UTC%20%20.html",{loader:()=>a(()=>import("./2024-06-23-Difference between ZoneOffset.UTC and ZoneId.of  UTC  .html-CS0328Ww.js"),__vite__mapDeps([90,1])),meta:{d:17191008e5,l:"2024年6月23日",c:["Java","编程"],g:["时间","时区"],e:`
<p>时间日期信息在Java中必须准确处理，这涉及到时区的管理。ZoneOffset.UTC和ZoneId.of("UTC")是两种标准方法，我们可以用它们来表示协调世界时（UTC）。尽管两者看起来都像是UTC，但它们有一些不同。</p>
<p>在本教程中，我们将概述这两种方法、它们之间的主要差异以及使用场景。</p>
<h3>2. ZoneOffset.UTC</h3>
<p>自Java 8引入的java.time包提供了诸如ZoneId和ZoneOffset这样的类，我们可以用它们来表示时区。ZoneOffset.UTC是ZoneOffset类的一个常量成员。它表示UTC的固定偏移量，始终是+00:00。这意味着无论季节如何变化，UTC都是相同的。</p>`,r:{minutes:2.13,words:638},t:'Java中的ZoneOffset.UTC与ZoneId.of("UTC")的区别',y:"a"}}],["/posts/baeldung/2024-06-23/2024-06-23-Enable%20Java%20SSL%20Debug%20Logging.html",{loader:()=>a(()=>import("./2024-06-23-Enable Java SSL Debug Logging.html-WCH2k3NB.js"),__vite__mapDeps([91,1])),meta:{d:17191872e5,l:"2024年6月24日",c:["Java","SSL"],g:["SSL Debug","Java Secure Socket Layer"],e:`
<p>Java安全套接字层（SSL）调试对于开发者和管理员来说至关重要，它有助于诊断和解决应用程序中与建立安全连接相关的问题。启用SSL调试可以提供关于握手过程、密码套件协商以及其他安全相关活动的洞察。</p>
<p>在本教程中，我们将通过一系列实践示例探索启用Java SSL调试的各种方法。</p>
<p>SSL/TLS协议是保护互联网上数据传输的基础。</p>
<p>在应用程序中使用这些协议时，我们可以使用SSL调试来增强我们系统中SSL保护通信的安全性和效率。它可以帮助我们的方式包括：</p>
<ul>
<li>识别异常，如证书不匹配和连接失败</li>
<li>监控恶意活动</li>
<li>确保我们使用适当的加密算法实现</li>
<li>优化性能</li>
</ul>`,r:{minutes:3.99,words:1198},t:"启用Java SSL调试日志",y:"a"}}],["/posts/baeldung/2024-06-23/2024-06-23-Event%20Driven%20Microservices%20With%20Orkes%20Conductor.html",{loader:()=>a(()=>import("./2024-06-23-Event Driven Microservices With Orkes Conductor.html-BqWpnHZs.js"),__vite__mapDeps([92,1])),meta:{d:17191008e5,l:"2024年6月23日",c:["Microservices","Event-Driven Architecture"],g:["Orkes Conductor","Spring"],e:`
<p>在这个教程中，我们将探讨如何使用Orkes Conductor和Spring构建事件驱动的微服务。我们将使用Conductor来使用HTTP端点和服务工作器编排微服务。</p>
<p>微服务提供了一种很好的方式，可以创建一个可以独立扩展和管理的模块化架构。开发人员通常将微服务设计为单一责任服务，这些服务在执行一件事情上表现得非常出色。然而，应用程序流程通常需要跨多个微服务进行协调以实现业务目标。</p>
<p>事件驱动架构通过事件系统在微服务之间进行通信，确保流程的可扩展性和持久性。由于这些原因，事件驱动的微服务最近变得非常流行，特别是在实现异步流程时特别有用。</p>
<h3>2.1. 事件驱动系统的不足</h3>`,r:{minutes:6.82,words:2045},t:"使用Orkes Conductor构建事件驱动的微服务",y:"a"}}],["/posts/baeldung/2024-06-23/2024-06-23-Event%20Externalization%20with%20Spring%20Modulith.html",{loader:()=>a(()=>import("./2024-06-23-Event Externalization with Spring Modulith.html-baPL3QNA.js"),__vite__mapDeps([93,1])),meta:{d:17191008e5,l:"2024年6月23日",c:["Spring Modulith","Event Externalization"],g:["Spring","Kafka","Event-Driven"],e:`
<p>在本文中，我们将讨论在 <code>@Transactional</code> 块内发布消息的需求以及相关的性能挑战，例如延长的数据库连接时间。为了解决这个问题，我们将利用 Spring Modulith 的特性来监听 Spring 应用程序事件，并自动将它们发布到 Kafka 主题。</p>
<h2>2. 事务性操作和消息代理</h2>
<p>对于本文的代码示例，我们假设我们正在编写负责在 Baeldung 上保存 <code>Article</code> 的功能：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">class</span> <span class="token class-name">Baeldung</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ArticleRepository</span> articleRepository<span class="token punctuation">;</span>

    <span class="token comment">// 构造函数</span>

    <span class="token annotation punctuation">@Transactional</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createArticle</span><span class="token punctuation">(</span><span class="token class-name">Article</span> article<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">validateArticle</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span>
        article <span class="token operator">=</span> <span class="token function">addArticleTags</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// ...其他业务逻辑</span>

        articleRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:9.25,words:2774},t:"Spring Modulith中的事件外部化",y:"a"}}],["/posts/baeldung/2024-06-23/2024-06-23-Generating%20Unique%20Positive%20Long%20Using%20SecureRandom%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-23-Generating Unique Positive Long Using SecureRandom in Java.html-CRMlMoER.js"),__vite__mapDeps([94,1])),meta:{d:17191008e5,l:"2024年6月23日",c:["Java","SecureRandom"],g:["SecureRandom","随机数生成"],e:`
<h2>1. 概述</h2>
<p>在<code>java.security</code>包中的<code>SecureRandom</code>类是专门为密码学目的和关键安全场景设计的，使用算法确保高度不可预测性。</p>
<p>在本教程中，我们将讨论如何使用<code>SecureRandom</code>生成一个唯一的正<code>long</code>值，并探讨在生成多个值时碰撞的安全性。</p>
<h2>2. 使用<code>nextLong()</code>方法</h2>
<p><code>SecureRandom</code>的<code>nextLong()</code>方法返回一个<code>long</code>类型的值，这是一个随机的64位数字。这些值在极其广泛的范围内随机分布，从<code>Long.MIN_VALUE</code>（-2<sup>63）到\`Long.MAX_VALUE\`（2</sup>63 - 1）。</p>`,r:{minutes:2.2,words:661},t:"使用Java SecureRandom生成唯一的正Long值",y:"a"}}],["/posts/baeldung/2024-06-23/2024-06-23-How%20to%20Catch%20Deserialization%20Errors%20in%20Spring%20Kafka%20.html",{loader:()=>a(()=>import("./2024-06-23-How to Catch Deserialization Errors in Spring Kafka .html-5JKcinI5.js"),__vite__mapDeps([95,1])),meta:{d:17191872e5,l:"2024年6月24日",c:["Spring Boot","Kafka"],g:["Spring-Kafka","Deserialization"],e:`
<p>无论你是刚开始学习还是拥有多年的经验，Spring Boot显然是构建Web应用程序的绝佳选择。Jmix建立在这个功能强大且成熟的Boot堆栈之上，允许开发人员构建并交付全栈Web应用程序，而无需编写前端代码。非常灵活，从简单的Web GUI CRUD应用程序到复杂的企业解决方案。</p>
<p>具体来说，Jmix平台包括一个构建在Spring Boot、JPA和Vaadin之上的框架，并附带Jmix Studio，这是一个IntelliJ IDEA插件，配备了一套开发人员生产力工具。</p>
<p>平台提供了相互连接的即用型插件，用于报告生成、BPM、地图、从数据库即时生成Web应用程序等：</p>`,r:{minutes:7.4,words:2221},t:"如何在Spring-Kafka中捕获反序列化错误？",y:"a"}}],["/posts/baeldung/2024-06-23/2024-06-23-How%20to%20Determine%20if%20a%20String%20Contains%20Invalid%20Encoded%20Characters.html",{loader:()=>a(()=>import("./2024-06-23-How to Determine if a String Contains Invalid Encoded Characters.html-Cga7hAOr.js"),__vite__mapDeps([96,1])),meta:{d:17191008e5,l:"2024年6月23日",c:["Java","编码"],g:["字符串","UTF-8","ISO-8859-1"],e:`
<p>无效编码的字符可能会导致各种问题，包括数据损坏和安全漏洞。因此，在处理字符串时确保数据正确编码至关重要。特别是当处理如UTF-8或ISO-8859-1这样的字符编码时。</p>
<p>在本教程中，我们将介绍如何确定Java字符串是否包含无效编码字符。我们将任何非ASCII字符视为无效。</p>
<h2>2. Java中的字符编码</h2>
<p>Java支持多种字符编码。此外，《Charset》类提供了处理它们的方法——最常见的编码是UTF-8和ISO-8859-1。</p>
<p>让我们举一个例子：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> input <span class="token operator">=</span> <span class="token string">"Hеllo, World!"</span><span class="token punctuation">;</span>
<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> utf8Bytes <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> utf8String <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>utf8Bytes<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:2.44,words:733},t:"如何确定字符串是否包含无效编码字符",y:"a"}}],["/posts/baeldung/2024-06-23/2024-06-23-How%20to%20Find%20the%20URL%20of%20a%20Service%20in%20Kubernetes.html",{loader:()=>a(()=>import("./2024-06-23-How to Find the URL of a Service in Kubernetes.html-CMTVg1oH.js"),__vite__mapDeps([97,1])),meta:{d:17191008e5,l:"2024年6月23日",c:["Kubernetes","Networking"],g:["Service URL","ClusterIP","NodePort","LoadBalancer"],e:`<hr>
<h1>如何在Kubernetes中找到服务的URL</h1>
<p>网络是Kubernetes不可或缺的一部分，而"Service"是其基础网络对象之一。Kubernetes "Service"允许我们将网络应用程序暴露给外部世界。然而，为了访问它，我们必须知道它的URL。</p>
<p>在本实践教程中，我们将讨论如何找到并使用Kubernetes服务的URL作为可靠的网络端点。</p>
<h2>2. 设置示例</h2>
<p>我们需要创建一些Kubernetes对象作为示例。首先，让我们创建"Namespace"对象。</p>
<h3>2.1. 创建Kubernetes命名空间</h3>`,r:{minutes:7.08,words:2124},t:"如何在Kubernetes中找到服务的URL",y:"a"}}],["/posts/baeldung/2024-06-23/2024-06-23-Improving%20Test%20Coverage%20and%20Readability%20With%20Spock%20s%20Data%20Pipes%20and%20Tables.html",{loader:()=>a(()=>import("./2024-06-23-Improving Test Coverage and Readability With Spock s Data Pipes and Tables.html-jbbuh9UN.js"),__vite__mapDeps([98,1])),meta:{d:17191008e5,l:"2024年6月23日",c:["Java","Spock"],g:["测试覆盖率","数据管道"],e:`
<p>Spock是编写测试的一个很好的框架，特别是在提高测试覆盖率方面。</p>
<p>在本教程中，我们将探讨Spock的数据管道以及如何通过向数据管道添加额外数据来提高我们的行和分支代码覆盖率。我们还将看看当数据变得太大时该怎么办。</p>
<h2>2. 我们测试的主题</h2>
<p>让我们从一个添加两个数字的方法开始，但有一个转折。如果第一个或第二个数字是42，则返回42：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataPipesSubject</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token function">addWithATwist</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> first<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> second<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> <span class="token number">42</span> <span class="token operator">||</span> second <span class="token operator">==</span> <span class="token number">42</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">42</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> first <span class="token operator">+</span> second<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:10.17,words:3050},t:"使用Spock的数据管道和表格提高测试覆盖率和可读性",y:"a"}}],["/posts/baeldung/2024-06-23/2024-06-23-Introduction%20to%20KotlinPoet.html",{loader:()=>a(()=>import("./2024-06-23-Introduction to KotlinPoet.html-LFQPjd6R.js"),__vite__mapDeps([99,1])),meta:{d:17191008e5,l:"2024年6月23日",c:["Kotlin","Programming"],g:["KotlinPoet","Code Generation"],e:`
<p>在本文中，我们将深入了解 KotlinPoet。我们将了解它是什么，我们可以用它做什么，以及如何使用它。</p>
<h2>2. KotlinPoet 是什么？</h2>
<p><strong>KotlinPoet 是一个开源库，用于生成 Kotlin 源代码。</strong> 由 Square 维护，它是 JavaPoet 库的 Kotlin 版本。</p>
<p>与 Asm 等工具不同，KotlinPoet 生成的是原始的、未编译的源代码。这需要在直接执行之前进行编译。然而，根据我们的需求，这可能更有用和强大——例如，在构建过程中或在 IDE 内部进行代码生成。</p>
<p>KotlinPoet 生成了 Kotlin 程序中的大部分主要结构——类、字段、方法、注解等。因此，我们可以程序性地生成从单行代码到整个源文件的任何内容。</p>`,r:{minutes:6.16,words:1849},t:"KotlinPoet 简介",y:"a"}}],["/posts/baeldung/2024-06-23/2024-06-23-Introduction%20to%20gRPC%20with%20Spring%20Boot.html",{loader:()=>a(()=>import("./2024-06-23-Introduction to gRPC with Spring Boot.html-0TthjLB6.js"),__vite__mapDeps([100,1])),meta:{d:17191008e5,l:"2024年6月23日",c:["Spring Boot","gRPC"],g:["Baeldung","教程"],e:`
<p>无论你是刚开始学习还是拥有多年经验，<strong>Spring Boot</strong> 显然是构建一个web应用程序的极佳选择。</p>
<p>Jmix基于这个功能强大且成熟的Boot堆栈，允许开发者在不需要编写前端代码的情况下构建和交付<strong>全栈web应用程序</strong>。非常灵活，从简单的web GUI CRUD应用程序到复杂的企业解决方案。</p>
<p>具体来说，<strong>Jmix平台</strong>包括一个构建在<strong>Spring Boot、JPA和Vaadin</strong>之上的框架，并附带Jmix Studio，这是一个配备了一系列开发者生产力工具的<strong>IntelliJ IDEA插件</strong>。</p>`,r:{minutes:6.22,words:1867},t:"gRPC与Spring Boot入门指南",y:"a"}}],["/posts/baeldung/2024-06-23/2024-06-23-JFR%20View%20Command%20in%20Java%2021.html",{loader:()=>a(()=>import("./2024-06-23-JFR View Command in Java 21.html-Cu9PycaG.js"),__vite__mapDeps([101,1])),meta:{d:17191872e5,l:"2024年6月24日",c:["Java","编程"],g:["Java Flight Recorder","JFR","Java 21"],e:`
<h2>1. 引言</h2>
<p>Java Flight Recorder（JFR）是一个监控 JVM 及其上运行程序的性能分析和诊断工具。这是一个开发者用来监控其应用程序状态和性能的实用工具。</p>
<p>本教程将重点介绍 Java 21 中为 JFR 新引入的 <em>view</em> 命令。</p>
<h2>2. Java Flight Recorder (JFR)</h2>
<p>Java Flight Recorder（JFR）是一个在 Java 7 中引入的低开销应用程序分析框架，作为实验性特性。它允许我们分析和理解我们程序的重要指标，例如垃圾收集模式、IO 操作、内存分配等。</p>`,r:{minutes:5.69,words:1707},t:"Java Flight Recorder (JFR) 视图命令在 Java 21 中的使用 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-23/2024-06-23-List%20vs.%20Set%20in%20%20OneToMany%20JPA.html",{loader:()=>a(()=>import("./2024-06-23-List vs. Set in  OneToMany JPA.html-D2o1k3KP.js"),__vite__mapDeps([102,1])),meta:{d:17191872e5,l:"2024年6月24日",c:["Spring JPA","Hibernate"],g:["List vs. Set","OneToMany"],e:`
<p>Spring JPA和Hibernate为与数据库的无缝通信提供了强大的工具。然而，随着客户端将更多的控制权委托给框架，包括查询生成，结果可能远非我们所期望的。</p>
<p>通常在to-many关系中使用_Lists_还是_Sets_存在混淆。<strong>这种混淆通常因为Hibernate为其bags、lists和sets使用相似的名称，但背后的含义略有不同而被放大。</strong></p>
<p>在大多数情况下，_Sets_更适合_one-to-many_或_many-to-many_关系。<strong>然而，它们有特定的性能影响，我们应该意识到这一点。</strong></p>`,r:{minutes:9.31,words:2794},t:"Spring JPA中@OneToMany关系中的List与Set对比 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-23/2024-06-23-Looking%20for%20a%20Backend%20Java%20Spring%20Team%20Lead%20with%20Integration%20Experience%20%20Remote%20%20%20Part%20Time%20%20%20%20not%20open.html",{loader:()=>a(()=>import("./2024-06-23-Looking for a Backend Java Spring Team Lead with Integration Experience  Remote   Part Time    not open.html-DvrbfVkX.js"),__vite__mapDeps([103,1])),meta:{d:17191008e5,l:"2024年6月23日",c:["Backend Java/Spring Team Lead","Remote Job"],g:["Part Time","Integration Experience"],e:`
<p><strong>此职位目前不开放。</strong></p>
<h3>关于我们</h3>
<p>Baeldung 是一家专注于编程领域的学习和媒体公司。我们是一支灵活的、完全远程的团队。</p>
<h3>职位描述</h3>
<p>我们正在寻找一位<strong>高级Java开发人员</strong>，理想情况下具有第三方应用程序/API集成的经验，加入并帮助指导团队，同时管理基于核心Java、Spring和Spring Boot的现有代码。</p>
<p>该职位包括处理需求分析、审查开发团队的工作、在开发团队内提供技术指导以及改进代码库。在非技术方面，良好的英语水平也很重要。</p>
`,r:{minutes:2.57,words:771},t:"寻找具有集成经验的后端Java/Spring团队领导（远程）（兼职）- 职位已关闭 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-23/2024-06-23-Monkey%20Patching%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-23-Monkey Patching in Java.html-CIWYpd4G.js"),__vite__mapDeps([104,1])),meta:{d:17191008e5,l:"2024年6月23日",c:["Java","编程"],g:["动态代理","AOP","装饰者模式","反射"],e:`
<p>在软件开发中，我们经常需要调整和增强系统的现有功能。有时候，修改现有代码库可能不可行，或者不是最实际的解决方案。解决这个问题的一个方法是<strong>猴子补丁</strong>。这种技术允许我们在不改变原始源代码的情况下，在运行时修改一个类或模块。</p>
<p>本文将探讨如何在Java中使用猴子补丁，我们何时应该使用它，以及它的弊端。</p>
<p>猴子补丁这个术语起源于早期的术语“游击补丁”，指的是在没有任何规则的情况下在运行时偷偷地更改代码。由于动态编程语言的灵活性，如Java、Python和Ruby，它变得流行起来。</p>
<p>猴子补丁使我们能够在运行时修改或扩展类或模块。这允许我们在不需要直接修改源代码的情况下调整或增加现有代码。当调整是必要的，但由于各种限制，直接修改是不可行或不可取的时候，它特别有用。</p>`,r:{minutes:8.09,words:2426},t:"Java中的猴子补丁",y:"a"}}],["/posts/baeldung/2024-06-23/2024-06-23-N%201%20Problem%20in%20Hibernate%20and%20Spring%20Data%20JPA.html",{loader:()=>a(()=>import("./2024-06-23-N 1 Problem in Hibernate and Spring Data JPA.html-BkCFSHk0.js"),__vite__mapDeps([105,1])),meta:{d:17191008e5,l:"2024年6月23日",c:["Hibernate","Spring Data JPA"],g:["N+1 Problem","数据库优化"],e:`
<p>Spring JPA和Hibernate提供了一个强大的工具，用于与数据库无缝通信。然而，由于客户端将更多的控制权委托给框架，生成的查询可能远非最优。</p>
<p>在本教程中，我们将回顾在使用Spring JPA和Hibernate时常见的N+1问题，并检查可能导致问题的不同情况。</p>
<p>为了更好地可视化这个问题，我们需要概述实体之间的关系。让我们以一个简单的社交网络平台为例，其中只有用户和帖子：</p>
<p>我们在使用图表中的_Iterable_，并为每个示例提供具体实现：<em>List_或_Set</em>。</p>
<p>为了测试请求的数量，我们将使用专用库而不是检查日志。然而，我们将参考日志以更好地理解请求的结构。</p>`,r:{minutes:5.51,words:1653},t:"Hibernate和Spring Data JPA中的N+1问题",y:"a"}}],["/posts/baeldung/2024-06-23/2024-06-23-Normalize%20a%20URL%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-23-Normalize a URL in Java.html-GRUz7B5d.js"),__vite__mapDeps([106,1])),meta:{d:17191008e5,l:"2024年6月23日",c:["Java","Web开发"],g:["URL规范化","Java","Apache Commons Validator","URI类","正则表达式"],e:`
<h2>1. 引言</h2>
<p>统一资源定位符（URLs）是Web开发的重要组成部分，它们帮助定位和获取互联网上的资源。然而，URLs可能存在不一致或格式错误，这可能导致处理和获取所需材料时出现问题。</p>
<p>URL规范化是将给定的数据转换为规范形式，确保一致性并促进操作性。</p>
<h2>2. 手动规范化</h2>
<p>执行手动规范化涉及应用自定义逻辑来标准化URLs。这个过程包括删除不必要的元素，如不必要的查询参数和片段标识符，将URLs蒸馏到其核心本质。假设我们有以下URL：</p>
<p><em>https://www.example.com:8080/path/to/resource?param1=value1&amp;param2=value2#fragment</em></p>`,r:{minutes:3.23,words:968},t:"Java中URL规范化",y:"a"}}],["/posts/baeldung/2024-06-23/2024-06-23-Print%20a%20Java%202D%20Array.html",{loader:()=>a(()=>import("./2024-06-23-Print a Java 2D Array.html-BWQidSwy.js"),__vite__mapDeps([107,1])),meta:{d:17191008e5,l:"2024年6月23日",c:["Java","编程"],g:["2D数组","打印"],e:`
<h2>1. 概述</h2>
<p>在本教程中，我们将熟悉一些打印2D数组的方法，以及它们的时间和空间复杂度。</p>
<h2>2. 打印2D数组的常见方式</h2>
<p>Java，作为一种多功能的编程语言，提供了多种处理和操作数组的方法。特别是2D数组，为数据提供了一种方便的网格化组织和存储方式。打印2D数组是一个常见的操作，Java提供了几种方法来完成这项任务。</p>
<h3>2.1. <strong>使用嵌套循环</strong></h3>
<p><strong>最直接的方法涉及使用嵌套循环来遍历2D数组的行和列</strong>。这种方法简单直观，是基本数组打印的不错选择。让我们看看实现方式：</p>`,r:{minutes:4.02,words:1205},t:"Java 2D 数组打印方法",y:"a"}}],["/posts/baeldung/2024-06-23/2024-06-23-Read%20and%20Write%20Files%20in%20Java%20Using%20Separate%20Threads.html",{loader:()=>a(()=>import("./2024-06-23-Read and Write Files in Java Using Separate Threads.html-BppWlkoH.js"),__vite__mapDeps([108,1])),meta:{d:17191008e5,l:"2024年6月23日",c:["Java","多线程"],g:["Java","多线程","文件读写"],e:`
<ol>
<li>引言</li>
</ol>
<p>在Java中处理文件时，如果不引起性能问题地管理大文件可能会是一个挑战。这正是使用单独线程的概念发挥作用的地方。<strong>通过使用单独的线程，我们可以有效地读写文件而不阻塞主线程。</strong> 在本教程中，我们将探讨如何使用单独的线程来读写文件。</p>
<ol start="2">
<li>为什么使用单独的线程</li>
</ol>
<p>使用单独的线程进行文件操作可以通过允许任务的并发执行来提高性能。在单线程程序中，文件操作是顺序执行的。例如，我们首先读取整个文件，然后写入另一个文件。这可能特别耗时，尤其是对于大文件。</p>`,r:{minutes:7.01,words:2104},t:"Java中使用不同线程读写文件",y:"a"}}],["/posts/baeldung/2024-06-23/2024-06-23-Regular%20Expression%20for%20Password%20Validation%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-23-Regular Expression for Password Validation in Java.html-BbSOov02.js"),__vite__mapDeps([109,1])),meta:{d:17191008e5,l:"2024年6月23日",c:["Java","正则表达式"],g:["密码验证","正则表达式"],e:`
<h2>1. 引言</h2>
<p>在网络安全方面，密码验证对于保护用户账户至关重要。此外，Java中的正则表达式（regex）提供了一种强大且灵活的方式来强制实施特定的密码复杂性标准。</p>
<p><strong>在本教程中，我们将深入探讨如何利用正则表达式进行基于Java的密码验证过程。</strong></p>
<h2>2. 强密码的标准</h2>
<p>在我们进入代码之前，我们将确定什么构成了一个强密码。理想的密码应该：</p>
<ul>
<li>至少有八个字符</li>
<li>包含一个大写字母</li>
<li>使用至少一个小写字母</li>
<li>至少包含一个数字</li>
<li>需要有一个特殊符号（即@, #, $, %等）</li>
<li>不包含空格、制表符等</li>
</ul>`,r:{minutes:4.19,words:1257},t:"Java中使用正则表达式进行密码验证",y:"a"}}],["/posts/baeldung/2024-06-23/2024-06-23-Reset%20ListIterator%20to%20First%20Element%20of%20the%20List%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-23-Reset ListIterator to First Element of the List in Java.html-Ato2PUfE.js"),__vite__mapDeps([110,1])),meta:{d:17191872e5,l:"2024年6月24日",c:["Java","ListIterator"],g:["Java","ListIterator","编程"],e:`
<p>当我们使用Java进行编程时，高效地遍历集合是一个常见的需求。在处理列表时，_ListIterator_接口提供了一个强大的工具，用于双向遍历。然而，在某些情况下，将_ListIterator_重置到列表的第一个元素变得必要。</p>
<p>在本教程中，我们将探讨在Java中将_ListIterator_重置到列表开头的各种方法。</p>
<h2>2. 问题介绍</h2>
<p>像往常一样，我们通过一个例子来理解问题。</p>
<p>假设我们有一个字符串列表：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>\`\`\` <span class="token constant">MY_LIST</span> <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"E"</span><span class="token punctuation">,</span> <span class="token string">"F"</span><span class="token punctuation">,</span> <span class="token string">"G"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:2.85,words:856},t:"Java中重置ListIterator到列表的第一个元素",y:"a"}}],["/posts/baeldung/2024-06-23/2024-06-23-Rotate%20a%20Vertex%20Around%20a%20Certain%20Point%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-23-Rotate a Vertex Around a Certain Point in Java.html-v-QDCOPi.js"),__vite__mapDeps([111,1])),meta:{d:1719161353e3,c:["REST with Spring Boot","Learn Spring Security"],g:["Persistence","REST","Security"],e:`
<p>date: 2024-06-24
category:</p>
<ul>
<li>REST with Spring Boot</li>
<li>Learn Spring Security
tag:</li>
<li>Persistence</li>
<li>REST</li>
<li>Security
head:</li>
<li>
<ul>
<li>meta</li>
<li>name: keywords
content: Java, 旋转顶点, 特定点, 算法</li>
</ul>
</li>
</ul>
<hr>
<h1>在Java中围绕特定点旋转顶点</h1>
<p>开始这里</p>`,r:{minutes:.95,words:285},t:"在Java中围绕特定点旋转顶点---",y:"a"}}],["/posts/baeldung/2024-06-23/2024-06-23-Run%20Length%20Encoding%20and%20Decoding%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-23-Run Length Encoding and Decoding in Java.html-C3bdtBix.js"),__vite__mapDeps([112,1])),meta:{d:1719107178e3,c:["Java","数据压缩"],g:["Run-Length Encoding","Java"],e:`
<h2>1. 概述</h2>
<p>在计算机科学中，数据压缩技术在优化存储和传输效率方面扮演着重要角色。其中一种历经时间考验的技术是游程编码（Run-length Encoding，简称RLE）。</p>
<p>在本教程中，我们将理解RLE，并探索如何在Java中实现编码和解码。</p>
<h2>2. 理解游程编码</h2>
<p>游程编码是一种简单但有效的无损数据压缩形式。RLE的基本思想是<strong>通过单个值及其计数来表示数据流中连续相同的元素，即“游程”</strong>，而不是按原始游程表示。</p>
<p>这在处理重复序列时特别有用，因为它显著减少了存储或传输数据所需的空间量。</p>`,r:{minutes:6.46,words:1939},t:"Java中的游程编码及其解码",y:"a"}}],["/posts/baeldung/2024-06-23/2024-06-23-Set%20an%20Environment%20Variable%20at%20Runtime%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-23-Set an Environment Variable at Runtime in Java.html-CB8cNSD3.js"),__vite__mapDeps([113,1])),meta:{d:17191008e5,l:"2024年6月23日",c:["Java","Environment Variables"],g:["Java","Environment Variables","Runtime","Testing"],e:`
<p>Java提供了一种简单的与环境变量交互的方式。我们可以访问它们，但不容易改变它们。然而，在某些情况下，我们需要更多地控制环境变量，特别是在测试场景中。</p>
<p>在本教程中，我们将学习如何解决这个问题，并以编程方式设置或更改环境变量。<strong>我们只会讨论在测试上下文中使用它。</strong> 使用动态环境变量进行领域逻辑应该被劝阻，因为它容易出现问题。</p>
<h2>2. 访问环境变量</h2>
<p>访问环境变量的过程非常简单。_System_类为我们提供了这样的功能：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenOS_whenGetPath_thenVariableIsPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> classPath <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"PATH"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertThat</span><span class="token punctuation">(</span>classPath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:5.75,words:1726},t:"在Java中在运行时设置环境变量",y:"a"}}],["/posts/baeldung/2024-06-23/2024-06-23-Setting%20up%20and%20Using%20Spock%20With%20Gradle.html",{loader:()=>a(()=>import("./2024-06-23-Setting up and Using Spock With Gradle.html-B3ZDrQmi.js"),__vite__mapDeps([114,1])),meta:{d:17191872e5,l:"2024年6月24日",c:["Java","Spock"],g:["Spock","Gradle"],e:`
<h2>1. 概述</h2>
<p>Spock 框架是用于 Java 和 Groovy 应用程序的测试和规范框架。Gradle 是一个流行的构建工具，是 Maven 的替代品。</p>
<p>在本教程中，我们将展示如何使用 Gradle 设置项目并添加 Spock 测试依赖项。我们还将快速查看并逐步完全集成 Spock 与 Spring，同时仍使用 Gradle 构建过程。</p>
<p>我们需要创建一个 Gradle 项目并添加 Spock 依赖项。</p>
<h3>2.1. 设置 Gradle 项目</h3>
<p>首先，让我们在系统上安装 Gradle。然后可以使用 <em>gradle init</em> 命令初始化 Gradle 项目。创建应用程序或库的不同选项，例如使用 Java 或 Kotlin。</p>`,r:{minutes:5.07,words:1521},t:"Spock 与 Gradle 的设置和使用",y:"a"}}],["/posts/baeldung/2024-06-23/2024-06-23-Shutting%20Down%20on%20OutOfMemoryError%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-23-Shutting Down on OutOfMemoryError in Java.html-Bp6e-GFa.js"),__vite__mapDeps([115,1])),meta:{d:17191008e5,l:"2024年6月23日",c:["Java","内存管理"],g:["OutOfMemoryError","多线程"],e:`
<p>维护应用程序的一致性状态比保持其运行更为重要，这在大多数情况下都是正确的。</p>
<p>在本教程中，我们将学习如何在出现_OutOfMemoryError_时显式停止应用程序。在某些情况下，如果没有正确的处理，我们可能会继续使用应用程序处于不正确的状态。</p>
<p>_OutOfMemoryError_是应用程序外部的错误，并且在大多数情况下是无法恢复的。错误的名字暗示应用程序没有足够的RAM，这并不完全正确。<strong>更准确地说，应用程序无法分配请求的内存量。</strong></p>
<p>在单线程应用程序中，情况相当简单。**如果我们遵循指南并且不捕获_OutOfMemoryError_，应用程序将终止。**这是处理此错误的预期方式。</p>`,r:{minutes:4.66,words:1398},t:"在Java中遇到OutOfMemoryError时的关闭操作",y:"a"}}],["/posts/baeldung/2024-06-23/2024-06-23-Simple%20Morse%20Code%20Translation%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-23-Simple Morse Code Translation in Java.html-iwc0d6cl.js"),__vite__mapDeps([116,1])),meta:{d:17191872e5,l:"2024年6月24日",c:["Java","Morse Code"],g:["Morse Code","Translation","Java"],e:`
<h2>1. 概述</h2>
<p>摩斯电码使用点和划的序列来表示字母、数字和标点符号。Samuel Morse 和 Alfred Vail 在 19 世纪 30 年代初为电报使用而开发了它。</p>
<p>在本教程中，我们将编写一个方法，将英文翻译成摩斯电码。然后，我们将编写一个相反的方法。</p>
<h2>2. 编写摩斯电码</h2>
<p>让我们了解摩斯电码及其字母表。</p>
<h3>2.1. 什么是摩斯电码？</h3>
<p><strong>在摩斯电码中，每个字母由独特的短信号（点）和长信号（划）组合表示</strong>，允许通过一系列开关信号进行通信。根据常见用法，我们将用“ <em>.</em>”表示点，用“ <em>–</em>”表示划。这两个字符足以写出整个摩斯字母表。</p>`,r:{minutes:5.43,words:1629},t:"简单的摩斯电码翻译在Java中 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-23/2024-06-23-Structured%20Logging%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-23-Structured Logging in Java.html-qml8neZv.js"),__vite__mapDeps([117,1])),meta:{d:17191008e5,l:"2024年6月23日",c:["Java","编程"],g:["日志记录","结构化日志"],e:`
<p>应用程序日志是排查问题、测量性能或仅仅是检查软件应用程序行为的重要资源。</p>
<p>在本教程中，我们将学习如何在Java中实现结构化日志记录以及这种技术相对于非结构化日志记录的优势。</p>
<h2>2. 结构化日志与非结构化日志的比较</h2>
<p>在深入代码之前，让我们了解非结构化和结构化日志之间的主要区别。</p>
<p>非结构化日志是打印出的信息，具有一致的格式但没有结构。它只是一段文本，其中一些变量被连接和格式化。</p>
<p>让我们看一个来自演示Spring应用程序的非结构化日志示例：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>22:25:48.111 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 42 ms. Found 1 JPA repository interfaces.
</code></pre></div>`,r:{minutes:6.9,words:2070},t:"Java中的结构化日志记录",y:"a"}}],["/posts/baeldung/2024-06-23/2024-06-23-Using%20Current%20Time%20as%20Filename%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-23-Using Current Time as Filename in Java.html-CSSKyLIr.js"),__vite__mapDeps([118,1])),meta:{d:17191872e5,l:"2024年6月24日",c:["Java","编程"],g:["Java","文件名","当前时间"],e:`
<p>在本教程中，我们将探讨Java中获取当前时间戳值的几种方法，并将其用作文件名。为了实现我们的目标，我们将利用Java DateTime API中的几个类以及第三方库如Joda-Time。</p>
<h2>2. 初始设置</h2>
<p>在后续部分，我们将构建几个测试用例，展示每种获取当前时间戳并将其用作文件名的方法。</p>
<p>然而，为了将时间戳值转换为指定的字符串格式，我们首先需要指定时间戳格式，然后使用它来定义格式化器类：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">TIMESTAMP_FORMAT</span> <span class="token operator">=</span> <span class="token string">"yyyyMMddHHmmss"</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">DateTimeFormatter</span> <span class="token constant">DATETIME_FORMATTER</span> <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token constant">TIMESTAMP_FORMAT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">SimpleDateFormat</span> <span class="token constant">SIMPLEDATE_FORMAT</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token constant">TIMESTAMP_FORMAT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:4.91,words:1472},t:"使用Java中的当前时间作为文件名",y:"a"}}],["/posts/baeldung/2024-06-24/2024-06-24-Accessing%20Private%20Java%20Fields%20via%20Kotlin%20Extension%20Functions.html",{loader:()=>a(()=>import("./2024-06-24-Accessing Private Java Fields via Kotlin Extension Functions.html-Dg6HlFhj.js"),__vite__mapDeps([119,1])),meta:{d:17191872e5,l:"2024年6月24日",c:["Kotlin","Java"],g:["Extension Functions","Private Fields"],e:`
<hr>
<p>当使用 Kotlin 时，我们有时需要从 Kotlin 扩展函数中访问私有的 Java 字段。</p>
<p>在本教程中，我们将探讨如何从 Kotlin 扩展函数访问私有属性。我们还将看到这所涉及的挑战，以及我们有哪些变通方法来解决这个问题。</p>
<p>在深入之前，我们需要简要回顾一下 Kotlin 的扩展函数 API 以及 Kotlin 如何实现它们。</p>
<h3>2.1 扩展函数 – API</h3>
<p><strong>扩展函数允许我们给定类或接口添加功能，而无需修改原始实现</strong>。当我们处理外部依赖项中的类时，这些功能特别有用。例如，在 Java 中，如果我们想给 <code>String</code> 添加一个 <code>containsIgnoreCase()</code> 方法，我们不能直接做到：</p>`,r:{minutes:3.83,words:1149},t:"通过 Kotlin 扩展函数访问私有 Java 字段",y:"a"}}],["/posts/baeldung/2024-06-24/2024-06-24-Add%20Authorities%20as%20Custom%20Claims%20in%20JWT%20Access%20Tokens%20in%20Spring%20Authorization%20Server.html",{loader:()=>a(()=>import("./2024-06-24-Add Authorities as Custom Claims in JWT Access Tokens in Spring Authorization Server.html-s3HCOwNd.js"),__vite__mapDeps([120,1])),meta:{d:17192736e5,l:"2024年6月25日",c:["Spring Security","OAuth"],g:["JWT","Custom Claims","Spring Authorization Server"],e:`
<p>如果您正在处理Spring Security（特别是OAuth）实现，一定要看看《Learn Spring Security》课程。</p>
<h3>1. 概述</h3>
<p>将自定义声明添加到JSON Web Token（JWT）访问令牌在许多场景中至关重要。自定义声明允许我们在令牌负载中包含额外的信息。</p>
<p>在本教程中，我们将学习如何在Spring授权服务器中将资源所有者的权限添加到JWT访问令牌。</p>
<p>Spring授权务器是Spring生态系统中的一个新项目，旨在为Spring应用程序提供授权服务器支持。它旨在简化使用熟悉且灵活的Spring编程模型实现OAuth 2.0和OpenID Connect（OIDC）授权服务器的过程。</p>`,r:{minutes:7.45,words:2235},t:"在Spring授权服务器中将权限作为自定义声明添加到JWT访问令牌",y:"a"}}],["/posts/baeldung/2024-06-24/2024-06-24-Call%20a%20Method%20on%20Each%20Element%20of%20a%20List%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-24-Call a Method on Each Element of a List in Java.html-CtVzCt_-.js"),__vite__mapDeps([121,1])),meta:{d:17191872e5,l:"2024年6月24日",c:["Java","编程"],g:["Java 8","流式API","列表操作"],e:`<hr>
<h1>在Java中对列表的每个元素调用方法</h1>
<p>当我们在Java中工作时，无论是处理Java 8之前的代码还是采用Java 8及更高版本中的Stream API的功能性优雅，对列表中的每个元素调用方法是一项基本操作。</p>
<p>在本教程中，我们将探索可用于对列表元素调用方法的方法和技术。</p>
<h3>2. 问题介绍</h3>
<p>像往常一样，让我们通过一个例子快速理解问题。假设我们有一个_玩家_类：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> score<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> score<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>score <span class="token operator">=</span> score<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

   <span class="token comment">// getter和setter方法省略</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:4.83,words:1450},t:"在Java中对列表的每个元素调用方法",y:"a"}}],["/posts/baeldung/2024-06-24/2024-06-24-Check%20if%20List%20Contains%20at%20Least%20One%20Enum.html",{loader:()=>a(()=>import("./2024-06-24-Check if List Contains at Least One Enum.html-ChdopFL5.js"),__vite__mapDeps([122,1])),meta:{d:17192736e5,l:"2024年6月25日",c:["Java","编程"],g:["Java","枚举","集合"],e:`
<p>在Java中，枚举（enums）是一种强大且类型安全的方式来表示一组固定的常量。此外，当我们使用像列表（Lists）这样的集合时，我们可能会遇到需要检查列表是否至少包含一个特定枚举类型元素的场景。</p>
<p>在本文中，我们将探索在Java中实现这一点的各种方法，并提供代码示例。</p>
<h2>问题陈述</h2>
<p>在深入主题之前，让我们简要回顾一下Java中的枚举基础。枚举是一种特殊数据类型，允许我们定义一组命名常量，这些常量代表一组固定、预定义的值。此外，枚举提供了比使用原始常量或整数更好的类型安全性和可读性。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Position</span> <span class="token punctuation">{</span>
    <span class="token constant">DEVELOPER</span><span class="token punctuation">,</span> <span class="token constant">MANAGER</span><span class="token punctuation">,</span> <span class="token constant">ANALYST</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:3.21,words:962},t:"Java中检查列表是否至少包含一个枚举值",y:"a"}}],["/posts/baeldung/2024-06-24/2024-06-24-Check%20if%20a%20Float%20Value%20is%20Equivalent%20to%20an%20Integer%20Value%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-24-Check if a Float Value is Equivalent to an Integer Value in Java.html-DHKNI_Do.js"),__vite__mapDeps([123,1])),meta:{d:17191872e5,l:"2024年6月24日",c:["Java","编程"],g:["float","integer","比较"],e:`
<p>浮点数通常使用Java的<code>float</code>或<code>double</code>数据类型来表示。然而，由于精度的限制，它们使用二进制表示这些值，当它们直接与整数值比较时，结果可能是出乎意料的。</p>
<p><strong>在本教程中，我们将讨论在Java中检查<code>float</code>值是否等同于<code>integer</code>值的各种方法。</strong></p>
<h2>2. 使用类型转换</h2>
<p>一种简单的方法是使用类型转换将浮点值转换为整数，然后进行比较。</p>
<p>以下是示例代码：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">float</span> floatValue <span class="token operator">=</span> <span class="token number">10.0f</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenFloatAndIntValues_whenCastingToInt_thenCheckIfFloatValueIsEquivalentToIntegerValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> intValue <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> floatValue<span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span>floatValue<span class="token punctuation">,</span> intValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.54,words:763},t:"Java中检查浮点数是否等同于整数值",y:"a"}}],["/posts/baeldung/2024-06-24/2024-06-24-Check%20if%20a%20Point%20Is%20Between%20Two%20Points%20Drawn%20on%20a%20Straight%20Line%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-24-Check if a Point Is Between Two Points Drawn on a Straight Line in Java.html-SeyslqMH.js"),__vite__mapDeps([124,1])),meta:{d:17192736e5,l:"2024年6月25日",c:["Java","2D Geometry"],g:["Point","Straight Line","Check"],e:`<hr>
<h1>在Java中检查一个点是否在直线上的两点之间</h1>
<h2>1. 概述</h2>
<p>在使用二维几何时，一个常见的问题是确定一个点是否在直线上的另外两个点之间。</p>
<p>在这个快速教程中，我们将探讨在Java中进行这种判断的不同方法。</p>
<h2>2. 理解问题陈述</h2>
<p>假设我们在平面上有两个点：第一个点A的坐标是(x1, y1)，第二个点B的坐标是(x2, y2)。我们想要检查给定的点C，其坐标为(x3, y3)，是否在A和B之间：</p>
<p>在上面的图表中，点C位于点A和B之间，而点D不位于点A和B之间。</p>
<h2>3. 使用距离公式</h2>`,r:{minutes:3.43,words:1029},t:"在Java中检查一个点是否在直线上的两点之间",y:"a"}}],["/posts/baeldung/2024-06-24/2024-06-24-Convert%20Joda%20Time%20DateTime%20to%20Date%20and%20Vice%20Versa.html",{loader:()=>a(()=>import("./2024-06-24-Convert Joda Time DateTime to Date and Vice Versa.html-CgCADnyw.js"),__vite__mapDeps([125,1])),meta:{d:17191872e5,l:"2024年6月24日",c:["Java","Joda-Time"],g:["Joda-Time","DateTime","Date"],e:'\n<h2>1. 引言</h2>\n<p>Joda-Time 是一个非常流行的 Java 日期和时间操作库。它提供了比标准 <em>DateTime</em> 类通常提供的更直观、更灵活的 API。</p>\n<h3>在本教程中，我们将探讨如何将 Joda-Time <em>DateTime</em> 对象转换为标准的 Java <em>Date</em> 对象，反之亦然。</h3>\n<h2>2. 设置 Joda-Time</h2>\n<p>首先，我们应该确保我们的项目包含了 <em>joda-time</em> 库：</p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`joda-time`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`joda-time`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`2.12.6`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n</code></pre></div>',r:{minutes:1.96,words:588},t:"Joda-Time DateTime 与 Java Date 互转",y:"a"}}],["/posts/baeldung/2024-06-24/2024-06-24-Convert%20Null%20Value%20to%20a%20Default%20Value%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-24-Convert Null Value to a Default Value in Java.html-COyvYgIO.js"),__vite__mapDeps([126,1])),meta:{d:17192736e5,l:"2024年6月25日",c:["Java","Programming"],e:`
<p>在1965年，托尼·霍尔（Tony Hoare）引入了空引用的概念。从那时起，无数小时被用于阅读日志并尝试找到NullPointerExceptions的来源。这种异常如此普遍，以至于我们通常称之为NPE。</p>
<p>在本教程中，我们将学习如何缓解这个问题。我们将回顾几种简化将null转换为默认值的技术。</p>
<h2>2. 简单的if语句</h2>
<p>处理转换的最简单方法是使用if语句。它们是基本的语言结构，并且由于对不同经验和水平的开发人员都很清晰，因此具有优势。这种方法最好的地方在于它很冗长，这同时也是最坏的地方：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ParameterizedTest</span>
<span class="token annotation punctuation">@ArgumentsSource</span><span class="token punctuation">(</span><span class="token class-name">ObjectsProvider</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">givenIfWhenNotNullThenReturnsDefault</span><span class="token punctuation">(</span><span class="token class-name">String</span> givenValue<span class="token punctuation">,</span> <span class="token class-name">String</span> defaultValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> actual <span class="token operator">=</span> defaultValue<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>givenValue <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        actual <span class="token operator">=</span> givenValue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">assertDefaultConversion</span><span class="token punctuation">(</span>givenValue<span class="token punctuation">,</span> defaultValue<span class="token punctuation">,</span> actual<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:5.09,words:1527},t:"Java中将空值转换为默认值",y:"a"}}],["/posts/baeldung/2024-06-24/2024-06-24-Converting%20BigDecimal%20to%20Integer%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-24-Converting BigDecimal to Integer in Java.html-MO4DmvY3.js"),__vite__mapDeps([127,1])),meta:{d:17191872e5,l:"2024年6月24日",c:["Java","BigDecimal"],g:["BigDecimal","Integer","Conversion"],e:`
<h2>1. 概述</h2>
<p><em>BigDecimal</em> 旨在处理浮点数。它提供了一种便捷的方式来管理精度，并且最重要的是，它处理了舍入误差。</p>
<p>然而，在某些情况下，我们需要将其作为简单的整数来处理，并且将其转换为_Integer_或_int_。在本教程中，我们将学习如何正确进行转换，并理解转换背后的一些问题。</p>
<h2>2. 缩小转换</h2>
<p><em>BigDecimal</em> 可以存储比_Integer_或_int_更广泛的数字范围。这通常可能导致在转换过程中丢失精度。</p>
<h3>2.1. 截断</h3>
<p><em>BigDecimal</em> 提供了_intValue()<em>方法，可以将BigDecimal转换为_int</em>：</p>`,r:{minutes:4.49,words:1347},t:"Java中将BigDecimal转换为Integer",y:"a"}}],["/posts/baeldung/2024-06-24/2024-06-24-Converting%20Integer%20to%20BigDecimal%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-24-Converting Integer to BigDecimal in Java.html-D_os4gb8.js"),__vite__mapDeps([128,1])),meta:{d:17191872e5,l:"2024年6月24日",c:["Java","BigDecimal"],g:["Integer","BigDecimal","Java"],e:`
<p><em>BigDecimal</em> 旨在处理大的浮点数。<strong>它解决了浮点算术的问题，并提供了控制精度的方式。</strong> 此外，它还拥有许多用于数字运算的常规方法。</p>
<p>我们可以通过将_Integer_转换来利用_BigDecimal_的特性。在本教程中，我们将学习几种不同的转换方法，并讨论它们的优缺点。</p>
<h2>2. 构造函数转换</h2>
<p>最直接的一种方式是使用构造函数转换。<strong><em>BigDecimal</em> 提供了可以从多种输入转换的构造函数。</strong> 因此，我们可以将给定的_Integer_传递给_BigDecimal_构造函数：</p>`,r:{minutes:2.69,words:808},t:"Java中将Integer转换为BigDecimal",y:"a"}}],["/posts/baeldung/2024-06-24/2024-06-24-Create%20Kubernetes%20Operators%20with%20the%20Java%20Operator%20SDK.html",{loader:()=>a(()=>import("./2024-06-24-Create Kubernetes Operators with the Java Operator SDK.html-Uhpe7k4c.js"),__vite__mapDeps([129,1])),meta:{d:17191872e5,l:"2024年6月24日",c:["Kubernetes","Java"],g:["Kubernetes Operator","Java Operator SDK"],e:`
<h2>1. 引言</h2>
<p>在本教程中，我们将介绍Kubernetes Operators的概念以及如何使用Java Operator SDK来实现它们。为了说明这一点，我们将实现一个Operators，它简化了在集群中部署OWASP的Dependency-Track应用程序实例的任务。</p>
<h2>2. Kubernetes Operators是什么？</h2>
<p>在Kubernetes术语中，<strong>Operators是一个通常部署在集群中的软件组件，它管理一组资源的生命周期</strong>。它扩展了原生控制器集合，例如副本集和作业控制器，以管理复杂或相互关联的组件作为一个单一管理单元。</p>`,r:{minutes:11.96,words:3587},t:"使用Java Operator SDK创建Kubernetes Operators | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-24/2024-06-24-Creating%20Reactive%20APIs%20With%20Micronaut%20and%20MongoDB.html",{loader:()=>a(()=>import("./2024-06-24-Creating Reactive APIs With Micronaut and MongoDB.html-vk-9aDOG.js"),__vite__mapDeps([130,1])),meta:{d:17192736e5,l:"2024年6月25日",c:["Reactive APIs","Micronaut","MongoDB"],g:["Micronaut","MongoDB","Reactive Programming","REST API"],e:`<hr>
<h1>使用Micronaut和MongoDB创建响应式API</h1>
<p>在本教程中，我们将探讨如何使用Micronaut和MongoDB创建响应式REST API。</p>
<p>Micronaut是一个用于在Java虚拟机(JVM)上构建微服务和无服务器应用程序的框架。</p>
<p>我们将看看如何使用Micronaut创建实体、仓库、服务和控制器。</p>
<h2>2. 项目设置</h2>
<p>对于我们的代码示例，我们将创建一个CRUD应用程序，用于存储和检索MongoDB数据库中的书籍。首先，让我们使用Micronaut Launch创建一个Maven项目，设置依赖项并配置数据库。</p>`,r:{minutes:10.38,words:3113},t:"使用Micronaut和MongoDB创建响应式API",y:"a"}}],["/posts/baeldung/2024-06-24/2024-06-24-Difference%20Between%20Xmx%20and%20MaxRAM%20JVM%20Parameters.html",{loader:()=>a(()=>import("./2024-06-24-Difference Between Xmx and MaxRAM JVM Parameters.html-Bi1-dYd6.js"),__vite__mapDeps([131,1])),meta:{d:17192736e5,l:"2024年6月25日",c:["Java","JVM"],g:["Xmx","MaxRAM"],e:`<hr>
<h1>Java中Xmx与MaxRAM JVM参数的区别</h1>
<h2>1. 概述</h2>
<p>堆大小是Java应用程序的一个关键参数。它直接影响我们可以使用多少内存，并间接影响应用程序的性能。例如，使用压缩指针、垃圾回收周期的数量和持续时间等。</p>
<p>在本教程中，我们将学习如何使用<code>-XX:MaxRAM</code>标志来提供更多的堆大小计算调整机会。这在容器内运行应用程序或在不同主机上运行时尤其重要。</p>
<h2>2. 堆大小计算</h2>
<p>配置堆的标记可以一起工作，也可以相互覆盖。理解它们之间的关系对于更深入地了解它们的用途非常重要。</p>`,r:{minutes:4.59,words:1378},t:"Java中Xmx与MaxRAM JVM参数的区别",y:"a"}}],["/posts/baeldung/2024-06-24/2024-06-24-Difference%20Between%20a%20Future%20and%20a%20Promise%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-24-Difference Between a Future and a Promise in Java.html-DsL-ksjv.js"),__vite__mapDeps([132,1])),meta:{d:17192736e5,l:"2024年6月25日",c:["Java","编程"],g:["Future","Promise"],e:`
<h2>1. 引言</h2>
<p>Future 和 Promise 是用于处理异步任务的工具，它们允许在不等待每一步完成的情况下执行操作。尽管它们的目的相同，但它们之间存在关键差异。在本教程中，我们将探讨 Future 和 Promise 之间的差异，仔细研究它们的关键特性、用例和独特特点。</p>
<h2>2. 理解 Future</h2>
<p>Future 充当一个容器，等待正在进行的操作的结果。开发者通常使用 Future 来检查计算的状态，在结果准备好时检索结果，或者优雅地等待操作结束。Future 经常与 Executor 框架集成，提供了一种简单高效的处理异步任务的方法。</p>`,r:{minutes:5.55,words:1664},t:"Java 中 Future 和 Promise 的区别",y:"a"}}],["/posts/baeldung/2024-06-24/2024-06-24-Generational%20ZGC%20in%20Java%2021.html",{loader:()=>a(()=>import("./2024-06-24-Generational ZGC in Java 21.html-DKKMbq8F.js"),__vite__mapDeps([133,1])),meta:{d:17192736e5,l:"2024年6月25日",c:["Java","垃圾收集器"],g:["Java 21","Generational ZGC"],e:`
<h2>1. 概述</h2>
<p><strong>Java 21 在 2023 年 9 月首次亮相，同时引入了代际 ZGC（Generational Z Garbage Collector）。</strong> 在 Z 垃圾收集器的效率基础上，此更新通过为年轻和老年对象引入不同的代来优化内存管理。</p>
<p>在本文中，我们将仔细检查这一新增功能，探讨其潜在的好处、工作原理以及如何使用它。</p>
<h2>2. 垃圾收集</h2>
<p>开始我们的探索之前，让我们深入了解内存管理领域。<strong>垃圾收集是程序尝试释放不再被对象使用的分配内存的过程。</strong> 如果程序的某个部分仍然保持对它的指针，则对象被认为是“在使用中”或“被引用”的。相反，如果程序的任何部分都不再访问的“未使用”或“未被引用”的对象，则可以回收它所占用的内存。</p>`,r:{minutes:7,words:2099},t:"Java 21 中的代际 ZGC | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-24/2024-06-24-Getting%20Query%20String%20Parameters%20from%20HttpServletRequest.html",{loader:()=>a(()=>import("./2024-06-24-Getting Query String Parameters from HttpServletRequest.html-D71qnkTF.js"),__vite__mapDeps([134,1])),meta:{d:17191872e5,l:"2024年6月24日",c:["Java","Spring MVC"],g:["HttpServletRequest","Query String"],e:`<hr>
<h1>从HttpServletRequest获取查询字符串参数</h1>
<h2>1. 引言</h2>
<p>后端HTTP API开发中最重要的能力之一是解析前端传递的请求查询参数。</p>
<p>在本教程中，我们将介绍几种直接从_HttpServletRequest_获取查询参数的方法，以及Spring MVC提供的一些简洁方式。</p>
<h2>2. _HttpServletRequest_中的方法</h2>
<p>首先，我们来看看_HttpServletRequest_提供的与参数相关的方法。</p>
<h3>2.1. <em>HttpServletRequest#getQueryString()</em></h3>`,r:{minutes:4.07,words:1222},t:"从HttpServletRequest获取查询字符串参数",y:"a"}}],["/posts/baeldung/2024-06-24/2024-06-24-Introduction%20to%20Apache%20Calcite.html",{loader:()=>a(()=>import("./2024-06-24-Introduction to Apache Calcite.html-CtFgboUF.js"),__vite__mapDeps([135,1])),meta:{d:17191872e5,l:"2024年6月24日",c:["Tutorial","Apache Calcite"],g:["Data Management","Query Optimization"],e:`
<p>在本教程中，我们将学习Apache Calcite。它是一个功能强大的数据管理框架，可以用于各种与数据访问有关的场景。Calcite专注于从任何来源检索数据，而不是存储数据。此外，它的查询优化能力可以加快数据检索的速度并提高效率。</p>
<p>让我们更详细地了解Apache Calcite的相关用例。</p>
<p>由于其能力，Apache Calcite可以在多个用例中发挥作用：</p>
<p>构建新数据库的查询引擎需要数年时间。然而，Calcite通过提供现成的可扩展SQL解析器、验证器和优化器，帮助我们立即开始。Calcite已经被用于构建数据库，例如HerdDB、Apache Druid、MapD等。</p>`,r:{minutes:8.85,words:2655},t:"Apache Calcite 简介",y:"a"}}],["/posts/baeldung/2024-06-24/2024-06-24-Introduction%20to%20Postman.html",{loader:()=>a(()=>import("./2024-06-24-Introduction to Postman.html-D5B-0nfK.js"),__vite__mapDeps([136,1])),meta:{d:17191872e5,l:"2024年6月24日",c:["Java","Postman"],g:["REST","Spring Boot"],e:`
<p>Postman是一个流行的API开发工具，它简化了设计、测试、修改和记录API的过程。它提供了一个用户友好的界面，允许用户发送和接收HTTP请求，使用环境和集合管理工作流，执行自动化测试，创建模拟服务器进行测试，并生成API文档。</p>
<p>由于其多功能性，它受到从事API中心工作流的开发人员、测试人员和其他IT专业人员的高度评价。</p>
<p>在本教程中，我们将讨论如何安装、设置和使用Postman的最重要功能。</p>
<h2>2. 安装和设置</h2>
<p>Postman可以作为Windows、Mac或Linux操作系统的桌面应用程序下载。它也可作为网络应用程序提供。然而，并非所有功能都可用。</p>`,r:{minutes:10.5,words:3151},t:"Postman入门指南",y:"a"}}],["/posts/baeldung/2024-06-24/2024-06-24-Introduction%20to%20Spring%20AI.html",{loader:()=>a(()=>import("./2024-06-24-Introduction to Spring AI.html-B1sDRd7g.js"),__vite__mapDeps([137,1])),meta:{d:17192736e5,l:"2024年6月25日",c:["Spring AI","Baeldung"],g:["Spring Framework","AI Generative Prompts"],e:`
<h2>1. 概览</h2>
<p>Spring 框架通过 Spring AI 项目正式启用了 AI 生成式提示的强大能力。在本教程中，我们将提供 Spring Boot 应用程序中生成式 AI 集成的全面介绍，并熟悉基本的 AI 概念。</p>
<p>我们还将了解 Spring AI 如何与模型交互，并创建一个应用程序来展示其能力。</p>
<h2>2. Spring AI 的主要概念</h2>
<p>在我们开始之前，让我们回顾一些关键的领域术语和概念。</p>
<p>Spring AI 最初专注于设计用于处理语言输入并生成语言输出的模型。项目背后的理念是为开发人员提供一个抽象接口，这是将生成式 AI API 作为独立组件集成到应用程序中的基础。</p>`,r:{minutes:7.35,words:2204},t:"Spring AI 简介 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-24/2024-06-24-Introduction%20to%20Spring%20Cloud%20AWS%203.0%20%20%20SQS%20Integration.html",{loader:()=>a(()=>import("./2024-06-24-Introduction to Spring Cloud AWS 3.0   SQS Integration.html-B5Z1UWRA.js"),__vite__mapDeps([138,1])),meta:{d:17191872e5,l:"2024年6月24日",c:["Spring Cloud AWS","SQS Integration"],g:["Spring Cloud AWS 3.0","SQS","Integration Test","Testcontainers","LocalStack"],e:`<hr>
<h1>Spring Cloud AWS 3.0 与 SQS 集成介绍</h1>
<p>Spring Cloud AWS 是一个旨在简化与 AWS 服务交互的项目。Simple Queue Service（SQS）是 AWS 的一个解决方案，用于以可扩展的方式发送和接收异步消息。</p>
<p>在本教程中，我们将重新介绍 Spring Cloud AWS SQS 集成，该集成已为 Spring Cloud AWS 3.0 完全重写。</p>
<p>该框架提供了熟悉的 Spring 抽象来处理 SQS 队列，例如 SqsTemplate 和 @SqsListener 注解。</p>
<p>我们将通过事件驱动的场景，展示发送和接收消息的示例，并展示使用 Testcontainers（一种管理一次性 Docker 容器的工具）和 LocalStack（本地模拟类似 AWS 环境的工具）来设置集成测试的策略。</p>`,r:{minutes:5.31,words:1594},t:"Spring Cloud AWS 3.0 与 SQS 集成介绍",y:"a"}}],["/posts/baeldung/2024-06-24/2024-06-24-Java%208%20Stream%20Operation%20on%20the%20Empty%20List.html",{loader:()=>a(()=>import("./2024-06-24-Java 8 Stream Operation on the Empty List.html-DtTUUhvJ.js"),__vite__mapDeps([139,1])),meta:{d:17192736e5,l:"2024年6月25日",c:["Java","Stream API"],g:["Java 8","Stream操作"],e:'\n<h2>1. 引言</h2>\n<p>Java 8 通过引入 Stream API，改变了我们处理集合和数据操作的方式，带来了范式的转变。Stream API 提供了一种简洁而富有表现力的方式来对数据执行操作，使开发者能够编写更易读、更健壮、更高效的代码。</p>\n<p>在本教程中，我们将深入探讨 Stream 操作的有趣世界，重点关注空列表。虽然使用空列表工作可能看起来微不足道，但它揭示了 Stream API 的一些强大方面。</p>\n<h2>2. 将空列表转换为 Stream</h2>\n<p>我们可以很容易地使用 stream() 方法从空列表中获得 Stream：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span>```````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>``````` emptyList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Stream</span>```````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>``````` emptyStream <span class="token operator">=</span> emptyList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div>',r:{minutes:3.43,words:1030},t:"Java 8 空列表上的 Stream 操作 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-24/2024-06-24-Maven%20Dependencies%20Failing%20With%20a%20501%20Error%20%20HTTPS%20Required%20.html",{loader:()=>a(()=>import("./2024-06-24-Maven Dependencies Failing With a 501 Error  HTTPS Required .html-BSs01Sa2.js"),__vite__mapDeps([140,1])),meta:{d:17191872e5,l:"2024年6月24日",c:["Maven","HTTPS"],g:["Maven","HTTPS","501错误"],e:`
<h2>1. 概述</h2>
<p>在本教程中，我们将了解错误“返回代码是：501，原因短语：HTTPS Required”。我们将首先理解这个错误的含义，然后探索解决此错误的步骤。</p>
<h2>2. Maven转向HTTPS</h2>
<p>Maven确保从Maven中央仓库自动下载外部库。然而，通过HTTP下载引发安全问题，例如中间人攻击（MITM）的风险。在这种攻击中，恶意代码可能在构建阶段被注入，这可能会感染下游组件及其最终用户。</p>
<p><strong>为了保持数据完整性和加密，从2020年1月15日起，Maven中央仓库已停止通过HTTP通信。这意味着任何使用HTTP访问中央仓库的尝试都将导致出现错误“返回代码是：501，原因短语：HTTPS Required”。要修复此错误，我们需要确保依赖项是通过HTTPS而不是HTTP获取的。</strong></p>`,r:{minutes:2.72,words:815},t:"Maven依赖项因501错误“HTTPS Required”失败 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-24/2024-06-24-Printing%20Message%20on%20Console%20without%20Using%20main%20%20%20Method%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-24-Printing Message on Console without Using main   Method in Java.html-DatD7awB.js"),__vite__mapDeps([141,1])),meta:{d:17191872e5,l:"2024年6月24日",c:["Java","Programming"],g:["Java","main method","static block"],e:`
<h2>1. 引言</h2>
<p>Java程序的执行始于_main()_方法。然而，在某些场景中，我们可能希望在不使用_main()_方法的情况下显示消息。</p>
<p><strong>在本教程中，我们将探讨完成此任务的一些方法。</strong></p>
<h2>2. 使用静态代码块</h2>
<p>静态代码块在类被加载到内存中时执行，这使得在不使用_main()_方法的情况下显示消息成为可能。</p>
<p>让我们看一个例子：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">PrintMessageWithoutMainMethod</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.34,words:703},t:"在Java中不使用main()方法在控制台打印消息",y:"a"}}],["/posts/baeldung/2024-06-24/2024-06-24-PriorityQueue%20iterator%20%20%20Method%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-24-PriorityQueue iterator   Method in Java.html-DbZkDv-l.js"),__vite__mapDeps([142,1])),meta:{d:17191872e5,l:"2024年6月24日",c:["Java","PriorityQueue"],g:["PriorityQueue","iterator","Java"],e:`
<ol>
<li>引言</li>
</ol>
<p>在 PriorityQueue 中，一个关键的方法是 iterator() 方法。这个方法允许我们无缝地遍历存储在队列中的元素。在本教程中，我们将探索 iterator() 方法的功能，并展示其在不同场景中的有效使用。</p>
<ol start="2">
<li>PriorityQueue 概述</li>
</ol>
<p>Java 中的 PriorityQueue 类作为一个数据结构，允许我们根据元素的优先级将元素存储在队列中。</p>
<p>PriorityQueue 内部使用二叉堆，这是一种树状结构，元素根据优先级进行排列。最高优先级的元素位于根节点，子节点继承其父节点的优先级。<strong>这种排列确保了最高优先级的元素位于队列的最前面，而最低优先级的元素则位于队列的最后。</strong></p>`,r:{minutes:5.06,words:1519},t:"Java 中 PriorityQueue 的 iterator() 方法",y:"a"}}],["/posts/baeldung/2024-06-24/2024-06-24-Read%20Input%20Character%20by%20Character%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-24-Read Input Character by Character in Java.html-BQjg4kTh.js"),__vite__mapDeps([143,1])),meta:{d:1719222647e3,c:["Java","输入处理"],g:["Java","BufferedReader","FileReader","Scanner"],e:`
<h2>1. 引言</h2>
<p>在许多Java应用程序中，我们需要逐字符地读取输入数据，这通常是一个常见的任务，尤其是在处理来自流源的大量数据时。</p>
<p><strong>在本教程中，我们将探讨Java中逐字符读取数据的不同方法。</strong></p>
<h2>2. 使用BufferedReader进行控制台输入</h2>
<p>我们可以利用BufferedReader从控制台逐字符地执行读取。<strong>请注意，如果我们要交互式地读取字符，这种方法很有帮助。</strong></p>
<p>让我们来看一个例子：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenInputFromConsole_whenUsingBufferedStream_thenReadCharByChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token class-name">ByteArrayInputStream</span> inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span><span class="token string">"TestInput"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setIn</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">BufferedReader</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> c<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> c<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token function">assertArrayEquals</span><span class="token punctuation">(</span><span class="token string">"TestInput"</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.37,words:711},t:"Java中逐字符读取输入的方法",y:"a"}}],["/posts/baeldung/2024-06-24/2024-06-24-Remove%20Characters%20From%20a%20String%20That%20Are%20in%20the%20Other%20String.html",{loader:()=>a(()=>import("./2024-06-24-Remove Characters From a String That Are in the Other String.html-CQSeV06c.js"),__vite__mapDeps([144,1])),meta:{d:1719264356e3,c:["Java","字符串操作"],g:["Java","字符串","性能分析"],e:`<hr>
<h1>从字符串中移除另一个字符串中存在的字符</h1>
<p>当我们使用Java时，经常会遇到需要精确度和元素间协作的任务。基于另一个字符串中的存在来移除字符串中的字符就是这样一个问题。</p>
<p>在本教程中，我们将探索实现此任务的各种技术。</p>
<h2>2. 问题介绍</h2>
<p>像往常一样，一个例子可以帮助我们快速理解问题。假设我们有两个字符串：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> <span class="token constant">STRING</span> <span class="token operator">=</span> <span class="token string">"a b c d e f g h i j"</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> <span class="token constant">OTHER</span> <span class="token operator">=</span> <span class="token string">"bdfhj"</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:4.32,words:1297},t:"从字符串中移除另一个字符串中存在的字符",y:"a"}}],["/posts/baeldung/2024-06-24/2024-06-24-Removing%20the%20Last%20Node%20in%20a%20Linked%20List.html",{loader:()=>a(()=>import("./2024-06-24-Removing the Last Node in a Linked List.html-COTajqrI.js"),__vite__mapDeps([145,1])),meta:{d:1719260827e3,c:["数据结构","Java"],g:["链表","删除操作"],e:`<hr>
<h1>从链表中移除最后一个节点</h1>
<p>数据结构是任何编程语言的重要组成部分。Java在_Collection<code>&lt;T&gt;</code>_接口下提供了大多数数据结构。映射（Maps）也被认为是Java集合的一部分，但它们不实现这个接口。</p>
<p>在本教程中，我们将集中讨论链表数据结构。特别是，我们将讨论如何在单向链表中移除最后一个元素。</p>
<h3>单向链表与双向链表</h3>
<p>首先，我们定义一下单向链表和双向链表之间的区别。幸运的是，它们的名字非常具有描述性。双向链表中的每个节点都有指向下一个和前一个节点的引用，除了显而易见的头和尾：</p>`,r:{minutes:3.36,words:1008},t:"从链表中移除最后一个节点",y:"a"}}],["/posts/baeldung/2024-06-24/2024-06-24-Replace%20Non%20Printable%20Unicode%20Characters%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-24-Replace Non Printable Unicode Characters in Java.html-DoYQ_sKo.js"),__vite__mapDeps([146,1])),meta:{d:17191872e5,l:"2024年6月24日",c:["Java","Unicode"],g:["非打印字符","正则表达式","文本处理"],e:`
<h2>1. 引言</h2>
<p>非打印Unicode字符包括控制字符、样式标记和其他在文本中可见但并非用于显示的不可见符号。此外，这些字符可能会在文本处理、显示和保存时引起问题。因此，根据需要找到替换或消除这些字符的方法非常重要。</p>
<h3>在本教程中，我们将探讨不同的替换方法。</h3>
<h2>2. 使用正则表达式</h2>
<p>Java的_String_类有强大的文本处理功能，正则表达式提供了一种简短的方式来匹配和替换字符串中的模式。我们可以使用简单的模式来查找和更改非打印的Unicode字母，如下所示：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenTextWithNonPrintableChars_whenUsingRegularExpression_thenGetSanitizedText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> originalText <span class="token operator">=</span> <span class="token string">"\\n\\nWelcome \\n\\n\\nto Baeldung!\\n\\t"</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> expected <span class="token operator">=</span> <span class="token string">"Welcome to Baeldung!"</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">"[\\\\p{C}]"</span><span class="token punctuation">;</span>
    
    <span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>originalText<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> sanitizedText <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token function">assertEquals</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> sanitizedText<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.26,words:679},t:"Java中替换非打印Unicode字符",y:"a"}}],["/posts/baeldung/2024-06-24/2024-06-24-Solving%20the%20ParameterResolutionException%20in%20JUnit%205.html",{loader:()=>a(()=>import("./2024-06-24-Solving the ParameterResolutionException in JUnit 5.html-qKhMk3Oh.js"),__vite__mapDeps([147,1])),meta:{d:17191872e5,l:"2024年6月24日",c:["Java","JUnit"],g:["JUnit 5","ParameterResolutionException"],e:`<hr>
<h1>解决JUnit 5中的ParameterResolutionException问题</h1>
<p>JUnit 5引入了一些强大的功能，包括对参数化测试的支持。编写参数化测试可以节省大量时间，在许多情况下，它们可以通过简单的注解组合来启用。</p>
<p>然而，<strong>配置不正确可能导致难以调试的异常，因为JUnit在后台管理了许多测试执行的方面</strong>。</p>
<p>其中一种异常是_ParameterResolutionException_：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>org.junit.jupiter.api.extension.ParameterResolutionException: No ParameterResolver registered for parameter ...
</code></pre></div>`,r:{minutes:4.73,words:1419},t:"解决JUnit 5中的ParameterResolutionException问题",y:"a"}}],["/posts/baeldung/2024-06-24/2024-06-24-Upload%20Multiple%20Files%20Using%20WebFlux.html",{loader:()=>a(()=>import("./2024-06-24-Upload Multiple Files Using WebFlux.html-GqFY7Csb.js"),__vite__mapDeps([148,1])),meta:{d:17191872e5,l:"2024年6月24日",c:["Spring WebFlux","文件上传"],g:["Spring WebFlux","文件上传","异步I/O","非阻塞"],e:`<hr>
<h1>Spring WebFlux 多文件上传指南</h1>
<h2>1. 概述</h2>
<p>Spring WebFlux 是一个响应式的 Web 框架，它提供了一个非阻塞事件循环来异步处理 I/O 操作。此外，它使用 <em>Mono</em> 和 <em>Flux</em> 反应式流发布者在订阅时发出数据。</p>
<p>这种响应式方法有助于应用程序在不分配大量资源的情况下处理大量请求和数据。</p>
<p>在本教程中，我们将学习如何通过 Spring WebFlux 逐步将多个文件上传到目录。此外，我们将把文件名映射到实体类，以便于检索。</p>
<h2>2. 项目设置</h2>`,r:{minutes:6.31,words:1893},t:"Spring WebFlux 多文件上传指南",y:"a"}}],["/posts/baeldung/2024-06-24/2024-06-24-Using%20Static%20Methods%20Instead%20of%20Deprecated%20JsonParser.html",{loader:()=>a(()=>import("./2024-06-24-Using Static Methods Instead of Deprecated JsonParser.html-DqILM5Pf.js"),__vite__mapDeps([149,1])),meta:{d:17191872e5,l:"2024年6月24日",c:["Java","JSON"],g:["Gson","JsonParser"],e:`
<p>高效地解析JSON是Java编程中数据操作和通信的最重要任务之一。Gson库提供了多功能的_JsonParser_类来简化转换过程。此外，值得注意的是这个类已经被弃用，消除了实例化的需求。相反，我们可以利用提供的静态方法来进行转换过程。</p>
<p>在本教程中，我们将深入探讨如何使用静态方法代替已弃用的_JsonParser_进行高效的Java JSON解析。</p>
<p>以下是使用已弃用的_JsonParser_解析JSON字符串的示例：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> jsonString <span class="token operator">=</span> <span class="token string">"{\\"name\\": \\"John\\", \\"age\\":30, \\"city\\":\\"New York\\"}"</span><span class="token punctuation">;</span>
<span class="token class-name">JsonObject</span> jsonObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAsJsonObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:2.47,words:740},t:"使用静态方法代替已弃用的JsonParser进行Java JSON解析",y:"a"}}],["/posts/baeldung/2024-06-24/2024-06-24-What%20Happens%20When%20the%20JVM%20Runs%20Out%20of%20Memory%20to%20Allocate%20During%20Runtime%20.html",{loader:()=>a(()=>import("./2024-06-24-What Happens When the JVM Runs Out of Memory to Allocate During Runtime .html-3SiuulGf.js"),__vite__mapDeps([150,1])),meta:{d:17192736e5,l:"2024年6月25日",c:["JVM","内存管理"],g:["OutOfMemoryError","堆大小"],e:`
<p>定义一个适当的JVM应用程序堆大小是关键步骤。这可能有助于我们的应用程序进行内存分配和处理高负载。然而，<strong>堆大小配置不当，无论是太小还是太大，都可能影响其性能。</strong></p>
<p>在本教程中，我们将了解_OutOfMemoryErrors_的原因及其与堆大小的联系。我们还将检查我们可以对这种错误做什么以及如何调查根本原因。</p>
<h2>2. -Xmx 和 -Xms</h2>
<p>**我们可以使用两个专用的JVM标志来控制堆分配。**第一个，-Xms，帮助我们设置堆的初始和最小大小。另一个，-Xmx，设置最大堆大小。还有其他的标志可以帮助更动态地分配，但总体上它们做类似的工作。</p>`,r:{minutes:6.74,words:2021},t:"JVM运行时内存耗尽会发生什么？",y:"a"}}],["/posts/baeldung/2024-06-24/2024-06-24-What%20Is%20the%20Error%20%20%20Non%20static%20method%20cannot%20be%20referenced%20from%20a%20static%20context%20%20.html",{loader:()=>a(()=>import("./2024-06-24-What Is the Error   Non static method cannot be referenced from a static context  .html-D3pZf9EY.js"),__vite__mapDeps([151,1])),meta:{d:17191872e5,l:"2024年6月24日",c:["Java","Programming"],g:["Java","Static Context","Non-Static Method"],e:`<hr>
<h1>Java中的错误：“非静态方法不能从静态上下文中引用”是什么？</h1>
<p>当我们使用Java时，经常会遇到需要更深入理解语言细节的问题。一个常见的难题是错误消息：“非静态方法...不能从静态上下文中引用。”这个错误对于初学者来说可能看起来很吓人，甚至可能会让经验丰富的程序员感到困惑。</p>
<p>在本教程中，我们将深入探讨这个错误背后的原因，并探索解决它的方法。</p>
<h2>2. 问题介绍</h2>
<p>像往常一样，让我们通过一个例子快速理解问题。假设我们有一个_ToolBox_类：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">ToolBox</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">String</span> str1<span class="token punctuation">,</span> <span class="token class-name">String</span> str2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> str1 <span class="token operator">+</span> str2<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">joinTwoStrings</span><span class="token punctuation">(</span><span class="token class-name">String</span> str1<span class="token punctuation">,</span> <span class="token class-name">String</span> str2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">concat</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;-- 编译错误</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:4.84,words:1452},t:"Java中的错误：“非静态方法不能从静态上下文中引用”是什么？",y:"a"}}],["/posts/baeldung/2024-06-25/2024-06-25-%20Query%20Definitions%20With%20SpEL%20Support%20in%20Spring%20Data%20JPA.html",{loader:()=>a(()=>import("./2024-06-25- Query Definitions With SpEL Support in Spring Data JPA.html-DkSlaiUk.js"),__vite__mapDeps([152,1])),meta:{d:17192736e5,l:"2024年6月25日",c:["Spring Data JPA","SpEL"],g:["Spring","JPA","Query","SpEL"],e:`
<p>SpEL 是 Spring 表达式语言（Spring Expression Language）的缩写，它是一个强大的工具，可以显著增强我们与 Spring 的交互，并在配置、属性设置和查询操作中提供额外的抽象。</p>
<p>在本教程中，我们将学习如何使用这个工具使我们的自定义查询更加动态，并在存储库层隐藏数据库特定的操作。我们将使用 <em>@Query</em> 注解，它允许我们使用 JPQL 或原生 SQL 来定制与数据库的交互。</p>
<h2>1. 概述</h2>
<h2>2. 访问参数</h2>
<h3>2.1. 按索引访问</h3>
<p>按索引访问参数不是最佳选择，因为它可能会给代码带来难以调试的问题。特别是当参数类型相同时。</p>`,r:{minutes:9.14,words:2741},t:"Spring Data JPA 中使用 SpEL 支持的查询定义 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-25/2024-06-25-BigDecimal.ZERO%20vs.%20new%20BigDecimal%200%20.html",{loader:()=>a(()=>import("./2024-06-25-BigDecimal.ZERO vs. new BigDecimal 0 .html-CfKPxhv2.js"),__vite__mapDeps([153,1])),meta:{d:171936e7,l:"2024年6月26日",c:["Java","BigDecimal"],g:["Java","BigDecimal","ZERO","性能"],e:`<hr>
<h1>BigDecimal.ZERO 与 new BigDecimal(0) | Baeldung</h1>
<p>当我们使用 BigDecimal 处理数值零时，我们通常面临两种类似的方法：使用 BigDecimal.ZERO 或者创建一个新的 BigDecimal 对象 new BigDecimal(0)。本文将探讨这两种方法之间微妙但重要的差异，并讨论何时选择其中一种。</p>
<p>首先，让我们快速了解如何比较两个 BigDecimal 对象。BigDecimal 类实现了 Comparable 接口，提供了使用 equals() 方法或 compareTo() 方法比较两个 BigDecimal 的灵活性。但是，重要的是要认识到这两种方法在比较两个 BigDecimal 实例时进行的是不同的比较。</p>`,r:{minutes:3.36,words:1009},t:"BigDecimal.ZERO 与 new BigDecimal(0) | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-25/2024-06-25-Calculate%20Months%20Between%20Two%20Dates%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-25-Calculate Months Between Two Dates in Java.html-Bg_0crG4.js"),__vite__mapDeps([154,1])),meta:{d:17192736e5,l:"2024年6月25日",c:["Java","日期时间计算"],g:["Java","日期","月份间隔"],e:`
<p>在Java中计算两个日期之间的月份间隔是一个常见的编程任务。Java标准库和第三方库提供了类和方法来计算两个日期之间的月份间隔。</p>
<p>本文教程将深入探讨如何使用传统的日期API、日期时间API和Joda-Time库来计算Java中两个日期之间的月份间隔。</p>
<h2>2. 日期值的影响</h2>
<p>在计算两个日期之间的月份间隔时，日期的天数值会影响结果。</p>
<p>默认情况下，Java标准库和Joda-Time库会考虑天数值。<strong>如果结束日期的天数值小于开始日期的天数值，则最后一个月份不被视为完整的月份，并且不包括在月份间隔中</strong>：</p>`,r:{minutes:6.6,words:1979},t:"Java中计算两个日期之间月份差异的教程",y:"a"}}],["/posts/baeldung/2024-06-25/2024-06-25-Callbacks%20in%20ListenableFuture%20and%20CompletableFuture.html",{loader:()=>a(()=>import("./2024-06-25-Callbacks in ListenableFuture and CompletableFuture.html-Di7xbfhW.js"),__vite__mapDeps([155,1])),meta:{d:171936e7,l:"2024年6月26日",c:["Java","Concurrency"],g:["ListenableFuture","CompletableFuture"],e:`<hr>
<h1>Java中ListenableFuture和CompletableFuture的回调机制</h1>
<h2>1. 概述</h2>
<p><em>ListenableFuture</em> 和 <em>CompletableFuture</em> 都是基于 Java 的 <em>Future</em> 接口构建的。前者是 Google 的 Guava 库的一部分，而后者则是 Java 8 的一部分。</p>
<p>众所周知，<strong><em>Future</em> 接口不提供回调功能</strong>。<strong><em>ListenableFuture</em> 和 <em>CompletableFuture</em> 都填补了这一空白</strong>。在本教程中，我们将学习如何使用它们进行回调机制。</p>`,r:{minutes:3.12,words:936},t:"Java中ListenableFuture和CompletableFuture的回调机制",y:"a"}}],["/posts/baeldung/2024-06-25/2024-06-25-Check%20If%20a%20Java%20StringBuilder%20Object%20Contains%20a%20Character.html",{loader:()=>a(()=>import("./2024-06-25-Check If a Java StringBuilder Object Contains a Character.html-D06hFPUJ.js"),__vite__mapDeps([156,1])),meta:{d:1719309054e3,c:["Java","StringBuilder"],g:["Java","StringBuilder","contains","indexOf"],e:`
<h2>1. 引言</h2>
<p>Java中的<strong>StringBuilder</strong>类提供了一种灵活且高效的方式来操作字符串。在某些情况下，我们需要检查一个<strong>StringBuilder</strong>对象是否包含特定的字符。</p>
<p><strong>在本教程中，我们将探索几种实现此任务的方法。</strong></p>
<h2>2. <strong>StringBuilder</strong>概览</h2>
<p>Java中的<strong>StringBuilder</strong>类是<strong>java.lang</strong>包的一部分，用于创建可变的字符序列。</p>`,r:{minutes:2.57,words:770},t:"检查Java StringBuilder对象是否包含特定字符",y:"a"}}],["/posts/baeldung/2024-06-25/2024-06-25-Comparing%20One%20String%20With%20Multiple%20Values%20in%20One%20Expression%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-25-Comparing One String With Multiple Values in One Expression in Java.html-C5e-VXtK.js"),__vite__mapDeps([157,1])),meta:{d:171936e7,l:"2024年6月26日",c:["Java","Programming"],g:["Java","String Comparison","Set","List","Stream"],e:`<hr>
<h1>在Java中使用单一表达式比较一个字符串与多个值</h1>
<p>在本教程中，我们将讨论使用单一表达式在一组字符串中查找一个字符串的各种方法。</p>
<p>假设我们有一个水果"Apple"和一组水果"Mango"、"Papaya"、"Apple"、"Pineapple"等。现在我们将探索各种方法，以查看字符串"Apple"是否在这些水果组中。</p>
<h3>2. 问题介绍</h3>
<p>在我们进入涵盖单一表达式解决方案的下一节之前，让我们看看使用_if_条件的实现方式：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">boolean</span> <span class="token function">compareWithMultipleStringsUsingIf</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">String</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:7.3,words:2191},t:"在Java中使用单一表达式比较一个字符串与多个值",y:"a"}}],["/posts/baeldung/2024-06-25/2024-06-25-Comparison%20of%20for%20Loops%20and%20Iterators.html",{loader:()=>a(()=>import("./2024-06-25-Comparison of for Loops and Iterators.html-C8FWqOXU.js"),__vite__mapDeps([158,1])),meta:{d:17192736e5,l:"2024年6月25日",c:["Java","编程"],g:["for循环","迭代器","性能"],e:'\n<p>_for_循环和_迭代器_都提供了遍历元素集合的机制。尽管两者都用于迭代集合，但它们在语法、功能和适用性上有所不同。</p>\n<p>在本教程中，我们将详细比较_for_循环和_迭代器_，突出它们在几个关键方面的主要区别。</p>\n<p>我们将使用以下字符串列表进行演示：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```` names <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">,</span> <span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token string">"Charlie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div>',r:{minutes:5.66,words:1699},t:"Java中for循环与迭代器的比较",y:"a"}}],["/posts/baeldung/2024-06-25/2024-06-25-Convert%20Byte%20Array%20to%20JSON%20and%20Vice%20Versa%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-25-Convert Byte Array to JSON and Vice Versa in Java.html-D5VYaokg.js"),__vite__mapDeps([159,1])),meta:{d:17192736e5,l:"2024年6月25日",c:["Java","JSON"],g:["byte array","JSON conversion"],e:`
<p>在大多数编程语言中，不同数据格式之间的操作和转换是常见的任务。其中一种场景是将数据在字节数组和JSON格式之间转换。</p>
<p>在本教程中，我们将探讨如何在Java中将字节数组转换为JSON格式，以及反向转换。</p>
<h3>2. 问题陈述</h3>
<p>我们的目标是将JSON字符串转换为字节数组，其中数组的每个元素代表字符串中相应字符的ASCII值。反之，我们还希望将ASCII值的字节数组转换回原始的JSON字符串。</p>
<p>假设我们有以下字节数组：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> byteArray <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span>
    <span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span>
    <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">115</span><span class="token punctuation">,</span> <span class="token number">83</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">117</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span>
    <span class="token number">114</span><span class="token punctuation">,</span> <span class="token number">117</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">104</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">115</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span>
    <span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">114</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span>
    <span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span>
    <span class="token number">114</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">115</span><span class="token punctuation">,</span> <span class="token number">115</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span>
    <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">83</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">118</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span>
    <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">122</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span>
    <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">34</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:3.45,words:1035},t:"Java中将字节数组转换为JSON以及反向转换",y:"a"}}],["/posts/baeldung/2024-06-25/2024-06-25-Convert%20Excel%20Files%20to%20PDF%20Using%20Java.html",{loader:()=>a(()=>import("./2024-06-25-Convert Excel Files to PDF Using Java.html-BtwM0gpg.js"),__vite__mapDeps([160,1])),meta:{d:1719341427e3,c:["Java","编程"],g:["Excel","PDF","转换"],e:`
<p>请注意，由于提供的网页内容不包含具体的日期、分类(category)和标签(tag)信息，我已根据网页标题和内容自行添加了合理的假设值。如果需要更准确的信息，请提供完整的网页内容或指定具体的日期、分类和标签。由于提供的网页内容不包含具体的日期、分类(category)和标签(tag)信息，我已根据网页标题和内容自行添加了合理的假设值。以下是翻译的标题和内容的开始部分：</p>
<hr>
<p>date: 2024-06-26
category:</p>
<ul>
<li>Java</li>
<li>编程
tag:</li>
<li>Excel</li>
<li>PDF</li>
<li>转换
head:</li>
<li>
<ul>
<li>meta</li>
<li>name: keywords
content: Java, Excel, PDF, 转换, 编程</li>
</ul>
</li>
</ul>`,r:{minutes:.85,words:256},t:"使用Java将Excel文件转换为PDF",y:"a"}}],["/posts/baeldung/2024-06-25/2024-06-25-Convert%20String%20to%20long%20or%20Long%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-25-Convert String to long or Long in Java.html-vqPtpqP1.js"),__vite__mapDeps([161,1])),meta:{d:17192736e5,l:"2024年6月25日",c:["Java","编程"],g:["String","Long","转换"],e:`
<p>在本教程中，我们将探讨如何将一个字符串转换为long基本类型或Long对象。</p>
<p>假设我们有一个字符串，其值反映了一个数字，这个数字刚好超出了有符号int的范围。我们以Integer.MAX_VALUE + 1为例，即2,147,483,648。</p>
<h3>2. 使用Long的构造函数</h3>
<p>给定我们的字符串，我们可以<strong>使用接受字符串作为参数的重载Long构造函数</strong>：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Long</span> l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Long</span><span class="token punctuation">(</span><span class="token string">"2147483648"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:3.35,words:1006},t:"Java中将字符串转换为long或Long类型",y:"a"}}],["/posts/baeldung/2024-06-25/2024-06-25-Convert%20a%20String%20to%20a%20List%20of%20Characters%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-25-Convert a String to a List of Characters in Java.html-DdTg9y6j.js"),__vite__mapDeps([162,1])),meta:{d:171936e7,l:"2024年6月26日",c:["Java","编程"],g:["Java字符串","字符串转字符列表"],e:`
<h2>1. 引言</h2>
<p>Java提供了多种操作字符串的方法。</p>
<p><strong>在本教程中，我们将探索一个常见的需求，即将字符串转换为字符列表。</strong></p>
<h2>2. 使用 toCharArray()</h2>
<p>toCharArray() 是将字符串转换为字符数组的直接方式。</p>
<p>让我们看看以下代码示例：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenString_whenUsingToCharArray_thenConvertToCharList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> charArray <span class="token operator">=</span> inputString<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">List</span>\`\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\`\` charList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> charArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        charList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">assertEquals</span><span class="token punctuation">(</span>inputString<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> charList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.79,words:837},t:"Java中将字符串转换为字符列表的方法",y:"a"}}],["/posts/baeldung/2024-06-25/2024-06-25-Convert%20an%20OutputStream%20to%20a%20Byte%20Array%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-25-Convert an OutputStream to a Byte Array in Java.html-BsjkGXOs.js"),__vite__mapDeps([163,1])),meta:{d:171936e7,l:"2024年6月26日",c:["Java","IO"],g:["OutputStream","Byte Array"],e:`
<h2><strong>1. 引言</strong></h2>
<p>处理流是常见的任务，尤其是在进行输入和输出操作时。偶尔，我们需要将<code>OutputStream</code>转换为字节数组。这在网络编程、文件处理或数据操作等多种场景中都非常有用。</p>
<p>在本教程中，我们将探讨两种实现这种转换的方法。</p>
<h2><strong>2. 使用Apache Commons IO库中的FileUtils</strong></h2>
<p>Apache Commons IO库提供了<code>FileUtils</code>类，其中包含了<code>readFileToByteArray()</code>方法，可以间接地将<code>FileOutputStream</code>转换为字节数组。这是通过首先写入文件，然后从文件系统中读取生成的字节来实现的。</p>`,r:{minutes:3.77,words:1130},t:"在Java中将OutputStream转换为字节数组",y:"a"}}],["/posts/baeldung/2024-06-25/2024-06-25-Detect%20the%20Last%20Iteration%20in%20for%20Loops%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-25-Detect the Last Iteration in for Loops in Java.html-ClB5lqR-.js"),__vite__mapDeps([164,1])),meta:{d:171936e7,l:"2024年6月26日",c:["Java","编程"],g:["for循环","迭代器","Java"],e:`
<h2>1. 概述</h2>
<p>for-each循环是一个在迭代List时优雅且简单的工具。有时，我们需要根据当前迭代是否是最后一次来执行特定操作或做出决策。</p>
<p>在本教程中，我们将讨论这种情况，并探索在for循环中确定当前迭代是否是最后一次的不同方法。</p>
<h2>2. 问题介绍</h2>
<p>首先，让我们创建一个电影标题的List作为我们的输入示例：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>\`\` <span class="token constant">MOVIES</span> <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>
  <span class="token string">"Titanic"</span><span class="token punctuation">,</span>
  <span class="token string">"The Deer Hunter"</span><span class="token punctuation">,</span>
  <span class="token string">"Lord of the Rings"</span><span class="token punctuation">,</span>
  <span class="token string">"One Flew Over the Cuckoo's Nest"</span><span class="token punctuation">,</span>
  <span class="token string">"No Country For Old Men"</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:3.68,words:1105},t:"Java中检测for循环的最后一次迭代",y:"a"}}],["/posts/baeldung/2024-06-25/2024-06-25-Difference%20Between%201L%20and%20%20long%20%201.html",{loader:()=>a(()=>import("./2024-06-25-Difference Between 1L and  long  1.html-DSBkdktL.js"),__vite__mapDeps([165,1])),meta:{d:171929461e4,c:["REST with Spring Boot","Learn Spring Security"],g:["Persistence","REST","Security"],e:`
<p>date: 2024-06-25
category:</p>
<ul>
<li>REST with Spring Boot</li>
<li>Learn Spring Security
tag:</li>
<li>Persistence</li>
<li>REST</li>
<li>Security
head:</li>
<li>
<ul>
<li>meta</li>
<li>name: keywords
content: Java, Long Literal, Cast</li>
</ul>
</li>
</ul>
<hr>
<h1>Java 中的 1L 与 (long) 1 的区别</h1>`,r:{minutes:.25,words:76},t:"Java 中的 1L 与 (long) 1 的区别---",y:"a"}}],["/posts/baeldung/2024-06-25/2024-06-25-Difference%20Between%20execute%20%20%20and%20submit%20%20%20in%20Executor%20Service.html",{loader:()=>a(()=>import("./2024-06-25-Difference Between execute   and submit   in Executor Service.html-c-Qvf4jd.js"),__vite__mapDeps([166,1])),meta:{d:17192736e5,l:"2024年6月25日",c:["Java","Concurrency"],g:["ExecutorService","submit()","execute()"],e:`
<p>多线程和并行处理是现代应用开发中的关键概念。在Java中，_Executor_框架提供了一种有效管理和控制并发任务执行的方式。_ExecutorService_接口是这个框架的核心，它提供了两种常用的方法来提交需要执行的任务：_submit()<em>和_execute()</em>。</p>
<p>在本文中，我们将探讨这两种方法之间的主要区别。我们将通过一个简单的示例来使用_submit()<em>和_execute()</em>，模拟一个计算数组中数字总和的任务，使用线程池。</p>
<h2>2. 使用_ExecutorService.submit( )_</h2>
<p>让我们首先从_submit()_方法开始，它广泛用于_ExecutorService_接口。它允许我们提交任务以供执行，并返回一个表示计算结果的_Future_对象。</p>`,r:{minutes:4.3,words:1290},t:"Java中ExecutorService的submit()和execute()方法的区别",y:"a"}}],["/posts/baeldung/2024-06-25/2024-06-25-Dijkstra%20s%20Algorithm%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-06-25-Dijkstra s Algorithm in Kotlin.html-DmUAwwHw.js"),__vite__mapDeps([167,1])),meta:{d:17192736e5,l:"2024年6月25日",c:["Kotlin","Algorithms"],g:["Dijkstra’s Algorithm","Graphs"],e:`<hr>
<h1>Kotlin中实现迪杰斯特拉算法</h1>
<p>在本教程中，我们将学习如何在Kotlin中实现迪杰斯特拉算法。它是一种在加权图中找出从起始节点到所有其他节点的最短路径的解决方案。与适用于无权图的广度优先搜索（BFS）不同，迪杰斯特拉算法在有加权边的环境中表现出色，根据累积权重或距离优化路径。本文深入探讨了在Kotlin中实现迪杰斯特拉算法，展示了该语言简洁的语法和强大的功能。</p>
<h3>2. 理解迪杰斯特拉算法</h3>
<p>迪杰斯特拉算法擅长在有加权边的图中找到从起始节点到所有其他节点的最短路径。它将起始节点的距离初始化为零，其他节点的距离初始化为无穷大，迭代更新距离，并按距离的升序处理节点。</p>`,r:{minutes:5.78,words:1733},t:"Kotlin中实现迪杰斯特拉算法",y:"a"}}],["/posts/baeldung/2024-06-25/2024-06-25-Find%20Files%20by%20Extension%20in%20Specified%20Directory%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-25-Find Files by Extension in Specified Directory in Java.html-D-E-myNd.js"),__vite__mapDeps([168,1])),meta:{d:171936e7,l:"2024年6月26日",c:["Java","文件处理"],g:["Java","文件搜索","文件遍历"],e:`
<h2>1. 引言</h2>
<p>在本快速教程中，我们将看到使用核心Java和外部库来搜索目录（包括子目录）中匹配特定扩展名的文件的一些替代方案。我们将从简单的数组和列表到流和其他更新的方法。</p>
<h2>2. 设置我们的过滤器</h2>
<p><strong>由于我们需要按扩展名过滤文件，让我们从简单的_Predicate_实现开始。</strong> 我们需要一点输入清理，以确保我们匹配大多数用例，比如接受以点开头或不以点开头的扩展名：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MatchExtensionPredicate</span> <span class="token keyword">implements</span> <span class="token class-name">Predicate</span>\`\`\`\`\`\`\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Path</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\`\`\`\`\`\`\` <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> extension<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MatchExtensionPredicate</span><span class="token punctuation">(</span><span class="token class-name">String</span> extension<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>extension<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            extension <span class="token operator">=</span> <span class="token string">"."</span> <span class="token operator">+</span> extension<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>extension <span class="token operator">=</span> extension<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Path</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>path <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> path<span class="token punctuation">.</span><span class="token function">getFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span>extension<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:5.14,words:1543},t:"在Java中指定目录查找特定扩展名的文件",y:"a"}}],["/posts/baeldung/2024-06-25/2024-06-25-Find%20Missing%20Number%20From%20a%20Given%20Array%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-25-Find Missing Number From a Given Array in Java.html-BF0dQFhs.js"),__vite__mapDeps([169,1])),meta:{d:17192736e5,l:"2024年6月25日",c:["Java","数组"],g:["数组","缺失数字","Java"],e:`<hr>
<h1>在Java中从给定数组中找到缺失的数字</h1>
<h2>1. 概述</h2>
<p>在Java中，从数组中找出指定范围内的缺失数字在多种场景下都非常有用，例如数据验证、确保完整性或识别数据集中的空白。</p>
<p>在本教程中，我们将<strong>学习多种方法来从整数范围 <em>[1-N]</em> 的数组中找出单个缺失的数字</strong>。</p>
<h2>2. 理解场景</h2>
<p>让我们想象我们有一个包含整数范围 <em>[1-9]</em>（包括两端）的 <em>numbers</em> 数组：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>int[] numbers = new int[] { 1, 4, 5, 2, 7, 8, 6, 9 };
</code></pre></div>`,r:{minutes:4.74,words:1421},t:"在Java中从给定数组中找到缺失的数字",y:"a"}}],["/posts/baeldung/2024-06-25/2024-06-25-Fixing%20Hibernate%20QueryException%20%20Named%20Parameter%20Not%20Bound.html",{loader:()=>a(()=>import("./2024-06-25-Fixing Hibernate QueryException  Named Parameter Not Bound.html-CFf_D4yC.js"),__vite__mapDeps([170,1])),meta:{d:17192736e5,l:"2024年6月25日",c:["Hibernate","QueryException"],g:["QueryException","Named Parameter"],e:`
<h2>1. 概述</h2>
<p>在这篇简短的教程中，我们将阐明如何解决Hibernate查询异常：“命名参数未绑定”。</p>
<p>首先，我们将解释异常的主要原因。然后，我们将演示如何重现它，最后，我们将学习如何修复它。</p>
<h2>2. 理解异常</h2>
<p>在跳转到解决方案之前，让我们尝试理解异常及其堆栈跟踪的含义。</p>
<p>简而言之，Hibernate抛出_QueryException_来表示在将Hibernate查询转换为SQL时由于无效语法而出现错误。因此，堆栈跟踪中的“命名参数未绑定”表示Hibernate无法绑定在特定查询中指定的命名参数。</p>
<p>通常，命名参数以冒号(:)开头，后面跟着实际值的占位符，该值需要在执行查询之前设置：</p>`,r:{minutes:2.33,words:698},t:"解决Hibernate查询异常：未绑定的命名参数",y:"a"}}],["/posts/baeldung/2024-06-25/2024-06-25-Format%20LocalDate%20to%20ISO%208601%20With%20T%20and%20Z.html",{loader:()=>a(()=>import("./2024-06-25-Format LocalDate to ISO 8601 With T and Z.html-B6NY9NmS.js"),__vite__mapDeps([171,1])),meta:{d:171936e7,l:"2024年6月26日",c:["Java","ISO 8601"],g:["LocalDate","DateTimeFormatter"],e:`
<p>处理日期和时间的标准格式对于处理涉及不同时区的应用程序或在系统之间交换数据至关重要。</p>
<p>在本教程中，我们将探讨将_LocalDate_格式化为ISO 8601格式的多种技术。这种格式包括‘<em>T</em>’分隔符和表示协调世界时（UTC）的‘<em>Z</em>’。</p>
<p>_LocalDate_是Java 8中引入的现代日期和时间API的一部分，位于_java.time_包下。它是不可变的，这意味着一旦创建实例，其值就不能更改。它表示一个不考虑时间或时区的日期，专注于月份、年份和月份中的天。_LocalDate_便于方便地操作和与日期信息交互。</p>
<p>ISO 8601是表示日期和时间的国际标准，格式清晰、明确且被普遍接受。它为表示日期和时间提供了标准化的方法，这对于广泛的应用程序至关重要。这包括数据交换、国际通信和计算机系统。</p>`,r:{minutes:5.53,words:1659},t:"Java中将LocalDate格式化为带T和Z的ISO 8601格式",y:"a"}}],["/posts/baeldung/2024-06-25/2024-06-25-Get%20Client%20Information%20From%20HTTP%20Request%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-25-Get Client Information From HTTP Request in Java.html-DCF_D5tq.js"),__vite__mapDeps([172,1])),meta:{d:1719312693e3,e:`<p>根据您提供的网页内容，以下是翻译结果：</p>
<hr>
<p>date: 2024-06-25
category:</p>
<ul>
<li>Java</li>
<li>Web Development
tag:</li>
<li>HTTP Request</li>
<li>Servlet</li>
<li>HttpServletRequest
head:</li>
<li>
<ul>
<li>meta</li>
<li>name: keywords
content: Java, HTTP, Servlet, HttpServletRequest, User-Agent, Web Development</li>
</ul>
</li>
</ul>`,r:{minutes:4.03,words:1208},t:"在Java中从HTTP请求获取客户端信息",y:"a"}}],["/posts/baeldung/2024-06-25/2024-06-25-Getting%20All%20Field%20Names%20of%20a%20Class%20Using%20Kotlin%20Reflection.html",{loader:()=>a(()=>import("./2024-06-25-Getting All Field Names of a Class Using Kotlin Reflection.html-CN1BX3A0.js"),__vite__mapDeps([173,1])),meta:{d:171936e7,l:"2024年6月26日",c:["Kotlin","Reflection"],g:["Kotlin","Reflection","Field Names"],e:'\n<p>在 Kotlin 中，反射允许我们在运行时动态地检查、操作和与类、字段和方法交互。作为开发者，我们有时需要动态地检索类的字段名称。</p>\n<p>在本教程中，我们将探讨使用 Kotlin 反射获取类所有字段名称的各种技术。</p>\n<h2>1. 使用 <em>members</em> 属性</h2>\n<p>我们获取类所有字段名称的第一种方法涉及使用 <em>KClass</em> 的 <em>members</em> 属性。这返回类的所有成员的列表，包括字段和方法。<strong>我们可以过滤这些成员以仅提取属性</strong>：</p>\n<div class="language-kotlin" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">getAllFieldNamesUsingMembersProperty</span><span class="token punctuation">(</span>clazz<span class="token operator">:</span> KClass`````<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span>`````<span class="token punctuation">)</span><span class="token operator">:</span> List````<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span>```` <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> clazz<span class="token punctuation">.</span>members\n      <span class="token punctuation">.</span><span class="token function">filter</span> <span class="token punctuation">{</span> it <span class="token keyword">is</span> KProperty`````<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span>````` <span class="token punctuation">}</span>\n      <span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span>name <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:4.94,words:1481},t:"使用 Kotlin 反射获取类的所有字段名",y:"a"}}],["/posts/baeldung/2024-06-25/2024-06-25-How%20to%20Get%20Last%20Record%20in%20Spring%20Data%20JPA.html",{loader:()=>a(()=>import("./2024-06-25-How to Get Last Record in Spring Data JPA.html-1N6OYEir.js"),__vite__mapDeps([174,1])),meta:{d:171936e7,l:"2024年6月26日",c:["Spring Data JPA","JPA"],g:["Spring","JPA","Hibernate"],e:`
<p>在这个简短的教程中，我们将探索在Spring Data JPA中获取最后一条记录的不同方法。首先，我们将看看如何使用派生查询方法来实现。然后，我们将探索如何使用<code>@Query</code>注解来达到同样的目的。</p>
<h2>2. 设置</h2>
<p>**首先，让我们创建并初始化我们想要查询的表。**让我们从创建一个<code>Post</code>实体类开始：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Post</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Id</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">LocalDate</span> publicationDate<span class="token punctuation">;</span>

    <span class="token comment">// 标准的getter和setter</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:4,words:1200},t:"如何在Spring Data JPA中获取最后一条记录",y:"a"}}],["/posts/baeldung/2024-06-25/2024-06-25-How%20to%20Write%20Strings%20to%20OutputStream%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-25-How to Write Strings to OutputStream in Java.html-BiFre8yV.js"),__vite__mapDeps([175,1])),meta:{d:17192736e5,l:"2024年6月25日",c:["Java","OutputStream"],g:["Java","OutputStream","StringWriter"],e:`<hr>
<h1>如何在Java中将字符串写入OutputStream</h1>
<h2>1. 概述</h2>
<p>我们经常在需要将数据传输到外部目的地，如文件和网络时使用_OutputStream_。数据可以是二进制格式或字符串格式。<strong>我们使用_OutputStream_，这是一个字节流，来处理二进制数据，并使用_Writer_，这是一个字符流，来处理字符串数据。</strong></p>
<p>然而，在某些情况下，由于选定的API的限制，我们必须将字符串写入_OutputStream_。在某些情况下，API可能只提供_OutputStream_而不是_Writer_。在本教程中，我们将探讨在这种情况下将字符串写入_OutputStream_的不同方法。</p>`,r:{minutes:3.39,words:1017},t:"如何在Java中将字符串写入OutputStream",y:"a"}}],["/posts/baeldung/2024-06-25/2024-06-25-Java%20System.currentTimeMillis%20%20%20Vs.%20System.nanoTime%20%20.html",{loader:()=>a(()=>import("./2024-06-25-Java System.currentTimeMillis   Vs. System.nanoTime  .html-CajDW3YY.js"),__vite__mapDeps([176,1])),meta:{d:17192736e5,l:"2024年6月25日",c:["Java","性能"],g:["System.currentTimeMillis()","System.nanoTime()"],e:`
<h2>1. 引言</h2>
<p>Java 中用于时间测量的两个常用方法是 <code>System.currentTimeMillis()</code> 和 <code>System.nanoTime()</code>。尽管这两种方法都提供了测量时间的方式，它们服务于不同的目的，并且具有不同的特点。</p>
<p><strong>在本教程中，我们将探索这两种方法之间的区别，并了解何时使用每种方法。</strong></p>
<h2>2. <code>System.currentTimeMillis()</code> 方法</h2>
<p><code>currentTimeMillis()</code> 方法返回自1970年1月1日00:00:00 UTC起的当前时间（以毫秒为单位）。此外，它基于系统时钟，适用于测量绝对时间，例如当前日期和时间。</p>`,r:{minutes:2.74,words:822},t:"Java System.currentTimeMillis() 与 System.nanoTime() 比较 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-25/2024-06-25-Java%20s%20String.length%20%20%20and%20String.getBytes%20%20.length.html",{loader:()=>a(()=>import("./2024-06-25-Java s String.length   and String.getBytes  .length.html-D21gR9NX.js"),__vite__mapDeps([177,1])),meta:{d:17192736e5,l:"2024年6月25日",c:["Java","字符串"],g:["String.length()","String.getBytes().length"],e:`
<p>当我们在Java中工作时，操作字符串是一项基本技能。因此，理解与字符串相关的方法是编写高效且无误代码的关键。</p>
<p>两个常用的方法，String.length()和String.getBytes().length，乍一看可能看起来相似，但它们服务于不同的目的。</p>
<p>在本教程中，我们将了解这两种方法并探讨它们之间的区别。此外，我们还将讨论何时使用每一种方法。</p>
<h3>String.length()和String.getBytes().length的初步了解</h3>
<p>正如方法名所暗示的，String.length()方法返回字符串的长度。另一方面，String.getBytes()从给定的字符串中获取默认编码的字节数组。然后，String.getBytes().length报告数组的长度。</p>`,r:{minutes:5.7,words:1710},t:"Java中String.length()与String.getBytes().length的区别",y:"a"}}],["/posts/baeldung/2024-06-25/2024-06-25-Lazy%20Field%20Initialization%20with%20Lambdas.html",{loader:()=>a(()=>import("./2024-06-25-Lazy Field Initialization with Lambdas.html-CcRe4Ju4.js"),__vite__mapDeps([178,1])),meta:{d:171936e7,l:"2024年6月26日",c:["Java","Programming"],g:["Java","Lambda","Lazy Initialization"],e:`<hr>
<h1>Java中使用Lambda表达式进行懒加载字段初始化</h1>
<ol>
<li>引言</li>
</ol>
<p>在处理需要执行昂贵或慢速方法的资源时，例如数据库查询或REST调用，我们通常会使用本地缓存或私有字段。一般来说，lambda函数允许我们使用方法作为参数，并推迟方法的执行或完全省略它。</p>
<p>在本教程中，我们将展示使用lambda函数以不同方式懒加载字段初始化。</p>
<ol start="2">
<li>Lambda替代</li>
</ol>
<p>让我们实现我们自己的解决方案的第一个版本。作为第一次迭代，我们将提供_LambdaSupplier_类：</p>`,r:{minutes:4.05,words:1214},t:"Java中使用Lambda表达式进行懒加载字段初始化",y:"a"}}],["/posts/baeldung/2024-06-25/2024-06-25-Print%20a%20Double%20Value%20Without%20Scientific%20Notation%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-25-Print a Double Value Without Scientific Notation in Java.html-BJHpP-Ik.js"),__vite__mapDeps([179,1])),meta:{d:17192736e5,l:"2024年6月25日",c:["Java","Programming"],g:["double","scientific notation","formatting"],e:`
<p>在我们的日常工作中，我们经常面临格式化双精度值的挑战。其中之一可能是打印双精度值时避免使用科学记数法。尽管这种方法有助于我们更紧凑地表示大和小的值，但在某些情况下，默认的科学记数法可能不是最实用的选择。在这种情况下，可能需要考虑替代方法以获得更合适的表示。</p>
<p>在本教程中，我们将探索在Java中打印双精度值时不使用科学记数法的各种方法。</p>
<p>科学记数法由两个组成部分：系数和指数。通常，介于1和10之间的小数是系数，而指数表示系统将系数乘以10的幂。</p>
<p>在Java中，科学记数法通常使用“e”表示法表示，其中“e”代表指数：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">double</span> largeNumber <span class="token operator">=</span> <span class="token number">256450000d</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Large Number: "</span> <span class="token operator">+</span> largeNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">double</span> smallNumber <span class="token operator">=</span> <span class="token number">0.0000046d</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Small Number: "</span> <span class="token operator">+</span> smallNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:4.97,words:1490},t:"在Java中打印双精度值时不使用科学记数法",y:"a"}}],["/posts/baeldung/2024-06-25/2024-06-25-Reactor%20WebFlux%20vs%20Virtual%20Threads.html",{loader:()=>a(()=>import("./2024-06-25-Reactor WebFlux vs Virtual Threads.html-BA8Q7Rim.js"),__vite__mapDeps([180,1])),meta:{d:171936e7,l:"2024年6月26日",c:["Java","WebFlux"],g:["Reactor","Virtual Threads"],e:`
<p>在本教程中，我们将比较 Java 19 的虚拟线程与 Reactor 项目的 WebFlux。我们将首先回顾每种方法的基本工作原理，然后分析它们的优势和劣势。</p>
<p>我们将从探索响应式框架的优势开始，并看看为什么 WebFlux 仍然具有价值。之后，我们将讨论每个请求一个线程的方法，并强调虚拟线程可能是更好选择的场景。</p>
<h2>2. 代码示例</h2>
<p>在本文的代码示例中，我们假设我们正在开发一个电子商务应用程序的后端。我们将专注于负责计算和发布添加到购物车中的商品价格的函数：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">ProductService</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">PRODUCT_ADDED_TO_CART_TOPIC</span> <span class="token operator">=</span> <span class="token string">"product-added-to-cart"</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ProductRepository</span> repository<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DiscountService</span> discountService<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">KafkaTemplate</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ProductAddedToCartEvent</span><span class="token punctuation">&gt;</span></span>\` kafkaTemplate<span class="token punctuation">;</span>

    <span class="token comment">// 构造函数</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addProductToCart</span><span class="token punctuation">(</span><span class="token class-name">String</span> productId<span class="token punctuation">,</span> <span class="token class-name">String</span> cartId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Product</span> product <span class="token operator">=</span> repository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>productId<span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"not found!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Price</span> price <span class="token operator">=</span> product<span class="token punctuation">.</span><span class="token function">basePrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>product<span class="token punctuation">.</span><span class="token function">category</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEligibleForDiscount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">BigDecimal</span> discount <span class="token operator">=</span> discountService<span class="token punctuation">.</span><span class="token function">discountForProduct</span><span class="token punctuation">(</span>productId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            price<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>price<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>discount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">var</span> event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProductAddedToCartEvent</span><span class="token punctuation">(</span>productId<span class="token punctuation">,</span> price<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> price<span class="token punctuation">.</span><span class="token function">getCurrency</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cartId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        kafkaTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">PRODUCT_ADDED_TO_CART_TOPIC</span><span class="token punctuation">,</span> cartId<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:6.4,words:1920},t:"Reactor WebFlux 与虚拟线程 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-25/2024-06-25-Read%20a%20File%20and%20Split%20It%20Into%20Multiple%20Files%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-25-Read a File and Split It Into Multiple Files in Java.html-4BlDtnUF.js"),__vite__mapDeps([181,1])),meta:{d:17192736e5,l:"2024年6月25日",c:["Java","文件处理"],g:["Java","文件分割"],e:`
<p>在本教程中，我们将学习如何在Java中拆分大文件。首先，我们将比较将文件完整加载到内存中与使用流的方式读取文件。之后，我们将学习基于文件大小和数量来拆分文件。</p>
<h2>2. 内存中读取文件与流式读取文件</h2>
<p>当我们将文件完整加载到内存中时，JVM会将所有行保留在内存中。这对于小文件是一个很好的选择。然而，对于大文件来说，这经常会导致<code>OutOfMemoryException</code>。</p>
<p>流式读取文件是另一种读取方式，并且有很多方法可以流式读取大文件。<strong>由于整个文件并不在内存中，它消耗的内存更少，并且可以很好地处理大文件而不抛出异常。</strong></p>`,r:{minutes:4.11,words:1232},t:"Java中读取文件并将其拆分为多个文件",y:"a"}}],["/posts/baeldung/2024-06-25/2024-06-25-Return%20Map%20Instead%20of%20List%20in%20Spring%20Data%20JPA.html",{loader:()=>a(()=>import("./2024-06-25-Return Map Instead of List in Spring Data JPA.html-DSc9mH0I.js"),__vite__mapDeps([182,1])),meta:{d:17192736e5,l:"2024年6月25日",c:["Spring Data JPA","Java"],g:["Spring","JPA","Repository"],e:`
<p>Spring JPA提供了一个非常灵活且方便的API来与数据库交互。然而，有时我们需要自定义它或为返回的集合添加更多功能。</p>
<p>使用Map作为JPA仓库方法的返回类型可能有助于创建服务和数据库之间更直接的交互。<strong>不幸的是，Spring不允许这种转换自动发生。</strong> 在本教程中，我们将检查如何克服这个问题，并学习一些使仓库更具功能性的有趣技术。</p>
<h3>2. 手动实现</h3>
<p>当框架不提供某些功能时，最明显的方法是我们自己实现。在这种情况下，JPA允许我们从头开始实现仓库，跳过整个生成过程，或使用默认方法以获得两全其美的结果。</p>
`,r:{minutes:4.24,words:1272},t:"在Spring Data JPA中返回Map而不是List",y:"a"}}],["/posts/baeldung/2024-06-25/2024-06-25-Rotating%20a%20Java%20String%20By%20n%20Characters.html",{loader:()=>a(()=>import("./2024-06-25-Rotating a Java String By n Characters.html-Bb08tEj1.js"),__vite__mapDeps([183,1])),meta:{d:17192736e5,l:"2024年6月25日",c:["Java","编程"],g:["字符串操作","字符串旋转"],e:`
<p>在我们的日常Java编程中，字符串通常是我们必须处理的基本对象。有时，我们需要通过n个字符来旋转给定的字符串。旋转字符串涉及以循环方式移动其字符，创造出动态且视觉上吸引人的效果。</p>
<p>在本教程中，我们将探讨解决字符串旋转问题的几种不同方法。</p>
<h3>2.1. 一个例子</h3>
<p>假设我们有一个字符串对象：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>String STRING = "abcdefg";
</code></pre></div>`,r:{minutes:6.59,words:1977},t:"Java中通过n个字符旋转字符串",y:"a"}}],["/posts/baeldung/2024-06-25/2024-06-25-Sending%20Data%20to%20a%20Specific%20Partition%20in%20Kafka.html",{loader:()=>a(()=>import("./2024-06-25-Sending Data to a Specific Partition in Kafka.html-CSGwCepz.js"),__vite__mapDeps([184,1])),meta:{d:17192736e5,l:"2024年6月25日",c:["Kafka","分区"],g:["分布式系统","消息队列"],e:`
<h2>1. 引言</h2>
<p>Apache Kafka是一个分布式流处理平台，擅长处理大规模的实时数据流。Kafka将数据组织成主题(topic)，并将主题进一步划分为分区(partition)。<strong>每个分区充当一个独立的通道，实现并行处理和容错。</strong></p>
<p>本教程深入探讨了在Kafka中将数据发送到特定分区的技术。我们将探索这种方法的好处、实现方式以及潜在的挑战。</p>
<h2>2. Kafka分区的理解</h2>
<p>现在，让我们探索Kafka分区的基本概念。</p>
<h3>2.1 Kafka分区是什么</h3>
<p>当生产者将消息发送到Kafka主题时，Kafka使用指定的分区策略将这些消息组织成分区。分区是表示消息线性有序序列的基本单元。一旦消息被生产，它将根据所选的分区策略被分配到特定的分区。<strong>随后，该消息被追加到该分区的日志末尾。</strong></p>`,r:{minutes:6.71,words:2014},t:"Apache Kafka中将数据发送到特定分区的技巧",y:"a"}}],["/posts/baeldung/2024-06-25/2024-06-25-Sorting%20One%20List%20Based%20on%20Another%20List%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-25-Sorting One List Based on Another List in Java.html-CslXiWCH.js"),__vite__mapDeps([185,1])),meta:{d:17192736e5,l:"2024年6月25日",c:["Java","编程技巧"],g:["Java","列表排序"],e:'\n<p>在Java中，根据另一个列表的顺序对列表进行排序是一项常见任务，存在多种方法可以实现这一点。</p>\n<p>在本教程中，我们将看到Java中根据另一个列表对列表进行排序的不同方法。</p>\n<h2>2. 示例</h2>\n<p>假设我们有一个产品列表<code>productList</code>和另一个列表<code>shoppingCart</code>，后者代表用户的购物车。<code>shoppingCart</code>包含各种产品ID，我们需要按照它们在购物车中出现的顺序显示产品：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span>````````````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````````````````````````````````````` productList <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"Burger"</span><span class="token punctuation">,</span> <span class="token string">"Coke"</span><span class="token punctuation">,</span> <span class="token string">"Fries"</span><span class="token punctuation">,</span> <span class="token string">"Pizza"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">List</span>````````````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````````````````````````````````````` shoppingCart <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"Pizza"</span><span class="token punctuation">,</span> <span class="token string">"Burger"</span><span class="token punctuation">,</span> <span class="token string">"Fries"</span><span class="token punctuation">,</span> <span class="token string">"Coke"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div>',r:{minutes:5.28,words:1585},t:"Java中根据另一个列表排序列表的多种方法",y:"a"}}],["/posts/baeldung/2024-06-25/2024-06-25-UTF%208%20Validation%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-25-UTF 8 Validation in Java.html-BxbLC7HB.js"),__vite__mapDeps([186,1])),meta:{d:17192736e5,l:"2024年6月25日",c:["Java","UTF-8"],g:["UTF-8","编码","验证"],e:`
<h2>1. 概述</h2>
<p>在数据传输中，我们经常需要处理字节数据。如果数据是编码后的字符串而不是二进制数据，我们通常会使用Unicode编码。Unicode转换格式-8（UTF-8）是一种可变长度的编码方式，可以编码所有可能的Unicode字符。</p>
<p>在本教程中，我们将探讨UTF-8编码字节和字符串之间的转换。之后，我们将深入探讨在Java中对字节数据进行UTF-8验证的关键方面。</p>
<h2>2. UTF-8转换</h2>
<p>在我们进入验证部分之前，让我们回顾一下如何将字符串转换为UTF-8编码的字节数组，反之亦然。</p>
<p><strong>我们可以通过调用字符串的目标编码的_getBytes()_方法，将字符串转换为字节数组：</strong></p>`,r:{minutes:3.94,words:1183},t:"Java中的UTF-8编码验证",y:"a"}}],["/posts/baeldung/2024-06-25/2024-06-25-What%20Does%20It%20Mean%20to%20Hydrate%20an%20Object%20.html",{loader:()=>a(()=>import("./2024-06-25-What Does It Mean to Hydrate an Object .html-vhBByzxn.js"),__vite__mapDeps([187,1])),meta:{d:171936e7,l:"2024年6月26日",c:["Programming","Java"],g:["Object Hydration","Lazy Initialization","ORM Frameworks"],e:`
<h2>1. 引言</h2>
<p>在本教程中，我们将讨论在编程上下文中“水合化”一词的含义，并深入探讨水合化一个Java对象意味着什么。</p>
<h2>2. 对象水合化</h2>
<h3>2.1. 延迟初始化</h3>
<p>延迟加载或延迟初始化是软件应用程序中常用的模式。在Java中，对象是一个使用_new_关键字创建的类的实例。对象是程序的构建块，对象通过相互交互来实现所需的功能。</p>
<p>对象通常旨在表示面向对象编程范式中的现实世界实体，因此，对象具有多个相关属性。<strong>对象初始化指的是用真实数据填充对象属性的过程。</strong> 这通常是通过调用类构造函数并将数据作为参数传递来完成的。<strong>初始化也可以从数据源如网络、数据库或文件系统进行。</strong></p>`,r:{minutes:5.38,words:1615},t:"什么是对象水合化？ | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-25/2024-06-25-When%20to%20Use%20the%20getReferenceById%20%20%20and%20findById%20%20%20Methods%20in%20Spring%20Data%20JPA.html",{loader:()=>a(()=>import("./2024-06-25-When to Use the getReferenceById   and findById   Methods in Spring Data JPA.html-BQHdQxQm.js"),__vite__mapDeps([188,1])),meta:{d:17036352e5,l:"2023年12月27日",c:["Spring Data JPA","CRUD"],g:["getReferenceById","findById"],e:`
<p><em>JpaRepository</em> 提供了基本的CRUD操作方法。然而，其中一些方法并不那么直接明了，有时很难确定哪种方法最适合给定的情况。</p>
<p><strong><em>getReferenceById(ID)</em> 和 <em>findById(ID)</em> 是经常造成混淆的方法。</strong> 这些方法是 <em>getOne(ID)</em>, findOne(ID), <em>getById(ID)</em> 的新API名称。</p>
<p>在本教程中，我们将学习它们之间的区别，并找出每种方法可能更适合的情况。</p>
<p>让我们从这两种方法中最简单的一个开始。这个方法做了它所说的事情，通常开发者对它没有任何问题。它简单地根据特定的ID在仓库中找到一个实体：</p>`,r:{minutes:7.85,words:2355},t:"在Spring Data JPA中何时使用getReferenceById()和findById()方法",y:"a"}}],["/posts/baeldung/2024-06-26/2024-06-26-A%20Guide%20to%20Timefold%20Solver%20for%20Employee%20Scheduling.html",{loader:()=>a(()=>import("./2024-06-26-A Guide to Timefold Solver for Employee Scheduling.html-CHcfG0EG.js"),__vite__mapDeps([189,1])),meta:{d:171936e7,l:"2024年6月26日",c:["Java","Timefold Solver"],g:["员工调度","优化"],e:`
<h2>1. 概览</h2>
<h3>1.1. Timefold Solver 是什么？</h3>
<p>Timefold Solver 是一个纯 Java 计划求解器 AI。Timefold 优化计划问题，例如车辆路径问题（VRP）、维护调度、作业车间调度和学校时间表编制。它生成的物流计划可以大幅降低成本，提高服务质量，并减少环境足迹——通常高达 25%——适用于复杂的现实世界调度操作。</p>
<p>Timefold 是 OptaPlanner 的延续。它是一种数学优化的形式（在更广泛的运筹学和人工智能领域中），支持以代码形式编写的约束。</p>
<h3>1.2. 我们将构建什么</h3>`,r:{minutes:9.13,words:2740},t:"Timefold Solver 员工调度问题求解指南",y:"a"}}],["/posts/baeldung/2024-06-26/2024-06-26-All%20the%20Ways%20Java%20Uses%20the%20Colon%20Character.html",{loader:()=>a(()=>import("./2024-06-26-All the Ways Java Uses the Colon Character.html-CrdmT_Pb.js"),__vite__mapDeps([190,1])),meta:{d:171936e7,l:"2024年6月26日",c:["Programming","Java"],g:["Colon Usage","Java Features"],e:`
<p>许多编程语言使用冒号字符(:)来实现不同的功能。例如，C++使用它进行访问修饰符和类继承，JavaScript使用它进行对象声明。Python语言在函数定义、条件块、循环等方面大量依赖它。</p>
<p>事实证明，<strong>Java也有一个长长的列表，其中冒号字符出现的地方</strong>。在本教程中，我们将一一查看它们。</p>
<h2>2. 增强型for循环</h2>
<p>for循环是程序员在任何语言中首先学习的控制语句之一。这是Java中的语法：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i \`<span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 做一些事情</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:5.99,words:1797},t:"Java中冒号的多种用法",y:"a"}}],["/posts/baeldung/2024-06-26/2024-06-26-Catch%20Common%20Mistakes%20with%20Error%20Prone%20Library%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-26-Catch Common Mistakes with Error Prone Library in Java.html-Ck_UONcF.js"),__vite__mapDeps([191,1])),meta:{d:171936e7,l:"2024年6月26日",c:["Java","Error Prone"],g:["Error Prone","Java库"],e:`
<h2><strong>1. 引言</strong></h2>
<p><strong>确保代码质量对我们应用程序的成功部署至关重要。</strong> 错误和缺陷的存在可能会显著妨碍软件的功能和稳定性。这里有一个有价值的工具可以帮助识别这些错误：Error Prone。</p>
<p>Error Prone是由Google维护并内部使用的一个库。它帮助Java开发者在编译阶段检测和修复常见的编程错误。</p>
<p>在本教程中，我们将探索Error Prone库的功能，从安装到定制，以及它在提高代码质量和健壮性方面提供的好处。</p>
<h2><strong>2. 安装</strong></h2>`,r:{minutes:4.6,words:1381},t:"使用Java中的Error Prone库捕获常见错误 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-26/2024-06-26-Check%20Certificate%20Name%20and%20Alias%20in%20Keystore%20File.html",{loader:()=>a(()=>import("./2024-06-26-Check Certificate Name and Alias in Keystore File.html-C665b8SU.js"),__vite__mapDeps([192,1])),meta:{d:17194464e5,l:"2024年6月27日",c:["Java","Security"],g:["Java KeyStore","keytool"],e:`
<p>在本教程中，我们将学习如何使用Java密钥库API和_keytool_实用工具来检查Java密钥库文件中的证书名称和别名。</p>
<h2>2. 设置</h2>
<p>在介绍这两种方法之前，让我们使用_keytool_实用工具创建一个密钥库文件：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ keytool <span class="token parameter variable">-genkeypair</span> <span class="token parameter variable">-keyalg</span> rsa <span class="token parameter variable">-alias</span> baeldung <span class="token parameter variable">-storepass</span> storepw@1 <span class="token parameter variable">-keystore</span> my-keystore.jks
</code></pre></div>`,r:{minutes:2.63,words:789},t:"Java密钥库文件中检查证书名称和别名",y:"a"}}],["/posts/baeldung/2024-06-26/2024-06-26-Check%20if%20a%20double%20Is%20an%20Integer%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-26-Check if a double Is an Integer in Java.html-CTit8v1s.js"),__vite__mapDeps([193,1])),meta:{d:17194464e5,l:"2024年6月27日",c:["Java","编程"],g:["double","整数","数值检查"],e:`
<h2>1. 概述</h2>
<p>处理数值数据通常需要精确处理。一个常见的场景是，我们需要检查一个_double_实际上是否是一个数学整数。</p>
<p>在本教程中，我们将探索执行此检查的各种技术，确保在我们的数值评估中的准确性和灵活性。</p>
<h2>2. 问题介绍</h2>
<p>首先，我们知道，_double_是一个浮点数据类型，可以表示小数值，并且比Java的_int_或_Integer_有更广的范围。另一方面，数学整数是一个整数数据类型，不能存储小数值。</p>
<p>当小数点后的值可以忽略或不存在时，_double_可以被视为表示一个数学整数。这意味着_double_持有一个没有小数部分的整数。例如，_42.0D_实际上是一个整数（<em>42</em>）。但是，_42.42D_不是。</p>`,r:{minutes:5.27,words:1582},t:"在Java中检查double是否为整数",y:"a"}}],["/posts/baeldung/2024-06-26/2024-06-26-Connect%20to%20Database%20Through%20Intellij%20Data%20Sources%20and%20Drivers.html",{loader:()=>a(()=>import("./2024-06-26-Connect to Database Through Intellij Data Sources and Drivers.html-DdvjONPe.js"),__vite__mapDeps([194,1])),meta:{d:171936e7,l:"2024年6月26日",c:["Database","IntelliJ IDEA"],g:["Database Connection","IntelliJ IDEA"],e:`
<p>连接到数据库通过IntelliJ IDEA涉及配置数据源并选择适当的数据库驱动程序。</p>
<p>在本教程中，<strong>我们将学习如何通过IntelliJ数据源和驱动连接到数据库</strong>。</p>
<p>数据库工具和SQL插件通常在IntelliJ IDEA Ultimate中默认启用。然而，如果我们遇到它未启用的情况，我们可以按照以下步骤确保它已启用：</p>
<ol>
<li>首先，让我们打开IntelliJ IDEA，然后导航到“文件”-&gt;“设置”（在Windows/Linux上）或“IntelliJ IDEA”-&gt;“首选项”（在macOS上）</li>
<li>一旦设置/首选项对话框弹出，我们可以导航到“插件”</li>
<li>现在我们需要在已安装插件列表中查找“数据库工具和SQL”插件</li>
<li>如果“数据库工具和SQL”插件尚未选中，我们需要选中它</li>
<li>如果插件未安装，我们必须点击“市场”选项卡并搜索“数据库工具和SQL”以从那里安装它</li>
<li>在启用或安装插件后，我们可能需要重新启动IntelliJ IDEA以应用更改：</li>
</ol>`,r:{minutes:3.47,words:1040},t:"通过IntelliJ数据源和驱动连接数据库",y:"a"}}],["/posts/baeldung/2024-06-26/2024-06-26-Convert%20Long%20Timestamp%20to%20LocalDateTime%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-26-Convert Long Timestamp to LocalDateTime in Java.html-D6e_Ne6M.js"),__vite__mapDeps([195,1])),meta:{d:17194464e5,l:"2024年6月27日",c:["Java","LocalDateTime"],g:["Long Timestamp","Convert"],e:`
<p>处理Java中的时间戳是一项常见任务，它使我们能够更有效地操作和显示日期和时间信息，尤其是在处理数据库或外部API时。</p>
<p>本文教程将探讨如何将长时间戳转换为LocalDateTime对象。</p>
<h2>2. 理解长时间戳和LocalDateTime</h2>
<h3>2.1. 长时间戳</h3>
<p>长时间戳表示一个特定的时间点，作为自纪元（epoch）以来的毫秒数。具体来说，它是一个单一值，表示自1970年1月1日以来经过的时间。</p>
<p>此外，以这种格式处理时间戳对于计算是高效的，但需要转换为可读的日期时间格式，以用于用户交互或显示目的。</p>
<p>例如，长值1700010123000L代表参考点2023-11-15 01:02:03。</p>`,r:{minutes:2.42,words:726},t:"Java中将长时间戳转换为LocalDateTime",y:"a"}}],["/posts/baeldung/2024-06-26/2024-06-26-Convert%20Positive%20Integer%20to%20Negative%20and%20Vice%20Versa%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-26-Convert Positive Integer to Negative and Vice Versa in Java.html-E5NdTkw5.js"),__vite__mapDeps([196,1])),meta:{d:17194464e5,l:"2024年6月27日",c:["Java","编程"],g:["整数","取反"],e:`
<h2>1. 概述</h2>
<p>在Java编程中，理解如何操作整数是编写健壮且高效代码的基础。一个常见的操作是取反整数。</p>
<p>在本教程中，我们将探索取反整数的不同方法。</p>
<h2>2. 问题介绍</h2>
<p>取反整数涉及将正数变为负数，或反之。例如，给定一个整数42，取反后我们期望得到-42作为结果。</p>
<p>我们不应忘记数字0既不是正数也不是负数。因此，取反0的结果也应该是0。</p>
<p>在Java中，这个操作很简单，我们将看到三种不同的实现方式。此外，我们将讨论一个边缘情况：整数溢出。</p>
<p>为了简化，我们将使用单元测试断言来验证每种方法的结果。</p>`,r:{minutes:3.73,words:1119},t:"Java中将正整数转换为负数以及反之的方法 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-26/2024-06-26-Convert%20an%20XML%20File%20to%20CSV%20File.html",{loader:()=>a(()=>import("./2024-06-26-Convert an XML File to CSV File.html-De2EczO6.js"),__vite__mapDeps([197,1])),meta:{d:171936e7,l:"2024年6月26日",c:["XML","CSV"],g:["Java","数据转换"],e:`
<p>在本文中，我们将探索使用 Java 将 XML 文件转换为 CSV 格式的多种方法。</p>
<p>XML（可扩展标记语言）和 CSV（逗号分隔值）都是数据交换的流行选择。<strong>虽然 XML 是一个强大的选项，允许对复杂数据集进行结构化、分层的方法，但 CSV 更直接，主要设计用于表格数据。</strong></p>
<p>有时，我们可能需要将 XML 转换为 CSV，以使数据导入或分析更加容易。</p>
<h2><strong>2. XML 数据布局介绍</strong></h2>
<p>设想我们经营着一群书店，我们将库存数据存储在类似于下面示例的 XML 格式中：</p>`,r:{minutes:7.96,words:2387},t:"将 XML 文件转换为 CSV 文件 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-26/2024-06-26-Deserializing%20JSON%20to%20Java%20Record%20using%20Gson.html",{loader:()=>a(()=>import("./2024-06-26-Deserializing JSON to Java Record using Gson.html-CAfYpvAL.js"),__vite__mapDeps([198,1])),meta:{d:171936e7,l:"2024年6月26日",c:["Java","JSON"],g:["Gson","Deserialization"],e:`
<h2>1. 引言</h2>
<p>反序列化过程涉及将对象（或数据）的JSON表示转换为编程语言中的等效对象，例如Java对象。Gson是一个流行的Java库，用于JSON序列化和反序列化，简化了这一过程。</p>
<p><strong>在本教程中，我们将探讨如何使用Gson将JSON数据反序列化为Java记录。</strong></p>
<h2>2. 创建Java记录</h2>
<p>在深入代码示例之前，我们需要确保已经将Gson库添加到我们的项目中。<strong>我们可以将其作为构建工具的依赖项添加，例如Maven或Gradle。对于Maven，我们添加以下依赖项：</strong></p>`,r:{minutes:2.49,words:748},t:"使用Gson将JSON反序列化为Java记录",y:"a"}}],["/posts/baeldung/2024-06-26/2024-06-26-Differences%20Between%20Entities%20and%20DTOs.html",{loader:()=>a(()=>import("./2024-06-26-Differences Between Entities and DTOs.html-CD1IdMmQ.js"),__vite__mapDeps([199,1])),meta:{d:171936e7,l:"2024年6月26日",c:["Java","Software Development"],g:["Entity","DTO"],e:`
<p>在软件开发领域，实体（Entities）和数据传输对象（DTOs）之间有明显的区别。了解它们确切的角色和差异可以帮助我们构建更高效和可维护的软件。</p>
<p>在本文中，我们将探讨实体和DTOs之间的区别，并尝试提供对它们目的的清晰理解，以及何时在我们的软件项目中使用它们。在讨论每个概念时，我们将使用Spring Boot和JPA来构建一个简单的用户管理应用程序。</p>
<p>实体是我们应用程序领域中真实世界对象或概念的基本组成部分。它们通常直接对应于数据库表或领域对象。因此，它们的主要目的是封装和管理这些对象的状态和行为。</p>
<h3>2.1 实体示例</h3>
<p>让我们为我们的项目创建一些实体，代表一个拥有多本书的用户。我们将从创建_Book_实体开始：</p>`,r:{minutes:6.87,words:2062},t:"实体与数据传输对象（DTO）的区别",y:"a"}}],["/posts/baeldung/2024-06-26/2024-06-26-Extract%20Numbers%20From%20a%20String%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-06-26-Extract Numbers From a String in Kotlin.html-DeGfaQxx.js"),__vite__mapDeps([200,1])),meta:{d:171936e7,l:"2024年6月26日",c:["Kotlin","编程"],g:["Kotlin","字符串","数字提取"],e:`
<h2>1. 引言</h2>
<p>在数据分析和处理中，从文本中提取数字信息是一个关键且基本的任务。这对于解析标识符、提取电话号码、解释邮政编码等任务至关重要。</p>
<p>在本教程中，我们将探讨在Kotlin中从字符串中提取数字的不同方法。</p>
<h2>2. 假设</h2>
<p>对于手头的问题，我们将仅关注提取可以转换为_BigInteger_数据类型的十进制正整数。小数和非十进制数字不在提取方法的范围内。</p>
<h2>3. 使用循环</h2>
<p>我们可以使用传统的_for_循环来遍历文本中的每个字符并提取数字。让我们看看实现：</p>
<div class="language-kotlin" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">extractNumbersUsingLoop</span><span class="token punctuation">(</span>str<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> List\`\`\`\`\`<span class="token operator">&lt;</span>BigInteger<span class="token operator">&gt;</span>\`\`\`\`\` <span class="token punctuation">{</span>
    <span class="token keyword">val</span> numbers <span class="token operator">=</span> mutableListOf\`\`\`\`\`<span class="token operator">&lt;</span>BigInteger<span class="token operator">&gt;</span>\`\`\`\`\`<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> currentNumber <span class="token operator">=</span> <span class="token function">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>char <span class="token keyword">in</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>char<span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            currentNumber<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>currentNumber<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            numbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>currentNumber<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBigInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            currentNumber<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentNumber<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        numbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>currentNumber<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBigInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> numbers
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:3.94,words:1183},t:"在Kotlin中从字符串中提取数字",y:"a"}}],["/posts/baeldung/2024-06-26/2024-06-26-Generating%20Unique%20Positive%20long%20Using%20UUID%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-26-Generating Unique Positive long Using UUID in Java.html-SopLdMn8.js"),__vite__mapDeps([201,1])),meta:{d:17194464e5,l:"2024年6月27日",c:["Java","UUID"],g:["唯一性","长整型"],e:`
<p>通用唯一识别码（UUID）表示一个128位的数字，设计上是全球唯一的。在实践中，UUID适用于需要唯一识别的场合，例如创建数据库表的主键。</p>
<p>Java提供了<code>long</code>基本数据类型，这是一个易于阅读和理解的数据类型。在许多情况下，使用64位的<code>long</code>可以提供足够的唯一性，并且碰撞概率很低。此外，像MySQL、PostgreSQL等数据库已经优化了与数值数据类型的高效工作。</p>
<p>在本文中，我们将讨论<strong>使用UUID生成唯一的正长整型值，重点关注版本4的UUID</strong>。</p>
<h3>1. 概述</h3>`,r:{minutes:5.6,words:1681},t:"在Java中使用UUID生成唯一的正长整型",y:"a"}}],["/posts/baeldung/2024-06-26/2024-06-26-Get%20Index%20of%20First%20Element%20Matching%20Boolean%20Using%20Java%20Streams.html",{loader:()=>a(()=>import("./2024-06-26-Get Index of First Element Matching Boolean Using Java Streams.html-B6Y0SCH3.js"),__vite__mapDeps([202,1])),meta:{d:171936e7,l:"2024年6月26日",c:["Java","Streams"],g:["Java 8","Stream API"],e:`
<h2>1. 引言</h2>
<p>在数据结构中查找元素的索引是开发者的常见任务。在本教程中，我们将使用Java Stream API和第三方库来查找列表中第一个匹配布尔条件的元素的索引。</p>
<h2>2. 环境搭建</h2>
<p>在本文中，我们将使用下面提到的User对象编写一些测试用例来实现我们的目标：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> userId<span class="token punctuation">;</span>

    <span class="token comment">// 构造函数和getter方法</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:3.48,words:1043},t:"使用Java Stream API获取布尔条件匹配的第一个元素的索引",y:"a"}}],["/posts/baeldung/2024-06-26/2024-06-26-Handling%20NullPointerException%20in%20findFirst%20%20%20When%20the%20First%20Element%20Is%20Null.html",{loader:()=>a(()=>import("./2024-06-26-Handling NullPointerException in findFirst   When the First Element Is Null.html-By2k7_sN.js"),__vite__mapDeps([203,1])),meta:{d:171936e7,l:"2024年6月26日",c:["Java","Exception Handling"],g:["NullPointerException","findFirst()","Optional"],e:`
<p>在这个简短的教程中，我们将探讨在使用findFirst()方法时避免NullPointerException的不同方法。</p>
<p>首先，我们将解释导致该方法因NullPointerException失败的原因。然后，我们将通过实际示例演示如何重现并修复异常。</p>
<h3>解释问题</h3>
<p>简而言之，NullPointerException被抛出以表明我们在需要对象的地方使用了null进行了某些操作。</p>
<p>通常，我们使用findFirst()来返回一个包含给定流的第一个元素的Optional实例。然而，<strong>根据文档，如果返回的第一个元素是null，该方法会抛出NullPointerException</strong>。</p>`,r:{minutes:2.63,words:789},t:"处理findFirst()方法中第一个元素为Null时的NullPointerException",y:"a"}}],["/posts/baeldung/2024-06-26/2024-06-26-How%20to%20Convert%20Byte%20Array%20to%20Char%20Array.html",{loader:()=>a(()=>import("./2024-06-26-How to Convert Byte Array to Char Array.html-BsT8ynNF.js"),__vite__mapDeps([204,1])),meta:{d:17194464e5,l:"2024年6月27日",c:["Java","编程"],g:["字节数组","字符数组"],e:`
<p>将字节转换为Java中的字符数组涉及到将字节序列转换为其对应的字符数组。具体来说，字节代表原始数据，而字符是Unicode表示，允许文本操作。</p>
<p><strong>在本教程中，我们将探索执行此转换的不同方法。</strong></p>
<h2>2. 使用_StandardCharsets_和_String_类</h2>
<p><em>String_类提供了一种使用特定字符编码将字节转换为字符数组的直接方法。让我们考虑以下字节数组_byteArray_及其对应的字符数组_expectedCharArray</em>：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>byte[] byteArray = {65, 66, 67, 68};
char[] expectedCharArray = {'A', 'B', 'C', 'D'};
</code></pre></div>`,r:{minutes:2.45,words:736},t:"如何在Java中将字节数组转换为字符数组",y:"a"}}],["/posts/baeldung/2024-06-26/2024-06-26-How%20to%20Convert%20JsonNode%20to%20ObjectNode.html",{loader:()=>a(()=>import("./2024-06-26-How to Convert JsonNode to ObjectNode.html-8GjHyWdz.js"),__vite__mapDeps([205,1])),meta:{d:171936e7,l:"2024年6月26日",c:["Java","Jackson"],g:["JsonNode","ObjectNode"],e:`
<p>在Java中使用JSON（JavaScript对象表示法）通常涉及到使用像Jackson这样的库，它提供了各种类来表示这种类型的数据，例如_JsonNode_和_ObjectNode_。</p>
<p><strong>在本教程中，我们将探索如何在Java中将_JsonNode_转换为_ObjectNode_。</strong> 这是当我们需要在代码中直接操作数据时的一个必要步骤。</p>
<h3>2. 理解_JsonNode_和_ObjectNode_</h3>
<p>_JsonNode_是Jackson库中的一个抽象类，它代表JSON树中的一个节点。它是所有节点的基类，并且能够存储不同类型的数据，包括对象、数组、字符串、数字、布尔值和null值。<strong>_JsonNode_实例是不可变的，这意味着你不能在它们上设置属性。</strong></p>`,r:{minutes:2.08,words:624},t:"如何在Java中将JsonNode转换为ObjectNode",y:"a"}}],["/posts/baeldung/2024-06-26/2024-06-26-How%20to%20Effectively%20Unit%20Test%20CompletableFuture.html",{loader:()=>a(()=>import("./2024-06-26-How to Effectively Unit Test CompletableFuture.html-xOAN1Wr9.js"),__vite__mapDeps([206,1])),meta:{d:171936e7,l:"2024年6月26日",c:["Java","异步编程"],g:["CompletableFuture","单元测试"],e:`
<p>CompletableFuture 是 Java 中用于异步编程的强大工具。它提供了一种方便的方式来将异步任务链接在一起并处理它们的结果。它通常用于需要执行异步操作并在稍后阶段需要使用或处理其结果的情况。</p>
<p>然而，对 CompletableFuture 进行单元测试可能具有挑战性，因为它的异步特性。依赖于顺序执行的传统测试方法常常无法捕捉到异步代码的细微差别。在本教程中，我们将讨论如何使用两种不同的方法：黑盒测试和基于状态的测试，来有效地对 CompletableFuture 进行单元测试。</p>
<p>异步代码引入了挑战，因为它的非阻塞和并发执行，给传统测试方法带来了困难。这些挑战包括：</p>`,r:{minutes:6.07,words:1821},t:"如何有效地对CompletableFuture进行单元测试",y:"a"}}],["/posts/baeldung/2024-06-26/2024-06-26-How%20to%20Increment%20a%20Map%20Value%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-26-How to Increment a Map Value in Java.html-BwiBr-15.js"),__vite__mapDeps([207,1])),meta:{d:17194464e5,l:"2024年6月27日",c:["Java","编程"],g:["Java Map","编程技巧"],e:`
<p>在本教程中，我们将探讨几种在Map中与键关联的数值递增的方法。Map接口是Java集合框架的一部分，表示键值对的集合。一些常见的Map实现包括HashMap、TreeMap和LinkedHashMap。</p>
<h3>问题陈述</h3>
<p>让我们看一个例子，我们有一个字符串输入，并在Map中存储句子中每个字符出现的频率。这里是一个问题的例子和输出：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>示例句子：
"the quick brown fox jumps over the lazy dog"

字符频率：
t: 2次
h: 2次
e: 3次
q: 1次
u: 2次
......等等
</code></pre></div>`,r:{minutes:6.57,words:1970},t:"如何在Java中递增Map的值",y:"a"}}],["/posts/baeldung/2024-06-26/2024-06-26-How%20to%20Sort%20LinkedHashMap%20by%20Values%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-26-How to Sort LinkedHashMap by Values in Java.html-B18h9MYz.js"),__vite__mapDeps([208,1])),meta:{d:17194464e5,l:"2024年6月27日",c:["Java","Tutorial"],g:["LinkedHashMap","Sorting"],e:`
<h2>1. 概述</h2>
<p>映射（Map）是我们在需要管理键值对关联时常用的数据类型。LinkedHashMap是一个受欢迎的选择，主要是因为它保留了元素的插入顺序。然而，在许多现实世界的场景中，我们经常需要根据值而不是键来对LinkedHashMap中的元素进行排序。</p>
<p>在本教程中，我们将探讨如何在Java中按值对LinkedHashMap进行排序。</p>
<h2>2. 按值排序</h2>
<p>LinkedHashMap的默认行为是保持元素的插入顺序。这在我们需要跟踪元素添加到映射的顺序时非常有用。然而，按值排序是一个不同的需求。我们可能希望根据与键关联的值来安排条目，无论是升序还是降序。</p>`,r:{minutes:4.68,words:1404},t:"如何在Java中按值对LinkedHashMap进行排序 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-26/2024-06-26-How%20to%20Use%20a%20Custom%20Font%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-26-How to Use a Custom Font in Java.html-BhNak1rI.js"),__vite__mapDeps([209,1])),meta:{d:17194464e5,l:"2024年6月27日",c:["Java","GUI"],g:["Java","字体","GUI"],e:`
<ol>
<li>引言</li>
</ol>
<p>当我们开发Java应用程序时，我们可能需要设计它们使用自定义字体以使GUI中的显示更加清晰。幸运的是，Java默认提供了广泛的字体，使用自定义字体使设计师能够在开发有吸引力的应用程序时发挥创意。</p>
<p><strong>在本教程中，我们将探索如何在Java应用程序中使用自定义字体。</strong></p>
<ol start="2">
<li>配置自定义字体</li>
</ol>
<p>Java支持集成TrueType字体（TTF）和OpenType字体（OTF）进行自定义字体使用。</p>
<p><strong>实际上，这些字体并不包含在标准的Java字体库中，需要我们显式地将它们加载到应用程序中。</strong></p>`,r:{minutes:2.27,words:682},t:"如何在Java中使用自定义字体",y:"a"}}],["/posts/baeldung/2024-06-26/2024-06-26-Inter%20Process%20Communication%20Methods%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-26-Inter Process Communication Methods in Java.html-DfWmvn7g.js"),__vite__mapDeps([210,1])),meta:{d:171936e7,l:"2024年6月26日",c:["Java","编程"],g:["Inter-Process Communication","Java IPC"],e:`
<h2><strong>1. 引言</strong></h2>
<p>们之前已经研究了进程间通信（IPC），并比较了不同方法之间的性能。在本文中，我们将探讨如何在Java应用程序中实现这些方法。</p>
<p>进程间通信，简称IPC，是一种不同进程之间可以相互通信的机制。这可以是构成同一应用程序的不同进程，也可以是在同一台计算机上运行的不同进程，或者是分布在互联网上的其他进程。</p>
<p>例如，一些网络浏览器将每个标签页作为不同的操作系统进程运行。这样做是为了使它们彼此隔离，但确实需要在标签页进程和主浏览器进程之间进行一定程度的IPC，以确保一切正常工作。</p>
<p>这里我们所看到的一切都将以消息传递的形式出现。Java缺乏对共享内存机制的标准支持，尽管一些第三方库可以促进这一点。因此，我们将考虑一个生产进程向消费进程发送消息。</p>`,r:{minutes:7.66,words:2297},t:"Java中的进程间通信方法",y:"a"}}],["/posts/baeldung/2024-06-26/2024-06-26-Limiting%20the%20Max%20Size%20of%20a%20HashMap%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-26-Limiting the Max Size of a HashMap in Java.html-Bl0QTjfI.js"),__vite__mapDeps([211,1])),meta:{d:17194464e5,l:"2024年6月27日",c:["Java","集合框架"],g:["HashMap","LinkedHashMap"],e:`
<p>HashMap是Java Collections库中众所周知的类。它实现了Map接口，并允许存储键值对。<strong>HashMap的一个实例在其条目数量上没有限制</strong>。在某些特定场景中，我们可能想要改变这种行为。在本教程中，我们将探讨几种强制对HashMap进行大小限制的可能方法。</p>
<h2>2. Java HashMap的概念</h2>
<p>HashMap的核心本质上是一个哈希表。哈希表是一种基于数组和链表这两种基本结构的数据结构。</p>
<h3>2.1 内部结构</h3>
<p>数组是HashMap的基本存储实体。数组的每个位置包含一个对链表的引用。链表可以包含一组由键和值组成的条目。键和值都是Java对象，不是基本类型，并且键是唯一的。HashMap接口定义了一个put方法如下：</p>`,r:{minutes:7.87,words:2362},t:"Java中限制HashMap最大大小的方法",y:"a"}}],["/posts/baeldung/2024-06-26/2024-06-26-Merging%20Kotlin%20Flows.html",{loader:()=>a(()=>import("./2024-06-26-Merging Kotlin Flows.html-DFtXd8yA.js"),__vite__mapDeps([212,1])),meta:{d:17194464e5,l:"2024年6月27日",c:["Kotlin","Coroutines"],g:["Flow","Merging"],e:`
<ol>
<li>引言</li>
</ol>
<p>在 Kotlin 的协程中，Flow 是一种强大的结构，用于异步处理顺序数据流。有时我们需要同时处理多个 Flow，以便有效地合并它们以提高数据处理的效率。当我们合并 Flow 时，我们将来自不同来源的数据组合成单个流，从而实现并发处理并提高性能。</p>
<p>在本教程中，我们将探索合并 Kotlin Flow 的各种技术，并提供代码示例来说明每种方法。</p>
<ol start="2">
<li>Kotlin 中的 Flow 理解</li>
</ol>
<p>在深入合并 Flow 之前，让我们快速回顾一下 Kotlin 的 Flow。Flow 是<strong>异步数据流，它们按顺序发出值</strong>。它们能够处理潜在的大型数据集而不会发生阻塞，这使它们非常适合异步编程任务。</p>`,r:{minutes:4.48,words:1344},t:"Kotlin 中合并 Flow 的方法",y:"a"}}],["/posts/baeldung/2024-06-26/2024-06-26-Methods%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-26-Methods in Java.html-DBZxYKrx.js"),__vite__mapDeps([213,1])),meta:{d:17194464e5,l:"2024年6月27日",c:["Java","编程"],g:["方法","教程"],e:`<hr>
<h1>Java 中的方法 | Baeldung</h1>
<h2>1. 引言</h2>
<p>在Java中，方法是我们定义应用程序业务逻辑的地方。它们定义了封装在对象中的数据之间的交互。</p>
<p>在本教程中，我们将介绍Java方法的语法，方法签名的定义，以及如何调用和重载方法。</p>
<h2>2. 方法语法</h2>
<p>首先，一个方法由六部分组成：</p>
<ul>
<li><strong>访问修饰符：</strong> 可选择性地指定代码中哪些地方可以访问该方法</li>
<li><strong>返回类型：</strong> 方法返回的值的类型，如果有的话</li>
<li><strong>方法标识符：</strong> 我们给方法的命名</li>
<li><strong>参数列表：</strong> 可选的，用逗号分隔的方法输入列表</li>
<li><strong>异常列表：</strong> 方法可能抛出的异常列表</li>
<li><strong>主体：</strong> 逻辑定义（可以为空）</li>
</ul>`,r:{minutes:5.44,words:1631},t:"Java 中的方法 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-26/2024-06-26-Modify%20Request%20Body%20Before%20Reaching%20Controller%20in%20Spring%20Boot.html",{loader:()=>a(()=>import("./2024-06-26-Modify Request Body Before Reaching Controller in Spring Boot.html-B5U3bzyn.js"),__vite__mapDeps([214,1])),meta:{d:17194464e5,l:"2024年6月27日",c:["Spring Boot","Web开发"],g:["Spring Boot","请求修改","AOP","过滤器","拦截器"],e:`
<p>无论你是刚开始学习还是拥有多年经验，<strong>Spring Boot</strong> 显然是构建Web应用程序的极佳选择。</p>
<p>Jmix基于这个功能强大且成熟的Boot堆栈构建，允许开发人员构建并交付<strong>全栈Web</strong> <strong>应用程序</strong>，而无需编写前端代码。非常灵活，从简单的Web GUI CRUD应用程序到复杂的企业解决方案。</p>
<p>具体来说，<strong>Jmix平台</strong>包括一个框架，该框架建立在<strong>Spring Boot, JPA和Vaadin</strong>之上，并配备了Jmix Studio，<strong>一个IntelliJ IDEA插件</strong>，配备了一套开发者生产力工具。</p>`,r:{minutes:6.88,words:2065},t:"在Spring Boot中修改到达控制器之前的请求体",y:"a"}}],["/posts/baeldung/2024-06-26/2024-06-26-Passing%20JVM%20Options%20from%20Gradle%20bootRun.html",{loader:()=>a(()=>import("./2024-06-26-Passing JVM Options from Gradle bootRun.html-C8wbYdDd.js"),__vite__mapDeps([215,1])),meta:{d:17194464e5,l:"2024年6月27日",c:["Java","Gradle"],g:["JVM","Spring Boot","配置"],e:`
<p>Gradle是一个多用途的自动化构建工具，用于开发、编译和测试软件包。它支持多种语言，但我们主要用它来处理基于Java的语言，如Kotlin、Groovy和Scala。</p>
<p>在使用Java时，我们可能需要自定义Java应用程序中的JVM参数。由于我们使用Gradle来构建Java应用程序，我们也可以通过调整Gradle配置来自定义应用程序的JVM参数。</p>
<p>在本教程中，我们将学习如何从Gradle的_bootRun_向Spring Boot Java应用程序传递JVM参数。</p>
<h3>2. 理解_bootRun_</h3>
<p><strong>Gradle的_bootRun_是一个Gradle特定的任务，它随默认的Spring Boot Gradle插件一起提供。它帮助我们直接从Gradle运行Spring Boot应用程序。</strong> 执行_bootRun_命令会在开发环境中启动我们的应用程序，这对于测试和开发目的非常有用。主要来说，它用于迭代开发，因为它不需要单独的构建或部署。</p>`,r:{minutes:3.1,words:929},t:"通过Gradle bootRun传递JVM选项",y:"a"}}],["/posts/baeldung/2024-06-26/2024-06-26-Recursively%20Sum%20the%20Integers%20in%20an%20Array.html",{loader:()=>a(()=>import("./2024-06-26-Recursively Sum the Integers in an Array.html-CvZaXA1Y.js"),__vite__mapDeps([216,1])),meta:{d:171936e7,l:"2024年6月26日",c:["Java","编程"],g:["数组","递归"],e:`
<h2>1. 概述</h2>
<p>当我们处理数字时，对数组中的所有整数进行求和是一项常见操作。此外，递归经常提供优雅的解决方案。</p>
<p>在本教程中，我们将探讨如何使用递归来对数组中的整数进行求和。</p>
<h2>2. 带数组复制的递归</h2>
<p>首先，我们初始化一个整数数组：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">INT_ARRAY</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:4.91,words:1474},t:"数组中整数的递归求和 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-26/2024-06-26-Resolving%20Gson%20s%20%20Multiple%20JSON%20Fields%20%20Exception.html",{loader:()=>a(()=>import("./2024-06-26-Resolving Gson s  Multiple JSON Fields  Exception.html-uOJ_Gcdc.js"),__vite__mapDeps([217,1])),meta:{d:171936e7,l:"2024年6月26日",c:["Java","Gson"],g:["JSON","Exception"],e:'\n<p>Google Gson是一个在Java中用于JSON数据绑定的有用且灵活的库。在大多数情况下，Gson可以在不进行修改的情况下对现有类执行数据绑定。然而，某些类结构可能会导致难以调试的问题。</p>\n<p>一个有趣且可能令人困惑的异常是IllegalArgumentException，它抱怨有多个字段定义：</p>\n<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>java.lang.IllegalArgumentException: 类`&lt;YourClass&gt;`声明了多个名为`&lt;yourField&gt;`的JSON字段 ...\n</code></pre></div>',r:{minutes:6.39,words:1917},t:"解决Gson的“多个JSON字段”异常",y:"a"}}],["/posts/baeldung/2024-06-26/2024-06-26-Retrieving%20Unix%20Time%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-26-Retrieving Unix Time in Java.html-BWgPvVbs.js"),__vite__mapDeps([218,1])),meta:{d:171936e7,l:"2024年6月26日",c:["Java","Unix Time"],g:["Java","Unix Time","Legacy Date API","Date Time API","Joda-Time"],e:`<hr>
<h1>在Java中检索Unix时间</h1>
<p>Unix时间是从1970年1月1日00:00:00 UTC开始经过的总秒数。这个时间点被称为Unix纪元。Unix时间有助于在编程中表示日期和时间。</p>
<p>在本教程中，我们将学习如何使用旧版Date API、Date Time API和Joda-Time库在Java中检索Unix时间值。</p>
<h3>2. 使用旧版Date API</h3>
<p>Date API提供了一个名为_Date_的类，该类提供了一个获取当前时间的方法。<strong>我们可以通过将当前时间的毫秒数除以_1000L_来获取当前的Unix时间</strong>。</p>`,r:{minutes:3.11,words:934},t:"在Java中检索Unix时间",y:"a"}}],["/posts/baeldung/2024-06-26/2024-06-26-Return%20First%20Non%20null%20Value%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-26-Return First Non null Value in Java.html-Df8PGrny.js"),__vite__mapDeps([219,1])),meta:{d:17194464e5,l:"2024年6月27日",c:["Java","编程技巧"],g:["Java","Optional","非空"],e:`
<p>在本教程中，我们将学习如何<strong>从一个列表或数据序列中返回第一个非空元素</strong>。</p>
<p>我们还将探索在返回一系列昂贵方法的第一个非空值时的惰性评估。最后，我们将发现使用_Optional_类将要求我们<strong>返回第一个非空的_Optional_</strong>。</p>
<h2>2. for循环</h2>
<p>在Java 8引入函数式编程之前，通常使用_for_循环来从列表中返回第一个非空元素。</p>
<p>假设我们有一个列表，第一个元素为_null_：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span>\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\` objects <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>
    <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token string">"第一个非空"</span><span class="token punctuation">,</span>
    <span class="token string">"第二个非空"</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:5.21,words:1563},t:"Java中返回第一个非空值",y:"a"}}],["/posts/baeldung/2024-06-26/2024-06-26-Rounding%20Up%20a%20Number%20to%20Nearest%20Multiple%20of%205%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-26-Rounding Up a Number to Nearest Multiple of 5 in Java.html-CYPWc_hv.js"),__vite__mapDeps([220,1])),meta:{d:171936e7,l:"2024年6月26日",c:["Java","编程"],g:["编程技巧","数学运算"],e:`
<h2>1. 引言</h2>
<p>在许多应用中，有时会需要将数值四舍五入到特定数字的最近倍数。</p>
<p><strong>在本教程中，我们将探讨如何在Java中将数字四舍五入到5的最近倍数。</strong></p>
<h2>2. 使用基本算术</h2>
<p>将数字四舍五入到5的最近倍数的一种方法是使用基本的算术运算。</p>
<p>假设我们有以下Java示例：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> originalNumber <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> expectedRoundedNumber <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> nearest <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:2.21,words:662},t:"Java中将数字四舍五入到最近的5的倍数",y:"a"}}],["/posts/baeldung/2024-06-26/2024-06-26-Setup%20Asynchronous%20Retry%20Mechanism%20in%20Spring.html",{loader:()=>a(()=>import("./2024-06-26-Setup Asynchronous Retry Mechanism in Spring.html-Cef4E6zB.js"),__vite__mapDeps([221,1])),meta:{d:17194464e5,l:"2024年6月27日",c:["Spring","Asynchronous Programming"],g:["Spring Boot","Async","Retry"],e:`<hr>
<h1>在Spring中设置异步重试机制</h1>
<hr>
<h2>1. 概述</h2>
<p>有时，我们需要代码执行是异步的，以提高应用程序的性能和响应能力。此外，我们可能希望在遇到任何异常时自动重新调用代码，因为我们预计会遇到像网络故障这样的偶尔失败。</p>
<p>在本教程中，我们将学习如何在Spring应用程序中实现异步执行与自动重试。</p>
<p>我们将探索Spring对异步(<em>async</em>)和重试(<em>retry</em>)操作的支持。</p>
<h2>2. Spring Boot中的示例应用程序</h2>
<p>让我们想象我们需要构建一个简单的微服务，该服务调用下游服务来处理一些数据。</p>`,r:{minutes:3.62,words:1086},t:"在Spring中设置异步重试机制",y:"a"}}],["/posts/baeldung/2024-06-26/2024-06-26-Skip%20Bytes%20in%20InputStream%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-26-Skip Bytes in InputStream in Java.html-Bf_hvjTq.js"),__vite__mapDeps([222,1])),meta:{d:171936e7,l:"2024年6月26日",c:["Java","InputStream"],g:["Java","InputStream","skip bytes"],e:`
<p>在Java编程中，<code>InputStream</code>是一个基本类，用于从源头读取字节。然而，在某些场景中，可能需要在<code>InputStream</code>中跳过一定数量的字节。</p>
<p>在本教程中，我们将深入探讨<code>skip()</code>方法，探索如何在Java的<code>InputStream</code>中有效地跳过字节。</p>
<p><code>InputStream</code>是一个抽象类，作为所有表示字节输入流的类的超类。此外，它提供了从流中读取字节的方法，成为输入操作的基本组件。</p>
<p>在相同的背景下，有多种情况需要跳过字节。一个常见的场景是处理文件头或元数据，这些对于特定操作不是必需的。因此，跳过不必要的字节可以提高性能并减少需要处理的数据量。</p>`,r:{minutes:2.05,words:614},t:"Java中在InputStream中跳过字节",y:"a"}}],["/posts/baeldung/2024-06-26/2024-06-26-Spring%20Kafka%20Trusted%20Packages%20Feature.html",{loader:()=>a(()=>import("./2024-06-26-Spring Kafka Trusted Packages Feature.html-CKxAixF5.js"),__vite__mapDeps([223,1])),meta:{d:171936e7,l:"2024年6月26日",c:["Spring Kafka","Trusted Packages"],g:["Alpaquita Linux","Java apps","Kafka message headers"],e:`
<p>寻找理想的Linux发行版，用于在云中运行现代Spring应用程序？</p>
<p><strong>遇见Alpaquita Linux</strong>：轻量级、安全且功能强大，足以处理重负荷工作负载。</p>
<p>这个发行版是<strong>专门为运行Java应用程序而设计的</strong>。它基于Alpine，具有显著的增强功能，在高密度容器环境中表现出色，同时满足企业级安全标准。</p>
<p>具体来说，容器镜像大小比标准选项小约<strong>30%</strong>，并且消耗的RAM少至<strong>30%</strong>：</p>
<p><strong>&gt;&gt; 立即尝试Alpaquita容器。</strong></p>`,r:{minutes:4.92,words:1476},t:"Spring Kafka可信包特性 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-26/2024-06-26-Static%20Final%20Variables%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-26-Static Final Variables in Java.html-C7_8PEbp.js"),__vite__mapDeps([224,1])),meta:{d:171936e7,l:"2024年6月26日",c:["Java","编程"],g:["static","final","常量"],e:`
<p>简单来说，静态最终变量，也称为常量，是Java中创建一个在初始化后不会改变的类变量的关键特性。然而，在静态最终对象引用的情况下，对象的状态可能会改变。</p>
<p>在本教程中，我们将学习如何声明和初始化常量变量。我们还将讨论它们的用途。</p>
<p>静态关键字将变量与类本身关联，而不是类的实例。</p>
<p>此外，最终关键字使变量不可变。其值在初始化后不能改变。</p>
<p>两个关键字的组合有助于创建常量。它们通常使用大写字母和下划线来分隔单词。</p>
<h3>2.1. 初始化静态最终变量</h3>
<p>以下是如何声明静态最终字段并赋值的示例：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Bike</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">TIRE</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:3.24,words:972},t:"Java中的静态最终变量",y:"a"}}],["/posts/baeldung/2024-06-26/2024-06-26-String%20s%20Maximum%20Length%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-26-String s Maximum Length in Java.html-Cf1-S99y.js"),__vite__mapDeps([225,1])),meta:{d:171936e7,l:"2024年6月26日",c:["Java","编程"],g:["String","内存限制","Integer.MAX_VALUE"],e:`
<h2>1. 引言</h2>
<p>Java中的基本数据类型之一是_String_类，它表示字符序列。然而，理解Java中_String_的最大长度对于编写健壮和高效的代码至关重要。</p>
<h3>在本教程中，我们将探讨与Java中字符串最大长度相关的限制和考虑因素。</h3>
<h2>2. 内存限制</h2>
<p>Java中_String_的最大长度与可用内存紧密相关。在Java中，字符串存储在堆内存中，堆中对象的最大大小受到最大可寻址内存的限制。</p>
<h3>然而，这个限制是平台依赖的，可能会根据Java虚拟机（JVM）的实现和底层硬件而变化。</h3>
<p>让我们来看一个例子：</p>`,r:{minutes:1.91,words:572},t:"Java中String的最大长度",y:"a"}}],["/posts/baeldung/2024-06-26/2024-06-26-String%20vs%20StringBuffer%20Comparison%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-26-String vs StringBuffer Comparison in Java.html-DxT6k7Jc.js"),__vite__mapDeps([226,1])),meta:{d:171936e7,l:"2024年6月26日",c:["Java","编程"],g:["String","StringBuffer"],e:`
<p>在Java中处理字符串时，String和StringBuffer是两个重要的类。简单来说，字符串是字符序列，例如“java”，“spring”等。</p>
<p>String和StringBuffer之间的主要区别在于String是不可变的，而StringBuffer是可变的并且是线程安全的。</p>
<p>本教程将比较String和StringBuffer类，并理解它们之间的相似之处和不同之处。</p>
<p>String类表示字符字符串。Java将所有字符串字面量，例如“baeldung”，实现为这个类的实例。</p>
<p>让我们创建一个String字面量：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>String str = "baeldung";
</code></pre></div>`,r:{minutes:3.78,words:1134},t:"Java中String与StringBuffer的比较",y:"a"}}],["/posts/baeldung/2024-06-26/2024-06-26-Verify%20That%20Lambda%20Expression%20Was%20Called%20Using%20Mockito.html",{loader:()=>a(()=>import("./2024-06-26-Verify That Lambda Expression Was Called Using Mockito.html-DWztAs2W.js"),__vite__mapDeps([227,1])),meta:{d:171936e7,l:"2024年6月26日",c:["Java","Testing"],g:["Mockito","Lambda Expression","Testing"],e:`
<h2>1. 概述</h2>
<p>在本教程中，我们将探讨如何测试我们的代码是否调用了Lambda函数。实现此目标有两种方法。首先，我们将检查Lambda是否使用正确的参数被调用。然后，我们将关注测试行为，检查Lambda代码是否执行并产生了预期的结果。</p>
<h2>2. 被测试的示例类</h2>
<p>首先，让我们创建一个名为_LambdaExample_的类，它包含一个我们将调用_bricksList_的_ArrayList_：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">LambdaExample</span> <span class="token punctuation">{</span>
    <span class="token class-name">ArrayList</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>\`\` bricksList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:3.79,words:1138},t:"使用Mockito验证Lambda表达式被调用",y:"a"}}],["/posts/baeldung/2024-06-26/2024-06-26-Working%20With%20HarperDB%20and%20Java.html",{loader:()=>a(()=>import("./2024-06-26-Working With HarperDB and Java.html-BdtVBoSH.js"),__vite__mapDeps([228,1])),meta:{d:171936e7,l:"2024年6月26日",c:["Java","HarperDB"],g:["Java","NoSQL","JDBC"],e:`<hr>
<h1>使用Java与HarperDB的教程</h1>
<p>在这个教程中，我们将讨论Java对HarperDB的支持，<strong>HarperDB是一个高性能的灵活NoSQL数据库，具有SQL的强大功能</strong>。毫无疑问，标准的Java数据库连接有助于将其与广泛的领先BI、报告、ETL工具和自定义应用程序集成。它还提供了REST API，用于执行数据库管理和操作。</p>
<p>然而，JDBC简化并加速了HarperDB在应用程序中的采用。它可能显著简化并加快这一过程。</p>
<p>对于本教程，我们将使用Java Test Container库。这将使我们能够运行一个HarperDB Docker容器并展示实时集成。</p>`,r:{minutes:8.47,words:2540},t:"使用Java与HarperDB的教程",y:"a"}}],["/posts/baeldung/2024-06-27/2024-06-27-A%20Guide%20to%20OpenRewrite.html",{loader:()=>a(()=>import("./2024-06-27-A Guide to OpenRewrite.html-NqbtHRnq.js"),__vite__mapDeps([229,1])),meta:{d:16563744e5,l:"2022年6月28日",c:["Java"],g:["OpenRewrite","代码重构"],e:`
<h2>1. 概览</h2>
<p>OpenRewrite 是一个用于 Java 和其他源代码的代码重构生态系统。有时，我们需要将依赖升级到最新版本，应用安全补丁，消除使用已弃用的 API，从一种技术迁移到另一种技术（例如，从 JUnit 断言迁移到 AssertJ）等。我们可以使用 OpenRewrite 库来解决这些挑战。在本教程中，我们将讨论 OpenRewrite 项目的基础知识，并展示一些如何在实践中使用它的例子。在每种情况下，我们都将使用 Spring PetClinic 应用程序。</p>
<h2>2. OpenRewrite 基础</h2>
<p>以下是我们可以使用 OpenRewrite 执行的一些常见类型的升级：</p>`,r:{minutes:6.95,words:2085},t:"OpenRewrite 使用指南",y:"a"}}],["/posts/baeldung/2024-06-27/2024-06-27-Add%20a%20List%20as%20Query%20Parameter%20in%20Jersey.html",{loader:()=>a(()=>import("./2024-06-27-Add a List as Query Parameter in Jersey.html-DHVOBTMm.js"),__vite__mapDeps([230,1])),meta:{d:17195328e5,l:"2024年6月28日",c:["Java","Jersey"],g:["RESTful Web Services","JAX-RS"],e:`<hr>
<h1>在Jersey中将列表作为查询参数添加</h1>
<p>Jersey是一个用于开发RESTful Web服务的开源框架，它是JAX-RS的参考实现。</p>
<p>在本教程中，我们将探索使用Jersey客户端进行请求时将列表作为查询参数添加的不同方式。</p>
<h2>2. GET API接收查询参数中的列表</h2>
<p>我们首先创建一个GET API，它在查询参数中接收列表。</p>
<p><strong>我们可以使用_@QueryParam_注解从URI中的查询参数提取值。</strong> _@QueryParam_注解接受一个参数，即我们想要提取的查询参数的名称。</p>`,r:{minutes:2.77,words:830},t:"在Jersey中将列表作为查询参数添加",y:"a"}}],["/posts/baeldung/2024-06-27/2024-06-27-Asserting%20Nested%20Map%20With%20JUnit.html",{loader:()=>a(()=>import("./2024-06-27-Asserting Nested Map With JUnit.html-Hr-LAeM6.js"),__vite__mapDeps([231,1])),meta:{d:17194464e5,l:"2024年6月27日",c:["Testing & Debugging"],g:["JUnit","Hamcrest","Testing"],e:'<hr>\n<h1>JUnit中断言嵌套映射的几种方式</h1>\n<p>在本教程中，我们将介绍一些不同的方法来断言在外部映射中存在一个嵌套映射。我们主要讨论JUnit Jupiter API和Hamcrest API。</p>\n<h2>2. 使用Jupiter API进行断言</h2>\n<p>本文使用Junit 5，让我们看看Maven依赖项：</p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>``org.junit.jupiter``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>``junit-jupiter-engine``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>``5.10.2``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>``test``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n</code></pre></div>',r:{minutes:5.2,words:1561},t:"JUnit中断言嵌套映射的几种方式",y:"a"}}],["/posts/baeldung/2024-06-27/2024-06-27-Async%20Exception%20Handling%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-06-27-Async Exception Handling in Kotlin.html-2g2zJlyc.js"),__vite__mapDeps([232,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin","Coroutine"],g:["Exception Handling","Asynchronous Programming"],e:`
<p>异常处理是编写健壮可靠软件的关键方面。在异步编程中，由于可能在不同线程或协程中出现的错误，管理异常变得更加关键。</p>
<p>在本教程中，我们将探讨如何在Kotlin协程中处理异常，特别关注在异步代码中捕获异常的各种方法。</p>
<h3>2. 理解异常</h3>
<p>在深入探讨Kotlin协程中的异常处理之前，让我们简要回顾一下异常。<strong>异常是在程序执行期间发生的异常事件，它打断了应用程序的正常流程</strong>。这些事件可能包括错误，例如除以零、访问数组越界或与网络相关的问题。</p>
<h3>3. 在协程中处理异常</h3>
<p>让我们也简要回顾一下协程。协程是异步编程的强大工具，它允许开发人员以顺序和更易读的方式编写异步代码。它们提供了一种执行非阻塞操作的方式，而无需回调代码的复杂性。</p>`,r:{minutes:5.23,words:1568},t:"Kotlin协程中的异步异常处理",y:"a"}}],["/posts/baeldung/2024-06-27/2024-06-27-Checking%20if%20an%20Object%20s%20Type%20Is%20Enum.html",{loader:()=>a(()=>import("./2024-06-27-Checking if an Object s Type Is Enum.html-lIHr-KJA.js"),__vite__mapDeps([233,1])),meta:{d:17194464e5,l:"2024年6月27日",c:["Java","Programming"],g:["Enum","Type Checking"],e:`<hr>
<h1>如何检查对象的类型是否为枚举</h1>
<p>当我们使用Java时，理解和操作对象类型是基本技能。一个常见的挑战是检查一个对象是否属于枚举类型（Enum）。在这个快速教程中，我们将探索确定对象类型是否为枚举的各种方法和最佳实践。</p>
<h2>2. 问题介绍</h2>
<p>枚举类型提供了一种强大的方式，在不同的类型中表示一组固定的值。动态确认一个对象是否是枚举类型对于编写健壮和类型安全的代码至关重要。</p>
<p>例如，我们有一个简单的枚举：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>enum Device {
    Keyboard, Monitor, Mouse, Printer
}
</code></pre></div>`,r:{minutes:3.65,words:1094},t:"如何检查对象的类型是否为枚举",y:"a"}}],["/posts/baeldung/2024-06-27/2024-06-27-Combining%20Multiple%20Kotlin%20Flows.html",{loader:()=>a(()=>import("./2024-06-27-Combining Multiple Kotlin Flows.html-7iEQZdxZ.js"),__vite__mapDeps([234,1])),meta:{d:17194464e5,l:"2024年6月27日",c:["Kotlin","Coroutines"],g:["Kotlin Coroutines","Flows"],e:`
<p>在Kotlin中，协程和Flows为处理异步和基于流的编程提供了强大的工具。组合多个Flows允许我们有效地编排复杂的异步操作。</p>
<p>在许多现实世界的场景中，开发者经常需要组合多个Flows，无论是为了同步它们的发射还是为了执行涉及多个来源数据的操作。在本教程中，我们将探讨在Kotlin中组合多个Flows的各种技术，以解决这些常见用例。</p>
<h2>2. Flows简介</h2>
<p>在我们深入组合Flows之前，让我们简要了解一下Kotlin中的Flows是什么。Flows是Kotlin协程的一部分，它们异步发射多个值。它们类似于序列，但设计用于处理异步计算。</p>`,r:{minutes:5.7,words:1709},t:"Kotlin中组合多个Flows",y:"a"}}],["/posts/baeldung/2024-06-27/2024-06-27-Compare%20StringBuilder%20Objects%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-27-Compare StringBuilder Objects in Java.html-CSPz0teF.js"),__vite__mapDeps([235,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","StringBuilder"],g:["Java","StringBuilder","Comparison"],e:`<hr>
<h1>Java中比较StringBuilder对象</h1>
<p>在Java中，StringBuilder类允许我们创建一个可变的字符序列对象。这使得我们可以轻松地更新对象，而不需要每次都从头开始构建，这在使用标准String类时是必需的。本教程将介绍如何在Java 11发布前后比较两个StringBuilder对象。</p>
<h3>1. Java 11之前</h3>
<p>在Java 11之前，StringBuilder并没有内置的比较方法。因此，我们需要编写自己的比较方法。首先检查两个被比较对象的长度是否相同。如果不同，我们可以立即判断它们不匹配。</p>
<p>一旦我们知道它们长度相同，我们可以利用StringBuilder实现了CharSequence这一事实来访问charAt()方法，并逐个比较每个字符。让我们将这两个步骤合并成一个我们可以使用的单一方法：</p>`,r:{minutes:2.35,words:706},t:"Java中比较StringBuilder对象",y:"a"}}],["/posts/baeldung/2024-06-27/2024-06-27-Comparing%20the%20Values%20of%20Two%20Generic%20Numbers%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-27-Comparing the Values of Two Generic Numbers in Java.html-CkMo5m2n.js"),__vite__mapDeps([236,1])),meta:{d:17194464e5,l:"2024年6月27日",c:["Java","编程"],g:["Java泛型","比较方法"],e:`
<h2>1. 引言</h2>
<p>Java在处理通用Number对象方面的多功能性非常明显。</p>
<p>在本教程中，我们将深入探讨比较这些对象的细微差别，为每种策略提供详细的见解和代码示例。</p>
<h2>2. 使用doubleValue()方法</h2>
<p><strong>将两个Number对象转换为它们的double表示形式是Java中的基础技术。</strong></p>
<p>虽然这种方法直观且简单，但它并非没有陷阱。</p>
<p>在将数字转换为double形式时，可能会有精度损失的风险。对于大的浮点数或具有许多小数位的数字尤其如此：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>public int compareDouble(Number num1, Number num2) {
    return Double.compare(num1.doubleValue(), num2.doubleValue());
}
</code></pre></div>`,r:{minutes:4.16,words:1248},t:"Java中比较两个通用数字值的方法",y:"a"}}],["/posts/baeldung/2024-06-27/2024-06-27-Context%20Specific%20Deserialization%20Filters%20in%20Java%2017.html",{loader:()=>a(()=>import("./2024-06-27-Context Specific Deserialization Filters in Java 17.html-BUW6HMOz.js"),__vite__mapDeps([237,1])),meta:{d:17194464e5,l:"2024年6月27日",c:["Java","JEP 290","JEP 415"],g:["Java 17","反序列化","安全性"],e:`
<h2>1. 引言</h2>
<p>在本教程中，我们将学习Java的新功能——上下文特定反序列化过滤器。我们将建立一个场景，然后实际应用它来确定在我们的应用程序中每种情况应该使用哪些反序列化过滤器。</p>
<h2>2. 与JEP 290的关系</h2>
<p>JEP 290在Java 9中引入，通过JVM范围内的过滤器以及为每个_ObjectInputStream_实例定义过滤器的可能性，来过滤来自外部来源的反序列化。这些过滤器基于运行时参数决定允许或拒绝对象的反序列化。</p>
<p>反序列化不受信任数据的危险长期以来一直受到讨论，帮助解决这一问题的方法也在不断改进。因此，我们现在有更多的选项来动态选择反序列化过滤器，并且更容易创建它们。</p>`,r:{minutes:5.91,words:1774},t:"Java 17中的上下文特定反序列化过滤器",y:"a"}}],["/posts/baeldung/2024-06-27/2024-06-27-Convert%20File%20to%20Byte%20Array%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-27-Convert File to Byte Array in Java.html-B1ywj7xV.js"),__vite__mapDeps([238,1])),meta:{d:17195328e5,l:"2024年6月28日",c:["Java","文件操作"],g:["Java","文件转换","字节数组"],e:`<hr>
<h1>Java中将文件转换为字节数组</h1>
<p>在这篇快速教程中，我们将看到如何在Java中将文件转换为字节数组。</p>
<p>首先，我们将学习如何使用内置的JDK解决方案进行转换。然后，我们将讨论如何使用Apache Commons IO和Guava实现相同的结果。</p>
<h3>2.1 使用Java</h3>
<p>JDK提供了几种方便的方法将文件转换为字节数组。例如，我们可以使用java.io或java.nio包来回答我们的中心问题。让我们仔细看看每个选项。</p>
<h4>2.1.1 FileInputStream</h4>
<p>让我们从使用IO包中的FileInputStream类开始，这是最简单的解决方案。通常，这个类带有将文件内容读取为字节的方法。</p>`,r:{minutes:3.51,words:1054},t:"Java中将文件转换为字节数组",y:"a"}}],["/posts/baeldung/2024-06-27/2024-06-27-Convert%20ResultSet%20Into%20Map.html",{loader:()=>a(()=>import("./2024-06-27-Convert ResultSet Into Map.html-C8o1Ref6.js"),__vite__mapDeps([239,1])),meta:{d:17194464e5,l:"2024年6月27日",c:["Java","JDBC"],g:["ResultSet","Map"],e:'<hr>\n<h1>ResultSet 转换为 Map</h1>\n<p>Java应用程序广泛使用Java数据库连接（JDBC）API来连接和在数据库上执行查询。ResultSet是由这些查询提取的数据的表格表示。</p>\n<p>在本教程中，我们将学习如何将JDBC ResultSet的数据转换为Map。</p>\n<h2>2. 设置</h2>\n<p>我们将编写一些测试用例来实现我们的目标。我们的数据源将是一个H2数据库。H2是一个快速的、开源的、内存中的数据库，支持JDBC API。让我们添加相关的Maven依赖项：</p>\n<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>`&lt;dependency&gt;`\n    `&lt;groupId&gt;`com.h2database`&lt;/groupId&gt;`\n    `&lt;artifactId&gt;`h2`&lt;/artifactId&gt;`\n`&lt;/dependency&gt;`\n</code></pre></div>',r:{minutes:3.71,words:1112},t:"ResultSet 转换为 Map",y:"a"}}],["/posts/baeldung/2024-06-27/2024-06-27-Convert%20Timestamp%20String%20to%20Long%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-27-Convert Timestamp String to Long in Java.html-DXG_23lD.js"),__vite__mapDeps([240,1])),meta:{d:17194464e5,l:"2024年6月27日",c:["Java","编程"],g:["时间戳转换","Java"],e:`
<h2>1. 引言</h2>
<p>在Java编程中，处理时间戳是一个常见的任务，我们可能需要将时间戳字符串转换为长整型值的场景有很多。</p>
<p><strong>在本教程中，我们将探索不同的方法来帮助我们有效理解和实现转换。</strong></p>
<h2>2. 时间戳概述</h2>
<p>时间戳通常以各种格式的字符串表示，例如 <em>yyyy-MM-dd HH:mm:ss</em>。此外，将这些时间戳字符串转换为长整型值对于执行Java中的日期和时间相关操作至关重要。</p>
<p>例如，考虑时间戳字符串2023-11-15 01:02:03，结果的长整型值将是1700010123000L，表示从1970年1月1日00:00:00 GMT到指定日期和时间的毫秒数。</p>`,r:{minutes:3.08,words:924},t:"Java中将时间戳字符串转换为长整型",y:"a"}}],["/posts/baeldung/2024-06-27/2024-06-27-Convert%20a%20Hex%20String%20to%20an%20Integer%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-27-Convert a Hex String to an Integer in Java.html-PmgjYlhI.js"),__vite__mapDeps([241,1])),meta:{d:17195328e5,l:"2024年6月28日",c:["Java","Programming"],g:["Hexadecimal","Integer","Conversion"],e:`<hr>
<h1>Java中将十六进制字符串转换为整数</h1>
<h2>1. 引言</h2>
<p>在编程中，将十六进制（Hex）字符串转换为整数是一个常见的任务，特别是当处理使用十六进制表示的数据类型时。</p>
<p><strong>在本教程中，我们将深入了解在Java中将Hex字符串转换为int的各种方法。</strong></p>
<h2>2. 理解十六进制表示</h2>
<p>十六进制使用基数16，每个数字可以取16个可能的值，从零到九，然后是(A)到(F)：</p>
<p><strong>还请注意，在大多数情况下，十六进制字符串以“<em>0x</em>”开头以表示其基数。</strong></p>`,r:{minutes:2.25,words:676},t:"Java中将十六进制字符串转换为整数",y:"a"}}],["/posts/baeldung/2024-06-27/2024-06-27-Convert%20a%20Stream%20into%20a%20Map%20or%20Multimap%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-27-Convert a Stream into a Map or Multimap in Java.html-B9f3P-Lc.js"),__vite__mapDeps([242,1])),meta:{d:17195328e5,l:"2024年6月28日",c:["Java","编程"],g:["Java 8","Streams","Map","Multimap"],e:`
<h2>1. 引言</h2>
<p>在Java 8发布之后，Streams成为了Java不可或缺的一部分。它们是处理数据的强大而优雅的手段。因此，有时我们可能需要将流中的元素转换为Map或Multimap。</p>
<p><strong>在本教程中，我们将深入探讨使用不同的方法和库将Java中的流转换为Map或Multimap的方式。</strong></p>
<h2>2. 将Stream转换为Map</h2>
<h3>2.1. 使用Collectors.toMap()</h3>
<p>要将流转换为Map，我们可以利用Collectors.toMap()函数。这种收集器指定了键值映射函数，相应地映射流中的每个项目。下面是一个基本示例：</p>`,r:{minutes:3.42,words:1026},t:"Java中将Stream转换为Map或Multimap",y:"a"}}],["/posts/baeldung/2024-06-27/2024-06-27-Create%20Table%20Using%20ASCII%20in%20a%20Console%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-27-Create Table Using ASCII in a Console in Java.html-Car28977.js"),__vite__mapDeps([243,1])),meta:{d:17194464e5,l:"2024年6月27日",c:["Java","ASCII"],g:["Java","ASCII","控制台","表格"],e:`
<h2>1. 概述</h2>
<p>Java标准库提供了<code>printf()</code>和<code>format()</code>方法，用于将格式化数据输出到控制台。这两种方法使得在控制台应用程序中使用ASCII字符创建表格成为可能。此外，还有一个名为AsciiTable的第三方库，进一步简化了这项任务。</p>
<p>在本教程中，我们将学习如何使用Java标准API和第三方API在Java中使用ASCII字符创建表格。</p>
<h2>2. 项目设置</h2>
<p>为了理解如何在Java中将表格输出到控制台，让我们创建一个简单的项目，将一个人的姓名、身高、体重和体重指数（BMI）输出到控制台。</p>`,r:{minutes:4.28,words:1285},t:"使用ASCII在Java控制台中创建表格 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-27/2024-06-27-Create%20a%20%20Mutable%20%20String%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-27-Create a  Mutable  String in Java.html-BM52YGEI.js"),__vite__mapDeps([244,1])),meta:{d:17195328e5,l:"2024年6月28日",c:["Java","编程"],g:["可变字符串","Java"],e:`<hr>
<h1>在Java中创建一个“可变”字符串</h1>
<ul>
<li>
<p>从这里开始</p>
</li>
<li>
<p>课程&nbsp;▼▲</p>
</li>
<li>
<p><strong>使用Spring Boot构建REST</strong><br>
\\ 构建生产级API的规范参考</p>
</li>
<li>
<p><strong>学习Spring Security&nbsp;▼▲</strong><br>
\\ 如果你今天正在使用Java，这是唯一的Spring Security教育</p>
</li>
<li>
<p><strong>学习Spring Security Core</strong><br>
\\ 专注于Spring Security 6的核心</p>
</li>
<li>
<p><strong>学习Spring Security OAuth</strong><br>
\\ 专注于Spring Security 6中的新OAuth2堆栈</p>
</li>
<li>
<p><strong>学习Spring</strong><br>
\\ 从无经验到实际构建东西</p>
</li>
<li>
<p><strong>学习Spring Data JPA</strong><br>
\\ 有关Spring Data JPA持久性的完整指南</p>
</li>
<li>
<p>指南&nbsp;▼▲</p>
</li>
<li>
<p><strong>持久性</strong><br>
\\ Spring持久性指南</p>
</li>
<li>
<p><strong>REST</strong><br>
\\ 使用Spring构建REST API的指南</p>
</li>
<li>
<p><strong>安全</strong><br>
\\ Spring Security指南</p>
</li>
<li>
<p>关于&nbsp;▼▲</p>
</li>
<li>
<p><strong>完整存档</strong><br>
\\ 网站上所有文章的高级概述。</p>
</li>
<li>
<p><strong>Baeldung电子书</strong><br>
\\ 发现我们所有的电子书</p>
</li>
<li>
<p><strong>关于Baeldung</strong><br>
\\ 关于Baeldung的信息。</p>
</li>
<li>
<p><strong>为Baeldung写作</strong><br>
\\ 成为网站上的作者。</p>
</li>
<li>
<p>RSS</p>
</li>
<li>
<p>搜索在Java中创建一个“可变”字符串</p>
</li>
<li>
<p>从这里开始</p>
</li>
<li>
<p>课程&nbsp;▼▲</p>
</li>
<li>
<p><strong>使用Spring Boot构建REST</strong><br>
\\ 构建生产级API的标准参考</p>
</li>
<li>
<p><strong>学习Spring Security&nbsp;▼▲</strong><br>
\\ 如果你今天在使用Java，这是唯一的Spring Security教育</p>
</li>
<li>
<p><strong>学习Spring Security Core</strong><br>
\\ 专注于Spring Security 6的核心</p>
</li>
<li>
<p><strong>学习Spring Security OAuth</strong><br>
\\ 专注于Spring Security 6中的新OAuth2堆栈</p>
</li>
<li>
<p><strong>学习Spring</strong><br>
\\ 从零基础到实际构建</p>
</li>
<li>
<p><strong>学习Spring Data JPA</strong><br>
\\ 完整的Spring Data JPA持久性指南</p>
</li>
<li>
<p>指南&nbsp;▼▲</p>
</li>
<li>
<p><strong>持久性</strong><br>
\\ Spring持久性指南</p>
</li>
<li>
<p><strong>REST</strong><br>
\\ 构建Spring REST API的指南</p>
</li>
<li>
<p><strong>安全</strong><br>
\\ Spring Security指南</p>
</li>
<li>
<p>关于&nbsp;▼▲</p>
</li>
<li>
<p><strong>完整存档</strong><br>
\\ 网站上所有文章的高级概述。</p>
</li>
<li>
<p><strong>Baeldung电子书</strong><br>
\\ 发现我们所有的电子书</p>
</li>
<li>
<p><strong>关于Baeldung</strong><br>
\\ 关于Baeldung的介绍。</p>
</li>
<li>
<p><strong>为Baeldung写作</strong><br>
\\ 成为该网站的作者。</p>
</li>
<li>
<p>RSS</p>
</li>
<li>
<p>搜索</p>
</li>
</ul>`,r:{minutes:1.45,words:436},t:"在Java中创建一个“可变”字符串",y:"a"}}],["/posts/baeldung/2024-06-27/2024-06-27-Difference%20Between%20String%20isEmpty%20%20%20and%20isBlank%20%20.html",{loader:()=>a(()=>import("./2024-06-27-Difference Between String isEmpty   and isBlank  .html-B9eg5_JC.js"),__vite__mapDeps([245,1])),meta:{d:17194464e5,l:"2024年6月27日",c:["Java","编程"],g:["String","isEmpty","isBlank"],e:`
<ol>
<li>引言</li>
</ol>
<p>在Java中使用_Strings_有时会令人困惑，因为我们有多种方法来完成相似的事情。</p>
<p>本文将探讨如何使用isEmpty()和isBlank()方法来验证空白和空的_Strings_。尽管这两种方法相似，但它们并不相同。</p>
<ol start="2">
<li>看看String.isEmpty()</li>
</ol>
<p>让我们从isEmpty()这个String操作开始。简单来说，isEmpty()方法如果String为空，则返回true；否则返回false。</p>
<p>内部地，isEmpty()依赖于表示String对象文本的字节数组的长度。<strong>此外，isEmpty()方法计算文本是否为空时会计算任何类型的字符</strong>。因此，空格、制表符、新行或任何可以表示为一个字节的字符都被视为有效字符。</p>`,r:{minutes:3.24,words:973},t:"Java中String的isEmpty()与isBlank()的区别",y:"a"}}],["/posts/baeldung/2024-06-27/2024-06-27-Differences%20Between%20%20%20and%20%20%20in%20Cron%20Expressions.html",{loader:()=>a(()=>import("./2024-06-27-Differences Between   and   in Cron Expressions.html-28_o_I92.js"),__vite__mapDeps([246,1])),meta:{d:17194464e5,l:"2024年6月27日",c:["Java","Quartz"],g:["Cron表达式","定时任务"],e:`
<h2>1. 概述</h2>
<p>使用cron调度器，我们可以自动化那些我们本需要手动处理的重复性任务。此外，cron表达式允许我们安排任务在所需的日期和时间执行。</p>
<p>在Java中安排任务，我们通常使用Quartz库。它是一个完全用Java编写的作业调度的开源解决方案。此外，如果我们使用Spring框架，我们可以使用<code>@Scheduled</code>注解轻松安排任务。</p>
<p>尽管cron表达式是安排任务的强大方式，但其语法有时可能会令人困惑和不知所措。</p>
<p>在本教程中，我们将探讨cron表达式中?和*符号的区别。</p>
<h2>2. Cron表达式的字段</h2>`,r:{minutes:5.18,words:1555},t:"Cron表达式中*和?的区别 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-27/2024-06-27-Ensuring%20Message%20Ordering%20in%20Kafka%20%20Strategies%20and%20Configurations.html",{loader:()=>a(()=>import("./2024-06-27-Ensuring Message Ordering in Kafka  Strategies and Configurations.html-BDsTF_Od.js"),__vite__mapDeps([247,1])),meta:{d:17194464e5,l:"2024年6月27日",c:["Kafka","消息排序"],g:["Apache Kafka","消息顺序"],e:`
<p>在这篇文章中，我们将探讨Apache Kafka中关于消息顺序的挑战和解决方案。在分布式系统中，按正确顺序处理消息对于维护数据的完整性和一致性至关重要。虽然Kafka提供了维护消息顺序的机制，但在分布式环境中实现这一点有其自身的复杂性。</p>
<h3>1. 概述</h3>
<h3>2. 分区内的顺序及其挑战</h3>
<p>Kafka通过为每条消息分配一个唯一的偏移量来在单个分区内保持顺序。这保证了在该分区内消息的顺序追加。然而，当我们扩展并使用多个分区时，保持全局顺序就变得复杂了。不同的分区以不同的速率接收消息，这使得跨分区的严格排序变得复杂。</p>
<h4>2.1 生产者和消费者的时间安排</h4>`,r:{minutes:12.48,words:3745},t:"在Kafka中确保消息顺序：策略和配置 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-27/2024-06-27-Executable%20Comments%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-27-Executable Comments in Java.html-avlfPqbl.js"),__vite__mapDeps([248,1])),meta:{d:17194464e5,l:"2024年6月27日",c:["Java","编程"],g:["可执行注释","Unicode"],e:`
<p>注释在需要在代码中添加额外注释时非常有用。它们可以帮助我们使代码更易于理解。此外，在执行复杂操作的方法中，它们尤其有用。</p>
<p>在本教程中，我们将探讨代码中的注释何时可以变得可执行。或者至少看起来像是可以执行的。</p>
<p>在我们深入研究之前，让我们重新回顾一下Java中的注释。它们是Java语法的一部分，并且有两种基本格式：</p>
<ul>
<li>单行注释</li>
<li>多行注释</li>
</ul>
<p>从“//”字符到行尾的文本表示单行注释：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>// 这是一个单行注释。
</code></pre></div>`,r:{minutes:4.15,words:1245},t:"Java中的可执行注释",y:"a"}}],["/posts/baeldung/2024-06-27/2024-06-27-Finding%20the%20N%20th%20Occurrence%20of%20a%20Substring%20in%20a%20String%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-27-Finding the N th Occurrence of a Substring in a String in Java.html-BhrLyL_I.js"),__vite__mapDeps([249,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","String Manipulation"],g:["indexOf()","substring","regex"],e:`
<p>定位字符串中的子字符串是我们在使用Java时的常见操作。通常，我们可以使用_indexOf()_方法找到子字符串的索引。</p>
<p>在本教程中，我们将探索解决一个有趣且实用问题的不同方法：在较长的字符串中找到子字符串的第n次出现。</p>
<h3>问题介绍</h3>
<p>标准的_indexOf()<em>方法可以给我们子字符串在字符串中的索引。例如，我们可以找到子字符串</em>“a”_在“<em>This is a word.</em>”中的索引（<em>8</em>）：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> firstIdx <span class="token operator">=</span> <span class="token string">"This is a word."</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> firstIdx<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:4.75,words:1424},t:"在Java中查找字符串中子字符串的第n次出现",y:"a"}}],["/posts/baeldung/2024-06-27/2024-06-27-Gradle%20Proxy%20Configuration.html",{loader:()=>a(()=>import("./2024-06-27-Gradle Proxy Configuration.html-C7gHYkcI.js"),__vite__mapDeps([250,1])),meta:{d:17194464e5,l:"2024年6月27日",c:["Development Tools","Configuration"],g:["Gradle","Proxy"],e:`
<p>代理服务器充当客户端和服务器之间的中介。它根据特定标准帮助评估来自客户端的请求，然后将其转发到目标服务器。这为系统提供了灵活性，以确定是否连接到某个网络。</p>
<p>在本教程中，我们将学习如何配置Gradle以在代理服务器后面工作。以我们的示例为例，我们的代理正在localhost上运行，代理端口为3128，用于HTTP和HTTPS连接。</p>
<p>我们可以配置Gradle在有或没有认证凭据的情况下在代理服务器后面工作。</p>
<h3>2.1. 基本代理配置</h3>
<p>首先，让我们设置一个不需要认证凭据的基本代理配置。首先，让我们在Gradle项目的根目录中创建一个名为_gradle.properties_的文件。</p>`,r:{minutes:3.46,words:1037},t:"Gradle代理配置",y:"a"}}],["/posts/baeldung/2024-06-27/2024-06-27-HashSet%20toArray%20%20%20Method%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-27-HashSet toArray   Method in Java.html-C16oO8Bw.js"),__vite__mapDeps([251,1])),meta:{d:17194464e5,l:"2024年6月27日",c:["Java","Collections"],g:["HashSet","toArray"],e:`
<h2>1. 引言</h2>
<p><em>HashSet</em> 是我们可以在Java <em>Collections</em> 中使用的一种常见数据结构。</p>
<p><strong>在本教程中，我们将深入探讨_HashSet_类的_toArray()_方法，展示如何将_HashSet_转换为数组。</strong></p>
<h2>2. 将_HashSet_转换为_数组_</h2>
<p>让我们看一组示例，说明如何应用_toArray()_方法将_HashSet_转换为数组。</p>
<h3>2.1. <em>HashSet_转换为_字符串数组</em></h3>
<p>在以下方法中，我们试图将字符串的_HashSet_转换为字符串数组：</p>`,r:{minutes:1.95,words:586},t:"Java中HashSet的toArray()方法 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-27/2024-06-27-How%20to%20Avoid%20NoSuchElementException%20in%20Stream%20API.html",{loader:()=>a(()=>import("./2024-06-27-How to Avoid NoSuchElementException in Stream API.html--UsXmeLG.js"),__vite__mapDeps([252,1])),meta:{d:17194464e5,l:"2024年6月27日",c:["Java","编程"],g:["Stream API","NoSuchElementException"],e:`
<p>在这篇简短的教程中，我们将解释在使用Stream API时如何避免NoSuchElementException异常。</p>
<p>首先，我们将解释异常的主要原因。然后，我们将通过实际示例展示如何重现并修复它。</p>
<h2>2. 异常的原因</h2>
<p>在深入细节之前，让我们先了解这个异常的含义。</p>
<p><strong>简而言之，NoSuchElementException是在请求的元素不存在时抛出的信号</strong>。例如，尝试访问不可用或不存在的元素将导致此异常。</p>
<p>通常，在Stream API中使用时，调用空Optional实例上的get()法是最常见的原因之一。</p>`,r:{minutes:3.23,words:968},t:"如何在使用Stream API时避免NoSuchElementException异常",y:"a"}}],["/posts/baeldung/2024-06-27/2024-06-27-How%20to%20Parse%20XML%20to%20HashMap%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-27-How to Parse XML to HashMap in Java.html-BrNfyB2r.js"),__vite__mapDeps([253,1])),meta:{d:17194464e5,l:"2024年6月27日",c:["Java","XML"],g:["XML解析","HashMap"],e:'<hr>\n<h1>如何在Java中将XML解析到HashMap</h1>\n<p>XML是互联网上流行的数据交换格式之一。在处理XML数据时，通常需要将其转换为更易于进一步处理的格式。</p>\n<p>在本教程中，我们将探讨将XML解析到_HashMap_的不同方法，这是一种允许有效数据检索和操作的数据结构。</p>\n<h2>2. 设置</h2>\n<p>我们将使用不同的库将以下XML解析到_HashMap_：</p>\n<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>`&lt;employees&gt;`\n    ``&lt;employee&gt;``\n        ``&lt;id&gt;``654``&lt;/id&gt;``\n        ``&lt;firstName&gt;``John``&lt;/firstName&gt;``\n        ``&lt;lastName&gt;``Doe``&lt;/lastName&gt;``\n    ``&lt;/employee&gt;``\n    ``&lt;employee&gt;``\n        ``&lt;id&gt;``776``&lt;/id&gt;``\n        ``&lt;firstName&gt;``Steve``&lt;/firstName&gt;``\n        ``&lt;lastName&gt;``Smith``&lt;/lastName&gt;``\n    ``&lt;/employee&gt;``\n`&lt;/employees&gt;`\n</code></pre></div>',r:{minutes:4.97,words:1490},t:"如何在Java中将XML解析到HashMap",y:"a"}}],["/posts/baeldung/2024-06-27/2024-06-27-How%20to%20Write%20and%20Read%20a%20File%20with%20a%20Java%20HashMap.html",{loader:()=>a(()=>import("./2024-06-27-How to Write and Read a File with a Java HashMap.html-CQv-wjbd.js"),__vite__mapDeps([254,1])),meta:{d:17195328e5,l:"2024年6月28日",c:["Java","编程"],g:["HashMap","文件读写"],e:`
<h2>1. 概述</h2>
<p>在开发软件时，经常需要将内存中的对象写入文件，并反之，将文件内容读入对象。对于基本类型和<code>String</code>值来说这很简单，但处理数据结构和对象时就变得复杂了。</p>
<p>Java中一个常见的数据结构是<code>HashMap</code>。在本教程中，我们将介绍三种使用<code>HashMap</code>数据读写文件的方法：<strong>Java <code>Properties</code>类，Java对象序列化，以及使用第三方库进行JSON序列化。</strong></p>
<h2>2. 使用Java <code>Properties</code>类</h2>`,r:{minutes:5.45,words:1636},t:"如何使用Java HashMap读写文件",y:"a"}}],["/posts/baeldung/2024-06-27/2024-06-27-Manage%20Kafka%20Consumer%20Groups.html",{loader:()=>a(()=>import("./2024-06-27-Manage Kafka Consumer Groups.html-4gI_qDuh.js"),__vite__mapDeps([255,1])),meta:{d:17194464e5,l:"2024年6月27日",c:["Kafka","Consumer Groups"],g:["Kafka","Consumer Group","Partition Rebalancing"],e:`
<h2>1. 引言</h2>
<p>消费者组有助于通过允许多个消费者从同一主题读取，来创建更可扩展的Kafka应用程序。</p>
<p>在本教程中，我们将了解消费者组以及它们如何在消费者之间重新平衡分区。</p>
<h2>2. 什么是消费者组？</h2>
<p>消费者组是与一个或多个主题相关联的一组独特的消费者。每个消费者可以读取零个、一个或多个分区。此外，每个分区在给定时间只能分配给一个消费者。当组成员变化时，分区分配会发生变化。这被称为组重新平衡。</p>
<p>消费者组是Kafka应用程序的关键部分。这允许将类似的消费者分组，并使它们能够并行地从分区主题中读取。因此，它提高了Kafka应用程序的性能和可扩展性。</p>`,r:{minutes:5.28,words:1584},t:"Kafka消费者组管理",y:"a"}}],["/posts/baeldung/2024-06-27/2024-06-27-Modifying%20Objects%20Within%20Stream%20While%20Iterating.html",{loader:()=>a(()=>import("./2024-06-27-Modifying Objects Within Stream While Iterating.html-xfF-34kg.js"),__vite__mapDeps([256,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Stream API"],g:["Stream","Java","修改"],e:`
<p>Java Stream API提供了多种方法，允许修改流元素。然而，这些方法中的操作必须是不干扰的和无状态的。否则，这将导致不正确的行为和输出。</p>
<p>在本教程中，我们将讨论在Java Stream中修改元素时常见的错误以及正确的方法。</p>
<h3>2.1. 使用_forEach()_方法修改</h3>
<p>让我们以一个_Person_类列表为例：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> email<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 标准的getter和setter...</span>
<span class="token punctuation">}</span>

</code></pre></div>`,r:{minutes:5.84,words:1753},t:"在迭代期间修改流中的对象",y:"a"}}],["/posts/baeldung/2024-06-27/2024-06-27-MongoDB%20Atlas%20Search%20Using%20the%20Java%20Driver%20and%20Spring%20Data.html",{loader:()=>a(()=>import("./2024-06-27-MongoDB Atlas Search Using the Java Driver and Spring Data.html-uey_2UXw.js"),__vite__mapDeps([257,1])),meta:{d:17194464e5,l:"2024年6月27日",c:["MongoDB","Java"],g:["MongoDB Atlas","Spring Data"],e:`
<h2>1. 引言</h2>
<p>在本教程中，我们将学习如何使用Java MongoDB驱动API实现Atlas Search功能。到结束时，我们将掌握创建查询、分页结果和检索元信息的方法。此外，我们还将涵盖使用过滤器细化结果、调整结果得分和选择要显示的特定字段。</p>
<h2>2. 场景和设置</h2>
<p>MongoDB Atlas提供了一个永久免费的集群，我们可以使用它来测试所有功能。为了展示Atlas Search功能，我们只需要一个服务类。我们将使用_MongoTemplate_连接到我们的集合。</p>
<h3>2.1. 依赖项</h3>
<p>首先，为了连接到MongoDB，我们需要spring-boot-starter-data-mongodb：</p>`,r:{minutes:11.36,words:3409},t:"MongoDB Atlas 使用Java驱动和Spring Data进行搜索",y:"a"}}],["/posts/baeldung/2024-06-27/2024-06-27-Overriding%20Spring%20Beans%20in%20Integration%20Test.html",{loader:()=>a(()=>import("./2024-06-27-Overriding Spring Beans in Integration Test.html-CfW--9eR.js"),__vite__mapDeps([258,1])),meta:{d:17194464e5,l:"2024年6月27日",c:["Spring","Testing"],g:["Spring Boot","Integration Testing"],e:`
<h2>1. 概述</h2>
<p>我们可能希望在Spring集成测试中覆盖应用程序的某些Bean。通常，这可以通过为测试特别定义的Spring Bean来完成。然而，如果在Spring上下文中提供了具有相同名称的多个Bean，我们可能会遇到_BeanDefinitionOverrideException_。</p>
<p>本教程将展示如何在Spring Boot应用程序中模拟或存根集成测试Bean，同时避免_BeanDefinitionOverrideException_。</p>
<h2>2. 测试中的Mock或Stub</h2>
<p>在深入细节之前，我们应该对如何在测试中使用Mock或Stub充满信心。这是一种强大的技术，可以确保我们的应用程序不易受到错误的影响。</p>`,r:{minutes:6.03,words:1810},t:"Spring集成测试中覆盖Spring Bean",y:"a"}}],["/posts/baeldung/2024-06-27/2024-06-27-Representing%20Furthest%20Possible%20Date%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-27-Representing Furthest Possible Date in Java.html-CWA3_oMk.js"),__vite__mapDeps([259,1])),meta:{d:17194464e5,l:"2024年6月27日",c:["Java","Date"],g:["Date","Long","SimpleDateFormat"],e:`
<h2>1. 引言</h2>
<p>在处理默认或占位符日期时，表示最远可能的日期值是至关重要的场景。</p>
<p>在本教程中，我们将学习如何使用_java.util.Date_类和_java.lang.Long_类来表示最远可能的日期。</p>
<h2>2. 为什么要表示最远可能的日期？</h2>
<p>考虑我们正在开发一个软件许可系统，我们希望这些许可证除非明确设置过期，否则是无限期有效的。</p>
<p>在像这样的场景中，在我们的代码中有一个清晰的最远可能的日期值的表示至关重要。这种表示作为无到期日期的参考点，简化了检查和管理许可证有效性的逻辑。</p>
<h2>3. 最远可能的日期是什么？</h2>`,r:{minutes:2.61,words:783},t:"Java中表示最远可能的日期",y:"a"}}],["/posts/baeldung/2024-06-27/2024-06-27-Round%20the%20Date%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-27-Round the Date in Java.html-uwcjpeNR.js"),__vite__mapDeps([260,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Date-Time API"],g:["Java","Date","Rounding"],e:`
<p>在Java中处理日期时，我们可能需要将它们四舍五入到特定的单位，比如小时、天或月份。这提供了诸如为分析和报告目的聚合数据以及允许指定显示信息的详细程度等好处。</p>
<h2>1. 引言</h2>
<p>在本教程中，我们将学习如何使用<code>java.util.Date</code>、<code>LocalDateTime</code>和<code>ZonedDateTime</code>对日期进行四舍五入。</p>
<h2>2. 基本四舍五入</h2>
<p>在基本四舍五入方法中，我们可以截断Java中任何日期的时间部分。具体来说，这意味着将所有时间元素设置为零。以下是我们可以做到这一点的方法：</p>`,r:{minutes:4.02,words:1207},t:"Java中对日期进行四舍五入",y:"a"}}],["/posts/baeldung/2024-06-27/2024-06-27-Setting%20a%20Spring%20Bean%20to%20Null.html",{loader:()=>a(()=>import("./2024-06-27-Setting a Spring Bean to Null.html-BkfN0ppo.js"),__vite__mapDeps([261,1])),meta:{d:17194464e5,l:"2024年6月27日",c:["Spring","Java"],g:["Spring Framework","Bean Configuration"],e:`
<h2>1. 概述</h2>
<p>在本教程中，我们将学习如何在Spring上下文中将Bean设置为null。这在某些情况下可能会很有用，例如在测试时我们不想提供模拟对象。此外，在使用一些可选特性时，我们可能想要避免创建实现并传递null。</p>
<p>此外，这种方法可以创建占位符，如果我们想将选择所需实现的决定推迟到Bean生命周期之外。最后，这种技术可能是在废弃过程中的第一步，涉及从上下文中移除特定的Bean。</p>
<h2>2. 组件设置</h2>
<p>存在几种方法可以将Bean设置为null，这取决于上下文的配置方式。我们将考虑XML、注解和Java配置。我们将使用两个类进行简单的设置：</p>`,r:{minutes:4.26,words:1279},t:"在Spring中设置Bean为Null的多种方式",y:"a"}}],["/posts/baeldung/2024-06-27/2024-06-27-Sharing%20Memory%20Between%20JVMs.html",{loader:()=>a(()=>import("./2024-06-27-Sharing Memory Between JVMs.html-C9irVETl.js"),__vite__mapDeps([262,1])),meta:{d:17194464e5,l:"2024年6月27日",c:["Java","内存共享"],g:["JVM","内存映射","共享内存"],e:`
<p>在本教程中，我们将展示如何在同一台机器上运行的两个或更多JVM之间共享内存。这种能力实现了非常快速的进程间通信，因为我们可以在没有任何I/O操作的情况下移动数据块。</p>
<p>任何在现代操作系统中运行的进程都会获得所谓的虚拟内存空间。我们称之为“虚拟”，因为它看起来像是一个大型的、连续的、可私有寻址的内存空间，实际上它是由遍布物理RAM的页面组成的。这里，“页面”只是操作系统术语，指的是一块连续的内存，其大小范围取决于所使用的特定CPU架构。对于x86-64，页面可以小至4KB或大至1GB。</p>
<p>在给定时间，只有这个虚拟空间的一部分实际上被映射到物理页面。随着时间的推移，当进程开始为其任务消耗更多内存时，操作系统开始分配更多的物理页面，并将它们映射到虚拟空间。当对内存的需求超过物理上可用的内存时，操作系统将开始将当前未使用的页面交换到二级存储中，以为请求腾出空间。</p>`,r:{minutes:10.04,words:3013},t:"在同一机器上运行的多个JVM之间共享内存",y:"a"}}],["/posts/baeldung/2024-06-27/2024-06-27-Sorting%20List%20with%20String%20Dates%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-06-27-Sorting List with String Dates in Kotlin.html-BHIPNf3O.js"),__vite__mapDeps([263,1])),meta:{d:17194464e5,l:"2024年6月27日",c:["Kotlin","排序"],g:["Kotlin","日期排序","SimpleDateFormat","LocalDate","自定义比较器"],e:'\n<h2>1. 概述</h2>\n<p>在某些场景中，我们需要在列表中存储日期值以执行验证或进行进一步处理。在处理过程中需要解决的一个常见问题就是按特定顺序对数据进行排序。</p>\n<p>在本教程中，我们将探讨一些在Kotlin中对字符串日期列表进行排序的方法。</p>\n<h2>2. 实现</h2>\n<h3>2.1. 使用SimpleDateFormat</h3>\n<p>对字符串日期进行排序的一种方法是使用SimpleDateFormat将它们解析为Date对象，然后比较Date对象并相应地对列表进行排序：</p>\n<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>fun sortDatesDescending(dates: List``````&lt;String&gt;``````): List``````&lt;String&gt;`````` {\n    val dateFormat = SimpleDateFormat("dd-MM-yyyy")\n    return dates.sortedByDescending { dateFormat.parse(it) }\n}\n</code></pre></div>',r:{minutes:1.45,words:434},t:"Kotlin中对字符串日期列表进行排序",y:"a"}}],["/posts/baeldung/2024-06-27/2024-06-27-Switching%20Between%20Frames%20Using%20Selenium%20WebDriver%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-27-Switching Between Frames Using Selenium WebDriver in Java.html-B8x0GqYv.js"),__vite__mapDeps([264,1])),meta:{d:17194464e5,l:"2024年6月27日",c:["Selenium WebDriver","Java"],g:["测试自动化","Web自动化"],e:`
<h2>1. 引言</h2>
<p>管理框架和内联框架是测试自动化工程师的关键技能。<strong>Selenium WebDriver允许我们以相同的方式处理框架和内联框架。</strong></p>
<p>在本教程中，我们将探索几种使用Selenium WebDriver在框架之间切换的不同方法。这些方法包括使用_WebElement_、名称或ID以及索引。</p>
<p>最后，我们将能够自信地处理内联框架交互，增强我们的自动化测试的范围和有效性。</p>
<h2>2. 框架和内联框架之间的区别</h2>
<p>框架和内联框架这两个术语经常在Web开发中遇到。每个在结构化和增强Web内容方面都有不同的目的。</p>`,r:{minutes:4.92,words:1475},t:"使用Java中的Selenium WebDriver在框架之间切换",y:"a"}}],["/posts/baeldung/2024-06-27/2024-06-27-Synchronize%20a%20Static%20Variable%20Among%20Different%20Threads.html",{loader:()=>a(()=>import("./2024-06-27-Synchronize a Static Variable Among Different Threads.html-D8hPhgzm.js"),__vite__mapDeps([265,1])),meta:{d:17194464e5,l:"2024年6月27日",c:["Java","Concurrency"],g:["Java","Synchronization","Thread"],e:`
<p>在Java中，需要同步访问静态变量的情况并不少见。在这个简短的教程中，我们将探讨几种在不同线程之间同步访问静态变量的方法。</p>
<h2>2. 关于静态变量</h2>
<p>作为快速回顾，<strong>静态变量属于类而不是类的实例</strong>。这意味着类的所有实例都具有变量的相同状态。</p>
<p>例如，考虑一个带有静态变量的_Employee_类：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>
    <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token class-name">String</span> title<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:4.78,words:1435},t:"在不同线程中同步静态变量",y:"a"}}],["/posts/baeldung/2024-06-27/2024-06-27-Time%20Complexity%20of%20Java%20Collections%20Sort%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-27-Time Complexity of Java Collections Sort in Java.html-CfMmqXa8.js"),__vite__mapDeps([266,1])),meta:{d:17194464e5,l:"2024年6月27日",c:["Java","算法"],g:["Java Collections","时间复杂度"],e:`<hr>
<h1>Java中Collections.sort()的时间复杂度</h1>
<p>在本教程中，我们将利用Java微基准测试工具（JMH）探索_Collections.sort()_的时间复杂度，并提供示例来说明其效率。</p>
<h2>2. 时间复杂度</h2>
<p>理解算法的时间复杂度对于评估其效率至关重要。具体来说，<em>Collections.sort()<em>的时间复杂度在最佳情况下是_O(n)</em>，在最坏和平均情况下是_O(n log n)</em>，其中_n_是集合中元素的数量。</p>
<h3>2.1. 最佳情况时间复杂度</h3>
<p>在Java中，_Collections.sort()_使用TimSort算法进行排序。在以下示例中，TimSort算法首先确定运行长度，创建四个运行：</p>`,r:{minutes:3.79,words:1137},t:"Java中Collections.sort()的时间复杂度",y:"a"}}],["/posts/baeldung/2024-06-27/2024-06-27-Time%20Conversions%20Using%20TimeUnit.html",{loader:()=>a(()=>import("./2024-06-27-Time Conversions Using TimeUnit.html-9pJM0Q-f.js"),__vite__mapDeps([267,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java"],g:["TimeUnit","时间转换"],e:`
<p>当在Java中处理时间和持续时间计算时，_TimeUnit_枚举提供了一种方便的方式来在不同的单位之间执行时间转换。</p>
<p>无论是我们想要将秒转换为分钟，将毫秒转换为小时，还是执行任何其他时间单位转换，我们都可以利用_TimeUnit_来简化代码，获得准确的结果，并使事情更加可读。</p>
<p>在本教程中，我们将探讨如何在Java中使用_TimeUnit_进行时间转换。</p>
<h3>2. 理解_TimeUnit_</h3>
<p>_TimeUnit_是一个枚举，包含在_java.util.concurrent_包中，它表示从纳秒到天的各种时间单位。它提供了一组预定义的常量，每个常量对应一个特定的时间单位，包括：</p>`,r:{minutes:5.61,words:1682},t:"Java中使用TimeUnit进行时间转换",y:"a"}}],["/posts/baeldung/2024-06-27/2024-06-27-Unreachable%20Statements%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-27-Unreachable Statements in Java.html-D6SIWMA5.js"),__vite__mapDeps([268,1])),meta:{d:17195328e5,l:"2024年6月28日",c:["Java","编程"],g:["代码","编译错误"],e:`
<h2>1. 概述</h2>
<p>在本教程中，我们将讨论Java规范，该规范指出如果有任何语句是不可达的，编译器应该抛出错误。不可达语句是在程序执行期间永远无法执行的代码，因为程序流程无法到达它。我们将看到各种代码示例，这些示例符合这一定义。</p>
<h2>2. 循环中的_break_指令后的代码</h2>
<p><strong>在循环中，如果我们在_break_语句后放置指令，它们是不可达的：</strong></p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UnreachableStatement</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i \`<span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:3.04,words:912},t:"Java中的不可达语句 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-27/2024-06-27-Why%20Is%20sun.misc.Unsafe.park%20Actually%20Unsafe%20.html",{loader:()=>a(()=>import("./2024-06-27-Why Is sun.misc.Unsafe.park Actually Unsafe .html-DAhM93Gp.js"),__vite__mapDeps([269,1])),meta:{d:17194464e5,l:"2024年6月27日",c:["Java","Concurrency"],g:["Java","Unsafe","park","unpark"],e:`
<p>Java提供了一些仅供内部使用的API，并在其他情况下不鼓励不必要地使用。JVM开发者给包和类命名时使用了_Unsafe_这样的名称，以警告开发者。然而，这通常并不能阻止开发者使用这些类。</p>
<p>在本教程中，我们将学习为什么_Unsafe.park()_实际上不安全。目标不是吓唬人，而是教育并提供对_park()_和_unpark(Thread)_方法内部工作原理的更好理解。</p>
<p>_Unsafe_类包含一个低级API，旨在仅供内部库使用。然而，即使在引入JPMS之后，_sun.misc.Unsafe_仍然可以访问。这是为了保持向后兼容性并支持可能使用此API的所有库和框架。JEP 260中更详细地解释了原因。</p>`,r:{minutes:6.1,words:1831},t:"sun.misc.Unsafe.park 为何实际上不安全？ | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-27/2024-06-27-Working%20With%20MathFlux.html",{loader:()=>a(()=>import("./2024-06-27-Working With MathFlux.html-PMh97fEY.js"),__vite__mapDeps([270,1])),meta:{d:17195328e5,l:"2024年6月28日",c:["Spring","Reactive Programming"],g:["MathFlux","Project Reactor"],e:`
<h2>1. 概述</h2>
<p>Spring 响应式编程引入了一种新时代的应用，这些应用既响应迅速又可扩展。Project Reactor 是一个在该生态系统中管理异步和事件驱动编程的卓越工具包。</p>
<p>MathFlux 是 Project Reactor 的一个组件，它为我们提供了各种为响应式编程设计的数学函数。</p>
<p>在本教程中，我们将探索 Project Reactor 的 MathFlux 模块，并了解如何利用它在响应式流上执行各种数学运算。</p>
<h2>2. Maven 依赖</h2>
<p>让我们在我们的 IDE 中创建一个 Spring Boot 项目，并将 <em>reactor-core</em> 和 <em>reactor-extra</em> 依赖项添加到 <em>pom.xml</em> 文件中：</p>`,r:{minutes:3.16,words:948},t:"MathFlux 在 Spring 响应式编程中的使用",y:"a"}}],["/posts/baeldung/2024-06-27/2024-06-27-Working%20with%20Exceptions%20in%20Java%20CompletableFuture.html",{loader:()=>a(()=>import("./2024-06-27-Working with Exceptions in Java CompletableFuture.html-WeemqXI6.js"),__vite__mapDeps([271,1])),meta:{d:17194464e5,l:"2024年6月27日",c:["Java","CompletableFuture"],g:["Java","CompletableFuture","异常处理"],e:`
<p>Java 8引入了一种基于_Future_的新抽象概念来执行异步任务——<em>CompletableFuture_类。它基本上是用来克服旧版_Future</em> API的问题。</p>
<p>在本教程中，我们将探讨在使用_CompletableFuture_时处理异常的方法。</p>
<h2>CompletableFuture回顾</h2>
<p>首先，我们可能需要简要回顾一下_CompletableFuture_是什么。_CompletableFuture_是一种_Future_实现，允许我们运行并最重要的是，链式调用异步操作。一般来说，异步操作完成有三种可能的结果——正常完成、异常完成或从外部取消。_CompletableFuture_有各种API方法来处理所有这些可能的结果。</p>`,r:{minutes:5.26,words:1578},t:"Java CompletableFuture中的异常处理",y:"a"}}],["/posts/baeldung/2024-06-28/2024-06-28-%20ConditionalOnThreading%20Annotation%20Spring.html",{loader:()=>a(()=>import("./2024-06-28- ConditionalOnThreading Annotation Spring.html-BjusR_Dl.js"),__vite__mapDeps([272,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring","Annotation"],g:["ConditionalOnThreading","Spring Boot"],e:`
<p>寻找适合在云中运行现代Spring应用程序的理想Linux发行版？</p>
<p><strong>遇见Alpaquita Linux</strong>：轻量级、安全且功能强大，足以处理重负载。</p>
<p>这个发行版是<strong>专门为运行Java应用程序而设计的</strong>。它基于Alpine，并具有显著的增强功能，以在高密度容器环境中表现出色，同时满足业级安全标准。</p>
<p>具体来说，容器镜像大小比标准选项<strong>小约30%</strong>，并且它消耗的RAM<strong>少达30%</strong>：</p>
<p><strong>&gt;&gt; 立即尝试</strong> <strong>Alpaquita Containers。</strong></p>`,r:{minutes:3.06,words:919},t:"@ConditionalOnThreading 注解 Spring | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-28/2024-06-28-A%20Guide%20to%20RestClient%20in%20Spring%20Boot.html",{loader:()=>a(()=>import("./2024-06-28-A Guide to RestClient in Spring Boot.html-CO9zxfdN.js"),__vite__mapDeps([273,1])),meta:{d:17195328e5,l:"2024年6月28日",c:["Spring Boot","RestClient"],g:["Spring Framework","HTTP Client"],e:`
<h2>1. 引言</h2>
<p><em>RestClient</em> 是 Spring Framework 6.1 M2 中引入的同步 HTTP 客户端，它取代了 <em>RestTemplate</em>。同步 HTTP 客户端以阻塞方式发送和接收 HTTP 请求和响应，这意味着它在继续下一个请求之前会等待每个请求完成。</p>
<p>在本教程中，我们将探讨 <em>RestClient</em> 提供了什么，以及它与 <em>RestTemplate</em> 的比较。</p>
<h2>2. <em>RestClient</em> 与 <em>RestTemplate</em></h2>`,r:{minutes:5.67,words:1700},t:"Spring Boot 中的 RestClient 指南",y:"a"}}],["/posts/baeldung/2024-06-28/2024-06-28-A%20Guide%20to%20Spring%206%20JdbcClient%20API.html",{loader:()=>a(()=>import("./2024-06-28-A Guide to Spring 6 JdbcClient API.html-CTMumkuK.js"),__vite__mapDeps([274,1])),meta:{d:17195328e5,l:"2024年6月28日",c:["Spring Framework","JDBC"],g:["Spring 6","JdbcClient API"],e:`<hr>
<h1>Spring 6中的JdbcClient API指南</h1>
<h2>1. 概述</h2>
<p>在本教程中，我们将学习Spring Framework 6.1中最新添加的_JdbcClient_接口。它提供了一个流畅的接口，为_JdbcTemplate_和_NamedParameterJdbcTemplate_提供了统一的门面，这意味着现在它支持链式操作。<strong>我们现在可以用流畅的API风格定义查询，设置参数，并执行数据库操作</strong>。</p>
<p>这个特性简化了JDBC操作，使它们更易于阅读和理解。然而，我们必须回退到旧的_JdbcTemplate_和_NamedParameterJdbcTemplate_类来进行JDBC批量操作和存储过程调用。</p>`,r:{minutes:6.3,words:1890},t:"Spring 6中的JdbcClient API指南",y:"a"}}],["/posts/baeldung/2024-06-28/2024-06-28-Arrays%20mismatch%20%20%20Method%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-28-Arrays mismatch   Method in Java.html-Bi177gaY.js"),__vite__mapDeps([275,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Arrays"],g:["Java","Arrays","mismatch()"],e:`
<h2>1. 概述</h2>
<p>在本教程中，我们将了解 Arrays 类的 mismatch() 方法的行为。这个方法有三个主要的重载版本，每种类型都可用。我们将以 int 数组为例进行说明。</p>
<h2>2. 基础的 mismatch() 方法</h2>
<h3>2.1. 公共前缀的长度</h3>
<p>mismatch() 方法接受两个数组，并返回数组中第一个不同项的索引。例如，{1, 2, 3, 4, 5} 和 {1, 2, 3, 5, 8} 在索引 3 处不同。</p>
<p>让我们使用 JUnit5 编写单元测试来验证方法的行为是否符合预期：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenTwoArraysWithACommonPrefix_whenMismatch_thenIndexOfFirstMismatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> firstArray <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> secondArray <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">mismatch</span><span class="token punctuation">(</span>firstArray<span class="token punctuation">,</span> secondArray<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:4.03,words:1209},t:"Java 中 Arrays 类的 mismatch() 方法",y:"a"}}],["/posts/baeldung/2024-06-28/2024-06-28-Capitalize%20the%20First%20Letter%20of%20Each%20Word%20in%20a%20String.html",{loader:()=>a(()=>import("./2024-06-28-Capitalize the First Letter of Each Word in a String.html-BWxr-ajX.js"),__vite__mapDeps([276,1])),meta:{d:17195328e5,l:"2024年6月28日",c:["Java","String Manipulation"],g:["Capitalize","Java","JDK","Apache Commons"],e:`
<p>在这篇简短的教程中，我们将展示如何在Java中将特定字符串中每个单词的第一个字符大写。</p>
<p>首先，我们将解释如何使用JDK内置解决方案来实现这一点。然后，我们将演示如何使用如Apache Commons等外部库来达到相同的结果。</p>
<h3>2. 问题介绍</h3>
<p>这里的主要目标是将给定字符串中每个单词的首字母转换为大写。例如，假设我们有一个输入字符串：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> input <span class="token operator">=</span> <span class="token string">"Hi my name is azhrioun"</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:4.36,words:1309},t:"在Java中将字符串中每个单词的首字母大写",y:"a"}}],["/posts/baeldung/2024-06-28/2024-06-28-Check%20if%20a%20String%20Contains%20Only%20Unicode%20Letters.html",{loader:()=>a(()=>import("./2024-06-28-Check if a String Contains Only Unicode Letters.html-wCItp-wo.js"),__vite__mapDeps([277,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Unicode"],g:["String","Character","Regular Expression","Apache Commons Lang","Java Streams"],e:`
<p>在本教程中，我们将探讨不同的方法来检查字符串是否只包含Unicode字母。</p>
<p>Unicode是一种字符编码标准，代表了世界上大多数的书面语言。<strong>在Java中，确保字符串只包含Unicode字符对于维护数据完整性和避免意外行为非常重要</strong>。</p>
<h2>2. 字符类</h2>
<p>Java的_字符_类提供了一组静态方法，可以用来检查字符的各种属性。为了确定一个字符串是否只包含Unicode字母，我们可以遍历字符串中的每个字符并使用_字符.isLetter()_方法进行验证：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UnicodeLetterChecker</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">characterClassCheck</span><span class="token punctuation">(</span><span class="token class-name">String</span> input<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> input<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isLetter</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.94,words:881},t:"检查字符串是否只包含Unicode字母",y:"a"}}],["/posts/baeldung/2024-06-28/2024-06-28-Check%20if%20a%20String%20Contains%20a%20Number%20Value%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-28-Check if a String Contains a Number Value in Java.html-BRea1OFB.js"),__vite__mapDeps([278,1])),meta:{d:17195328e5,l:"2024年6月28日",c:["Java","String Manipulation"],g:["Java","String","Number Detection"],e:`
<p>在这篇简短的文章中，我们将重点介绍如何在Java中检查一个字符串是否包含数字。</p>
<p>首先，我们将考虑使用JDK的解决方案。然后，我们将展示如何使用如Guava和Apache Commons Lang等外部库来实现相同的目标。</p>
<h3>2. 问题介绍</h3>
<p>我们的主要目标是检查一个字符串是否包含数字。因此，基本思想是创建方法，如果给定的字符串包含数字则返回true，否则返回false。</p>
<p>请注意，我们<strong>假设我们的字符串非空且非null</strong>，以避免重复编写空和null检查的样板代码。</p>
<h3>3. 使用String类</h3>`,r:{minutes:5.31,words:1593},t:"在Java中检查字符串是否包含数字值",y:"a"}}],["/posts/baeldung/2024-06-28/2024-06-28-Conditional%20Exception%20Throwing%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-06-28-Conditional Exception Throwing in Kotlin.html-wgf8hp0g.js"),__vite__mapDeps([279,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin","Exception Handling"],g:["Kotlin","Exception","Conditional Throwing"],e:`
<p>异常处理是软件开发中不可或缺的一部分。</p>
<p>在本教程中，我们将深入探讨Kotlin中条件性异常抛出的习惯用法，Kotlin是一种现代且简洁的编程语言。</p>
<h2>2. 理解条件性抛出</h2>
<p>条件性抛出是指基于特定条件抛出异常的做法：</p>
<div class="language-kotlin" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token function">SomeException</span><span class="token punctuation">(</span><span class="token operator">..</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:6.53,words:1960},t:"Kotlin中的条件性异常抛出",y:"a"}}],["/posts/baeldung/2024-06-28/2024-06-28-Configuring%20the%20GlassFish%20Server%20in%20Eclipse.html",{loader:()=>a(()=>import("./2024-06-28-Configuring the GlassFish Server in Eclipse.html-C5bLY0EW.js"),__vite__mapDeps([280,1])),meta:{d:1696896e6,l:"2023年10月10日",c:["GlassFish","Eclipse"],g:["GlassFish Server","Java Enterprise"],e:`<hr>
<h1>在Eclipse中配置GlassFish服务器</h1>
<h2>1. 概述</h2>
<p><strong>GlassFish服务器是一个用于开发和部署Java企业应用的开源应用程序服务器</strong>。此外，它还提供对Web容器、负载均衡、配置和管理的控制台等的支持。</p>
<p>在本教程中，我们将一步一步学习如何在Eclipse IDE中配置GlassFish服务器。</p>
<p>要在Eclipse IDE中配置GlassFish服务器，我们必须在我们的机器上安装Eclipse IDE for Enterprise Java and Web Developers。</p>`,r:{minutes:3.26,words:977},t:"在Eclipse中配置GlassFish服务器",y:"a"}}],["/posts/baeldung/2024-06-28/2024-06-28-Convert%20From%20List%20of%20CompletableFuture%20to%20CompletableFuture%20List.html",{loader:()=>a(()=>import("./2024-06-28-Convert From List of CompletableFuture to CompletableFuture List.html-DPKfY0mv.js"),__vite__mapDeps([281,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","CompletableFuture"],g:["CompletableFuture","Java","异步编程"],e:"\n<p>在本教程中，我们将学习如何将<code>List``&lt;CompletableFuture&lt;T&gt;``&gt;</code>对象转换为<code>CompletableFuture``&lt;List&lt;T&gt;``&gt;</code>。</p>\n<p>这种转换在许多情况下都非常有用。<strong>一个典型的例子是我们不得不对远程服务进行多次调用，这通常是一个异步操作，并将结果聚合到一个单独的<code>List</code>中</strong>。此外，我们最终等待一个单一的<code>CompletableFuture</code>对象，它在所有操作完成后提供结果列表，或者如果一个或多个操作失败则抛出异常。</p>",r:{minutes:4.39,words:1318},t:"如何将CompletableFuture列表转换为CompletableFuture的列表",y:"a"}}],["/posts/baeldung/2024-06-28/2024-06-28-Convert%20String%20Containing%20XML%20to%20org.w3c.dom.Document.html",{loader:()=>a(()=>import("./2024-06-28-Convert String Containing XML to org.w3c.dom.Document.html-BBwtcD5E.js"),__vite__mapDeps([282,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","XML"],g:["DOM","XML Parsing"],e:`
<p>XML（可扩展标记语言）是当今最常见的数据格式之一，广泛应用于应用程序之间的数据结构化和交换。此外，在Java中，将XML标记文本的某些部分转换为_org.w3c.dom.Document_对象是常见的用例。</p>
<p>在本教程中，我们将讨论如何在Java中将包含XML内容的字符串转换为_Org.w3c.dom.Document_。</p>
<p>_org.w3c.dom.Document_是Java中文档对象模型（DOM）XML API的一个核心组件。这个重要的类代表整个XML文档，并提供了一套全面的方法来浏览、修改和检索XML文档中的数据。在Java中使用XML时，_org.w3c.dom.Document_对象成为一个不可或缺的工具。</p>`,r:{minutes:3.06,words:918},t:"将包含 XML 的字符串转换为 org.w3c.dom.Document",y:"a"}}],["/posts/baeldung/2024-06-28/2024-06-28-Convert%20an%20XML%20Object%20to%20a%20String%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-28-Convert an XML Object to a String in Java.html-Dxow0qwG.js"),__vite__mapDeps([283,1])),meta:{d:17195328e5,l:"2024年6月28日",c:["XML","Java"],g:["XML转换","文档对象模型","简单API"],e:`
<p>XML（可扩展标记语言）是用于信息结构化的一种非常流行的模式。此外，在Java中解析和操作XML文档通常使用DOM（文档对象模型）和SAX（简单API for XML）等技术。</p>
<p>在某些情况下，可能需要将XML文档对象转换为其字符串形式，这可以用于将XML信息存储在数据库中或通过网络传输。</p>
<p><strong>在本教程中，我们将讨论在Java中将XML文档对象转换为字符串的几种方法。</strong></p>
<p>假设我们有以下文档对象：</p>
<p><code>Document document = // ...</code></p>
<p>此文档对象在内存中表示XML内容：</p>`,r:{minutes:2.23,words:670},t:"在Java中将XML对象转换为字符串",y:"a"}}],["/posts/baeldung/2024-06-28/2024-06-28-Difference%20Between%20%20final%20static%20%20and%20%20static%20final%20.html",{loader:()=>a(()=>import("./2024-06-28-Difference Between  final static  and  static final .html-B5R3LkQp.js"),__vite__mapDeps([284,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java"],g:["final","static"],e:`<hr>
<h1>Java中“final static”与“static final”的区别</h1>
<p>关键词_final_和_static_在Java中有不同的含义，但它们可以一起使用来声明一个常量变量。</p>
<p>在本教程中，我们将讨论_final static_和_static final_之间的区别。</p>
<h2><strong>2. <em>final_和_static</em>：简要概述</strong></h2>
<p>_final_关键字表示一个变量一旦被初始化就不能重新赋值。这对于防止对重要变量的意外更改非常有用。</p>
<p>_static_关键字表示一个变量属于类本身，而不是类的任何特定实例。这意味着<strong>只有一个变量副本，由类的所有实例共享</strong>。</p>`,r:{minutes:2.2,words:659},t:"Java中“final static”与“static final”的区别",y:"a"}}],["/posts/baeldung/2024-06-28/2024-06-28-Difference%20Between%20ZipFile%20and%20ZipInputStream%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-28-Difference Between ZipFile and ZipInputStream in Java.html-7Jx9hfLe.js"),__vite__mapDeps([285,1])),meta:{d:17195328e5,l:"2024年6月28日",c:["Java","编程"],g:["ZipFile","ZipInputStream"],e:`
<p>在需要将多个文件压缩成一个单一的归档文件以方便传输和节省空间的情况下，<strong>Zip 是一种广泛使用的压缩归档文件格式。</strong></p>
<p>Java 提供了一套标准类，如 <em>ZipFile</em> 和 <em>ZipInputStream</em>，用于访问 zip 文件。在本教程中，我们将学习如何使用它们来读取 zip 文件。同时，我们将探索它们的功能差异并评估它们的性能。</p>
<h2>2. 创建 Zip 文件</h2>
<p>在我们深入到读取 zip 文件的代码之前，让我们先回顾一下创建 zip 文件的过程。</p>
<p>在以下代码片段中，我们将有两个变量。<em>data</em> 存储要压缩的内容，<em>file</em> 代表我们的目的地文件：</p>`,r:{minutes:4.98,words:1495},t:"Java 中 ZipFile 与 ZipInputStream 的区别",y:"a"}}],["/posts/baeldung/2024-06-28/2024-06-28-Drawbacks%20of%20the%20Singleton%20Design%20Pattern.html",{loader:()=>a(()=>import("./2024-06-28-Drawbacks of the Singleton Design Pattern.html-XD-kZMpG.js"),__vite__mapDeps([286,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","设计模式"],g:["单例模式","设计模式"],e:`
<p>单例是1994年由四人帮（Gang of Four）发布的一种创建型设计模式。</p>
<p>由于其简单的实现方式，我们倾向于过度使用它。因此，现在它被认为是一种反模式。在将单例模式引入我们的代码之前，我们应该自问是否真的需要它提供的功能。</p>
<p>在本教程中，我们将讨论单例设计模式的一般缺点，并看看我们可以使用的替代方案。</p>
<h3>2. 代码示例</h3>
<p>首先，让我们创建一个我们将在示例中使用的类：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Logger</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Logger</span> instance<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">PrintWriter</span> fileWriter<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Logger</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">Logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            fileWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"app.log"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> log <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"[%s]- %s"</span><span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        fileWriter<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span>
        fileWriter<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:6.44,words:1931},t:"单例设计模式的缺点",y:"a"}}],["/posts/baeldung/2024-06-28/2024-06-28-How%20To%20Manage%20Timeout%20for%20CompletableFuture.html",{loader:()=>a(()=>import("./2024-06-28-How To Manage Timeout for CompletableFuture.html-CkBHed7J.js"),__vite__mapDeps([287,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java"],g:["CompletableFuture","异步编程"],e:`
<p>当我们构建依赖于其他服务的服务时，通常需要处理依赖服务响应过慢的情况。</p>
<p>如果我们使用CompletableFuture来异步管理对我们依赖项的调用，它的超时功能使我们能够为结果设置最大等待时间。如果预期的结果在指定时间内没有到达，我们可以采取行动，例如提供默认值，以防止我们的应用程序陷入漫长的过程。</p>
<p>在本文中，我们将讨论三种不同的CompletableFuture超时管理方式。</p>
<p>设想一个电子商务应用程序，它需要调用外部服务以获取特殊产品优惠。**我们可以使用带有超时设置的CompletableFuture来保持响应性。**如果服务未能及时响应，这可以抛出错误或提供默认值。</p>`,r:{minutes:4.76,words:1428},t:"如何管理CompletableFuture的超时",y:"a"}}],["/posts/baeldung/2024-06-28/2024-06-28-How%20to%20Center%20Text%20Output%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-28-How to Center Text Output in Java.html-BsYFlARD.js"),__vite__mapDeps([288,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Text Processing"],g:["String","StringBuilder","StringUtils"],e:`
<p>在基于Java的文本应用程序中，经常需要对文本进行居中对齐。此外，在为Xbox开发应用程序、命令行工具或任何涉及改善文本视觉表现的应用程序时，居中文本可以提升用户体验。</p>
<p><strong>在本教程中，我们将深入探讨Java中文本输出居中对齐的不同方法。</strong></p>
<h2>2. 使用String格式化</h2>
<p>Java中居中文本的最快方式可以通过使用String类的format()方法提供。让我们看以下示例：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenTextAndTotalWidth_whenUsingStringFormat_thenTextIsCentered</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> text <span class="token operator">=</span> <span class="token string">"Centered Text"</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> totalWidth <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> padding <span class="token operator">=</span> <span class="token punctuation">(</span>totalWidth <span class="token operator">-</span> text<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> centeredText <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%"</span> <span class="token operator">+</span> padding <span class="token operator">+</span> <span class="token string">"s%s%"</span> <span class="token operator">+</span> padding <span class="token operator">+</span> <span class="token string">"s"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> text<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">" Centered Text "</span><span class="token punctuation">,</span> centeredText<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.16,words:647},t:"Java中文本居中输出的不同方法",y:"a"}}],["/posts/baeldung/2024-06-28/2024-06-28-How%20to%20Create%20CSV%20File%20from%20POJO%20with%20Custom%20Column%20Headers%20and%20Positions.html",{loader:()=>a(()=>import("./2024-06-28-How to Create CSV File from POJO with Custom Column Headers and Positions.html-Be3_5ddT.js"),__vite__mapDeps([289,1])),meta:{d:17195328e5,l:"2024年6月28日",c:["Java","CSV"],g:["POJO","OpenCSV","CSV文件"],e:'\n<p>CSV是系统和应用程序之间常见的数据交换格式之一。一个常见的用例是构建处理这些CSV文件的Java应用程序。在将数据写入CSV文件时，我们需要将我们的普通旧Java对象（POJO）映射到CSV格式。</p>\n<p>在本教程中，我们将学习如何使用自定义位置和标题名称将POJO映射到CSV格式。</p>\n<h2>2. OpenCSV库</h2>\n<p>OpenCSV是处理CSV文件的非常流行的库。我们首先需要向我们的项目添加Maven依赖项：</p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`com.opencsv`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`opencsv`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`5.9`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n</code></pre></div>',r:{minutes:3.8,words:1139},t:"如何使用自定义列头和位置从POJO创建CSV文件",y:"a"}}],["/posts/baeldung/2024-06-28/2024-06-28-How%20to%20Document%20Generic%20Type%20Parameters%20in%20Javadoc.html",{loader:()=>a(()=>import("./2024-06-28-How to Document Generic Type Parameters in Javadoc.html-ab1A-xtv.js"),__vite__mapDeps([290,1])),meta:{d:16987968e5,l:"2023年11月1日",c:["Java"],g:["JavaDoc","Generics"],e:`
<p>泛型在Java中提供了灵活性，它允许在定义类、构造器、接口或方法时将类型作为参数。@param 标签是编写Java文档时记录泛型类型参数的标准标签。</p>
<p>在本教程中，我们将探讨使用@param 标签记录Java中泛型类型参数的最佳实践。</p>
<h2>@param 标签</h2>
<p>@param 标签是记录公共方法、构造器、类等的参数和泛型类型参数的标准标签。</p>
<p>一个良好的Javadoc注释必须正确描述方法参数，以便易于理解。以下是基本语法：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> [参数名称] [参数描述]
 */</span>
</code></pre></div>`,r:{minutes:3.36,words:1007},t:"如何在Javadoc中记录泛型类型参数",y:"a"}}],["/posts/baeldung/2024-06-28/2024-06-28-How%20to%20Get%20First%20or%20Last%20Entry%20From%20a%20LinkedHashMap%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-28-How to Get First or Last Entry From a LinkedHashMap in Java.html-ByCpmR2b.js"),__vite__mapDeps([291,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java Collections","LinkedHashMap"],g:["Java","LinkedHashMap","Entry"],e:`<hr>
<h1>如何在Java中从LinkedHashMap获取首或尾条目</h1>
<p>在Java中，<em>LinkedHashMap</em> 是一个强大的工具，用于维护键值对的同时保持插入顺序。一个常见的需求是访问 <em>LinkedHashMap</em> 中的第一个或最后一个条目。</p>
<p>在本教程中，我们将探讨实现这一点的各种方法。</p>
<h2>2. 准备一个 <em>LinkedHashMap</em> 示例</h2>
<p>在深入实现访问 <em>LinkedHashMap</em> 中第一个和最后一个条目的方法之前，让我们简要回顾一下 <em>LinkedHashMap</em> 的特性。</p>`,r:{minutes:6.53,words:1959},t:"如何在Java中从LinkedHashMap获取首或尾条目",y:"a"}}],["/posts/baeldung/2024-06-28/2024-06-28-How%20to%20Iterate%20Over%20the%20String%20Characters%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-28-How to Iterate Over the String Characters in Java.html-qbpQ9Nq3.js"),__vite__mapDeps([292,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Programming"],g:["String","Iteration"],e:`
<h2>1. 概述</h2>
<p>在本教程中，我们将熟悉在Java中迭代字符串字符的几种方式，以及它们的时间和空间复杂度。</p>
<h2>2. 迭代字符串的常见方式</h2>
<p>在Java中，有几种方式可以迭代字符串的字符，每种方式都有自己的时间和空间复杂度。使用最佳方法取决于您的程序的具体需求。</p>
<h3>2.1. for循环</h3>
<p>我们可以使用一个简单的for循环来迭代字符串的字符。这种方法的时间复杂度为O(n)，其中n是字符串str的长度，空间复杂度为O(1)，因为它只要求一个单独的循环变量：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"Hello, Baeldung!"</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i \`<span class="token operator">&lt;</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> c <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.41,words:723},t:"如何在Java中迭代字符串字符 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-28/2024-06-28-How%20to%20Mock%20Environment%20Variables%20in%20Unit%20Tests.html",{loader:()=>a(()=>import("./2024-06-28-How to Mock Environment Variables in Unit Tests.html-C46_Eh3a.js"),__vite__mapDeps([293,1])),meta:{d:16492896e5,l:"2022年4月7日",c:["Testing","Java"],g:["JUnit","TestNG","Environment Variables"],e:`
<p>当我们的单元测试依赖于环境变量时，我们可能希望在测试实现中为它们提供特定的值。</p>
<p>Java不允许我们编辑环境变量，但我们可以使用一些变通方法，还有一些库可以帮助我们。</p>
<p>在本教程中，我们将探讨依赖环境变量进行单元测试的挑战，Java在最近版本中使这变得更加困难，以及JUnit Pioneer、System Stubs、System Lambda和System Rules库。我将为JUnit 4、JUnit 5和TestNG查看这些内容。</p>
<h2>2. 更改环境变量的挑战</h2>
<p>在其他语言中，比如JavaScript，我们可以非常容易地在测试中修改环境：</p>`,r:{minutes:13.05,words:3916},t:"如何在单元测试中模拟环境变量",y:"a"}}],["/posts/baeldung/2024-06-28/2024-06-28-How%20to%20Reuse%20Testcontainers%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-28-How to Reuse Testcontainers in Java.html-CTC-dBTp.js"),__vite__mapDeps([294,1])),meta:{d:16980192e5,l:"2023年10月23日",c:["Java","Testcontainers"],g:["Java","Testcontainers","Reuse","Local Development","Testing"],e:`
<p>在本教程中，我们将学习如何在本地开发和测试环境中设置环境时重用Testcontainers。</p>
<p>首先，我们必须确保在应用程序停止或测试套件完成时不关闭容器。之后，我们将讨论Testcontainer特定的配置，并讨论使用Testcontainers桌面应用程序的好处。最后，我们需要记住，重用Testcontainers是一个实验性功能，目前还不适合在CI流水线中使用。</p>
<h2>2. 确保Testcontainer不被停止</h2>
<p>通过@_Testcontainers和@_Container注解，我们可以简单地为我们的单元测试启用Testcontainers。</p>`,r:{minutes:4.28,words:1284},t:"如何在Java中重用Testcontainers",y:"a"}}],["/posts/baeldung/2024-06-28/2024-06-28-How%20to%20Set%20Up%20Environment%20Variables%20in%20IntelliJ%20IDEA.html",{loader:()=>a(()=>import("./2024-06-28-How to Set Up Environment Variables in IntelliJ IDEA.html-BALcaxbR.js"),__vite__mapDeps([295,1])),meta:{d:1696896e6,l:"2023年10月10日",c:["IntelliJ IDEA","环境变量"],g:["环境变量","配置","应用"],e:`
<h2>1. 概述</h2>
<p>环境变量通常是配置应用程序的关键和重要部分。它们主要允许我们存储敏感数据、配置设置和其他我们可以从代码中访问的变量。在IntelliJ IDEA中设置环境变量是一个简单直接的过程。</p>
<p>在本教程中，我们将探讨如何在IntelliJ IDEA中设置环境变量。我们还将了解环境变量在应用程序中的重要性和用途。</p>
<h2>2. 为什么使用环境变量</h2>
<p>使用环境变量，我们可以在不同的环境中运行应用程序（本地、舞台、生产、开发）。它主要帮助我们配置项目以在不同的环境中运行，而无需修改实际代码。<strong>因此，使用环境变量，我们可以处理其他分发，使其与平台无关。</strong></p>`,r:{minutes:3.06,words:919},t:"如何在IntelliJ IDEA中设置环境变量 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-28/2024-06-28-How%20to%20Write%20Hashmap%20to%20CSV%20File.html",{loader:()=>a(()=>import("./2024-06-28-How to Write Hashmap to CSV File.html-Bzww2COI.js"),__vite__mapDeps([296,1])),meta:{d:17196192e5,l:"2024年6月29日",c:["Java","CSV"],g:["HashMap","CSV","Apache Commons CSV"],e:`
<hr>
<p><strong>1. 引言</strong></p>
<p>逗号分隔值（CSV）文件易于操作，适用于各种数据存储和交换应用。Java开发者在处理像HashMap这样的数据结构时，有时会需要将数据导出到CSV文件。</p>
<p><strong>在本教程中，我们将学习如何将HashMap写入CSV文件。</strong></p>
<p><strong>2. 手动将HashMap写入CSV</strong></p>
<p><strong>为了将数据写入“employee_data.csv”文件，我们将使用FileWriter类的帮助。</strong> 之后，每行员工数据被插入到单独的EmployeeData单元格中。以下是完成此操作的代码：</p>`,r:{minutes:2.17,words:652},t:"如何将HashMap写入CSV文件",y:"a"}}],["/posts/baeldung/2024-06-28/2024-06-28-HttpSecurity%20vs.%20WebSecurity%20in%20Spring%20Security.html",{loader:()=>a(()=>import("./2024-06-28-HttpSecurity vs. WebSecurity in Spring Security.html-BSXgdThl.js"),__vite__mapDeps([297,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Security","OAuth"],g:["HttpSecurity","WebSecurity"],e:`
<p>如果你正在处理Spring Security（尤其是OAuth）的实现，一定要看看《学习Spring Security》课程。</p>
<h2>1. 概览</h2>
<p>Spring Security框架提供了_WebSecurity_和_HttpSecurity_类，以提供对API和资源的全局和资源特定的访问限制机制。_WebSecurity_类有助于在全局级别配置安全性，而_HttpSecurity_提供了为特定资源配置安全性的方法。</p>
<p>在本教程中，我们将详细查看_HttpSecurity_和_WebSecurity_的关键用途。我们还将看到这两个类之间的区别。</p>`,r:{minutes:5.22,words:1566},t:"Spring Security中的HttpSecurity与WebSecurity | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-28/2024-06-28-Implement%20Connect%204%20Game%20with%20Java.html",{loader:()=>a(()=>import("./2024-06-28-Implement Connect 4 Game with Java.html-D6smdJLS.js"),__vite__mapDeps([298,1])),meta:{d:16980192e5,l:"2023年10月23日",c:["Java","游戏开发"],g:["Connect 4","Java","游戏实现"],e:`
<h2><strong>1. 引言</strong></h2>
<p>在本文中，我们将看到如何在Java中实现Connect 4游戏。我们将了解游戏的外观和玩法，然后探讨如何实现这些规则。</p>
<h2><strong>2. 什么是Connect 4？</strong></h2>
<p>在我们能够实现游戏之前，我们需要理解游戏的规则。</p>
<p>Connect 4是一个相对简单的游戏。玩家轮流将棋子放入一堆堆的顶部。每回合结束后，如果任何玩家的棋子在任何直线方向上——水平、垂直或对角线——形成了四连线，那么该玩家就是赢家：</p>
<figure><img src="https://www.baeldung.com/wp-content/uploads/2023/10/Screenshot-2023-10-23-at-07.26.48-300x230.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>`,r:{minutes:6.83,words:2048},t:"实现Java版的Connect 4游戏 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-28/2024-06-28-Intro%20to%20Vector%20Class%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-28-Intro to Vector Class in Java.html-9yeibiY3.js"),__vite__mapDeps([299,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Collections Framework"],g:["Vector","ArrayList"],e:`
<p>向量类是一个可增长的对象数组的线程安全实现。它实现了java.util.List接口，并且是Java集合框架的一部分。虽然它与ArrayList类似，但这些类在实现上有着显著的差异。</p>
<p>在本教程中，我们将探索向量类及其一些最常见的操作和方法。</p>
<p>向量类被设计为一个可以根据应用程序需求扩展或收缩的动态数组。因此，我们可以使用索引访问向量中的对象。此外，它维护插入顺序并存储重复元素。</p>
<p>每个向量都通过跟踪容量和capacityIncrement来增强其存储处理。容量不过是向量的大小。当我们向向量中添加元素时，向量的大小会增加。因此，容量始终保持等于或大于向量的大小。</p>`,r:{minutes:5.44,words:1632},t:"Java中向量类的介绍",y:"a"}}],["/posts/baeldung/2024-06-28/2024-06-28-Introduction%20to%20LangChain.html",{loader:()=>a(()=>import("./2024-06-28-Introduction to LangChain.html-BVH_lbz7.js"),__vite__mapDeps([300,1])),meta:{d:17195328e5,l:"2024年6月28日",c:["Tutorial","Language Models"],g:["LangChain","Java"],e:`
<p>在本教程中，我们将探讨 LangChain 的细节，这是一个用于开发由语言模型驱动的应用程序的框架。我们将首先收集语言模型的基本概念，这些概念将有助于本教程。</p>
<p>尽管 LangChain 主要在 Python 和 JavaScript/TypeScript 版本中可用，但也有在 Java 中使用 LangChain 的选项。我们将讨论 LangChain 作为框架的构建块，然后继续在 Java 中进行实验。</p>
<h2>2. 背景</h2>
<p>在我们深入探讨为什么需要一个框架来构建由语言模型驱动的应用程序之前，我们首先必须理解什么是语言模型。我们还将涵盖使用语言模型时遇到的一些典型复杂性。</p>`,r:{minutes:8.24,words:2471},t:"LangChain 简介",y:"a"}}],["/posts/baeldung/2024-06-28/2024-06-28-JNDI%20%20%20What%20Is%20java%20comp%20env%20.html",{loader:()=>a(()=>import("./2024-06-28-JNDI   What Is java comp env .html-CVDVqnRU.js"),__vite__mapDeps([301,1])),meta:{d:17195328e5,l:"2024年6月28日",c:["JNDI","Java"],g:["Spring Boot","Spring Security","Spring Data JPA"],e:`
<p>Java命名和目录接口（JNDI）是一个应用程序编程接口（API），它为基于Java的应用程序提供命名和目录服务。我们可以使用这个接口绑定对象/资源，查找或查询对象，并检测这些对象上的更改。</p>
<p>在本教程中，我们将特别探讨在JNDI命名中使用“java:comp/env”标准前缀的背景。</p>
<h2>什么是Java命名和目录接口？</h2>
<p>简单来说，命名服务是一个将名称与对象关联起来的接口，然后通过这些名称帮助找到这些对象。因此，命名服务维护了一组绑定，这些绑定将名称映射到对象。</p>
<p>JNDI API使应用程序组件和客户端能够查找分布式资源、服务和EJB。</p>`,r:{minutes:4.21,words:1263},t:"JNDI - java:comp/env 是什么？ | Baeldung## 概述",y:"a"}}],["/posts/baeldung/2024-06-28/2024-06-28-Localized%20Validation%20Messages%20in%20REST.html",{loader:()=>a(()=>import("./2024-06-28-Localized Validation Messages in REST.html-B9iO0VPC.js"),__vite__mapDeps([302,1])),meta:{d:17195328e5,l:"2024年6月28日",c:["REST","国际化"],g:["RESTful Web Services","国际化"],e:`
<hr>
<p>在多语言环境中设计应用程序时，我们经常需要提供本地化的消息。在这种情况下，使用用户选择的语言发送消息是一种常见做法。</p>
<p>当我们收到对REST Web服务的客户端请求时，我们必须确保传入的客户端请求在处理之前符合预定义的验证规则。验证的目的是维护数据完整性并增强系统安全性。当验证失败时，服务负责提供信息性消息以指示请求存在什么问题。</p>
<p>在本教程中，我们将探讨在REST Web服务中提供本地化验证消息的实现。</p>
<h2>2. 基本步骤</h2>
<p>我们的旅程从使用资源包作为存储本地化消息的仓库开始。然后，我们将资源包与Spring Boot集成，这允许我们在应用程序中检索本地化消息。</p>`,r:{minutes:6.96,words:2088},t:"REST服务中的本地化验证消息",y:"a"}}],["/posts/baeldung/2024-06-28/2024-06-28-Optional%20as%20a%20Record%20Parameter%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-28-Optional as a Record Parameter in Java.html-CtQXzdXr.js"),__vite__mapDeps([303,1])),meta:{d:17195328e5,l:"2024年6月28日",c:["Java","Optional"],g:["Java记录","Optional参数"],e:`<hr>
<h1>Java记录和Optional参数的使用及其问题</h1>
<h2>1. 引言</h2>
<p>在本教程中，我们将讨论将_Optional_作为记录参数使用的可能性以及为什么这是一个不良实践。</p>
<h2>2. _Optional_的预期用途</h2>
<p>在讨论_Optional_和记录之间的关系之前，让我们快速回顾一下Java中_Optional_的预期用途。</p>
<p>通常，在Java 8之前，我们使用_null_来表示对象的空状态。然而，将_null_作为返回值需要调用者在运行时进行_null_检查验证。如果调用者没有验证，可能会得到一个_NullPointerException_。有时获取异常被用来识别值的缺失。</p>`,r:{minutes:4.9,words:1471},t:"Java记录和Optional参数的使用及其问题",y:"a"}}],["/posts/baeldung/2024-06-28/2024-06-28-Overriding%20Cucumber%20Option%20Values.html",{loader:()=>a(()=>import("./2024-06-28-Overriding Cucumber Option Values.html-jta4RlUq.js"),__vite__mapDeps([304,1])),meta:{d:17195328e5,l:"2024年6月28日",c:["Java","Cucumber"],g:["测试","配置"],e:`
<p>在本教程中，我们将学习三种不同的方法来覆盖Cucumber选项值。从优先级的角度来看，Cucumber将解析并覆盖以下来源的选项：</p>
<ul>
<li>系统属性、环境变量和_cucumber.properties_文件</li>
<li>_@CucumberOptions_注解</li>
<li>命令行参数</li>
</ul>
<p>为了展示每种方法，我们将运行一个简单的特性文件，包含两个场景，并覆盖Cucumber的_tags_选项。</p>
<h2>2. 设置</h2>
<p>在介绍每种方法之前，我们需要做一些初始设置。首先，让我们添加_cucumber-java, cucumber-junit, cucumber-spring,_和_junit-vintage-engine_依赖项：</p>`,r:{minutes:3.09,words:926},t:"如何覆盖Cucumber选项值",y:"a"}}],["/posts/baeldung/2024-06-28/2024-06-28-Passing%20Strings%20by%20Reference%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-28-Passing Strings by Reference in Java.html-C5EbLC17.js"),__vite__mapDeps([305,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","String"],g:["Java","String","StringBuilder","StringBuffer","引用传递"],e:`
<ol>
<li>概述</li>
</ol>
<p>有时，我们可能希望在Java中的方法内传递并修改一个字符串。例如，当我们想要将另一个字符串附加到输入的字符串上。然而，输入变量在方法内部有其作用域。此外，字符串是不可变的。因此，如果我们不理解Java的内存管理，找到解决方案就不清楚了。</p>
<p>在本教程中，我们将理解输入字符串是如何传递给方法的。我们将看到如何使用StringBuilder以及如何通过创建新对象来保持不变性。</p>
<ol start="2">
<li>按值传递还是按引用传递</li>
</ol>
<p>作为面向对象的语言，Java可以定义原始类型和对象。它们可以存储在栈或堆内存中。此外，它们可以通过值或引用传递给方法。</p>`,r:{minutes:4.94,words:1482},t:"Java中通过引用传递字符串",y:"a"}}],["/posts/baeldung/2024-06-28/2024-06-28-PrintWriter%20vs.%20FileWriter%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-28-PrintWriter vs. FileWriter in Java.html-BIxScoZi.js"),__vite__mapDeps([306,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","文件操作"],g:["PrintWriter","FileWriter"],e:`
<h2>1. 概览</h2>
<p>Java标准库提供了文件操作的API。<strong>PrintWriter和FileWriter类帮助将字符写入到文件中</strong>。然而，这两个类适用于不同的使用场景。</p>
<p>在本教程中，我们将探讨PrintWriter和FileWriter的详细情况，包括它们的用例。同时，我们还将看到这两个类之间的区别和相似之处。</p>
<p><strong>PrintWriter类帮助将格式化文本写入到输出流，如文件和控制台</strong>。</p>
<p>此外，PrintWriter类的方法不会抛出IOException。相反，它有一个checkError()方法来了解写操作的状态。checkError()方法如果写操作通过则返回false，如果由于错误失败则返回true。</p>`,r:{minutes:3.72,words:1117},t:"Java中的PrintWriter与FileWriter对比 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-28/2024-06-28-Remove%20Elements%20From%20a%20Queue%20Using%20Loop.html",{loader:()=>a(()=>import("./2024-06-28-Remove Elements From a Queue Using Loop.html-01XK-b6t.js"),__vite__mapDeps([307,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Tutorials"],g:["Queue","Java"],e:`<hr>
<h1>从队列中使用循环删除元素</h1>
<h2>1. 引言</h2>
<p>计算机科学中的一种基本数据结构称为队列，它遵循先进先出（FIFO）的原则。此外，队列过程涉及将项目添加到尾部并在头部删除它们，这在Java的_Queue_接口中提供。</p>
<p>然而，在某些情况下，根据特定条件从队列中删除一些元素将是必需的。</p>
<p><strong>在本教程中，我们将讨论使用Java中的循环从队列中删除元素。</strong></p>
<h2>2. 从队列中删除偶数</h2>
<p>在删除元素时，可以根据自定义条件从队列中删除元素。如果它是一个只包含偶数值的整数队列，让我们尝试根除们。为此，我们将使用循环遍历队列并删除所有偶数，如下所示：</p>`,r:{minutes:2.38,words:715},t:"从队列中使用循环删除元素",y:"a"}}],["/posts/baeldung/2024-06-28/2024-06-28-Retry%20Logic%20with%20CompletableFuture.html",{loader:()=>a(()=>import("./2024-06-28-Retry Logic with CompletableFuture.html-BhATmMl8.js"),__vite__mapDeps([308,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","CompletableFuture"],g:["CompletableFuture","重试逻辑","Java"],e:`
<p>在这篇文章中，我们将学习如何对CompletableFuture对象应用重试逻辑。起初，我们将重试封装在CompletableFuture中的任务。之后，我们将利用CompletableFuture API创建多个实例的链，使我们能够在将来遇到异常完成时重新执行任务。</p>
<h3>2. 重试任务</h3>
<p><strong>简单重试任务的方法是利用装饰者模式，并使用传统的面向对象风格通过类和接口实现它。</strong> 另一方面，我们可以选择更简洁和函数式的方法，利用高阶函数的优势。</p>
<p>首先，我们将声明一个函数，它接受一个Supplier<code>&lt;T&gt;</code>和最大调用次数作为参数。然后，我们将使用while循环和try-catch块在需要时多次调用函数。最后，我们将通过返回另一个Supplier<code>&lt;T&gt;</code>来保留原始数据类型：</p>`,r:{minutes:5.99,words:1797},t:"CompletableFuture中的重试逻辑",y:"a"}}],["/posts/baeldung/2024-06-28/2024-06-28-Split%20Java%20String%20Into%20Key%20Value%20Pairs.html",{loader:()=>a(()=>import("./2024-06-28-Split Java String Into Key Value Pairs.html-9rXLjZSQ.js"),__vite__mapDeps([309,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","String Manipulation"],g:["Java","String Split","Key-Value Pairs"],e:`
<p>在处理像CSV（逗号分隔值）或自定义分隔数据这样的格式时，经常需要在Java中将字符串分割成键值对。本教程将通过代码示例和解释，探讨如何将Java文本分割成键值对。</p>
<h2>1. 引言</h2>
<h2>2. 使用_StringTokenizer_</h2>
<p>_StringTokenizer_类我们能够根据提供的分隔符将字符串分解为标记，这是一种将字符串分割成键值对的方法。</p>
<p>让我们以一个例子为例：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenStringData_whenUsingTokenizer_thenTokenizeAndValidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> data <span class="token operator">=</span> <span class="token string">"name=John age=30 city=NewYork"</span><span class="token punctuation">;</span>
    <span class="token class-name">StringTokenizer</span> tokenizer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringTokenizer</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 创建一个存储键值对的映射</span>
    <span class="token class-name">Map</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>\`\`\` keyValueMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>tokenizer<span class="token punctuation">.</span><span class="token function">hasMoreTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> token <span class="token operator">=</span> tokenizer<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keyValue <span class="token operator">=</span> token<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>keyValue<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> key <span class="token operator">=</span> keyValue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> value <span class="token operator">=</span> keyValue<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

            <span class="token comment">// 将键值对存储在映射中</span>
            keyValueMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 使用断言来验证映射中的键值对</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">,</span> keyValueMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"30"</span><span class="token punctuation">,</span> keyValueMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"NewYork"</span><span class="token punctuation">,</span> keyValueMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:3.26,words:977},t:"Java中将字符串分割成键值对",y:"a"}}],["/posts/baeldung/2024-06-28/2024-06-28-Spring%20Boot%203.1%20s%20ConnectionDetails%20Abstraction.html",{loader:()=>a(()=>import("./2024-06-28-Spring Boot 3.1 s ConnectionDetails Abstraction.html-DaeCb1si.js"),__vite__mapDeps([310,1])),meta:{d:1696464e6,l:"2023年10月5日",c:["Spring Boot","Connection Details"],g:["Spring Boot 3.1","ConnectionDetails"],e:`
<p>在本教程中，我们将学习 Spring Boot 3.1 引入的 ConnectionDetails 接口，以外部化连接属性。Spring Boot 提供了开箱即用的抽象，以集成诸如关系型数据库、NoSQL 数据库、消息服务等远程服务。</p>
<p>传统上，application.properties 文件用于存储远程服务的连接详情。因此，将这些属性外部化到像 AWS Secret Manager、Hashicorp Vault 等外部服务变得困难。</p>
<p>为了解决这个问题，Spring Boot 引入了 ConnectionDetails。这个接口是空的，并且充当标签。Spring 提供了这个接口的子接口，例如 JdbcConnectionDetails、CassandraConnectionDetails、KafkaConnectionDetails 等。它们可以在 Spring 配置类中作 Bean 指定。之后，Spring 依赖这些配置 Bean 动态检索连接属性，而不是静态的 application.properties 文件。</p>`,r:{minutes:.84,words:251},t:"Spring Boot 3.1 的 ConnectionDetails 抽象",y:"a"}}],["/posts/baeldung/2024-06-28/2024-06-28-Taking%20Every%20N%20th%20Element%20from%20Finite%20and%20Infinite%20Streams%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-28-Taking Every N th Element from Finite and Infinite Streams in Java.html-BueqzVZW.js"),__vite__mapDeps([311,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Stream API"],g:["Java","Stream","N-th Element"],e:`<hr>
<h1>Java中从有限和无限流中获取每N个元素的方法</h1>
<h2>1. 概述</h2>
<p>Java Stream API提供了多种操作方法来处理元素序列。然而，如果我们只想处理流的一部分，例如每N个元素，这就不容易了。<strong>这在我们处理代表CSV文件或数据库表的原始数据流，并且只想处理特定列时可能会很有用。</strong></p>
<p>**我们将处理两种类型的流：有限的和无限的。**第一种情况可以通过将Stream转换为List来解决，这允许索引访问。另一方面，无限流将需要一种不同的方法。在本教程中，我们将学习如何使用各种技术来解决这个挑战。</p>
<h2>2. 测试设置</h2>`,r:{minutes:4.56,words:1367},t:"Java中从有限和无限流中获取每N个元素的方法",y:"a"}}],["/posts/baeldung/2024-06-28/2024-06-28-Why%20wait%20%20%20Requires%20Synchronization%20.html",{loader:()=>a(()=>import("./2024-06-28-Why wait   Requires Synchronization .html-BnV1Qwbl.js"),__vite__mapDeps([312,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Concurrency"],g:["wait()","notify()","synchronization"],e:`
<h2>1. 引言</h2>
<p>在Java中，我们有一个wait()/notify() API。这个API是线程间同步的一种方式。为了使用这个API的方法，当前线程必须拥有被调用者的监视器。</p>
<p>在本教程中，我们将探讨为什么这个要求是有意义的。</p>
<h2>2. wait()的工作原理</h2>
<p>首先，我们需要简要讨论一下Java中wait()的工作原理。根据JLS，Java中每个对象都有一个监视器。基本上，这意味着我们可以对我们喜欢的任何对象进行同步。这可能不是一个很好的决定，但这就是我们现在所拥有的。</p>
<p>有了这个，当我们调用wait()时，我们隐式地做了两件事。首先，我们将当前线程放入JVM内部等待集，用于这个对象监视器。第二，一旦线程进入等待集，我们（或者说JVM）释放了这个对象的同步锁。在这里，我们需要澄清——这个词this指的是我们调用wait()方法的对象。</p>`,r:{minutes:4.12,words:1235},t:"为什么wait()需要同步？ | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-28/2024-06-28-Wrapping%20a%20String%20After%20a%20Number%20of%20Characters%20Word%20Wise.html",{loader:()=>a(()=>import("./2024-06-28-Wrapping a String After a Number of Characters Word Wise.html-BOdpJa1D.js"),__vite__mapDeps([313,1])),meta:{d:17196192e5,l:"2024年6月29日",c:["Java","编程"],g:["字符串","换行"],e:`
<p>在本教程中，我们将看到如何在给定字符数后自动换行一个句子。因此，我们的程序将返回一个带有新行断点的转换后的字符串。</p>
<h2>2. 通用算法</h2>
<p>让我们考虑以下句子："Baeldung是一个提供各种编程和软件开发主题的深入教程和文章的流行网站，主要关注Java和相关技术。"</p>
<p><strong>我们想要每_n_个字符插入一行返回</strong>，n代表字符数。让我们看看实现这一点的代码：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> <span class="token function">wrapStringCharacterWise</span><span class="token punctuation">(</span><span class="token class-name">String</span> input<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">StringBuilder</span> stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>stringBuilder<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> index <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        index <span class="token operator">=</span> stringBuilder<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> index <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        stringBuilder<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"\\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        index<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> stringBuilder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:4.87,words:1462},t:"Java中按字符数自动换行字符串",y:"a"}}],["/posts/baeldung/2024-06-29/2024-06-29-API%20Versioning%20in%20Micronaut.html",{loader:()=>a(()=>import("./2024-06-29-API Versioning in Micronaut.html-DLKlG-g5.js"),__vite__mapDeps([314,1])),meta:{d:17196192e5,l:"2024年6月29日",c:["Java","Micronaut"],g:["API","版本控制"],e:`<ul>
<li></li>
</ul>
<h1>Micronaut 中的 API 版本控制</h1>
<p>在本教程中，我们将讨论如何利用 Micronaut 框架的功能来实现不断发展的 REST API。</p>
<p>在软件开发项目不断演变的领域中，有时完全基于 REST API，同时引入新功能和改进，同时保持向后兼容性是一个至关重要的挑战。实现这一点的一个基本方面是我们必须实现一种称为 API 版本控制的技术。</p>
<p>我们将探讨 Micronaut 中 API 版本控制的概念，Micronaut 是一个流行的微服务框架，用于构建高效且可扩展的应用程序。我们将深入探讨 API 版本控制的重要性，Micronaut 中实现它的不同策略，以及确保平滑版本过渡的最佳实践。</p>`,r:{minutes:5.77,words:1731},t:"Micronaut 中的 API 版本控制",y:"a"}}],["/posts/baeldung/2024-06-29/2024-06-29-Check%20if%20a%20List%20Contains%20a%20String%20Element%20While%20Ignoring%20Case.html",{loader:()=>a(()=>import("./2024-06-29-Check if a List Contains a String Element While Ignoring Case.html-Bh3QJhsr.js"),__vite__mapDeps([315,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java"],g:["Java List","Case-Insensitive Search"],e:`<hr>
<h1>检查列表是否包含字符串元素时忽略大小写 | Baeldung</h1>
<h2>1. 概述</h2>
<p>在Java中，列表是一种非常常用的数据结构。有时，我们希望在不区分大小写的情况下检查一个字符串是否是列表中的元素。</p>
<p>在这个快速教程中，我们将探索Java中解决这个常见问题的各种方法和策略。</p>
<h2>2. 问题介绍</h2>
<p>列表提供了方便的<code>contains()</code>方法来检查给定的值是否存在于列表中。在背后，<code>List.contains()</code>通过<code>equals()</code>方法将给定的对象与列表中的每个元素进行比较。</p>`,r:{minutes:2.8,words:840},t:"检查列表是否包含字符串元素时忽略大小写 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-29/2024-06-29-Check%20if%20a%20String%20Is%20Strictly%20Alphanumeric%20With%20Java.html",{loader:()=>a(()=>import("./2024-06-29-Check if a String Is Strictly Alphanumeric With Java.html-BmWVzP1x.js"),__vite__mapDeps([316,1])),meta:{d:17196192e5,l:"2024年6月29日",c:["Java","字符串"],g:["正则表达式","性能测试"],e:`
<p>检查_String_是否符合业务规则对于大多数应用程序至关重要。通常，我们需要检查名称是否只包含允许的字符，电子邮件是否格式正确，或者密码是否有限制。</p>
<p>在本教程中，我们将学习如何检查一个_String_是否为字母数字，这在许多情况下都很有用。</p>
<h2>字母数字字符</h2>
<p>首先，我们明确一下这个术语，以避免任何混淆。字母数字字符是字母和数字的组合。更具体地说，是拉丁字母和阿拉伯数字。因此，我们不会将任何特殊字符或下划线视为字母数字字符的一部分。</p>
<h2>检查方法</h2>
<p>一般来说，我们有两种主要方法来解决这个问题。第一种使用正则表达式模式，第二种逐个检查所有字符。</p>`,r:{minutes:4.43,words:1328},t:"使用Java检查字符串是否严格为字母数字",y:"a"}}],["/posts/baeldung/2024-06-29/2024-06-29-Checking%20if%20Two%20Objects%20Have%20the%20Same%20Class%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-06-29-Checking if Two Objects Have the Same Class in Kotlin.html-DWGnUhW4.js"),__vite__mapDeps([317,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin","Reflection"],g:["Kotlin","Reflection","Class Equality"],e:'\n<p>在软件开发中，检查对象是否具有相同类用于多种目的，例如类型检查、多态性、反射、错误处理等。</p>\n<p>在本教程中，我们将探索确定对象是否属于同一类的几种不同方法。</p>\n<h2>2. 依赖性</h2>\n<p>在本文中，我们将使用<strong>kotlin-reflect</strong>模块，因此，让我们在_pom.xml_中包含它：</p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`org.jetbrains.kotlin`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`kotlin-reflect`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>`\n</code></pre></div>',r:{minutes:4.54,words:1362},t:"Kotlin中检查两个对象是否具有相同类的多种方法",y:"a"}}],["/posts/baeldung/2024-06-29/2024-06-29-Convert%20Char%20Array%20to%20Int%20Array%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-29-Convert Char Array to Int Array in Java.html-J9Jn69fS.js"),__vite__mapDeps([318,1])),meta:{d:17196192e5,l:"2024年6月29日",c:["Java","Programming"],g:["char array","int array","Java 7","Java 8","Stream API"],e:`<hr>
<h1>Java中将字符数组转换为整数数组</h1>
<p>在这篇简短的教程中，我们将探索在Java中将字符数组转换为整数数组的不同方法。</p>
<p>首先，我们将使用Java 7中的方法和类。然后，我们将看到如何使用Java 8的Stream API来实现相同的目标。</p>
<h3>2.1 使用Character类的getNumericValue()方法</h3>
<p>这个方法提供了一种直接且简洁的方式来返回给定字符的整数值。例如，字符‘6’将返回6。</p>
<p>让我们看看实际操作：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> 使用<span class="token class-name">GetNumericValue</span>方法<span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>chars <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>chars<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i \`<span class="token operator">&lt;</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ints<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">getNumericValue</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> ints<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:3.42,words:1026},t:"Java中将字符数组转换为整数数组",y:"a"}}],["/posts/baeldung/2024-06-29/2024-06-29-Convert%20a%20String%20with%20Unicode%20Encoding%20to%20a%20String%20of%20Letters.html",{loader:()=>a(()=>import("./2024-06-29-Convert a String with Unicode Encoding to a String of Letters.html-BjHg-GSM.js"),__vite__mapDeps([319,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Unicode"],g:["Java","Unicode","String Conversion"],e:`
<p>在软件开发的世界中，有时我们可能需要将带有Unicode编码的字符串转换为可读的字母字符串。这种转换在处理来自不同来源的数据时非常有用。</p>
<p>在本文中，我们将探讨如何在Java中将带有Unicode编码的字符串转换为字母字符串。</p>
<h2>2. 理解Unicode编码</h2>
<p>首先，Unicode是一个通用的字符编码标准，它为每个字符分配了一个独特的数字（代码点），无论平台或程序如何。Unicode编码以形式为“\\uXXXX”的转义序列表示字符，其中“XXXX”是一个表示字符的Unicode代码点的十六进制数字。</p>
<p>例如，字符串“\\u0048\\u0065\\u006C\\u006C\\u006F World”用Unicode转义序列编码，并表示短语“Hello World”。</p>`,r:{minutes:1.79,words:538},t:"将带有Unicode编码的字符串转换为字母字符串 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-29/2024-06-29-Converting%20HashMap%20Values%20to%20an%20ArrayList%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-29-Converting HashMap Values to an ArrayList in Java.html-DF6miZV8.js"),__vite__mapDeps([320,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Collections"],g:["HashMap","ArrayList"],e:'\n<p>在这篇简短的教程中，我们将阐明如何在Java中将HashMap的值转换为ArrayList。</p>\n<p>首先，我们将解释如何使用Java核心方法进行转换。然后，我们将演示如何使用如Guava等外部库来解决我们的核心问题。</p>\n<h3>2.1 使用ArrayList构造器</h3>\n<p>ArrayList构造器提供了将HashMap转换为ArrayList的最常见和最简单的方法。</p>\n<p>这里的基本思想是将HashMap的值作为参数传递给ArrayList构造器：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ArrayList</span>```````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>``````````````` <span class="token function">convertUsingConstructor</span><span class="token punctuation">(</span><span class="token class-name">HashMap</span>```````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>``````` hashMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>hashMap <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span>```````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````````````<span class="token punctuation">(</span>hashMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:3.77,words:1131},t:"Java中将HashMap值转换为ArrayList",y:"a"}}],["/posts/baeldung/2024-06-29/2024-06-29-Create%20a%20GraalVM%20Docker%20Image.html",{loader:()=>a(()=>import("./2024-06-29-Create a GraalVM Docker Image.html-BS52Shs4.js"),__vite__mapDeps([321,1])),meta:{d:17197056e5,l:"2024年6月30日",c:["Java","GraalVM"],g:["Docker","Native Image"],e:`
<p>GraalVM使用其Ahead-Of-Time (AOT)编译器将Java应用程序编译成机器可执行文件。这些可执行文件直接在目标机器上执行，无需使用Just-In-Time (JIT)编译器。GraalVM生成的二进制文件更小，具有快速启动时间，并在不需要预热的情况下提供峰值性能。此外，这些可执行文件的内存占用和CPU使用率比在JVM上运行的应用程序要低。</p>
<p>Docker允许我们将软件组件打包成Docker镜像，并作为Docker容器运行。Docker容器包含了应用程序运行所需的一切，包括应用程序代码、运行时、系统工具和库。</p>
<p>在本教程中，我们将讨论如何为Java应用程序创建GraalVM原生镜像。然后，我们将讨论如何使用这个原生镜像作为Docker镜像，并将其作为Docker容器运行。</p>`,r:{minutes:5.06,words:1519},t:"创建一个GraalVM Docker镜像",y:"a"}}],["/posts/baeldung/2024-06-29/2024-06-29-Create%20an%20ArrayList%20with%20Multiple%20Object%20Types.html",{loader:()=>a(()=>import("./2024-06-29-Create an ArrayList with Multiple Object Types.html-CaMRnB7P.js"),__vite__mapDeps([322,1])),meta:{d:17196192e5,l:"2024年6月29日",c:["Java","ArrayList"],g:["Java","ArrayList","多类型对象"],e:`
<p>在本教程中，我们将学习如何在Java中创建一个可以容纳多种对象类型的_ArrayList_。我们还将学习如何向_ArrayList_中添加多种类型的数据，然后从_ArrayList_中检索数据并将其转换回原始数据类型。</p>
<h2>2. 背景</h2>
<p>本文需要对集合框架，特别是_ArrayList_有一个基本的了解。查看相关文章，Java List接口和Java ArrayList指南，以获得这些类的基本理解。</p>
<p>_ArrayList_类不直接支持原始数据类型，但可以通过包装类来支持它们。_ArrayList_理想情况下是使用引用类类型创建的。这表明，当向_ArrayList_添加数据时，仅支持该引用类的数据。例如，_ArrayList<code>&lt;Integer&gt;</code><em>不会接受来自_String</em>、_Boolean_或_Double_类的数据。</p>`,r:{minutes:7.6,words:2280},t:"Java中创建包含多种对象类型的ArrayList",y:"a"}}],["/posts/baeldung/2024-06-29/2024-06-29-Deprecate%20Finalization%20in%20Java%2018.html",{loader:()=>a(()=>import("./2024-06-29-Deprecate Finalization in Java 18.html-CKGh8Rrz.js"),__vite__mapDeps([323,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java"],g:["Java 18","Finalization"],e:`
<p>在这篇教程中，我们将讨论 Java 尝试通过 Java 18 版本中的 JEP 421 废弃 <code>Object</code> 最终化的原因。我们还将讨论最终化的潜在替代品和更好的替代方案。</p>
<h3>2.1. 资源泄漏</h3>
<p>JVM 配备了垃圾收集（GC）机制，用于回收应用程序不再使用的对象的内存，或者没有更多引用指向该对象。然而，一些对象引用使用并代表其他底层资源，如操作系统级别的资源、本地内存块和打开的文件描述符。这些对象在关闭时应调用 <code>close()</code> 方法，以将底层资源释放回操作系统。</p>
<p>如果 GC 在对象有机会调用 <code>close()</code> 之前过早地清理了对象，操作系统就会认为该对象仍在使用中。这就是资源泄漏。</p>`,r:{minutes:7.89,words:2366},t:"Java 18 中废弃 Finalization 的讨论",y:"a"}}],["/posts/baeldung/2024-06-29/2024-06-29-Difference%20Between%20Arrays.sort%20%20%20and%20Collections.sort%20%20.html",{loader:()=>a(()=>import("./2024-06-29-Difference Between Arrays.sort   and Collections.sort  .html-Dqh0NLSO.js"),__vite__mapDeps([324,1])),meta:{d:17197056e5,l:"2024年6月30日",c:["Java","算法"],g:["Arrays.sort","Collections.sort"],e:`
<p>排序是计算机科学中的一项基本操作，对于各种应用中的数据组织和操作至关重要。在本教程中，我们将比较 Java 中常用的两种排序方法：Arrays.sort() 和 Collections.sort()。尽管这两种方法的主要功能是排序数据，但每种方法都有其自身的特征、注意事项和最佳使用场景。</p>
<h3>2.1. Arrays.sort()</h3>
<p><strong>Arrays.sort() 方法是 Java 中用于排序数组的实用函数。</strong> 它允许对原始数据类型的数组和对象数组进行排序。无论是处理数值数据还是按字母顺序排列的字符串，Arrays.sort() 都可以将元素按升序排列。此外，我们可以通过自定义比较器来修改对象数组的行为。这个方法是 java.util.Arrays 类的一部分，该类提供了一整套用于数组操作的实用工具。</p>`,r:{minutes:8.56,words:2569},t:"Java 中 Arrays.sort() 与 Collections.sort() 的区别",y:"a"}}],["/posts/baeldung/2024-06-29/2024-06-29-Difference%20Between%20Information%20Hiding%20and%20Encapsulation.html",{loader:()=>a(()=>import("./2024-06-29-Difference Between Information Hiding and Encapsulation.html-TXrnZu5o.js"),__vite__mapDeps([325,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Software Engineering","Java"],g:["Information Hiding","Encapsulation"],e:`
<p>封装是面向对象编程的一个基本范式。它允许将数据和方法在类中组合在一起。然而，封装本身并不能保证防御性编程。</p>
<p>为了实现健壮性，我们采用了信息隐藏。信息隐藏是一种编程原则，它提倡限制对内部实现细节的访问。</p>
<p>在本教程中，我们将探讨封装和信息隐藏的细节。此外，我们将查看一些示例代码并理解这两个概念之间的主要区别。</p>
<h2>2. 历史背景</h2>
<p><strong>1972年，Parnas首次提出“信息隐藏”一词，试图区分过程式编程和模块化编程。</strong></p>
<p>Parnas推断，数据的实现应对外部模块不可见。</p>
<p>此外，在1973年，Zelis提出了封装一词，以解释如何减少对类中底层数据的访问，以防止不必要的修改。</p>`,r:{minutes:5.94,words:1782},t:"信息隐藏与封装的区别 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-29/2024-06-29-Difference%20Between%20putIfAbsent%20%20%20and%20computeIfAbsent%20%20%20in%20Java%20s%20Map.html",{loader:()=>a(()=>import("./2024-06-29-Difference Between putIfAbsent   and computeIfAbsent   in Java s Map.html-Dh1uLkSm.js"),__vite__mapDeps([326,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Collection"],g:["putIfAbsent","computeIfAbsent"],e:`
<h2>1. 概述</h2>
<p>_Map_是一种常用的数据结构，包含键值对关联。Java提供了多种方法来操作映射条目。自Java 8以来，一些新成员加入了_Map_家族。</p>
<p>_putIfAbsent()_和_computeIfAbsent()_是其中的两个。我们经常使用这两种方法来添加条目。尽管它们乍一看可能很相似，但它们具有不同的行为和用例。</p>
<p>在本教程中，我们将讨论这两种方法之间的区别。</p>
<h2>2. 引言</h2>
<p>在深入讨论这两种方法的区别之前，让我们建立一些共同基础。</p>
<p>_putIfAbsent()_和_computeIfAbsent()_都是Java中_Map_接口提供的方法，它们共享一个共同目标：**如果键不存在，则向映射中添加一个键值对。**当我们要防止覆盖现有条目时，这种行为特别有用。</p>`,r:{minutes:5.83,words:1748},t:"Java中Map的putIfAbsent()与computeIfAbsent()的区别 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-29/2024-06-29-Finding%20the%20Square%20Root%20of%20a%20BigInteger%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-29-Finding the Square Root of a BigInteger in Java.html-CsIzWfbv.js"),__vite__mapDeps([327,1])),meta:{d:17196192e5,l:"2024年6月29日",c:["Java","数学运算"],g:["BigInteger","性能比较"],e:`
<p>在处理大数字时，我们常常受到_int_和_long_大小的限制。Java通过_BigInteger_类提供了一个很好的解决方案。然而，有时API并不支持我们想要使用的所有算术运算。</p>
<p>计算一个大数的平方根是常见但通常很棘手的。</p>
<p>在本教程中，我们将学习如何做到这一点，以及每种方法的优缺点。</p>
<h3>2.1. Java 9 <em>BigInteger</em> API</h3>
<p>我们将从Java 9中引入的最直接方法开始。从这个版本及以上，_BigInteger_提供了两个有用的方法：_sqrt()<em>和_sqrtAndReminder()</em>。让我们先看看第一个：</p>`,r:{minutes:3.47,words:1040},t:"Java中计算BigInteger的平方根",y:"a"}}],["/posts/baeldung/2024-06-29/2024-06-29-Get%20All%20Record%20Fields%20and%20Its%20Values%20via%20Reflection.html",{loader:()=>a(()=>import("./2024-06-29-Get All Record Fields and Its Values via Reflection.html-DFj0lNWG.js"),__vite__mapDeps([328,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Reflection"],g:["Java","Reflection","Record"],e:`
<p>记录（record）自Java 14起被引入，用于表示不可变数据。记录包含具有不同值的字段，有时我们需要以编程方式提取所有这些字段及其对应的值。</p>
<p>在本教程中，我们将探讨如何使用Java的反射API来检索记录类中的所有字段及其值。</p>
<h2>2. 问题介绍</h2>
<p>一个示例可以快速解释问题。假设我们有一个名为_Player_的记录：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">record</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">Long</span> score<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:4.43,words:1330},t:"通过反射获取记录类中所有字段及其值",y:"a"}}],["/posts/baeldung/2024-06-29/2024-06-29-Get%20File%20Extension%20From%20MIME%20Type%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-29-Get File Extension From MIME Type in Java.html-D-j4dlbF.js"),__vite__mapDeps([329,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","MIME类型"],g:["Java","MIME类型","文件扩展名"],e:`<hr>
<h1>在Java中根据MIME类型获取文件扩展名 | Baeldung</h1>
<h2>1. 概述</h2>
<p>MIME类型是用于指定互联网上数据类型和格式的标签。<strong>一个MIME类型可以与多个文件扩展名关联。例如，“<em>image/jpeg</em>” MIME类型包括像“. <em>jpg</em>“、“. <em>jpeg</em>”或“. <em>jpe</em>”这样的扩展名。</strong></p>
<p>在本教程中，我们将探索在Java中确定特定MIME类型的文件扩展名的不同方法。我们将重点关注四种主要的解决方法。</p>
<p>我们的一些实现将包括扩展名中的最后一个可选点。例如，如果我们的MIME类型名称是“<em>image/jpeg</em>”，那么“<em>jpg</em>”或“<em>.jpg</em>”将作为文件扩展名返回。</p>`,r:{minutes:4.12,words:1236},t:"在Java中根据MIME类型获取文件扩展名 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-29/2024-06-29-How%20to%20Convert%20Double%20to%20Float%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-29-How to Convert Double to Float in Java.html-Cwm1XxP8.js"),__vite__mapDeps([330,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Programming"],g:["double","float","conversion"],e:`
<p>_双精度浮点数_和_单精度浮点数_是Java中表示小数的两种数据类型。它们在处理小数时各有不同。</p>
<p>在本教程中，我们将讨论_double_和_float_，并学习如何将它们相互转换。</p>
<h3>2. Java中的Double和Float是什么</h3>
<p><strong>_float_是32位单精度浮点类型，可以存储大约7位小数。</strong> 这种数据类型在需要节省内存时具有优势。然而，不建议使用_float_来处理货币或高精度数据计算。</p>
<p>声明原始数据类型的_float_变量时，我们可以使用_float_关键字：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">float</span> vatRate <span class="token operator">=</span> <span class="token number">14.432511f</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:3.07,words:920},t:"Java中Double与Float的转换",y:"a"}}],["/posts/baeldung/2024-06-29/2024-06-29-How%20to%20Detect%20the%20Username%20Using%20Java.html",{loader:()=>a(()=>import("./2024-06-29-How to Detect the Username Using Java.html-Qvwu5JZ-.js"),__vite__mapDeps([331,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","教程"],g:["Java","用户名","系统属性"],e:`<hr>
<h1>如何使用Java检测用户名</h1>
<hr>
<h2>1. 概述</h2>
<p>有时，在使用Java应用程序时，我们需要访问系统属性和环境变量的值。</p>
<p>在本教程中，我们将学习如何从运行中的Java应用程序中检索用户名。</p>
<h2>2. <em>System.getProperty</em></h2>
<p>获取用户信息的一种方式，更确切地说，是其名称，我们可以使用_System.getProperty(String)<em>。这个方法需要一个键。**它们通常是统一的并且预定义的，比如_java.version</em>、<em>os.name</em>、_user.home_等。** 在我们的情况下，我们对_user.name_感兴趣：</p>`,r:{minutes:1.8,words:539},t:"如何使用Java检测用户名",y:"a"}}],["/posts/baeldung/2024-06-29/2024-06-29-How%20to%20Subscribe%20a%20Kafka%20Consumer%20to%20Multiple%20Topics.html",{loader:()=>a(()=>import("./2024-06-29-How to Subscribe a Kafka Consumer to Multiple Topics.html-CL4PDuIj.js"),__vite__mapDeps([332,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Kafka","Java"],g:["Kafka","Consumer","Java"],e:`
<h2>1. 概述</h2>
<p>在本教程中，我们将学习如何订阅Kafka消费者到多个主题。当相同的业务逻辑用于不同的主题时，这是一个常见的需求。</p>
<h2>2. 创建模型类</h2>
<p>我们将考虑一个简单的支付系统，有两个Kafka主题，一个用于信用卡支付，另一个用于银行转账。让我们创建模型类：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>public class PaymentData {
    private String paymentReference;
    private String type;
    private BigDecimal amount;
    private Currency currency;

    // 标准getter和setter
}
</code></pre></div>`,r:{minutes:3.04,words:911},t:"如何订阅Kafka消费者到多个主题 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-29/2024-06-29-How%20to%20Support%20UTF%208%20Encoding%20in%20Eclipse.html",{loader:()=>a(()=>import("./2024-06-29-How to Support UTF 8 Encoding in Eclipse.html-C-b7Ekxl.js"),__vite__mapDeps([333,1])),meta:{d:1696896e6,l:"2023年10月10日",c:["Eclipse","UTF-8"],g:["编码","开发环境"],e:`
<p>Eclipse是一个非常流行的集成开发环境（IDE），用于各种编程语言。它是跨平台的，免费提供，主要用于Java应用程序。</p>
<p>当应用程序需要处理各种语言时，使用UTF字符编码是必要的。</p>
<p>在本教程中，我们将探讨如何在Eclipse中支持UTF-8编码。此外，我们将了解UTF-8编码在应用程序中的使用和重要性。</p>
<h3>2. UTF-8编码的好处</h3>
<p>UTF-8是一种多功能的<strong>8位字符编码，支持各种语言和脚本的所有字符和符号</strong>。</p>
<p>此外，它被各种编程语言、平台和工程标准广泛支持。</p>
<p>它还与ASCII字符编码无缝兼容。这给了它比其他编码更多的优势。</p>`,r:{minutes:2.26,words:679},t:"如何在Eclipse中支持UTF-8编码",y:"a"}}],["/posts/baeldung/2024-06-29/2024-06-29-Increment%20Character%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-29-Increment Character in Java.html-Hw3vfO7a.js"),__vite__mapDeps([334,1])),meta:{d:1719692895e3,c:["Java","Programming"],g:["Java","Character Sequence","ASCII"],e:`<hr>
<h1>Java中递增字符的生成</h1>
<p>在本教程中，我们将学习如何在Java中生成从'A'到'Z'的字符序列。我们将通过递增ASCII值来实现这一点。</p>
<p>在Java中，我们使用Unicode来表示ASCII值，因为ASCII字符的范围有限，只包含127个字符。Unicode则包含了更多的字符，支持国际化和使用各种符号。因此在Java中，我们不仅仅局限于标准的ASCII值。</p>
<p>我们将使用_for_循环和Java 8 Stream API中的_IntStream_来生成字符序列。</p>
<h2>2. 使用_for_循环</h2>
<p>我们将使用标准的_for_循环创建从'A'到'Z'的大写字母列表：</p>`,r:{minutes:2.14,words:641},t:"Java中递增字符的生成",y:"a"}}],["/posts/baeldung/2024-06-29/2024-06-29-Introduction%20to%20Apache%20Kafka.html",{loader:()=>a(()=>import("./2024-06-29-Introduction to Apache Kafka.html-D64DSmS7.js"),__vite__mapDeps([335,1])),meta:{d:16935264e5,l:"2023年9月1日",c:["Apache Kafka"],g:["Kafka","Messaging System","Stream Processing"],e:`
<h2>1. 概览</h2>
<p>在本教程中，我们将学习Kafka的基础知识——任何人都应该了解的用例和核心概念。之后，我们可以找到并理解关于Kafka的更详细文章。</p>
<h2>2. Kafka 是什么？</h2>
<p>Kafka是由Apache软件基金会开发的开源流处理平台。我们可以用它作为消息系统来解耦消息生产者和消费者，但与ActiveMQ等“传统”消息系统相比，它旨在处理实时数据流，并为数据的加工和存储提供分布式、容错和高度可扩展的架构。</p>
<p>因此，我们可以用它在各种用例中：</p>
<ul>
<li>实时数据处理和分析</li>
<li>日志和事件数据聚合</li>
<li>监控和指标收集</li>
<li>点击流数据分析</li>
<li>欺诈检测</li>
<li>大数据管道中的流处理</li>
</ul>`,r:{minutes:14.05,words:4214},t:"Apache Kafka 教程",y:"a"}}],["/posts/baeldung/2024-06-29/2024-06-29-Is%20Java%20Reflection%20Bad%20Practice%20.html",{loader:()=>a(()=>import("./2024-06-29-Is Java Reflection Bad Practice .html-2HsfxoGv.js"),__vite__mapDeps([336,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","反射"],g:["Java反射","编程实践"],e:`
<h2>1. 概述</h2>
<p><strong>Java反射API的使用在Java社区中引发了长时间的广泛讨论，有时被视为不良实践。</strong> 尽管它被流行的Java框架和库广泛使用，但其潜在的缺点阻止了它在常规服务器端应用程序中的频繁使用。</p>
<p>在本教程中，我们将深入探讨反射可能引入到我们的代码库中的优点和缺点。此外，<strong>我们将探讨何时使用反射是适当或不适当的，最终帮助我们确定它是否构成不良实践。</strong></p>
<h2>2. 理解Java反射</h2>
<p><strong>在计算机科学中，反射性编程或反射是一个进程检查、内省和修改其结构和行为的能力。</strong> 当一个编程语言完全支持反射时，它允许在运行时检查和修改代码库中类和对象的结构和行为，允许源代码重写自身的某些方面。</p>`,r:{minutes:9.61,words:2883},t:"Java反射是否是不良实践？ | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-29/2024-06-29-Joining%20a%20List%20String%20%20in%20Java%20With%20Commas%20and%20%20and%20.html",{loader:()=>a(()=>import("./2024-06-29-Joining a List String  in Java With Commas and  and .html-D6cTK_DQ.js"),__vite__mapDeps([337,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","String Manipulation"],g:["Java","String Concatenation","Natural Language"],e:`<hr>
<h1>Java中以自然语言方式连接列表</h1>
<p>当处理字符串集合时，使用特定分隔符连接这些字符串是一项常见任务。幸运的是，我们有多种解决方案可供选择，包括使用_String.join()<em>和_Collectors.joining()</em>。</p>
<p>在这个快速教程中，我们将探索一个有趣的字符串连接问题：以更接近自然语言的方式连接字符串。</p>
<h3>2. 问题介绍</h3>
<p>让我们通过一个例子来理解问题。假设我们有一个字符串列表_{“A”，“B”，“C”，“D”}_。如果我们想用逗号作为分隔符将它们连接起来，结果将是“<em>A, B, C, D</em>”。到目前为止，一切顺利。</p>`,r:{minutes:3.63,words:1090},t:"Java中以自然语言方式连接列表",y:"a"}}],["/posts/baeldung/2024-06-29/2024-06-29-Partition%20a%20Stream%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-29-Partition a Stream in Java.html-Dcww3kOp.js"),__vite__mapDeps([338,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Stream API"],g:["Java 8","Stream","分区"],e:'\n<p>在本教程中，我们将探索基于固定最大大小对 Java 8 的 Stream 进行分区的各种技术。</p>\n<p>我们将首先重新审视如何使用 List 来完成这项工作。随后，我们将通过引入 Stream 特有的功能，如延迟评估和线程安全性，来增强我们的方法。</p>\n<h2>2. List 的分区</h2>\n<p>在 Java 中，有多种分区 List 的方法。一种简单的方法是首先根据所需的批量大小和源列表的大小来确定所需的批次数量：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> ```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>``````````` <span class="token class-name">Stream</span><span class="token operator">&lt;</span><span class="token class-name">List</span>```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>```````````<span class="token operator">&gt;</span> <span class="token function">partitionList</span><span class="token punctuation">(</span><span class="token class-name">List</span>```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>``````````` source<span class="token punctuation">,</span> <span class="token keyword">int</span> batchSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> nrOfFullBatches <span class="token operator">=</span> <span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> batchSize<span class="token punctuation">;</span>\n    <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:8.03,words:2409},t:"Java 8 中的 Stream 分区技术",y:"a"}}],["/posts/baeldung/2024-06-29/2024-06-29-Pass%20a%20Function%20as%20Parameter%20to%20Another%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-06-29-Pass a Function as Parameter to Another in Kotlin.html-xr5KJLhT.js"),__vite__mapDeps([339,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin","高阶函数"],g:["Kotlin","高阶函数","函数式编程"],e:`
<p>Kotlin以其简洁的语法和强大的功能，提供了多种实现效率和可读性的方法。其中一项特性是将函数作为参数传递给其他函数的能力，这被称为高阶函数。这种能力允许我们编写更灵活、可重用的代码，使我们能够编写更干净、更富有表现力的程序。</p>
<p>在本教程中，我们将简要讨论Kotlin的高阶函数，并探索如何将函数作为参数传递给高阶函数。</p>
<h2>2. 关于高阶函数的一些话</h2>
<p><strong>在Kotlin中，函数是一等公民，这意味着它们可以被当作值来对待。</strong> 这包括将函数作为参数传递给其他函数、从函数返回函数以及将函数赋值给变量。</p>
<p><strong>接受其他函数作为参数或返回它们的函数被称为高阶函数。</strong></p>`,r:{minutes:6.69,words:2006},t:"Kotlin中将函数作为参数传递给另一个函数的概述",y:"a"}}],["/posts/baeldung/2024-06-29/2024-06-29-RSocket%20Interface%20in%20Spring%206.html",{loader:()=>a(()=>import("./2024-06-29-RSocket Interface in Spring 6.html-D4_aFU21.js"),__vite__mapDeps([340,1])),meta:{d:1719683606e3,c:["Spring Framework","RSocket"],g:["Spring 6","Alpaquita Linux","RSocket Server","RSocket Client"],e:`
<p>寻找理想的Linux发行版，用于在云中运行现代Spring应用程序？
<strong>遇见Alpaquita Linux</strong>：轻量级、安全且功能强大，足以处理重负载工作。
这个发行版是<strong>专门为运行Java应用程序设计的</strong>。它基于Alpine构建，并具有显著的增强功能，以在高密度容器环境中表现出色，同时满足企业级安全标准。</p>
<p>具体来说，容器镜像大小比标准选项<strong>小约30%</strong>，并且它消耗的RAM<strong>少至30%</strong>：</p>
<p><strong>&gt;&gt; 立即尝试Alpaquita容器。</strong></p>`,r:{minutes:5.35,words:1605},t:"Spring 6中的RSocket接口 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-29/2024-06-29-Rotate%20Arrays%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-29-Rotate Arrays in Java.html-iwNqSKyn.js"),__vite__mapDeps([341,1])),meta:{d:16961184e5,l:"2023年10月1日",c:["Java","Algorithms"],g:["Array Rotation","Java"],e:`
<p>在这篇教程中，我们将学习一些在Java中旋转数组的算法。</p>
<p>我们将看到如何将数组元素向右旋转_k_次。我们还将了解如何就地修改数组，尽管我们可能会使用额外的空间来计算旋转。</p>
<h3>2.1. 找到最小的旋转数</h3>
<p>我们将使用字母_k_作为旋转数的别名。</p>
<h3>2.2. 单元测试</h3>
<p>我们可能想要测试_k_小于、等于和大于数组长度的情况。例如，如果我们将一个6个元素的数组旋转8次，我们只需要进行2次旋转。</p>
<h3>2.3. 数组和旋转测试变量</h3>
<p>我们将设置以下变量：</p>
<ul>
<li><em>arr</em> 作为测试长度为_6_的数组</li>
<li><em>rotationLtArrayLength</em> = <em>1</em> 作为小于数组长度的旋转</li>
<li><em>rotationGtArrayLength</em> = <em>8</em> 作为大于数组长度的旋转</li>
<li><em>ltArrayLengthRotation</em> 作为_rotationLtArrayLength_的解决方案</li>
<li><em>gtArrayLengthRotation</em> 作为_rotationGtArrayLength_的解决方案</li>
</ul>`,r:{minutes:2.16,words:648},t:"Java中旋转数组的方法 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-29/2024-06-29-Skipping%20the%20First%20Iteration%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-29-Skipping the First Iteration in Java.html-BIp5A7t4.js"),__vite__mapDeps([342,1])),meta:{d:16935264e5,l:"2023年9月1日",c:["Java","Programming"],g:["Java","Loop","Stream API"],e:`
<p>迭代是编程的基石，它使开发者能够遍历并轻松地操作数据结构。然而，在某些情况下，我们可能需要在遍历这些集合的同时跳过第一个元素。在本教程中，我们将探索使用循环和Stream API跳过第一个元素的各种方法。</p>
<h3>2.1. For循环</h3>
<p>跳过第一个元素的最简单方式是使用for循环，并将计数器变量从1而不是0开始。这种方法最适合支持索引访问的集合，如ArrayList和简单数组：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">skippingFirstElementInListWithForLoop</span><span class="token punctuation">(</span><span class="token class-name">List</span>\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>\`\`\`\` stringList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> stringList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">process</span><span class="token punctuation">(</span>stringList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.99,words:596},t:"Java中跳过首次迭代的方法",y:"a"}}],["/posts/baeldung/2024-06-29/2024-06-29-Spring%20Boot%20Application%20on%20Liberica%20Runtime%20Container.html",{loader:()=>a(()=>import("./2024-06-29-Spring Boot Application on Liberica Runtime Container.html-Bn72u7C6.js"),__vite__mapDeps([343,1])),meta:{d:16956864e5,l:"2023年9月26日",c:["Spring Boot","Docker"],g:["Java","Liberica JDK","Alpaquita Linux"],e:`<hr>
<h1>如何使用Spring Boot和Docker运行Java应用程序</h1>
<p>在本教程中，我们将探索使用Docker容器运行使用Spring Boot创建的标准Java应用程序的方法。更具体地说，我们将使用基于Alpaquita Linux的Liberica JDK来创建将运行我们应用程序的Docker镜像。</p>
<p>Liberica JDK和Alpaquita Linux是BellSoft的产品提供的一部分。BellSoft是一个致力于使Java成为云原生应用程序首选语言的组织。通过他们的目标性产品，他们承诺提供更低的成本和更好的体验。</p>
<h2>2. 一个简单的Spring Boot应用程序</h2>`,r:{minutes:9.9,words:2971},t:"如何使用Spring Boot和Docker运行Java应用程序",y:"a"}}],["/posts/baeldung/2024-06-29/2024-06-29-SpringRunner%20vs.%20SpringBootTest.html",{loader:()=>a(()=>import("./2024-06-29-SpringRunner vs. SpringBootTest.html-BQUv6SvX.js"),__vite__mapDeps([344,1])),meta:{d:17196192e5,l:"2024年6月29日",c:["Spring","Testing"],g:["SpringRunner","SpringBootTest"],e:`
<p>测试对于任何应用程序都至关重要，无论是单元测试还是集成测试。SpringRunner和SpringBootTest类构成了运行集成测试的基础。</p>
<p>在本教程中，我们将学习这两个类。我们将学习如何在代码中使用它们，并了解它们的相似之处和不同之处。</p>
<p>SpringRunner是SpringJUnit4ClassRunner类的别名，适用于基于JUnit4的测试类。它通过Spring TestContext加载，通过该上下文，Spring的bean和配置可以在JUnit注解的配合下使用。我们至少需要JUnit 4.12才能使用它。</p>
<p>在代码中使用时，需要在测试类上注解@RunWith(SpringRunner.class)：</p>`,r:{minutes:1.95,words:584},t:"SpringRunner与SpringBootTest | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-29/2024-06-29-String%20Templates%20in%20Java%2021.html",{loader:()=>a(()=>import("./2024-06-29-String Templates in Java 21.html-DdHZLsZX.js"),__vite__mapDeps([345,1])),meta:{d:16803072e5,l:"2023年4月1日",c:["Java","String Templates"],g:["Java 21","JEP 430"],e:`
<h2>1. 引言</h2>
<p>在本教程中，我们将专注于Java对字符串插值的解决方案，即字符串模板。这个预览版特性作为JEP 430的一部分，被引入到Java 21中。</p>
<h2>2. Java中的字符串组合</h2>
<p>我们在代码中使用_字符串_来表示数字、字母和符号的序列作为文本。_字符串_在编程中无处不在，我们经常需要组合字符串以在代码中使用。有几种方法可以做到这一点，每种技术都有其缺点。</p>
<h3>2.1. 字符串连接</h3>
<p>字符串连接是我们用来构建字符串的最基本操作。我们采用字符串字面量和表达式，然后使用_+_符号将它们组合在一起：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> <span class="token function">composeUsingPlus</span><span class="token punctuation">(</span><span class="token class-name">String</span> feelsLike<span class="token punctuation">,</span> <span class="token class-name">String</span> temperature<span class="token punctuation">,</span> <span class="token class-name">String</span> unit<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">"Today's weather is "</span> <span class="token operator">+</span> feelsLike <span class="token operator">+</span>
      <span class="token string">", with a temperature of "</span> <span class="token operator">+</span> temperature <span class="token operator">+</span> <span class="token string">" degrees "</span> <span class="token operator">+</span> unit<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:7.1,words:2131},t:"Java 21中的字符串模板 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-29/2024-06-29-Testing%20Interface%20Contract%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-29-Testing Interface Contract in Java.html-DXn-ybN0.js"),__vite__mapDeps([346,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","JUnit"],g:["JUnit","接口测试"],e:`
<p>继承是Java中的一个重要概念。接口是实现该概念的方式之一。</p>
<p>接口定义了一个合约，多个类可以实现它。因此，测试这些实现类以确保它们遵守相同的合约是至关重要的。</p>
<p>在本教程中，我们将探讨在Java中为接口编写JUnit测试的不同方法。</p>
<h2>2. 环境搭建</h2>
<p>让我们创建一个基本的环境，用于我们不同方法的测试。</p>
<p>首先，我们创建一个名为_Shape_的简单接口，它有一个方法_area()_：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>
    <span class="token keyword">double</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:4.75,words:1426},t:"Java中测试接口合约的不同方法",y:"a"}}],["/posts/baeldung/2024-06-29/2024-06-29-Truncate%20a%20Double%20to%20Two%20Decimal%20Places%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-29-Truncate a Double to Two Decimal Places in Java.html-Dp8wYFab.js"),__vite__mapDeps([347,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Programming"],g:["Java","Double","Rounding"],e:`
<h2>1. 概述</h2>
<p>在本教程中，我们将探讨Java中将_double_截断为两位小数的多种选项。我们将看到将结果保留为_String_的方法，以及返回_Numbers_的选项。</p>
<h2>2. 使用_Math.floor()_和_Math.ceil()_进行四舍五入</h2>
<p>我们将首先检查使用_Math_类来去除多余的小数位的方法。要将正数截断为两位小数，我们首先将_double_乘以100，将我们想要保留的所有数字移动到小数点前面。接下来，我们使用_Math.floor()_向下取整，去除小数点后的数字。最后，我们除以100来撤销之前的乘法：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenADouble_whenUsingMath_truncateToTwoDecimalPlaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">double</span> positive <span class="token operator">=</span> <span class="token number">1.55555555</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> truncated <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>positive <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"1.55"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>truncated<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">double</span> negative <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1.55555555</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> negativeTruncated <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>negative <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"-1.55"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>negativeTruncated<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:4.25,words:1274},t:"Java中将double截断为两位小数的方法 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-29/2024-06-29-Trunk%20Based%20Development.html",{loader:()=>a(()=>import("./2024-06-29-Trunk Based Development.html-BS5HWzM9.js"),__vite__mapDeps([348,1])),meta:{d:17196192e5,l:"2024年6月29日",c:["DevOps","版本控制"],g:["Trunk-Based Development","持续集成"],e:`
<p>如果你在DevOps生态系统中有几年的经验，并且有兴趣与社区分享这些经验，请查看我们的<strong>贡献指南</strong>。</p>
<h2>1. 概述</h2>
<p>在本教程中，我们将学习版本控制系统中的主干开发方法。</p>
<p>首先，我们将探索这个概念的一般性，看看它与特性分支开发模型有何不同，涉及的共同特点，以及实现它的工作流程。</p>
<p>然后，我们将讨论选择主干开发时需要考虑的不同因素。最后，我们将看到使用主干开发的利弊。</p>
<h2>2. 什么是主干开发？</h2>
<p><strong>主干开发是一种源代码控制分支模型，开发人员在称为“trunk”或“mainline”（在Git中为“master”或“main”）的单个分支上工作</strong>。</p>`,r:{minutes:7.6,words:2280},t:"主干开发",y:"a"}}],["/posts/baeldung/2024-06-29/2024-06-29-Unnamed%20Classes%20and%20Instance%20Main%20Methods%20in%20Java%2021.html",{loader:()=>a(()=>import("./2024-06-29-Unnamed Classes and Instance Main Methods in Java 21.html-sMNDVOGi.js"),__vite__mapDeps([349,1])),meta:{d:17197056e5,l:"2024年6月30日",c:["Java","编程"],g:["Java 21","未命名类","实例主方法"],e:`
<p>Java 21 已经发布，其新特性之一是未命名类和实例主方法的引入，这使得 Java 语言对于初学者来说更加易于接近。这些新特性的引入是使 Java 成为更友好的编程语言的重要步骤。</p>
<p>在本教程中，我们将探索这些新特性，并理解它们如何为学生平滑学习曲线。</p>
<h2>2. 编写基本的 Java 程序</h2>
<p>传统上，对于初学者来说，编写他们的第一个 Java 程序比在其他编程语言中要复杂一些。一个基本的 Java 程序需要声明一个 <em>public</em> 类。这个类包含一个作为程序入口点的 <em>public static void main(String[] args)</em> 方法。</p>`,r:{minutes:4.31,words:1293},t:"Java 21 中的未命名类和实例主方法 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-29/2024-06-29-Unnamed%20Patterns%20and%20Variables%20in%20Java%2021.html",{loader:()=>a(()=>import("./2024-06-29-Unnamed Patterns and Variables in Java 21.html-CsiuFT9t.js"),__vite__mapDeps([350,1])),meta:{d:17196192e5,l:"2024年6月29日",c:["Java","Programming"],g:["Java 21","Unnamed Patterns"],e:`
<h2>1. 概述</h2>
<p>Java 21 SE 的发布引入了一个令人兴奋的预览特性：无命名模式和变量（JEP 443）。这个新增加的特性允许我们在只关心副作用时减少样板代码。</p>
<p>无命名模式是对 Java 19 中的记录模式和 Switch 中的模式匹配的改进。我们还应该熟悉作为预览功能在 Java 14 中引入的记录功能。</p>
<p>在本教程中，我们将深入探讨如何使用这些新特性来提高我们的代码质量和可读性。</p>
<h2>2. 目的</h2>
<p>通常，在使用复杂对象时，我们并不总是需要它们持有的所有数据。理想情况下，我们只从对象中获取我们需要的东西，但这种情况很少见。大多数时候，我们最终只使用了我们被给予的一小部分。</p>`,r:{minutes:6.29,words:1887},t:"Java 21 中的无命名模式和变量 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-29/2024-06-29-Using%20the%20Apache%20Commons%20Lang%203%20for%20Comparing%20Objects%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-29-Using the Apache Commons Lang 3 for Comparing Objects in Java.html-DH9vnqJH.js"),__vite__mapDeps([351,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Apache Commons Lang"],g:["Java","比较对象","Apache Commons Lang 3"],e:`
<p>比较对象是Java以及许多其他编程语言中的核心概念之一。它在处理排序、搜索和过滤数据时是一个基本的概念，这在编程的各个方面都起着至关重要的作用。</p>
<p>在Java中比较对象可以通过手动实现比较逻辑或使用具有对象比较能力的库来完成。可以用于Java中比较对象的各种库，例如JaVers或Apache Commons Lang 3，本文将介绍后者。</p>
<p>Apache Commons Lang 3是Apache Commons Lang库的3.0版本，提供了许多功能。</p>
<p>我们将探索_DiffBuilder_类来比较并获取两个相同类型对象之间的差异。结果差异通过_DiffResult_类表示。</p>`,r:{minutes:5.47,words:1641},t:"使用Apache Commons Lang 3在Java中比较对象",y:"a"}}],["/posts/baeldung/2024-06-29/2024-06-29-Validate%20Boolean%20Type%20in%20Spring%20Boot.html",{loader:()=>a(()=>import("./2024-06-29-Validate Boolean Type in Spring Boot.html-CBT7-Jg0.js"),__vite__mapDeps([352,1])),meta:{d:17196192e5,l:"2024年6月29日",c:["Spring Boot","Validation"],g:["Boolean","Validation"],e:`
<p>在本教程中，我们将学习如何在Spring Boot应用程序中验证布尔类型，并查看执行验证的各种方式。此外，我们将在Spring Boot应用程序的不同层，如控制器或服务层，验证类型为布尔的对象。</p>
<h2>2. 程序化验证</h2>
<p>Boolean类提供了两个基本方法来创建类的实例：Boolean.valueOf()和Boolean.parseBoolean()。</p>
<p>Boolean.valueOf()接受字符串和布尔值。它检查输入字段的值是否为true或false，并相应地提供Boolean对象。Boolean.parseBoolean()方法只接受字符串值。</p>`,r:{minutes:6.78,words:2033},t:"在Spring Boot中验证布尔类型",y:"a"}}],["/posts/baeldung/2024-06-30/2024-06-30-A%20Guide%20to%20Log4j%20and%20the%20log4j.properties%20File%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-30-A Guide to Log4j and the log4j.properties File in Java.html-64iQdvRV.js"),__vite__mapDeps([353,1])),meta:{d:17197056e5,l:"2024年6月30日",c:["Log4j","Java"],g:["Log4j","log4j.properties","Java日志"],e:`
<p>Log4J是一个流行的开源日志框架，用Java编写。各种基于Java的应用程序广泛使用Log4j。此外，它是线程安全的，快速的，并提供了一个命名的_Logger_层级结构。Log4j在开源Apache软件许可下分发。</p>
<p><strong>Log4j 1.x在2015年8月5日达到了生命周期的终点。因此，到目前为止，Log4j2是Log4j的最新升级。</strong></p>
<p>在本教程中，我们将学习Log4j以及如何使用Java中的_log4j.properties_文件配置核心Log4j组件。</p>
<h2>2. Maven设置</h2>
<p>我们需要在_pom.xml_中加入_log4j-core_依赖项来开始：</p>`,r:{minutes:7.46,words:2239},t:"Log4j和Java中log4j.properties文件指南",y:"a"}}],["/posts/baeldung/2024-06-30/2024-06-30-Add%20Minutes%20to%20a%20Time%20String%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-30-Add Minutes to a Time String in Java.html-UKZoPJYH.js"),__vite__mapDeps([354,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Date and Time"],g:["Java","Date and Time","Legacy Date API","Date Time API"],e:`
<p>Java提供了一个标准的API来处理日期和时间。<strong>日期时间API提供了一个方法，可以将字符串格式的时间解析为等价的_LocalTime_类型，以便进一步操作</strong>。</p>
<p>在本教程中，我们将探讨如何使用旧版Date API和日期时间API将分钟添加到字符串格式的时间。</p>
<h2>2. 使用旧版Date API</h2>
<p>时间字符串显示时间，但是它是字符串数据类型。<strong>使用字符串执行算术运算是不可行的</strong>。因此，<strong>在执行算术运算之前，我们需要将时间字符串解析为等价的_Date_类型</strong>。</p>`,r:{minutes:2.32,words:696},t:"Java中给时间字符串添加分钟",y:"a"}}],["/posts/baeldung/2024-06-30/2024-06-30-Assert%20Regex%20Matches%20in%20JUnit.html",{loader:()=>a(()=>import("./2024-06-30-Assert Regex Matches in JUnit.html-zHuFSStF.js"),__vite__mapDeps([355,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["JUnit","正则表达式"],g:["JUnit","正则表达式","断言"],e:`
<p>JUnit 成为许多开发者首选的Java代码单元测试工具。在现实世界场景中，一个常见的测试需求是验证给定的字符串是否符合特定的正则表达式（regex）模式。</p>
<p>在本教程中，我们将探讨在JUnit中断言正则表达式匹配的几种方法，使我们能够有效地测试我们的字符串模式。</p>
<h2>2. 问题介绍</h2>
<p>问题相当简单：我们希望有一种自然而有效的方法来确认输入字符串与特定正则表达式模式一致。理想情况下，我们还应该有一种可靠的方法来断言相反的情况，即输入字符串不匹配正则表达式模式。</p>
<p>让我们首先探索广泛使用的JUnit 5框架，并学习如何使用其标准特性执行正则表达式模式匹配的断言。此外，我们将讨论在使用JUnit 5进行此类断言时可能遇到的一个潜在陷阱。</p>`,r:{minutes:4.78,words:1433},t:"JUnit中断言正则表达式匹配的方法",y:"a"}}],["/posts/baeldung/2024-06-30/2024-06-30-CATALINA%20OPTS%20vs.%20JAVA%20OPTS%20in%20Apache%20Tomcat.html",{loader:()=>a(()=>import("./2024-06-30-CATALINA OPTS vs. JAVA OPTS in Apache Tomcat.html-CjF8JpxK.js"),__vite__mapDeps([356,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Tomcat","Java"],g:["CATALINA_OPTS","JAVA_OPTS"],e:`
<p>Apache Tomcat是一个开源的Java Servlet Web容器服务器，用于部署基于Java的应用程序。Tomcat服务器主要执行Java Servlet和JSP，用于动态Web应用程序。<strong>在配置Tomcat服务器时，我们可以使用_CATALINA_OPTS_和_JAVA_OPTS_环境变量来进行JVM设置。</strong></p>
<p>在本教程中，我们将探讨在Tomcat服务器中使用_CATALINA_OPTS_和_JAVA_OPTS_的用途。</p>
<h2>2. CATALINA_OPTS和JAVA_OPTS的重要性</h2>
<p>Tomcat服务器使用_CATALINA_OPTS_和_JAVA_OPTS_环境变量进行自定义配置。这两个环境变量允许我们为Tomcat服务器自定义JVM选项，但它们的用途略有不同。自定义JVM选项对于实现Web应用程序的高性能至关重要。</p>`,r:{minutes:4.12,words:1235},t:"Apache Tomcat中的CATALINA_OPTS与JAVA_OPTS | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-30/2024-06-30-Check%20if%20Letter%20Is%20Emoji%20With%20Java.html",{loader:()=>a(()=>import("./2024-06-30-Check if Letter Is Emoji With Java.html-R-HZI1s2.js"),__vite__mapDeps([357,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Emoji"],g:["Java","Emoji","Unicode"],e:`
<p>表情符号在我们可能需要在代码中处理的文本中频繁出现。例如，这可能是在我们使用电子邮件或即时消息服务时。</p>
<p>在本教程中，我们将看到在Java应用程序中检测表情符号的多种方法。</p>
<h2>2. Java如何表示表情符号？</h2>
<p>每个表情符号都有一个独特的Unicode值来表示它。<strong>Java使用UTF-16在_String_中对Unicode字符进行编码。</strong></p>
<p>UTF-16可以对所有Unicode代码点进行编码。一个代码点可能由一个或两个代码单元组成。如果需要两个，因为Unicode值超出了我们可以在16位中存储的范围，那么我们称它为代理对。</p>`,r:{minutes:4.22,words:1266},t:"如何在Java中检查字母是否为表情符号",y:"a"}}],["/posts/baeldung/2024-06-30/2024-06-30-Closing%20Java%20IO%20Streams.html",{loader:()=>a(()=>import("./2024-06-30-Closing Java IO Streams.html-yQZttJft.js"),__vite__mapDeps([358,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","IO"],g:["Java IO","Streams"],e:`
<h2>1. 概述</h2>
<p>在 Java IO 操作领域内，确保正确关闭 IO 流是非常重要的。这对于资源管理和代码的健壮性至关重要。</p>
<p>在本教程中，我们将<strong>详细探讨为什么需要关闭 IO 流</strong>。</p>
<h2>2. 不关闭 IO 流会发生什么？</h2>
<p>在完成对它们的所有操作后，显式关闭 IO 流始终是一个好习惯。忽略关闭它们可能会导致各种问题。</p>
<p>在这一部分，我们将看看这些问题。</p>
<h3>2.1. 资源泄漏</h3>
<p>每当我们打开一个 IO 流时，它总是用一些系统资源。<strong>这些资源直到 IO 流的 <em>close()</em> 方法被调用才会被释放</strong>。</p>`,r:{minutes:4.3,words:1289},t:"Java IO 流的关闭",y:"a"}}],["/posts/baeldung/2024-06-30/2024-06-30-Constructing%20Java%20Objects%20From%20Only%20the%20Class%20Name.html",{loader:()=>a(()=>import("./2024-06-30-Constructing Java Objects From Only the Class Name.html-BjzFlD3m.js"),__vite__mapDeps([359,1])),meta:{d:16935264e5,l:"2023年9月1日",c:["Java","Reflection"],g:["Java","Reflection API","Object Creation"],e:`<hr>
<h1>使用类名构建Java对象</h1>
<p>在本教程中，我们将探讨使用类名创建Java对象的过程。Java反射API提供了多种完成此任务的方法。然而，确定当前上下文中最合适的方法可能具有挑战性。</p>
<p>首先，让我们从一个简单的方法开始，并逐渐改进为更有效的解决方案。</p>
<h3>创建对象使用类名</h3>
<p>让我们想象一个汽车服务中心。该中心负责维护和修理汽车，使用工作卡来分类和管理服务请求。我们可以将其表示为类图：</p>
<figure><img src="https://www.baeldung.com/wp-content/uploads/2023/09/Bronze.svg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>`,r:{minutes:4.88,words:1464},t:"使用类名构建Java对象",y:"a"}}],["/posts/baeldung/2024-06-30/2024-06-30-Convert%20Double%20to%20String%20Removing%20Scientific%20Notation.html",{loader:()=>a(()=>import("./2024-06-30-Convert Double to String Removing Scientific Notation.html-ipi4K5r2.js"),__vite__mapDeps([360,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin"],g:["Double to String","Scientific Notation"],e:`
<p>在编程中，将数值转换为字符串是一种基本操作。虽然双精度浮点数可以有效地处理广泛的值范围，但将它们转换为字符串格式时可能会使用科学记数法，这影响了可读性。</p>
<p>在本教程中，我们将探讨在Kotlin中将双精度浮点数值转换为不使用科学记数法的字符串表示的不同技术。</p>
<h3>关于科学记数法</h3>
<p>科学记数法是使用指数表示浮点数的标准格式，指数由_E_或_e_表示。这种记数法将数字表示为10的幂次方。例如，我们可以将数字12345表示为1.2345E4。</p>
<p>同样，十进制数0.012345可以表示为1.23450E-02，使用10的负指数。</p>
<h3>使用_String.format()_</h3>`,r:{minutes:3.32,words:995},t:"将双精度浮点数转换为不使用科学记数法的字符串",y:"a"}}],["/posts/baeldung/2024-06-30/2024-06-30-Create%20List%20of%20Object%20From%20Another%20Type%20Using%20Java%208.html",{loader:()=>a(()=>import("./2024-06-30-Create List of Object From Another Type Using Java 8.html-COpu597Q.js"),__vite__mapDeps([361,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Java 8"],g:["Java","List","Stream API"],e:`
<p>当我们使用Java工作时，有时我们想要根据另一个对象列表生成一个列表。Java 8引入了一系列新功能，简化了此类操作。</p>
<p>因此，本教程将探讨如何使用Java 8及以后版本中引入的强大功能，基于给定列表创建不同类型对象的列表。</p>
<h2>2. 问题介绍</h2>
<p>像往常一样，我们通过示例来理解问题。</p>
<p>假设一家公司想要启动一个内部网球比赛。现在，比赛委员会想要从所有公司员工中获取一个球员候选人名单。因此，我们将承担这项任务，并创建一个程序来构建球员候选人名单。</p>
<p><em>Employee</em> 类已经准备好了：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Getter</span>
<span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Set</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>\`\` hobbies <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> department<span class="token punctuation">;</span>
    <span class="token comment">// ...其他属性</span>

    <span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> email<span class="token punctuation">,</span> <span class="token class-name">Collection</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>\`\` hobbies<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>hobbies<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>hobbies<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:3.74,words:1121},t:"使用Java 8从另一种类型创建对象列表",y:"a"}}],["/posts/baeldung/2024-06-30/2024-06-30-Creating%20Stream%20of%20Regex%20Matches.html",{loader:()=>a(()=>import("./2024-06-30-Creating Stream of Regex Matches.html-CabcXwfN.js"),__vite__mapDeps([362,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Regex"],g:["Java Stream","Regex Match"],e:`<hr>
<h1>创建正则表达式匹配流</h1>
<p>正则表达式（regex）是模式匹配的强大工具。它们允许我们在字符串中找到特定的模式，这对于数据提取、验证和转换等任务非常有用。</p>
<p>在本教程中，我们将通过一个简单的例子探索如何使用正则表达式创建匹配流。</p>
<h3>2. 入门</h3>
<p>首先，假设我们有一个包含字母和数字的字符串：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> input <span class="token operator">=</span> <span class="token string">"There are 3 apples and 2 bananas on the table."</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:1.63,words:490},t:"创建正则表达式匹配流",y:"a"}}],["/posts/baeldung/2024-06-30/2024-06-30-Detect%20EOF%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-30-Detect EOF in Java.html-CrWVX6ad.js"),__vite__mapDeps([363,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","I/O"],g:["EOF","FileInputStream","BufferedReader","Scanner","FileChannel"],e:`
<p>EOF（文件结束）是指在读取文件时，已经到达文件的末尾的状态。理解EOF检测对于某些应用程序来说至关重要，因为这些应用程序可能需要读取配置文件、处理数据或验证文件。在Java中，有几种方法可以检测到EOF。</p>
<p>在本教程中，我们将探索Java中检测EOF的几种方法。</p>
<h2>2. 示例设置</h2>
<p>在我们继续之前，让我们首先创建一个包含测试用例数据的示例文本文件：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepareFileForTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>pathToFile<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            file<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">FileWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token constant">LOREM_IPSUM</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:5.03,words:1508},t:"Java中检测文件结束的几种方法",y:"a"}}],["/posts/baeldung/2024-06-30/2024-06-30-Detect%20Security%20Vulnerabilities%20with%20Snyk.html",{loader:()=>a(()=>import("./2024-06-30-Detect Security Vulnerabilities with Snyk.html-CrwBH5Aq.js"),__vite__mapDeps([364,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Security"],g:["Snyk","Security","Java"],e:`<hr>
<h1>使用Snyk检测安全漏洞 | Baeldung</h1>
<h2>1. 概述</h2>
<p>在软件开发的快速变化领域中，确保强大的安全性是一个重要但通常棘手的任务。由于现代应用程序严重依赖开源库和依赖项，这些组件中潜藏的漏洞可能构成严重威胁。</p>
<p>这就是Snyk发挥作用的地方，它为开发人员提供了自动检测潜在易受攻击的代码或依赖项的工具。在本文中，我们将探讨其功能以及如何在Java项目的背景下使用它们。</p>
<h2>2. Snyk是什么？</h2>
<p>**Snyk是一个云原生安全平台，专注于识别和减轻开源软件组件和容器中的漏洞。**在我们深入使用特定功能之前，让我们看看本文将重点介绍的主要用途。</p>`,r:{minutes:4.6,words:1381},t:"使用Snyk检测安全漏洞 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-30/2024-06-30-Difference%20Between%20Hashtable%20and%20ConcurrentHashMap%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-30-Difference Between Hashtable and ConcurrentHashMap in Java.html-DK1h7WD6.js"),__vite__mapDeps([365,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Collections"],g:["Hashtable","ConcurrentHashMap"],e:`
<p>当在Java应用程序中管理键值对时，我们经常发现自己在两个主要选项之间进行选择：Hashtable和ConcurrentHashMap。尽管这两种集合都提供了线程安全的优势，但它们的底层架构和能力有显著差异。无论是构建旧系统还是处理基于微服务的云应用程序，理解这些细微差别对于做出正确选择至关重要。</p>
<p>在本教程中，我们将剖析Hashtable和ConcurrentHashMap之间的差异，深入探讨它们的性能指标、同步特性和其他各个方面，以帮助我们做出明智的决策。</p>
<p>Hashtable是Java中最古老的集合类之一，自JDK 1.0以来就存在。它提供了键值存储和检索API：</p>`,r:{minutes:5.95,words:1786},t:"Hashtable和ConcurrentHashMap在Java中的区别",y:"a"}}],["/posts/baeldung/2024-06-30/2024-06-30-Difference%20Between%20permitAll%20%20%20and%20anonymous%20%20%20in%20Spring%20Security.html",{loader:()=>a(()=>import("./2024-06-30-Difference Between permitAll   and anonymous   in Spring Security.html-O9FWNKej.js"),__vite__mapDeps([366,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Security"],g:["permitAll()","anonymous()"],e:`
<p>如果你正在处理 Spring Security（特别是 OAuth）实现，一定要看看《Learn Spring Security》课程。</p>
<h2>1. 概述</h2>
<p>本教程我们将学习 Spring Security 框架中 HttpSecurity 类的 permitAll() 和 anonymous() 方法。Spring Security 框架有助于防止漏洞攻击，并启用 Web 应用程序的认证和授权。利用它，Web 应用程序可以控制对服务器资源的访问，例如 HTML 表单、CSS 文件、JS 文件、Web 服务端点等。它还有助于启用基于角色的访问控制（RBAC）来访问服务器资源。</p>`,r:{minutes:2.26,words:678},t:"Spring Security 中 permitAll() 和 anonymous() 的区别",y:"a"}}],["/posts/baeldung/2024-06-30/2024-06-30-Differences%20Between%20Heap%20Dump%20%20Thread%20Dump%20and%20Core%20Dump.html",{loader:()=>a(()=>import("./2024-06-30-Differences Between Heap Dump  Thread Dump and Core Dump.html-tVONAn7b.js"),__vite__mapDeps([367,1])),meta:{d:1719792e6,l:"2024年7月1日",c:["Java","性能监控"],g:["堆转储","线程转储","核心转储"],e:`
<p>在Java虚拟机（JVM）的帮助下，Java程序的内存管理变得简单。当出现错误时，我们可以从JVM获取转储文件以诊断错误。本教程将探讨三种常见的Java转储文件——堆转储、线程转储和核心转储——并了解它们的使用场景。</p>
<p>在运行时，JVM创建堆，其中包含运行中的Java应用程序中使用的对象的引用。堆转储包含了运行时所有使用中对象的当前状态的保存副本。</p>
<p>此外，它用于分析Java中的_OutOfMemoryError_错误。堆转储可以有两种格式——经典格式和便携式堆格式（PHD）。经典格式是可读的，而PHD是二进制的，需要工具进行进一步分析。此外，PHD是堆转储的默认格式。</p>`,r:{minutes:5.92,words:1777},t:"Java中的堆转储、线程转储和核心转储的区别",y:"a"}}],["/posts/baeldung/2024-06-30/2024-06-30-Expand%20Columns%20with%20Apache%20POI.html",{loader:()=>a(()=>import("./2024-06-30-Expand Columns with Apache POI.html-BDqHBNTS.js"),__vite__mapDeps([368,1])),meta:{d:16935264e5,l:"2023年9月1日",c:["Java","Apache POI"],g:["Excel","Spreadsheet"],e:`
<p>Apache POI是一个流行的Java API，用于以编程方式操作不同类型的Microsoft Office文档，如Word、Excel和PowerPoint。</p>
<p><strong>我们经常需要在Excel电子表格中扩展列宽。这是制作电子表格供人们阅读时的一个常见需求。</strong> 这有助于读者更好地可视化列中的内容，而这在默认列宽下是做不到的。</p>
<p>在本教程中，我们将学习如何使用API手动和自动调整Excel电子表格中的列宽。</p>
<h2>2. 依赖项</h2>
<p>首先，我们需要在Maven的_pom.xml_中添加以下Apache POI依赖项：</p>`,r:{minutes:3.07,words:922},t:"使用Apache POI扩展列宽",y:"a"}}],["/posts/baeldung/2024-06-30/2024-06-30-Extract%20CN%20From%20X509%20Certificate%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-30-Extract CN From X509 Certificate in Java.html-DtrDYIxw.js"),__vite__mapDeps([369,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Security"],g:["X509","Certificate","Common Name"],e:`
<p><strong>通用名称（CN）是X.509证书中的可分辨名称（DN）字段内的一个属性</strong>。CN通常是证书所属组织的域名。有时，我们需要在应用程序中访问证书文件中的CN值。</p>
<p>在本教程中，我们将学习<strong>在Java中提取CN值的不同方法</strong>。</p>
<h3>2. 通用名称</h3>
<p>证书包含了关于证书所有者的信息：有效期、证书用途、DN等。</p>
<p><strong>可分辨名称或DN本质上由一组名称-值对组成，名称包括国家（C）、组织（O）、组织单位（OU）、CN等</strong>。</p>
<p>一个DN看起来像这样：“<em>CN=Baeldung, L=Casablanca, ST=Morocco, C=MA</em>”。如示例所示，CN通常是网站的域名。</p>`,r:{minutes:3.93,words:1180},t:"在Java中从X509证书提取通用名称",y:"a"}}],["/posts/baeldung/2024-06-30/2024-06-30-Find%20the%20Middle%20Element%20of%20an%20Array%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-30-Find the Middle Element of an Array in Java.html-DGPgRBQI.js"),__vite__mapDeps([370,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Arrays"],g:["Java","Arrays","Middle Element"],e:`
<p>在本教程中，我们将探讨查找数组中间元素的问题。数组是一种数据结构，用于存储相同类型的数据元素。</p>
<p>数组的元素在内存中连续存储，并与索引关联。数组具有固定的长度。</p>
<h3>问题陈述</h3>
<p>**给定一个包含_n_个元素的数组，我们应该返回一个新数组，包含数组的中间元素（们）。**如果输入数组的长度是奇数，数组有一个中间元素。另一方面，如果输入数组的长度是偶数，则有两个中间元素。</p>
<p>我们的代码输出应该返回一个长度为1或2的数组，这取决于输入数组。</p>
<p>让我们看一些例子：</p>
<ul>
<li>给定一个包含5个元素的输入数组：[1, 2, 3, 4, 5]，输出是[3]。由于数组的长度是5，这是一个奇数，我们可以说存在一个单一的中间元素，在我们的例子中是3。</li>
<li>给定一个包含6个元素的输入数组：[1, 2, 3, 4, 5, 6]，输出是[3, 4]。在这种情况下，数组的长度是6，这是一个偶数。这里，3和4都是数组的中间元素。</li>
</ul>`,r:{minutes:7.61,words:2282},t:"在Java中找到数组的中间元素",y:"a"}}],["/posts/baeldung/2024-06-30/2024-06-30-Guide%20to%20Reading%20YAML%20Content%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-06-30-Guide to Reading YAML Content in Kotlin.html-Cvjx-qvq.js"),__vite__mapDeps([371,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin","YAML"],g:["Kotlin","YAML","kotlinx-serialization","kaml","YamlKt"],e:`
<p>YAML（YAML Ain’t Markup Language）是一种人类可读的数据序列化格式，通常用于配置文件。官方的Kotlin库kotlinx-serialization并不直接支持YAML格式。然而，有一些社区支持的库，比如kaml和YamlKt，它们内部使用kotlinx-serialization来支持YAML格式。</p>
<p>在本文中，我们将<strong>学习在Kotlin中读取YAML内容的反序列化过程</strong>。</p>
<h2>2. 依赖设置</h2>
<p>首先，让我们<strong>在项目的pom.xml中添加kaml-jvm依赖</strong>：</p>`,r:{minutes:7.34,words:2202},t:"Kotlin中读取YAML内容指南",y:"a"}}],["/posts/baeldung/2024-06-30/2024-06-30-How%20To%20Convert%20Excel%20Data%20Into%20List%20Of%20Java%20Objects.html",{loader:()=>a(()=>import("./2024-06-30-How To Convert Excel Data Into List Of Java Objects.html-zNlWIqGJ.js"),__vite__mapDeps([372,1])),meta:{d:17197056e5,l:"2024年6月30日",c:["Java","Excel"],g:["Apache POI","Poiji","FastExcel","JExcelApi"],e:`
<h2>1. 引言</h2>
<p>在软件开发中，理解数据映射是至关重要的。Excel是一种广泛使用的数据管理软件，因此对于Java开发人员来说，了解如何在Excel和Java对象之间映射数据至关重要。</p>
<p>在本教程中，我们将探讨如何将Excel数据转换为Java对象列表。</p>
<p>在Maven仓库中有几种Java库可用于在Java中处理Excel文件，其中Apache POI是最常见的。然而，在本教程中，我们将使用四种Java Excel库，包括Apache POI、Poiji、FastExcel和JExcelApi (Jxl)，将Excel数据转换为Java对象列表。</p>`,r:{minutes:7.45,words:2234},t:"如何将Excel数据转换为Java对象列表 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-30/2024-06-30-How%20to%20Get%20Index%20of%20an%20Item%20in%20Java%20Set.html",{loader:()=>a(()=>import("./2024-06-30-How to Get Index of an Item in Java Set.html-B36YOzGg.js"),__vite__mapDeps([373,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Collections"],g:["Java","Set","Index"],e:`<hr>
<h1>如何在Java集合中获取元素的索引</h1>
<p>在本教程中，我们将探讨如何在Java的_Set_中获取一个项目的索引。Java中的_Set_不允许有重复元素，一些重要的_Set_接口实现包括_HashSet_、<em>TreeSet_和_LinkedHashSet</em>。</p>
<h2>2. Java中的有序、无序和排序集合</h2>
<p>在我们查看问题陈述之前，让我们先看看Java中不同类型的集合之间的区别：</p>
<ul>
<li>有序集合</li>
<li>无序集合</li>
<li>排序集合</li>
</ul>
<p>有序集合维护其元素的插入顺序。元素按照它们被插入的顺序存储，并且可以通过它们的位置来访问。<strong>这些集合通常提供一个_get(index)_接口来检索特定索引处的元素。</strong> 实现_List_接口的类，如_ArrayList_、_LinkedList_等，是有序集合的例子。</p>`,r:{minutes:5.91,words:1772},t:"如何在Java集合中获取元素的索引",y:"a"}}],["/posts/baeldung/2024-06-30/2024-06-30-How%20to%20Mock%20Constructors%20for%20Unit%20Testing%20using%20Mockito.html",{loader:()=>a(()=>import("./2024-06-30-How to Mock Constructors for Unit Testing using Mockito.html-DI1uoYRC.js"),__vite__mapDeps([374,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Mockito"],g:["Unit Testing","Mocking"],e:`<hr>
<h1>如何使用Mockito进行单元测试中的构造函数模拟</h1>
<p>在这篇简短的教程中，我们将探索使用Mockito和PowerMock在Java中有效模拟构造函数的各种选项。</p>
<h2>2. 使用PowerMock模拟构造函数</h2>
<p>使用Mockito版本3.3或更低版本模拟构造函数或静态方法是不可能的事情。在这种情况下，像PowerMock这样的库提供了额外的功能，允许我们模拟构造函数的行为并协调它们的交互。</p>
<h2>3. 模型</h2>
<p>让我们使用两个Java类来模拟一个支付处理系统。我们将创建一个<code>PaymentService</code>类，其中包含处理支付的逻辑，并提供了一个参数化构造函数以指定支付方式，以及一个带有回退模式的默认构造函数：</p>`,r:{minutes:4.44,words:1331},t:"如何使用Mockito进行单元测试中的构造函数模拟",y:"a"}}],["/posts/baeldung/2024-06-30/2024-06-30-How%20to%20Permanently%20Enable%20Line%20Numbers%20in%20IntelliJ%20IDEA%20.html",{loader:()=>a(()=>import("./2024-06-30-How to Permanently Enable Line Numbers in IntelliJ IDEA .html-BPX4iwzN.js"),__vite__mapDeps([375,1])),meta:{d:16935264e5,l:"2023年9月1日",c:["IntelliJ IDEA","编程技巧"],g:["代码编辑器","代码行号"],e:`
<p>IntelliJ是一个流行的集成开发环境（IDE）工具，用于代码开发。它是一个智能的代码辅助工具，可以提高代码生产力并加快开发工作。此外，它还以结构化的方式组织项目目录。它还用于多种编程语言，如Python、Java、Kotlin、Lua等。</p>
<p>在本教程中，我们将学习如何在IntelliJ中以不同方式启用行号。此外，允许项目中的行号是一个方便的功能，用于编写和调试代码。</p>
<h2>2. 全局启用行号</h2>
<p>启用行号是一个简单的任务，因为它可以提高代码生产力和开发人员的体验。此外，它有助于快速有效地编写代码。在IntelliJ中，我们可以全局启用此功能，也可以针对特定文件启用。</p>`,r:{minutes:3.01,words:904},t:"如何在IntelliJ IDEA中永久启用行号",y:"a"}}],["/posts/baeldung/2024-06-30/2024-06-30-How%20to%20Replace%20Deprecated%20jdbcTemplate.queryForObject%20and%20jdbcTemplate.query%20in%20Spring%20Boot%202.4.X%20and%20above.html",{loader:()=>a(()=>import("./2024-06-30-How to Replace Deprecated jdbcTemplate.queryForObject and jdbcTemplate.query in Spring Boot 2.4.X and above.html-BWdDDyzy.js"),__vite__mapDeps([376,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Boot","Java"],g:["Spring","JDBC","Deprecated Methods"],e:`
<p>在这个教程中，我们将讨论JdbcTemplate中已弃用的queryForObject()和query()方法及其首选替代方法。已弃用的方法接受在对象数组中传递的参数，而新方法则使用Varargs来传递参数。这种方法更直观，因为Varargs专门设计用于高效地向方法传递可变数量的参数。</p>
<p>在我们的教程中，我们将通过在内存中的H2数据库上运行查询来解释所有方法。</p>
<h3>2. 数据库设置</h3>
<p>在我们讨论问题方法之前，让我们首先检查一下我们将在所有示例中使用的学生表：</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> student <span class="token punctuation">(</span>
  student_id <span class="token keyword">INT</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>
  student_name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  age <span class="token keyword">INT</span><span class="token punctuation">,</span>
  grade <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  gender <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  state <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 学生 1</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token punctuation">(</span>student_name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> grade<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'John Smith'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'Male'</span><span class="token punctuation">,</span> <span class="token string">'California'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 学生 2</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token punctuation">(</span>student_name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> grade<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'Emily Johnson'</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'Female'</span><span class="token punctuation">,</span> <span class="token string">'New York'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 更多插入语句...</span>
</code></pre></div>`,r:{minutes:7.49,words:2248},t:"如何在Spring Boot 2.4.X及以上版本中替换已弃用的jdbcTemplate.queryForObject和jdbcTemplate.query方法 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-30/2024-06-30-How%20to%20Split%20an%20Integer%20Number%20Into%20Digits%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-30-How to Split an Integer Number Into Digits in Java.html-DXdfx89-.js"),__vite__mapDeps([377,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Programming"],g:["Java","Integer","Digits"],e:`
<h2>1. 概述</h2>
<p>在Java中处理整数时，有时我们需要将它们拆分成单独的数字以进行各种计算或数据操作任务。</p>
<p>在本教程中，我们将探索使用Java将整数拆分成其构成数字的各种方法。</p>
<h2>2. 问题介绍</h2>
<p>像往常一样，让我们通过一个例子来理解问题。假设我们有一个整数：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>int THE_NUMBER = 1230456;
</code></pre></div>`,r:{minutes:3.72,words:1115},t:"如何在Java中将整数拆分成单个数字 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-30/2024-06-30-How%20to%20Use%20Conditional%20Mapping%20With%20MapStruct.html",{loader:()=>a(()=>import("./2024-06-30-How to Use Conditional Mapping With MapStruct.html-BtAvEvf9.js"),__vite__mapDeps([378,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java"],g:["MapStruct","条件映射"],e:`
<p>MapStruct 是一个代码生成工具，它简化了Java Bean类型之间的映射。在本文中，我们将探讨如何使用MapStruct进行条件映射，并查看实现它的不同配置。</p>
<p>在对象之间映射数据时，我们经常需要根据某些条件映射一个属性，MapStruct提供了一些配置选项来实现这一点。</p>
<p>让我们检查一个目标_License_对象的实例，它需要根据几个条件映射属性：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">License</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">UUID</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">OffsetDateTime</span> startDate<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">OffsetDateTime</span> endDate<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> active<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> renewalRequired<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">LicenseType</span> licenseType<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">LicenseType</span> <span class="token punctuation">{</span>
        <span class="token constant">INDIVIDUAL</span><span class="token punctuation">,</span> <span class="token constant">FAMILY</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// getters and setters</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:4.23,words:1269},t:"如何使用MapStruct进行条件映射",y:"a"}}],["/posts/baeldung/2024-06-30/2024-06-30-Intro%20to%20Gradle%20Lint%20Plugin.html",{loader:()=>a(()=>import("./2024-06-30-Intro to Gradle Lint Plugin.html-s5Xufom_.js"),__vite__mapDeps([379,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Gradle"],g:["Gradle Lint","插件"],e:`
<p>在本文中，我们将探索 Gradle Lint 插件。
首先，我们将看到何时使用它。然后，我们将逐步了解插件的配置选项。接下来，我们将使用一些预定义的规则。最后，我们将生成 Lint 报告。</p>
<h2>2. Gradle Lint 插件是什么？</h2>
<p><strong>Gradle Lint 插件有助于对 Gradle 配置文件进行 Lint 检查。</strong> 它强制执行代码库中构建脚本的结构。该插件可以保持 Gradle Wrapper 版本的更新，防止构建文件中的不良实践，并<strong>移除未使用的依赖。</strong></p>
<p>实际上，我们使用预定义的规则或编写自定义规则。然后，我们配置插件将它们视为违规或忽略它们。Linter 在大多数 Gradle 任务的最后运行。</p>`,r:{minutes:7.55,words:2265},t:"Gradle Lint 插件介绍",y:"a"}}],["/posts/baeldung/2024-06-30/2024-06-30-Invoke%20Spring%20%20Cacheable%20from%20Another%20Method%20of%20Same%20Bean.html",{loader:()=>a(()=>import("./2024-06-30-Invoke Spring  Cacheable from Another Method of Same Bean.html-B-1Rcdkt.js"),__vite__mapDeps([380,1])),meta:{d:17197056e5,l:"2024年6月30日",c:["Spring","Cache"],g:["Spring","Cacheable","AOP"],e:`<hr>
<h1>在同一个Bean中调用@Cacheable方法</h1>
<p>Spring提供了一种基于注解的方法来启用Spring管理Bean的缓存。基于AOP技术，通过在方法上添加@Cacheable注解，可以很容易地使方法可缓存。然而，当从同一个类内部调用时，缓存将被忽略。</p>
<p>在本教程中，我们将解释为什么会发生这种情况以及如何解决它。</p>
<h2>2. 重现问题</h2>
<p>首先，我们创建一个启用了缓存的Spring Boot应用程序。在本文中，我们创建了一个带有@Cacheable注解的square方法的MathService：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@CacheConfig</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">"square"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MathService</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> counter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span>allEntries <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">AtomicInteger</span> <span class="token function">resetCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        counter<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> counter<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token string">"#n"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token keyword">double</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        counter<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> n <span class="token operator">*</span> n<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:5.33,words:1600},t:"在同一个Bean中调用@Cacheable方法",y:"a"}}],["/posts/baeldung/2024-06-30/2024-06-30-JSON%20File%20Data%20Into%20Kafka%20Topic.html",{loader:()=>a(()=>import("./2024-06-30-JSON File Data Into Kafka Topic.html-DVx_LbGH.js"),__vite__mapDeps([381,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Kafka"],g:["JSON","Kafka","Streaming"],e:`
<p>Apache Kafka是一个开源的、容错性强、高度可扩展的流处理平台。它遵循发布-订阅架构来实时流式传输数据。我们可以通过将数据放入队列中，以非常低的延迟处理大量数据。有时，我们需要将JSON类型的数据发送到Kafka主题进行数据处理和分析。</p>
<p>在本教程中，我们将学习如何将JSON数据流式传输到Kafka主题。此外，我们还将了解如何为JSON数据配置Kafka生产者和消费者。</p>
<h3>2. Kafka中JSON数据的重要性</h3>
<p>从架构上讲，Kafka支持系统中的消息流。因此，我们也可以向Kafka服务器发送JSON数据。<strong>如今，在现代应用系统中，每个应用程序主要处理JSON数据，因此以JSON格式进行通信变得非常重要。</strong> 通过以JSON格式发送数据，有助于实时跟踪用户及其在网站和应用程序上的行为。</p>`,r:{minutes:4.25,words:1275},t:"Kafka主题中传输JSON文件数据",y:"a"}}],["/posts/baeldung/2024-06-30/2024-06-30-Java%20Double%20vs.%20BigDecimal.html",{loader:()=>a(()=>import("./2024-06-30-Java Double vs. BigDecimal.html-CTWk0hJf.js"),__vite__mapDeps([382,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","BigDecimal"],g:["Double","BigDecimal"],e:`
<p>在Java中，选择使用 Double 和 BigDecimal 可以显著影响性能以及浮点数的精度和准确性。在本教程中，我们将比较这两种类的属性、优点和缺点、它们的用例以及如何处理它们的精度和舍入问题。</p>
<p>Double 类是 double 原始数据类型的包装器，非常适合用于一般目的的浮点算术，并且在许多场景中表现良好。然而，它有一些限制。最突出的问题是其有限的精度。由于二进制表示的特性，double 数字在处理小数分数时可能会遭受舍入误差。</p>
<p>例如，double 字面量 0.1 并不完全等于十进制分数 0.1，而是稍微大一点的值：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>@Test
public void givenDoubleLiteral_whenAssigningToDoubleVariable_thenValueIsNotExactlyEqual() {
    double doubleValue = 0.1;
    double epsilon = 0.0000000000000001;
    assertEquals(0.1, doubleValue, epsilon);
}
</code></pre></div>`,r:{minutes:5.57,words:1672},t:"Java Double  BigDecimal 的比较 | Baeldung",y:"a"}}],["/posts/baeldung/2024-06-30/2024-06-30-Log4j%202%20Configuration%20Using%20a%20Properties%20File.html",{loader:()=>a(()=>import("./2024-06-30-Log4j 2 Configuration Using a Properties File.html-D6Uj7Ojc.js"),__vite__mapDeps([383,1])),meta:{d:17197056e5,l:"2024年6月30日",c:["Java","Log4j2"],g:["Log4j2","日志配置"],e:`
<p>Log4j 2 是一个流行的开源 Java 日志框架。它被引入是为了克服 Log4j 的各种架构缺陷。它是线程安全的、快速的，并且提供了许多改进，超过了它的前身。它在开源 Apache 软件许可下分发。</p>
<p>Log4j 2 是经典 Log4j 框架的最新和改进版本，该框架在 2015 年 8 月 5 日达到了生命周期的终点。然而，Log4j 仍然在许多 Java 企业应用程序中作为日志框架被广泛使用。</p>
<p>在本教程中，我们将学习 Log4j 2，它相对于 Log4j 的优势，以及如何使用 Java 中的 <em>log4j2.properties</em> 文件配置其核心组件。</p>`,r:{minutes:6.31,words:1894},t:"Log4j 2 使用属性文件进行配置",y:"a"}}],["/posts/baeldung/2024-06-30/2024-06-30-Maven%20Multi%20Module%20Project%20Coverage%20With%20Jacoco.html",{loader:()=>a(()=>import("./2024-06-30-Maven Multi Module Project Coverage With Jacoco.html-C_LCPS_E.js"),__vite__mapDeps([384,1])),meta:{d:16935264e5,l:"2023年9月1日",c:["Java","Maven"],g:["Jacoco","多模块","Maven插件"],e:`<hr>
<h1>Maven多模块项目使用Jacoco进行代码覆盖率统计</h1>
<p>在这个教程中，我们将构建一个Maven多模块项目。在这个项目中，服务和控制器将位于不同的模块中。然后，我们将编写一些测试并使用Jacoco来计算代码覆盖率。</p>
<h2>2. 服务层</h2>
<p>首先，让我们创建我们多模块应用的服务层。</p>
<h3>2.1. 服务类</h3>
<p><strong>我们将创建我们的服务并添加几个方法：</strong></p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> <span class="token function">unitTestedOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"仅单元测试"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">String</span> <span class="token function">coveredByUnitAndIntegrationTests</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"单元测试和集成测试覆盖"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">String</span> <span class="token function">coveredByIntegrationTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"仅集成测试覆盖"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">String</span> <span class="token function">notTested</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"未测试"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:4.38,words:1313},t:"Maven多模块项目使用Jacoco进行代码覆盖率统计",y:"a"}}],["/posts/baeldung/2024-06-30/2024-06-30-Mock%20Same%20Method%20with%20Different%20Parameters.html",{loader:()=>a(()=>import("./2024-06-30-Mock Same Method with Different Parameters.html-CksdThsU.js"),__vite__mapDeps([385,1])),meta:{d:1719792e6,l:"2024年7月1日",c:["Java","编程"],g:["测试","模拟"],e:`
<p>当在Java中模拟一个方法时，根据传入的参数接收不同的响应可能是有用的。在本文中，我们将根据不同的复杂性要求，探讨实现这一目标的不同方式。</p>
<h2>2. 设置</h2>
<p>首先，<strong>让我们创建一个我们想要模拟的示例服务</strong>：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">ExampleService</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:4.24,words:1272},t:"Java中模拟相同方法的不同参数",y:"a"}}],["/posts/baeldung/2024-06-30/2024-06-30-Overview%20of%20Mockito%20MockedConstruction.html",{loader:()=>a(()=>import("./2024-06-30-Overview of Mockito MockedConstruction.html-D5qbcSyx.js"),__vite__mapDeps([386,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Mockito"],g:["Mockito","Unit Testing"],e:'\n<p>在编写单元测试时，有时会遇到一种情况，即在构造新对象时返回一个模拟对象可能会很有用。例如，当测试具有紧密耦合对象依赖性的遗留代码时。</p>\n<p>在本教程中，我们将看看Mockito的一个相对较新的特性，它允许我们在构造函数调用时生成模拟对象。</p>\n<p>要了解更多关于使用Mockito进行测试的信息，请查看我们全面的Mockito系列。</p>\n<h2><strong>2. 依赖项</strong></h2>\n<p>首先，我们需要将_mockito_依赖项添加到我们的项目中：</p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>``org.mockito``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>``mockito-core``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>``5.11.0``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>``test``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n</code></pre></div>',r:{minutes:6.76,words:2027},t:"Mockito MockedConstruction 概览",y:"a"}}],["/posts/baeldung/2024-06-30/2024-06-30-Query%20With%20IN%20Clause%20in%20Spring%20Data%20Cassandra.html",{loader:()=>a(()=>import("./2024-06-30-Query With IN Clause in Spring Data Cassandra.html-CojHHFo8.js"),__vite__mapDeps([387,1])),meta:{d:17138304e5,l:"2024年4月23日",c:["Spring Data Cassandra","Query IN Clause"],g:["Spring Data Cassandra","IN Clause","Query Optimization"],e:`<hr>
<h1>Spring Data Cassandra中使用IN子句查询的实现</h1>
<p>在本教程中，我们将学习如何使用Spring Data Cassandra实现使用IN子句查询多个记录的方法。我们将使用IN子句来指定一列的多个值。我们还将测试时遇到一个意外的错误，并理解其根本原因并解决问题。</p>
<h3>2.1. 理解IN运算符的使用</h3>
<p>在我们构建应用程序之前，让我们先了解这个运算符的使用。IN条件只允许在分区键的最后一列使用<strong>如果我们查询所有前面的键列的等值</strong>。同样，我们可以在任何聚簇键列中使用它，遵循相同的规则。</p>
<h3>2.2. Maven依赖</h3>`,r:{minutes:4.22,words:1266},t:"Spring Data Cassandra中使用IN子句查询的实现",y:"a"}}],["/posts/baeldung/2024-06-30/2024-06-30-Replacing%20Single%20Quote%20with%20%20%20%20in%20Java%20String.html",{loader:()=>a(()=>import("./2024-06-30-Replacing Single Quote with    in Java String.html-DyW0gXKi.js"),__vite__mapDeps([388,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","String Manipulation"],g:["Java","String","replace","escape"],e:`
<p>在Java中，单引号用于定义字符字面量，而双引号用于定义字符串字面量。我们也可以在字符串字面量中使用单引号。在本教程中，我们将学习如何在Java字符串中替换单引号。</p>
<h2>2. 如何在Java中转义特殊字符？</h2>
<p>字符串是字符序列，这些字符可以是字母、数字、标点符号等。在创建字符串时，它必须用双引号括起来，但如果我们需要创建一个本身包含单引号的字符串，我们应该怎么做呢？Java会误解字符串并抛出错误，因为单引号被解释为特殊字符。</p>
<p>为了解决这个问题，我们可以简单地使用转义字符，例如特殊的反斜杠\\字符，它将特殊字符转换为字符串字符。</p>
<p>例如，假设我们想要将字符串中的单引号替换为'。</p>`,r:{minutes:2.34,words:701},t:"在Java字符串中替换单引号",y:"a"}}],["/posts/baeldung/2024-06-30/2024-06-30-Secure%20Kubernetes%20Secrets%20with%20Vault.html",{loader:()=>a(()=>import("./2024-06-30-Secure Kubernetes Secrets with Vault.html-Czso8Aui.js"),__vite__mapDeps([389,1])),meta:{d:16490304e5,l:"2022年4月4日",c:["Spring","Kubernetes"],g:["Vault","Kubernetes Secrets"],e:`
<p>在本教程中，我们将探讨从运行在Kubernetes上的应用中访问存储在Hashicorp的Vault中的秘密的不同方式。</p>
<h2>2. 快速回顾</h2>
<p>我们在之前的教程中已经介绍过Hashicorp的Vault，其中展示了如何安装Vault并用秘密填充它。简而言之，Vault为应用程序秘密提供了一个安全的存储服务，这些秘密可以是静态的或动态生成的。</p>
<p>要访问Vault服务，应用程序必须使用可用的机制之一进行身份验证。<strong>当应用程序在Kubernetes环境中运行时，Vault可以根据其关联的服务帐户对其进行身份验证，从而消除了单独凭据的需要。</strong></p>`,r:{minutes:12.35,words:3706},t:"使用Vault安全存储Kubernetes Secrets",y:"a"}}],["/posts/baeldung/2024-06-30/2024-06-30-Securing%20Spring%20Boot%203%20Applications%20With%20SSL%20Bundles.html",{loader:()=>a(()=>import("./2024-06-30-Securing Spring Boot 3 Applications With SSL Bundles.html-B39SLD2m.js"),__vite__mapDeps([390,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Boot","Security"],g:["SSL","Spring Security"],e:`
<p>如果您正在处理Spring Security（特别是OAuth）实现，一定要看看《学习Spring安全》课程。</p>
<p><strong>&gt;&gt; 学习Spring</strong>
<strong>安全</strong></p>
<h2>1. 引言</h2>
<p>在Spring Boot应用程序中管理安全通信通常涉及处理复杂的配置。挑战通常从处理信任材料开始，如证书和私钥，它们以JKS、PKCS #12或PEM等各种格式出现。每种格式都有其自身的处理要求。</p>
<p>幸运的是，Spring Boot 3.1引入了SSL Bundles，这是一个旨在简化这些复杂性的功能。在本教程中，我们将探讨SSL Bundles是什么以及它们如何简化Spring Boot应用程序的SSL配置任务。</p>`,r:{minutes:7.31,words:2192},t:"使用SSL Bundles保护Spring Boot 3应用程序",y:"a"}}],["/posts/baeldung/2024-06-30/2024-06-30-Sequenced%20Collections%20in%20Java%2021.html",{loader:()=>a(()=>import("./2024-06-30-Sequenced Collections in Java 21.html-DeJsKFiM.js"),__vite__mapDeps([391,1])),meta:{d:16935264e5,l:"2023年9月1日",c:["Java","编程"],g:["Java 21","序列化集合"],e:`
<h2>1. 概述</h2>
<p><strong>Java 21</strong> 预计将在 2023 年 9 月发布，作为 Java 17 之后的下一个长期支持版本。在新特性中，我们可以发现对 Java 的集合框架进行了更新，称为 <strong>序列化集合</strong>。</p>
<p>序列化集合提案是一个引人注目的增强功能，承诺重新定义开发人员与集合的交互方式。这个特性在现有的层级结构中注入了新的接口，提供了一种无缝的机制，使用内置的默认方法访问集合的第一个和最后一个元素。此外，它还提供了支持获取集合的反向视图。</p>
<p>在本文中，我们将探讨这个新增强功能、它的潜在风险以及它带来的优点。</p>`,r:{minutes:5.33,words:1600},t:"Java 21 中的序列化集合",y:"a"}}],["/posts/baeldung/2024-06-30/2024-06-30-Streams%20vs.%20Loops%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-30-Streams vs. Loops in Java.html-46Qq7zWf.js"),__vite__mapDeps([392,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","编程"],g:["Java 8","性能","可读性","并发","流"],e:`
<p>在本教程中，我们将深入比较 Java 8 中引入的流（Streams）和传统的 for 循环。这些工具在每个 Java 开发者的数据处理中扮演着至关重要的角色。尽管它们在许多方面都有所不同，正如我们将在文章的其余部分中看到的那样，它们有非常相似的用例，并且很多时候可以轻松互换使用。</p>
<p>流提供了一种函数式和声明性的处理方法，而 for 循环提供了传统的命令式方法。通过本文的学习，我们可以为我们的编程任务做出最合适的决策。</p>
<h2>性能</h2>
<p>在比较特定编程问题的解决方案时，我们通常需要讨论性能。这个案例也不例外。由于流和 for 循环都用于处理大量数据，因此在选择合适的解决方案时，性能可能很重要。</p>`,r:{minutes:7.56,words:2268},t:"Java 中的流与循环比较",y:"a"}}],["/posts/baeldung/2024-06-30/2024-06-30-Test%20Main%20Method%20with%20JUnit.html",{loader:()=>a(()=>import("./2024-06-30-Test Main Method with JUnit.html-DN_DMNwE.js"),__vite__mapDeps([393,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","JUnit"],g:["JUnit","Testing","main method"],e:`<hr>
<h1>使用JUnit测试main方法</h1>
<h2>1. 概述</h2>
<p>main()方法是每个Java应用程序的起始点，根据应用程序的类型，它的外观可能会有所不同。在常规的Web应用程序中，main()方法将负责启动上下文，但在某些控制台应用程序中，我们将业务逻辑放入其中。</p>
<p>测试main()方法相当复杂，因为我们有一个只接受字符串参数且不返回任何内容的静态方法。</p>
<p>在本文中，我们将重点讨论如何测试main方法，特别是关注命令行参数和输入流。</p>
<h2>2. Maven依赖</h2>
<p>对于本教程，我们需要几个测试库（Junit和Mockito）以及Apache Commons CLI来处理参数：</p>`,r:{minutes:7.42,words:2227},t:"使用JUnit测试main方法",y:"a"}}],["/posts/baeldung/2024-06-30/2024-06-30-Value%20Based%20Classes%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-30-Value Based Classes in Java.html-5a4zw7_j.js"),__vite__mapDeps([394,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Programming"],g:["Java","Value-Based Classes","Project Valhalla"],e:`<hr>
<h1>Java中基于值的类</h1>
<p>在本教程中，我们将讨论Project Valhalla为Java生态系统带来的一个非常有趣的特性——基于值的类。基于值的类是在Java 8中引入的，并在后续版本中经历了重大的重构和增强。</p>
<h3>2.1. Project Valhalla</h3>
<p>Project Valhalla是由OpenJDK的一个实验性项目，旨在为Java添加新特性和能力。该计划的主要目标是添加对值类型、泛型专业化以及在保持完全向后兼容性的同时的性能改进的改进支持。</p>
<p>基于值的类是由Project Valhalla引入的一个特性，它将原始的、不可变值引入到Java语言中，而没有传统面向对象类带来的额外开销。</p>`,r:{minutes:8.86,words:2658},t:"Java中基于值的类",y:"a"}}],["/posts/baeldung/2024-06-30/2024-06-30-What%20Is%20a%20TLAB%20or%20Thread%20Local%20Allocation%20Buffer%20in%20Java%20.html",{loader:()=>a(()=>import("./2024-06-30-What Is a TLAB or Thread Local Allocation Buffer in Java .html-XQc-Na8Q.js"),__vite__mapDeps([395,1])),meta:{d:16935264e5,l:"2023年9月1日",c:["Java","JVM"],g:["TLAB","内存分配"],e:`
<p>在本教程中，我们将探讨线程本地分配缓冲区（TLABs）。我们将了解它们是什么，JVM如何使用它们，以及我们如何管理它们。</p>
<h2>Java中的内存分配</h2>
<p>Java中的某些命令将分配内存。最明显的是_new_关键字，但还有其他的——例如，使用反射。</p>
<p>每当我们这样做时，JVM必须在堆上为新对象留出一些内存。特别是，JVM内存分配以这种方式在Eden或Young空间中进行所有分配。</p>
<p>在单线程应用程序中，这很容易。由于一次只能发生一个内存分配请求，线程可以简单地获取下一个合适大小的块，我们完成了：</p>
<figure><img src="https://www.baeldung.com/wp-content/uploads/2023/09/single-threaded-heap-allocation-1024x307.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>`,r:{minutes:7.21,words:2164},t:"Java中的TLAB或线程本地分配缓冲区是什么？",y:"a"}}],["/posts/baeldung/2024-06-30/2024-06-30-When%20to%20Call%20System.out.flush%20%20%20in%20Java%20.html",{loader:()=>a(()=>import("./2024-06-30-When to Call System.out.flush   in Java .html-CAuuaNQd.js"),__vite__mapDeps([396,1])),meta:{d:16935264e5,l:"2023年9月1日",c:["Java","I/O"],g:["System.out","flush"],e:`
<ol>
<li>引言</li>
</ol>
<p>Java语言的基本特性之一是_System.out_流，它通常用于生成控制台输出。无论是用来打印我们的第一个“Hello, World!”还是调试复杂的应用程序，我们很可能会用到_System.out_。</p>
<p>在本教程中，我们将讨论在Java中何时调用_System.out.flush()_。</p>
<ol start="2">
<li>缓冲概念</li>
</ol>
<p>缓冲是计算中的基本概念，特别是在I/O操作中。在输出流的上下文中，缓冲指的是在数据被写出之前暂时存储数据。一旦这个缓冲区达到其容量或被显式刷新，累积的数据将一次性被写出。</p>`,r:{minutes:3.16,words:949},t:"Java中何时调用System.out.flush()？",y:"a"}}],["/posts/baeldung/2024-07-01/2024-07-01-Aggregate%20Runtime%20Exceptions%20in%20Java%20Streams.html",{loader:()=>a(()=>import("./2024-07-01-Aggregate Runtime Exceptions in Java Streams.html-BwVkmntH.js"),__vite__mapDeps([397,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Stream"],g:["Java","Stream","Exception Handling"],e:`
<p>在本教程中，我们将学习如何在流管道中聚合异常。</p>
<p>流API本身并没有提供任何声明式的方式来处理异常。它在管道中只有一个用于处理数据的通道，并没有单独的通道用于处理异常。这意味着它没有提供一种在遇到异常时调用函数的方式。因此，我们不得不退回到使用try-catch块来捕获异常。</p>
<p>因此，在流管道中聚合异常并处理它们可能是一个挑战。</p>
<h2>在流管道中使用try-catch块聚合异常</h2>
<p>通常有这样的情况，必须调用某个方法以产生效果，例如，一个简单的数据库更新可能会因为连接失败而抛出异常。考虑到这一点，让我们考虑一个在管道中调用<code>processThrowsExAndNoOutput()</code>的简单例子：</p>`,r:{minutes:6.33,words:1900},t:"Java Stream中聚合运行时异常",y:"a"}}],["/posts/baeldung/2024-07-01/2024-07-01-Amazon%20SNS%20vs.%20Amazon%20SQS.html",{loader:()=>a(()=>import("./2024-07-01-Amazon SNS vs. Amazon SQS.html-B5mnt8Ul.js"),__vite__mapDeps([398,1])),meta:{d:1690848e6,l:"2023年8月1日",c:["AWS","教程"],g:["Amazon SNS","Amazon SQS"],e:`
<h2>1. 引言</h2>
<p>在本教程中，我们将讨论AWS为用户提供的两项顶级服务：SNS和SQS。首先，我们将简要描述这两项服务，并查看一些简单的用例。然后，我们将从不同角度指出它们之间的主要区别。最后，我们将看到这些服务结合在一起时表现出的强大功能和能力。</p>
<h2>2. SNS定义和用例</h2>
<p><strong>用户使用Amazon Simple Notification Service作为发送实时通知的托管服务。</strong> 为了更容易理解SNS，我们可以特别关注三个对象：主题、发布者和订阅者。一个主题可以从多个发布者接收消息，并将相同的消息传递给多个订阅者。发布者发送到主题的每条消息都会到达所有注册的订阅者：</p>`,r:{minutes:5.48,words:1645},t:"Amazon SNS与Amazon SQS | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-01/2024-07-01-Breadth%20First%20Search%20Algorithm%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-01-Breadth First Search Algorithm in Kotlin.html-CDGs4gwl.js"),__vite__mapDeps([399,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin","Algorithms"],g:["BFS","Graphs","Kotlin"],e:`<hr>
<h1>Kotlin中的广度优先搜索算法</h1>
<p>广度优先搜索（BFS）是一种基本的算法，用于遍历或搜索树状或图状数据结构。它从选定的节点开始（在树结构中通常是根节点），然后探索当前深度的所有邻居节点，再移动到下一层深度的节点。BFS特别适用于在未加权图中找到最短路径。</p>
<p>在本教程中，我们将探索在Kotlin中实现BFS算法。</p>
<h3>3.1. 定义图</h3>
<p>首先，我们需要定义一个图。我们将使用邻接表，因为它是Kotlin中表示图的一种常见且有效的方式。此外，为了提供具体示例，我们将初始化我们的图，添加一些节点和边，以说明BFS在实践中的工作原理：</p>`,r:{minutes:4.41,words:1322},t:"Kotlin中的广度优先搜索算法",y:"a"}}],["/posts/baeldung/2024-07-01/2024-07-01-Built%20in%20Testcontainers%20Support%20in%20Spring%20Boot.html",{loader:()=>a(()=>import("./2024-07-01-Built in Testcontainers Support in Spring Boot.html-Cpsm12O8.js"),__vite__mapDeps([400,1])),meta:{d:1690848e6,l:"2023年8月1日",c:["Spring Boot","Testcontainers"],g:["Spring Boot 3.1","集成测试"],e:`
<p>在本教程中，我们将讨论Spring Boot 3.1中引入的增强型Testcontainers支持。</p>
<p>此更新提供了一种更为流畅的配置容器的方法，并允许我们为本地开发目的启动它们。结果，使用Testcontainers进行开发和运行测试变得无缝且高效。</p>
<h2>2. SpringBoot 3.1之前的Testcontainers</h2>
<p>我们可以使用Testcontainers在测试阶段创建一个类似生产环境的环境。通过这样做，我们将消除对模拟的需求，并编写出不依赖于实现细节的高质量自动化测试。</p>
<p>对于本文的代码示例，我们将使用一个简单的Web应用程序，它使用MongoDB数据库作为持久层，并有一个小型REST接口：</p>`,r:{minutes:5.64,words:1692},t:"Spring Boot内置的Testcontainers支持",y:"a"}}],["/posts/baeldung/2024-07-01/2024-07-01-Calculate%20Distance%20Between%20Two%20Coordinates%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-01-Calculate Distance Between Two Coordinates in Java.html-CcMUnBUA.js"),__vite__mapDeps([401,1])),meta:{d:1719792e6,l:"2024年7月1日",c:["Java","编程"],g:["地理坐标","距离计算"],e:`<hr>
<h1>在Java中计算两个坐标之间的距离</h1>
<p>在这篇快速教程中，我们将实现计算两个地理坐标之间距离的方法。</p>
<p>特别是，我们首先实现距离的一个近似值。然后，我们将查看Haversine公式和Vincenty公式，这些公式提供更高的准确性。</p>
<h2>2. 等距圆柱投影距离近似</h2>
<p>让我们首先实现等距圆柱投影近似。详细来说，由于这个公式使用的数学运算最少，它非常快：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">double</span> <span class="token function">calculateDistance</span><span class="token punctuation">(</span><span class="token keyword">double</span> lat1<span class="token punctuation">,</span> <span class="token keyword">double</span> lon1<span class="token punctuation">,</span> <span class="token keyword">double</span> lat2<span class="token punctuation">,</span> <span class="token keyword">double</span> lon2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">double</span> lat1Rad <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">toRadians</span><span class="token punctuation">(</span>lat1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> lat2Rad <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">toRadians</span><span class="token punctuation">(</span>lat2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> lon1Rad <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">toRadians</span><span class="token punctuation">(</span>lon1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> lon2Rad <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">toRadians</span><span class="token punctuation">(</span>lon2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">double</span> x <span class="token operator">=</span> <span class="token punctuation">(</span>lon2Rad <span class="token operator">-</span> lon1Rad<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token punctuation">(</span>lat1Rad <span class="token operator">+</span> lat2Rad<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> y <span class="token operator">=</span> <span class="token punctuation">(</span>lat2Rad <span class="token operator">-</span> lat1Rad<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> distance <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>x <span class="token operator">*</span> x <span class="token operator">+</span> y <span class="token operator">*</span> y<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token constant">EARTH_RADIUS</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> distance<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:3.05,words:916},t:"在Java中计算两个坐标之间的距离",y:"a"}}],["/posts/baeldung/2024-07-01/2024-07-01-Calculating%20the%20Sum%20of%20Two%20Arrays%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-01-Calculating the Sum of Two Arrays in Java.html-DBWYu49x.js"),__vite__mapDeps([402,1])),meta:{d:1690848e6,l:"2023年8月1日",c:["Java","Arrays"],g:["Java","Arrays","Sum"],e:`<hr>
<h1>Java中计算两个数组元素对应求和的方法</h1>
<p>数组是Java中最常用的数据结构之一。它们允许我们在单个变量中存储相同类型的多个值。有时，我们可能需要对两个或多个数组的元素执行一些操作，如加、减、乘、除等。</p>
<p>在本教程中，我们将重点介绍<strong>如何在Java中逐元素计算两个数组的和</strong>。</p>
<h2>2. 数组求和的不同方法</h2>
<p>在Java中计算数组的和是一个常见且有用的任务，原因有多种：</p>
<ul>
<li>对向量或矩阵执行算术运算</li>
<li>从不同的来源或格式合并或混合数据</li>
<li>对数值数据进行统计分析或数据操作等</li>
</ul>`,r:{minutes:4.2,words:1261},t:"Java中计算两个数组元素对应求和的方法",y:"a"}}],["/posts/baeldung/2024-07-01/2024-07-01-Clamp%20Function%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-01-Clamp Function in Java.html-hUpisFqk.js"),__vite__mapDeps([403,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Programming"],g:["clamp function","Java 21","Math class"],e:`
<ol>
<li>概述</li>
</ol>
<p><strong>钳制函数将值限制在一定范围内</strong>。它确保给定的值不会超出特定的下限和上限。</p>
<p>在本教程中，我们将通过示例探讨如何在Java中实现钳制函数。</p>
<ol start="2">
<li>Java 21之前的钳制函数</li>
</ol>
<p><strong>在Java 21之前，Java没有内置的钳制值的函数</strong>。我们需要自己编写钳制函数。</p>
<p>钳制函数指定了一个值的范围。低于最小值的值将被设置为最小值。高于最大值的值将被设置为最大值。同时，范围内的值将返回它们自己。</p>`,r:{minutes:3.53,words:1060},t:"Java中的钳制函数",y:"a"}}],["/posts/baeldung/2024-07-01/2024-07-01-Conversion%20From%2012%20Hour%20Time%20to%2024%20Hour%20Time%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-01-Conversion From 12 Hour Time to 24 Hour Time in Java.html-CARYFv2E.js"),__vite__mapDeps([404,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Programming"],g:["Time Conversion","Java 8"],e:`
<p>将不同时间格式之间的转换是常见的编程任务。Java提供了一个标准API用于时间操作。</p>
<p>在本教程中，我们将探索如何使用日期时间API和旧版日期API将12小时制时间格式转换为24小时制时间格式。</p>
<h2>2. 使用日期时间API</h2>
<p>Java 8中引入的日期时间API提供了一个类，用于使用不同的模式格式化时间。12小时制时间和24小时制时间都有不同的表示模式。</p>
<p>以下是一个使用日期时间API将12小时制时间转换为24小时制时间的示例：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>@Test
void givenTimeInTwelveHours_whenConvertingToTwentyHoursWithDateTimeFormatter_thenConverted() throws ParseException {
    String time = LocalTime.parse("06:00 PM", DateTimeFormatter.ofPattern("hh:mm a", Locale.US))
      .format(DateTimeFormatter.ofPattern("HH:mm"));
    assertEquals("18:00", time);
}
</code></pre></div>`,r:{minutes:2.18,words:655},t:"Java中12小时制时间转换为24小时制时间的方法",y:"a"}}],["/posts/baeldung/2024-07-01/2024-07-01-Convert%20Between%20Java%20LocalDate%20and%20Epoch.html",{loader:()=>a(()=>import("./2024-07-01-Convert Between Java LocalDate and Epoch.html-_YlQdctk.js"),__vite__mapDeps([405,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Date and Time"],g:["LocalDate","Epoch"],e:`
<p>在本教程中，我们将展示如何将Java的_LocalDate_转换为_Epoch_以及如何反向转换。进行转换时，理解_Epoch_和_LocalDate_背后的概念非常重要。Java中的‘<em>Epoch</em>’指的是1970-01-01T00:00:00Z这一时间点。Epoch之后的时间点将具有正值，而Epoch之前的时间点则具有负值。</p>
<p>所有_Epoch_、<em>LocalDate_和_LocalDateTime_的实例都与时区有关，因此在它们之间进行转换时，我们需要知道时区。在Java中，时区可以通过_ZoneId_类来表示。<em>ZoneId_可以是系统默认时区，通过方法_ZoneId.systemDefault()<em>获得。或者，也可以通过传递已知时区的_String</em>，如_Europe/Amsterdam</em>，来计算_ZoneId</em>。</p>`,r:{minutes:2.11,words:632},t:"Java LocalDate与Epoch互转教程",y:"a"}}],["/posts/baeldung/2024-07-01/2024-07-01-Convert%20Epoch%20Time%20to%20LocalDate%20and%20LocalDateTime.html",{loader:()=>a(()=>import("./2024-07-01-Convert Epoch Time to LocalDate and LocalDateTime.html-Cb-9cXDp.js"),__vite__mapDeps([406,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java"],g:["Epoch Time","LocalDate","LocalDateTime"],e:`
<h2>1. 引言</h2>
<p>纪元时间，也被称为Unix时间，是一种将日期和时间表示为单一数值的系统。它测量了自1970年1月1日00:00:00协调世界时（UTC）以来经过的毫秒数。纪元时间因其简单性和易于操作而在计算机系统和编程语言中广泛使用。</p>
<p>在本教程中，我们将探讨将毫秒为单位的纪元时间转换为LocalDate和LocalDateTime。</p>
<h2>2. 将纪元时间转换为LocalDate</h2>
<p>要将纪元时间转换为LocalDate，我们需要将毫秒为单位的纪元时间转换为Instant对象。</p>
<p>Instant表示UTC时区的时间线上的一个点：</p>`,r:{minutes:2.37,words:712},t:"将纪元时间转换为LocalDate和LocalDateTime | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-01/2024-07-01-Convert%20List%20to%20Long%20%20%20Array%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-01-Convert List to Long   Array in Java.html-hSLVNleD.js"),__vite__mapDeps([407,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Programming"],g:["List to Array","Java 8","Guava"],e:`<hr>
<h1>Java中将List<code>&lt;Long&gt;</code>对象转换为Long[]数组</h1>
<p>列表和数组是Java中存储对象的两种常见方式。在我们需要存储和操作数据的项目中，列表和数组都允许在我们的程序执行过程中存储数据。</p>
<p>本教程解释了如何在Java中将List<code>&lt;Long&gt;</code>对象转换为Long[]数组。</p>
<h3>2. 使用List.toArray()方法</h3>
<p>List接口提供了toArray()方法，该方法返回一个包含所有列表元素的数组对象。</p>
<p>让我们看看如何使用toArray()方法将List<code>&lt;Long&gt;</code>对象转换为Java中的Long[]数组：</p>`,r:{minutes:2.07,words:622},t:"Java中将List<Long>对象转换为Long[]数组",y:"a"}}],["/posts/baeldung/2024-07-01/2024-07-01-Convert%20an%20ArrayList%20of%20String%20to%20a%20String%20Array%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-01-Convert an ArrayList of String to a String Array in Java.html-D2A4BT7l.js"),__vite__mapDeps([408,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","ArrayList"],g:["Java","ArrayList","String Array"],e:`<hr>
<h1>Java中将字符串ArrayList转换为字符串数组</h1>
<p>在Java中，数据操作经常涉及到将数据结构从一种形式转换为另一种形式。一个常见的任务是将字符串ArrayList转换为字符串数组。</p>
<p>在本教程中，我们将探讨如何使用Java内置的方法和技术无缝完成这种转换。</p>
<h3>2. 问题介绍</h3>
<p>一个示例可以帮助我们快速理解问题。假设我们有以下ArrayList，其中包含一些艺术家的名字：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">List</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>\`\` <span class="token constant">INPUT_LIST</span> <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"Michael Bolton"</span><span class="token punctuation">,</span> <span class="token string">"Michael Jackson"</span><span class="token punctuation">,</span> <span class="token string">"Guns and Roses"</span><span class="token punctuation">,</span> <span class="token string">"Bryan Adams"</span><span class="token punctuation">,</span> <span class="token string">"Air Supply"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:3.61,words:1083},t:"Java中将字符串ArrayList转换为字符串数组",y:"a"}}],["/posts/baeldung/2024-07-01/2024-07-01-Convert%20int%20to%20Long%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-01-Convert int to Long in Java.html-DbNgPnDV.js"),__vite__mapDeps([409,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Programming"],g:["int to Long","data type conversion"],e:`
<p>数据类型转换是任何编程语言中的一个重要部分。在Java中，开发者经常需要将int转换为Long，反之亦然，正如我们文章中所展示的。虽然这个操作看起来很简单，但Java提供了几种具有独特特性和使用场景的方法。</p>
<p>在本教程中，我们将深入探讨这些方法，清晰地理解每种方法的工作原理以及何时使用它们。</p>
<h3>2. 基础：理解int和Long</h3>
<p>在我们探索转换方法之前，我们首先需要理解int和Long是什么。int和Long都是Java中用于存储数值的不同数据类型。</p>
<p>int数据类型是一个32位的有符号二进制补码整数，可以存储的最小值为-2<sup>31，最大值为2</sup>31-1。</p>`,r:{minutes:5.95,words:1784},t:"Java中将int转换为Long的方法",y:"a"}}],["/posts/baeldung/2024-07-01/2024-07-01-Creating%20a%20Magic%20Square%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-01-Creating a Magic Square in Java.html-CwBmn5TD.js"),__vite__mapDeps([410,1])),meta:{d:16914528e5,l:"2023年8月8日",c:["Java","Algorithms"],g:["Magic Square","Java"],e:`<hr>
<h1>在Java中创建魔方</h1>
<p>在这篇文章中，我们将探讨如何创建魔方。<strong>我们将了解什么是魔方，创建它们的算法是什么，以及如何在Java中实现它们。</strong></p>
<h2>2. 什么是魔方？</h2>
<p>魔方是一种数学谜题。我们从一个大小为 <em>n×n</em> 的正方形开始，需要用数字填充，使得每个数字在1到 <em>n²</em> 之间恰好出现一次，并且每一行、每一列和对角线的和都相同。</p>
<p>例如，一个3×3的魔方可能是这样的：</p>
<figure><img src="https://www.baeldung.com/wp-content/uploads/2023/08/Screenshot-2023-08-08-at-15.25.21-300x291.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>`,r:{minutes:10.63,words:3188},t:"在Java中创建魔方",y:"a"}}],["/posts/baeldung/2024-07-01/2024-07-01-Creating%20a%20Telegram%20Bot%20with%20Spring%20Boot.html",{loader:()=>a(()=>import("./2024-07-01-Creating a Telegram Bot with Spring Boot.html-C-fAfUX4.js"),__vite__mapDeps([411,1])),meta:{d:16919712e5,l:"2023年8月14日",c:["Spring Boot","Telegram Bot"],g:["Java","Spring Boot","Telegram"],e:`
<p>在这个教程中，我们将使用Spring Boot创建一个Telegram机器人。</p>
<p><strong>Telegram机器人是在Telegram消息平台内运行的自动化程序</strong>。它使用Telegram Bot API与用户互动并执行各种任务。我们将使用Java库而不是直接与API交互。机器人帮助我们响应用户命令，提供信息，并执行自动化操作。</p>
<p>我们将从设置一个全新的机器人开始，然后描述如何使用Java库来实现简单的操作。</p>
<p>首先，我们需要在Telegram平台上创建一个新的机器人。我们可以直接使用Telegram消息应用程序，搜索栏中搜索BotFather。一旦打开，我们将输入命令<code>/newbot</code>来创建机器人并按照BotFather的指示操作。它会要求我们为机器人分配一个用户名，根据Telegram的政策，用户名需要以_bot结尾：</p>`,r:{minutes:6.81,words:2044},t:"使用Spring Boot创建Telegram机器人",y:"a"}}],["/posts/baeldung/2024-07-01/2024-07-01-Executing%20SQL%20Script%20File%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-01-Executing SQL Script File in Java.html-WB0wUtDA.js"),__vite__mapDeps([412,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","SQL"],g:["MyBatis","Spring JDBC"],e:`
<p>在本教程中，我们将讨论如何从Java运行SQL脚本。作为其中的一部分，我们将探索两个库：MyBatis和Spring JDBC。MyBatis提供了ScriptRunner类，而Spring JDBC提供了ScriptUtils，可以直接从磁盘读取SQL脚本文件并在目标数据库上运行它们。</p>
<p>我们还将实现一个自定义的数据库实用工具，用于从文件中读取SQL语句，然后批量执行它们。</p>
<p>为了保持简单并使代码能够迅速运行，让我们使用广泛使用的内存中H2嵌入式数据库进行测试。让我们看看它们都在行动。</p>
<h2>使用MyBatis ScriptRunner执行SQL脚本</h2>`,r:{minutes:4.89,words:1468},t:"如何从Java运行SQL脚本",y:"a"}}],["/posts/baeldung/2024-07-01/2024-07-01-Extract%20Text%20Between%20Square%20Brackets.html",{loader:()=>a(()=>import("./2024-07-01-Extract Text Between Square Brackets.html-LoodhTI1.js"),__vite__mapDeps([413,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","正则表达式"],g:["文本处理","正则表达式"],e:`
<p>提取特定模式内的内容是文本处理中常见的需求。有时，处理使用方括号来封装有价值信息的数据时，提取方括号内的文字可能对我们来说是一个挑战。</p>
<p>在本教程中，我们将探讨提取方括号内容的技术和方法。</p>
<h2>2. 问题介绍</h2>
<p>首先，为了简化问题，让我们对问题提出两个先决条件：</p>
<ul>
<li><strong>没有嵌套的方括号对</strong> - 例如，像“..[value1 [value2]]..”这样的模式不会作为我们的输入。</li>
<li><strong>方括号总是正确配对</strong> - 例如，“..[value1 …”是无效的输入。</li>
</ul>`,r:{minutes:5.98,words:1793},t:"Java中提取方括号内的内容",y:"a"}}],["/posts/baeldung/2024-07-01/2024-07-01-Format%20Multiple%20%20or%20%20Conditions%20in%20an%20If%20Statement%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-01-Format Multiple  or  Conditions in an If Statement in Java.html-Dbs5ihDZ.js"),__vite__mapDeps([414,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Programming"],g:["if statement","switch statement","functional programming"],e:`<hr>
<h1>Java中if语句中多个“或”条件的格式化</h1>
<p>在编写if语句时，我们可能需要使用逻辑运算符如AND或OR来设置多个条件。这可能不是一个好的设计，会影响代码的可读性和认知复杂性。</p>
<p>在本教程中，我们将看到在if语句中格式化多个值条件的替代方法。</p>
<h2>2. 我们可以避免if语句吗？</h2>
<p>假设我们有一个电子商务平台，并为特定月份出生的人设置折扣。让我们看看以下代码片段：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>month <span class="token operator">==</span> <span class="token number">10</span> <span class="token operator">||</span> month <span class="token operator">==</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// doSomething()</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>month <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">||</span> month <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// doSomething2()</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// doSomething3()</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:4.93,words:1479},t:"Java中if语句中多个“或”条件的格式化",y:"a"}}],["/posts/baeldung/2024-07-01/2024-07-01-Generate%20Models%20Using%20OpenAPI%20With%20Lombok%20Annotations.html",{loader:()=>a(()=>import("./2024-07-01-Generate Models Using OpenAPI With Lombok Annotations.html-DNUe6BuU.js"),__vite__mapDeps([415,1])),meta:{d:170424e7,l:"2024年1月3日",c:["Java","OpenAPI","Lombok"],g:["Java","Lombok","OpenAPI","Spring Boot","自动生成模型"],e:'\n<p>Lombok是一个Java库，有助于减少像getter、setter等样板代码。OpenAPI提供了一个属性来自动生成带有Lombok注解的模型。</p>\n<p>在本教程中，我们将探讨如何使用OpenAPI代码生成器生成带有Lombok注解的模型。</p>\n<h2>2. 项目设置</h2>\n<p>首先，让我们启动一个Spring Boot项目，并添加Spring Boot Starter Web和Lombok依赖项：</p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```````\n    ````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>````````org.springframework.boot````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>````````\n    ````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>````````spring-boot-starter-web````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>````````\n    ````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>````````3.1.2````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>````````\n```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```````\n```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```````\n    ````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>````````org.projectlombok````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>````````\n    ````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>````````lombok````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>````````\n    ````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>````````1.18.30````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>````````\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>`provided`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>`\n```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```````\n</code></pre></div>',r:{minutes:3.01,words:903},t:"使用Lombok注解通过OpenAPI生成模型",y:"a"}}],["/posts/baeldung/2024-07-01/2024-07-01-Get%20Values%20and%20Keys%20as%20ArrayList%20From%20a%20HashMap.html",{loader:()=>a(()=>import("./2024-07-01-Get Values and Keys as ArrayList From a HashMap.html-B7wgHL2m.js"),__vite__mapDeps([416,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java Collections","HashMap"],g:["Java","ArrayList","HashMap"],e:`
<p>当我们在Java中操作数据结构时，一个常见的场景是从一个HashMap中提取键和值，并将它们组织成ArrayList。</p>
<p>在这个快速教程中，我们将探讨实现这一目标的各种实用方法。</p>
<h2>2. 问题介绍</h2>
<p>首先，让我们创建一个HashMap对象作为输入示例：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">HashMap</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>\`\` <span class="token constant">DEV_MAP</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token punctuation">{</span>
    <span class="token constant">DEV_MAP</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token constant">DEV_MAP</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Kent"</span><span class="token punctuation">,</span> <span class="token string">"Linux"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token constant">DEV_MAP</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Eric"</span><span class="token punctuation">,</span> <span class="token string">"MacOS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token constant">DEV_MAP</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Kevin"</span><span class="token punctuation">,</span> <span class="token string">"Windows"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token constant">DEV_MAP</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Michal"</span><span class="token punctuation">,</span> <span class="token string">"MacOS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token constant">DEV_MAP</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Saajan"</span><span class="token punctuation">,</span> <span class="token string">"Linux"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:3.49,words:1047},t:"从HashMap获取键和值作为ArrayList的值",y:"a"}}],["/posts/baeldung/2024-07-01/2024-07-01-Get%20a%20Random%20Element%20From%20a%20Set%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-01-Get a Random Element From a Set in Java.html-C3Wl5lZx.js"),__vite__mapDeps([417,1])),meta:{d:1719826499e3,c:["Java","编程"],g:["Set","随机元素","Java.util.Random","ThreadLocalRandom"],e:`
<p>随机从_Set_集合中选择元素是各种Java应用程序中的常见需求，尤其是在游戏和数据处理任务中。</p>
<p>在本文中，我们将探讨从Java _Set_中选择随机元素的不同方法。</p>
<h3>2. 使用_java.util.Random_类</h3>
<p>_java.util.Random_类是生成随机数的便捷工具。要从_Set_中选择一个随机元素，我们可以生成一个随机索引，并使用它来访问元素：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> \`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>\`\` <span class="token class-name">T</span> <span class="token function">getByRandomClass</span><span class="token punctuation">(</span><span class="token class-name">Set</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>\`\` set<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>set <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> set<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"The Set cannot be empty."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> randomIndex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">T</span> element <span class="token operator">:</span> set<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> randomIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> element<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Something went wrong while picking a random element."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.6,words:480},t:"在Java中从Set集合中获取随机元素",y:"a"}}],["/posts/baeldung/2024-07-01/2024-07-01-Get%20the%20First%20n%20Elements%20of%20a%20List%20Into%20an%20Array.html",{loader:()=>a(()=>import("./2024-07-01-Get the First n Elements of a List Into an Array.html-MgeNIkoB.js"),__vite__mapDeps([418,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Programming"],g:["Java","List","Array"],e:`
<h2>1. 概述</h2>
<p>在Java编程中，无缝操作数据的能力是一项重要技能。我们可能会遇到需要从列表中提取特定数量的元素并将它们存储在数组中的场景。</p>
<p>在本教程中，我们将探讨从列表中检索前n个元素并将其转换为Java数组的步骤。</p>
<h2>2. 问题介绍</h2>
<p>像往常一样，我们通过示例来理解问题。假设我们有一个包含七个字符串的列表：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>\` <span class="token constant">INPUT_LIST</span> <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">,</span> <span class="token string">"four"</span><span class="token punctuation">,</span> <span class="token string">"five"</span><span class="token punctuation">,</span> <span class="token string">"six"</span><span class="token punctuation">,</span> <span class="token string">"seven"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:4.54,words:1362},t:"将列中的前n个元素转换为数组 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-01/2024-07-01-Get%20the%20Indexes%20of%20Regex%20Pattern%20Matches%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-01-Get the Indexes of Regex Pattern Matches in Java.html-DZaLlEa0.js"),__vite__mapDeps([419,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Regex"],g:["Java","Regex","Pattern","Matcher"],e:'\n<p>在Java编程中，处理字符串和模式是许多应用的基本需求。正则表达式，通常称为regex，为模式匹配和操作提供了一个强大的工具。</p>\n<p>有时，我们不仅需要在字符串中识别匹配项，还需要精确定位这些匹配发生的位置。在本教程中，我们将探讨如何在Java中获取正则表达式模式匹配的索引。</p>\n<p>让我们从一个_String_示例开始：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> <span class="token constant">INPUT</span> <span class="token operator">=</span> <span class="token string">"This line contains `````&lt;the first value&gt;`````, `````&lt;the second value&gt;`````, and ````&lt;the third value&gt;````."</span><span class="token punctuation">;</span>\n</code></pre></div>',r:{minutes:3.85,words:1154},t:"在Java中获取正则表达式模式匹配的索引",y:"a"}}],["/posts/baeldung/2024-07-01/2024-07-01-HashMap%20with%20Multiple%20Values%20for%20the%20Same%20Key.html",{loader:()=>a(()=>import("./2024-07-01-HashMap with Multiple Values for the Same Key.html-CZs-jVtv.js"),__vite__mapDeps([420,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","HashMap"],g:["Java","HashMap","Multiple Values"],e:`
<p>在Java编程中广泛使用的HashMap数据结构存储键值对，提供基于关联键的快速值访问。然而，在某些情况下，我们可能遇到需要将多个值与单个键关联的场景。</p>
<p>在本教程中，我们将探讨如何实现一个允许同一个键关联多个值的HashMap。</p>
<h2>2. 概览</h2>
<p>大多数编程语言中的标准HashMap实现只允许每个键关联一个值。当我们遇到需要在同一个键下存储多个值的情况时，我们可以考虑采用不同的方法来解决这一挑战。</p>
<p>一种常见的解决方案是使用像ArrayList、LinkedList或HashSet这样的数据结构来存储每个键的多个值。</p>
<h2>3. 设计支持多个值的HashMap</h2>`,r:{minutes:3.37,words:1012},t:"Java中HashMap实现同一个键对应多个值",y:"a"}}],["/posts/baeldung/2024-07-01/2024-07-01-How%20To%20Rename%20Files%20and%20Folders%20in%20Amazon%20S3.html",{loader:()=>a(()=>import("./2024-07-01-How To Rename Files and Folders in Amazon S3.html-DzsG4Sba.js"),__vite__mapDeps([421,1])),meta:{d:1719792e6,l:"2024年7月1日",c:["AWS SDK for Java","S3"],g:["Java","S3","文件重命名"],e:'\n<p>在本教程中，我们将探索如何使用Java在Amazon S3存储桶中重命名对象（文件或文件夹）。</p>\n<p>Amazon Simple Storage Service（Amazon S3）是一种流行的云存储服务。它允许用户以高耐久性、可用性和可扩展性在云中存储和检索数据。我们将在以下章节中使用AWS SDK for Java与之交互。</p>\n<h3>2.1. Maven依赖</h3>\n<p>首先，我们需要在我们的项目_pom.xml_中声明AWS S3 SDK依赖：</p>\n<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>`&lt;dependency&gt;`\n    `&lt;groupId&gt;`software.amazon.awssdk`&lt;/groupId&gt;`\n    `&lt;artifactId&gt;`s3`&lt;/artifactId&gt;`\n    `&lt;version&gt;`2.24.9`&lt;/version&gt;`\n`&lt;/dependency&gt;`\n</code></pre></div>',r:{minutes:4.11,words:1233},t:"如何在Amazon S3中重命名文件和文件夹 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-01/2024-07-01-How%20to%20Check%20if%20a%20Value%20Exists%20in%20a%20JSON%20Array%20for%20a%20Particular%20Key.html",{loader:()=>a(()=>import("./2024-07-01-How to Check if a Value Exists in a JSON Array for a Particular Key.html-DIVoZnzw.js"),__vite__mapDeps([422,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","JSON"],g:["Jackson","Gson"],e:`
<p>本文教程将学习如何检查JSON数组中是否存在特定的键，以及该键是否具有特定的值。我们将使用Java处理JSON的两个最流行的库：Jackson和Gson。</p>
<h2>2. 设置</h2>
<p>首先，<strong>让我们创建一个JSON数组</strong>。我们将保持简单，创建一个具有单个键/值对的对象数组：</p>
<div class="language-json" data-ext="json" data-title="json"><pre class="language-json"><code>String exampleJson = <span class="token string">"[{\\"color\\":\\"red\\"},{\\"color\\":\\"blue\\"},{\\"color\\":\\"green\\"}]"</span>;
</code></pre></div>`,r:{minutes:3.7,words:1110},t:"如何检查JSON数组中特定键的值是否存在 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-01/2024-07-01-How%20to%20Fix%20%20Error%20in%20Opening%20Zip%20File%20%20When%20Running%20Maven.html",{loader:()=>a(()=>import("./2024-07-01-How to Fix  Error in Opening Zip File  When Running Maven.html-BeaIJvjk.js"),__vite__mapDeps([423,1])),meta:{d:16544736e5,l:"2022年6月6日",c:["Maven","Error Handling"],g:["maven","error","zip file"],e:`<hr>
<h1>如何解决在运行Maven时出现的“打开Zip文件错误”</h1>
<p>Maven是一个主要针对基于Java的应用程序的构建自动化和项目管理工具。因此，它自动化了软件开发生命周期，使开发人员更容易管理依赖项，编译代码，运行测试和有效地打包应用程序。</p>
<p>然而，在使用Maven命令构建应用程序时，我们可能会遇到“打开Zip文件错误”的问题。这个问题通常是由于本地Maven仓库中的JAR文件损坏或无法访问而引起的。</p>
<p>在本教程中，我们将探讨解决这个问题的各种方法。</p>
<h3>2. 删除损坏的JAR文件</h3>
<p><strong>Maven遵循“约定优于配置”的原则，以确保预定义的项目结构，避免构建和配置错误。</strong> 但是，有时我们会因为损坏的JAR文件而面临“打开Zip文件错误”。</p>`,r:{minutes:3.07,words:922},t:"如何解决在运行Maven时出现的“打开Zip文件错误”",y:"a"}}],["/posts/baeldung/2024-07-01/2024-07-01-How%20to%20Speed%20Up%20Maven%20Build.html",{loader:()=>a(()=>import("./2024-07-01-How to Speed Up Maven Build.html-BPfDfQMG.js"),__vite__mapDeps([424,1])),meta:{d:16911936e5,l:"2023年8月5日",c:["Maven","Build Optimization"],g:["Maven Build","Performance"],e:`
<p>在本教程中，我们将学习如何加速我们的Maven构建。我们将介绍各种优化构建时间的技术，并评论它们的优点和缺点。</p>
<h2>2. 一般建议</h2>
<p>在进行任何优化尝试之前，让我们回顾一下，<strong>使用正确的Maven阶段可以节省我们大量的时间</strong>。为什么我们要运行完整的_install_并污染我们的本地仓库，而我们只需要编译代码呢？</p>
<p>另一方面，在多模块项目中，我们只能重新构建更改过的模块以及依赖它们的模块。例如，如果我们只在_module1_和_module2_中进行更改，我们可以运行：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ mvn clean <span class="token function">install</span> <span class="token parameter variable">-pl</span> module1,module2 <span class="token parameter variable">-am</span>
</code></pre></div>`,r:{minutes:5.87,words:1762},t:"如何加速Maven构建",y:"a"}}],["/posts/baeldung/2024-07-01/2024-07-01-Inner%20Classes%20vs.%20Subclasses%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-01-Inner Classes vs. Subclasses in Java.html-C3Yj6Nlw.js"),__vite__mapDeps([425,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Inner Classes","Subclasses"],g:["Java","Inner Classes","Subclasses"],e:`
<p>在本教程中，我们将更仔细地研究Java中的两个重要构造：内部类和子类。Java中编写类的两种不同方式，它们的使用方式也有所不同。</p>
<p>面向对象编程的一个核心原则是继承。它引入了一个类继承另一个类，即父类的属性和行为的概念。<strong>继承和子类的使用促进了代码的可重用性和类的层次结构组织。</strong></p>
<p>子类定义了与父类的“是一个”关系，即子类的对象也是其父类的对象。这支持了多态性的概念，并通过允许我们通过共同的父类与不同子类的实例一起工作，促进了更通用的编码。</p>
<p>定义和使用子类还允许我们创建高度专业化的类，这些类可以扩展和覆盖其父类的具体功能。<strong>这支持了SOLID原则中的开放封闭原则。</strong></p>`,r:{minutes:6.16,words:1848},t:"Java中的内部类与子类",y:"a"}}],["/posts/baeldung/2024-07-01/2024-07-01-Lock%20Header%20Rows%20With%20Apache%20POI.html",{loader:()=>a(()=>import("./2024-07-01-Lock Header Rows With Apache POI.html-C36FXoH3.js"),__vite__mapDeps([426,1])),meta:{d:1690848e6,l:"2023年8月1日",c:["Java","Apache POI"],g:["Excel","锁定","表头"],e:'<hr>\n<h1>使用Apache POI锁定Excel表头行</h1>\n<p>Apache POI是一个在Java社区中广受欢迎的开源库，用于处理Microsoft Office文档。它允许开发人员轻松地以编程方式操作Word文档和Excel电子表格文件。</p>\n<p>锁定表头行是我们处理大型Excel电子表格时常见的操作。这为数据导航和分析提供了更加友好的用户体验。</p>\n<p>在本教程中，我们将学习如何使用Apache POI来锁定Excel电子表格中的表头行。</p>\n<h3>2. 依赖性</h3>\n<p>首先，让我们向_pom.xml_文件中添加以下Maven依赖项：</p>\n<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>``&lt;dependency&gt;``\n    ``&lt;groupId&gt;``org.apache.poi``&lt;/groupId&gt;``\n    ``&lt;artifactId&gt;``poi``&lt;/artifactId&gt;``\n    ``&lt;version&gt;``5.2.5``&lt;/version&gt;``\n``&lt;/dependency&gt;``\n``&lt;dependency&gt;``\n    ``&lt;groupId&gt;``org.apache.poi``&lt;/groupId&gt;``\n    ``&lt;artifactId&gt;``poi-ooxml``&lt;/artifactId&gt;``\n    ``&lt;version&gt;``5.2.5``&lt;/version&gt;``\n``&lt;/dependency&gt;``\n</code></pre></div>',r:{minutes:2.9,words:869},t:"使用Apache POI锁定Excel表头行",y:"a"}}],["/posts/baeldung/2024-07-01/2024-07-01-Programmatic%20Generation%20of%20JSON%20Schemas%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-01-Programmatic Generation of JSON Schemas in Java.html-DH9P2Mze.js"),__vite__mapDeps([427,1])),meta:{d:1719792e6,l:"2024年7月1日",c:["Java","JSON Schema"],g:["Java","JSON Schema","自动生成"],e:`
<p>在本教程中，我们将使用Java JSON Schema Generator库从Java创建JSON Schema。</p>
<p>首先，我们将看到如何生成简单和递归的JSON Schema。接下来，我们将查看可用的不同模式配置。然后，我们将从库的一些模块中逐步派生出JSON Schema：Jackson和Jakarta验证。最后，我们将设置一个Maven插件，以便在Maven <em>generate</em> 目标下拥有JSON Schema。</p>
<h2>2. 设置</h2>
<p>让我们为我们的项目设置必要的依赖项。</p>
<h3>2.1. 核心依赖项</h3>
<p>首先，让我们安装_jsonschema-generator_：</p>`,r:{minutes:7.94,words:2382},t:"Java中自动生成JSON Schema的程序化方法",y:"a"}}],["/posts/baeldung/2024-07-01/2024-07-01-Reading%20JSON%20Documents%20as%20Maps%20and%20Comparing%20Them.html",{loader:()=>a(()=>import("./2024-07-01-Reading JSON Documents as Maps and Comparing Them.html-Dr4BIi5C.js"),__vite__mapDeps([428,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","JSON"],g:["JSON","Java","Maps","Comparison"],e:`
<p>在本教程中，我们将探讨将JSON文档读取为Map的不同方式以及比较它们。我们还将探讨查找两个Map之间差异的方法。</p>
<h2>2. 转换为Map</h2>
<p>首先，我们将探讨将JSON文档转换为Map的不同方式。让我们看看我们将用于测试的JSON对象。</p>
<p>让我们创建一个名为_first.json_的文件，内容如下：</p>
<div class="language-json" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"John"</span><span class="token punctuation">,</span>
  <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
  <span class="token property">"cars"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">"Ford"</span><span class="token punctuation">,</span>
    <span class="token string">"BMW"</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">"address"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"street"</span><span class="token operator">:</span> <span class="token string">"Second Street"</span><span class="token punctuation">,</span>
    <span class="token property">"city"</span><span class="token operator">:</span> <span class="token string">"New York"</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">"children"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Sara"</span><span class="token punctuation">,</span>
      <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">5</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Alex"</span><span class="token punctuation">,</span>
      <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">3</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:4.6,words:1381},t:"阅读JSON文档为Map并比较它们",y:"a"}}],["/posts/baeldung/2024-07-01/2024-07-01-Set%20a%20Parameter%20in%20an%20HttpServletRequest%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-01-Set a Parameter in an HttpServletRequest in Java.html-Df3gi8Ei.js"),__vite__mapDeps([429,1])),meta:{d:16935264e5,l:"2023年9月1日",c:["Java","Servlet"],g:["HttpServletRequest","Java Web"],e:`
<p>当使用Servlet API开发Java Web应用程序时，_HttpServletRequest_对象在处理传入的HTTP请求中扮演着关键角色。它提供了对请求的各个方面的访问，例如参数、头和属性。</p>
<p>请求参数始终由HTTP客户端提供。然而，在某些场景中，我们可能需要在应用程序处理之前，在_HttpServletRequest_对象中以编程方式设置参数。</p>
<p>需要注意的是，**_HttpServletRequest_缺少添加新参数或更改参数值的setter方法。**在本文中，我们将探讨如何通过扩展原始_HttpServletRequest_的功能来实现这一点。</p>`,r:{minutes:6.1,words:1831},t:"在Java中为HttpServletRequest设置参数",y:"a"}}],["/posts/baeldung/2024-07-01/2024-07-01-Sorting%20Java%20Map%20in%20Descending%20Order.html",{loader:()=>a(()=>import("./2024-07-01-Sorting Java Map in Descending Order.html-COD2UFyk.js"),__vite__mapDeps([430,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Collections"],g:["Java","Map","Sorting"],e:`
<p>排序是所有编程语言中的基本操作，它允许有效地组织和检索信息。</p>
<p>此外，Map接口广泛用于在Java中存储键值对。然而，默认的Map迭代顺序并不总是符合应用程序的需求。通常，为了优化我们的操作，我们需要按特定顺序对数据进行排序。</p>
<p><strong>在本教程中，我们将探讨按键和值对Java Map进行降序排序的过程，并提供详细的解释和实际示例。</strong></p>
<h2>2. 理解Map和排序</h2>
<p>Java中的Map是一个接口，代表一个键值对集合。虽然数据本质上没有顺序，但有时我们需要以排序的方式显示或处理它。</p>
<p><strong>当按值降序排序Map时，我们需要考虑与每个键关联的值。</strong></p>`,r:{minutes:3.51,words:1052},t:"Java Map按降序排序",y:"a"}}],["/posts/baeldung/2024-07-01/2024-07-01-Stop%20Executing%20Further%20Code%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-01-Stop Executing Further Code in Java.html-ViWcAT0B.js"),__vite__mapDeps([431,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Programming"],g:["Java","Thread","Execution Control"],e:`<hr>
<h1>在Java中停止执行更多代码</h1>
<h2>1. 概述</h2>
<p>我们知道在Java中可以在特定的时间持续后停止执行。有时，我们可能希望在满足某些条件时停止执行更多的代码。在本教程中，我们将探索这个问题的不同解决方案。</p>
<h2>2. 问题介绍</h2>
<p>在某些情况下，停止进一步执行代码可能很有用，例如我们想要终止一个长时间运行的过程，中断一个正在运行的_线程_，或处理异常情况。这增强了我们程序的控制和灵活性。</p>
<p><strong>停止进一步执行代码可以提高资源利用效率，允许适当的错误处理，并允许优雅地处理意外情况。</strong> 这在以下领域中非常有用：</p>`,r:{minutes:5.9,words:1769},t:"在Java中停止执行更多代码",y:"a"}}],["/posts/baeldung/2024-07-01/2024-07-01-The%20Composite%20Pattern%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-01-The Composite Pattern in Kotlin.html-BBhfTeQ3.js"),__vite__mapDeps([432,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin","Design Pattern"],g:["Composite Pattern","Kotlin"],e:`
<p>设计模式是一组经过测试的解决方案，用于解决软件设计中反复出现的问题。组合模式是一种常见的设计模式。这种模式帮助我们无论是逐个处理还是整体处理，都能处理复杂的结构。</p>
<p>在本教程中，我们将更深入地了解组合模式。我们将查看它的定义，它解决的问题，演示一个简单的实现，并以它的优缺点作为结论。</p>
<h2>组合模式概览</h2>
<p>现在，让我们深入组合模式的理论。</p>
<h3>2.1. 定义</h3>
<p>组合模式是一种结构模式，允许我们统一地对待一组对象。当我们有像树这样的对象层次结构，并希望像对待单个对象一样对整个结构执行操作时，这种模式就非常有用。</p>
<p>这种模式的关键思想是我们有不同类型的对象：叶子或单独的对象和组合对象。这些不同类型的对象需要实现一个公共的超类型，例如接口或抽象类。<strong>公共接口或组件定义了可以在我们对象层次结构中不同类型的对象上执行的操作</strong>。</p>`,r:{minutes:5.48,words:1643},t:"Kotlin中的组合模式",y:"a"}}],["/posts/baeldung/2024-07-01/2024-07-01-Update%20an%20Existing%20Amazon%20S3%20Object%20Using%20Java.html",{loader:()=>a(()=>import("./2024-07-01-Update an Existing Amazon S3 Object Using Java.html-pPfVj3ED.js"),__vite__mapDeps([433,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["AWS","Java"],g:["Amazon S3","Java SDK"],e:'\n<p>Amazon Simple Storage Service（Amazon S3）是一种广泛使用的存储服务，提供可扩展、安全和持久的对象存储。有时我们需要更新现有的Amazon S3对象。在S3中，对象是不可变的，这意味着我们不能直接修改对象的内容。然而，我们可以通过使用新内容覆盖对象，有效地“更新”它。</p>\n<p>在本教程中，我们将学习如何使用AWS Java SDK，用更新后的内容替换同一AWS S3路径上的现有文件内容。</p>\n<h2>2. 先决条件</h2>\n<p>首先，我们需要确保AWS SDK Maven依赖包被纳入项目中：</p>\n<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>`&lt;dependency&gt;`\n    `&lt;groupId&gt;`software.amazon.awssdk`&lt;/groupId&gt;`\n    `&lt;artifactId&gt;`s3`&lt;/artifactId&gt;`\n    `&lt;version&gt;`2.24.9`&lt;/version&gt;`\n`&lt;/dependency&gt;`\n</code></pre></div>',r:{minutes:3.72,words:1115},t:"使用Java更新现有的Amazon S3对象",y:"a"}}],["/posts/baeldung/2024-07-01/2024-07-01-What%20Does%20%20%20%20%20%20%20Mean%20in%20Java%20.html",{loader:()=>a(()=>import("./2024-07-01-What Does       Mean in Java .html-DRB94w62.js"),__vite__mapDeps([434,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java"],g:["Java","编程技巧"],e:`
<p>当我们阅读他人的代码时，有时会看到一些有趣且新颖的方法，我们以前从未见过。了解这些技巧可以显著提高我们对代码库的理解，并鼓励我们探索对Java编程的看法。</p>
<p>在本教程中，我们将讨论Java中的一个有趣用法：<code>-- &gt;</code>。</p>
<h2>2. 问题介绍</h2>
<p>像往常一样，让我们从一个例子开始：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 循环中的一些处理</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:3.75,words:1126},t:"Java中“-- >”的含义是什么？",y:"a"}}],["/posts/baeldung/2024-07-01/2024-07-01-Why%20There%20Is%20No%20Sorted%20List%20in%20Java%20.html",{loader:()=>a(()=>import("./2024-07-01-Why There Is No Sorted List in Java .html-3PuSqa_s.js"),__vite__mapDeps([435,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Collection Framework"],g:["Java","Sorted List","List Interface"],e:`
<p>Java提供了一个丰富的集合框架，其中包括多种接口和类，以满足不同的数据结构需求。然而，它并没有提供内置的排序列表实现。在本文中，我们将探讨这种缺失背后的原因，比较插入时排序和按需排序的概念。我们还将讨论插入时排序如何可能破坏_List_接口的契约，并探索实现排序行为的替代方法。</p>
<h2>2. 插入时排序与按需排序</h2>
<p>要理解为什么Java中没有排序列表，我们首先需要区分插入时排序和按需排序。</p>
<h3>2.1. 插入时排序</h3>
<p><strong>插入时排序涉及在插入时立即重新排列元素，确保每次添加后都保持排序顺序。</strong> 一些数据结构就是这样表现的。通常，它们的实现基于树结构，最著名的是_TreeSet_和_TreeMap_。</p>`,r:{minutes:4.77,words:1430},t:"Java中为什么没有内置的排序列表？",y:"a"}}],["/posts/baeldung/2024-07-01/2024-07-01-bootstrap%20server%20in%20Kafka%20Configuration.html",{loader:()=>a(()=>import("./2024-07-01-bootstrap server in Kafka Configuration.html-BruqmTSG.js"),__vite__mapDeps([436,1])),meta:{d:1690848e6,l:"2023年8月1日",c:["Java","Kafka"],g:["bootstrap.servers","Kafka configuration"],e:`
<p>在实现Kafka生产者或消费者时（例如，使用Spring），我们需要配置的一个属性是“bootstrap.servers”。</p>
<h2>1. 概述</h2>
<p>本文将介绍这个设置的含义及其用途。</p>
<h2>2. Kafka拓扑结构</h2>
<p>Kafka的拓扑结构设计用于可扩展性和高可用性。这就是为什么有一个服务器集群（代理）处理代理之间复制的主题分区。每个分区有一个代理作为领导者，其他代理作为跟随者。</p>
<p>生产者将消息发送到分区领导者，然后该领导者将记录传播到每个副本。消费者通常也连接到分区领导者，因为消费消息是状态变化的（消费者偏移量）。</p>
<p>副本的数量是复制因子。推荐值为3，因为它在性能和容错性之间提供了正确的平衡，并且云服务提供商通常提供三个数据中心（可用区）作为区域的一部分进行部署。</p>`,r:{minutes:3.89,words:1168},t:"Kafka配置中的bootstrap服务器",y:"a"}}],["/posts/baeldung/2024-07-02/2024-07-02-%20JsonSubTypes%20vs.%20Reflections%20for%20Polymorphic%20Deserialization%20in%20Jackson.html",{loader:()=>a(()=>import("./2024-07-02- JsonSubTypes vs. Reflections for Polymorphic Deserialization in Jackson.html-DudH7-U2.js"),__vite__mapDeps([437,1])),meta:{d:17198784e5,l:"2024年7月2日",c:["Java","Jackson"],g:["Polymorphic Deserialization","JsonSubTypes","Reflections"],e:`<hr>
<h1>Jackson中@JsonSubTypes与反射用于多态反序列化的比较</h1>
<p>多态反序列化是Jackson的一个特性，Jackson是一个流行的Java JSON序列化和反序列化库。它允许我们将JSON反序列化到一个Java对象层级结构中，即使在编译时不知道具体类型。当你拥有一个父类和多个子类，并且我们希望在反序列化期间确定对象的实际类型，以不丢失关于对象多态性质的任何信息时，这个特性非常有用。</p>
<p>在本教程中，我们将探讨两种实现方式：使用类型处理注解来指示基类的子类型，或者使用基于_Reflections_的方法来扫描和注册所有子类型。</p>
<h2>2. 使用@JsonTypeInfo和@JsonSubTypes进行多态反序列化</h2>`,r:{minutes:4.6,words:1380},t:"Jackson中@JsonSubTypes与反射用于多态反序列化的比较",y:"a"}}],["/posts/baeldung/2024-07-02/2024-07-02-A%20Guide%20to%20ShardingSphere.html",{loader:()=>a(()=>import("./2024-07-02-A Guide to ShardingSphere.html-FJnZ3ENY.js"),__vite__mapDeps([438,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Database"],g:["ShardingSphere","Database Sharding"],e:`
<h2>1. 概述</h2>
<p>Apache ShardingSphere 是一个开源项目，由一套集成的数据加工工具组成。它提供了分布式数据库解决方案、事务管理、治理等一套功能。</p>
<p>本教程将提供这个生态系统的快速概览以及入门指南。</p>
<h2>2. ShardingSphere 是什么？</h2>
<p><strong>Apache ShardingSphere，最初被称为 Sharding-JDBC，是为了解决 Java 应用程序的数据分片问题而创建的。</strong> 然而，现在它已经扩展为包括代理、边车以及处理分片之外的更多工具的一套工具。</p>
<p>在考虑使用 ShardingSphere 时，了解这样一个项目为我们的解决方案带来哪些优势非常重要。以下是一些关键点：</p>`,r:{minutes:6.21,words:1864},t:"Apache ShardingSphere 使用指南",y:"a"}}],["/posts/baeldung/2024-07-02/2024-07-02-Check%20if%20a%20String%20Has%20All%20Unique%20Characters%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-02-Check if a String Has All Unique Characters in Java.html-BUBs1Ucw.js"),__vite__mapDeps([439,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","String Manipulation"],g:["Java","Unique Characters","String"],e:`
<p>在本教程中，我们将学习多种技术来检查字符串中的所有字符（包括非ASCII字符）是否唯一。此外，这里讨论的所有方法都是不区分大小写的。</p>
<h2>1. 概述</h2>
<h2>2. 暴力法</h2>
<p>这是最明显的技术之一，但可能不是最有效的。我们比较字符串中的字符：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UniqueCharChecker</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">bruteForceCheck</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i \`<span class="token operator">&lt;</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> chars<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.85,words:856},t:"检查字符串中的字符是否唯一（Java）",y:"a"}}],["/posts/baeldung/2024-07-02/2024-07-02-CompletableFuture%20allOf%20%20.join%20%20%20vs.%20CompletableFuture.join%20%20.html",{loader:()=>a(()=>import("./2024-07-02-CompletableFuture allOf  .join   vs. CompletableFuture.join  .html-Cmrc4MJE.js"),__vite__mapDeps([440,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","CompletableFuture"],g:["CompletableFuture","Java 8","并发编程"],e:`
<p>在本文中，我们将探讨CompletableFuture的allOf()方法的细节，并理解使用它与在多个独立的CompletableFuture实例上调用join()的区别。我们将发现allOf()使我们能够在确保原子性的同时，以非阻塞的方式继续我们的流程。</p>
<p>CompletableFuture是Java 8中引入的一个强大特性，它促进了非阻塞代码的创建。在本文中，我们将重点介绍两种方法，它们使并行代码执行成为可能：join()和allOf()。</p>
<p>让我们首先分析这两种方法的内部工作机制。之后，我们将深入了解它们实现共同目标的不同方法，即并行执行代码，然后合并结果。对于本文的代码片段，我们将使用两个辅助函数，这些函数会阻塞线程一段时间，然后返回一些数据或抛出异常：</p>`,r:{minutes:5.54,words:1661},t:"CompletableFuture allOf().join() 与 CompletableFuture.join() 比较",y:"a"}}],["/posts/baeldung/2024-07-02/2024-07-02-Convert%20JSON%20Array%20to%20Java%20List.html",{loader:()=>a(()=>import("./2024-07-02-Convert JSON Array to Java List.html-HPLbLLvq.js"),__vite__mapDeps([441,1])),meta:{d:17198784e5,l:"2024年7月2日",c:["Java","JSON"],g:["Gson","Jackson"],e:`
<h2>1. 引言</h2>
<p>JSON 是一种流行的数据交换格式，用于在服务器和客户端之间传输数据。然而，在许多情况下，我们可能需要将 JSON 数组转换为 Java <em>List</em> 对象，以便进一步处理或数据操作。</p>
<p>在本教程中，我们将比较使用 Java 中两个流行的 JSON 库 - Gson 和 Jackson 来实现这种转换的不同方法。</p>
<h2>2. 使用 Gson 库</h2>
<p>Gson 是一个广泛使用的 JSON 库，用于将 Java 对象序列化和反序列化到 JSON。它提供了一个简单的方法来将 JSON 数组转换为 <em>List</em> 对象。</p>`,r:{minutes:3.09,words:928},t:"将 JSON 数组转换为 Java 列表 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-02/2024-07-02-Converting%20JsonNode%20Object%20to%20Map.html",{loader:()=>a(()=>import("./2024-07-02-Converting JsonNode Object to Map.html-DViLHr59.js"),__vite__mapDeps([442,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","JSON"],g:["Jackson","Gson"],e:`
<p>在现代软件开发中，不同系统之间的数据交换是一个常见需求。一种流行的数据交换格式是 JSON（JavaScript 对象表示法）。JSON 的主要用途是在网络连接上高效地在服务器和 Web 应用程序之间发送有组织的数据。它作为数据传输的便捷格式。</p>
<p>此外，JSON 经常用于 Web 服务和 API 中，以一致且标准化的方式提供公共数据。其灵活性使得它可以轻松地与各种编程语言、平台和技术集成。</p>
<p>处理 JSON 时，Java 编程中的一个常见任务是将 JSON 对象（由 JsonNode 表示）转换为 Map 结构，以便于操作和访问。</p>
<p>在本教程的后续部分中，我们将探索并演示使用 Jackson 和 Gson 库将 JsonNode 对象转换为 Map 的两种方法。</p>`,r:{minutes:3.99,words:1198},t:"JSONNode 对象转换为 Map | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-02/2024-07-02-Converting%20Relative%20to%20Absolute%20Paths%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-02-Converting Relative to Absolute Paths in Java.html-BGSfoKPD.js"),__vite__mapDeps([443,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","文件处理"],g:["Java","文件路径","绝对路径"],e:`
<p>在Java中处理文件路径是一项常见任务，有时我们需要将相对路径转换为绝对路径，出于各种原因。无论是处理文件操作、访问资源还是导航目录，知道如何将相对路径转换为绝对路径都至关重要。</p>
<p>在本教程中，我们将探索在Java中实现这种转换的不同方法。</p>
<h3>2.1 使用Paths类</h3>
<p>Java 7中引入的java.nio.file包提供了Paths类，它提供了一种方便的方式来操作文件和目录路径。</p>
<p>让我们使用Paths类将相对路径转换为绝对路径：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> relativePath <span class="token operator">=</span> <span class="token string">"myFolder/myFile.txt"</span><span class="token punctuation">;</span>

<span class="token class-name">Path</span> absolutePath <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>relativePath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:2.07,words:622},t:"Java中将相对路径转换为绝对路径",y:"a"}}],["/posts/baeldung/2024-07-02/2024-07-02-Converting%20String%20or%20String%20Array%20to%20Map%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-02-Converting String or String Array to Map in Java.html-CQ60dPux.js"),__vite__mapDeps([444,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Programming"],g:["Java","Map","String"],e:`
<p>处理基于键值对的数据是在各种Java应用程序中常见的需求。通常，数据以字符串或字符串数组的形式到达，将其转换为Map进行高效处理变得至关重要。在相同的背景下，Map提供了一种通过键值对访问和操作数据的便捷方式，使它们成为这些场景的强大数据结构。</p>
<p>在本文中，我们将探讨将字符串和字符串数组转换为Map的不同技术。我们还将讨论在将字符串数组转换为具有列表值的Map时如何处理重复键。此外，为了确保我们实现的正确性。</p>
<p>当我们有一个包含键值对的字符串时，我们可以将其转换为Map。字符串中的键值对必须由分隔符分隔，这可以是任何字符，例如逗号、分号或等号。</p>
<p>让我们看以下示例：</p>`,r:{minutes:4.44,words:1332},t:"Java中将字符串或字符串数组转换为Map的方法",y:"a"}}],["/posts/baeldung/2024-07-02/2024-07-02-Converting%20an%20int%20%20%20to%20HashSet%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-02-Converting an int   to HashSet in Java.html-UkMbIGRi.js"),__vite__mapDeps([445,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Collections"],g:["Java","HashSet","Arrays"],e:`
<p>数组和HashSet有一个共同的特点——它们都用于存储元素集合。然而，它们在底层实现和适用用例上有所不同。此外，一个区别是我们可以在数组中存储原始类型，但不能在HashSet中存储。</p>
<p>在本教程中，我们将学习如何使用多种方法将int[]转换为Java中的HashSet<code>&lt;Integer&gt;</code>。</p>
<h3>2. 理解场景</h3>
<p>首先，我们通过一些元素初始化一个int[]，arr：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:3.54,words:1063},t:"Java中将int[]转换为HashSet",y:"a"}}],["/posts/baeldung/2024-07-02/2024-07-02-Custom%20DLL%20Load%20%20%20Fixing%20the%20%20java.lang.UnsatisfiedLinkError%20%20Error.html",{loader:()=>a(()=>import("./2024-07-02-Custom DLL Load   Fixing the  java.lang.UnsatisfiedLinkError  Error.html-zoL2AWWP.js"),__vite__mapDeps([446,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","JNI"],g:["UnsatisfiedLinkError","Java Native Libraries"],e:`
<h2>1. 引言</h2>
<p>在这篇快速教程中，我们将探讨不同的导致_UnsatisfiedLinkError_的原因和解决方案。这是一种在使用本地库时常见的令人沮丧的错误。解决这个错误需要彻底理解其原因和适当的纠正措施。</p>
<p>我们将讨论诸如库和方法名称错误、缺少库目录规范、类加载器冲突、不兼容的架构以及Java安全策略的角色等场景。</p>
<h2>2. 场景和设置</h2>
<p><strong>我们将创建一个简单的类，说明在加载外部库时可能出现的错误。</strong> 假设我们在Linux上，让我们加载一个名为“libtest.so”的简单库，并调用它的_test()_方法：</p>`,r:{minutes:5.65,words:1696},t:"自定义DLL加载 - 修复“java.lang.UnsatisfiedLinkError”错误",y:"a"}}],["/posts/baeldung/2024-07-02/2024-07-02-Difference%20Between%20Future%20%20CompletableFuture%20%20and%20Rxjava%20s%20Observable.html",{loader:()=>a(()=>import("./2024-07-02-Difference Between Future  CompletableFuture  and Rxjava s Observable.html-DAbQhPAK.js"),__vite__mapDeps([447,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","RxJava"],g:["Future","CompletableFuture","Observable"],e:`
<p>在 Java 中，我们有几种方式可以异步运行任务。Java 本身内置了 <code>Future</code> 和 <code>CompletableFuture</code>。我们还可以使用 RxJava 库，它提供了 <code>Observable</code> 类。在本文中，我们将探讨这三种方式的区别以及每种方式的优缺点和潜在用例。</p>
<p><code>Future</code> 接口首次出现在 Java 5 中，并且功能非常有限。一个 <code>Future</code> 的实例是一个异步进程将产生的结果的占位符，可能尚未可用。提供了一小系列方法来帮助这个过程。我们可以取消一个任务或从已完成的任务中获取结果，还可以检查任务是否已被取消或完成。</p>`,r:{minutes:5.02,words:1505},t:"Java 中的 Future、CompletableFuture 和 RxJava 的 Observable 之间的区别",y:"a"}}],["/posts/baeldung/2024-07-02/2024-07-02-Difference%20Between%20Map.clear%20%20%20and%20Instantiating%20a%20New%20Map.html",{loader:()=>a(()=>import("./2024-07-02-Difference Between Map.clear   and Instantiating a New Map.html-Cp6_SxfO.js"),__vite__mapDeps([448,1])),meta:{d:17199648e5,l:"2024年7月3日",c:["Java","编程"],g:["Map.clear()","新实例"],e:`
<p>在Java中，处理java.util.Map时，理解Map.clear()方法和创建新的Map实例之间的区别至关重要。尽管这两种方法都可以用来清空一个map，但它们在内存管理、性能和map的其他引用行为方面有着不同的影响。</p>
<p>在本教程中，我们将深入探讨Java中使用Map.clear()方法和创建新的Map实例的区别，提供对内存管理、性能和引用行为的洞察。</p>
<h3>2. 理解Map.clear()</h3>
<p>java.util.Map.clear()方法是Java Map接口提供的内置方法。它允许从map中移除所有键值映射，有效地清空其内容。此外，它不接受任何参数，也不返回任何值。</p>`,r:{minutes:4.27,words:1282},t:"Java中Map.clear()与创建新Map实例的区别",y:"a"}}],["/posts/baeldung/2024-07-02/2024-07-02-Difference%20between%20Gson%20%20Expose%20and%20%20SerializedName.html",{loader:()=>a(()=>import("./2024-07-02-Difference between Gson  Expose and  SerializedName.html-BK17u_wW.js"),__vite__mapDeps([449,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Gson","Java"],g:["Gson","Java"],e:`
<p>在本教程中，我们将学习 Gson 库中的 @Expose 和 @SerializedName 注解。@Expose 有助于控制哪些类属性可以被序列化或反序列化，而 @SerializedName 有助于在序列化和反序列化时将对象的属性名称映射到 JSON 字符串中的属性键名，反之亦然。</p>
<p>有些情况下，类中的某些敏感属性值不应该被序列化为 JSON 字符串。为此，Gson 提供了 @Expose 注解，它有两个布尔属性：serialize 和 deserialize。</p>
<p>假设 Person 类中的 password 属性不应该序列化，因为它是敏感信息。因此，我们必须使用 @Expose(serialize=false) 注解来装饰 password 属性：</p>`,r:{minutes:3.91,words:1173},t:"Gson @Expose 和 @SerializedName 的区别",y:"a"}}],["/posts/baeldung/2024-07-02/2024-07-02-Docker%20Compose%20Support%20in%20Spring%20Boot%203.html",{loader:()=>a(()=>import("./2024-07-02-Docker Compose Support in Spring Boot 3.html-BM4nMAdx.js"),__vite__mapDeps([450,1])),meta:{d:17199648e5,l:"2024年7月3日",c:["Spring Boot","Docker Compose"],g:["Spring Boot 3","Docker Compose 支持"],e:`
<h2>1. 概述</h2>
<p>Spring Boot 3 引入了新特性，比如将应用程序构建为 GraalVM 原生映像或 Java 17 基线版本。然而，另一个重要的支持是 Docker Compose 的集成。</p>
<p>在本教程中，我们将看到如何将 Docker Compose 工作流程与 Spring Boot 3 集成。</p>
<h2>2. Spring Boot 3 对 Docker Compose 的支持提供了什么？</h2>
<p>通常，我们会运行 <code>docker-compose up</code> 来启动容器，并使用 <code>docker-compose down</code> 来停止基于 <code>docker-compose.yml</code> 的容器。现在，我们可以将这些 Docker Compose 命令委托给 Spring Boot 3。当 Spring Boot 应用程序启动或停止时，它也将管理我们的容器。</p>`,r:{minutes:7.09,words:2126},t:"Docker Compose 在 Spring Boot 3 中的支持",y:"a"}}],["/posts/baeldung/2024-07-02/2024-07-02-Escape%20HTML%20Symbols%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-02-Escape HTML Symbols in Java.html-BKtTblYa.js"),__vite__mapDeps([451,1])),meta:{d:17198784e5,l:"2024年7月2日",c:["Web Development"],g:["HTML","Java","XSS"],e:`
<p>在Web开发的广阔领域中，处理HTML符号对于防范安全漏洞和确保网页内容正确渲染起着至关重要的作用。</p>
<p>在本教程中，我们将探索Java中转义HTML符号的不同方法。通过这样做，我们可以保护应用程序免受跨站脚本（XSS）攻击，并防止网页上不必要的标记解释。</p>
<h3>2. 理解HTML符号转义</h3>
<p>在深入解决方案之前，理解HTML符号转义的概念至关重要。HTML符号，如**<code>&lt;**, **&gt;</code>**, **&amp;**等，在HTML标记的上下文中具有特定的含义。然而，当这些符号出现在用户生成的内容或动态数据中时，正确转义它们至关重要。如果做不到这一点，可能会导致安全漏洞和网页上的潜在渲染问题。</p>`,r:{minutes:2.26,words:677},t:"Java中转义HTML符号",y:"a"}}],["/posts/baeldung/2024-07-02/2024-07-02-Fail%20Maven%20Build%20if%20JUnit%20Coverage%20Falls%20Below%20Certain%20Threshold.html",{loader:()=>a(()=>import("./2024-07-02-Fail Maven Build if JUnit Coverage Falls Below Certain Threshold.html-CwGy70zw.js"),__vite__mapDeps([452,1])),meta:{d:16881696e5,l:"2023年7月1日",c:["Java","Maven"],g:["JaCoCo","JUnit","Maven插件"],e:`<hr>
<h1>Maven构建失败时的JUnit覆盖率阈值</h1>
<p>在本教程中，我们将看到如何使Maven构建在JaCoCo代码覆盖率低于特定阈值时失败。我们将首先查看没有阈值的JaCoCo插件的基本形式。然后，我们将向现有的JaCoCo插件添加一个新的执行，专注于检查覆盖率。</p>
<p>在这里，我们将触及这个新执行的一些显著元素。然后，我们将扩展一个简单的_ProductService_示例，以查看添加_BRANCH_和_INSTRUCTION_覆盖率规则的效果。我们将看到在特定规则下构建失败。最后，我们将以使用JaCoCo强制执行规则对质量控制的潜在好处作为结论。</p>
<h3>2. JaCoCo Maven插件</h3>`,r:{minutes:6.83,words:2050},t:"Maven构建失败时的JUnit覆盖率阈值",y:"a"}}],["/posts/baeldung/2024-07-02/2024-07-02-Get%20a%20Continuous%20Stream%20of%20Logs%20for%20Pods%20in%20Kubernetes.html",{loader:()=>a(()=>import("./2024-07-02-Get a Continuous Stream of Logs for Pods in Kubernetes.html-hiL3JpT4.js"),__vite__mapDeps([453,1])),meta:{d:17198784e5,l:"2024年7月2日",c:["Kubernetes","运维"],g:["Kubernetes","日志流","监控"],e:`
<p>日志流在 Kubernetes 中对于监控和排错运行在容器化环境中的应用程序至关重要。它提供了对 Pod 中容器生成的日志的实时访问。</p>
<p>在本文中，我们将学习如何使用 <code>kubectl logs</code> 命令从 Kubernetes Pod 中获取日志的连续流。### 1. 概述</p>
<p>让我们从 <code>ubuntu-pod.yaml</code> 配置文件开始，这个 Pod 使用 <code>ubuntu</code> 镜像，并每分钟打印一条消息：</p>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code>$ cat ubuntu<span class="token punctuation">-</span>pod.yaml
<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>pod
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">containers</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>container
    <span class="token key atrule">image</span><span class="token punctuation">:</span> ubuntu
    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"bash"</span><span class="token punctuation">,</span> <span class="token string">"-c"</span><span class="token punctuation">,</span> <span class="token string">"while true; do echo 'running ...' &amp;&amp; sleep 60; done"</span><span class="token punctuation">]</span>
</code></pre></div>`,r:{minutes:6.73,words:2018},t:"Kubernetes 中获取 Pod 日志的连续流",y:"a"}}],["/posts/baeldung/2024-07-02/2024-07-02-Getting%20Started%20With%20Apache%20Pulsar%20and%20Spring%20Boot.html",{loader:()=>a(()=>import("./2024-07-02-Getting Started With Apache Pulsar and Spring Boot.html-BiFgpc_r.js"),__vite__mapDeps([454,1])),meta:{d:17198784e5,l:"2024年7月2日",c:["Spring Boot","Apache Pulsar"],g:["Spring Boot","Apache Pulsar","Messaging System"],e:`<hr>
<h1>入门指南：Apache Pulsar 与 Spring Boot 集成</h1>
<p>Apache Pulsar 是一个分布式发布-订阅消息系统。虽然 Apache Pulsar 提供的功能与 Apache Kafka 类似，但 Pulsar 旨在克服 Kafka 在高延迟、低吞吐量、扩展和地理复制等方面的限制，并且更多。当处理需要实时处理的大量数据时，Apache Pulsar 是一个很好的选择。</p>
<p>在本教程中，我们将看到如何将 Apache Pulsar 与我们的 Spring Boot 应用程序集成。我们将利用 Pulsar 的 Spring Boot Starter 配置的 <em>PulsarTemplate</em> 和 <em>PulsarListener</em>。我们还将看到如何根据我们的要求修改它们的默认配置。</p>`,r:{minutes:5.8,words:1741},t:"入门指南：Apache Pulsar 与 Spring Boot 集成",y:"a"}}],["/posts/baeldung/2024-07-02/2024-07-02-Guide%20to%20Java%20Jackson%20jr%20Library.html",{loader:()=>a(()=>import("./2024-07-02-Guide to Java Jackson jr Library.html-Ct6c0cO-.js"),__vite__mapDeps([455,1])),meta:{d:17198784e5,l:"2024年7月2日",c:["Java","Jackson-jr"],g:["JSON","库","轻量级"],e:`
<p>Jackson-jr 是一个为 Java 设计的轻量级 JSON 处理库，旨在为原始的 Jackson 库提供一个更简单和更小的替代品。凭借其小巧的体积和易于使用的 API，Jackson-jr 是<strong>日常 JSON 读写场景的极佳选择</strong>。</p>
<p>在本指南中，我们将探索 Jackson-jr 的关键特性和用法，以及示例和最佳实践。</p>
<h3>2. Jackson-jr 入门</h3>
<p>Jackson-jr 提供了一种轻量级且高效的方式来处理 Java 应用程序中的 JSON 数据。它提供了一个简单的 API 来处理 JSON 对象和数组，使解析、生成和操作 JSON 数据变得更容易。</p>`,r:{minutes:4.75,words:1424},t:"Jackson-jr 库指南",y:"a"}}],["/posts/baeldung/2024-07-02/2024-07-02-Guide%20to%20the%20yield%20Keyword%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-02-Guide to the yield Keyword in Java.html-ZYEFKE5V.js"),__vite__mapDeps([456,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Programming"],g:["yield","switch","Java 14"],e:`
<ol>
<li>概述
在Java的早期版本中，我们经常使用_switch_语句来将一个值转换为另一个值。这通常需要我们将_switch_嵌入到一个单独的函数中，并从每个_case_使用_return_语句，或者需要我们从每个_case_分配一个临时变量以供函数稍后使用。
自Java 14起，_switch_表达式中的_yield_关键字为我们提供了一种更好的方法。
<em>yield_关键字允许我们通过返回一个值来退出_switch_表达式，该值成为_switch_表达式的值。
这意味着我们可以将_switch_表达式的值分配给一个变量。
最后，通过在_switch_表达式中使用_yield</em>，我们得到了一个隐式检查，以确保我们覆盖了我们的案例，这使我们的代码更加健壮。
让我们看一些例子。</li>
</ol>`,r:{minutes:2.41,words:723},t:"Java 中的 yield 关键字指南",y:"a"}}],["/posts/baeldung/2024-07-02/2024-07-02-How%20to%20Get%20First%20Item%20From%20a%20Java%20Set.html",{loader:()=>a(()=>import("./2024-07-02-How to Get First Item From a Java Set.html-CdMHdvoE.js"),__vite__mapDeps([457,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Collections"],g:["Set","Java","LinkedHashSet"],e:`<hr>
<h1>如何从Java Set中获取第一个元素</h1>
<h2>1. 概述</h2>
<p><em>Set</em> 是一个不允许重复项的集合。Java 提供了 <em>Set</em> 接口以及几个该接口的实现供我们使用。本教程将探讨如何从 <em>Set</em> 中获取第一个元素。Java <em>Set</em> 按定义是无序的，但有些实现确实保持了顺序，例如 <em>LinkedHashSet</em>，我们将在这里重点讨论。</p>
<h2>2. 使用 <em>Iterator</em></h2>
<p><strong>我们可以使用 <em>Iterator</em> 来检索 <em>Set</em> 中的第一个元素。</strong> <em>Set</em> 接口允许我们使用 <em>iterator()</em> 方法为所有实现获取 <em>Iterator</em>。然后我们可以调用 <em>Iterator</em> 上的 <em>next()</em> 来获取第一个项目：</p>`,r:{minutes:2.53,words:758},t:"如何从Java Set中获取第一个元素",y:"a"}}],["/posts/baeldung/2024-07-02/2024-07-02-How%20to%20Get%20Notified%20When%20a%20Task%20Completes%20in%20Java%20Executors.html",{loader:()=>a(()=>import("./2024-07-02-How to Get Notified When a Task Completes in Java Executors.html-D9stBvas.js"),__vite__mapDeps([458,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Concurrency"],g:["Executors","Task Notification"],e:`
<p>Java提供了多种选项来异步运行任务，例如使用Executors。通常我们想知道任务何时完成，例如，为了提醒用户或开始下一个任务。在本教程中，我们将探讨根据我们最初运行任务的方式，接收任务完成通知的不同选项。</p>
<h2>2. 设置</h2>
<p>首先，让我们定义我们想要运行的任务和一个回调接口，当我们的任务完成时，我们希望通过该接口收到通知。</p>
<p><strong>对于我们的任务，我们将实现_Runnable_。_Runnable_是一个接口，当我们想要某些东西在线程中运行时可以使用。</strong> 我们必须重写_run()_方法，并将我们的业务逻辑放在里面。对于我们的示例，我们只会在控制台打印，以便我们知道它已经运行：</p>`,r:{minutes:5.96,words:1787},t:"如何在Java中使用Executors接收任务完成通知",y:"a"}}],["/posts/baeldung/2024-07-02/2024-07-02-How%20to%20Get%20the%20Start%20and%20End%20Dates%20of%20a%20Year%20Using%20Java.html",{loader:()=>a(()=>import("./2024-07-02-How to Get the Start and End Dates of a Year Using Java.html-D9qEYy5F.js"),__vite__mapDeps([459,1])),meta:{d:16492032e5,l:"2022年4月6日",c:["Java","Date and Time"],g:["Java 8","Date Time API","Calendar"],e:`<hr>
<h1>如何使用Java获取一年的起始和结束日期</h1>
<p>Java 8引入了新的日期时间API，使得在Java中处理日期和时间变得更加容易。它提供了不同的方法来操作日期和时间。</p>
<p>在本教程中，我们将探讨如何使用日期时间API和_Calendar_类来获取一年的起始和结束日期。</p>
<h3>2. 使用日期时间API</h3>
<p>日期时间API中的_LocalDate_和_TemporalAdjuster_类使得获取一年的起始和结束日期变得简单。</p>
<p>以下是一个使用这些类的示例：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenCurrentDate_whenGettingFirstAndLastDayOfYear_thenCorrectDatesReturned</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">LocalDate</span> today <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">LocalDate</span> firstDay <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token function">firstDayOfYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">LocalDate</span> lastDay <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token function">lastDayOfYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"2023-01-01"</span><span class="token punctuation">,</span> firstDay<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"2023-12-31"</span><span class="token punctuation">,</span> lastDay<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.17,words:652},t:"如何使用Java获取一年的起始和结束日期",y:"a"}}],["/posts/baeldung/2024-07-02/2024-07-02-How%20to%20Modify%20a%20Key%20in%20a%20HashMap%20.html",{loader:()=>a(()=>import("./2024-07-02-How to Modify a Key in a HashMap .html-DYIngITS.js"),__vite__mapDeps([460,1])),meta:{d:17198784e5,l:"2024年7月2日",c:["Java","HashMap"],g:["HashMap","Java"],e:`
<p>在Java中，HashMap是一种广泛使用的数据结构，它以键值对的形式存储元素，提供了快速的数据访问和检索。有时在使用HashMap时，我们可能想要修改现有条目的键。</p>
<p>在本教程中，我们将探讨如何在Java中的HashMap修改键。</p>
<h2>2. 使用remove()然后put()</h2>
<p>首先，让我们看看HashMap是如何存储键值对的。HashMap内部使用Node类型来维护键值对：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span>\`\` <span class="token keyword">implements</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span>\`\` <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> hash<span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token class-name">K</span> key<span class="token punctuation">;</span>
    <span class="token class-name">V</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:5.31,words:1592},t:"如何在Java的HashMap中修改键？",y:"a"}}],["/posts/baeldung/2024-07-02/2024-07-02-JDBC%20vs.%20R2DBC%20vs.%20Spring%20JDBC%20vs.%20Spring%20Data%20JDBC.html",{loader:()=>a(()=>import("./2024-07-02-JDBC vs. R2DBC vs. Spring JDBC vs. Spring Data JDBC.html-TkeilJod.js"),__vite__mapDeps([461,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["JDBC","R2DBC"],g:["Spring JDBC","Spring Data JDBC"],e:`
<p>当涉及到Java应用程序中的数据库操作时，我们有多种可用的选项。JDBC、R2DBC、Spring JDBC和Spring Data JDBC是用于与数据库交互的最流行的框架之一。每个框架都提供了独特的特性和优势，以高效地处理数据库操作。</p>
<p>在这个快速教程中，我们将深入数据库连接框架的世界，并探索每一种框架如何带来其独特的优势。从传统的JDBC到尖端的R2DBC以及两者之间的一切，我们将揭示它们的内部工作方式，并并排比较它们的功能，以选择正确的工具。</p>
<p>JDBC（Java数据库连接）是Java中访问数据库的最古老和最广泛使用的标准。它提供了一组接口和类来执行SQL查询、检索结果和执行其他数据库操作。</p>`,r:{minutes:4.13,words:1240},t:"JDBC vs. R2DBC vs. Spring JDBC vs. Spring Data JDBC | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-02/2024-07-02-Law%20of%20Demeter%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-02-Law of Demeter in Java.html-B4to7Eq2.js"),__vite__mapDeps([462,1])),meta:{d:17199648e5,l:"2024年7月3日",c:["Java","设计模式"],g:["Law of Demeter","面向对象设计"],e:`<hr>
<h1>迪米特法则在Java中的应用</h1>
<h2>1. 概述</h2>
<p>迪米特法则（LoD），或最少知识原则，为模块化软件开发提供了面向对象设计原则。它有助于构建相互依赖性较低且松耦合的组件。</p>
<p>在本教程中，我们将深入探讨迪米特法则及其在Java中的应用。</p>
<h2>2. 理解迪米特法则</h2>
<p>迪米特法则是面向对象编程中的几种设计指南之一。<strong>它建议对象应避免访问其他对象的内部数据和方法</strong>。相反，对象应该只与其直接依赖项交互。</p>
<p>该概念最初由Karl J. Lieberherr等人在一篇论文中提出。它指出：</p>`,r:{minutes:5.26,words:1578},t:"迪米特法则在Java中的应用",y:"a"}}],["/posts/baeldung/2024-07-02/2024-07-02-Matching%20Varargs%20Using%20MockK%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-02-Matching Varargs Using MockK in Kotlin.html-Ce0PIcTw.js"),__vite__mapDeps([463,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin","MockK"],g:["MockK","varargs"],e:`
<p>MockK 是一个功能强大的 Kotlin 测试模拟库。当涉及到使用可变参数（varargs）的函数时，MockK 提供了优雅的解决方案。</p>
<p>在本教程中，我们将学习如何使用 MockK 来模拟带有 vararg 参数的函数。</p>
<h2>2. MockK 对 Varargs 的支持</h2>
<p>首先，我们创建一个带有 vararg 参数的基本函数。这将使我们能够演示如何模拟一个函数并有效地匹配 vararg 参数：</p>
<div class="language-kotlin" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> MyClass <span class="token punctuation">{</span>
    <span class="token keyword">fun</span> <span class="token function">joinBySpace</span><span class="token punctuation">(</span><span class="token keyword">vararg</span> strings<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span>
        <span class="token keyword">return</span> strings<span class="token punctuation">.</span><span class="token function">joinToString</span><span class="token punctuation">(</span>separator <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">" "</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:6.34,words:1902},t:"MockK 在 Kotlin 中匹配可变参数的使用",y:"a"}}],["/posts/baeldung/2024-07-02/2024-07-02-Metadata%20GC%20Threshold%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-02-Metadata GC Threshold in Java.html-BwuDEiV8.js"),__vite__mapDeps([464,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","JVM"],g:["Metaspace","Garbage Collection"],e:`
<p>垃圾收集是Java运行时系统识别并移除内存中未引用对象的过程。它在管理内存方面发挥着关键作用，通过清除未引用的对象、临时对象、未使用的元数据等。</p>
<p>在本教程中，我们将探索元空间（Metaspace）和元数据GC阈值（Metadata GC Threshold），以及如何调整它们的参数。</p>
<p>元数据包含有关堆中对象的信息，包括它们的类定义、方法表和相关信息。根据Java的版本，JVM将这些数据存储在永久代（PermGen）或元空间（Metaspace）中。</p>
<p>JVM依赖这些信息来执行类加载、字节码验证和动态绑定等任务。</p>
<p>从Java 8开始，JVM用一个新的内存区域——元空间（Metaspace）取代了永久代（PermGen），用于存储元数据。</p>`,r:{minutes:4.4,words:1319},t:"Java中的元数据GC阈值概述",y:"a"}}],["/posts/baeldung/2024-07-02/2024-07-02-Pagination%20in%20Spring%20Webflux%20and%20Spring%20Data%20Reactive.html",{loader:()=>a(()=>import("./2024-07-02-Pagination in Spring Webflux and Spring Data Reactive.html-UaVMIVe5.js"),__vite__mapDeps([465,1])),meta:{d:16795296e5,l:"2023年3月23日",c:["Spring","WebFlux"],g:["Pagination","Spring Data Reactive"],e:`
<p>在本文中，我们将探讨分页在检索信息时的重要性，比较 Spring Data Reactive 分页与 Spring Data，并展示如何使用示例实现分页。</p>
<p>分页是在处理返回大量资源集合的端点时的一个重要概念。它通过将数据分解成更小、更易于管理的块，称为“页面”，从而允许高效地检索和展示数据。</p>
<p>考虑一个显示产品详情的 UI 页面，它可能显示从 10 到 10,000 条记录。假设 UI 设计为从后端获取并显示整个目录。在这种情况下，它将消耗额外的后端资源，并导致用户等待时间显著增加。</p>
<p><strong>实现分页系统可以显著增强用户体验。而不是一次性获取所有记录集，更有效的方法是最初检索少量记录，并在请求时提供加载下一组记录的选项。</strong></p>`,r:{minutes:4.88,words:1463},t:"Spring Webflux 和 Spring Data Reactive 中的分页",y:"a"}}],["/posts/baeldung/2024-07-02/2024-07-02-Parameterized%20Logging%20With%20SLF4J.html",{loader:()=>a(()=>import("./2024-07-02-Parameterized Logging With SLF4J.html-C7Dtp3Dh.js"),__vite__mapDeps([466,1])),meta:{d:17198784e5,l:"2024年7月2日",c:["Software Development","Logging"],g:["SLF4J","Parameterized Logging","Logback"],e:`
<p>日志记录是软件开发的重要组成部分，为我们提供了对应用程序行为的宝贵见解。本教程将回顾一个称为参数化日志记录的重要日志特性。通过利用参数化日志记录，我们可以增强我们日志的全面性和效率。</p>
<p>Java简单日志门面（SLF4J）是一个广为人知的日志库，提供了统一的抽象日志记录。它允许开发人员使用单一API并插入任何兼容的日志框架，如Logback、log4j或SLF4J简单日志记录器。SLF4J API实际上并不记录日志，我们可以在部署时插入我们想要的任何日志框架。</p>
<p>在深入了解日志记录本身之前，让我们配置所需的依赖项。通常，我们需要包括两个依赖项：提供统一门面的_slf4j-api_，以及执行日志记录的日志实现。在我们的示例中，我们将使用Logback作为日志实现，并且这里我们可以采取不同的方法。我们只需要包括一个已经使用_slf4j-api_的_single logback-classic_依赖项。</p>`,r:{minutes:5.43,words:1629},t:"使用SLF4J进行参数化日志记录",y:"a"}}],["/posts/baeldung/2024-07-02/2024-07-02-Performance%20Comparison%20Between%20Different%20Java%20String%20Concatenation%20Methods.html",{loader:()=>a(()=>import("./2024-07-02-Performance Comparison Between Different Java String Concatenation Methods.html-CVDULcCa.js"),__vite__mapDeps([467,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","性能比较"],g:["Java","字符串连接","性能"],e:`
<p>在Java中，字符串连接是文本操作中常见的操作。然而，你选择连接字符串的方式可能会对你的应用程序性能产生重大影响。<strong>理解不同的连接方法及其性能特性对于编写高效和优化的代码至关重要。</strong></p>
<p>在本教程中，<strong>我们将深入探讨Java中的不同字符串连接方法。我们将使用JHM工具对这些方法的执行时间进行基准测试和比较。</strong></p>
<h2>2. 基准测试</h2>
<p>我们将采用JMH（Java Microbenchmark Harness）进行我们的基准测试。<strong>JMH提供了一个框架，用于测量小代码片段的性能，使开发人员能够分析和比较不同的实现。</strong></p>`,r:{minutes:6.86,words:2059},t:"Java中不同字符串连接方法的性能比较",y:"a"}}],["/posts/baeldung/2024-07-02/2024-07-02-Property%20Based%20Testing%20with%20jqwik.html",{loader:()=>a(()=>import("./2024-07-02-Property Based Testing with jqwik.html-_JYkKl-i.js"),__vite__mapDeps([468,1])),meta:{d:16902432e5,l:"2023年7月25日",c:["Software Engineering","Testing"],g:["Java","jqwik","Property-Based Testing"],e:`
<h2><strong>1. 引言</strong></h2>
<p>在本文中，我们将探讨基于属性的测试。<strong>我们将看到基于属性的测试是什么，以及如何使用 Java 的 jqwik 库来实现它。</strong></p>
<h2><strong>2. 参数化测试</strong></h2>
<p>在深入探讨基于属性的测试之前，我们先简要了解一下参数化测试。**参数化测试是指我们可以编写一个单一的测试函数，然后使用许多不同的参数来调用它。**例如：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ParameterizedTest</span>
<span class="token annotation punctuation">@CsvSource</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"4,2,2"</span><span class="token punctuation">,</span> <span class="token string">"6,2,3"</span><span class="token punctuation">,</span> <span class="token string">"6,3,2"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">testIntegerDivision</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> expected<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> answer <span class="token operator">=</span> calculator<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> answer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:7.42,words:2225},t:"jqwik 属性测试入门 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-02/2024-07-02-Receiving%20PostreSQL%20Push%20Notifications%20with%20Spring%20Integration.html",{loader:()=>a(()=>import("./2024-07-02-Receiving PostreSQL Push Notifications with Spring Integration.html-BokF3V6C.js"),__vite__mapDeps([469,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring","PostgreSQL"],g:["Spring Integration","NOTIFY/LISTEN"],e:'\n<p>在这个教程中，我们将展示如何使用基于Spring Integration的应用程序与PostgreSQL的_NOTIFY/LISTEN_特性。PostgreSQL提供了一种轻量级的消息通知机制，允许客户端使用常规数据库连接相互发送通知。这种机制使用两个非标准SQL语句，<em>NOTIFY_和_LISTEN</em>，因此得名。</p>\n<p>我们将基于Spring Integration核心库和PostgreSQL JDBC驱动进行操作：</p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>``org.springframework.integration``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>``spring-integration-core``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>``6.0.0``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>``org.postgresql``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>``postgresql``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>``42.3.8``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n</code></pre></div>',r:{minutes:5.84,words:1751},t:"使用Spring Integration接收PostgreSQL推送通知",y:"a"}}],["/posts/baeldung/2024-07-02/2024-07-02-Remove%20Duplicate%20Values%20From%20HashMap%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-02-Remove Duplicate Values From HashMap in Java.html-BmeRoS6_.js"),__vite__mapDeps([470,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","HashMap"],g:["HashMap","Java","去重"],e:'\n<h2>1. 概述</h2>\n<p><em>HashMap</em> 是Java编程中存储和管理键值对的强大工具。然而，有时我们的数据可能在值上包含重复项。</p>\n<p>在本教程中，我们将探讨如何从_HashMap_中移除重复的值。</p>\n<h2>2. 问题介绍</h2>\n<p><strong>_HashMap_允许多个键具有相同的值</strong>，这在某些场景下使得重复项不可避免。让我们看一个例子：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Map</span>`````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>````````` <span class="token function">initDevMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Map</span>`````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>````````` devMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    devMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token string">"Linux"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    devMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Kent"</span><span class="token punctuation">,</span> <span class="token string">"Linux"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    devMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token string">"MacOS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    devMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Eric"</span><span class="token punctuation">,</span> <span class="token string">"MacOS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    devMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Peter"</span><span class="token punctuation">,</span> <span class="token string">"Windows"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    devMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Saajan"</span><span class="token punctuation">,</span> <span class="token string">"Windows"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    devMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Jan"</span><span class="token punctuation">,</span> <span class="token string">"Windows"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    devMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Kevin"</span><span class="token punctuation">,</span> <span class="token string">"FreeBSD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> devMap<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:3.79,words:1138},t:"Java中从HashMap中移除重复值",y:"a"}}],["/posts/baeldung/2024-07-02/2024-07-02-Remove%20Whitespaces%20From%20a%20JSON%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-02-Remove Whitespaces From a JSON in Java.html-BkRu49pR.js"),__vite__mapDeps([471,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","JSON"],g:["JSON Minify","Whitespace Removal"],e:`
<h2>1. 引言</h2>
<p>在本教程中，我们将探索在Java中从JSON数据中移除额外空白符以进行压缩的过程。</p>
<p>我们经常面临需要压缩提供的JSON数据以优化存储，或者需要移除额外的空白符以便我们可以轻松比较多个JSON对象的情况。</p>
<p>为了实现这一点，我们将利用Jackson和Gson库的功能，这将有助于从提供的JSON数据中移除空白符。</p>
<h2>2. 使用自定义逻辑移除空白符</h2>
<p>JSON数据通常使用冒号(“:”)来分隔键和值，使用逗号(“,”)来分隔键值对。考虑到JSON键被引号(‘”‘)包围，并且JSON字符串使用转义序列，<strong>我们可以实施一种逻辑，逐个读取字符并构建没有任何额外空白的JSON字符串。</strong></p>`,r:{minutes:2.29,words:688},t:"在Java中从JSON移除空白符",y:"a"}}],["/posts/baeldung/2024-07-02/2024-07-02-Scroll%20API%20in%20Spring%20Data%20JPA.html",{loader:()=>a(()=>import("./2024-07-02-Scroll API in Spring Data JPA.html-DFpoHaTa.js"),__vite__mapDeps([472,1])),meta:{d:17198784e5,l:"2024年7月2日",c:["Spring Data JPA","Scroll API"],g:["Spring Data","JPA","Scroll API"],e:'\n<p>Spring Data Commons 是 Spring Data 项目的一部分，包含了用于管理持久层的接口和实现。滚动API是 Spring Data Commons 提供的一个功能，用于处理从数据库读取的大型结果集。</p>\n<p>在本教程中，我们将通过一个示例来探索滚动API。</p>\n<h2>2. 依赖</h2>\n<p>滚动API支持是在 Spring Boot 3.1 版本中添加的。Spring Data Commons 已经包含在 Spring Data JPA 中。因此，添加 Spring Data JPA 3.1 版本就足以获得滚动API的功能：</p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`org.springframework.data`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`spring-data-jpa`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`3.1.0`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n</code></pre></div>',r:{minutes:3.13,words:940},t:"Spring Data JPA 中的滚动API",y:"a"}}],["/posts/baeldung/2024-07-02/2024-07-02-Stateless%20Object%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-02-Stateless Object in Java.html-DJF5nz-T.js"),__vite__mapDeps([473,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java"],g:["Stateless Object","Java"],e:`<hr>
<h1>Java中的无状态对象</h1>
<p>在本教程中，我们将讨论如何在Java中实现无状态对象。<strong>无状态对象是没有实例字段的类实例</strong>。</p>
<p>在Java中，我们所有的代码都必须放在一个类中。在编写算法时，我们可能只需要在类中提供静态方法来实现这一点。</p>
<p>然而，有时我们可能希望将我们的算法绑定到一个无状态对象上。</p>
<p>当我们考虑Java中的对象时，我们通常想到的是包含字段状态的对象，以及操作该状态以提供行为的方法。</p>
<p>除此之外，我们可以创建具有不可修改字段的对象。这些对象在创建时定义了它们的状态，然后是不可变的，因为它们的状态不会改变。在并发操作中，不可变对象与无状态对象一样受益。</p>`,r:{minutes:4.02,words:1205},t:"Java中的无状态对象",y:"a"}}],["/posts/baeldung/2024-07-02/2024-07-02-Understanding%20Kafka%20Topics%20and%20Partitions.html",{loader:()=>a(()=>import("./2024-07-02-Understanding Kafka Topics and Partitions.html-Dx9c2GC_.js"),__vite__mapDeps([474,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Kafka","分布式系统"],g:["Kafka","主题","分区"],e:`
<p>在本教程中，我们将探讨Kafka主题和分区以及它们之间的关联。</p>
<h2>1. 引言</h2>
<p>在本教程中，我们将探讨Kafka主题和分区以及它们是如何相互关联的。</p>
<h2>2. Kafka主题是什么</h2>
<p><strong>主题是一个存储事件序列的机制。</strong> 从根本上说，主题是持久的日志文件，它们按照事件发生的时间顺序保持事件的顺序。因此，每个新事件总是被添加到日志的末尾。此外，<strong>事件是不可变的</strong>。因此，一旦事件被添加到主题中，我们就不能更改它们。</p>
<p>Kafka主题的一个示例用例是记录一个房间的温度测量序列。一旦记录了温度值，比如下午5:02的25摄氏度，它就不能被改变，因为它已经发生了。此外，下午5:06的温度值不能早于在下午5:02记录的温度值。因此，通过将每个温度测量视为一个事件，Kafka主题将是存储该数据的合适选择。</p>`,r:{minutes:6.44,words:1931},t:"Kafka主题和分区的理解",y:"a"}}],["/posts/baeldung/2024-07-02/2024-07-02-Understanding%20the%20java.net.SocketException%20Broken%20Pipe%20Error.html",{loader:()=>a(()=>import("./2024-07-02-Understanding the java.net.SocketException Broken Pipe Error.html-BLFJRtgy.js"),__vite__mapDeps([475,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Networking"],g:["SocketException","Broken Pipe"],e:`
<p>在本教程中，我们将仔细研究Java中的“java.net.SocketException: 'Broken Pipe'”错误。首先，我们将展示如何重现这个异常。接下来，我们将理解这个异常的主要原因，然后我们将看到如何修复它。</p>
<h2>2. 实例演示</h2>
<p>现在，让我们看一个生成错误“java.net.SocketException: 'Broken Pipe'”的示例。</p>
<p>简单来说，当一个设备尝试从一个已经死亡或连接已经被断开的另一个设备读取或写入数据时，通常会发生管道破裂。</p>
<p>由于连接已关闭，必须建立一个新的连接才能继续传输数据。否则，数据传输将停止。</p>`,r:{minutes:4.34,words:1303},t:'理解Java中的java.net.SocketException："Broken Pipe"错误',y:"a"}}],["/posts/baeldung/2024-07-02/2024-07-02-Unit%20Testing%20of%20System.in%20With%20JUnit.html",{loader:()=>a(()=>import("./2024-07-02-Unit Testing of System.in With JUnit.html-OCLxyewG.js"),__vite__mapDeps([476,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","JUnit"],g:["System.in","Unit Testing"],e:`
<p>当涉及到测试依赖于控制台用户输入的代码时，这个过程可能会变得相当具有挑战性。此外，测试用户输入场景是控制台基础或独立应用程序的一个关键部分，因为我们需要确保正确处理不同的输入。</p>
<p>在本教程中，我们将探讨如何使用JUnit测试_System.in_。</p>
<h2>2. 理解_System_类</h2>
<p>在我们深入研究之前，让我们先看看_System_类。它是一个来自_java.lang_包的最终类。</p>
<p>该类通过_in_和_out_变量提供了对标准输入和输出流的访问。与_out_变量类似，_System_类还有一个_err_变量，代表标准错误输出流。</p>`,r:{minutes:4.56,words:1368},t:"使用JUnit对System.in进行单元测试",y:"a"}}],["/posts/baeldung/2024-07-02/2024-07-02-What%20Does%20the%20Holder%20T%20%20Class%20Do%20in%20Java%20.html",{loader:()=>a(()=>import("./2024-07-02-What Does the Holder T  Class Do in Java .html-o9CkIKsi.js"),__vite__mapDeps([477,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Programming"],g:["Holder","Pass-by-Value","Java Generics"],e:`
<p>在本教程中，我们将深入探讨Java中的_Holder<code>&lt;T&gt;</code>_类。尽管这不是Java内置的类，但Holder<code>&lt;T&gt;</code>的概念可以显著提高我们的开发效率。让我们了解_Holder<code>&lt;T&gt;</code>_的强大之处以及它如何增强我们的代码。</p>
<h2>2. 值传递语义的局限性</h2>
<p>为了理解我们为什么可能需要一个_Holder<code>&lt;T&gt;</code><em>类，我们首先考虑一个常见的场景：向方法传递一个简单的_Boolean</em>。我们将创建一个模拟服务方法_getSupplierByZipCode()_，期望它修改_Boolean_的值：</p>`,r:{minutes:3.24,words:972},t:"Java中的Holder类是做什么用的？ | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-02/2024-07-02-What%20s%20the%20Difference%20Between%20Iterator%20and%20ListIterator%20.html",{loader:()=>a(()=>import("./2024-07-02-What s the Difference Between Iterator and ListIterator .html-Cx6cTkkY.js"),__vite__mapDeps([478,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Collections"],g:["Iterator","ListIterator"],e:`
<p>当我们使用集合时，经常需要迭代它们的元素。Java为此提供了两个基本接口：迭代器（Iterator）和列表迭代器（ListIterator）。尽管它们的目的相似，但两者之间存在重要的差异，我们必须理解这些差异。</p>
<p>在本教程中，我们将探讨Java中迭代器和列表迭代器的区别。</p>
<h2>迭代器接口</h2>
<p>标准的集合接口扩展了可迭代接口（Iterable）。进一步地，可迭代接口定义了iterator()方法来返回一个迭代器实例：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Iterable</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>\`\` <span class="token punctuation">{</span>
    <span class="token class-name">Iterator</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>\`\` <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:6.24,words:1872},t:"Java中迭代器和列表迭代器的区别",y:"a"}}],["/posts/baeldung/2024-07-03/2024-07-03-Accessing%20Session%20Attributes%20in%20Thymeleaf.html",{loader:()=>a(()=>import("./2024-07-03-Accessing Session Attributes in Thymeleaf.html-Cpg6QJWV.js"),__vite__mapDeps([479,1])),meta:{d:16907616e5,l:"2023年7月31日",c:["Spring","Thymeleaf"],g:["HTTP Session","Thymeleaf"],e:`
<p>在这篇短文中，我们将学习如何使用Thymeleaf库在服务器端访问HTTP会话。为此，我们将构建一个带有表单的网页，用于发送名称分析请求，一个显示结果的部分，以及一个面板，显示在会话期间发起的所有请求。</p>
<p>为了简化，示例将使用Spring + Thymeleaf，因此我们将使用Thymeleaf Spring标准方言。</p>
<p>会话信息位于servlet上下文中，我们可以在模板级别或Spring Boot控制器内部访问这些信息。现在，我们将检查两种访问会话信息的方法。</p>
<h3>2.1. 在Thymeleaf模板中访问会话属性</h3>
<p>在Thymeleaf中，我们有两个始终可用的基础对象：<em>ctx_和_locale</em>，它们以前缀‘#’表示。#ctx基础对象提供了访问包含HTTP会话信息的servlet上下文的权限。因此，在模板中，我们可以使用以下表达式访问会话：</p>`,r:{minutes:4.35,words:1306},t:"在Thymeleaf中访问会话属性",y:"a"}}],["/posts/baeldung/2024-07-03/2024-07-03-Adding%20One%20Month%20to%20Current%20Date%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-03-Adding One Month to Current Date in Java.html-DN9LD0gL.js"),__vite__mapDeps([480,1])),meta:{d:17200512e5,l:"2024年7月4日",c:["Java","日期处理"],g:["Java","LocalDate","Calendar","Joda-Time","Apache Commons Lang3"],e:`
<p>在本简短教程中，我们将学习如何在Java中向当前日期添加一个月。</p>
<p>首先，我们将了解如何使用Java核心方法来实现这一点。然后，我们将看看如何使用Joda-Time和Apache Commons Lang3等外部库来完成相同的任务。</p>
<h2>2. Java核心方法</h2>
<p>Java提供了几种方便的方式来操作日期和时间。让我们探索不同的选项来向当前日期添加一个月。</p>
<h3>2.1 使用Calendar类</h3>
<p>对于Java 8之前的版本，我们可以使用Calendar来处理时间数据。这个类提供了一组我们可以用于操作日期和时间的方法。</p>
<p>让我们看看它在实际中的应用：</p>`,r:{minutes:3.41,words:1023},t:"在Java中向当前日期添加一个月",y:"a"}}],["/posts/baeldung/2024-07-03/2024-07-03-Check%20if%20a%20File%20Is%20Empty%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-03-Check if a File Is Empty in Java.html-CqGMxjs5.js"),__vite__mapDeps([481,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","文件操作"],g:["Java","文件检查","文件是否为空"],e:`
<p>我们经常在Java应用程序中遇到需要操作文件的场景。有时，在进行进一步操作之前，我们想要确定一个文件是否为空。</p>
<p>在本教程中，我们将探讨几种在Java中检查文件是否为空的高效且直接的方法。</p>
<h2>2. 问题介绍</h2>
<p>在我们深入实现之前，让我们理解一下文件为空的含义。</p>
<p>在文件操作的上下文中，<strong>空文件指的是一个不包含数据或大小为零字节的文件</strong>。</p>
<p>验证文件是否为空在处理输入或输出操作时特别有用，例如读取或解析文件。</p>
<p>Java标准库提供了获取文件大小的方法。然而，我们需要留意一些陷阱。</p>`,r:{minutes:3.48,words:1043},t:"在Java中检查文件是否为空",y:"a"}}],["/posts/baeldung/2024-07-03/2024-07-03-Check%20if%20a%20String%20Contains%20Non%20Alphanumeric%20Characters.html",{loader:()=>a(()=>import("./2024-07-03-Check if a String Contains Non Alphanumeric Characters.html-CK5sF_o_.js"),__vite__mapDeps([482,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Regex"],g:["String","Non-Alphanumeric","Special Characters"],e:`
<p>在本教程中，我们将学习如何检查字符串是否包含非字母数字字符。这个功能在许多场景中都至关重要，例如在查找密码强度、拒绝应用程序中输入的特别字符等。当我们想要限制其使用到一种语言脚本时，这个需求变得更加有趣，我们在这里也尝试解决这个问题。</p>
<h2>2. 使用正则表达式</h2>
<p>我们认为使用正则表达式是实现此需求最灵活的方式。让我们考虑一个简单的用例，其中<strong>应用程序必须只接受英文数字和字母字符</strong>。为了实现这一点，我们使用正则表达式 <em>[^a-zA-Z0-9]</em> 来识别一个非字母数字字符：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NonAlphaNumRegexChecker</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Pattern</span> <span class="token constant">PATTERN_NON_ALPHNUM_USASCII</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"[^a-zA-Z0-9]+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isAlphanumeric</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> <span class="token constant">PATTERN_NON_ALPHNUM_USASCII</span><span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:3.13,words:938},t:"如何检查字符串是否包含非字母数字字符",y:"a"}}],["/posts/baeldung/2024-07-03/2024-07-03-CompletableFuture%20and%20ThreadPool%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-03-CompletableFuture and ThreadPool in Java.html-CHhOVb4_.js"),__vite__mapDeps([483,1])),meta:{d:16907616e5,l:"2023年7月31日",c:["Java","CompletableFuture"],g:["Java 8","线程池"],e:`
<p>Java 8 的并发 API 引入了 <em>CompletableFuture</em>，这是一个简化异步和非阻塞编程的有价值工具。</p>
<p>在本文中，我们将讨论 Java 的 <em>CompletableFuture</em> 以及它所使用的线程池。我们将探索其异步和非异步方法之间的区别，并学习如何最大限度地利用 <em>CompletableFuture</em> API 的潜力。</p>
<h2>2. 非异步方法</h2>
<p><em>CompletableFuture</em> 提供了一个包含50多种方法的广泛API。这些方法中的许多都有两个变体：非异步和异步。让我们从非异步对应方法开始，并深入探讨使用 <em>thenApply()</em> 方法的实践示例：</p>`,r:{minutes:4.33,words:1299},t:"Java 中的 CompletableFuture 和线程池 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-03/2024-07-03-Convert%20One%20Enum%20to%20Another%20Enum%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-03-Convert One Enum to Another Enum in Java.html-BDKMpAZK.js"),__vite__mapDeps([484,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Enums"],g:["Java","Enum转换"],e:`
<p>枚举（Enumerations，或称enums）是Java编程语言中强大且广泛使用的特性。在某些情况下，我们可能需要将一个枚举类型转换为另一个枚举类型。这种需求可能源于集成不同的库或框架、使用来自不同平台的微服务，或处理难以更新的遗留代码。</p>
<p>在本文中，我们将探讨在Java中映射或转换一个枚举到另一个枚举的不同技术。我们将检查内置机制和可以提供帮助的外部库。</p>
<h3>2. 定义模型</h3>
<p>在转换枚举时，我们可能会遇到两种主要情况，可以使用不同的实现技术。第一种情况涉及具有不同值集的不关枚举。第二种情况涉及具有相同值但代表Java视角下不同类的枚举。我们不能简单地将这些类的实例进行强制转换，仍然需要执行映射。</p>`,r:{minutes:8.8,words:2639},t:"在Java中将一个枚举转换为另一个枚举",y:"a"}}],["/posts/baeldung/2024-07-03/2024-07-03-Count%20the%20Number%20of%20Rows%20in%20Spring%20Data%20JPA.html",{loader:()=>a(()=>import("./2024-07-03-Count the Number of Rows in Spring Data JPA.html-uJ1CVAKz.js"),__vite__mapDeps([485,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Data JPA","JPA"],g:["row count","JPA Repository","CriteriaQuery","JPQL"],e:`
<h2>1. 概述</h2>
<p>Spring Data JPA 实现为 Jakarta Persistence API 提供了仓库支持，用于管理持久性，以及对象关系映射和函数。</p>
<p>在本教程中，我们将探索使用 JPA 统计表中行数的不同方法。</p>
<h2>2. 实体类</h2>
<p>以我们的示例来说，我们将使用具有与 <em>Permission</em> 实体一对一关系的 <em>Account</em> 实体：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span>
<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"ACCOUNTS"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Id</span>
    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy<span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">SEQUENCE</span><span class="token punctuation">,</span> generator <span class="token operator">=</span> <span class="token string">"accounts_seq"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@SequenceGenerator</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"accounts_seq"</span><span class="token punctuation">,</span> sequenceName <span class="token operator">=</span> <span class="token string">"accounts_seq"</span><span class="token punctuation">,</span> allocationSize <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"user_id"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> userId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Timestamp</span> createdOn<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Timestamp</span> lastLogin<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@OneToOne</span>
    <span class="token annotation punctuation">@JoinColumn</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"permissions_id"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Permission</span> permission<span class="token punctuation">;</span>

    <span class="token comment">// getters , setters</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:5.19,words:1556},t:"使用Spring Data JPA统计行数",y:"a"}}],["/posts/baeldung/2024-07-03/2024-07-03-Difference%20Between%20Boolean.TRUE%20and%20true%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-03-Difference Between Boolean.TRUE and true in Java.html-DrSYnVLP.js"),__vite__mapDeps([486,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Programming"],e:`
<h2>1. 引言</h2>
<p>在Java中，布尔值可以有两种表示形式：Boolean.TRUE，这是Boolean类中定义的一个常量，代表true值；以及原始值true，同样代表true。尽管它们看起来都用于表示布尔值的真，但它们之间存在着微妙的差别，开发者应当了解这些差别。</p>
<p><strong>在本教程中，我们将阐明这些不同之处，并帮助澄清它们的适当用法。</strong></p>
<h2>2. 理解Boolean.TRUE</h2>
<p>Boolean.TRUE是Java标准库中Boolean类定义的一个常量。它是一个Boolean包装类的实例，代表true值。</p>`,r:{minutes:2.41,words:722},t:"Java中Boolean.TRUE与true的区别 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-03/2024-07-03-Difference%20Between%20Instant%20and%20LocalDateTime.html",{loader:()=>a(()=>import("./2024-07-03-Difference Between Instant and LocalDateTime.html-CcsYOt4Q.js"),__vite__mapDeps([487,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Date and Time"],g:["Instant","LocalDateTime"],e:`
<h2>1. 引言</h2>
<p>Java 8引入了一组新的日期和时间类。了解何时使用哪一个可能会令人困惑。在本教程中，我们将探讨Instant和LocalDateTime类之间的区别。</p>
<h2>2. Instant类</h2>
<p><strong>将Instant类想象成UTC时区中的一个单一时间点是最简单的方式</strong>。如果我们将时间想象成一条线，Instant就代表线上的一个点。</p>
<p>在内部，Instant类实际上只是计算相对于1970年1月1日标准Unix纪元时间00:00:00的秒数和纳秒数。这个时间点由0秒和0纳秒表示，其他一切都是从它开始的偏移。</p>`,r:{minutes:5.39,words:1617},t:"Java中Instant和LocalDateTime的区别",y:"a"}}],["/posts/baeldung/2024-07-03/2024-07-03-Disable%20Wildcard%20Import%20in%20IntelliJ.html",{loader:()=>a(()=>import("./2024-07-03-Disable Wildcard Import in IntelliJ.html-CXaK7ZYP.js"),__vite__mapDeps([488,1])),meta:{d:1720046147e3,c:["IntelliJ IDEA","Java"],g:["代码编辑","导入优化"],e:`
<ol>
<li>概述
在Java开发中，正确的导入语句对于保持代码可读性和避免潜在冲突非常重要。</li>
</ol>
<p>IntelliJ IDEA是一个流行的Java集成开发环境（IDE）。因此，在这个快速教程中，我们将探讨如何在IntelliJ IDEA中禁用通配符导入。</p>
<ol start="2">
<li>IntelliJ的优化导入功能
IntelliJ自带了“优化导入”功能，它可以自动重新排列导入语句，例如应用预定义样式、调整顺序、清理未使用的导入等。</li>
</ol>
<p>我们可以通过菜单项：_Code -&gt; 优化导入_来对当前Java文件应用“优化导入”：</p>`,r:{minutes:3.82,words:1145},t:"IntelliJ IDEA中禁用通配符导入",y:"a"}}],["/posts/baeldung/2024-07-03/2024-07-03-Documenting%20Spring%20Event%20Driven%20API%20Using%20AsyncAPI%20and%20Springwolf.html",{loader:()=>a(()=>import("./2024-07-03-Documenting Spring Event Driven API Using AsyncAPI and Springwolf.html-f6WLESGN.js"),__vite__mapDeps([489,1])),meta:{d:16907616e5,l:"2023年7月31日",c:["Spring Boot","AsyncAPI"],g:["Springwolf","Event-Driven","Documentation"],e:`
<p>记录API是构建应用程序的重要部分。它是我们与客户共享的合同。此外，它详细记录了我们的集成点如何工作。文档应该易于访问、理解和实现。</p>
<p>在本教程中，我们将研究Springwolf，用于记录事件驱动的Spring Boot服务。Springwolf实现了AsyncAPI规范，这是OpenAPI规范的事件驱动API的适配。<strong>Springwolf是协议不可知的，涵盖了Spring Kafka、Spring RabbitMQ和Spring CloudStream实现。</strong></p>
<p>使用Spring Kafka作为我们的事件驱动系统，**Springwolf为我们从代码生成AsyncAPI文档。**一些消费者会自动检测到。其他信息由我们提供。</p>`,r:{minutes:7.32,words:2195},t:"使用AsyncAPI和Springwolf记录Spring事件驱动API",y:"a"}}],["/posts/baeldung/2024-07-03/2024-07-03-Does%20Java%20Read%20Integers%20in%20Little%20Endian%20or%20Big%20Endian%20.html",{loader:()=>a(()=>import("./2024-07-03-Does Java Read Integers in Little Endian or Big Endian .html-DeuwpAso.js"),__vite__mapDeps([490,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Endianness"],g:["Java","Big Endian","Little Endian"],e:`
<h2>1. 概述</h2>
<p>"大端"和"小端"这两个术语描述了内存中字节的排列顺序。在处理数据序列化、网络通信或在不同硬件架构中读取二进制数据时，字节序至关重要。</p>
<p>在本教程中，我们将深入探讨Java如何读取整数，以及它是否遵循小端或大端方法。</p>
<h2>2. 什么是字节序？</h2>
<p>字节序指的是计算机内存中字节的排列方式。它有两种形式：小端和大端。</p>
<p><strong>大端存储在最小的内存地址处存储最高位字节。</strong></p>
<p>另一方面，<strong>小端在最小的内存地址处存储最低位字节。</strong></p>
<h2>3. Java中的字节顺序</h2>`,r:{minutes:2.48,words:745},t:"Java是如何读取整数的：小端还是大端？",y:"a"}}],["/posts/baeldung/2024-07-03/2024-07-03-Extracting%20a%20Tar%20File%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-03-Extracting a Tar File in Java.html-Cbp9RfMx.js"),__vite__mapDeps([491,1])),meta:{d:17200512e5,l:"2024年7月4日",c:["Java","编程"],g:["tar","gzip","Apache Commons","Apache Ant","Apache Commons VFS"],e:`
<h2>1. 引言</h2>
<p>在本教程中，我们将探索不同的Java库，这些库可以用来解压tar归档文件。tar格式最初是作为Unix基础的实用程序，用于打包文件，未压缩。但今天，我们通常使用gzip压缩tar归档文件。因此，我们将看到压缩与未压缩的tar归档文件如何影响我们的代码。</p>
<h2>2. 创建实现的基类</h2>
<p>为了避免重复代码，我们首先从一个抽象类开始，我们将使用这个类作为我们实现的基础。这个类将定义一个单一的抽象方法untar()，它将执行解压：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">TarExtractor</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">InputStream</span> tarStream<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> gzip<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Path</span> destination<span class="token punctuation">;</span>

    <span class="token comment">// ...</span>

    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">untar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:5.15,words:1544},t:"Java中解压Tar文件",y:"a"}}],["/posts/baeldung/2024-07-03/2024-07-03-Get%20Partition%20Count%20for%20a%20Topic%20in%20Kafka.html",{loader:()=>a(()=>import("./2024-07-03-Get Partition Count for a Topic in Kafka.html-D1KRfYxF.js"),__vite__mapDeps([492,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Kafka"],g:["Kafka","Partitions"],e:`
<h2>1. 引言</h2>
<p>在本教程中，我们将探讨检索Kafka主题总分区数的不同方法。在简要介绍Kafka分区是什么以及我们为什么可能需要检索这些信息之后，我们将编写Java代码来执行此操作。然后，我们将看到如何使用命令行界面（CLI）获取这些信息。</p>
<p>Kafka主题可以被划分为多个分区。拥有多个分区的目标是能够同时从同一主题消费消息。因为拥有比现有分区更多的消费者是没有用的，<strong>主题中的Kafka分区数量代表了消费的最大并行级别</strong>。因此，事先知道给定主题有多少分区对于正确地调整相应消费者的规模是有用的。</p>
<h2>3. 使用Java检索分区数量</h2>`,r:{minutes:2.8,words:840},t:"获取Kafka主题的分区数量",y:"a"}}],["/posts/baeldung/2024-07-03/2024-07-03-Getting%20Yesterday%20s%20Date%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-03-Getting Yesterday s Date in Java.html-BhFR52pN.js"),__vite__mapDeps([493,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Date and Time"],g:["Java","Date","Time"],e:`<hr>
<h1>在Java中获取昨天的日期</h1>
<p>在这篇简短的教程中，我们将探索在Java中获取昨天日期的不同方法。</p>
<p>首先，我们将解释如何使用核心Java来实现。然后，我们将演示如何使用诸如Joda-Time和Apache Commons Lang等外部库来解决我们的主要难题。</p>
<h3>1. Java 8之前</h3>
<p>在Java 8之前，我们通常会使用_Date_或_Calendar_来处理和操作日期/时间信息。那么，让我们看看如何使用这两个类来获取昨天的日期。</p>
<h4>1.1 使用_Date_</h4>
<p>_Date_类表示一个特定的时间点。它提供了一组方法来操作和检索有关日期的信息。然而，重要的是要提到<strong>这个类已经过时并被标记为已弃用</strong>。</p>`,r:{minutes:4.18,words:1253},t:"在Java中获取昨天的日期",y:"a"}}],["/posts/baeldung/2024-07-03/2024-07-03-Gradle%20Toolchains%20Support%20for%20JVM%20Projects.html",{loader:()=>a(()=>import("./2024-07-03-Gradle Toolchains Support for JVM Projects.html-bzRDICnp.js"),__vite__mapDeps([494,1])),meta:{d:17199648e5,l:"2024年7月3日",c:["Java","Gradle"],g:["JVM","Toolchains"],e:`
<p>在本教程中，我们将探索Gradle对JVM项目的工具链支持。</p>
<p>我们首先理解这一特性背后的动机。然后，我们将定义它，并用实际的例子来尝试它。</p>
<p>在讨论什么是工具链之前，我们需要谈论它存在的原因。假设我们要写一个Java项目。我们的Java项目可能包含一些测试。因此，我们至少想要编译我们的代码并运行测试。我们添加了内置的Gradle Java插件，并指定了我们想要的字节码版本：</p>
<div class="language-groovy" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code>plugins <span class="token punctuation">{</span>
    id <span class="token string">'java'</span>
<span class="token punctuation">}</span>

java <span class="token punctuation">{</span>
    sourceCompatibility <span class="token operator">=</span> JavaVersion<span class="token punctuation">.</span>VERSION_1_8
    targetCompatibility <span class="token operator">=</span> JavaVersion<span class="token punctuation">.</span>VERSION_1_8
<span class="token punctuation">}</span>

</code></pre></div>`,r:{minutes:3.66,words:1099},t:"Gradle工具链支持JVM项目",y:"a"}}],["/posts/baeldung/2024-07-03/2024-07-03-How%20to%20Convert%20application.properties%20to%20application.yml%20for%20Spring%20Boot.html",{loader:()=>a(()=>import("./2024-07-03-How to Convert application.properties to application.yml for Spring Boot.html-WoDyGSA2.js"),__vite__mapDeps([495,1])),meta:{d:16855776e5,l:"2023年6月1日",c:["Spring Boot","Configuration"],g:["application.properties","application.yml"],e:`
<p>在本教程中，我们将学习如何将从Spring Initializer下载新Spring Boot项目时默认获得的_application.properties_文件转换为更易于阅读的_application.yml_文件。</p>
<h2>属性文件与YML文件之间的区别</h2>
<p>在直接进入主题之前，让我们通过代码形式看看这两种文件格式之间的区别。</p>
<p><strong>在_application.properties_文件中，属性以单行配置的形式存储。</strong> Spring Boot将属性文件生成为默认文件：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>spring.datasource.url=jdbc:h2:mem:testDB
spring.datasource.username=user
spring.datasource.password=testpwd
</code></pre></div>`,r:{minutes:1.91,words:574},t:"Spring Boot中将application.properties转换为application.yml",y:"a"}}],["/posts/baeldung/2024-07-03/2024-07-03-How%20to%20Deep%20Copy%20an%20ArrayList%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-03-How to Deep Copy an ArrayList in Java.html-COhz0KVY.js"),__vite__mapDeps([496,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","ArrayList"],g:["深拷贝","ArrayList"],e:`<hr>
<h1>如何在Java中深拷贝ArrayList</h1>
<h2>1. 引言</h2>
<p>在这篇简短的教程中，我们将学习如何在Java中复制一个_ArrayList_，重点介绍创建列表中元素的深拷贝的不同方法。</p>
<h2>2. 浅拷贝与深拷贝</h2>
<p>浅拷贝技术复制原始对象，但只复制可变字段的引用，而不是实际对象。另一方面，深拷贝创建了所有可变字段的独立副本，包括深度嵌套的对象。有关详细指南，请参阅我们的文章《深拷贝和浅拷贝之间的区别》。</p>
<h2>3. 模型</h2>
<p>让我们创建两个类：<em>Course_和_Student</em>。_Student_类有一个_Course_对象的实例作为可变的依赖项：</p>`,r:{minutes:4.28,words:1284},t:"如何在Java中深拷贝ArrayList",y:"a"}}],["/posts/baeldung/2024-07-03/2024-07-03-How%20to%20Get%20Last%20Day%20of%20a%20Month%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-03-How to Get Last Day of a Month in Java.html-DGDvGZCu.js"),__vite__mapDeps([497,1])),meta:{d:17200512e5,l:"2024年7月4日",c:["Java","编程"],g:["Java","日期处理","Joda Time"],e:`
<h2>1. 概述</h2>
<p>在这个简短的教程中，我们将探讨如何在Java中获取给定月份的最后一天。</p>
<p>首先，我们将介绍如何使用Java核心方法来实现这一点。然后，我们将展示如何使用Joda Time库来达到相同的目标。</p>
<h2>2. Java 8之前</h2>
<p>在Java 8之前，_日期(Date)_和_日历(Calendar)_类是Java中用于操作时间和日期的好选择。</p>
<p><strong>通常，_日历(Calendar)_提供了一套我们可以用于访问和操作时间信息的方法和常量，例如天、月和年。</strong></p>
<p>让我们看看如何使用它来获取特定月份的最后一天：</p>`,r:{minutes:3.78,words:1134},t:"如何在Java中获取一个月的最后一天 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-03/2024-07-03-How%20to%20Read%20Zip%20Files%20Entries%20With%20Java.html",{loader:()=>a(()=>import("./2024-07-03-How to Read Zip Files Entries With Java.html-DXJgU5yw.js"),__vite__mapDeps([498,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Zip Files"],g:["Java","ZipFile","ZipEntry"],e:`<hr>
<h1>如何使用Java读取Zip文件条目</h1>
<p>Zip文件广泛用于将多个文件压缩和归档到一个单一文件中。在各种场景中，程序化地提取和处理Zip文件中的单个条目可能非常有价值。</p>
<p>在这个简短的教程中，我们将探讨如何使用Java读取Zip文件条目。</p>
<h2>2. 解决方案</h2>
<p><strong>我们可以使用来自_java.util.zip_包的_ZipFile_和_ZipEntry_类轻松读取Zip文件的条目：</strong></p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>String zipFilePath = "path/to/our/zip/file.zip";

try (ZipFile zipFile = new ZipFile(zipFilePath)) {
    Enumeration\`&lt;? extends ZipEntry&gt;\` entries = zipFile.entries();
    while (entries.hasMoreElements()) {
        ZipEntry entry = entries.nextElement();
        // 检查条目是否是目录
        if (!entry.isDirectory()) {
            try (InputStream inputStream = zipFile.getInputStream(entry)) {
                // 使用inputStream读取和处理条目内容
            }
        }
    }
}
</code></pre></div>`,r:{minutes:1.75,words:526},t:"如何使用Java读取Zip文件条目",y:"a"}}],["/posts/baeldung/2024-07-03/2024-07-03-How%20to%20Solve%20403%20Error%20in%20Spring%20Boot%20POST%20Request.html",{loader:()=>a(()=>import("./2024-07-03-How to Solve 403 Error in Spring Boot POST Request.html-Cqa13CFe.js"),__vite__mapDeps([499,1])),meta:{d:16883424e5,l:"2023年7月3日",c:["Spring Boot","403 Error"],g:["Spring Security","CSRF"],e:`
<h2>1. 概述</h2>
<p>在Web开发中，遇到错误是常有的事。其中一种错误是HTTP 403禁止错误。</p>
<p>在本教程中，我们将学习如何在Spring Boot POST请求中解决403错误。我们将从理解403错误的含义开始，然后探索在Spring Boot应用程序中解决它的步骤。</p>
<h2>2. 什么是错误403？</h2>
<p><strong>HTTP 403错误，通常被称为“禁止”错误，是一个状态码，表示服务器理解了请求，但选择不授权它</strong>。这通常意味着客户端缺乏访问所请求资源的权限。</p>
<p>需要注意的是，这个错误与401错误不同，401错误表示服务器需要对客户端进行身份验证，但尚未收到有效的凭据。</p>`,r:{minutes:4.72,words:1417},t:"如何解决Spring Boot POST请求中的403错误 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-03/2024-07-03-Integer.class%20vs%20Integer.TYPE%20vs%20int.class.html",{loader:()=>a(()=>import("./2024-07-03-Integer.class vs Integer.TYPE vs int.class.html-dsTIKhW2.js"),__vite__mapDeps([500,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Programming"],g:["Integer","Wrapper Class","Primitive Type"],e:`<hr>
<h1>Integer.class 与 Integer.TYPE 与 int.class | Baeldung</h1>
<h2>1. 引言</h2>
<p>在Java中，有时我们需要使用基本类型及其对应的包装类。当处理_int_类型及其包装类_Integer_时，我们可能会遇到三种不同的表示形式。这些表示形式分别是_Integer.class_、<em>Integer.TYPE_和_int.class</em>。尽管它们乍一看可能很相似，但它们之间存在微妙的差异。</p>
<p>在本教程中，我们将探讨这些术语之间的区别，并了解它们在Java编程中的重要性。</p>
<p><strong><em>Integer.class</em> 表示与_Integer_包装类相关联的类对象</strong>。</p>`,r:{minutes:5.27,words:1581},t:"Integer.class 与 Integer.TYPE 与 int.class | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-03/2024-07-03-Introduction%20to%20JeroMQ.html",{loader:()=>a(()=>import("./2024-07-03-Introduction to JeroMQ.html-DLFor16d.js"),__vite__mapDeps([501,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Messaging"],g:["JeroMQ","ZeroMQ"],e:`
<p>在这篇文章中，我们将深入了解JeroMQ，这是ZeroMQ的一个纯Java实现。我们将看看它是什么，以及它在我们的应用程序中能为我们做些什么。</p>
<h2>2. ZeroMQ 是什么？</h2>
<p>ZeroMQ 是一个消息基础设施，它不需要任何实际的基础设施服务来设置。我们不需要像使用ActiveMQ或Kafka这样的实现中的单独消息代理。相反，我们应用程序中的ZeroMQ依赖项有能力为我们完成所有这些工作。</p>
<p>那么，我们能用这个做什么呢？我们可以实现我们通常想要的所有标准消息模式：</p>
<ul>
<li>请求/响应</li>
<li>发布/订阅</li>
<li>同步与异步</li>
<li>等等</li>
</ul>`,r:{minutes:10.94,words:3283},t:"JeroMQ 简介 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-03/2024-07-03-Introduction%20to%20Selenide.html",{loader:()=>a(()=>import("./2024-07-03-Introduction to Selenide.html-DL-G6DhZ.js"),__vite__mapDeps([502,1])),meta:{d:1688688e6,l:"2023年7月7日",c:["Selenide","UI自动化测试"],g:["Selenide","Selenium WebDriver","UI测试"],e:`
<p>在本文中，我们将了解用于UI自动化测试的Selenide项目。我们将看到它是什么以及如何使用它来测试我们的UI项目。</p>
<h2>2. Selenide是什么？</h2>
<p>Selenide是一个建立在Selenium WebDriver之上的免费、开源框架。它为我们提供了执行web应用程序自动化测试的所有Selenium的强大功能。然而，它大大简化了，使我们只关注重要的事情。</p>
<p>特别是，Selenide将简化所有web浏览器的管理。它还会在测试失败时自动捕获浏览器窗口的截图。然后，它为我们提供了一个更加简化的API，用于与web浏览器交互，包括几个不直接从Selenium提供的函数，并简化了其他可用的函数。</p>`,r:{minutes:8.65,words:2594},t:"Selenide简介",y:"a"}}],["/posts/baeldung/2024-07-03/2024-07-03-JAXP%20vs%20JAXB%20%20XML%20Processing%20APIs%20Compared.html",{loader:()=>a(()=>import("./2024-07-03-JAXP vs JAXB  XML Processing APIs Compared.html-B9HHsIeE.js"),__vite__mapDeps([503,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","XML"],g:["JAXP","JAXB"],e:`
<p>当涉及到Java应用程序中的XML处理时，我们有两个流行的选项：JAXP（Java API for XML Processing）和JAXB（Java Architecture for XML Binding）。这些API为解析、操作和绑定Java中的XML数据提供了基本功能。</p>
<p>在本教程中，我们将深入了解哪个API最适合我们的XML处理需求。</p>
<h2>2. JAXP（Java API for XML Processing）</h2>
<p>JAXP是一个广泛使用的Java API，提供了一种标准的方式来处理XML数据。它提供了一套接口和类，使我们能够解析、转换和验证XML文档。JAXP是Java标准版（SE）平台的一部分，并且得到了各种XML解析器和处理器的支持。</p>`,r:{minutes:4.98,words:1495},t:"JAXP与JAXB：比较XML处理API",y:"a"}}],["/posts/baeldung/2024-07-03/2024-07-03-MongoDB%20%20%20Field%20Level%20Encryption.html",{loader:()=>a(()=>import("./2024-07-03-MongoDB   Field Level Encryption.html-Bj0FCXHc.js"),__vite__mapDeps([504,1])),meta:{d:1685664e6,l:"2023年6月2日",c:["MongoDB","Spring Boot"],g:["MongoDB","Encryption","Spring Boot"],e:`
<h2>1. 引言</h2>
<p>在本教程中，我们将使用MongoDB的客户端字段级加密（CSFLE）来加密我们文档中选定的字段。我们将涵盖显式/自动加密和显式/自动解密，并强调加密算法之间的差异。</p>
<p>最终，我们将拥有一个简单的应用程序，可以插入和检索具有加密和未加密字段混合的文档。</p>
<h2>2. 场景和设置</h2>
<p>MongoDB Atlas和MongoDB Enterprise都支持自动加密。MongoDB Atlas有一个永久免费的集群，我们可以用来测试所有功能。</p>
<p>同样值得注意的是，字段级加密与静态存储加密不同，后者加密了整个数据库或磁盘。通过选择性地加密特定字段，我们可以在允许高效的查询和索引的同时更好地保护敏感数据。因此，我们将从一个简单的Spring Boot应用程序开始，使用Spring Data MongoDB插入和检索数据。</p>`,r:{minutes:5.7,words:1709},t:"MongoDB – 字段级加密 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-03/2024-07-03-New%20Features%20in%20Java%2020.html",{loader:()=>a(()=>import("./2024-07-03-New Features in Java 20.html-BQ6kr2H0.js"),__vite__mapDeps([505,1])),meta:{d:17199648e5,l:"2024年7月3日",c:["Java","编程"],g:["Java 20","新特性"],e:`
<p>Java 20，于2023年3月21日发布，是迄今为止在Java 19基础上构建的最新短期增量发布。它包括JEP 2.0中提到的七个重要的JDK增强提案（JEPs）。JEP流程用于评估对JDK增强的提案。Java 20中的大多数更新是对早期版本中引入的功能的改进或增强。</p>
<p>此外，Oracle JDK 20不是长期支持版本。因此，它将在Java 21发布之前接收更新。</p>
<p>在本文中，我们将探讨这些新特性。## 2. Scoped Values (JEP 429)</p>
<p>Java应用程序中有大量的组件或模块需要在它们之间共享数据。通常，这些模块是基于线程的，因此我们必须保护它们共享的数据不受任何更改的影响。</p>`,r:{minutes:6.92,words:2077},t:"Java 20 新特性概览",y:"a"}}],["/posts/baeldung/2024-07-03/2024-07-03-Parallelize%20for%20Loop%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-03-Parallelize for Loop in Java.html-BiGw_pdO.js"),__vite__mapDeps([506,1])),meta:{d:16907616e5,l:"2023年7月31日",c:["Java","Concurrency"],g:["for loop","parallelism","Java 8"],e:`
<h2>1. 概述</h2>
<p>有时，我们可能需要在for循环中处理大量的元素。顺序执行可能需要很长时间，并且使系统利用率不足。</p>
<p>在本教程中，我们将学习在Java中并行化for循环的不同方法，以提高应用程序在这种情况下的性能。</p>
<h2>2. 顺序处理</h2>
<p>让我们首先看看如何使用for循环顺序处理元素并测量处理元素所需的时间。</p>
<h3>2.1. 使用for循环进行顺序处理</h3>
<p>首先，我们将创建一个运行100次的for循环，并在每次迭代中执行一个重量级操作。</p>
<p>重量级操作的常见示例包括数据库调用、网络调用或CPU密集型操作。为了模拟重量级操作所需的时间，让我们在每次迭代中调用Thread.sleep()方法：</p>`,r:{minutes:5.15,words:1544},t:"Java中并行化for循环",y:"a"}}],["/posts/baeldung/2024-07-03/2024-07-03-Passing%20a%20Class%20to%20a%20Function%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-03-Passing a Class to a Function in Kotlin.html-DQjAyxGW.js"),__vite__mapDeps([507,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin","Programming"],g:["Kotlin","Class","Function","Reflection"],e:`
<p>在Kotlin中，类是语言的基本构建块，我们使用它们来定义对象及其行为。虽然通常传递各种数据类型的参数，但有时我们需要将类作为参数传递给函数。</p>
<p>将类传递给函数允许我们将其用作函数中的参数，从而可以对其进行操作。本教程将探讨在Kotlin中将类引用传递给函数的方法。</p>
<h2>2. 使用类引用</h2>
<p>在Kotlin中，每个类都与一个类引用相关联。Kotlin中有两类类引用。_KClass_是Kotlin类引用：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>MyClass::class
</code></pre></div>`,r:{minutes:4.44,words:1331},t:"在Kotlin中将类传递给函数",y:"a"}}],["/posts/baeldung/2024-07-03/2024-07-03-Pretty%20Print%20a%20JSON%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-03-Pretty Print a JSON in Java.html-BV83NSm2.js"),__vite__mapDeps([508,1])),meta:{d:17199648e5,l:"2024年7月3日",c:["Java","JSON"],g:["JSON格式化","Jackson","Gson"],e:`<hr>
<h1>Java中美化JSON的打印</h1>
<p>在本教程中，我们将深入了解在Java中格式化JSON数据以提高其可读性的过程。</p>
<p>通常，处理大型JSON对象时，理解和调试它们可能是一个艰巨的任务。因此，采用美化打印JSON对象的做法变得至关重要。</p>
<p>为了实现这一点，我们将利用Jackson和Gson库的功能，这些库提供了方便的方法来生成格式良好的JSON输出。</p>
<h3>2.1 使用Jackson按需美化打印JSON</h3>
<p>要实现按需美化打印JSON，我们可以利用<code>writeWithDefaultPrettyPrinter()</code>方法：</p>`,r:{minutes:1.64,words:492},t:"Java中美化JSON的打印",y:"a"}}],["/posts/baeldung/2024-07-03/2024-07-03-Qualified%20this%20and%20Implicit%20this%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-03-Qualified this and Implicit this in Kotlin.html-C21t3iUq.js"),__vite__mapDeps([509,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin","this 关键字"],g:["Kotlin","this"],e:`
<p>在 Kotlin 中，我们已经知道关键字 <em>this</em> 指的是我们正在操作的当前对象。</p>
<p>在本文中，我们将讨论与 <em>this</em> 使用相关的两个概念，即隐式 <em>this</em> 和显式 <em>this</em>。</p>
<h2>2. 接收者</h2>
<p>this 的接收者是使用 <em>this</em> 时的上下文对象。当我们在 Kotlin 中的函数或方法中使用 <em>this</em> 时，我们指的是对象本身或接收动作的对象：</p>
<div class="language-kotlin" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> Outer <span class="token punctuation">{</span>
    <span class="token keyword">fun</span> <span class="token function">checkThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">val</span> b <span class="token operator">=</span> <span class="token keyword">this</span>
        <span class="token comment">// 其他代码...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:4.21,words:1262},t:"Kotlin 中的显式 this 和隐式 this",y:"a"}}],["/posts/baeldung/2024-07-03/2024-07-03-Quick%20Guide%20to%20YugabyteDB.html",{loader:()=>a(()=>import("./2024-07-03-Quick Guide to YugabyteDB.html-LJzp5gVM.js"),__vite__mapDeps([510,1])),meta:{d:16907616e5,l:"2023年7月31日",c:["Database","Spring"],g:["YugabyteDB","SQL","Distributed SQL"],e:`
<p>在本文中，我们将探讨YugabyteDB。**YugabyteDB是一个为解决当今分布式云原生应用程序所面临困难而创建的SQL数据库。**Yugabyte DB为企业和开发人员提供了一个开源的高性能数据库。</p>
<h2>2. YugabyteDB架构</h2>
<p>**YugabyteDB是一个分布式SQL数据库。**更准确地说，它是一个关系型数据库，提供了一个逻辑上的单一数据库，部署在网络服务器集群中。</p>
<p>大多数关系型数据库的工作原理如下：</p>
<figure><img src="https://www.baeldung.com/wp-content/uploads/2023/07/spa-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>`,r:{minutes:6.15,words:1845},t:"YugabyteDB 快速指南",y:"a"}}],["/posts/baeldung/2024-07-03/2024-07-03-Reading%20a%20JSP%20Variable%20From%20JavaScript.html",{loader:()=>a(()=>import("./2024-07-03-Reading a JSP Variable From JavaScript.html-COWAxaT7.js"),__vite__mapDeps([511,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["JSP","JavaScript"],g:["JSP","JavaScript","Web开发"],e:'\n<p>当使用JSP开发Web应用程序时，经常需要将数据从服务器端的JSP传递到客户端的JavaScript。这允许在客户端进行动态交互和自定义。</p>\n<p>在本教程中，我们将探讨从JavaScript访问JSP变量的不同方法。</p>\n<h2>2. 设置</h2>\n<p>在我们开始之前，我们需要设置我们的环境以包含JSTL库，以支持在我们的JSP页面中使用JSTL标签：</p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>``javax.servlet``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>``jstl``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>``1.2``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n</code></pre></div>',r:{minutes:4.06,words:1218},t:"在JSP中读取JavaScript变量的概述",y:"a"}}],["/posts/baeldung/2024-07-03/2024-07-03-Removing%20JSON%20Elements%20With%20Jackson.html",{loader:()=>a(()=>import("./2024-07-03-Removing JSON Elements With Jackson.html-STCrfW6G.js"),__vite__mapDeps([512,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Jackson"],g:["JSON","Java","Jackson"],e:'\n<h2>1. 引言</h2>\n<p>Jackson库是Java应用程序中处理JSON（JavaScript对象表示）的强大工具。此外，它提供了广泛的功能，用于高效地读取、写入和操作JSON数据。因此，处理JSON时的一个常见任务是从JSON结构中删除特定元素。</p>\n<p>在本教程中，我们将探讨如何使用Jackson删除JSON元素，并通过实际示例理解这一过程。</p>\n<h2>2. 设置环境</h2>\n<p>要使用Jackson，我们首先需要在我们的_pom.xml_文件中添加_jackson-dataformat-xml_依赖项：</p>\n<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>`&lt;dependency&gt;`\n    `&lt;groupId&gt;`com.fasterxml.jackson.core`&lt;/groupId&gt;`\n    `&lt;artifactId&gt;`jackson-dataformat-xml`&lt;/artifactId&gt;`\n    `&lt;version&gt;`2.15.2`&lt;/version&gt;`\n`&lt;/dependency&gt;`\n</code></pre></div>',r:{minutes:4.18,words:1255},t:"使用Jackson从JSON中移除元素",y:"a"}}],["/posts/baeldung/2024-07-03/2024-07-03-Scheduling%20Repeating%20Task%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-03-Scheduling Repeating Task in Kotlin.html-CBwADe7A.js"),__vite__mapDeps([513,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin","Coroutines"],g:["Kotlin","Scheduling","Coroutines"],e:`
<p>调度重复任务是编程中的常见需求。我们可能在数据更新、传感器监控和发送通知等应用程序中看到过它。</p>
<p>在本教程中，我们将讨论在Kotlin中执行任务的重复和在特定间隔中执行的方法。</p>
<h2>2. 使用 <em>Timer.schedule()</em></h2>
<p><em>Timer</em> 是 Java 中的一个类，在 <em>java.util</em> 包中，我们可以使用它来安排任务在一定时间后重复或仅执行一次：</p>
<div class="language-kotlin" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> timer <span class="token operator">=</span> <span class="token function">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div>`,r:{minutes:5.1,words:1530},t:"Kotlin中调度重复任务",y:"a"}}],["/posts/baeldung/2024-07-03/2024-07-03-Setting%20Default%20Values%20to%20Null%20Fields%20in%20Jackson%20Mapping.html",{loader:()=>a(()=>import("./2024-07-03-Setting Default Values to Null Fields in Jackson Mapping.html-DY1n5zrN.js"),__vite__mapDeps([514,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Jackson"],g:["JSON","POJO","Default Values"],e:`<hr>
<h1>Jackson 映射中为 Null 字段设置默认值</h1>
<p>在本教程中，我们将探讨使用 Jackson 解析 JSON 字符串时处理空值或缺失值的不同方法。我们将详细探讨三种提供不同控制级别的选项。</p>
<h2>2. 在类级别设置默认值</h2>
<p>我们将看到的第一个示例是如何在 POJO 中获取默认值，当它们完全缺失于传入的 JSON 字符串中。让我们创建一个对象，包含两个字段，一个是必需的，另一个我们将为其设置默认值：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">NonAnnotatedDefaultValue</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> required<span class="token punctuation">;</span>
    <span class="token class-name">String</span> optional <span class="token operator">=</span> <span class="token string">"defaultValue"</span><span class="token punctuation">;</span>
    <span class="token comment">// 标准 getter 和 setter</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:3.81,words:1144},t:"Jackson 映射中为 Null 字段设置默认值",y:"a"}}],["/posts/baeldung/2024-07-03/2024-07-03-Setup%20Http%20Patch%20Request%20With%20OpenFeign.html",{loader:()=>a(()=>import("./2024-07-03-Setup Http Patch Request With OpenFeign.html-Do8S9ulv.js"),__vite__mapDeps([515,1])),meta:{d:17199648e5,l:"2024年7月3日",c:["Spring Boot","OpenFeign"],g:["HTTP PATCH","REST API"],e:`<hr>
<h1>使用OpenFeign设置HTTP PATCH请求</h1>
<p>当通过REST API更新对象时，使用PATCH方法是一个好习惯。这允许我们使用我们希望更改的字段进行部分更新。当现有的资源需要完全更改时，我们也可以使用方法PUT。</p>
<p>在本教程中，我们将学习如何在OpenFeign中设置HTTP PATCH方法。我们还将看到在测试Feign客户端的PATCH方法时出现的一个意外错误。最后，我们将理解根本原因并解决问题。</p>
<h2>2. Spring Boot示例应用程序</h2>
<p>让我们想象我们需要构建一个简单的微服务，该服务调用下游服务进行部分更新。</p>`,r:{minutes:4.03,words:1208},t:"使用OpenFeign设置HTTP PATCH请求",y:"a"}}],["/posts/baeldung/2024-07-03/2024-07-03-Smart%20Batching%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-03-Smart Batching in Java.html-DbZ4QK5I.js"),__vite__mapDeps([516,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Batch Processing"],g:["Smart Batching","Micro Batching"],e:`
<h2>1. 概述</h2>
<p>在本教程中，我们将了解智能批处理模式。首先，我们将看看微批处理及其优缺点，然后我们将看到智能批处理如何缓解其问题。我们还将使用简单的Java数据结构查看这两种模式的一些示例。</p>
<h2>2. 微批处理</h2>
<h3>2.1. 什么是微批处理？</h3>
<p>微批处理是一种针对由小任务突发组成的工作负载的系统优化技术。尽管它们具有很小的计算开销，但它们伴随着某种操作，支持每秒少量的请求，例如，写入I/O设备。</p>
<p>当我们采用微批处理模式时，我们避免了单独处理传入的任务。相反，我们<strong>将它们聚合成一个批次，一旦足够大，就一起处理它们</strong>。</p>`,r:{minutes:6.02,words:1807},t:"Java中的智能批处理",y:"a"}}],["/posts/baeldung/2024-07-03/2024-07-03-Split%20a%20String%20Into%20Digit%20and%20Non%20Digit%20Substrings.html",{loader:()=>a(()=>import("./2024-07-03-Split a String Into Digit and Non Digit Substrings.html-Dv7HC6uA.js"),__vite__mapDeps([517,1])),meta:{d:16491168e5,l:"2022年4月5日",c:["Java","字符串处理"],g:["正则表达式","字符串分割"],e:`
<p>在Java编程中，处理字符串是一项基本任务，有时我们需要将一个字符串分割成多个子字符串以供进一步处理。无论是解析用户输入还是处理数据文件，了解如何有效地拆分字符串都是至关重要的。</p>
<p>在本教程中，我们将探索不同的方法和技术，将输入字符串分解为包含数字和非数字字符串元素的字符串数组或列表，保持原始顺序。</p>
<h2>2. 问题介绍</h2>
<p>像往常一样，我们通过例子来理解问题。</p>
<p>假设我们有两个输入字符串：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> <span class="token constant">INPUT1</span> <span class="token operator">=</span> <span class="token string">"01Michael Jackson23Michael Jordan42Michael Bolton999Michael Johnson000"</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> <span class="token constant">INPUT2</span> <span class="token operator">=</span> <span class="token string">"Michael Jackson01Michael Jordan23Michael Bolton42Michael Johnson999Great Michaels"</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:8.6,words:2581},t:"Java中将字符串分割为数字和非数字子字符串",y:"a"}}],["/posts/baeldung/2024-07-03/2024-07-03-Starting%20the%20Maven%20Build%20From%20the%20Point%20Where%20It%20Failed.html",{loader:()=>a(()=>import("./2024-07-03-Starting the Maven Build From the Point Where It Failed.html-BA9RUaZE.js"),__vite__mapDeps([518,1])),meta:{d:16872192e5,l:"2023年6月20日",c:["Maven","Build"],g:["Maven","Build","Resume"],e:'\n<p>在这个教程中，我们将学习如何在Maven构建失败后恢复它。我们将看到如何跳过已经成功构建的模块。因此，我们将直接跳到问题出现的地方。</p>\n<h2>示例设置</h2>\n<p>让我们构建一个多模块Maven项目。我们称父模块为_resume-from_，两个子模块为_lib_和_business_。为了演示，我们将_lib_项目留空。然而，<em>business_项目包含一个单独的_src/main/java/Main.java_文件，其中包含一个_Hello World</em>。现在让我们在_business_模块中添加_lib_的依赖：</p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`com.baeldung`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`lib`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`1.0-SNAPSHOT`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n</code></pre></div>',r:{minutes:3.88,words:1165},t:"从失败点开始恢复Maven构建",y:"a"}}],["/posts/baeldung/2024-07-03/2024-07-03-The%20Vector%20API%20in%20Java%2019.html",{loader:()=>a(()=>import("./2024-07-03-The Vector API in Java 19.html-CYkiNcap.js"),__vite__mapDeps([519,1])),meta:{d:17200512e5,l:"2024年7月4日",c:["Java","编程"],g:["Vector API","Java 19"],e:`
<h2>1. 引言</h2>
<p>Vector API 是 Java 生态系统中的一个孵化 API，用于在支持的 CPU 架构上用 Java 表达向量计算。它旨在提供优于等价标量替代方案的向量计算性能提升。</p>
<p>在 Java 19 中，作为 JEP 426 的一部分，提出了 Vector API 的第四轮孵化。</p>
<p>在本教程中，我们将探索 Vector API、其相关术语以及如何利用这个 API。</p>
<h2>2. 标量、向量和并行性</h2>
<p>在深入研究 Vector API 之前，理解 CPU 操作中的标量和向量的概念非常重要。</p>
<h3>2.1. 处理单元和 CPU</h3>`,r:{minutes:10.39,words:3117},t:"Java 19 中的 Vector API | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-03/2024-07-03-What%20Is%20the%20Maximum%20Depth%20of%20the%20Java%20Call%20Stack%20.html",{loader:()=>a(()=>import("./2024-07-03-What Is the Maximum Depth of the Java Call Stack .html-Cn8cTTE2.js"),__vite__mapDeps([520,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","JVM"],g:["Call Stack","Stack Overflow"],e:`
<p>调用栈是Java中管理方法执行和变量作用域的关键数据结构。栈的深度，或者说它可以容纳的活动方法调用的数量，是处理递归函数或深层调用链时的一个重要考虑因素。</p>
<p>在本教程中，我们将探讨确定Java调用栈最大深度的技术。</p>
<h2>Java调用栈的理解</h2>
<p>Java调用栈遵循后进先出（LIFO）结构。当一个方法被调用时，一个新的栈帧会被推到栈顶，包含参数、局部变量和返回地址等信息。一旦方法完成执行，它的栈就会被弹出。</p>
<p>每个线程分配的总栈大小决定了其调用栈可以容纳的数据量。默认的栈大小因JVM实现而异，但对于标准JVM来说，通常大约是1MB。</p>`,r:{minutes:2.34,words:703},t:"Java调用栈的最大深度是多少？",y:"a"}}],["/posts/baeldung/2024-07-04/2024-07-04-%20JsonMerge%20Annotation%20in%20Jackson.html",{loader:()=>a(()=>import("./2024-07-04- JsonMerge Annotation in Jackson.html-DM-VVdsu.js"),__vite__mapDeps([521,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Jackson","Java"],g:["Jackson","JSON","Java"],e:`
<p>在本教程中，我们将探讨Jackson Java库中的@JsonMerge注解。Jackson以其在Java应用程序中处理JSON的能力而闻名。这个注解允许我们将新数据合并到嵌套的POJO（普通旧Java对象）或Map中的对象。我们将先看看没有使用注解时的现有功能，然后看看使用它在我们的代码中会产生什么不同。</p>
<h2>@JsonMerge的作用</h2>
<p>ObjectMapper是Jackson最常用的特性之一，它允许我们将JSON映射到我们的Java对象，并进行反向操作。ObjectMapper的一个能力是读取一个对象，并用JSON字符串中的新数据更新它，假设JSON结构正确。在引入@JsonMerge之前，更新能力的局限性在于它会覆盖POJO和Map。有了这个注解，嵌套POJO和Map中的属性在更新时会被合并。</p>`,r:{minutes:4.66,words:1397},t:"Jackson中@JsonMerge注解的使用",y:"a"}}],["/posts/baeldung/2024-07-04/2024-07-04-Add%20a%20Checked%20Attribute%20to%20Input%20Conditionally%20in%20Thymeleaf.html",{loader:()=>a(()=>import("./2024-07-04-Add a Checked Attribute to Input Conditionally in Thymeleaf.html-D1mIM_ja.js"),__vite__mapDeps([522,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Web Development"],g:["Thymeleaf","Spring Boot","HTML"],e:`
<p>Thymeleaf是一个用于构建Web环境的现代Java模板引擎。它非常适合现代HTML Web开发，并且与Spring Boot完美集成。</p>
<p>在本教程中，我们将学习如何在Thymeleaf中条件性地向输入添加选中（<em>checked</em>）属性。</p>
<h3>2. 使用_th:checked_属性</h3>
<p>Thymeleaf标准方言允许我们向HTML文档中的任何元素条件性地添加固定值的布属性。这些属性之一是_th:checked_，它等同于HTML中的_selected_属性。</p>
<p><em>th:checked_属性用于HTML文档中的任何类型为_checkbox_的输入。它还接受任何类型为_Boolean_的表达式，该表达式被评估为_true_或_false</em>。</p>`,r:{minutes:4.54,words:1363},t:"在Thymeleaf中条件性地添加输入的选中属性",y:"a"}}],["/posts/baeldung/2024-07-04/2024-07-04-Asserting%20Equality%20on%20Two%20Classes%20Without%20an%20equals%20%20%20Method.html",{loader:()=>a(()=>import("./2024-07-04-Asserting Equality on Two Classes Without an equals   Method.html-Czn8Q59-.js"),__vite__mapDeps([523,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Testing"],g:["equals","assert","comparison"],e:`
<h2>1. 概述</h2>
<p>有时我们无法重写一个类中的_equals()_方法。尽管如此，我们仍然希望比较一个对象与另一个对象以检查它们是否相同。</p>
<p>在本教程中，我们将学习几种在不使用_equals()_方法的情况下测试两个对象相等性的方法。</p>
<h2>2. 示例类</h2>
<p>在我们深入之前，让我们创建我们将在示例中使用的类。我们将使用_Person_和_Address_类：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Address</span> address<span class="token punctuation">;</span>

    <span class="token comment">// getters and setters</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> city<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> street<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> country<span class="token punctuation">;</span>

    <span class="token comment">// getters and setters</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:4.87,words:1461},t:"在没有equals()方法的情况下断言两个类的相等性",y:"a"}}],["/posts/baeldung/2024-07-04/2024-07-04-Assignment%20in%20While%20Expression%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-04-Assignment in While Expression in Kotlin.html-Cjz3DnXP.js"),__vite__mapDeps([524,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin"],g:["Kotlin","Programming"],e:`
<h2>1. 引言</h2>
<p>在Kotlin中，就像在许多其他编程语言中一样，循环是允许代码块重复执行的基本控制结构。while循环特别适用于在某个条件保持为真的情况下执行代码。然而，Kotlin在while循环条件内的变量赋值方面与某些语言不同。与Java等语言不同，在Java中while循环条件内的赋值是常见做法，Kotlin限制了这种行为。</p>
<p>本教程探讨了这一设计选择背后的原理，讨论了它对Kotlin开发人员的影响，并展示了以Kotlin友好的方式实现类似功能的替代方法。</p>
<h2>2. 理解限制</h2>
<p>Kotlin对while循环表达式中赋值的限制是基于语言对清晰度和安全性的强调。Kotlin旨在减少常见编程错误的可能性，例如意外使用赋值(=)而不是等值检查(==)。这种错误可能导致难以追踪和修复的隐蔽错误。</p>`,r:{minutes:3.82,words:1147},t:"Kotlin中while表达式中的变量赋值 | Baeldung关于Kotlin",y:"a"}}],["/posts/baeldung/2024-07-04/2024-07-04-Check%20if%20a%20String%20Is%20All%20Uppercase%20or%20Lowercase%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-04-Check if a String Is All Uppercase or Lowercase in Java.html-BVUB8iO4.js"),__vite__mapDeps([525,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","String Manipulation"],g:["Java","String","Uppercase","Lowercase"],e:`
<p>当在Java中处理字符串时，确定一个字符串是否完全由大写或小写字符组成通常是必要的。</p>
<p>在本教程中，我们将探索执行此检查的不同方法。</p>
<h2>2. 问题介绍</h2>
<p>首先，让我们准备三个输入字符串：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">UPPER_INPUT</span> <span class="token operator">=</span> <span class="token string">"1: COOL!"</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">LOWER_INPUT</span> <span class="token operator">=</span> <span class="token string">"2: cool!"</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">MIXED_INPUT</span> <span class="token operator">=</span> <span class="token string">"3: Cool!"</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:3.9,words:1170},t:"在Java中检查字符串是否全部为大写或小写",y:"a"}}],["/posts/baeldung/2024-07-04/2024-07-04-Cloning%20an%20Object%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-04-Cloning an Object in Kotlin.html-CFZFSNKh.js"),__vite__mapDeps([526,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin"],g:["克隆","对象","深拷贝","浅拷贝"],e:`
<h2>1. 概述</h2>
<p>通常来说，克隆是创建一个对象的相同副本的过程。而在编程环境中，克隆意味着创建一个新的对象，它具有与原始对象相同的值和属性。</p>
<p><strong>在本文中，我们将讨论在Kotlin中克隆对象可以使用的方法。</strong></p>
<h2>2. 浅拷贝与深拷贝</h2>
<p>在讨论如何克隆对象之前，我们首先应该正确理解浅拷贝和深拷贝的概念。这在我们处理复杂数据结构，例如嵌套对象或集合时尤其重要。</p>
<p><strong>浅拷贝意味着我们只复制现有对象的引用，而不是实际的对象或值。</strong></p>
<p>如果我们有一个具有复杂模式的对象，例如，在多个级别上都有嵌套对象，并且我们只复制顶层的字段，那也是一种浅拷贝。</p>`,r:{minutes:5.79,words:1736},t:"Kotlin中克隆对象",y:"a"}}],["/posts/baeldung/2024-07-04/2024-07-04-Cognitive%20Complexity%20and%20Its%20Effect%20on%20the%20Code.html",{loader:()=>a(()=>import("./2024-07-04-Cognitive Complexity and Its Effect on the Code.html-htu1u-zw.js"),__vite__mapDeps([527,1])),meta:{d:16855776e5,l:"2023年6月1日",c:["Software Engineering"],g:["Code Quality","Refactoring"],e:`
<h2>1. 概述</h2>
<p>在本教程中，我们将学习什么是认知复杂度以及如何计算这一度量。我们将逐步了解增加函数认知复杂度的不同模式和结构。包括循环、条件语句、跳转标签、递归、嵌套等元素。接下来，我们将讨论认知复杂度对代码可维护性的有害影响。最后，我们将探索一些重构技术，这些技术可以帮助我们减少这些负面影响。</p>
<h2>2. 圈复杂度与认知复杂度</h2>
<p>有一段时间，圈复杂度是衡量代码复杂度的唯一方式。因此，出现了一个新的度量标准，它允许我们更准确地衡量代码片段的复杂度。虽然它提供了一个不错的整体评估，但它确实忽略了一些使代码更难理解的重要方面。</p>
<h3>2.1. 圈复杂度</h3>`,r:{minutes:7.98,words:2394},t:"认知复杂度及其对代码的影响",y:"a"}}],["/posts/baeldung/2024-07-04/2024-07-04-Combining%20Two%20or%20More%20Byte%20Arrays.html",{loader:()=>a(()=>import("./2024-07-04-Combining Two or More Byte Arrays.html-DYN11DIi.js"),__vite__mapDeps([528,1])),meta:{d:17200512e5,l:"2024年7月4日",c:["Java","编程"],g:["字节数组","合并"],e:`
<h2>1. 引言</h2>
<p>作为Java开发者，我们可能会遇到需要合并两个或更多字节数组的情况。在本教程中，<strong>我们将探索几种合并两个或更多字节数组的方法</strong>。</p>
<p>我们将从Java的基本类和方法开始。然后，我们将查看一些外部库，如Guava和Apache Commons Collections，用于合并字节数组。</p>
<h2>2. 使用纯Java</h2>
<p>在以下所有示例中，我们将考虑以下两个字节数组：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> first <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">69</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">118</span><span class="token punctuation">,</span> <span class="token number">114</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> second <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">114</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token number">117</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:3.59,words:1076},t:"Java中合并两个或更多字节数组",y:"a"}}],["/posts/baeldung/2024-07-04/2024-07-04-Converting%20Map%20String%20%20Object%20%20to%20Map%20String%20%20String%20%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-04-Converting Map String  Object  to Map String  String  in Java.html-BwEcDXqe.js"),__vite__mapDeps([529,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Collections"],g:["Java","Map","Conversion"],e:'\n<p>我们经常在Java中使用诸如Map这样的集合来存储键值对。</p>\n<p>在这个快速教程中，我们将探讨如何将<code>Map`````````&lt;String, Object&gt;``````````转换为</code>Map``````````````````&lt;String, String&gt;```````````````````。</p>\n<h2>2. 问题介绍</h2>\n<p>首先，让我们创建一个`Map`````````&lt;String, Object&gt;``````````：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Map</span>`````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>````````` <span class="token constant">MAP1</span> <span class="token operator">=</span> <span class="token class-name">Maps</span><span class="token punctuation">.</span><span class="token function">newHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">static</span> <span class="token punctuation">{</span>\n    <span class="token constant">MAP1</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"K01"</span><span class="token punctuation">,</span> <span class="token string">"GNU Linux"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token constant">MAP1</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"K02"</span><span class="token punctuation">,</span> <span class="token string">"Mac OS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token constant">MAP1</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"K03"</span><span class="token punctuation">,</span> <span class="token string">"MS Windows"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:3.54,words:1063},t:"Java中将Map<String, Object>转换为Map<String, String>",y:"a"}}],["/posts/baeldung/2024-07-04/2024-07-04-Converting%20Object%20To%20Map%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-04-Converting Object To Map in Java.html-DK425FFV.js"),__vite__mapDeps([530,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","编程"],g:["Java","Map","Jackson","Gson"],e:`
<p>将对象转换为Map在Java中非常有用，尤其是当我们需要将对象的属性转换为键值对表示时。这在数据操作、序列化或需要将对象数据传递到程序的其他部分时特别有用。</p>
<p>在本教程中，我们将探讨使用反射、Jackson和Gson API将对象转换为Map的三种不同方法。</p>
<h2>2. 使用反射</h2>
<p>反射是Java中的一个强大特性，它允许我们在运行时检查和操作类、接口、字段、方法和其他组件。此外，它提供了访问类结构信息的能力，动态调用方法，甚至修改私有字段。</p>
<p>下面是一个名为Employee的类，表示一个员工，具有私有的名称和薪水，并提供getter和setter来访问和修改这些属性：</p>`,r:{minutes:4.68,words:1405},t:"Java中将对象转换为Map的三种方法",y:"a"}}],["/posts/baeldung/2024-07-04/2024-07-04-Difference%20Between%20findBy%20and%20findOneBy%20in%20Spring%20Data%20JPA.html",{loader:()=>a(()=>import("./2024-07-04-Difference Between findBy and findOneBy in Spring Data JPA.html-CjBDw5xN.js"),__vite__mapDeps([531,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Data JPA","findBy vs findOneBy"],g:["Spring Data","JPA","findBy","findOneBy"],e:`<hr>
<h1>Spring Data JPA 中 findBy 和 findOneBy 的区别</h1>
<p>Spring Data 仓库提供了大量简化数据访问逻辑实现的方法。然而，选择适当的方法并不总是像我们期望的那样容易。</p>
<p>一个例子是带有 <em>findBy</em> 和 <em>findOneBy</em> 前缀的方法。尽管它们的名字看起来基于相同的事情，但它们有点不同。</p>
<p>Spring Data JPA 以其派生查询方法功能而广受赞誉。这些方法提供了一种从方法名称派生特定查询的方式。例如，如果我们想通过 <em>foo</em> 属性检索数据，我们可以简单地写 <em>findByFoo()</em>。</p>`,r:{minutes:4.87,words:1462},t:"Spring Data JPA 中 findBy 和 findOneBy 的区别",y:"a"}}],["/posts/baeldung/2024-07-04/2024-07-04-Difference%20Between%20get%20%20%20and%20navigate%20%20%20in%20Selenium%20WebDriver.html",{loader:()=>a(()=>import("./2024-07-04-Difference Between get   and navigate   in Selenium WebDriver.html-xxciotT5.js"),__vite__mapDeps([532,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Selenium WebDriver","Web Testing"],g:["get()","navigate()"],e:`<hr>
<h1>Selenium WebDriver 中 get() 和 navigate() 方法的区别</h1>
<h2>1. 引言</h2>
<p>Selenium WebDriver 是一个 API，允许我们测试网页。在这个简短的教程中，我们将探讨 WebDriver 中的 <em>get()</em> 和 <em>navigate()</em> 方法的区别。</p>
<h2>2. 关于 WebDriver</h2>
<p><strong>Selenium WebDriver API 包含与不同网络浏览器交互的高级方法</strong>。使用此 API，我们可以调用不同的操作，例如加载网页、点击链接、搜索 DOM 以查找特定元素等。</p>`,r:{minutes:2.45,words:734},t:"Selenium WebDriver 中 get() 和 navigate() 方法的区别",y:"a"}}],["/posts/baeldung/2024-07-04/2024-07-04-Difference%20Between%20single%20%20%20and%20first%20%20%20in%20Kotlin%20Flows.html",{loader:()=>a(()=>import("./2024-07-04-Difference Between single   and first   in Kotlin Flows.html-DzzFbq5y.js"),__vite__mapDeps([533,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin"],g:["Kotlin Flows","single() vs first()"],e:`
<p>Kotlin <em>Flows</em> 已成为现代异步编程不可或缺的一部分。它们提供了一种无缝且简洁的方式来处理异步数据流。在使用 Flows 时，两个常用的终端操作符是 <em>single()</em> 和 <em>first()</em>。尽管这两个函数乍一看可能可以互换使用，但理解它们的细微差别对于编写高效且无错误的代码至关重要。</p>
<p>在本教程中，我们将深入探讨 Kotlin <em>Flows</em> 中 <em>single()</em> 和 <em>first()</em> 函数的区别。</p>
<h3>2. 理解 Kotlin Flows</h3>
<p>在深入讨论 <em>single()</em> 和 <em>first()</em> 之前，让我们简要回顾一下 Kotlin <em>Flows</em>。一个 <em>Flow</em> 是一个异步序列，它随时间发出多个值。它们以非阻塞和高效的方式处理数据流，使它们成为响应式编程的强大工具。</p>`,r:{minutes:3.6,words:1079},t:"Kotlin 中 Flow 的 single() 与 first() 的区别",y:"a"}}],["/posts/baeldung/2024-07-04/2024-07-04-Fix%20%20Command%20Line%20is%20Too%20Long%20%20in%20IntelliJ.html",{loader:()=>a(()=>import("./2024-07-04-Fix  Command Line is Too Long  in IntelliJ.html-DlqlL4c6.js"),__vite__mapDeps([534,1])),meta:{d:16828992e5,l:"2023年5月1日",c:["IntelliJ IDEA","Java"],g:["Spring Boot","Command Line"],e:`
<p>在本教程中，我们将看到如何在IntelliJ IDEA中运行Spring Boot应用程序的Java主类时，解决“命令行太长”的错误。</p>
<h2>2. 根本原因</h2>
<p>当你启动程序时，可能会遇到“命令行太长”的错误。当类路径太长或包含许多虚拟机参数时，就会发生此错误。大多数操作系统对命令行的字符数有限制。</p>
<p>在下一节中，我们将看到解决此错误的可能方法。</p>
<h2>3. 在IntelliJ中设置默认的命令行缩短</h2>
<p>要解决这个问题，我们需要将“缩短命令行”选项更改为“类路径文件”，而不是默认设置的“无 - java [options] className [args]”。</p>`,r:{minutes:1.91,words:573},t:"解决IntelliJ IDEA中“命令行太长”的问题",y:"a"}}],["/posts/baeldung/2024-07-04/2024-07-04-Generating%20WSDL%20Stubs%20With%20Gradle.html",{loader:()=>a(()=>import("./2024-07-04-Generating WSDL Stubs With Gradle.html-D-RejGpO.js"),__vite__mapDeps([535,1])),meta:{d:16855776e5,l:"2023年6月1日",c:["Java","Web Services"],g:["WSDL","Gradle","Web Services"],e:`
<h2>1. 概述</h2>
<p>简单来说，<strong>Web服务描述语言（WSDL）是一种基于XML的语言，用于描述Web服务提供的功能</strong>。WSDL存根是从WSDL文件生成的代理类，使得与Web服务的交互更加容易，无需手动创建和管理SOAP消息。</p>
<p>在本教程中，我们将学习如何使用Gradle生成WSDL存根。同时，我们将看到一个示例WSDL文件并从中生成存根。</p>
<h2>2. 示例设置</h2>
<p>要开始生成，让我们创建一个新的Gradle项目，该项目从WSDL文件生成WSDL存根。接下来，我们将为WSDL文件创建目录结构：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> src/main/resources/wsdl
</code></pre></div>`,r:{minutes:3.54,words:1061},t:"使用Gradle生成WSDL存根",y:"a"}}],["/posts/baeldung/2024-07-04/2024-07-04-Get%20Unique%20Values%20From%20an%20ArrayList%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-04-Get Unique Values From an ArrayList in Java.html-BSjUk-6O.js"),__vite__mapDeps([536,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Collections"],g:["ArrayList","Set","Stream API"],e:`
<p>我们了解到，在Java中，ArrayList可以包含重复的值。
在本快速教程中，我们将探讨几种从Java ArrayList中获取唯一值的技术。</p>
<h2>2. 问题介绍</h2>
<p>有时，我们需要从ArrayList中提取唯一值——例如，为了增强数据分析、提高效率或简化进一步处理。
假设我们有一个列表，携带一些操作系统名称：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>\`\`\` <span class="token constant">MY_LIST</span> <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>
  <span class="token string">"Microsoft Windows"</span><span class="token punctuation">,</span>
  <span class="token string">"Mac OS"</span><span class="token punctuation">,</span>
  <span class="token string">"GNU Linux"</span><span class="token punctuation">,</span>
  <span class="token string">"Free BSD"</span><span class="token punctuation">,</span>
  <span class="token string">"GNU Linux"</span><span class="token punctuation">,</span>
  <span class="token string">"Mac OS"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:2.65,words:795},t:"从Java ArrayList中获取唯一值的方法",y:"a"}}],["/posts/baeldung/2024-07-04/2024-07-04-Gray%20Box%20Testing%20Using%20the%20OAT%20Technique.html",{loader:()=>a(()=>import("./2024-07-04-Gray Box Testing Using the OAT Technique.html-DAybozYO.js"),__vite__mapDeps([537,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Software Testing","Java"],g:["Gray Box Testing","OAT","Test Coverage"],e:`
<h2>1. 概述</h2>
<p>灰色盒子测试帮助我们在不测试每一种可能的场景的情况下建立充分的测试覆盖率。</p>
<p>在本教程中，我们将检查这种方法以及如何使用正交数组测试（OAT）技术来实现它。</p>
<p>最后，我们将确定使用灰色盒子测试的优点和缺点。</p>
<h2>2. 什么是灰色盒子测试？</h2>
<p>首先，我们比较白色与黑色盒子测试方法，然后理解灰色盒子测试。</p>
<p>白色盒子测试是指我们完全了解算法的测试部分。因此，我们可以测试该算法的所有路径。并且，由于这个原因，白色盒子测试可能会产生大量的测试场景。</p>
<p>黑色盒子测试意味着测试应用程序的外部视角。换句话说，我们对实现的算法一无所知，测试其所有路径更加困难。因此，我们专注于验证有限数量的测试场景。</p>`,r:{minutes:6.33,words:1900},t:"灰色盒子测试使用OAT技术 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-04/2024-07-04-Hex%20Representation%20of%20a%20SHA%201%20Digest%20of%20a%20String%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-04-Hex Representation of a SHA 1 Digest of a String in Java.html-CQxklHs0.js"),__vite__mapDeps([538,1])),meta:{d:1720061287e3,e:`<p>由于提供的网页内容没有包含具体的类别(category)、标签(tag)、标题(head)、日期(date)等信息，我无法生成包含这些详细信息的输出。不过，我可以翻译标题和链接。</p>
<p>标题翻译为："Java字符串SHA-1十六进制验证"</p>
<p>链接翻译为："https://www.baeldung.com/java-string-sha1-hexadecimal"</p>
<p>请注意，由于网页内容未提供，无法生成完整的格式输出。如果需要进一步的帮助，请提供完整的网页内容或详细信息。</p>
`,r:{minutes:.45,words:134},t:"",y:"a"}}],["/posts/baeldung/2024-07-04/2024-07-04-How%20Many%20Days%20Are%20There%20in%20a%20Particular%20Month%20of%20a%20Given%20Year%20.html",{loader:()=>a(()=>import("./2024-07-04-How Many Days Are There in a Particular Month of a Given Year .html-D-7H67Uu.js"),__vite__mapDeps([539,1])),meta:{d:17200512e5,l:"2024年7月4日",c:["Java","编程"],g:["Java 8","日期时间API","Calendar"],e:`
<p>在本教程中，我们将学习如何在Java编程中查找给定年份中特定月份的天数。例如，对于输入表示2024年3月的月份，我们的代码将返回_31_。</p>
<h2>1. 概述</h2>
<h2>2. 使用 <em>YearMonth</em></h2>
<p>Java 8引入了全新的日期/时间API。特别是，它增加了_YearMonth_，一个代表年份和月份组合的不可变对象。</p>
<p>可以通过静态工厂方法_of()_轻松创建_YearMonth_的实例。然后，我们可以调用它的_lengthOfMonth()_方法，该方法返回月份的长度，并考虑年份：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token function">getDaysInMonthWithYearOfMonth</span><span class="token punctuation">(</span><span class="token keyword">int</span> month<span class="token punctuation">,</span> <span class="token keyword">int</span> year<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">YearMonth</span> yearMonth <span class="token operator">=</span> <span class="token class-name">YearMonth</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> yearMonth<span class="token punctuation">.</span><span class="token function">lengthOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.31,words:692},t:"如何在给定年份的特定月份中查找天数 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-04/2024-07-04-How%20to%20Display%20a%20Full%20HTTP%20Response%20Body%20With%20Gatling.html",{loader:()=>a(()=>import("./2024-07-04-How to Display a Full HTTP Response Body With Gatling.html-Biaz4w7d.js"),__vite__mapDeps([540,1])),meta:{d:1687392e6,l:"2023年6月22日",c:["Java","Gatling"],g:["HTTP响应体","负载测试"],e:`<hr>
<h1>如何在Gatling中显示完整的HTTP响应体</h1>
<p>Gatling是一个用Scala编写的流行负载测试工具，可以帮助我们在本地和云机器上创建高性能、压力和负载测试。此外，它广泛用于测试HTTP服务器。默认情况下，Gatling专注于捕获和分析性能指标，如响应时间、错误率等，而不显示完整的HTTP响应体。</p>
<p>在本教程中，我们将学习如何在Gatling中显示完整的HTTP响应体。这对于在负载测试期间理解和调试服务器响应非常有用。</p>
<h2>2. 项目设置</h2>
<p>在本教程中，我们将使用Gatling Maven插件来运行Gatling脚本。为此，我们需要将插件添加到_pom.xml_：</p>`,r:{minutes:3.61,words:1084},t:"如何在Gatling中显示完整的HTTP响应体",y:"a"}}],["/posts/baeldung/2024-07-04/2024-07-04-Is%20a%20Key%20Required%20as%20Part%20of%20Sending%20Messages%20to%20Kafka%20.html",{loader:()=>a(()=>import("./2024-07-04-Is a Key Required as Part of Sending Messages to Kafka .html-BOZCNcKl.js"),__vite__mapDeps([541,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Kafka"],g:["Kafka","Java"],e:`
<p>Apache Kafka是一个开源的、分布式的流处理系统，具有容错性并且提供高吞吐量。Kafka基本上是一个实现了发布-订阅模型的消息系统。Kafka的消息、存储和流处理能力使我们能够大规模地存储和分析实时数据流。</p>
<p>在本教程中，我们首先将探讨Kafka消息中键的重要性。然后，我们将学习如何将带键的消息发布到Kafka主题。</p>
<h2>2. Kafka消息中键的重要性</h2>
<p>我们知道，Kafka有效地按照我们生成记录的顺序存储记录流。</p>
<p>当我们向Kafka主题发布消息时，它以轮询的方式在可用分区中分配。因此，在Kafka主题内，消息的顺序在分区内是保证的，但在分区之间则不是。</p>`,r:{minutes:4.44,words:1332},t:"Apache Kafka中发送消息是否需要键？",y:"a"}}],["/posts/baeldung/2024-07-04/2024-07-04-Java%20IllegalStateException%20%20%20getInputStream%20%20%20has%20already%20been%20called%20for%20this%20request%20.html",{loader:()=>a(()=>import("./2024-07-04-Java IllegalStateException   getInputStream   has already been called for this request .html-cAFp-Ycw.js"),__vite__mapDeps([542,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Servlet"],g:["IllegalStateException","ServletRequest","getReader","getInputStream"],e:`
<ol>
<li>引言</li>
</ol>
<p>在Java Web应用中，有时我们在调用ServletRequest接口的getReader()方法时可能会遇到IllegalStateException异常，错误信息为“getInputStream()已经为这个请求调用过了”。</p>
<p>本教程将学习为什么会发生这种情况以及如何解决。</p>
<ol start="2">
<li>问题及原因</li>
</ol>
<p>Java Servlet规范为构建Java Web应用提供定义，它定义了ServletRequest/HttpServletRequest接口，其中包含getReader()和getInputStream()方法用于从HTTP请求中读取数据。</p>`,r:{minutes:3.52,words:1057},t:"Java Web应用中ServletRequest的IllegalStateException异常解析与解决方法",y:"a"}}],["/posts/baeldung/2024-07-04/2024-07-04-Java%20Serialization%20%20readObject%20%20%20vs.%20readResolve%20%20.html",{loader:()=>a(()=>import("./2024-07-04-Java Serialization  readObject   vs. readResolve  .html-BFQVWTek.js"),__vite__mapDeps([543,1])),meta:{d:17201376e5,l:"2024年7月5日",c:["Java","序列化"],g:["readObject","readResolve"],e:`
<p>在本教程中，我们将探讨如何在Java反序列化API中使用_readObject()_和_readResolve()_方法。此外，我们将检查这两种方法之间的区别。</p>
<p>Java序列化涵盖了序列化和反序列化如何更深入地工作。在本文中，我们将重点关注_readResolve()_和_readObject()_方法，这些方法在使用反序列化时常引发问题。</p>
<h3>3. 使用 <em>readObject()</em></h3>
<p>在序列化过程中，Java对象被转换为字节流以保存在文件中或通过互联网传输。在反序列化期间，使用_ObjectInputStream_的_readObject()_方法将序列化字节流转换回原始对象，该方法在内部调用_defaultReadObject()_进行默认反序列化。</p>`,r:{minutes:10.63,words:3189},t:"Java 序列化：readObject() 与 readResolve() | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-04/2024-07-04-Listing%20All%20AWS%20S3%20Objects%20in%20a%20Bucket%20Using%20Java.html",{loader:()=>a(()=>import("./2024-07-04-Listing All AWS S3 Objects in a Bucket Using Java.html-DRnKJnhL.js"),__vite__mapDeps([544,1])),meta:{d:16855776e5,l:"2023年6月1日",c:["AWS","Java"],g:["S3","Java SDK"],e:`
<h2>1. 概述</h2>
<p>本文将重点介绍如何使用Java列出S3存储桶中的所有对象。我们将讨论使用AWS SDK for Java V2与S3交互的方法，并查看不同用例的示例。</p>
<p>我们将重点使用Java V2版本的AWS SDK，它以其比前一个版本有多项改进而著称，例如增强的性能、非阻塞I/O和用户友好的API设计。</p>
<h2>2. 先决条件</h2>
<p>要列出S3存储桶中的所有对象，我们可以利用AWS SDK for Java提供的_S3Client_类。</p>
<p>首先，让我们创建一个新的Java项目，并将以下Maven依赖项添加到我们的_pom.xml_文件中：</p>`,r:{minutes:4.43,words:1328},t:"在Java中使用AWS S3列出存储桶中的所有对象",y:"a"}}],["/posts/baeldung/2024-07-04/2024-07-04-Lossy%20and%20Lossless%20Image%20Compression%20Using%20Java.html",{loader:()=>a(()=>import("./2024-07-04-Lossy and Lossless Image Compression Using Java.html-BxrCxCVq.js"),__vite__mapDeps([545,1])),meta:{d:16861824e5,l:"2023年6月8日",c:["Java","图像压缩"],g:["图像压缩","Java","教程"],e:`
<h2>1. 引言</h2>
<p>在本教程中，我们将探讨如何使用Java来压缩图像。我们将从使用Java内置的图像压缩库开始，然后覆盖到Apache Commons Imaging替代库。</p>
<p>让我们首先了解一些有关图像压缩的知识。</p>
<h2>2. 图像压缩是什么？</h2>
<p>图像压缩允许我们在不显著损害视觉质量的情况下减小图像文件的大小。有两种类型的压缩。首先，我们使用<strong>有损压缩</strong>来接受降低的图像质量，同时实现更小的文件大小。例如，我们有JPEG和WebP格式用于有损压缩。其次，我们使用<strong>无损压缩</strong>来在压缩过程中保留数据和信息。例如，在无损压缩期间使用PNG和GIF格式。</p>`,r:{minutes:3.23,words:969},t:"Java中使用有损和无损压缩技术压缩图像",y:"a"}}],["/posts/baeldung/2024-07-04/2024-07-04-Matching%20Null%20With%20Mockito.html",{loader:()=>a(()=>import("./2024-07-04-Matching Null With Mockito.html-rC7zOn_w.js"),__vite__mapDeps([546,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Mockito","Testing"],g:["Mockito","Testing"],e:`
<p>在这个简短的教程中，我们将使用Mockito来检查是否将空值作为参数传递给方法。我们将看到如何直接匹配空值以及如何使用ArgumentMatchers进行匹配。</p>
<h2>2. 示例设置</h2>
<p>首先，我们创建一个简单的Helper类，它有一个单独的concat()方法，返回两个字符串的连接：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Helper</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> <span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">String</span> a<span class="token punctuation">,</span> <span class="token class-name">String</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:3.34,words:1003},t:"使用Mockito匹配空值",y:"a"}}],["/posts/baeldung/2024-07-04/2024-07-04-Mock%20a%20URL%20Connection%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-04-Mock a URL Connection in Java.html-BbY3UtA9.js"),__vite__mapDeps([547,1])),meta:{d:16821216e5,l:"2023年4月22日",c:["Java","Testing"],g:["URLConnection","Mockito","JMockit"],e:`
<h2>1. 概述</h2>
<p><code>UrlConnection</code>是一个抽象类，提供了与网络上的资源进行交互的接口，例如从URL检索数据以及向它们发送数据。</p>
<p><strong>在编写单元测试时，我们通常希望模拟网络连接和响应，而不需要实际进行网络请求。</strong></p>
<p>在本教程中，我们将探讨几种在Java中模拟URL连接的方法。</p>
<h2>2. 一个简单的URL获取器类</h2>
<p>在整个教程中，我们的测试重点将是一个简单的URL获取器类：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UrlFetcher</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">URL</span> url<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">UrlFetcher</span><span class="token punctuation">(</span><span class="token class-name">URL</span> url<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> url<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isUrlAvailable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">getResponseCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">HttpURLConnection</span><span class="token punctuation">.</span><span class="token constant">HTTP_OK</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getResponseCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">HttpURLConnection</span> con <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpURLConnection</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> con<span class="token punctuation">.</span><span class="token function">getResponseCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:5.5,words:1650},t:"Java中模拟URL连接",y:"a"}}],["/posts/baeldung/2024-07-04/2024-07-04-Mocking%20Private%20Fields%20With%20Mockito.html",{loader:()=>a(()=>import("./2024-07-04-Mocking Private Fields With Mockito.html-Du3tBgyg.js"),__vite__mapDeps([548,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Mockito"],g:["私有字段","反射","JUnit"],e:`<hr>
<h1>Mockito中模拟私有字段</h1>
<p>在本教程中，我们将学习如何在Mockito中模拟私有字段。Mockito是一个流行的模拟框架，通常与JUnit一起在Java中用于创建模拟对象。它本身不支持模拟私有字段；然而，我们可以使用不同的方法来模拟Mockito中的私有字段。
让我们来检查其中的一些方法。</p>
<h2>2. 项目设置</h2>
<p>我们将通过创建示例中使用的类来开始。我们将创建一个带有私有字段的类和一个测试类来测试它。</p>
<h3>2.1. 源代码类</h3>
<p>首先，我们将创建一个带有私有字段的简单类：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MockService</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"John Doe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:4,words:1199},t:"Mockito中模拟私有字段",y:"a"}}],["/posts/baeldung/2024-07-04/2024-07-04-Need%20for%20Default%20Constructor%20in%20JPA%20Entities.html",{loader:()=>a(()=>import("./2024-07-04-Need for Default Constructor in JPA Entities.html-CT_ZOqA7.js"),__vite__mapDeps([549,1])),meta:{d:16855776e5,l:"2023年6月1日",c:["JPA","Entity Classes"],g:["JPA Specification","No-Argument Constructor"],e:`<hr>
<h1>JPA实体类中默认无参构造函数的必要性</h1>
<p>在这篇快速教程中，我们将学习JPA对实体类中默认无参构造函数的要求。</p>
<p>为了理解无参构造函数的重要性，我们将使用一个简单的_Employee_实体类示例。我们将观察缺少默认构造函数如何导致编译时错误。我们将深入探讨JPA使用反射来实例化实体。此外，我们还将简要介绍这些构造函数可能需要的其他原因。</p>
<h2>2. 示例设置</h2>
<p>让我们设置一个名为_Employee_的实体类示例，该类包含名称、部门和自动生成的ID。让我们定义一个接受所有三个字段的构造函数：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>@Entity
public class Employee {

    @Id
    private Long id;
    private String name;
    private int age;

    public Employee(Long id, String name, int age) {
        this.id = id;
        this.name = name;
        this.age = age;
    }

    // getters and setters
}
</code></pre></div>`,r:{minutes:4.36,words:1308},t:"JPA实体类中默认无参构造函数的必要性",y:"a"}}],["/posts/baeldung/2024-07-04/2024-07-04-Read%20Data%20From%20the%20Beginning%20Using%20Kafka%20Consumer%20API.html",{loader:()=>a(()=>import("./2024-07-04-Read Data From the Beginning Using Kafka Consumer API.html-DNjRcfMw.js"),__vite__mapDeps([550,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Kafka"],g:["Kafka Consumer API","Real-time data processing"],e:`
<p>Apache Kafka是一个开源的分布式事件流处理系统。它基本上是一个事件流平台，可以发布、订阅、存储和处理记录流。</p>
<p>Kafka为实时数据处理提供了一个高吞吐量和低延迟的平台。基本上，<strong>Kafka实现了发布-订阅模型，生产者应用程序将事件发布到Kafka，而消费者应用程序订阅这些事件。</strong></p>
<p>在本教程中，我们将学习如何使用Kafka消费者API从Kafka主题的开始读取数据。</p>
<h2>2. 设置</h2>
<p>在我们开始之前，让我们首先设置依赖项，初始化Kafka集群连接，并在Kafka中发布一些消息。</p>
<p>Kafka提供了一个方便的Java客户端库，我们可以使用它来执行Kafka集群的各种操作。</p>`,r:{minutes:4.82,words:1445},t:"使用Kafka消费者API从开始读取数据",y:"a"}}],["/posts/baeldung/2024-07-04/2024-07-04-Read%20Date%20in%20Java%20Using%20Scanner.html",{loader:()=>a(()=>import("./2024-07-04-Read Date in Java Using Scanner.html-BpNa2QHm.js"),__vite__mapDeps([551,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Scanner"],g:["Java","Scanner","LocalDate","DateFormat"],e:`<hr>
<h1>Java中使用Scanner读取日期</h1>
<h2>1. 概述</h2>
<p>在本快速教程中，我们将学习如何从Scanner读取日期。我们将假设日期格式为yyyy-MM-dd，并且日期是Scanner的唯一内容。</p>
<h2>2. 将输入解析为LocalDate</h2>
<p>Scanner API提供了一个简单的文本扫描器。由于我们的Scanner有一个独特元素，我们将使用next()方法来获取它。否则，我们可能需要先做一些初步工作来解析它。</p>
<p>此外，Java 8引入了一个全新的日期/时间API。<strong>让我们创建一个DateTimeFormatter，并用给定的格式解析结果LocalDate：</strong></p>`,r:{minutes:1.7,words:509},t:"Java中使用Scanner读取日期",y:"a"}}],["/posts/baeldung/2024-07-04/2024-07-04-Replacing%20Variables%20in%20a%20Document%20Template%20with%20Java.html",{loader:()=>a(()=>import("./2024-07-04-Replacing Variables in a Document Template with Java.html-CukQlI-a.js"),__vite__mapDeps([552,1])),meta:{d:16855776e5,l:"2023年6月1日",c:["Java","Apache POI"],g:["Word文档","文档模板","文本替换"],e:'\n<p>在本教程中，我们将在Word文档的多个位置替换一个模式。我们将使用.doc和.docx文件格式进行操作。</p>\n<h2>2. Apache POI 库</h2>\n<p><strong>Apache POI 库为Java提供了操作Microsoft Office应用程序使用的多种文件格式的API</strong>，例如Excel电子表格、Word文档和PowerPoint演示文稿。它允许我们以编程方式读取、写入和修改这些文件。</p>\n<p>为了编辑.docx文件，我们将在pom.xml中添加最新版本的poi-ooxml：</p>\n<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>``&lt;dependency&gt;``\n    ``&lt;groupId&gt;``org.apache.poi``&lt;/groupId&gt;``\n    ``&lt;artifactId&gt;``poi-ooxml``&lt;/artifactId&gt;``\n    ``&lt;version&gt;``5.2.5``&lt;/version&gt;``\n``&lt;/dependency&gt;``\n</code></pre></div>',r:{minutes:6.32,words:1897},t:"在Java中使用Apache POI库替换Word文档模板中的变量",y:"a"}}],["/posts/baeldung/2024-07-04/2024-07-04-Resolving%20Mockito%20Exception%20%20Wanted%20But%20Not%20Invoked.html",{loader:()=>a(()=>import("./2024-07-04-Resolving Mockito Exception  Wanted But Not Invoked.html-Xb6c6gVO.js"),__vite__mapDeps([553,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Mockito","Testing"],g:["Mockito","Testing","Exception"],e:`<hr>
<h1>解决Mockito异常：期望调用但未被调用</h1>
<p>在本教程中，我们将讨论在使用Mockito时可能遇到的一个常见错误。异常信息是：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>期望调用但未被调用：
// 类名和位置
实际上，与此模拟对象没有交互。
</code></pre></div><p>让我们了解这个错误的潜在来源以及如何修复它。</p>
<h2>2. 示例设置</h2>
<p>首先，让我们创建稍后我们将模拟的类。它包含一个总是返回字符串"Baeldung"的方法：</p>`,r:{minutes:6.13,words:1840},t:"解决Mockito异常：期望调用但未被调用",y:"a"}}],["/posts/baeldung/2024-07-04/2024-07-04-Returning%20a%20Value%20After%20Finishing%20Thread%20s%20Job%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-04-Returning a Value After Finishing Thread s Job in Java.html-CKu8PqXv.js"),__vite__mapDeps([554,1])),meta:{d:16855776e5,l:"2023年6月1日",c:["Java","Concurrency"],g:["Java","Thread","Callable","Future"],e:`
<p>Java的一个主要特性是并发性。它允许多个线程运行并执行并行任务。因此，我们可以执行异步和非阻塞指令。这将优化可用资源，特别是当计算机具有多个CPU时。有两种类型的线程：有返回值的和没有返回值的（在后一种情况下，我们说它将有一个void返回方法）。</p>
<p>在本文中，我们将关注<strong>如何在线程完成工作后返回一个值</strong>。</p>
<h2>2. <em>Thread</em> 和 <em>Runnable</em></h2>
<p>我们通常将Java线程称为轻量级进程。让我们看看Java程序通常的工作原理：</p>
<p>一个Java程序是一个正在执行的过程。一个线程是Java进程的一个子集，可以访问主内存。它可以与同一进程中的其他线程通信。</p>`,r:{minutes:8.25,words:2476},t:"Java中线程完成工作后的返回值",y:"a"}}],["/posts/baeldung/2024-07-04/2024-07-04-Run%20JMeter%20.jmx%20File%20From%20the%20Command%20Line%20and%20Configure%20the%20Report%20File.html",{loader:()=>a(()=>import("./2024-07-04-Run JMeter .jmx File From the Command Line and Configure the Report File.html-BjQ_AAoL.js"),__vite__mapDeps([555,1])),meta:{d:16857504e5,l:"2023年6月3日",c:["Apache JMeter","性能测试"],g:["JMeter","命令行","性能测试"],e:`
<p>Apache JMeter 是一个开源的基于 Java 的应用程序，旨在分析和测量 Web 应用程序的性能。它基本上是一种应用程序，我们可以使用它来测试和分析服务器在不同负载条件下的整体性能。</p>
<p>JMeter 提供了一个易于使用的 GUI，我们可以使用它来定义、执行和查看各种负载测试的报告。它还支持非 GUI 模式，我们可以在命令行界面中运行脚本。</p>
<p>在本教程中，我们将学习如何从命令行运行 JMeter JMX 文件的同时配置报告文件。</p>
<h2>2. 设置</h2>
<p>在我们开始之前，让我们设置一个我们将在整个演示中使用的 JMeter 脚本。为了模拟一些 API，我们将使用 Postman Echo 提供的示例 REST 端点。</p>`,r:{minutes:6.3,words:1890},t:"Apache JMeter 命令行使用指南",y:"a"}}],["/posts/baeldung/2024-07-04/2024-07-04-Sort%20Date%20Strings%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-04-Sort Date Strings in Java.html-BJrFcXUI.js"),__vite__mapDeps([556,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","日期处理"],g:["Java","日期字符串排序"],e:`
<h2>1. 概述</h2>
<p>在处理包含日期时间字符串格式的数据集时，在许多Java应用程序中，对这些字符串进行排序是一项常见任务。</p>
<p>在本教程中，我们将探索在Java中有效地对日期字符串进行排序的不同方法。</p>
<h2>2. 问题介绍</h2>
<p>我们可以直接按字典顺序对特定日期格式的字符串进行排序，例如ISO日期时间格式（<em>YYYY-MM-dd’T’ HH:mm:ss</em>）。然而，<strong>这不是排序日期字符串的通用解决方案</strong>。</p>
<p>我们不能对所有日期时间格式应用字典排序操作。例如，假设我们有如下字符串列表：</p>
`,r:{minutes:4.15,words:1245},t:"Java中对日期字符串进行排序",y:"a"}}],["/posts/baeldung/2024-07-04/2024-07-04-Spring%20Boot%20Properties%20Prefix%20Must%20Be%20in%20Canonical%20Form.html",{loader:()=>a(()=>import("./2024-07-04-Spring Boot Properties Prefix Must Be in Canonical Form.html-DoU23K_t.js"),__vite__mapDeps([557,1])),meta:{d:1720128627e3,e:`<p>由于我无法访问外部链接，因此无法直接翻译网页内容。但是，我可以提供一个翻译模板，您可以根据网页的实际内容进行填充。以下是翻译模板：</p>
<hr>
<p>date: {yyyy-MM-DD}
category:</p>
<ul>
<li 分类1=""></li>
<li>{分类2}
tag:</li>
<li 标签1=""></li>
<li>{标签2}
head:</li>
<li>
<ul>
<li>meta</li>
<li seo内容="">name: {关键词}
content:</li>
</ul>
</li>
</ul>
<hr>
<h1 标题中文翻译=""></h1>
`,r:{minutes:.51,words:153},t:"",y:"a"}}],["/posts/baeldung/2024-07-04/2024-07-04-The%20Difference%20Between%20findById%20and%20getById%20in%20Spring%20Data.html",{loader:()=>a(()=>import("./2024-07-04-The Difference Between findById and getById in Spring Data.html-Ct4idfTy.js"),__vite__mapDeps([558,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Data","Java"],g:["findById","getById"],e:`
<ol>
<li>概述</li>
</ol>
<p>Spring Data提供了方便的方法来从数据存储中检索实体，包括findById和getById。尽管它们乍一看可能很相似，但存在细微的差别，这些差别可能会影响我们代码的功能。</p>
<p>本教程将探讨这些差异，并帮助我们有效地确定何时使用每种方法。</p>
<ol start="2">
<li>理解findById</li>
</ol>
<p>首先，让我们看看findById方法。</p>
<p>2.1 方法签名</p>
<p>findById方法定义在CrudRepository接口中：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>Optional\`&lt;T&gt;\` findById(ID id);
</code></pre></div>`,r:{minutes:2.59,words:778},t:"Spring Data中findById与getById的区别",y:"a"}}],["/posts/baeldung/2024-07-04/2024-07-04-Throw%20Exception%20for%20Unexpected%20Input%20for%20Enum%20With%20MapStruct.html",{loader:()=>a(()=>import("./2024-07-04-Throw Exception for Unexpected Input for Enum With MapStruct.html-DQ7jorR2.js"),__vite__mapDeps([559,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","MapStruct"],g:["Enum Mapping","Exception Handling"],e:'<hr>\n<h1>使用MapStruct为枚举映射时抛出异常处理意外输入</h1>\n<p>在这个教程中，我们将看到如何使用MapStruct将一个枚举的值映射到另一个枚举的值。我们还将学习当另一个枚举中没有对应的值时如何抛出异常。</p>\n<h2>2. MapStruct库</h2>\n<p><strong>MapStruct是一个代码生成工具，简化了Java Bean的映射。</strong> 最新版本的MapStruct库可以在Maven中央仓库中找到。</p>\n<p>让我们将依赖项添加到我们的_pom.xml_：</p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```org.mapstruct```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```mapstruct```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```1.6.0.Beta1```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n</code></pre></div>',r:{minutes:2.07,words:622},t:"使用MapStruct为枚举映射时抛出异常处理意外输入",y:"a"}}],["/posts/baeldung/2024-07-04/2024-07-04-Understanding%20JPA%20Hibernate%20Associations.html",{loader:()=>a(()=>import("./2024-07-04-Understanding JPA Hibernate Associations.html-BywRnEF3.js"),__vite__mapDeps([560,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["JPA","Hibernate"],g:["ORM","Associations"],e:`
<p>Java持久化API（JPA）是Java应用程序的对象关系映射（ORM）规范。进一步来说，Hibernate是JPA规范的流行实现之一。</p>
<p>关联是ORM中的一个基本概念，允许我们定义实体之间的关系。在本教程中，我们将讨论JPA/Hibernate中单向和双向关联之间的区别。</p>
<h2>1. 概述</h2>
<p>单向关联通常用于面向对象编程，以建立实体之间的关系。然而，重要的是要注意，在单向关联中，只有一个实体持有对另一个实体的引用。</p>
<p>要在Java中定义单向关联，我们可以使用诸如@ManyToOne、@OneToMany、@OneToOne和@ManyToMany等注解。通过使用这些注解，我们可以在代码中创建两个实体之间清晰且明确定义的关系。</p>`,r:{minutes:7.48,words:2244},t:"理解JPA/Hibernate关联",y:"a"}}],["/posts/baeldung/2024-07-04/2024-07-04-Using%20PostgreSQL%20as%20a%20Message%20Broker.html",{loader:()=>a(()=>import("./2024-07-04-Using PostgreSQL as a Message Broker.html-CDUhXNr8.js"),__vite__mapDeps([561,1])),meta:{d:17200512e5,l:"2024年7月4日",c:["Spring","PostgreSQL"],g:["LISTEN/NOTIFY","消息代理","Spring Boot"],e:`
<p>在本教程中，我们将学习如何使用PostgreSQL的_LISTEN/NOTIFY_命令来实现一个简单的消息代理机制。</p>
<h2>2. PostgreSQL的_LISTEN/NOTIFY_机制简介</h2>
<p>简单来说，这些命令允许连接的客户端通过常规的PostgreSQL连接交换消息。客户端使用_NOTIFY_命令向一个_channel_发送通知，还可以附带一个可选的字符串有效载荷。</p>
<p>_channel_可以是任何有效的SQL标识符，它在传统的消息系统中像主题一样工作。这意味着有效载荷将被发送到该特定_channel_的所有活动监听者。如果没有附带有效载荷，监听者将只收到一个空的通知。</p>`,r:{minutes:9.01,words:2704},t:"使用PostgreSQL作为消息代理",y:"a"}}],["/posts/baeldung/2024-07-04/2024-07-04-What%20Is%20Elasticsearch%20.html",{loader:()=>a(()=>import("./2024-07-04-What Is Elasticsearch .html-BR4ivgxb.js"),__vite__mapDeps([562,1])),meta:{d:1687392e6,l:"2023年6月22日",c:["Elasticsearch","NoSQL"],g:["Elasticsearch","搜索引擎","分布式系统","数据分析"],e:`
<h2>1. 概述</h2>
<p>在本教程中，我们将开始探索Elasticsearch及其相关工具。</p>
<p>它是一个可以无缝处理大量数据、自动扩展，并持续整合新数据的工具。</p>
<h2>2. 定义</h2>
<p>想象我们有一大堆文件，成千上万份，我们想要快速有效地找到特定信息。这就是Elasticsearch发挥作用的地方。</p>
<p><strong>想象一个超级智能的图书管理员，巧妙地组织了大量文件，从而方便了搜索过程。</strong> 这类似于Elasticsearch——一个开源的搜索和分析引擎，擅长管理庞大的数据量，提供我们所需的精确信息。</p>
<p>作为分布式的并包含NoSQL特性，Elasticsearch使用JSON文档来表示数据，允许与各种编程语言和系统轻松集成。</p>`,r:{minutes:7.51,words:2253},t:"Elasticsearch是什么？",y:"a"}}],["/posts/baeldung/2024-07-05/2024-07-05-Array%20vs.%20List%20Performance%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-05-Array vs. List Performance in Java.html-BjJiXkWd.js"),__vite__mapDeps([563,1])),meta:{d:17201376e5,l:"2024年7月5日",c:["Java","性能"],g:["数组","列表"],e:`
<p>在Java编程语言中，数组和列表是两种主要的数据结构，用于存储一系列元素。数组和列表都有各自的优缺点，选择适当的数据结构取决于我们用例的具体要求。</p>
<p>在本教程中，我们将检查Java中数组和列表的性能差异，并提供测试示例，使用Java Microbenchmark Harness (JMH)来比较它们的效率。</p>
<h2>2. 创建新对象的性能</h2>
<p>让我们通过一个简单的Java示例比较创建数组和ArrayList的性能：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Benchmark</span>
<span class="token keyword">public</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">arrayCreation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Benchmark</span>
<span class="token keyword">public</span> <span class="token class-name">ArrayList</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>\` <span class="token function">arrayListCreation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:3.66,words:1097},t:"Java中数组与列表的性能比较",y:"a"}}],["/posts/baeldung/2024-07-05/2024-07-05-ArrayBlockingQueue%20vs.%20LinkedBlockingQueue.html",{loader:()=>a(()=>import("./2024-07-05-ArrayBlockingQueue vs. LinkedBlockingQueue.html-DNH92pSv.js"),__vite__mapDeps([564,1])),meta:{d:1720224e6,l:"2024年7月6日",c:["Java","Concurrency"],g:["ArrayBlockingQueue","LinkedBlockingQueue"],e:`
<ol>
<li>概述</li>
</ol>
<p>Java的_BlockingQueue_接口表示一个线程安全的队列。如果队列满了，尝试向队列中添加元素的线程会被阻塞。如果队列为空，尝试从队列中取出元素的线程也会被阻塞。</p>
<p>BlockingQueue有多种实现，如_ArrayBlockingQueue_、<em>LinkedBlockingQueue</em>、<em>SynchronousQueue</em>、<em>PriorityBlockingQueue</em>。</p>
<p>在本教程中，我们将探讨_ArrayBlockingQueue_和_LinkedBlockingQueue_之间的差异。</p>`,r:{minutes:2.52,words:757},t:"Java中的ArrayBlockingQueue与LinkedBlockingQueue对比",y:"a"}}],["/posts/baeldung/2024-07-05/2024-07-05-Calculate%20Percentage%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-05-Calculate Percentage in Kotlin.html-CEXaz4T_.js"),__vite__mapDeps([565,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin","编程"],g:["Kotlin","百分比计算"],e:`
<h2>1. 引言</h2>
<p>在Kotlin中，执行算术运算是直接的。然而，当涉及到计算百分比时，开发者可能会因为整数除法的特性而遇到意外的结果。</p>
<p>本教程探讨了在Kotlin中正确计算百分比，确保无论是使用整数还是浮点数都能得到准确的结果。</p>
<h2>2. 理解Kotlin中的整数除法</h2>
<p>Kotlin和许多编程语言一样，区分了整数和浮点数除法。<strong>当两个整数相除时，结果会被截断以产生另一个整数</strong>。这种行为在计算百分比时可能会导致不准确的结果：</p>
<div class="language-kotlin" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> count <span class="token operator">=</span> <span class="token number">5</span>
<span class="token keyword">val</span> totalCount <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> count <span class="token operator">/</span> totalCount
</code></pre></div>`,r:{minutes:4.82,words:1445},t:"Kotlin中计算百分比 | Baeldung关于Kotlin",y:"a"}}],["/posts/baeldung/2024-07-05/2024-07-05-Check%20if%20a%20List%20Contains%20an%20Element%20From%20Another%20List%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-05-Check if a List Contains an Element From Another List in Java.html-CM2G1W_9.js"),__vite__mapDeps([566,1])),meta:{d:17201376e5,l:"2024年7月5日",c:["Java","编程"],g:["Java List","集合操作"],e:'\n<h2>1. 概述</h2>\n<p>在本教程中，我们将探讨Java中几种检查一个列表中的元素是否也出现在另一个列表中的方法。我们将使用Java Stream、Collections的disjoint()方法以及Apache Commons来实现这一功能。</p>\n<h2>2. 检查基本等价性</h2>\n<p>这个问题最简单的版本是，如果我们想检查一个列表中的元素是否与另一个列表中的元素<strong>等价</strong>。这可以是原始值或对象，假设我们已经设置了对象的比较方式。让我们创建一些要比较的列表：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>``` listOfLetters <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">List</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>``` listOfLettersWithOverlap <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">,</span> <span class="token string">"f"</span><span class="token punctuation">,</span> <span class="token string">"g"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">List</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>``` listOfCities <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"London"</span><span class="token punctuation">,</span> <span class="token string">"Berlin"</span><span class="token punctuation">,</span> <span class="token string">"Paris"</span><span class="token punctuation">,</span> <span class="token string">"Brussels"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div>',r:{minutes:3.83,words:1150},t:"Java中检查一个列表是否包含另一个列表中的元素",y:"a"}}],["/posts/baeldung/2024-07-05/2024-07-05-Classpath%20vs.%20Modulepath%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-05-Classpath vs. Modulepath in Java.html-CLLRk5UD.js"),__vite__mapDeps([567,1])),meta:{d:17201376e5,l:"2024年7月5日",c:["Java","编程"],g:["Classpath","Modulepath"],e:`<hr>
<h1>Java中的Classpath与Modulepath</h1>
<p>Java是一种广泛使用的编程语言，提供了多种管理依赖项和组织代码的机制。在相同的背景下，modulepath和classpath是Java中管理依赖项的两个基本概念。此外，理解这两者之间的区别对于高效的Java开发至关重要。</p>
<p>在本教程中，我们将探讨modulepath和classpath之间的区别以及它们在Java应用程序中的重要性。</p>
<h2>2. Java中的依赖项</h2>
<p>依赖项指的是Java程序编译和运行所需的外部库、模块或包。这些依赖项通常提供了核心库中不可用的其他功能或资源。<strong>有效管理依赖项确保了所需的资源在运行时可用。</strong></p>`,r:{minutes:3.15,words:944},t:"Java中的Classpath与Modulepath",y:"a"}}],["/posts/baeldung/2024-07-05/2024-07-05-Configuring%20Gradle%20Tasks%20in%20Spring%20Boot%203.html",{loader:()=>a(()=>import("./2024-07-05-Configuring Gradle Tasks in Spring Boot 3.html-CMIOhn75.js"),__vite__mapDeps([568,1])),meta:{d:1720144531e3,e:`<p>根据您提供的要求，我将直接翻译网页标题并给出相应的格式。由于我无法访问外部链接以获取实际的日期、类别、标签和SEO内容，我将使用示例值来展示格式。您可以根据实际网页内容替换这些值。</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>---
date: 2024-07-05
category:
  - Spring Boot
  - Gradle
tag:
  - Configuration
  - Tasks
head:
  - - meta
    - name: keywords
      content: Spring Boot, Gradle, Configuration, Tasks
------
# Spring Boot 3与Gradle配置任务
</code></pre></div>`,r:{minutes:4.69,words:1406},t:"",y:"a"}}],["/posts/baeldung/2024-07-05/2024-07-05-Convert%20Hashmap%20to%20JSON%20Object%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-05-Convert Hashmap to JSON Object in Java.html-8HkVwz3b.js"),__vite__mapDeps([569,1])),meta:{d:17201376e5,l:"2024年7月5日",c:["Java","JSON"],g:["HashMap","JSON转换","Jackson","Gson","JSON-Java"],e:`
<p>在Java中，_HashMap_是一种广泛使用的数据结构，我们可以用它来以键值对的形式存储数据。另一方面，JavaScript对象表示法（JSON）是一种流行的数据交换格式，通常用于在服务器和Web应用程序之间传输数据。</p>
<p>在现代软件开发中，我们经常会遇到需要在不同格式之间转换数据的场景。其中之一就是将_Map_转换为JSON格式。</p>
<p><strong>在本教程中，我们将探讨将_Map_转换为JSON格式的三种方法。</strong></p>
<h2>2. 一个Map示例及预期的JSON输出</h2>
<p>让我们考虑以下map示例：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Map</span>\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>\`\`\`\` data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
data<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"CS"</span><span class="token punctuation">,</span> <span class="token string">"Post1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
data<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Linux"</span><span class="token punctuation">,</span> <span class="token string">"Post1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
data<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Kotlin"</span><span class="token punctuation">,</span> <span class="token string">"Post1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:3.09,words:927},t:"Java中将HashMap转换为JSON对象",y:"a"}}],["/posts/baeldung/2024-07-05/2024-07-05-Convert%20String%20to%20Int%20Using%20Encapsulation.html",{loader:()=>a(()=>import("./2024-07-05-Convert String to Int Using Encapsulation.html-DSPAcFbL.js"),__vite__mapDeps([570,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","教程"],g:["封装","字符串到整数转换"],e:`
<p>在本教程中，我们将探索在Java中封装字符串输入转换为整数的不同方法，同时优雅地处理异常。</p>
<h2>问题陈述</h2>
<p>通常使用<code>Integer.parseInt()</code>方法来执行字符串到整数的转换，但如果输入不是数字，它会抛出一个异常。</p>
<p>使用<code>try-catch</code>块来处理这个异常可能会使代码重复且难以阅读：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"在将字符串转换为整数时遇到异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.52,words:757},t:"Java中封装字符串到整数转换",y:"a"}}],["/posts/baeldung/2024-07-05/2024-07-05-Convert%20an%20OutputStream%20to%20an%20InputStream.html",{loader:()=>a(()=>import("./2024-07-05-Convert an OutputStream to an InputStream.html-DvWfhruj.js"),__vite__mapDeps([571,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","IO"],g:["OutputStream","InputStream"],e:`<hr>
<h1>将 OutputStream 转换为 InputStream | Baeldung</h1>
<h2>1. 概述</h2>
<p><em>InputStream</em> 和 <em>OutputStream</em> 是 Java IO 中的两个基本类。有时，我们需要在这两类流之间进行转换。在之前的教程中，我们讨论了将 <em>InputStream</em> 写入 <em>OutputStream</em> 的问题。</p>
<p>在这个快速教程中，我们将看向相反的方向。我们将探讨如何将 <em>OutputStream</em> 转换为 <em>InputStream</em>。</p>`,r:{minutes:3.3,words:990},t:"将 OutputStream 转换为 InputStream | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-05/2024-07-05-Converting%20JSON%20to%20XML%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-05-Converting JSON to XML in Java.html-CThaZbP6.js"),__vite__mapDeps([572,1])),meta:{d:17201376e5,l:"2024年7月5日",c:["Java","XML"],g:["JSON","XML","数据转换"],e:'\n<h2>1. 概述</h2>\n<p>JSON和XML是两种流行的数据交换格式。在实际应用中，我们经常需要在它们之间进行转换。</p>\n<p>在本教程中，我们将探讨在Java中将JSON转换为XML的不同方法。</p>\n<h2>2. JSON-Java库</h2>\n<p>首先，JSON-Java库提供了一种简单的方法将JSON转换为XML。</p>\n<h3>2.1. 依赖项</h3>\n<p>让我们从向我们的_pom.xml_添加JSON-Java依赖项开始：</p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```org.json```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```json```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```20240303```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n</code></pre></div>',r:{minutes:4.24,words:1273},t:"Java中将JSON转换为XML",y:"a"}}],["/posts/baeldung/2024-07-05/2024-07-05-Converting%20a%20cURL%20Into%20Postman%20and%20Vice%20Versa.html",{loader:()=>a(()=>import("./2024-07-05-Converting a cURL Into Postman and Vice Versa.html-DtyQSQIa.js"),__vite__mapDeps([573,1])),meta:{d:16828992e5,l:"2023年5月1日",c:["Tutorial","API Testing"],g:["cURL","Postman"],e:`
<ol>
<li>概述
cURL 是一个用于使用各种协议传输数据的命令行工具。然而，它使用起来可能比较繁琐，尤其是对于复杂的 API 请求。Postman 是一个更加用户友好的工具，允许我们测试和与基于 HTTP 的 API 进行交互。</li>
</ol>
<p>在这个简短的教程中，我们将看到如何将 cURL 请求转换为 Postman 请求，反之亦然。</p>
<ol start="2">
<li>将 cURL 请求转换为 Postman
首先，我们来学习如何将 cURL 请求转换为 Postman。</li>
</ol>
<p>首先，打开 Postman 并点击屏幕左上角的“导入”按钮：</p>`,r:{minutes:1.16,words:348},t:"cURL 与 Postman 转换指南",y:"a"}}],["/posts/baeldung/2024-07-05/2024-07-05-Correct%20Use%20of%20flush%20%20%20in%20JPA.html",{loader:()=>a(()=>import("./2024-07-05-Correct Use of flush   in JPA.html-B1jt_AM1.js"),__vite__mapDeps([574,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring JPA","flush()"],g:["flush()","JPA","EntityManager"],e:`
<p>在本教程中，我们将简要了解Spring JPA提供的_flush()_方法。</p>
<p>首先，我们将学习涉及的关键抽象概念，包括_实体管理器_和_flush模式_。接下来，我们将使用_Customer_和_CustomerAddress_实体设置一个示例。然后，我们将编写集成测试，以查看两个flush模式下_flush()_的工作原理。最后，我们将探讨使用显式_flush()_的一些关键好处以及一些考虑因素。</p>
<h2>2. flush()是什么？</h2>
<p>本质上_flush()_方法是JPA中_实体管理器_接口的一部分。_实体管理器_可以用来与JPA中的持久化上下文交互。它提供了管理实体生命周期、查询实体以及对数据库执行CRUD操作的方法。</p>`,r:{minutes:5.87,words:1760},t:"Spring JPA中flush()的正确使用",y:"a"}}],["/posts/baeldung/2024-07-05/2024-07-05-Creating%20Custom%20Iterator%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-05-Creating Custom Iterator in Java.html-CxVsv6U6.js"),__vite__mapDeps([575,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","编程"],g:["Java","迭代器","自定义"],e:`
<h2>1. 引言</h2>
<p><em>Iterator<code>&lt;E&gt;</code></em> 是Java集合框架中的一个接口，它提供了允许遍历集合的方法。可以通过在集合（例如_List_, <em>Set</em>）上调用_iterator()_方法来获得_Iterator_实例，并逐个遍历元素。迭代器有三个核心方法来帮助遍历：</p>
<ul>
<li><em>hasNext()</em></li>
<li><em>next()</em></li>
<li><em>remove()</em></li>
</ul>
<p>在本教程中，我们将看到如何引入自定义迭代器并在代码中使用它们。</p>`,r:{minutes:5.65,words:1694},t:"创建自定义迭代器在Java中 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-05/2024-07-05-Custom%20WebFlux%20Exceptions%20in%20Spring%20Boot%203.html",{loader:()=>a(()=>import("./2024-07-05-Custom WebFlux Exceptions in Spring Boot 3.html-GxbDDyJ9.js"),__vite__mapDeps([576,1])),meta:{d:17201376e5,l:"2024年7月5日",c:["Spring Boot","WebFlux"],g:["异常处理","Spring Framework"],e:`
<h2>1. 引言</h2>
<p>在本教程中，我们将探索 Spring 框架中的不同错误响应格式。我们还将了解如何使用自定义属性引发和处理 RFC7807 的 <em>ProblemDetail</em>，以及如何在 Spring WebFlux 中引发自定义异常。</p>
<h2>2. Spring Boot 3 中的异常响应格式</h2>
<p>让我们了解 Spring Framework 3 默认支持的各种错误响应格式。</p>
<p>默认情况下，Spring Framework 提供了 <em>DefaultErrorAttributes</em> 类，该类实现了 <em>ErrorAttributes</em> 接口，用于在未处理错误发生时生成错误响应。在默认错误的情况下，系统会生成我们可以更仔细检查的 JSON 响应结构：</p>`,r:{minutes:5.03,words:1509},t:"Spring Boot 3 中自定义 WebFlux 异常",y:"a"}}],["/posts/baeldung/2024-07-05/2024-07-05-Difference%20Between%20implementation%20and%20compile%20in%20Gradle.html",{loader:()=>a(()=>import("./2024-07-05-Difference Between implementation and compile in Gradle.html-YujWNcdR.js"),__vite__mapDeps([577,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Gradle","Dependency Management"],g:["compile","implementation"],e:`
<p>Gradle提供了两个主要的关键字，<em>compile_和_implementation</em>，用于配置软件项目中的依赖。虽然这些关键字看起来可能相似，但它们有不同的含义和用途，理解它们之间的区别对于有效使用它们至关重要。</p>
<p>在本教程中，我们将讨论Gradle中“implementation”和“compile”的区别，并提供有效的依赖管理的最佳实践。</p>
<p><strong>注意：从Gradle 7.x开始，“compile”配置不再直接使用。</strong> 相反，“implementation”配置用于编译和运行时都需要的依赖。“runtimeOnly”配置用于仅在运行时需要的依赖。</p>`,r:{minutes:4.19,words:1256},t:"Gradle中implementation和compile的区别",y:"a"}}],["/posts/baeldung/2024-07-05/2024-07-05-Difference%20Between%20null%20and%20Empty%20String%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-05-Difference Between null and Empty String in Java.html-KQFLbzv_.js"),__vite__mapDeps([578,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","String"],e:`
<p>在本教程中，我们将探讨Java中null和空字符串的区别。这是两个不同的概念，但有时在使用字符串时可能没有按预期使用。</p>
<p>**null是Java中的一个保留关键字，表示没有任何值。**此外，将null值分配给对象引用意味着它不指向内存中的任何对象或值。</p>
<p>默认情况下，Java将引用变量初始化为null值，并将原始类型初始化为基于其类型的默认值。因此，<strong>我们不能</strong> <strong>将null分配给原始类型。</strong></p>
<p>如果我们将null分配给一个String对象，它将被初始化但未实例化，因此不包含任何值或引用。</p>`,r:{minutes:1.87,words:560},t:"Java中null和空字符串的区别",y:"a"}}],["/posts/baeldung/2024-07-05/2024-07-05-Different%20Dependency%20Version%20Declarations%20in%20Gradle.html",{loader:()=>a(()=>import("./2024-07-05-Different Dependency Version Declarations in Gradle.html-C3DeYYfj.js"),__vite__mapDeps([579,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Gradle","Maven"],g:["依赖管理","版本控制"],e:`
<p>Gradle是JVM项目中最流行的构建工具之一。它提供了多种方式来声明和控制我们的依赖版本。</p>
<p>在这个简短的教程中，我们将看到如何在Gradle中定义最新的依赖版本。</p>
<p>首先，我们将探讨我们可能想要定义依赖版本的不同方式。然后，我们将创建一个小的Gradle项目，在其中我们将指定一些第三方库。最后，我们将分析Gradle的依赖树，并看看Gradle如何处理不同的版本声明。</p>
<h3>2.1 精确版本声明</h3>
<p>这是声明依赖版本的最直接方式。我们所要做的就是指定我们想要在应用程序中使用的确切版本，例如_1.0_。</p>
<p>大多数官方依赖通常只使用数字版本，如_3.2.1.<em>。然而，依赖版本是一个字符串，所以它也可以包含字符。例如，Spring有一个版本是_5.2.22.RELEASE</em>。</p>`,r:{minutes:4.27,words:1282},t:"Gradle中不同的依赖版本声明方式",y:"a"}}],["/posts/baeldung/2024-07-05/2024-07-05-Encoding%20Special%20Characters%20in%20XML.html",{loader:()=>a(()=>import("./2024-07-05-Encoding Special Characters in XML.html-CunDrut5.js"),__vite__mapDeps([580,1])),meta:{d:16844544e5,l:"2023年5月19日",c:["XML","编码"],g:["XML","特殊字符","实体"],e:'\n<p>在这篇文章中，我们将探索XML实体，它们是什么，以它们能为我们做些什么。特别是，我们将看到XML中的标准实体以及如何定义我们自己的实体（如果需要的话）。</p>\n<h2>2. XML是如何构建的？</h2>\n<p>XML是一种用于表示任意数据的标记格式。它使用XML元素的层次结构来实现这一点，每个元素都可以有属性。例如：</p>\n<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>`````&lt;part number="1976"&gt;`````\n    `````&lt;name&gt;`````Windscreen Wiper`````&lt;/name&gt;`````\n`````&lt;/part&gt;`````\n</code></pre></div>',r:{minutes:6.11,words:1832},t:"XML中特殊字符的编码",y:"a"}}],["/posts/baeldung/2024-07-05/2024-07-05-Execute%20a%20Method%20Only%20Once%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-05-Execute a Method Only Once in Java.html-VZ1GS6f3.js"),__vite__mapDeps([581,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Concurrency"],g:["Java","Singleton","Synchronized","AtomicBoolean","Static Initialization"],e:`
<p>在本教程中，我们将探讨仅执行一次方法的不同方法。这在几种场景中都非常有用。例如，初始化单例实例的方法或执行一次性设置操作的方法。</p>
<p>我们将探索各种技术以确保方法只被调用一次。这些技术包括使用布尔变量和<code>synchronized</code>关键字、<code>AtomicBoolean</code>以及静态初始化块。此外，某些单元测试框架如JUnit和TestNG提供了注释，可以帮助仅执行一次方法。</p>
<h2>2. 使用布尔值与Synchronized</h2>
<p>我们的第一种方法是结合使用布尔标志和<code>synchronized</code>关键字。让我们看看如何实现它：</p>`,r:{minutes:3.68,words:1103},t:"Java中仅执行一次方法",y:"a"}}],["/posts/baeldung/2024-07-05/2024-07-05-Generating%20Javadoc%20With%20Gradle.html",{loader:()=>a(()=>import("./2024-07-05-Generating Javadoc With Gradle.html-B0qnXAh2.js"),__vite__mapDeps([582,1])),meta:{d:16828992e5,l:"2023年5月1日",c:["Java","Gradle"],g:["Javadoc","文档生成"],e:`
<p>众所周知，创建清晰全面的文档对于代码维护至关重要。在Java中，我们可以通过使用Javadoc来实现这一点，Javadoc是一个文档生成器，它可以从Java源代码注释创建HTML文件。</p>
<p>在本教程中，我们将学习如何使用Gradle生成Javadoc，Gradle是一个流行的构建自动化工具。</p>
<h2>2. 设置Gradle项目</h2>
<p>简单来说，设置Gradle项目非常容易。首先，我们需要在我们的机器上安装Gradle构建工具。接下来，让我们创建一个空文件夹，并通过终端切换到该文件夹。然后，让我们通过终端初始化一个新的Gradle项目：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ gradle init
</code></pre></div>`,r:{minutes:3.76,words:1128},t:"使用Gradle生成Javadoc",y:"a"}}],["/posts/baeldung/2024-07-05/2024-07-05-Get%20Last%20N%20Messages%20in%20Apache%20Kafka%20Topic.html",{loader:()=>a(()=>import("./2024-07-05-Get Last N Messages in Apache Kafka Topic.html-P3W4wnO0.js"),__vite__mapDeps([583,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Apache Kafka"],g:["Kafka","Java","Tutorial"],e:`<hr>
<h1>如何在Apache Kafka主题中获取最后N条消息</h1>
<ol>
<li>引言</li>
</ol>
<p>在本简短教程中，我们将看到如何从Apache Kafka主题中检索最后N条消息。</p>
<p>在文章的第一部分，我们将关注执行此操作所需的先决条件。在第二部分，我们将使用Kafka Java API库构建一个小型实用程序来使用Java读取消息。最后，我们将提供简短的指导，以使用KafkaCat从命令行实现相同的结果。</p>
<ol start="2">
<li>先决条件</li>
</ol>
<p><strong>从Kafka主题检索最后N条消息就像从明确定义的偏移量开始消费消息一样简单。</strong> Kafka主题中的偏移量表示消费者的当前位置。在之前的文章中，我们已经看到如何利用_consumer.seekToEnd()_方法从一个Apache Kafka主题中获取特定数量的消息。</p>`,r:{minutes:3.74,words:1122},t:"如何在Apache Kafka主题中获取最后N条消息",y:"a"}}],["/posts/baeldung/2024-07-05/2024-07-05-Handle%20NoSuchElementException%20When%20Reading%20a%20File%20Through%20Scanner.html",{loader:()=>a(()=>import("./2024-07-05-Handle NoSuchElementException When Reading a File Through Scanner.html-LW7cLvh1.js"),__vite__mapDeps([584,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Exception Handling"],g:["NoSuchElementException","Scanner","Java"],e:`<hr>
<h1>使用Scanner类读取文件时处理NoSuchElementException异常</h1>
<p>在这篇简短的教程中，我们将探讨在使用Scanner类读取文件时如何处理“NoSuchElementException: No line found”异常。</p>
<p>首先，我们将了解异常的根本原因。然后，我们将学习如何在实践中重现它，最后，我们将学习如何修复它。</p>
<h3>2. 理解异常</h3>
<p>Scanner类，顾名思义，是一个Java类，提供了扫描和解析原始类型和字符串的方法。</p>
<p>在这些方法中，我们找到了nextLine()，它返回当前行，不包括末尾的任何行分隔符。</p>`,r:{minutes:3.09,words:927},t:"使用Scanner类读取文件时处理NoSuchElementException异常",y:"a"}}],["/posts/baeldung/2024-07-05/2024-07-05-Hashing%20With%20Argon2%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-05-Hashing With Argon2 in Java.html-Bi2U2FbN.js"),__vite__mapDeps([585,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Security"],g:["Argon2","Hashing","Java"],e:`
<p>在构建涉及用户认证的Web应用程序时，保护用户免受黑客攻击非常重要。大多数Web应用程序设计为不存储明文密码，而是存储密码的哈希值。哈希和盐值是增强存储在数据库中的密码安全性的两种技术。</p>
<p>在本教程中，我们将学习哈希和盐值技术，以及如何在Java中使用Argon2进行哈希处理。</p>
<h2>2. 密码哈希和盐值</h2>
<p>密码哈希和盐值是两种可以增强存储在数据库中的密码安全性的技术。哈希算法涉及一种数学运算，可以将密码转换为一串随机字符。</p>
<p>然而，黑客可以通过比较常见密码的哈希值来猜测密码。为了防止这种情况，密码盐值就派上用场了。</p>
<p>密码盐值是在应用哈希算法之前，向密码添加一个称为盐值的随机数据片段的方法。盐值确保哈希值是独特的，即使两个用户有相同的密码，他们的哈希值也会不同。</p>`,r:{minutes:5.07,words:1520},t:"Java中使用Argon2进行哈希处理",y:"a"}}],["/posts/baeldung/2024-07-05/2024-07-05-Hibernate%20Natural%20IDs%20in%20Spring%20Boot.html",{loader:()=>a(()=>import("./2024-07-05-Hibernate Natural IDs in Spring Boot.html-CqH3kARK.js"),__vite__mapDeps([586,1])),meta:{d:1720224e6,l:"2024年7月6日",c:["Hibernate","Spring Boot"],g:["Natural ID","JPA"],e:`
<h2>1. 概述</h2>
<p>一些数据库条目拥有自然标识符，例如书籍的ISBN或个人的社保号。除了传统的数据库ID外，Hibernate允许我们将某些字段声明为自然ID，并基于这些属性轻松查询。</p>
<p>在本教程中，我们将讨论<code>@NaturalId</code>注解，并学习如何在Spring Boot项目中使用和实现它。</p>
<h2>2. 简单的自然ID</h2>
<p><strong>我们可以通过简单地用<code>@NaturalId</code>注解标注字段来指定自然标识符。这允许我们使用Hibernate的API无缝地查询相关列。</strong></p>
`,r:{minutes:4.18,words:1254},t:"Hibernate自然ID在Spring Boot中的使用",y:"a"}}],["/posts/baeldung/2024-07-05/2024-07-05-How%20to%20Take%20Input%20as%20String%20With%20Spaces%20in%20Java%20Using%20Scanner%20.html",{loader:()=>a(()=>import("./2024-07-05-How to Take Input as String With Spaces in Java Using Scanner .html-ColxZjoh.js"),__vite__mapDeps([587,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Scanner"],g:["Java","Scanner","Input","Spaces"],e:`
<p>在Java编程中，获取和解析用户输入是一项常见任务，处理包含空格的输入有时可能会有些棘手。</p>
<p>在本教程中，我们将探讨如何使用_Scanner_类在Java中以包含空格的字符串形式接收输入。</p>
<h2>2. 问题介绍</h2>
<p>让我们通过一个简单的例子来理解问题。</p>
<p>假设我们的扫描器接收两行文本。第一行是一个人的名字，第二行简要描述了这个人：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Michael Jackson\\n"</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"He was the 'King of Pop'.\\n"</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:4.9,words:1469},t:"Java中使用Scanner类处理带空格的输入",y:"a"}}],["/posts/baeldung/2024-07-05/2024-07-05-How%20to%20View%20Logs%20of%20a%20Pod%20in%20Kubernetes%20.html",{loader:()=>a(()=>import("./2024-07-05-How to View Logs of a Pod in Kubernetes .html-f6pGY0V9.js"),__vite__mapDeps([588,1])),meta:{d:17201376e5,l:"2024年7月5日",c:["DevOps","Kubernetes"],g:["Pod Logs","kubectl","Kubernetes Dashboard"],e:`
<p>如果您在DevOps生态系统中有几年的经验，并且有兴趣与社区分享这些经验，请查看我们的<strong>贡献指南</strong>。</p>
<h2>1. 概述</h2>
<p>Kubernetes是一个强大的容器编排平台，它允许我们大规模地管理和部署容器化应用程序。</p>
<p>确保我们应用程序的可靠性和可用性的最关键方面之一是监控运行中的Pod的健康状况和状态。<strong>查看日志是这一过程的重要组成部分，因为它们提供了应用程序或系统执行的事件和操作的记录</strong>。</p>
<p>在本文中，我们将发现在Kubernetes中查看_pod日志_的各种技术。这些技术包括使用_kubectl logs_命令、Kubernetes仪表板以及实时流式传输日志。</p>`,r:{minutes:6,words:1800},t:"如何在Kubernetes中查看Pod的日志？ | Baeldung关于运维",y:"a"}}],["/posts/baeldung/2024-07-05/2024-07-05-Introduction%20to%20MinIO.html",{loader:()=>a(()=>import("./2024-07-05-Introduction to MinIO.html-RmWzmwVb.js"),__vite__mapDeps([589,1])),meta:{d:16831584e5,l:"2023年5月4日",c:["Introduction"],g:["MinIO","S3"],e:`
<p>MinIO是一个高性能的对象存储系统。它被设计为云原生存储系统的替代品。事实上，它的API与亚马逊S3完全兼容。</p>
<p>在本教程中，我们将快速介绍如何使用MinIO。</p>
<h2>关于MinIO</h2>
<p>MinIO从一开始就被设计为亚马逊S3存储API的完全兼容替代品。他们声称自己是最具兼容性的S3替代品，同时还提供可比的性能和可扩展性。</p>
<p>MinIO还提供了多种部署选项。它可以作为本地应用程序在大多数流行的架构上运行，也可以使用Docker或Kubernetes作为容器化应用程序部署。</p>
<p>此外，MinIO是开源软件。组织可以自由地在AGPLv3许可证的条款下使用它。只是要注意，这个选项除了在线文档和MinIO用户社区之外没有支持。对于较大的企业，也有提供专用支持的付费订阅。</p>`,r:{minutes:6.13,words:1840},t:"MinIO简介",y:"a"}}],["/posts/baeldung/2024-07-05/2024-07-05-Java%20PrintStream%20to%20String.html",{loader:()=>a(()=>import("./2024-07-05-Java PrintStream to String.html-P3IXSqJs.js"),__vite__mapDeps([590,1])),meta:{d:1720224e6,l:"2024年7月6日",c:["Java","编程"],g:["PrintStream","字符串转换"],e:`
<p>在这篇简短的教程中，我们将介绍如何在Java中将 PrintStream 转换为 String。</p>
<p>我们将从使用Java核心方法开始。然后，我们将看到如何使用Apache Commons IO等外部库来实现相同的目标。</p>
<h2>2. PrintStream 是什么</h2>
<p>在Java中，PrintStream 是一种输出流，提供了一种方便的方式来打印和格式化数据。它带有一组用于打印和格式化不同类型数据的方法，例如 println() 和 printf()。</p>
<p>与其他输出流不同，它永远不会抛出 IOException。然而，在出现错误的情况下，它会设置一个可以通过 checkError() 方法测试的标志。</p>`,r:{minutes:3.28,words:985},t:"Java PrintStream 转 String",y:"a"}}],["/posts/baeldung/2024-07-05/2024-07-05-Object.toString%20%20%20vs%20String.valueOf%20%20.html",{loader:()=>a(()=>import("./2024-07-05-Object.toString   vs String.valueOf  .html-BC1XQ1eh.js"),__vite__mapDeps([591,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","编程"],g:["Object.toString()","String.valueOf()"],e:`
<p>在这篇文章中，我们将讨论 String.valueOf() 和 Object.toString() 方法。String.valueOf() 和 Object.toString() 方法都可以将数据类型转换为字符串，但我们使用它们的方式不同。我们将探讨各自的使用方式及其差异。</p>
<h2>2. toString() 方法</h2>
<p>toString() 方法位于 Java 的 Object 类中，它是 Java 中所有其他对象的父类。这意味着我们可以在任何对象上调用 toString() 方法，它将返回类的字符串表示。默认情况下，它会返回类的名称和一个 hashCode 的表示，但通过重写 toString() 方法，我们可以得到一些有用的信息。</p>`,r:{minutes:2.87,words:861},t:"Object.toString() 与 String.valueOf() | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-05/2024-07-05-Opening%20a%20New%20Tab%20Using%20Selenium%20WebDriver%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-05-Opening a New Tab Using Selenium WebDriver in Java.html-CRGsKNtm.js"),__vite__mapDeps([592,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Selenium WebDriver","Java"],g:["Selenium","WebDriver","Java","新建标签页"],e:`<hr>
<h1>使用Java中的Selenium WebDriver打开新标签页</h1>
<h2>1. 引言</h2>
<p>Selenium WebDriver是一个流行的自动化网络测试工具，具有许多功能。在自动化网页操作中，一个常见的动作是在浏览器窗口中打开一个新标签页。</p>
<p>打开新标签页在多种场景下都非常有用，包括测试多页面工作流程、验证新标签页中打开的外部链接、与弹出窗口交互，以及在并行运行测试时模拟多个用户与应用程序的不同部分同时交互。</p>
<p>早期的解决方案是自定义脚本，例如发送组合键“Ctrl”+“T”，这通常会因浏览器和操作系统的不同而导致不同的结果。</p>`,r:{minutes:2.46,words:737},t:"使用Java中的Selenium WebDriver打开新标签页",y:"a"}}],["/posts/baeldung/2024-07-05/2024-07-05-Read%20Multiple%20Inputs%20on%20the%20Same%20Line%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-05-Read Multiple Inputs on the Same Line in Java.html-Bm7W9ISd.js"),__vite__mapDeps([593,1])),meta:{d:1720224e6,l:"2024年7月6日",c:["Java","编程"],g:["Scanner","输入处理"],e:`
<h2>1. 引言</h2>
<p><em>Scanner</em> 类是Java中用于从控制台读取输入的有用工具。我们通常使用 <em>next()</em> 或 <em>nextLine()</em> 方法来逐行读取每个输入。然而，有时我们可能想要在同一行读取多个输入。</p>
<p><strong>在本教程中，我们将探索实现这一点的不同方式，例如使用空格或自定义分隔符，甚至使用正则表达式。</strong></p>
<h3>2.1. 使用空格作为分隔符</h3>
<p>在同一行读取多个输入的一种方法是使用空格作为分隔符。以下是一个示例：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"输入两个数字："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> num1 <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> num2 <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"您输入了 "</span> <span class="token operator">+</span> num1 <span class="token operator">+</span> <span class="token string">" 和 "</span> <span class="token operator">+</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:2.85,words:856},t:"Java中在同一行读取多个输入",y:"a"}}],["/posts/baeldung/2024-07-05/2024-07-05-Regular%20Expression%20%20%20z%20vs%20%20Z%20Anchors%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-05-Regular Expression   z vs  Z Anchors in Java.html-DHWUA-vQ.js"),__vite__mapDeps([594,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Regular Expressions","Java"],g:["regex","java","anchors"],e:`
<p>正则表达式是Java中用于匹配和操作文本的强大工具。它们允许我们指定模式以匹配文本中的特定字符、单词或短语。在Java中，正则表达式通过java.util.regex包得到支持。</p>
<p>此外，\\z和\\Z以及$是三个常见的正则表达式锚点，它们可以匹配字符串的结尾。</p>
<p><strong>在本教程中，我们将探讨这两种锚点的区别，它们的工作原理以及何时使用它们。</strong></p>
<p>正则表达式锚点是一个或多个字符的序列，可以指定文本中应该发生匹配的位置。</p>
<p><strong>所有\\z、\\Z和$都是正则表达式锚点，可以精确匹配字符串的结尾。但是，当字符串以行终止符（如换行符）结尾时，它们的行为不同。</strong></p>`,r:{minutes:4.86,words:1458},t:"Java正则表达式中的z和Z锚点对比",y:"a"}}],["/posts/baeldung/2024-07-05/2024-07-05-Securing%20Spring%20Boot%20API%20With%20API%20Key%20and%20Secret.html",{loader:()=>a(()=>import("./2024-07-05-Securing Spring Boot API With API Key and Secret.html-Of8F7UYh.js"),__vite__mapDeps([595,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Security","API Key"],g:["Spring Boot","Security","API Key"],e:`<hr>
<h1>使用API密钥和密钥保护Spring Boot API</h1>
<p>如果你正在使用Spring Security（特别是OAuth）实现，请务必查看《学习Spring安全》课程。</p>
<p><strong>&gt; &gt; 学习Spring</strong>
<strong>安全</strong></p>
<h2>1. 概述</h2>
<p>安全在REST API开发中扮演着至关重要的角色。一个不安全的REST API可以直接访问后端系统的敏感数据。因此，组织需要关注API安全。</p>
<p>Spring Security提供了多种机制来保护我们的REST API。其中之一是API密钥。API密钥是一个令牌，客户端在调用API时提供。</p>`,r:{minutes:5.2,words:1561},t:"使用API密钥和密钥保护Spring Boot API",y:"a"}}],["/posts/baeldung/2024-07-05/2024-07-05-Shared%20Secret%20Authentication%20in%20Spring%20Boot%20Application.html",{loader:()=>a(()=>import("./2024-07-05-Shared Secret Authentication in Spring Boot Application.html-T5I_hLdt.js"),__vite__mapDeps([596,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Boot","Spring Security"],g:["Shared Secret Authentication","Microservices"],e:`
<p>如果您正在处理Spring Security（特别是OAuth）实现，一定要看看《学习Spring安全》课程。</p>
<h2>1. 概述</h2>
<p>认证是设计安全微服务的基本方面。我们可以通过多种方式实现认证，比如使用基于用户凭证、证书或基于令牌的认证。</p>
<p>在本教程中，我们将学习如何为服务间通信设置认证。我们将使用Spring Security来实现解决方案。</p>
<h2>2. 自定义认证介绍</h2>
<p>使用身份提供者或密码数据库可能并不总是可行的，因为私有微服务不需要基于用户交互。然而，我们仍然应该保护应用程序免受任何无效请求的侵害，而不仅仅依赖于网络安全。</p>`,r:{minutes:5.51,words:1652},t:"Spring Boot应用中的共享密钥认证",y:"a"}}],["/posts/baeldung/2024-07-05/2024-07-05-Should%20We%20Create%20an%20Interface%20for%20Only%20One%20Implementation%20.html",{loader:()=>a(()=>import("./2024-07-05-Should We Create an Interface for Only One Implementation .html-jDoTrMcK.js"),__vite__mapDeps([597,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Design Patterns"],g:["Interfaces","Implementation"],e:`
<p>在本教程中，我们将探讨在Java中只为单一实现创建接口的实际影响。我们将讨论这种方法的优缺点，并通过代码示例来更好地理解这一概念。到本教程结束时，我们将对是否为单一实现使用接口有一个更清晰的视角。</p>
<h2>2. Java中接口的概念</h2>
<p>Java中的接口用于定义类之间的契约，指定任何实现接口的类必须实现的一组方法。这使我们能够在代码中实现抽象和模块化，使其更加易于维护和灵活。</p>
<p>例如，这里有一个名为_Animal_的接口，它有一个名为_makeSound()_的抽象方法：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>public interface Animal {
    String makeSound();
}
</code></pre></div>`,r:{minutes:5.64,words:1692},t:"只为单一实现创建接口是否合适？",y:"a"}}],["/posts/baeldung/2024-07-05/2024-07-05-Spring%20Boot%20Actuator%20Without%20Spring%20Boot.html",{loader:()=>a(()=>import("./2024-07-05-Spring Boot Actuator Without Spring Boot.html-DQnv8gql.js"),__vite__mapDeps([598,1])),meta:{d:16828992e5,l:"2023年5月1日",c:["Spring Boot","Actuator"],g:["Spring Boot Actuator","Spring Framework"],e:`
<h2>1. 概述</h2>
<p>Spring Boot 项目提供了创建独立基于 Spring 的应用程序以及支持云原生开发的功能。因此，它是 Spring 框架的一个非常有用的扩展。</p>
<p>有时，我们不想使用 Spring Boot，比如当我们将 Spring 框架集成到 Jakarta EE 应用程序中时，但我们仍然想从所谓的“可观测性”的生产就绪功能中受益，比如度量和健康检查。（我们可以在文章“Spring Boot 3 中的可观测性”中找到详细信息。）</p>
<p>由 Spring Boot Actuator 提供的可观测性特性是 Spring Boot 的一个子项目。在本文中，我们将找出如何将 Actuator 集成到不使用 Spring Boot 的应用程序中。</p>`,r:{minutes:2.97,words:890},t:"Spring Boot Actuator 在没有 Spring Boot 的情况下",y:"a"}}],["/posts/baeldung/2024-07-05/2024-07-05-What%20s%20the%20Difference%20between%20Scanner%20next%20%20%20and%20nextLine%20%20%20Methods%20.html",{loader:()=>a(()=>import("./2024-07-05-What s the Difference between Scanner next   and nextLine   Methods .html-BYmfBqAs.js"),__vite__mapDeps([599,1])),meta:{d:17201376e5,l:"2024年7月5日",c:["Java","Scanner"],g:["next()","nextLine()"],e:`<hr>
<h1>Java Scanner 类的 next() 和 nextLine() 方法有什么区别？</h1>
<p>在这篇简短的教程中，我们将强调 Scanner 类的 next() 和 nextLine() 方法之间的区别。尽管这两种方法乍一看可能非常相似，但它们实际上有很大的不同。</p>
<h2>1. 概述</h2>
<p>Scanner 类带有一组方法，这些方法通过将输入分解为多个标记来简化解析输入的过程。它通常用于从控制台和文件等不同来源读取输入数据。</p>
<h2>2. next() 方法</h2>
<p>通常，Scanner 通过使用分隔符模式将输入分解为标记，其默认值是任何空格。</p>`,r:{minutes:4.31,words:1292},t:"Java Scanner 类的 next() 和 nextLine() 方法有什么区别？",y:"a"}}],["/posts/baeldung/2024-07-05/2024-07-05-Working%20With%20Empty%20Stream%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-05-Working With Empty Stream in Java.html-B693CJ0E.js"),__vite__mapDeps([600,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Stream API"],g:["Java 8","Stream","Empty Stream"],e:`
<h2>1. 概述</h2>
<p>在这篇简短的教程中，我们将快速了解Java流（Stream）中的中间操作和终端操作，创建空流（Empty Stream）的一些方法，以及如何检查流是否为空。</p>
<h2>2. 流和流操作</h2>
<p>流（Stream）API是Java 8的一个主要特性。流是我们可以迭代并执行操作的元素序列。</p>
<p><strong>流操作特别分为两种类型——中间操作和终端操作。</strong> 中间操作和终端操作可以连接在一起形成流管道。</p>
<p>顾名思义，终端操作出现在流管道的末端，并返回一个结果，如<code>distinct()</code>或创建一个副作用，如<code>forEach()</code>。</p>`,r:{minutes:3.67,words:1102},t:"Java中处理空流的指南",y:"a"}}],["/posts/baeldung/2024-07-05/2024-07-05-Write%20Console%20Output%20to%20Text%20File%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-05-Write Console Output to Text File in Java.html-CDal3K6Z.js"),__vite__mapDeps([601,1])),meta:{d:17201376e5,l:"2024年7月5日",c:["Java","编程"],g:["Java","控制台输出","文件输出"],e:`
<p>在调试或向用户显示信息时，将输出打印到控制台是常见的做法。然而，有时可能需要将控制台输出保存到文本文件中，以便进一步分析或记录。</p>
<p>本教程将探讨如何在Java中将控制台输出重定向到文本文件。</p>
<h2>2. 准备</h2>
<p>当我们谈论将控制台输出写入文本文件时，可能有两种情况：</p>
<ul>
<li>仅文件 - 将所有输出重定向到文件。不会在控制台打印任何输出。</li>
<li>控制台和文件 - 输出同时写入控制台和文件。</li>
</ul>
<p>我们将在本教程中涵盖这两种情况。</p>
<p>在我们开始编码之前，让我们准备一些要写入控制台的文本。为了更容易测试，让我们将三行文本放入字符串列表中：</p>`,r:{minutes:3.57,words:1072},t:"Java中将控制台输出写入文本文件",y:"a"}}],["/posts/baeldung/2024-07-06/2024-07-06-A%20Guide%20to%20FlexyPool.html",{loader:()=>a(()=>import("./2024-07-06-A Guide to FlexyPool.html-DawhN1sd.js"),__vite__mapDeps([602,1])),meta:{d:16803072e5,l:"2023年4月1日",c:["Spring","FlexyPool"],g:["Spring Boot","H2","HikariCP"],e:`
<h2>1. 概述</h2>
<p>在本教程中，我们将学习如何使用 FlexyPool 与 Spring Boot 和 H2 结合 HikariCP。这是一个构建在主要连接池之上的强大连接池管理器。</p>
<h2>2. FlexyPool 是什么？</h2>
<p>连接池是现代 Web 应用程序的重要方面。因为它确保数据库连接在多个客户端之间共享。这就是该技术允许更快、更有效地访问数据库的方式。</p>
<p>然而，管理连接池可能是一个复杂且具有挑战性的任务。当客户端数量和应用程序复杂性增加时，这一点尤为明显。这正是 FlexyPool 派上用场的地方。</p>
<p>FlexyPool 是一个强大的连接池管理工具。实际上，它使管理数据库连接和优化性能变得容易。简单来说，FlexyPool 充当主要连接池的代理，如 Hikari、C3P0、DBCP2、Tomcat 和 Vibur。<strong>为了实现其目标，该库提供了指标和故障转移策略，以帮助按需调整给定池的大小</strong>：</p>`,r:{minutes:4.16,words:1248},t:"FlexyPool 使用指南",y:"a"}}],["/posts/baeldung/2024-07-06/2024-07-06-Add%20Custom%20Headers%20to%20a%20Kafka%20Message.html",{loader:()=>a(()=>import("./2024-07-06-Add Custom Headers to a Kafka Message.html-C4jYb96I.js"),__vite__mapDeps([603,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Kafka"],g:["Kafka","Java"],e:'\n<p>Apache Kafka是一个开源的分布式事件存储和容错的流处理系统。<strong>Kafka基本上是一个事件流平台，客户端可以发布和订阅事件流。</strong> 通常，生产者应用程序将事件发布到Kafka，而消费者订阅这些事件，从而实现发布-订阅模型。</p>\n<p>在本教程中，我们将学习如何使用Kafka生产者向Kafka消息添加自定义头。</p>\n<h3>2.1. 依赖项</h3>\n<p>首先，让我们将Kafka客户端Java库的Maven依赖项添加到我们项目的_pom.xml_文件中：</p>\n<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>`&lt;dependency&gt;`\n    `&lt;groupId&gt;`org.apache.kafka`&lt;/groupId&gt;`\n    `&lt;artifactId&gt;`kafka-clients`&lt;/artifactId&gt;`\n    `&lt;version&gt;`3.4.0`&lt;/version&gt;`\n`&lt;/dependency&gt;`\n</code></pre></div>',r:{minutes:4.19,words:1258},t:"在Kafka消息中添加自定义消息头",y:"a"}}],["/posts/baeldung/2024-07-06/2024-07-06-Analyze%20%20Generate%20and%20Transform%20Code%20Using%20Spoon%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-06-Analyze  Generate and Transform Code Using Spoon in Java.html-UjZ34QYN.js"),__vite__mapDeps([604,1])),meta:{d:1720224e6,l:"2024年7月6日",c:["Java","编程"],g:["Spoon","Java代码分析","Java代码转换"],e:`
<p>在本教程中，我们将展示如何使用Spoon库来解析、分析和转换Java源代码。</p>
<h2>2. Spoon概述</h2>
<p>在处理大型代码库时，我们通常需要为了特定目的而消化它们。例如：</p>
<ul>
<li>生成聚合报告</li>
<li>查找给定类的用法，包括通过复杂的继承链间接使用</li>
<li>发现潜在的漏洞</li>
<li>自动重构</li>
</ul>
<p>这个列表可以继续下去，但它们都有一个共同的模式。首先，它们需要我们扫描现有代码并为其构建内部表示。其次，我们将使用访问者模式或查询机制来查找我们感兴趣的元素。最后，我们将生成所需的输出。</p>
<p>Spoon库专注于前两个步骤，这样我们就可以专注于产生所需的结果。</p>`,r:{minutes:7.8,words:2340},t:"使用Spoon在Java中分析、生成和转换代码",y:"a"}}],["/posts/baeldung/2024-07-06/2024-07-06-Automatically%20Create%20Schemas%20for%20H2%20In%20Memory%20Database.html",{loader:()=>a(()=>import("./2024-07-06-Automatically Create Schemas for H2 In Memory Database.html-RnCT6iok.js"),__vite__mapDeps([605,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","H2 Database"],g:["H2","In-Memory Database","Schema Creation"],e:`
<p>H2数据库引擎是一个流行的基于Java的开源数据库。在本简短教程中，我们将学习如何为H2内存数据库自动创建一个模式。</p>
<h2>2. H2是什么？</h2>
<p><strong>H2数据库引擎是一个基于Java的数据库，它既符合SQL也符合JDBC标准</strong>。它具有一些使它与其他关系型数据库区别开来的特性：</p>
<ul>
<li>持久性：它可以作为一个纯粹的内存数据库运行，或使用文件系统。</li>
<li>模式：作为一个独立的服务器运行，或嵌入到另一个应用程序中。</li>
</ul>
<p>这两个特性使H2成为开发和测试目的的绝佳选择。然而，由于它的短暂性质，它也可能带来一些挑战。</p>`,r:{minutes:4.76,words:1427},t:"H2内存数据库自动创建模式",y:"a"}}],["/posts/baeldung/2024-07-06/2024-07-06-Best%20Practices%20for%20Passing%20Many%20Arguments%20to%20a%20Method%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-06-Best Practices for Passing Many Arguments to a Method in Java.html-D2tjBWpB.js"),__vite__mapDeps([606,1])),meta:{d:17203104e5,l:"2024年7月7日",c:["Java","编程实践"],g:["参数","设计模式","Java Bean","构建器模式"],e:`
<ol>
<li>概述</li>
</ol>
<p>在Java中向方法传递多个参数可能会很具有挑战性，特别是当参数数量很多或数据类型复杂时。在这些情况下，理解方法的目的和维护代码可能变得困难。</p>
<p>本文讨论了向Java方法传递多个参数的一些最佳实践。</p>
<ol start="2">
<li>问题陈述</li>
</ol>
<p>假设我们有一个具有多个参数的方法：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VehicleProcessor</span> <span class="token punctuation">{</span>
    <span class="token class-name">Vehicle</span> <span class="token function">processVehicle</span><span class="token punctuation">(</span><span class="token class-name">String</span> make<span class="token punctuation">,</span> <span class="token class-name">String</span> model<span class="token punctuation">,</span> <span class="token class-name">String</span> color<span class="token punctuation">,</span> <span class="token keyword">int</span> weight<span class="token punctuation">,</span> <span class="token keyword">boolean</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Vehicle</span><span class="token punctuation">(</span>make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> color<span class="token punctuation">,</span> weight<span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:6.93,words:2079},t:"Java中传递多个参数给方法的最佳实践",y:"a"}}],["/posts/baeldung/2024-07-06/2024-07-06-Boolean%20Converters%20in%20Hibernate%206.html",{loader:()=>a(()=>import("./2024-07-06-Boolean Converters in Hibernate 6.html-w-vJuIpF.js"),__vite__mapDeps([607,1])),meta:{d:1720224e6,l:"2024年7月6日",c:["Hibernate","Java"],g:["Hibernate 6","Boolean Converters"],e:`
<p>在本教程中，我们将学习如何在Hibernate 6中使用新添加的布尔转换器来映射我们领域模型中的布尔属性。Hibernate 6对类型系统进行了全面翻新。因此，更新移除了一些用于表示布尔值的现有类。</p>
<h2>2. 模型</h2>
<p>为了说明如何在Hibernate 6中使用布尔转换器，我们将在测试中使用H2数据库。首先，我们将使用SQL脚本创建一个数据库表：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>CREATE TABLE Question (
    id UUID,
    content VARCHAR,
    correctAnswer CHAR,
    shouldBeAsked CHAR,
    isEasy TINYINT,
    wasAskedBefore CHAR,
    PRIMARY KEY (id)
)
</code></pre></div>`,r:{minutes:3.77,words:1130},t:"Hibernate 6中的布尔转换器",y:"a"}}],["/posts/baeldung/2024-07-06/2024-07-06-Cancel%20an%20Ongoing%20Flux%20in%20Spring%20WebFlux.html",{loader:()=>a(()=>import("./2024-07-06-Cancel an Ongoing Flux in Spring WebFlux.html-DQPkIsOw.js"),__vite__mapDeps([608,1])),meta:{d:17203104e5,l:"2024年7月7日",c:["Spring WebFlux","Reactive Programming"],g:["WebFlux","Flux","Reactive Streams"],e:`
<p>在本文中，我们将讨论Spring WebFlux提供的取消正在进行的_Flux_的各种选项。首先，我们将快速概述响应式编程中的_Flux_。接下来，我们将探讨取消正在进行的_Flux_的必要性。</p>
<p>我们将查看Spring WebFlux提供的各种方法，以显式和自动方式取消订阅。我们将使用JUnit测试来驱动我们的简单示例，以验证系统的行为符合预期。最后，我们将看到如何在取消后执行清理工作，使我们能够将系统重置为取消后所需的状态。</p>
<p>让我们首先快速概述一下_Flux_。</p>
<h3>2. 什么是Flux？</h3>
<p><strong>Spring WebFlux是一个响应式Web框架，为构建异步、非阻塞应用程序提供了强大的功能</strong>。Spring WebFlux的一个关键特性是其处理fluxes的能力。_Flux_是一个响应式数据流，它可以发出零个或多个项目。它可以从各种来源创建，例如数据库查询、网络调用或内存集合。</p>`,r:{minutes:9.63,words:2889},t:"在Spring WebFlux中取消正在进行的Flux",y:"a"}}],["/posts/baeldung/2024-07-06/2024-07-06-Check%20if%20the%20First%20Letter%20of%20a%20String%20Is%20a%20Number.html",{loader:()=>a(()=>import("./2024-07-06-Check if the First Letter of a String Is a Number.html-Bw1RrVD1.js"),__vite__mapDeps([609,1])),meta:{d:1720224e6,l:"2024年7月6日",c:["Java","字符串处理"],g:["Java","正则表达式","Guava"],e:`
<p>在本简短教程中，我们将学习如何在Java中检查字符串的第一个字符是否为数字。</p>
<p>我们将首先探索使用JDK本身的方法。然后，我们将看到如何使用第三方库，如Guava，来实现相同的目标。</p>
<h3>使用JDK</h3>
<p>Java提供了多种方便的方法来检查字符串是否以数字开头。让我们仔细看看每个选项。</p>
<h4>使用charAt()</h4>
<p>实现我们目标的最简单方法是使用charAt()方法。</p>
<p>首先，我们将使用charAt(0)返回第一个字符：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">checkUsingCharAtMethod</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">char</span> c <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> c <span class="token operator">&gt;=</span> <span class="token char">'0'</span> <span class="token operator">&amp;&amp;</span> c \`<span class="token operator">&lt;=</span> <span class="token char">'9'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:3.82,words:1145},t:"检查字符串首字符是否为数字 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-06/2024-07-06-Comparing%20Two%20Byte%20Arrays%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-06-Comparing Two Byte Arrays in Java.html-BhDsjTOe.js"),__vite__mapDeps([610,1])),meta:{d:1720240658e3,c:["Java","Programming"],g:["byte arrays","array comparison","Java"],e:`
<p>在Java中，如果我们不正确地比较两个字节数组，可能会得到一个意想不到的结果。</p>
<p>所以，在这个快速教程中，我们将学习以值比较两个数组的正确方式。</p>
<h3>2. 问题介绍</h3>
<p>一个例子可以快速解释问题。假设我们有这样一个字符串：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">INPUT</span> <span class="token operator">=</span> <span class="token string">"I am a magic string."</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:3.45,words:1036},t:"Java中比较两个字节数组",y:"a"}}],["/posts/baeldung/2024-07-06/2024-07-06-Converting%20an%20AAR%20File%20to%20a%20JAR%20File.html",{loader:()=>a(()=>import("./2024-07-06-Converting an AAR File to a JAR File.html-CzbM_93x.js"),__vite__mapDeps([611,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Android","Java"],g:["AAR","JAR"],e:`
<ol>
<li>引言</li>
</ol>
<p>作为Android开发者，我们有时会遇到需要将AAR文件转换为JAR文件的情况。这通常发生在我们想要在Java项目中使用仅以AAR格式提供的库或模块时。</p>
<p>在本教程中，我们将学习将AAR文件转换为JAR文件的步骤。</p>
<ol start="2">
<li>AAR文件是什么？</li>
</ol>
<p><strong>AAR（Android ARchive）文件是Android操作系统中用于分发和共享库、资源和代码的打包文件格式。</strong></p>
<p>它类似于JAR（Java Archive）文件格式，但它包括了为Android应用程序提供的额外元数据，例如_AndroidManifest.xml_、资源文件、_res_文件夹（布局、值、可绘制的）、ProGuard规则等。</p>`,r:{minutes:4.28,words:1283},t:"将AAR文件转换为JAR文件 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-06/2024-07-06-Creating%20a%20Test%20Suite%20With%20JUnit.html",{loader:()=>a(()=>import("./2024-07-06-Creating a Test Suite With JUnit.html-DW82FIUa.js"),__vite__mapDeps([612,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","JUnit"],g:["JUnit","测试套件"],e:`
<p>JUnit是Java应用程序中最流行的测试框架之一，它提供了一种强大且灵活的方式来创建自动化单元测试。它的一个特性是能够<strong>创建测试套件，这允许我们将多个测试组合在一起</strong>。</p>
<p>在本教程中，我们将探讨如何使用JUnit创建测试套件。首先，我们将实现并运行一个简单的测试套件。之后，我们将探索一些配置，包括包含或排除某些测试。</p>
<p>众所周知，<strong>测试套件是一组放在一起的测试，并作为一个单独的单元运行</strong>。我们使用它们将测试组织成逻辑组，例如针对特定组件或应用程序功能的测试。我们还可以轻松地按特定顺序执行测试，或根据特定标准运行测试的子集。</p>`,r:{minutes:6.75,words:2024},t:"使用JUnit创建测试套件",y:"a"}}],["/posts/baeldung/2024-07-06/2024-07-06-Custom%20Protocol%20Mapper%20with%20Keycloak.html",{loader:()=>a(()=>import("./2024-07-06-Custom Protocol Mapper with Keycloak.html-kBQAoFFL.js"),__vite__mapDeps([613,1])),meta:{d:16806528e5,l:"2023年4月5日",c:["Keycloak","IAM"],g:["Keycloak","IAM","Custom Protocol Mapper"],e:`
<p>Keycloak是一个开源的身份和访问管理(IAM)解决方案，专注于现代应用程序和服务。当用户通过Keycloak进行身份验证时，服务器颁发的令牌包含有关经过身份验证的用户和令牌所颁发的客户端的重要信息。</p>
<p>Keycloak的令牌包含一些默认属性，例如_iss_（发行者）、<em>exp</em>（过期时间）、<em>sub</em>（主题）和_aud_（受众）。但很多时候，这些属性还不够，我们可能需要向令牌添加一些额外的信息。在这种情况下，我们使用协议映射器。</p>
<p>在本教程中，我们将展示<strong>如何在Keycloak授权服务器中添加自定义协议映射器</strong>。</p>`,r:{minutes:5.04,words:1513},t:"Keycloak中自定义协议映射器",y:"a"}}],["/posts/baeldung/2024-07-06/2024-07-06-Difference%20Between%20th%20text%20and%20th%20value%20in%20Thymeleaf.html",{loader:()=>a(()=>import("./2024-07-06-Difference Between th text and th value in Thymeleaf.html-BbDPXhL_.js"),__vite__mapDeps([614,1])),meta:{d:17203104e5,l:"2024年7月7日",c:["Java","Thymeleaf"],g:["th:text","th:value"],e:`
<p>Thymeleaf 是一个流行的服务器端 Java 模板引擎，允许我们创建动态网页。它提供了多个属性来将模型中的数据绑定到视图。</p>
<p>在这个简短的教程中，我们将探讨 Thymeleaf 中 th:text 和 th:value 属性的关键区别。</p>
<h2>2. th:text 属性</h2>
<p>Thymeleaf 中的 th:text 属性用于设置元素的文本内容。此外，它替换了标准的 HTML text 属性。因此，我们可以将其放在任何支持文本内容的 HTML 元素中，例如标题、段落、标签等。</p>
<p>此外，我们可以使用该属性来显示动态文本内容，例如网页上的标题。假设我们想在 HTML 页面上显示由控制器提供的 title 属性。</p>`,r:{minutes:2.9,words:869},t:"Thymeleaf 中 th:text 和 th:value 的区别",y:"a"}}],["/posts/baeldung/2024-07-06/2024-07-06-Encode%20Passwords%20With%20Spring%20Boot%20CLI.html",{loader:()=>a(()=>import("./2024-07-06-Encode Passwords With Spring Boot CLI.html-wkfX_nTw.js"),__vite__mapDeps([615,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Boot CLI","密码编码"],g:["Spring Security","OAuth"],e:`
<p>如果你正在开发Spring Security（尤其是OAuth）实现，一定要看看《学习Spring安全》课程：</p>
<p><strong>&gt;&gt; 学习Spring</strong>
<strong>安全</strong></p>
<h2><strong>1. 概述</strong></h2>
<p>Spring Boot CLI（命令行界面）是一个用于从命令提示符运行和测试Spring Boot应用程序的Spring Boot工具。这个工具提供了一个非常有用的功能，用于编码密码。<strong>这个工具的主要目的是避免暴露明文密码，并能够生成和使用编码密码。</strong></p>`,r:{minutes:3.18,words:954},t:"使用Spring Boot CLI编码密码",y:"a"}}],["/posts/baeldung/2024-07-06/2024-07-06-Find%20the%20Index%20of%20an%20Element%20in%20a%20Java%20Array.html",{loader:()=>a(()=>import("./2024-07-06-Find the Index of an Element in a Java Array.html-wNyjxSdM.js"),__vite__mapDeps([616,1])),meta:{d:1720224e6,l:"2024年7月6日",c:["Java","编程"],g:["数组","索引","Java 8"],e:`
<h2>1. 概述</h2>
<p>在本教程中，我们将讨论使用Java内置API和第三方库，通过代码示例查找数组元素索引的多种方法。这对于搜索、排序和修改数组等许多任务都非常有用。</p>
<h2>2. 使用_for_循环</h2>
<p>我们的第一个方法是使用_for_循环来查找数组中元素的索引，这是最简单的方法之一。</p>
<p><strong>基本思想是遍历输入数组并在每次迭代中检查元素。</strong> <strong>如果找到了元素，我们就返回当前索引。</strong></p>
<p>否则，如果我们在数组的末尾找不到元素，我们返回一个固定的常量值。这个固定值可以是任何我们事先知道的东西。我们使用它来表示元素在数组中未找到。</p>`,r:{minutes:6.05,words:1816},t:"在Java数组中查找元素的索引",y:"a"}}],["/posts/baeldung/2024-07-06/2024-07-06-Find%20the%20Longest%20Word%20in%20a%20Given%20String%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-06-Find the Longest Word in a Given String in Java.html-IDNM0Lgh.js"),__vite__mapDeps([617,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","String"],g:["Longest Word","Java String"],e:`
<h2>1. 概述</h2>
<p>在本教程中，我们将寻找一个句子中的一个或所有最长的单词。</p>
<p>一个句子是一组单词。我们将用Java的_String_来表示它。此外，我们假设每个非空白字符都是单词的一部分。最后，我们将强调技术边缘情况：null、空或空白的_String_没有最长的单词。</p>
<h2>2. 查找一个最长的单词</h2>
<p>首先，让我们找到句子中的最长单词。例如，在句子：“<em>This is a phrase with words</em>”，最长的单词是_phrase_。如果有多个单词具有相同的长度，任何一个都是可接受的答案。如果句子中没有单词，则没有结果。因此，我们的方法返回一个_Optional_：</p>`,r:{minutes:2.88,words:863},t:"在Java中查找给定字符串中的最长单词 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-06/2024-07-06-Generate%20UUIDs%20as%20Primary%20Keys%20With%20Hibernate.html",{loader:()=>a(()=>import("./2024-07-06-Generate UUIDs as Primary Keys With Hibernate.html-CyE77nEB.js"),__vite__mapDeps([618,1])),meta:{d:1720224e6,l:"2024年7月6日",c:["Java","Hibernate"],g:["UUID","JPA"],e:`
<h2>1. 引言</h2>
<p>UUID是数据库中相对常见的一种主键类型。它实际上是全局唯一的，这使得它成为分布式系统中ID类型的一个不错的选择。</p>
<p>在本教程中，我们将看看如何利用Hibernate和JPA为我们的实体生成UUID。</p>
<h2>2. JPA/Jakarta规范</h2>
<p>首先，我们来看看JPA提供了什么来解决这个问题。</p>
<p>自2022年发布的3.1.0版本以来，JPA规范为开发者提供了一个新的_GenerationType.UUID_，我们可以在_@GeneratedValue_注解中使用：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span>
<span class="token keyword">class</span> <span class="token class-name">Reservation</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Id</span>
    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">UUID</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">UUID</span> id<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> status<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> number<span class="token punctuation">;</span>

    <span class="token comment">// getter和setter</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:3.78,words:1133},t:"使用Hibernate生成UUID作为主键",y:"a"}}],["/posts/baeldung/2024-07-06/2024-07-06-Getting%20Pixel%20Array%20From%20Image%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-06-Getting Pixel Array From Image in Java.html-CXvaseqE.js"),__vite__mapDeps([619,1])),meta:{d:1720224e6,l:"2024年7月6日",c:["Java","图像处理"],g:["BufferedImage","像素数组","图像数据"],e:`
<h2>1. 概述</h2>
<p>在本教程中，我们将学习如何在Java中从一个BufferedImage实例获取包含图像信息（RGB值）的像素数组。</p>
<h2>2. BufferedImage类是什么？</h2>
<p>BufferedImage类是Image的一个子类，它描述了一个具有可访问缓冲区的图形图像。BufferedImage由ColorModel和Raster组成。</p>
<p>ColorModel描述了如何使用组件的组合作为值的元组来表示颜色。Java中的ColorModel类包含可以为特定像素返回颜色值的方法。例如，_getBlue(int pixel)_返回给定像素的蓝色值。</p>`,r:{minutes:3.36,words:1007},t:"在Java中从图像获取像素数组",y:"a"}}],["/posts/baeldung/2024-07-06/2024-07-06-Getting%20the%20Text%20That%20Follows%20After%20the%20Regex%20Match%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-06-Getting the Text That Follows After the Regex Match in Java.html-FZ53XSmd.js"),__vite__mapDeps([620,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Regex"],g:["Java","Regex","Text Extraction"],e:`
<hr>
<p>当在Java中处理文本数据时，通常需要使用正则表达式（也称为Regex）来提取特定的信息片段。然而，仅仅匹配正则表达式模式并不总是足够的。有时，我们可能需要提取正则表达式匹配后的文本。</p>
<p>在本教程中，我们将探讨如何在Java中实现这一点。</p>
<h2>2. 问题介绍</h2>
<p>首先，让我们通过一个例子快速理解问题。假设我们有一个字符串变量<code>INPUT1</code>：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">INPUT1</span> <span class="token operator">=</span> <span class="token string">"Some text, targetValue=Regex is cool"</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:7.14,words:2141},t:"在Java中使用正则表达式获取匹配后的文本",y:"a"}}],["/posts/baeldung/2024-07-06/2024-07-06-Guide%20to%20Swagger%20Parser.html",{loader:()=>a(()=>import("./2024-07-06-Guide to Swagger Parser.html-Eku4EBx1.js"),__vite__mapDeps([621,1])),meta:{d:17203104e5,l:"2024年7月7日",c:["Java","Swagger"],g:["OpenAPI","API文档"],e:`
<p>Swagger是一套用于设计、描述和记录RESTful API的工具集。</p>
<p>在本教程中，<strong>我们将探讨如何在Java中解析OpenAPI文档文件并提取其各种组件。</strong></p>
<h2>2. Swagger是什么？</h2>
<p>Swagger本质上是一套开源的规则、规范和工具集，用于开发和描述REST API。然而，随着新标准和规范的演变，这些规范现在被重命名为OpenAPI规范（OAS）。</p>
<p><strong>OpenAPI规范标准化了如何创建API设计文档。</strong> 它创建了一个我们可以轻松开发和使用API的RESTful接口。API规范有效地映射了与之相关的所有资源和操作。</p>`,r:{minutes:4.35,words:1306},t:"Swagger解析器指南",y:"a"}}],["/posts/baeldung/2024-07-06/2024-07-06-How%20to%20Persist%20a%20List%20of%20String%20in%20JPA%20.html",{loader:()=>a(()=>import("./2024-07-06-How to Persist a List of String in JPA .html-dXtRoaMw.js"),__vite__mapDeps([622,1])),meta:{d:1720224e6,l:"2024年7月6日",c:["JPA","Java"],g:["JPA","持久化","List```````````````<String>```````````````"],e:'\n<p>在本教程中，我们将讨论如何在JPA中持久化类型为List<code>&lt;String&gt;</code>的属性。我们将查看实现此目的的可能性，它们之间的区别，并通过示例解释它们的优势。</p>\n<h2>2. 示例</h2>\n<p>我们将使用一个名为library的实体作为模型，该实体具有自动生成的ID、一个名称、一个包含地址的List<code>&lt;String&gt;</code>，以及一个包含书名的List<code>&lt;String&gt;</code>：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"library"</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Library</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Id</span>\n    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">IDENTITY</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>\n\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n\n    <span class="token keyword">private</span> <span class="token class-name">List</span>```````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>``````````````` addresses <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">List</span>```````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>``````````````` books <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// getter, setter, 和构造函数</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:3.82,words:1147},t:"如何在JPA中持久化字符串列表？",y:"a"}}],["/posts/baeldung/2024-07-06/2024-07-06-In%20Place%20Modification%20of%20Map%20Entry%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-06-In Place Modification of Map Entry in Kotlin.html-CZ0fREut.js"),__vite__mapDeps([623,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin","Programming"],g:["Map","MutableMap","Kotlin"],e:`
<p>作为开发者，我们知道Map是一种重要的数据结构，我们可以用它来完成许多编程任务。一个典型的例子可能包括就地修改Map条目。</p>
<p>在本教程中，我们将探索在Kotlin中就地更改或修改Map条目的各种方法。</p>
<h3>使用_MutableMap_接口</h3>
<p>就地修改Map条目的最简单方法是使用_MutableMap_接口。这个接口扩展了_Map_接口，并提供了额外的方法来修改Map。</p>
<h4>2.1. 使用_put()_方法</h4>
<p><strong>要修改Map条目，我们可以使用_put()_方法，该方法替换与指定键关联的值</strong>：</p>`,r:{minutes:4.01,words:1204},t:"在Kotlin中就地修改Map条目的方法",y:"a"}}],["/posts/baeldung/2024-07-06/2024-07-06-Integer.parseInt%20scanner.nextLine%20%20%20%20and%20scanner.nextInt%20%20%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-06-Integer.parseInt scanner.nextLine    and scanner.nextInt   in Java.html-B1F3g3nT.js"),__vite__mapDeps([624,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Scanner"],g:["Java","Scanner","Integer.parseInt","nextInt"],e:`<hr>
<h1>Java中Scanner的Integer.parseInt(scanner.nextLine())和scanner.nextInt()的比较</h1>
<p>在Java中，我们可以使用<code>Integer.parseInt(Scanner.nextLine())</code>和<code>Scanner.nextInt()</code>两种方法来从<code>Scanner</code>读取整数。然而，这两种方法之间存在一些差异。</p>
<p>本教程将对它们进行比较并讨论它们之间的不同之处。</p>
<h3>使用<code>Integer.parseInt(scanner.nextLine())</code>和<code>scanner.nextInt()</code>读取整数</h3>`,r:{minutes:4.48,words:1343},t:"Java中Scanner的Integer.parseInt(scanner.nextLine())和scanner.nextInt()的比较",y:"a"}}],["/posts/baeldung/2024-07-06/2024-07-06-Introduction%20to%20Spring%20Modulith.html",{loader:()=>a(()=>import("./2024-07-06-Introduction to Spring Modulith.html-BJXEJciX.js"),__vite__mapDeps([625,1])),meta:{d:16824672e5,l:"2023年4月26日",c:["Spring","Modular Monolith"],g:["Spring Modulith","Modular Monolith Architecture"],e:`
<p>模块化单体架构是一种架构风格，我们的源代码是围绕模块的概念构建的。对于许多组织来说，模块化单体可能是一个极好的选择。它有助于保持一定程度的独立性，这有助于我们在需要时过渡到微服务架构。</p>
<p>Spring Modulith 是 Spring 的一个实验性项目，可用于构建模块化单体应用程序。它还支持开发人员构建结构良好、与领域对齐的 Spring Boot 应用程序。</p>
<p>在本教程中，我们将讨论 Spring Modulith 项目的基础，并展示如何在实践中使用它。</p>
<h2>2. 模块化单体架构</h2>
<p>我们有不同的方式来组织应用程序的代码。传统上，我们围绕基础设施设计软件解决方案。但是，当我们围绕业务设计应用程序时，可以更好地理解和维护系统。模块化单体架构就是这样一种设计。</p>`,r:{minutes:8.22,words:2467},t:"Spring Modulith 介绍",y:"a"}}],["/posts/baeldung/2024-07-06/2024-07-06-Is%20CompletableFuture%20Non%20blocking%20.html",{loader:()=>a(()=>import("./2024-07-06-Is CompletableFuture Non blocking .html-Bsb_pRW9.js"),__vite__mapDeps([626,1])),meta:{d:16828992e5,l:"2023年5月1日",c:["Java","CompletableFuture"],g:["非阻塞","异步编程"],e:`
<p>CompletableFuture 是 Java 8 中引入的 Concurrent API 的一部分，它是一个强大的类，用于编写非阻塞代码。但是它真的是非阻塞的吗？在本教程中，我们将检查 CompletableFuture 何时是阻塞的，何时是非阻塞的。</p>
<p>CompletableFuture 类实现了 Future 接口，并且是 CompletionStage 接口的主要实现。因此，它提供了近 50 种不同的方法来创建和执行异步计算。</p>
<p>为什么我们需要 CompletableFuture？使用 Future 接口，我们只能通过调用 get() 方法来检索结果。然而，这个方法是一个阻塞操作。换句话说，它将阻塞当前线程，直到任务的结果可用。</p>`,r:{minutes:4.49,words:1346},t:"CompletableFuture 是非阻塞的吗？",y:"a"}}],["/posts/baeldung/2024-07-06/2024-07-06-JAVA%20HOME%20vs%20PATH%20Environment%20Variables.html",{loader:()=>a(()=>import("./2024-07-06-JAVA HOME vs PATH Environment Variables.html-BmSk2MN0.js"),__vite__mapDeps([627,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","环境变量"],g:["JAVA_HOME","PATH"],e:`
<p>在本教程中，我们将探讨使用 <em>JAVA_HOME</em> 和 <em>PATH</em> 环境变量之间的主要区别。尽管大多数Java程序需要这两个变量才能成功编译和运行，但每个变量都服务于不同的目的。让我们逐一了解它们。</p>
<h2>2. <em>JAVA_HOME</em> 环境变量</h2>
<p><strong><em>JAVA_HOME</em> 环境变量指向 JDK 安装目录</strong>。随后，其他依赖Java的程序可以使用这个变量来访问 JDK/JRE 路径。</p>
<p>通常，Apache Tomcat 和其他 Java EE 应用程序服务器，以及 Maven 或 Gradle 等构建工具，使用 <em>JAVA_HOME</em> 作为命名约定来定位 Java。</p>`,r:{minutes:3.3,words:989},t:"JAVA_HOME 与 PATH 环境变量的区别",y:"a"}}],["/posts/baeldung/2024-07-06/2024-07-06-Lombok%20EqualsAndHashCode%20Annotation.html",{loader:()=>a(()=>import("./2024-07-06-Lombok EqualsAndHashCode Annotation.html-BnqVj4gF.js"),__vite__mapDeps([628,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Lombok"],g:["equals","hashCode"],e:`
<p>在本教程中，我们将讨论Lombok的@EqualsAndHashCode注解，该注解基于类的字段生成equals()和hashCode()方法。</p>
<h2>2. @EqualsAndHashCode的使用</h2>
<p>Lombok的@EqualsAndHashCode注解默认情况下为给定类生成equals()和hashCode()方法，使用所有非静态和非瞬态字段。</p>
<h3>3.1. 在字段级别使用@EqualsAndHashCode.Exclude排除字段</h3>
<p>我们可以使用@EqualsAndHashCode.Exclude注解指示Lombok从equals()和hashCode()方法的生成过程中排除一个字段。</p>`,r:{minutes:2.17,words:652},t:"Lombok的@EqualsAndHashCode注解详解",y:"a"}}],["/posts/baeldung/2024-07-06/2024-07-06-Overriding%20hashCode%20%20%20And%20equals%20%20%20For%20Records.html",{loader:()=>a(()=>import("./2024-07-06-Overriding hashCode   And equals   For Records.html-9wNAB96T.js"),__vite__mapDeps([629,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Records"],g:["hashCode","equals"],e:`
<p>Java 14引入了记录的概念，作为一种简便且更好的方式传递不可变数据对象。记录只具有一个类最基本的方法，构造函数和getter/setter，因此它是一种受限的类形式，类似于Java中的枚举。记录是一个纯数据载体，是一种用于传递数据的类，这些数据不会被修改。</p>
<p>在本教程中，我们将讨论如何重写记录的默认hashCode()和equals()实现。</p>
<p>Java对象类定义了equals()和hashCode()方法。由于Java中的所有类都继承自对象类，它们也有这些方法的默认实现。</p>
<p>equals()方法用于断言两个对象的等价性，其默认实现意味着如果两个对象具有相同的身份，它们就相等。hashCode()方法返回一个基于当前类实例的整数值，并与等价性的定义一起实现。</p>`,r:{minutes:4.54,words:1363},t:"Java记录中重写hashCode()和equals()方法",y:"a"}}],["/posts/baeldung/2024-07-06/2024-07-06-Overview%20of%20NLP%20Libraries%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-06-Overview of NLP Libraries in Java.html-kqxP--n7.js"),__vite__mapDeps([630,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["NLP","Java"],g:["Apache OpenNLP","Stanford CoreNLP"],e:`<hr>
<h1>Java中的NLP库概览</h1>
<p>自然语言处理（NLP）是人工智能（AI）的一个分支，它使计算机能够像人类一样理解书面或口头语言。在AI革命的这个时代，它有着多样的应用。</p>
<p>在本教程中，我们将探索Java中的不同NLP库，并看看如何使用Apache OpenNLP和Stanford CoreNLP实现一些NLP任务。</p>
<h2>2. NLP是什么？</h2>
<p>NLP使计算机能够以类似人类的方式处理文本和单词。它结合了计算语言学、统计学、深度学习和机器学习。</p>
<p>人类每天通过各种媒介在线相互交流。在这样做的过程中，他们分享了不同类型的数据，如文本、语音、图像等。这些数据对于理解人类行为和习惯至关重要。因此，它们被用来训练计算机模仿人类智能。</p>`,r:{minutes:6.86,words:2058},t:"Java中的NLP库概览",y:"a"}}],["/posts/baeldung/2024-07-06/2024-07-06-Print%20%20%20%20Quotes%20Around%20a%20String%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-06-Print    Quotes Around a String in Java.html-C1fGXFPy.js"),__vite__mapDeps([631,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","字符串处理"],g:["Java","字符串","引号"],e:`
<h2>1. 概述</h2>
<p>“Hello World!”可能是我们开始学习Java时看到的第一个Java示例。我们知道，如果我们将一个字符串对象传递给System.out.println()方法，Java就会在控制台输出该字符串。</p>
<p>然而，有时我们希望输出的字符串被引号包围（“...”）。在这个快速教程中，我们将探讨如何实现这一点。</p>
<h2>2. 使用两个转义引号字符串包装</h2>
<p>如果我们想要将字符串用引号（“...”）包裹，最直接的想法可能是将引号连接到给定文本的开头和结尾。</p>
<p>在Java中，当我们使用字符串值时，我们必须使用引号，例如System.out.println("Hello World!")。然而，我们不能像“”这样在字符串中放置引号字符。Java不接受它。因此，在这种情况下，<strong>我们必须在字符串中转义引号符号："\\""</strong>。</p>`,r:{minutes:3.57,words:1072},t:"在Java中打印带引号的字符串",y:"a"}}],["/posts/baeldung/2024-07-06/2024-07-06-Remove%20Punctuation%20From%20a%20String%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-06-Remove Punctuation From a String in Java.html-BVDhpkTx.js"),__vite__mapDeps([632,1])),meta:{d:1720247997e3,c:["Java","Text Processing"],g:["String Manipulation","Regular Expressions"],e:`
<p>在文本处理和分析中，从字符串中消除标点符号是一种常见做法。</p>
<p>在这个快速教程中，让我们探讨如何轻松地从给定的字符串中移除标点符号。</p>
<h2>2. 问题介绍</h2>
<p>假设我们有一个字符串：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">INPUT</span> <span class="token operator">=</span> <span class="token string">"It's 1 W o r d (!@#$%^&amp;*{}[];':\\")&lt;&gt;,."</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:3.92,words:1175},t:"在Java中从字符串中移除标点符号",y:"a"}}],["/posts/baeldung/2024-07-06/2024-07-06-Retrieve%20the%20Value%20of%20an%20HTML%20Input%20in%20Selenium%20WebDriver.html",{loader:()=>a(()=>import("./2024-07-06-Retrieve the Value of an HTML Input in Selenium WebDriver.html-FKtjloVo.js"),__vite__mapDeps([633,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Selenium WebDriver","Automation Testing"],g:["HTML Input","Selenium","WebDriver"],e:`<hr>
<h1>使用Selenium WebDriver检索HTML输入框的值</h1>
<p>自动化测试是软件开发的重要组成部分。Selenium是一个广泛使用的工具，它使用特定于浏览器的驱动程序来自动化Web应用程序的测试。</p>
<p>在本教程中，我们将学习如何设置Selenium项目，并从网页中检索HTML输入字段的值。</p>
<h2>2. Selenium WebDriver是什么？</h2>
<p>Selenium WebDriver是一个开源的自动化测试框架，它以本地方式驱动Web浏览器，像真实用户一样与它们交互。它支持一系列浏览器，包括Chrome、Firefox、Edge和Safari。</p>`,r:{minutes:3.42,words:1026},t:"使用Selenium WebDriver检索HTML输入框的值",y:"a"}}],["/posts/baeldung/2024-07-06/2024-07-06-Scoped%20Values%20in%20Java%2020.html",{loader:()=>a(()=>import("./2024-07-06-Scoped Values in Java 20.html-DW7De9HE.js"),__vite__mapDeps([634,1])),meta:{d:1720224e6,l:"2024年7月6日",c:["Java","编程"],g:["Java 20","Scoped Values"],e:`
<p>范围值使开发人员能够在线程内部和跨线程存储和共享不可变数据。这个新API是在Java 20中作为孵化器预览特性引入的，由JEP 439提出。</p>
<p>在本教程中，我们将首先将范围值与线程局部变量进行比较，后者是一个旧的API，具有类似的目的。然后，我们将看看如何应用范围值在线程之间共享数据，重新绑定值，以及在子线程中继承它们。接下来，我们将看看如何在经典Web框架中应用范围值。</p>
<p>最后，我们将看看如何在Java 20中启用这个孵化器特性以进行实验。</p>
<h2>2. 动机</h2>
<p>复杂的Java应用程序通常包含需要在它们之间共享数据的几个模块和组件。当这些组件在多个线程中运行时，开发人员需要一种在它们之间共享不可变数据的方式。</p>`,r:{minutes:7.31,words:2194},t:"Java 20中的范围值 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-06/2024-07-06-Self%20Injection%20With%20Spring.html",{loader:()=>a(()=>import("./2024-07-06-Self Injection With Spring.html-CmC0Acxr.js"),__vite__mapDeps([635,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring","Java"],g:["Spring Framework","Self-Injection"],e:`
<p>自我注入意味着一个Spring bean将自己作为依赖项注入。它使用Spring容器来获取自己的引用，然后使用该引用执行某些操作。</p>
<p>在这个简短的教程中，我们将看到如何在Spring中使用自我注入。</p>
<h2>2. 自我注入的使用案例</h2>
<p>自我注入最常见的使用案例是当需要将一个切面应用于一个自引用的方法或类时，绕过Spring AOP的限制。</p>
<p>假设我们有一个服务类执行一些业务逻辑，并且需要在该逻辑的一部分调用它自己的一个方法：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
        <span class="token function">doSomethingElse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Transactional</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomethingElse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.11,words:633},t:"Spring中的自我注入",y:"a"}}],["/posts/baeldung/2024-07-06/2024-07-06-Spring%20Boot%20H2%20JdbcSQLSyntaxErrorException%20expected%20%20identifier%20.html",{loader:()=>a(()=>import("./2024-07-06-Spring Boot H2 JdbcSQLSyntaxErrorException expected  identifier .html-COhQNz8o.js"),__vite__mapDeps([636,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Boot","H2 Database"],g:["SQL Syntax Error","Exception Handling"],e:`
<p>在这篇简短的教程中，我们将仔细研究异常_org.h2.jdbc.JdbcSQLSyntaxErrorException: SQL语句中预期的“标识符”的语法错误_。</p>
<p>首先，我们将阐明异常的主要原因。然后，我们将使用一个实际的例子来说明如何重现它，最后，如何解决问题。</p>
<h2>2. 原因</h2>
<p>在跳转到解决方案之前，让我们先理解这个异常。</p>
<p>通常，H2抛出_JdbcSQLSyntaxErrorException_来表示SQL语句中的语法错误。因此，"预期标识符"的消息表明SQL期望一个合适的标识符，而我们没有给出。</p>
<p><strong>这种异常最常见的原因是使用保留关键字作为标识符</strong>。</p>`,r:{minutes:3.33,words:1e3},t:"Spring Boot H2 JDBC SQLSyntaxErrorException：预期的“标识符”错误",y:"a"}}],["/posts/baeldung/2024-07-06/2024-07-06-StaleElementReferenceException%20in%20Selenium.html",{loader:()=>a(()=>import("./2024-07-06-StaleElementReferenceException in Selenium.html-okRc2l2z.js"),__vite__mapDeps([637,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Selenium","Web Testing"],g:["StaleElementReferenceException","Selenium WebDriver"],e:`
<h2>1. 概述</h2>
<p>在使用Selenium测试Web应用程序时，我们经常会遇到一个名为<strong>StaleElementReferenceException</strong>的常见错误。当我们引用一个过时的元素时，Selenium会抛出<strong>StaleElementReferenceException</strong>。一个元素由于页面刷新或DOM更新而变得过时。</p>
<p>在本教程中，我们将学习Selenium中的<strong>StaleElementReferenceException</strong>是什么以及为什么会发生。然后，我们将看看如何在我们的Selenium测试中避免这个异常。</p>`,r:{minutes:3.85,words:1156},t:"Selenium中的StaleElementReferenceException",y:"a"}}],["/posts/baeldung/2024-07-06/2024-07-06-Testing%20Ktor%20Controllers.html",{loader:()=>a(()=>import("./2024-07-06-Testing Ktor Controllers.html-CxYX0ZKz.js"),__vite__mapDeps([638,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin","Ktor"],g:["Testing","Ktor","API"],e:`
<p>在本教程中，我们将学习一种编写 Ktor 控制器测试的方法。我们将创建一个 Ktor API 进行测试，并且为了专注于测试，我们不会使用任何数据库。</p>
<h2>2. 应用设置</h2>
<p>让我们开始在我们的 Ktor 应用程序的 <em>build.gradle</em> 文件中导入 <em>ktor-server-core</em>、<em>ktor-server-netty</em> 和 <em>ktor-serialization-jackson</em> 依赖项：</p>
<div class="language-kotlin" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"io.ktor"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"ktor-server-core"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"2.3.5"</span></span><span class="token punctuation">)</span>
<span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"io.ktor"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"ktor-server-netty"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"2.3.5"</span></span><span class="token punctuation">)</span>
<span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"io.ktor"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"ktor-serialization-jackson"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"2.3.5"</span></span><span class="token punctuation">)</span>
</code></pre></div>`,r:{minutes:4.37,words:1310},t:"Ktor 控制器测试指南",y:"a"}}],["/posts/baeldung/2024-07-06/2024-07-06-URL%20Query%20Manipulation%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-06-URL Query Manipulation in Java.html-DjbeWbuK.js"),__vite__mapDeps([639,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Web Development"],g:["Java","URL Manipulation"],e:'<hr>\n<h1>Java中URL查询参数操作</h1>\n<p>在Java中，我们可以使用几种库来动态地向URL添加查询参数，同时保持URL的有效性。\n在本文中，我们将学习如何使用其中的三种。这三种执行完全相同的任务。因此，我们将看到生成的URL是相同的。</p>\n<h2>2. Java EE 7 UriBuilder</h2>\n<p><strong>最接近Java内置解决方案的是UriBuilder</strong>，它位于javax.ws.rs-api中，我们需要将其导入到我们的pom.xml中：</p>\n<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>```&lt;dependency&gt;```\n    ```&lt;groupId&gt;```javax.ws.rs```&lt;/groupId&gt;```\n    ```&lt;artifactId&gt;```javax.ws.rs-api```&lt;/artifactId&gt;```\n    ```&lt;version&gt;```2.1.1```&lt;/version&gt;```\n```&lt;/dependency&gt;```\n</code></pre></div>',r:{minutes:2.49,words:748},t:"Java中URL查询参数操作",y:"a"}}],["/posts/baeldung/2024-07-06/2024-07-06-Uploading%20File%20Using%20Selenium%20Webdriver%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-06-Uploading File Using Selenium Webdriver in Java.html-DjjtSxeP.js"),__vite__mapDeps([640,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Selenium"],g:["WebDriver","Java"],e:`
<p>Selenium WebDriver是一个可以自动化与Web浏览器的用户交互以测试Web应用程序的工具。它可以自动化文件上传、获取输入值、抓取HTML内容等过程。</p>
<p>在本教程中，我们将探讨如何使用Selenium中的_sendKeys()_方法上传文件。</p>
<h3>2. 使用_sendKeys()_上传文件</h3>
<p>简单来说，文件上传是许多Web应用程序的常见功能。然而，<strong>使用Selenium WebDriver测试文件上传可能会很棘手，因为它涉及到与操作系统的本地文件系统的交互。为了克服这个挑战，我们可以使用_sendKeys()_方法。</strong></p>`,r:{minutes:2.43,words:728},t:"使用Java中的Selenium WebDriver上传文件",y:"a"}}],["/posts/baeldung/2024-07-06/2024-07-06-Using%20OpenAI%20ChatGPT%20APIs%20in%20Spring%20Boot.html",{loader:()=>a(()=>import("./2024-07-06-Using OpenAI ChatGPT APIs in Spring Boot.html-HHQ_sjuK.js"),__vite__mapDeps([641,1])),meta:{d:16805664e5,l:"2023年4月4日",c:["Spring Boot","OpenAI"],g:["ChatGPT","API"],e:`
<p>在本教程中，我们将学习如何在Spring Boot中调用OpenAI ChatGPT API。我们将创建一个Spring Boot应用程序，通过调用OpenAI ChatGPT API生成对提示的响应。</p>
<p>在开始本教程之前，让我们先了解一下我们将在本教程中使用的OpenAI ChatGPT API。我们将调用创建聊天完成API来生成对提示的响应。</p>
<h3>2.1. API参数和认证</h3>
<p>让我们看看API的必填请求参数：</p>
<ul>
<li><strong>模型</strong> - 这是我们将向其发送请求的模型版本。有几个版本的模型可供选择。我们将使用_gpt-3.5-turbo_模型，这是公开可用的最新模型版本。</li>
<li><strong>消息</strong> - 消息是对模型的提示。每个消息需要两个字段：<strong>角色</strong>和<strong>内容</strong>。<strong>角色</strong>字段指定消息的发送者。在请求中将是“<strong>用户</strong>”，在响应中将是“<strong>助手</strong>”。<strong>内容</strong>字段是实际的消息。</li>
</ul>`,r:{minutes:4.74,words:1421},t:"在Spring Boot中使用OpenAI ChatGPT API",y:"a"}}],["/posts/baeldung/2024-07-06/2024-07-06-Working%20with%20Virtual%20Threads%20in%20Spring%206.html",{loader:()=>a(()=>import("./2024-07-06-Working with Virtual Threads in Spring 6.html-DxX1ayA0.js"),__vite__mapDeps([642,1])),meta:{d:1682208e6,l:"2023年4月23日",c:["Spring","Java"],g:["Virtual Threads","Spring Boot","Java 19"],e:`<hr>
<h1>在Spring 6中使用虚拟线程</h1>
<h2>1. 引言</h2>
<p>在本简短的教程中，我们将看到如何在Spring Boot应用程序中利用虚拟线程的强大功能。</p>
<p>由Project Loom引入，并作为Java 19的预览功能提供，虚拟线程现在是官方JDK 21发布的一部分。此外，Spring 6发布集成了这一令人敬畏的功能，并允许开发人员尝试使用它。</p>
<p>首先，我们将看到“平台线程”和“虚拟线程”之间的主要区别。接下来，我们将使用虚拟线程从头开始构建一个Spring Boot应用程序。最后，我们将创建一个小型测试套件，以查看简单Web应用程序的吞吐量是否有所提高。</p>`,r:{minutes:5.72,words:1717},t:"在Spring 6中使用虚拟线程",y:"a"}}],["/posts/baeldung/2024-07-07/2024-07-07-A%20Guide%20to%20%20Timeout%20Annotation%20in%20JUnit%205.html",{loader:()=>a(()=>import("./2024-07-07-A Guide to  Timeout Annotation in JUnit 5.html-DXkR4dAm.js"),__vite__mapDeps([643,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","JUnit 5"],g:["Timeout Annotation","Unit Test"],e:`
<p>在这篇简短的教程中，我们将使用 JUnit5 的 @Timeout 注解以声明式的方式来为单元测试设置超时时间。我们将讨论使用它的不同方式，然后我们将看到它如何与 @Parameterized 和 @Nested 测试进行交互。</p>
<p>我们可以将 JUnit5 的 @Timeout 注解标注在单元测试上，以指定它最多可以运行的秒数；如果超出这个值，测试将因 java.util.concurrent.TimeoutException 而失败：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token annotation punctuation">@Timeout</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">shouldFailAfterOneSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10_000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:3.12,words:937},t:"JUnit 5 中 @Timeout 注解指南",y:"a"}}],["/posts/baeldung/2024-07-07/2024-07-07-A%20Guide%20to%20Spring%20Cloud%20Azure%20Key%20Vault.html",{loader:()=>a(()=>import("./2024-07-07-A Guide to Spring Cloud Azure Key Vault.html-BVsC5O6c.js"),__vite__mapDeps([644,1])),meta:{d:16803072e5,l:"2023年4月1日",c:["Spring Cloud Azure","Azure Key Vault"],g:["Java","Azure","Spring"],e:`
<p>Azure Container Apps是一个完全托管的无服务器容器服务，它使您能够<strong>构建和部署现代化的、云原生的Java应用程序和微服务</strong>。它提供了简化的开发者体验，同时提供了容器的灵活性和可移植性。</p>
<p>当然，Azure Container Apps对我们的生态系统有着非常扎实的支持，从多种构建选项、托管的Java组件、原生度量指标、动态日志记录等等。</p>
<p>要了解更多关于Azure Container Apps上的Java特性，您可以在文档页面开始学习。</p>
<p>而且，您也可以在Azure Container Apps的GitHub页面上提问和留下反馈。</p>`,r:{minutes:9.05,words:2715},t:"使用Spring Cloud Azure集成Azure Key Vault",y:"a"}}],["/posts/baeldung/2024-07-07/2024-07-07-Accessing%20Methods%20Outside%20Companion%20Object%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-07-Accessing Methods Outside Companion Object in Kotlin.html-xtmiKEQN.js"),__vite__mapDeps([645,1])),meta:{d:16776288e5,l:"2023年3月1日",c:["Kotlin","Companion Object"],g:["Kotlin","Companion Object","Static Methods"],e:`
<h2>1. 引言</h2>
<p>在Kotlin中，伴生对象是我们在类内部创建的特殊对象，我们用它来定义静态方法和属性。尽管如此，有时我们可能希望从伴生对象内部访问在伴生对象之外声明的方法或属性。</p>
<p>在本教程中，我们将探索在伴生对象内部访问外部方法的各种方法。</p>
<h2>2. 使用外部类的引用</h2>
<p>要从伴生对象访问外部的方法，我们可以在伴生对象内定义一个对外部类的引用，并使用它来调用所需的方法：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>class OuterClass {
    companion object {
        val outerClass: OuterClass = OuterClass()
        fun companionMethod(): String {
            return outerClass.outerClassMethod()
        }
    }

    fun outerClassMethod(): String {
        return "这是伴生对象之外的一个方法"
    }
}
</code></pre></div>`,r:{minutes:4.76,words:1427},t:"Kotlin中在伴生对象之外访问方法 | Baeldung关于Kotlin",y:"a"}}],["/posts/baeldung/2024-07-07/2024-07-07-Buffer%20Overflows%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-07-Buffer Overflows in Java.html-DaYSjlNk.js"),__vite__mapDeps([646,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Security"],g:["Buffer Overflow","Java Security"],e:`
<p>在这篇文章中，我们将看到什么是缓冲区溢出以及它对我们系统构成的威胁。此外，我们还将看到Java对缓冲区溢出的处理方式。</p>
<h2>1. 概述</h2>
<h2>2. 什么是缓冲区溢出？</h2>
<p>缓冲区是RAM中用于存储临时数据的一部分。对于给定的程序，缓冲区大小通常是固定的。但如果程序尝试写入超过分配内存的数据会发生什么？这通常会导致缓冲区溢出。简单来说，<strong>缓冲区溢出指的是程序将内容写入缓冲区之外的内存</strong>（由于溢出）。缓冲区溢出可能导致意外行为以及软件安全威胁。</p>
<h2>3. Java的安全机制和特殊情况</h2>
<p>在C和C++等语言中，缓冲区溢出很常见。在这些语言中，有意或无意地覆盖内存很容易。然而，许多流行的语言已经采取了防范缓冲区溢出场景的措施。<strong>对于Java的特定情况，使用字符数组可以防止缓冲区溢出</strong>。</p>`,r:{minutes:2.48,words:744},t:"Java中的缓冲区溢出",y:"a"}}],["/posts/baeldung/2024-07-07/2024-07-07-Check%20if%20a%20Specified%20Key%20Exists%20in%20a%20Given%20S3%20Bucket%20Using%20Java.html",{loader:()=>a(()=>import("./2024-07-07-Check if a Specified Key Exists in a Given S3 Bucket Using Java.html-DaDd25ff.js"),__vite__mapDeps([647,1])),meta:{d:17203104e5,l:"2024年7月7日",c:["Java","AWS"],g:["S3","Java SDK"],e:`<hr>
<h1>如何使用Java检查Amazon S3存储桶中指定的键是否存在</h1>
<ol>
<li>引言</li>
</ol>
<p>在本教程中，我们将探讨<strong>如何使用Java检查Amazon S3存储桶中是否存在指定的键</strong>。</p>
<p>S3是一个流行的云存储服务，它提供了一个可扩展、安全且高度可用的平台，用于存储和检索数据。</p>
<p>对于开发者来说，知道一个特定的键是否存在是非常重要的，以便按需进行操作或访问。我们将通过设置AWS SDK并使用它来执行此检查的步骤。</p>
<ol start="2">
<li>Maven依赖项</li>
</ol>`,r:{minutes:2.75,words:825},t:"如何使用Java检查Amazon S3存储桶中指定的键是否存在",y:"a"}}],["/posts/baeldung/2024-07-07/2024-07-07-Convert%20Boolean%20to%20String%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-07-Convert Boolean to String in Java.html-1SQFwsyF.js"),__vite__mapDeps([648,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Programming"],g:["Java","Boolean to String"],e:`<hr>
<h1>Java中将布尔值转换为字符串</h1>
<h2>1. 概述</h2>
<p>我们经常需要在Java中将布尔值转换为字符串表示。例如，这在用户界面中显示值或将值写入文件或数据库时非常有用。</p>
<p>在这个快速教程中，我们将探讨将布尔值转换为字符串的各种方法。</p>
<h2>2. 问题介绍</h2>
<p>在Java中将布尔值转换为字符串是一个简单的任务。但是，正如我们所知，<strong>Java中有两种布尔类型：原始的_boolean_和对象_Boolean_</strong>。</p>
<p>原始_boolean_值和_Boolean_对象到字符串的转换非常相似。然而，有一些点我们应该考虑。</p>`,r:{minutes:3.28,words:983},t:"Java中将布尔值转换为字符串",y:"a"}}],["/posts/baeldung/2024-07-07/2024-07-07-Convert%20Integer%20to%20Hexadecimal%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-07-Convert Integer to Hexadecimal in Java.html-BUP0563o.js"),__vite__mapDeps([649,1])),meta:{d:17203104e5,l:"2024年7月7日",c:["Java","编程"],g:["整数转十六进制","Java"],e:`
<p>在本教程中，我们将学习如何在Java中将整数值转换为十六进制。我们将讨论使用代码示例的不同方法。</p>
<p>在深入一些代码示例之前，让我们了解整数到十六进制转换的工作原理。</p>
<p><strong>整数使用十进制基数(10)，即0到9的数字。然而，十六进制值由16个符号表示，0到9和A到F。</strong></p>
<p>在Java中将整数值转换为十六进制有多种方法。<strong>我们可以使用基于数学的方法、一些Java内置功能或第三方库。</strong> 我们将在以下各节中看到每一种方法。</p>
<h2>3. 原始方法</h2>
<p>首先，我们将使用一个简单的数学算法来转换我们的输入整数值：</p>`,r:{minutes:5.18,words:1554},t:"Java中将整数转换为十六进制的方法",y:"a"}}],["/posts/baeldung/2024-07-07/2024-07-07-Deserialize%20Generic%20Type%20with%20Jackson.html",{loader:()=>a(()=>import("./2024-07-07-Deserialize Generic Type with Jackson.html-C0p03e59.js"),__vite__mapDeps([650,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Jackson"],g:["JSON","Deserialization","Generic Type"],e:`
<p>Jackson是一个流行的Java库，用于将Java对象序列化成JSON以及反之。在某些情况下，Java对象可能使用泛型类型进行定义。</p>
<p>在本教程中，我们将展示如何使用Jackson将JSON字符串反序列化到泛型类型。</p>
<h2>2. 模型准备</h2>
<p>对于要反序列化的给定JSON字符串：</p>
<div class="language-json" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">"result"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token property">"firstName"</span><span class="token operator">:</span><span class="token string">"John"</span><span class="token punctuation">,</span><span class="token property">"lastName"</span><span class="token operator">:</span><span class="token string">"Lewis"</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.34,words:701},t:"使用Jackson反序列化泛型类型",y:"a"}}],["/posts/baeldung/2024-07-07/2024-07-07-Differences%20Between%20Classpath%20and%20Sourcepath.html",{loader:()=>a(()=>import("./2024-07-07-Differences Between Classpath and Sourcepath.html-BUy3Gebe.js"),__vite__mapDeps([651,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Tutorial"],g:["classpath","sourcepath"],e:`<hr>
<h1>Java中类路径（classpath）和源路径（sourcepath）的区别</h1>
<p>在Java中，我们经常遇到源路径（sourcepath）和类路径（classpath）这两个术语。尽管这两个术语乍一看可能很相似，但它们在程序的编译和执行中具有不同的功能。尽管它们都有助于定位文件，但它们有一些明显的区别。</p>
<p>在本教程中，我们将探讨源路径和类路径的细微差别，并了解它们在使用上的区别。</p>
<p>源路径是由编译器用来定位需要编译Java程序的源代码文件的。<strong>它指定了编译器在编译程序时应查找源文件的目录。</strong></p>
<p>如果源文件位于一个目录或多个目录中，它们在编译期间使用-sourcepath选项进行指定。</p>`,r:{minutes:3.03,words:909},t:"Java中类路径（classpath）和源路径（sourcepath）的区别",y:"a"}}],["/posts/baeldung/2024-07-07/2024-07-07-External%20Debugging%20With%20JMXTerm.html",{loader:()=>a(()=>import("./2024-07-07-External Debugging With JMXTerm.html-B7rW-MwV.js"),__vite__mapDeps([652,1])),meta:{d:17203104e5,l:"2024年7月7日",c:["Java","JMX"],g:["JMXTerm","调试"],e:`
<p>调试对开发者来说可能是一个耗时的过程。使调试过程更高效的一个方法是使用JMX（Java Management Extension），这是一项用于Java应用程序的监控和管理技术。</p>
<p>在本教程中，我们将探讨如何使用JMXTerm对Java应用程序执行外部调试。</p>
<p>JMX为Java应用程序提供了几种工具，例如JConsole、VisualVM和JMXTerm。JConsole是一个用于监控性能的图形化工具。VisualVM提供了高级调试和分析功能，并且需要插件才能与MBeans一起工作。<strong>虽然这些工具很有用，但JMXTerm是一个轻量级、灵活且命令行选项，可用于自动化。</strong></p>`,r:{minutes:6.21,words:1862},t:"使用JMXTerm进行外部调试",y:"a"}}],["/posts/baeldung/2024-07-07/2024-07-07-Fix%20Spring%20Data%20JPA%20Exception%20%20No%20Property%20Found%20for%20Type.html",{loader:()=>a(()=>import("./2024-07-07-Fix Spring Data JPA Exception  No Property Found for Type.html-DpoffC0k.js"),__vite__mapDeps([653,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Data JPA","Exception Handling"],g:["PropertyReferenceException","Spring Data","JPA"],e:`
<p>在这篇简短的文章中，我们将解释如何修复Spring Data JPA异常_"PropertyReferenceException: 未找到类型的属性"_。</p>
<p>首先，我们将解释导致此异常的主要原因。然后，我们将通过实际示例说明如何重现它，以及如何修复它。</p>
<h2>2. 原因</h2>
<p>在深入了解细节之前，让我们尝试理解异常的含义。</p>
<p>"未找到类型的属性"的堆栈跟踪简单地告诉我们，未找到指定的属性。当Spring Data无法访问不存在或未定义的属性时，会抛出此异常。</p>
<p>通常，Spring Data根据派生查询方法的名称自动生成SQL查询。因此，导致异常的最常见原因是<strong>使用无效属性定义查询方法</strong>。</p>`,r:{minutes:3.09,words:927},t:"解决Spring Data JPA异常：未找到类型的属性",y:"a"}}],["/posts/baeldung/2024-07-07/2024-07-07-Fix%20the%20JsonMappingException%20%20Can%20not%20deserialize%20instance%20of%20java.util.ArrayList%20from%20Object%20value%20%20token%20%20JsonToken.START%20OBJECT%20%20.html",{loader:()=>a(()=>import("./2024-07-07-Fix the JsonMappingException  Can not deserialize instance of java.util.ArrayList from Object value  token  JsonToken.START OBJECT  .html-B6h6Tb6P.js"),__vite__mapDeps([654,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Jackson"],g:["JsonMappingException","Deserialization"],e:`
<p>在这篇简短的教程中，我们将解释如何解决异常 <em>JsonMappingException: Can not deserialize instance of java.util.ArrayList from Object value (token <code>JsonToken.START_OBJECT</code>)</em>。</p>
<p>首先，我们将强调异常的主要原因。然后，我们将展示如何在实践中重现它，以及最终如何解决它。</p>
<h3>2. 理解异常</h3>
<p>通常，Jackson 在反序列化 JSON 字符串时抛出 <em>JsonMappingException</em> 来<strong>表示一个致命的映射错误</strong>。因此，堆栈跟踪 “<em>Can not deserialize instance of java.util.ArrayList</em>” 表明 Jackson 未能将 JSON 属性映射到 <em>ArrayList</em> 的一个实例。</p>`,r:{minutes:2.35,words:706},t:"解决 JsonMappingException：无法从对象值（token JsonToken.START_OBJECT）反序列化 java.util.ArrayList 实例 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-07/2024-07-07-Functional%20vs.%20Non%20Functional%20Testing.html",{loader:()=>a(()=>import("./2024-07-07-Functional vs. Non Functional Testing.html-BBZqsZRD.js"),__vite__mapDeps([655,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Software Testing"],g:["Functional Testing","Non-Functional Testing"],e:`
<h2>1. 引言</h2>
<p>在本文中，我们将探讨测试的基础知识。我们还将探讨功能测试与非功能测试之间的一些差异。最后，我们将讨论功能测试和非功能测试的类型。</p>
<h2>2. 测试及其重要性</h2>
<p>测试在软件开发生命周期中扮演着重要角色。它对于保护软件免受缺陷、漏洞和故障的侵害至关重要，并提供有保证的质量保证。此外，如果存在任何错误或错误，应该尽早识别并修复。测试帮助我们做到这一点。</p>
<p>我们根据要求评估软件并报告缺陷，使其可靠且健壮。如果软件不符合指定的要求，无论是功能还是非功能，它就毫无用处。此外，它必须始终有效地处理所有异常和边缘情况。软件测试对于提供高效、准确和可用的产品至关重要且不可避免。</p>`,r:{minutes:6.5,words:1951},t:"功能测试与非功能测试 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-07/2024-07-07-Generate%20the%20Same%20UUID%20From%20a%20String%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-07-Generate the Same UUID From a String in Java.html-iM7N1RGN.js"),__vite__mapDeps([656,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java"],g:["UUID","Java"],e:`
<p>我们经常需要在应用程序中为各种目的生成唯一标识符。生成唯一标识符的一种常用方法是使用通用唯一标识符（UUID）。</p>
<p>在本教程中，我们将探讨如何在Java中从字符串生成相同的UUID。</p>
<h2>2. 问题介绍</h2>
<p>当我们谈论从字符串生成UUID时，可能有两种情况：</p>
<ul>
<li>场景1 - 输入字符串是标准的UUID字符串格式。</li>
<li>场景2 - 给定的字符串是一个自由格式的字符串。</li>
</ul>
<p>接下来，我们将更详细地了解如何从字符串生成UUID对象。当然，我们将涵盖两种场景。</p>
<p>为了简化，我们将使用单元测试断言来验证每种方法是否能够产生预期的结果。</p>`,r:{minutes:3.59,words:1077},t:"在Java中从字符串生成相同的UUID",y:"a"}}],["/posts/baeldung/2024-07-07/2024-07-07-Generating%20Time%20Based%20UUIDs.html",{loader:()=>a(()=>import("./2024-07-07-Generating Time Based UUIDs.html-B2SjQj4f.js"),__vite__mapDeps([657,1])),meta:{d:17203104e5,l:"2024年7月7日",c:["Java","UUID"],g:["编程","技术"],e:`
<p>在本文中，我们将学习关于UUID和基于时间的UUID。</p>
<p><strong>我们将看到基于时间的UUID的优势和劣势，以及何时选择它们。</strong></p>
<p>我们还将探索并比较一些库，这些库将帮助我们实现生成UUID的不同算法。</p>
<p><strong>UUID代表通用唯一标识符。</strong> 它是一个128位的标识符，每次生成时都预期是唯一的。</p>
<p>我们使用它们来唯一地识别某些事物，即使该事物没有固有的标识符。我们可以在各种环境中使用它们，例如计算机系统、数据库和分布式系统，这些地方我们需要唯一地识别对象。</p>
<p>两个UUID相同的可能性如此之小，以至于被认为是统计上不可能的，这使得它们成为在分布式系统中识别对象的可靠方式。</p>`,r:{minutes:6.66,words:1997},t:"生成基于时间的UUID",y:"a"}}],["/posts/baeldung/2024-07-07/2024-07-07-Get%20All%20Cached%20Keys%20with%20Caffeine%20Cache%20in%20Spring%20Boot.html",{loader:()=>a(()=>import("./2024-07-07-Get All Cached Keys with Caffeine Cache in Spring Boot.html-BxHIj0M7.js"),__vite__mapDeps([658,1])),meta:{d:1720335486e3,e:`<p>标题：Spring Boot中使用Caffeine缓存获取所有键</p>
<hr>
<p>date: 2024-07-07
category:</p>
<ul>
<li>Spring Boot</li>
<li>Caching
tag:</li>
<li>Caffeine</li>
<li>Cache</li>
<li>Spring
head:</li>
<li>
<ul>
<li>meta</li>
<li>name: keywords
content: Spring Boot, Caffeine, Cache, Java</li>
</ul>
</li>
</ul>
<hr>
<h1>Spring Boot中使用Caffeine缓存获取所有键</h1>`,r:{minutes:2.52,words:755},t:"Spring Boot中使用Caffeine缓存获取所有键",y:"a"}}],["/posts/baeldung/2024-07-07/2024-07-07-How%20to%20Determine%20Date%20of%20the%20First%20Day%20of%20the%20Week%20Using%20LocalDate%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-07-How to Determine Date of the First Day of the Week Using LocalDate in Java.html-ARfhfXvn.js"),__vite__mapDeps([659,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","LocalDate"],g:["Java","LocalDate","Week","Date Calculation"],e:`
<p>在这篇简短的教程中，我们将讨论如何使用Java中的LocalDate输入来找到一周的第一天。</p>
<h2>2. 问题陈述</h2>
<p>我们经常需要找到一周的第一天来为业务逻辑建立一周的边界，例如为员工构建时间跟踪系统。</p>
<p>在Java 8之前，JodaTime库被用来找到一周的第一天。然而，在Java 8之后，不再提供相同的支持。因此，我们将看到如何使用java.time.LocalDate类提供的功能来找到一周的第一天。</p>
<h2>3. Calendar类</h2>
<p>我们可以使用java.util.Calendar类来追溯到一周中的某一天。首先，我们可以循环到我们定义的一周的开始（星期日/星期一）。</p>`,r:{minutes:3.31,words:994},t:"如何使用Java中的LocalDate确定一周的第一天",y:"a"}}],["/posts/baeldung/2024-07-07/2024-07-07-Implicit%20Wait%20vs%20Explicit%20Wait%20in%20Selenium%20Webdriver.html",{loader:()=>a(()=>import("./2024-07-07-Implicit Wait vs Explicit Wait in Selenium Webdriver.html-DxjDPIpX.js"),__vite__mapDeps([660,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Selenium","Webdriver"],g:["Implicit Wait","Explicit Wait"],e:`
<p>网页应用程序测试的一个挑战是处理网页的动态特性。网页可能需要时间来加载，元素可能在一段时间后才会出现。因此，Selenium提供了等待机制来帮助我们在继续测试执行之前等待元素出现、消失或可点击。</p>
<p>在本文中，我们将探讨等待类型的不同之处以及如何在Selenium中使用它们。我们将比较隐式等待与显式等待，并学习在Selenium测试中使用等待的一些最佳实践。</p>
<h2>2. Selenium中的等待类型</h2>
<p>Selenium提供了多种等待机制来帮助我们等待元素出现、消失或可点击。这些等待机制可以分为三种类型：隐式等待、显式等待和流畅等待。</p>
<p>对于我们的测试用例，我们将为我们的页面定位器定义一些常量，我们将使用它们来浏览网页：</p>`,r:{minutes:6.61,words:1982},t:"Selenium Webdriver中的隐式等待与显式等待 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-07/2024-07-07-Integrate%20AWS%20Secrets%20Manager%20in%20Spring%20Boot.html",{loader:()=>a(()=>import("./2024-07-07-Integrate AWS Secrets Manager in Spring Boot.html-B87s-kE9.js"),__vite__mapDeps([661,1])),meta:{d:17203104e5,l:"2024年7月7日",c:["Spring Boot","AWS Secrets Manager"],g:["AWS","Secrets Manager","Spring Boot"],e:`
<p>在这个教程中，我们将把 Spring Boot 应用程序与 AWS Secrets Manager 集成起来，以便检索数据库凭据和其他类型的密钥，例如 API 密钥。</p>
<p>AWS Secrets Manager 是一项 AWS 服务，使我们能够安全地存储、轮换和管理凭据，例如数据库、API 密钥、令牌或我们想要管理的任何其他密钥。</p>
<p>我们可以区分两种类型的密钥——一种严格用于数据库凭据，另一种更通用，用于任何其他类型的密钥。</p>
<p>使用 AWS Secrets Manager 的一个好例子是为我们的应用程序提供一组凭据或 API 密钥。</p>
<p>保持密钥的一个推荐方式是以 JSON 格式。此外，如果我们想使用密钥轮换功能，我们必须使用 JSON 结构。</p>`,r:{minutes:5.45,words:1634},t:"将 AWS Secrets Manager 集成到 Spring Boot 中",y:"a"}}],["/posts/baeldung/2024-07-07/2024-07-07-Java%20Helper%20vs.%20Utility%20Classes.html",{loader:()=>a(()=>import("./2024-07-07-Java Helper vs. Utility Classes.html-Dxglg4P-.js"),__vite__mapDeps([662,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Programming"],g:["helper class","utility class"],e:`
<p>在本教程中，我们将探讨Java中的辅助类（helper class）和工具类（utility class）之间的区别。我们首先检查每种类的含义以及如何创建它们。</p>
<p>辅助类提供了Java程序整体运行所需的功能。辅助类<strong>包含其他类用来执行重复任务的方法，这些任务并不是应用程序的核心目的</strong>。</p>
<p>正如其名，它们通过提供一些功能来帮助其他类，这些功能补充了这些类所提供的服务。</p>
<p>它们包含实现平凡和重复任务的方法，使整个代码库模块化，并且可以在多个类中重用。</p>
<p>辅助类可以被实例化，并且可能包含实例变量、实例和静态方法。</p>`,r:{minutes:5.04,words:1511},t:"Java 中的辅助类与工具类",y:"a"}}],["/posts/baeldung/2024-07-07/2024-07-07-Loading%20Multiple%20YAML%20Configuration%20Files%20in%20Spring%20Boot.html",{loader:()=>a(()=>import("./2024-07-07-Loading Multiple YAML Configuration Files in Spring Boot.html-fAFod_jE.js"),__vite__mapDeps([663,1])),meta:{d:17203104e5,l:"2024年7月7日",c:["Spring Boot","YAML"],g:["Spring Boot","YAML","Configuration"],e:`
<p>当设计一个Spring Boot应用程序时，我们通常希望使用外部配置来定义我们的应用程序属性。这让我们可以使用相同的代码跨不同环境。在某些情况下，我们可能希望即使对于同一个环境，也将属性定义在多个YAML配置文件中。</p>
<p>在本教程中，<strong>我们将学习在创建Spring Boot应用程序时加载多个YAML配置文件的两种方法</strong>。</p>
<h3>2.1. YAML设置</h3>
<p>我们的第一个文件列出了学生名单。我们将把它命名为_application-students.yml_并将其放置在_./src/main/resources_目录中：</p>`,r:{minutes:2.95,words:884},t:"在Spring Boot中加载多个YAML配置文件",y:"a"}}],["/posts/baeldung/2024-07-07/2024-07-07-OffsetDateTime%20Serialization%20With%20Jackson.html",{loader:()=>a(()=>import("./2024-07-07-OffsetDateTime Serialization With Jackson.html-Cu5fGz5x.js"),__vite__mapDeps([664,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Jackson"],g:["OffsetDateTime","Serialization"],e:`
<p>在本教程中，我们将探讨如何使用Jackson序列化OffsetDateTime。</p>
<p><strong>OffsetDateTime是ISO-8601日历系统中带有UTC/格林尼治标准时间偏移的日期时间的不可变表示。</strong> 例如，2023-10-31T01:30+01:00表示2023年10月31日的最后一分钟的日期时间，与UTC有一小时的偏移。</p>
<p>默认情况下，Jackson不序列化OffsetDateTime，因为它是Java 8日期时间类型。让我们看看如何启用它。</p>
<h3>2.1. 依赖项</h3>
<p>首先，让我们通过向我们的pom.xml添加Jackson databind依赖项来开始：</p>`,r:{minutes:4.31,words:1294},t:"Jackson中OffsetDateTime的序列化",y:"a"}}],["/posts/baeldung/2024-07-07/2024-07-07-Parsing%20Date%20Strings%20with%20Varying%20Formats.html",{loader:()=>a(()=>import("./2024-07-07-Parsing Date Strings with Varying Formats.html-CfuJ0yMN.js"),__vite__mapDeps([665,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","日期时间"],g:["Java日期解析","SimpleDateFormat","DateTimeFormatterBuilder","Apache Commons DateUtils","Joda Time"],e:`
<p>有时候，我们需要解析可能以多种不同格式提供的日期字符串，如‘yyyy/MM/dd’、‘yyyy-MM-dd’或‘dd-MM-yyyy’。在本教程中，我们将展示一些解析不同日期模式的选项。首先，我们将尝试使用标准的Java库：<em>SimpleDateFormat</em> 和 <em>DateTimeFormatterBuilder</em> 来解决解析问题。然后，我们将检查第三方库Apache Commons <em>DateUtils</em> 和 Joda Time。</p>
<h2>2. 使用 <em>SimpleDateFormat</em></h2>
<p>首先，我们使用Java的 <em>SimpleDateFormat</em> 来解析具有多种格式的日期。一开始，我们定义一个可能的日期格式列表，并循环遍历它们，直到找到一个与我们的_String_ 匹配的格式。当匹配时，我们返回一个 <em>java.util.Date</em>。否则，我们返回 <em>null</em>：</p>`,r:{minutes:3.18,words:953},t:"解析具有不同格式的日期字符串",y:"a"}}],["/posts/baeldung/2024-07-07/2024-07-07-Possible%20Root%20Causes%20for%20High%20CPU%20Usage%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-07-Possible Root Causes for High CPU Usage in Java.html-DLN_s2va.js"),__vite__mapDeps([666,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Performance"],g:["CPU","Troubleshooting"],e:`
<p>在本教程中，我们将处理Java程序中的高CPU使用率问题。我们将探讨潜在的根本原因以及如何排查这些场景。</p>
<h2>2. 什么是高CPU使用率</h2>
<p>在我们进一步讨论之前，我们必须定义我们认为的高CPU使用率是什么。毕竟，这个指标取决于程序正在做什么，并且可能会有很大的波动，甚至高达100%。</p>
<p>对于本文，我们将考虑这样一些情况：Windows任务管理器或Unix/Linux的<code>top</code>命令显示CPU使用率在90-100%之间长时间（从几分钟到几小时）的持续使用。此外，这种使用应该是不合理的——换句话说，程序不应该在进行密集的工作。</p>`,r:{minutes:5.91,words:1774},t:"Java程序高CPU使用率的可能根本原因",y:"a"}}],["/posts/baeldung/2024-07-07/2024-07-07-Private%20Constructors%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-07-Private Constructors in Kotlin.html-s0g-wodz.js"),__vite__mapDeps([667,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin","Programming"],g:["Kotlin","Private Constructors"],e:`
<p>在Java中，私有构造函数有效地阻止了外部代码使用该构造函数创建类的实例。私有构造函数用途广泛，可以用于实现单例和建造者模式等设计模式，以及静态工厂方法。</p>
<p>在这个快速教程中，我们来探索如何在Kotlin中声明私有构造函数。</p>
<p>在Kotlin中，<strong>一个私有构造函数在声明它的类之外是不可见的，无论声明的类是顶级类还是内部/嵌套类。</strong> 换句话说，外部代码无法调用私有构造函数。</p>
<p>私有构造函数由<strong>在构造函数声明前加上private修饰符</strong>来表示。下面的例子可以清楚地说明这一点：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>class Student private constructor(val name: String, val age: Int) {
    companion object {
        fun createInstance(pair: Pair\`\`&lt;String, Int&gt;\`\`): Student {
            return Student(pair.first.uppercase(), pair.second)
        }
    }
}
</code></pre></div>`,r:{minutes:3.5,words:1049},t:"Kotlin中的私有构造函数",y:"a"}}],["/posts/baeldung/2024-07-07/2024-07-07-Remove%20Entity%20with%20Many%20to%20Many%20Relationship%20in%20JPA.html",{loader:()=>a(()=>import("./2024-07-07-Remove Entity with Many to Many Relationship in JPA.html-CeDrn4ve.js"),__vite__mapDeps([668,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["JPA","多对多关系"],g:["JPA","多对多","实体删除"],e:`
<p>在本教程中，我们将习如何在JPA中从多对多关系中删除实体。</p>
<p>多对多关系是一种两个实体通过一个额外的连接表相连的关系。为了有效地映射这些实体，我们应该遵循一些指导原则。</p>
<p><strong>首先，在定义多对多关系时，我们应该考虑使用_Set_而不是_List_。</strong> 作为JPA实现的Hibernate不会以高效的方式从_List_中删除实体。</p>
<p>当使用_List_时，Hibernate会从连接表中删除所有实体，然后插入剩余的实体。这可能会导致性能问题。我们可以通过使用_Set_来轻松避免这个问题。</p>
<p><strong>其次，我们不应该在映射中使用_CascadeType.REMOVE_，因此也不应该使用_CascadeType.ALL_。</strong></p>`,r:{minutes:4.39,words:1318},t:"在JPA中删除多对多关系的实体",y:"a"}}],["/posts/baeldung/2024-07-07/2024-07-07-Resilience4j%20Events%20Endpoints.html",{loader:()=>a(()=>import("./2024-07-07-Resilience4j Events Endpoints.html-BZxIgRx8.js"),__vite__mapDeps([669,1])),meta:{d:17203104e5,l:"2024年7月7日",c:["Spring Boot","Resilience4j"],g:["Resilience4j","Spring Boot","Circuit Breaker","Retry","Rate Limiter","Bulkhead","Time Limiter"],e:`
<p>在本文中，我们将探讨 Resilience4j 用于其提供的弹性机制的内部事件，以及在 SpringBoot 应用程序中列出这些事件的端点是什么。</p>
<p>我们将重用我们关于 Spring Boot 中 Resilience4j 指南的文章中的项目，来展示 Resilience4j 如何在执行器端点下列出不同的模式事件。</p>
<h2>2. 模式事件</h2>
<p>该库使用事件来驱动弹性模式的行为（允许或拒绝调用），作为一种通信机制。此外，事件为监控和可观察性提供了有价值的详细信息，同时也有助于故障排除。</p>
<p>此外，断路器、重试、限流器、舱壁和时间限制器实例发出的事件分别存储在循环事件消费者缓冲区中。缓冲区的大小可以根据 <code>eventConsumerBufferSize</code> 属性进行配置，默认为 100 个事件。</p>`,r:{minutes:3.73,words:1119},t:"Resilience4j 事件端点",y:"a"}}],["/posts/baeldung/2024-07-07/2024-07-07-Retrying%20Requests%20using%20Apache%20HttpClient.html",{loader:()=>a(()=>import("./2024-07-07-Retrying Requests using Apache HttpClient.html-BDUcXjaz.js"),__vite__mapDeps([670,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","HttpClient"],g:["Retry","Apache HttpClient"],e:`
<p>在本教程中，我们将探讨在使用Apache HttpClient时如何重试HTTP请求。我们还将探索库的默认重试行为以及如何配置它。</p>
<h2>2. 默认重试策略</h2>
<p>在我们深入默认行为之前，我们将创建一个测试类，其中包含HttpClient实例和请求计数器：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApacheHttpClientRetryUnitTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Integer</span> requestCounter<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">CloseableHttpClient</span> httpClient<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@BeforeEach</span>
    <span class="token keyword">void</span> <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        requestCounter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@AfterEach</span>
    <span class="token keyword">void</span> <span class="token function">tearDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>httpClient <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            httpClient<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:4.25,words:1276},t:"使用Apache HttpClient重试请求",y:"a"}}],["/posts/baeldung/2024-07-07/2024-07-07-Reuse%20StringBuilder%20for%20Efficiency.html",{loader:()=>a(()=>import("./2024-07-07-Reuse StringBuilder for Efficiency.html-4L3CrWVz.js"),__vite__mapDeps([671,1])),meta:{d:17203104e5,l:"2024年7月7日",c:["Java","Performance"],g:["StringBuilder","Efficiency"],e:`
<p>在本教程中，我们将讨论是否应该重用StringBuilder以提高效率。我们将指导您如何重用StringBuilder并解释其好处。</p>
<h3>2. 好处</h3>
<p>重用StringBuilder实例可以帮助优化应用程序的内存使用和速度。</p>
<h4>2.1. 优化对象创建</h4>
<p>在Java中实例化新对象在内存和CPU使用方面可能代价昂贵。由于字符串是不可变的，使用StringBuilder来连接不同的字符串通常可以避免不必要的对象创建。重用StringBuilder本身也可以避免与内存分配和垃圾回收相关的额外开销。</p>
<h4>2.2. 改善性能</h4>`,r:{minutes:3.93,words:1180},t:"重用StringBuilder以提高效率",y:"a"}}],["/posts/baeldung/2024-07-07/2024-07-07-SAML%20with%20Spring%20Boot%20and%20Spring%20Security.html",{loader:()=>a(()=>import("./2024-07-07-SAML with Spring Boot and Spring Security.html-BfOjASFR.js"),__vite__mapDeps([672,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Security","SAML"],g:["Spring Boot","Spring Security","SAML2"],e:`
<p>如果您正在实现Spring Security（特别是OAuth），请务必查看《学习Spring安全》课程。</p>
<p><strong>&gt;&gt; 学习Spring</strong>
<strong>安全</strong></p>
<h2>1. 概述</h2>
<p>在本教程中，我们将使用Spring Boot设置SAML2。SAML是一种长期受信任的技术，用于实现安全应用程序。设置SAML需要多方配置，因此过程有些复杂。我们需要在我们的服务提供商和身份提供商之间来回几次，因此需要耐心地按照逐步指南进行。让我们深入了解创建我们工作应用程序的每个步骤。</p>
<h2>2. 设置服务提供商（SP）</h2>`,r:{minutes:6.69,words:2007},t:"Spring Boot和Spring Security中的SAML",y:"a"}}],["/posts/baeldung/2024-07-07/2024-07-07-Search%20Users%20With%20Keycloak%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-07-Search Users With Keycloak in Java.html-C68jaBVZ.js"),__vite__mapDeps([673,1])),meta:{d:17203968e5,l:"2024年7月8日",c:["Java","Keycloak"],g:["Keycloak","用户搜索"],e:`
<p>Keycloak 是一个第三方的身份和访问管理解决方案，可以帮助我们将认证和授权集成到我们的应用程序中。</p>
<p>在本教程中，我们将看到一些在 Keycloak 中搜索用户的例子。</p>
<h2>2. Keycloak 配置</h2>
<p>首先，我们需要配置 Keycloak。让我们创建一个名为 <em>baeldung</em> 的初始管理员用户，密码为 <em>secretPassword</em>。其次，我们需要一个领域来工作。让我们使用当我们启动 Keycloak 时已经存在的 <em>master</em> 领域。</p>
<p>最后，我们需要一个客户端，我们可以从我们的 Spring Boot 应用程序中使用。对于这个例子，让我们使用默认创建的 <em>admin-cli</em> 客户端。</p>`,r:{minutes:7.9,words:2371},t:"Keycloak 在 Java 中搜索用户",y:"a"}}],["/posts/baeldung/2024-07-07/2024-07-07-The%20Difference%20Between%20junit%20vintage%20engine%20and%20junit%20jupiter%20engine.html",{loader:()=>a(()=>import("./2024-07-07-The Difference Between junit vintage engine and junit jupiter engine.html-CkCFJUH5.js"),__vite__mapDeps([674,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","JUnit"],g:["JUnit 5","Testing"],e:`
<p>JUnit测试框架是测试Java应用程序时最受欢迎的工具之一。随着JUnit 5的发布，现在为开发人员提供了两种测试引擎供选择。然而，关于_junit-vintage-engine_和_junit-jupiter-engine_存在一些混淆。</p>
<p>在本教程中，我们将探讨这两个引擎之间的主要区别，并讨论它们的优点和缺点。</p>
<p>_junit-vintage-engine_旨在为JUnit的旧版本编写的测试提供支持，例如JUnit 3和JUnit 4。这个引擎提供了与旧版JUnit的向后兼容性。此外，它允许使用旧测试，同时利用JUnit 5的新功能。</p>
<p>_junit-vintage-engine_的一个关键好处是为旧测试提供了一致的测试环境。此外，它与较新的JUnit测试良好地协同工作。这使得逐步迁移测试到JUnit 5变得容易，而无需一次性完成全部迁移。_junit-vintage-engine_还支持广泛的测试运行器和框架，使其易于与现有的开发工作流程集成。</p>`,r:{minutes:2.49,words:748},t:"JUnit Vintage Engine与JUnit Jupiter Engine的区别",y:"a"}}],["/posts/baeldung/2024-07-07/2024-07-07-Unidirectional%20One%20to%20Many%20and%20Cascading%20Delete%20in%20JPA.html",{loader:()=>a(()=>import("./2024-07-07-Unidirectional One to Many and Cascading Delete in JPA.html-CX4zxSZG.js"),__vite__mapDeps([675,1])),meta:{d:17203968e5,l:"2024年7月8日",c:["Spring JPA","数据库"],g:["JPA","级联删除","单向一对多"],e:`
<h2>1. 引言</h2>
<p>在本教程中，我们将探索JPA在执行单向一对多关系实体之间的级联删除功能。我们将简要解释在此背景下级联删除的含义。然后，我们将使用一个简单的例子来演示JPA如何实现所需的结果。最后，我们将在内存H2数据库上进行集成测试，以验证该过程是否正确工作。</p>
<h2>2. 单向一对多关系</h2>
<p>从本质上讲，在关系数据模型中，单向一对多关系是两种表之间的一种关系类型，其中一个表在另一个表中有多个相关记录。然而，第二个表并不直接与第一个表相关。这意味着关系只在一个方向上流动。</p>
<p>转到JPA，当一个实体对相关实体的集合有引用时，可以建立两个实体之间的单向一对多关系。然而，我们不能从相关实体回溯到第一个实体。通常，包含引用的实体称为父实体，被引用的实体称为子实体。</p>`,r:{minutes:4.81,words:1443},t:"JPA中单向一对多关系及级联删除",y:"a"}}],["/posts/baeldung/2024-07-07/2024-07-07-Use%20Mapper%20in%20Another%20Mapper%20with%20Mapstruct%20and%20Java.html",{loader:()=>a(()=>import("./2024-07-07-Use Mapper in Another Mapper with Mapstruct and Java.html-B4bPwbsa.js"),__vite__mapDeps([676,1])),meta:{d:17203104e5,l:"2024年7月7日",c:["Java","MapStruct"],g:["编程","映射"],e:`
<h2>1. 概述</h2>
<p>MapStruct 是一个库，它帮助我们在处理 Java Beans 映射时最小化样板代码。它仅使用提供的接口生成映射器。</p>
<p>在本教程中，我们将学习如何构建由简单映射器构建的复杂映射器并映射嵌套结构。</p>
<h2>2. 数据</h2>
<p>我们将把 <em>Article</em> 类映射到 DTO 实例。<em>Article</em> 包含一些简单字段，但也包含类型为 <em>Person</em> 的作者字段。我们也将把这个字段映射到相应的 DTO。以下是源类：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Getter</span>
<span class="token annotation punctuation">@Setter</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Article</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Person</span> author<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.73,words:519},t:"使用MapStruct和Java在另一个Mapper中使用Mapper",y:"a"}}],["/posts/baeldung/2024-07-07/2024-07-07-Using%20Spy%20in%20MockK.html",{loader:()=>a(()=>import("./2024-07-07-Using Spy in MockK.html-CTHfZDtr.js"),__vite__mapDeps([677,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin","MockK"],g:["Mocking","Spies","Unit Testing"],e:`
<h2>1. 引言</h2>
<p>模拟是单元测试的一个重要方面。它允许我们隔离组件，确保代码库的每个部分都能按预期工作。在Kotlin中，有一个强大的测试框架叫做MockK，它提供了一个称为间谍（spies）的特性。间谍是一种高级用例，我们可以用模拟框架来观察真实对象。</p>
<p>在本教程中，我们将探讨MockK中间谍的概念以及它们如何增强我们的单元测试过程。</p>
<h2>2. 理解模拟和间谍</h2>
<p>在我们深入间谍之前，让我们简要回顾一下模拟的概念。<strong>在单元测试中，模拟是创建模仿真实对象行为的假对象</strong>。这允许开发人员在不依赖依赖对象的实际实现的情况下测试组件的隔离。我们可以使用<code>mockk&lt;&gt;</code>创建一个模拟：</p>`,r:{minutes:4.73,words:1420},t:"MockK中使用Spy的指南",y:"a"}}],["/posts/baeldung/2024-07-08/2024-07-08-API%20First%20Development%20with%20Spring%20Boot%20and%20OpenAPI%203.0.html",{loader:()=>a(()=>import("./2024-07-08-API First Development with Spring Boot and OpenAPI 3.0.html-Dp1Aqak9.js"),__vite__mapDeps([678,1])),meta:{d:17203968e5,l:"2024年7月8日",c:["Spring Boot","OpenAPI"],g:["API-First Development","Agile Development"],e:`
<h2>1. 引言</h2>
<p>软件工程行业越来越依赖于Web API。云计算和HTTP的日益使用可能解释了这一点。</p>
<p>软件开发团队必须确保他们设计的API既有帮助又易于用户使用。<strong>传统开发方法中的主要挑战是在同时设计API契约和实现新产品的业务逻辑时保持敏捷性。</strong></p>
<p>在本文中，我们将介绍使用Spring Boot和OpenAPI 3.0的API优先开发。<strong>这种方法通过及时的API设计反馈、快速失败流程和并行工作，提高了团队的沟通和敏捷性。</strong></p>
<h2>2. 什么是OpenAPI规范</h2>
<p>OpenAPI规范（OAS）标准化了如何创建API设计文档。使用OAS的API优先方法的典型工作流程如下：</p>`,r:{minutes:4.45,words:1334},t:"使用Spring Boot和OpenAPI 3.0进行API优先开发 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-08/2024-07-08-Add%20Field%20to%20an%20Existing%20MongoDB%20Bson%20Filter%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-08-Add Field to an Existing MongoDB Bson Filter in Java.html-DdObJIVL.js"),__vite__mapDeps([679,1])),meta:{d:17203968e5,l:"2024年7月8日",c:["MongoDB","Java"],g:["BSON","Filter","Java Driver"],e:`
<p>MongoDB是一个流行的分布式、开源的NoSQL文档存储引擎。它基本上是一个将数据存储在称为BSON（二进制JavaScript对象表示）的JSON格式类型的数据库。MongoDB中以BSON数据存储的文档被组织成集合。</p>
<p>在本教程中，我们将讨论可以用于向现有MongoDB BSON过滤器添加字段的不同方法。然后，我们将使用MongoDB Java驱动程序来检查它们的相应实现。</p>
<h2>2. 数据库初始化</h2>
<p>在我们继续之前，让我们首先创建一个新的数据库和一个示例集合。我们将使用这些来演示我们所有的代码示例。</p>
<p>让我们创建一个名为_baeldung_的数据库：</p>`,r:{minutes:4.88,words:1465},t:"在Java中向现有MongoDB BSON过滤器添加字段",y:"a"}}],["/posts/baeldung/2024-07-08/2024-07-08-Anemic%20vs.%20Rich%20Domain%20Objects.html",{loader:()=>a(()=>import("./2024-07-08-Anemic vs. Rich Domain Objects.html-C9Hu04Ft.js"),__vite__mapDeps([680,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Software Engineering"],g:["Domain-Driven Design","Object-Oriented Programming"],e:`
<p>在本文中，我们将探讨贫血和丰富领域模型之间的区别。我们将首先定义什么是丰富对象，并将其与贫血对象进行对比。从那里开始，我们将检查一个实际的代码示例，并通过封装数据和为我们的领域模型建立一个强大的API来逐步增强其设计。</p>
<p>让我们首先理解丰富和贫血对象是什么。在个人博客上，Robert C. Martin，《Clean Code》的作者，讨论了贫血对象的概念，称它们为“数据结构”。他通过声明：“类使函数可见，同时使数据隐含。数据结构使数据可见，同时使函数隐含。”来强调数据结构和对象之间的根本区别。</p>
<p>简单来说，丰富对象隐藏了其底层数据，并且只公开一组公共方法与之交互。相比之下，贫血对象和数据结构揭示了它们的数据，并依赖外部组件进行操作。</p>`,r:{minutes:6.44,words:1931},t:"贫血模型与丰富领域对象 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-08/2024-07-08-Authenticating%20Users%20with%20AzureAD%20in%20Spring%20Boot.html",{loader:()=>a(()=>import("./2024-07-08-Authenticating Users with AzureAD in Spring Boot.html-BBOsXDYK.js"),__vite__mapDeps([681,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Boot","AzureAD"],g:["Spring Security","OAuth","OIDC"],e:`
<p>Azure Container Apps是一个完全托管的无服务器容器服务，它使您能够<strong>构建和部署现代的、</strong> <strong>云原生的Java应用程序和微服务</strong>。它提供了简化的开发者体验，同时提供了容器的灵活性和可移植性。</p>
<p>当然，Azure Container Apps对我们的生态系统有着真正坚实的支持，从多种构建选项、受管理的Java组件、本地指标、动态日志记录等等。</p>
<p>要了解更多关于Azure Container Apps上的Java特性，您可以在文档页面开始。</p>
<p>而且，您还可以在Azure Container Apps GitHub页面上提问和留下反馈。</p>`,r:{minutes:9.93,words:2978},t:"使用AzureAD在Spring Boot中验证用户",y:"a"}}],["/posts/baeldung/2024-07-08/2024-07-08-Can%20Stream.collect%20%20%20Return%20the%20null%20Value%20.html",{loader:()=>a(()=>import("./2024-07-08-Can Stream.collect   Return the null Value .html--ZByjg6K.js"),__vite__mapDeps([682,1])),meta:{d:17203968e5,l:"2024年7月8日",c:["Java","Stream API"],e:`
<p>在Java 8中引入的一个显著新特性是Stream API。它还附带了一系列的_收集器_（Collectors），允许我们调用_Stream.collect()<em>方法将流中的元素收集到所需的集合中，比如_List</em>、<em>Set</em>、_Map_等。</p>
<p>在本教程中，我们将讨论_collect()_方法是否可以返回_null_值。</p>
<h2>2. 问题介绍</h2>
<p>“Stream的_collect()_方法可以返回_null_吗？”这个问题有两个含义：</p>
<ul>
<li>当我们使用标准收集器时，是否需要对_null_进行检查？</li>
<li>如果我们真的希望_collect()<em>方法返回_null</em>，是否可能？</li>
</ul>`,r:{minutes:6.89,words:2066},t:"Stream.collect() 可以返回 null 值吗？",y:"a"}}],["/posts/baeldung/2024-07-08/2024-07-08-Change%20Swagger%20UI%20URL%20prefix.html",{loader:()=>a(()=>import("./2024-07-08-Change Swagger UI URL prefix.html-G9t0MLxZ.js"),__vite__mapDeps([683,1])),meta:{d:17203968e5,l:"2024年7月8日",c:["Spring Boot","Swagger"],g:["Swagger-UI","URL Prefix"],e:`
<h2>1. 概述</h2>
<p>作为优秀的开发者，我们知道文档对于构建REST API至关重要，因为它帮助API的用户无缝工作。如今，大多数Java开发者都在使用Spring Boot。截至今日，有两种工具可以通过Springfox和SpringDoc简化Swagger API文档的生成和维护。</p>
<p>在本教程中，<strong>我们将讨论如何通过这些工具默认提供的Swagger-UI URL前缀进行修改。</strong></p>
<h2>2. 使用Springdoc更改Swagger UI URL前缀</h2>
<p>首先，我们来查看如何使用OpenAPI 3.0设置REST API文档。</p>`,r:{minutes:2.78,words:833},t:"修改Swagger-UI URL前缀 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-08/2024-07-08-Check%20if%20an%20Enum%20Value%20Contains%20a%20Given%20String%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-08-Check if an Enum Value Contains a Given String in Kotlin.html-DIykeIeS.js"),__vite__mapDeps([684,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin","Enums"],g:["Kotlin","Enum","String"],e:`
<p>枚举是Kotlin中的一项强大功能，它允许程序员定义一组命名常量。它们通常用于表示一个封闭的值集合，比如一周的天数或一年中的月份。有时，我们可能需要检查某个字符串值是否包含在枚举中。</p>
<p>在本教程中，我们将探讨在Kotlin中检查枚举值是否包含给定字符串的多种方法。</p>
<h2>2. 枚举类定义</h2>
<p>在本教程中，我们将查看各种方法和技术，以检查枚举值是否包含某个字符串。首先，我们定义我们的枚举常量：</p>
<div class="language-kotlin" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">enum</span> <span class="token keyword">class</span> DaysOfWeek <span class="token punctuation">{</span>
    MONDAY<span class="token punctuation">,</span> TUESDAY<span class="token punctuation">,</span> WEDNESDAY<span class="token punctuation">,</span> THURSDAY<span class="token punctuation">,</span> FRIDAY<span class="token punctuation">,</span> SATURDAY<span class="token punctuation">,</span> SUNDAY

    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span>
        <span class="token keyword">val</span> names <span class="token keyword">by</span> lazy <span class="token punctuation">{</span> DaysOfWeek<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">{</span> it<span class="token punctuation">.</span>name <span class="token punctuation">}</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:5.07,words:1520},t:"在Kotlin中检查枚举值是否包含给定字符串",y:"a"}}],["/posts/baeldung/2024-07-08/2024-07-08-Configuring%20Spring%20Cloud%20FeignClient%20URL.html",{loader:()=>a(()=>import("./2024-07-08-Configuring Spring Cloud FeignClient URL.html-C9F8oZdK.js"),__vite__mapDeps([685,1])),meta:{d:17203968e5,l:"2024年7月8日",c:["Spring Cloud","Feign Client"],g:["Spring Cloud","Feign Client","Configuration"],e:`
<p>在本文中，我们将探讨如何为Feign客户端接口提供目标URL。</p>
<h2>2. 概览</h2>
<p>为了快速开始，我们将使用JSONPlaceholder网站提供的_Albums, Posts_和_Todos_对象的模拟响应。</p>
<p>让我们看看_Album_类：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Album</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> userId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>

    <span class="token comment">// 标准getter和setter</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:4.25,words:1274},t:"配置Spring Cloud FeignClient的URL",y:"a"}}],["/posts/baeldung/2024-07-08/2024-07-08-Convert%20a%20Collection%20Into%20an%20ArrayList%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-08-Convert a Collection Into an ArrayList in Kotlin.html-Rl529Mwj.js"),__vite__mapDeps([686,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin"],g:["Collection","ArrayList"],e:'\n<h2>1. 引言</h2>\n<p>在Kotlin中，我们使用集合来存储和操作一组相关对象。具体来说，<em>Collection_接口是集合层次结构的根，并且有几个类实现了它，比如_List_和_Set</em>。然而，有时我们可能需要将一个集合转换为_ArrayList_。</p>\n<p>在本教程中，我们将探索一些在Kotlin中将_Collection_转换为_ArrayList_的方法。</p>\n<h2>2. 使用_for_循环和_add()_方法</h2>\n<p>将集合转换为_ArrayList_的一个直接方法是使用_for()_循环和_add()_方法：</p>\n<div class="language-kotlin" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Test</span>\n<span class="token keyword">fun</span> <span class="token function">`使用for循环和add方法将Collection转换为ArrayList`</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">val</span> collection<span class="token operator">:</span> Collection````````<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span>```````` <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Kotlin"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Java"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Scala"</span></span><span class="token punctuation">)</span>\n    <span class="token keyword">val</span> arrayList <span class="token operator">=</span> ArrayList````````<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span>````````<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span>element <span class="token keyword">in</span> collection<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token function">arrayListOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Kotlin"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Java"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Scala"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> arrayList<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:3.52,words:1057},t:"Kotlin中将集合转换为ArrayList的方法 | Baeldung关于Kotlin的教程",y:"a"}}],["/posts/baeldung/2024-07-08/2024-07-08-Convert%20a%20Number%20to%20a%20Letter%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-08-Convert a Number to a Letter in Java.html-BAhVFr9C.js"),__vite__mapDeps([687,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Programming"],g:["Java","Convert","ASCII"],e:`<ul>
<li></li>
</ul>
<h1>Java中将数字转换为字母</h1>
<h2>1. 概述</h2>
<p>通常，当我们谈论将一个整数转换为字符时，我们会基于目标字符的ASCII码来进行转换。</p>
<p>然而，在本教程中，我们将探讨一个不同的场景，即将一个整数值转换为字母字符。</p>
<h2>2. 问题介绍</h2>
<p>我们知道英文字母表中有26个字母：A, B, C, …, X, Y, Z。</p>
<p>现在，假设我们接收到一个整数。我们的任务是根据以下规则将整数转换为英文字母：</p>
<ul>
<li>整数 -&gt; 字母：</li>
<li><em>0</em> -&gt; <em>A</em></li>
<li><em>1</em> -&gt; <em>B</em></li>
<li><em>2</em> -&gt; <em>C</em></li>
<li>…</li>
<li><em>10</em> -&gt; <em>K</em></li>
<li>…</li>
<li><em>23</em> -&gt; <em>X</em></li>
<li><em>24</em> -&gt; <em>Y</em></li>
<li><em>25</em> -&gt; <em>Z</em></li>
</ul>`,r:{minutes:3.66,words:1097},t:"Java中将数字转换为字母",y:"a"}}],["/posts/baeldung/2024-07-08/2024-07-08-Copying%20All%20Keys%20and%20Values%20From%20One%20Hashmap%20Onto%20Another%20Without%20Replacing%20Existing%20Keys%20and%20Values.html",{loader:()=>a(()=>import("./2024-07-08-Copying All Keys and Values From One Hashmap Onto Another Without Replacing Existing Keys and Values.html-DFEWCNio.js"),__vite__mapDeps([688,1])),meta:{d:17204832e5,l:"2024年7月9日",c:["Java","HashMap"],g:["Java","HashMap","复制","合并"],e:`
<p>在本教程中，我们将探讨如何在不替换目标HashMap中的键和值的情况下，将一个HashMap复制到另一个HashMap中的方法。Java中的HashMap是Map接口的哈希表实现，是一种支持存储键值对的数据结构。</p>
<h2>问题陈述</h2>
<p>考虑我们有两个HashMap，sourceMap和targetMap，它们包含国家及其首都城市作为键和值。我们希望将sourceMap的内容复制到targetMap中，以便我们只有一个包含所有国家及其首都城市的地图。复制应遵循以下规则：</p>
<ul>
<li>我们应该保留targetMap的原始内容</li>
<li>如果出现键的冲突，例如两个映射中都存在的城市，我们应该保留targetMap中的条目</li>
</ul>`,r:{minutes:4.21,words:1264},t:"将一个HashMap中的所有键和值复制到另一个HashMap中，不替换目标HashMap中的现有键和值",y:"a"}}],["/posts/baeldung/2024-07-08/2024-07-08-Custom%20Constructor%20in%20Java%20Records.html",{loader:()=>a(()=>import("./2024-07-08-Custom Constructor in Java Records.html-DoTe7ppG.js"),__vite__mapDeps([689,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Records"],g:["Java Records","Custom Constructor"],e:`<hr>
<h1>Java记录中的自定义构造器</h1>
<p>Java记录是Java 14中定义不可变数据容器的简洁方式。</p>
<p>在本文中，我们将探讨Java记录中的自定义构造器如何通过允许数据验证和错误处理，在对象初始化期间给我们提供更大的控制。</p>
<h3>2. 理解Java记录</h3>
<p>记录提供了简洁、易读的语法，强制执行不可变性，并<strong>生成常用方法的标准实现</strong>，如_toString()_、_hashCode()<em>和_equals()</em>。这些实现基于记录的组件，并且由编译器自动生成。</p>
<p>使用_record_关键字定义记录，后跟记录的名称和组件：</p>`,r:{minutes:5.42,words:1626},t:"Java记录中的自定义构造器",y:"a"}}],["/posts/baeldung/2024-07-08/2024-07-08-Debugging%20Spring%20Method%20Annotations%20Using%20Lightrun.html",{loader:()=>a(()=>import("./2024-07-08-Debugging Spring Method Annotations Using Lightrun.html-DqdBiViH.js"),__vite__mapDeps([690,1])),meta:{d:16752096e5,l:"2023年2月1日",c:["Spring","Debugging"],g:["Lightrun","Spring Method Annotations"],e:`
<h2>1. 引言</h2>
<p>我们最近查看了Lightrun——一个开发者可观测性平台——来看看它如何帮助我们更好地观察和理解我们的应用程序。</p>
<p>Spring大量使用注解来控制各种功能，这些功能可以以多种方式工作。这可以使编写应用程序变得非常高效——我们只需要添加适当的注解来启用功能。然而，当这不起作用时，诊断可能会令人沮丧，因为没有直接的方法调用可供查看。</p>
<p>在本文中，我们将探讨如何使用Lightrun诊断Spring注解在我们的应用程序中的工作方式。</p>
<h2>2. 调试事务边界</h2>
<p>Spring使用@Transactional注解来标记应在事务中执行的方法。这是通过Spring在构造时检测到注解并构建一个JDK代理来包装我们的类实例来实现的。这个代理负责处理所有事务边界的细节。这确保了事务在我们的方法之前开始，并在它完成后正确地清理。</p>`,r:{minutes:7.85,words:2356},t:"使用Lightrun调试Spring方法注解",y:"a"}}],["/posts/baeldung/2024-07-08/2024-07-08-Difference%20Between%20Fluent%20Interface%20and%20Builder%20Pattern%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-08-Difference Between Fluent Interface and Builder Pattern in Java.html-DPfbvnN6.js"),__vite__mapDeps([691,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","设计模式"],g:["Fluent Interface","Builder Pattern"],e:`
<p>在本教程中，我们将讨论Fluent Interface设计模式，并将其与Builder模式进行比较。在探索Fluent Interface模式时，我们会意识到Builder只是其中一种可能的实现方式。从这里开始，我们可以深入探讨设计Fluent API的最佳实践，包括不可变性和接口分离原则等考虑因素。</p>
<p><strong>Fluent Interface是一种面向对象的API设计，它允许我们以一种可读和直观的方式链式调用方法。</strong> 要实现它，我们需要声明返回同一类对象的方法。结果，我们将能够将多个方法调用链式起来。这种模式经常用于构建DSL（领域特定语言）。</p>`,r:{minutes:5.48,words:1645},t:"Fluent Interface与Builder模式在Java中的区别",y:"a"}}],["/posts/baeldung/2024-07-08/2024-07-08-Difference%20Between%20Javac%20and%20the%20Eclipse%20Compiler.html",{loader:()=>a(()=>import("./2024-07-08-Difference Between Javac and the Eclipse Compiler.html-CObqaF9V.js"),__vite__mapDeps([692,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","编程"],g:["javac","Eclipse"],e:`
<ol>
<li>概述</li>
</ol>
<p>众所周知，使用Java编程的一个关键步骤是将源代码编译成字节码。Java虚拟机（JVM）帮助执行Java字节码。Java编译器帮助将源代码翻译成字节码。</p>
<p>在本文中，我们将探讨Java中的两种流行的编译器以及它们之间的主要区别。</p>
<ol start="2">
<li>javac是什么？</li>
</ol>
<p>javac是一个Java程序，它接受Java源代码并生成JVM执行的字节码。它是官方的Java编译器。默认情况下，Java开发工具包（JDK）包含javac。</p>
<p>主要来说，它是一个命令行工具。它可以处理类和Java源文件中的注释。编译器支持多种命令行选项以自定义编译过程。它是一个独立的工具，我们也可以在集成开发环境（IDE）中使用它。</p>`,r:{minutes:2.76,words:828},t:"Javac和Eclipse编译器的区别",y:"a"}}],["/posts/baeldung/2024-07-08/2024-07-08-Different%20Ways%20to%20Create%20an%20Object%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-08-Different Ways to Create an Object in Java.html-CSuyZmPG.js"),__vite__mapDeps([693,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Object Creation"],g:["Java","OOP","Object Creation"],e:`
<p>Java是一种面向对象编程（OOP）语言。这意味着Java使用对象，通常组织在类中，来模拟状态和行为。</p>
<p>在本教程中，我们将探讨我们可以创建对象的一些不同方式。</p>
<p>在我们大多数示例中，我们将使用一个非常简单的_兔子_对象：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>public class Rabbit {
    String name = "";

    public Rabbit() {
    }

    // getter/setter
}
</code></pre></div>`,r:{minutes:5.74,words:1723},t:"Java中创建对象的不同方式",y:"a"}}],["/posts/baeldung/2024-07-08/2024-07-08-Download%20a%20Webpage%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-08-Download a Webpage in Java.html-DOl5pdb_.js"),__vite__mapDeps([694,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Web Scraping"],g:["Jsoup","HttpURLConnection"],e:`
<p>在某些应用中，我们可能需要从互联网下载网页并将其内容提取为字符串。一个流行的用例是网页抓取或内容解析。</p>
<p>在本教程中，我们将使用Jsoup和_HttpURLConnection_来下载一个示例网页。</p>
<h2>使用_HttpURLConnection_下载网页</h2>
<p>_HttpURLConnection_是_URLConnection_的一个子类。**它有助于连接到使用HTTP协议的统一资源定位符（URL）。**该类包含不同的方法来操作HTTP请求。</p>
<p>让我们使用_HttpURLConnection_下载一个示例网页：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenURLConnection_whenRetrieveWebpage_thenWebpageIsNotNullAndContainsHtmlTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"https://example.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">HttpURLConnection</span> connection <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpURLConnection</span><span class="token punctuation">)</span> url<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    connection<span class="token punctuation">.</span><span class="token function">setRequestMethod</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>connection<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">StringBuilder</span> responseBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> line<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            responseBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token function">assertNotNull</span><span class="token punctuation">(</span>responseBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertTrue</span><span class="token punctuation">(</span>responseBuilder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"\`\`&lt;html&gt;\`\`"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.37,words:712},t:"Java中下载网页的方法",y:"a"}}],["/posts/baeldung/2024-07-08/2024-07-08-Exclude%20a%20Dependency%20in%20a%20Maven%20Plugin.html",{loader:()=>a(()=>import("./2024-07-08-Exclude a Dependency in a Maven Plugin.html-tgf-Xiri.js"),__vite__mapDeps([695,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Maven","插件"],g:["Maven插件","依赖排除"],e:`
<h2>1. 概述</h2>
<p>在Maven中排除依赖是一项常见操作。然而，当涉及到Maven插件时，这一操作会变得更加困难。</p>
<h2>2. 什么是依赖排除</h2>
<p>Maven管理依赖的传递性。这意味着<strong>Maven可以自动添加我们添加的依赖所需的所有依赖</strong>。在某些情况下，这种<strong>传递性可以迅速增加依赖的数量，因为它添加了级联依赖</strong>。</p>
<p>例如，如果我们有依赖关系如A → B → C → D，那么A将依赖于B、C和D。如果A只使用B的一小部分，而这部分不需要C，那么我们可以告诉Maven在A中忽略B → C的依赖。</p>`,r:{minutes:2.97,words:891},t:"Maven插件中排除依赖",y:"a"}}],["/posts/baeldung/2024-07-08/2024-07-08-Get%20the%20Desktop%20Path%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-08-Get the Desktop Path in Java.html-C9sVx-Cq.js"),__vite__mapDeps([696,1])),meta:{d:1720438361e3,c:["Java","编程技巧"],g:["Java","文件系统","桌面路径"],e:`<hr>
<h1>获取Java中的桌面路径</h1>
<p>在这个简短的教程中，我们将学习<strong>两种在Java中获取桌面路径的方法</strong>。第一种方法是使用_System.getProperty()_方法，第二种方法使用_FileSystemView_类的_getHomeDirectory()_方法。</p>
<h2>2. 使用_System.getProperty()_</h2>
<p>Java的_System_类提供了_Properties_对象，它存储了当前工作环境的不同配置和属性。对我们的情况来说，我们感兴趣的一个特定属性是：<strong>_user.home_属性，它保存了用户的主目录</strong>。<strong>这个属性可以通过_System.getProperty()_方法检索</strong>，该方法允许获取特定系统属性的值。</p>`,r:{minutes:1.73,words:518},t:"获取Java中的桌面路径",y:"a"}}],["/posts/baeldung/2024-07-08/2024-07-08-Guide%20to%20Java%20Project%20Panama.html",{loader:()=>a(()=>import("./2024-07-08-Guide to Java Project Panama.html-BNv2VlXR.js"),__vite__mapDeps([697,1])),meta:{d:1642464e6,l:"2022年1月18日",c:["Java","Project Panama"],g:["Java","JNI","Foreign Function","Memory API"],e:`
<p>在本教程中，我们将深入了解 Project Panama 的组件。首先，我们将探索外部函数和内存 API。然后，我们将看到 JExtract 工具如何促进其使用。</p>
<h2>2. 什么是 Project Panama？</h2>
<p>Project Panama 的目标是简化 Java 与外部（非 Java）API 之间的交互，即用 C、C++ 等编写的本地代码。</p>
<p>到目前为止，使用 Java 原生接口（JNI）是从 Java 调用外部函数的解决方案。但 JNI 存在一些缺点，Project Panama 通过以下方式解决了这些问题：</p>
<ul>
<li>消除了编写 Java 中间本地代码包装器的需要</li>
<li>用更具有未来性的内存 API 替代了 ByteBuffer API</li>
<li>引入了一种平台无关、安全且内存高效的从 Java 调用本地代码的方法</li>
</ul>`,r:{minutes:6.08,words:1824},t:"Java Project Panama 指南",y:"a"}}],["/posts/baeldung/2024-07-08/2024-07-08-Handle%20Duplicate%20Keys%20When%20Producing%20Map%20Using%20Java%20Stream.html",{loader:()=>a(()=>import("./2024-07-08-Handle Duplicate Keys When Producing Map Using Java Stream.html-DUebBJxQ.js"),__vite__mapDeps([698,1])),meta:{d:17203968e5,l:"2024年7月8日",c:["Java","Stream API"],g:["Map","Duplicate Keys","Java Stream"],e:`
<h2>1. 概述</h2>
<p>在使用Java Stream生成Map时，可能会遇到重复键的问题。这可能会导致向Map中添加值时出现问题，因为与键关联的先前值可能会被覆盖。</p>
<p>在本教程中，我们将讨论在使用Stream API生成Map时如何处理重复键。</p>
<h2>2. 问题介绍</h2>
<p>像往常一样，我们通过示例来理解问题。假设我们有一个City类：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">City</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> locatedIn<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">City</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> locatedIn<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>locatedIn <span class="token operator">=</span> locatedIn<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 省略getter方法</span>
    <span class="token comment">// 省略equals()和hashCode()方法</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:4.38,words:1314},t:"使用Java Stream生成Map时处理重复键",y:"a"}}],["/posts/baeldung/2024-07-08/2024-07-08-How%20to%20Post%20Raw%20Body%20Data%20With%20cURL.html",{loader:()=>a(()=>import("./2024-07-08-How to Post Raw Body Data With cURL.html-DvIFgC1F.js"),__vite__mapDeps([699,1])),meta:{d:16752096e5,l:"2023年2月1日",c:["cURL","HTTP"],g:["cURL","POST请求","原始数据"],e:`<hr>
<h1>如何使用cURL发送原始正文数据</h1>
<p>客户端URL（cURL）是Linux中的一个命令行实用程序，支持通过多种协议（包括HTTP和HTTPS）在客户端和服务器之间进行数据交换。在本教程中，<strong>我们将学习如何使用cURL通过POST请求发送原始正文数据</strong>。</p>
<h2>2. 理解 --data 和 --data-raw</h2>
<p>cURL命令支持使用 --data 和 --data-raw 选项通过POST请求传输数据。在本节中，让我们了解使用这些选项的cURL的默认行为。</p>
<p>首先，我们需要一个服务器端点，该端点将接受我们作为客户端发起的请求。因此，<strong>让我们访问webhook.site并获取服务器端点</strong>：</p>`,r:{minutes:3.66,words:1098},t:"如何使用cURL发送原始正文数据",y:"a"}}],["/posts/baeldung/2024-07-08/2024-07-08-How%20to%20configure%20Redis%20TTL%20with%20Spring%20Data%20Redis%20.html",{loader:()=>a(()=>import("./2024-07-08-How to configure Redis TTL with Spring Data Redis .html-DREi9ZZE.js"),__vite__mapDeps([700,1])),meta:{d:16759872e5,l:"2023年2月10日",c:["Spring Data Redis","Redis TTL"],g:["Redis","TTL","Spring Boot","Session"],e:'<hr>\n<h1>如何在Spring Data Redis中配置Redis TTL</h1>\n<p>在本快速教程中，我们将探讨如何在Spring Data Redis中配置键过期。</p>\n<h2>2. 设置</h2>\n<p>让我们创建一个基于Spring Boot的API来管理由Redis支持的持久化_会话(Session)_资源。为此，我们需要四个主要步骤。有关更详细的设置，请查看我们的Spring Data Redis指南。</p>\n<h3>2.1. 依赖项</h3>\n<p>首先，让我们在_pom.xml_中添加以下依赖项：</p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`org.springframework.boot`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`spring-boot-starter-data-redis`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`3.1.5`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n</code></pre></div>',r:{minutes:3.5,words:1051},t:"如何在Spring Data Redis中配置Redis TTL",y:"a"}}],["/posts/baeldung/2024-07-08/2024-07-08-Implementing%20toString%20%20%20on%20enums%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-08-Implementing toString   on enums in Java.html-Crhe8_uR.js"),__vite__mapDeps([701,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Enums"],g:["toString()","Java Enum"],e:`
<p>枚举是一种特殊类型的类，自Java 5引入以来，它帮助替代了传统的整型枚举模式。尽管技术上是合适的，但我们用于枚举常量的名称通常不是我们希望在日志、数据库或应用程序面向客户部分显示的名称。</p>
<p>在本教程中，我们将学习在Java中实现枚举的toString()方法的各种方式，以便我们可以提供替代或装饰性的名称。</p>
<h2>2. 默认行为</h2>
<p>所有枚举隐式扩展了Enum类，因此我们的枚举将从Enum类继承其默认的toString()行为：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.84,words:851},t:"Java中枚举的toString()实现方式",y:"a"}}],["/posts/baeldung/2024-07-08/2024-07-08-Introduction%20to%20Interface%20Driven%20Development%20%20IDD%20.html",{loader:()=>a(()=>import("./2024-07-08-Introduction to Interface Driven Development  IDD .html-DMdKH2It.js"),__vite__mapDeps([702,1])),meta:{d:17203968e5,l:"2024年7月8日",c:["Java","Software Engineering"],g:["Interface Driven Development","IDD","Design Patterns"],e:`
<h2><strong>1. 概述</strong></h2>
<p>在本教程中，我们将讨论接口驱动开发（Interface Driven Development, IDD），它为编码提供了结构。我们将引导您使用IDD并解释其优势。</p>
<h2><strong>2. 理念</strong></h2>
<p>接口驱动开发是一种开发方法，侧重于系统不同组件之间的接口设计。相应的接口定义了可用的方法。因此，我们提供了有关可用功能、预期参数和返回值的信息。</p>
<h3><strong>2.1. 优势</strong></h3>
<p>由于IDD在开始时就定义了接口，拥有多名员工的项目可以同时开始使用它并开发其实现。这<strong>加速了开发，因为他们可以在实现准备就绪之前编写代码</strong>。</p>`,r:{minutes:4.8,words:1441},t:"接口驱动开发（IDD）介绍",y:"a"}}],["/posts/baeldung/2024-07-08/2024-07-08-Introduction%20to%20QuestDB.html",{loader:()=>a(()=>import("./2024-07-08-Introduction to QuestDB.html-ua8Nq79e.js"),__vite__mapDeps([703,1])),meta:{d:16789248e5,l:"2023年3月16日",c:["Java","QuestDB"],g:["Java","QuestDB","数据库"],e:`
<ol>
<li>概览</li>
</ol>
<p>在本教程中，我们将简要介绍QuestDB，这是一个面向时间序列和事件数据的关系型列式数据库。然后，我们将学习如何从Java应用程序向数据库发送数据。</p>
<ol start="2">
<li>什么是QuestDB？</li>
</ol>
<p><strong>QuestDB是一个快速的开源时间序列数据库，具有高性能的数据摄取和SQL分析能力</strong>。简而言之，QuestDB解决了管理基于时间的高吞吐量数据时的困难，并通过简单的SQL查询使分析摄取的数据变得容易。</p>
<p>它与InfluxDB行协议、PostgreSQL线协议和HTTP REST API兼容。此外，它还有一个美观的Web控制台应用程序，我们可以直接与数据库交互。然而，我们将只关注InfluxDB行协议，这是一个包含每个数据点的测量、标签、字段和时间戳的文本格式。在这种情况下，我们将使用一个易于使用的Java客户端库来发送数据，并抽象出这些细节。</p>`,r:{minutes:3.6,words:1079},t:"QuestDB简介",y:"a"}}],["/posts/baeldung/2024-07-08/2024-07-08-Kotlin%20AES%20Encryption%20and%20Decryption.html",{loader:()=>a(()=>import("./2024-07-08-Kotlin AES Encryption and Decryption.html-tcCN2CHp.js"),__vite__mapDeps([704,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin","Encryption"],g:["AES","Encryption","Decryption"],e:`
<p>加密是现代数据安全的基础，保护信息免受未授权访问。在众多加密标准中，由于其效率、简单性和强大的安全性的平衡，高级加密标准（AES）脱颖而出。它以128位固定大小的数据块进行操作，并支持128、192或256位的密钥大小，使其适用于各种安全需求。</p>
<p>在本教程中，我们将涵盖AES的基础知识，为AES加密和解密设置Kotlin项目，并最终演示如何在简单的Kotlin应用程序中使用这些实现。</p>
<p>AES因其在软件和硬件实现中的高效率而受到赞誉。它的设计简单性，加上强大的安全特性，推动了其在全球众多安全协议和系统中的广泛采用。</p>
<p><strong>作为对称加密算法，AES使用相同的密钥进行加密和解密</strong>。这促进了在各种应用中安全数据交换。</p>`,r:{minutes:3.78,words:1133},t:"Kotlin AES 加密与解密",y:"a"}}],["/posts/baeldung/2024-07-08/2024-07-08-Load%20Testing%20Rest%20Endpoint%20Using%20Gatling.html",{loader:()=>a(()=>import("./2024-07-08-Load Testing Rest Endpoint Using Gatling.html-YM-SWIQ6.js"),__vite__mapDeps([705,1])),meta:{d:16776288e5,l:"2023年3月1日",c:["Gatling","Load Testing"],g:["Gatling","Load Testing","REST Endpoint","Performance Testing"],e:`<hr>
<h1>使用Gatling对REST端点进行负载测试</h1>
<p>在本文中，我们将探讨如何使用Gatling对任何REST端点进行性能测试，特别关注负载测试。我们将从各种类型的性能测试及其关键性能指标（KPIs）的快速介绍开始。</p>
<p>接下来，我们将简要介绍Gatling术语。我们将使用Maven Gatling插件和依赖项设置一个示例。我们将探索使用Gatling Java DSL执行我们的负载测试，模拟一个场景。</p>
<p>最后，我们将运行模拟并查看生成的报告。</p>
<h3>2. 性能测试类型</h3>
<p>性能测试涉及测量各种指标，以了解系统在不同级别的流量和吞吐量下的表现。其他类型的性能测试包括负载测试、压力测试、浸泡测试、尖峰测试和可扩展性测试。接下来，让我们快速看看每种性能测试策略的目的。</p>`,r:{minutes:6.22,words:1867},t:"使用Gatling对REST端点进行负载测试",y:"a"}}],["/posts/baeldung/2024-07-08/2024-07-08-Managing%20Multiple%20JDK%20Installations%20With%20jEnv.html",{loader:()=>a(()=>import("./2024-07-08-Managing Multiple JDK Installations With jEnv.html-CRdf_Z3A.js"),__vite__mapDeps([706,1])),meta:{d:17204832e5,l:"2024年7月9日",c:["Software Development","Java"],g:["jEnv","JDK","Java Development"],e:`
<ol>
<li>引言</li>
</ol>
<p>随着Java每次新版本的发布，我们可能需要在环境中管理多个并行版本的软件开发工具包（SDK）。因此，设置和管理_JAVA_HOME_路径变量有时可能非常麻烦。</p>
<p>在本教程中，我们将看到jEnv如何帮助管理多个不同版本的JDK安装。</p>
<ol start="2">
<li>jEnv是什么？</li>
</ol>
<p>jEnv是一个命令行工具，帮助我们管理多个JDK安装。它基本上在我们的shell中设置_JAVA_HOME_，可以全局设置，也可以仅针对当前工作目录或每个shell设置。</p>
<p>它让我们能够快速切换不同的Java版本。这在处理使用不同Java版本的多个应用程序时特别有用。</p>`,r:{minutes:5.81,words:1744},t:"使用jEnv管理多个JDK安装",y:"a"}}],["/posts/baeldung/2024-07-08/2024-07-08-Maven%20Reactor.html",{loader:()=>a(()=>import("./2024-07-08-Maven Reactor.html-Cm23LaAk.js"),__vite__mapDeps([707,1])),meta:{d:16776288e5,l:"2023年3月1日",c:["Java","Maven"],g:["Maven Reactor","多模块项目"],e:`
<p>在本教程中，我们将快速了解 Maven Reactor 的基本概念以及其在 Maven 生态系统中的位置。</p>
<p>我们将从 Maven Reactor 的介绍开始。接下来，我们将设置一个具有模块间依赖的简单多模块 Maven 项目的示例，并看到 Reactor 如何运作以确定构建依赖。我们将触及一些可用的标志，这些标志可以微调 Maven Reactor 的行为。最后，我们将总结使用 Reactor 的一些好处。</p>
<h2>Maven Reactor 的基础知识</h2>
<p><strong>Maven Reactor 是 Maven 的内置部分，负责管理项目依赖和构建。</strong> <strong>它负责执行 Maven 构建，并确保项目以正确的顺序构建以满足依赖。在具有许多模块间依赖的复杂多模块项目中，可以真正体会到 Maven Reactor 的好处。</strong></p>`,r:{minutes:4.63,words:1388},t:"Maven Reactor 简介",y:"a"}}],["/posts/baeldung/2024-07-08/2024-07-08-Moving%20Items%20Around%20in%20an%20Arraylist.html",{loader:()=>a(()=>import("./2024-07-08-Moving Items Around in an Arraylist.html-CnZ385iF.js"),__vite__mapDeps([708,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","ArrayList"],g:["Java","Collections","ArrayList","旋转","交换"],e:'\n<ol>\n<li>概述</li>\n</ol>\n<p>Java为我们提供了多种在_ArrayList_中重新排列元素的方法。在本教程中，我们将探讨其中的三种。</p>\n<ol start="2">\n<li>移动一个元素</li>\n</ol>\n<p>最手动的方法，也是给我们最大控制权的方法，是直接将一个元素移动到新的位置。我们可以通过首先使用_ArrayList.remove()_来实现这一点，它返回被移除的元素。然后，我们可以选择性地使用_ArrayList.add()_将该元素重新插入到我们选择的位置：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenAList_whenManuallyReordering_thenOneItemMovesPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">ArrayList</span>````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````` arrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">,</span> <span class="token string">"four"</span><span class="token punctuation">,</span> <span class="token string">"five"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">String</span> removed <span class="token operator">=</span> arrayList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> removed<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">ArrayList</span>````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````` expectedResult <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token string">"four"</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">,</span> <span class="token string">"five"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span>expectedResult<span class="token punctuation">,</span> arrayList<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:2.47,words:741},t:"Java ArrayList中移动元素的方法",y:"a"}}],["/posts/baeldung/2024-07-08/2024-07-08-New%20CRUD%20Repository%20Interfaces%20in%20Spring%20Data%203.html",{loader:()=>a(()=>import("./2024-07-08-New CRUD Repository Interfaces in Spring Data 3.html-FCAH8ezt.js"),__vite__mapDeps([709,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Data","Java"],g:["CRUD","Repository"],e:`
<p>在本教程中，我们将探讨Spring Data 3中引入的新仓库接口。</p>
<p>Spring Data 3引入了基于列表的CRUD仓库接口，这些接口可以用来替代返回Iterable的现有CRUD仓库接口。此外，默认情况下，分页和排序接口不再继承原始的CRUD仓库，而是将这个选项留给用户。我们将看看这些接口与现有接口有何不同，以及如何使用它们。</p>
<h3>2. 项目设置</h3>
<p>让我们从设置我们的项目开始。我们将创建一个包含简单实体和使用新接口的仓库的Spring Boot应用程序。</p>
<h4>2.1. 依赖项</h4>
<p>让我们首先向我们的项目添加所需的依赖项。我们将添加Spring Boot Starter Data依赖项：</p>`,r:{minutes:5.81,words:1743},t:"Spring Data 3中新的CRUD仓库接口",y:"a"}}],["/posts/baeldung/2024-07-08/2024-07-08-Pipeline%20Design%20Pattern%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-08-Pipeline Design Pattern in Java.html-D7Gb4dUI.js"),__vite__mapDeps([710,1])),meta:{d:16776288e5,l:"2023年3月1日",c:["Java","设计模式"],g:["Pipeline","设计模式"],e:`
<h2>1. 概述</h2>
<p>在本教程中，我们将回顾一个有趣的模式，它不是经典GoF模式的一部分——流水线模式。</p>
<p>它功能强大，可以帮助解决棘手的问题并改善应用程序的设计。此外，Java还有一些内置的解决方案来帮助实现这种模式；我们将在最后讨论它们。</p>
<p>通常，流水线模式与责任链模式进行比较。流水线在很多方面与装饰者模式也有共同之处。在某些方面，它比责任链更接近装饰者。让我们回顾一下这些模式之间的相似之处和不同之处。</p>
<h3>2.1. 责任链</h3>
<p><strong>由于两种模式都明确声明了逐步过程，因此经常将流水线与责任链进行比较。</strong> 流水线和责任链之间的第一个区别是，后者通常没有从其_handleRequest()_方法返回值：</p>`,r:{minutes:5.23,words:1570},t:"Java中的流水线设计模式 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-08/2024-07-08-Pitfalls%20on%20Testing%20with%20Spring%20Boot.html",{loader:()=>a(()=>import("./2024-07-08-Pitfalls on Testing with Spring Boot.html-DMK17tFR.js"),__vite__mapDeps([711,1])),meta:{d:16752096e5,l:"2023年2月1日",c:["Spring Boot","Testing"],g:["Spring Boot","Testing"],e:`
<h2>1. 概述</h2>
<p>编程中最重要的主题之一是测试。Spring 框架和 Spring Boot 通过提供测试框架扩展以及引导我们编写具有大量后台自动化的最小、可测试代码，提供了非常好的支持。要运行 Spring Boot 集成测试，我们只需要在我们的测试类中添加 <code>@SpringBootTest</code>。我们可以在 Spring Boot 中的测试中找到简短的介绍。即使我们在没有 Spring Boot 的情况下使用 Spring 框架，我们也可以非常高效地进行集成测试。</p>
<p>但是开发测试越容易，我们就越有可能遇到陷阱。在本教程中，我们将探讨 Spring Boot 测试是如何执行的，以及在编写测试时需要考虑什么。</p>`,r:{minutes:12.11,words:3632},t:"Spring Boot 测试中的陷阱",y:"a"}}],["/posts/baeldung/2024-07-08/2024-07-08-Post%20form%20url%20encoded%20Data%20with%20Spring%20Cloud%20Feign.html",{loader:()=>a(()=>import("./2024-07-08-Post form url encoded Data with Spring Cloud Feign.html-COFgchaQ.js"),__vite__mapDeps([712,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Cloud","Feign"],g:["form-url-encoded","POST","API"],e:`
<p>在本教程中，我们将学习如何使用Feign客户端在请求正文中使用表单编码数据进行POST API请求。</p>
<h2>2. 发送表单编码数据的方式</h2>
<p>我们可以通过两种不同的方式来发送POST表单编码数据。我们首先需要创建一个自定义编码器并为我们的Feign客户端配置它：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">FormFeignEncoderConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Encoder</span> <span class="token function">encoder</span><span class="token punctuation">(</span><span class="token class-name">ObjectFactory</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpMessageConverters</span><span class="token punctuation">&gt;</span></span>\` converters<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SpringFormEncoder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SpringEncoder</span><span class="token punctuation">(</span>converters<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.74,words:523},t:"使用Spring Cloud Feign发送表单编码数据的POST请求",y:"a"}}],["/posts/baeldung/2024-07-08/2024-07-08-Run%20a%20Spring%20Boot%20Application%20in%20AWS%20Lambda.html",{loader:()=>a(()=>import("./2024-07-08-Run a Spring Boot Application in AWS Lambda.html-DFemCSkr.js"),__vite__mapDeps([713,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Boot","AWS Lambda"],g:["Serverless","AWS","Deployment"],e:`
<p>在本教程中，我们将探讨如何使用无服务器应用模型（Serverless Application Model，SAM）框架将Spring Boot应用程序部署到AWS Lambda上。</p>
<p>我们可能会发现这种方法对于将现有的API服务器迁移到无服务器非常有用。</p>
<p>通过这样做，我们可以利用AWS Lambda的可扩展性和按执行付费的定价模型，以高效且成本效益的方式运行我们的应用程序。</p>
<p>AWS Lambda是由Amazon Web Services（AWS）提供的无服务器计算服务。它允许我们在不需要提供或管理服务器的情况下运行我们的代码。</p>
<p>Lambda函数与传统服务器之间的一个关键区别在于<strong>Lambda函数是事件驱动的，并且生命周期非常短</strong>。</p>`,r:{minutes:9.1,words:2730},t:"在AWS Lambda上运行Spring Boot应用程序",y:"a"}}],["/posts/baeldung/2024-07-08/2024-07-08-Spring%20Kafka%20%20Configure%20Multiple%20Listeners%20on%20Same%20Topic.html",{loader:()=>a(()=>import("./2024-07-08-Spring Kafka  Configure Multiple Listeners on Same Topic.html-Cl7YReAf.js"),__vite__mapDeps([714,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Kafka","Kafka Listener"],g:["Kafka","Spring Boot","Listeners"],e:'\n<p>在本文中，我们将通过一个实际示例学习如何为同一个Kafka主题配置多个监听器。</p>\n<p>如果这是您第一次在Spring上配置Kafka，最好从我们的Apache Kafka与Spring入门开始。</p>\n<h2>2. 项目设置</h2>\n<p>让我们构建一个书籍消费者服务，监听图书馆内新到的书籍，并为不同目的消费它们，如全文内容搜索、价格索引或用户通知。</p>\n<p>首先，让我们创建一个Spring Boot服务，并使用<code>spring-kafka</code>依赖项：</p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`org.springframework.kafka`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`spring-kafka`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n</code></pre></div>',r:{minutes:5.11,words:1533},t:"Spring Kafka：在同一主题上配置多个监听器",y:"a"}}],["/posts/baeldung/2024-07-08/2024-07-08-TRUNCATE%20TABLE%20in%20Spring%20Data%20JPA.html",{loader:()=>a(()=>import("./2024-07-08-TRUNCATE TABLE in Spring Data JPA.html-UH28cUrJ.js"),__vite__mapDeps([715,1])),meta:{d:1720436597e3,e:`<p>标题：Spring Data JPA 清空表
日期：2024-07-08
分类：</p>
<ul>
<li>Spring Data JPA</li>
<li>数据库操作
标签：</li>
<li>JPA</li>
<li>清空表</li>
<li>数据库
头信息：</li>
<li>
<ul>
<li>meta</li>
<li>name: 关键词
content: Spring Data JPA, 清空表, 数据库操作</li>
</ul>
</li>
</ul>
<hr>
<h1>Spring Data JPA 清空表</h1>
<p>在Spring Data JPA中，清空表是一个常见的需求，尤其是在开发过程中，我们可能需要重置数据库状态。本文将探讨几种在Spring Data JPA中清空表的方法，并讨论它们的优缺点。</p>`,r:{minutes:3.42,words:1027},t:"Spring Data JPA 清空表",y:"a"}}],["/posts/baeldung/2024-07-08/2024-07-08-Testing%20Spring%20OAuth2%20Access%20Control.html",{loader:()=>a(()=>import("./2024-07-08-Testing Spring OAuth2 Access Control.html-CMPcI9OC.js"),__vite__mapDeps([716,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Security","OAuth2"],g:["Testing","Access Control"],e:`
<p>如果您正在处理Spring Security（特别是OAuth）实现，一定要查看《学习Spring安全》课程。</p>
<h2>1. 概述</h2>
<p>在本教程中，我们将探讨在Spring应用程序中使用模拟身份测试OAuth2安全下的访问控制规则的选项。</p>
<p>我们将使用_MockMvc_请求后处理器、_WebTestClient_变异器以及来自_spring-security-test_和_spring-addons_的测试注解。</p>
<h2>2. 为什么使用Spring-Addons？</h2>
<p>在OAuth2领域，_spring-security-test_仅提供了需要分别在_MockMvc_或_WebTestClient_请求上下文中的请求后处理器和变异器。这对于_Controller_来说可能很好，但测试具有@Service或@Repository等方法安全性（@PreAuthorize、@PostFilter等）是一个问题。</p>`,r:{minutes:9.56,words:2869},t:"测试Spring OAuth2访问控制 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-08/2024-07-08-UUID%20vs.%20Sequential%20ID%20as%20Primary%20Key.html",{loader:()=>a(()=>import("./2024-07-08-UUID vs. Sequential ID as Primary Key.html-DK6FyP1k.js"),__vite__mapDeps([717,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Database","Programming"],g:["UUID","Primary Key","Database Design"],e:`<hr>
<h1>UUID与顺序ID作为主键的比较</h1>
<p>在本教程中，我们将探讨UUID和顺序ID作为主键的区别。</p>
<p>在设计数据库时，选择适当的主键格式对系统的性能、可扩展性和数据完整性至关重要。</p>
<p>数据库中的表必须有一个主键列，该列既唯一又不允许为空。这样，主键值就可以唯一地识别每一行。</p>
<p>在选择主键时的一个主要决策是使用UUID还是顺序ID。虽然两种方法都有其优缺点，但最佳选择取决于特定用例和系统的目标。</p>
<p><strong>根据RFC 4122标准定义，UUID（通用唯一识别码）表示一个128位的值。</strong></p>
<p>如今，大多数关系型数据库支持UUID类型：</p>`,r:{minutes:8,words:2400},t:"UUID与顺序ID作为主键的比较",y:"a"}}],["/posts/baeldung/2024-07-08/2024-07-08-Using%20Java%20Records%20with%20JPA.html",{loader:()=>a(()=>import("./2024-07-08-Using Java Records with JPA.html-PqFemWY0.js"),__vite__mapDeps([718,1])),meta:{d:17203968e5,l:"2024年7月8日",c:["Spring","JPA"],g:["Java Records","JPA"],e:`
<h2>1. 概述</h2>
<p>在本教程中，我们将探讨如何将Java Records与JPA一起使用。我们将从探讨为什么记录不能用作实体开始。</p>
<p>然后，我们将看到如何将记录与JPA一起使用。我们还将看看如何在Spring Boot应用程序中使用Spring Data JPA与记录。</p>
<h2>2. 记录与实体</h2>
<p>记录是不可变的，用于存储数据。它们**包含字段、全参数构造函数、getter、toString、以及equals/hashCode方法。**由于它们是不可变的，它们没有setter。由于它们的语法简洁，它们通常在Java应用程序中用作数据传输对象（DTO）。</p>`,r:{minutes:6.54,words:1963},t:"使用Java Records与JPA",y:"a"}}],["/posts/baeldung/2024-07-09/2024-07-09-Accessing%20Private%20Constructor%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-09-Accessing Private Constructor in Java.html-C4uzWUYT.js"),__vite__mapDeps([719,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","设计模式"],g:["私有构造函数","反射API"],e:`
<h2>1. 概述</h2>
<p>在本教程中，我们将探讨为什么在Java中我们会使用类的私有构造函数以及如何使用它。</p>
<h2>2. 为什么要使用私有构造函数？</h2>
<p>在Java中，我们可以使用<code>private</code>访问修饰符声明一个构造函数。<strong>如果一个构造函数被声明为私有，我们不能在类之外创建该类的实例。</strong></p>
<p>私有构造函数的使用场景是当我们想要限制一个类的对象实例化方式时。例如，我们可能只想通过一个工厂类来创建对象。或者另一种情况是我们只想拥有该类的一个对象实例。</p>
<p>私有构造函数最常用的情况是单例、建造者和工厂模式，这些是创建型设计模式。</p>`,r:{minutes:2.85,words:856},t:"Java中访问私有构造函数",y:"a"}}],["/posts/baeldung/2024-07-09/2024-07-09-Cassandra%20%20%20Object%20Mapping%20with%20DataStax%20Java%20Driver.html",{loader:()=>a(()=>import("./2024-07-09-Cassandra   Object Mapping with DataStax Java Driver.html-BhOYgn60.js"),__vite__mapDeps([720,1])),meta:{d:16805664e5,l:"2023年4月4日",c:["Cassandra","Java"],g:["DataStax Java Driver","Object Mapping"],e:`
<p>本文将介绍如何使用DataStax Java Driver将对象映射到Cassandra表。</p>
<p>我们将学习如何定义实体、创建DAO，并使用Java Driver对Cassandra表执行CRUD操作。</p>
<h2>2. 项目设置</h2>
<p>我们将使用Spring Boot框架创建一个简单的应用程序，该程序将与Cassandra数据库交互。我们将使用Java Driver创建表、实体和DAO。然后，我们将使用DAO对表执行CRUD操作。</p>
<h3>2.1. 依赖项</h3>
<p>让我们从向项目添加所需的依赖项开始。我们将使用Spring Boot的Cassandra启动器来连接数据库：</p>`,r:{minutes:6.3,words:1890},t:"Cassandra – 使用DataStax Java Driver进行对象映射",y:"a"}}],["/posts/baeldung/2024-07-09/2024-07-09-Check%20if%20Object%20Is%20an%20Array%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-09-Check if Object Is an Array in Java.html-BQ34k31t.js"),__vite__mapDeps([721,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Arrays"],g:["Java","Arrays"],e:`<hr>
<h1>如何在Java中检查对象是否为数组</h1>
<p>在Java中，经常需要确定给定的对象是否为数组。这在几种不同的情况下都可能很有用，例如在以通用方式使用数组或在我们的代码中执行类型检查时。</p>
<p>在本教程中，我们将探讨如何实现这种判断。</p>
<h2>2. 问题介绍</h2>
<p>首先，让我们看看两个对象：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name">Object</span> <span class="token constant">ARRAY_INT</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">final</span> <span class="token class-name">Object</span> <span class="token constant">ARRAY_PERSON</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Jackie Chan"</span><span class="token punctuation">,</span> <span class="token string">"Hong Kong"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Tom Hanks"</span><span class="token punctuation">,</span> <span class="token string">"United States"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:3.8,words:1140},t:"如何在Java中检查对象是否为数组",y:"a"}}],["/posts/baeldung/2024-07-09/2024-07-09-Combining%20Two%20Lists%20Into%20a%20Map%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-09-Combining Two Lists Into a Map in Java.html-vuTCnCme.js"),__vite__mapDeps([722,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Programming"],g:["Java","Map","List"],e:'<hr>\n<h1>Java中将两个列表合并为一个Map</h1>\n<p>在Java中工作时，通常需要将两个单独的列表关联起来。换句话说，我们有两个列表，一个包含键，另一个携带值。然后我们想要得到一个_映射_（Map），它将键列表中的每个元素与值列表中的相应元素关联起来。</p>\n<p>在本教程中，我们将探索不同的实现方式。</p>\n<h2>2. 问题介绍</h2>\n<p>像往常一样，我们通过一个例子来理解问题。假设我们有两个列表：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name">List</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`` <span class="token constant">KEY_LIST</span> <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"Number One"</span><span class="token punctuation">,</span> <span class="token string">"Number Two"</span><span class="token punctuation">,</span> <span class="token string">"Number Three"</span><span class="token punctuation">,</span> <span class="token string">"Number Four"</span><span class="token punctuation">,</span> <span class="token string">"Number Five"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">final</span> <span class="token class-name">List</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>``` <span class="token constant">VALUE_LIST</span> <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div>',r:{minutes:4.59,words:1377},t:"Java中将两个列表合并为一个Map",y:"a"}}],["/posts/baeldung/2024-07-09/2024-07-09-Convert%20Array%20to%20Set%20and%20Vice%20Versa%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-09-Convert Array to Set and Vice Versa in Kotlin.html-OfCfMprL.js"),__vite__mapDeps([723,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin","数据结构"],g:["Kotlin","数组","Set"],e:`
<h2>1. 引言</h2>
<p>作为软件开发人员，我们经常需要在不同的数据结构之间进行转换，以便在各种场景中高效地管理数据。Kotlin提供了多种方法来无缝地将一种数据结构转换为另一种，例如传统的循环和内置函数。</p>
<p>在本教程中，我们将探讨在Kotlin中将数组和_Set_之间进行转换的不同方式。</p>
<p>数组是一种用于有序元素集合的数据结构，而Set通过不允许重复元素来保证其唯一性。</p>
<p>在这一部分，让我们看看将数组转换为Set的多种方式。</p>
<h3>2.1. 使用 <em>toSet()</em></h3>
<p>我们可以使用数组上的_toSet()_ 方法将其转换为Set。让我们看一个例子：</p>`,r:{minutes:4,words:1201},t:"Kotlin中数组与Set的转换 | Baeldung关于Kotlin",y:"a"}}],["/posts/baeldung/2024-07-09/2024-07-09-Convert%20Hex%20to%20RGB%20Using%20Java.html",{loader:()=>a(()=>import("./2024-07-09-Convert Hex to RGB Using Java.html-gysWNy5o.js"),__vite__mapDeps([724,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","编程"],g:["十六进制","RGB"],e:`
<p>十六进制（hex）和RGB（红-绿-蓝）是图形和设计中常见的颜色代码。有时，将十六进制转换为其等效的RGB值可能是必要的，因为它在许多数字应用中被广泛使用。</p>
<p>在本教程中，我们将学习如何在Java中将十六进制颜色代码转换为其等效的RGB值。</p>
<h2>2. 十六进制颜色代码和RGB</h2>
<p>十六进制颜色代码由六个字符串字符组成。<strong>每个字符代表十六进制表示法中的一个值，范围在0到15之间（0-9和A-F）</strong>。</p>
<p>例如，深藏红花的十六进制颜色代码是_FF9933_。</p>
<p>RGB是红色、绿色和蓝色的组合。<strong>它每个使用8位，并具有介于0和255之间的整数值</strong>。</p>`,r:{minutes:2.41,words:724},t:"Java中将十六进制转换为RGB",y:"a"}}],["/posts/baeldung/2024-07-09/2024-07-09-Create%20Dynamic%20Queues%20in%20RabbitMQ.html",{loader:()=>a(()=>import("./2024-07-09-Create Dynamic Queues in RabbitMQ.html-TQjjoGjz.js"),__vite__mapDeps([725,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["RabbitMQ","Java"],g:["消息队列","动态队列"],e:`
<p>RabbitMQ是一个消息代理，它提供了不同组件之间的异步通信。它提供了AMQP（高级消息队列协议）的实现，这是最受欢迎的消息协议。</p>
<p>在本教程中，我们将探讨如何使用Java客户端库在RabbitMQ中动态创建队列。</p>
<h2>2. RabbitMQ消息模型</h2>
<p>在我们开始之前，让我们快速回顾一下RabbitMQ消息的工作方式。</p>
<p>我们首先需要理解AMQP的构建块，也称为AMQP实体。交换器、队列和绑定统称为AMQP实体。</p>
<p>在RabbitMQ中，消息生产者永远不会直接向队列发送消息。相反，它使用一个_交换器_作为路由中介。消息生产者将消息发布到_交换器_。然后，交换器根据称为_绑定_的路由规则将这些消息路由到不同的_队列_。代理随后将消息传递给订阅队列的消费者，或者消费者按需从队列中拉取/获取消息。消息传递给消费者基于FIFO模型。</p>`,r:{minutes:4.89,words:1467},t:"在RabbitMQ中创建动态队列",y:"a"}}],["/posts/baeldung/2024-07-09/2024-07-09-Difference%20Between%20Class.forName%20%20%20and%20Class.forName%20%20.newInstance%20%20.html",{loader:()=>a(()=>import("./2024-07-09-Difference Between Class.forName   and Class.forName  .newInstance  .html-C4-n48Ig.js"),__vite__mapDeps([726,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","编程"],g:["Class.forName()","newInstance()"],e:`
<p>在Java中，动态加载类是指在运行时而不是编译时将类加载到Java虚拟机中。这种方法在某些情况下非常有用，例如我们不知道编译时的类名，或者类加载基于用户输入或系统属性。</p>
<p>有几种在Java中动态加载类的方法，包括_Class.forName()_方法、_ClassLoader API_和依赖注入框架。</p>
<p>在本文中，我们将考虑_Class.forName()_和_Class.forName().newInstance()_方法，这些方法在Java应用程序中常用，并且对开发人员来说理解它们至关重要。</p>
<h2>2. _Class.forName()_方法</h2>`,r:{minutes:3.52,words:1055},t:"Java中Class.forName()与Class.forName().newInstance()的区别",y:"a"}}],["/posts/baeldung/2024-07-09/2024-07-09-Difference%20Between%20findBy%20and%20findAllBy%20in%20Spring%20Data%20JPA.html",{loader:()=>a(()=>import("./2024-07-09-Difference Between findBy and findAllBy in Spring Data JPA.html-e0TucXBz.js"),__vite__mapDeps([727,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Data JPA","JPA"],g:["findBy","findAllBy"],e:`
<p>在本教程中，我们将探讨在使用 Spring Data JPA 的派生查询 API 时，findBy 和 findAllBy 方法命名约定之间的区别。</p>
<h3>2.1 示例应用程序</h3>
<p>首先，我们定义一个示例 Spring Data 应用程序。然后，创建 Player 实体类：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Id</span>
    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">AUTO</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> id<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Integer</span> score<span class="token punctuation">;</span>

    <span class="token comment">// 全参构造函数和无参构造函数</span>
    <span class="token comment">// 重写的 equals 方法</span>
    <span class="token comment">// getter 和 setter</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:4.22,words:1265},t:"Spring Data JPA 中 findBy 与 findAllBy 的区别",y:"a"}}],["/posts/baeldung/2024-07-09/2024-07-09-Find%20the%20First%20Embedded%20Occurrence%20of%20an%20Integer%20in%20a%20Java%20String.html",{loader:()=>a(()=>import("./2024-07-09-Find the First Embedded Occurrence of an Integer in a Java String.html-B1PlsZ72.js"),__vite__mapDeps([728,1])),meta:{d:17204832e5,l:"2024年7月9日",c:["Java","String Manipulation"],g:["regex","java.util.regex","java.util.Scanner","String split"],e:`<hr>
<h1>在Java字符串中查找第一个嵌入的整数</h1>
<p>在本教程中，我们将探讨不同的方法来查找字符串中的第一个整数出现。例如，给定字符串 "ba31dung123"，我们只想找到第一个嵌入的整数，即 31。我们将看到如何使用正则表达式和纯Java来实现这一点。</p>
<h2>2. 使用正则表达式的解决方案</h2>
<p>正则表达式（regex）是一种强大的工具，可以根据特定模式匹配和操作字符串。它们提供了一种简洁的方式来指定字符串模式，我们可以使用它们来搜索特定的字符、单词或短语，替换文本以及根据特定规则验证字符串。</p>
<h3>2.1. 使用 Matcher 和 Pattern 类</h3>`,r:{minutes:7.11,words:2133},t:"在Java字符串中查找第一个嵌入的整数",y:"a"}}],["/posts/baeldung/2024-07-09/2024-07-09-Finding%20All%20Duplicates%20in%20a%20List%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-09-Finding All Duplicates in a List in Java.html-DN7i4usG.js"),__vite__mapDeps([729,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Collections"],g:["Java","List","Duplicates"],e:`
<h2>1. 引言</h2>
<p>在本文中，我们将学习在Java中查找列表中的重复项的不同方法。</p>
<p>给定一个包含重复元素的整数列表，我们将找出其中的重复元素。例如，给定输入列表[1, 2, 3, 3, 4, 4, 5]，输出列表将是[3, 4]。</p>
<h2>2. 使用Collections查找重复项</h2>
<p>在这一部分，我们将讨论使用Collections提取列表中存在的重复元素的两种方法。</p>
<h3>2.1. 使用Set的contains()方法</h3>
<p>Java中的Set不包含重复项。Set的contains()方法只有在元素已经存在于其中时才返回true。</p>`,r:{minutes:7.39,words:2216},t:"在Java中查找列表中的所有重复项",y:"a"}}],["/posts/baeldung/2024-07-09/2024-07-09-Fix%20EmptyResultDataAccessException%20When%20Using%20JdbcTemplate.html",{loader:()=>a(()=>import("./2024-07-09-Fix EmptyResultDataAccessException When Using JdbcTemplate.html-BWn8d1Xa.js"),__vite__mapDeps([730,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring","JDBC"],g:["JdbcTemplate","EmptyResultDataAccessException"],e:`<hr>
<h1>使用JdbcTemplate时解决EmptyResultDataAccessException异常</h1>
<p>在本简短教程中，我们将探讨Spring的_JdbcTemplate_抛出的“<em>EmptyResultDataAccessException: 预期结果大小错误：期望1，实际0</em>”异常。</p>
<p>首先，我们将详细讨论这种异常的根本原因。然后，我们将通过一个实际例子来演示如何复现它，并最终学习如何解决它。</p>
<h2>2. 原因</h2>
<p>Spring的_JdbcTemplate_类提供了执行SQL查询和检索结果的便捷方式。它在底层使用JDBC API。</p>`,r:{minutes:2.44,words:732},t:"使用JdbcTemplate时解决EmptyResultDataAccessException异常",y:"a"}}],["/posts/baeldung/2024-07-09/2024-07-09-Getting%20Started%20With%20RethinkDB.html",{loader:()=>a(()=>import("./2024-07-09-Getting Started With RethinkDB.html-DQOtbgnm.js"),__vite__mapDeps([731,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Database","NoSQL"],g:["RethinkDB","Real-time"],e:`
<h2>1. 引言</h2>
<p>在本文中，我们将了解 RethinkDB。这是一个为实时应用程序设计的开源 NoSQL 数据库。我们将看到它为我们的应用程序带来了哪些特性，我们可以用它做什么，以及如何与它交互。</p>
<h2>2. RethinkDB 是什么？</h2>
<p>RethinkDB 是一个强调可扩展性和高可用性的开源 NoSQL 数据库。它允许我们存储 JSON 文档，然后稍后进行查询。我们还能够在数据库中跨多个表执行联接，并对我们的数据执行 map-reduce 函数。</p>
<p>然而，<strong>使 RethinkDB 脱颖而出的是其实时流式传输能力</strong>。我们可以对数据库执行查询，以便结果集的更改不断流式传输回客户端，允许我们获取数据的实时更新。这意味着我们的应用程序可以在任何更改时立即向用户更新。</p>`,r:{minutes:7.92,words:2375},t:"RethinkDB 入门指南",y:"a"}}],["/posts/baeldung/2024-07-09/2024-07-09-Getting%20the%20Current%20ApplicationContext%20in%20Spring.html",{loader:()=>a(()=>import("./2024-07-09-Getting the Current ApplicationContext in Spring.html-CDrsb9yk.js"),__vite__mapDeps([732,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring","ApplicationContext"],g:["Spring Framework","ApplicationContext"],e:`
<p>在这篇简短的教程中，我们将看到如何在Spring应用程序中获取当前的_ApplicationContext_。</p>
<p>_ApplicationContext_代表Spring IoC容器，它保存了应用程序创建的所有bean。它负责实例化、配置和创建bean。此外，它从XML或Java提供的配置元数据中获取bean的信息。</p>
<p>_ApplicationContext_是_BeanFactory_的子接口。除了_BeanFactory_的功能外，它还包括消息解析和国际化、资源加载和事件发布等功能。此外，它具有加载多个上下文的功能。</p>
<p><strong>每个bean都是在容器启动后实例化的，因为它使用急切加载。</strong></p>`,r:{minutes:3.05,words:914},t:"在Spring中获取当前的ApplicationContext",y:"a"}}],["/posts/baeldung/2024-07-09/2024-07-09-Guide%20to%20HTTPie%20for%20Terminal.html",{loader:()=>a(()=>import("./2024-07-09-Guide to HTTPie for Terminal.html-j3GXP0gP.js"),__vite__mapDeps([733,1])),meta:{d:17205696e5,l:"2024年7月10日",c:["HTTPie","命令行工具"],g:["HTTP客户端","API测试"],e:`
<ol>
<li>概述</li>
</ol>
<p>在本教程中，我们将学习如何使用 HTTPie 命令行界面工具。</p>
<ol start="2">
<li>HTTPie 是什么？</li>
</ol>
<p><strong>HTTPie 是一个用于与 HTTP 服务器和 API 交互的命令行 HTTP 客户端</strong>。此外，HTTPie 也可以用于测试和调试。
它还具有格式化和着色输出、直观的语法和内置的 JSON 支持。</p>
<ol start="3">
<li>安装</li>
</ol>
<p>首先，我们需要安装它：</p>
<p>3.1. 在 Linux 上</p>`,r:{minutes:2.39,words:717},t:"HTTPie 命令行工具指南",y:"a"}}],["/posts/baeldung/2024-07-09/2024-07-09-Guide%20to%20Merging%20Two%20Maps%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-09-Guide to Merging Two Maps in Kotlin.html-Wp_ymTNm.js"),__vite__mapDeps([734,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin","Maps"],g:["Kotlin","Map Merging"],e:`
<h2>1. 概述</h2>
<p>_映射_是在大多数Kotlin应用程序中常用的数据结构。<strong>通过合并两个映射，我们可以将两个映射中的键值对组合到一个单一的映射中</strong>。</p>
<p>在本教程中，我们将探索在Kotlin中合并两个映射的多种方法。此外，我们还将看到每种方法如何处理冲突元素的场景，其中默认行为是优先考虑来自第二个映射的元素。</p>
<h2>2. 使用加号(+)运算符</h2>
<p>首先，让我们初始化两个映射，<em>map1_和_map2</em>，它们之间有字符串和整数值的映射：</p>
<div class="language-kotlin" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> map1 <span class="token operator">=</span> <span class="token function">mapOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"a"</span></span> <span class="token keyword">to</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"b"</span></span> <span class="token keyword">to</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token keyword">val</span> map2 <span class="token operator">=</span> <span class="token function">mapOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"b"</span></span> <span class="token keyword">to</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"c"</span></span> <span class="token keyword">to</span> <span class="token number">4</span><span class="token punctuation">)</span>
</code></pre></div>`,r:{minutes:3.99,words:1198},t:"Kotlin中合并两个Map的指南",y:"a"}}],["/posts/baeldung/2024-07-09/2024-07-09-Guide%20to%20Quarkus%20Funqy.html",{loader:()=>a(()=>import("./2024-07-09-Guide to Quarkus Funqy.html-tzgi5kRK.js"),__vite__mapDeps([735,1])),meta:{d:17204832e5,l:"2024年7月9日",c:["Java","Quarkus"],g:["Funqy","Serverless"],e:`
<ol>
<li>概述</li>
</ol>
<p>Quarkus 允许我们交付具有极快启动时间和较低首次接触响应时间的小体量构件。</p>
<p>在本教程中，我们将探索 Quarkus 框架的 Funqy 扩展。</p>
<ol start="2">
<li>什么是 Funqy？</li>
</ol>
<p>Quarkus Funqy 是一种解决方案，旨在提供一种便携的 Java API，允许我们编写无服务器函数。我们可以轻松地将这些函数部署到 FAAS（功能即服务）环境中，如 AWS Lambda、Azure Functions、Google Cloud Functions 和 Kubernetes Knative。我们也可以将它们作为独立服务使用。</p>`,r:{minutes:3.97,words:1192},t:"Quarkus Funqy 指南",y:"a"}}],["/posts/baeldung/2024-07-09/2024-07-09-How%20Do%20I%20Generate%20a%20Dashboard%20Report%20in%20JMeter%20.html",{loader:()=>a(()=>import("./2024-07-09-How Do I Generate a Dashboard Report in JMeter .html-Q90heVpt.js"),__vite__mapDeps([736,1])),meta:{d:16752096e5,l:"2023年2月1日",c:["JMeter","性能测试"],g:["JMeter","性能测试","报告"],e:`
<p>在本教程中，我们将探索JMeter仪表板报告的生成。JMeter是一个用Java编写的流行测试工具。我们使用JMeter进行负载测试、性能测试和压力测试。除了生成丰富的统计数据外，一个重要特性是将测试结果以有用的可视化格式显示出来。JMeter正是这样做的，它允许我们除了生成多种格式的文本报告外，还能生成仪表板报告。</p>
<h2>1. 概述</h2>
<h2>2. 先决条件</h2>
<p>我们需要一个带有JMeter maven插件的Spring Boot应用程序。我们已经设置了一个带有三个端点的示例Spring Boot MVC应用程序。这些端点返回问候消息、每日引用和服务器时间。这就是我们运行JMeter测试并生成仪表板报告所需的全部。</p>`,r:{minutes:5.37,words:1610},t:"如何在JMeter中生成仪表板报告",y:"a"}}],["/posts/baeldung/2024-07-09/2024-07-09-Initialize%20an%20ArrayList%20with%20Zeroes%20or%20Null%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-09-Initialize an ArrayList with Zeroes or Null in Java.html-B1T7K-PX.js"),__vite__mapDeps([737,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","ArrayList"],g:["Java","ArrayList","初始化"],e:'\n<h2>1. 概述</h2>\n<p>在本教程中，我们将探索使用Java ArrayList初始化所有值为null或零的不同方法。我们也可以按照我们的喜好进行初始化，并将列表初始化为不同的数值或对象。</p>\n<h2>2. 使用for循环</h2>\n<p>当考虑使用所需值或对象初始化ArrayList的问题时，我们首先想到的解决方案是使用简单的for循环。理所当然，这是一个直接可行的解决方案：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ArrayList</span>```````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>``````` arrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// arrayList.add(0);</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:5.03,words:1508},t:"Java中使用零值或空值初始化ArrayList的方法",y:"a"}}],["/posts/baeldung/2024-07-09/2024-07-09-Introduction%20to%20Roaring%20Bitmap.html",{loader:()=>a(()=>import("./2024-07-09-Introduction to Roaring Bitmap.html-DUPVQQs4.js"),__vite__mapDeps([738,1])),meta:{d:16752096e5,l:"2023年2月1日",c:["Java","Data Structures"],g:["Roaring Bitmap","BitSet","Performance"],e:`
<p>在本教程中，我们将学习关于 roaring bitmap 的知识。我们将使用一些基本的集合操作作为 roaring bitmap 的示例，并在 Java 中执行 RoaringBitmap 和 BitSet 之间的性能测试。</p>
<p>roaring bitmap 数据结构通常用于分析、搜索和大数据项目，因为它具有高性能和压缩比。它的灵感来自于位图索引，这是一种有效表示数字数组的数据结构。它类似于 Java 的 BitSet，但是经过压缩。</p>
<p>在压缩大整数集合的同时保持对各个元素的快速访问是 roaring bitmap 的重要优势。Roaring bitmap 内部使用不同类型的容器来实现这一点。</p>`,r:{minutes:10.28,words:3084},t:"Roaring Bitmap 简介",y:"a"}}],["/posts/baeldung/2024-07-09/2024-07-09-Jakarta%20EE%2010.html",{loader:()=>a(()=>import("./2024-07-09-Jakarta EE 10.html-OApETz4p.js"),__vite__mapDeps([739,1])),meta:{d:16752096e5,l:"2023年2月1日",c:["Jakarta EE","Java"],g:["Java","Web Applications"],e:`
<ol>
<li>概览</li>
</ol>
<p>在本教程中，我们将讨论Jakarta EE的最新发布。我们的目标是理解Jakarta的新变化以及这些变化如何影响Java平台。</p>
<p>到本教程结束时，我们希望您能够理解Jakarta的变化及其近期的未来。</p>
<ol start="2">
<li>什么是Jakarta EE</li>
</ol>
<p><strong>Jakarta EE是一个用于开发Java Web应用程序的开源框架，或者按照目前的表述，是云原生Java。</strong> 之前被称为Java EE（Java Enterprise Edition），由Oracle通过JCP（Java社区过程）开发和维护。然而，几年前，更确切地说是在2017年，Eclipse基金会接管了该项目。尽管如此，这两个组织无法达成一致，项目无法继续使用_javax.<em>*和_java.</em>*商标。这就是为什么现在项目被称为Jakarta的原因。</p>`,r:{minutes:6.33,words:1899},t:"Jakarta EE 10 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-09/2024-07-09-Mapping%20an%20Array%20of%20Integers%20to%20Strings%20Using%20Java%20Streams.html",{loader:()=>a(()=>import("./2024-07-09-Mapping an Array of Integers to Strings Using Java Streams.html-DxTcMApI.js"),__vite__mapDeps([740,1])),meta:{d:1720504808e3,c:["Java","Streams"],g:["Java","Stream","Integer","String"],e:`<hr>
<h1>使用Java Streams将整数数组映射为字符串</h1>
<p>在本教程中，我们将探讨如何使用Java Streams将整数数组转换为字符串数组。我们将比较根据我们拥有的是Integer数组还是原始int值所需要采取的不同方法。对于Integer，我们将使用Stream<code>&lt;Integer&gt;</code>和Integer从Object继承的方法进行转换。对于int，我们将使用专门的IntStream。</p>
<h3>2. 从数组创建Stream</h3>
<p>让我们从将数组转换为Stream开始。这里我们可以为Integer和原始整数使用相同的方法，但返回类型会有所不同。如果我们有一个Integer数组，我们将得到一个Stream<code>&lt;Integer&gt;</code>：</p>`,r:{minutes:3.1,words:930},t:"使用Java Streams将整数数组映射为字符串",y:"a"}}],["/posts/baeldung/2024-07-09/2024-07-09-Memory%20Types%20in%20JVM.html",{loader:()=>a(()=>import("./2024-07-09-Memory Types in JVM.html-DLv8JlPt.js"),__vite__mapDeps([741,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["JVM内存类型"],g:["Java","JVM","内存管理"],e:`<hr>
<h1>Java虚拟机中的内存类型</h1>
<p>在这篇简短的教程中，我们将快速了解Java虚拟机（JVM）中的内存类型。</p>
<p>JVM使用不同类型的内存来满足不同的目的，每种内存都有其自身的特点和行为。了解JVM中的不同内存类型对于设计高效稳定的应用程序至关重要。</p>
<h2>2. 堆内存</h2>
<p>当JVM启动时，它会创建堆内存。<strong>这种内存类型是JVM的一个关键组成部分，因为它存储了应用程序创建的所有对象。</strong></p>
<p>内存的大小在应用程序运行时可能会增加或减少。然而，我们可以使用<code>-Xms</code>参数指定堆内存的初始大小：</p>`,r:{minutes:3.16,words:949},t:"Java虚拟机中的内存类型",y:"a"}}],["/posts/baeldung/2024-07-09/2024-07-09-Migrate%20From%20Java%208%20to%20Java%2017.html",{loader:()=>a(()=>import("./2024-07-09-Migrate From Java 8 to Java 17.html-DlhiXvIj.js"),__vite__mapDeps([742,1])),meta:{d:17204832e5,l:"2024年7月9日",c:["Java","编程"],g:["Java 8","Java 17"],e:`
<h2>1. 概述</h2>
<p>我们经常面临是否迁移到Java的新版本或继续使用现有版本的困境。换句话说，我们需要在新特性和增强功能与迁移所需的总工作量之间进行权衡。</p>
<p>在本教程中，<strong>我们将介绍Java较新版本中一些极其有用的特性</strong>。这些特性不仅易于学习，而且在计划从Java 8迁移到Java 17时，可以快速实施，几乎不需要太多努力。</p>
<h2>2. 使用 <em>String</em></h2>
<p>让我们来看一看_String_ 类的一些有趣增强。</p>
<h3>2.1. 紧凑字符串</h3>
<p>Java 9引入了紧凑字符串，这是优化_String_ 对象内存消耗的性能增强。</p>`,r:{minutes:6.28,words:1883},t:"从Java 8迁移到Java 17 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-09/2024-07-09-OpenTelemetry%20Setup%20in%20Spring%20Boot%20Application.html",{loader:()=>a(()=>import("./2024-07-09-OpenTelemetry Setup in Spring Boot Application.html-DIN4mmji.js"),__vite__mapDeps([743,1])),meta:{d:16752096e5,l:"2023年2月1日",c:["Spring Boot","OpenTelemetry"],g:["Spring Boot","OpenTelemetry","微服务","监控","追踪"],e:`<hr>
<h1>Spring Boot 应用中的 OpenTelemetry 设置 | Baeldung</h1>
<h2>1. 概述</h2>
<p>在分布式系统中，提供请求服务时偶尔出现错误是意料之中的。一个集中的可观测性平台通过捕获应用程序的追踪/日志，并提供一个接口来查询特定请求，从而提供帮助。OpenTelemetry 通过标准化捕获和导出遥测数据的过程来提供帮助。</p>
<p>在本教程中，我们将学习如何将 Spring Boot 应用程序与 OpenTelemetry 集成。我们还将配置 OpenTelemetry 捕获应用程序追踪并将它们发送到中央系统以监控请求。</p>
<p>首先，让我们了解一些基本概念。</p>`,r:{minutes:8.16,words:2447},t:"Spring Boot 应用中的 OpenTelemetry 设置 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-09/2024-07-09-Reading%20PDF%20File%20Using%20Java.html",{loader:()=>a(()=>import("./2024-07-09-Reading PDF File Using Java.html-CyhRLzsi.js"),__vite__mapDeps([744,1])),meta:{d:17205696e5,l:"2024年7月10日",c:["Java","教程"],g:["PDF","Apache PDFBox","iText"],e:`
<ol>
<li>概述</li>
</ol>
<p>便携式文档格式（PDF）是一种用于文档的常见文件格式。它用于分发需要保留原始格式的电子文档。</p>
<p>在本教程中，我们将探索Java中读取PDF文件的两个最流行的库：Apache PDFBox和iText。</p>
<ol start="2">
<li>配置</li>
</ol>
<p>我们将使用Maven来管理依赖。</p>
<p>此外，我们将向项目根目录添加一个示例PDF文件。该文件包含一个简单的短语“Hello World!”。</p>
<p>接下来，我们将读取示例PDF文件，并测试提取的文本与预期结果是否一致。</p>
<ol start="3">
<li>使用Apache PDFBox</li>
</ol>`,r:{minutes:2.25,words:675},t:"Java中读取PDF文件的教程",y:"a"}}],["/posts/baeldung/2024-07-09/2024-07-09-Return%20Absolute%20Difference%20of%20Two%20Integers%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-09-Return Absolute Difference of Two Integers in Java.html-DvXrgr4O.js"),__vite__mapDeps([745,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Math"],g:["Absolute Difference","Integer","Overflow","Underflow"],e:`
<p>在本教程中，我们将探讨如何获取两个给定整数之间的绝对差值。</p>
<h2>2. 使用 <em>Math.abs()</em> 方法</h2>
<p>问题相当直接。让我们通过一些例子快速理解：</p>
<ul>
<li><em>num1=3, num2=4</em>: <em>absDiff=1</em></li>
<li><em>num1=3, num2=-4</em>: <em>absDiff=7</em></li>
<li><em>num1=-3, num2=-4</em>: <em>absDiff=1</em></li>
</ul>
<p>从上述例子中可以看出，<strong>给定两个整数，<em>num1</em> 和 <em>num2，</em> 结果是 <em>(num1 – num2)</em> 的绝对值。</strong> 进一步地，Java标准库提供了 <em>Math.abs()</em> 方法来返回绝对值。因此，我们可以很容易地将计算转换为Java代码：</p>`,r:{minutes:3.78,words:1135},t:"Java中返回两个整数的绝对差值",y:"a"}}],["/posts/baeldung/2024-07-09/2024-07-09-Single%20Assert%20Call%20for%20Multiple%20Properties%20in%20Java%20Unit%20Testing.html",{loader:()=>a(()=>import("./2024-07-09-Single Assert Call for Multiple Properties in Java Unit Testing.html-0mAJDaxE.js"),__vite__mapDeps([746,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Unit Testing"],g:["JUnit","AssertJ"],e:`
<h2>1. 概述</h2>
<p>作为程序员，我们经常编写测试以确保我们的代码按预期工作。在测试中的一个标准做法是使用断言。</p>
<p>当我们想要验证一个对象的多个属性时，我们可以编写一堆断言来完成这项工作。</p>
<p>然而，在本教程中，我们将探讨如何在单个断言调用中验证多个属性。</p>
<h2>2. 问题介绍</h2>
<p>在许多情况下，我们需要检查一个对象的多个属性。传统上，这意味着为每个属性编写单独的断言语句，这可能会使代码冗长且难以阅读。</p>
<p>然而，更好的方法是使用单个断言调用来验证多个属性。接下来，让我们看看如何做到这一点。</p>
<p>为了更直观的演示，首先，让我们以一个简单的POJO类为例：</p>`,r:{minutes:5.66,words:1697},t:"Java单元测试中单个断言调用多个属性",y:"a"}}],["/posts/baeldung/2024-07-09/2024-07-09-Thread.sleep%20%20%20vs%20Awaitility.await%20%20.html",{loader:()=>a(()=>import("./2024-07-09-Thread.sleep   vs Awaitility.await  .html-Cq9B4RXX.js"),__vite__mapDeps([747,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Asynchronous Operations"],g:["Thread.sleep()","Awaitility.await()"],e:`
<p>在本教程中，我们将比较Java中处理异步操作的两种方式。首先，我们将看看Thread的sleep()方法是如何工作的。然后，我们将尝试使用Awaitility库提供的功能来实现相同的功能。在这个过程中，我们将看到这些解决方案的比较，以及哪一种更适合我们的用例。</p>
<h2>2. 使用场景</h2>
<p>sleep()和await()方法在我们需要等待异步操作完成时特别有用。例如，我们的应用程序可能会向消息代理或队列发送消息。在这种情况下，我们不知道消息何时在另一端被接收。另一个用例可以是调用API端点并等待特定结果。例如，我们向服务发送请求，它启动了一个长时间运行的任务，我们等待它完成。</p>`,r:{minutes:4.83,words:1448},t:"Java中的Thread.sleep()与Awaitility.await()比较",y:"a"}}],["/posts/baeldung/2024-07-09/2024-07-09-Understanding%20the%20Difference%20Between%20Stream.of%20%20%20and%20IntStream.range%20%20.html",{loader:()=>a(()=>import("./2024-07-09-Understanding the Difference Between Stream.of   and IntStream.range  .html-YgiZL86y.js"),__vite__mapDeps([748,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Stream API"],g:["Stream.of()","IntStream.range()"],e:`
<h2>1. 概述</h2>
<p>Java 8 中引入的 Stream API 是一项重大新特性。</p>
<p>在本教程中，我们将讨论一个有趣的话题：Stream.of() 和 IntStream.range() 之间的区别。</p>
<h2>2. 问题介绍</h2>
<p>我们可以使用 Stream.of() 方法初始化一个 Stream 对象，例如 Stream.of(1, 2, 3, 4, 5)。或者，如果我们想要初始化一个整数 Stream，IntStream 是一个更直接使用的类型，例如 IntStream.range(1, 6)。然而，通过这两种方法创建的整数 Stream 的行为可能会有所不同。</p>`,r:{minutes:3.66,words:1099},t:"Java 8 中 Stream.of() 与 IntStream.range() 的区别解析",y:"a"}}],["/posts/baeldung/2024-07-09/2024-07-09-Validating%20IPv4%20Address%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-09-Validating IPv4 Address in Java.html-bq1rou8C.js"),__vite__mapDeps([749,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","编程"],g:["IPv4","验证"],e:`
<h2>1. 概述</h2>
<p>在这个简短的教程中，我们将看到如何在Java中<strong>验证IPv4地址</strong>。</p>
<h2>2. IPv4验证规则</h2>
<p>我们有效的IPv4地址形式为“<em>x.x.x.x</em>”，其中每个_x_是一个数字，范围在0到255之间，没有前导零，并且由点分隔。</p>
<p>以下是一些有效的IPv4地址示例：</p>
<ul>
<li>192.168.0.1</li>
<li>10.0.0.255</li>
<li>255.255.255.255</li>
</ul>
<p>以及一些无效的：</p>
<ul>
<li>192.168.0.256（值超过255）</li>
<li>192.168.0（只有3个八位字节）</li>
<li>.192.168.0.1（以“.”开头）</li>
<li>192.168.0.01（有前导零）</li>
</ul>`,r:{minutes:1.65,words:494},t:"Java中验证IPv4地址的方法",y:"a"}}],["/posts/baeldung/2024-07-09/2024-07-09-VarArgs%20vs%20Array%20Input%20Parameters%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-09-VarArgs vs Array Input Parameters in Java.html-D9EgDD6w.js"),__vite__mapDeps([750,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Programming"],g:["varargs","array","method parameters"],e:`<hr>
<h1>Java中可变参数与数组输入参数的比较</h1>
<p>在这个教程中，我们将探讨Java中<code>method(String… args)</code>和<code>method(String[] args)</code>之间的区别。在此过程中，我们将检查如何将数组或可变长度参数列表传递给方法。</p>
<h2>2. 向方法传递数组</h2>
<p>在这一部分，我们将展示如何声明一个类型为<code>String</code>的数组作为方法的参数，以及如何在方法调用期间传递相同类型的数组作为参数。</p>
<p>Java是一种静态类型编程语言，这意味着变量类型在编译时已知。程序员必须声明一个变量类型，无论是基本类型还是引用类型。在定义带有数组参数的方法时，<strong>我们期望在方法调用期间声明我们要作为参数传递的数组类型</strong>。</p>`,r:{minutes:4.28,words:1284},t:"Java中可变参数与数组输入参数的比较",y:"a"}}],["/posts/baeldung/2024-07-10/2024-07-10-Ahead%20of%20Time%20Optimizations%20in%20Spring%206.html",{loader:()=>a(()=>import("./2024-07-10-Ahead of Time Optimizations in Spring 6.html-yEKV0yDY.js"),__vite__mapDeps([751,1])),meta:{d:17205696e5,l:"2024年7月10日",c:["Spring Framework","Java"],g:["AOT","Spring 6","Performance Optimization"],e:`
<p>Spring 6带来了一项新特性，承诺可以优化应用程序的性能：提前编译（Ahead-of-Time，AOT）支持。</p>
<p>在本文中，我们将探讨Spring 6的AOT优化特性如何工作，它的优势以及如何使用它。</p>
<h2>2. 提前编译</h2>
<h3>2.1. 即时编译器（JIT）</h3>
<p>对于最常用的Java虚拟机（JVM），比如Oracle的HotSpot JVM和OpenJDK，当我们编译源代码（.java文件）时，生成的字节码存储在.class文件中。这样，<strong>JVM使用即时编译器（JIT）将字节码转换为机器代码。</strong></p>
`,r:{minutes:4.76,words:1429},t:"Spring 6中的提前优化",y:"a"}}],["/posts/baeldung/2024-07-10/2024-07-10-Case%20Insensitive%20Searching%20in%20ArrayList.html",{loader:()=>a(()=>import("./2024-07-10-Case Insensitive Searching in ArrayList.html-B3-hKox8.js"),__vite__mapDeps([752,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","ArrayList"],g:["Case-Insensitive","Search"],e:`
<h2>1. 概述</h2>
<p>在处理ArrayList时，搜索列表中的元素是一项标准操作。contains()方法让我们知道列表对象是否包含我们正在寻找的元素。</p>
<p>在本教程中，我们将探讨如何在ArrayList<code>&lt;String&gt;</code>对象中不区分大小写地搜索字符串。</p>
<h2>2. 问题介绍</h2>
<p>ArrayList.contains()方法在内部使用equals()方法来确定列表是否包含给定的元素。如果ArrayList中的所有元素都是字符串，即在处理ArrayList<code>&lt;String&gt;</code>时，contains()方法会以区分大小写的方式搜索给定的字符串。让我们通过一个例子快速理解。</p>`,r:{minutes:4.55,words:1366},t:"ArrayList中不区分大小写的搜索",y:"a"}}],["/posts/baeldung/2024-07-10/2024-07-10-Check%20If%20All%20the%20Variables%20of%20an%20Object%20Are%20Null.html",{loader:()=>a(()=>import("./2024-07-10-Check If All the Variables of an Object Are Null.html-tRj2VotE.js"),__vite__mapDeps([753,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Programming"],g:["null check","java","reflection"],e:`<hr>
<h1>检查对象是否所有变量都为null</h1>
<p>在本教程中，我们将学习四种方法来检查一个对象的所有变量是否都为null。</p>
<p>在Java中，null值意味着变量的值缺失。从技术上讲，包含null的变量不指向内存中的任何位置或尚未初始化。这种情况只能发生在实例变量上。像int、double和boolean这样的原始变量不能持有null。</p>
<p>在我们的程序中检查null变量有助于避免像IllegalArgumentException或NullPointerException这样的意外错误。当我们尝试访问null对象的任何成员（字段或方法）时，Java会抛出NullPointerException。</p>`,r:{minutes:5.21,words:1564},t:"检查对象是否所有变量都为null",y:"a"}}],["/posts/baeldung/2024-07-10/2024-07-10-Check%20if%20Command%20Line%20Arguments%20Are%20Null%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-10-Check if Command Line Arguments Are Null in Java.html-DIH9piHs.js"),__vite__mapDeps([754,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","CommandLine"],g:["Java","CommandLine","Arguments"],e:`<hr>
<h1>Java中检查命令行参数是否为空</h1>
<p>命令行参数是在运行时为命令行程序提供额外信息和指令的强大且有用的工具。在Java中，它们可以通过自动创建的<code>args</code>数组访问，该数组包含<code>String</code>对象，当程序被调用时带有命令行参数。然而，检查命令行参数是否为空非常重要，以便妥善处理未提供参数或参数无效或意外的情况。</p>
<p>在本教程中，我们将讨论如何检查命令行参数是否缺失。</p>
<h3>2. 访问命令行参数</h3>
<p>要在程序中访问和使用命令行参数，我们可以简单地引用<code>args</code>数组的元素：</p>`,r:{minutes:2.6,words:781},t:"Java中检查命令行参数是否为空",y:"a"}}],["/posts/baeldung/2024-07-10/2024-07-10-Check%20if%20an%20Integer%20Value%20Is%20Null%20or%20Zero%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-10-Check if an Integer Value Is Null or Zero in Java.html-CJAbo7r4.js"),__vite__mapDeps([755,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Programming"],g:["Java","Integer","Null Check"],e:`
<h2>1. 概述</h2>
<p>在这篇快速教程中，我们将学习几种不同的方式来检查给定的_Integer_实例的值是否为null或零。</p>
<p>为了简化，我们将使用单元测试断言来验证每种方法是否按预期工作。</p>
<p>接下来，让我们看看它们是如何工作的。</p>
<h2>2. 使用标准方式</h2>
<p>使用逻辑或运算符可能是执行检查的第一个想法。它简单地检查给定的_Integer_数字是否为null或零。</p>
<p>让我们创建一个方法来实现这个检查，以便于验证：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>public static boolean usingStandardWay(Integer num) {
    return num == null || num == 0;
}
</code></pre></div>`,r:{minutes:3.79,words:1136},t:"在Java中检查整数是否为null或零",y:"a"}}],["/posts/baeldung/2024-07-10/2024-07-10-Class%20Methods%20vs%20Instance%20Methods%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-10-Class Methods vs Instance Methods in Java.html-BGLz1P8L.js"),__vite__mapDeps([756,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java"],g:["类方法","实例方法"],e:`<hr>
<h1>Java中的类方法与实例方法</h1>
<h2>1. 引言</h2>
<p>在本教程中，我们将探讨Java中类方法和实例方法的区别。</p>
<p>在面向对象编程中，方法相当于一个函数。这意味着它是一个对象可以执行的动作。当它们操作成员变量时，我们使用实例方法；当不需要类的实例即可执行方法时，我们使用静态方法。让我们更详细地理解这一点。</p>
<h2>2. 实例方法与静态方法</h2>
<p>像大多数面向对象语言一样，我们在Java中创建类定义并将它们实例化为对象。</p>
<p>这些对象有与之关联的属性（成员变量）和通常引用这些成员变量的方法。<strong>当方法引用非静态成员变量时，我们必须将它们定义为实例方法</strong>。</p>`,r:{minutes:4.68,words:1404},t:"Java中的类方法与实例方法",y:"a"}}],["/posts/baeldung/2024-07-10/2024-07-10-Comparing%20Two%20JAR%20Files%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-10-Comparing Two JAR Files in Java.html-roQrk_FR.js"),__vite__mapDeps([757,1])),meta:{d:16698528e5,l:"2022年12月1日",c:["Java","Tools"],g:["JAR Comparison","Java Tools"],e:`
<p>JAR文件是分发Java应用程序的基本构件。有时，我们可能需要检查JAR文件以查看可能的变更，并找出向后兼容性。</p>
<p>在本教程中，我们将探索不同的工具来比较JAR文件。</p>
<h2>2. 示例JAR文件</h2>
<p>在本教程中，我们将比较mallet JAR文件。<strong>Mallet是一个Java机器学习库</strong>。<strong>它的用途包括聚类、自然语言处理</strong>等。我们将比较2.0.7版本和2.0.8版本。我们将使用不同的工具来比较这两个JAR文件并记录变更。</p>
<h2>3. 使用Jarcomp</h2>
<p><strong>Jarcomp是一个免费的跨平台工具，用于比较JAR和ZIP文件</strong>。它通过引用大小变化来显示两个文件之间的变化。</p>`,r:{minutes:5.09,words:1528},t:"Java中比较两个JAR文件",y:"a"}}],["/posts/baeldung/2024-07-10/2024-07-10-Comparing%20a%20String%20to%20an%20Enum%20Value%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-10-Comparing a String to an Enum Value in Java.html-YxXq0Aes.js"),__vite__mapDeps([758,1])),meta:{d:17205696e5,l:"2024年7月10日",c:["Java","编程"],g:["Java","枚举","字符串比较"],e:`
<p>Java在版本5中引入了枚举，枚举提供了一种安全和简洁的方式来管理常量。</p>
<p>在这篇快速教程中，我们将探讨如何将字符串与枚举对象进行比较。</p>
<h2>2. 问题介绍</h2>
<p>首先，让我们看一个枚举的例子：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">enum</span> <span class="token class-name">Weekday</span> <span class="token punctuation">{</span>
    <span class="token class-name">Mon</span><span class="token punctuation">(</span><span class="token string">"Monday"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Tue</span><span class="token punctuation">(</span><span class="token string">"Tuesday"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Wed</span><span class="token punctuation">(</span><span class="token string">"Wednesday"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Thu</span><span class="token punctuation">(</span><span class="token string">"Thursday"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Fri</span><span class="token punctuation">(</span><span class="token string">"Friday"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">Sat</span><span class="token punctuation">(</span><span class="token string">"Saturday"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> fullName<span class="token punctuation">;</span>

    <span class="token class-name">Weekday</span><span class="token punctuation">(</span><span class="token class-name">String</span> fullName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>fullName <span class="token operator">=</span> fullName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> fullName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:4.28,words:1284},t:"Java中将字符串与枚举值进行比较",y:"a"}}],["/posts/baeldung/2024-07-10/2024-07-10-Compiling%20and%20Executing%20Code%20From%20a%20String%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-10-Compiling and Executing Code From a String in Java.html-BB1KmaDX.js"),__vite__mapDeps([759,1])),meta:{d:16725312e5,l:"2023年1月1日",c:["Java","编程"],g:["JavaCompiler API","动态编译"],e:`
<p>在本教程中，我们将学习如何将包含Java源代码的_String_转换为编译后的类并执行它。在运行时编译代码有许多潜在的应用场景：</p>
<ul>
<li>生成代码 - 来自运行时不可用或经常变化的信息的动态代码</li>
<li>热交换 - 不用重启应用程序即可替换代码</li>
<li>代码存储/注入 - 将应用程序逻辑存储在数据库中，以便临时检索和执行。如果小心操作，可以在不使用时卸载自定义类。</li>
</ul>
<p>尽管有几种编译类的方法，但今天我们将重点关注JavaCompiler API。</p>
<p>_javax.tools_包包含了我们将需要编译_String_的大部分抽象。让我们来看一看其中的一些，以及我们将遵循的一般流程：</p>`,r:{minutes:7.14,words:2141},t:"在Java中从字符串编译和执行代码",y:"a"}}],["/posts/baeldung/2024-07-10/2024-07-10-Convert%20String%20to%20Char%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-10-Convert String to Char in Kotlin.html-BnuqCHj2.js"),__vite__mapDeps([760,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin","Programming"],g:["String","Char","Conversion"],e:`<hr>
<h1>Kotlin中将字符串转换为字符</h1>
<h2>1. 引言</h2>
<p>在处理用户输入或数据验证时，有时需要将字符串（String）转换为字符（Char）。请注意，在Kotlin中，我们用双引号（" "）包围字符串，而用单引号（‘ ’）表示字符。</p>
<p>在本教程中，我们将通过示例讨论在Kotlin中将字符串转换为字符的多种方法。</p>
<h2>2. 定义</h2>
<p>在Kotlin中，字符串和字符是两种不同的数据类型。<strong>字符串是字符序列，可以包含零个或多个字符，而字符表示单个Unicode字符</strong>。此外，字符串类实现了CharSequence接口，这意味着我们可以将字符串视为字符序列。</p>`,r:{minutes:2.98,words:894},t:"Kotlin中将字符串转换为字符",y:"a"}}],["/posts/baeldung/2024-07-10/2024-07-10-Convert%20an%20ArrayList%20of%20Object%20to%20an%20ArrayList%20of%20String%20Elements.html",{loader:()=>a(()=>import("./2024-07-10-Convert an ArrayList of Object to an ArrayList of String Elements.html-CN4Pjg7t.js"),__vite__mapDeps([761,1])),meta:{d:16807392e5,l:"2023年4月6日",c:["Java"],g:["ArrayList","String","Collections","Streams","Guava"],e:`
<h2>1. 引言</h2>
<p>在本文中，我们将探讨不同方式，将给定的ArrayList<code>&lt;Object&gt;</code>转换为ArrayList<code>&lt;String&gt;</code>。</p>
<h2>2. 问题陈述</h2>
<p>让我们在这里理解问题陈述。假设我们有一个ArrayList<code>&lt;Object&gt;</code>，其中的对象可以是任何类型，从自动装箱的基本类型如Integer、Float或Boolean，到非基本的引用类型如String、ArrayList、HashMap，甚至是自定义定义的类。<strong>我们必须编写代码将上述列表转换为ArrayList<code>&lt;String&gt;</code></strong>。让我们看一些例子：</p>`,r:{minutes:5.05,words:1515},t:"将ArrayList<Object>转换为ArrayList<String>的不同方法",y:"a"}}],["/posts/baeldung/2024-07-10/2024-07-10-Convert%20byte%20%20%20to%20MultipartFile%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-10-Convert byte   to MultipartFile in Java.html-BWq8vhDA.js"),__vite__mapDeps([762,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java"],g:["MultipartFile","byte array"],e:`
<p>在本教程中，我们将探讨如何将字节数组转换为MultipartFile。</p>
<p>MultipartFile是Spring提供的接口，用于接收多个请求块中的文件，因此我们需要一些实现来实例化一个MultipartFile对象。Spring没有为代码提供任何默认实现，但它确实提供了一个用于测试目的的实现。</p>
<h3>2. 实现MultipartFile接口</h3>
<p>让我们为我们自己的MultipartFile接口创建实现，并包装输入的字节数组：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomMultipartFile</span> <span class="token keyword">implements</span> <span class="token class-name">MultipartFile</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> input<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//我们在下一个代码片段中定义了其余的接口方法</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.56,words:768},t:"Java中将字节数组转换为MultipartFile",y:"a"}}],["/posts/baeldung/2024-07-10/2024-07-10-Converting%20a%20Number%20from%20One%20Base%20to%20Another%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-10-Converting a Number from One Base to Another in Java.html--R2teoI_.js"),__vite__mapDeps([763,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Number Conversion"],g:["Java","Base Conversion","Integer Class"],e:`
<p>在本教程中，我们将探讨如何在Java中将数字从一个进制转换到另一个进制。例如，将数字从二进制转换到五进制以及相反的操作，我们将使用两种方法。</p>
<h2>2. Integer类</h2>
<p>java.lang包中的Integer类是一个包装类，它将基本类型int封装为Integer对象。这个类有几种方法用于操作int，并用于将int转换为String对象，以及将String转换为int类型。我们将需要使用parseInt()和toString()方法来帮助我们进行数字的进制转换。</p>
<h3>2.1. parseInt()方法</h3>
<p>parseInt()方法有两个参数：String s和int radix：</p>`,r:{minutes:4.71,words:1412},t:"Java中数字从一个进制转换到另一个进制",y:"a"}}],["/posts/baeldung/2024-07-10/2024-07-10-Converting%20a%20String%20Array%20Into%20an%20int%20Array%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-10-Converting a String Array Into an int Array in Java.html-Ck-P-wwS.js"),__vite__mapDeps([764,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Programming"],g:["Java","String Array","int Array"],e:`<hr>
<h1>Java中将字符串数组转换为整数数组</h1>
<h2>1. 概述</h2>
<p>在本快速教程中，我们将探讨如何在Java中将字符串数组转换为整数数组。</p>
<h2>2. 问题介绍</h2>
<p>首先，让我们看一个字符串数组的例子：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stringArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token string">"6"</span><span class="token punctuation">,</span> <span class="token string">"42"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:3.65,words:1096},t:"Java中将字符串数组转换为整数数组",y:"a"}}],["/posts/baeldung/2024-07-10/2024-07-10-Difference%20Between%20JPA%20and%20Spring%20Data%20JPA.html",{loader:()=>a(()=>import("./2024-07-10-Difference Between JPA and Spring Data JPA.html-BwlsAUu1.js"),__vite__mapDeps([765,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring","Hibernate"],g:["JPA","Spring Data JPA"],e:`
<p>我们有多种选项可以使用Java应用程序连接到数据库。通常，我们从不同的层次开始，从JDBC开始。然后，我们转向JPA，实现方式如Hibernate。JPA最终会使用JDBC，但通过对象-实体管理方法，使其对用户更加透明。</p>
<p>最后，我们可以拥有像Spring Data JPA这样的框架集成，它使用预定义的接口来访问实体，但在底层仍然使用JPA和实体管理器。</p>
<p>在本教程中，我们将讨论Spring Data JPA和JPA之间的区别。我们还将解释它们如何以一些高级概述和代码片段一起工作。让我们从解释JDBC的一些历史以及JPA是如何出现的开始。</p>
<p>...（此处省略了翻译的其余部分，以符合指令要求）...</p>`,r:{minutes:.84,words:252},t:"JPA与Spring Data JPA的区别",y:"a"}}],["/posts/baeldung/2024-07-10/2024-07-10-Differences%20Between%20Spring%20Data%20JPA%20findFirst%20%20%20and%20findTop%20%20.html",{loader:()=>a(()=>import("./2024-07-10-Differences Between Spring Data JPA findFirst   and findTop  .html-Cq8CMYbj.js"),__vite__mapDeps([766,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Data JPA","findFirst() vs findTop()"],g:["Spring Data JPA","findFirst()","findTop()"],e:`
<p>在本教程中，我们将学习 Spring Data JPA 中的 <em>findFirst()</em> 和 <em>findTop()</em> 方法。这些方法提供了数据检索功能。它们映射到 SQL 中对应的选择查询。</p>
<p>Spring Data JPA 是 Spring 项目下的一个框架。它提供了与持久层工作的 API，即我们用它为我们的关系数据库管理系统（RDBMS）的数据访问层。</p>
<p><em>JpaRepository</em> 接口提供了实现数据访问层的一种方式。</p>
<p><em>JpaRepository</em> 是一个泛型接口。我们定义一个接口，该接口扩展了 <em>JpaRepository</em>。接口使用我们的 <em>Entity</em> 和 <em>Entity</em> 的主键进行类型化。接下来，我们在我们的仓库接口中添加方法声明。</p>`,r:{minutes:5.17,words:1550},t:"Spring Data JPA 中的 findFirst() 和 findTop() 的区别",y:"a"}}],["/posts/baeldung/2024-07-10/2024-07-10-Encoding%20of%20URI%20Variables%20on%20RestTemplate.html",{loader:()=>a(()=>import("./2024-07-10-Encoding of URI Variables on RestTemplate.html-Cs9esQQx.js"),__vite__mapDeps([767,1])),meta:{d:1720656e6,l:"2024年7月11日",c:["Spring","RestTemplate"],g:["URI编码","RestTemplate"],e:`<hr>
<h1>Spring的RestTemplate中的URI变量编码</h1>
<p>在本教程中，我们将学习如何在Spring的RestTemplate上对URI变量进行编码。</p>
<p>我们面临的一个常见编码问题就是当我们有一个包含加号（+）的URI变量时。例如，如果我们有一个值为_http://localhost:8080/api/v1/plus+sign_的URI变量，加号将被编码为一个空格，这可能导致服务器响应意外。</p>
<p>让我们看看几种解决这个问题的方法。</p>
<h3>2.1. Spring Web依赖性</h3>
<p>首先，让我们将Spring Web Starter依赖性添加到我们的_pom.xml_中：</p>`,r:{minutes:3.99,words:1196},t:"Spring的RestTemplate中的URI变量编码",y:"a"}}],["/posts/baeldung/2024-07-10/2024-07-10-Flyway%20Out%20of%20Order%20Migrations.html",{loader:()=>a(()=>import("./2024-07-10-Flyway Out of Order Migrations.html-B3UMxHp5.js"),__vite__mapDeps([768,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Database","Spring Boot"],g:["Flyway","Migrations"],e:`
<p>在本教程中，我们将学习使用 Flyway 进行数据库迁移的基础知识，并看到一个特定的用例，即当我们需要按非顺序运行迁移时。</p>
<h2>2. Flyway 简介</h2>
<p><strong>Flyway 是一个通过迁移帮助进行数据库版本控制的工具。</strong> 我们可以创建改变数据库状态的脚本，这些脚本被称为迁移。</p>
<p>我们需要迁移的情况有几种。例如，我们可能需要从先前的数据源填充我们的数据库。或者我们有一个已经发布的应用程序，它已经使用了一个数据库，我们需要部署一个依赖于修改后的数据库模式的新版本。在这两种情况下，我们都可以使用迁移来实现所需的结果。</p>
`,r:{minutes:4.65,words:1394},t:"Flyway 无序迁移教程",y:"a"}}],["/posts/baeldung/2024-07-10/2024-07-10-Getting%20Class%20Type%20From%20a%20String%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-10-Getting Class Type From a String in Java.html-Be9Afch8.js"),__vite__mapDeps([769,1])),meta:{d:172064531e4,c:["Java","反射"],g:["Class","forName","newInstance"],e:`<hr>
<h1>在Java中从字符串获取类类型</h1>
<h2>1. 概述</h2>
<p><code>Class</code>类在Java反射中扮演着重要的角色，它是所有反射操作的起点。</p>
<p>在这个快速教程中，我们将探讨如何从一个字符串中的类名获取<code>Class</code>对象。</p>
<h2>2. 问题介绍</h2>
<p>首先，让我们创建一个简单的类作为示例：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>baeldung<span class="token punctuation">.</span>getclassfromstr</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyNiceClass</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">greeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"Hi there, I wish you all the best!"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:3.01,words:904},t:"在Java中从字符串获取类类型",y:"a"}}],["/posts/baeldung/2024-07-10/2024-07-10-Implementing%20Retry%20in%20Kafka%20Consumer.html",{loader:()=>a(()=>import("./2024-07-10-Implementing Retry in Kafka Consumer.html-Bf2EGTQQ.js"),__vite__mapDeps([770,1])),meta:{d:16504992e5,l:"2022年4月21日",c:["Spring","Kafka"],g:["Retry","Kafka Consumer"],e:'\n<p>在本教程中，我们将讨论在Kafka中实现重试的重要性。我们将探索在Spring Boot上实现它的各种选项，并学习最佳实践，以最大化Kafka消费者的可靠性和弹性。</p>\n<p>如果我们是第一次在Spring上配置Kafka，并想学习更多，我们可以从Spring和Kafka的介绍文章开始。</p>\n<h2>2. 项目设置</h2>\n<p>让我们创建一个新的Spring Boot项目，并添加_spring-kafka_依赖：</p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`org.springframework.kafka`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`spring-kafka`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`3.1.2`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n</code></pre></div>',r:{minutes:8.02,words:2407},t:"在Kafka消费者中实现重试",y:"a"}}],["/posts/baeldung/2024-07-10/2024-07-10-Introduction%20to%20ScyllaDB%20with%20Java.html",{loader:()=>a(()=>import("./2024-07-10-Introduction to ScyllaDB with Java.html-BXmmPW6Y.js"),__vite__mapDeps([771,1])),meta:{d:17205696e5,l:"2024年7月10日",c:["ScyllaDB","Java"],g:["NoSQL","Database","Java Driver"],e:`
<p>在这个教程中，我们将探索ScyllaDB——一个快速且可扩展的NoSQL数据库。我们将看到它的特性以及如何与之交互。</p>
<h2>2. ScyllaDB是什么？</h2>
<p>**ScyllaDB是一个开源的分布式NoSQL数据库。**它支持与Cassandra相同的协议，但具有更高的吞吐量和更低的延迟。它使用C++语言开发。</p>
<p>ScyllaDB有三个变体：</p>
<ul>
<li>ScyllaDB开源版：这是一个免费的开源版本。我们将拥有完全所有权，需要自己进行维护</li>
<li>ScyllaDB企业版：这是一个付费版本，我们将获得一些高级功能和全天候支持。我们需要使用自己的基础设施来安装这个版本</li>
<li>ScyllaDB云服务：这是ScyllaDB提供的基于云的服务，我们不需要拥有自己的基础设施或进行任何安装和维护</li>
</ul>`,r:{minutes:2.97,words:891},t:"ScyllaDB与Java入门指南",y:"a"}}],["/posts/baeldung/2024-07-10/2024-07-10-Java%20List%20Interface.html",{loader:()=>a(()=>import("./2024-07-10-Java List Interface.html-AOwHis-P.js"),__vite__mapDeps([772,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Collections"],g:["List","ArrayList","LinkedList"],e:`
<ol>
<li>概述</li>
</ol>
<p>在本教程中，我们将探讨 Java 的 List 接口。我们将讨论 List 提供的方法、它的实现以及使用场景。</p>
<ol start="2">
<li>Java 列表简介</li>
</ol>
<p>Java 是一种面向对象的语言，因此大多数问题都涉及对象以及与这些对象相关的行为或动作。</p>
<p>此外，我们经常需要同时操作多个相同类型的对象，这就是集合发挥作用的地方。Java 的 List 是一种集合的实现，它保证元素的顺序并允许重复。</p>
<ol start="3">
<li>List 方法和用法</li>
</ol>
<p>让我们看看 List 接口中最重要的方法，并看看如何使用它们。在这个例子中，我们将使用 ArrayList 实现。</p>`,r:{minutes:5.24,words:1572},t:"Java List 接口 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-10/2024-07-10-Kotlin%20when%20vs.%20Java%20switch%20Statement.html",{loader:()=>a(()=>import("./2024-07-10-Kotlin when vs. Java switch Statement.html-BYDFYi0Q.js"),__vite__mapDeps([773,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin","Java"],g:["when","switch"],e:`
<p>Kotlin 和 Java 作为构建健壮且可扩展应用的流行选择而脱颖而出。这两种语言都提供了独特的特性和语法，有助于它们的优势。</p>
<p>在本教程中，我们将深入探讨 Kotlin 的强大 when 表达式和 Java 的传统 switch 语句，比较它们的使用、语法和能力。通过检查代码示例并提供详细的解释，我们旨在帮助理解这些结构的优势和细微差别。</p>
<p>Java 的 switch 语句虽然是语言的长期特性，但与 Kotlin 的 when 表达式相比有其局限性。在 Java 7 之前，switch 语句仅支持原始类型和枚举类型。从 Java 7 开始，它还支持 Strings。让我们探索一个使用 Java 的 switch 语句的简单示例：</p>`,r:{minutes:4.01,words:1204},t:"Kotlin 的 when 表达式与 Java 的 switch 语句",y:"a"}}],["/posts/baeldung/2024-07-10/2024-07-10-Lambda%20Expression%20vs.%20Anonymous%20Inner%20Class.html",{loader:()=>a(()=>import("./2024-07-10-Lambda Expression vs. Anonymous Inner Class.html-BJmdbMmP.js"),__vite__mapDeps([774,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Programming"],g:["Lambda Expression","Anonymous Class"],e:`
<p>匿名类是像嵌套类一样但没有名称的类。Lambda表达式是在Java 8中引入的，以促进函数式编程。在某些用例中，它们被用作匿名类的替代品。在本文中，我们将探讨匿名类和Lambda表达式之间的区别。</p>
<p>匿名类实现了接口和抽象类，而无需创建额外的子类。此外，匿名类没有名称，并且<strong>同时提供类定义并实例化它</strong>。</p>
<p>现在让我们看一个实现_Runnable_接口的匿名类的示例：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnonymousClassExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread: "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" started"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:4.24,words:1271},t:"Lambda表达式与匿名内部类的比较",y:"a"}}],["/posts/baeldung/2024-07-10/2024-07-10-Monads%20in%20Java%20%20%20Optional.html",{loader:()=>a(()=>import("./2024-07-10-Monads in Java   Optional.html-Dz5HJTUJ.js"),__vite__mapDeps([775,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java"],g:["Monad","Java 8","Optional"],e:`
<p>在本教程中，我们将讨论Monads及其在Java中的定义。我们的目标是理解这个概念，它解决的问题，以及Java语言是如何实现它的。</p>
<p>通过本教程，我们希望读者能够理解Monads的概念以及如何充分利用它。</p>
<h2>2. 概念</h2>
<p><strong>Monad是一种在函数式编程世界中流行的设计模式</strong>。然而，它实际上起源于一个名为范畴论的数学领域。本文将重点讨论软件工程领域的Monad定义。尽管两种定义有许多相似之处，但软件定义和该领域的术语更与我们的上下文相关。</p>
<p><strong>简而言之，一个通用的概念是一个对象，它可以基于转换将自己映射到不同的结果</strong>。</p>`,r:{minutes:5.45,words:1635},t:"Java中的Monads – Optional",y:"a"}}],["/posts/baeldung/2024-07-10/2024-07-10-Multiply%20a%20BigDecimal%20by%20an%20Integer%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-10-Multiply a BigDecimal by an Integer in Java.html-B_9oHeYk.js"),__vite__mapDeps([776,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","BigDecimal"],g:["BigDecimal","Integer","Java"],e:`<hr>
<h1>Java中BigDecimal与Integer的乘法操作</h1>
<h2>1. 概述</h2>
<p>在Java编程中，_Integer_和_BigDecimal_是我们日常使用中非常常见的两种数字类型。</p>
<p>在这个快速教程中，我们将探讨如何将_BigDecimal_数字与_Integer_数字相乘。</p>
<h2>2. 问题介绍</h2>
<p>一个例子可以快速解释问题。假设我们有一个_BigDecimal_数字和一个整数：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name">BigDecimal</span> <span class="token constant">BIG</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"42.42"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">INT</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:3.44,words:1033},t:"Java中BigDecimal与Integer的乘法操作",y:"a"}}],["/posts/baeldung/2024-07-10/2024-07-10-NonUniqueResultException%20in%20Spring%20Data%20JPA.html",{loader:()=>a(()=>import("./2024-07-10-NonUniqueResultException in Spring Data JPA.html-BqQ2YORd.js"),__vite__mapDeps([777,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Data JPA","NonUniqueResultException"],g:["Exception Handling","JPA"],e:`<hr>
<h1>Spring Data JPA中的NonUniqueResultException</h1>
<p>Spring Data JPA提供了一个简单一致的接口来访问存储在各种关系型数据库中的数据，使开发者能够更容易地编写数据库无关的代码。它还消除了大量样板代码的需要，允许开发者专注于构建应用程序的业务逻辑。</p>
<p>然而，我们仍然需要确保正确的返回类型，否则会抛出一个异常。在本教程中，我们将重点关注_NonUniqueResultException_。我们将学习是什么导致了它以及当我们遇到它时如何修复我们的代码。</p>
<p>当一个查询方法预期返回单个结果但发现多个结果时，Spring Data JPA框架会抛出一个_运行时异常NonUniqueResultException_。这可能发生在使用Spring Data JPA的查询方法之一执行查询时，例如_findById()_、_findOne()_或不返回集合的自定义定义方法。</p>`,r:{minutes:3.69,words:1107},t:"Spring Data JPA中的NonUniqueResultException",y:"a"}}],["/posts/baeldung/2024-07-10/2024-07-10-PrintStream%20vs%20PrintWriter%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-10-PrintStream vs PrintWriter in Java.html-PzN211Tu.js"),__vite__mapDeps([778,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java"],g:["PrintStream","PrintWriter"],e:`
<p>在这个教程中，我们将比较Java中的PrintStream和PrintWriter类。本文将帮助程序员为每个类找到合适的用例。</p>
<p>在深入内容之前，我们建议查看我们之前的文章，其中展示了如何使用PrintStream和PrintWriter。</p>
<h2>1. 引言</h2>
<h2>2. PrintStream和PrintWriter之间的相似性</h2>
<p>因为PrintStream和PrintWriter共享一些功能，程序员有时很难找到这些类的适当用例。让我们首先确定它们的相似之处；然后，我们将看看它们的差异。</p>
<h3>2.1. 字符编码</h3>
<p>无论系统如何，<strong>字符编码允许程序以一致的方式在不同平台上解释文本</strong>。</p>`,r:{minutes:6.9,words:2069},t:"Java中的PrintStream与PrintWriter比较",y:"a"}}],["/posts/baeldung/2024-07-10/2024-07-10-RESTful%20Microservices%20With%20RestExpress.html",{loader:()=>a(()=>import("./2024-07-10-RESTful Microservices With RestExpress.html-hdC8hQ9q.js"),__vite__mapDeps([779,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","RESTful Microservices"],g:["RestExpress","Microservices"],e:`
<p>现代软件架构常常是破碎的。缓慢的交付导致错失机会，由于架构复杂性，创新停滞不前，而且工程资源异常昂贵。</p>
<p>Orkes是领先的工作流编排平台，旨在使团队能够转变他们开发、连接和部署应用程序、微服务、AI代理等的方式。</p>
<p>通过Orkes Cloud管理的Orkes Conductor，开发人员可以专注于构建关键任务应用程序，而不必担心基础设施维护以满足目标，简单来说，就是更快地将新产品推向市场并降低总拥有成本。</p>
<p><strong>立即尝试Orkes Conductor的14天免费试用</strong>。</p>
<h2>1. 概述</h2>
<p>在本教程中，我们将学习如何使用RestExpress构建RESTful微服务。</p>`,r:{minutes:9.72,words:2916},t:"使用RestExpress构建RESTful微服务",y:"a"}}],["/posts/baeldung/2024-07-10/2024-07-10-Record%20Patterns%20in%20Java%2019.html",{loader:()=>a(()=>import("./2024-07-10-Record Patterns in Java 19.html-Bta4dqBi.js"),__vite__mapDeps([780,1])),meta:{d:1720656e6,l:"2024年7月11日",c:["Java"],g:["Java 19","Record Patterns"],e:`
<p>在本教程中，我们将讨论 Java SE 19 中的新预览特性 JEP-405：记录模式。我们将看到如何分解记录值以及如何将记录模式与类型模式结合起来使用。</p>
<p>我们将使用以下两个记录：一个名为 <code>GPSPoint</code> 的记录，它包含 <code>latitude</code> 和 <code>longitude</code>：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">record</span> <span class="token class-name">GPSPoint</span><span class="token punctuation">(</span><span class="token keyword">double</span> latitude<span class="token punctuation">,</span> <span class="token keyword">double</span> longitude<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:3.88,words:1165},t:"Java 19 中的记录模式 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-10/2024-07-10-Spring%20Boot%20Logback%20and%20Log4j2%20Extensions.html",{loader:()=>a(()=>import("./2024-07-10-Spring Boot Logback and Log4j2 Extensions.html-CA2dlyoj.js"),__vite__mapDeps([781,1])),meta:{d:17205696e5,l:"2024年7月10日",c:["Spring Boot","Logback","Log4j2"],g:["Spring Boot","Logback","Log4j2","日志"],e:`
<p>记录是任何软件应用程序的重要组成部分，它有助于故障排除和调试问题。此外，它还可用于监控目的。Spring Boot 支持流行的日志框架，如 Logback 和 Log4j2。<strong>Spring Boot 为 Logback 和 Log4j2 提供了一些扩展，这些扩展可能对高级配置很有用。</strong></p>
<p>在本教程中，我们将探讨 Spring Boot 应用程序中的 Logback 和 Log4j2 扩展。</p>
<p>Spring Boot 默认使用 Logback 库进行记录。在这一部分中，我们将了解一些可以帮助进行高级配置的 Logback 扩展。</p>`,r:{minutes:7.06,words:2119},t:"Spring Boot Logback 和 Log4j2 扩展",y:"a"}}],["/posts/baeldung/2024-07-10/2024-07-10-Spring%20MVC%20%20%20Mapping%20the%20Root%20URL%20to%20a%20Page.html",{loader:()=>a(()=>import("./2024-07-10-Spring MVC   Mapping the Root URL to a Page.html-CMYOZzrA.js"),__vite__mapDeps([782,1])),meta:{d:16725312e5,l:"2023年1月1日",c:["Spring MVC","Web Development"],g:["Spring MVC","Root URL Mapping"],e:'<hr>\n<h1>Spring MVC – 将根URL映射到页面</h1>\n<p>本教程将展示如何在Spring MVC中将根URL映射到一个页面。</p>\n<p>首先，我们将查看Spring MVC的默认行为。然后，我们将讨论这种行为被抑制的场景。最后，我们将学习提供自定义映射的方法。</p>\n<h2>2. 项目设置</h2>\n<p>我们可以使用Spring Initializr生成项目，并添加Spring Web Starter依赖。</p>\n<p>如果手动添加依赖，我们需要在_pom.xml_文件中添加以下内容：</p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`org.springframework.boot`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`spring-boot-starter-web`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n</code></pre></div>',r:{minutes:3.21,words:962},t:"Spring MVC – 将根URL映射到页面",y:"a"}}],["/posts/baeldung/2024-07-10/2024-07-10-Storing%20Data%20Triple%20in%20a%20List%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-10-Storing Data Triple in a List in Java.html-RS7y-Wl3.js"),__vite__mapDeps([783,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","ArrayList"],g:["Java","Triple","ArrayList"],e:`
<p>在本教程中，我们将首先理解什么是三元组，然后讨论如何在Java的_ArrayList_中存储三元组元素。</p>
<h2>2. 什么是三元组？</h2>
<p>我们可能听说过_Pair_类型，它总是包含两个值，例如，键值关联。三元组与配对非常相似。唯一的区别是<strong>三元组总是有三个值而不是两个</strong>。例如，一个3D坐标可以被认为是一个三元组结构：<em>x=-100L, y=0L, z=200L</em>。</p>
<p>在3D坐标示例中，三元组中的三个值类型相同：<em>Long</em>。然而，<strong>三元组中的三个值类型并不一定相同</strong>。例如，_name="Lionel Messi"，birthday=1987年6月24日（日期），number=10_是足球运动员的另一个三元组结构示例。在这个示例中，三元组中的三个值类型不同：<em>String</em>，<em>Date_和_Integer</em>。</p>`,r:{minutes:7.81,words:2343},t:"在Java中使用ArrayList存储三元组数据",y:"a"}}],["/posts/baeldung/2024-07-10/2024-07-10-Stream%20to%20Iterable%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-10-Stream to Iterable in Java.html-BaJh4AV7.js"),__vite__mapDeps([784,1])),meta:{d:16807392e5,l:"2023年4月6日",c:["Java","Programming"],g:["Java 8","Streams","Iterable"],e:`
<h2>1. 引言</h2>
<p>Java Streams API是在Java 8中引入的，它为处理元素序列提供了功能。Streams API支持在流水线上对一个对象集合进行操作链式调用，以产生所需的结果。</p>
<p>在本教程中，我们将探讨将Stream用作Iterable的不同方式。</p>
<h2>2. Iterable和Iterator</h2>
<p>自Java 1.5以来，Iterable<code>&lt;T&gt;</code>接口就已可用。实现此接口的类允许类的实例成为for-each循环语句的目标。实现类不存储任何关于其迭代状态的信息，并且应该产生其自身的有效Iterator。</p>`,r:{minutes:3.33,words:1e3},t:"Java Stream转换为Iterable",y:"a"}}],["/posts/baeldung/2024-07-10/2024-07-10-Structured%20Concurrency%20in%20Java%2019.html",{loader:()=>a(()=>import("./2024-07-10-Structured Concurrency in Java 19.html-CPL57lx4.js"),__vite__mapDeps([785,1])),meta:{d:1674864e6,l:"2023年1月28日",c:["Java","Concurrency"],g:["Java 19","Structured Concurrency"],e:'\n<h2>1. 概述</h2>\n<p>在本教程中，我们将讨论孵化器特性结构化并发（JEP 428），它为Java 19提供了结构化并发的能力。我们将指导您使用新的API来管理多线程代码。</p>\n<h2>2. 理念</h2>\n<p>通过采用减少线程泄漏和取消延迟可能性的并发编程风格，增强多线程代码的可维护性、可靠性和可观察性，这些是与取消和关闭相关的常见风险。为了更好地理解非结构化并发的问题，让我们看一个例子：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Future</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Shelter</span><span class="token punctuation">&gt;</span></span>`` shelter<span class="token punctuation">;</span>\n<span class="token class-name">Future</span>`<span class="token operator">&lt;</span><span class="token class-name">List</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dog</span><span class="token punctuation">&gt;</span></span>````<span class="token operator">&gt;</span> dogs<span class="token punctuation">;</span>\n<span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    shelter <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">getShelter</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    dogs <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">getDogs</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Shelter</span> theShelter <span class="token operator">=</span> shelter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 等待shelter</span>\n    <span class="token class-name">List</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dog</span><span class="token punctuation">&gt;</span></span>``` theDogs <span class="token operator">=</span> dogs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 等待dogs</span>\n    <span class="token class-name">Response</span> response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span>theShelter<span class="token punctuation">,</span> theDogs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> <span class="token operator">|</span> <span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:3.3,words:991},t:"Java 19中的结构化并发 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-10/2024-07-10-The%20JVM%20Run%20Time%20Data%20Areas.html",{loader:()=>a(()=>import("./2024-07-10-The JVM Run Time Data Areas.html-BxhkJ8qj.js"),__vite__mapDeps([786,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","JVM"],g:["JVM","运行时数据区"],e:`
<h2>1. 概述</h2>
<p><strong>Java虚拟机(JVM)是一种抽象的计算机，它使计算机能够运行Java程序。</strong> JVM负责执行编译后的Java代码中的指令。为了这样做，它需要一定量的内存来存储其操作所需的数据和指令。这些内存被划分为不同的区域。</p>
<p>在本教程中，我们将讨论不同类型的运行时数据区及其用途。每个JVM实现都必须遵循这里解释的规范。</p>
<p>JVM有几个所有在JVM中运行的线程共享的数据区域。<strong>因此，不同的线程可以同时访问这些区域中的任何一个。</strong></p>
<h3>2.1. 堆</h3>
<p><strong>堆是运行时数据区，存储所有的Java对象。</strong> 因此，每当我们创建一个新的类实例或数组时，JVM会在堆中找到一些可用的内存，并将其分配给对象。堆的创建发生在JVM启动时，其销毁发生在退出时。</p>`,r:{minutes:4.54,words:1362},t:"Java虚拟机(JVM)运行时数据区",y:"a"}}],["/posts/baeldung/2024-07-10/2024-07-10-Working%20With%20Multiple%20Repositories%20in%20Gradle.html",{loader:()=>a(()=>import("./2024-07-10-Working With Multiple Repositories in Gradle.html-BmIb55-F.js"),__vite__mapDeps([787,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Gradle"],g:["多仓库管理","Gradle"],e:`
<p>在本教程中，我们将看到如何在Gradle项目中使用多个仓库。这在我们需要使用Maven Central上不可用的JAR文件时非常有用。我们还将看到如何使用GitHub发布Java包并在不同项目之间共享它们。</p>
<p>在使用Gradle作为构建工具时，我们经常在<code>build.gradle</code>的<code>repositories</code>部分遇到<code>mavenCentral()</code>。如果我们想要添加其他仓库，我们可以将它们添加到同一节中，以指示我们的库的来源：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>repositories {
    mavenLocal()
    mavenCentral()
}
</code></pre></div>`,r:{minutes:2.22,words:666},t:"在Gradle中使用多个仓库",y:"a"}}],["/posts/baeldung/2024-07-10/2024-07-10-any%20%20%20vs.%20none%20%20%20vs.%20all%20%20%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-10-any   vs. none   vs. all   in Kotlin.html-Dr9CyM_s.js"),__vite__mapDeps([788,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin"],g:["any()","all()","none()"],e:`
<p>Kotlin以其简洁的语法和强大的特性而闻名，尤其是在标准集合库中。这个库便于进行谓词操作，即在集合中对每个元素应用布尔条件，使得对集合进行广泛的过滤和处理操作成为可能。</p>
<p>在本教程中，我们将探讨三种这样的谓词操作：any()、all()和none()方法。这些方法帮助我们轻松地检查集合中是否满足某些条件。所有这些方法都可以应用于不同的集合，如List、Array、Sets、Map等。</p>
<h3>2. any()方法</h3>
<p>any()方法是一种方便的方式来检查集合中至少有一个元素是否符合给定的条件。<strong>一旦它找到一个符合条件的元素，该方法会立即返回true</strong>。</p>`,r:{minutes:2.87,words:862},t:"Kotlin中的any()、none()和all()方法的区别 | Baeldung关于Kotlin的教程",y:"a"}}],["/posts/baeldung/2024-07-11/2024-07-11-A%20Guide%20to%20Spring%20CredHub.html",{loader:()=>a(()=>import("./2024-07-11-A Guide to Spring CredHub.html-Bnz3iJlW.js"),__vite__mapDeps([789,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring","Spring Boot"],g:["CredHub","Spring Security"],e:'\n<h2>1. 概述</h2>\n<p>在本教程中，我们将实现 Spring CredHub，这是 CredHub 的 Spring 抽象，用于存储具有访问控制规则的秘密，这些规则将凭证资源映射到用户和操作。请注意，在运行代码之前，我们需要确保我们的应用程序在已安装 CredHub 的 Cloud Foundry 平台上运行。</p>\n<h2>2. Maven 依赖</h2>\n<p>首先，我们需要安装 <code>spring-credhub-starter</code> 依赖项：</p>\n<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>`&lt;dependency&gt;`\n    `&lt;groupId&gt;`org.springframework.credhub`&lt;/groupId&gt;`\n    `&lt;artifactId&gt;`spring-credhub-starter`&lt;/artifactId&gt;`\n    `&lt;version&gt;`2.2.0`&lt;/version&gt;`\n`&lt;/dependency&gt;`\n</code></pre></div>',r:{minutes:5.25,words:1575},t:"Spring CredHub 指南",y:"a"}}],["/posts/baeldung/2024-07-11/2024-07-11-Alternatives%20for%20instanceof%20Operator%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-11-Alternatives for instanceof Operator in Java.html-joq97SgP.js"),__vite__mapDeps([790,1])),meta:{d:1720656e6,l:"2024年7月11日",c:["Java","编程"],g:["instanceof","Java","替代方案"],e:`
<p>在Java中，instanceof是一个操作符，用于比较一个对象的实例与一个类型。它也被称为类型比较操作符。</p>
<p>在本教程中，我们将探讨传统的instanceof方法的不同替代方案。我们可能需要这些替代方案来改善代码设计和可读性。</p>
<h2>2. 示例设置</h2>
<p>让我们开发一个简单的程序，包括一个父类<code>Dinosaur</code>和两个子类，即子类将扩展父类。</p>
<p>首先，让我们创建父类：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dinosaur</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:5,words:1501},t:"Java中instanceof运算符的替代方案",y:"a"}}],["/posts/baeldung/2024-07-11/2024-07-11-Check%20JWT%20Expiry%20Without%20Throwing%20Exceptions.html",{loader:()=>a(()=>import("./2024-07-11-Check JWT Expiry Without Throwing Exceptions.html-CkQ-40tr.js"),__vite__mapDeps([791,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","JWT"],g:["Java","JWT","Expiry"],e:`
<p>JSON Web Token（JWT）基本上是一个用于在网络上安全传输信息的JSON对象。这些信息可以被验证和信任，因为它是数字签名的。</p>
<p>在本教程中，我们首先将看看验证JWT和解码JWT之间的区别。然后，我们将学习如何在Java中不抛出任何异常地检查JWT的过期。</p>
<h2>2. 验证和解码JWT之间的区别</h2>
<p>在我们开始研究如何检查JWT的过期之前，让我们首先了解一些基础知识。</p>
<p>我们知道，JWT在其紧凑形式中是一个Base64编码的字符串，包含三个部分：头部、负载和签名。任何访问JWT的人都很容易解码它并查看其内容。因此，要信任一个令牌，我们必须验证JWT中包含的签名。</p>`,r:{minutes:3.96,words:1188},t:"Java中不抛出异常检查JWT过期",y:"a"}}],["/posts/baeldung/2024-07-11/2024-07-11-Choosing%20the%20Right%20Java%20Collection.html",{loader:()=>a(()=>import("./2024-07-11-Choosing the Right Java Collection.html-BAU_l963.js"),__vite__mapDeps([792,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Java","Collections"],g:["Java","List","Set","Queue","Map"],e:`
<p>在本教程中，我们将讨论如何在Java库中选择适当的集合接口和类。我们跳过了诸如_Vector_、_Stack_和_Hashtable_等遗留集合，因为我们需要避免使用它们，而转而使用新的集合。并发集合值得单独讨论，因此我们也不在此讨论它们。</p>
<h2>2. Java库中的集合接口</h2>
<p>在尝试有效使用它们之前，了解Java库中集合接口和类的组织结构非常有用。_Collection_接口是所有集合接口的根。<em>List</em>、<em>Set_和_Queue_接口扩展了_Collection</em>。</p>
<p>在Java库中，映射（Maps）不被视为常规集合，因此_Map_接口不扩展_Collection_。这是Java库中接口关系的图表：</p>`,r:{minutes:5.13,words:1540},t:"如何在Java中选择合适的集合",y:"a"}}],["/posts/baeldung/2024-07-11/2024-07-11-Common%20Exceptions%20of%20Crypto%20APIs%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-11-Common Exceptions of Crypto APIs in Java.html-BJ69GUFa.js"),__vite__mapDeps([793,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","异常处理"],g:["Java加密","异常"],e:`
<h2>1. 引言</h2>
<p><code>Cipher</code>对象是一个重要的Java类，它帮助我们提供加密和解密功能。</p>
<p>在本文中，我们将看看在使用它来加密和解密文本时可能发生的一些常见异常。</p>
<h2>2. NoSuchAlgorithmException: 找不到支持X的任何提供者</h2>
<p>如果我们运行以下代码来使用一个虚构的算法获取<code>Cipher</code>的实例：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"ABC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:8.82,words:2646},t:"Java中Crypto API的常见异常",y:"a"}}],["/posts/baeldung/2024-07-11/2024-07-11-Convert%20Anonymous%20Class%20into%20Lambda%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-11-Convert Anonymous Class into Lambda in Java.html-UTPqm_uS.js"),__vite__mapDeps([794,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Lambda表达式"],g:["匿名类","转换"],e:`
<p>在本教程中，我们将学习<strong>如何在Java中将匿名类转换为Lambda表达式</strong>。</p>
<p>首先，我们将简要介绍匿名类是什么。然后，我们将使用实际示例来解答我们的中心问题。</p>
<h3>2. Java中的匿名类</h3>
<p>简而言之，匿名类正如其名，是一个没有名称的内部类。由于它没有名称，<strong>我们需要在一个单独的表达式中同时声明和实例化它</strong>。</p>
<p>按设计，匿名类扩展了一个类或实现了一个接口。</p>
<p>例如，我们可以使用_Runnable_作为一个匿名类来在Java中创建一个新线程。语法类似于构造函数的调用，只是我们需要将类定义放在一个块内：</p>`,r:{minutes:3.02,words:906},t:"Java中将匿名类转换为Lambda表达式",y:"a"}}],["/posts/baeldung/2024-07-11/2024-07-11-Convert%20Between%20int%20and%20char%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-11-Convert Between int and char in Java.html-srbWcp8Q.js"),__vite__mapDeps([795,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java"],g:["int","char","转换"],e:`
<p>在本教程中，我们将了解如何在Java中将int转换为char以及如何反向转换。我们将简要讨论字符的表示方式，以便更好地理解文章后面的代码。</p>
<p>Java内部将每个char存储为16位的Unicode编码值：</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>2字节</th>
<th>十进制（基数10）</th>
<th>十六进制（基数16）</th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td>00000000 01000001</td>
<td>65</td>
<td>41</td>
</tr>
<tr>
<td>a</td>
<td>00000000 01100001</td>
<td>61</td>
<td>97</td>
</tr>
<tr>
<td>1</td>
<td>00000000 00110001</td>
<td>49</td>
<td>31</td>
</tr>
<tr>
<td>Z</td>
<td>00000000 01011010</td>
<td>90</td>
<td>5A</td>
</tr>
</tbody>
</table>`,r:{minutes:3.07,words:921},t:"Java中int与char类型转换",y:"a"}}],["/posts/baeldung/2024-07-11/2024-07-11-Convert%20a%20List%20of%20Integers%20to%20a%20List%20of%20Strings.html",{loader:()=>a(()=>import("./2024-07-11-Convert a List of Integers to a List of Strings.html-D9GoGAFo.js"),__vite__mapDeps([796,1])),meta:{d:1720656e6,l:"2024年7月11日",c:["Java"],g:["编程","转换"],e:`
<h2>1. 概述</h2>
<p>自Java 5版本以来，Java一直支持泛型。<strong>Java泛型带给我们的一个好处是类型安全</strong>。例如，当我们声明一个名为_myList_的_List_对象为_List<code>&lt;Integer&gt;</code>_时，我们不能将类型不是_Integer_的元素放入_myList_中。</p>
<p>然而，当我们使用泛型集合时，我们经常想要将_Collection<code>&lt;TypeA&gt;</code><em>转换为_Collection<code>&lt;TypeB&gt;</code></em>。</p>
`,r:{minutes:3.37,words:1012},t:"将整数列表转换为字符串列表 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-11/2024-07-11-Converting%20a%20List%20of%20Maps%20to%20a%20Map%20Grouped%20by%20Key%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-11-Converting a List of Maps to a Map Grouped by Key in Kotlin.html-BRgV_3qV.js"),__vite__mapDeps([797,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin","Programming"],g:["Kotlin","List of Maps","Map Grouping"],e:`<hr>
<h1>Kotlin中将列表中的映射转换为按键分组的映射</h1>
<p>作为Kotlin开发者，我们经常使用列表和映射作为核心数据结构来解决不同的编程挑战。有时，我们可能需要处理列表中的映射，以获得一个不同的映射，该映射按键分组数据。也就是说，我们需要将列表中的映射转换为列表的映射。</p>
<p>在本教程中，我们将探索在Kotlin中将列表中的映射转换为按键分组的映射的不同方法。</p>
<h2>2. 问题解释</h2>
<p>为了更好地理解我们试图解决的问题，让我们考虑这个示例数据，包括所有示例的输入和预期输出：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>val listOfMaps = listOf(
    mapOf("name" to "Albert", "age" to "18"),
    mapOf("name" to "Naomi", "age" to "26"),
    mapOf("name" to "Dru", "age" to "18"),
    mapOf("name" to "Steve", "age" to "30")
)
val expectedMap = mapOf(
    "name" to listOf("Albert", "Naomi", "Dru", "Steve"),
    "age" to listOf("18", "26", "18", "30")
)
</code></pre></div>`,r:{minutes:4.94,words:1481},t:"Kotlin中将列表中的映射转换为按键分组的映射",y:"a"}}],["/posts/baeldung/2024-07-11/2024-07-11-Difference%20Between%20Map.ofEntries%20%20%20and%20Map.of%20%20.html",{loader:()=>a(()=>import("./2024-07-11-Difference Between Map.ofEntries   and Map.of  .html-Cn93uGHx.js"),__vite__mapDeps([798,1])),meta:{d:17207424e5,l:"2024年7月12日",c:["Java","编程"],g:["Java 9","Map.of()","Map.ofEntries()"],e:`
<p>Java 9 引入了 <em>Map.of()</em> 方法，使得创建不可变映射变得更加容易，以及 <em>Map.ofEntries()</em> 方法，它具有稍微不同的功能。</p>
<p>在本教程中，我们将更仔细地查看这两种用于不可变映射的静态工厂方法，并解释哪一个适合哪一种用途。</p>
<p><em>Map.of()</em> 方法<strong>接受指定数量的键值对作为参数</strong>，并返回包含每对键值对的不可变映射。参数中的对的顺序对应于它们添加到映射中的顺序。如果我们尝试添加一个带有重复键的键值对，它将抛出一个 <em>IllegalArgumentException</em>。如果我们尝试添加一个 <em>null</em> 键或值，它将抛出一个 <em>NullPointerException</em>。</p>`,r:{minutes:3.15,words:946},t:"Java 9 中 Map.of() 和 Map.ofEntries() 的区别",y:"a"}}],["/posts/baeldung/2024-07-11/2024-07-11-Errors%20and%20Exceptions%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-11-Errors and Exceptions in Java.html-DO4CuRHs.js"),__vite__mapDeps([799,1])),meta:{d:16698528e5,l:"2022年12月1日",c:["Java","异常与错误"],g:["Throwable","Error","Exception"],e:`
<p>在本教程中，我们将学习Java中的错误和异常以及它们之间的区别。</p>
<h2>2. Throwable类</h2>
<p><strong>错误(Error)和异常(Exception)都是Throwable类的子类，它们用于表示发生了异常情况</strong>。此外，只有Throwable及其子类的实例可以由Java虚拟机抛出或在catch子句中捕获。</p>
<p>错误和异常的实例被创建以包含有关情况的信息（例如，堆栈跟踪）：</p>
<h2>3. 错误(Error)</h2>
<p>错误表示不应该发生的异常情况。当发生严重问题时，会抛出错误。<strong>此外，错误被视为非检查异常，应用程序不应尝试捕获和处理它们</strong>。此外，错误在运行时发生，并且无法恢复。</p>`,r:{minutes:3.03,words:910},t:"Java中的错误与异常",y:"a"}}],["/posts/baeldung/2024-07-11/2024-07-11-Extract%20Values%20using%20AssertJ%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-11-Extract Values using AssertJ in Java.html-BwlUSjwO.js"),__vite__mapDeps([800,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Testing"],g:["AssertJ","Testing"],e:`
<p>AssertJ是Java的一个断言库，它允许我们流畅地编写断言，同时也使它们更易于阅读。</p>
<h2>1. 概述</h2>
<p>在本教程中，我们将探索AssertJ的提取方法，以便在不中断测试断言流程的情况下流畅地进行检查。</p>
<h2>2. 实现</h2>
<p>让我们从一个_Person_示例类开始：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Address</span> address<span class="token punctuation">;</span>

    <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> firstName<span class="token punctuation">,</span> <span class="token class-name">String</span> lastName<span class="token punctuation">,</span> <span class="token class-name">Address</span> address<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> firstName<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 省略getter和setter</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.99,words:598},t:"使用AssertJ在Java中提取值",y:"a"}}],["/posts/baeldung/2024-07-11/2024-07-11-Extracting%20JAR%20to%20a%20Specified%20Directory.html",{loader:()=>a(()=>import("./2024-07-11-Extracting JAR to a Specified Directory.html-BWruzJMw.js"),__vite__mapDeps([801,1])),meta:{d:1720656e6,l:"2024年7月11日",c:["Java","Linux"],g:["JAR","Bash","unzip"],e:`
<p>通常，当我们在Java项目中需要JAR文件时，我们会将它们作为外部库放在类路径中而不解压缩。然而，有时我们可能需要将它们解压到文件系统中。</p>
<p>在本教程中，我们将探讨如何在命令行中将JAR文件解压到指定目录。<strong>我们将以Linux和Bash为例来介绍每种方法</strong>。</p>
<h3>2. 问题介绍</h3>
<p>我们将以Guava的JAR文件为例，在本教程中。在编写本文时，最新版本是guava-31.1-jre.jar。</p>
<p>Java提供了_jar_命令来创建、更新、查看和解压JAR文件。接下来，让我们使用_jar_命令解压Guava的JAR文件：</p>`,r:{minutes:4.89,words:1468},t:"提取JAR文件到指定目录",y:"a"}}],["/posts/baeldung/2024-07-11/2024-07-11-Fixing%20the%20No%20Main%20Manifest%20Attribute%20in%20Spring%20Boot.html",{loader:()=>a(()=>import("./2024-07-11-Fixing the No Main Manifest Attribute in Spring Boot.html-XQVAcPUx.js"),__vite__mapDeps([802,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Boot","Maven"],g:["Spring Boot","Maven","Executable JAR"],e:`<hr>
<h1>解决Spring Boot中“没有主清单属性”的问题</h1>
<p>每当我们在Spring Boot可执行jar中遇到“没有主清单属性”的消息时，这是因为我们缺少了MANIFEST.MF文件中的Main-Class元数据属性声明，该文件位于META-INF文件夹下。</p>
<p>在这篇简短的教程中，我们将重点讨论这个问题的原因以及如何解决它。</p>
<h2>Spring Boot启动器简介</h2>
<p>对最常见的Spring Boot启动器进行快速概述，以及如何在现实世界项目中使用它们的示例。</p>
<h2>问题发生时</h2>
<p>通常情况下，如果我们从Spring Initializr获取我们的pom，我们不会有任何问题。但是，如果我们通过向我们的pom.xml添加spring-boot-starter-parent手动构建我们的项目，我们可能会遇到这个问题。我们可以通过尝试进行jar的清洁构建来复制它：</p>`,r:{minutes:2.8,words:840},t:"解决Spring Boot中“没有主清单属性”的问题",y:"a"}}],["/posts/baeldung/2024-07-11/2024-07-11-Form%20Login%20and%20Basic%20Authentication%20in%20springdoc%20openapi.html",{loader:()=>a(()=>import("./2024-07-11-Form Login and Basic Authentication in springdoc openapi.html-Bn14SLpF.js"),__vite__mapDeps([803,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Security","Springdoc-OpenAPI"],g:["Form Login","Basic Authentication"],e:`
<p>如果您正在使用 Spring Security（特别是 OAuth）实现，请务必查看《学习 Spring 安全》课程。</p>
<p><strong>&gt;&gt; 学习 Spring 安全</strong></p>
<h2>1. 概述</h2>
<p>Springdoc-OpenAPI 是一个库，它基于 OpenAPI 3 规范自动化生成 Spring Boot 应用程序的服务文档。</p>
<p>通过用户界面与我们的 API 交互而无需实现用户界面可能会很方便。因此，让我们看看如果涉及授权，我们如何使用端点。</p>
<p>在本教程中，我们将学习<strong>如何在 Springdoc 中使用 Spring Security 管理表单登录和基本认证来安全访问端点</strong>。</p>`,r:{minutes:4.42,words:1327},t:"Springdoc-OpenAPI 中的表单登录和基本认证",y:"a"}}],["/posts/baeldung/2024-07-11/2024-07-11-Functors%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-11-Functors in Java.html-CHTGmO_S.js"),__vite__mapDeps([804,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","函数式编程"],g:["Functor","Java","函数式编程"],e:`
<p>在本教程中，我们将演示如何在Java中创建函子。首先，让我们通过一些关于“函子”这个术语的具体细节来开始，然后我们将查看一些代码示例，展示它在Java中的使用方式。</p>
<h2>2. 什么是函子？</h2>
<p>“函子”这个术语来自数学领域，特别是来自一个称为“范畴论”的子领域。在计算机编程中，函子可以被认为是一个实用类，它允许我们将值映射到特定的上下文中。此外，它代表了两个范畴之间的结构保持映射。</p>
<p>函子受两个法则的约束：</p>
<ul>
<li>恒等性：当一个函子通过一个恒等函数进行映射时，恒等函数是一个返回与其传入参数相同值的函数，我们需要得到最初的函子（容器及其内容保持不变）。</li>
<li>组合/结合律：当一个函子用于映射两个部分的复合体时，它应该与分别映射到一个函数后再映射到另一个函数的结果相同。</li>
</ul>`,r:{minutes:5.5,words:1651},t:"Java中的函子",y:"a"}}],["/posts/baeldung/2024-07-11/2024-07-11-Getting%20Started%20with%20Blaze%20Persistence.html",{loader:()=>a(()=>import("./2024-07-11-Getting Started with Blaze Persistence.html-DgDBZfkW.js"),__vite__mapDeps([805,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Spring Boot"],g:["Blaze Persistence","JPA","Hibernate"],e:`
<p>在这个教程中，我们将讨论在Spring Boot应用程序中使用Blaze Persistence库的方法。</p>
<p>该库提供了丰富的Criteria API，用于以编程方式创建SQL查询。它允许我们应用各种类型的过滤器、函数和逻辑条件。</p>
<p>我们将涵盖项目设置，提供一些如何创建查询的例子，并看看如何将实体映射到DTO对象。</p>
<h2>2. Maven依赖</h2>
<p>要在项目中包含Blaze Persistence核心，我们需要在_pom.xml_文件中添加依赖blaze-persistence-core-api-jakarta、blaze-persistence-core-impl-jakarta和blaze-persistence-integration-hibernate-6.2：</p>`,r:{minutes:6.51,words:1952},t:"使用Blaze Persistence入门指南",y:"a"}}],["/posts/baeldung/2024-07-11/2024-07-11-Getting%20a%20Value%20in%20JSONObject.html",{loader:()=>a(()=>import("./2024-07-11-Getting a Value in JSONObject.html-D-uQ-LWC.js"),__vite__mapDeps([806,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","JSON"],g:["JSONObject","Java","JSON"],e:`
<p>在本教程中，我们将深入探讨在_JSONObject_实例中获取值的具体细节。</p>
<p>对于Java中JSON支持的一般介绍，请查看JSON-Java的介绍。</p>
<h2>JSONObject结构</h2>
<p><strong>_JSONObject_是一种类似映射的结构</strong>。它将数据保存为一组键值对。<strong>键是_String_类型，而值可以是几种类型</strong>。<strong>此外，值类型可以是原始的或复合的</strong>。原始类型是_String_、_Number_和_Boolean_类型，或_JSONObject.NULL_对象。复合类型是_JSONObject_和_JSONArray_类型。因此，JSON数据可以具有任意的复杂性和嵌套。</p>`,r:{minutes:3.67,words:1101},t:"在JSONObject中获取值",y:"a"}}],["/posts/baeldung/2024-07-11/2024-07-11-Guide%20to%20Java%20PriorityQueue.html",{loader:()=>a(()=>import("./2024-07-11-Guide to Java PriorityQueue.html-CAbk-YE2.js"),__vite__mapDeps([807,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","PriorityQueue"],g:["Java","PriorityQueue"],e:`
<p>在这篇简短的教程中，我们将讨论Java优先队列的实现。首先，我们将看到标准用法，并展示一些通过自然顺序和逆序排序队列的示例。最后，我们将看到如何使用Java <em>Comparator</em> 定义自定义顺序。</p>
<h2><strong>2. java.util.PriorityQueue</strong></h2>
<p>java.util.PriorityQueue 类从JDK 1.5开始提供，它还包含其他 <em>AbstractQueue</em> 的实现。<strong>正如我们从它的名字可以推断的，我们使用 <em>PriorityQueue</em> 来维持给定集合中的一个定义好的顺序：队列的第一个元素（<em>head</em>）是根据我们指定的顺序来说最小的元素。</strong> 队列的每个检索操作（<em>poll</em>, <em>remove</em>, 或 <em>peek</em>）读取队列的头部。</p>`,r:{minutes:3.82,words:1145},t:"Java优先队列指南",y:"a"}}],["/posts/baeldung/2024-07-11/2024-07-11-Guide%20to%20Splitting%20a%20String%20by%20Whitespace%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-11-Guide to Splitting a String by Whitespace in Java.html-D7FN5z3D.js"),__vite__mapDeps([808,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","String"],g:["split","whitespace"],e:`
<p>在Java中，一个_String_可以被视为多个子字符串的连接。此外，使用空白字符作为分隔符来构建和存储一系列子字符串到一个单独的字符串中是很常见的做法。</p>
<p>在本教程中，我们将<strong>学习如何通过空白字符，例如空格、制表符或换行符，来分割一个_String_</strong>。</p>
<h2>2. <em>String</em> 示例</h2>
<p>首先，我们需要构建一些_String_示例，这些示例可以作为按空白字符分割的输入。所以，让我们首先<strong>定义一些空白字符作为_String_常量</strong>，以便我们可以方便地重复使用它们：</p>
`,r:{minutes:4.35,words:1304},t:"Java中按空白字符分割字符串的指南",y:"a"}}],["/posts/baeldung/2024-07-11/2024-07-11-Handle%20Browser%20Tabs%20With%20Selenium.html",{loader:()=>a(()=>import("./2024-07-11-Handle Browser Tabs With Selenium.html-13_Oc2HV.js"),__vite__mapDeps([809,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Selenium","Java"],g:["Browser Automation","Selenium WebDriver"],e:`
<p>在本教程中，我们将探讨如何使用Selenium来管理浏览器标签页。有时点击链接或按钮会在新标签页中打开页面。在这些情况下，我们必须正确处理标签页以继续我们的测试。本教程涵盖了在新标签页中打开页面、在标签页之间切换以及关闭标签页。我们的示例将使用https://testpages.herokuapp.com。</p>
<h2>2. 设置</h2>
<p>根据_WebDriver_的设置，我们将创建一个处理_WebDriver_设置和清理的_SeleniumTestBase_类。我们的测试类将扩展这个类。我们还将定义一个帮助类来处理Selenium中的标签页。这个帮助类将包含打开、切换和关闭标签页的方法。这些方法将在以下部分展示并解释。我们将在_SeleniumTestBase_中初始化该帮助类的实例。所有示例都使用JUnit5。</p>`,r:{minutes:5.57,words:1671},t:"使用Selenium管理浏览器标签页",y:"a"}}],["/posts/baeldung/2024-07-11/2024-07-11-Java%20Generics%20PECS%20%20%20Producer%20Extends%20Consumer%20Super.html",{loader:()=>a(()=>import("./2024-07-11-Java Generics PECS   Producer Extends Consumer Super.html-BEa6mtMe.js"),__vite__mapDeps([810,1])),meta:{d:16698528e5,l:"2022年12月1日",c:["Java"],g:["Java Generics","PECS"],e:`<hr>
<h1>Java泛型PECS规则 - 生产者扩展消费者超类 | Baeldung</h1>
<p>在本文中，我们将探讨在处理集合的生产和消费时Java泛型的使用。</p>
<p>我们还将讨论_extends_和_super_关键字，并查看几个PECS（生产者扩展消费者超类）规则的例子，以确定如何正确使用这些关键字。</p>
<p>对于本文中的代码示例，我们将使用一个简单的数据模型，其中有一个_User_基类和两个扩展它的类：<em>Operator_和_Customer</em>。</p>
<p><strong>重要的是要从集合的角度应用PECS规则。</strong> 换句话说，如果我们遍历一个_List_并处理其元素，列表将作为我们逻辑的生产者：</p>`,r:{minutes:2.81,words:844},t:"Java泛型PECS规则 - 生产者扩展消费者超类 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-11/2024-07-11-Java%20Program%20to%20Print%20Pascal%20s%20Triangle.html",{loader:()=>a(()=>import("./2024-07-11-Java Program to Print Pascal s Triangle.html-zlE3bz4R.js"),__vite__mapDeps([811,1])),meta:{d:1720656e6,l:"2024年7月11日",c:["Java","算法"],g:["Pascal's Triangle","Java"],e:`<hr>
<h1>Java程序打印帕斯卡三角形</h1>
<p>帕斯卡三角形是一种二项式系数的三角形排列。帕斯卡三角形中的数字是这样排列的，即每个数字是它正上方两个数字的和。</p>
<p>在本教程中，我们将看到如何在Java中打印帕斯卡三角形。</p>
<h3>2. 使用递归</h3>
<p>我们可以使用递归打印帕斯卡三角形，公式为( nCr )：( n! / ( ( n – r )! r! ) )</p>
<p>首先，让我们创建一个递归函数：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> i <span class="token operator">*</span> <span class="token function">factorial</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.43,words:428},t:"Java程序打印帕斯卡三角形",y:"a"}}],["/posts/baeldung/2024-07-11/2024-07-11-Kotlin%20and%20Spring%20Boot%20%20Injecting%20Configuration%20Properties%20Using%20%20Value.html",{loader:()=>a(()=>import("./2024-07-11-Kotlin and Spring Boot  Injecting Configuration Properties Using  Value.html-BU-wWHAy.js"),__vite__mapDeps([812,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin","Spring Boot"],g:["Spring Boot","Kotlin"],e:`
<p>在 Spring Boot 应用程序中，一个常见的需求是将外部配置属性注入到 Spring Beans 中。<code>@ConfigurationProperties</code> 注解允许我们将一组配置属性绑定到一个类中。或者，我们可以利用 <code>@Value</code> 注解将任意配置属性注入到 Spring Bean 中。</p>
<p>在这个快速教程中，我们将探讨如何使用 <code>@Value</code> 注入配置属性。</p>
<h2>2. 我们的 YAML 配置文件</h2>
<p>让我们创建一个名为 <code>application-inject-value.yml</code> 的简单 YAML 文件，放在 <code>src/main/resources</code> 下，作为我们应用程序的配置：</p>`,r:{minutes:3.72,words:1115},t:"Kotlin 和 Spring Boot：使用 @Value 注入配置属性 | Baeldung 关于 Kotlin",y:"a"}}],["/posts/baeldung/2024-07-11/2024-07-11-Managing%20JWT%20With%20Auth0%20java%20jwt.html",{loader:()=>a(()=>import("./2024-07-11-Managing JWT With Auth0 java jwt.html-XUPMMa4g.js"),__vite__mapDeps([813,1])),meta:{d:1720656e6,l:"2024年7月11日",c:["Java","Security"],g:["Auth0","JWT"],e:`
<h2>1. 引言</h2>
<p>JWT（JSON Web Token）是一种标准，定义了一种紧凑且安全的方式，在两个参与方之间传输数据以及签名。JWT中的负载是一个JSON对象，它声明了一些声明。由于这些声明是数字签名的，因此可以被验证者轻松验证和信任。<strong>JWT可以使用密钥或公钥/私钥对进行签名。</strong></p>
<p>在本教程中，我们将学习如何使用Auth0 JWT Java库创建和解码JWT。</p>
<h2>2. JWT的结构</h2>
<p>JWT基本上由三部分组成：</p>
<ul>
<li>头部</li>
<li>负载</li>
<li>签名</li>
</ul>`,r:{minutes:4.7,words:1409},t:"使用Auth0 Java库管理JWT",y:"a"}}],["/posts/baeldung/2024-07-11/2024-07-11-MongoDB%20vs.%20Couchbase.html",{loader:()=>a(()=>import("./2024-07-11-MongoDB vs. Couchbase.html-DCmfQCz9.js"),__vite__mapDeps([814,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["NoSQL","数据库"],g:["MongoDB","Couchbase"],e:`
<p>在这个教程中，我们将比较两种最受欢迎的NoSQL数据库——MongoDB和Couchbase。我们将查看它们的架构、功能列表、数据模型、查询方式以及它们各自如何处理分区。</p>
<h2>2. NoSQL数据库简介</h2>
<p>SQL数据库自1970年以来一直存在，并且在相当长的一段时间内一直是事实上的数据库。它们的一个目的是减少数据重复，因为在那些日子里存储并不便宜。水平扩展意味着SQL数据库需要大量的维护工作，但可以通过购买更强大的服务器进行垂直扩展。</p>
<p><strong>NoSQL（不仅仅是SQL）数据库在21世纪末出现，允许更容易的水平扩展。</strong> 我们现在可以在许多不那么强大的机器上分布我们的数据，因为计算能力变得越来越便宜。这里的数据不是以表格形式存储，而是以文档形式（通常是JSON格式），并且模式不像SQL数据库那样严格。</p>`,r:{minutes:5.41,words:1623},t:"MongoDB 与 Couchbase 比较",y:"a"}}],["/posts/baeldung/2024-07-11/2024-07-11-REST%20vs.%20GraphQL%20vs.%20gRPC%20%20%20Which%20API%20to%20Choose%20.html",{loader:()=>a(()=>import("./2024-07-11-REST vs. GraphQL vs. gRPC   Which API to Choose .html-B4g7bwGn.js"),__vite__mapDeps([815,1])),meta:{d:16698528e5,l:"2022年12月1日",c:["Web Services"],g:["REST","GraphQL","gRPC"],e:`<hr>
<h1>REST vs. GraphQL vs. gRPC – 选择哪种API？</h1>
<p>多年来，REST一直是设计Web API的事实行业标准架构风格。然而，GraphQL和gRPC最近出现，以解决REST的一些限制。每种API方法都带来了巨大的好处和一些权衡。</p>
<p>在本教程中，我们将首先查看每种API设计方法。然后，我们将使用Spring Boot的三种不同方法构建一个简单服务。接下来，我们将通过查看在决定使用其中一种之前应考虑的几个标准来比较它们。</p>
<p>最后，由于没有一种方法适合所有情况，们将看到如何在不同的应用层混合使用不同的方法。</p>
<p>表现层状态转移（REST）是全球最常用的API架构风格。它由Roy Fielding在2000年定义。</p>`,r:{minutes:13.41,words:4023},t:"REST vs. GraphQL vs. gRPC – 选择哪种API？",y:"a"}}],["/posts/baeldung/2024-07-11/2024-07-11-Rate%20Limiting%20With%20Client%20IP%20in%20Spring%20Cloud%20Gateway.html",{loader:()=>a(()=>import("./2024-07-11-Rate Limiting With Client IP in Spring Cloud Gateway.html-GLQfQW6f.js"),__vite__mapDeps([816,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Cloud Gateway","Rate Limiting"],g:["Spring Cloud Gateway","Rate Limiting","Client IP"],e:`
<h2>1. 引言</h2>
<p>在这个快速教程中，我们将看到如何基于客户端的实际IP地址限制Spring Cloud Gateway的传入请求速率。</p>
<p>简而言之，我们将在路由上设置_RequestRateLimiter_过滤器，然后<strong>我们将配置网关使用IP地址限制不同客户端的请求</strong>。</p>
<h2>2. 路由配置</h2>
<p>首先，我们需要配置Spring Cloud Gateway对特定路由进行速率限制。为此，我们将使用由_spring-boot-starter-data-redis-reactive_实现的经典令牌桶速率限制器。简而言之，<strong>速率限制器创建一个桶，该桶具有与之关联的键，用于标识自身，并具有固定的初始令牌容量，这些令牌会随时间补充</strong>。然后，对于每个请求，速率限制器检查其相关桶，并在可能的情况下减少一个令牌。否则，它将拒绝传入请求。</p>`,r:{minutes:4.35,words:1306},t:"Spring Cloud Gateway基于客户端IP的速率限制",y:"a"}}],["/posts/baeldung/2024-07-11/2024-07-11-Reading%20and%20Writing%20With%20a%20ConcurrentHashMap.html",{loader:()=>a(()=>import("./2024-07-11-Reading and Writing With a ConcurrentHashMap.html-DoHtT3TA.js"),__vite__mapDeps([817,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Concurrency"],g:["ConcurrentHashMap","Java","Thread-Safe"],e:`
<h2>1. 引言</h2>
<p>在本教程中，我们将学习如何使用ConcurrentHashMap类以线程安全的方式从哈希表数据结构中读写数据。</p>
<h2>2. 概览</h2>
<p>ConcurrentHashMap是ConcurrentMap接口的一种实现，并且是Java提供的线程安全集合之一。它由一个常规映射支持，并且与Hashtable的工作方式类似，我们将在后续部分介绍一些细微差别。</p>
<h3>2.2. 有用的方法</h3>
<p>ConcurrentHashMap API规范提供了实用的方法来操作集合。在本教程中，我们将主要看两个方法：</p>
<ul>
<li>get(K key): 检索给定键的元素。这是我们的读取方法。</li>
<li>computeIfPresent(K key, BiFunction<code>&lt;K, V, V&gt;</code> remappingFunction): 如果给定的键存在，则将remappingFunction应用于给定键的值。</li>
</ul>`,r:{minutes:6.02,words:1806},t:"ConcurrentHashMap的读写操作",y:"a"}}],["/posts/baeldung/2024-07-11/2024-07-11-Reinitialize%20Singleton%20Bean%20in%20Spring%20Context.html",{loader:()=>a(()=>import("./2024-07-11-Reinitialize Singleton Bean in Spring Context.html-0_cu-qcf.js"),__vite__mapDeps([818,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring","Java"],g:["Spring Framework","Singleton Bean"],e:`
<p>在本教程中，我们将探讨在运行时重新初始化Spring单例Bean的方法。默认情况下，Spring应用程序生命周期中不会重新初始化具有单例作用域的Bean。然而，在某些情况下，可能需要重新创建Bean，例如当更新属性时。我们将查看几种实现此目的的方法。</p>
<h2>2. 代码设置</h2>
<p>为了更好地理解这一点，我们将创建一个小项目。我们将创建一个Bean，它从配置文件中读取配置属性，并将它们保存在内存中以实现更快的访问。如果文件中的属性发生变化，可能需要重新加载配置。</p>
<h3>2.1. 单例Bean</h3>
<p>让我们首先创建_ConfigManager_类：</p>`,r:{minutes:5.12,words:1536},t:"在Spring上下文中重新初始化单例Bean",y:"a"}}],["/posts/baeldung/2024-07-11/2024-07-11-Reversing%20a%20Stack%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-11-Reversing a Stack in Java.html-DX30q-bd.js"),__vite__mapDeps([819,1])),meta:{d:16807392e5,l:"2023年4月6日",c:["Java","数据结构"],g:["栈","队列","递归"],e:`<hr>
<h1>Java中反转栈的不同方法</h1>
<p>在这篇文章中，我们将探讨使用Java反转栈的不同方法。栈是一种后进先出（LIFO）的数据结构，支持从同一侧插入（push）和移除（pop）元素。</p>
<p>我们可以将栈想象成桌子上的一摞盘子；从顶部拿盘子是最安全的。</p>
<h2>2. 问题：反转栈</h2>
<p>让我们深入探讨问题陈述。我们得到一个对象的_栈_作为输入，我们需要返回元素顺序相反的栈。这里有一个例子。</p>
<p>输入：[1, 2, 3, 4, 5, 6, 7, 8, 9]
输出：[9, 8, 7, 6, 5, 4, 3, 2, 1]
输入是前九个自然数的栈，我们的代码输出应该是顺序相反的相同自然数。<strong>我们可以将这个问题扩展到任何类型的栈，例如，一个_字符串_元素的栈，一个自定义对象如_Node_的栈等。</strong></p>`,r:{minutes:3.95,words:1184},t:"Java中反转栈的不同方法",y:"a"}}],["/posts/baeldung/2024-07-11/2024-07-11-Running%20Multiple%20Thread%20Groups%20in%20JMeter.html",{loader:()=>a(()=>import("./2024-07-11-Running Multiple Thread Groups in JMeter.html-C7yenpYN.js"),__vite__mapDeps([820,1])),meta:{d:16698528e5,l:"2022年12月1日",c:["JMeter","性能测试"],g:["JMeter","多线程组","性能测试"],e:`
<p>在使用JMeter时，我们可以将场景分组，并以不同的方式运行它们，以复制现实世界的流量。</p>
<p>在本教程中，我们将学习如何以及何时使用多个线程组来复制现实世界的场景，以及如何使用简单的测试计划将它们按顺序或并行运行。</p>
<h2>2. 创建多个线程组</h2>
<p>线程组是JMeter的一个元素，它控制执行测试的线程数量。</p>
<p>JMeter测试计划中的每个线程组模拟一个特定的现实世界应用场景。</p>
<p>大多数基于服务器的应用程序通常有多个场景，因此为每个用例创建一个单独的线程组，可以让我们更灵活地在测试期间正确分配这个负载。</p>
<p>运行多个线程组有两种方式：顺序或并行。</p>`,r:{minutes:6.23,words:1868},t:"在JMeter中运行多个线程组",y:"a"}}],["/posts/baeldung/2024-07-11/2024-07-11-Running%20Spring%20Boot%20Applications%20with%20the%20Embedded%20Camunda%20Engine.html",{loader:()=>a(()=>import("./2024-07-11-Running Spring Boot Applications with the Embedded Camunda Engine.html-DhTx0che.js"),__vite__mapDeps([821,1])),meta:{d:16698528e5,l:"2022年12月1日",c:["Spring Boot","Camunda"],g:["workflow","BPMS"],e:`
<p>工作流引擎在业务流程自动化中扮演着重要角色。<strong>Camunda平台是一个开源的工作流和业务流程管理系统（BPMS），它为业务流程建模提供了一个流程引擎</strong>。Spring Boot与Camunda平台有很好的集成。在本教程中，我们将探讨如何将嵌入式Camunda引擎集成到Spring Boot应用程序中。</p>
<h3>2. Camunda工作流引擎</h3>
<p>Camunda工作流引擎是Activiti的一个分支，提供了一个基于业务流程建模符号2.0（BPMN 2.0）标准的流程和仿真引擎。此外，它还包含了用于建模、执行和监控的工具和API。首先，我们可以使用<strong>Modeler</strong>建模我们的端到端业务流程。Camunda提供了用于设计BPMN工作流的Modeler。Modeler作为一个桌面应用程序本地运行。然后，我们将业务流程模型部署到工作流引擎并执行它。我们可以使用REST API和提供的Web应用程序（Cockpit、Tasklist和Admin）以不同的方式执行业务流程。Camunda引擎可以以不同的方式使用：SaaS、自托管和可嵌入的库。<strong>本教程重点介绍在Spring Boot应用程序中的Camunda嵌入式引擎</strong>。</p>`,r:{minutes:5.87,words:1761},t:"在Spring Boot应用程序中使用嵌入式Camunda引擎",y:"a"}}],["/posts/baeldung/2024-07-11/2024-07-11-RxJava%20Single.just%20%20%20vs%20Single.fromCallable%20%20.html",{loader:()=>a(()=>import("./2024-07-11-RxJava Single.just   vs Single.fromCallable  .html-Cfh-LFib.js"),__vite__mapDeps([822,1])),meta:{d:1720656e6,l:"2024年7月11日",c:["RxJava","编程"],g:["RxJava","编程","性能优化"],e:'\n<p>在这篇简短的教程中，我们将比较在RxJava中创建一个_Single_对象的两种流行方式，并将使用_TestSubscriber_来测试这些实现。首先，我们将看到_Single.just()<em>工厂方法，并急切地使用它来创建对象的实例。之后，我们将学习_Single.fromCallable()</em>，并看看如何使用它来提高性能。</p>\n<p>_Single.just()_是创建一个_Observable_实例的直接方式。它接受一个对象作为参数，并将其包装在RxJava的_Single_中：</p>\n<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>Single```````&lt;String&gt;``````` employee = Single.just("John Doe");\n</code></pre></div>',r:{minutes:2.16,words:648},t:"RxJava Single.just() 与 Single.fromCallable() 的比较",y:"a"}}],["/posts/baeldung/2024-07-11/2024-07-11-Set%20the%20Date%20Format%20Using%20Apache%20POI.html",{loader:()=>a(()=>import("./2024-07-11-Set the Date Format Using Apache POI.html-BD1JOSXI.js"),__vite__mapDeps([823,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Apache POI"],g:["Date Format","Excel"],e:`
<h2><strong>1. 引言</strong></h2>
<p>在使用Apache POI处理日期时，我们希望确保它们被正确格式化。</p>
<p>幸运的是，使用Apache POI设置日期格式非常简单。在本教程中，我们将展示如何使用Apache POI为日期定义自定义_DataFormat_作为_CellStyle_，并如何使用现有的_DataFormats_。</p>
<h2><strong>2. 起点</strong></h2>
<p>我们的起点将是一个新的_XSSFWorkbook_，一个_XSSFCell_，以及一个已经创建的_CellStyle_：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">XSSFWorkbook</span> wb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XSSFWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">CellStyle</span> cellStyle <span class="token operator">=</span> wb<span class="token punctuation">.</span><span class="token function">createCellStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
wb<span class="token punctuation">.</span><span class="token function">createSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">XSSFSheet</span> sheet <span class="token operator">=</span> wb<span class="token punctuation">.</span><span class="token function">getSheetAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">XSSFCell</span> dateCell <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">createRow</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
dateCell<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:2.42,words:725},t:"使用Apache POI设置日期格式 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-11/2024-07-11-Sorting%20a%20HashSet%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-11-Sorting a HashSet in Java.html-D8o_2e-5.js"),__vite__mapDeps([824,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Collections"],g:["HashSet","sort"],e:`<hr>
<h1>Java中对HashSet进行排序 | Baeldung</h1>
<h2>1. 概述</h2>
<p><em>HashSet</em> 是来自 <em>java.util</em> 包的集合类。此类继承自 <em>AbstractSet</em> 类并实现了 <em>Set</em> 接口。此外，<em>HashSet</em> 不保留元素的顺序，因此需要找到对这些元素进行排序的方法。</p>
<p>在这个快速教程中，<strong>我们将学习多种对 <em>HashSet</em> 元素进行排序的技术</strong>。</p>
<h2>2. 使用 <em>Collections.sort()</em> 方法</h2>`,r:{minutes:2.33,words:700},t:"Java中对HashSet进行排序 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-11/2024-07-11-Spring%20Boot%20FeignClient%20vs.%20WebClient.html",{loader:()=>a(()=>import("./2024-07-11-Spring Boot FeignClient vs. WebClient.html-CRlGbtao.js"),__vite__mapDeps([825,1])),meta:{d:17207424e5,l:"2024年7月12日",c:["Spring Boot","Web Client"],g:["FeignClient","WebClient"],e:`
<p>在本教程中，我们将比较Spring Feign——一种声明式REST客户端，以及Spring 5中引入的Spring <em>WebClient</em>——一种响应式Web客户端。</p>
<h2>阻塞与非阻塞客户端</h2>
<p>在当今的微服务生态系统中，通常需要后端服务使用HTTP调用其他Web服务。因此，Spring应用程序需要一个Web客户端来执行请求。</p>
<p>接下来，我们将检查阻塞Feign客户端和非阻塞_WebClient_实现之间的差异。</p>
<h3>2.1 Spring Boot 阻塞Feign客户端</h3>
<p>Feign客户端是一种声明式REST客户端，它使编写Web客户端变得更容易。使用Feign时，开发人员只需要定义接口并相应地进行注解。然后，Spring在运行时提供实际的Web客户端实现。</p>`,r:{minutes:5.07,words:1522},t:"Spring Boot FeignClient与WebClient比较",y:"a"}}],["/posts/baeldung/2024-07-11/2024-07-11-Stream%20Large%20Byte%20%20%20to%20File%20With%20WebClient.html",{loader:()=>a(()=>import("./2024-07-11-Stream Large Byte   to File With WebClient.html-Dlg40I5S.js"),__vite__mapDeps([826,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring WebFlux","WebClient"],g:["Spring","WebClient","Large File"],e:`<hr>
<h1>使用WebClient流式传输大型字节数组到文件</h1>
<h2>1. 引言</h2>
<p>在本快速教程中，我们将使用_WebClient_从服务器流式传输一个大型文件。为了说明，我们将创建一个简单的控制器和两个客户端。<strong>最终，我们将学习如何以及何时使用Spring的_DataBuffer_和_DataBufferUtils_。</strong></p>
<h2>2. 我们的场景与简单服务器</h2>
<p><strong>我们将从一个简单的控制器开始，用于下载任意文件。</strong> 首先，我们将构建一个_FileSystemResource_，传递一个文件_Path_，然后将其作为响应实体(ResponseEntity)的主体包装起来：</p>`,r:{minutes:4.52,words:1355},t:"使用WebClient流式传输大型字节数组到文件",y:"a"}}],["/posts/baeldung/2024-07-11/2024-07-11-String%20Interpolation%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-11-String Interpolation in Java.html-D9twcTP2.js"),__vite__mapDeps([827,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","String Interpolation"],g:["Java","String","Interpolation"],e:`
<p>在本教程中，我们将讨论Java中<strong>字符串插值</strong>的主题。我们将看几个不同的例子，然后详细了解。<strong>字符串插值是一种直接且精确的方法，可以将变量值注入到字符串中</strong>。它允许用户直接在处理过的字符串文字中嵌入变量引用。与Scala等语言相比，Java缺乏对<strong>字符串插值</strong>的原生支持。</p>
<p>然而，有一些方法可以在Java中实现这种行为。在接下来的部分中，我们将解释这些方法中的每一种。</p>
<h2>3. 加号运算符</h2>
<p>首先，我们有“+”运算符。我们可以使用“+”运算符来连接我们的变量和字符串值。变量被替换为其值，因此我们实现了插值或字符串的连接：</p>`,r:{minutes:4.67,words:1401},t:"Java中字符串插值",y:"a"}}],["/posts/baeldung/2024-07-11/2024-07-11-The%20Implicit%20Name%20Of%20the%20Single%20Parameter%20in%20Lambda%20Expressions%20%20it.html",{loader:()=>a(()=>import("./2024-07-11-The Implicit Name Of the Single Parameter in Lambda Expressions  it.html-VeaEHQ2-.js"),__vite__mapDeps([828,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin","Programming"],g:["Kotlin","Lambda Expressions"],e:`<hr>
<h1>Kotlin中单参数Lambda表达式的隐式名称：it</h1>
<p>Lambda表达式是Kotlin中用于编写简洁且富有表现力代码的强大工具。此外，我们可以在Lambda表达式中使用默认的隐式参数_it_。</p>
<p>在本教程中，我们将探索_it_是什么，以及如何提高我们的Lambda表达式的可读性。</p>
<h2>2. 问题介绍</h2>
<p>首先，让我们看一个在Lambda表达式中使用_it_作为参数名称的例子：</p>
<div class="language-kotlin" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Kai"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Liam"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Eric"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Kevin"</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">filter</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">4</span> <span class="token punctuation">}</span>
  <span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span><span class="token function">uppercase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
  <span class="token punctuation">.</span><span class="token function">sortedBy</span> <span class="token punctuation">{</span> it <span class="token punctuation">}</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"ERIC"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"LIAM"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>
</code></pre></div>`,r:{minutes:4.29,words:1288},t:"Kotlin中单参数Lambda表达式的隐式名称：it",y:"a"}}],["/posts/baeldung/2024-07-11/2024-07-11-Using%20Firebase%20Cloud%20Messaging%20in%20Spring%20Boot%20Applications.html",{loader:()=>a(()=>import("./2024-07-11-Using Firebase Cloud Messaging in Spring Boot Applications.html-DqL6cByn.js"),__vite__mapDeps([829,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Spring Boot","Firebase Cloud Messaging"],g:["FCM","Push Notifications"],e:`
<p>在这个快速教程中，我们将展示如何使用Google的Firebase Cloud Messaging（简称FCM）向Web和移动应用程序发送推送通知。</p>
<h2>2. FCM是什么？</h2>
<p>Firebase Cloud Messaging，简称FCM，是一个基于云的消息服务，提供以下功能：</p>
<ul>
<li>可靠地向移动或Web应用程序发送消息，这里统称为“客户端”</li>
<li>使用主题或基于订阅的地址向所有或特定客户端发送消息</li>
<li>在服务器应用程序中接收来自客户端的消息</li>
</ul>
<p>以下是这项技术在现实世界应用的一些示例：</p>`,r:{minutes:8.12,words:2436},t:"使用Firebase Cloud Messaging在Spring Boot应用程序中的实现",y:"a"}}],["/posts/baeldung/2024-07-11/2024-07-11-Using%20Watermarks%20with%20iText%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-11-Using Watermarks with iText in Java.html-BZRrzrBp.js"),__vite__mapDeps([830,1])),meta:{d:16698528e5,l:"2022年12月1日",c:["Java","iText"],g:["PDF","Watermark"],e:'\n<p>iText PDF是一个用于创建和操作PDF文件的Java库。水印有助于保护机密信息。</p>\n<p>在本教程中，我们将通过为水印创建一个新的PDF文件并为现有PDF文件添加水印来探索iText PDF库。</p>\n<h2>2. Maven依赖项</h2>\n<p>在本教程中，我们将使用Maven来管理我们的依赖项。我们将需要iText依赖项来开始使用iText PDF库。此外，我们还需要_AssertJ_依赖项进行测试。我们将在_pom.xml_中添加这两个依赖项：</p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>``com.itextpdf``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>``itext7-core``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>``7.2.4``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>``\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>`pom`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>`\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>``org.assertj``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>``assertj-core``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>``3.25.3``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>``\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>`test`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>`\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n</code></pre></div>',r:{minutes:5.49,words:1646},t:"使用Java中的iText添加水印",y:"a"}}],["/posts/baeldung/2024-07-11/2024-07-11-When%20to%20Use%20Callable%20and%20Supplier%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-11-When to Use Callable and Supplier in Java.html-D63dMQ-u.js"),__vite__mapDeps([831,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Concurrency"],g:["Callable","Supplier"],e:`
<p>在本教程中，我们将讨论Callable和Supplier这两个函数式接口，它们在结构上相似但在使用上有所不同。</p>
<p>Callable和Supplier都返回一个类型化的值，并且不接受任何参数。执行上下文是区分它们的标准。</p>
<p>在本教程中，我们将重点关注异步任务的上下文。</p>
<h2>2. 模型</h2>
<p>在我们开始之前，让我们定义一个类：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> surname<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">LocalDate</span> birthDate<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> canDriveACar <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token comment">// 标准的构造函数、getter和setter</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:4.7,words:1411},t:"Java中何时使用Callable和Supplier",y:"a"}}],["/posts/baeldung/2024-07-12/2024-07-12-Access%20HTTPS%20REST%20Service%20Using%20Spring%20RestTemplate.html",{loader:()=>a(()=>import("./2024-07-12-Access HTTPS REST Service Using Spring RestTemplate.html-BcWKCXx9.js"),__vite__mapDeps([832,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Security","OAuth"],g:["RestTemplate","HTTPS","SSL"],e:`
<p>如果你正在研究Spring Security（特别是OAuth）的实现，一定要看看《学习Spring安全》课程。</p>
<p><strong>&gt;&gt; 学习Spring</strong>
<strong>安全</strong></p>
<h2>1. 概述</h2>
<p>在本教程中，我们将看到如何使用Spring的RestTemplate来消费一个使用HTTPS保护的REST服务。</p>
<h2>2. 设置</h2>
<p><strong>我们知道要保护REST服务，我们需要一个证书和一个从证书生成的密钥库。</strong> 我们可以从证书颁发机构（CA）获取证书，以确保应用程序在生产级应用中是安全和受信任的。</p>`,r:{minutes:3.55,words:1065},t:"使用Spring RestTemplate访问HTTPS REST服务",y:"a"}}],["/posts/baeldung/2024-07-12/2024-07-12-BuildScripts%20Blocks%20in%20Gradle.html",{loader:()=>a(()=>import("./2024-07-12-BuildScripts Blocks in Gradle.html-BLuFE3YU.js"),__vite__mapDeps([833,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Gradle","Build Automation"],g:["Gradle","Build Scripts","Build Automation"],e:`<hr>
<h1>Gradle构建脚本块</h1>
<ol>
<li>概述</li>
</ol>
<p>在本教程中，我们将学习Gradle构建脚本块（在_build.gradle_文件中的脚本）并详细了解_buildScript_块的目的。</p>
<ol start="2">
<li>引言</li>
</ol>
<p>2.1. Gradle是什么？</p>
<p>它是一个构建自动化工具，可以执行编译、打包、测试、部署、发布、依赖解析等任务。如果没有这个工具，我们将不得不手动执行这些任务，这相当复杂且耗时。在当今的软件开发中，很难不使用这样的构建工具。</p>
<p>2.2. Gradle的常见构建脚本块</p>`,r:{minutes:2.75,words:824},t:"Gradle构建脚本块",y:"a"}}],["/posts/baeldung/2024-07-12/2024-07-12-Can%20a%20Java%20Application%20Use%20More%20Memory%20Than%20the%20Heap%20Size%20.html",{loader:()=>a(()=>import("./2024-07-12-Can a Java Application Use More Memory Than the Heap Size .html-CLp5DaV-.js"),__vite__mapDeps([834,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","JVM"],g:["Java应用","内存","堆外内存"],e:`
<p>Java应用程序以其启动缓慢和预热时间长而闻名。OpenJDK中的CRaC（检查点时协调恢复）项目可以通过创建应用程序的峰值性能检查点并恢复JVM实例到该点来帮助改善这些问题。</p>
<p>为了充分利用这一特性，BellSoft提供了为Java应用程序高度优化的容器。这些容器打包了Alpaquita Linux（一个为Java和云环境优化的全功能操作系统）和Liberica JDK（基于OpenJDK的开源Java运行时）。</p>
<p>这些现成的映像使我们能够轻松地在Spring Boot应用程序中集成CRaC：</p>
<p><strong>使用CRaC支持提高Java应用程序性能</strong></p>`,r:{minutes:13.63,words:4090},t:"Java应用程序可以使用超过堆大小的内存吗？ | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-12/2024-07-12-Check%20if%20a%20Number%20Is%20Prime%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-12-Check if a Number Is Prime in Kotlin.html-D-t2IcDZ.js"),__vite__mapDeps([835,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin","Programming"],g:["prime number","algorithm","BigInteger"],e:`
<p>质数是一个除了1和它自身外没有其他除数的数字。非质数称为合数。此外，1既不被视为质数也不被视为合数。还有，负数也不被视为质数。</p>
<p>本教程将探讨在Kotlin中检查数字是否为质数的多种方法。</p>
<h2>2. 使用迭代</h2>
<p>我们可以使用for循环来检查数字是否有任何除数。**利用一个数字的因子之一必须小于或等于它的平方根这一属性，我们只迭代到数字的平方根。**这样，我们可以通过减少迭代次数来提高算法的效率。</p>
<p>让我们看看实现：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>fun isPrimeUsingIteration(num: Int): Boolean {
    if (num &lt; 2) return false
    val sqrt = sqrt(num.toDouble()).toInt()
    for (i in 2..sqrt) {
        if (num % i == 0) {
            return false        }
    }
    return true
}
</code></pre></div>`,r:{minutes:4.47,words:1342},t:"在Kotlin中检查数字是否为质数",y:"a"}}],["/posts/baeldung/2024-07-12/2024-07-12-Convert%20Between%20LocalDateTime%20and%20ZonedDateTime.html",{loader:()=>a(()=>import("./2024-07-12-Convert Between LocalDateTime and ZonedDateTime.html-CIq40Q0w.js"),__vite__mapDeps([836,1])),meta:{d:17207424e5,l:"2024年7月12日",c:["Java","DateTime API"],g:["LocalDateTime","ZonedDateTime"],e:`<hr>
<h1>Java中LocalDateTime与ZonedDateTime的转换</h1>
<p>Java中的_LocalDateTime_ API用于表示和操作日期和时间的组合。_ZonedDateTime_是一个不可变对象，它持有一个精确到纳秒的日期时间值，一个基于ISO 8601日历系统的时间区值，以及一个_ZoneOffSet_来处理模糊的本地日期时间。</p>
<p>在本教程中，我们将看到如何从_LocalDateTime_转换到_ZonedDateTime_以及反过来。</p>
<p>让我们从将_LocalDateTime_的实例转换为_ZonedDateTime_开始。</p>`,r:{minutes:3.53,words:1059},t:"Java中LocalDateTime与ZonedDateTime的转换",y:"a"}}],["/posts/baeldung/2024-07-12/2024-07-12-Convert%20String%20to%20Instant.html",{loader:()=>a(()=>import("./2024-07-12-Convert String to Instant.html-DXpdxIAT.js"),__vite__mapDeps([837,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Date-Time API"],g:["String to Instant","LocalDateTime","Instant"],e:`
<p>在本快速教程中，<strong>我们将解释如何使用Java中的java.time包中的类将_字符串_转换为_Instant_</strong>。首先，我们将使用_LocalDateTime_类实现一个解决方案。然后，我们将使用_Instant_类来获取一个时区内的瞬间。</p>
<h3>2. 使用_LocalDateTime_类</h3>
<p><em><strong>java.time.LocalDateTime</strong></em> <strong>表示没有时区的日期和/或时间</strong>。它是一个局部时间对象，意味着它只在特定的上下文中有效，不能在这个上下文之外使用。这个上下文通常是执行代码的机器。</p>`,r:{minutes:2.11,words:633},t:"Java中将字符串转换为Instant",y:"a"}}],["/posts/baeldung/2024-07-12/2024-07-12-Convert%20java.util.Date%20to%20java.sql.Date.html",{loader:()=>a(()=>import("./2024-07-12-Convert java.util.Date to java.sql.Date.html-CqJb0GvU.js"),__vite__mapDeps([838,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","JDBC"],g:["java.util.Date","java.sql.Date"],e:`
<p>在这篇简短的教程中，我们将探讨几种将 java.util.Date 转换为 java.sql.Date 的策略。</p>
<p>首先，我们将看看标准转换方式，然后，我们将检查一些被认为是最佳实践的替代方法。</p>
<p>这两个日期类用于特定场景，并且是不同 Java 标准包的一部分：</p>
<ul>
<li>java.util 包是 JDK 的一部分，包含各种实用类以及日期和时间设施。</li>
<li>java.sql 包是 JDBC API 的一部分，从 Java 7 开始默认包含在 JDK 中。</li>
</ul>
<p>java.util.Date 表示一个具体的时间点，精度为毫秒：</p>`,r:{minutes:4.68,words:1405},t:"java.util.Date 转换为 java.sql.Date",y:"a"}}],["/posts/baeldung/2024-07-12/2024-07-12-Determine%20Operating%20System%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-12-Determine Operating System in Kotlin.html-C2jMcD_B.js"),__vite__mapDeps([839,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin"],g:["Operating System","SystemUtils"],e:`<hr>
<h1>Kotlin中确定操作系统</h1>
<h2>1. 概述</h2>
<p>了解操作系统（OS）对于实现特定于操作系统的行为至关重要。</p>
<p>在本教程中，我们将探讨Kotlin中检测当前操作系统的方法。</p>
<h2>2. 使用_System.getProperty()_函数</h2>
<p>当我们在JVM上运行Kotlin程序时，它从Java继承了强大的_System_类。这个类是我们访问与系统相关的信息的门户。具体来说，我们可以使用_System.getProperty()_方法来提取JVM正在运行的操作系统的详细信息。</p>
<p><strong>_os.name_属性指示操作系统名称</strong>，而**_os.version_保留操作系统版本信息**。</p>`,r:{minutes:3.75,words:1126},t:"Kotlin中确定操作系统",y:"a"}}],["/posts/baeldung/2024-07-12/2024-07-12-Enable%20and%20Disable%20Endpoints%20at%20Runtime%20With%20Spring%20Boot.html",{loader:()=>a(()=>import("./2024-07-12-Enable and Disable Endpoints at Runtime With Spring Boot.html-BkBXk_DW.js"),__vite__mapDeps([840,1])),meta:{d:16682112e5,l:"2022年11月12日",c:["Spring Boot","Actuator"],g:["Endpoints","Dynamic Configuration"],e:`<hr>
<h1>在Spring Boot中动态启用和禁用端点</h1>
<p>端点在Spring Boot应用程序中是与应用程序交互的机制。在计划外的维护窗口期间，我们可能想要临时限制应用程序与外部的交互。</p>
<p>在本教程中，<strong>我们将学习如何在Spring Boot应用程序中在运行时启用和禁用端点</strong>，使用一些流行的库，如Spring Cloud、Spring Actuator和Apache的Commons Configuration。### 2. 设置</p>
<p>在这一部分，让我们关注设置Spring Boot项目的关键方面。</p>
<h4>2.1. Maven依赖</h4>`,r:{minutes:4.73,words:1419},t:"在Spring Boot中动态启用和禁用端点",y:"a"}}],["/posts/baeldung/2024-07-12/2024-07-12-Expression%20Types%20in%20Thymeleaf.html",{loader:()=>a(()=>import("./2024-07-12-Expression Types in Thymeleaf.html-BsHxsgNR.js"),__vite__mapDeps([841,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Thymeleaf"],g:["Template Engine","Expression Types"],e:`
<p>Thymeleaf 是Java生态系统中流行的模板引擎。它帮助将控制器层的数据绑定到视图层。本教程将通过示例讨论Thymeleaf的表达式类型。</p>
<p>我们将使用名为Dino的简单Web应用程序作为示例。这是一个用于创建恐龙资料的简单Web应用程序。</p>
<p>首先，让我们为我们的恐龙创建一个模型类：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dino</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token comment">// 构造函数</span>
    <span class="token comment">// getter和setter</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:4.78,words:1435},t:"Thymeleaf中的表达式类型 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-12/2024-07-12-Filling%20a%20List%20With%20All%20Enum%20Values%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-12-Filling a List With All Enum Values in Java.html-DQLi7gqF.js"),__vite__mapDeps([842,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Enums"],g:["Java","Enum","List"],e:`<hr>
<h1>在Java中将所有枚举值填充到列表</h1>
<p>Java在1.5版本中引入了枚举（enum）。将常量定义为枚举可以使代码更易读，并允许编译时检查。</p>
<p>在这个快速教程中，让我们探讨如何获取一个包含枚举类型所有实例的列表。</p>
<h3>2. 问题介绍</h3>
<p>像往常一样，我们通过一个例子来理解问题。</p>
<p>首先，我们创建一个名为<code>MagicNumber</code>的枚举类型：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">enum</span> <span class="token class-name">MagicNumber</span> <span class="token punctuation">{</span>
    <span class="token constant">ONE</span><span class="token punctuation">,</span> <span class="token constant">TWO</span><span class="token punctuation">,</span> <span class="token constant">THREE</span><span class="token punctuation">,</span> <span class="token constant">FOUR</span><span class="token punctuation">,</span> <span class="token constant">FIVE</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:3.17,words:952},t:"在Java中将所有枚举值填充到列表",y:"a"}}],["/posts/baeldung/2024-07-12/2024-07-12-Find%20the%20First%20Non%20Repeating%20Character%20in%20a%20String%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-12-Find the First Non Repeating Character in a String in Java.html-C9BsYNy6.js"),__vite__mapDeps([843,1])),meta:{d:16807392e5,l:"2023年4月6日",c:["Java","Algorithm"],g:["String","Non-Repeating Character"],e:`
<p>在本教程中，我们将探讨在Java中找出字符串中第一个不重复字符的不同方法。我们还将尝试分析这些解决方案的运行时间复杂度。</p>
<h2>问题陈述</h2>
<p><strong>给定一个字符字符串作为输入，找出字符串中的第一个不重复的字符</strong>。以下是一些示例：</p>
<p>示例 1: <em>Lullaby</em>
在这个例子中，L重复了三次。当我们遇到字符_u_时，遇到了第一个不重复的字符。</p>
<p>示例 2: <em>Baeldung</em>
在这个例子中，所有字符都是不重复的。根据问题陈述，我们取第一个，B。</p>
<p>示例 3: <em>mahimahi</em>
在这个例子中，没有不重复的字符 - 所有字符都只重复一次。因此，这里的输出是_null_。</p>`,r:{minutes:5.47,words:1642},t:"Java中找出字符串中第一个不重复的字符",y:"a"}}],["/posts/baeldung/2024-07-12/2024-07-12-Finding%20Max%20Date%20in%20List%20Using%20Streams.html",{loader:()=>a(()=>import("./2024-07-12-Finding Max Date in List Using Streams.html-D-aO0aIt.js"),__vite__mapDeps([844,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java"],g:["Java 8","Streams"],e:`<ul>
<li></li>
</ul>
<h1>使用Streams查找列表中的最大日期</h1>
<p>在本文中，我们首先创建一个包含日期的对象。然后，我们将看到如何使用_Streams_在这些对象的列表中找到最大日期。</p>
<h2>2. 示例设置</h2>
<p><strong>Java的原始_Date_ API仍然被广泛使用</strong>，因此我们将展示一个使用它的示例。然而，自从Java 8引入了_LocalDate_，并且大多数_Date_方法都被弃用了。因此，<strong>我们还将展示一个使用_LocalDate_的示例。</strong></p>
<p>首先，让我们创建一个包含单独_Date_属性的基础_Event_对象：</p>`,r:{minutes:3.03,words:909},t:"使用Streams查找列表中的最大日期",y:"a"}}],["/posts/baeldung/2024-07-12/2024-07-12-Fixing%20Selenium%20WebDriver%20Executable%20Path%20Error.html",{loader:()=>a(()=>import("./2024-07-12-Fixing Selenium WebDriver Executable Path Error.html-Don26ck3.js"),__vite__mapDeps([845,1])),meta:{d:17208288e5,l:"2024年7月13日",c:["Java","Selenium"],g:["WebDriver","Error"],e:`
<p>在本教程中，我们将探讨Selenium的常见错误：“必须通过webdriver.chrome.driver系统属性设置驱动程序可执行文件的路径。”此错误阻止了Selenium启动浏览器。这是由于配置不完整造成的。我们将学习如何通过手动或自动的正确设置来解决这个问题。</p>
<h2>2. 错误原因</h2>
<p>在我们能够使用Selenium之前，需要进行一些设置步骤，例如设置WebDriver的路径。<strong>如果我们没有配置WebDriver的路径，我们就不能运行它来控制浏览器，我们将得到一个java.lang.IllegalStateException。</strong></p>`,r:{minutes:3.69,words:1108},t:"解决Selenium WebDriver可执行文件路径错误",y:"a"}}],["/posts/baeldung/2024-07-12/2024-07-12-Generate%20Unique%20ObjectId%20in%20MongoDB.html",{loader:()=>a(()=>import("./2024-07-12-Generate Unique ObjectId in MongoDB.html-Jwfgb79A.js"),__vite__mapDeps([846,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["MongoDB","技术"],g:["ObjectId","唯一性","技术"],e:`
<p>在这篇文章中，我们将讨论什么是ObjectId，如何生成它，以及确保其唯一性可能的方法。</p>
<h2>1. 引言</h2>
<h2>2. ObjectId 基本信息</h2>
<p>让我们首先解释一下什么是ObjectId。<strong>ObjectId是一个12字节的十六进制值</strong>，是BSON规范中可能的数据类型之一。BSON是JSON文档的二进制序列化。此外，MongoDB使用ObjectId作为文档中_id字段的默认标识符。当创建集合时，还会在_id字段上设置默认的唯一索引。</p>
<p>这防止用户插入两个具有相同_id的文档。此外，_id索引不能从集合中删除。然而，可以在两个集合中插入具有相同_id的单个文档。</p>`,r:{minutes:6.75,words:2025},t:"在MongoDB中生成唯一的ObjectId",y:"a"}}],["/posts/baeldung/2024-07-12/2024-07-12-Get%20Information%20About%20a%20PDF%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-12-Get Information About a PDF in Java.html-Dh9_FpYU.js"),__vite__mapDeps([847,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","PDF"],g:["iText","PDFBox"],e:'\n<p>在这个教程中，我们将了解使用Java中的iText和PDFBox库获取PDF文件信息的不同方式。</p>\n<h3>2. 使用iText库</h3>\n<p>iText是一个用于创建和操作PDF文档的库。同时，它还提供了一个简单的方式来获取有关文档的信息。</p>\n<h4>2.1. Maven依赖</h4>\n<p>首先，让我们在_pom.xml_中声明_itextpdf_依赖：</p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>``com.itextpdf``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>``itextpdf``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>``5.5.13.3``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n</code></pre></div>',r:{minutes:3.35,words:1004},t:"在Java中获取PDF文件信息",y:"a"}}],["/posts/baeldung/2024-07-12/2024-07-12-Guide%20to%20Filters%20in%20MongoDB.html",{loader:()=>a(()=>import("./2024-07-12-Guide to Filters in MongoDB.html-BpLBVQXQ.js"),__vite__mapDeps([848,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["MongoDB","Java"],g:["Java","MongoDB","Filters"],e:`<hr>
<h1>MongoDB中过滤器的使用指南</h1>
<p>在本教程中，我们将学习如何使用过滤器构建器在MongoDB中指定查询的过滤器。</p>
<p>过滤器类是一种构建器，帮助我们构建查询过滤器。<strong>过滤器是MongoDB用来根据特定条件限制结果的操作</strong>。</p>
<h2>2. 构建器类型</h2>
<p>Java MongoDB驱动程序提供了各种类型的构建器，帮助我们构建BSON文档。<strong>构建器提供了一个方便的API，简化了执行各种CRUD和聚合操作的过程</strong>。</p>
<p>让我们回顾一下可用的不同类型构建器：</p>
<ul>
<li><strong>Filters</strong> 用于构建查询过滤器</li>
<li><strong>Projections</strong> 用于构建字段投影，指定要包含和排除的字段</li>
<li><strong>Sorts</strong> 用于构建排序标准</li>
<li><strong>Updates</strong> 用于构建更新操作</li>
<li><strong>Aggregates</strong> 用于构建聚合管道</li>
<li><strong>Indexes</strong> 用于构建索引键</li>
</ul>`,r:{minutes:5.05,words:1514},t:"MongoDB中过滤器的使用指南",y:"a"}}],["/posts/baeldung/2024-07-12/2024-07-12-How%20to%20Insert%20a%20HashMap%20Into%20MongoDB%20With%20Java%20.html",{loader:()=>a(()=>import("./2024-07-12-How to Insert a HashMap Into MongoDB With Java .html-BRSacHEO.js"),__vite__mapDeps([849,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","MongoDB"],g:["HashMap","Spring Data MongoDB"],e:`
<p>在这个快速教程中，我们将学习如何在Java中使用HashMap与MongoDB进行交互。MongoDB拥有一个对map友好的API，而Spring Data MongoDB使得使用map或map列表的工作变得更加直接。</p>
<h2>2. 设置我们的场景</h2>
<p>Spring Data MongoDB带有MongoTemplate，它有许多重载版本的insert()方法，允许我们将map插入到我们的集合中。MongoDB以JSON格式表示一个文档。因此，我们可以用Java中的Map<code>&lt;String, Object&gt;</code>来复制它。</p>
<p>我们将使用MongoTemplate和简单的可重用map来实现我们的用例。首先，创建map引用并注入MongoTemplate：</p>`,r:{minutes:4.22,words:1265},t:"如何使用Java将HashMap插入MongoDB？",y:"a"}}],["/posts/baeldung/2024-07-12/2024-07-12-Inserting%20an%20Object%20in%20an%20ArrayList%20at%20a%20Specific%20Position.html",{loader:()=>a(()=>import("./2024-07-12-Inserting an Object in an ArrayList at a Specific Position.html-BhPUHcNf.js"),__vite__mapDeps([850,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Java","Collections"],g:["ArrayList","Java Collections"],e:`
<p>在本教程中，我们将学习如何在特定位置向ArrayList中插入一个对象。</p>
<h2>2. 示例</h2>
<p>如果我们想在ArrayList中的特定位置添加一个元素，我们可以使用通过List<code>&lt;E&gt;</code>接口实现提供的<code>add(int index, E element)</code>方法。这个方法允许我们在特定索引处添加一个元素。</p>
<p>如果索引超出范围（索引<code>&lt;0或索引&gt;</code>size()），它还可能抛出一个<code>IndexOutOfBoundsException</code>。这意味着如果我们的ArrayList中只有4个元素，我们不能使用它在位置4添加项目，因为我们从0开始计数。在这里，我们必须使用标准的<code>add(E e)</code>方法。</p>`,r:{minutes:1.93,words:579},t:"在特定位置向ArrayList中插入对象",y:"a"}}],["/posts/baeldung/2024-07-12/2024-07-12-JUnit%20%20%20Testing%20Methods%20That%20Call%20System.exit%20%20.html",{loader:()=>a(()=>import("./2024-07-12-JUnit   Testing Methods That Call System.exit  .html-CEYIQz7l.js"),__vite__mapDeps([851,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Testing","Java"],g:["JUnit","Mockito","System.exit"],e:`
<p>在某些情况下，可能需要一个方法调用_System.exit()_并关闭应用程序。例如，这可能是因为应用程序应该只运行一次然后退出，或者在出现严重错误如丢失数据库连接时。</p>
<p>如果一个方法调用了_System.exit()_，那么从单元测试中调用它并进行断言就会变得困难，因为这将导致单元测试退出。</p>
<p>在本教程中，我们将探讨在使用JUnit时如何测试调用_System.exit()_的方法。</p>
<h2>2. 项目设置</h2>
<p>让我们首先创建一个Java项目。我们将创建一个服务，用于将任务保存到数据库。如果保存任务到数据库时抛出异常，该服务将调用_System.exit()_。</p>`,r:{minutes:5.05,words:1515},t:"JUnit - 测试调用 System.exit() 的方法",y:"a"}}],["/posts/baeldung/2024-07-12/2024-07-12-Jackson%20s%20Deserialization%20With%20Lombok.html",{loader:()=>a(()=>import("./2024-07-12-Jackson s Deserialization With Lombok.html-j6buRxYa.js"),__vite__mapDeps([852,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Jackson"],g:["Lombok","Deserialization"],e:`<hr>
<h1>Jackson 反序列化与 Lombok</h1>
<h2><strong>1. 概述</strong></h2>
<p>在大多数情况下，当我们使用 Project Lombok 时，我们会想要将我们的数据类与像 Jackson 这样的 JSON 框架结合起来。这在 JSON 在大多数现代 API 和数据服务中广泛使用的情况下尤其如此。</p>
<p>在这个快速教程中，<strong>我们将看看如何配置我们的 Lombok 构建器类，以便与 Jackson 无缝协作</strong>。</p>
<h2><strong>2. 依赖</strong></h2>
<p>我们开始使用的所有需要是将 <em>org.projectlombok</em> 添加到我们的 <em>pom.xml</em> 中：</p>`,r:{minutes:3.4,words:1021},t:"Jackson 反序列化与 Lombok",y:"a"}}],["/posts/baeldung/2024-07-12/2024-07-12-Java%20Course%20Team%20Lead%20with%20Spring%20Experience%20%20Remote%20%20%20Part%20Time%20%20%20not%20open%20.html",{loader:()=>a(()=>import("./2024-07-12-Java Course Team Lead with Spring Experience  Remote   Part Time   not open .html-wIUNMRAt.js"),__vite__mapDeps([853,1])),meta:{d:17207424e5,l:"2024年7月12日",c:["Java","远程工作"],g:["Java课程负责人","Spring框架"],e:`
<h3>关于我们</h3>
<p>Baeldung 是一家专注于编程领域的学习和媒体公司。我们是一支灵活的、完全远程的团队。</p>
<h3>职位描述</h3>
<p>我们正在寻找一位具有扎实Spring经验的<strong>高级Java开发人员</strong>，加入我们的团队，帮助指导团队开发以教学为重点的材料——特别是课程。</p>
<p>我们的代码库维护得很好，团队主要开发新课程，其次是对现有材料进行改进和升级。您将进行代码审查，并在团队内部提供技术指导，包括审查课程的书面内容。</p>
<h3>技能和要求</h3>
<p>必须对Spring、Spring Boot、Spring Data JPA和Spring Security有深入的理解和实际工作经验。</p>`,r:{minutes:1.49,words:448},t:"Java课程团队负责人（远程）兼职 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-12/2024-07-12-Kafka%20s%20Shift%20from%20ZooKeeper%20to%20Kraft.html",{loader:()=>a(()=>import("./2024-07-12-Kafka s Shift from ZooKeeper to Kraft.html-BzaMjVu9.js"),__vite__mapDeps([854,1])),meta:{d:17207424e5,l:"2024年7月12日",c:["Kafka","ZooKeeper"],g:["Kafka","ZooKeeper","Kraft","分布式系统"],e:`
<p>Kafka在其架构中最近从ZooKeeper转变为基于仲裁的控制器，该控制器使用一种名为Kafka Raft的新共识协议，简称为Kraft（发音为“craft”）。</p>
<p>在本教程中，我们将探讨Kafka做出这一决定的原因，以及这一变化如何简化其架构并使其更加强大易用。</p>
<h3>2. ZooKeeper简介</h3>
<p>ZooKeeper是一个<strong>提供高度可靠的分布式协调服务</strong>。它最初由Yahoo!开发，用于简化在大数据集群上运行的流程。它起初是Hadoop的一个子项目，后来在2008年成为一个独立的Apache Foundation项目。它被广泛用于大型分布式系统中的多种用例。</p>`,r:{minutes:9.17,words:2751},t:"Kafka从ZooKeeper到Kraft的转变",y:"a"}}],["/posts/baeldung/2024-07-12/2024-07-12-Kong%20Ingress%20Controller%20with%20Spring%20Boot.html",{loader:()=>a(()=>import("./2024-07-12-Kong Ingress Controller with Spring Boot.html-CrSNBfKM.js"),__vite__mapDeps([855,1])),meta:{d:16676928e5,l:"2022年11月6日",c:["Spring Boot","Kong Ingress"],g:["Kubernetes","API Gateway"],e:`
<p>Kubernetes (K8s) 是一个自动化软件开发和部署的编排器，是当今 API 托管的流行选择，无论是在本地还是在诸如 Google Cloud Kubernetes Service (GKS) 或 Amazon Elastic Kubernetes Service (EKS) 等云服务上运行。另一方面，Spring 已成为最受欢迎的 Java 框架之一。</p>
<p>在本教程中，我们将展示如何使用 Kong Ingress Controller (KIC) 在 Kubernetes 上部署我们的 Spring Boot 应用程序，并设置受保护的环境。我们还将展示 KIC 的高级用法，通过实现一个简单的速率限制器来增强应用程序的功能，而无需任何编码。</p>`,r:{minutes:7.89,words:2368},t:"Kong Ingress Controller 与 Spring Boot | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-12/2024-07-12-Object%20Validation%20After%20Deserialization.html",{loader:()=>a(()=>import("./2024-07-12-Object Validation After Deserialization.html-BXsis6Up.js"),__vite__mapDeps([856,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Jackson"],g:["Java","Validation API","Deserialization"],e:`<hr>
<h1>Java对象反序列化后验证</h1>
<p>在本教程中，我们将看到如何使用Java的验证API在反序列化后验证对象。</p>
<h2>1. 概述</h2>
<h2>2. 手动触发验证</h2>
<p>Java的bean验证API定义在JSR 380中。它的一个常见用途是在Spring控制器中使用<code>@Valid</code>注解参数。然而，在本文中，我们将专注于控制器之外的验证。</p>
<p>首先，让我们编写一个方法来验证对象的内容是否符合其验证约束。为此，我们将从默认验证器工厂获取<code>Validator</code>。然后，我们将<code>validate()</code>方法应用于对象。此方法返回一个<code>ConstraintViolation</code>的<code>Set</code>。<code>ConstraintViolation</code>封装了一些有关验证错误的提示。为了保持简单，如果出现任何验证问题，我们将只抛出一个<code>ConstraintViolationException</code>：</p>`,r:{minutes:3.64,words:1093},t:"Java对象反序列化后验证",y:"a"}}],["/posts/baeldung/2024-07-12/2024-07-12-Overriding%20the%20Values%20of%20Remote%20Properties%20in%20Spring%20Cloud%20Config.html",{loader:()=>a(()=>import("./2024-07-12-Overriding the Values of Remote Properties in Spring Cloud Config.html-BpSUZ2_t.js"),__vite__mapDeps([857,1])),meta:{d:1657584e6,l:"2022年7月12日",c:["Spring Cloud","Configuration"],g:["Spring Cloud Config","Remote Properties"],e:`<hr>
<h1>Spring Cloud Config中覆盖远程属性值的方法</h1>
<p>Spring Cloud Config是Spring Cloud项目的一部分。它通过集中式服务管理应用程序配置数据，使其与部署的微服务明显分离。Spring Cloud Config拥有自己的属性管理仓库，并且也与Git、Consul和Eureka等开源项目集成。</p>
<p>在本文中，我们将看到在Spring Cloud Config中覆盖远程属性值的不同方法，Spring从2.4版本开始施加的限制，以及3.0版本带来的变化。本教程将使用spring-boot版本3.2.2。</p>
<h2>1. 概述</h2>`,r:{minutes:7.36,words:2209},t:"Spring Cloud Config中覆盖远程属性值的方法",y:"a"}}],["/posts/baeldung/2024-07-12/2024-07-12-Persisting%20the%20Query%20Model.html",{loader:()=>a(()=>import("./2024-07-12-Persisting the Query Model.html-BQtz5hYZ.js"),__vite__mapDeps([858,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Axon","Spring Boot"],g:["Axon Framework","MongoDB"],e:`
<p>Axon框架帮助我们构建事件驱动的微服务系统。在Axon框架的指南中，我们通过一个简单的Axon Spring Boot应用程序来了解Axon，其中包括构建了一个示例_订单_模型，供我们更新和查询。在Axon框架中分发查询时，我们添加了所有支持的查询。</p>
<p>本文将<strong>研究Axon框架的查询模型持久化</strong>。我们将涵盖使用MongoDB存储投影，以及测试的挑战以及如何保持流与查询模型同步。</p>
<h3>2.1. 令牌存储</h3>
<p>构建查询模型时，Axon使用_TokenStore_来跟踪。理想情况下，令牌存储与查询模型存储在同一数据库中以确保一致性。使用持久的令牌存储还将确保我们可以运行多个实例，其中每个实例只需要处理部分事件。分割为多个实例可以使用段，其中实例可以申请处理所有或部分段。如果我们使用JPA或JDBC进行持久化，使用_JpaTokenStore_或JdbcTokenStore。这两种令牌存储实现都在Axon框架中可用，无需扩展。</p>`,r:{minutes:4.04,words:1211},t:"Axon框架持久化查询模型",y:"a"}}],["/posts/baeldung/2024-07-12/2024-07-12-Retain%20Only%20Digits%20and%20Decimal%20Separator%20in%20String.html",{loader:()=>a(()=>import("./2024-07-12-Retain Only Digits and Decimal Separator in String.html-ILx0M1lO.js"),__vite__mapDeps([859,1])),meta:{d:1720802748e3,c:["Java","字符串处理"],g:["正则表达式","字符串","Java 8","Guava","Apache Commons"],e:`
<p>让我们假设我们需要从一个包含字母数字和特殊字符的字符串中移除所有非数字字符，同时保留小数点。例如，我们想要从文本“这个包的价格是100.5$”中提取数字和小数部分，仅得到“100.5”，即价格部分。</p>
<p>在本教程中，我们将探索在Java中实现此目的的四种不同方法。</p>
<h2>使用正则表达式和String的replaceAll()方法</h2>
<p>最简单的方法是使用String类的内置replaceAll()方法。它替换文本中匹配所提供正则表达式的每个部分为指定的替换内容。</p>
<p>replaceAll()方法接受两个参数：正则表达式和替换内容。</p>
<p>因此，如果我们<strong>将相关的正则表达式和一个空字符串作为替换参数传递给该方法</strong>，我们就可以达成我们的目的。</p>`,r:{minutes:3.78,words:1134},t:"在字符串中仅保留数字和小数点",y:"a"}}],["/posts/baeldung/2024-07-12/2024-07-12-Slicing%20Arrays%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-12-Slicing Arrays in Java.html-DjMX5fHN.js"),__vite__mapDeps([860,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Arrays"],g:["Java","Arrays","Subarray"],e:`
<h2>1. 概述</h2>
<p>我们知道Java的_List_有一个_subList()_方法，它允许我们切分源_List_对象。然而，在数组方面并没有标准的_subArray()_方法。</p>
<p>在本教程中，让我们探索如何在Java中获取给定数组的子数组。</p>
<h2>2. 问题介绍</h2>
<p>像往常一样，让我们通过一个例子来理解问题。假设我们有一个字符串数组：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">LANGUAGES</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">"Python"</span><span class="token punctuation">,</span> <span class="token string">"Java"</span><span class="token punctuation">,</span> <span class="token string">"Kotlin"</span><span class="token punctuation">,</span> <span class="token string">"Scala"</span><span class="token punctuation">,</span> <span class="token string">"Ruby"</span><span class="token punctuation">,</span> <span class="token string">"Go"</span><span class="token punctuation">,</span> <span class="token string">"Rust"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:4.74,words:1422},t:"Java中数组切片",y:"a"}}],["/posts/baeldung/2024-07-12/2024-07-12-Sort%20Collection%20of%20Objects%20by%20Multiple%20Fields%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-12-Sort Collection of Objects by Multiple Fields in Java.html-Bdh7VuMP.js"),__vite__mapDeps([861,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","编程"],g:["Java","排序","集合"],e:`
<h2>1. 概述</h2>
<p>在编程中，我们经常需要对对象集合进行排序。如果我们想要根据多个字段对对象进行排序，排序逻辑有时可能变得难以实现。在本教程中，我们将讨论这个问题的几种不同方法，以及它们的优缺点。</p>
<h2>2. 示例_Person_类</h2>
<p>让我们定义一个_Person_类，它包含两个字段，<em>name_和_age</em>。在我们的示例中，我们将首先根据_name_然后根据_age_比较_Person_对象：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Nonnull</span> <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>

    <span class="token comment">// 构造函数</span>
    <span class="token comment">// getter和setter</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:4.25,words:1276},t:"Java中按多个字段对对象集合进行排序 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-12/2024-07-12-Spring%20%20EnableMethodSecurity%20Annotation.html",{loader:()=>a(()=>import("./2024-07-12-Spring  EnableMethodSecurity Annotation.html-BRDmgV1i.js"),__vite__mapDeps([862,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Security","Method Security"],g:["Spring","Security","Method Security"],e:`
<p>如果您正在使用Spring Security（特别是OAuth）实现，一定要看看《学习Spring安全》课程。</p>
<p><strong>&gt;&gt; 学习Spring</strong>
<strong>安全</strong></p>
<h2>1. 概述</h2>
<p>使用Spring Security，我们可以为应用程序的方法配置身份验证和授权，例如我们的端点。例如，如果用户在我们的域上有身份验证，我们可以通过对现有方法应用限制来分析他使用应用程序的情况。</p>
<p>使用@EnableGlobalMethodSecurity注解一直是一种标准做法，直到5.6版本，@EnableMethodSecurity引入了一种更灵活的方法安全配置方式。</p>`,r:{minutes:4.74,words:1422},t:"Spring @EnableMethodSecurity 注解 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-12/2024-07-12-SpringRunner%20vs%20MockitoJUnitRunner.html",{loader:()=>a(()=>import("./2024-07-12-SpringRunner vs MockitoJUnitRunner.html-DMY4LdAM.js"),__vite__mapDeps([863,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring","JUnit"],g:["SpringRunner","MockitoJUnitRunner"],e:`
<p>JUnit是Java中最受欢迎的单元测试框架之一。此外，Spring Boot将其作为其应用程序的默认测试依赖项提供。</p>
<p>在本教程中，我们将比较两种JUnit runner——SpringRunner和MockitoJUnitRunner。我们将理解它们的目的以及它们之间的关键区别。</p>
<h2>2. @RunWith与@ExtendWith</h2>
<p>在我们进一步讨论之前，让我们回顾一下我们如何扩展JUnit的基本功能或将其与其他库集成。</p>
<p><strong>JUnit 4允许我们实现自定义Runner类</strong>，通过应用额外的功能来负责运行测试。要调用自定义runner，我们使用@RunWith注解来注解测试类：</p>`,r:{minutes:5.91,words:1774},t:"SpringRunner与MockitoJUnitRunner的比较",y:"a"}}],["/posts/baeldung/2024-07-12/2024-07-12-Strong%20%20Weak%20%20Soft%20%20and%20Phantom%20References%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-12-Strong  Weak  Soft  and Phantom References in Java.html-BRv4TMrr.js"),__vite__mapDeps([864,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Reference Types"],g:["Java","Soft Reference","Weak Reference","Phantom Reference"],e:'\n<p>当我们用Java编程时，我们经常使用硬引用，通常甚至不会考虑它——这是一个很好的理由，因为它们是大多数情况下的最佳选择。然而，有时我们需要对垃圾回收器清理对象的时间有更多的控制。</p>\n<p>在本文中，我们将探讨硬引用和各种非硬引用类型之间的区别，以及我们何时可以使用它们。</p>\n<h2>2. 硬引用</h2>\n<p>硬引用（或强引用）是默认类型的引用，我们大多数时候甚至不会考虑引用对象何时以及如何被垃圾回收。假设我们创建了一个_ArrayList_对象并将其分配给_list_变量：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>``` list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div>',r:{minutes:4.2,words:1260},t:"Java中的强引用、弱引用、软引用和虚引用",y:"a"}}],["/posts/baeldung/2024-07-12/2024-07-12-The%20Factory%20Design%20Pattern%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-12-The Factory Design Pattern in Java.html-KPi-rQ4m.js"),__vite__mapDeps([865,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Java","设计模式"],g:["工厂模式","设计模式"],e:`
<p>在本教程中，我们将解释 Java 中的工厂设计模式。我们将描述两种模式，它们都是创建型设计模式：工厂方法和抽象工厂。然后我们将使用一个示例来说明这些模式。</p>
<h2>2. 工厂方法模式</h2>
<p>首先，我们需要定义一个示例。我们正在为一家汽车制造商开发一个应用程序。最初，我们只有一个客户端。这个客户端用纯燃油发动机制造汽车。因此，为了遵循单一职责原则（SRP）和开闭原则（OCP），我们将使用工厂方法设计模式。</p>
<p>在我们深入代码之前，我们将为这个模式定义一个默认的 UML 图：</p>
<figure><img src="https://www.baeldung.com/wp-content/uploads/2022/11/factory_design_pattern_base.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>`,r:{minutes:5.21,words:1564},t:"Java 中的工厂设计模式",y:"a"}}],["/posts/baeldung/2024-07-12/2024-07-12-The%20Visitor%20Pattern%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-12-The Visitor Pattern in Kotlin.html-B4ZjML6H.js"),__vite__mapDeps([866,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin","Design Patterns"],g:["Visitor Pattern","Kotlin"],e:`
<p>设计模式是软件开发中的一个重要概念，用于解决反复出现的问题。访问者模式正是这些模式之一。我们使用它来将算法与它操作的对象结构分离。当我们要向现有类添加新功能而无需修改它们的源代码时，这种模式特别有用。</p>
<p>在本教程中，我们将讨论访问者模式以及如何在Kotlin中实现它。</p>
<h2>定义</h2>
<p>根据定义，访问者设计模式是一种行为设计模式，它允许我们向现有类添加新操作，而无需修改其结构。<strong>当我们拥有一个复杂的对象结构并希望在该结构上执行不同的操作时，我们会使用这种模式。</strong></p>
<p>此外，这种模式定义了两个主要组件：<em>访问者_和_可访问的</em>。<em>访问者_负责定义一个接口，其中包含每个_可访问的_对象的_visit_方法，而_可访问的_负责接受_访问者</em>。这通常是通过一个_accept_方法完成的。</p>`,r:{minutes:4.62,words:1387},t:"Kotlin中的访问者模式",y:"a"}}],["/posts/baeldung/2024-07-12/2024-07-12-Thread%20vs.%20Single%20Thread%20Executor%20Service.html",{loader:()=>a(()=>import("./2024-07-12-Thread vs. Single Thread Executor Service.html-Bdzbe4-s.js"),__vite__mapDeps([867,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Concurrency"],g:["Thread","ExecutorService"],e:`
<p>线程和执行器框架是Java中用于并行执行代码的两种机制。这提高了应用程序的性能。执行器框架提供了不同类型的线程池。其中一种池只包含一个工作线程。</p>
<p>在本教程中，<strong>我们将学习线程和具有单个工作线程的执行器服务之间的区别。</strong></p>
<p>线程是一个轻量级进程，具有独立的执行路径。它用于并行执行任务。因此，可以同时运行多个线程而互不干扰。</p>
<p>一个_Thread_对象执行_Runnable_任务。</p>
<p>让我们看看如何创建线程。<strong>我们可以通过</strong>扩展_Thread类_或实现_Runnable_接口来创建线程。**</p>`,r:{minutes:5.12,words:1536},t:"Java中单线程与单线程执行器服务的比较",y:"a"}}],["/posts/baeldung/2024-07-12/2024-07-12-Uses%20for%20Optional%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-12-Uses for Optional in Java.html-CPJh1nZA.js"),__vite__mapDeps([868,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Optional"],g:["Java","Optional","API"],e:`
<p>在本教程中，我们将探讨Java中_Optional_类的目的以及在构建应用程序时使用它的一些优势。</p>
<h2>2. Java中_Optional<code>&lt;T&gt;</code>_的目的</h2>
<p>_Optional_类是一个表示某物存在或不存在的类。从技术上讲，<em>Optional_是一个泛型类型_T_的包装类，如果_T_为_null</em>，则_Optional_实例为空。否则，它是满的。</p>
<p>根据Java 11文档，<em>Optional_的**目的是在返回类型中提供一个可以表示值缺失的场景，其中返回_null_可能会导致意外的错误，**比如著名的_NullPointerException</em>。</p>`,r:{minutes:6.2,words:1860},t:"Java中Optional类的用途",y:"a"}}],["/posts/baeldung/2024-07-12/2024-07-12-Working%20with%20Tabular%20Data%20Using%20Tablesaw.html",{loader:()=>a(()=>import("./2024-07-12-Working with Tabular Data Using Tablesaw.html-DXRjMtLT.js"),__vite__mapDeps([869,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Tablesaw"],g:["Java","Tablesaw","数据库","数据分析"],e:`
<h2>1. 引言</h2>
<p>在本文中，我们将学习如何使用Tablesaw库来处理表格数据。首先，我们将导入一些数据。然后，我们将通过操作数据来获得一些见解。</p>
<p>我们将使用鳄梨价格数据集。简而言之，它包含了美国多个市场鳄梨价格和销售量的的历史数据。</p>
<h2>2. 在Tablesaw中导入数据</h2>
<p>首先，我们需要导入数据。Tablesaw支持包括CSV在内的多种格式，我们数据集的格式就是CSV。因此，让我们从CSV文件加载数据集开始：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">CsvReadOptions</span> csvReadOptions <span class="token operator">=</span>
    <span class="token class-name">CsvReadOptions</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">separator</span><span class="token punctuation">(</span><span class="token char">','</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">dateFormat</span><span class="token punctuation">(</span>formatter<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
table <span class="token operator">=</span> <span class="token class-name">Table</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">usingOptions</span><span class="token punctuation">(</span>csvReadOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:8.25,words:2475},t:"使用Tablesaw库处理表格数据",y:"a"}}],["/posts/baeldung/2024-07-13/2024-07-13-Capitalize%20the%20First%20Letter%20of%20a%20String%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-13-Capitalize the First Letter of a String in Java.html-B2PNA7uI.js"),__vite__mapDeps([870,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","String Manipulation"],g:["Java","String","Capitalize"],e:`<hr>
<h1>Java中将字符串首字母大写的几种方法</h1>
<h2>1. 概述</h2>
<p>Java标准库提供了_String.toUpperCase()_方法，允许我们将字符串中的所有字母转换为大写。</p>
<p>在本教程中，我们将学习如何仅将给定字符串的第一个字符转换为大写。</p>
<h2>2. 问题介绍</h2>
<p>一个示例可以快速解释这个问题。假设我们有一个输入字符串：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>String INPUT = "hi there, Nice to Meet You!";
</code></pre></div>`,r:{minutes:3.96,words:1189},t:"Java中将字符串首字母大写的几种方法",y:"a"}}],["/posts/baeldung/2024-07-13/2024-07-13-Channels%20and%20Connections%20in%20RabbitMQ.html",{loader:()=>a(()=>import("./2024-07-13-Channels and Connections in RabbitMQ.html-CWByz16-.js"),__vite__mapDeps([871,1])),meta:{d:16645824e5,l:"2022年10月1日",c:["RabbitMQ","Java"],g:["Channels","Connections"],e:`
<h2>1. 引言</h2>
<p>在本快速教程中，我们将展示如何使用与RabbitMQ相关的API，涉及两个核心概念：连接和通道。</p>
<h2>2. RabbitMQ快速回顾</h2>
<p>RabbitMQ是AMQP（高级消息队列协议）的流行实现，被各种规模的公司广泛用于处理其消息需求。</p>
<p>从应用程序的角度来看，我们通常关心AMQP的主要实体：虚拟主机、交换机和队列。由于我们已在早期文章中涵盖了这些概念，<strong>这里，我们将专注于两个较少讨论的概念的细节：连接和通道。</strong></p>
<p>客户端与RabbitMQ代理交互的第一步是建立连接。AMPQ是一个应用层协议，因此这种连接是在传输层协议之上发生的。这可以是常规的TCP连接或使用TLS加密的连接。连接的主要作用是提供一个安全的通道，通过这个通道客户端可以与代理交互。</p>`,r:{minutes:8.74,words:2623},t:"RabbitMQ中的通道和连接 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-13/2024-07-13-Comparison%20Between%20Mono%20s%20doOnNext%20%20%20and%20doOnSuccess%20%20.html",{loader:()=>a(()=>import("./2024-07-13-Comparison Between Mono s doOnNext   and doOnSuccess  .html-Bb1gs5HD.js"),__vite__mapDeps([872,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring WebFlux","Reactive Programming"],g:["Mono","doOnNext","doOnSuccess"],e:`
<p>在这篇简短的教程中，我们将探索 Spring 5 WebFlux 中的 Mono 对象的各种监听器。我们将比较 doOnNext() 和 doOnSuccess() 方法，并发现尽管它们相似，但对于空的 Mono，它们的行为是不同的。</p>
<p><strong>Mono 的 doOnNext() 允许我们附加一个监听器，当数据被发出时会被触发。</strong> 在本文的代码示例中，我们将使用 PaymentService 类。在这种情况下，我们只有在 paymentMono 发出数据时，使用 doOnNext() 调用 processPayment 方法：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenAPaymentMono_whenCallingServiceOnNext_thenCallServiceWithPayment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Payment</span> paymentOf100 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Payment</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Mono</span>\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">&gt;</span></span>\`\`\`\` paymentMono <span class="token operator">=</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>paymentOf100<span class="token punctuation">)</span><span class="token punctuation">;</span>

    paymentMono<span class="token punctuation">.</span><span class="token function">doOnNext</span><span class="token punctuation">(</span>paymentService<span class="token operator">::</span><span class="token function">processPayment</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">verify</span><span class="token punctuation">(</span>paymentService<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">processPayment</span><span class="token punctuation">(</span>paymentOf100<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.61,words:484},t:"Spring 5 WebFlux 中的 Mono 的 doOnNext() 和 doOnSuccess() 比较",y:"a"}}],["/posts/baeldung/2024-07-13/2024-07-13-Convert%20String%20to%20String%20Array.html",{loader:()=>a(()=>import("./2024-07-13-Convert String to String Array.html-DkLXXVCS.js"),__vite__mapDeps([873,1])),meta:{d:17208288e5,l:"2024年7月13日",c:["Java","String"],g:["Java","String Array"],e:`<hr>
<h1>Java中将字符串转换为字符串数组</h1>
<p>在本教程中，我们将探讨如何在Java中将<code>String</code>转换为<code>String</code>数组（<code>String[]</code>）。</p>
<h2>2. 问题介绍</h2>
<p>将字符串转换为字符串数组可能有两种场景：</p>
<ul>
<li>将字符串转换为单例数组（只有一个元素的数组）</li>
<li>根据特定规则将字符串拆分为数组元素</li>
</ul>
<p>第一种情况相对容易理解。例如，如果我们有一个字符串<code>"baeldung"</code>，我们想将其转换为<code>String[]{ "baeldung" }</code>。换句话说，<strong>转换后的数组只有一个元素，即输入字符串本身</strong>。</p>`,r:{minutes:4.75,words:1425},t:"Java中将字符串转换为字符串数组",y:"a"}}],["/posts/baeldung/2024-07-13/2024-07-13-Convert%20String%20to%20char%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-13-Convert String to char in Java.html-CP4Mmqxa.js"),__vite__mapDeps([874,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","String"],g:["Java","String","char"],e:`<hr>
<h1>Java中将字符串转换为字符的教程</h1>
<h2>1. 概述</h2>
<p>字符串是Java中常见的数据类型，而字符（char）是Java的基本数据类型。</p>
<p>在本教程中，我们将探讨如何在Java中将字符串对象转换为字符。</p>
<h2>2. 问题介绍</h2>
<p>我们知道，字符（char）只能包含一个单一的字符。然而，字符串对象可以包含多个字符。</p>
<p>因此，我们的教程将涵盖两种情况：</p>
<ul>
<li>源字符串是单个字符。</li>
<li>源字符串是多个字符。</li>
</ul>
<p>对于第一种情况，我们可以很容易地将单个字符的字符串转换为字符。例如，假设这是我们的输入：</p>`,r:{minutes:3.66,words:1098},t:"Java中将字符串转换为字符的教程",y:"a"}}],["/posts/baeldung/2024-07-13/2024-07-13-Counting%20Occurrences%20of%20a%20Value%20in%20a%20List%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-13-Counting Occurrences of a Value in a List in Kotlin.html-DvqUJ78B.js"),__vite__mapDeps([875,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin","Programming"],g:["Kotlin","List","Count Occurrences"],e:`<hr>
<h1>Kotlin中统计列表中值的出现次数</h1>
<p>在Kotlin中，_List_是一个具有特定顺序的元素集合。有时，我们可能需要找出列表中某个特定元素出现的次数。这在识别重复项或统计特定列表元素的频率等情况下非常有用。</p>
<p>在本教程中，我们将探讨在Kotlin中完成这项任务的几种方法。</p>
<h2>2. 使用_for()_循环</h2>
<p>使用传统的_for()_循环来找出列表中某个特定值出现的次数是一种直接的方法。我们遍历列表中的元素，并跟踪值在列表中的出现次数：</p>
<div class="language-kotlin" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">findRepeatedValuesUsingForLoop</span><span class="token punctuation">(</span>value<span class="token operator">:</span> Int<span class="token punctuation">,</span> list<span class="token operator">:</span> List\`\`\`\`<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span>\`\`\`\`<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>
    <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">0</span> until list<span class="token punctuation">.</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            count<span class="token operator">++</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> count
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:6.55,words:1965},t:"Kotlin中统计列表中值的出现次数",y:"a"}}],["/posts/baeldung/2024-07-13/2024-07-13-Coupling%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-13-Coupling in Java.html-kBN7OplT.js"),__vite__mapDeps([876,1])),meta:{d:16648416e5,l:"2022年10月4日",c:["Java","Software Development"],g:["Coupling","Design Patterns","Inversion of Control"],e:`
<h2>1. 引言</h2>
<p>在本教程中，我们将学习Java中的耦合，包括每种类型的类型和描述。最后，我们简要描述了依赖倒置原则和控制反转以及它们与耦合的关系。</p>
<p>当我们谈论耦合时，我们描述的是系统中类彼此依赖的程度。我们在开发过程中的目标是减少耦合。</p>
<p>考虑以下场景。我们正在设计一个元数据收集应用程序。这个应用程序为我们收集元数据。它以XML格式获取元数据，然后将获取的元数据导出到CSV文件，仅此而已。我们最初的方法可能是，正如我们所看到的那样：</p>
<figure><img src="https://www.baeldung.com/wp-content/uploads/2022/10/start-01.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>`,r:{minutes:5.83,words:1750},t:"Java中的耦合 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-13/2024-07-13-Creating%20a%20Map%20from%20Two%20Arrays%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-13-Creating a Map from Two Arrays in Kotlin.html-tqhxscfN.js"),__vite__mapDeps([877,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin"],g:["Map","Arrays"],e:`
<p>在Kotlin中，一个_Map_是一个键值对集合，每个键都是唯一的。我们可以通过使用键作为索引来访问与键关联的值。当然，我们可能会遇到需要从两个数组创建一个map的情况。简单来说，我们使用一个数组的值作为map的键，另一个数组的值作为map的值。</p>
<p>在本教程中，我们将探索在Kotlin中从两个数组创建map的各种方法。</p>
<h2>2. 假设</h2>
<p>为了有效地从两个数组创建一个map，我们需要强调一些假设和边缘情况，这些将指导我们很快要查看的解决方案：</p>
<ul>
<li>我们应该期望我们讨论的两个数组长度相同。</li>
<li>第一个数组包含键，第二个数组包含相应的值。</li>
<li>构成map键的数组包含唯一元素。如果遇到重复元素，map中的最新键将覆盖具有相同键的先前条目。</li>
</ul>`,r:{minutes:4.41,words:1323},t:"Kotlin中从两个数组创建Map的多种方法",y:"a"}}],["/posts/baeldung/2024-07-13/2024-07-13-Dealing%20with%20%20java.lang.OutOfMemoryError%20%20PermGen%20space%20%20Error.html",{loader:()=>a(()=>import("./2024-07-13-Dealing with  java.lang.OutOfMemoryError  PermGen space  Error.html-Wtwp8Req.js"),__vite__mapDeps([878,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","JVM"],g:["PermGen","OutOfMemoryError"],e:`
<p>Java应用程序以其启动缓慢和预热时间长而闻名。OpenJDK的CRaC（检查点协调恢复）项目可以通过<strong>创建应用程序峰值性能的检查点</strong>并恢复JVM实例到该点来帮助改善这些问题。</p>
<p>为了充分利用这一特性，BellSoft提供了高度优化的Java应用程序容器。这些容器打包了Alpaquita Linux（一个为Java和云环境优化的全功能操作系统）和Liberica JDK（基于OpenJDK的开源Java运行时）。</p>
<p>这些即用型映像使我们能够轻松地在Spring Boot应用程序中<strong>集成CRaC</strong>：</p>`,r:{minutes:4.3,words:1291},t:"解决“java.lang.OutOfMemoryError: PermGen space”错误",y:"a"}}],["/posts/baeldung/2024-07-13/2024-07-13-Difference%20Between%20Flux%20and%20Mono.html",{loader:()=>a(()=>import("./2024-07-13-Difference Between Flux and Mono.html-_UwBEp3B.js"),__vite__mapDeps([879,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Reactor"],g:["Mono","Flux"],e:`
<p>在本教程中，我们将学习 Reactor 核心库中 Flux 和 Mono 的区别。</p>
<h2>2. Mono 是什么？</h2>
<p>Mono 是一种特殊的 Publisher。<strong>Mono 对象表示单个或空值</strong>。这意味着它最多只能为 onNext() 请求发出一个值，然后以 onComplete() 信号终止。如果出现故障，它只发出一个 onError() 信号。</p>
<p>让我们看一个带有完成信号的 Mono 示例：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenMonoPublisher_whenSubscribeThenReturnSingleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Mono</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>\`\`\` helloMono <span class="token operator">=</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">StepVerifier</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>helloMono<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">expectNext</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">expectComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.7,words:511},t:"Reactor 核心库中的 Flux 和 Mono 的区别",y:"a"}}],["/posts/baeldung/2024-07-13/2024-07-13-Difference%20Between%20Java%20Enumeration%20and%20Iterator.html",{loader:()=>a(()=>import("./2024-07-13-Difference Between Java Enumeration and Iterator.html-DbLzwFeh.js"),__vite__mapDeps([880,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java"],g:["Enumeration","Iterator"],e:'\n<p>在本教程中，我们将学习Java中的_Enumeration_和_Iterator_。我们还将了解如何在代码中使用它们以及它们之间的差异。</p>\n<h3>2.1. <em>Enumeration</em></h3>\n<p>_Enumeration_自Java 1.0版本以来就存在。它是一个接口，任何实现都<strong>允许逐个访问元素</strong>。简单来说，它用于迭代诸如_Vector_和_Hashtable_的对象集合。</p>\n<p>让我们看一个_Enumeration_的例子：</p>\n<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>Vector````&lt;Person&gt;```` people = new Vector&lt;&gt;(getPersons());\nEnumeration````&lt;Person&gt;```` enumeration = people.elements();\nwhile (enumeration.hasMoreElements()) {\n    System.out.println("First Name = " + enumeration.nextElement().getFirstName());\n}\n</code></pre></div>',r:{minutes:1.81,words:543},t:"Java中的枚举与迭代器的区别 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-13/2024-07-13-Difference%20Between%20Map%20and%20MultivaluedMap%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-13-Difference Between Map and MultivaluedMap in Java.html-C1Sv9ef1.js"),__vite__mapDeps([881,1])),meta:{d:17208288e5,l:"2024年7月13日",c:["Java"],g:["Map","MultivaluedMap"],e:`
<p>在本教程中，我们将学习Java中Map和MultivaluedMap的区别。但在此之前，让我们看一些例子。</p>
<h3>2. Map的例子</h3>
<p>HashMap实现了Map接口，并且它也允许null值和null键：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenHashMap_whenEquals_thenTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Map</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>\`\` map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 将键值对放入我们的map中。</span>
    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"third"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 断言语句。最后一个参数是如果断言失败将打印的内容。</span>
    <span class="token function">assertNotNull</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> <span class="token string">"The HashMap is null!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"The key isn't mapped to the right value!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"HashMap didn't accept null as key!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"third"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"HashMap didn't accept null value!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.55,words:764},t:"Java中Map和MultivaluedMap的区别",y:"a"}}],["/posts/baeldung/2024-07-13/2024-07-13-Difference%20Between%20URI.create%20%20%20and%20new%20URI%20%20.html",{loader:()=>a(()=>import("./2024-07-13-Difference Between URI.create   and new URI  .html-DpMdm3kJ.js"),__vite__mapDeps([882,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java"],g:["URI","Java"],e:`
<p>当我们尝试访问网络中的某些资源时，我们首先必须获取资源的统一资源标识符（URI）。Java 标准库提供了 URI 类，使我们更容易处理 URI。当然，要使用 URI 类，第一步是获取一个 URI 实例。</p>
<p>假设我们有某个网络资源的地址字符串。有两种方法可以获得一个 URI 实例：</p>
<ul>
<li>直接使用地址字符串调用构造函数 - <code>URI myUri = new URI(theAddress);</code></li>
<li>调用 <code>URI.create()</code> 静态方法 - <code>URI myUri = URI.create(theAddress);</code></li>
</ul>`,r:{minutes:2.75,words:826},t:"URI.create() 与 new URI() 的区别 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-13/2024-07-13-Difference%20Between%20Value%20and%20Emit%20in%20MutableStateFlow%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-13-Difference Between Value and Emit in MutableStateFlow Kotlin.html-D1GhO4jE.js"),__vite__mapDeps([883,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin"],g:["MutableStateFlow","value","emit"],e:`
<p>Kotlin的_Flow_ API通过提供一种强大而简洁的方式来处理数据流，彻底改变了异步编程。这个API的一个关键组件是_MutableStateFlow_，这是一个可变状态持有者，它向其收集器发出值。然而，当开发者在_MutableStateFlow_的上下文中遇到_value_属性和_emit()_函数时，常常会感到困惑。</p>
<p>在本教程中，我们将深入探讨_value_和_emit()_之间的区别。</p>
<h3>2. 理解_MutableStateFlow_</h3>
<p>在深入探讨差异之前，让我们快速回顾一下_MutableStateFlow_是什么。<em>MutableStateFlow_是一种特殊的_Flow</em>，它表示一个可变的值。<strong>它持有一个当前值，并允许收集器在值改变时接收更新</strong>。具体来说，我们可以创建具有起始值的新实例：</p>`,r:{minutes:3.61,words:1084},t:"Kotlin中MutableStateFlow的value属性与emit()函数的区别 | Baeldung关于Kotlin",y:"a"}}],["/posts/baeldung/2024-07-13/2024-07-13-Editing%20Existing%20PDF%20Files%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-13-Editing Existing PDF Files in Java.html-BAQrPvTP.js"),__vite__mapDeps([884,1])),meta:{d:16645824e5,l:"2022年10月1日",c:["Java","PDF"],g:["iText7","PDF编辑"],e:'\n<p>在这篇文章中，我们将看到如何在Java中编辑现有PDF文件的内容。首先，我们将只添加新内容。然后，我们将专注于移除或替换一些现有的内容。</p>\n<h2>2. 添加iText7依赖</h2>\n<p><strong>我们将使用iText7库来向PDF文件添加内容。</strong> 稍后，我们将使用pdfSweep插件来移除或替换内容。</p>\n<p><strong>请注意，iText是在AGPL许可下授权的，这可能会限制商业应用程序的分发：iText许可模型。</strong></p>\n<p>首先，让我们将这些依赖项添加到我们的_pom.xml_中：</p>\n<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>``&lt;dependency&gt;``\n    ``&lt;groupId&gt;``com.itextpdf``&lt;/groupId&gt;``\n    ``&lt;artifactId&gt;``itext7-core``&lt;/artifactId&gt;``\n    ``&lt;version&gt;``7.2.3``&lt;/version&gt;``\n    `&lt;type&gt;`pom`&lt;/type&gt;`\n``&lt;/dependency&gt;``\n``&lt;dependency&gt;``\n    ``&lt;groupId&gt;``com.itextpdf``&lt;/groupId&gt;``\n    ``&lt;artifactId&gt;``cleanup``&lt;/artifactId&gt;``\n    ``&lt;version&gt;``3.0.1``&lt;/version&gt;``\n``&lt;/dependency&gt;``\n</code></pre></div>',r:{minutes:7.75,words:2324},t:"Java中编辑现有PDF文件",y:"a"}}],["/posts/baeldung/2024-07-13/2024-07-13-Fixing%20the%20%20java%20%20integer%20number%20too%20large%20%20Error.html",{loader:()=>a(()=>import("./2024-07-13-Fixing the  java  integer number too large  Error.html-wN26F-rE.js"),__vite__mapDeps([885,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java"],g:["Java","Error"],e:`
<p>Java使用32位内存来存储_Integer_。因此，<em>Integer</em>（或_int_）的范围是从-231（-2,147,483,648）到231-1（2,147,483,647）。因此，当我们看到像“<em>java: integer number too large …</em>”这样的错误消息时，我们通常可以很容易地找到问题并修复它。</p>
<p>然而，在某些情况下，当我们看到这个错误消息时，我们可能不明白为什么会出现这个错误。而且，解决这个问题可能需要一些时间。</p>
<p>所以，在本教程中，<strong>我们将更仔细地看看导致这个错误的几个陷阱，并解决错误背后的原因。</strong></p>`,r:{minutes:3.69,words:1107},t:"解决“java: 整数数字太大”错误",y:"a"}}],["/posts/baeldung/2024-07-13/2024-07-13-Gravity%20Bead%20Sort%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-13-Gravity Bead Sort in Java.html-CqgCxKuz.js"),__vite__mapDeps([886,1])),meta:{d:16650144e5,l:"2022年10月6日",c:["Java","Algorithms"],g:["Gravity Sort","Bead Sort"],e:`
<p>在本教程中，我们将讨论重力排序算法及其在Java中的单线程实现。</p>
<h2>2. 算法</h2>
<p>重力排序是一种受自然事件启发的自然排序算法——在这种情况下，是重力的作用。也称为珠子排序，<strong>该算法通过模拟重力来对正整数列表进行排序</strong>。</p>
<p>算法的思想是使用珠子在垂直杆和水平层上表示正整数——类似于算盘，只是每个层级代表输入列表中的一个数字。下一步是将珠子掉落到它们可能的最低位置，这将导致算盘上的数字以升序排列：</p>
<p>例如，以下是对输入列表[4, 2]进行排序的过程：</p>
<figure><img src="https://www.baeldung.com/wp-content/uploads/2022/10/1_Gravity-Sort-in-Java-Diagram-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>`,r:{minutes:6.68,words:2003},t:"Java中的重力/珠子排序算法",y:"a"}}],["/posts/baeldung/2024-07-13/2024-07-13-Guide%20to%20Resilience4j%20With%20Spring%20Boot.html",{loader:()=>a(()=>import("./2024-07-13-Guide to Resilience4j With Spring Boot.html-BkMx1fd-.js"),__vite__mapDeps([887,1])),meta:{d:17208288e5,l:"2024年7月13日",c:["Spring Boot","Resilience4j"],g:["Spring Boot","Resilience4j","容错","断路器","重试"],e:`
<p>Resilience4j 是一个轻量级的容错库，它为 web 应用程序提供了多种容错和稳定性模式。</p>
<p>在本教程中，我们将<strong>学习如何将这个库与一个简单的 Spring Boot 应用程序一起使用</strong>。</p>
<h2>2. 搭建环境</h2>
<p>在这一部分，我们将专注于<strong>为我们的 Spring Boot 项目设置关键方面</strong>。</p>
<h3>2.1. Maven 依赖</h3>
<p>首先，我们需要添加 <em>spring-boot-starter-web</em> 依赖来引导一个简单的 web 应用程序：</p>`,r:{minutes:8.28,words:2485},t:"Resilience4j 在 Spring Boot 中的使用指南",y:"a"}}],["/posts/baeldung/2024-07-13/2024-07-13-Guide%20to%20Simple%20Binary%20Encoding.html",{loader:()=>a(()=>import("./2024-07-13-Guide to Simple Binary Encoding.html-Bbhy6o46.js"),__vite__mapDeps([888,1])),meta:{d:16645824e5,l:"2022年10月1日",c:["Java","SBE"],g:["Simple Binary Encoding","Java编码"],e:`
<p>效率和性能是现代数据服务的两个重要方面，尤其是当我们流式传输大量数据时。当然，通过高效的编码来减小消息大小是实现这一目标的关键。</p>
<p>然而，自行开发的编码/解码算法可能既繁琐又脆弱，这使得它们在长期维护中变得困难。</p>
<p>幸运的是，Simple Binary Encoding（SBE）可以帮助我们以实际的方式实现和维护一个量身定制的编码/解码系统。</p>
<p>在本教程中，我们将讨论Simple Binary Encoding（SBE）是什么以及如何使用它，以及代码示例。</p>
<h2>2. SBE 是什么？</h2>
<p>SBE 是一种二进制表示，用于编码/解码消息以支持低延迟流式传输。它也是FIX SBE标准的参考实现，这是金融数据编码的标准。</p>`,r:{minutes:6.77,words:2031},t:"Simple Binary Encoding 指南",y:"a"}}],["/posts/baeldung/2024-07-13/2024-07-13-How%20to%20Access%20the%20First%20Element%20of%20a%20Flux.html",{loader:()=>a(()=>import("./2024-07-13-How to Access the First Element of a Flux.html-C2c_NDCa.js"),__vite__mapDeps([889,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","WebFlux"],g:["Spring","Reactive Programming"],e:`
<p>在本教程中，我们将探索使用Spring 5 WebFlux访问Flux的第一个元素的多种方法。</p>
<p>首先，我们将使用API的非阻塞方法，如next()和take()。之后，我们将看到如何使用elementAt()方法，我们需要指定索引来实现相同的目标。</p>
<p>最后，我们将学习API的阻塞方法，并使用blockFirst()来访问flux的第一个元素。</p>
<h2>2. 测试设置</h2>
<p>在本文的代码示例中，我们将使用Payment类，该类只有一个字段，即支付金额：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Payment</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> amount<span class="token punctuation">;</span>
    <span class="token comment">// 构造函数和getter</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.56,words:768},t:"如何访问Flux的第一个元素",y:"a"}}],["/posts/baeldung/2024-07-13/2024-07-13-How%20to%20Log%20to%20the%20Console%20in%20Color.html",{loader:()=>a(()=>import("./2024-07-13-How to Log to the Console in Color.html-CS3piFw1.js"),__vite__mapDeps([890,1])),meta:{d:17208288e5,l:"2024年7月13日",c:["Java","Logging"],g:["ANSI","Color","Console"],e:`<ul>
<li></li>
</ul>
<h1>如何在控制台中以彩色记录日志</h1>
<p>添加一些颜色可以使日志记录更容易阅读。</p>
<p>在本文中，我们将看到如何为我们的日志添加颜色，适用于Visual Studio Code终端、Linux和Windows命令提示符等控制台。</p>
<p>在我们开始之前，让我们注意，遗憾的是，Eclipse IDE控制台中的颜色设置非常有限。Eclipse IDE内的控制台不支持由Java代码确定的颜色，因此<strong>本文中介绍的解决方案在Eclipse IDE控制台中将不起作用。</strong></p>
<h3>如何使用ANSI代码为日志着色</h3>`,r:{minutes:3.99,words:1198},t:"如何在控制台中以彩色记录日志",y:"a"}}],["/posts/baeldung/2024-07-13/2024-07-13-How%20to%20Resolve%20Spring%20Webflux%20DataBufferLimitException.html",{loader:()=>a(()=>import("./2024-07-13-How to Resolve Spring Webflux DataBufferLimitException.html-bZXDutb_.js"),__vite__mapDeps([891,1])),meta:{d:17208288e5,l:"2024年7月13日",c:["Spring Webflux","DataBufferLimitException"],g:["WebFlux","Reactive Programming"],e:`
<p>在本教程中，我们将探讨为什么在Spring Webflux应用程序中可能会出现_DataBufferLimitException_，并查看解决此问题的不同方法。</p>
<h3>2.1. 什么是_DataBufferLimitException?_</h3>
<p>Spring WebFlux限制了在编解码器中的内存缓冲数据量，以避免应用程序内存问题。<strong>默认情况下，这个配置设置为262,144字节</strong>。当这不足以满足我们的用例时，我们将遇到_DataBufferLimitException_。</p>
<h3>2.2. 什么是_编解码器（Codec）?_</h3>`,r:{minutes:3,words:901},t:"如何解决Spring Webflux中的DataBufferLimitException",y:"a"}}],["/posts/baeldung/2024-07-13/2024-07-13-Implementing%20Factory%20Pattern%20With%20Generics%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-13-Implementing Factory Pattern With Generics in Java.html-_A2OZ-pw.js"),__vite__mapDeps([892,1])),meta:{d:16661376e5,l:"2022年10月19日",c:["Java","设计模式"],g:["工厂模式","Java泛型"],e:`
<p>在本教程中，我们将学习如何在Java中使用泛型来实现工厂模式。</p>
<h2>2. 什么是工厂模式？</h2>
<p>在面向对象编程中，工厂模式是一种创建型设计模式，当被调用时负责创建对象。</p>
<p><strong>工厂是一个类，它通过方法调用来创建原型类，即接口的对象：</strong></p>
<p>工厂模式非常适合我们想要创建一个公共接口的对象，同时隐藏创建逻辑。</p>
<h2>3. 如何实现？</h2>
<p>现在让我们学习如何实现它。首先，让我们看看类图：</p>
<p>接下来，让我们实现图中的每个类。</p>
<h3>3.1. 实现_Notifier_接口</h3>`,r:{minutes:2.14,words:642},t:"Java中使用泛型实现工厂模式",y:"a"}}],["/posts/baeldung/2024-07-13/2024-07-13-Infinity%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-13-Infinity in Java.html-BTre1EE1.js"),__vite__mapDeps([893,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java"],g:["Infinity","Java"],e:`<hr>
<h1>Java中的无穷大概念</h1>
<p>在本教程中，我们将探讨Java中的无穷大概念以及如何使用它。</p>
<h2>2. Java中的数字简介</h2>
<p>在数学中，我们有一组实数和一组整数。显然，这两组数字都是无限的，并且都包含正无穷和负无穷。</p>
<p>在计算机世界中，我们需要一个内存位置来存储这些集合的值，而这个位置必须是有限大小的，因为计算机的内存是有限的。</p>
<p><strong>对于Java中的_int_类型，不包括无穷大的概念。我们只能存储适合我们选择的内存位置的整数。</strong></p>
<p><strong>对于实数，我们也有正无穷或负无穷的概念。</strong> Java中的32位_float_类型和64位_double_类型都支持这一点。接下来，我们将使用_double_类型作为示例，因为它也是Java中用于实数的最常用类型，因为它具有更好的精度。</p>`,r:{minutes:3.33,words:999},t:"Java中的无穷大概念",y:"a"}}],["/posts/baeldung/2024-07-13/2024-07-13-Java%20Literals.html",{loader:()=>a(()=>import("./2024-07-13-Java Literals.html-GWaBtT1P.js"),__vite__mapDeps([894,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Programming"],g:["Java Literals","Programming"],e:`
<p>在Java编程语言中，我们会使用大量的字面量。</p>
<p>在本教程中，我们将查看所有类型的字面量以及如何使用它们。</p>
<h2>2. Java字面量是什么？</h2>
<p>**Java字面量是我们在代码中指定为常量值的任何值。**它可以是任何类型 - 整数、浮点数、双精度、长整型、字符串、字符或布尔值。</p>
<p>在以下示例中，数字_1_和字符串_literal_string_是字面量。</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"literal_string"</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:3.98,words:1193},t:"Java字面量",y:"a"}}],["/posts/baeldung/2024-07-13/2024-07-13-Kotlin%20Spring%20Developer%20to%20help%20with%20brainstorming%20topics%20for%20a%20site%20%20Remote%20%20%20Part%20Time%20.html",{loader:()=>a(()=>import("./2024-07-13-Kotlin Spring Developer to help with brainstorming topics for a site  Remote   Part Time .html-CdMLhyJT.js"),__vite__mapDeps([895,1])),meta:{d:17208288e5,l:"2024年7月13日",c:["Remote Jobs","Part-Time Jobs"],g:["Kotlin","Spring","Developer","Brainstorming"],e:`
<p><strong>此职位目前不开放。</strong></p>
<h3>关于我们</h3>
<p>Baeldung 是一家专注于编程领域的学习和媒体公司。我们是一支灵活的、完全远程的团队。</p>
<h3>职位描述</h3>
<p>我们正在寻找一位 Kotlin 开发者，协助我们为网站进行主题创意的头脑风暴。请注意，这里指的是 Kotlin 的服务器端开发，而不是 Android 开发。</p>
<p>您可以在这里查看我们之前发布的文章，了解<strong>我们发布主题的示例</strong>：https://www.baeldung.com/kotlin/full_archive</p>`,r:{minutes:1.21,words:364},t:"Kotlin/Spring 开发者协助网站主题创意（远程兼职 | Baeldung）",y:"a"}}],["/posts/baeldung/2024-07-13/2024-07-13-Limiting%20the%20Requests%20per%20Second%20With%20WebClient.html",{loader:()=>a(()=>import("./2024-07-13-Limiting the Requests per Second With WebClient.html-UA1vcFb4.js"),__vite__mapDeps([896,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring","WebClient"],g:["Rate Limiting","Concurrency"],e:`
<p>在本教程中，我们将看到使用Spring 5 WebClient限制每秒请求数量的不同方法。</p>
<p>尽管我们通常希望利用其非阻塞特性，但某些场景可能迫使我们添加延迟。我们将学习在使用一些Project Reactor特性来控制对服务器的请求流时遇到的一些这些场景。</p>
<h3>2.1. 编写一个简单的Web服务</h3>
<p>要探索这个场景，我们将从一个简单的@RestController开始，它提供来自固定范围的随机数：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/random"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RandomController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@GetMapping</span>
    <span class="token class-name">Integer</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:6.17,words:1852},t:"使用Spring 5 WebClient限制每秒请求数量",y:"a"}}],["/posts/baeldung/2024-07-13/2024-07-13-Log%20Properties%20in%20a%20Spring%20Boot%20Application.html",{loader:()=>a(()=>import("./2024-07-13-Log Properties in a Spring Boot Application.html-BvSQuHL6.js"),__vite__mapDeps([897,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Boot","Logging"],g:["Spring Boot","Logging","Properties"],e:`
<p>属性是 Spring Boot 提供的最有用机制之一。它们可以从不同的地方提供，例如专用属性文件、环境变量等。因此，有时查找并记录特定属性非常有用，例如在调试期间。</p>
<p>在这个简短的教程中，我们将看到几种不同的方式来查找并记录 Spring Boot 应用程序中的属性。</p>
<p>首先，我们将创建一个简单的测试应用程序，然后我们将尝试三种不同的方法来记录特定属性。</p>
<h2>2. 创建测试应用程序</h2>
<p>让我们创建一个包含三个自定义属性的简单应用程序。</p>
<p>我们可以使用 Spring Initializr 创建 Spring Boot 应用程序模板。我们将使用 Java 作为语言。我们也可以选择其他选项，例如 Java 版本、项目元数据等。</p>`,r:{minutes:4.69,words:1408},t:"Spring Boot 应用程序中的日志属性",y:"a"}}],["/posts/baeldung/2024-07-13/2024-07-13-Message%20Delivery%20Semantics%20in%20Streaming%20Platforms.html",{loader:()=>a(()=>import("./2024-07-13-Message Delivery Semantics in Streaming Platforms.html-Dc61jkub.js"),__vite__mapDeps([898,1])),meta:{d:16645824e5,l:"2022年10月1日",c:["Kafka","Streaming"],g:["Message Delivery","Semantics"],e:`
<p>在本教程中，我们将讨论流媒体平台中的消息传递语义。</p>
<p>首先，我们将快速查看事件流通过流媒体平台的主要组件。接下来，我们将讨论这些平台中数据丢失和重复的常见原因。然后，我们将专注于可用的三种主要传递语义。</p>
<p>我们将讨论如何在流媒体平台中实现这些语义，以及它们如何处理数据丢失和重复问题。</p>
<p>在每种传递语义中，我们将简要触及在Apache Kafka中获得传递保证的方法。</p>
<h3>2. 流媒体平台的基础知识</h3>
<p>简单来说，像Apache Kafka和Apache ActiveMQ这样的流媒体平台以实时或近实时的方式处理来自一个或多个来源（也称为生产者）的事件，并将它们传递给一个或多个目的地（也称为消费者）进行进一步处理、转换、分析或存储。</p>`,r:{minutes:10.07,words:3021},t:"流媒体平台中消息传递语义",y:"a"}}],["/posts/baeldung/2024-07-13/2024-07-13-Mocking%20Java%20InputStream%20Object.html",{loader:()=>a(()=>import("./2024-07-13-Mocking Java InputStream Object.html-DOsCIPaY.js"),__vite__mapDeps([899,1])),meta:{d:1720886672e3,c:["Java","Testing"],g:["InputStream","Mocking","Unit Test"],e:`
<ol>
<li>引言</li>
</ol>
<p><code>InputStream</code>是一个常用的抽象类，用于处理数据。数据可能来自非常不同的来源，但使用这个类可以让我们抽象化来源，并独立于特定来源处理数据。</p>
<p>然而，当我们编写测试时，我们实际上需要提供一些坚实的实现。在本教程中，我们将学习应该选择哪些可用的实现，或者何时更好地编写我们自己的实现。</p>
<ol start="2">
<li><code>InputStream</code>接口基础</li>
</ol>
<p>在我们开始编写自己的代码之前，了解<code>InputStream</code>接口是如何构建的对我们来说是个好主意。幸运的是，它非常简单。<strong>要实现一个简单的<code>InputStream</code>，我们只需要考虑一个方法——</strong> <code>read</code>。它不接受任何参数，并以<code>int</code>的形式返回流的下一个字节。如果<code>InputStream</code>已经结束，它返回-1，提示我们停止处理。</p>`,r:{minutes:4.4,words:1320},t:"Java中模拟InputStream对象",y:"a"}}],["/posts/baeldung/2024-07-13/2024-07-13-Patterns%20for%20Iterating%20Over%20Large%20Result%20Sets%20With%20Spring%20Data%20JPA.html",{loader:()=>a(()=>import("./2024-07-13-Patterns for Iterating Over Large Result Sets With Spring Data JPA.html-BeOcaav7.js"),__vite__mapDeps([900,1])),meta:{d:17209152e5,l:"2024年7月14日",c:["Spring Data JPA","数据库操作"],g:["分页查询","大数据集处理","流式处理"],e:`
<p>在本教程中，我们将<strong>探索使用Spring Data JPA检索大型数据集的各种方式</strong>。</p>
<p>首先，我们将使用分页查询，并看到_Slice_和_Page_之间的区别。之后，我们将学习如何从数据库流式传输和处理数据，而不需要收集它。</p>
<h2>2. 分页查询</h2>
<p>对于这种情况的常见方法是使用分页查询。为此，<strong>我们需要定义一个批量大小并执行多个查询</strong>。结果，我们将能够以较小的批量处理所有实体，避免在内存中加载大量数据。</p>
<p>对于本文中的代码示例，我们将使用_Student_实体作为数据模型：</p>`,r:{minutes:3.87,words:1162},t:"使用Spring Data JPA迭代大型结果集的模式",y:"a"}}],["/posts/baeldung/2024-07-13/2024-07-13-Port%20Scanning%20With%20Java.html",{loader:()=>a(()=>import("./2024-07-13-Port Scanning With Java.html-Dk1uIFPG.js"),__vite__mapDeps([901,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Networking"],g:["Port Scanning","Java Socket"],e:`
<p>端口扫描是一种枚举目标机器上开放或活动的端口的方法。其主要目标是列出开放的端口，以便了解当前正在运行的应用程序和服务。</p>
<p>在本教程中，<strong>我们将解释如何使用Java开发一个简单的端口扫描应用程序</strong>，我们可以使用它来扫描主机的开放端口。</p>
<h3>2. 什么是计算机端口？</h3>
<p>计算机端口是一个逻辑实体，它使特定服务与连接关联成为可能。此外，端口由1到65535的整数标识。按照惯例，前1024个端口是为标准服务预留的，例如：</p>
<ul>
<li>端口20：FTP</li>
<li>端口23：Telnet</li>
<li>端口25：SMTP</li>
<li>端口80：HTTP</li>
</ul>`,r:{minutes:3.08,words:925},t:"Java端口扫描概述",y:"a"}}],["/posts/baeldung/2024-07-13/2024-07-13-Redis%20Sentinel%20vs%20Clustering.html",{loader:()=>a(()=>import("./2024-07-13-Redis Sentinel vs Clustering.html-DXBSAagD.js"),__vite__mapDeps([902,1])),meta:{d:16645824e5,l:"2022年10月1日",c:["Redis","数据库"],g:["Redis Sentinel","Redis Cluster"],e:`<hr>
<h1>Redis Sentinel与集群部署 | Baeldung</h1>
<p>在本教程中，我们将讨论Redis及其两种不同的部署策略：Redis Sentinel和Redis Cluster。然后，我们将讨论这些策略之间的区别及其细微差别。</p>
<p><strong>最终，我们希望能够充分了解Redis，以判断哪种部署策略更好地满足我们的需求</strong>。</p>
<h2>2. Redis简介</h2>
<p>Redis是一个开源的内存数据结构存储，可以用作键值数据库、缓存以及许多其他用例。它旨在提供对数据的高速访问。</p>
<p>我们的目标是分析并比较这两种不同的策略：Redis Sentinel和Redis Cluster。</p>`,r:{minutes:8.93,words:2680},t:"Redis Sentinel与集群部署 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-13/2024-07-13-Send%20Array%20as%20Part%20of%20x%20www%20form%20urlencoded%20Using%20Postman.html",{loader:()=>a(()=>import("./2024-07-13-Send Array as Part of x www form urlencoded Using Postman.html-BeEMA1iw.js"),__vite__mapDeps([903,1])),meta:{d:16645824e5,l:"2022年10月1日",c:["Java","Postman"],g:["x-www-form-urlencoded","Array"],e:`
<p>在这个教程中，我们将探讨使用Postman发送x-www-form-urlencoded格式数组的方法。</p>
<p>W3C委员会定义了多种我们可以用于通过网络层发送数据的格式。这些格式包括form-data、raw和x-www-form-urlencoded数据。我们默认使用后者格式发送数据。</p>
<p>列出的格式描述了作为HTTP消息体的一个块发送的表单数据。它发送了一个编码的表单数据集以提交给服务器。编码数据具有键值对的格式。服务器必须支持内容类型。</p>
<p>使用此内容类型提交的表单匹配以下编码模式：</p>
<ul>
<li>控件名称和值被转义。</li>
<li>'，'符号将多个值分隔开。</li>
<li>'+'符号将所有空格字符替换。</li>
<li>保留字符应遵循RFC 1738符号。</li>
<li>所有非字母数字字符使用百分号编码。</li>
<li>键与值用等号（'='）分隔，键值对用和号（'&amp;'）分隔。</li>
</ul>`,r:{minutes:4.47,words:1340},t:"使用Postman发送x-www-form-urlencoded格式的数组",y:"a"}}],["/posts/baeldung/2024-07-13/2024-07-13-Setting%20Time%20To%20Live%20Value%20for%20Caching.html",{loader:()=>a(()=>import("./2024-07-13-Setting Time To Live Value for Caching.html-CrzCmpVm.js"),__vite__mapDeps([904,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring","Caching"],g:["TTL","Cache","Spring Framework"],e:`
<p>在这个教程中，我们为一些基本的现实世界例子进行缓存操作。特别是，我们将展示如何配置这种缓存机制使其有时间限制。我们也将这种时间限制称为缓存的生存时间（TTL）。</p>
<h2>2. Spring缓存的配置</h2>
<p>之前，我们已经展示了如何使用Spring的@Cacheable注解。同时，缓存的一个实际用例是当一个酒店预订网站的主页频繁被打开时。这意味着提供酒店列表的REST端点经常被请求，导致频繁调用数据库。与直接从内存中提供数据相比，数据库调用较慢。</p>
<p>首先，我们将创建SpringCachingConfig：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableCaching</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringCachingConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">CacheManager</span> <span class="token function">cacheManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentMapCacheManager</span><span class="token punctuation">(</span><span class="token string">"hotels"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.08,words:624},t:"为Spring缓存设置生存时间值",y:"a"}}],["/posts/baeldung/2024-07-13/2024-07-13-TLS%20Setup%20in%20MySQL%20and%20Spring%20Boot%20Application.html",{loader:()=>a(()=>import("./2024-07-13-TLS Setup in MySQL and Spring Boot Application.html-C1zdoDlF.js"),__vite__mapDeps([905,1])),meta:{d:16633728e5,l:"2022年9月17日",c:["Spring Boot","MySQL"],g:["TLS","Security"],e:`
<p>在MySQL服务器和客户端之间的未加密连接可能会在网络上暴露传输中的数据。对于生产就绪的应用程序，我们应该通过TLS（传输层安全）协议将所有通信转移到安全连接上。</p>
<p>在本教程中，我们将学习如何在MySQL服务器上启用安全连接。此外，我们将配置Spring Boot应用程序使用此安全连接。</p>
<h2>2. 为什么在MySQL上使用TLS？</h2>
<p>首先，让我们了解一些TLS的基本知识。</p>
<p>TLS协议使用加密算法确保通过网络安全传输的数据可以被信任，并且没有被篡改或检查。它具有检测数据变化、丢失或重放攻击的机制。<strong>TLS还结合了使用X.509标准的提供身份验证的算法。</strong></p>`,r:{minutes:5.23,words:1568},t:"MySQL和Spring Boot应用程序中的TLS设置",y:"a"}}],["/posts/baeldung/2024-07-13/2024-07-13-Understanding%20java.lang.Thread.State%20%20WAITING%20%20parking%20.html",{loader:()=>a(()=>import("./2024-07-13-Understanding java.lang.Thread.State  WAITING  parking .html-DhUghQ8Q.js"),__vite__mapDeps([906,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Concurrency"],g:["Java","Thread","LockSupport"],e:`<hr>
<h1>理解java.lang.Thread.State: WAITING (parking) | Baeldung</h1>
<p>在这篇文章中，我们将讨论Java线程状态——特别是_Thread.State.WAITING_。我们将探讨线程进入此状态的方法以及它们之间的区别。最后，我们将更仔细地研究_LockSupport_类，它提供了几个用于同步的静态实用方法。</p>
<h2>1. 概述</h2>
<h2>2. 进入_Thread.State.WAITING_</h2>
<p>Java提供了多种方式将线程置于_WAITING_状态。</p>
<h3>2.1. <em>Object.wait()</em></h3>`,r:{minutes:5.53,words:1659},t:"理解java.lang.Thread.State: WAITING (parking) | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-13/2024-07-13-Uploading%20a%20File%20and%20JSON%20Data%20in%20Postman.html",{loader:()=>a(()=>import("./2024-07-13-Uploading a File and JSON Data in Postman.html-BEQTkbbD.js"),__vite__mapDeps([907,1])),meta:{d:16669152e5,l:"2022年10月28日",c:["Postman","Spring Boot"],g:["API测试","文件上传","JSON数据"],e:'\n<p>Postman是一个流行的API平台，它优化了API开发生命周期的各个步骤。Postman可以用来在不写任何代码的情况下测试我们的API。我们可以使用独立的应用程序或浏览器扩展。</p>\n<p>在本教程中，我们将看到在使用Postman时如何上传文件和JSON数据。</p>\n<h3>2.1. 依赖项</h3>\n<p>我们定义了一个基本的spring应用程序，在_pom.xml_中使用了_spring-boot-starter-web_依赖项：</p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`org.springframework.boot`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`spring-boot-starter-web`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n</code></pre></div>',r:{minutes:4.45,words:1336},t:"使用Postman上传文件和JSON数据",y:"a"}}],["/posts/baeldung/2024-07-13/2024-07-13-Using%20Groovy%20in%20Spring.html",{loader:()=>a(()=>import("./2024-07-13-Using Groovy in Spring.html-D0RwRbmS.js"),__vite__mapDeps([908,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring","Groovy"],g:["Groovy","Spring Framework","Configuration"],e:`
<h2>1. 概述</h2>
<p>Groovy 是一种功能强大且动态的 JVM 语言，拥有众多特性。在 Spring 中使用 Groovy 可以显著增强应用程序的灵活性和可读性。自版本 4 起，Spring 支持基于 Groovy 的配置。</p>
<p>在本教程中，<strong>我们将探讨使用 Groovy 与 Spring 的不同方式</strong>。首先，我们将看到如何使用 Spring 提供的多种选项创建 Groovy bean 定义。接下来，我们将讨论如何使用 Groovy 脚本引导应用程序上下文。最后，我们将看到如何使用 XML 和 <em>GroovyScriptEngine</em> 类执行 Groovy 脚本（无需编译）。</p>`,r:{minutes:4.82,words:1447},t:"Groovy 在 Spring 中的使用",y:"a"}}],["/posts/baeldung/2024-07-13/2024-07-13-Using%20Streams%20to%20Collect%20Into%20a%20TreeSet.html",{loader:()=>a(()=>import("./2024-07-13-Using Streams to Collect Into a TreeSet.html-BlZ_klqq.js"),__vite__mapDeps([909,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Stream API"],g:["TreeSet","Java 8"],e:`
<h2>1. 概述</h2>
<p>Java 8中一个重要的新特性是Stream API。Streams允许我们方便地从不同的来源（如数组或集合）处理元素。</p>
<p>进一步地，使用Stream.collect()方法和相应的Collectors，我们可以将元素重新打包到不同的数据结构中，如Set、Map、List等。</p>
<p>在本教程中，我们将探讨如何将Stream中的元素收集到TreeSet中。</p>
<h2>2. 使用自然排序收集到TreeSet</h2>
<p>简单来说，TreeSet是一个排序后的Set。TreeSet中的元素使用它们的自然排序或提供的Comparator进行排序。</p>`,r:{minutes:4.33,words:1299},t:"使用Stream收集到TreeSet",y:"a"}}],["/posts/baeldung/2024-07-13/2024-07-13-Validating%20URL%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-13-Validating URL in Java.html-BQaSBNPf.js"),__vite__mapDeps([910,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Web Development"],g:["URL Validation","Java"],e:`
<p>URL代表统一资源定位符，是指向网络上唯一资源的地址。</p>
<p>在本教程中，我们将讨论使用Java进行URL验证。在现代Web开发中，通过应用程序读取、写入或访问URL是非常常见的。因此，成功的验证确保了URL的有效性和合规性。</p>
<p>有多种库用于验证URL。我们将讨论两个类——来自JDK的java.net.Url和来自Apache Commons库的org.apache.commons.validator.routines.UrlValidator。</p>
<h3>2. 使用JDK验证URL</h3>
<p>让我们看看如何使用java.net.URL类来验证URL：</p>`,r:{minutes:3.19,words:956},t:"Java中验证URL的方法",y:"a"}}],["/posts/baeldung/2024-07-13/2024-07-13-Variable%20Instantiation%20on%20Declaration%20vs.%20on%20Constructor%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-13-Variable Instantiation on Declaration vs. on Constructor in Java.html-B63chBRu.js"),__vite__mapDeps([911,1])),meta:{d:17209152e5,l:"2024年7月14日",c:["Java","Programming"],g:["Java","Constructor","Variable Initialization"],e:`
<h2>1. 引言</h2>
<p>Java开发者之间存在不确定性，不确定是在声明时初始化变量还是在构造函数中初始化。</p>
<p>在本教程中，我们将看看在声明时或在构造函数中初始化变量时会发生什么。我们将尝试指出它们之间是否存在差异和相似之处。</p>
<h2>2. 字段声明初始化</h2>
<p>我们需要知道Java编译器会取出所有字段声明初始化，并按它们在类中的出现顺序将它们作为代码移动到构造函数中。从这一点，我们可以推断出在声明时或在构造函数中初始化变量并没有太大区别，因为编译后它们最终都会出现在构造函数中：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">B</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.97,words:890},t:"Java中声明时变量实例化与构造函数中的比较 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-13/2024-07-13-assertAll%20%20%20vs%20Multiple%20Assertions%20in%20JUnit5.html",{loader:()=>a(()=>import("./2024-07-13-assertAll   vs Multiple Assertions in JUnit5.html-iL1WE1in.js"),__vite__mapDeps([912,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["JUnit5","Testing"],g:["assertAll","Assertions"],e:`
<p>当编写单元测试时，我们有时会对输出提供多个断言。当这些断言中的任何一个失败时，测试就会停止。这意味着我们无法知道后面的断言是否会通过或失败，这可能会增加调试时间。</p>
<p>我们可以通过将多个断言包装成单个动作来解决这个问题。</p>
<p>在这个简短的教程中，我们将学习如何在JUnit5中使用引入的assertAll()方法，并看到它与使用多个断言的不同之处。</p>
<h2>2. 模型</h2>
<p>我们将使用一个_User_类来帮助我们的例子：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> username<span class="token punctuation">;</span>
    <span class="token class-name">String</span> email<span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> activated<span class="token punctuation">;</span>
    <span class="token comment">//构造函数</span>
   <span class="token comment">//getters和setters</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.52,words:755},t:"JUnit5中的assertAll()与多个断言的比较",y:"a"}}],["/posts/baeldung/2024-07-14/2024-07-14-A%20Guide%20to%20Variables%20in%20Postman.html",{loader:()=>a(()=>import("./2024-07-14-A Guide to Variables in Postman.html-DyJhd6zY.js"),__vite__mapDeps([913,1])),meta:{d:16647552e5,l:"2022年10月3日",c:["Postman","API"],g:["Variables","Postman"],e:`
<p>在Postman中，变量允许我们保存值并在不同API中按需使用它们。我们可以通过将它们传递到集合、环境或任何请求中来引用这些值。它基本上使我们能够更有效地使用这些变量来访问存储的值。我们还可以利用这些变量与多个团队成员协作或在Postman上设置动态工作流。</p>
<p>在本文中，我们将深入理解变量、它们的类型以及如何将它们嵌入到我们的API中。</p>
<h2>什么是变量？</h2>
<p>变量代表数据表示，让我们在需要的地方无需手动输入即可访问一个值。当我们需要在多个地方使用相同的值时，它们非常有用。一些实例包括基础URL、令牌和路径变量。此外，使用它们还使请求更加灵活，因为更改变量将自动在所有使用这些变量的地方进行更改。</p>`,r:{minutes:7.15,words:2144},t:"Postman中的变量指南",y:"a"}}],["/posts/baeldung/2024-07-14/2024-07-14-Constructing%20a%20Relative%20Path%20From%20Two%20Absolute%20Paths%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-14-Constructing a Relative Path From Two Absolute Paths in Java.html-BchzIGEC.js"),__vite__mapDeps([914,1])),meta:{d:17209152e5,l:"2024年7月14日",c:["Java","NIO2"],g:["相对路径","绝对路径"],e:`
<p>在本教程中，我们将学习如何在Java中从两个绝对路径构建相对路径。我们将重点关注两个内置的Java API——新的I/O（NIO2）Path API和URI类。</p>
<p>在我们开始之前，让我们快速回顾一下。对于文本中的所有示例，我们将使用用户主目录中的相同文件结构：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>/ (根目录)
|-- baeldung
    \\-- bar
    |   |-- one.txt
    |   |-- two.txt
    \\-- foo
        |-- three.txt
</code></pre></div>`,r:{minutes:4.65,words:1395},t:"在Java中从两个绝对路径构建相对路径",y:"a"}}],["/posts/baeldung/2024-07-14/2024-07-14-Convert%20a%20List%20to%20a%20Comma%20Separated%20String.html",{loader:()=>a(()=>import("./2024-07-14-Convert a List to a Comma Separated String.html-BcIWIT2-.js"),__vite__mapDeps([915,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Lists"],g:["Java 8","String","List"],e:`
<p>列表转换仍然是一个热门话题，因为这是Java开发人员经常进行的操作。在本教程中，我们将学习如何使用四种不同的方法将字符串列表转换为逗号分隔的字符串。</p>
<h2>1. 引言</h2>
<h2>2. 使用Java 8+</h2>
<p>我们将使用Java 8中可用的三个不同类及其方法进行转换。</p>
<p>让我们以下面的列表作为即将到来的例子的输入：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>\`\` arraysAsList <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"ONE"</span><span class="token punctuation">,</span> <span class="token string">"TWO"</span><span class="token punctuation">,</span> <span class="token string">"THREE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:4.07,words:1220},t:"将列表转换为逗号分隔的字符串",y:"a"}}],["/posts/baeldung/2024-07-14/2024-07-14-Convert%20between%20JSON%20and%20Protobuf.html",{loader:()=>a(()=>import("./2024-07-14-Convert between JSON and Protobuf.html-C9n9vH8M.js"),__vite__mapDeps([916,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Protobuf"],g:["JSON","Protobuf"],e:'\n<p>在本教程中，我们将演示如何从JSON转换到Protobuf以及从Protobuf转换到JSON。\nProtobuf是一个免费且开源的跨平台数据格式，用于序列化结构化数据。</p>\n<p>要开始，让我们通过包含<code>protobuf-java-util</code>依赖项来创建一个Spring Boot项目：</p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`com.google.protobuf`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`protobuf-java-util`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`3.25.3`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n</code></pre></div>',r:{minutes:1.78,words:535},t:"Java中JSON和Protobuf的互转",y:"a"}}],["/posts/baeldung/2024-07-14/2024-07-14-Create%20Date%20From%20Unix%20Timestamp%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-14-Create Date From Unix Timestamp in Java.html-DtQVRU2l.js"),__vite__mapDeps([917,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Date and Time"],g:["Java","Unix Timestamp","Date Conversion"],e:`<hr>
<h1>Java中从Unix时间戳创建日期</h1>
<h2>1. 引言</h2>
<p>在本快速教程中，我们将学习如何从Unix时间戳解析日期的表示。<strong>Unix时间</strong>是自1970年1月1日以来经过的秒数。然而，时间戳可以表示到纳秒级的精度。因此，我们将看到可用的工具，并创建一个方法将任何范围的时间戳转换为Java对象。</p>
<h2>2. 旧方法（Java 8之前）</h2>
<p>在Java 8之前，我们最简单的选择是_日期(Date)<em>和_日历(Calendar)</em>。_日期_类有一个构造函数，直接接受以毫秒为单位的时间戳：</p>
`,r:{minutes:4.17,words:1251},t:"Java中从Unix时间戳创建日期",y:"a"}}],["/posts/baeldung/2024-07-14/2024-07-14-Create%20a%20BMI%20Calculator%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-14-Create a BMI Calculator in Java.html-DuJyE8Yk.js"),__vite__mapDeps([918,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Programming"],g:["BMI Calculator","Java"],e:`
<p>在本教程中，我们将在Java中创建一个BMI（身体质量指数）计算器。</p>
<p>在开始实现之前，我们首先来理解BMI的概念。</p>
<h3>2. 什么是BMI？</h3>
<p>BMI代表身体质量指数。它是从个人的身高和体重中派生出来的一个值。</p>
<p>借助BMI，我们可以判断一个人的体重是否健康。</p>
<p>让我们来看一下计算BMI的公式：</p>
<p><strong>BMI = 体重（千克） / （身高（米） * 身高（米））</strong></p>
<p>根据BMI范围，一个人被归类为“低体重”、“正常”、“超重”或“肥胖”：</p>
<table>
<thead>
<tr>
<th>BMI范围</th>
<th>类别</th>
</tr>
</thead>
<tbody>
<tr>
<td>\`&lt; 18.5</td>
<td>低体重</td>
</tr>
<tr>
<td>18.5 – 25</td>
<td>正常</td>
</tr>
<tr>
<td>25 – 30</td>
<td>超重</td>
</tr>
<tr>
<td>&gt;\` 30</td>
<td>肥胖</td>
</tr>
</tbody>
</table>`,r:{minutes:1.55,words:466},t:"在Java中创建BMI计算器",y:"a"}}],["/posts/baeldung/2024-07-14/2024-07-14-Creating%20Random%20Numbers%20With%20No%20Duplicates%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-14-Creating Random Numbers With No Duplicates in Java.html-ysMPQUtm.js"),__vite__mapDeps([919,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Programming"],g:["Random Numbers","Java 8"],e:'\n<h2>1. 引言</h2>\n<p>在本快速教程中，我们将学习如何使用Java核心类生成没有重复的随机数。<strong>首先，我们将从头开始实现几种解决方案，然后利用Java 8+的特性来实现更可扩展的方法。</strong></p>\n<h2>2. 小范围内的随机数</h2>\n<p>如果我们所需的数字范围较小，我们可以一直向列表中添加连续的数字，直到达到大小_n_。**然后，我们调用_Collections.shuffle()_，它具有线性时间复杂度。之后，我们将得到一个随机排序的唯一数字列表。**让我们创建一个实用工具类来生成和使用这些数字：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UniqueRng</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>```` <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">List</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>```` numbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">UniqueRng</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            numbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">shuffle</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:3.37,words:1011},t:"在Java中创建没有重复的随机数",y:"a"}}],["/posts/baeldung/2024-07-14/2024-07-14-Difference%20Between%20Class.getResource%20%20%20and%20ClassLoader.getResource%20%20.html",{loader:()=>a(()=>import("./2024-07-14-Difference Between Class.getResource   and ClassLoader.getResource  .html-BmC4qOqF.js"),__vite__mapDeps([920,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java"],g:["Class","ClassLoader","getResource"],e:`
<p>在这个简短的教程中，我们将探讨 Class.getResource() 和 ClassLoader.getResource() 方法之间的区别。</p>
<h2>2. getResource() 方法</h2>
<p>我们可以使用 Class 或 ClassLoader 实例上的 getResource() 方法来查找给定名称的资源。资源被认为是数据，例如图像、文本、音频等。作为路径分隔符，我们应该始终使用斜杠（"/"）。</p>
<p>该方法返回一个用于读取资源的 URL 对象，或者如果找不到资源或调用者没有权限检索资源，则返回 null 值。</p>
<p>现在，让我们看看如何使用 Class 实例获取资源。<strong>在使用 Class 对象定位资源时，我们可以传递绝对路径或相对路径。</strong></p>`,r:{minutes:3.33,words:1e3},t:"Class.getResource() 和 ClassLoader.getResource() 之间的区别",y:"a"}}],["/posts/baeldung/2024-07-14/2024-07-14-Differences%20Between%20Paths.get%20and%20Path.of.html",{loader:()=>a(()=>import("./2024-07-14-Differences Between Paths.get and Path.of.html-IWNWayss.js"),__vite__mapDeps([921,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","NIO"],g:["Paths.get","Path.of"],e:`
<p>在这篇文章中，我们将讨论Paths.get()和Path.of()方法之间的相似之处和差异。</p>
<h2>2. 相同的行为</h2>
<p>Path.of()方法接受一个URI作为参数，并将其转换为相关对象的Path。</p>
<p>现在让我们来看看Paths.get()的代码：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Paths</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Path</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">URI</span> uri<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Path</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.82,words:547},t:"Java中Paths.get()和Path.of()的区别",y:"a"}}],["/posts/baeldung/2024-07-14/2024-07-14-Dispatching%20Queries%20in%20Axon%20Framework.html",{loader:()=>a(()=>import("./2024-07-14-Dispatching Queries in Axon Framework.html-DuLhsT7v.js"),__vite__mapDeps([922,1])),meta:{d:16566336e5,l:"2022年7月1日",c:["Axon Framework","Microservices"],g:["Axon","Query Dispatching","Microservices"],e:`
<p>Axon Framework 帮助我们构建事件驱动的微服务系统。在《Axon框架指南》中，我们通过一个简单的 Axon Spring Boot 应用程序了解了 Axon，该程序包括构建了一个示例 <em>订单</em> 模型供我们更新和查询。那篇文章使用了简单的点对点查询。</p>
<p>在本教程中，我们将在上述示例的基础上，检查 Axon 中可以调度查询的所有方式。除了更仔细地查看点对点查询之外，我们还将学习流式查询、散布-收集查询和订阅查询。</p>
<p>当我们向 Axon 提交查询时，框架将向所有注册的能够回答我们查询的查询处理器发出该查询。在分布式系统中，可能存在多个节点支持同一种查询，并且一个节点也可能有多个查询处理器支持查询。</p>`,r:{minutes:12.08,words:3624},t:"在Axon框架中调度查询",y:"a"}}],["/posts/baeldung/2024-07-14/2024-07-14-Generate%20the%20MD5%20Checksum%20for%20a%20File%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-14-Generate the MD5 Checksum for a File in Java.html-Dc3-v8St.js"),__vite__mapDeps([923,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","MD5"],g:["Java","MD5","Checksum"],e:`
<h2>1. 概述</h2>
<p>校验和是一串用于唯一标识文件的字符序列。它最常用于验证文件副本是否与原始文件完全相同。</p>
<p>在这个简短的教程中，我们将看到如何在Java中<strong>生成文件的MD5校验和</strong>。</p>
<h2>2. 使用MessageDigest类</h2>
<p>我们可以很容易地使用java.security包中的MessageDigest类来为文件生成MD5校验和：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>byte[] data = Files.readAllBytes(Paths.get(filePath));
byte[] hash = MessageDigest.getInstance("MD5").digest(data);
String checksum = new BigInteger(1, hash).toString(16);
</code></pre></div>`,r:{minutes:1.23,words:368},t:"Java中生成文件的MD5校验和",y:"a"}}],["/posts/baeldung/2024-07-14/2024-07-14-Getting%20Binary%20Representation%20of%20Int%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-14-Getting Binary Representation of Int in Kotlin.html-ka6gps4b.js"),__vite__mapDeps([924,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin"],g:["Kotlin","Binary Representation"],e:`<hr>
<h1>在Kotlin中获取Int的二进制表示</h1>
<h2>1. 概述</h2>
<p><em>Int</em> 是我们日常工作中常用的数据类型。有时，我们可能需要获取整数的二进制表示。</p>
<p>在本教程中，我们将探索Kotlin中可用的方法来完成这项任务，并更深入地理解整数的二进制表示。</p>
<h2>2. 使用Java的_Integer.toBinaryString()_方法</h2>
<p>当我们在JVM上运行Kotlin程序时，<strong>Java标准库提供的所有功能也适用于Kotlin</strong>。因此，我们也可以使用Java的方法来获取整数的二进制表示。</p>`,r:{minutes:3.72,words:1115},t:"在Kotlin中获取Int的二进制表示",y:"a"}}],["/posts/baeldung/2024-07-14/2024-07-14-Getting%20the%20Filename%20From%20a%20String%20Containing%20an%20Absolute%20File%20Path.html",{loader:()=>a(()=>import("./2024-07-14-Getting the Filename From a String Containing an Absolute File Path.html-Br9I-M96.js"),__vite__mapDeps([925,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","文件操作"],g:["Java","文件名","文件路径"],e:`
<h2>1. 概述</h2>
<p>当我们在Java中处理文件时，我们经常需要从一个给定的绝对路径中提取文件名。</p>
<p>在本教程中，我们将探讨如何提取文件名。</p>
<h2>2. 问题介绍</h2>
<p>问题非常直接。想象一下，我们有一个绝对文件路径字符串。我们想要从中提取文件名。一些例子可以快速解释这个问题：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> <span class="token constant">PATH_LINUX</span> <span class="token operator">=</span> <span class="token string">"/root/with space/subDir/myFile.linux"</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> <span class="token constant">EXPECTED_FILENAME_LINUX</span> <span class="token operator">=</span> <span class="token string">"myFile.linux"</span><span class="token punctuation">;</span>

<span class="token class-name">String</span> <span class="token constant">PATH_WIN</span> <span class="token operator">=</span> <span class="token string">"C:\\\\root\\\\with space\\\\subDir\\\\myFile.win"</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> <span class="token constant">EXPECTED_FILENAME_WIN</span> <span class="token operator">=</span> <span class="token string">"myFile.win"</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:5.74,words:1723},t:"从包含绝对文件路径的字符串中获取文件名 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-14/2024-07-14-Guide%20to%20Classgraph%20Library.html",{loader:()=>a(()=>import("./2024-07-14-Guide to Classgraph Library.html-DzU1FAqw.js"),__vite__mapDeps([926,1])),meta:{d:17209152e5,l:"2024年7月14日",c:["Java","编程"],g:["Classgraph","Java库"],e:`<hr>
<h1>Classgraph库指南</h1>
<h2>1. 概述</h2>
<p>在本简短的教程中，我们将讨论Classgraph库——它的作用以及我们如何使用它。</p>
<p><strong>Classgraph帮助我们在Java类路径中找到目标资源，构建有关发现的资源的元数据，并提供方便的API来处理这些元数据。</strong></p>
<p>这种用例在基于Spring的应用中非常流行，其中用模式注解标记的组件会自动注册到应用上下文中。然而，我们也可以利用这种方法来执行自定义任务。例如，我们可能想要找到所有带有特定注解的类，或者所有具有特定名称的资源文件。</p>
<p>最酷的是，<strong>Classgraph速度很快，因为它在字节码级别工作</strong>，这意味着检查的类不会被加载到JVM中，并且它不使用反射来处理。</p>`,r:{minutes:4.23,words:1270},t:"Classgraph库指南",y:"a"}}],["/posts/baeldung/2024-07-14/2024-07-14-Guide%20to%20Find%20the%20Java%20.class%20Version.html",{loader:()=>a(()=>import("./2024-07-14-Guide to Find the Java .class Version.html-BSPVXLYX.js"),__vite__mapDeps([927,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","CRaC"],g:["Java .class 版本","Javap","Hexdump"],e:`
<p>Java应用程序以其启动缓慢和预热时间长而闻名。OpenJDK 的 CRaC（在检查点协调恢复）项目可以通过创建应用程序在峰值性能时的检查点并恢复 JVM 实例到该点来帮助改善这些问题。</p>
<p>为了充分利用此功能，BellSoft 提供了高度优化的 Java 应用程序容器。这些容器打包了 Alpaquita Linux（一个为 Java 和云环境优化的全功能操作系统）和 Liberica JDK（基于 OpenJDK 的开源 Java 运行时）。</p>
<p>这些现成的镜像使我们能够轻松地在 Spring Boot 应用程序中集成 CRaC：</p>
<p><strong>使用 CRaC 支持提高 Java 应用程序的性能</strong></p>`,r:{minutes:4.09,words:1226},t:"如何查找 Java .class 文件的版本 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-14/2024-07-14-Guide%20to%20the%20Storage%20Engine%20in%20Apache%20Cassandra.html",{loader:()=>a(()=>import("./2024-07-14-Guide to the Storage Engine in Apache Cassandra.html-XaNctJMB.js"),__vite__mapDeps([928,1])),meta:{d:16619904e5,l:"2022年9月1日",c:["Database","Apache Cassandra"],g:["Storage Engine","LSMT"],e:`<hr>
<h1>Apache Cassandra存储引擎指南</h1>
<p>现代数据库系统通过利用复杂的存储引擎来保证可靠性、一致性、高吞吐量等能力，从而定制化以满足一系列需求。在本教程中，我们将深入探讨Apache Cassandra使用的存储引擎的内部结构，它专为写入密集型工作负载设计，同时保持了良好的读取性能。</p>
<h2>2. Log-Structured Merge-Tree (LSMT)</h2>
<p>Apache Cassandra利用基于两层Log-Structured Merge-Tree（LSMT）的数据结构进行存储。在高层次上，LSM树有两个类似树的组件，一个是内存缓存组件（C0）和一个磁盘组件（C1）：</p>`,r:{minutes:6.57,words:1972},t:"Apache Cassandra存储引擎指南",y:"a"}}],["/posts/baeldung/2024-07-14/2024-07-14-Handle%20Classes%20With%20the%20Same%20Name%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-14-Handle Classes With the Same Name in Java.html-DOGkfbhJ.js"),__vite__mapDeps([929,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","编程"],g:["Java","类名冲突","命名冲突"],e:`<hr>
<h1>Java中处理同名类的策略</h1>
<h2>1. 引言</h2>
<p>Java的类命名遵循一种称为大驼峰命名法的国际惯例，就像主要的编程语言一样。然而，当处理同名的类时，就遇到了挑战。</p>
<p><strong>自1998年JDK最初发布以来，如何解决这种不寻常的情况一直存在争议。</strong> 这是JDK-4194542，关于这个主题的第一个开放的bug，从那时起，JDK开发团队的建议是使用完全限定的类名。然而，JDK目前没有计划很快推出允许这种用法的功能。</p>
<p>最近，在2019年8月，Java开发社区提出了一个新的提议（JEP），关于如何解决这种情况，并且正在获得全球Java开发者的更多支持。</p>`,r:{minutes:1.96,words:588},t:"Java中处理同名类的策略",y:"a"}}],["/posts/baeldung/2024-07-14/2024-07-14-Insert%20Array%20Inside%20an%20Object%20in%20MongoDB.html",{loader:()=>a(()=>import("./2024-07-14-Insert Array Inside an Object in MongoDB.html-BIXvmG48.js"),__vite__mapDeps([930,1])),meta:{d:17209152e5,l:"2024年7月14日",c:["Java","MongoDB"],g:["MongoDB Shell","Java Driver","Document","Array"],e:`
<p>MongoDB 是最受欢迎的开源分布式文档导向型NoSQL数据库。MongoDB中的一个文档是一个具有字段和值对的JSON类对象的数据结构。</p>
<p>为了将文档插入MongoDB集合中，我们可以使用不同的方法，如_insert()_、_insertOne()<em>和_insertMany()</em>。</p>
<p>本教程将讨论如何在MongoDB文档中插入数组。首先，我们将查看如何使用MongoDB Shell查询将数组插入文档。然后，我们将使用MongoDB Java驱动程序代码。</p>
<h2>2. 数据库初始化</h2>
<p>在我们继续插入查询之前，让我们首先创建一个数据库。让我们称它为_baeldung_。我们还将创建一个名为_student_的示例集合：</p>`,r:{minutes:4.26,words:1277},t:"MongoDB中在对象内插入数组 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-14/2024-07-14-Java%20Program%20to%20Find%20the%20Roots%20of%20a%20Quadratic%20Equation.html",{loader:()=>a(()=>import("./2024-07-14-Java Program to Find the Roots of a Quadratic Equation.html-BFPMy5JA.js"),__vite__mapDeps([931,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","算法"],g:["二次方程根","算法实现"],e:`
<p>在这篇文章中，我们将看到如何在Java中计算二次方程的解。我们将首先定义什么是二次方程，然后无论是在实数还是复数系统中，我们都会计算它的解。</p>
<h2>1. 概述</h2>
<h2>2. 二次方程的解</h2>
<p>给定实数a ≠ 0, b和c，让我们考虑以下的二次方程：[ ax^2 + bx + c = 0 ]。</p>
<h3>2.1. 多项式的根</h3>
<p>这个方程的解也被称为多项式[ ax^2 + bx + c ]的根。因此，让我们定义一个_Polynom_类。如果系数_a_等于0，我们将抛出一个_IllegalArgumentException_：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Polynom</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> a<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> b<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> c<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Polynom</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">,</span> <span class="token keyword">double</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"a不能等于0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> b<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>c <span class="token operator">=</span> c<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// getters 和 setters</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:3.22,words:966},t:"Java程序计算二次方程的根",y:"a"}}],["/posts/baeldung/2024-07-14/2024-07-14-Java%20Scanner%20Taking%20a%20Character%20Input.html",{loader:()=>a(()=>import("./2024-07-14-Java Scanner Taking a Character Input.html-BfQHS6K5.js"),__vite__mapDeps([932,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Tutorial"],g:["Scanner","Character Input"],e:`<hr>
<h1>Java Scanner 类接收字符输入</h1>
<h2>1. 概述</h2>
<p>在本教程中，我们将看到如何使用 <em>Scanner</em> 类接收字符输入。</p>
<h2>2. 扫描字符</h2>
<p><strong>Java <em>Scanner</em> 没有提供类似于 <em>nextInt()</em>, <em>nextLine()</em> 等的方法来接收字符输入。</strong></p>
<p>我们可以使用几种方法使用 <em>Scanner</em> 接收字符输入。</p>
<p>让我们首先创建一个输入字符串：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"abc\\n"</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"mno\\n"</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"xyz\\n"</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:1.45,words:434},t:"Java Scanner 类接收字符输入",y:"a"}}],["/posts/baeldung/2024-07-14/2024-07-14-Set%20vs%20List%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-14-Set vs List in Java.html-BpShSorX.js"),__vite__mapDeps([933,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java Collections","Data Structures"],g:["Set","List"],e:`
<p>在本教程中，我们将通过一个简单的例子讨论Java中Set和List的差异。此外，我们还将从性能和内存分配的角度比较这两种数据结构。</p>
<h2>2. 概念差异</h2>
<p>List和Set都是Java Collections的成员。然而，它们之间有一些重要的区别：</p>
<ul>
<li>List可以包含重复项，但Set不能。</li>
<li>List会保留插入顺序，但Set可能保留也可能不保留。</li>
<li>由于Set可能不保留顺序，因此它不允许像List那样基于索引的访问。</li>
</ul>
<p>请注意，有一些Set接口的实现确实保留了顺序，例如LinkedHashSet。</p>`,r:{minutes:5.96,words:1787},t:"Java中的Set与List对比",y:"a"}}],["/posts/baeldung/2024-07-14/2024-07-14-Static%20Fields%20and%20Garbage%20Collection.html",{loader:()=>a(()=>import("./2024-07-14-Static Fields and Garbage Collection.html-CDr-ylfP.js"),__vite__mapDeps([934,1])),meta:{d:1662336e6,l:"2022年9月5日",c:["Java","Garbage Collection"],g:["Java","Static Fields","Garbage Collection"],e:`<hr>
<h1>Java中的静态字段和垃圾回收</h1>
<h2>1. 引言</h2>
<p>在本教程中，我们将学习垃圾回收器如何处理静态字段。同时，我们还将涉及类加载和类对象等主题。阅读本文后，我们将更好地理解类、类加载器和静态字段之间的联系，以及垃圾回收器如何处理它们。</p>
<h2>2. Java中垃圾回收概述</h2>
<p>Java提供了一个相当不错的自动内存管理特性。在大多数情况下，这种方法不如手动管理高效。然而，它有助于避免难以调试的问题，并减少了样板代码。随着垃圾回收的改进，这个过程变得越来越好。因此，我们应该回顾一下垃圾回收器的工作原理以及我们应用程序中的垃圾是什么。</p>`,r:{minutes:6.54,words:1963},t:"Java中的静态字段和垃圾回收",y:"a"}}],["/posts/baeldung/2024-07-14/2024-07-14-String%20Concatenation%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-14-String Concatenation in Java.html-DqU3E4uF.js"),__vite__mapDeps([935,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","String Concatenation"],g:["Java","String","Concatenation"],e:`<hr>
<h1>Java中的字符串拼接</h1>
<p>在Java中，字符串拼接是最常用的操作之一。本教程将介绍一些字符串拼接的方法，重点描述如何使用_concat()<em>和“</em>+_”运算符方法。最后，我们将讨论如何根据需要选择正确的方法。</p>
<h3>2.1 使用“<em>+</em>”运算符</h3>
<p>在Java中，使用“<em>+</em>”运算符是最常见的字符串拼接方法之一。</p>
<p>“<em>+</em>”运算符在字符串拼接方面比其他方法提供了更多的灵活性。首先，它不会因空值而抛出任何异常。其次，它将空值转换为其字符串表示形式。我们还可以使用它来连接两个以上的字符串。</p>`,r:{minutes:4.71,words:1412},t:"Java中的字符串拼接",y:"a"}}],["/posts/baeldung/2024-07-14/2024-07-14-The%20Proxy%20Pattern%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-14-The Proxy Pattern in Kotlin.html-qX64VO7N.js"),__vite__mapDeps([936,1])),meta:{d:17067456e5,l:"2024年2月1日",c:["Kotlin","设计模式"],g:["Kotlin","代理模式","设计模式"],e:`
<p>设计模式在创建健壮、可维护和可扩展的代码中起着关键作用。其中，代理模式因其多功能性和实用性而脱颖而出。</p>
<p>在本教程中，我们将深入探讨代理模式，探索其定义、用例和在Kotlin中的实现。</p>
<h2>理解代理模式</h2>
<p><strong>代理模式是一种结构型设计模式，它为另一个对象提供了一个代理或占位符来控制对其的访问</strong>。这个代理允许在实际对象的方法调用之前、之后或周围添加行为。代理模式在需要控制访问、管理资源或在不修改现有代码的情况下添加功能的场景中被广泛使用。</p>
<h2>代理模式的变体</h2>
<p>让我们探索代理模式的几个变体。</p>`,r:{minutes:6.75,words:2026},t:"Kotlin中的代理模式",y:"a"}}],["/posts/baeldung/2024-07-14/2024-07-14-TriFunction%20Interface%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-14-TriFunction Interface in Java.html-D_s5imtP.js"),__vite__mapDeps([937,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Functional Programming"],g:["TriFunction","FunctionalInterface","Java 8"],e:`
<h2>1. 概述</h2>
<p>在本文中，我们将定义一个_TriFunction_ <em>FunctionalInterface</em>，它表示一个接受三个参数并计算结果的函数。稍后，我们还将看到一个使用Vavr库内置_Function3_的例子。</p>
<h2>2. 创建我们自己的_TriFunction_接口</h2>
<p>自Java 8版本以来，Java定义了_BiFunction FunctionalInterface_。它代表一个接受两个参数并计算结果的函数。为了允许函数组合，它还提供了一个_andThen()_方法，该方法将另一个_Function_应用于_BiFunction_的结果。</p>`,r:{minutes:2.37,words:711},t:"Java中的TriFunction接口 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-14/2024-07-14-Using%20HAProxy%20as%20an%20API%20Gateway%20for%20Routing%20and%20Rate%20Limiting.html",{loader:()=>a(()=>import("./2024-07-14-Using HAProxy as an API Gateway for Routing and Rate Limiting.html-BFbXT5zi.js"),__vite__mapDeps([938,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["DevOps"],g:["HAProxy","API Gateway"],e:`
<p>在这个教程中，我们将学习如何使用HAProxy作为API网关进行路由和限流。</p>
<p>API网关是一个位于客户端和众多后端服务之间的应用程序。它像一个反向代理那样运作。它可以将API调用路由到相应的服务。此外，它还能够承担许多责任，例如保护服务、限制API调用的频率、监控流量，有时还进行负载均衡。</p>
<p>HAProxy是一个开源的软件负载均衡器和应用交付控制器。它非常高效，在行业中广泛使用。</p>
<p>在接下来的部分中，我们将配置HAProxy，使其作为API网关运作。</p>
<h3>3.1. 基本配置</h3>
<p>HAProxy的基本配置是作为一个负载均衡器。我们将为示例定义_frontend_和_backend_：</p>`,r:{minutes:5.73,words:1719},t:"使用HAProxy作为API网关进行路由和限流",y:"a"}}],["/posts/baeldung/2024-07-14/2024-07-14-What%20Is%20the%20null%20Type%20in%20Java%20.html",{loader:()=>a(()=>import("./2024-07-14-What Is the null Type in Java .html-BePrVvmB.js"),__vite__mapDeps([939,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Tutorials"],e:`
<p>在Java的世界里，_null_类型无处不在，很难在使用这门语言时不遇到它。在大多数情况下，直观地理解它代表虚无或缺乏某物就足以有效编程。然而，有时我们想要深入挖掘并彻底理解这个话题。</p>
<p>在本教程中，我们将看看_null_类型在底层是如何工作的，以及它与其他类型的关系。</p>
<p>在我们回答关于_null_类型的具体问题之前，我们需要定义什么是类型。这不是一个容易的任务，因为有很多竞争性的定义。对我们来说最有用的定义是值空间的定义。在那个定义中，<strong>类型由它可以持有的可能值的集合来定义</strong>。</p>
<p>假设我们想声明一个_boolean_变量：</p>`,r:{minutes:3.72,words:1115},t:"Java中的null类型是什么？",y:"a"}}],["/posts/baeldung/2024-07-14/2024-07-14-Writing%20a%20List%20of%20Strings%20Into%20a%20Text%20File.html",{loader:()=>a(()=>import("./2024-07-14-Writing a List of Strings Into a Text File.html-BsIw35gE.js"),__vite__mapDeps([940,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","I/O"],g:["Java","List","File","FileWriter","BufferedWriter","Files.writeString"],e:`<hr>
<h1>Java中将字符串列表写入文本文件的几种方式</h1>
<p>在这篇快速教程中，我们将探讨在Java中以不同的方式将字符串列表写入文本文件。首先，我们将讨论FileWriter，然后是BufferedWriter，最后是Files.writeString。java.io包中包含一个FileWriter类，我们可以使用它来将字符数据写入文件。如果我们查看层次结构，我们将看到FileWriter类扩展了OutputStreamWriter类，后者又扩展了Writer类。</p>
<p>让我们看看可用于初始化FileWriter的构造函数：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>FileWriter f = new FileWriter(File file);
FileWriter f = new FileWriter(File file, boolean append);
FileWriter f = new FileWriter(FileDescriptor fd);
FileWriter f = new FileWriter(File file, Charset charset);
FileWriter f = new FileWriter(File file, Charset charset, boolean append);
FileWriter f = new FileWriter(String fileName);
FileWriter f = new FileWriter(String fileName, Boolean append);
FileWriter f = new FileWriter(String fileName, Charset charset);
FileWriter f = new FileWriter(String fileName, Charset charset, boolean append);
</code></pre></div>`,r:{minutes:3.9,words:1170},t:"Java中将字符串列表写入文本文件的几种方式",y:"a"}}],["/posts/baeldung/2024-07-15/2024-07-15-Algorithm%20to%20Identify%20and%20Validate%20a%20Credit%20Card%20Number.html",{loader:()=>a(()=>import("./2024-07-15-Algorithm to Identify and Validate a Credit Card Number.html-DaC8U39h.js"),__vite__mapDeps([941,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Algorithm","Java"],g:["Credit Card Validation","Luhn Algorithm"],e:`
<p>在本文中，我们将学习如何使用正则表达式从信用卡号识别信用卡类型。然后，我们将了解Luhn算法以及如何使用它来检查信用卡号是否有效。</p>
<h2>2. 卡号前几位告诉我们什么？</h2>
<p>主账号号码（PAN）是信用卡号的另一个名称。</p>
<p><strong>PAN通常为16位数字长</strong>，尽管根据发卡机构的不同，数字的数量可能会有所变化。</p>
<p>目前，<strong>发卡机构识别号（IIN）是PAN的前六位数字</strong>。它由一个前导数字和五个数字组成。</p>
<p>需要强调的是，这是目前的情况，因为未来可能会发生变化。早在2015年就开始工作，将IIN增加到前八位数字。</p>`,r:{minutes:7.36,words:2207},t:"通过算法识别和验证信用卡号码",y:"a"}}],["/posts/baeldung/2024-07-15/2024-07-15-Apache%20Camel%20Conditional%20Routing.html",{loader:()=>a(()=>import("./2024-07-15-Apache Camel Conditional Routing.html-BwiVBhxX.js"),__vite__mapDeps([942,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring","Apache Camel"],g:["Conditional Routing","Message Routing"],e:`<hr>
<h1>Apache Camel 条件路由 | Baeldung</h1>
<h2><strong>1. 概述</strong></h2>
<p>Apache Camel 是一个功能强大的开源集成框架，实现了多种已知的企业集成模式。</p>
<p>通常在使用 Camel 进行消息路由时，我们希望根据消息内容以不同的方式处理消息。为此，Camel 提供了一个强大的特性，称为基于内容的路由器，它来自 EIP 模式集合。</p>
<p>在本教程中，<strong>我们将探讨几种基于某些条件路由消息的方法。</strong></p>
<h2><strong>2. 依赖项</strong></h2>`,r:{minutes:5.41,words:1624},t:"Apache Camel 条件路由 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-15/2024-07-15-Armstrong%20Numbers%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-15-Armstrong Numbers in Java.html-CUtCQ_CL.js"),__vite__mapDeps([943,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Armstrong Numbers"],g:["Java","Armstrong Numbers","数学"],e:`
<p>在这个快速教程中，我们将学习什么是阿姆斯特朗数，以及如何通过创建一个Java程序来检查和找到它们。</p>
<h2>2. 问题介绍</h2>
<p>首先，让我们了解什么是阿姆斯特朗数。</p>
<p><strong>给定一个正整数 <em>i</em>，如果它有 <em>n</em> 位数字，并且 <em>i</em> 等于其各位数字的 <em>n</em> 次幂之和，则整数 <em>i</em> 是一个阿姆斯特朗数。</strong> 阿姆斯特朗数形成了OEIS序列A005188。</p>
<p>一些例子可能有助于我们快速理解阿姆斯特朗数：</p>
<ul>
<li><em>1</em>：<em>pow(1,1) = 1</em> -&gt; 1是一个阿姆斯特朗数。</li>
<li><em>123</em>：<em>pow(1, 3) + pow(2, 3) + pow(3, 3) = 1 + 8 + 27 = 36 != 123</em> -&gt; 123不是阿姆斯特朗数。</li>
<li><em>1634</em>：<em>pow(1, 4) + pow(6, 4) + pow(3, 4) + pow(4, 4) = 1 + 1296 + 81 + 256 = 1643</em> -&gt; 1634是一个阿姆斯特朗数。</li>
</ul>`,r:{minutes:4.44,words:1332},t:"Java中的阿姆斯特朗数",y:"a"}}],["/posts/baeldung/2024-07-15/2024-07-15-Check%20if%20a%20Number%20Is%20Positive%20or%20Negative%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-15-Check if a Number Is Positive or Negative in Java.html-zuH8rYOD.js"),__vite__mapDeps([944,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Programming"],g:["Java","Number","Positive","Negative"],e:`
<p>在Java中，当我们使用诸如_Integer_、<em>Long</em>、_Float_和_Double_这样的类型时，我们经常需要检查这些数字是正数还是负数。这是一种基本且常见的数字操作。</p>
<p>在本快速教程中，我们将讨论如何检查给定的数字是正数还是负数。</p>
<h3>2. 问题介绍</h3>
<p>检查一个数字是正数还是负数是一个相当直接的问题。然而，在我们开始查看实现之前，让我们先理解正数和负数的定义。</p>
<p>给定一个实数_n_，如果_n_大于零，它就是正数。否则，如果_n_小于零，它就是负数。所以，我们还有一个特殊情况：零。<strong>零既不是正数也不是负数</strong>。</p>`,r:{minutes:2.87,words:862},t:"Java中检查数字是正数还是负数",y:"a"}}],["/posts/baeldung/2024-07-15/2024-07-15-Compare%20Characters%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-15-Compare Characters in Java.html-CQKjLgah.js"),__vite__mapDeps([945,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Programming"],g:["Java","Character Comparison"],e:`
<p>在这篇简短的教程中，我们将探讨在Java中比较字符的不同方式。</p>
<p>我们将首先讨论如何比较原始字符。然后，我们将查看比较_Character_对象的不同方法。</p>
<h2>1. 原始字符比较</h2>
<p>首先，让我们开始强调如何比较原始字符。</p>
<h3>1.1 使用关系运算符</h3>
<p>通常，比较字符的最简单方式是使用关系运算符。</p>
<p>简而言之，Java中字符的比较取决于它们的ASCII码顺序：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token char">'a'</span> <span class="token operator">==</span> <span class="token char">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token char">'a'</span> \`<span class="token operator">&lt;</span> <span class="token char">'v'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token char">'F'</span> <span class="token operator">&gt;</span>\` <span class="token char">'D'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:2.06,words:619},t:"Java中比较字符的方法",y:"a"}}],["/posts/baeldung/2024-07-15/2024-07-15-Connect%20to%20Multiple%20Databases%20Using%20Spring%20Data%20MongoDB.html",{loader:()=>a(()=>import("./2024-07-15-Connect to Multiple Databases Using Spring Data MongoDB.html-DZJoe3Ji.js"),__vite__mapDeps([946,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Data MongoDB","MongoDB"],g:["Spring Boot","MongoDB","Configuration"],e:'\n<p>在使用Spring Data MongoDB时，我们可以创建一个_MongoClient_来对数据库执行操作。然而，有时我们的应用程序可能需要使用多个数据库。</p>\n<p>本教程中，<strong>我们将创建多个连接到MongoDB的连接。我们还将添加一些Spring Boot测试来模拟此场景。</strong></p>\n<h3>2.1. 依赖设置</h3>\n<p>让我们从向_pom.xml_添加依赖开始。首先，我们需要一个spring boot starter：</p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>`\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```org.springframework.boot```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```spring-boot-starter-parent```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span> <span class="token punctuation">/&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>`\n</code></pre></div>',r:{minutes:4.13,words:1240},t:"使用Spring Data MongoDB连接到多个数据库",y:"a"}}],["/posts/baeldung/2024-07-15/2024-07-15-Debugging%20an%20Application%20Running%20in%20Docker%20With%20IntelliJ%20IDEA.html",{loader:()=>a(()=>import("./2024-07-15-Debugging an Application Running in Docker With IntelliJ IDEA.html-CShxxbwH.js"),__vite__mapDeps([947,1])),meta:{d:1659312e6,l:"2022年8月1日",c:["Docker","IntelliJ IDEA"],g:["Debugging","Docker","Java"],e:`
<p>在本教程中，我们将看到如何在IntelliJ IDEA中调试Docker容器。我们假设已经准备好了用于测试的Docker镜像。构建Docker镜像有多种方法。</p>
<p>IntelliJ可以从未官方网站下载。</p>
<p>对于本文，我们将参考这个基于单个类的Java应用程序。它可以很容易地被docker化、构建和测试。</p>
<p>在开始测试之前，我们需要确保Docker引擎已在我们的计算机上启动并运行。</p>
<h3>2. 使用_Dockerfile_配置</h3>
<p>当使用Docker文件配置时，我们只需要选择我们的_Dockerfile_并为镜像名称、镜像标签、容器名称和配置名称提供适当的名称。如果有任何端口映射，我们也可能会添加：</p>`,r:{minutes:2.89,words:868},t:"在IntelliJ IDEA中调试运行在Docker中的应用程序",y:"a"}}],["/posts/baeldung/2024-07-15/2024-07-15-Define%20an%20Array%20of%20Varying%20Types%20in%20OpenAPI.html",{loader:()=>a(()=>import("./2024-07-15-Define an Array of Varying Types in OpenAPI.html-CoHg4H6L.js"),__vite__mapDeps([948,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["OpenAPI","API设计"],g:["OpenAPI","API"],e:`
<p>OpenAPI规范，以前称为Swagger规范，有助于以标准化、机器可读的方式描述API。</p>
<p><strong>在本教程中，我们将学习如何使用OpenAPI规范定义不同类型的数组。</strong> 我们将在整篇文章中使用OpenAPI v3的特性。</p>
<p>首先，让我们定义我们将在文章中使用的例子。我们假设我们要定义一个数组，包含以下两个对象，分别代表一只狗和一只狮子：</p>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token comment">#狗</span>
<span class="token key atrule">type</span><span class="token punctuation">:</span> object
<span class="token key atrule">properties</span><span class="token punctuation">:</span>
  <span class="token key atrule">barks</span><span class="token punctuation">:</span>
    <span class="token key atrule">type</span><span class="token punctuation">:</span> boolean
  <span class="token key atrule">likesSticks</span><span class="token punctuation">:</span>
    <span class="token key atrule">type</span><span class="token punctuation">:</span> boolean
<span class="token comment">#狮子</span>
<span class="token key atrule">type</span><span class="token punctuation">:</span> object
<span class="token key atrule">properties</span><span class="token punctuation">:</span>
  <span class="token key atrule">roars</span><span class="token punctuation">:</span>
    <span class="token key atrule">type</span><span class="token punctuation">:</span> boolean
  <span class="token key atrule">likesMeat</span><span class="token punctuation">:</span>
    <span class="token key atrule">type</span><span class="token punctuation">:</span> boolean
</code></pre></div>`,r:{minutes:2.31,words:692},t:"使用OpenAPI定义不同类型数组",y:"a"}}],["/posts/baeldung/2024-07-15/2024-07-15-Difference%20Between%20Arrays.asList%20%20%20and%20List.of%20%20.html",{loader:()=>a(()=>import("./2024-07-15-Difference Between Arrays.asList   and List.of  .html-Dt_IxHYj.js"),__vite__mapDeps([949,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Collections"],g:["Arrays.asList()","List.of()"],e:'\n<p>在Java中，有时我们需要创建一个小列表或为了方便将数组转换为列表。Java为此提供了一些辅助方法。</p>\n<p>在本教程中，我们将比较初始化小型临时数组的两种主要方式：_List.of()<em>和_Array.asList()</em>。</p>\n<h2>使用_Arrays.asList()_</h2>\n<p>_Arrays.asList()_是在Java 1.2中引入的，它简化了_List_对象的创建，_List_是_Java Collections Framework_的一部分。它可以将数组作为输入并创建提供的数组的_List_对象：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token class-name">List</span>``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>`````` list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">assertThat</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">containsExactly</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div>',r:{minutes:2.44,words:732},t:"Java中Arrays.asList()与List.of()的区别",y:"a"}}],["/posts/baeldung/2024-07-15/2024-07-15-Feign%20Client%20Exception%20Handling.html",{loader:()=>a(()=>import("./2024-07-15-Feign Client Exception Handling.html-D_thJc-P.js"),__vite__mapDeps([950,1])),meta:{d:17210016e5,l:"2024年7月15日",c:["Java","Spring Cloud"],g:["Feign","Exception Handling"],e:`
<p>在本教程中，我们将演示如何在 Feign 中处理异常。Feign 是微服务开发者的强大工具，它支持 <strong><em>ErrorDecoder</em> 和 <em>FallbackFactory</em> 用于异常处理</strong>。</p>
<h2><strong>2. Maven 依赖</strong></h2>
<p>首先，让我们通过包含 <em>spring-cloud-starter-openfeign</em> 创建一个 Spring Boot 项目。<strong><em>spring-cloud-starter-openfeign</em> 包含了它内部的 <em>feign-core</em> 依赖</strong>：</p>`,r:{minutes:2.58,words:774},t:"Feign 客户端异常处理",y:"a"}}],["/posts/baeldung/2024-07-15/2024-07-15-How%20to%20Fix%20Git%20%20Refusing%20to%20Merge%20Unrelated%20Histories%20.html",{loader:()=>a(()=>import("./2024-07-15-How to Fix Git  Refusing to Merge Unrelated Histories .html-CMurSZP9.js"),__vite__mapDeps([951,1])),meta:{d:17210016e5,l:"2024年7月15日",c:["DevOps","Git"],g:["Git","Merge","Error"],e:`
<p>如果你在 DevOps 生态系统中有几年的经验，并且有兴趣与社区分享这些经验，请查看我们的 <strong>贡献指南</strong>。</p>
<h2>1. 概述</h2>
<p>在 Git 中，有时会遇到分支没有共同的历史基础的情况。因此，如果我们尝试合并它们，我们会得到 <em>“拒绝合并不相关的历史”</em> 错误。在本教程中，我们将讨论如何修复这个错误以及如何在未来的项目中避免这个错误。</p>
<p>让我们看看分支具有不相关历史的情况。 <strong>具有不相关历史基础的最常见原因是彼此独立地开始分支。</strong> 例如，如果我们在本地机器上启动一个新的 Git 项目，然后将其连接到远程 GitHub 分支，这些分支将具有不同的历史基础。</p>`,r:{minutes:2.43,words:729},t:"如何修复 Git “拒绝合并不相关的历史”错误 | Baeldung 运维教程",y:"a"}}],["/posts/baeldung/2024-07-15/2024-07-15-How%20to%20Parse%20an%20INI%20File%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-15-How to Parse an INI File in Java.html-kUZmJV_A.js"),__vite__mapDeps([952,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","INI文件解析"],g:["INI文件","Java解析","库","Apache Commons","ini4j"],e:`
<p>INI文件是Windows或MS-DOS的初始化或配置文件。它们具有纯文本内容，由节中的键值对组成。虽然我们可能更倾向于使用Java的原生.properties文件或其他格式来配置我们的应用程序，但有时我们可能需要从现有的INI文件中获取数据。</p>
<p>在本教程中，我们将查看一些可以帮助我们的库。我们还将查看如何使用INI文件中的数据来填充POJO。</p>
<h2>2. 创建一个示例INI文件</h2>
<p>让我们从一个示例INI文件开始，<em>sample.ini</em>：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>; 16位应用程序支持
[fonts]
letter=bold
text-size=28

[background]
color=white

[RequestResult]
RequestCode=1

[ResponseResult]
ResultCode=0
</code></pre></div>`,r:{minutes:5.77,words:1730},t:"如何在Java中解析INI文件",y:"a"}}],["/posts/baeldung/2024-07-15/2024-07-15-List%20All%20Factors%20of%20a%20Number%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-15-List All Factors of a Number in Java.html-Bchz7woR.js"),__vite__mapDeps([953,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Programming"],g:["Java","Factors","Optimization"],e:`
<h2>1. 概述</h2>
<p>在本教程中，我们将编写一个Java程序来找出给定整数的所有因子。</p>
<h2>2. 问题介绍</h2>
<p>在我们开始编写Java代码之前，让我们先理解一下整数的因子是什么。</p>
<p><strong>给定一个整数n，如果整数i能够完全整除n，则i是n的因子。</strong> 完全整除意味着当我们用i除以n时，余数为零。</p>
<p>一些例子可能可以快速解释：</p>
<ul>
<li>n = 10，它的因子：1, 2, 5, 和 10</li>
<li>n = 13，它的因子：1 和 13</li>
<li>n = 1，n只有一个因子：1</li>
<li>n = 0，零没有因子</li>
</ul>`,r:{minutes:5.21,words:1563},t:"Java中列出一个整数的所有因子",y:"a"}}],["/posts/baeldung/2024-07-15/2024-07-15-Make%20Division%20of%20Two%20Integers%20Result%20in%20a%20Float.html",{loader:()=>a(()=>import("./2024-07-15-Make Division of Two Integers Result in a Float.html-CBH-mDJ5.js"),__vite__mapDeps([954,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java"],g:["Java","整数除法","浮点数结果"],e:`
<h2>1. 概述</h2>
<p>在Java中，我们可以使用除法运算符（/）来将左侧的值除以右侧的值。例如，<code>int number = 10 / 5</code>。</p>
<p>在这个快速教程中，我们将探讨如何从整数除法操作中得到一个浮点数结果。</p>
<h2>2. 问题的介绍</h2>
<p>首先，为了简单起见，我们将在这个教程中使用单元测试断言来验证计算结果。</p>
<p>我们可能已经意识到，当我们像<code>a/b</code>这样对两个整数应用除法运算符时，即使<code>a</code>不能被<code>b</code>整除，它总是返回一个整数，例如：</p>
`,r:{minutes:5.98,words:1793},t:"Java中整数除法得到浮点数结果",y:"a"}}],["/posts/baeldung/2024-07-15/2024-07-15-Multitenancy%20With%20Spring%20Data%20JPA.html",{loader:()=>a(()=>import("./2024-07-15-Multitenancy With Spring Data JPA.html-LkWAjMxH.js"),__vite__mapDeps([955,1])),meta:{d:1659312e6,l:"2022年8月1日",c:["Spring Data JPA","多租户"],g:["Spring Boot","多租户架构","数据库"],e:`
<p>多租户是指一个软件应用实例服务于多个租户或客户。它确保了租户之间所需的隔离程度，使得租户使用的数据和资源与其他租户分离。本教程将展示如何在Spring Boot应用程序中使用Spring Data JPA配置多租户，同时使用JWT为租户添加安全性。</p>
<h2>2. 多租户模型</h2>
<p>多租户系统主要有三种方法：</p>
<ul>
<li>独立数据库</li>
<li>共享数据库和独立架构</li>
<li>共享数据库和共享架构</li>
</ul>
<h3>2.1. 独立数据库</h3>
<p>在这种方法中，每个租户的数据保存在独立的数据库实例中，与其他租户隔离。这也被称为“每个租户一个数据库”：<img src="https://www.baeldung.com/wp-content/uploads/2022/08/database_per_tenant.png" alt="img" loading="lazy"></p>`,r:{minutes:9.16,words:2749},t:"Spring Data JPA 多租户支持",y:"a"}}],["/posts/baeldung/2024-07-15/2024-07-15-PKCE%20Support%20for%20Secret%20Clients%20with%20Spring%20Security.html",{loader:()=>a(()=>import("./2024-07-15-PKCE Support for Secret Clients with Spring Security.html-CbG_dQiT.js"),__vite__mapDeps([956,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Security","OAuth"],g:["PKCE","Secret Clients"],e:`<hr>
<h1>使用Spring Security为有密钥客户端支持PKCE</h1>
<p>如果你正在处理Spring Security（特别是OAuth）实现，一定要看看《学习Spring安全》课程。</p>
<h2>1. 引言</h2>
<p>在本教程中，我们将展示如何在Spring Boot有密钥客户端应用程序中使用PKCE。</p>
<h2>2. 背景</h2>
<p>代码交换证明密钥（PKCE）是针对公共客户端（通常是SPA Web应用程序或移动应用程序）的OAuth协议的扩展。<strong>它作为授权码授权流程的一部分，并有助于减轻恶意第三方的一些攻击</strong>。</p>`,r:{minutes:6.63,words:1990},t:"使用Spring Security为有密钥客户端支持PKCE",y:"a"}}],["/posts/baeldung/2024-07-15/2024-07-15-Reading%20JSON%20From%20a%20URL%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-15-Reading JSON From a URL in Java.html-BuJKv48d.js"),__vite__mapDeps([957,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","JSON"],g:["Java","JSON","URL","HTTP","HttpClient","Jackson","ObjectMapper"],e:`
<h2>1. 引言</h2>
<p>在本快速教程中，我们将创建能够从任何URL读取JSON数据的方法。我们将从使用Java核心类开始，然后使用一些库来简化我们的代码。</p>
<h2>2. 使用Java核心类</h2>
<p>在Java中从URL读取数据的最简单方法之一是使用_URL_类。要使用它，我们对_URL_打开一个输入流，创建一个输入流读取器，然后读取所有字符。我们将这些字符追加到一个_StringBuilder_，然后将其作为_String_返回：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">stream</span><span class="token punctuation">(</span><span class="token class-name">URL</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">InputStream</span> input <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">openStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">InputStreamReader</span> isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>isr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">StringBuilder</span> json <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> c<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            json<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> json<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:3.18,words:953},t:"在Java中从URL读取JSON数据",y:"a"}}],["/posts/baeldung/2024-07-15/2024-07-15-Remove%20the%20Last%20Character%20of%20a%20Java%20StringBuilder.html",{loader:()=>a(()=>import("./2024-07-15-Remove the Last Character of a Java StringBuilder.html-CTWp4AYS.js"),__vite__mapDeps([958,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","StringBuilder"],g:["Java","StringBuilder","删除字符"],e:`
<p>当我们想在Java中构建一个字符串时，我们通常会选择方便的_StringBuilder_来完成这项工作。</p>
<p>假设我们有一个包含一些字符串片段的_StringBuilder_序列，我们想要从中删除最后一个字符。在这个快速教程中，我们将探索三种实现方法。</p>
<h2>2. 使用_StringBuilder_的_deleteCharAt()_方法</h2>
<p>_StringBuilder_类有一个_deleteCharAt()_方法。它允许我们删除指定位置的字符。</p>
<p><strong>_deleteCharAt()_方法只有一个参数：我们想要删除的字符索引。</strong></p>`,r:{minutes:2.76,words:829},t:"删除Java StringBuilder中的最后一个字符",y:"a"}}],["/posts/baeldung/2024-07-15/2024-07-15-Spring%20JDBC%20Batch%20Inserts.html",{loader:()=>a(()=>import("./2024-07-15-Spring JDBC Batch Inserts.html-D5yDf2mx.js"),__vite__mapDeps([959,1])),meta:{d:1721088e6,l:"2024年7月16日",c:["Spring","JDBC"],g:["Batch Inserts","Performance"],e:`<hr>
<h1>Spring JDBC批量插入操作</h1>
<p>在本教程中，我们将学习如何使用Spring JDBC批量支持有效地将大量数据插入我们的目标关系数据库管理系统(RDBMS)，并比较使用批量插入与多个单独插入的性能差异。</p>
<h2>2. 理解批量处理</h2>
<p>一旦我们的应用程序建立与数据库的连接，我们可以一次性执行多个SQL语句，而不是逐个发送每个语句。这样，我们显著减少了通信开销。</p>
<p>实现此目的的一个选项是使用Spring JDBC API，这是以下部分的重点。</p>
<h3>2.1. 支持的数据库</h3>
<p>尽管JDBC API提供了批量功能，但我们使用的底层JDBC驱动程序实际上是否实现了这些API并支持此功能并不保证。</p>`,r:{minutes:5.47,words:1640},t:"Spring JDBC批量插入操作",y:"a"}}],["/posts/baeldung/2024-07-15/2024-07-15-Swagger%20%20Specify%20Two%20Responses%20with%20the%20Same%20Response%20Code.html",{loader:()=>a(()=>import("./2024-07-15-Swagger  Specify Two Responses with the Same Response Code.html-BgarDDuj.js"),__vite__mapDeps([960,1])),meta:{d:1659312e6,l:"2022年8月1日",c:["OpenAPI","Swagger"],g:["API","Java","YAML"],e:`<hr>
<h1>Swagger：指定同一响应代码的两个响应</h1>
<p>在本文中，我们将编写一个允许为同一响应代码返回两个不同对象的API规范。我们将演示如何使用该规范生成Java代码和Swagger文档。</p>
<h2>2. 问题介绍</h2>
<p>让我们定义两个对象。一辆汽车（Car）具有所有者和车牌作为属性，两者都是字符串类型。另一方面，自行车（Bike）具有所有者和速度。速度是一个整数。</p>
<p>使用OpenAPI，这些定义对应于以下描述：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>Car:
  type: object
  properties:
    owner:
      type: string
    plate:
      type: string
Bike:
  type: object
  properties:
    owner:
      type: string
    speed:
      type: integer
</code></pre></div>`,r:{minutes:5.48,words:1644},t:"Swagger：指定同一响应代码的两个响应",y:"a"}}],["/posts/baeldung/2024-07-15/2024-07-15-Toggle%20a%20Boolean%20Variable%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-15-Toggle a Boolean Variable in Java.html-DSLe6wcq.js"),__vite__mapDeps([961,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java"],g:["布尔变量","取反"],e:`
<p>布尔是Java中的基本数据类型。通常，它只能有两个值，<em>true_或_false</em>。</p>
<p>在本教程中，我们将讨论如何切换给定布尔变量的值。</p>
<h2>2. 问题介绍</h2>
<p>这个问题相当直接。简单来说，我们想要反转布尔变量的值。例如，切换后_true_变为_false_。</p>
<p>然而，<strong>我们应该注意Java中有两种“不同”的布尔类型，原始的_boolean_和包装的_Boolean_。</strong> 因此，理想的切换方法应该适用于两种类型。</p>
<p>在本教程中，我们将讨论如何实现这样的方法。</p>
<p>另外，为了简单起见，我们将使用单元测试断言来验证我们的实现是否符合预期。</p>`,r:{minutes:3.15,words:945},t:"Java中切换布尔变量",y:"a"}}],["/posts/baeldung/2024-07-15/2024-07-15-What%20Is%20%20Locked%20Ownable%20Synchronizers%20%20in%20Thread%20Dump%20.html",{loader:()=>a(()=>import("./2024-07-15-What Is  Locked Ownable Synchronizers  in Thread Dump .html-DM3uAYOA.js"),__vite__mapDeps([962,1])),meta:{d:16803072e5,l:"2023年4月1日",c:["Concurrency","Java"],g:["Thread Dump","Deadlock"],e:`
<p>在本教程中，我们将探讨线程的锁定可拥有同步器的含义。我们将编写一个使用_Lock_进行同步的简单程序，并查看在线程转储中它看起来如何。</p>
<p>每个线程可能有一个同步器对象列表。该列表中的条目表示线程已获取锁的可拥有同步器。</p>
<p>_AbstractOwnableSynchronizer_类的实例可以用作同步器。它最常见的子类是_Sync_类，这是如_ReentrantReadWriteLock_等_Lock_接口实现的字段。</p>
<p>当我们调用_ReentrantReadWriteLock.lock()_方法时，内部代码将此委托给_Sync.lock()_方法。<strong>一旦我们获取了锁，Lock对象就会被添加到线程的锁定可拥有同步器列表中</strong>。</p>`,r:{minutes:3.9,words:1169},t:"线程转储中的“锁定可拥有同步器”是什么？",y:"a"}}],["/posts/baeldung/2024-07-16/2024-07-16-%20Operation%20vs%20%20ApiResponse%20in%20Swagger.html",{loader:()=>a(()=>import("./2024-07-16- Operation vs  ApiResponse in Swagger.html-_nKujwo6.js"),__vite__mapDeps([963,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Swagger","REST API"],g:["Operation","ApiResponse"],e:`
<p>在本教程中，我们将讨论Swagger的@Operation和@ApiResponse注解之间的主要区别。</p>
<p>创建REST API时，同样重要的是创建其适当的规范。此外，这样的规范应该是可读的、易于理解的，并提供所有必要的信息。更重要的是，文档应该描述对API所做的每一个更改。手动创建REST API文档既耗时又费时。幸运的是，像Swagger这样的工具可以帮助我们完成这个过程。</p>
<p>Swagger是围绕OpenAPI规范构建的一套开源工具集。它可以帮助我们设计、构建、文档化和使用REST API。</p>
<p>Swagger规范是REST API文档化的标准。使用Swagger规范，我们可以描述我们的整个API，例如公开的端点、操作、参数、认证方法等。</p>`,r:{minutes:4.67,words:1401},t:"Swagger中的@Operation与@ApiResponse的区别",y:"a"}}],["/posts/baeldung/2024-07-16/2024-07-16-A%20Guide%20to%20Java%20Source%20and%20Target%20Options.html",{loader:()=>a(()=>import("./2024-07-16-A Guide to Java Source and Target Options.html-CH2iY2Mp.js"),__vite__mapDeps([964,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Programming"],g:["Java Source","Java Target"],e:`
<p>在本教程中，我们将探索Java提供的<code>-source</code>和<code>-target</code>选项。此外，我们还将学习这些选项在Java 8中的工作方式以及从Java 9开始它们是如何发展的。</p>
<h2>2. 与旧版Java的向后兼容性</h2>
<p>由于Java的频繁发布和更新，应用程序可能无法每次都迁移到新版本。有时，应用程序需要确保它们的代码与旧版本的Java向后兼容。<code>javac</code>中的<code>-source</code>和<code>-target</code>选项使这变得容易。</p>
<p>为了详细了解这一点，我们首先创建一个示例类，并使用Java 9中添加的<code>List.of()</code>方法，但在Java 8中不存在：</p>`,r:{minutes:3.89,words:1167},t:"Java源和目标选项指南",y:"a"}}],["/posts/baeldung/2024-07-16/2024-07-16-Apply%20Default%20Global%20SecurityScheme%20in%20springdoc%20openapi.html",{loader:()=>a(()=>import("./2024-07-16-Apply Default Global SecurityScheme in springdoc openapi.html-DDCb5_JP.js"),__vite__mapDeps([965,1])),meta:{d:16566336e5,l:"2022年7月1日",c:["Spring","Spring Boot"],g:["springdoc-openapi","API Security"],e:`
<p>在本教程中，我们将学习如何使用springdoc-openapi库在Spring MVC Web应用程序中配置默认的全局安全方案，并将其应用为API的默认安全需求。此外，我们将讨论如何覆盖这些默认的安全需求。</p>
<p>OpenAPI规范允许我们为API定义一组安全方案。我们可以全局配置API的安全需求，或者按端点应用/移除它们。</p>
<h2>2. 设置</h2>
<p>由于我们正在使用Spring Boot构建Maven项目，让我们探索项目的设置。在本节结束时，我们将拥有一个简单的Web应用程序。</p>
<h3>2.1. 依赖项</h3>
<p>示例有两个依赖项。第一个依赖项是spring-boot-starter-web。这是构建Web应用程序的主要依赖项：</p>`,r:{minutes:5.33,words:1598},t:"在springdoc-openapi中应用默认全局安全方案",y:"a"}}],["/posts/baeldung/2024-07-16/2024-07-16-Arrays.asList%20%20%20vs%20Collections.singletonList%20%20.html",{loader:()=>a(()=>import("./2024-07-16-Arrays.asList   vs Collections.singletonList  .html-BTJCUR9f.js"),__vite__mapDeps([966,1])),meta:{d:1721088e6,l:"2024年7月16日",c:["Java","Collections"],g:["Arrays.asList()","Collections.singletonList()"],e:`
<p>列表是在Java中常用的集合类型。</p>
<p>众所周知，我们可以轻松地在一行代码中初始化列表。例如，当我们想要用只有一个元素初始化列表时，我们可以使用 Arrays.asList() 方法或 Collections.singletonList() 方法。</p>
<p>在本教程中，我们将讨论这两种方法之间的区别。然后，为了简单起见，我们将使用单元测试断言来验证某些操作是否符合预期。</p>
<h3>Arrays.asList() 方法</h3>
<p>首先，Arrays.asList() 方法返回的是一个固定大小的列表。</p>
<p>任何结构性更改都会抛出 UnsupportedOperationException，例如，向列表中添加新元素或从列表中删除元素。现在，让我们通过测试来检查：</p>`,r:{minutes:3.46,words:1038},t:"Arrays.asList() 与 Collections.singletonList() 的比较",y:"a"}}],["/posts/baeldung/2024-07-16/2024-07-16-Check%20if%20a%20Number%20Can%20Be%20Expressed%20as%20Sum%20of%20Two%20Prime%20Numbers%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-16-Check if a Number Can Be Expressed as Sum of Two Prime Numbers in Kotlin.html-BpSaUTlM.js"),__vite__mapDeps([967,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin","Algorithm"],g:["Prime Numbers","Sum","Check","Kotlin"],e:`
<p>质数展现出了有趣的数学属性，并在数学领域如密码学、金融算法等方面具有相关性。</p>
<p>在本教程中，<strong>我们将学习如何在Kotlin中检查一个数是否可以表示为两个质数的和</strong>。</p>
<h2>2. 理解场景</h2>
<p>让我们首先看看一些可以表示为两个质数之和的数字：</p>
<div class="language-kotlin" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> sumOfTwoPrimes <span class="token operator">=</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span>
</code></pre></div>`,r:{minutes:3.58,words:1075},t:"Kotlin中检查一个数是否可以表示为两个质数之和",y:"a"}}],["/posts/baeldung/2024-07-16/2024-07-16-Convert%20File%20to%20Byte%20Array%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-16-Convert File to Byte Array in Kotlin.html-DD9npjr2.js"),__vite__mapDeps([968,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin","文件操作"],g:["Kotlin","文件转换","字节数组"],e:`
<p>在Kotlin中，将文件转换为字节数组是一项常见操作，特别是在需要处理或通过网络传输文件数据的场景中。</p>
<p>本教程将展示如何在Kotlin中高效地将<code>File</code>转换为<code>ByteArray</code>，同时考虑文件大小和错误处理的不同方面。</p>
<h3>2. 使用<code>readBytes()</code>处理小文件</h3>
<p>在Kotlin中将文件转换为字节数组的最简单方式是使用<code>File.readBytes()</code>方法。<strong>此方法将整个文件读入内存作为<code>ByteArray</code></strong>：</p>`,r:{minutes:2.75,words:825},t:"Kotlin中将文件转换为字节数组",y:"a"}}],["/posts/baeldung/2024-07-16/2024-07-16-Display%20Logged%20in%20User%20s%20Information%20in%20Thymeleaf.html",{loader:()=>a(()=>import("./2024-07-16-Display Logged in User s Information in Thymeleaf.html-BmgcOBKs.js"),__vite__mapDeps([969,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Security","Thymeleaf"],g:["Spring Security","Thymeleaf","User Information"],e:`
<p>如果您正在使用Spring Security（特别是OAuth）实现，请务必查看《学习Spring安全》课程：</p>
<p><strong>&gt;&gt; 学习Spring</strong>
<strong>安全</strong></p>
<h2>1. 概述</h2>
<p>在这个快速教程中，<strong>我们将看看如何</strong> <strong>在Thymeleaf中显示已登录用户的信息</strong>。
我们将扩展我们在Spring Security与Thymeleaf文章中构建的项目。首先，我们将添加一个自定义模型来存储用户信息和检索它们的服务。之后，我们将使用Thymeleaf Extras模块中的Spring Security方言来显示它。</p>`,r:{minutes:3.36,words:1009},t:"在Thymeleaf中显示已登录用户信息",y:"a"}}],["/posts/baeldung/2024-07-16/2024-07-16-Dockerizing%20a%20Java%20Application.html",{loader:()=>a(()=>import("./2024-07-16-Dockerizing a Java Application.html-B8VGEvEk.js"),__vite__mapDeps([970,1])),meta:{d:1721088e6,l:"2024年7月16日",c:["Docker","Java"],g:["Java","Docker","容器化"],e:`<hr>
<h1>Docker化 Java 应用程序</h1>
<h2>1. 概述</h2>
<p>在本文中，我们将展示如何将基于 Java 的可运行 jar 应用程序 Docker 化。请务必了解使用 Docker 的好处。</p>
<h2>2. 构建可运行的 Jar</h2>
<p>我们将使用 Maven 来构建一个可运行的 jar。</p>
<p>因此，我们的应用程序有一个简单的类，<em>HelloWorld.java</em>，其中包含一个 <em>main</em> 方法：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Welcome to our application"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.31,words:692},t:"Docker化 Java 应用程序",y:"a"}}],["/posts/baeldung/2024-07-16/2024-07-16-Filter%20Java%20Stream%20to%201%20and%20Only%201%20Element.html",{loader:()=>a(()=>import("./2024-07-16-Filter Java Stream to 1 and Only 1 Element.html-CT0SwKuw.js"),__vite__mapDeps([971,1])),meta:{d:17211744e5,l:"2024年7月17日",c:["Java","Stream"],g:["Java","Stream","Filter","Reduction"],e:`
<p>在这篇文章中，我们将使用两种来自_Collectors_的方法来检索与给定谓词匹配的唯一元素。对于这两种方法，我们将根据以下标准定义两种方法：</p>
<ul>
<li>get方法期望有一个唯一的结果。否则，它将抛出一个_Exception_</li>
<li>find方法接受结果可能缺失，并在存在时返回一个_Optional_与值</li>
</ul>
<h2>2. 使用归约(Reduction)检索唯一结果</h2>
<p>**<em>Collectors.reducing_对其输入元素执行归约。**为此，它应用一个指定为_BinaryOperator_的函数。结果被描述为_Optional</em>。因此我们可以定义我们的find方法。</p>`,r:{minutes:4.11,words:1233},t:"Java流中筛选出唯一元素的方法",y:"a"}}],["/posts/baeldung/2024-07-16/2024-07-16-Get%20the%20Current%20Stack%20Trace%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-16-Get the Current Stack Trace in Java.html-CHr2PXO4.js"),__vite__mapDeps([972,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","异常处理"],g:["Stack Trace","Thread","Throwable"],e:`
<p>作为一个Java开发者，在处理异常时经常会遇到堆栈跟踪的概念。</p>
<p>在本教程中，<strong>我们将理解堆栈跟踪是什么以及如何在编程/调试中使用它。</strong> 此外，我们还将了解_StackTraceElement_类。最后，我们将学习如何使用_Thread_和_Throwable_类来获取它。</p>
<h2>2. 什么是堆栈跟踪？</h2>
<p><strong>堆栈跟踪，也称为回溯，是堆栈帧的列表。</strong> 简单来说，这些帧代表了程序执行过程中的一个时刻。</p>
<p>一个堆栈帧<strong>包含了代码调用的方法的信息</strong>。它是从当前方法开始，一直延伸到程序开始时的一系列帧。</p>`,r:{minutes:3.24,words:972},t:"获取Java当前堆栈跟踪",y:"a"}}],["/posts/baeldung/2024-07-16/2024-07-16-Get%20the%20Number%20of%20Messages%20in%20an%20Apache%20Kafka%20Topic.html",{loader:()=>a(()=>import("./2024-07-16-Get the Number of Messages in an Apache Kafka Topic.html-qoP93vKX.js"),__vite__mapDeps([973,1])),meta:{d:1721088e6,l:"2024年7月16日",c:["Apache Kafka","消息计数"],g:["Kafka","消息数量","编程技巧"],e:'<hr>\n<h1>在Apache Kafka主题中获取消息数量</h1>\n<p>Apache Kafka是一个开源的分布式事件流平台。</p>\n<p>在这个快速教程中，我们将学习获取Kafka主题中消息数量的技术。<strong>我们将展示程序化以及原生命令技术。</strong></p>\n<h3>2. 程序化技术</h3>\n<p>Kafka主题可能有多个分区。<strong>我们的技术应该确保我们计算了每个分区中的消息数量。</strong></p>\n<p>**我们必须逐个检查每个分区的最新偏移量。**为此，我们将引入一个消费者：</p>\n<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>KafkaConsumer``&lt;String, String&gt;`` consumer = new KafkaConsumer``&lt;String, String&gt;``(props);\n</code></pre></div>',r:{minutes:2.3,words:689},t:"在Apache Kafka主题中获取消息数量",y:"a"}}],["/posts/baeldung/2024-07-16/2024-07-16-How%20To%20Find%20Maven%20Dependencies.html",{loader:()=>a(()=>import("./2024-07-16-How To Find Maven Dependencies.html-CoctX_RU.js"),__vite__mapDeps([974,1])),meta:{d:1659312e6,l:"2022年8月1日",c:["Java","Maven"],g:["Maven","Dependency Management"],e:`<hr>
<h1>如何查找Maven依赖</h1>
<h2>1. 引言</h2>
<p>Maven 是一个项目管理和理解工具。它基于项目对象模型的概念，也称为 POM。使用 POM 作为中心信息，Maven 可以管理项目的构建、报告和文档。</p>
<p><strong>Maven 的一个重要部分是依赖管理。</strong> 大多数开发人员在开发应用程序时会与 Maven 的这个特性交互。</p>
<p>Maven 的高级依赖管理提供了自动更新以及依赖闭包。公司使用 Maven 进行依赖管理的另一种方式是使用自定义的中央仓库。通过这样做，开发人员可以在公司内使用其他项目中的依赖。</p>
<p>在本教程中，我们将学习如何查找 Maven 依赖。</p>`,r:{minutes:3.06,words:917},t:"如何查找Maven依赖",y:"a"}}],["/posts/baeldung/2024-07-16/2024-07-16-How%20to%20Check%20Whether%20an%20Integer%20Exists%20in%20a%20Range%20with%20Java.html",{loader:()=>a(()=>import("./2024-07-16-How to Check Whether an Integer Exists in a Range with Java.html-CyFPEjQk.js"),__vite__mapDeps([975,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Programming"],g:["Java","Range","Interval"],e:`
<p>在本教程中，我们将探讨一些检查整数是否存在于给定范围内的方法。我们将使用运算符以及几个工具类来实现这一点。</p>
<h2>2. 范围类型</h2>
<p>在我们使用这些方法之前，我们需要清楚我们所谈论的是什么类型范围。在本教程中，我们将专注于这四种有界范围类型：</p>
<ul>
<li><strong>封闭范围</strong> – <strong>包括其下限和上限</strong></li>
<li><strong>开放范围</strong> – <strong>不包括其下限和上限</strong></li>
<li><strong>左开右闭范围</strong> – <strong>包括其上限并排除其下限</strong></li>
<li><strong>左闭右开范围</strong> – <strong>包括其下限并排除其上限</strong></li>
</ul>`,r:{minutes:5.39,words:1617},t:"如何使用Java检查整数是否存在于给定范围内",y:"a"}}],["/posts/baeldung/2024-07-16/2024-07-16-How%20to%20Configure%20Conditional%20Dependencies%20in%20Gradle.html",{loader:()=>a(()=>import("./2024-07-16-How to Configure Conditional Dependencies in Gradle.html-CwrbS7La.js"),__vite__mapDeps([976,1])),meta:{d:1659312e6,l:"2022年8月1日",c:["Gradle","教程"],g:["条件依赖","配置"],e:`
<p>在本教程中，我们将看到如何在Gradle项目中配置条件依赖。</p>
<h2>2. 项目设置</h2>
<p>我们将为演示设置一个多模块项目。让我们前往_start.spring.io_并创建我们的根项目_conditional-dependency-demo_。我们将使用Gradle和Java以及Spring Boot。</p>
<p>我们还添加了两个提供者模块_provider1_和_provider2_，以及两个消费者模块_consumer1_和_consumer2_：</p>
<figure><img src="https://www.baeldung.com/wp-content/uploads/2022/08/conditional-dependency-project-structure-1024x1022.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>`,r:{minutes:4.27,words:1280},t:"如何在Gradle中配置条件依赖",y:"a"}}],["/posts/baeldung/2024-07-16/2024-07-16-Implementing%20a%20Map%20with%20Multiple%20Keys%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-16-Implementing a Map with Multiple Keys in Java.html-rkK4YSyj.js"),__vite__mapDeps([977,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","编程"],g:["Java","多键Map","编程技巧"],e:`
<h2><strong>1. 引言</strong></h2>
<p>我们经常在程序中使用映射（map），作为一种将键与值关联起来的手段。通常在我们的Java程序中，尤其是自从引入泛型以来，所有的键都是相同的类型，所有的值也都是相同的类型。例如，在数据存储中将ID映射到值。</p>
<p>有时，我们可能想要使用一个映射，其中的键类型并不总是相同的。<strong>例如，如果我们将ID类型从_Long_更改为_String_，那么我们的数据存储将需要同时支持两种键类型——_Long_用于旧条目，_String_用于新条目。</strong></p>
<p>不幸的是，Java的_Map_接口不允许有多种键类型，因此我们需要找到另一种解决方案。在本文中，我们将探讨几种实现方式。</p>`,r:{minutes:5.16,words:1549},t:"Java中实现具有多个键类型的Map",y:"a"}}],["/posts/baeldung/2024-07-16/2024-07-16-Import%20Swagger%20APIs%20into%20Postman.html",{loader:()=>a(()=>import("./2024-07-16-Import Swagger APIs into Postman.html-BSxBCIHd.js"),__vite__mapDeps([978,1])),meta:{d:1659312e6,l:"2022年8月1日",c:["Swagger","Postman"],g:["API","REST"],e:`
<p>在本文中，我们将看到如何将Swagger API导入Postman。</p>
<p>Swagger是一个开源的规则集、规范和工具集，用于开发和描述REST API。然而，2021年之后，<strong>OpenAPI指的是行业标准规范</strong>，而Swagger指的是工具。</p>
<p>Postman是一个用于构建和使用API的平台。Postman简化了API生命周期的每一步，并简化了协作。我们可以使用<strong>Postman在不编写任何代码的情况下测试我们的API</strong>。</p>
<p>我们可以使用独立应用程序或浏览器扩展。</p>
<p>我们可以与任何现有应用程序一起工作，或者我们可以从头开始创建一个简单的应用程序，该程序公开REST API。</p>`,r:{minutes:2.38,words:715},t:"将Swagger API导入Postman",y:"a"}}],["/posts/baeldung/2024-07-16/2024-07-16-Integer.toString%20%20%20vs%20String.valueOf%20%20%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-16-Integer.toString   vs String.valueOf   in Java.html-BvTwKsDC.js"),__vite__mapDeps([979,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Programming"],g:["Integer.toString()","String.valueOf()"],e:`
<p>正如我们所知，在Java中将int转换为String是一个非常常见的操作。</p>
<p>在这个简短的教程中，我们将介绍两种非常流行的转换方法：Integer类的toString()方法和String类的valueOf()方法。此外，我们还将通过一些示例来更好地理解这两种方法。</p>
<h3>2. Integer.toString()方法</h3>
<p>这个方法<strong>接受一个原始数据类型int的整数作为参数，并返回一个表示指定整数的String对象。</strong></p>
<p>让我们看看它的签名：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span>
</code></pre></div>`,r:{minutes:4.87,words:1462},t:"Java中Integer.toString()与String.valueOf()的比较 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-16/2024-07-16-Java%208%20Streams%20%20Multiple%20Filters%20vs.%20Complex%20Condition.html",{loader:()=>a(()=>import("./2024-07-16-Java 8 Streams  Multiple Filters vs. Complex Condition.html-DI42HsNC.js"),__vite__mapDeps([980,1])),meta:{d:1659312e6,l:"2022年8月1日",c:["Java","编程"],g:["Java 8","性能","可读性"],e:`
<p>在本教程中，我们将比较不同的Java流过滤方式。首先，我们将看到哪种解决方案可以带来更易读的代码。然后，我们将从性能的角度比较这些解决方案。</p>
<h2>2. 可读性</h2>
<p>让我们从可读性的角度开始比较这两种解决方案。在本节的代码示例中，我们将使用<code>Student</code>类：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> year<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>\` marks<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Profile</span> profile<span class="token punctuation">;</span>

    <span class="token comment">// 构造函数、getter和setter</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:3.73,words:1118},t:"Java 8 流：多重过滤器与复杂条件的比较",y:"a"}}],["/posts/baeldung/2024-07-16/2024-07-16-Log4j2%20%20%20Logging%20to%20Both%20File%20and%20Console.html",{loader:()=>a(()=>import("./2024-07-16-Log4j2   Logging to Both File and Console.html-BqHCEQEP.js"),__vite__mapDeps([981,1])),meta:{d:1721088e6,l:"2024年7月16日",c:["Java","Log4j2"],g:["日志","文件","控制台"],e:'<hr>\n<h1>使用Apache Log4j2库同时记录日志到文件和控制台</h1>\n<p>在本教程中，我们将探讨如何使用Apache Log4j2库将消息记录到文件和控制台。这在非生产环境中非常有用，我们可能希望在控制台中看到调试消息，并且我们可能希望将更高级别的日志持久化到文件中，以便后续分析。</p>\n<h3>2.1. Log4j2依赖</h3>\n<p>让我们将log4j2依赖项添加到我们的项目中。我们需要Apache Log4J Core和Apache Log4J API依赖项：</p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>`\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n        ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>``org.apache.logging.log4j``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>``\n        ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>``log4j-core``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>``\n        ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>``2.19.0``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n        ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>``org.apache.logging.log4j``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>``\n        ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>``log4j-api``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>``\n        ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>``2.19.0``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>`\n</code></pre></div>',r:{minutes:1.9,words:571},t:"使用Apache Log4j2库同时记录日志到文件和控制台",y:"a"}}],["/posts/baeldung/2024-07-16/2024-07-16-Maven%20Snapshot%20Repository%20vs%20Release%20Repository.html",{loader:()=>a(()=>import("./2024-07-16-Maven Snapshot Repository vs Release Repository.html-B0xL4mUx.js"),__vite__mapDeps([982,1])),meta:{d:16540416e5,l:"2022年6月1日",c:["Maven","Repository"],g:["Maven Snapshot","Maven Release"],e:`
<p>在本教程中，我们将解释Maven快照仓库和发布仓库之间的区别。</p>
<h2>2. Maven仓库概述</h2>
<p>Maven仓库包含了一系列预编译的构件，我们可以在应用程序中作为依赖项使用。对于传统的Java应用程序，这些通常是_.jar_文件。</p>
<p>通常有两种类型的仓库：本地和远程。</p>
<p>本地仓库是Maven在构建计算机上创建的仓库。它通常位于_$HOME/.m2/repository_目录下。</p>
<p>当我们构建应用程序时，Maven会在本地仓库中搜索依赖项。如果找不到某个特定的依赖项，Maven会在远程仓库中搜索（定义在_settings.xml_或_pom.xml_文件中）。此外，它会将依赖项复制到我们的本地仓库以供将来使用。</p>`,r:{minutes:5.74,words:1722},t:"Maven快照仓库与发布仓库的区别",y:"a"}}],["/posts/baeldung/2024-07-16/2024-07-16-Named%20Placeholders%20in%20String%20Formatting.html",{loader:()=>a(()=>import("./2024-07-16-Named Placeholders in String Formatting.html-CvwYgNar.js"),__vite__mapDeps([983,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","字符串格式化"],g:["Java","字符串","格式化","StringSubstitutor","正则表达式"],e:`
<p>Java标准库提供了<code>String.format()</code>方法来格式化基于模板的字符串，例如<code>String.format("%s is awesome", "Java")</code>。</p>
<p>在本教程中，我们将探讨如何使字符串格式化支持命名参数。</p>
<h2>2. 问题介绍</h2>
<p><code>String.format()</code>方法使用起来相当直接。然而，当<code>format()</code>调用有很多参数时，很难理解哪个值对应哪个格式说明符，例如：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Employee</span> e <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span> <span class="token comment">// 获取一个员工实例</span>
<span class="token class-name">String</span> template <span class="token operator">=</span> <span class="token string">"Firstname: %s, Lastname: %s, Id: %s, Company: %s, Role: %s, Department: %s, Address: %s ..."</span><span class="token punctuation">;</span>
<span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> e<span class="token punctuation">.</span>firstName<span class="token punctuation">,</span> e<span class="token punctuation">.</span>lastName<span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">e<span class="token punctuation">.</span></span>Id</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>company<span class="token punctuation">,</span> e<span class="token punctuation">.</span>department<span class="token punctuation">,</span> e<span class="token punctuation">.</span>role <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span>
</code></pre></div>`,r:{minutes:6.61,words:1984},t:"Java中字符串格式化的命名占位符",y:"a"}}],["/posts/baeldung/2024-07-16/2024-07-16-Permutations%20of%20a%20String%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-16-Permutations of a String in Java.html-BJn5eEjQ.js"),__vite__mapDeps([984,1])),meta:{d:1721088e6,l:"2024年7月16日",c:["Java","编程"],g:["字符串","排列"],e:`<hr>
<h1>Java中字符串的排列</h1>
<p>排列是集合中元素的重新排列。换句话说，它是集合顺序的所有可能的变化。
在本教程中，我们将学习如何使用第三方库轻松地在Java中创建排列。更具体地说，我们将使用字符串的排列。
有时，我们需要检查字符串值的所有可能的排列，通常是为了令人困惑的在线编程练习，较少用于日常工作任务。例如，字符串“abc”将有六种不同的字符排列方式：“abc”，“acb”，“cab”，“bac”，“bca”，“cba”。</p>
<p>有几个明确定义的算法可以帮助我们为特定的字符串值创建所有可能的排列。例如，最著名的是Heap算法。然而，它非常复杂且不易直观理解。递归方法更是雪上加霜。</p>`,r:{minutes:4.26,words:1279},t:"Java中字符串的排列",y:"a"}}],["/posts/baeldung/2024-07-16/2024-07-16-Reading%20Flux%20Into%20a%20Single%20InputStream%20Using%20Spring%20Reactive%20WebClient.html",{loader:()=>a(()=>import("./2024-07-16-Reading Flux Into a Single InputStream Using Spring Reactive WebClient.html-D0tm2KDH.js"),__vite__mapDeps([985,1])),meta:{d:17211744e5,l:"2024年7月17日",c:["Spring","Reactive Programming"],g:["WebClient","Flux","InputStream"],e:`
<p>在本教程中，我们将深入探讨Java响应式编程，以解决一个有趣的问题：如何将Flux<code>&lt;DataBuffer&gt;</code>读取为单个InputStream。</p>
<h2>2. 请求设置</h2>
<p>作为将Flux<code>&lt;DataBuffer&gt;</code>读取为单个InputStream问题的第一步，我们将使用Spring响应式WebClient进行GET请求。此外，我们可以使用由gorest.co.in托管的公共API端点进行此类测试场景：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> <span class="token constant">REQUEST_ENDPOINT</span> <span class="token operator">=</span> <span class="token string">"https://gorest.co.in/public/v2/users"</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:3.19,words:958},t:"使用Spring Reactive WebClient将Flux<DataBuffer>读取为单个InputStream",y:"a"}}],["/posts/baeldung/2024-07-16/2024-07-16-Remove%20Whitespace%20From%20a%20String%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-16-Remove Whitespace From a String in Java.html-D4M9SwWD.js"),__vite__mapDeps([986,1])),meta:{d:17211744e5,l:"2024年7月17日",c:["Java","字符串操作"],g:["Java","字符串","空白字符"],e:`
<ol>
<li>概述</li>
</ol>
<p>当我们在Java中操作字符串时，我们经常需要从字符串中移除空白字符。</p>
<p>在本教程中，我们将探索在Java中从字符串中移除空白字符的常见场景。</p>
<ol start="2">
<li>问题介绍</li>
</ol>
<p>为了更容易理解问题，我们首先来看一个字符串示例：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> myString <span class="token operator">=</span> <span class="token string">"   I    am a    wonderful String     !   "</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:4.25,words:1274},t:"在Java中从字符串中移除空白字符 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-16/2024-07-16-Replace%20Element%20at%20a%20Specific%20Index%20in%20a%20Java%20ArrayList.html",{loader:()=>a(()=>import("./2024-07-16-Replace Element at a Specific Index in a Java ArrayList.html-B0uNZABe.js"),__vite__mapDeps([987,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","ArrayList"],g:["Java","ArrayList","replace"],e:`
<p>通过本教程，我们将探讨如何在Java的_ArrayList_中替换特定索引处的元素。</p>
<h2><strong>2. 常见做法</strong></h2>
<p>要替换一个现有元素，首先需要找到该元素在_ArrayList_中的确切位置。这个位置就是我们所说的索引。然后，我们可以将旧元素替换为新元素。</p>
<p>在Java _ArrayList_中替换元素的最常用方法是使用_set(int index, Object element)_方法。_set()_方法接受两个参数：现有项目的索引和新项目。</p>
<p>_ArrayList_的索引是基于0的。因此，要替换第一个元素，必须将0作为参数传递给索引。</p>`,r:{minutes:1.48,words:445},t:"在Java ArrayList中替换特定索引处的元素",y:"a"}}],["/posts/baeldung/2024-07-16/2024-07-16-Scanning%20Java%20Annotations%20at%20Runtime.html",{loader:()=>a(()=>import("./2024-07-16-Scanning Java Annotations at Runtime.html-CNeJ2TjK.js"),__vite__mapDeps([988,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Annotations"],g:["Java","Annotation","Reflection","Spring","Reflections","Jandex"],e:`
<p>正如我们所知，在Java世界中，注解是一种获取类和方法的元信息的非常有用的手段。</p>
<p>在本教程中，我们将讨论在运行时扫描Java注解。</p>
<h3>2. 定义自定义注解</h3>
<p>让我们首先定义一个示例注解以及使用我们自定义注解的示例类：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token constant">METHOD</span><span class="token punctuation">,</span> <span class="token constant">TYPE</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">SampleAnnotation</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@SampleAnnotation</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"annotatedClass"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SampleAnnotatedClass</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@SampleAnnotation</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"annotatedMethod"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">annotatedMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 执行某些操作</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notAnnotatedMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 执行某些操作</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:3.91,words:1173},t:"Java运行时扫描注解",y:"a"}}],["/posts/baeldung/2024-07-16/2024-07-16-Sending%20SOAP%20Request%20via%20Postman.html",{loader:()=>a(()=>import("./2024-07-16-Sending SOAP Request via Postman.html-BwoSVn2e.js"),__vite__mapDeps([989,1])),meta:{d:1659312e6,l:"2022年8月1日",c:["Postman","SOAP"],g:["SOAP Request","WSDL"],e:`
<p>在这篇文章中，我们将学习如何通过Postman发送SOAP请求。在此之前，我们将从我们的Country SOAP服务导入WSDL到API平台。</p>
<h2>2. 设置</h2>
<p>在我们能够在Postman中发出SOAP请求之前，我们需要一个正常工作的SOAP服务。启动我们的Country SOAP服务后，端点将位于http://localhost:8080/ws，而WSDL可以在http://localhost:8080/ws/countries.wsdl找到。</p>
<h2>3. 从Postman测试SOAP请求</h2>
<p>使用Postman测试我们的端点有四个步骤。</p>`,r:{minutes:2.62,words:785},t:"通过Postman发送SOAP请求",y:"a"}}],["/posts/baeldung/2024-07-16/2024-07-16-Skip%20Null%20Values%20When%20Converting%20a%20List%20to%20a%20Map%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-16-Skip Null Values When Converting a List to a Map in Kotlin.html-Dx1xCsB_.js"),__vite__mapDeps([990,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin"],g:["List","Map","Conversion"],e:`
<p>列表和映射是Kotlin中的核心数据结构，通常用于完成各种编程任务。经常将键值对列表转换为映射以提高我们数据的组织性。然而，有时键值对中可能包含不需要在最终映射中的空值。</p>
<p>在本教程中，我们将探讨在Kotlin中将一对列表转换为映射时跳过空值的多种方法。</p>
<h3>2. 使用for()循环</h3>
<p>在将一对列表转换为映射时跳过空值的一个简单方法是使用经典的for()循环。我们遍历列表的每个元素并检查值是否为空。如果值不为空，我们将这对添加到映射中：</p>
<div class="language-kotlin" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Test</span>
<span class="token keyword">fun</span> <span class="token function">\`使用for循环跳过空值\`</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> pairs <span class="token operator">=</span> listOf\`\`\`\`<span class="token operator">&lt;</span>Pair<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Int<span class="token operator">?</span><span class="token operator">&gt;</span>\`\`\`\`<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token function">Pair</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"a"</span></span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Pair</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"b"</span></span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Pair</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"c"</span></span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> expected <span class="token operator">=</span> <span class="token function">mapOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"a"</span></span> <span class="token keyword">to</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"c"</span></span> <span class="token keyword">to</span> <span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> map <span class="token operator">=</span> mutableMapOf\`\`<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Int<span class="token operator">&gt;</span>\`\`<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>pair <span class="token keyword">in</span> pairs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pair<span class="token punctuation">.</span>second <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            map<span class="token punctuation">[</span>pair<span class="token punctuation">.</span>first<span class="token punctuation">]</span> <span class="token operator">=</span> pair<span class="token punctuation">.</span>second<span class="token operator">!!</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token function">assertEquals</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> map<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:3.89,words:1166},t:"Kotlin中在列表转换为映射时跳过空值",y:"a"}}],["/posts/baeldung/2024-07-16/2024-07-16-Spring%20Boot%203%20and%20Spring%20Framework%206.0%20%20%20What%20s%20New.html",{loader:()=>a(()=>import("./2024-07-16-Spring Boot 3 and Spring Framework 6.0   What s New.html-BErxDY1T.js"),__vite__mapDeps([991,1])),meta:{d:17211744e5,l:"2024年7月17日",c:["Spring Boot 3","Spring Framework 6.0"],g:["Java 14","Java 17","Jakarta EE 9"],e:`
<p>随着 Spring Boot 3 的发布时间临近，现在正是检查新特性的好时机。</p>
<h2>Java 14 记录关键字</h2>
<p>探索记录的基础，包括它们的目的、生成的方法和自定义技术。</p>
<h2>Java 17</h2>
<p>虽然之前已经支持 Java 17，但这个长期支持版本现在成为了基线。</p>
<p>当从长期支持版本 11 迁移时，Java 开发者将从新的语言特性中受益。由于 Java 本身不是本文的主题，我们只列出对 Spring Boot 开发者最重要的新特性。我们可以在 Java 17、16、15、14、13 和 12 的单独文章中找到更多细节。</p>`,r:{minutes:5.15,words:1546},t:"Spring Boot 3 和 Spring Framework 6.0 - 新特性概览",y:"a"}}],["/posts/baeldung/2024-07-16/2024-07-16-Spring%20Data%20MongoDB%20%20%20Configure%20Connection.html",{loader:()=>a(()=>import("./2024-07-16-Spring Data MongoDB   Configure Connection.html-CB_kGLOj.js"),__vite__mapDeps([992,1])),meta:{d:1721088e6,l:"2024年7月16日",c:["Spring Data MongoDB","MongoDB"],g:["Spring Boot","MongoDB","Database Connection"],e:`<hr>
<h1>1. 概述</h1>
<p>在本教程中，<strong>我们将学习在Spring Boot应用程序中配置MongoDB连接的不同方法</strong>。我们将利用Spring Data MongoDB项目提供的强大的功能。通过利用Spring Data MongoDB项目，我们可以使用丰富的工具和功能，简化在Spring环境中使用MongoDB数据库的过程。</p>
<p>通过深入研究Spring的灵活配置选项，我们将探索建立数据库连接的各种方法。通过动手示例，我们将为每种方法创建单独的应用程序，使我们能够选择最适合我们特定需求的配置方法。</p>
<h1>2. 测试我们的连接</h1>`,r:{minutes:8.17,words:2451},t:"1. 概述",y:"a"}}],["/posts/baeldung/2024-07-16/2024-07-16-Spring%20Security%20%20Upgrading%20the%20Deprecated%20WebSecurityConfigurerAdapter.html",{loader:()=>a(()=>import("./2024-07-16-Spring Security  Upgrading the Deprecated WebSecurityConfigurerAdapter.html-yXNswgzB.js"),__vite__mapDeps([993,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Security","OAuth"],g:["Spring Boot","MVC","Security"],e:`<hr>
<h1>Spring Security：升级已弃用的 WebSecurityConfigurerAdapter</h1>
<figure><img src="https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>如果你正在处理 Spring Security（特别是 OAuth）实现，一定要看看《Learn Spring Security》课程：</p>`,r:{minutes:4.12,words:1235},t:"Spring Security：升级已弃用的 WebSecurityConfigurerAdapter",y:"a"}}],["/posts/baeldung/2024-07-16/2024-07-16-Static%20vs.%20Instance%20Initializer%20Block%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-16-Static vs. Instance Initializer Block in Java.html-7OSM7tcW.js"),__vite__mapDeps([994,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Programming"],g:["Java","Static Block","Instance Initializer Block"],e:`
<p>在本教程中，我们将学习静态块和实例初始化块的概念。我们还将检查类构造函数和初始化块的执行顺序及其差异。</p>
<p>在Java中，<strong>静态块在对象初始化前执行代码</strong>。静态块是带有_static_关键字的代码块：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token punctuation">{</span>
    <span class="token comment">// 静态块的定义</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:3.24,words:972},t:"Java中的静态初始化块与实例初始化块",y:"a"}}],["/posts/baeldung/2024-07-16/2024-07-16-Testing%20Spring%20JMS.html",{loader:()=>a(()=>import("./2024-07-16-Testing Spring JMS.html-C4CrrJP5.js"),__vite__mapDeps([995,1])),meta:{d:17211744e5,l:"2024年7月17日",c:["Spring JMS","Testing"],g:["Spring","JMS","Testing"],e:`<hr>
<h1>Spring JMS 测试</h1>
<h2><strong>1. 概述</strong></h2>
<p>在本教程中，我们将创建一个简单的 Spring 应用程序，该程序连接到 ActiveMQ 来发送和接收消息。<strong>我们将专注于测试这个应用程序以及测试 Spring JMS 的不同方法。</strong></p>
<h2><strong>2. 应用程序设置</strong></h2>
<p>首先，让我们创建一个基本的应用程序，该程序可以用于测试。我们需要添加必要的依赖项并实现消息处理。</p>
<h3><strong>2.1. 依赖项</strong></h3>`,r:{minutes:5.94,words:1781},t:"Spring JMS 测试",y:"a"}}],["/posts/baeldung/2024-07-16/2024-07-16-Upload%20Image%20With%20Spring%20Boot%20and%20Thymeleaf.html",{loader:()=>a(()=>import("./2024-07-16-Upload Image With Spring Boot and Thymeleaf.html-DNah-fq6.js"),__vite__mapDeps([996,1])),meta:{d:1721088e6,l:"2024年7月16日",c:["Spring Boot","Thymeleaf"],g:["Image Upload","Java Web Application"],e:'<hr>\n<h1>使用Spring Boot和Thymeleaf上传图片</h1>\n<p>在这个快速教程中，我们将看看如何在使用Spring Boot和Thymeleaf的Java Web应用程序中上传图片。</p>\n<h2><strong>2. 依赖项</strong></h2>\n<p>我们只需要两个依赖项——Spring Boot Web和Thymeleaf：</p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>``org.springframework.boot``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>``spring-boot-starter-web``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>``org.springframework.boot``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>``spring-boot-starter-thymeleaf``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n</code></pre></div>',r:{minutes:2.17,words:652},t:"使用Spring Boot和Thymeleaf上传图片",y:"a"}}],["/posts/baeldung/2024-07-16/2024-07-16-Using%20Environment%20Variables%20in%20Spring%20Boot%20s%20Properties%20Files.html",{loader:()=>a(()=>import("./2024-07-16-Using Environment Variables in Spring Boot s Properties Files.html-sDfiRd11.js"),__vite__mapDeps([997,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Boot","Properties"],g:["Environment Variables","Spring Boot"],e:`<hr>
<h1>使用 Spring Boot 的属性文件中的环境变量</h1>
<h2>1. 概述</h2>
<p>在本教程中，我们将讨论如何在 Spring Boot 的 <em>application.properties</em> 和 <em>application.yml</em> 文件中使用环境变量。然后，我们将学习如何在代码中引用这些属性。</p>
<h2>2. 在 <em>application.properties</em> 文件中使用环境变量</h2>
<p>让我们定义一个名为 <em>JAVA_HOME</em> 的全局环境变量，其值为 “ <em>C:\\Program Files\\Java\\jdk-11.0.14</em>”。</p>`,r:{minutes:3.16,words:948},t:"使用 Spring Boot 的属性文件中的环境变量",y:"a"}}],["/posts/baeldung/2024-07-16/2024-07-16-Volatile%20vs.%20Atomic%20Variables%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-16-Volatile vs. Atomic Variables in Java.html-B-glIDsH.js"),__vite__mapDeps([998,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Concurrency"],g:["volatile","atomic"],e:`<hr>
<h1>Java 中的 volatile 与原子变量</h1>
<h2>1. 概述</h2>
<p><strong>在本教程中，我们将学习 <em>volatile</em> 关键字和原子类之间的区别以及它们解决的问题。</strong> 首先，需要了解 Java 如何处理线程之间的通信以及可能出现的意外问题。</p>
<p>线程安全是一个关键主题，它提供了对多线程应用程序内部工作的洞察。我们还将讨论竞态条件，但不会深入这个话题。</p>
<h2>2. 并发问题</h2>
<p>让我们通过一个简单的例子来了解原子类和 <em>volatile</em> 关键字间的区别。假设我们正在尝试创建一个在多线程环境中工作的计数器。</p>`,r:{minutes:4.27,words:1282},t:"Java 中的 volatile 与原子变量",y:"a"}}],["/posts/baeldung/2024-07-17/2024-07-17-A%20Guide%20to%20Maven%20Encoding.html",{loader:()=>a(()=>import("./2024-07-17-A Guide to Maven Encoding.html-DBIGrnDo.js"),__vite__mapDeps([999,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Maven","编码"],g:["Maven","编码"],e:`<hr>
<h1>Maven编码指南</h1>
<h2>1. 概述</h2>
<p>在本教程中，我们将学习如何在Maven中设置字符编码。
我们将展示如何为一些常见的Maven插件设置编码。
此外，我们将看到如何在项目级别以及通过命令行设置编码。</p>
<h2>2. 编码是什么，我们为什么要关心？</h2>
<p>世界上有许多不同的语言，使用不同的字符。
一个称为Unicode的字符映射系统拥有超过10万个字符、符号甚至表情符号（emoji）。
为了不使用大量的内存，<strong>我们使用一个称为编码的映射系统，将字符在位和字节之间以及屏幕上的可读字符之间进行转换。</strong>
现在有许多编码系统。<strong>要读取文件，我们必须知道使用的是哪种编码系统。</strong></p>`,r:{minutes:7.81,words:2343},t:"Maven编码指南",y:"a"}}],["/posts/baeldung/2024-07-17/2024-07-17-Advantages%20and%20Disadvantages%20of%20Using%20Java%20Wildcard%20Imports.html",{loader:()=>a(()=>import("./2024-07-17-Advantages and Disadvantages of Using Java Wildcard Imports.html-WDkDV553.js"),__vite__mapDeps([1000,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Programming"],g:["Java Wildcard Imports","Code Cleanliness","Refactoring"],e:`
<p>在本教程中，我们将讨论Java中使用通配符导入的优势和劣势。</p>
<p>Java <code>import</code> 语句声明了代码中使用的名称（类名、静态变量和方法名）的来源。</p>
<p>以一个 <code>Book</code> 类为例：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">UUID</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">UUID</span> id<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Date</span> datePublished<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">List</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>\`\`\` authors<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:4.03,words:1209},t:"Java通配符导入的优势和劣势",y:"a"}}],["/posts/baeldung/2024-07-17/2024-07-17-Check%20if%20a%20Number%20Is%20Odd%20or%20Even%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-17-Check if a Number Is Odd or Even in Java.html-DhWoO07B.js"),__vite__mapDeps([1001,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Programming"],g:["Java","Number Parity","Bitwise Operations","Least Significant Bit"],e:`<hr>
<h1>在Java中检查数字是奇数还是偶数</h1>
<h2>1. 概述</h2>
<p>众所周知，数字的奇偶性由其除以2的余数决定。偶数的余数为0，而奇数的余数为1。</p>
<p>在本教程中，<strong>我们将看到多种在Java中检查数字是偶数还是奇数的方法。</strong></p>
<h2>2. 除法方法</h2>
<p>返回除法余数的算术运算符是模运算符 <em>%</em>。</p>
<p>我们可以通过将数字除以2并检查余数来验证数字是偶数还是奇数的最简单方法是：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">boolean</span> <span class="token function">isEven</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">boolean</span> <span class="token function">isOdd</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.24,words:672},t:"在Java中检查数字是奇数还是偶数",y:"a"}}],["/posts/baeldung/2024-07-17/2024-07-17-Check%20if%20at%20Least%20Two%20Out%20of%20Three%20Booleans%20Are%20True%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-17-Check if at Least Two Out of Three Booleans Are True in Java.html-BrGqP4HH.js"),__vite__mapDeps([1002,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Programming"],g:["Java","Boolean","Logic"],e:`<hr>
<h1>在Java中检查三个布尔值中至少有两个为真</h1>
<p>布尔类型是Java的基本数据类型之一。它非常简单，只有两个值：真（true）和假（false）。</p>
<p>在本教程中，我们将探讨一个问题：检查给定的三个布尔值中是否至少有两个为真。</p>
<h2>2. 问题介绍</h2>
<p>这个问题相当直接。我们将得到三个布尔值。如果其中至少有两个为真，我们的方法应该返回真。</p>
<p>解决这个问题对我们来说并不难。然而，在本教程中，我们将探索一些不错的解决方案。此外，我们将讨论每种方法是否可以轻松扩展来解决一个更一般的问题：<strong>给定n个布尔值，检查其中至少有x个为真</strong>。</p>`,r:{minutes:6.78,words:2035},t:"在Java中检查三个布尔值中至少有两个为真",y:"a"}}],["/posts/baeldung/2024-07-17/2024-07-17-Clearing%20a%20StringBuilder%20or%20StringBuffer.html",{loader:()=>a(()=>import("./2024-07-17-Clearing a StringBuilder or StringBuffer.html-D7xTcB9E.js"),__vite__mapDeps([1003,1])),meta:{d:17211744e5,l:"2024年7月17日",c:["Java","StringBuilder","StringBuffer"],g:["Java","StringBuilder","StringBuffer"],e:`
<p>在本教程中，我们将介绍几种清除StringBuilder或StringBuffer的方法，然后详细阐述它们。</p>
<h3>使用setLength方法</h3>
<p>setLength方法更新StringBuilder的内部长度。之后，当操作StringBuilder时，长度之后的所有条目都将被忽略。因此，使用0调用它将清除其内容：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">whenSetLengthToZero_ThenStringBuilderIsCleared</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">StringBuilder</span> stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> initialCapacity <span class="token operator">=</span> stringBuilder<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    stringBuilder<span class="token punctuation">.</span><span class="token function">setLength</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> stringBuilder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">,</span> stringBuilder<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.99,words:596},t:"清除StringBuilder或StringBuffer的教程",y:"a"}}],["/posts/baeldung/2024-07-17/2024-07-17-Convert%20String%20Array%20to%20Int%20Array%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-17-Convert String Array to Int Array in Kotlin.html-B5SM3g_B.js"),__vite__mapDeps([1004,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin"],g:["String Array","Int Array"],e:`<hr>
<h1>Kotlin中将字符串数组转换为整数数组 | Baeldung关于Kotlin的文章</h1>
<h2>1. 概述</h2>
<p>在Kotlin中，我们可能会遇到需要将字符串数组转换为整数数组的各种场景。在本文中，我们将探讨这个问题的不同解决方法。此外，我们还将展示在转换过程中如何处理可能出现的异常。</p>
<h2>2. 使用 <em>toInt()</em> 函数</h2>
<p>在最简单的情况下，<strong>直接的方法是遍历每个字符串数组元素并使用 <em>toInt()</em> 函数</strong>。它将每个元素转换为一个 <em>Int</em> 实例。让我们看一个例子：</p>`,r:{minutes:2.58,words:773},t:"Kotlin中将字符串数组转换为整数数组 | Baeldung关于Kotlin的文章",y:"a"}}],["/posts/baeldung/2024-07-17/2024-07-17-Count%20Documents%20Using%20Spring%20Data%20MongoDB%20Repository.html",{loader:()=>a(()=>import("./2024-07-17-Count Documents Using Spring Data MongoDB Repository.html-BXr7HUT6.js"),__vite__mapDeps([1005,1])),meta:{d:17211744e5,l:"2024年7月17日",c:["Spring Data MongoDB","MongoDB"],g:["MongoDB","Spring Data","Count","Repository"],e:`<hr>
<h1>使用Spring Data MongoDB Repository统计文档数量</h1>
<h2>1. 概述</h2>
<p>在本教程中，我们将看到使用Spring Data MongoDB统计集合中文档数量的不同方法。我们将使用_MongoRepository_中提供的所有工具。</p>
<p>我们将使用注解、查询方法以及_CrudRepository_中的方法。此外，我们还将构建一个简单的服务来聚合我们不同的用例。</p>
<h2>2. 使用案例设置</h2>
<p>我们的使用案例包括一个模型类、一个仓库和一个服务类。此外，我们将创建一个测试类来帮助我们确保一切按预期工作。</p>`,r:{minutes:6.3,words:1891},t:"使用Spring Data MongoDB Repository统计文档数量",y:"a"}}],["/posts/baeldung/2024-07-17/2024-07-17-Creating%20JAR%20Files%20Programmatically.html",{loader:()=>a(()=>import("./2024-07-17-Creating JAR Files Programmatically.html-DWdi0HZ9.js"),__vite__mapDeps([1006,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","JAR文件"],g:["Java","JAR文件","编程"],e:`<hr>
<h1>程序化创建JAR文件</h1>
<h2><strong>1. 引言</strong></h2>
<p>在这篇文章中，我们将介绍如何程序化地创建jar文件。在编写软件时，我们最终需要将其部署到生产状态。在某些情况下，使用类路径和单独的文件是可以接受的。通常，处理单个文件更为方便。在Java中，标准的方法是使用JAR、WAR或EAR文件。</p>
<p><strong>基本过程是编写清单文件，打开jar文件，添加内容，最后关闭jar文件。</strong></p>
<h2><strong>2. JAR文件的解剖</strong></h2>
<p>jar文件是ZIP文件格式的扩展，包含了一个清单文件。清单文件是特定于JAR文件的特殊文件，可能包含各种设置。其中一些是主类、可选数据（例如，作者、版本等）和代码签名信息。</p>`,r:{minutes:3.65,words:1096},t:"程序化创建JAR文件",y:"a"}}],["/posts/baeldung/2024-07-17/2024-07-17-Delete%20Files%20and%20Subdirectories%20in%20a%20Directory%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-17-Delete Files and Subdirectories in a Directory in Kotlin.html-CaOJ0gub.js"),__vite__mapDeps([1007,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin","File Management"],g:["Kotlin","File Deletion","Directory Deletion"],e:`<hr>
<h1>在Kotlin中删除目录中的文件和子目录</h1>
<h2>1. 引言</h2>
<p>在许多应用程序中，例如文件管理工具、清理脚本等，删除目录中的文件和子目录是一个常见需求。Kotlin提供了高效且简洁的方式来处理文件操作。</p>
<p>在本教程中，我们将探讨如何使用Kotlin删除目录中的文件和子目录。</p>
<h2>2. 理解Kotlin中的文件删除</h2>
<p>Kotlin提供了直接访问Java文件I/O API的权限，使得执行文件操作变得简单直接。我们主要使用_java.io.File_类来实现我们的目标。<strong>重要的是要理解，在Kotlin中删除目录需要目录为空</strong>。因此，我们需要首先递归地删除所有子目录和文件。</p>`,r:{minutes:4.42,words:1326},t:"在Kotlin中删除目录中的文件和子目录",y:"a"}}],["/posts/baeldung/2024-07-17/2024-07-17-Difference%20Between%20Flux.create%20and%20Flux.generate.html",{loader:()=>a(()=>import("./2024-07-17-Difference Between Flux.create and Flux.generate.html-BlxrJ9Ml.js"),__vite__mapDeps([1008,1])),meta:{d:17212608e5,l:"2024年7月18日",c:["Java","Reactive Programming"],g:["Project Reactor","Flux"],e:`<hr>
<h1>Flux.create 和 Flux.generate 的区别</h1>
<h2>1. 引言</h2>
<p>Project Reactor 提供了一个完全非阻塞的编程基础，适用于 JVM。它提供了响应式流规范的实现，并提供了可组合的异步 API，如 Flux。Flux 是一个响应式流发布者，可以发出 0 到 N 个元素，然后成功完成或出现错误。根据我们的需求，可以通过多种不同的方式创建它。</p>
<h2>2. 理解 Flux</h2>
<p><strong>Flux 是一个响应式流发布者，可以发出 0 到 N 个元素</strong>。它有几个操作符，用于生成、协调和转换 Flux 序列。Flux 可以成功完成或出现错误完成。</p>`,r:{minutes:5.3,words:1589},t:"Flux.create 和 Flux.generate 的区别",y:"a"}}],["/posts/baeldung/2024-07-17/2024-07-17-Difference%20Between%20Java%20SE%20EE%20ME.html",{loader:()=>a(()=>import("./2024-07-17-Difference Between Java SE EE ME.html-DfoX3-mD.js"),__vite__mapDeps([1009,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Programming"],g:["Java SE","Java EE","Java ME"],e:`<hr>
<h1>Java SE/EE/ME 之间的区别</h1>
<h2><strong>1. 概述</strong></h2>
<p>在这篇简短的教程中，我们将比较三种不同的 Java 版本。我们将看到它们提供了哪些功能以及它们的典型用例。</p>
<h2><strong>2. Java 标准版</strong></h2>
<p>让我们从 Java 标准版开始，简称 Java SE。<strong>这个版本提供了 Java 语言的核心功能。</strong></p>
<p>Java SE 提供了 Java 应用程序的基本组件：Java 虚拟机、Java 运行时环境和 Java 开发工具包。截至本文撰写时，最新版本是 Java 18。</p>`,r:{minutes:2.79,words:836},t:"Java SE/EE/ME 之间的区别",y:"a"}}],["/posts/baeldung/2024-07-17/2024-07-17-Difference%20Between%20collect%20%20%20and%20collectLatest%20%20%20in%20Kotlin%20Flows.html",{loader:()=>a(()=>import("./2024-07-17-Difference Between collect   and collectLatest   in Kotlin Flows.html-Bp6OcVxT.js"),__vite__mapDeps([1010,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin","Coroutines"],g:["Kotlin Flow","collect()","collectLatest()"],e:`<hr>
<h1>Kotlin 中 Flow 的 collect() 和 collectLatest() 的区别</h1>
<h2>1. 引言</h2>
<p>Kotlin 的 <em>Flow</em>，作为 Kotlin 协程库的一部分，已经成为 Kotlin 中异步编程的重要工具。它提供了一种简洁且富有表现力的方式来处理异步数据流。在使用 Flow 收集数据时，两个常用函数是 <em>collect()</em> 和 <em>collectLatest()</em>。尽管这两个终端操作符都用于收集由 Flow 发出的数据，但它们具有不同的特性和用例。</p>
<p>在本教程中，我们将深入探讨 <em>collect()</em> 和 <em>collectLatest()</em> 之间的区别。</p>`,r:{minutes:3.1,words:931},t:"Kotlin 中 Flow 的 collect() 和 collectLatest() 的区别",y:"a"}}],["/posts/baeldung/2024-07-17/2024-07-17-Difference%20Between%20form%20data%20%20x%20www%20form%20urlencoded%20and%20raw%20in%20Postman.html",{loader:()=>a(()=>import("./2024-07-17-Difference Between form data  x www form urlencoded and raw in Postman.html-C0b8KqJF.js"),__vite__mapDeps([1011,1])),meta:{d:16555104e5,l:"2022年6月18日",c:["Postman","API"],g:["form-data","x-www-form-urlencoded","raw"],e:`<hr>
<h1>Postman中form-data、x-www-form-urlencoded和raw的区别</h1>
<h2>1. 概述</h2>
<p><strong>Postman 提供了多种方式与 API 或服务器请求交互，使用不同类型的正文参数。</strong> 这些代表了通过 HTTP 请求向 API 发送数据的不同方式。</p>
<p>在本教程中，我们将探讨在请求正文中使用 <em>form-data</em>、<em>x-www-form-urlencoded</em> 和 <em>raw</em> 之间的差异。</p>
<p><strong><em>form-data</em> 表示从网站表单发送到 API 的数据，作为 <em>multipart/form-data</em> 的一部分。</strong> Postman 中的 <em>form-data</em> 选项模拟了在网站上填写表单并提交的过程。我们可以编辑表单数据，并允许它通过转换数据中的关键值编辑器来设置不同的键/值对。</p>`,r:{minutes:3.81,words:1144},t:"Postman中form-data、x-www-form-urlencoded和raw的区别",y:"a"}}],["/posts/baeldung/2024-07-17/2024-07-17-Get%20the%20Full%20Path%20of%20a%20JAR%20File%20From%20a%20Class.html",{loader:()=>a(()=>import("./2024-07-17-Get the Full Path of a JAR File From a Class.html-D2o_MOUU.js"),__vite__mapDeps([1012,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","JAR"],g:["JAR文件","类路径"],e:`
<p>JAR文件是Java归档文件。我们在构建Java应用程序时可能会包含各种JAR文件作为库。</p>
<p>在本教程中，我们将探讨如何从给定的类找到JAR文件及其完整路径。</p>
<h2>2. 问题介绍</h2>
<p>假设我们在运行时有一个_类_对象。我们的目标是找出这个类属于哪个JAR文件。</p>
<p>一个例子可能会帮助我们快速理解问题。假设我们有一个Guava的_Ascii_类的实例。我们想要创建一个方法来找出包含_Ascii_类的JAR文件的完整路径。</p>
<p>我们将主要讨论两种方法来获取JAR文件的完整路径。此外，我们将讨论它们的优缺点。</p>
<p>为了简单起见，我们将通过单元测试断言来验证结果。</p>`,r:{minutes:5.98,words:1794},t:"从类获取JAR文件的完整路径",y:"a"}}],["/posts/baeldung/2024-07-17/2024-07-17-Guide%20to%20Creating%20Jar%20Executables%20and%20Windows%20Executables%20from%20Java.html",{loader:()=>a(()=>import("./2024-07-17-Guide to Creating Jar Executables and Windows Executables from Java.html-DNokS8To.js"),__vite__mapDeps([1013,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Windows Executables"],g:["jar","jpackage","Java Applications"],e:`<hr>
<h1>从Java创建Jar可执行文件和Windows可执行文件的指南</h1>
<p>在本教程中，我们将首先学习如何将Java程序打包成一个可执行的Java ARchive (JAR) 文件。然后，我们将看到如何使用该可执行JAR生成一个受Microsoft Windows支持的可执行文件。</p>
<p>我们将使用Java附带的_jar_命令行工具来创建JAR文件。然后，我们将学习使用Java 16及更高版本中可用的_jpackage_工具，作为_jdk.jpackage_，来生成可执行文件。</p>
<p>JAR文件是一个包含编译后的Java类文件和其他资源的容器。它基于流行的ZIP文件格式。</p>`,r:{minutes:4.67,words:1400},t:"从Java创建Jar可执行文件和Windows可执行文件的指南",y:"a"}}],["/posts/baeldung/2024-07-17/2024-07-17-Guide%20to%20Find%20in%20MongoDB.html",{loader:()=>a(()=>import("./2024-07-17-Guide to Find in MongoDB.html-DrxArTFO.js"),__vite__mapDeps([1014,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["MongoDB","Java"],g:["MongoDB","Java Driver","find","query"],e:`<hr>
<h1>MongoDB中查找指南</h1>
<h2>1. 概述</h2>
<p>在本教程中，我们将探讨执行搜索操作以检索MongoDB中的文档。MongoDB提供了一个_find_操作符，用于从集合中查询文档。<strong>_find_操作符的主要目的是根据查询条件从集合中选择文档，并返回一个游标到所选文档。</strong></p>
<p>在本教程中，我们首先将查看MongoDB Shell查询中的_find_操作符，然后使用Java驱动代码。</p>
<h2>2. 数据库初始化</h2>
<p>在我们继续执行_find_操作之前，我们首先需要设置一个名为_baeldung_的数据库和一个示例集合_employee_：</p>`,r:{minutes:4.84,words:1452},t:"MongoDB中查找指南",y:"a"}}],["/posts/baeldung/2024-07-17/2024-07-17-Handle%20Spring%20Security%20Exceptions%20With%20%20ExceptionHandler.html",{loader:()=>a(()=>import("./2024-07-17-Handle Spring Security Exceptions With  ExceptionHandler.html-62D8_jT1.js"),__vite__mapDeps([1015,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Security","Exception Handling"],g:["Spring Security","ExceptionHandler","AuthenticationException","AccessDeniedException"],e:`<hr>
<h1>使用 @ExceptionHandler 处理 Spring Security 异常</h1>
<p>如果你正在处理 Spring Security（特别是 OAuth）的实现，一定要看看《学习 Spring 安全》课程：</p>
<p><strong>&gt;</strong> <strong>学习 Spring 安全</strong></p>
<h2>1. 概述</h2>
<p>在本教程中，我们将学习如何使用 <em>@ExceptionHandler</em> 和 <em>@ControllerAdvice</em> 全局处理 Spring 安全异常。控制器建议是一个拦截器，允许我们在应用程序中使用相同的异常处理。</p>`,r:{minutes:4.28,words:1284},t:"使用 @ExceptionHandler 处理 Spring Security 异常",y:"a"}}],["/posts/baeldung/2024-07-17/2024-07-17-Hibernate%20s%20%20Detached%20Entity%20Passed%20to%20Persist%20%20Error.html",{loader:()=>a(()=>import("./2024-07-17-Hibernate s  Detached Entity Passed to Persist  Error.html-jWaUVc7n.js"),__vite__mapDeps([1016,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Hibernate","JPA"],g:["Hibernate","JPA","Detached Entity","Persistence"],e:`<hr>
<h1>Hibernate的“传递给持久化的分离实体”错误</h1>
<h2>1. 概述</h2>
<p>在本教程中，我们将学习Hibernate的_PersistentObjectException_，该错误发生在尝试保存一个分离的实体时。</p>
<p>我们将首先理解_分离_状态的含义，以及Hibernate的_persist_和_merge_方法之间的区别。然后我们将在各种用例中重现错误，以演示如何修复它。</p>
<h2>2. 分离实体</h2>
<p>让我们首先简要回顾一下_分离_状态是什么以及它如何与实体生命周期相关。</p>
<p>一个_分离_实体是一个不再被_持久化上下文_跟踪的Java对象。<strong>实体可以通过关闭或清除会话达到这种状态。同样，我们可以通过手动将其从持久化上下文中删除来分离实体。</strong></p>`,r:{minutes:3.34,words:1002},t:"Hibernate的“传递给持久化的分离实体”错误",y:"a"}}],["/posts/baeldung/2024-07-17/2024-07-17-How%20to%20Calculate%20%20Time%20Ago%20%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-17-How to Calculate  Time Ago  in Java.html-CYIPMZbm.js"),__vite__mapDeps([1017,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","日期和时间"],g:["时间计算","Java 8","Joda-Time","PrettyTime","Time4J"],e:`<hr>
<h1>如何在 Java 中计算“时间之前”</h1>
<p>计算相对时间和两个时间点之间的持续时间是软件系统中的常见用例。例如，我们可能希望向用户显示自发布新照片等事件以来经过了多少时间。这样的“时间之前”文本的例子包括“5分钟前”，“1年前”等。</p>
<p>虽然语义和选择的词语完全取决于上下文，但总体思路是相同的。</p>
<p>在本教程中，我们将探讨在 Java 中计算“时间之前”的几种解决方案。<strong>由于 Java 8 中引入了新的日期和时间 API，我们将分别讨论版本 7 和版本 8 的解决方案。</strong></p>
<h2>2. Java 版本 7</h2>`,r:{minutes:6.05,words:1816},t:"如何在 Java 中计算“时间之前”",y:"a"}}],["/posts/baeldung/2024-07-17/2024-07-17-How%20to%20Convert%20InputStream%20to%20Base64%20String.html",{loader:()=>a(()=>import("./2024-07-17-How to Convert InputStream to Base64 String.html-pVX-Dm-w.js"),__vite__mapDeps([1018,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Base64"],g:["InputStream","Base64","Encoding"],e:`<hr>
<h1>如何将 InputStream 转换为 Base64 字符串</h1>
<h2>1. 概述</h2>
<p>Base64 是一种文本编码方案，它为应用程序和平台之间的二进制数据提供可移植性。Base64 可用于将二进制数据存储在数据库字符串列中，从而避免混乱的文件操作。结合数据 URI 方案，Base64 可用于在符合 HTML 和多用途互联网邮件扩展（MIME）标准的网页和电子邮件中嵌入图像。</p>
<p>在本简短教程中，我们将演示 Java 流式 IO 函数和内置的 Java <em>Base64</em> 类，以<strong>将二进制数据作为 <em>InputStream</em> 加载，然后将其转换为 <em>String</em></strong>。</p>`,r:{minutes:4.22,words:1267},t:"如何将 InputStream 转换为 Base64 字符串",y:"a"}}],["/posts/baeldung/2024-07-17/2024-07-17-How%20to%20Split%20a%20Stream%20into%20Multiple%20Streams.html",{loader:()=>a(()=>import("./2024-07-17-How to Split a Stream into Multiple Streams.html-B0qI4QN4.js"),__vite__mapDeps([1019,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Streams"],g:["Java","Streams","Collectors","RxJava"],e:`<hr>
<h1>如何将一个流分割成多个流 | Baeldung</h1>
<h2>1. 概述</h2>
<p>Java的流API是一个强大且多功能的工具，用于处理数据。根据定义，流操作是对一组数据进行单次迭代。</p>
<p>然而，有时我们希望以不同的方式处理流的一部分，并得到多组结果。</p>
<p>在本教程中，我们将学习如何将流分割成多个组并独立处理它们。</p>
<h2>2. 使用收集器</h2>
<p><strong>一个流应该只操作一次，并有一个终端操作。</strong> 它可以有多个中间操作，但在关闭之前只能收集一次数据。</p>
<p>这意味着流API规范明确禁止将流分叉，并为每个分叉有不同的中间操作。这将导致多个终端操作。然而，我们可以在终端操作中分割流。这会创建一个分成两组或多组的结果。</p>`,r:{minutes:4.76,words:1428},t:"如何将一个流分割成多个流 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-17/2024-07-17-How%20to%20Truncate%20a%20String%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-17-How to Truncate a String in Java.html-DLAJB-nD.js"),__vite__mapDeps([1020,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","字符串操作"],g:["Java","字符串截断"],e:`<hr>
<h1>如何在Java中截断字符串</h1>
<p>在本教程中，我们将学习在Java中将字符串截断到所需字符数的多种方法。</p>
<p>我们将从探索使用JDK本身的方法开始。然后，我们将看看如何使用一些流行的第三方库来实现这一点。</p>
<h3>2.1 使用String的substring()方法</h3>
<p>String类带有一个方便的方法叫做substring。顾名思义，substring()返回给定字符串在指定索引之间的部分。</p>
<p>让我们看看它的实际应用：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">usingSubstringMethod</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> \`<span class="token operator">&lt;=</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> text<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> text<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:4.1,words:1230},t:"如何在Java中截断字符串",y:"a"}}],["/posts/baeldung/2024-07-17/2024-07-17-Instantiating%20Multiple%20Beans%20of%20the%20Same%20Class%20with%20Spring%20Annotations.html",{loader:()=>a(()=>import("./2024-07-17-Instantiating Multiple Beans of the Same Class with Spring Annotations.html-WOMwm08s.js"),__vite__mapDeps([1021,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Framework","Java"],g:["Spring","Beans","Java Configuration"],e:`<hr>
<h1>使用Spring注解实例化同一类的多个Bean</h1>
<h2>1. 概述</h2>
<p>Spring IoC容器创建和管理Spring Bean，这些Bean是我们应用程序的核心。创建一个Bean的实例与从普通的Java类创建对象是相同的。然而，生成同一类的多个Bean可能会有些挑战。</p>
<p>在本教程中，我们将学习如何使用Spring框架中的注解来创建同一类的多个Bean。</p>
<h2>2. 使用Java配置</h2>
<p><strong>这是使用注解创建同一类多个Bean的最简单和最容易的方法。</strong> 在这种方法中，我们将使用基于Java的配置类来配置同一类的多个Bean。</p>`,r:{minutes:5.48,words:1643},t:"使用Spring注解实例化同一类的多个Bean",y:"a"}}],["/posts/baeldung/2024-07-17/2024-07-17-Introduction%20to%20Lightrun%20with%20Java.html",{loader:()=>a(()=>import("./2024-07-17-Introduction to Lightrun with Java.html-DhPIU7Uw.js"),__vite__mapDeps([1022,1])),meta:{d:16540416e5,l:"2022年6月1日",c:["Java","Lightrun"],g:["Lightrun","Java","Observability","Developer Tools"],e:`<hr>
<h1>Lightrun 与 Java 介绍</h1>
<p>在本文中，我们将探索 Lightrun——一个开发者可观测性平台——通过将其引入应用程序并展示我们可以用它实现的功能。</p>
<h2><strong>2. 什么是 Lightrun?</strong></h2>
<p><strong>Lightrun 是一个可观测性平台，允许我们对我们的 Java（也支持其他语言）应用程序进行仪器化，然后直接从 IntelliJ、Visual Studio Code 和许多其他日志平台和 APM 中查看这些仪器。</strong> 它被设计为能够无缝地向在任何环境中运行的应用程序添加仪器，并从任何地方访问它们，使我们能够从本地工作站到生产实例快速诊断问题。</p>`,r:{minutes:8.96,words:2689},t:"Lightrun 与 Java 介绍",y:"a"}}],["/posts/baeldung/2024-07-17/2024-07-17-Is%20There%20a%20Destructor%20in%20Java%20.html",{loader:()=>a(()=>import("./2024-07-17-Is There a Destructor in Java .html-C8F8NmoA.js"),__vite__mapDeps([1023,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Programming"],g:["Java","Destructor","Garbage Collection","Finalizer","AutoCloseable","Cleaner"],e:`<hr>
<h1>Java中有析构函数吗？</h1>
<h2>1. 概述</h2>
<p>在这篇简短的教程中，我们将探讨在Java中销毁对象的可能性。</p>
<p>每次我们创建一个对象时，Java会自动在堆上分配内存。同样，当一个对象不再需要时，内存也会自动被释放。</p>
<p>在像C这样的语言中，当我们在内存中完成使用一个对象时，我们必须手动释放它。不幸的是，<strong>Java不支持手动内存释放</strong>。此外，Java编程语言的一个特性是它自己通过一种称为垃圾回收的技术来处理对象的销毁。</p>
<h2>3. 垃圾回收</h2>
<p>垃圾回收从堆内存中移除未使用的对象。它有助于防止内存泄漏。简单来说，当没有更多的引用指向特定对象，并且对象不再可访问时，垃圾回收器会将此对象标记为不可达并回收其空间。</p>`,r:{minutes:5.05,words:1516},t:"Java中有析构函数吗？",y:"a"}}],["/posts/baeldung/2024-07-17/2024-07-17-Java%2014%20Record%20vs.%20Lombok.html",{loader:()=>a(()=>import("./2024-07-17-Java 14 Record vs. Lombok.html-BlmZv200.js"),__vite__mapDeps([1024,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Programming"],g:["Java 14","Lombok"],e:`
<p>Java 的记录关键字是在 Java 14 中引入的一项新的语义特性。记录对于创建小型不可变对象非常有用。另一方面，Lombok 是一个 Java 库，可以自动生成一些已知模式作为 Java 字节码。尽管它们都可以用来减少样板代码，但它们是不同的工具。因此，我们应该根据给定上下文的需求选择更适合的那一个。</p>
<p>在本文中，我们将探索各种用例，包括 Java 记录的一些限。对于每个示例，我们将看看 Lombok 如何派上用场，并比较这两种解决方案。</p>
<h2>2. 小型不可变对象</h2>
<p>对于我们的第一个示例，我们将使用 <em>Color</em> 对象。一个 <em>Color</em> 由三个整数值组成，分别代表红色、绿色和蓝色通道。此外，颜色将暴露其十六进制表示。例如，具有 <em>RGB(255,0,0)</em> 的颜色将具有十六进制表示 <em>#FF0000</em>。此外，我们希望两个颜色如果具有相同的 RGB 值则视为 <em>相等</em>。</p>`,r:{minutes:4.13,words:1240},t:"Java 14 记录与 Lombok 比较",y:"a"}}],["/posts/baeldung/2024-07-17/2024-07-17-JavaScript%20Function%20Call%20with%20Thymeleaf.html",{loader:()=>a(()=>import("./2024-07-17-JavaScript Function Call with Thymeleaf.html-DIoG2KA-.js"),__vite__mapDeps([1025,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Thymeleaf","JavaScript"],g:["Thymeleaf","JavaScript","Spring"],e:'<hr>\n<h1>JavaScript 函数调用与 Thymeleaf | Baeldung</h1>\n<h2>1. 概述</h2>\n<p>在本教程中，我们将在 Thymeleaf 模板中调用 JavaScript 函数。</p>\n<p>我们将从设置依赖开始。然后，我们将添加我们的 Spring 控制器和 Thymeleaf 模板。最后，我们将展示基于其输入调用 JavaScript 函数的方法。</p>\n<h2>2. 设置</h2>\n<p>为了在我们的应用程序中使用 Thymeleaf，让我们将 Thymeleaf Spring 5 依赖项添加到我们的 Maven 配置中：</p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`org.thymeleaf`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`thymeleaf-spring5`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`3.1.2.RELEASE`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n</code></pre></div>',r:{minutes:2.37,words:712},t:"JavaScript 函数调用与 Thymeleaf | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-17/2024-07-17-Kotlin%20Equivalent%20of%20Java%20s%20equalsIgnoreCase%20%20.html",{loader:()=>a(()=>import("./2024-07-17-Kotlin Equivalent of Java s equalsIgnoreCase  .html-B8tVhDDi.js"),__vite__mapDeps([1026,1])),meta:{d:172121079e4,e:`<p>date: 2024-07-17
category:</p>
<ul>
<li>Kotlin</li>
<li>Java
tag:</li>
<li>equalsIgnoreCase</li>
<li>Java</li>
<li>Kotlin
head:</li>
<li>
<ul>
<li>meta</li>
<li>name: keywords
content: Kotlin, Java, equalsIgnoreCase, case sensitivity</li>
</ul>
</li>
</ul>
<hr>
<h1>Kotlin中Java的equalsIgnoreCase等价物</h1>`,r:{minutes:.1,words:29},t:"Kotlin中Java的equalsIgnoreCase等价物",y:"a"}}],["/posts/baeldung/2024-07-17/2024-07-17-Processing%20the%20Response%20Body%20in%20Spring%20Cloud%20Gateway.html",{loader:()=>a(()=>import("./2024-07-17-Processing the Response Body in Spring Cloud Gateway.html-ChS1Xv2t.js"),__vite__mapDeps([1027,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Cloud Gateway","Web Development"],g:["Spring Cloud Gateway","API Gateway","Response Body Manipulation","Java","Reactive Programming"],e:`<hr>
<h1>1. 引言</h1>
<p>在本教程中，我们将探讨如何使用 Spring Cloud Gateway 在将响应体发送回客户端之前对其进行检查和/或修改。</p>
<h1>2. Spring Cloud Gateway 快速回顾</h1>
<p>Spring Cloud Gateway，简称 SCG，是 Spring Cloud 家族的一个子项目，它提供了一个基于反应式 Web 堆栈构建的 API 网关。我们之前已经在早期教程中介绍了其基本用法，因此这里不会再涉及这些方面。</p>
<p><strong>相反，这次我们将专注于在围绕 API 网关设计解决方案时偶尔会出现的一个特定使用场景：如何在将响应发送回客户端之前处理后端响应有效载荷？</strong></p>`,r:{minutes:6.96,words:2088},t:"1. 引言",y:"a"}}],["/posts/baeldung/2024-07-17/2024-07-17-Query%20Documents%20using%20Document%20ID%20in%20MongoDB.html",{loader:()=>a(()=>import("./2024-07-17-Query Documents using Document ID in MongoDB.html-ZgAmNMz-.js"),__vite__mapDeps([1028,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["MongoDB","Java"],g:["MongoDB","Java","Database"],e:`
<p>在本教程中，我们将探讨在MongoDB中使用文档ID执行查询操作。MongoDB提供了一个_find_操作符来从集合中查询文档。</p>
<p>首先，让我们看看在MongoDB Shell中使用文档ID查询文档，然后使用Java驱动程序代码。</p>
<h2>2. MongoDB文档的文档ID是什么？</h2>
<p>就像其他数据库管理系统一样，MongoDB要求每个存储在集合中的文档都有一个唯一的标识符。这个唯一的标识符作为集合的主键。</p>
<p>在MongoDB中，ID由12个字节组成：</p>
<ul>
<li>一个4字节的时间戳，表示ID的创建时间，以Unix纪元以来的秒数计算</li>
<li>一个5字节的随机生成值，对机器和进程是唯一的</li>
<li>一个3字节的递增计数器</li>
</ul>`,r:{minutes:4.53,words:1360},t:"MongoDB中使用文档ID查询文档",y:"a"}}],["/posts/baeldung/2024-07-17/2024-07-17-Spring%20Boot%20%20%20Keycloak%20Integration%20Testing%20with%20Testcontainers.html",{loader:()=>a(()=>import("./2024-07-17-Spring Boot   Keycloak Integration Testing with Testcontainers.html-C1-EXtnR.js"),__vite__mapDeps([1029,1])),meta:{d:16619904e5,l:"2022年9月1日",c:["Spring Boot","Keycloak"],g:["Spring Security","OAuth","Integration Testing","Testcontainers"],e:`
<p>如果你正在处理Spring Security（特别是OAuth）实现，一定要看看《学习Spring安全》课程。</p>
<p><strong>&gt;&gt; 学习Spring</strong>
<strong>安全</strong></p>
<h2>1. 引言</h2>
<p>集成测试在验证应用程序是否正常工作时至关重要。我们还应该正确地测试认证，因为它是一个敏感部分。Testcontainers允许我们在测试阶段启动Docker容器，以针对实际的技术栈运行我们的测试。</p>
<p>在本文中，<strong>我们将看到如何使用Testcontainers设置针对实际Keycloak实例的集成测试</strong>。</p>`,r:{minutes:6.22,words:1867},t:"Spring Boot – 使用Testcontainers进行Keycloak集成测试",y:"a"}}],["/posts/baeldung/2024-07-17/2024-07-17-Spring%20Boot%20%20%20Testing%20Redis%20With%20Testcontainers.html",{loader:()=>a(()=>import("./2024-07-17-Spring Boot   Testing Redis With Testcontainers.html-C2LNle4x.js"),__vite__mapDeps([1030,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Boot","Redis"],g:["Testcontainers","Java"],e:`<hr>
<h1>Spring Boot – 使用 Testcontainers 测试 Redis</h1>
<h2>1. 概述</h2>
<p>Testcontainers 是一个用于创建临时 Docker 容器以进行单元测试的 Java 库。当我们希望避免使用实际服务器进行测试时，它非常有用。</p>
<p>在本教程中，<strong>我们将学习如何在测试使用 Redis 的 Spring Boot 应用程序时使用 Testcontainers。</strong></p>
<h2>2. 项目设置</h2>
<p>使用任何测试容器的首要前提是<strong>在运行测试的机器上安装 Docker。</strong></p>`,r:{minutes:5.23,words:1570},t:"Spring Boot – 使用 Testcontainers 测试 Redis",y:"a"}}],["/posts/baeldung/2024-07-17/2024-07-17-Spring%20Data%20JPA%20%20%20Run%20an%20App%20Without%20a%20Database.html",{loader:()=>a(()=>import("./2024-07-17-Spring Data JPA   Run an App Without a Database.html-sUB7cud9.js"),__vite__mapDeps([1031,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Data JPA","Spring Boot"],g:["JPA","Hibernate","MySQL"],e:`<hr>
<h1>Spring Data JPA – 不需要数据库运行应用程序</h1>
<h2>1. 概述</h2>
<p>在本教程中，<strong>我们将学习如何在没有运行数据库的情况下启动 Spring Boot 应用程序。</strong></p>
<p>默认情况下，如果我们有一个包含 Spring Data JPA 的 Spring Boot 应用程序，那么应用程序将自动尝试创建数据库连接。然而，在应用程序启动时数据库不可用的情况下，可能需要避免这种情况。</p>
<h2>2. 设置</h2>
<p>我们将使用一个简单的使用 MySQL 的 Spring Boot 应用程序。让我们看看设置应用程序的步骤。</p>`,r:{minutes:2.92,words:876},t:"Spring Data JPA – 不需要数据库运行应用程序",y:"a"}}],["/posts/baeldung/2024-07-17/2024-07-17-Spring%20Data%20Rest%20%20%20Serializing%20the%20Entity%20ID.html",{loader:()=>a(()=>import("./2024-07-17-Spring Data Rest   Serializing the Entity ID.html-BPj3gRtK.js"),__vite__mapDeps([1032,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Data Rest","RESTful Web Services"],g:["Spring Data Rest","Entity IDs","Serialization"],e:`<hr>
<h1>Spring Data Rest - 序列化实体ID</h1>
<h2>1. 概述</h2>
<p>众所周知，当我们想要快速开始使用RESTful Web服务时，Spring Data Rest模块可以使我们的生活更轻松。然而，这个模块具有默认的行为，有时可能会让人感到困惑。</p>
<p>在本教程中，我们将<strong>学习为什么Spring Data Rest默认不序列化实体ID。同时，我们将讨论改变这种行为的各种解决方案</strong>。</p>
<h2>2. 默认行为</h2>
<p>在我们详细讨论之前，让我们通过一个快速的例子来理解什么是序列化实体ID。</p>`,r:{minutes:5.24,words:1573},t:"Spring Data Rest - 序列化实体ID",y:"a"}}],["/posts/baeldung/2024-07-17/2024-07-17-UUID%20as%20Entity%20ID%20in%20MongoDB.html",{loader:()=>a(()=>import("./2024-07-17-UUID as Entity ID in MongoDB.html-DgHzwrE-.js"),__vite__mapDeps([1033,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["MongoDB","Java"],g:["UUID","Spring Data MongoDB"],e:`<hr>
<h1>MongoDB中使用UUID作为实体ID | Baeldung## 1. 概述</h1>
<p>默认情况下，MongoDB Java驱动程序生成的ID类型为_ObjectId_。有时，我们可能希望使用另一种类型的数据作为对象的唯一标识符，例如UUID。然而，<strong>MongoDB Java驱动程序不能自动生成UUID</strong>。</p>
<p>在本教程中，我们将探讨使用MongoDB Java驱动程序和Spring Data MongoDB生成UUID的三种方法。</p>
<h2>2. 共同点</h2>
<p>应用程序很少只管理一种类型的数据。为了简化MongoDB数据库中ID的管理，更容易实现一个抽象类，该类将定义我们所有_Document_类的ID。</p>`,r:{minutes:4.53,words:1358},t:"MongoDB中使用UUID作为实体ID | Baeldung## 1. 概述",y:"a"}}],["/posts/baeldung/2024-07-17/2024-07-17-Unique%20Field%20in%20MongoDB%20Document%20in%20Spring%20Data.html",{loader:()=>a(()=>import("./2024-07-17-Unique Field in MongoDB Document in Spring Data.html-DJJdxzuy.js"),__vite__mapDeps([1034,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Data","MongoDB"],g:["MongoDB","Unique Index","Spring Data"],e:`<hr>
<h1>MongoDB文档中使用Spring Data定义唯一字段</h1>
<h2>1. 引言</h2>
<p>在本教程中，我们将学习如何使用Spring Data在MongoDB中定义唯一字段。唯一字段是数据库设计的重要组成部分。它们同时保证了一致性和性能，防止在不应该有重复值的地方出现重复值。</p>
<h2>2. 配置</h2>
<p>与关系型数据库不同，MongoDB不提供创建约束的选项。<strong>因此，我们唯一的选择是创建唯一索引。</strong> 但是，默认情况下，Spring Data中的自动索引创建是关闭的。首先，让我们在_application.properties_中启用它：</p>`,r:{minutes:4.63,words:1389},t:"MongoDB文档中使用Spring Data定义唯一字段",y:"a"}}],["/posts/baeldung/2024-07-17/2024-07-17-Unit%20Test%20Private%20Methods%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-17-Unit Test Private Methods in Java.html-BicDaWzF.js"),__vite__mapDeps([1035,1])),meta:{d:16540416e5,l:"2022年6月1日",c:["Java","Testing"],g:["Unit Testing","Private Methods","Reflection"],e:`<hr>
<h1>Java中单元测试私有方法</h1>
<h2>1. 概述</h2>
<p>在本教程中，我们将简要解释为什么直接测试私有方法通常不是一个好主意。然后我们将展示如何在必要时测试Java中的私有方法。</p>
<h2>2. 我们不应该测试私有方法的原因</h2>
<p><strong>一般来说，我们编写的单元测试应该只检查我们的公共方法合约。</strong> 私有方法是调用我们公共方法的人不知道的实现细节。此外，改变我们的实现细节不应该导致我们改变我们的测试。</p>
<p>一般来说，敦促测试私有方法突出了以下问题之一：</p>
<ul>
<li>我们的私有方法中有死代码。</li>
<li>我们的私有方法太复杂了，应该属于另一个类。</li>
<li>我们的方法本来就不应该设置为私有。</li>
</ul>`,r:{minutes:3.62,words:1087},t:"Java中单元测试私有方法",y:"a"}}],["/posts/baeldung/2024-07-17/2024-07-17-Use%20Cases%20for%20Static%20Methods%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-17-Use Cases for Static Methods in Java.html-iSve7gyV.js"),__vite__mapDeps([1036,1])),meta:{d:16566336e5,l:"2022年7月1日",c:["Java","编程"],g:["静态方法","Java"],e:`
<p>静态方法是大多数面向对象编程语言中常见的，包括Java。静态方法与实例方法的区别在于它们没有拥有它们的实例对象。相反，<strong>静态方法是在类级别定义的，可以在不创建实例的情况下使用</strong>。</p>
<p>在本教程中，我们将了解Java中静态方法的定义以及它们的限制。然后，我们将看看使用静态方法的常见用例，并推荐何时在我们的代码中应用它们。最后，我们将看到如何测试静态方法以及如何模拟它们。</p>
<p>实例方法是根据对象的运行时类型进行多态解析的。另一方面，<strong>静态方法是在编译时根据它们定义的类解析的</strong>。</p>
<h3>2.1 类级别</h3>`,r:{minutes:5.98,words:1795},t:"Java中静态方法的使用案例",y:"a"}}],["/posts/baeldung/2024-07-17/2024-07-17-Using%20Dates%20in%20CRUD%20Operations%20in%20MongoDB.html",{loader:()=>a(()=>import("./2024-07-17-Using Dates in CRUD Operations in MongoDB.html-Ho__do76.js"),__vite__mapDeps([1037,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["MongoDB","Java"],g:["CRUD","Date Operations"],e:`<hr>
<h1>在MongoDB中使用日期进行CRUD操作</h1>
<h2>1. 概述</h2>
<p>在本教程中，我们将使用MongoDB Java驱动程序执行与日期相关的CRUD操作，例如创建和更新带有日期字段的文档，以及查询、更新和删除其日期字段在给定范围内的文档。</p>
<h2>2. 设置</h2>
<p>在深入实现之前，让我们设置我们的工作环境。</p>
<h3>2.1. Maven依赖</h3>
<p>首先，<strong>你应该安装MongoDB</strong>。如果你没有安装，可以按照官方的MongoDB安装指南进行安装。</p>
<p>接下来，让我们将MongoDB Java驱动程序作为依赖项添加到我们的_pom.xml_文件中：</p>`,r:{minutes:6.55,words:1965},t:"在MongoDB中使用日期进行CRUD操作",y:"a"}}],["/posts/baeldung/2024-07-17/2024-07-17-Validate%20an%20XML%20File%20Against%20an%20XSD%20File.html",{loader:()=>a(()=>import("./2024-07-17-Validate an XML File Against an XSD File.html-BmAG0OmS.js"),__vite__mapDeps([1038,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","XML"],g:["XML","XSD","Java"],e:'\n<p>在本教程中，我们将演示如何对XML文件进行XSD文件验证。</p>\n<h2>2. XML和两个XSD文件的定义</h2>\n<p>考虑以下XML文件_baeldung.xml_，其中包含一个名称和一个地址，地址本身由邮政编码和城市组成：</p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>```<span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>```\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>individual</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>`Baeldung`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>address</span><span class="token punctuation">&gt;</span></span>`\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>zip</span><span class="token punctuation">&gt;</span></span>`00001`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>zip</span><span class="token punctuation">&gt;</span></span>`\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>city</span><span class="token punctuation">&gt;</span></span>`New York`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>city</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>address</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>individual</span><span class="token punctuation">&gt;</span></span>`\n</code></pre></div>',r:{minutes:3.67,words:1100},t:"如何对XML文件进行XSD验证",y:"a"}}],["/posts/baeldung/2024-07-17/2024-07-17-What%20Are%20the%20Spring%20Boot%20Default%20Memory%20Settings%20.html",{loader:()=>a(()=>import("./2024-07-17-What Are the Spring Boot Default Memory Settings .html-Dj2ALzU3.js"),__vite__mapDeps([1039,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Boot","Java"],g:["Spring Boot","Memory Settings"],e:`<hr>
<h1>Spring Boot 默认内存设置是什么？</h1>
<h2>1. 概述</h2>
<p>在本教程中，我们将了解 Spring Boot 应用程序使用的默认内存设置。</p>
<p>通常，Spring 没有特定的内存配置，它运行在底层 Java 进程的配置下。因此，以下是我们可以配置 Java 应用程序内存的方式。</p>
<p>Java 进程或 JVM 的内存被分配到堆、栈、元空间、JIT 代码缓存和共享库中。</p>
<h3>2.1. 堆</h3>
<p>堆是对象存放直到被垃圾收集器收集的那部分内存。</p>
<p>默认的最小堆大小是 <strong>8 MB 或物理内存的 1/64，范围在 8 MB 到 1 GB 之间</strong>。</p>`,r:{minutes:2.46,words:739},t:"Spring Boot 默认内存设置是什么？",y:"a"}}],["/posts/baeldung/2024-07-18/2024-07-18-%20RequestMapping%20Value%20in%20Properties%20File.html",{loader:()=>a(()=>import("./2024-07-18- RequestMapping Value in Properties File.html-BKvWW8Cd.js"),__vite__mapDeps([1040,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring","REST"],g:["Spring MVC","RequestMapping"],e:`<hr>
<h1>在属性文件中设置@RequestMapping值</h1>
<h2>1. 概述</h2>
<p>在本教程中，<strong>我们将探讨如何在属性文件中设置_@RequestMapping_的值</strong>。同时，我们将通过一个实际示例来解释所有必要的配置。</p>
<p>首先，让我们定义一个基本的_@RequestMapping_及其配置。</p>
<h2>2. @RequestMapping 基础</h2>
<p>首先，<strong>我们将创建并使用_@RequestMapping_注解我们的类_WelcomeController_以映射web请求</strong>。这个类将分配我们的处理器方法_getWelcomeMessage_()。</p>`,r:{minutes:2.18,words:654},t:"在属性文件中设置@RequestMapping值",y:"a"}}],["/posts/baeldung/2024-07-18/2024-07-18-Adding%20Parameters%20to%20Java%20HttpClient%20Requests.html",{loader:()=>a(()=>import("./2024-07-18-Adding Parameters to Java HttpClient Requests.html-CjFLcceL.js"),__vite__mapDeps([1041,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Java","HttpClient"],g:["Java","HttpClient","参数"],e:`<hr>
<h1>Java HttpClient 请求参数的添加</h1>
<h2>1. 引言</h2>
<p>在本教程中，我们将讨论如何向 Java <em>HttpClient</em> 请求添加参数。</p>
<p>从 Java 11 开始，Java <em>HTTPClient</em> 作为内置功能提供。因此，我们可以在不使用像 Apache HttpClient 和 OkHttp 这样的第三方库的情况下发送 HTTP 请求。</p>
<p><em>HttpRequest.Builder</em> 通过构建器模式帮助我们轻松创建 HTTP 请求并添加参数。</p>
<p><strong>Java <em>HttpClient</em> API 没有提供任何方法来添加查询参数</strong>。尽管我们可以利用 Apache HttpClient 中的 <em>URIBuilder</em> 这样的第三方库来构建请求 URI 字符串。让我们看看仅使用 Java 11 中添加的功能会是什么样子：</p>`,r:{minutes:1.38,words:413},t:"Java HttpClient 请求参数的添加",y:"a"}}],["/posts/baeldung/2024-07-18/2024-07-18-Apache%20ActiveMQ%20vs.%20Kafka.html",{loader:()=>a(()=>import("./2024-07-18-Apache ActiveMQ vs. Kafka.html-DOO8Azbo.js"),__vite__mapDeps([1042,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Messaging Systems","Apache Kafka"],g:["Apache ActiveMQ","Apache Kafka","Messaging","Java"],e:`<hr>
<h1>Apache ActiveMQ 与 Kafka | Baeldung## 1. 概述</h1>
<p>在分布式架构中，应用程序通常需要在彼此之间交换数据。一方面，这可以通过直接通信来实现。另一方面，为了实现高可用性和分区容错性，并使应用程序之间的耦合度降低，消息传递是一个合适的解决方案。</p>
<p>因此，我们可以选择多种产品。Apache 基金会提供了 ActiveMQ 和 Kafka，我们将在本文中对它们进行比较。</p>
<h2>2. 一般事实</h2>
<h3>2.1. ActiveMQ</h3>
<p><strong>ActiveMQ 是一种传统的消息代理，其目标是确保应用程序之间以安全和可靠的方式交换数据。</strong> 它处理的数据量较小，因此专门用于定义良好的消息格式和事务性消息传递。</p>`,r:{minutes:7.13,words:2140},t:"Apache ActiveMQ 与 Kafka | Baeldung## 1. 概述",y:"a"}}],["/posts/baeldung/2024-07-18/2024-07-18-Building%20Native%20Images%20With%20Spring%20Native%20and%20Liberica%20Tools%20With%20a%20Speed%20Comparison.html",{loader:()=>a(()=>import("./2024-07-18-Building Native Images With Spring Native and Liberica Tools With a Speed Comparison.html-Cpmw7Dgw.js"),__vite__mapDeps([1043,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Native","Liberica"],g:["Spring Boot","GraalVM","Native Image"],e:`<hr>
<h1>使用Spring Native和Liberica工具构建原生镜像及其启动速度比较</h1>
<h2>1. 概述</h2>
<p>随着微服务架构的流行，庞大的单体应用程序正在成为过去。Java并没有停滞不前，而是在适应现代需求。例如，Oracle、Red Hat、BellSoft和其他贡献者正在积极开发GraalVM项目。此外，针对微服务的框架Quarkus一年前发布。就Spring Boot而言，VMware已经致力于Spring Native项目两年了。</p>
<p>由于VMware和BellSoft的合作，Spring Native成为了一个端到端的原生镜像解决方案，其中包括基于GraalVM源代码的Liberica原生镜像工具包。Spring Native和Liberica NIK允许开发人员创建优化资源消耗并最小化启动时间的Spring Boot应用程序的原生可执行文件。</p>`,r:{minutes:4.89,words:1467},t:"使用Spring Native和Liberica工具构建原生镜像及其启动速度比较",y:"a"}}],["/posts/baeldung/2024-07-18/2024-07-18-Calling%20Private%20Methods%20of%20a%20Class%20From%20Outside%20the%20Class.html",{loader:()=>a(()=>import("./2024-07-18-Calling Private Methods of a Class From Outside the Class.html-CC5xUhR9.js"),__vite__mapDeps([1044,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin","Programming"],g:["Kotlin","Reflection","Inner Class","Private Methods"],e:`<hr>
<h1>从类外部调用类的私有方法 | Baeldung 关于 Kotlin## 1. 引言</h1>
<p>在 Kotlin 中，私有方法通常无法从类外部访问。这是封装和数据隐藏的有用特性，但有时我们可能需要从类外部调用私有方法。</p>
<p>在本教程中，我们将探讨从类外部调用类的私有方法的各种方法。</p>
<h2>2. 使用公共方法</h2>
<p>根据定义，私有方法只能在声明它们的类内部访问。</p>
<p>从类外部调用类的私有方法的一个简单方法是创建一个调用私有方法的公共方法：</p>
<div class="language-kotlin" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> MyPublicClass <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">privateMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string-literal singleline"><span class="token string">"这是一个私有方法"</span></span>
    <span class="token punctuation">}</span>

    <span class="token keyword">fun</span> <span class="token function">callPrivateMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">privateMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:3.27,words:981},t:"从类外部调用类的私有方法 | Baeldung 关于 Kotlin## 1. 引言",y:"a"}}],["/posts/baeldung/2024-07-18/2024-07-18-Check%20if%20BigDecimal%20Value%20Is%20Zero.html",{loader:()=>a(()=>import("./2024-07-18-Check if BigDecimal Value Is Zero.html-Dr8zhmB3.js"),__vite__mapDeps([1045,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","BigDecimal"],g:["BigDecimal","Java","Zero"],e:`<hr>
<h1>检查BigDecimal值是否为零</h1>
<h2>1. 概述</h2>
<p>当我们在Java中进行小数计算时，可能会考虑使用_BigDecimal_类。</p>
<p>在这个简短的教程中，我们将探讨如何检查一个_BigDecimal_对象的值是否为零。</p>
<h2>2. 问题介绍</h2>
<p>问题其实相当直接。假设我们有一个非空的_BigDecimal_对象。我们想知道它的值是否等于零。</p>
<p>敏锐的眼睛可能已经意识到了“<em>它的值是否等于零</em>”的要求隐含了解决方案：使用_equals()_方法。此外，_BigDecimal_类提供了一个方便的_ZERO_常量对象来表示零值。</p>`,r:{minutes:3.37,words:1010},t:"检查BigDecimal值是否为零",y:"a"}}],["/posts/baeldung/2024-07-18/2024-07-18-Check%20if%20a%20Character%20Is%20a%20Vowel%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-18-Check if a Character Is a Vowel in Java.html-CywFicgL.js"),__vite__mapDeps([1046,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java"],g:["Character","Vowel"],e:`<hr>
<h1>在Java中检查字符是否为元音</h1>
<ol>
<li>
<p>概述
当处理来自字符串的字符时，我们可能希望根据它们是否属于特定组来对它们进行分类。例如，英文字母表中的字符要么是元音，要么是辅音。
在本教程中，我们将探讨几种检查字符是否为元音的方法。我们可以轻松地将这些方法扩展到其他字符组。</p>
</li>
<li>
<p>使用_indexOf_方法检查元音
正如我们所知，所有的元音字母，我们可以将它们（包括大小写）添加到一个字符串中：</p>
</li>
</ol>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> <span class="token constant">VOWELS</span> <span class="token operator">=</span> <span class="token string">"aeiouAEIOU"</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:3.72,words:1115},t:"在Java中检查字符是否为元音",y:"a"}}],["/posts/baeldung/2024-07-18/2024-07-18-Configure%20JWT%20Authentication%20for%20OpenAPI.html",{loader:()=>a(()=>import("./2024-07-18-Configure JWT Authentication for OpenAPI.html-Ge4j3mH0.js"),__vite__mapDeps([1047,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Security","OAuth"],g:["OpenAPI","JWT","Springdoc-OpenAPI","Swagger-UI"],e:`<hr>
<h1>如何为Spring Boot应用中的OpenAPI配置JWT认证</h1>
<p>如果你正在处理Spring Security（尤其是OAuth）实现，一定要看看《Learn Spring Security》课程：</p>
<p><strong>&gt; &gt; LEARN SPRING</strong>
<strong>SECURITY</strong></p>
<h2>1. 概述</h2>
<p>OpenAPI 是一种语言无关且平台独立的规范，它标准化了REST API。OpenAPI 使用户能够轻松理解API而无需深入代码。Swagger-UI 基于这个OpenAPI规范生成一个用户界面，帮助可视化和测试REST API。</p>`,r:{minutes:5.35,words:1606},t:"如何为Spring Boot应用中的OpenAPI配置JWT认证",y:"a"}}],["/posts/baeldung/2024-07-18/2024-07-18-Configure%20MongoDB%20Collection%20Name%20for%20a%20Class%20in%20Spring%20Data.html",{loader:()=>a(()=>import("./2024-07-18-Configure MongoDB Collection Name for a Class in Spring Data.html-CqnUrHR1.js"),__vite__mapDeps([1048,1])),meta:{d:17119296e5,l:"2024年4月1日",c:["Spring Data","MongoDB"],g:["MongoDB","Collection Name","Spring Data","Configuration"],e:`<hr>
<h1>在Spring Data中为类配置MongoDB集合名称</h1>
<h2>1. 概述</h2>
<p>在本教程中，我们将学习如何为我们的类配置MongoDB集合名称，并提供一个实际示例。我们将使用Spring Data，它为我们提供了几种配置选项，几乎不需要额外配置。我们将通过构建一个简单的音乐商店来探索每种选项的使用场景。</p>
<h2>2. 使用案例和设置</h2>
<p>我们的使用案例有四个简单的类：<em>MusicAlbum</em>、<em>Compilation</em>、<em>MusicTrack</em> 和 <em>Store</em>。<strong>每个类都将以不同的方式配置其集合名称。</strong> 此外，每个类都将拥有自己的 <em>MongoRepository</em>。不需要自定义查询。此外，我们需要一个正确配置的MongoDB数据库实例。</p>`,r:{minutes:6.56,words:1968},t:"在Spring Data中为类配置MongoDB集合名称",y:"a"}}],["/posts/baeldung/2024-07-18/2024-07-18-Constraint%20Composition%20with%20Bean%20Validation.html",{loader:()=>a(()=>import("./2024-07-18-Constraint Composition with Bean Validation.html-CGWTUkFH.js"),__vite__mapDeps([1049,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Spring"],g:["Bean Validation","Constraint Composition"],e:`<hr>
<h1>Bean Validation中的约束组合</h1>
<p>在本教程中，我们将讨论Bean Validation的约束组合。</p>
<p><strong>将多个约束组合在一个自定义注解下可以减少代码重复并提高可读性</strong>。我们将看到如何创建组合约束以及如何根据我们的需求进行自定义。</p>
<p>对于代码示例，我们将使用与Java Bean Validation基础相同的依赖项。</p>
<h2>2. 理解问题</h2>
<p>首先，让我们熟悉数据模型。我们将使用_Account_类作为本文大多数示例的基础：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@NotNull</span>
    <span class="token annotation punctuation">@Pattern</span><span class="token punctuation">(</span>regexp <span class="token operator">=</span> <span class="token string">".*\\\\d.*"</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"必须包含至少一个数字字符"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Length</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"必须有6到32个字符"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@NotNull</span>
    <span class="token annotation punctuation">@Pattern</span><span class="token punctuation">(</span>regexp <span class="token operator">=</span> <span class="token string">".*\\\\d.*"</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"必须包含至少一个数字字符"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Length</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"必须有6到32个字符"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> nickname<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@NotNull</span>
    <span class="token annotation punctuation">@Pattern</span><span class="token punctuation">(</span>regexp <span class="token operator">=</span> <span class="token string">".*\\\\d.*"</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"必须包含至少一个数字字符"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Length</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"必须有6到32个字符"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>

    <span class="token comment">// getters and setters</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:4.49,words:1348},t:"Bean Validation中的约束组合",y:"a"}}],["/posts/baeldung/2024-07-18/2024-07-18-Converting%20a%20JDBC%20ResultSet%20to%20JSON%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-18-Converting a JDBC ResultSet to JSON in Java.html-JK28UtfU.js"),__vite__mapDeps([1050,1])),meta:{d:17213472e5,l:"2024年7月19日",c:["Java","JDBC"],g:["JSON","转换","结果集"],e:`
<p>在某些场景中，我们可能需要通过API调用将数据库查询的结果发送到另一个系统或消息平台。在这种情况下，我们通常使用JSON作为数据交换格式。</p>
<p>在本教程中，我们将看到将JDBC <code>ResultSet</code> 对象转换为JSON格式的多种方法。</p>
<h3>2. 代码示例</h3>
<p>我们将使用H2数据库作为我们的代码示例。我们有一个示例CSV文件，我们已经使用JDBC将其读入名为 <code>words</code> 的表中。以下是示例CSV文件的三行，第一行是标题：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>Username,Id,First name,Last name
doe1,7173,John,Doe
smith3,3722,Dana,Smith
john22,5490,John,Wang
</code></pre></div>`,r:{minutes:4,words:1200},t:"在Java中将JDBC结果集转换为JSON",y:"a"}}],["/posts/baeldung/2024-07-18/2024-07-18-Custom%20HTTP%20Header%20With%20the%20Java%20HttpClient.html",{loader:()=>a(()=>import("./2024-07-18-Custom HTTP Header With the Java HttpClient.html-BddqHkvl.js"),__vite__mapDeps([1051,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","HTTP Client"],g:["Java","HttpClient","Custom Header"],e:`<hr>
<h1>使用Java HttpClient添加自定义HTTP头</h1>
<h2>1. 概述</h2>
<p>Java 11 正式引入了 Java HttpClient。在此之前，当我们需要使用 HTTP 客户端时，通常会使用像 Apache HttpClient 这样的第三方库。</p>
<p>在这个简短的教程中，我们将看到如何使用 Java HttpClient <strong>添加自定义 HTTP 头</strong>。</p>
<p>我们可以使用 <em>HttpRequest.Builder</em> 对象的三种方法之一轻松添加自定义头：<em>header</em>、<em>headers</em> 或 <em>setHeader</em>。让我们看看它们的实际应用。</p>`,r:{minutes:1.47,words:442},t:"使用Java HttpClient添加自定义HTTP头",y:"a"}}],["/posts/baeldung/2024-07-18/2024-07-18-Difference%20Between%20Thread%20s%20Context%20Class%20Loader%20and%20Normal%20Class%20Loader.html",{loader:()=>a(()=>import("./2024-07-18-Difference Between Thread s Context Class Loader and Normal Class Loader.html-bXX2R34n.js"),__vite__mapDeps([1052,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Class Loader"],g:["Java","Class Loader","Thread Context Class Loader"],e:`<hr>
<h1>Java 中线程上下文类加载器与普通类加载器的区别</h1>
<h2>1. 概述</h2>
<p>Java 在程序执行期间使用不同类型的类加载器来加载资源。在本教程中，我们将探讨 Java 中当前类加载器和线程类加载器的行为差异。</p>
<h2>2. 类加载器的作用是什么？</h2>
<p>Java 类加载器定位并加载应用程序执行所需的类。如果请求的类依赖于任何其他资源，它们也会被加载。</p>
<p><strong>我们</strong> <strong>需要</strong> <strong>适当的类加载器在 Java 程序需要时加载不同类型的类</strong>。</p>`,r:{minutes:4.84,words:1451},t:"Java 中线程上下文类加载器与普通类加载器的区别",y:"a"}}],["/posts/baeldung/2024-07-18/2024-07-18-Disabling%20Keycloak%20Security%20in%20Spring%20Boot.html",{loader:()=>a(()=>import("./2024-07-18-Disabling Keycloak Security in Spring Boot.html-CcOJc9hu.js"),__vite__mapDeps([1053,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Security","Keycloak"],g:["Spring Boot","Security","OAuth"],e:`<hr>
<h1>在Spring Boot中禁用Keycloak安全功能</h1>
<figure><img src="https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>如果你正在使用Spring Security（特别是OAuth）实现，一定要看看《学习Spring安全》课程：</p>
<p><strong>&gt;&gt; 学习Spring</strong>
<strong>安全</strong></p>`,r:{minutes:3.68,words:1103},t:"在Spring Boot中禁用Keycloak安全功能",y:"a"}}],["/posts/baeldung/2024-07-18/2024-07-18-Expose%20GraphQL%20Field%20with%20Different%20Name.html",{loader:()=>a(()=>import("./2024-07-18-Expose GraphQL Field with Different Name.html-D2vfqtUA.js"),__vite__mapDeps([1054,1])),meta:{d:17212608e5,l:"2024年7月18日",c:["GraphQL","Web Services"],g:["GraphQL","Schema","Aliases"],e:`<hr>
<h1>GraphQL字段名称不同</h1>
<h2>1. 概述</h2>
<p>GraphQL 已被广泛用作网络服务中的通信模式。<strong>GraphQL 的基本前提是通过客户端应用程序灵活使用。</strong></p>
<p>在本教程中，我们将探讨灵活性的另一个方面。我们还将探索如何以不同的名称公开 GraphQL 字段。</p>
<h2>2. GraphQL Schema</h2>
<p>让我们以一个拥有不同《作者》的《帖子》的博客为例。GraphQL 模式看起来像这样：</p>
<div class="language-graphql" data-ext="graphql" data-title="graphql"><pre class="language-graphql"><code><span class="token keyword">query</span> <span class="token punctuation">{</span>
    <span class="token property-query">recentPosts</span><span class="token punctuation">(</span><span class="token attr-name">count</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token attr-name">offset</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token property">id</span>
        <span class="token property">title</span>
        <span class="token property">text</span>
        <span class="token property">category</span>
        <span class="token object">author</span> <span class="token punctuation">{</span>
            <span class="token property">id</span>
            <span class="token property">name</span>
            <span class="token property">thumbnail</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">Post</span> <span class="token punctuation">{</span>
    <span class="token attr-name">id</span><span class="token punctuation">:</span> <span class="token scalar">ID</span><span class="token operator">!</span>
    <span class="token attr-name">title</span><span class="token punctuation">:</span> <span class="token scalar">String</span><span class="token operator">!</span>
    <span class="token attr-name">text</span><span class="token punctuation">:</span> <span class="token scalar">String</span><span class="token operator">!</span>
    <span class="token attr-name">category</span><span class="token punctuation">:</span> <span class="token scalar">String</span>
    <span class="token attr-name">authorId</span><span class="token punctuation">:</span> <span class="token class-name">Author</span><span class="token operator">!</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">Author</span> <span class="token punctuation">{</span>
    <span class="token attr-name">id</span><span class="token punctuation">:</span> <span class="token scalar">ID</span><span class="token operator">!</span>
    <span class="token attr-name">name</span><span class="token punctuation">:</span> <span class="token scalar">String</span><span class="token operator">!</span>
    <span class="token attr-name">thumbnail</span><span class="token punctuation">:</span> <span class="token scalar">String</span>
    <span class="token attr-name">posts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Post</span><span class="token punctuation">]</span><span class="token operator">!</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:3.02,words:905},t:"GraphQL字段名称不同",y:"a"}}],["/posts/baeldung/2024-07-18/2024-07-18-Find%20Files%20That%20Match%20Wildcard%20Strings%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-18-Find Files That Match Wildcard Strings in Java.html-CR2HPijx.js"),__vite__mapDeps([1055,1])),meta:{d:16513632e5,l:"2022年5月1日",c:["Java","文件操作"],g:["Java","文件搜索","通配符"],e:`<hr>
<h1>在Java中使用通配符字符串查找文件</h1>
<h2>1. 概述</h2>
<p>在本教程中，我们将学习如何在Java中使用通配符字符串查找文件。</p>
<h2>2. 引言</h2>
<p>在编程领域，<strong>glob 是一种带有通配符的模式，用于匹配文件名</strong>。我们将使用glob模式来过滤我们的示例中的文件名列表。我们将使用流行的通配符“*”和“？”。Java自Java SE 7以来就支持此功能。</p>
<p><strong>Java在其_FileSystem_类中提供了_getPathMatcher()_方法。它可以采用正则表达式（regex）或glob模式。</strong> 我们将在本示例中使用glob模式，因为与正则表达式相比，应用通配符更为简单。</p>`,r:{minutes:3.41,words:1022},t:"在Java中使用通配符字符串查找文件",y:"a"}}],["/posts/baeldung/2024-07-18/2024-07-18-Get%20Domain%20Name%20From%20Given%20URL%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-18-Get Domain Name From Given URL in Java.html-DM6BvMPd.js"),__vite__mapDeps([1056,1])),meta:{d:1721315377e3,e:`<h2>1. 概述</h2>
<p>在这篇简短的文章中，我们将探讨在Java中从给定URL获取域名的不同方法。</p>
<h2>2. 什么是域名？</h2>
<p>简单来说，域名是一个指向IP地址的字符串。它是统一资源定位器（URL）的一部分。使用域名，用户可以通过客户端软件访问特定网站。</p>
<p>域名通常由两到三个部分组成，每个部分由点分隔。</p>
<p>从末尾开始，域名可能包括：</p>
<ul>
<li>顶级域名（例如，bealdung.com中的_com_），</li>
<li>二级域名（例如，google.co.uk中的_co_或baeldung.com中的_baeldung_），</li>
<li>三级域名（例如，google.co.uk中的_google_）</li>
</ul>`,r:{minutes:2.48,words:743},t:"",y:"a"}}],["/posts/baeldung/2024-07-18/2024-07-18-Get%20Keycloak%20User%20ID%20in%20Spring.html",{loader:()=>a(()=>import("./2024-07-18-Get Keycloak User ID in Spring.html-CdbF0d-M.js"),__vite__mapDeps([1057,1])),meta:{d:1690848e6,l:"2023年8月1日",c:["Spring Security","Keycloak"],g:["Spring Boot","OAuth","SSO","OpenID Connect"],e:`
<p>Keycloak是一个开源的身份和访问管理（IAM）系统，与Spring Boot应用程序集成良好。在本教程中，我们将描述如何在Spring Boot应用程序中获取Keycloak用户ID。</p>
<h2>1. 概述</h2>
<p>Keycloak提供了诸如保护REST API、用户联合、细粒度授权、社交登录、双因素认证（2FA）等功能。此外，我们可以使用它来使用OpenID Connect（OIDC）实现单点登录（SSO）。<strong>假设我们有一个使用Keycloak通过OIDC保护的Spring Boot应用程序，我们想要在Spring Boot应用程序中获取用户ID。在这种情况下，我们需要在Spring Boot应用程序中获取访问令牌或安全上下文。</strong></p>`,r:{minutes:3,words:900},t:"在Spring中获取Keycloak用户ID",y:"a"}}],["/posts/baeldung/2024-07-18/2024-07-18-How%20to%20Change%20a%20Value%20in%20a%20Mutable%20List%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-18-How to Change a Value in a Mutable List in Kotlin.html-BzJqkljz.js"),__vite__mapDeps([1058,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin"],g:["Kotlin","Mutable List","List Manipulation"],e:`<hr>
<h1>如何在 Kotlin 中更改可变列表中的值 | Baeldung 关于 Kotlin</h1>
<h2>1. 引言</h2>
<p>在 Kotlin 中，最常见的数据结构之一是可变 <em>List</em>，它允许存储和操作数据。因此，我们经常会遇到需要更改可变列表中值的情况。</p>
<p>在本文中，我们将探讨在 Kotlin 中更改可变列表中值的各种方法。</p>
<h2>2. 使用 <em>set()</em> 方法</h2>
<p>更改可变列表中元素值的一种简单方法是使用 <em>set()</em> 方法。<strong>此方法接受两个参数，我们希望更改的元素的索引和我们希望分配给该元素的新值</strong>：</p>`,r:{minutes:4.14,words:1242},t:"如何在 Kotlin 中更改可变列表中的值 | Baeldung 关于 Kotlin",y:"a"}}],["/posts/baeldung/2024-07-18/2024-07-18-How%20to%20Mock%20HttpServletRequest.html",{loader:()=>a(()=>import("./2024-07-18-How to Mock HttpServletRequest.html-WMpz9_7D.js"),__vite__mapDeps([1059,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Testing & Mocking","Java Servlets"],g:["Java","Testing","Mockito","JMockit","Spring"],e:`<hr>
<h1>如何模拟 HttpServletRequest 对象</h1>
<h2>1. 概述</h2>
<p>在本快速教程中，<strong>我们将探讨几种模拟 <em>HttpServletRequest</em> 对象的方法</strong>。</p>
<p>首先，我们将从 Spring 测试库中的完全功能模拟类型——<em>MockHttpServletRequest</em> 开始。然后，我们将看到如何使用两个流行的模拟库——Mockito 和 JMockit 进行测试。最后，我们将看到如何使用匿名子类进行测试。</p>
<h2>2. 测试 <em>HttpServletRequest</em></h2>`,r:{minutes:4.75,words:1426},t:"如何模拟 HttpServletRequest 对象",y:"a"}}],["/posts/baeldung/2024-07-18/2024-07-18-How%20to%20Play%20Sound%20With%20Java.html",{loader:()=>a(()=>import("./2024-07-18-How to Play Sound With Java.html-CROvrG9i.js"),__vite__mapDeps([1060,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Sound"],g:["Java Sound","Audio"],e:`<hr>
<h1>如何使用Java播放声音 | Baeldung</h1>
<h2><strong>1. 概述</strong></h2>
<p>在本教程中，我们将学习如何使用Java播放声音。Java声音API旨在平滑且连续地播放声音，甚至是非常长的声音。</p>
<p>作为本教程的一部分，我们将使用Java提供的_Clip_和_SourceDataLine_声音API来播放音频文件。我们还将播放不同音频格式的文件。</p>
<p>此外，我们将讨论每种API的优缺点。进一步地，我们将看到一些第三方Java库也可以播放声音。</p>
<p>一般来说，存在于_javax.sound_包中的Java声音API提供了两种播放音频的方式。在这两种方法之间，声音文件数据的指定方式有所不同。Java声音API可以以流式传输、缓冲的方式处理音频传输，也可以以内存中、非缓冲的方式处理。</p>`,r:{minutes:6.56,words:1969},t:"如何使用Java播放声音 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-18/2024-07-18-Introduction%20to%20Spring%20Cloud%20Sidecar.html",{loader:()=>a(()=>import("./2024-07-18-Introduction to Spring Cloud Sidecar.html-6UY_Hhjr.js"),__vite__mapDeps([1061,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Cloud","Microservices"],g:["Spring Cloud Sidecar","Netflix Sidecar","Service Discovery","Eureka","Zuul Proxy"],e:`<hr>
<h1>Spring Cloud Sidecar 介绍</h1>
<h2>1. 概述</h2>
<p>Spring Cloud 提供了广泛的功能和库，如客户端负载均衡、服务注册/发现、并发控制和配置服务器。另一方面，在微服务世界中，使用不同语言和框架编写的多语言服务是一种常见做法。那么，如果我们希望在整个生态系统中利用 Spring Cloud 的优势呢？Spring Cloud Netflix Sidecar 就是这里的解决方案。</p>
<p>在本教程中，我们将通过工作示例更深入地了解 Spring Cloud Sidecar。</p>
<h2>2. 什么是 Spring Cloud Sidecar？</h2>`,r:{minutes:5.72,words:1717},t:"Spring Cloud Sidecar 介绍",y:"a"}}],["/posts/baeldung/2024-07-18/2024-07-18-Java%20%20int%20char%20Cannot%20Be%20Dereferenced%20%20Error.html",{loader:()=>a(()=>import("./2024-07-18-Java  int char Cannot Be Dereferenced  Error.html-BKzlL4T7.js"),__vite__mapDeps([1062,1])),meta:{d:16540416e5,l:"2022年6月1日",c:["Java"],g:["Error Handling","Java Basics"],e:`<hr>
<h1>Java “int/char 不能被解引用” 错误 | Baeldung## 1. 概述</h1>
<p>在本教程中，我们将仔细查看 Java 错误 “int cannot be dereferenced”（int 不能被解引用）。首先，我们将创建一个产生此错误的示例。接下来，我们将解释异常的主要原因。最后，我们将看到如何修复它。</p>
<h2>2. 实例演示</h2>
<p>现在，让我们看一个生成编译错误 “X cannot be dereferenced”（X 不能被解引用）的示例。</p>
<p>这里，<em>X</em> 代表八种 Java 基本类型之一，即 <em>int</em>, <em>byte</em>, <em>short</em>, <em>long</em>, <em>float</em>, <em>double</em>, <em>boolean</em>, 和 <em>char</em>。</p>`,r:{minutes:2.24,words:673},t:"Java “int/char 不能被解引用” 错误 | Baeldung## 1. 概述",y:"a"}}],["/posts/baeldung/2024-07-18/2024-07-18-Java%20HttpClient%20Timeout.html",{loader:()=>a(()=>import("./2024-07-18-Java HttpClient Timeout.html-RMJHJibc.js"),__vite__mapDeps([1063,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","HTTP Client"],g:["Java","HttpClient","Timeout"],e:`<hr>
<h1>Java HttpClient 超时设置</h1>
<h2>1. 概述</h2>
<p>在本教程中，我们将展示如何使用从 Java 11 开始提供的新的 Java HTTP 客户端设置超时。</p>
<p>如果我们需要刷新我们的知识，我们可以从 Java HTTP 客户端的教程开始。</p>
<p>另一方面，要学习如何使用旧库设置超时，请参见 <em>HttpUrlConnection</em>。</p>
<h2>2. 配置超时</h2>
<p>首先，我们需要设置一个 HttpClient 以便能够进行 HTTP 请求：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">HttpClient</span> <span class="token function">getHttpClientWithTimeout</span><span class="token punctuation">(</span><span class="token keyword">int</span> seconds<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">HttpClient</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">connectTimeout</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span>seconds<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.83,words:848},t:"Java HttpClient 超时设置",y:"a"}}],["/posts/baeldung/2024-07-18/2024-07-18-Java%20Scanner%20useDelimiter%20with%20Examples.html",{loader:()=>a(()=>import("./2024-07-18-Java Scanner useDelimiter with Examples.html-2QIW0yZc.js"),__vite__mapDeps([1064,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Scanner"],g:["Java","Scanner","useDelimiter"],e:`<hr>
<h1>Java Scanner useDelimiter 示例 | Baeldung## 1. 概述</h1>
<p>在本教程中，我们将看到如何使用_Scanner_类的_useDelimiter_方法。</p>
<h2>2. _java.util.Scanner_简介</h2>
<p><em>Scanner</em> API 提供了一个简单的文本扫描器。</p>
<p><strong>默认情况下，_Scanner_使用空格作为分隔符来分割其输入。</strong> 让我们编写一个函数，将输入传递给_Scanner_，然后遍历_Scanner_以将令牌收集到一个列表中。</p>
<p>让我们看看基本的实现：</p>`,r:{minutes:3.11,words:934},t:"Java Scanner useDelimiter 示例 | Baeldung## 1. 概述",y:"a"}}],["/posts/baeldung/2024-07-18/2024-07-18-Joining%20Tables%20With%20Spring%20Data%20JPA%20Specifications.html",{loader:()=>a(()=>import("./2024-07-18-Joining Tables With Spring Data JPA Specifications.html-DfUDku7t.js"),__vite__mapDeps([1065,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["spring","jpa"],g:["spring data jpa","jpa specifications"],e:`
<p>在本简短教程中，我们将讨论Spring Data JPA规范的一个高级特性，它允许我们在创建查询时连接表。</p>
<p>让我们首先简要回顾一下JPA规范及其用法。</p>
<p><strong>Spring Data JPA引入了_Specification_接口，允许我们使用可重用的组件创建动态查询。</strong></p>
<p>在本文的代码示例中，我们将使用_Author_和_Book_类：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Author</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Id</span>
    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">IDENTITY</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@OneToMany</span><span class="token punctuation">(</span>cascade <span class="token operator">=</span> <span class="token class-name">CascadeType</span><span class="token punctuation">.</span><span class="token constant">ALL</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span>\` books<span class="token punctuation">;</span>

    <span class="token comment">// getters and setters</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.91,words:572},t:"使用Spring Data JPA规范连接表",y:"a"}}],["/posts/baeldung/2024-07-18/2024-07-18-Posting%20with%20Java%20HttpClient.html",{loader:()=>a(()=>import("./2024-07-18-Posting with Java HttpClient.html-D90NocmA.js"),__vite__mapDeps([1066,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","HTTP"],g:["HttpClient","POST请求"],e:`<hr>
<h1>使用Java HttpClient发送POST请求</h1>
<h2>1. 概述</h2>
<p>Java <em>HttpClient</em> API 是在 Java 11 中引入的。该 API <strong>实现了最新 HTTP 标准的客户端</strong>。它支持 HTTP/1.1 和 HTTP/2，同时支持同步和异步编程模型。</p>
<p>我们可以使用它来发送 HTTP 请求并检索它们的响应。在 Java 11 之前，我们不得不依赖于基本的 <em>URLConnection</em> 实现或第三方库，如 Apache <em>HttpClient</em>。</p>`,r:{minutes:4.98,words:1494},t:"使用Java HttpClient发送POST请求",y:"a"}}],["/posts/baeldung/2024-07-18/2024-07-18-Printing%20All%20Elements%20of%20a%20String%20Array%20in%20a%20Single%20Line%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-18-Printing All Elements of a String Array in a Single Line in Kotlin.html-B1mD-okI.js"),__vite__mapDeps([1067,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin"],g:["Kotlin","Arrays","Printing"],e:`<hr>
<h1>在 Kotlin 中一行打印所有字符串数组元素</h1>
<p>在 Kotlin 中，处理数组是一项常见任务，将所有元素打印在一行上是一个简单但必不可少的操作。</p>
<p>在本教程中，我们将探索实现这一目标的有效方法，强调 Kotlin 代码的可读性和简洁性。</p>
<h2>2. 问题介绍</h2>
<p>我们知道我们可以直接使用 <code>println()</code> 函数来打印一个列表，输出列表元素在一行中，例如：</p>
<div class="language-kotlin" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"A"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"B"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"C"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"D"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"E"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"F"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 输出: [A, B, C, D, E, F]</span>
</code></pre></div>`,r:{minutes:4.41,words:1322},t:"在 Kotlin 中一行打印所有字符串数组元素",y:"a"}}],["/posts/baeldung/2024-07-18/2024-07-18-Reverse%20a%20Number%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-18-Reverse a Number in Java.html-Tj_4-EJe.js"),__vite__mapDeps([1068,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Programming"],g:["reverse number","Java"],e:`
<p>在本教程中，我们将看到如何使用Java中的数学方法来反转一个数字。首先，我们将看到完成此操作所需的数学运算，然后我们将通过三种不同的实现方式来进行。</p>
<h2>2. 解决方法概述</h2>
<p>首先，我们以一个例子开始，看看应该发生什么。例如，我们希望数字1234变成4321。这可以通过以下方法实现：</p>
<ol>
<li>
<p>获取数字的最后一位</p>
<ul>
<li>我们可以通过取模来获取最后一位数字</li>
<li>第一次迭代 - 1234 % 10 = 4</li>
<li>第二次迭代 - 123 % 10 = 3</li>
</ul>
</li>
<li>
<p>将反转后的数字乘以10并加上之前步骤中找到的数字</p>
<ul>
<li>第一次迭代 - 0 * 10 + 4 = 4（由于开始时没有反转的数字，我们在第一次迭代中与0相乘）</li>
<li>第二次迭代 - 4 * 10 + 3 = 43</li>
</ul>
</li>
<li>
<p>将原始数字除以10，然后从步骤1重复，并继续进行，直到数字不为0</p>
<ul>
<li>第一次迭代 - 1234 / 10 = 123</li>
<li>第二次迭代 - 123 / 10 = 12</li>
</ul>
</li>
</ol>`,r:{minutes:2.47,words:741},t:"Java中反转数字的方法",y:"a"}}],["/posts/baeldung/2024-07-18/2024-07-18-Sending%20CSRF%20Token%20From%20Postman%20REST%20Client.html",{loader:()=>a(()=>import("./2024-07-18-Sending CSRF Token From Postman REST Client.html-DZZW6ZyL.js"),__vite__mapDeps([1069,1])),meta:{d:16540416e5,l:"2022年6月1日",c:["Postman","CSRF Token"],g:["Postman","CSRF","403 Forbidden"],e:`<hr>
<h1>使用Postman REST客户端发送CSRF令牌</h1>
<h2>1. 概述</h2>
<p>每次我们测试启用了CSRF保护的端点时，我们都必须手动从cookie中获取CSRF令牌，并将其设置在_X-XSRF-TOKEN_请求头中。如果我们不发送CSRF令牌，我们会收到_403禁止_错误。</p>
<p>在本教程中，我们将看到如何在使用Postman时自动向服务器发送CSRF令牌。</p>
<h2>2. 应用程序设置</h2>
<p>我们不会讨论如何在Spring应用程序中启用CSRF保护，这在之前的文章中已经介绍过了。</p>
<p><strong>我们知道，我们可以在客户端的cookie中找到CSRF令牌，默认情况下，CSRF保护对_POST_、<em>PUT_和_DELETE</em> HTTP动词强制执行。</strong></p>`,r:{minutes:2.47,words:740},t:"使用Postman REST客户端发送CSRF令牌",y:"a"}}],["/posts/baeldung/2024-07-18/2024-07-18-Setting%20Request%20Headers%20Using%20Feign.html",{loader:()=>a(()=>import("./2024-07-18-Setting Request Headers Using Feign.html-Dj_UPGwV.js"),__vite__mapDeps([1070,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Spring"],g:["Feign","HTTP","REST"],e:`<hr>
<h1>使用Feign设置请求头</h1>
<h2>1. 概述</h2>
<p>有时在使用Feign时，我们需要在HTTP调用中设置请求头。Feign允许我们通过声明性语法简单地构建HTTP客户端。</p>
<p>在这个简短的教程中，我们将看到如何使用注解配置请求头。我们还将看到如何通过使用拦截器包含常见的请求头。</p>
<h2>2. 示例</h2>
<p>在整个教程中，我们将使用一个暴露REST API端点的书店应用程序作为示例。</p>
<p>我们可以轻松地克隆项目并在本地运行：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ mvn <span class="token function">install</span> spring-boot:run
</code></pre></div>`,r:{minutes:4.43,words:1330},t:"使用Feign设置请求头",y:"a"}}],["/posts/baeldung/2024-07-18/2024-07-18-Sorting%20Objects%20in%20a%20List%20by%20Date.html",{loader:()=>a(()=>import("./2024-07-18-Sorting Objects in a List by Date.html-mtCq5Xjp.js"),__vite__mapDeps([1071,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java"],g:["Java","Collections","Comparator","Comparable","Sorting"],e:`<hr>
<h1>在Java中按日期对列表中的对象进行排序</h1>
<h2>1. 概述</h2>
<p>在本教程中，我们将讨论如何按日期对列表中的对象进行排序。大多数排序技术或示例让用户按字母顺序排序列表，但本文将讨论如何使用日期对象进行排序。</p>
<p>我们将看看如何使用Java的Comparator类来<strong>自定义排序我们的列表值</strong>。</p>
<h2>2. 设置</h2>
<p>让我们看看本文中将使用的_Employee_实体：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span>\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span>\`\`\`\` <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Date</span> joiningDate<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Date</span> joiningDate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 标准getter和setter</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:3.83,words:1150},t:"在Java中按日期对列表中的对象进行排序",y:"a"}}],["/posts/baeldung/2024-07-18/2024-07-18-Spring%20Web%20Service%20Integration%20Tests%20with%20%20WebServiceServerTest.html",{loader:()=>a(()=>import("./2024-07-18-Spring Web Service Integration Tests with  WebServiceServerTest.html-DS-yRmly.js"),__vite__mapDeps([1072,1])),meta:{d:17212608e5,l:"2024年7月18日",c:["Spring Boot","Web Services"],g:["Spring Web Services","Integration Testing"],e:`<hr>
<h1>Spring Web Service 集成测试与 @WebServiceServerTest</h1>
<h2>1. 引言</h2>
<p>在本文中，我们将看到如何为使用 Spring Boot 构建的 SOAP Web 服务编写集成测试。</p>
<p>我们已经知道如何为应用程序类编写单元测试，并且我们已经在我们的 Spring Boot 测试教程中涵盖了一般的测试概念。因此，这里我们将专注于<strong>仅使用 <em>@WebServiceServerTest</em> 进行 Web 服务层的集成测试</strong>。</p>
<h2>2. 测试 Spring Web 服务</h2>`,r:{minutes:5.15,words:1546},t:"Spring Web Service 集成测试与 @WebServiceServerTest",y:"a"}}],["/posts/baeldung/2024-07-18/2024-07-18-Starting%20Spring%20Boot%20Application%20in%20Docker%20With%20Profile.html",{loader:()=>a(()=>import("./2024-07-18-Starting Spring Boot Application in Docker With Profile.html-xdbqPGgN.js"),__vite__mapDeps([1073,1])),meta:{d:17091648e5,l:"2024年2月29日",c:["Spring Boot","Docker"],g:["Spring Boot","Docker","Profile"],e:`
<p>我们众所周知Docker的流行程度，以及Java开发者将其Spring Boot应用程序容器化的趋势。然而，一些开发者可能会对如何在Docker化的Spring Boot应用程序中设置Profile有疑问。</p>
<p>在本教程中，我们将解释如何在Docker容器中启动带有Profile的Spring Boot应用程序。</p>
<h2>2. 基础Dockerfile</h2>
<p>通常，要容器化Spring Boot应用程序，我们只需提供一个Dockerfile。</p>
<p>让我们看看我们Spring Boot应用程序的最小Dockerfile：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>FROM openjdk:17-jdk-alpine
COPY target/*.jar app.jar
ENTRYPOINT ["java", "-jar", "/app.jar"]
</code></pre></div>`,r:{minutes:3.5,words:1050},t:"在Docker中使用Profile启动Spring Boot应用程序",y:"a"}}],["/posts/baeldung/2024-07-18/2024-07-18-Tomcat%20Warning%20%20To%20Prevent%20a%20Memory%20Leak%20%20the%20JDBC%20Driver%20Has%20Been%20Forcibly%20Unregistered%20.html",{loader:()=>a(()=>import("./2024-07-18-Tomcat Warning  To Prevent a Memory Leak  the JDBC Driver Has Been Forcibly Unregistered .html-BpgQmtt2.js"),__vite__mapDeps([1074,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Tomcat","JDBC"],g:["Memory Leak","JDBC Driver"],e:`<hr>
<h1>Tomcat警告：“为了防止内存泄漏，JDBC驱动已被强制注销” | Baeldung## 1. 概述</h1>
<p>在本教程中，我们将探讨Tomcat发出的警告消息，该消息通知我们它强制注销了一个JDBC驱动。我们将探索消息的含义、其根本原因以及我们可以采取的缓解措施。</p>
<h2>2. 消息及其含义</h2>
<p>消息的一个版本可能是以下内容：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>SEVERE: 一个Web应用程序注册了JBDC驱动 [oracle.jdbc.driver.OracleDriver]
  但在Web应用程序停止时未能注销它。
  为了防止内存泄漏，JDBC驱动已被强制注销。
</code></pre></div>`,r:{minutes:3.41,words:1023},t:"Tomcat警告：“为了防止内存泄漏，JDBC驱动已被强制注销” | Baeldung## 1. 概述",y:"a"}}],["/posts/baeldung/2024-07-18/2024-07-18-Using%20Enums%20With%20when%20%20%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-18-Using Enums With when   in Kotlin.html-BE3Z_K6E.js"),__vite__mapDeps([1075,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin"],g:["Enums","when()"],e:`<hr>
<h1>使用Kotlin中的枚举与when()表达式</h1>
<h2>1. 引言</h2>
<p>Kotlin中的枚举提供了一种优雅的方式来处理类似switch结构的多重条件。</p>
<p>在本教程中，我们将探讨如何使用枚举与_when()_表达式，以及它如何增强代码的可读性和可维护性。</p>
<h2>2. Kotlin中枚举的基础知识</h2>
<p>在深入讨论使用枚举与_when()_表达式的细节之前，让我们简要了解枚举是什么以及它们在Kotlin中的工作方式。</p>
<p>枚举，简称enumerations，允许我们定义一组命名常量值，创建一种类型安全的方式来表示一组相关值：</p>`,r:{minutes:4.18,words:1254},t:"使用Kotlin中的枚举与when()表达式",y:"a"}}],["/posts/baeldung/2024-07-18/2024-07-18-Using%20Transactions%20for%20Read%20Only%20Operations.html",{loader:()=>a(()=>import("./2024-07-18-Using Transactions for Read Only Operations.html-DVz_-tWD.js"),__vite__mapDeps([1076,1])),meta:{d:16513632e5,l:"2022年5月1日",c:["Spring","Transactions"],g:["MySQL","InnoDB","Read-Only"],e:`<hr>
<h1>使用事务进行只读操作</h1>
<h2>1. 概述</h2>
<p>在本文中，我们将讨论只读事务。我们将讨论它们的目的以及如何使用它们，并检查与性能和优化相关的一些细微差别。<strong>为了简单起见，我们将重点关注MySQL的InnoDB引擎</strong>。但请记住，根据数据库/存储引擎的不同，一些信息可能会有所变化。</p>
<h2>2. 什么是事务？</h2>
<p><strong>事务是一个原子操作，由一个或多个语句组成</strong>。它是原子的，因为该操作中的所有语句要么全部成功（被提交），要么全部失败（被回滚），这意味着全有或全无。事务的原子性由ACID属性中的字母‘A’表示。</p>`,r:{minutes:10.5,words:3151},t:"使用事务进行只读操作",y:"a"}}],["/posts/baeldung/2024-07-18/2024-07-18-What%20Is%20the%20JDK%20com.sun.proxy.%20Proxy%20Class%20.html",{loader:()=>a(()=>import("./2024-07-18-What Is the JDK com.sun.proxy. Proxy Class .html-Bcn4HVRn.js"),__vite__mapDeps([1077,1])),meta:{d:16513632e5,l:"2022年5月1日",c:["Java","JDK"],g:["JDK","动态代理"],e:`
<p>当我们使用动态代理时，JDK 会动态生成一个 <em>$Proxy</em> 类。通常，这个 <em>$Proxy</em> 类的完全限定类名类似于 <em>com.sun.proxy.$Proxy0</em>。正如 Java 文档所说，“$Proxy” 是代理类的保留名称前缀。</p>
<p>在本教程中，我们将探索这个 <em>$Proxy</em> 类。</p>
<p>在开始之前，让我们区分一下 <em>java.lang.reflect.Proxy</em> 类和 <em>$Proxy</em> 类。<em>java.lang.reflect.Proxy</em> 是 JDK 内置的类。与之相反，<strong><em>$Proxy</em> 类是在运行时动态生成的</strong>。从类层次结构的角度来看，<em>$Proxy</em> 类继承了 <em>java.lang.reflect.Proxy</em> 类。</p>`,r:{minutes:5.85,words:1756},t:"JDK 中的 com.sun.proxy.$Proxy 类是什么？",y:"a"}}],["/posts/baeldung/2024-07-19/2024-07-19-Add%20Header%20to%20Every%20Request%20in%20Postman.html",{loader:()=>a(()=>import("./2024-07-19-Add Header to Every Request in Postman.html-B8S7r4nR.js"),__vite__mapDeps([1078,1])),meta:{d:16513632e5,l:"2022年5月1日",c:["Postman","HTTP"],g:["Postman","HTTP headers","pre-request scripts"],e:`
<p>在本教程中，我们将学习如何使用预请求脚本在Postman中为每个请求添加HTTP头部。</p>
<p>在深入实现之前，让我们回顾一下HTTP头部是什么。</p>
<p>在HTTP请求中，头部是提供客户端和服务器HTTP通信之间附加信息的字段。HTTP头部具有键值对格式，并且可以附加到请求和响应上。</p>
<p>授权、内容类型和cookie是通过HTTP头部提供的元数据的示例。</p>
<p>例如：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>Authorization: Bearer YmFyIiwiaWF0IjoxN;
Content-Type: application/json;
Cookie: foo=bar;
</code></pre></div>`,r:{minutes:5.1,words:1531},t:"在Postman中为每个请求添加头部",y:"a"}}],["/posts/baeldung/2024-07-19/2024-07-19-Check%20Whether%20a%20String%20Is%20Valid%20JSON%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-19-Check Whether a String Is Valid JSON in Java.html-BNH2ccfQ.js"),__vite__mapDeps([1079,1])),meta:{d:17213472e5,l:"2024年7月19日",c:["Java","JSON"],g:["JSON验证","Java"],e:`
<p>当在Java中使用原始JSON值时，有时需要检查它是否有效。有几个库可以帮助我们完成这项工作：Gson、JSON API和Jackson。每个工具都有其自身的优势和限制。</p>
<p>在本教程中，我们将使用它们中的每一个来实现JSON字符串验证，并仔细查看方法之间的主要差异以及实际示例。</p>
<h2>2. 使用JSON API进行验证</h2>
<p>最轻量级和简单的库是JSON API。</p>
<p>检查一个字符串是否为有效JSON的通用方法是异常处理。因此，我们委托JSON解析并在出现不正确的值时处理特定类型的错误，或者假设如果没有异常发生，则值是正确的。</p>
<h3>2.1. <strong>Maven依赖</strong></h3>`,r:{minutes:4.67,words:1402},t:"在Java中检查字符串是否为有效的JSON",y:"a"}}],["/posts/baeldung/2024-07-19/2024-07-19-Checking%20Connection%20to%20MongoDB.html",{loader:()=>a(()=>import("./2024-07-19-Checking Connection to MongoDB.html-cKXRU9sz.js"),__vite__mapDeps([1080,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["MongoDB","Java"],g:["MongoDB","Java","Connection"],e:`<hr>
<h1>检查与MongoDB的连接</h1>
<h2>1. 概述</h2>
<p>在本教程中，我们将学习如何检查与MongoDB的连接。</p>
<p>重要的是要连接到单个MongoDB实例，我们需要指定MongoDB实例的URI。</p>
<h2>2. 使用Mongo Shell检查连接</h2>
<p>在本节中，我们将使用mongo shell命令连接到MongoDB服务器。我们将探索连接到MongoDB的不同情况。</p>
<h3>2.1. 在默认端口上检查连接</h3>
<p><strong>默认情况下，MongoDB运行在端口_27017_，但我们也可以在其他端口上运行它。</strong> 我们可以使用简单的mongo命令连接到MongoDB服务器：</p>`,r:{minutes:2.78,words:833},t:"检查与MongoDB的连接",y:"a"}}],["/posts/baeldung/2024-07-19/2024-07-19-Compile%20Multiple%20Java%20Source%20Files%20Using%20the%20Command%20Line.html",{loader:()=>a(()=>import("./2024-07-19-Compile Multiple Java Source Files Using the Command Line.html-yNTnGgAd.js"),__vite__mapDeps([1081,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","编程"],g:["Java编译","命令行"],e:`
<p>在本教程中，我们将学习如何通过命令行界面与Java编译器进行交互。</p>
<p>作为先决条件，我们需要在机器上下载Java并配置JAVA_HOME环境变量。</p>
<h3>2. 编译单个Java源代码文件</h3>
<p>Java提供了一个简单的工具——javac，用于编译Java源代码文件。让我们从编译一个小类Car.java开始：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> make<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> model<span class="token punctuation">;</span>

    <span class="token comment">// 标准setter和getter方法</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:3.9,words:1169},t:"使用命令行编译多个Java源文件",y:"a"}}],["/posts/baeldung/2024-07-19/2024-07-19-Convert%20Between%20boolean%20and%20int%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-19-Convert Between boolean and int in Java.html-DycsrRBK.js"),__vite__mapDeps([1082,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Programming"],g:["boolean","int","conversion"],e:`
<p>在本教程中，我们将学习如何在布尔值和整数值之间进行转换。首先，我们将了解Java如何处理这两种原始数据类型；然后，我们将探索多种方法来促进布尔值和整型之间的转换。</p>
<h2>2. 数据类型</h2>
<p>在Java中，整数可以通过int原始数据类型或Integer包装类来表示。原始数据类型是一个32位的有符号整数，采用二进制补码编码方法。Integer类充当包装器，允许您执行无符号整数运算，并且可以将整数（原始）值作为对象与泛型一起使用。</p>
<p>另一方面，布尔值在内存中没有特定的大小，但它默认为操作系统和Java虚拟机（JVM）。与Java中的所有原始数据类型一样，布尔值也有Boolean包装类，允许布尔值表现得像对象。</p>`,r:{minutes:5.27,words:1581},t:"Java中布尔值与整型之间的转换",y:"a"}}],["/posts/baeldung/2024-07-19/2024-07-19-Create%20a%20Function%20That%20Works%20for%20All%20Enum%20Classes%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-19-Create a Function That Works for All Enum Classes in Kotlin.html-D7OZt4ui.js"),__vite__mapDeps([1083,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin","Programming"],g:["Kotlin","Enum","Function"],e:`
<p>在Kotlin中，枚举是一种强大的结构，允许我们定义一组表示不同值的命名常量。然而，在使用多个枚举类时，创建一个能够为任何枚举类提供功能的通用函数可能是具有挑战性的。</p>
<p>在本教程中，我们将探讨创建一个适用于任何枚举类的多功能Kotlin函数的不同方法。</p>
<h3>2. 理解挑战</h3>
<p>像往常一样，让我们通过一个例子来理解挑战。</p>
<p>假设我们想要有一个名为**<em>joinTheirNames()</em>**的函数，该函数适用于所有枚举类，以通过逗号连接给定枚举的实例名称。</p>
<p>例如，假设我们用以下_Level_枚举调用这个函数：</p>`,r:{minutes:7.34,words:2201},t:"Kotlin中为所有枚举类创建通用函数 | Baeldung关于Kotlin",y:"a"}}],["/posts/baeldung/2024-07-19/2024-07-19-Creating%20a%20Java%20Array%20from%20Regular%20Expression%20Matches.html",{loader:()=>a(()=>import("./2024-07-19-Creating a Java Array from Regular Expression Matches.html-By7G2e5T.js"),__vite__mapDeps([1084,1])),meta:{d:17213472e5,l:"2024年7月19日",c:["Java","Regular Expressions"],g:["Java","Regex","Array"],e:`<hr>
<h1>Java中使用正则表达式匹配并创建数组</h1>
<h2>1. 概述</h2>
<p>在本教程中，我们将学习如何从正则表达式（regex）输出中创建一个数组。</p>
<h2>2. 引言</h2>
<p>以我们的示例为例，我们将解析一个长字符串。我们将找到包含10位数字的电话号码的模式。然后，我们将生成的输出作为数组。</p>
<p>Oracle为其正则表达式实现提供了_java.util.regex_包。我们将使用此包中可用的类进行我们的演示。一旦我们找到匹配项，我们将使用该输出并创建一个数组。</p>
<p>数组是固定大小的变量。在使用它们之前，我们必须声明它们的大小。如果数组没有正确实现，也可能会浪费内存。因此，我们首先从_List_开始，然后动态地将_List_转换为数组。</p>`,r:{minutes:2.31,words:692},t:"Java中使用正则表达式匹配并创建数组",y:"a"}}],["/posts/baeldung/2024-07-19/2024-07-19-Deduction%20Based%20Polymorphism%20in%20Jackson%202.12.html",{loader:()=>a(()=>import("./2024-07-19-Deduction Based Polymorphism in Jackson 2.12.html-CrAXRI0T.js"),__vite__mapDeps([1085,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Jackson"],g:["Polymorphism","JSON"],e:`
<p>在本教程中，<strong>我们将探讨如何使用Jackson库中的基于推断的多态性特性。</strong></p>
<p>假设我们有如下所示的类结构：
<img src="https://www.baeldung.com/wp-content/uploads/2022/04/CharacterDiagram-1-300x208.png" alt="img" loading="lazy"></p>
<p>首先，<em>NamedCharacter</em> 和 <em>ImperialSpy</em> 类实现了 <em>Character</em> 接口。其次，<em>King</em> 和 <em>Knight</em> 类实现了 <em>NamedCharacter</em> 类。最后，我们有一个 <em>ControlledCharacter</em> 类，其中包含对玩家控制的角色的引用。</p>`,r:{minutes:3.73,words:1120},t:"Jackson 2.12中的基于推断的多态性",y:"a"}}],["/posts/baeldung/2024-07-19/2024-07-19-Difference%20Between%20%20%20%20and%20equals%20%20%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-19-Difference Between    and equals   in Java.html-DE-2kAlR.js"),__vite__mapDeps([1086,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","equals() vs =="],g:["Java","equals()","=="],e:`
<p>在本教程中，我们将描述 Java 中两种基本的等式检查——引用相等性和值相等性。我们将比较它们，展示示例，并强调它们之间的主要区别。</p>
<p>我们还将专注于空值检查，并理解为什么在处理对象时应使用引用相等性而不是值相等性。</p>
<h2>1. 引用相等性</h2>
<p>我们将从理解引用比较开始，这是由等式运算符（==）表示的。<strong>引用相等性发生在两个引用指向内存中的同一个对象时。</strong></p>
<h3>1.1 原始类型与等式运算符</h3>
<p>我们知道 Java 中的原始类型是简单的非类原始值。当我们使用等式运算符与原始类型时，我们只是在比较它们的值：</p>`,r:{minutes:6.19,words:1858},t:"Java 中的 equals() 方法和 == 运算符的区别",y:"a"}}],["/posts/baeldung/2024-07-19/2024-07-19-Differences%20Between%20Iterator%20and%20Iterable%20and%20How%20to%20Use%20Them%20.html",{loader:()=>a(()=>import("./2024-07-19-Differences Between Iterator and Iterable and How to Use Them .html-DjS39-I8.js"),__vite__mapDeps([1087,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Collection Framework"],g:["Iterable","Iterator"],e:`
<p>在本教程中，我们将探讨 Java 中 Iterable 和 Iterator 接口的用法以及它们之间的区别。</p>
<h2>2. Iterable 接口</h2>
<p>Iterable 接口属于 java.lang 包。它表示可以被迭代的数据结构。</p>
<p>Iterable 接口提供了一个方法来产生一个 Iterator。使用 Iterable 时，我们不能通过索引获取元素。同样，我们也不能从数据结构中获取第一个或最后一个元素。</p>
<p>所有 Java 集合都实现了 Iterable 接口。</p>
<h3>2.1 迭代 Iterable</h3>
<p>我们可以使用增强型 for 循环（也称为 for-each 循环）来迭代集合中的元素。然而，只有实现了 Iterable 接口的对象才能在此类语句中使用。同样，我们也可以结合使用 while 语句和 Iterator 来迭代元素。</p>`,r:{minutes:5.3,words:1589},t:"Java 中 Iterable 和 Iterator 接口的区别及使用方式",y:"a"}}],["/posts/baeldung/2024-07-19/2024-07-19-Differences%20Between%20set%20%20%20and%20lazySet%20%20%20in%20Java%20Atomic%20Variables.html",{loader:()=>a(()=>import("./2024-07-19-Differences Between set   and lazySet   in Java Atomic Variables.html-Cbsyyds_.js"),__vite__mapDeps([1088,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Concurrency"],g:["Java","Atomic Variables","set()","lazySet()"],e:`<hr>
<h1>Java 中原子变量的 set() 和 lazySet() 方法的区别</h1>
<h2>1. 概述</h2>
<p>在本教程中，我们将探讨 Java 中如 AtomicInteger 和 AtomicReference 等原子类的方法 <em>set()</em> 和 <em>lazySet()</em> 之间的区别。</p>
<h2>2. 原子变量——快速回顾</h2>
<p><strong>Java 中的原子变量允许我们轻松地在类引用或字段上执行线程安全的操作，而无需添加诸如监视器或互斥锁等并发原语。</strong></p>
<p>它们定义在 <em>java.util.concurrent.atomic</em> 包下，尽管它们的 API 根据原子类型不同而有所不同，但大多数都支持 <em>set()</em> 和 <em>lazySet()</em> 方法。</p>`,r:{minutes:3.31,words:994},t:"Java 中原子变量的 set() 和 lazySet() 方法的区别",y:"a"}}],["/posts/baeldung/2024-07-19/2024-07-19-Distinct%20Queries%20in%20HQL.html",{loader:()=>a(()=>import("./2024-07-19-Distinct Queries in HQL.html-Dhebgdt1.js"),__vite__mapDeps([1089,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","HQL"],g:["HQL","DISTINCT"],e:`<hr>
<h1>HQL中的不同查询</h1>
<p>在这篇文章中，我们将讨论HQL中的不同查询以及如何在不必要时避免在SQL查询中添加_distinct_关键字。</p>
<h2>2. 理解问题</h2>
<p>首先，让我们看看我们的数据模型并确定我们想要实现什么。</p>
<p>我们将使用具有一对多关系的_Post_和_Comment_实体对象。我们想要检索一个帖子列表以及它们所有相关的评论。</p>
<p>让我们先尝试以下HQL查询：</p>
<div class="language-hql" data-ext="hql" data-title="hql"><pre class="language-hql"><code>String hql = "SELECT p FROM Post p LEFT JOIN FETCH p.comments";
List\`\`&lt;Post&gt;\`\` posts = session.createQuery(hql, Post.class).getResultList();
</code></pre></div>`,r:{minutes:1.71,words:514},t:"HQL中的不同查询",y:"a"}}],["/posts/baeldung/2024-07-19/2024-07-19-Error%20Handling%20in%20GraphQL%20With%20Spring%20Boot.html",{loader:()=>a(()=>import("./2024-07-19-Error Handling in GraphQL With Spring Boot.html-DI7VswAK.js"),__vite__mapDeps([1090,1])),meta:{d:17213472e5,l:"2024年7月19日",c:["Spring Boot","GraphQL"],g:["Error Handling","Spring Boot"],e:`<hr>
<h1>GraphQL中的错误处理与Spring Boot</h1>
<h2>1. 概述</h2>
<p>在本教程中，我们将学习GraphQL中的错误处理选项。我们将查看GraphQL规范对错误响应的说明。因此，我们将开发一个使用Spring Boot的错误处理示例。</p>
<h2>2. 根据GraphQL规范的响应</h2>
<p>根据GraphQL规范，收到的每个请求都必须返回一个格式良好的响应。这个格式良好的响应由相应成功或不成功的请求操作的数据或错误映射组成。此外，响应可能包含部分成功的结果数据和字段错误。</p>
<p><strong>响应映射的关键组件是_errors_、<em>data_和_extensions</em>。</strong></p>`,r:{minutes:8.27,words:2482},t:"GraphQL中的错误处理与Spring Boot",y:"a"}}],["/posts/baeldung/2024-07-19/2024-07-19-Exception%20Handling%20With%20Jersey.html",{loader:()=>a(()=>import("./2024-07-19-Exception Handling With Jersey.html-CG1c7bgH.js"),__vite__mapDeps([1091,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Jersey"],g:["Exception Handling","REST API"],e:`
<p>在本教程中，我们将看到使用Jersey处理异常的不同方式，Jersey是JAX-RS的一种实现。</p>
<p>JAX-RS为我们提供了许多处理异常的机制，我们可以选择和组合。处理REST异常是构建更好API的重要步骤。在我们的用例中，我们将构建一个购买股票的API，并看看每个步骤是如何相互影响的。</p>
<h2>2. 场景设置</h2>
<p>我们的最小设置包括创建一个仓库、几个bean和一些端点。它从我们的资源配置开始。在那里，我们将定义我们的起始URL和端点包：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ApplicationPath</span><span class="token punctuation">(</span><span class="token string">"/exception-handling/*"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExceptionHandlingConfig</span> <span class="token keyword">extends</span> <span class="token class-name">ResourceConfig</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">ExceptionHandlingConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">packages</span><span class="token punctuation">(</span><span class="token string">"com.baeldung.jersey.exceptionhandling.rest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:6.25,words:1876},t:"Jersey中的异常处理",y:"a"}}],["/posts/baeldung/2024-07-19/2024-07-19-Finding%20All%20Beans%20with%20a%20Custom%20Annotation.html",{loader:()=>a(()=>import("./2024-07-19-Finding All Beans with a Custom Annotation.html-BZuVIxOr.js"),__vite__mapDeps([1092,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring","Spring Boot"],g:["Spring Framework","Custom Annotation"],e:`
<p>在本教程中，我们将解释如何在Spring中查找所有带有自定义注解的Bean。我们将展示根据不同的Spring版本使用的不同方法。</p>
<h2>2. 使用Spring Boot 2.2或更高版本</h2>
<p>自Spring Boot 2.2以来，我们可以使用<code>getBeansWithAnnotation</code>方法。</p>
<p>让我们构建一个示例。首先，我们将定义我们的自定义注解。我们将使用<code>@Retention(RetentionPolicy.RUNTIME)</code>对其进行注解，以确保程序在运行时可以访问该注解：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>@Retention(RetentionPolicy.RUNTIME)
public @interface MyCustomAnnotation {
}
</code></pre></div>`,r:{minutes:3.9,words:1171},t:"在Spring中查找所有带有自定义注解的Bean",y:"a"}}],["/posts/baeldung/2024-07-19/2024-07-19-Generate%20a%20Random%20Value%20From%20an%20Enum.html",{loader:()=>a(()=>import("./2024-07-19-Generate a Random Value From an Enum.html-U3mH-glX.js"),__vite__mapDeps([1093,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Enum"],g:["Java Enum","Random Value"],e:`
<p>在本教程中，我们将学习如何从枚举中生成一个随机值。</p>
<h2>1. 概述</h2>
<h2>2. 使用静态方法生成随机枚举值</h2>
<p>首先，我们将创建一个静态函数，该函数返回特定枚举集中的随机生成值。<strong>枚举值表示一组常量；然而，我们仍然可以在枚举类体中声明静态方法。</strong> <strong>我们将使用静态方法作为辅助工具来生成随机枚举值。</strong></p>
<p>我们在枚举类体内声明一个静态方法，该方法返回一个枚举值。这个方法将调用一个Random对象的nextInt()，并我们将这个方法命名为randomDirection()：</p>
`,r:{minutes:2.63,words:790},t:"从枚举生成随机值",y:"a"}}],["/posts/baeldung/2024-07-19/2024-07-19-Get%20the%20ASCII%20Value%20of%20a%20Character%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-19-Get the ASCII Value of a Character in Java.html-NVvEMFjD.js"),__vite__mapDeps([1094,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","ASCII"],g:["Java","ASCII","Character"],e:`<hr>
<h1>在Java中获取字符的ASCII值</h1>
<h2>1. 概述</h2>
<p>在这篇简短的教程中，我们将看到如何在Java中<strong>获取字符的ASCII值</strong>以及<strong>将ASCII值转换为其字符等价物</strong>。</p>
<h3>2.1. 使用强制类型转换</h3>
<p>要获取字符的ASCII值，我们可以简单地将我们的_char_强制转换为_int_：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">'a'</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:1.25,words:375},t:"在Java中获取字符的ASCII值",y:"a"}}],["/posts/baeldung/2024-07-19/2024-07-19-Get%20the%20IP%20Address%20of%20the%20Current%20Machine%20Using%20Java.html",{loader:()=>a(()=>import("./2024-07-19-Get the IP Address of the Current Machine Using Java.html-CU9GfeiD.js"),__vite__mapDeps([1095,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Networking"],g:["IP Address","Java"],e:`
<p>IP地址或互联网协议地址是唯一标识互联网上的一个设备。因此，了解运行我们应用程序的设备的身份是某些应用程序的关键部分。</p>
<p>在本教程中，我们将探讨使用Java检索计算机IP地址的各种方法。</p>
<h2>1. 查找本地IP地址</h2>
<p>首先，让我们看看获取当前机器的本地IPv4地址的一些方法。</p>
<h3>1.1 使用Java Net库获取本地地址</h3>
<p>这种方法使用Java Net库来建立一个UDP连接：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>try (final DatagramSocket datagramSocket = new DatagramSocket()) {
    datagramSocket.connect(InetAddress.getByName("8.8.8.8"), 12345);
    return datagramSocket.getLocalAddress().getHostAddress();
}
</code></pre></div>`,r:{minutes:2.96,words:887},t:"使用Java获取当前机器的IP地址",y:"a"}}],["/posts/baeldung/2024-07-19/2024-07-19-Gradle%20Build%20Cache%20Basics.html",{loader:()=>a(()=>import("./2024-07-19-Gradle Build Cache Basics.html-C6aYUltk.js"),__vite__mapDeps([1096,1])),meta:{d:17213472e5,l:"2024年7月19日",c:["Gradle","Build Cache"],g:["Gradle","Build Cache","构建优化"],e:`<hr>
<h1>Gradle构建缓存基础</h1>
<p>构建缓存可以使代码构建过程更快，并因此提高开发人员的生产力。在本文中，我们将学习Gradle构建缓存的基础知识。</p>
<h2>1. 概述</h2>
<h2>2. Gradle构建缓存是什么？</h2>
<p>Gradle构建缓存是一种半永久性存储，它保存构建任务的输出。它允许从先前的构建中重用已经生成的工件。Gradle构建缓存的指导原则是，只要输入没有改变，就应避免重新构建已经构建的任务。通过这种方式，可以减少完成后续构建所需的时间。</p>
<p>在Gradle中，构建缓存键通过哈希每个任务的输入来唯一标识一个工件或任务输出。在执行任务之前，Gradle计算缓存键，然后查看远程或本地缓存，检查是否已经存在与计算出的缓存键对应的任务输出。如果不存在，则执行任务。否则，Gradle重用现有的任务输出。</p>`,r:{minutes:4.44,words:1332},t:"Gradle构建缓存基础",y:"a"}}],["/posts/baeldung/2024-07-19/2024-07-19-Handle%20Spring%20Security%20Exceptions.html",{loader:()=>a(()=>import("./2024-07-19-Handle Spring Security Exceptions.html-MJjVl85c.js"),__vite__mapDeps([1097,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Security"],g:["异常处理","资源服务器"],e:`
<p>如果你正在处理Spring Security（特别是OAuth）实现，一定要看看《学习Spring》的<strong>安全课程</strong>。</p>
<h2>1. 概述</h2>
<p>在本文中，我们将看看如何<strong>处理由我们的Spring Security资源服务器产生的Spring Security异常</strong>。为此，我们还将使用一个实际的例子，其中将解释所有必要的配置。首先，让我们简短地介绍一下Spring Security。</p>
<p>Spring Security是Spring项目的一部分库。<strong>它试图将Spring项目中用户访问控制的所有功能集中起来</strong>。访问控制允许限制应用程序中特定用户组或角色可以执行的选项。在这个方向上，<strong>Spring Security控制对业务逻辑的调用或限制对某些URL的HTTP请求的访问</strong>。考虑到这一点，我们必须通过告诉Spring Security安全层应该如何表现来配置应用程序。</p>`,r:{minutes:3.17,words:952},t:"处理Spring Security异常",y:"a"}}],["/posts/baeldung/2024-07-19/2024-07-19-Hibernate%20s%20%20Not%20Null%20Property%20References%20a%20Null%20or%20Transient%20Value%20%20Error.html",{loader:()=>a(()=>import("./2024-07-19-Hibernate s  Not Null Property References a Null or Transient Value  Error.html-B30--OK8.js"),__vite__mapDeps([1098,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Hibernate","JPA"],g:["Hibernate","Error"],e:`
<p>在本文中，我们将学习Hibernate的_PropertyValueException_。特别是，我们将考虑“非空属性引用了空或瞬态值”的错误消息。</p>
<p>Hibernate主要在两种情况下抛出_PropertyValueException_：</p>
<ul>
<li>当为标记为_nullable = false_的列保存一个_null_值时</li>
<li>当保存一个引用未保存实例的关联实体时</li>
</ul>
<h2>2. Hibernate的空值检查</h2>
<p>首先，让我们讨论Hibernate的_@Column(nullable = false)_注解。<strong>如果不存在其他Bean验证，我们可以依赖</strong>Hibernate的空值检查。</p>`,r:{minutes:2.81,words:842},t:"Hibernate的“非空属性引用了空或瞬态值”错误",y:"a"}}],["/posts/baeldung/2024-07-19/2024-07-19-Hide%20a%20Request%20Field%20in%20Swagger%20API.html",{loader:()=>a(()=>import("./2024-07-19-Hide a Request Field in Swagger API.html-az2K5uOv.js"),__vite__mapDeps([1099,1])),meta:{d:16935264e5,l:"2023年9月1日",c:["Spring Boot","Swagger"],g:["Spring","Swagger","REST API"],e:`
<p>我们可以将Swagger UI用作一个平台，以方便的方式可视化和与API接口交互。它是一个强大的工具，可以以最少的配置生成API结构。</p>
<p>在本文中，我们将重点关注使用Swagger与Spring Boot REST API。具体来说，我们将探讨在Swagger UI中隐藏请求字段的不同方法。</p>
<h2>2. 引言</h2>
<p>为了简单起见，我们将创建一个基本的Spring Boot应用程序，并使用Swagger UI探索API。</p>
<p>让我们创建一个简单的_ArticleApplication_，使用Spring Boot。我们使用_ArticlesController_公开两个API。我们希望使用GET API接收与所有文章相关的详细信息。</p>`,r:{minutes:5.68,words:1703},t:"在Swagger API中隐藏请求字段",y:"a"}}],["/posts/baeldung/2024-07-19/2024-07-19-How%20to%20Disable%20a%20Maven%20Plugin%20Defined%20in%20a%20Parent%20POM.html",{loader:()=>a(()=>import("./2024-07-19-How to Disable a Maven Plugin Defined in a Parent POM.html-DL4uy663.js"),__vite__mapDeps([1100,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Maven"],g:["Maven","Parent POM","Plugin"],e:`<hr>
<h1>如何禁用在父 POM 中定义的 Maven 插件</h1>
<h2>1. 概述</h2>
<p>Maven 允许我们使用继承的概念来构建项目。<strong>当父 POM 定义了一个插件时，所有的子模块都会继承它。</strong></p>
<p>但如果我们不想从父 POM 继承一个插件，而我们又不能修改父 POM 怎么办？</p>
<p>在本教程中，我们将探讨几种不同的方法来禁用在父 POM 中定义的 Maven 插件，特别是 Maven Enforcer 插件。</p>
<h2>2. 我们为什么要禁用父 POM 中定义的插件？</h2>
<p>在我们继续之前，让我们思考一下为什么我们可能需要这样做。</p>`,r:{minutes:5.5,words:1649},t:"如何禁用在父 POM 中定义的 Maven 插件",y:"a"}}],["/posts/baeldung/2024-07-19/2024-07-19-How%20to%20Initialize%20a%20List%20of%20Lists%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-19-How to Initialize a List of Lists in Kotlin.html-DZgqhPS5.js"),__vite__mapDeps([1101,1])),meta:{d:1705104e6,l:"2024年1月13日",c:["Kotlin"],g:["Kotlin","Lists","Arrays"],e:`<hr>
<h1>如何在 Kotlin 中初始化列表的列表</h1>
<h2>1. 引言</h2>
<p>要有效地使用 Kotlin，了解如何初始化列表的列表是重要的。也被称为二维数组或矩阵，列表的列表是一种数据结构，定义为一个列表，其中的每个元素本身是一个列表。</p>
<p>在本教程中，我们将探索在 Kotlin 中初始化列表的列表的几种方法。</p>
<h2>2. 什么是列表的列表？</h2>
<p>在大多数编程语言中，包括 Kotlin，列表的列表被实现为二维数组：</p>
<h2><img src="https://www.baeldung.com/wp-content/uploads/sites/5/2024/01/Screenshot-2024-01-13-at-02.58.36-300x162.png" alt="img" loading="lazy"></h2>`,r:{minutes:3.74,words:1122},t:"如何在 Kotlin 中初始化列表的列表",y:"a"}}],["/posts/baeldung/2024-07-19/2024-07-19-How%20to%20Remove%20Null%20and%20Empty%20Values%20from%20a%20List%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-19-How to Remove Null and Empty Values from a List in Kotlin.html-0YOe-TPm.js"),__vite__mapDeps([1102,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin"],g:["Lists","Null and Empty Values"],e:'\n<h2>1. 引言</h2>\n<p>在 Kotlin 中使用列表时，经常需要移除空值和 null 值。null 值可能会在我们的代码中引起错误，而空值可能会给我们的列表增加不必要的冗余。</p>\n<p>在本教程中，我们将探索在 Kotlin 中从列表中移除 null 和空值的不同方法。</p>\n<h2>2. 使用简单的列表迭代</h2>\n<p>我们将使用的第一个方法是程序化方法。它涉及遍历列表，并在此过程中移除所有 null 和空元素：</p>\n<div class="language-kotlin" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">removeValuesViaIteration</span><span class="token punctuation">(</span>listWithNullsAndEmpty<span class="token operator">:</span> MutableList````````````<span class="token operator">&lt;</span>String<span class="token operator">?</span><span class="token operator">&gt;</span>````````````<span class="token punctuation">)</span><span class="token operator">:</span> List``````````````<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span>`````````````` <span class="token punctuation">{</span>\n    <span class="token keyword">val</span> iterator <span class="token operator">=</span> listWithNullsAndEmpty<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">val</span> element <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>element <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> element<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            iterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> listWithNullsAndEmpty <span class="token keyword">as</span> List``````````````<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span>``````````````\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:7.63,words:2289},t:"如何在 Kotlin 中从列表中移除空值和 null 值 | Baeldung 关于 Kotlin",y:"a"}}],["/posts/baeldung/2024-07-19/2024-07-19-Illegal%20Character%20Compilation%20Error.html",{loader:()=>a(()=>import("./2024-07-19-Illegal Character Compilation Error.html-BfiiOMaY.js"),__vite__mapDeps([1103,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java"],g:["编码","编译错误"],e:`<hr>
<h1>Java 非法字符编译错误</h1>
<h2>1. 概述</h2>
<p>非法字符编译错误是一种文件类型编码错误。当我们在创建文件时使用了错误的编码，就会产生这种错误。因此，在像 Java 这样的语言中，当我们尝试编译项目时可能会遇到这种类型的错误。在本教程中，我们将详细描述问题，并展示一些可能遇到这种情况的场景，然后提供一些解决此问题的示例。</p>
<h3>2.1. 字节顺序标记 (BOM)</h3>
<p>在我们深入字节顺序标记之前，需要快速了解一下 UCS（Unicode）转换格式（UTF）。<strong>UTF 是一种字符编码格式，可以编码 Unicode 中所有可能的字符代码点</strong>。在所有这些编码中，UTF-8 是最常用的。</p>`,r:{minutes:5.55,words:1665},t:"Java 非法字符编译错误",y:"a"}}],["/posts/baeldung/2024-07-19/2024-07-19-Implements%20vs.%20Extends%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-19-Implements vs. Extends in Java.html-DeSM6JAO.js"),__vite__mapDeps([1104,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Object-Oriented Programming"],g:["Java","Inheritance","Interfaces"],e:`<hr>
<h1>Java 中的 implements 与 extends</h1>
<h2>1. 概述</h2>
<p>在本教程中，我们将讨论面向对象编程的关键概念之一——继承。在 Java 中，用于继承的两个主要关键字是 <strong><em>extends</em></strong> 和 <strong><em>implements</em></strong>。</p>
<p>让我们讨论这两个关键字之间的区别。</p>
<p><strong>我们使用 <em>extends</em> 关键字来继承一个类的属性和方法。</strong> 作为父类的类被称为基类，从这个基类继承的类被称为派生类或子类。主要来说，<em>extends</em> 关键字用于将父类的功能性扩展到派生类。此外，一个基类可以有多个派生类，但一个派生类只能有一个基类，因为 Java 不支持多重继承。</p>`,r:{minutes:3.98,words:1195},t:"Java 中的 implements 与 extends",y:"a"}}],["/posts/baeldung/2024-07-19/2024-07-19-JPA%20and%20Hibernate%20%20%20Criteria%20vs.%20JPQL%20vs.%20HQL%20Query.html",{loader:()=>a(()=>import("./2024-07-19-JPA and Hibernate   Criteria vs. JPQL vs. HQL Query.html-DcXrUutI.js"),__vite__mapDeps([1105,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["JPA","Hibernate"],g:["Criteria Query","JPQL","HQL"],e:`
<p>在本教程中，我们将了解如何使用JPA和Hibernate查询，以及Criteria、JPQL和HQL查询之间的区别。Criteria查询允许用户在不使用原始SQL的情况下编写查询。除了Criteria查询，我们还将探讨编写Hibernate命名查询以及如何在Spring Data JPA中使用_Query_注解。</p>
<p>在我们深入之前，应该指出Hibernate Criteria API自Hibernate 5.2以来已被弃用。因此，<strong>我们将在示例中使用JPA Criteria API</strong>，因为它是编写Criteria查询的新的和首选工具。从这里开始，我们将简单地将其称为Criteria API。</p>`,r:{minutes:5.78,words:1734},t:"JPA和Hibernate - Criteria查询与JPQL和HQL查询的比较",y:"a"}}],["/posts/baeldung/2024-07-19/2024-07-19-Java%209%20Illegal%20Reflective%20Access%20Warning.html",{loader:()=>a(()=>import("./2024-07-19-Java 9 Illegal Reflective Access Warning.html-Y1DDhlcu.js"),__vite__mapDeps([1106,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","反射"],g:["Java 9","反射访问"],e:`
<p>在Java 9之前，Java反射API拥有一项超能力：它能够在没有限制的情况下访问非公开的类成员。从Java 9开始，模块系统希望将反射API限制在合理的范围内。</p>
<p>在本教程中，我们将检查模块系统与反射之间的关系。</p>
<h2>2. 模块系统与反射</h2>
<p>尽管反射和模块系统在Java历史的不同时间出现，但它们需要协同工作以构建一个可靠的平台。</p>
<h3>2.1 底层模型</h3>
<p>Java模块系统的目标之一是强封装。<strong>强封装主要包括可读性和可访问性</strong>：</p>
<ul>
<li>模块的可读性是一个粗略的概念，涉及一个模块是否依赖于另一个模块。</li>
<li>模块的可访问性是一个更细的概念，关心一个类是否可以访问另一个类的字段或方法。它由类边界、包边界和模块边界提供。</li>
</ul>`,r:{minutes:5.89,words:1766},t:"Java 9 非法反射访问警告",y:"a"}}],["/posts/baeldung/2024-07-19/2024-07-19-Java%20HttpClient%20Basic%20Authentication.html",{loader:()=>a(()=>import("./2024-07-19-Java HttpClient Basic Authentication.html-D4K3NKnf.js"),__vite__mapDeps([1107,1])),meta:{d:17214336e5,l:"2024年7月20日",c:["Java","HTTP Client"],g:["Basic Authentication","HttpClient"],e:`
<p>在本简短的教程中，我们将探讨基础认证。我们将看到它是如何工作的，并配置Java <em>HttpClient</em> 使用这种类型的认证。</p>
<p>基础认证是一种简单的认证方法。客户端可以通过用户名和密码进行认证。这些凭据以特定的格式在_HTTP_授权头部发送。它以_Basic_关键字开头，后跟用户名和密码的_base64_编码值。冒号字符在这里很重要。头部应严格遵循此格式。</p>
<p>例如，要使用用户名_baeldung_和_HttpClient_密码进行认证，我们必须发送此头部：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>Basic YmFlbGR1bmc6SHR0cENsaWVudA==
</code></pre></div>`,r:{minutes:3.98,words:1193},t:"Java HttpClient 基础认证",y:"a"}}],["/posts/baeldung/2024-07-19/2024-07-19-Java%20HttpClient%20With%20SSL.html",{loader:()=>a(()=>import("./2024-07-19-Java HttpClient With SSL.html-CPRh2nar.js"),__vite__mapDeps([1108,1])),meta:{d:17213472e5,l:"2024年7月19日",c:["Java","HttpClient"],g:["SSL","HTTPS"],e:`<hr>
<h1>Java HttpClient 与 SSL</h1>
<h2>1. 概述</h2>
<p>在本教程中，我们将探讨如何使用 Java HttpClient 连接到 HTTPS URL。我们还将学习如何使用客户端连接到没有有效 SSL 证书的 URL。</p>
<p>在 Java 的旧版本中，我们更倾向于使用像 Apache HTTPClient 和 OkHttp 这样的库来连接服务器。在 Java 11 中，JDK 添加了一个改进的 HttpClient 库。</p>
<p>让我们探索如何使用它通过 SSL 调用服务。</p>
<h2>2. 使用 Java HttpClient 调用 HTTPS URL</h2>`,r:{minutes:4.33,words:1300},t:"Java HttpClient 与 SSL",y:"a"}}],["/posts/baeldung/2024-07-19/2024-07-19-Java%20Scanner.skip%20Method%20with%20Examples.html",{loader:()=>a(()=>import("./2024-07-19-Java Scanner.skip Method with Examples.html-D4h-vDmV.js"),__vite__mapDeps([1109,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Scanner"],g:["skip","Pattern","String"],e:`<hr>
<h1>Java Scanner.skip 方法示例 | Baeldung---</h1>
<p>date: 2022-04-01
category:</p>
<ul>
<li>Java</li>
<li>Scanner
tag:</li>
<li>skip</li>
<li>Pattern</li>
<li>String
head:</li>
<li>
<ul>
<li>meta</li>
<li>name: keywords
content: Java Scanner skip method, Java Scanner skip tutorial, Java Scanner skip examples</li>
</ul>
</li>
</ul>`,r:{minutes:1.78,words:533},t:"Java Scanner.skip 方法示例 | Baeldung---",y:"a"}}],["/posts/baeldung/2024-07-19/2024-07-19-Liquibase%20vs%20Flyway.html",{loader:()=>a(()=>import("./2024-07-19-Liquibase vs Flyway.html-DWMix1Yl.js"),__vite__mapDeps([1110,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Database","Development Tools"],g:["Liquibase","Flyway"],e:`
<p>在持续集成和数据库开发的自动化重构时代，我们需要采用渐进式数据库设计的技术。像Liquibase和Flyway这样的工具遵循这些技术，并提供迭代的开发方法。在本文中，我们将研究Liquibase和Flyway之间的差异和相似之处。</p>
<p>请注意，没有一种工具适合所有用例。每种工具在各自领域都有其优势。</p>
<h3>Liquibase和Flyway的相似之处</h3>
<p>由于<strong>Liquibase和Flyway实现了渐进式数据库的设计原则</strong>，它们提供了许多相似的功能。这两个工具：</p>
<ul>
<li>在一定程度上都是开源的，帮助管理、跟踪和部署数据库模式变更。</li>
<li>使用版本化的迁移方法来改变数据库模式。</li>
<li>基于Java，并为Java框架如Spring Boot和Vert.x提供广泛支持。</li>
<li>支持与构建工具如Maven和Gradle集成。</li>
<li>可以通过提供的脚本独立于命令行运行。</li>
<li>支持多种数据库。</li>
</ul>`,r:{minutes:4.35,words:1306},t:"Liquibase与Flyway的比较",y:"a"}}],["/posts/baeldung/2024-07-19/2024-07-19-List%20vs.%20ArrayList%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-19-List vs. ArrayList in Java.html-i0mFfzGB.js"),__vite__mapDeps([1111,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java"],g:["List","ArrayList"],e:`<hr>
<h1>Java 中 List 与 ArrayList 的比较</h1>
<h2>1. 概述</h2>
<p>在本文中，我们将探讨使用 <em>List</em> 和 <em>ArrayList</em> 类型的区别。</p>
<p>首先，我们将看到一个使用 <em>ArrayList</em> 的示例实现。然后，我们将切换到 <em>List</em> 接口并比较它们的差异。</p>
<h2>2. 使用 <em>ArrayList</em></h2>
<p><strong><em>ArrayList</em> 是 Java 中最常用的 <em>List</em> 实现之一</strong>。它建立在数组之上，可以随着我们添加/删除元素而动态增长和缩小。当我们知道列表会变得很大时，最好初始化一个具有初始容量的列表：</p>`,r:{minutes:6.91,words:2074},t:"Java 中 List 与 ArrayList 的比较",y:"a"}}],["/posts/baeldung/2024-07-19/2024-07-19-Return%20Map%20from%20GraphQL.html",{loader:()=>a(()=>import("./2024-07-19-Return Map from GraphQL.html-BVxQvot9.js"),__vite__mapDeps([1112,1])),meta:{d:16492032e5,l:"2022年4月6日",c:["Java","GraphQL"],g:["GraphQL","Java"],e:`
<h2>1. 概述</h2>
<p>多年来，GraphQL 已被广泛接受为 Web 服务通信的模式之一。尽管它在使用上丰富且灵活，但在某些场景中可能会带来挑战。其中一个挑战是从查询中返回一个 <em>Map</em>，这本身就是一个挑战，因为 <em>Map</em> 在 GraphQL 中并不是一个类型。</p>
<p>在本教程中，我们将学习从 GraphQL 查询返回 <em>Map</em> 的技术。</p>
<h2>2. 示例</h2>
<p>让我们以一个产品数据库为例，该数据库具有不确定数量的自定义属性。</p>
<p>作为一个数据库实体的 <em>Product</em>，可能有一些固定的字段，如 <em>name</em>、<em>price</em>、<em>category</em> 等。但是，它也可能有因类别而异的属性。这些属性应该以一种方式返回给客户端，以便保留它们的标识键。</p>`,r:{minutes:3.81,words:1143},t:"GraphQL 查询中返回 Map 的方法",y:"a"}}],["/posts/baeldung/2024-07-19/2024-07-19-Serialize%20a%20Lambda%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-19-Serialize a Lambda in Java.html-Oe5HIWdU.js"),__vite__mapDeps([1113,1])),meta:{d:16513632e5,l:"2022年5月1日",c:["Java","Serialization"],g:["Java","Lambda","Serialization"],e:`<hr>
<h1>Java中序列化Lambda表达式</h1>
<h2>1. 概述</h2>
<p>通常来说，Java文档强烈不鼓励我们序列化一个lambda表达式。这是因为lambda表达式会生成合成结构。这些合成结构存在几个潜在问题：在源代码中没有对应的结构，不同Java编译器实现之间的变化，以及与不同JRE实现的兼容性问题。然而，有时序列化lambda是必要的。</p>
<p>在本教程中，我们将解释如何序列化lambda表达式及其背后的机制。</p>
<h2>2. Lambda和序列化</h2>
<p>当我们使用Java序列化来序列化或反序列化一个对象时，它的类和非静态字段都必须是可序列化的。否则，将导致_NotSerializableException_。同样地，<strong>在序列化lambda表达式时，我们必须确保其目标类型和捕获参数是可序列化的</strong>。</p>`,r:{minutes:6.07,words:1822},t:"Java中序列化Lambda表达式",y:"a"}}],["/posts/baeldung/2024-07-19/2024-07-19-Single%20Sign%20On%20Solutions%20for%20Java%20Applications.html",{loader:()=>a(()=>import("./2024-07-19-Single Sign On Solutions for Java Applications.html-DS6FR5id.js"),__vite__mapDeps([1114,1])),meta:{d:17214336e5,l:"2024年7月20日",c:["Java","SSO"],g:["SSO","Java应用","身份认证"],e:`
<p>组织用户在使用多个应用程序时经常需要在多个系统中进行身份验证。结果，用户必须记住多个账户和密码。单点登录（SSO）技术是解决这个问题的方案。<strong>SSO为一组系统提供了单一的登录凭证。</strong></p>
<p>在本教程中，我们将简要解释SSO是什么，然后我们将查看Java应用程序的七种不同的SSO解决方案。</p>
<p><strong>实现SSO解决方案可以通过以下两种协议之一进行：</strong></p>
<ul>
<li>SAML 2.0</li>
<li>OpenID Connect</li>
</ul>
<p>SAML 2.0（安全断言标记语言）简化了用户身份验证。它允许用户只需在身份提供者处注册和验证即可访问多个服务。它基于XML。OpenID Connect（OIDC）是SAML 2.0的后继者。同样，它是用于身份验证的OAuth 2.0协议的扩展。OIDC比SAML 2.0更简单易配置。</p>`,r:{minutes:4.63,words:1389},t:"Java应用程序的单点登录解决方案",y:"a"}}],["/posts/baeldung/2024-07-19/2024-07-19-Spark%20DataFrame.html",{loader:()=>a(()=>import("./2024-07-19-Spark DataFrame.html-DL2QAv69.js"),__vite__mapDeps([1115,1])),meta:{d:1653264e6,l:"2022年5月23日",c:["Spark","DataFrame"],g:["Spark","DataFrame","Java","数据处理"],e:`
<p>Apache Spark 是一个开源的分布式分析和处理系统，它通过提供统一的 API 来简化面向分析的应用程序的开发，支持数据传输、大规模转换和分布式处理。</p>
<p>DataFrame 是 Spark API 中一个重要且必不可少的组件。本教程将通过一个简单的客户数据示例，探讨一些 Spark DataFrame API。</p>
<p>从逻辑上讲，<strong>DataFrame 是一个不可变的记录集合，这些记录被组织成名为列</strong>。它与 RDBMS 中的表或 Java 中的 ResultSet 有相似之处。</p>
<p>作为 API，DataFrame 提供了统一的访问多个 Spark 库的方式，包括 Spark SQL、Spark Streaming、MLlib 和 GraphX。</p>`,r:{minutes:5.02,words:1506},t:"Apache Spark DataFrame 教程",y:"a"}}],["/posts/baeldung/2024-07-19/2024-07-19-Spring%20Cloud%20%20%20Disable%20Discovery%20Clients%20with%20Profiles.html",{loader:()=>a(()=>import("./2024-07-19-Spring Cloud   Disable Discovery Clients with Profiles.html-B8tQVTAN.js"),__vite__mapDeps([1116,1])),meta:{d:16492896e5,l:"2022年4月7日",c:["Spring Cloud","Eureka"],g:["Spring Cloud","Eureka","Discovery Client"],e:`<hr>
<h1>Spring Cloud – 使用配置文件禁用发现客户端</h1>
<h2>1. 概述</h2>
<p>在本教程中，我们将探讨如何使用配置文件禁用 Spring Cloud 的发现客户端。这在某些情况下非常有用，比如我们希望在不更改代码的情况下启用/禁用服务发现。</p>
<h2>2. 设置 Eureka 服务器和 Eureka 客户端</h2>
<p>首先，我们创建一个 Eureka 服务器和一个发现客户端。</p>
<h3>2.1. 发现客户端设置</h3>
<p>接下来，我们需要创建另一个应用程序，该应用程序将在服务器上注册自己。让我们将此应用程序设置为发现客户端。</p>`,r:{minutes:4.51,words:1353},t:"Spring Cloud – 使用配置文件禁用发现客户端",y:"a"}}],["/posts/baeldung/2024-07-19/2024-07-19-Spring%20Security%20Authorization%20with%20OPA.html",{loader:()=>a(()=>import("./2024-07-19-Spring Security Authorization with OPA.html-DtwgC96Y.js"),__vite__mapDeps([1117,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Security","OAuth"],g:["Spring Security","OPA","Authorization","Policy"],e:`<hr>
<h1>如何将Spring Security的授权决策外包给OPA</h1>
<p>如果你正在处理Spring Security（特别是OAuth）的实现，一定要看看《学习Spring安全》课程：
<strong>&gt;&gt; 学习Spring</strong>
<strong>安全</strong></p>
<h2>1. 引言</h2>
<p>在本教程中，我们将展示如何将Spring Security的授权决策外包给OPA——开放策略代理。</p>
<h2>2. 前言：外包授权的理由</h2>
<p><strong>跨应用程序的常见需求是能够基于策略做出某些决策</strong>。当这个策略足够简单且不太可能改变时，我们可以直接在代码中实现这个策略，这是最常见的情况。</p>`,r:{minutes:7.73,words:2318},t:"如何将Spring Security的授权决策外包给OPA",y:"a"}}],["/posts/baeldung/2024-07-19/2024-07-19-Swap%20Two%20Variables%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-19-Swap Two Variables in Java.html-MtxFopbM.js"),__vite__mapDeps([1118,1])),meta:{d:16513632e5,l:"2022年5月1日",c:["Java","Programming"],g:["Variables","Swap"],e:`
<h2>1. 概述</h2>
<p>有时，我们可能希望在代码中交换两个变量。</p>
<p>在本教程中，我们将看到几种交换变量的方法，这取决于我们想要交换的变量类型。然后，我们将检查每种方法的性能。</p>
<h2>2. 简单方法：使用临时变量</h2>
<p>交换两个变量的最简单方法是使用第三个变量作为临时存储：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Object</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>
<span class="token class-name">Object</span> temp<span class="token punctuation">;</span>
temp <span class="token operator">=</span> a<span class="token punctuation">;</span>
a <span class="token operator">=</span> b<span class="token punctuation">;</span>
b <span class="token operator">=</span> temp<span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:4.64,words:1393},t:"Java中交换两个变量的方法 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-20/2024-07-20-Acquire%20a%20Lock%20by%20a%20Key%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-20-Acquire a Lock by a Key in Java.html-Dry-EEWt.js"),__vite__mapDeps([1119,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java Concurrency","Locks"],g:["Java","Lock","Concurrency"],e:`
<h2>1. 概述</h2>
<p>在本文中，我们将看到如何针对特定键获取锁，以防止对该键的并发操作，同时不影响其他键的操作。</p>
<p>通常，我们将实现两个方法并了解如何操作它们：</p>
<ul>
<li><code>void lock(String key)</code></li>
<li><code>void unlock(String key)</code></li>
</ul>
<p>为了教程的简单性，我们总是假设我们的键是_字符串_。您可以将它们替换为您需要的对象类型，唯一的条件是正确定义了<code>equals</code>和<code>hashCode</code>方法，因为我们将它们用作<code>HashMap</code>的键。</p>`,r:{minutes:5.76,words:1727},t:"Java中通过键获取锁",y:"a"}}],["/posts/baeldung/2024-07-20/2024-07-20-Add%20Prefix%20to%20All%20Spring%20Boot%20Controllers.html",{loader:()=>a(()=>import("./2024-07-20-Add Prefix to All Spring Boot Controllers.html-CBc1YSv0.js"),__vite__mapDeps([1120,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Boot","Web Development"],g:["Spring Boot","Servlet","Annotations"],e:`<hr>
<h1>为所有Spring Boot控制器添加前缀 | Baeldung</h1>
<h2>1. 引言</h2>
<p>在Spring Boot应用程序中，每个控制器都可以有自己的URL映射。这使得一个应用程序可以在多个位置提供Web端点。例如，我们可以将API端点分组为内部和外部等逻辑分组。</p>
<p>然而，有时我们可能希望将所有端点都放在一个共同的前缀下。在本教程中，我们将探讨为所有Spring Boot控制器使用共同前缀的不同方法。</p>
<h2>2. Servlet上下文</h2>
<p>在Spring应用程序中处理Web请求的主要组件是_DispatcherServlet_。通过自定义此组件，我们可以在很大程度上控制请求的路由方式。</p>`,r:{minutes:4.41,words:1324},t:"为所有Spring Boot控制器添加前缀 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-20/2024-07-20-Apache%20Camel%20Routes%20Testing%20in%20Spring%20Boot.html",{loader:()=>a(()=>import("./2024-07-20-Apache Camel Routes Testing in Spring Boot.html-BcT4qEr8.js"),__vite__mapDeps([1121,1])),meta:{d:172152e7,l:"2024年7月21日",c:["Spring Boot","Apache Camel"],g:["集成测试","单元测试"],e:`
<p>Apache Camel 是一个强大的开源集成框架，实现了一些众所周知的企业集成模式。</p>
<p>在本教程中，<strong>我们将学习如何为我们的 Camel 路由编写可靠、自包含的单元测试</strong>。</p>
<p>首先，我们将创建一个使用 Spring Boot 的基本 Camel 应用程序。然后，我们将看看如何使用 Camel 的 Spring 测试支持 API 和 JUnit 5 来测试我们的应用程序。</p>
<h2><strong>2. 依赖项</strong></h2>
<p>假设我们的项目已经设置并配置为与 Spring Boot 和 Camel 一起工作。</p>`,r:{minutes:5.31,words:1594},t:"Apache Camel 路由在 Spring Boot 中的测试",y:"a"}}],["/posts/baeldung/2024-07-20/2024-07-20-Authentication%20With%20Spring%20Security%20and%20MongoDB.html",{loader:()=>a(()=>import("./2024-07-20-Authentication With Spring Security and MongoDB.html-B5FLjBuI.js"),__vite__mapDeps([1122,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Security","MongoDB"],g:["Authentication","Spring Boot"],e:`<hr>
<h1>使用Spring Security和MongoDB进行认证</h1>
<p>如果你正在开发一个Spring Security（特别是OAuth）实现，一定要看看《学习Spring Security》课程：
<strong>&gt;&gt; 学习Spring</strong>
<strong>安全</strong></p>
<h2>1. 概述</h2>
<p>Spring Security提供了不同的认证系统，例如通过数据库和_UserDetailService_进行认证。</p>
<p>除了使用JPA持久层，我们可能还想使用例如MongoDB仓库。在本教程中，我们将看到如何使用Spring Security和MongoDB进行用户认证。</p>`,r:{minutes:2.86,words:857},t:"使用Spring Security和MongoDB进行认证",y:"a"}}],["/posts/baeldung/2024-07-20/2024-07-20-Automorphic%20Numbers%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-20-Automorphic Numbers in Java.html-Ds9ZcXdY.js"),__vite__mapDeps([1123,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","数学"],g:["Automorphic Numbers","Java"],e:`<hr>
<h1>Java中的自守数</h1>
<h2>1. 概述</h2>
<p>在这篇简短的教程中，我们将讨论自守数，并学习几种找到它们的方法以及相应的Java程序。</p>
<h2>2. 什么是自守数？</h2>
<p><strong>自守数是一个数，其平方的末尾数字与该数本身相同。</strong></p>
<p>例如，25是一个自守数，因为25的平方是625，末尾是25。同样，76是一个自守数，因为76的平方是5776，末尾也是76。</p>
<p><strong>在数学中，自守数也被称为循环数。</strong></p>
<p>一些自守数的例子包括0、1、5、6、25、76、376、625、9376等。</p>`,r:{minutes:3.23,words:970},t:"Java中的自守数",y:"a"}}],["/posts/baeldung/2024-07-20/2024-07-20-Basic%20Authentication%20in%20JMeter.html",{loader:()=>a(()=>import("./2024-07-20-Basic Authentication in JMeter.html-Owber4ka.js"),__vite__mapDeps([1124,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["JMeter","HTTP Basic Authentication"],g:["JMeter","Basic Authentication","HTTP"],e:`
<h2>1. 概述</h2>
<p>当我们使用 JMeter 进行性能测试时，可能会遇到通过 HTTP 基础认证协议保护的 Web 服务。</p>
<p>在本教程中，我们将看到如何在测试期间配置 Apache JMeter 以提供必要的凭据。</p>
<h2>2. 什么是基础认证？</h2>
<p>基础认证是我们可以用于保护 Web 资源的最简单访问控制方法。它由客户端发送的 HTTP 头组成：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>Authorization: Basic \`&lt;credentials&gt;\`
</code></pre></div>`,r:{minutes:4.69,words:1407},t:"Apache JMeter 中的基本认证配置",y:"a"}}],["/posts/baeldung/2024-07-20/2024-07-20-BootstrapMode%20for%20JPA%20Repositories.html",{loader:()=>a(()=>import("./2024-07-20-BootstrapMode for JPA Repositories.html-B-Nz8Ibc.js"),__vite__mapDeps([1125,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Data JPA","JPA Repository"],g:["Spring","JPA","Repository"],e:`<hr>
<h1>JPA仓库的Bootstrap模式</h1>
<p>在这篇简短的教程中，我们将专注于Spring为JPA仓库提供的不同类型的_BootstrapMode_，这些模式用于改变它们的实例化协调方式。</p>
<p>在启动时，Spring Data会扫描仓库并将其注册为单例作用域的bean定义。在它们的初始化过程中，仓库会立即获得一个_EntityManager_。具体来说，它们会获取JPA元模型并验证声明的查询。</p>
<p>默认情况下，JPA是同步启动的。因此，仓库的实例化会被阻塞，直到启动过程完成。随着仓库数量的增加，应用程序可能需要很长时间才能启动并开始接受请求。</p>`,r:{minutes:4.89,words:1466},t:"JPA仓库的Bootstrap模式",y:"a"}}],["/posts/baeldung/2024-07-20/2024-07-20-Bulk%20Update%20of%20Documents%20in%20MongoDB.html",{loader:()=>a(()=>import("./2024-07-20-Bulk Update of Documents in MongoDB.html-B7fLfOBY.js"),__vite__mapDeps([1126,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["MongoDB","Java"],g:["MongoDB","Bulk Update","Java"],e:`<hr>
<h1>MongoDB中批量更新文档</h1>
<h2>1. 概述</h2>
<p>在本教程中，我们将探讨在MongoDB中执行批量更新和插入操作。此外，MongoDB提供了API调用，允许在单个操作中插入或检索多个文档。MongoDB使用数组或批量接口，通过减少客户端和数据库之间的调用次数，大大提高了数据库性能。</p>
<p>在本教程中，我们将查看使用MongoDB Shell和Java驱动代码的解决方案。</p>
<p>让我们深入实现MongoDB中文档的批量更新。</p>
<h2>2. 数据库初始化</h2>
<p>首先，我们需要连接到mongo shell：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>mongo --host localhost --port 27017
</code></pre></div>`,r:{minutes:3.92,words:1177},t:"MongoDB中批量更新文档",y:"a"}}],["/posts/baeldung/2024-07-20/2024-07-20-Case%20Insensitive%20Sorting%20in%20MongoDB.html",{loader:()=>a(()=>import("./2024-07-20-Case Insensitive Sorting in MongoDB.html-DEE9qPlv.js"),__vite__mapDeps([1127,1])),meta:{d:172152e7,l:"2024年7月21日",c:["MongoDB","Java"],g:["MongoDB","Java","Case Insensitive Sorting"],e:`
<ol>
<li>概述</li>
</ol>
<p>默认情况下，MongoDB引擎在排序提取的数据时会考虑字符的大小写。<strong>通过指定聚合(<em>Aggregations</em>)或排序规则(<em>Collations</em>)，可以执行不区分大小写的排序查询。</strong></p>
<p>在这个简短的教程中，我们将使用MongoDB Shell和Java来探讨这两种解决方案。</p>
<ol start="2">
<li>设置环境</li>
</ol>
<p>首先，我们需要运行一个MongoDB服务器。让我们使用一个Docker镜像：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">27017</span>:27017 <span class="token parameter variable">--name</span> example-mongo mongo:latest
</code></pre></div>`,r:{minutes:4.08,words:1224},t:"MongoDB中不区分大小写的排序 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-20/2024-07-20-Common%20Command%20Line%20Compile%20Errors%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-20-Common Command Line Compile Errors in Java.html-BqRI6CUT.js"),__vite__mapDeps([1128,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Command Line"],g:["Java","Compile Errors"],e:`<hr>
<h1>Java命令行编译常见错误</h1>
<h2>1. 概述</h2>
<p>在命令行编译Java程序时，任何预期的命令行选项或参数不匹配都会导致错误。</p>
<p>在本教程中，我们将首先调查“如果显式请求注解处理，则只接受类名”错误。然后，我们将查看一些其他常见的编译错误。</p>
<h2>2. 错误示例</h2>
<p>假设我们有以下类_DemoClass_：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>baeldung</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoClass</span> <span class="token punctuation">{</span>
    <span class="token comment">// 字段和方法</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.25,words:676},t:"Java命令行编译常见错误",y:"a"}}],["/posts/baeldung/2024-07-20/2024-07-20-Compile%20All%20Java%20Classes%20in%20Directory%20Structure%20with%20javac.html",{loader:()=>a(()=>import("./2024-07-20-Compile All Java Classes in Directory Structure with javac.html-B4PxrgUo.js"),__vite__mapDeps([1129,1])),meta:{d:16460928e5,l:"2022年3月1日",c:["Java","Development"],g:["javac","compile","directory"],e:`
<p>在某些特殊情况下，我们可能没有安装第三方构建工具，例如Ant或Maven。然而，我们仍然需要编译一个包含许多包和类的项目。</p>
<p>在本教程中，我们将使用_javac_命令来完成这项任务，并探讨不同的场景。</p>
<h2>2. 使用文件名</h2>
<p>假设当前目录下有两个目录：<em>src_和_out</em>。_src_目录包含我们的Java源文件，而_out_目录将包含相应的编译后的类文件。</p>
<p>让我们从一个简单的场景开始。_src_目录包含一个名为_com/baeldung/MyClass.java_的Java源文件：</p>
<figure><img src="https://www.baeldung.com/wp-content/uploads/2022/03/2_javac-compile-all-java-source-files-in-a-directory-structure-01.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>`,r:{minutes:5.69,words:1706},t:"使用javac命令编译目录结构中的所有Java类",y:"a"}}],["/posts/baeldung/2024-07-20/2024-07-20-Convert%20Byte%20Size%20Into%20a%20Human%20Readable%20Format%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-20-Convert Byte Size Into a Human Readable Format in Java.html-B49w2gAk.js"),__vite__mapDeps([1130,1])),meta:{d:1721441668e3,c:["Java","文件操作"],g:["Java","文件大小","可读格式"],e:`<hr>
<h1>Java中将字节大小转换为人类可读格式</h1>
<p>当我们在Java中获取文件大小时，通常我们会得到字节值。然而，一旦文件足够大，例如123456789字节，以字节表示的长度就变得难以理解了。</p>
<p>在本教程中，我们将探讨如何在Java中将字节大小转换为人类可读的格式。</p>
<h2>2. 问题介绍</h2>
<p>正如我们之前讨论的，当文件的字节大小很大时，它对人类来说不容易理解。因此，当我们向人类展示数据量时，我们经常使用适当的国际单位制前缀，如KB、MB、GB等，以使大数字易于人类理解。例如，“270GB”比“282341192字节”更容易理解。</p>
`,r:{minutes:9.06,words:2718},t:"Java中将字节大小转换为人类可读格式",y:"a"}}],["/posts/baeldung/2024-07-20/2024-07-20-Convert%20long%20to%20int%20Type%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-20-Convert long to int Type in Java.html-uFVxremA.js"),__vite__mapDeps([1131,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Programming"],g:["Java","Convert","Long to Int"],e:`<hr>
<h1>Java中将long转换为int类型</h1>
<p>在本教程中，我们将看到如何在Java中将<code>long</code>类型的值转换为<code>int</code>类型。在我们开始编码之前，我们需要指出一些关于这个数据类型的细节。</p>
<p>首先，在Java中，<code>long</code>值由有符号的64位数字表示。另一方面，<code>int</code>值由有符号的32位数字表示。因此，将一个更高数据类型的转换为一个较低数据类型称为窄化类型转换。这些转换的结果，当<code>long</code>值大于<code>Integer.MAX_VALUE</code>和<code>Integer.MIN_VALUE</code>时，一些位将会丢失。</p>`,r:{minutes:2.76,words:828},t:"Java中将long转换为int类型",y:"a"}}],["/posts/baeldung/2024-07-20/2024-07-20-Creating%20a%20Web%20Application%20With%20Ktor%20and%20Thymeleaf.html",{loader:()=>a(()=>import("./2024-07-20-Creating a Web Application With Ktor and Thymeleaf.html-BWnn2DIz.js"),__vite__mapDeps([1132,1])),meta:{d:17040672e5,l:"2024年1月1日",c:["Kotlin","Web Development"],g:["Ktor","Thymeleaf"],e:`<hr>
<h1>使用Ktor和Thymeleaf创建Web应用程序 | Baeldung关于Kotlin</h1>
<h2>1. 概述</h2>
<p><strong>Thymeleaf是一个服务器端Java模板引擎</strong>，它既可以在Web环境也可以在非Web环境中工作。<strong>Ktor是一个用Kotlin编写的用于构建异步服务器端和客户端应用程序的框架</strong>。</p>
<p>在本教程中，我们将使用Thymeleaf和Bootstrap创建一个带有学生名单和成绩报告卡的Web应用程序。</p>
<h2>2. 设置依赖项</h2>
<p>对于这个应用程序，我们需要使用Gradle添加**<em>Ktor Server Core</em>, <em>Netty</em>, <em>Thymeleaf</em>, 和 StatusPages 依赖项**：</p>`,r:{minutes:7.49,words:2246},t:"使用Ktor和Thymeleaf创建Web应用程序 | Baeldung关于Kotlin",y:"a"}}],["/posts/baeldung/2024-07-20/2024-07-20-Difference%20Between%20POJO%20%20JavaBeans%20%20DTO%20and%20VO.html",{loader:()=>a(()=>import("./2024-07-20-Difference Between POJO  JavaBeans  DTO and VO.html-Do9hIuM8.js"),__vite__mapDeps([1133,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java"],g:["POJO","JavaBeans","DTO","VO"],e:`<hr>
<h1>POJO、JavaBeans、DTO 和 VO 之间的区别</h1>
<p>在本教程中，我们将学习数据传输对象（DTO）、值对象（VO）、普通旧Java对象（POJO）和JavaBeans是什么。我们将探讨它们之间的区别，并了解何时使用每种类型。</p>
<h2>1. 概述</h2>
<h2>2. 普通旧Java对象</h2>
<p><strong>POJO，也就是普通旧Java对象，是一个没有引用任何特定框架的普通Java对象。</strong> 这个术语用来指代一个简单、轻量级的Java对象。</p>
<p>POJO不使用属性和方法的任何命名约定。</p>
<p>让我们定义一个基本的_EmployeePOJO_对象，它有三个属性：</p>`,r:{minutes:3.96,words:1189},t:"POJO、JavaBeans、DTO 和 VO 之间的区别",y:"a"}}],["/posts/baeldung/2024-07-20/2024-07-20-Format%20Instant%20to%20String%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-20-Format Instant to String in Java.html-Bw9Yboay.js"),__vite__mapDeps([1134,1])),meta:{d:17214336e5,l:"2024年7月20日",c:["Java","日期时间"],g:["Instant","String","DateTimeFormatter","Joda-Time"],e:`
<p>在本教程中，我们将学习<strong>如何在Java中将一个瞬间（Instant）格式化为字符串（String）</strong>。</p>
<p>首先，我们将从一些关于Java中瞬间是什么的背景知识开始。然后，我们将演示如何使用Java核心库和第三方库，例如Joda-Time，来回答我们的中心问题。</p>
<h3>2.1 使用DateTimeFormatter类</h3>
<p>通常来说，我们需要一个格式化器来格式化一个Instant对象。幸运的是，Java 8引入了DateTimeFormatter类来统一格式化日期和时间。</p>
<p>简单来说，DateTimeFormatter提供了format()方法来完成这项工作。</p>`,r:{minutes:2.35,words:704},t:"Java中将Instant格式化为String的方法",y:"a"}}],["/posts/baeldung/2024-07-20/2024-07-20-Get%20the%20Number%20of%20Rows%20in%20a%20ResultSet.html",{loader:()=>a(()=>import("./2024-07-20-Get the Number of Rows in a ResultSet.html-B0J-Cxee.js"),__vite__mapDeps([1135,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","JDBC"],g:["ResultSet","行数"],e:`
<p>在本文中，我们将探讨不同的方法来<strong>统计JDBC ResultSet中的行数</strong>。</p>
<h2>2. 统计ResultSet行数</h2>
<p>统计ResultSet中的行数并不直接，因为没有API方法提供这个信息。这是因为<strong>JDBC查询不会立即获取所有结果</strong>。结果行是在我们使用ResultSet.next方法请求时从数据库加载的。</p>
<p>当我们执行JDBC查询时，我们无法预先知道将有多少结果。相反，我们需要遍历它们，只有在到达结尾时，我们才能确定可用的行数。</p>
<p>我们有两种方法可以做到这一点，使用标准或可滚动的ResultSet。</p>`,r:{minutes:3.03,words:909},t:"获取ResultSet中的行数",y:"a"}}],["/posts/baeldung/2024-07-20/2024-07-20-Getting%20Started%20With%20GraphQL%20SPQR%20and%20Spring%20Boot.html",{loader:()=>a(()=>import("./2024-07-20-Getting Started With GraphQL SPQR and Spring Boot.html-DPkJzOpo.js"),__vite__mapDeps([1136,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Boot","GraphQL"],g:["GraphQL","SPQR","Spring Boot"],e:`<hr>
<h1>使用GraphQL SPQR和Spring Boot入门</h1>
<p>GraphQL是一种用于Web API的查询和操作语言。SPQR是一个起源于使GraphQL工作更加无缝的库之一。</p>
<p>在本教程中，我们将学习GraphQL SPQR的基础知识，并在简单的Spring Boot项目中看到它的实际应用。</p>
<h2>2. 什么是GraphQL SPQR？</h2>
<p>GraphQL是由Facebook创建的著名查询语言。它的核心是模式——在这些文件中我们定义自定义类型和函数。</p>
<p>在传统方法中，如果我们想在我们的项目中添加GraphQL，我们需要遵循两个步骤。首先，我们需要向项目中添加GraphQL模式文件。其次，我们需要编写相应的Java POJO，代表模式中的每种类型。<strong>这意味着我们将在两个地方维护相同的信息：在模式文件和Java类中。</strong> 这种方法容易出错，需要更多的项目维护工作。</p>`,r:{minutes:4.26,words:1279},t:"使用GraphQL SPQR和Spring Boot入门",y:"a"}}],["/posts/baeldung/2024-07-20/2024-07-20-Guide%20to%20Upsert%20in%20MongoDB.html",{loader:()=>a(()=>import("./2024-07-20-Guide to Upsert in MongoDB.html-B-FqiKrn.js"),__vite__mapDeps([1137,1])),meta:{d:17214336e5,l:"2024年7月20日",c:["MongoDB","Upsert"],g:["MongoDB","Upsert","Java","数据库"],e:`<hr>
<h1>MongoDB中的Upsert操作指南</h1>
<ol>
<li>概述</li>
</ol>
<p><strong>Upsert是插入(insert)和更新(update)的结合体（inSERT + UPdate = upsert）。</strong> 我们可以在不同的更新方法中使用_upsert_，例如_update_、<em>findAndModify_和_replaceOne</em>。</p>
<p>在MongoDB中，<em>upsert_选项是一个布尔值。假设值为_true</em>，并且文档与指定的查询过滤器匹配。在这种情况下，应用的更新操作将更新文档。如果值为_true_并且没有文档匹配条件，此选项将向集合中插入一个新文档。新文档将包含基于过滤器和应用操作的字段。</p>`,r:{minutes:4.21,words:1262},t:"MongoDB中的Upsert操作指南",y:"a"}}],["/posts/baeldung/2024-07-20/2024-07-20-How%20Does%20the%20Spring%20Singleton%20Bean%20Serve%20Concurrent%20Requests%20.html",{loader:()=>a(()=>import("./2024-07-20-How Does the Spring Singleton Bean Serve Concurrent Requests .html-BYeMtsJ0.js"),__vite__mapDeps([1138,1])),meta:{d:16509312e5,l:"2022年4月26日",c:["Spring Framework","Concurrency"],g:["Spring Singleton","Concurrency"],e:`
<p>在本教程中，我们将学习Spring使用_singleton_作用域创建的Bean是如何在后台处理多个并发请求的。此外，我们将了解Java如何在内存中存储Bean实例以及如何处理对它们的并发访问。</p>
<h2>2. Spring Bean和Java堆内存</h2>
<p>正如我们所知，Java堆是一个全局共享的内存，应用程序内所有运行的线程都可以访问。**当Spring容器使用单例作用域创建一个Bean时，该Bean存储在堆中。**这样，所有并发线程都能够指向同一个Bean实例。</p>
<p>接下来，让我们理解线程的栈内存是什么以及它如何帮助服务并发请求。</p>
<h2>3. 如何服务并发请求？</h2>`,r:{minutes:3.43,words:1029},t:"Spring单例Bean如何处理并发请求？",y:"a"}}],["/posts/baeldung/2024-07-20/2024-07-20-Import%20Data%20to%20MongoDB%20From%20JSON%20File%20Using%20Java.html",{loader:()=>a(()=>import("./2024-07-20-Import Data to MongoDB From JSON File Using Java.html-zXX2wTw0.js"),__vite__mapDeps([1139,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","MongoDB"],g:["Spring Boot","JSON","数据导入"],e:`
<h2>1. 引言</h2>
<p>在本教程中，我们将学习如何从文件中读取JSON数据并使用Spring Boot将它们导入MongoDB。**这在许多情况下都非常有用：恢复数据、批量插入新数据或插入默认值。**MongoDB内部使用JSON来构建其文档结构，因此很自然地，我们将使用JSON来存储可导入的文件。作为纯文本，这种策略还具有易于压缩的优势。</p>
<p>此外，我们将学习在必要时如何验证输入文件与我们的自定义类型是否匹配。<strong>最后，我们将公开一个API，以便我们可以在web应用程序运行时使用它。</strong></p>
<h2>2. 依赖项</h2>
<p>让我们将这些Spring Boot依赖项添加到我们的_pom.xml_中：</p>`,r:{minutes:6.28,words:1884},t:"将JSON文件数据导入MongoDB的Java实现 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-20/2024-07-20-Introduction%20to%20Jakarta%20EE%20MVC%20%20%20Eclipse%20Krazo.html",{loader:()=>a(()=>import("./2024-07-20-Introduction to Jakarta EE MVC   Eclipse Krazo.html-2UAH-3sb.js"),__vite__mapDeps([1140,1])),meta:{d:172152e7,l:"2024年7月21日",c:["Java","Web开发"],g:["Jakarta EE MVC","Eclipse Krazo"],e:`
<p>模型-视图-控制器（MVC）是一种流行的设计模式，用于构建Web应用程序。多年来，它已成为构建现代基于Web的应用程序的事实上的设计原则。</p>
<p>在本教程中，我们将学习如何使用Jakarta EE MVC 2.0构建带有网页和REST API的Web应用程序。</p>
<h2>2. JSR-371</h2>
<p><strong>Jakarta MVC 2.0（前称JSR 371 MVC 1.0）是基于Jakarta RESTful Web Services或JAX-RS（前称Java API for RESTful web services）的基于动作的Web框架。</strong> JSR-371通过额外的注解补充了JAX-RS，使构建Web应用程序更加方便。</p>`,r:{minutes:7.44,words:2232},t:"Jakarta EE MVC / Eclipse Krazo 简介",y:"a"}}],["/posts/baeldung/2024-07-20/2024-07-20-Iterate%20Through%20a%20List%20and%20Add%20Items%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-20-Iterate Through a List and Add Items in Kotlin.html-Cn0rSy7T.js"),__vite__mapDeps([1141,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin","编程"],g:["Kotlin","列表","迭代","动态添加"],e:`
<p>当我们使用Kotlin工作时，处理集合是一个常见且基本的任务。作为基本的集合类型，列表经常要求我们迭代其元素并在迭代过程中动态添加新项。</p>
<p>在本文中，我们将介绍在Kotlin中迭代列表的同时高效添加项的过程。</p>
<h2>2. 问题介绍</h2>
<p>像往常一样，我们通过一个例子来理解问题。假设我们有一个字符串列表：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>["ab", "a", "cd", "c", "xyz"]
</code></pre></div>`,r:{minutes:4.9,words:1469},t:"Kotlin中迭代列表并动态添加项",y:"a"}}],["/posts/baeldung/2024-07-20/2024-07-20-Java%20Error%20%20bad%20operand%20types%20for%20binary%20operator%20.html",{loader:()=>a(()=>import("./2024-07-20-Java Error  bad operand types for binary operator .html-Cz1BYl3e.js"),__vite__mapDeps([1142,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Programming"],g:["Java","Bitwise Operators","Operator Precedence"],e:`<hr>
<h1>Java 位运算符类型不匹配问题解析</h1>
<h2>1. 概述</h2>
<p>Java 提供了一组位运算符。这些运算符允许我们方便地操作数字的单个位。</p>
<p>然而，当我们比较位运算的结果时，可能会遇到一个常见的陷阱。</p>
<p>在这个快速教程中，我们将讨论为什么我们可能会遇到 Java 编译时错误 “bad operand types for binary operator”（二元运算符的运算数类型不匹配），以及如何解决这个问题。</p>
<h2>2. 问题介绍</h2>
<p>像往常一样，我们将通过一个示例来理解这个问题。但首先，让我们看看一个简单的方法：</p>`,r:{minutes:3.63,words:1089},t:"Java 位运算符类型不匹配问题解析",y:"a"}}],["/posts/baeldung/2024-07-20/2024-07-20-Java%20Error%20%20variable%20might%20not%20have%20been%20initialized%20.html",{loader:()=>a(()=>import("./2024-07-20-Java Error  variable might not have been initialized .html-B_j9dG6A.js"),__vite__mapDeps([1143,1])),meta:{d:16490304e5,l:"2022年4月4日",c:["Java","Error Handling"],g:["Java Error","Uninitialized Variable"],e:`<hr>
<h1>Java错误：“变量可能未被初始化” | Baeldung</h1>
<h2>1. 概述</h2>
<p>在本教程中，我们将专注于Java程序中的“变量可能未被初始化”错误。<strong>当声明一个变量而没有初始化时，就会发生此错误</strong>。我们将通过一个例子讨论这个错误，并提供一些解决方案。</p>
<p>如果我们声明了一个没有初始值的局部变量，就会得到一个错误。<strong>这个错误仅适用于局部变量，因为Java在编译时会自动初始化实例变量（它为整数设置0，布尔值设置false等</strong>）。然而，局部变量需要一个默认值，因为Java编译器不允许使用未初始化的变量。</p>`,r:{minutes:1.69,words:508},t:"Java错误：“变量可能未被初始化” | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-20/2024-07-20-Java%20Operators.html",{loader:()=>a(()=>import("./2024-07-20-Java Operators.html-DTyryjJ1.js"),__vite__mapDeps([1144,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Operators"],g:["Java Operators","Tutorial"],e:`
<h2>1. 概述</h2>
<p>运算符是任何编程语言的基本构建块。我们使用运算符对值和变量执行操作。</p>
<p>Java提供了许多组运算符。它们根据功能进行分类。</p>
<p>在本教程中，我们将遍历所有Java运算符，以理解它们的功能以及如何使用它们。</p>
<h2>2. 算术运算符</h2>
<p>我们使用算术运算符执行简单的数学运算。我们应该注意，算术运算符仅适用于原始数字类型及其包装类型，例如int和Integer。</p>
<p>接下来，让我们看看算术运算符组中的运算符。</p>
<h3>2.1. 加法运算符</h3>
<p>加法运算符(+)允许我们添加两个值或连接两个字符串：</p>`,r:{minutes:8.81,words:2644},t:"Java运算符 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-20/2024-07-20-Logging%20MongoDB%20Queries%20with%20Spring%20Boot.html",{loader:()=>a(()=>import("./2024-07-20-Logging MongoDB Queries with Spring Boot.html-_bo7RtBR.js"),__vite__mapDeps([1145,1])),meta:{d:16477344e5,l:"2022年3月20日",c:["Spring Boot","MongoDB"],g:["Logging","Debugging"],e:`<hr>
<h1>使用Spring Boot记录MongoDB查询</h1>
<h2>1. 概述</h2>
<p>在使用Spring Data MongoDB时，我们可能需要将日志级别提高到默认级别以上。通常，我们可能需要查看例如语句执行或查询参数等额外信息。</p>
<p>在这个简短的教程中，我们将看到如何修改MongoDB查询的日志级别。</p>
<h2>2. 配置MongoDB查询日志</h2>
<p>MongoDB支持提供了_MongoOperations_接口或其主要的_MongoTemplate_实现来访问数据，因此我们所需要做的就是为_MongoTemplate_类配置一个调试级别。</p>`,r:{minutes:3.7,words:1110},t:"使用Spring Boot记录MongoDB查询",y:"a"}}],["/posts/baeldung/2024-07-20/2024-07-20-Pretty%20Print%20XML%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-20-Pretty Print XML in Java.html-BDkQN0sc.js"),__vite__mapDeps([1146,1])),meta:{d:172152e7,l:"2024年7月21日",c:["Java","XML"],g:["Pretty-Print","XML","Java"],e:`<hr>
<h1>Java中美化打印XML</h1>
<p>当我们需要手动读取XML文件时，通常我们希望以美化打印的格式来阅读内容。许多文本编辑器或IDE可以重新格式化XML文档。如果我们在Linux环境下工作，我们可以从命令行美化打印XML文件。</p>
<p>然而，有时我们有需求在我们的Java程序中将原始的XML字符串转换为美化打印的格式。例如，我们可能希望在用户界面显示一个美化打印的XML文档，以便更好地视觉理解。</p>
<p>在本教程中，我们将探讨如何在Java中美化打印XML。</p>
<h2>2. 问题介绍</h2>
<p>为了简单起见，我们将以一个未格式化的_emails.xml_文件作为输入：</p>`,r:{minutes:7.41,words:2223},t:"Java中美化打印XML",y:"a"}}],["/posts/baeldung/2024-07-20/2024-07-20-Push%20Operations%20in%20MongoDB.html",{loader:()=>a(()=>import("./2024-07-20-Push Operations in MongoDB.html-CUsFo8WD.js"),__vite__mapDeps([1147,1])),meta:{d:172152e7,l:"2024年7月21日",c:["MongoDB","数据库"],g:["MongoDB","数据库操作"],e:`
<p>在本教程中，我们将介绍如何在MongoDB中向数组中插入文档。此外，我们还将看到使用_$push和_$addToset_操作符将值添加到数组中的各种应用。</p>
<p>首先，我们将创建一个示例数据库、一个集合，并将虚拟数据插入其中。接下来，我们将看一些基本示例，使用_$push_操作符更新文档。之后，我们还将讨论_$push_和_$addtoSet_操作符的各种用例。</p>
<p>让我们深入探讨在MongoDB中将文档插入数组的多种方法。</p>
<h3>2. 数据库初始化</h3>
<p>首先，让我们设置一个新的数据库_baeldung_和一个示例集合_orders_：</p>
`,r:{minutes:4.89,words:1468},t:"MongoDB中的Push操作 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-20/2024-07-20-Push%20and%20Set%20Operations%20in%20Same%20MongoDB%20Update.html",{loader:()=>a(()=>import("./2024-07-20-Push and Set Operations in Same MongoDB Update.html-q3BB8fBD.js"),__vite__mapDeps([1148,1])),meta:{d:172152e7,l:"2024年7月21日",c:["MongoDB","Java"],g:["MongoDB","Java","Update","$push","$set"],e:`<hr>
<h1>MongoDB中同一更新操作中的Push和Set操作</h1>
<h2>1. 概述</h2>
<p><em>$push</em> 是 MongoDB 中的一个更新操作符，用于在数组中添加值。相比之下，<em>$set</em> 操作符用于更新文档中现有字段的值。</p>
<p>在这个简短的教程中，我们将介绍如何在单个更新查询中同时执行 <em>$push</em> 和 <em>$set</em> 操作。</p>
<h2>2. 数据库初始化</h2>
<p>在我们开始执行多个更新操作之前，我们首先需要设置一个数据库 <em>baeldung</em> 和示例集合 <em>marks</em>：</p>`,r:{minutes:3.36,words:1008},t:"MongoDB中同一更新操作中的Push和Set操作",y:"a"}}],["/posts/baeldung/2024-07-20/2024-07-20-Read%20User%20Input%20Until%20a%20Condition%20Is%20Met.html",{loader:()=>a(()=>import("./2024-07-20-Read User Input Until a Condition Is Met.html-D2Pg-GqH.js"),__vite__mapDeps([1149,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","编程"],g:["Java","用户输入","输入处理"],e:`
<p>当我们编写Java应用程序以接受用户输入时，可能有两种变体：单行输入和多行输入。在单行输入的情况下，处理起来相当直接。我们读取输入直到看到行结束。然而，我们需要以不同的方式管理多行用户输入。</p>
<p>在本教程中，我们将讨论如何在Java中处理多行用户输入。</p>
<h2>2. 解决问题的思路</h2>
<p>在Java中，我们可以使用_Scanner_类从用户输入中读取数据。因此，从用户输入中读取数据对我们来说并不是一个挑战。但是，如果我们允许用户输入多行数据，我们应该知道何时用户已经给出了我们应该接受的所有数据。换句话说，我们需要一个事件来知道何时我们应该停止从用户输入中读取。</p>`,r:{minutes:4.83,words:1450},t:"Java中读取用户输入直到满足条件",y:"a"}}],["/posts/baeldung/2024-07-20/2024-07-20-Retrieve%20a%20Value%20from%20MongoDB%20by%20Its%20Key%20Name.html",{loader:()=>a(()=>import("./2024-07-20-Retrieve a Value from MongoDB by Its Key Name.html-D8ITnoj0.js"),__vite__mapDeps([1150,1])),meta:{d:17214336e5,l:"2024年7月20日",c:["MongoDB","数据库"],g:["MongoDB","数据检索"],e:`
<p>在本教程中，我们将学习如何在MongoDB中通过键名检索值。我们将探索MongoDB的各种方法，根据应用的过滤器获取文档的键字段名称。首先，我们将使用_find_或_findone_方法来获取所需的数据，然后使用_aggregation_方法。这里，我们将在MongoDB shell查询和Java驱动程序代码中编写查询。</p>
<p>让我们看看在MongoDB中通过字段名称检索值的不同方法。</p>
<h2>2. 数据库初始化</h2>
<p>首先，我们需要设置一个新的数据库_baeldung_和一个新集合，<em>travel</em>：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>use baeldung<span class="token punctuation">;</span>
db.createCollection<span class="token punctuation">(</span>travel<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:4.14,words:1243},t:"MongoDB中通过键名检索值",y:"a"}}],["/posts/baeldung/2024-07-20/2024-07-20-SSO%20with%20Apache%20Tomcat.html",{loader:()=>a(()=>import("./2024-07-20-SSO with Apache Tomcat.html-DdVSuA3k.js"),__vite__mapDeps([1151,1])),meta:{d:16460928e5,l:"2022年3月1日",c:["Apache Tomcat","SSO"],g:["Single Sign-On","Tomcat Configuration"],e:`<hr>
<h1>Apache Tomcat 单点登录</h1>
<h2>1. 概述</h2>
<p>在本文中，我们将学习 Tomcat 服务器的基础知识，它是如何工作的，以及如何启用 Tomcat 的单点登录（SSO）功能。我们将探索 Tomcat 服务器和 Web 应用程序所需的配置。</p>
<h2>2. Tomcat 架构</h2>
<p>组成 Catalina servlet 容器的主要部分是包含定义连接器的服务的服务器，以及由主机构成的引擎，最终这些主机将包含上下文或 Web 应用程序。</p>
<p>连接器监听客户端的请求并发送响应。在 Tomcat 10 中，我们可以找到以下协议的连接器：HTTP/1.1、HTTP/2 和 AJP。</p>`,r:{minutes:8.42,words:2527},t:"Apache Tomcat 单点登录",y:"a"}}],["/posts/baeldung/2024-07-20/2024-07-20-Send%20a%20SOAP%20Object%20with%20Feign%20Client.html",{loader:()=>a(()=>import("./2024-07-20-Send a SOAP Object with Feign Client.html-C1p0Eafv.js"),__vite__mapDeps([1152,1])),meta:{d:16460928e5,l:"2022年3月1日",c:["Java","Web Services"],g:["Feign","SOAP"],e:`<hr>
<h1>使用Feign客户端发送SOAP对象</h1>
<p>Feign抽象了HTTP调用，并使其声明式化。通过这样做，Feign隐藏了底层细节，如HTTP连接管理、硬编码的URL和其他样板代码。使用Feign客户端的一个显著优势是使HTTP调用变得简单，并消除了大量的代码。通常，我们使用Feign来处理REST API的_application/json_媒体类型。然而，Feign客户端也可以很好地处理其他媒体类型，如_text/xml_、多部分请求等。</p>
<p>在本教程中，我们将学习如何使用Feign调用基于SOAP的Web服务（<em>text/xml</em>）。</p>`,r:{minutes:5.82,words:1745},t:"使用Feign客户端发送SOAP对象",y:"a"}}],["/posts/baeldung/2024-07-20/2024-07-20-Set%20List%20of%20Objects%20in%20Swagger%20API%20Response.html",{loader:()=>a(()=>import("./2024-07-20-Set List of Objects in Swagger API Response.html-DX88t5qX.js"),__vite__mapDeps([1153,1])),meta:{d:16460928e5,l:"2022年3月1日",c:["Java","Spring Boot"],g:["Swagger","API"],e:`<hr>
<h1>使用Swagger设置API响应中的对象列表</h1>
<p>在本教程中，我们将学习如何修改Swagger API响应。首先，我们将从OpenAPI规范和Swagger API响应的一些解释开始。然后，我们将使用Spring Boot实现一个简单的例子，使用OpenApi 3.0来记录Spring REST API。之后，我们将使用Swagger的注解来设置响应体，以提供对象列表。</p>
<h3>2.1. 使用Swagger UI设置Spring Boot项目</h3>
<p>首先，我们将创建一个_ProductService_类，其中保存了产品列表。接下来，在_ProductController_中，我们定义REST API，让用户获取创建的产品列表。</p>`,r:{minutes:1.85,words:555},t:"使用Swagger设置API响应中的对象列表",y:"a"}}],["/posts/baeldung/2024-07-20/2024-07-20-Sorting%20a%20String%20Alphabetically%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-20-Sorting a String Alphabetically in Kotlin.html-BASYg8aF.js"),__vite__mapDeps([1154,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin","编程"],g:["字符串排序","Kotlin"],e:`
<h2>1. 概述</h2>
<p>在软件开发中，按字母顺序对字符串进行排序通常非常重要，尤其是在搜索和展示数据时。</p>
<p>在本教程中，我们将讨论在Kotlin中按不同场景和复杂度对字符串进行字母排序的一些方法。</p>
<h2>2. 使用toCharArray()和sorted()</h2>
<p>第一种排序字符串的方法是最简单的，因为我们将使用Kotlin内置的函数。我们将把字符串转换为字符数组进行排序，然后再将结果转换回字符串：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>private fun sortStringWithCharArrayAndSorted(input: String): String {
    return input.toCharArray().sorted().joinToString("")
}
</code></pre></div>`,r:{minutes:3.41,words:1022},t:"Kotlin中按字母顺序对字符串排序 | Baeldung关于Kotlin的教程",y:"a"}}],["/posts/baeldung/2024-07-20/2024-07-20-Subtract%20Days%20from%20a%20Date%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-20-Subtract Days from a Date in Java.html-BcwAVJjB.js"),__vite__mapDeps([1155,1])),meta:{d:16504128e5,l:"2022年4月20日",c:["Java","日期处理"],g:["Java 8","Joda-Time","日期减法"],e:`<hr>
<h1>在Java中从日期中减去天数</h1>
<h2>1. 概述</h2>
<p>在本教程中，我们将探索在Java中从日期对象中减去天数的各种方法。</p>
<p>我们将从Java 8引入的日期时间API开始。之后，我们将学习如何使用_java.util_包中的类来实现这一点，最后我们将借助Joda-Time库来完成同样的任务。</p>
<h2>2. <em>java.time.LocalDateTime</em></h2>
<p><strong>Java 8引入的日期/时间API是目前进行日期和时间计算的最可行选项。</strong></p>
<p>让我们看看如何从Java 8_java.util.LocalDateTime_对象中减去天数：</p>`,r:{minutes:2.01,words:603},t:"在Java中从日期中减去天数",y:"a"}}],["/posts/baeldung/2024-07-20/2024-07-20-The%20for%20each%20Loop%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-20-The for each Loop in Java.html-CGTaCt_n.js"),__vite__mapDeps([1156,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","控制结构"],g:["for-each循环","Java 5","增强for循环"],e:`<hr>
<h1>Java 中的 for-each 循环</h1>
<p>在本教程中，我们将讨论 Java 中的 for-each 循环，包括其语法、工作原理和代码示例。最后，我们将理解它的优点和缺点。</p>
<h2>2. 简单的 for 循环</h2>
<p><strong>Java 中的简单 for 循环基本上有三个部分——初始化、布尔条件和步骤：</strong></p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>for (initialization; boolean-condition; step) {
    statement;
}
</code></pre></div>`,r:{minutes:3.43,words:1028},t:"Java 中的 for-each 循环",y:"a"}}],["/posts/baeldung/2024-07-20/2024-07-20-Underscore%20Operator%20for%20Type%20Arguments%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-20-Underscore Operator for Type Arguments in Kotlin.html-6sFaOLsW.js"),__vite__mapDeps([1157,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin","Programming"],g:["Kotlin","Type Inference","Underscore Operator"],e:`<hr>
<h1>Kotlin中类型参数的下划线操作符</h1>
<h2>1. 引言</h2>
<p>Kotlin的下划线操作符是该语言的一个独特工具，它有几种不同的用途。传统用法主要集中在lambda中的未使用变量或变量解构上。然而，<strong>我们应该注意的是 Kotlin 1.7 中的一个新特性，即类型参数的下划线操作符</strong>。具体来说，现在下划线操作符可以触发泛型类型的自动类型推断。</p>
<p>在本教程中，我们将深入探讨Kotlin中用于类型推断的下划线操作符，并探索它如何简化我们的代码并使其更易于阅读。</p>
<p>类型参数指定泛型类型或函数的实际类型。泛型提供了一种创建可以在不牺牲类型安全性的情况下操作不同类型数据的类、接口和函数的方法。</p>`,r:{minutes:7.37,words:2210},t:"Kotlin中类型参数的下划线操作符",y:"a"}}],["/posts/baeldung/2024-07-20/2024-07-20-Using%20Nginx%20as%20a%20Forward%20Proxy.html",{loader:()=>a(()=>import("./2024-07-20-Using Nginx as a Forward Proxy.html-cTskm6dG.js"),__vite__mapDeps([1158,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Nginx","代理服务器"],g:["Nginx","正向代理","教程"],e:`
<h2><strong>1.</strong> 引言</h2>
<p>当谈到 Nginx，它是目前最受欢迎的服务器之一。它快速、轻量级，并且负责托管一些互联网上最大的网站。Nginx 通常被用作负载均衡器、反向代理和 HTTP 缓存等。</p>
<p><strong>本教程将重点介绍如何将其用作请求位置的正向代理。</strong></p>
<h2><strong>2.</strong> 使用正向代理的动机</h2>
<p>代理服务器是作为客户端和请求资源的主机之间的中间人实体。这意味着流量需要通过额外的机器才能到达目的地（主机服务器）。代理代表客户端继续请求，所以当主机服务器接受请求时，他们只能看到代理的 IP。相比之下，反向代理直接位于网络前面，将来自客户端的请求路由到正确的 Web 服务器（在多个服务器的网络中）。</p>`,r:{minutes:8.07,words:2421},t:"Nginx 作为正向代理的配置和使用教程",y:"a"}}],["/posts/baeldung/2024-07-21/2024-07-21-Building%20a%20Web%20App%20Using%20Fauna%20and%20Spring%20for%20Your%20First%20Web%20Agency%20Client.html",{loader:()=>a(()=>import("./2024-07-21-Building a Web App Using Fauna and Spring for Your First Web Agency Client.html-D5t6yr3X.js"),__vite__mapDeps([1159,1])),meta:{d:16475616e5,l:"2022年3月18日",c:["Spring","FaunaDB"],g:["Spring","FaunaDB","Java"],e:`<hr>
<h1>1. 引言</h1>
<p>在本文中，我们将使用 Spring 和 Java 17 构建一个由 Fauna 数据库服务驱动的博客服务的后端。</p>
<h1>2. 项目设置</h1>
<p>在我们开始构建服务之前，我们需要执行一些初始设置步骤——具体来说，我们需要创建一个 Fauna 数据库和一个空白的 Spring 应用程序。</p>
<h3>2.1. 创建 Fauna 数据库</h3>
<p><strong>在开始之前，我们需要一个 Fauna 数据库来使用。</strong> 如果我们还没有一个，我们需要在 Fauna 创建一个新账户。</p>
<p>完成这些后，我们可以创建一个新的数据库。给这个数据库起一个名字和一个地区，并选择不包括演示数据，因为我们想构建我们自己的模式：</p>`,r:{minutes:10.04,words:3012},t:"1. 引言",y:"a"}}],["/posts/baeldung/2024-07-21/2024-07-21-Check%20Collection%20Existence%20in%20MongoDB.html",{loader:()=>a(()=>import("./2024-07-21-Check Collection Existence in MongoDB.html-D5t2ZGSP.js"),__vite__mapDeps([1160,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","MongoDB"],g:["MongoDB","Java"],e:`
<p>MongoDB 是一种 NoSQL 数据库，它将数据记录以 BSON 文档的形式存储到集合中。我们可以拥有多个数据库，每个数据库可以有一个或多个文档集合。</p>
<p>与关系型数据库不同，MongoDB 在插入文档时会自动创建集合，无需任何结构定义。在本教程中，我们将学习检查集合存在性的多种方法。我们将使用 collectionExists、createCollection、listCollectionNames 和 count 方法来检查集合是否存在。</p>
<h3>2.1. 使用 <em>MongoClient</em> 创建连接</h3>
<p><em>MongoClient</em> 是一个 Java 类，用于与 MongoDB 实例建立连接：</p>`,r:{minutes:3.71,words:1112},t:"MongoDB中检查集合存在性的多种方法",y:"a"}}],["/posts/baeldung/2024-07-21/2024-07-21-Check%20if%20a%20User%20Is%20Logged%20in%20With%20Servlets%20and%20JSP.html",{loader:()=>a(()=>import("./2024-07-21-Check if a User Is Logged in With Servlets and JSP.html-Dua8_GKk.js"),__vite__mapDeps([1161,1])),meta:{d:16436736e5,l:"2022年2月1日",c:["Servlets","JSP"],g:["Java","Login","Security"],e:`
<p>在本教程中，我们将学习如何检查用户的登录情况，并确保用户使用有效的凭据填写了登录表单并启动了会话。**然而，我们将不使用Spring Security，只使用JSP和servlets。**因此，我们需要一个能够支持它的servlet容器，比如Tomcat 9。</p>
<p>通过本教程，我们将对底层工作机制有一个良好的理解。</p>
<h2>2. 持久化策略</h2>
<p>首先，我们需要用户。为了简单起见，我们将使用预加载的映射。让我们定义它以及我们的_User_：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token class-name">HashMap</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">&gt;</span></span>\` <span class="token constant">DB</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token constant">DB</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"pass"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>

    <span class="token comment">// getters and setters</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:3.64,words:1091},t:"使用Servlets和JSP检查用户是否登录",y:"a"}}],["/posts/baeldung/2024-07-21/2024-07-21-Configure%20and%20Use%20Multiple%20DataSources%20in%20Spring%20Boot.html",{loader:()=>a(()=>import("./2024-07-21-Configure and Use Multiple DataSources in Spring Boot.html-Cson38NU.js"),__vite__mapDeps([1162,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Boot","数据源"],g:["Spring Boot","多数据源","数据库配置"],e:`<hr>
<h1>Spring Boot中配置和使用多个数据源</h1>
<h2>1. 概述</h2>
<p>Spring Boot应用程序的典型场景是将数据存储在单个关系型数据库中。但有时我们需要访问多个数据库。</p>
<p>在本教程中，我们将学习如何在Spring Boot中配置和使用多个数据源。</p>
<p>要了解如何处理单个数据源，请查看我们对Spring Data JPA的介绍。</p>
<h2>2. 默认行为</h2>
<p>让我们回顾一下在Spring Boot中声明数据源在_application.yml_中的样子：</p>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> <span class="token punctuation">...</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> <span class="token punctuation">...</span>
    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token punctuation">...</span>
    <span class="token key atrule">driverClassname</span><span class="token punctuation">:</span> <span class="token punctuation">...</span>
</code></pre></div>`,r:{minutes:2.98,words:895},t:"Spring Boot中配置和使用多个数据源",y:"a"}}],["/posts/baeldung/2024-07-21/2024-07-21-Connecting%20to%20a%20NoSQL%20Database%20with%20Spring%20Boot.html",{loader:()=>a(()=>import("./2024-07-21-Connecting to a NoSQL Database with Spring Boot.html-C0dYAGSU.js"),__vite__mapDeps([1163,1])),meta:{d:172152e7,l:"2024年7月21日",c:["Spring Boot","NoSQL"],g:["Spring Boot","NoSQL","Cassandra","DataStax"],e:`
<p>在本教程中，我们将学习如何使用Spring Boot连接到NoSQL数据库。我们的文章重点是使用DataStax Astra DB，这是一个由Apache Cassandra驱动的DBaaS（数据库即服务），允许我们使用云原生服务开发和部署数据驱动的应用程序。</p>
<p>首先，我们将从设置和配置我们的应用程序与Astra DB开始。然后，我们将学习如何构建一个简单的Spring Boot应用程序。</p>
<h3>2. 依赖项</h3>
<p>让我们从向我们的_pom.xml_添加依赖项开始。当然，我们需要_spring-boot-starter-data-cassandra_依赖项：</p>`,r:{minutes:6.61,words:1982},t:"使用Spring Boot连接到NoSQL数据库",y:"a"}}],["/posts/baeldung/2024-07-21/2024-07-21-Convert%20Between%20Byte%20Array%20and%20UUID%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-21-Convert Between Byte Array and UUID in Java.html-BM3OoycD.js"),__vite__mapDeps([1164,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","UUID"],g:["Java","UUID","Byte Array"],e:`<hr>
<h1>Java中在字节数组和UUID之间转换</h1>
<h2>1. 概述</h2>
<p>在这篇简短的教程中，我们将看到如何在Java中<strong>在字节数组和_UUID_之间进行转换</strong>。</p>
<p>我们可以很容易地使用纯Java将_UUID_转换为字节数组：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">convertUUIDToBytes</span><span class="token punctuation">(</span><span class="token class-name">UUID</span> uuid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ByteBuffer</span> bb <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    bb<span class="token punctuation">.</span><span class="token function">putLong</span><span class="token punctuation">(</span>uuid<span class="token punctuation">.</span><span class="token function">getMostSignificantBits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    bb<span class="token punctuation">.</span><span class="token function">putLong</span><span class="token punctuation">(</span>uuid<span class="token punctuation">.</span><span class="token function">getLeastSignificantBits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> bb<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:.99,words:297},t:"Java中在字节数组和UUID之间转换",y:"a"}}],["/posts/baeldung/2024-07-21/2024-07-21-Create%20a%20Simple%20%20Rock%20Paper%20Scissors%20%20Game%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-21-Create a Simple  Rock Paper Scissors  Game in Java.html-CX7agiUQ.js"),__vite__mapDeps([1165,1])),meta:{d:172152e7,l:"2024年7月21日",c:["Java"],g:["Rock-Paper-Scissors","Game Development"],e:`<hr>
<h1>创建一个简单的“剪刀石头布”游戏（Java）</h1>
<h2>1. 概述</h2>
<p>在这个简短的教程中，我们将看到如何在Java中创建一个简单的“剪刀石头布”游戏。</p>
<p>我们的游戏将允许玩家输入“石头”，“纸”或“剪刀”作为每一步的值。</p>
<p>首先，让我们为这些步骤创建一个枚举：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">enum</span> <span class="token class-name">Move</span> <span class="token punctuation">{</span>
    <span class="token function">ROCK</span><span class="token punctuation">(</span><span class="token string">"rock"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">PAPER</span><span class="token punctuation">(</span><span class="token string">"paper"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">SCISSORS</span><span class="token punctuation">(</span><span class="token string">"scissors"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> value<span class="token punctuation">;</span>

    <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.76,words:529},t:"创建一个简单的“剪刀石头布”游戏（Java）",y:"a"}}],["/posts/baeldung/2024-07-21/2024-07-21-Create%20an%20Empty%20Map%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-21-Create an Empty Map in Java.html-C5AU6jkU.js"),__vite__mapDeps([1166,1])),meta:{d:1721576274e3,e:`<hr>
<h1>网站需要验证您是人类。这可能需要几秒钟。</h1>
<p>链接：https://www.baeldung.com/java-create-empty-map</p>
<ol>
<li>注意类别和标签以及标题需要在页面文章信息中实时获取并翻译；</li>
<li>日期是页面的“最后更新”的值，不是当前时间；</li>
<li>内容在输出标题后，标题也需要翻译</li>
<li>要求输出结果要有以上格式</li>
</ol>
`,r:{minutes:.4,words:119},t:"网站需要验证您是人类。这可能需要几秒钟。",y:"a"}}],["/posts/baeldung/2024-07-21/2024-07-21-Customizing%20Zuul%20Exceptions.html",{loader:()=>a(()=>import("./2024-07-21-Customizing Zuul Exceptions.html-BlW5FW1t.js"),__vite__mapDeps([1167,1])),meta:{d:16436736e5,l:"2022年2月1日",c:["Spring Cloud","Zuul"],g:["Zuul","异常处理","微服务"],e:`
<p>Zuul是由Netflix开发的基于JVM的路由器和服务器端负载均衡器。Zuul的规则引擎提供了灵活性，允许编写规则和过滤器来增强Spring Cloud微服务架构中的路由。</p>
<p>在本文中，我们将探讨如何通过编写在代码执行期间发生错误时运行的自定义错误过滤器来自定义Zuul中的异常和错误响应。</p>
<p>在Zuul中处理的所有异常都是_ZuulExceptions_。现在，让我们明确一点，<strong><em>ZuulException_不能通过</em>@ControllerAdvice_捕获，也不能通过_@ExceptionHandling_注解方法</strong>。这是因为**_ZuulException_是从错误过滤器中抛出的**。因此，它跳过了后续的过滤器链，并且从未到达错误控制器。下图显示了Zuul中错误处理的层次结构：</p>`,r:{minutes:4.16,words:1249},t:"Zuul异常自定义",y:"a"}}],["/posts/baeldung/2024-07-21/2024-07-21-Difference%20Between%20Map%20and%20HashMap%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-21-Difference Between Map and HashMap in Java.html-BX81uZmR.js"),__vite__mapDeps([1168,1])),meta:{d:16436736e5,l:"2022年2月1日",c:["Java"],g:["Map","HashMap"],e:`
<h2>1. 概述</h2>
<p>**Map和HashMap之间的区别在于，前者是一个接口，而后者是一个实现。**然而，在本文中，我们将更深入地探讨接口的用途。同时，我们将学习如何使用接口使代码更加灵活，以及为什么我们有相同接口的不同实现。</p>
<h2>2. 接口的目的</h2>
<p>接口是一个只定义行为的契约。**实现特定接口的每个类都应该满足这个契约。**为了更好地理解它，我们可以从现实生活中举一个例子。想象一下汽车。每个人脑海中都会有不同的形象。术语“汽车”暗示了某些品质和行为。任何具有这些品质的对象都可以被称为汽车。这就是为什么我们每个人想象的汽车都不同。</p>
<p>接口的工作原理相同。Map是一个抽象，定义了某些品质和行为。只有具有所有这些品质的类才能成为Map。</p>`,r:{minutes:4.46,words:1338},t:"Java中Map与HashMap的区别 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-21/2024-07-21-Document%20Enum%20in%20Swagger.html",{loader:()=>a(()=>import("./2024-07-21-Document Enum in Swagger.html-dGYGL9Gp.js"),__vite__mapDeps([1169,1])),meta:{d:16436736e5,l:"2022年2月1日",c:["Swagger"],g:["API","Documentation"],e:`<hr>
<h1>Swagger中枚举的文档</h1>
<h2>1. 概述</h2>
<p>在本教程中，我们将学习如何使用_swagger-maven-plugin_在Swagger中记录枚举，并在swagger编辑器中验证生成的JSON文档。</p>
<h2>2. Swagger是什么？</h2>
<p>Swagger是一个开源工具，用于定义基于REST的API。在当今世界，大多数组织都在向微服务和API优先方法发展。Swagger在设计和记录API方面非常有用。它还提供了各种工具，如Swagger编辑器、Swagger UI和Swagger CodeGen来协助API开发。</p>
<p><strong>此外，Swagger是_OpenAPI_规范或_OAS_的实现</strong>，它定义了REST API开发的一套标准；因此，它帮助全球组织标准化编写API的过程。</p>`,r:{minutes:4.22,words:1266},t:"Swagger中枚举的文档",y:"a"}}],["/posts/baeldung/2024-07-21/2024-07-21-Does%20GC%20Release%20Back%20Memory%20to%20OS%20.html",{loader:()=>a(()=>import("./2024-07-21-Does GC Release Back Memory to OS .html-R2jGfC8N.js"),__vite__mapDeps([1170,1])),meta:{d:1721535198e3,e:`<p>Java应用程序以其启动缓慢和预热时间长而闻名。OpenJDK的CRaC（在检查点协调恢复）项目可以通过创建应用程序峰值性能的检查点并将JVM实例恢复到该点来帮助改善这些问题。</p>
<p>为了充分利用这一特性，BellSoft提供了高度优化的Java应用程序容器。这些容器打包了Alpaquita Linux（一个为Java和云环境优化的全功能操作系统）和Liberica JDK（基于OpenJDK的开源Java运行时）。</p>
<p>这些即用型映像使我们能够轻松地在Spring Boot应用程序中集成CRaC：</p>
<h3>1. 引言</h3>
<p>垃圾收集器（GC）处理Java中的内存管理。因此，程序员不需要显式地处理内存分配和释放。</p>`,r:{minutes:5.99,words:1796},t:"",y:"a"}}],["/posts/baeldung/2024-07-21/2024-07-21-Enable%20Logging%20for%20Spring%20Security.html",{loader:()=>a(()=>import("./2024-07-21-Enable Logging for Spring Security.html-C0piAHnr.js"),__vite__mapDeps([1171,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Security","Logging"],g:["Spring Security","Logging"],e:`<hr>
<h1>为Spring Security启用日志记录</h1>
<p>如果您正在使用Spring Security（特别是OAuth）实现，一定要看看《Learn Spring Security》课程。</p>
<p><strong>&gt;&gt; 学习Spring</strong>
<strong>安全</strong></p>
<h2>1. 概述</h2>
<p>在使用Spring Security时，我们可能需要记录比默认级别更高的日志。例如，我们可能需要检查用户的角色或如何保护端点。或者我们也可能需要更多关于认证或授权的信息，例如，查看为什么用户无法访问某个端点。</p>
`,r:{minutes:2.53,words:760},t:"为Spring Security启用日志记录",y:"a"}}],["/posts/baeldung/2024-07-21/2024-07-21-Error%20%20%20trustAnchors%20parameter%20must%20be%20non%20empty%20.html",{loader:()=>a(()=>import("./2024-07-21-Error   trustAnchors parameter must be non empty .html-B3KhbED2.js"),__vite__mapDeps([1172,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Security"],g:["TrustAnchors","KeyStore","PKIXParameters"],e:`
<h2>1. 概述</h2>
<p>在本教程中，我们将解释什么是信任锚点。此外，我们将展示Java中_TrustStore_的默认位置和预期的文件格式。最后，我们将阐明出现错误：“<em>java.security.InvalidAlgorithmParameterException</em>: trust anchors parameter must be non-empty”的原因。</p>
<h2>2. 信任锚点定义</h2>
<p>首先让我们解释一下信任锚点是什么。<strong>在密码学系统中，信任锚点定义了信任被假定并派生的根实体</strong>。在像X.509这样的架构中，根证书是信任锚点。此外，根证书保证链中所有其他证书的信任。</p>`,r:{minutes:2.2,words:659},t:'"trustAnchors 参数必须非空"错误解析',y:"a"}}],["/posts/baeldung/2024-07-21/2024-07-21-Gradle%20%20sourceCompatiblity%20vs%20targetCompatibility.html",{loader:()=>a(()=>import("./2024-07-21-Gradle  sourceCompatiblity vs targetCompatibility.html-D5xshUlt.js"),__vite__mapDeps([1173,1])),meta:{d:17216064e5,l:"2024年7月22日",c:["编程","Java"],g:["Gradle","Java版本"],e:`
<h2>1. 概述</h2>
<p>在本文中，我们将探讨 Java 配置中的 <strong><em>sourceCompatibility</em></strong> 和 <strong><em>targetCompatibility</em></strong> 之间的差异以及它们在 Gradle 中的使用方式。</p>
<p>你可以查看我们关于 Gradle 入门的文章来了解更多基础知识。</p>
<h2>2. Java 中的版本处理</h2>
<p>当我们使用 <strong><em>javac</em></strong> 编译 Java 程序时，我们可以提供版本处理的编译选项。有两种可用的选项：</p>`,r:{minutes:3.11,words:934},t:"Gradle: sourceCompatibility 与 targetCompatibility | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-21/2024-07-21-Guide%20to%20ByteBuffer.html",{loader:()=>a(()=>import("./2024-07-21-Guide to ByteBuffer.html-Dn906YkE.js"),__vite__mapDeps([1174,1])),meta:{d:16460928e5,l:"2022年3月1日",c:["Java","NIO"],g:["ByteBuffer","Java NIO"],e:`
<h2>1. 概览</h2>
<p>Buffer 类是 Java NIO 的基础。然而，在这些类中，ByteBuffer 类是最受欢迎。这是因为 byte 类型是最通用的。例如，我们可以使用字节来组成 JVM 中的其他非布尔基本类型。此外，我们还可以使用字节在 JVM 与外部 I/O 设备之间传输数据。</p>
<p>在本教程中，我们将检查 ByteBuffer 类的不同方面。</p>
<h2>2. ByteBuffer 创建</h2>
<p>ByteBuffer 是一个抽象类，所以我们不能直接构造一个新的实例。但是，它提供了静态工厂方法来方便实例创建。简单来说，有两种方式可以创建 ByteBuffer 实例，一种是通过分配，另一种是通过包装：</p>`,r:{minutes:12.79,words:3837},t:"Java ByteBuffer 指南",y:"a"}}],["/posts/baeldung/2024-07-21/2024-07-21-Hibernate%20s%20addScalar%20%20%20Method.html",{loader:()=>a(()=>import("./2024-07-21-Hibernate s addScalar   Method.html-CCrXcbn2.js"),__vite__mapDeps([1175,1])),meta:{d:16505856e5,l:"2022年4月22日",c:["Hibernate","JPA"],g:["Hibernate","JPA","addScalar"],e:`
<h2>1. 概述</h2>
<p>在本快速教程中，我们将通过一个示例讨论Hibernate中使用的_addScalar()_方法。我们将学习如何使用这个方法以及使用它的好处。</p>
<h2>2. _addScalar()_解决的问题是什么？</h2>
<p>通常，在Hibernate中使用原生SQL查询获取结果时，我们使用_createNativeQuery()_方法，然后是_list()_方法：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>session.createNativeQuery("SELECT * FROM Student student")
  .list();
</code></pre></div>`,r:{minutes:3.52,words:1057},t:"Hibernate中addScalar()方法的使用",y:"a"}}],["/posts/baeldung/2024-07-21/2024-07-21-How%20to%20Calculate%20Standard%20Deviation%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-21-How to Calculate Standard Deviation in Kotlin.html-J5L6BUFj.js"),__vite__mapDeps([1176,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin","编程"],g:["标准差","数学","统计学"],e:`<hr>
<h1>如何在 Kotlin 中计算标准差 | Baeldung 关于 Kotlin</h1>
<h2>1. 引言</h2>
<p>在编程中，计算标准差是一个关键的统计任务，当我们需要确定数据集中的变异量或离散程度时，它非常有用。</p>
<p>在 Kotlin 中，有几种方法可以计算表示为数组的一系列数字的标准差。在本教程中，我们将探讨这些方法中的几种。</p>
<h2>2. 标准差的定义和公式</h2>
<p>正如前面提到的，标准差是衡量数据集中变异量或离散程度的一种方法。<strong>我们可以通过找到所考虑数据的方差的平方根来计算标准差</strong>。方差是每个数据点与所考虑数据的平均值之间的差的平方的平均值。</p>`,r:{minutes:3.78,words:1135},t:"如何在 Kotlin 中计算标准差 | Baeldung 关于 Kotlin",y:"a"}}],["/posts/baeldung/2024-07-21/2024-07-21-How%20to%20Create%20a%20New%20Entry%20in%20a%20Map.html",{loader:()=>a(()=>import("./2024-07-21-How to Create a New Entry in a Map.html-B_hB7O_1.js"),__vite__mapDeps([1177,1])),meta:{d:172152e7,l:"2024年7月21日",c:["Java","Programming"],g:["Java","Map","Entry"],e:`<hr>
<h1>如何在Map中创建一个新的条目</h1>
<p>在本教程中，我们将讨论如何使用Java的内置类、第三方库以及我们自定义的实现来创建一个表示Map中键值关联的_Entry_对象。</p>
<h2>2. 使用Java内置类</h2>
<p>Java提供了_Map_.<em>Entry_接口，并有两个简单的实现来创建一个_Entry</em>。让我们来看一下它们。</p>
<h3>2.1. 使用_AbstractMap_.<em>SimpeEntry</em></h3>
<p>_SimpeEntry_类是_AbstractMap_类中的一个静态嵌套类。它提供了两个不同的构造函数来初始化一个实例：</p>`,r:{minutes:3.72,words:1116},t:"如何在Map中创建一个新的条目",y:"a"}}],["/posts/baeldung/2024-07-21/2024-07-21-How%20to%20Invert%20a%20Map%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-21-How to Invert a Map in Java.html-CdVooMPK.js"),__vite__mapDeps([1178,1])),meta:{d:172152e7,l:"2024年7月21日",c:["Java","编程技巧"],g:["Java","集合","逆向映射"],e:`
<p>在这篇文章中，我们将快速了解如何在Java中反转一个Map。我们的目标是为给定的Map<code>&lt;K, V&gt;</code>类型创建一个新的Map<code>&lt;V, K&gt;</code>实例。此外，我们还将看到如何处理源Map中存在重复值的情况。</p>
<h2>2. 定义问题</h2>
<p>让我们考虑我们有一个包含几个键值对的Map：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Map</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>\` map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"second"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:3.24,words:971},t:"如何在Java中反转Map",y:"a"}}],["/posts/baeldung/2024-07-21/2024-07-21-How%20to%20use%20JNI%20s%20RegisterNatives%20%20%20method%20.html",{loader:()=>a(()=>import("./2024-07-21-How to use JNI s RegisterNatives   method .html-s4CfiLqJ.js"),__vite__mapDeps([1179,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","JNI"],g:["JNI","RegisterNatives"],e:`
<p>在这个简短的教程中，我们将看看JNI的_RegisterNatives()_方法，它用于在Java和C++函数之间创建映射。</p>
<p>首先，我们将解释JNI _RegisterNatives()_是如何工作的。然后，我们将展示它在_java.lang.Object’_s_registerNatives()_方法中的使用。最后，我们将展示如何在我们自己的Java和C++代码中使用这个功能。</p>
<p><strong>JVM有两种方式找到并链接本地方法与Java代码。</strong> 第一种方式是以一种特定的方式调用本地函数，以便JVM可以找到它。另一种方式是<strong>使用JNI _RegisterNatives()_方法</strong>。</p>`,r:{minutes:3.34,words:1001},t:"如何使用JNI的RegisterNatives()方法？",y:"a"}}],["/posts/baeldung/2024-07-21/2024-07-21-HttpMessageNotWritableException%20%20No%20Converter%20for%20%20class%20%20%20%20With%20Preset%20Content%20Type.html",{loader:()=>a(()=>import("./2024-07-21-HttpMessageNotWritableException  No Converter for  class    With Preset Content Type.html-DiFTYWTM.js"),__vite__mapDeps([1180,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring","Exception Handling"],g:["HttpMessageNotWritableException","Spring Boot","MessageConverter"],e:`
<p>在这篇短文中，我们将仔细研究Spring异常 "HttpMessageNotWritableException: no converter for [class …] with preset Content-Type"。</p>
<p>首先，我们将揭示异常背后的主要原因。然后，我们将深入探讨如何使用一个实际示例来重现它，最后是如何解决它。</p>
<h2>2. 原因</h2>
<p>在深入细节之前，让我们尝试理解异常的含义。</p>
<p>异常的堆栈跟踪说明了一切：它告诉我们Spring <strong>找不到合适的</strong> <em>HttpMessageConverter</em> <strong>能够将Java对象转换为HTTP响应</strong>。</p>`,r:{minutes:2.65,words:796},t:"HttpMessageNotWritableException：没有预设内容类型的转换器 [类 …] | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-21/2024-07-21-Introduction%20to%20OAuth2RestTemplate.html",{loader:()=>a(()=>import("./2024-07-21-Introduction to OAuth2RestTemplate.html-DZCnFWu0.js"),__vite__mapDeps([1181,1])),meta:{d:16460928e5,l:"2022年3月1日",c:["Spring Security","OAuth2"],g:["OAuth2","Spring Security","REST API"],e:`<hr>
<h1>Spring OAuth2RestTemplate 使用指南</h1>
<p>在本教程中，我们将学习如何使用 Spring <strong>OAuth2RestTemplate</strong> 来进行 OAuth2 REST 调用。我们将创建一个能够列出 GitHub 账户仓库的 Spring Web 应用程序。</p>
<h2>2. Maven 配置</h2>
<p>首先，我们需要在我们的 <em>pom.xml</em> 文件中添加 spring-boot-starter-security 和 spring-security-oauth2-autoconfigure 依赖项。由于我们正在构建一个 Web 应用程序，我们还需要包括 spring-boot-starter-web 和 spring-boot-starter-thymeleaf 构件。</p>`,r:{minutes:1.7,words:511},t:"Spring OAuth2RestTemplate 使用指南",y:"a"}}],["/posts/baeldung/2024-07-21/2024-07-21-JDBC%20Connection%20Status.html",{loader:()=>a(()=>import("./2024-07-21-JDBC Connection Status.html-BKUDnMu8.js"),__vite__mapDeps([1182,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["JDBC","数据库连接"],g:["JDBC","数据库连接状态"],e:`<hr>
<h1>JDBC连接状态</h1>
<p>在本文中，我们将讨论JDBC连接状态的某些方面。首先，我们将看到连接丢失的最常见原因。然后，我们将学习如何确定连接状态。</p>
<p>我们还将学习在运行SQL语句之前如何验证连接。</p>
<p>Connection类负责与数据源通信。连接可能因各种原因丢失：</p>
<ul>
<li>数据库服务器宕机</li>
<li>网络连接问题</li>
<li>重用已关闭的连接</li>
</ul>
<p>在连接丢失上运行任何数据库操作都将导致SQLException。此外，我们可以检查异常以获取有关问题的细节。</p>
<h3>3. 检查连接</h3>`,r:{minutes:3.4,words:1021},t:"JDBC连接状态",y:"a"}}],["/posts/baeldung/2024-07-21/2024-07-21-Java%20ArrayIndexOutOfBoundsException.html",{loader:()=>a(()=>import("./2024-07-21-Java ArrayIndexOutOfBoundsException.html-DWvh5dYf.js"),__vite__mapDeps([1183,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Exception Handling"],g:["Java","ArrayIndexOutOfBoundsException"],e:`
<p>在本教程中，我们将讨论Java中的_ArrayIndexOutOfBoundsException_。我们将理解它为何发生以及如何避免它。</p>
<h2>何时会发生_ArrayIndexOutOfBoundsException_？</h2>
<p>正如我们所知，在Java中，数组是一个静态数据结构，我们在创建时定义其大小。</p>
<p>我们使用索引来访问数组的元素。数组的索引从零开始，且永远不能大于或等于数组的大小。</p>
<p>简而言之，<strong>经验法则是0 \`&lt;= index &lt; (数组大小)</strong>。</p>
<p><strong>当我们使用无效的索引访问数组或由数组支持的_Collection_时，就会发生_ArrayIndexOutOfBoundsException_</strong>。这意味着索引要么小于零，要么大于或等于数组的大小。</p>`,r:{minutes:4.77,words:1432},t:"Java中的ArrayIndexOutOfBoundsException",y:"a"}}],["/posts/baeldung/2024-07-21/2024-07-21-Java%20Missing%20Return%20Statement.html",{loader:()=>a(()=>import("./2024-07-21-Java Missing Return Statement.html-DCm4KM9C.js"),__vite__mapDeps([1184,1])),meta:{d:172152e7,l:"2024年7月21日",c:["Java","编程"],g:["编译错误","编程技巧"],e:`
<p>在本教程中，我们将探讨Java开发过程中的一个常见错误。通常，初学者会遇到这个问题，即Java应用程序中的缺失返回语句错误。</p>
<p>缺失返回语句错误是一个编译时错误。它在编译阶段抛出。现代IDE会即时检测到这种错误。因此，这种错误通常很容易检测到。</p>
<p>主要原因包括：</p>
<ul>
<li>由于疏忽遗漏了返回语句</li>
<li>方法没有返回任何值，但方法签名中没有声明void类型</li>
</ul>
<p>首先，我们将看几个例子。这些例子与无意中遗漏返回语句有关。然后，我们将寻找方法签名中缺少void类型的例子。每个示例都展示了如何解决Java缺失返回语句错误。</p>`,r:{minutes:3.72,words:1117},t:"Java 缺失返回语句问题解析",y:"a"}}],["/posts/baeldung/2024-07-21/2024-07-21-Looking%20for%20a%20Java%20Developer%20with%20Spring%20Experience%20%20Remote%20%20%20Part%20Time%20%20%20not%20open%20.html",{loader:()=>a(()=>import("./2024-07-21-Looking for a Java Developer with Spring Experience  Remote   Part Time   not open .html-BTz3Krul.js"),__vite__mapDeps([1185,1])),meta:{d:1721574789e3,e:`<hr>
<h1>寻找具有Spring经验的Java开发人员（远程）（兼职）（未开放） | Baeldung</h1>
<p><strong>此职位目前不开放。</strong></p>
<h3>关于我们</h3>
<p>Baeldung 是一家专注于编程领域的学习和媒体公司。我们是一支灵活的、完全远程的团队。</p>
<h3><strong>描述</strong></h3>
<p>我们正在寻找一位具有丰富Spring和Spring Security经验的<strong>Java开发人员</strong>（需要几年的实际工作经验）。在非技术方面，良好的英语水平也很重要。</p>
<p>你将负责开发项目和编写教学指南，重点是不同的Spring模块（安全、持久性、Web等）。</p>`,r:{minutes:2.24,words:673},t:"寻找具有Spring经验的Java开发人员（远程）（兼职）（未开放） | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-21/2024-07-21-Make%20a%20Call%20to%20a%20GraphQL%20Service%20from%20a%20Java%20Application.html",{loader:()=>a(()=>import("./2024-07-21-Make a Call to a GraphQL Service from a Java Application.html-DIrEocH4.js"),__vite__mapDeps([1186,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","GraphQL"],g:["GraphQL","Java","Web服务"],e:`<hr>
<h1>Java调用GraphQL服务</h1>
<p>GraphQL是作为REST的一种替代，用于构建Web服务的相对<strong>新概念</strong>。最近，一些Java库已经出现，用于创建和调用GraphQL服务。</p>
<p>在本教程中，我们将查看GraphQL模式、查询和变更。我们将看到如何在纯Java中创建和模拟一个简单的GraphQL服务器。然后，我们将探讨如何使用众所周知的HTTP库调用GraphQL服务。</p>
<p>最后，我们还将探讨用于调用GraphQL服务的可用第三方库。</p>
<p>GraphQL是一种用于Web服务的查询语言，也是用于使用类型系统执行查询的服务器端运行时。</p>`,r:{minutes:5.38,words:1613},t:"Java调用GraphQL服务",y:"a"}}],["/posts/baeldung/2024-07-21/2024-07-21-Mediator%20Pattern%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-21-Mediator Pattern in Kotlin.html-CXY856Zb.js"),__vite__mapDeps([1187,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Design Patterns","Kotlin"],g:["Mediator Pattern","Kotlin"],e:`
<h2>1. 引言</h2>
<p>开发者经常面临的一个挑战是管理系统中各个组件之间的通信。确实，这就是设计模式发挥作用的地方，它们为软件设计中常见的问题提供经过验证的解决方案。具体来说，设计模式是软件设计中特定上下文中经常出现问题的一种通用且可重用的解决方案。</p>
<p>在本教程中，我们将深入研究中介者模式，这是一种行为设计模式，并探索其在Kotlin中的实现。</p>
<p>中介者模式通过集中对象之间的通信来促进松散耦合，从而避免它们之间的直接连接。组件不是直接通信，而是通过中介者对象进行通信。此外，这个中介者封装了交互逻辑，允许组件独立且彼此不知情。</p>
<p>在中介者模式中，特别是关键组件协同工作以实现解耦和有组织的系统。让我们更深入地了解每个组件的角色和责任。</p>`,r:{minutes:6.06,words:1817},t:"Kotlin中的中介者模式 | Baeldung关于Kotlin",y:"a"}}],["/posts/baeldung/2024-07-21/2024-07-21-Producer%20Consumer%20Problem%20With%20Example%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-21-Producer Consumer Problem With Example in Java.html-C59sKu9R.js"),__vite__mapDeps([1188,1])),meta:{d:16436736e5,l:"2022年2月1日",c:["Java","并发"],g:["Java","多线程","阻塞队列"],e:`
<p>在本教程中，我们将学习如何在Java中实现生产者-消费者问题。这个问题也被称为有界缓冲问题。</p>
<p>有关问题的更多细节，我们可以参考生产者-消费者问题维基页面。对于Java线程/并发基础知识，请务必访问我们的Java并发文章。</p>
<p>生产者和消费者是两个独立的进程。这两个进程共享一个公共缓冲区或队列。生产者不断生成某些数据并将其推入缓冲区，而消费者则从缓冲区中消费这些数据。</p>
<p>让我们回顾一下展示这个简单场景的图表：</p>
<figure><img src="https://www.baeldung.com/wp-content/uploads/2022/02/Producer-Consumer1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>`,r:{minutes:6.56,words:1969},t:"Java中生产者-消费者问题示例",y:"a"}}],["/posts/baeldung/2024-07-21/2024-07-21-Provide%20an%20OAuth2%20Token%20to%20a%20Feign%20Client.html",{loader:()=>a(()=>import("./2024-07-21-Provide an OAuth2 Token to a Feign Client.html-3V-np7e5.js"),__vite__mapDeps([1189,1])),meta:{d:16436736e5,l:"2022年2月1日",c:["Spring Cloud","OAuth2"],g:["Spring Boot","Feign Client","OAuth2"],e:`<hr>
<h1>在Feign客户端中提供OAuth2令牌</h1>
<h2>1. 概述</h2>
<p>OpenFeign 是一个声明式的 REST 客户端，我们可以在 Spring Boot 应用程序中使用它。假设我们有一个使用 OAuth2 保护的 REST API，我们希望使用 OpenFeign 调用它。在这种情况下，我们需要为 OpenFeign 提供一个访问令牌。</p>
<p>在本教程中，我们将描述<strong>如何为 OpenFeign 客户端添加 OAuth2 支持</strong>。</p>
<h2>2. 服务间认证</h2>
<p>服务间认证是 API 安全性的热门话题。我们可以使用 mTLS 或 JWT 为 REST API 提供认证机制。然而，<strong>OAuth2 协议是保护 API 的事实上的解决方案</strong>。假设我们希望使用另一个服务（客户端角色）调用一个安全服务（服务器角色）。在这种情况下，我们使用客户端凭据授权类型。我们通常使用<strong>客户端凭据在没有最终用户的两个 API 或系统之间进行认证</strong>。下图显示了这种授权类型中的主要参与者：</p>`,r:{minutes:5.87,words:1762},t:"在Feign客户端中提供OAuth2令牌",y:"a"}}],["/posts/baeldung/2024-07-21/2024-07-21-Retrieve%20Original%20Message%20From%20Feign%20ErrorDecoder.html",{loader:()=>a(()=>import("./2024-07-21-Retrieve Original Message From Feign ErrorDecoder.html-Cxot6K1t.js"),__vite__mapDeps([1190,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Cloud","Feign"],g:["Feign","ErrorDecoder","Exception Handling"],e:`<hr>
<h1>使用Feign ErrorDecoder检索原始消息</h1>
<h2><strong>1. 概述</strong></h2>
<p>RESTful服务可能因多种原因失败。在本教程中，我们将探讨如何在集成REST服务抛出错误时从Feign客户端检索原始消息。</p>
<h2><strong>2. Feign客户端</strong></h2>
<p>Feign是一个可插拔且声明式的Web服务客户端，它使编写Web服务客户端变得更容易。除了Feign注解外，它还支持JAX-RS，并且支持<strong>编码器和解码器以提供更多定制</strong>。</p>
<h2><strong>3. 从_ErrorDecoder_检索消息</strong></h2>`,r:{minutes:4.47,words:1342},t:"使用Feign ErrorDecoder检索原始消息",y:"a"}}],["/posts/baeldung/2024-07-21/2024-07-21-Secondary%20Indexes%20in%20Cassandra.html",{loader:()=>a(()=>import("./2024-07-21-Secondary Indexes in Cassandra.html-CtPzUtqj.js"),__vite__mapDeps([1191,1])),meta:{d:16460928e5,l:"2022年3月1日",c:["Database","Cassandra"],g:["Secondary Indexes","NoSQL"],e:`
<p>在本教程中，我们将讨论如何在Apache Cassandra中使用二级索引。</p>
<p>我们将看到数据库中数据是如何分布的，并探索所有索引类型。最后，我们将讨论使用二级索引的最佳实践和建议。</p>
<h3>2.1. 主键</h3>
<p>主键是数据建模中最重要的选择，它唯一地标识了一个数据记录。它至少由一个分区键和零个或多个聚簇列组成。</p>
<p>分区键定义了我们如何在集群中分割数据。聚簇列在磁盘上对数据进行排序，以实现快速的读取操作。</p>
<p>让我们看一个例子：</p>
<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> company <span class="token punctuation">(</span>
    company_name <span class="token keyword">text</span><span class="token punctuation">,</span>
    employee_name <span class="token keyword">text</span><span class="token punctuation">,</span>
    employee_email <span class="token keyword">text</span><span class="token punctuation">,</span>
    employee_age <span class="token keyword">int</span><span class="token punctuation">,</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>company_name<span class="token punctuation">)</span><span class="token punctuation">,</span> employee_email<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:8.51,words:2552},t:"Apache Cassandra中的二级索引",y:"a"}}],["/posts/baeldung/2024-07-21/2024-07-21-Spring%20%20Autowired%20Field%20Null%20%20%20Common%20Causes%20and%20Solutions.html",{loader:()=>a(()=>import("./2024-07-21-Spring  Autowired Field Null   Common Causes and Solutions.html-D6i1yhxe.js"),__vite__mapDeps([1192,1])),meta:{d:17216064e5,l:"2024年7月22日",c:["Spring","Autowired"],g:["NullPointerException","Spring Framework","Dependency Injection"],e:`
<p>在本教程中，我们将看到导致@Autowired字段出现NullPointerException的常见错误。我们还将解释如何修复这个问题。</p>
<h2>2. 问题介绍</h2>
<p>首先，让我们定义一个带有空doWork方法的Spring组件：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.39,words:718},t:"Spring @Autowired 字段为 Null - 常见原因及解决方案",y:"a"}}],["/posts/baeldung/2024-07-21/2024-07-21-Spring%20Security%20%20%20Configuring%20Different%20URLs.html",{loader:()=>a(()=>import("./2024-07-21-Spring Security   Configuring Different URLs.html-78JTHoQd.js"),__vite__mapDeps([1193,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Security","OAuth"],g:["Spring Security","URL配置","安全配置"],e:`<hr>
<h1>Spring Security – 不同URL的配置</h1>
<p>如果你正在实施Spring Security（特别是OAuth），一定要看看《学习Spring Security》课程：</p>
<p><strong>&gt;&gt; 学习Spring</strong>
<strong>安全</strong></p>
<h2>1. 概述</h2>
<p>在本教程中，我们将探讨如何配置Spring Security以使用不同的安全配置来处理不同的URL模式。</p>
<p>当应用程序需要对某些操作进行更高级别的安全保护，而其他操作则允许所有用户访问时，这将非常有用。</p>`,r:{minutes:4.29,words:1288},t:"Spring Security – 不同URL的配置",y:"a"}}],["/posts/baeldung/2024-07-21/2024-07-21-URL%20Rewriting%20With%20Spring%20Cloud%20Gateway.html",{loader:()=>a(()=>import("./2024-07-21-URL Rewriting With Spring Cloud Gateway.html-BCj6a8Os.js"),__vite__mapDeps([1194,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Cloud Gateway","URL Rewrite"],g:["Spring Cloud","Gateway","URL Rewriting"],e:`
<h2>1. 引言</h2>
<p>Spring Cloud Gateway通常用作一个或多个服务的门面，从而为客户提供了一种更简单的消费服务的方式。</p>
<p>在本教程中，我们将展示通过在将请求发送到后端之前重写URL来定制公开API的不同方式。</p>
<h2>2. Spring Cloud Gateway快速回顾</h2>
<p>Spring Cloud Gateway项目是建立在流行的Spring Boot 2和Project Reactor之上的，因此它继承了其主要特点：</p>
<ul>
<li>由于其响应式特性，资源使用率低</li>
<li>支持Spring Cloud生态系统中的所有好处（发现、配置等）</li>
<li>使用标准Spring模式易于扩展和/或自定义</li>
</ul>`,r:{minutes:5.54,words:1661},t:"使用Spring Cloud Gateway进行URL重写",y:"a"}}],["/posts/baeldung/2024-07-21/2024-07-21-Update%20Documents%20in%20MongoDB.html",{loader:()=>a(()=>import("./2024-07-21-Update Documents in MongoDB.html-CdwT9qQ8.js"),__vite__mapDeps([1195,1])),meta:{d:172152e7,l:"2024年7月21日",c:["MongoDB","数据库"],g:["MongoDB","更新文档","Java"],e:`<hr>
<h1>MongoDB中更新文档 | Baeldung</h1>
<h2>1. 概述</h2>
<p>MongoDB 是一个跨平台的、面向文档的开源 NoSQL 数据库，用 C++ 编写。此外，MongoDB 提供高性能、高可用性和自动扩展。</p>
<p>为了在 MongoDB 中更新文档，我们可以使用不同的方法，如 <em>updateOne</em>、<em>findOneAndUpdate</em> 等。此外，MongoDB 为更新方法提供了各种操作符。</p>
<p>在本教程中，我们将讨论在 MongoDB 中执行更新操作的不同方法。对于每种方法，我们将首先讨论 mongo shell 查询，然后是其在 Java 中的实现。</p>`,r:{minutes:5.1,words:1530},t:"MongoDB中更新文档 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-21/2024-07-21-Update%20Multiple%20Fields%20in%20a%20MongoDB%20Document.html",{loader:()=>a(()=>import("./2024-07-21-Update Multiple Fields in a MongoDB Document.html-Cs4XGmzz.js"),__vite__mapDeps([1196,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["MongoDB","Java"],g:["MongoDB","Java","更新","文档"],e:`<hr>
<h1>更新 MongoDB 文档中的多个字段</h1>
<p>MongoDB 是一个公开可用的面向文档的 NoSQL 数据库。我们可以使用各种方法如 <em>update</em>、<em>replace</em> 和 <em>save</em> 来更新集合中的文档。为了更改文档的特定字段，我们将使用不同的操作符如 <em>$set</em>、<em>$inc</em> 等。</p>
<p>在本教程中，我们将学习如何使用 <em>update</em> 和 <em>replace</em> 查询来修改文档的多个字段。为了演示目的，我们首先讨论 mongo shell 查询，然后是其在 Java 中的对应实现。</p>`,r:{minutes:4.57,words:1372},t:"更新 MongoDB 文档中的多个字段",y:"a"}}],["/posts/baeldung/2024-07-21/2024-07-21-What%20Is%20an%20Apache%20Maven%20Artifact%20.html",{loader:()=>a(()=>import("./2024-07-21-What Is an Apache Maven Artifact .html-D_9nH7Yn.js"),__vite__mapDeps([1197,1])),meta:{d:16544736e5,l:"2022年6月6日",c:["Maven","Java"],g:["Maven Artifact","Build Tool"],e:`
<p>手动构建一个复杂项目相当繁琐。使用构建工具可以更容易地完成这项工作。众所周知，Java项目的主要构建工具之一是Maven。Maven帮助标准化应用程序的构建和部署。</p>
<p>在本教程中，我们将讨论Maven构件是什么以及它的关键元素是什么。我们还将查看Maven坐标、依赖管理，最后是Maven仓库。</p>
<h2><strong>1. 概述</strong></h2>
<p>我们可以使用Maven构建和管理任何基于Java的项目。它提供了许多功能，例如：</p>
<ul>
<li>构建和编译</li>
<li>文档和报告</li>
<li>依赖管理</li>
<li>源代码管理</li>
<li>项目更新</li>
<li>部署</li>
</ul>`,r:{minutes:6.49,words:1947},t:"Apache Maven 构件是什么？",y:"a"}}],["/posts/baeldung/2024-07-22/2024-07-22-A%20Brief%20History%20of%20the%20Java%20Programming%20Language.html",{loader:()=>a(()=>import("./2024-07-22-A Brief History of the Java Programming Language.html-BRKv8XA2.js"),__vite__mapDeps([1198,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","编程语言"],g:["Java历史","编程语言"],e:`<hr>
<h1>Java编程语言简史</h1>
<p>Java是由Sun Microsystems的员工James Gosling和Patrick Naughton创建的，得到了Sun Microsystems联合创始人Bill Joy的支持。Sun公司于1995年5月23日在SunWorld上正式推出Java语言。后来，在2009年，甲骨文公司收购了Sun公司，这就是为什么这种语言现在属于甲骨文公司。</p>
<p>在本文中，我们将探索<strong>Java编程语言的历史</strong>。</p>
<p>Java被描述为一种多用途、强类型和面向对象编程（OOP）语言。按设计，它尽可能少地依赖于实现。</p>`,r:{minutes:6.65,words:1996},t:"Java编程语言简史",y:"a"}}],["/posts/baeldung/2024-07-22/2024-07-22-Adding%20EventHandler%20to%20JavaFX%20Button.html",{loader:()=>a(()=>import("./2024-07-22-Adding EventHandler to JavaFX Button.html-baE7k19E.js"),__vite__mapDeps([1199,1])),meta:{d:16409952e5,l:"2022年1月1日",c:["JavaFX","事件处理"],g:["JavaFX Button","事件处理器"],e:'<hr>\n<h1>JavaFX Button 事件处理器添加指南</h1>\n<h2>1. 引言</h2>\n<h3>1.1. 概述</h3>\n<p>在这个简短的教程中，我们将<strong>查看JavaFX的_Button_组件，并了解如何处理用户交互</strong>。</p>\n<h3>1.2. JavaFX API</h3>\n<p>在Java 8、9和10中，无需额外设置即可开始使用JavaFX库。从JDK 11开始，该项目将从JDK中移除，应将以下依赖项添加到pom.xml中：</p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>`\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n        ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```org.openjfx```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n        ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```javafx-controls```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n        ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```${javafx.version}```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n        ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```org.openjfx```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n        ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```javafx-fxml```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n        ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```${javafx.version}```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>`\n\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>`\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>`\n            ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```org.openjfx```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n            ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```javafx-maven-plugin```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n            ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```${javafx-maven-plugin.version}```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n            `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>`\n                `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mainClass</span><span class="token punctuation">&gt;</span></span>`Main`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mainClass</span><span class="token punctuation">&gt;</span></span>`\n            `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>`\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>`\n</code></pre></div>',r:{minutes:3.37,words:1012},t:"JavaFX Button 事件处理器添加指南",y:"a"}}],["/posts/baeldung/2024-07-22/2024-07-22-An%20Introduction%20to%20Domain%20Graph%20Service%20%20DGS%20%20Framework.html",{loader:()=>a(()=>import("./2024-07-22-An Introduction to Domain Graph Service  DGS  Framework.html-BjHiHPmF.js"),__vite__mapDeps([1200,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Boot","GraphQL"],g:["Domain Graph Service","Netflix DGS"],e:`
<h2>1. 概述</h2>
<p>在过去几年中，客户端/服务器通信方面最重要的范式变化之一是 GraphQL，它是一种开源的查询语言和运行时，用于操作 API。我们可以使用它来请求我们所需的确切数据，从而限制我们需要的请求数量。</p>
<p>Netflix 创建了一个域图服务框架（DGS），以使事情更加容易。在这个快速教程中，我们将涵盖 DGS 框架的关键特性。我们将看到如何将此框架添加到我们的应用程序中，并检查其基本注释的工作原理。要了解更多关于 GraphQL 本身的信息，请查看我们的 GraphQL 介绍文章。</p>
<p>Netflix DGS（域图服务）是一个用 Kotlin 编写并基于 Spring Boot 的 GraphQL 服务器框架。它旨在除了 Spring 框架之外具有最小的外部依赖性。</p>`,r:{minutes:4.68,words:1404},t:"Domain Graph Service (DGS) 框架简介",y:"a"}}],["/posts/baeldung/2024-07-22/2024-07-22-An%20Introduction%20to%20InstantSource%20in%20Java%2017.html",{loader:()=>a(()=>import("./2024-07-22-An Introduction to InstantSource in Java 17.html-B0YmpJfe.js"),__vite__mapDeps([1201,1])),meta:{d:17216064e5,l:"2024年7月22日",c:["Java","InstantSource"],g:["Java 17","InstantSource"],e:`
<p>在这个教程中，我们将深入探讨Java 17中引入的InstantSource接口，它提供了当前瞬间的可插拔表示，并避免了对时区的引用。</p>
<h2>2. InstantSource接口</h2>
<p>正如我们在原始提案和相关问题中看到的，这个接口的第一个目标是创建一个抽象，以替代java.time.Clock提供的时区。它还简化了在测试期间为代码部分创建存根以检索瞬间。</p>
<p>它在Java 17中被添加，以提供一种安全的方式来访问当前瞬间，如以下示例所示：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">AQuickTest</span> <span class="token punctuation">{</span>
    <span class="token class-name">InstantSource</span> source<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token class-name">Instant</span> <span class="token function">getInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> source<span class="token punctuation">.</span><span class="token function">instant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:5.74,words:1721},t:"Java 17中InstantSource接口简介",y:"a"}}],["/posts/baeldung/2024-07-22/2024-07-22-Cassandra%20Batch%20in%20Cassandra%20Query%20Language%20and%20Java.html",{loader:()=>a(()=>import("./2024-07-22-Cassandra Batch in Cassandra Query Language and Java.html-BZTyoclH.js"),__vite__mapDeps([1202,1])),meta:{d:16409952e5,l:"2022年1月1日",c:["Cassandra","Java"],g:["CQL","Batch"],e:`
<p>在本教程中，我们将学习Cassandra批处理查询及其不同的用例。我们将分析针对单分区和多分区表的批处理查询。</p>
<p>我们将探索在_Cqlsh_以及Java应用程序中的批处理。</p>
<h2>2. Cassandra批处理基础</h2>
<p>像Cassandra这样的分布式数据库与关系型数据库不同，<strong>不支持ACID（原子性、一致性、隔离性和持久性）属性</strong>。然而，在某些情况下，我们需要多个数据修改操作是原子的和/或隔离的操作。</p>
<p>批处理语句将多个数据修改语言语句（如INSERT、UPDATE和DELETE）组合在一起，以实现针对单个分区的原子性和隔离性，或者仅在针对多个分区时实现原子性。</p>`,r:{minutes:7.8,words:2340},t:"Cassandra查询语言和Java中的Cassandra批处理",y:"a"}}],["/posts/baeldung/2024-07-22/2024-07-22-Cassandra%20Query%20Cheat%20Sheet.html",{loader:()=>a(()=>import("./2024-07-22-Cassandra Query Cheat Sheet.html-B-FO_1On.js"),__vite__mapDeps([1203,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Database","Cassandra"],g:["CQL","Cheat Sheet"],e:`
<ol>
<li>引言</li>
</ol>
<p>有时，我们需要一个快速参考指南来开始我们的学习路径。特别是，备忘单是一个包含所有关键信息的文档。</p>
<p>在本教程中，我们将学习Cassandra查询语言（CQL）的基本概念以及如何使用我们将逐步构建的备忘单来应用它们。</p>
<ol start="2">
<li>Cassandra概览</li>
</ol>
<p>Apache Cassandra是一个开源的、NoSQL的、分布式数据存储系统。这意味着它不仅可以在一台服务器上运行，而是可以跨越多个服务器。它还以其高可用性和分区容错性而闻名。</p>
<p>换句话说，Cassandra数据库的设计灵感来自于CAP定理中的“AP”。</p>`,r:{minutes:7.19,words:2156},t:"Cassandra查询备忘单 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-22/2024-07-22-Check%20if%20a%20String%20Ends%20with%20a%20Certain%20Pattern%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-22-Check if a String Ends with a Certain Pattern in Java.html-CnDrpckS.js"),__vite__mapDeps([1204,1])),meta:{d:17216928e5,l:"2024年7月23日",c:["Java","String Manipulation"],g:["Java","String","Pattern Matching"],e:`<hr>
<h1>如何在Java中检查字符串是否以特定模式结束</h1>
<p>在这篇简短的教程中，我们将深入介绍如何在Java中检查字符串是否以某个特定模式结束。</p>
<p>首先，我们将考虑使用Java核心类库的解决方案。然后，我们将展示如何使用外部库来完成相同的任务。</p>
<h3>使用String类</h3>
<p>简单来说，String提供了多种方便的选项来验证给定的字符串是否以特定的子字符串结束。</p>
<p>让我们更详细地看看每个选项。</p>
<h4>2.1. String#endsWith方法</h4>
<p>这个方法通常是为了这个目的而引入的。<strong>这是检查一个String对象是否以另一个字符串结束的最直接方式</strong>。</p>`,r:{minutes:3.02,words:907},t:"如何在Java中检查字符串是否以特定模式结束",y:"a"}}],["/posts/baeldung/2024-07-22/2024-07-22-Comparing%20wait%20%20%20%20sleep%20%20%20%20and%20delay%20%20%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-22-Comparing wait    sleep    and delay   in Kotlin.html-BMKwJJ79.js"),__vite__mapDeps([1205,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin","Multithreading"],g:["wait()","sleep()","delay()","Coroutines"],e:`
<p>多线程和并发是现代软件开发中的关键概念，它们使程序能够同时高效地处理多个任务。在Kotlin中，开发者有多种工具来控制线程或协程的定时和执行。</p>
<p>在本教程中，我们将探索并比较三种常用的引入延迟的方法：wait()、sleep()和delay()。</p>
<p>在深入了解特定的延迟方法之前，理解线程和协程的基本概念至关重要。</p>
<p>线程是进程内最小的执行单元。在Java和Kotlin中，Thread类提供了一种创建和管理线程的方式。然而，直接使用线程可能会出错且复杂。</p>
<p>另一方面，协程是Kotlin引入的轻量级替代方案，以简化异步编程。它们提供了一种以顺序和更易读的方式编写异步代码的方法。</p>`,r:{minutes:3.63,words:1088},t:"Kotlin中wait()、sleep()和delay()的比较",y:"a"}}],["/posts/baeldung/2024-07-22/2024-07-22-Computing%20an%20X509%20Certificate%20s%20Thumbprint%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-22-Computing an X509 Certificate s Thumbprint in Java.html-DKKqI9v5.js"),__vite__mapDeps([1206,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Security"],g:["X509","Certificate","Thumbprint"],e:`<hr>
<h1>在Java中计算X509证书的指纹</h1>
<h2>1. 概述</h2>
<p>证书的**指纹（或称哈希值）**是证书的唯一标识符。它不是证书的一部分，而是从证书中计算得出的。</p>
<p>在这个简短的教程中，我们将看到如何在Java中计算X509证书的指纹。</p>
<h2>2. 使用纯Java</h2>
<p>首先，让我们从我们的证书文件中获取一个_X509Certificate_对象：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">X509Certificate</span> <span class="token function">getCertObject</span><span class="token punctuation">(</span><span class="token class-name">String</span> filePath<span class="token punctuation">)</span>
  <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">CertificateException</span> <span class="token punctuation">{</span>
     <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileInputStream</span> is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">CertificateFactory</span> certificateFactory <span class="token operator">=</span> <span class="token class-name">CertificateFactory</span>
          <span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"X.509"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">X509Certificate</span><span class="token punctuation">)</span> certificateFactory<span class="token punctuation">.</span><span class="token function">generateCertificate</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.26,words:377},t:"在Java中计算X509证书的指纹",y:"a"}}],["/posts/baeldung/2024-07-22/2024-07-22-Constructor%20Specification%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-22-Constructor Specification in Java.html-MLmLVvIp.js"),__vite__mapDeps([1207,1])),meta:{d:16409952e5,l:"2022年1月1日",c:["Java","Constructor"],g:["Java","Constructor"],e:`
<h2>1. 概述</h2>
<p>在本教程中，我们将学习Java如何处理构造器，并从Java语言规范中回顾一些与之相关的规则。</p>
<h2>2. 构造器声明</h2>
<p>在Java中，每个类都必须有一个构造器。它的结构看起来类似于一个方法，但它有不同的目的。</p>
<p>让我们看看构造器的规范：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code>\`<span class="token operator">&lt;</span>构造器修饰符<span class="token operator">&gt;</span>\` \`<span class="token operator">&lt;</span>构造器声明器<span class="token operator">&gt;</span>\` <span class="token punctuation">[</span>抛出子句<span class="token punctuation">]</span> \`<span class="token operator">&lt;</span>构造器体<span class="token operator">&gt;</span>\`
</code></pre></div>`,r:{minutes:5.09,words:1526},t:"Java中的构造器规范 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-22/2024-07-22-Data%20Objects%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-22-Data Objects in Kotlin.html-D4TlwX_9.js"),__vite__mapDeps([1208,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin"],g:["Data Objects","Kotlin"],e:`<hr>
<h1>Kotlin中的数据对象 | Baeldung关于Kotlin</h1>
<h2><strong>1. 引言</strong></h2>
<p>在使用Kotlin时，我们可以访问许多旨在提高我们生产力的特性。其中一项特性是数据类（Data Classes），它会自动生成如_equals()_、<em>hashCode()</em>、_toString()_和_copy()_等基本实用函数。然而，当我们在Kotlin中使用对象与封闭层次结构一起工作时，我们会遇到不一致性。我们通常需要编写额外的样板代码来处理这种不一致性。</p>
<p>**为了改善这种情况，在1.9版本中，Kotlin引入了一个名为数据对象的新特性。**让我们深入探讨数据对象是什么以及如何使用它们。</p>`,r:{minutes:3.77,words:1131},t:"Kotlin中的数据对象 | Baeldung关于Kotlin",y:"a"}}],["/posts/baeldung/2024-07-22/2024-07-22-Failed%20to%20Load%20ApplicationContext%20for%20JUnit%20Test%20of%20Spring%20Controller.html",{loader:()=>a(()=>import("./2024-07-22-Failed to Load ApplicationContext for JUnit Test of Spring Controller.html-sr_smSgM.js"),__vite__mapDeps([1209,1])),meta:{d:16409952e5,l:"2022年1月1日",c:["Spring Boot","JUnit"],g:["ApplicationContext","XML Configuration"],e:`<hr>
<h1>Spring Boot应用中JUnit测试控制器加载ApplicationContext失败</h1>
<h2>1. 概述</h2>
<p>在Spring Boot应用中，<strong>混合定义Bean的方式包括基于注解和基于XML的配置</strong>。在这种环境下，我们可能想要在测试类中使用基于XML的配置。然而，在这种情况下，有时我们可能会遇到“<strong>加载ApplicationContext失败</strong>”的应用程序上下文加载错误。这个错误出现在测试类中，因为测试环境中没有加载应用程序上下文。</p>
<p>在本教程中，我们将讨论如何在Spring Boot应用中将XML应用程序上下文集成到测试中。</p>`,r:{minutes:3.43,words:1029},t:"Spring Boot应用中JUnit测试控制器加载ApplicationContext失败",y:"a"}}],["/posts/baeldung/2024-07-22/2024-07-22-Find%20All%20Jars%20Containing%20Given%20Class.html",{loader:()=>a(()=>import("./2024-07-22-Find All Jars Containing Given Class.html-DgFWGUsU.js"),__vite__mapDeps([1210,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Maven"],g:["Java","Maven","JAR","Classpath"],e:`<hr>
<h1>查找包含特定类的JAR文件</h1>
<h2>1. 引言</h2>
<p>在本文中，我们将学习如何查找包含特定类的JAR文件。我们将使用两种不同的方法来演示，即基于命令的方法和基于程序的方法。</p>
<h2><strong>2. 基于命令的方法</strong></h2>
<p>在这种方法中，我们将使用shell命令来识别本地Maven仓库中包含_ObjectMapper_类的JAR文件。让我们首先编写一个脚本来识别JAR中的类。该脚本使用_jar_和_grep_命令来打印相应的JAR：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>jar -tf $1 | grep $2 &amp;&amp; echo "Found in : $1"
</code></pre></div>`,r:{minutes:1.8,words:541},t:"查找包含特定类的JAR文件",y:"a"}}],["/posts/baeldung/2024-07-22/2024-07-22-Generating%20a%20Java%20String%20of%20N%20Repeated%20Characters.html",{loader:()=>a(()=>import("./2024-07-22-Generating a Java String of N Repeated Characters.html-CMyDJ5iQ.js"),__vite__mapDeps([1211,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","String Manipulation"],g:["Java String","Repeated Characters"],e:`
<p>在本教程中，我们将熟悉生成包含N个重复字符的<strong>字符串</strong>的不同选项。这在我们需要添加填充空白、生成ASCII艺术等时非常有用。</p>
<p>这个问题在JDK11中很容易解决，但如果我们使用的是早期版本，那么还有许多其他解决方案可用。我们将从最常见的方法开始，并添加一些来自第三方库的方法。</p>
<h3>示例</h3>
<p>让我们定义所有解决方案中将使用的常量，以验证生成的字符串：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">EXPECTED_STRING</span> <span class="token operator">=</span> <span class="token string">"aaaaaaa"</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:4.76,words:1429},t:"生成包含N个重复字符的Java字符串",y:"a"}}],["/posts/baeldung/2024-07-22/2024-07-22-Generating%20a%20Secure%20AES%20Key%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-22-Generating a Secure AES Key in Java.html-S2ODuLS4.js"),__vite__mapDeps([1212,1])),meta:{d:16409952e5,l:"2022年1月1日",c:["Java","Security"],g:["AES","Key Generation","Encryption"],e:`
<p>在这篇文章中，我们将深入探讨AES或一般密码算法中密钥的目的。我们将回顾生成密钥时需要记住的最佳实践，并最终探讨生成密钥的各种方法，并根据指南对它们进行权衡。</p>
<p>高级加密标准（AES）是数据加密标准（DES）的后继者，由国家标准与技术研究院（NIST）在2001年发布。它被归类为对称块密码算法。</p>
<p>对称密码算法使用相同的密钥进行加密和解密。块密码意味着它处理128位的输入明文块：</p>
<h3>2.1 AES变体</h3>
<p>**基于密钥大小，AES支持三种变体：AES-128（128位）、AES-192（192位）和AES-256（256位）。**增加密钥大小会增加加密的强度，因为更大的密钥大小意味着可能的密钥数量更多。因此，在算法执行期间要执行的轮数也会增加，从而增加了所需的计算量：</p>`,r:{minutes:7.58,words:2274},t:"在Java中生成安全的AES密钥",y:"a"}}],["/posts/baeldung/2024-07-22/2024-07-22-Get%20Current%20Trace%20ID%20in%20Spring%20Cloud%20Sleuth.html",{loader:()=>a(()=>import("./2024-07-22-Get Current Trace ID in Spring Cloud Sleuth.html-BSZugGJP.js"),__vite__mapDeps([1213,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Cloud Sleuth","Spring Boot"],g:["Trace ID","Spring Cloud","Logging"],e:`
<p>在本文中，我们将探讨Spring Cloud Sleuth，并看看如何在Spring Boot中使用它进行跟踪。它为我们的日志添加了有用的额外信息，并通过为它们添加唯一标识符来使调试操作变得更容易。在Sleuth术语中，这些操作被称为跟踪。它们可以由几个步骤组成，称为跨度。</p>
<p>例如，一个跟踪可以是一个查询我们应用程序数据的GET请求。当我们的应用程序处理请求时，它可以被分解为更小的步骤：用户授权、执行数据库查询、转换响应。这些步骤中的每一个都是属于同一跟踪的唯一跨度。</p>
<p>在某些情况下，我们可能想要获取当前跟踪或跨度的ID。例如，我们可以在发生事件时将这些发送给开发团队。然后他们可以使用这个来调试和解决问题。</p>`,r:{minutes:4.54,words:1362},t:"在Spring Cloud Sleuth中获取当前跟踪ID",y:"a"}}],["/posts/baeldung/2024-07-22/2024-07-22-Get%20Last%20Inserted%20Document%20ID%20in%20MongoDB%20With%20Java%20Driver.html",{loader:()=>a(()=>import("./2024-07-22-Get Last Inserted Document ID in MongoDB With Java Driver.html-C5BmLz1-.js"),__vite__mapDeps([1214,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["MongoDB","Java"],g:["Java","MongoDB","Document ID"],e:`
<h2>1. 概述</h2>
<p>有时我们需要刚刚插入到MongoDB数据库中文档的ID。例如，我们可能想要将ID作为响应返回给调用者或记录创建的对象进行调试。</p>
<p>在本教程中，我们将看到MongoDB中ID是如何实现的，以及如何通过Java程序检索我们刚刚插入到集合中的文档的ID。</p>
<h2>2. MongoDB文档的ID是什么？</h2>
<p>像每个数据存储系统一样，MongoDB需要为存储在集合中的每个文档提供一个唯一标识符。这个标识符相当于关系数据库中的主键。</p>
<p>在MongoDB中，此ID由12个字节组成：</p>
<ul>
<li>4字节的时间戳值，表示自Unix纪元以来的秒数</li>
<li>每个进程一次生成的5字节随机值。这个随机值对于机器和进程是唯一的。</li>
<li>一个3字节的递增计数器</li>
</ul>`,r:{minutes:4.7,words:1409},t:"在Java驱动中获取MongoDB最后插入的文档ID",y:"a"}}],["/posts/baeldung/2024-07-22/2024-07-22-Get%20the%20Name%20of%20the%20Currently%20Executing%20Test%20in%20JUnit.html",{loader:()=>a(()=>import("./2024-07-22-Get the Name of the Currently Executing Test in JUnit.html-adytH2S7.js"),__vite__mapDeps([1215,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["JUnit","Testing"],g:["JUnit 4","JUnit 5","Test Case"],e:`
<h2>1. 概述</h2>
<p>在使用JUnit时，我们可能需要让我们的测试能够访问它们的名称。这可能有助于错误消息的生成，特别是对于具有系统生成名称的测试。</p>
<p>在这个简短的教程中，我们将看看如何在JUnit 4和JUnit 5中获取当前测试用例的名称。</p>
<h2>2. JUnit 5 方法</h2>
<p>让我们看两个场景。首先，我们将看到如何获取单个测试的名称。这个名称通常是可预测的，因为它可能是函数的名称或_@DisplayName_注解的值。然而，如果我们使用参数化测试或显示名称生成器，那么我们可能需要知道JUnit提供的名称。</p>
<p><strong>JUnit 5可以将一个_TestInfo_对象注入到我们的测试中</strong>，以显示当前测试用例的名称。</p>`,r:{minutes:3.29,words:988},t:"在JUnit中获取当前执行测试的名称",y:"a"}}],["/posts/baeldung/2024-07-22/2024-07-22-Hibernate%20Validator%20Annotation%20Processor%20in%20Depth.html",{loader:()=>a(()=>import("./2024-07-22-Hibernate Validator Annotation Processor in Depth.html-vkz9Thqg.js"),__vite__mapDeps([1216,1])),meta:{d:16426368e5,l:"2022年1月20日",c:["Hibernate Validator","Annotation Processor"],g:["Java","Bean Validation"],e:`
<p>在本文中，我们将深入探讨Hibernate Validator注解处理器。首先，我们将安装并配置它，然后通过三个常见的约束问题来探索它的行为。示例代码可以在GitHub上找到。</p>
<p>请注意，此工具的版本7仅与jakarta.validation约束兼容。此外，处理器还提供了如何在主要Java IDE中设置它的指导。</p>
<p>以下是文章的翻译内容，包括概述、配置、常见约束问题和结论部分，以及示例代码和错误信息的翻译。由于篇幅限制，这里只提供部分翻译的示例：</p>
<h2>1. 概述</h2>
<p>很容易误用Bean验证约束。例如，我们可能会不小心在一个String属性上使用@Future约束。这类错误可能导致运行时出现不可预测的错误。</p>`,r:{minutes:3.94,words:1183},t:"Hibernate Validator注解处理器深度解析",y:"a"}}],["/posts/baeldung/2024-07-22/2024-07-22-Hidden%20Classes%20in%20Java%2015.html",{loader:()=>a(()=>import("./2024-07-22-Hidden Classes in Java 15.html-B0qVMw_T.js"),__vite__mapDeps([1217,1])),meta:{d:17216064e5,l:"2024年7月22日",c:["Java","JEP-371"],g:["Hidden Classes","Java 15"],e:`<hr>
<h1>Java 15中的隐藏类 | Baeldung</h1>
<h2>1. 概述</h2>
<p>Java 15引入了许多新特性。在本文中，我们将讨论一个名为隐藏类的新特性，该特性在JEP-371下推出。这个特性被引入作为Unsafe API的替代品，Unsafe API不推荐在JDK之外使用。</p>
<p>隐藏类特性对于任何使用动态字节码或JVM语言的人来说都非常有用。</p>
<p>动态生成的类为低延迟应用程序提供了效率和灵活性。它们只需要在有限的时间内使用。将它们保留为静态生成类的生命周期会增加内存占用。现有的解决方案，如每个类的类加载器，既繁琐又低效。</p>
<p>从Java 15开始，隐藏类已成为生成动态类的标准方式。</p>`,r:{minutes:5.46,words:1639},t:"Java 15中的隐藏类 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-22/2024-07-22-How%20to%20Access%20EntityManager%20with%20Spring%20Data.html",{loader:()=>a(()=>import("./2024-07-22-How to Access EntityManager with Spring Data.html-CqS_5pTJ.js"),__vite__mapDeps([1218,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Data","JPA"],g:["EntityManager","Repository"],e:`
<h2>1. 概览</h2>
<p>在开发Spring Data应用程序时，我们通常不需要直接访问_EntityManager_。然而，在某些情况下，我们可能想要访问它，比如创建自定义查询或分离实体。</p>
<p>在这个快速教程中，我们将学习如何通过扩展Spring Data Repository来访问_EntityManager_。</p>
<h2>2. 访问EntityManager</h2>
<p>我们可以通过创建一个自定义仓库来获取_EntityManager_，例如扩展内置的_JpaRepository_。</p>
<p>首先，我们将定义一个示例_实体_，用于存储我们想要在数据库中存储的用户：</p>`,r:{minutes:1.63,words:489},t:"如何在Spring Data中访问EntityManager | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-22/2024-07-22-How%20to%20Extract%20Individual%20Values%20From%20a%20JSON%20String.html",{loader:()=>a(()=>import("./2024-07-22-How to Extract Individual Values From a JSON String.html-bRMugYEB.js"),__vite__mapDeps([1219,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin","JSON"],g:["JSON","Kotlinx Serialization","Gson","Jackson"],e:`
<p>JSON（JavaScript对象表示法）为应用程序之间存储和交换数据提供了一种方便的方式。因此，作为开发人员，我们通常需要执行从JSON字符串中提取单个JSON值的任务。</p>
<p>在本教程中，我们将探讨在Kotlin中从JSON字符串提取这些单个值的不同方法。</p>
<h3>2.1 使用Kotlinx Serialization库</h3>
<p>首先，我们可以利用Kotlin的一个扩展库Kotlinx.serialization。这个库提供了一种将Kotlin对象序列化和反序列化到JSON的简便方法。</p>
<h4>2.1.1 Maven和Gradle依赖</h4>
<p>要使用这个库与Maven，我们需要在_pom.xml_文件中包含它的依赖：</p>`,r:{minutes:4.21,words:1264},t:"如何在Kotlin中从JSON字符串提取单个值",y:"a"}}],["/posts/baeldung/2024-07-22/2024-07-22-Introduction%20to%20Spring%20Cloud%20Load%20Balancer.html",{loader:()=>a(()=>import("./2024-07-22-Introduction to Spring Cloud Load Balancer.html-BZStn9o9.js"),__vite__mapDeps([1220,1])),meta:{d:17216928e5,l:"2024年7月23日",c:["Spring Cloud","Load Balancer"],g:["Microservices","Fault Tolerance","Load Balancing"],e:`
<p>随着微服务架构越来越受欢迎，跨不同服务器运行多个服务变得越来越普遍。在这个快速教程中，<strong>我们将看看如何使用Spring Cloud Load Balancer来创建更具容错性的应用程序</strong>。</p>
<h2>2. 什么是负载均衡？</h2>
<p><strong>负载均衡是将流量分配到同一应用程序的不同实例的过程。</strong></p>
<p>为了创建一个容错系统，通常运行每个应用程序的多个实例。因此，每当一个服务需要与另一个服务通信时，它需要选择一个特定的实例来发送其请求。</p>
<p>在负载均衡方面有许多算法：</p>
<ul>
<li>随机选择：随机选择一个实例</li>
<li>轮询：每次以相同的顺序选择一个实例</li>
<li>最少连接数：选择当前连接数最少的实例</li>
<li>加权指标：使用加权指标选择最佳实例（例如，CPU或内存使用量）</li>
<li>IP哈希：使用客户端IP的哈希映射到一个实例</li>
</ul>`,r:{minutes:5.99,words:1797},t:"Spring Cloud 负载均衡器简介",y:"a"}}],["/posts/baeldung/2024-07-22/2024-07-22-Java%20Concurrent%20HashSet%20Equivalent%20to%20ConcurrentHashMap.html",{loader:()=>a(()=>import("./2024-07-22-Java Concurrent HashSet Equivalent to ConcurrentHashMap.html-fAaYdSVc.js"),__vite__mapDeps([1221,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Concurrency"],g:["Java","ConcurrentHashMap","HashSet","Thread Safety"],e:'\n<p>在本教程中，我们将探讨创建线程安全的 HashSet 实例的可能性，以及 HashSet 的 ConcurrentHashMap 等价物是什么。此外，我们将查看每种方法的优缺点。</p>\n<h2>2. 使用 ConcurrentHashMap 工厂方法实现线程安全的 HashSet</h2>\n<p>首先，我们将查看 ConcurrentHashMap 类公开的静态 newKeySet() 方法。基本上，此方法返回一个遵守 java.util.Set 接口的实例，并允许使用标准方法如 add()，contains() 等。</p>\n<p>可以这样简单地创建：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Set</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>````` threadSafeUniqueNumbers <span class="token operator">=</span> <span class="token class-name">ConcurrentHashMap</span><span class="token punctuation">.</span><span class="token function">newKeySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nthreadSafeUniqueNumbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nthreadSafeUniqueNumbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div>',r:{minutes:4.38,words:1313},t:"Java ConcurrentHashMap 与线程安全的 HashSet 等价实现",y:"a"}}],["/posts/baeldung/2024-07-22/2024-07-22-Java%20IdentityHashMap%20Class%20and%20Its%20Use%20Cases.html",{loader:()=>a(()=>import("./2024-07-22-Java IdentityHashMap Class and Its Use Cases.html-CiGkuz5r.js"),__vite__mapDeps([1222,1])),meta:{d:172165045e4,c:["Java","Collections"],g:["Java","IdentityHashMap"],e:`<hr>
<h1>Java IdentityHashMap</h1>
`,r:{minutes:.07,words:20},t:"Java IdentityHashMap",y:"a"}}],["/posts/baeldung/2024-07-22/2024-07-22-Keycloak%20Integration%20%20%20OAuth2%20and%20OpenID%20with%20Swagger%20UI.html",{loader:()=>a(()=>import("./2024-07-22-Keycloak Integration   OAuth2 and OpenID with Swagger UI.html-DHX91qiT.js"),__vite__mapDeps([1223,1])),meta:{d:16409952e5,l:"2022年1月1日",c:["Keycloak","OAuth2","OpenID","Swagger UI"],g:["Integration","Security","REST API","Spring Boot"],e:`
<p>在本教程中，我们将重点介绍如何使用Keycloak对REST服务进行身份验证和授权，并使用Swagger UI进行测试。</p>
<h2>2. 挑战</h2>
<p>像其他Web资源一样，REST API通常需要安全保护。因此，服务消费者（例如Swagger UI）不仅需要处理HTTP调用本身，还需要向服务提供商提供身份验证信息。</p>
<p>Keycloak是一个IAM服务器，允许在服务提供商的实现之外进行身份验证和授权。它是架构的一部分，如下所示：</p>
<figure><img src="https://www.baeldung.com/wp-content/uploads/2022/01/oauth.svg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>`,r:{minutes:3.46,words:1038},t:"Keycloak集成 - 使用Swagger UI的OAuth2和OpenID",y:"a"}}],["/posts/baeldung/2024-07-22/2024-07-22-Lombok%20Configuration%20System.html",{loader:()=>a(()=>import("./2024-07-22-Lombok Configuration System.html-BhHNYccd.js"),__vite__mapDeps([1224,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Lombok"],g:["Lombok","配置"],e:'\n<p>在本教程中，我们将讨论 Lombok 的配置参数。我们将介绍许多不同的选项以及如何正确设置我们的配置。</p>\n<h2>2. 配置概述</h2>\n<p>Lombok 是一个库，它帮助我们消除了 Java 应用程序中几乎所有的标准样板代码。我们将测试许多属性和配置。第一件事是添加 Lombok 依赖项：</p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`org.projectlombok`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`lombok`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`1.18.30`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>`provided`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n</code></pre></div>',r:{minutes:5.64,words:1692},t:"Lombok 配置系统",y:"a"}}],["/posts/baeldung/2024-07-22/2024-07-22-Multiple%20Line%20Code%20Example%20in%20Javadoc%20Comment.html",{loader:()=>a(()=>import("./2024-07-22-Multiple Line Code Example in Javadoc Comment.html-B7DBd7LH.js"),__vite__mapDeps([1225,1])),meta:{d:16383168e5,l:"2021年12月1日",c:["Javadoc","多行代码示例"],g:["Java","文档","代码格式"],e:`
<p>在本教程中，我们将探索不同的方式来格式化Javadoc注释。我们将<strong>专注于分析在文档注释中编写的代码片段的格式</strong>。</p>
<h2>2. 引言</h2>
<p>Javadoc是一个用于为Java类生成文档的工具。它<strong>处理Java源文件中指定的文档注释，并生成相应的HTML页面</strong>。</p>
<p>请参阅我们的文章以了解更多关于Javadoc文档的信息。</p>
<p>我们可以将代码片段作为Java类文档注释的一部分。我们希望在生成的HTML页面上查看具有正确缩进和字符的代码片段。</p>
<p>让我们尝试将Java代码片段作为我们的注释的一部分添加：</p>`,r:{minutes:5.43,words:1629},t:"Javadoc注释中多行代码示例的格式",y:"a"}}],["/posts/baeldung/2024-07-22/2024-07-22-Printing%20Thread%20Info%20in%20Log%20File%20Using%20Log4j2.html",{loader:()=>a(()=>import("./2024-07-22-Printing Thread Info in Log File Using Log4j2.html-BGXbl3zd.js"),__vite__mapDeps([1226,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Logging"],g:["Log4j2","Thread Information"],e:`<hr>
<h1>使用Log4j2记录线程信息到日志文件</h1>
<p>这篇文章将展示如何使用Log4j2库记录线程信息的概念和示例。</p>
<p>日志是提供系统发生错误或流程时上下文的强大工具。日志帮助我们捕获并持久化相关信息，以便随时分析。</p>
<p>线程允许我们的应用程序同时执行多项任务，以处理更多请求，使我们的工作更加高效。</p>
<p>许多Java应用程序使用日志和线程来控制这种情况。然而，由于日志通常集中在特定文件中，来自不同线程的日志会混乱，用户无法识别和理解事件的顺序。我们将使用Java最流行的日志框架之一Log4j2，展示有关我们线程的相关信息，以解决这个问题。</p>`,r:{minutes:2.21,words:662},t:"使用Log4j2记录线程信息到日志文件",y:"a"}}],["/posts/baeldung/2024-07-22/2024-07-22-Random%20Number%20Generators%20in%20Java%2017.html",{loader:()=>a(()=>import("./2024-07-22-Random Number Generators in Java 17.html-Y5_qNRmS.js"),__vite__mapDeps([1227,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","编程"],g:["Java 17","随机数生成器"],e:`
<h2>1. 概述</h2>
<p>Java SE 17的发布引入了随机数生成API的更新——JEP 356。</p>
<p>这次API更新引入了新的接口类型，以及方便地列出、查找和实例化生成器工厂的方法。此外，现在还有一组新的随机数生成器实现可用。</p>
<p>在本教程中，我们将比较新的RandomGenerator API与旧的Random API。我们将查看列出所有可用的生成器工厂，并根据其名称或属性选择生成器。</p>
<p>我们还将探索新API的线程安全性和性能。</p>
<h2>2. 旧的Random API</h2>
<p>首先，让我们看看基于Random类的Java旧API进行随机数生成。</p>`,r:{minutes:6.21,words:1863},t:"Java 17中的随机数生成器 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-22/2024-07-22-Remove%20Basic%20Error%20Controller%20In%20SpringFox%20Swagger%20UI.html",{loader:()=>a(()=>import("./2024-07-22-Remove Basic Error Controller In SpringFox Swagger UI.html-D2hjn5dD.js"),__vite__mapDeps([1228,1])),meta:{d:16436736e5,l:"2022年2月1日",c:["Spring Boot","Swagger"],g:["SpringFox","Swagger-UI","BasicErrorController"],e:`<hr>
<h1>在SpringFox Swagger-UI中移除BasicErrorController</h1>
<h2>1. 概述</h2>
<p>在本教程中，我们将学习多种方法来配置Spring Boot应用程序中的Swagger，以隐藏由_BasicErrorController_暴露的路径。</p>
<h2>2. 目标项目</h2>
<p>本文不会涵盖使用Spring Boot和Swagger-UI开始的基本配置。我们可以使用已经配置好的项目，或者按照“使用Spring REST API设置Swagger 2”的指南来创建基本配置。</p>
<h2>3. 问题</h2>
<p><strong>如果我们的代码包含一个_BasicErrorController_，Swagger默认会将其所有端点也包含在生成的文档中。</strong> 我们需要提供自定义配置来移除不需要的控制器。</p>`,r:{minutes:2.49,words:748},t:"在SpringFox Swagger-UI中移除BasicErrorController",y:"a"}}],["/posts/baeldung/2024-07-22/2024-07-22-Retrying%20Feign%20Calls.html",{loader:()=>a(()=>import("./2024-07-22-Retrying Feign Calls.html-BXK1VuYx.js"),__vite__mapDeps([1229,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Spring"],g:["Feign","Retry"],e:`<hr>
<h1>重试 Feign 调用</h1>
<p>调用外部服务通过 REST 端点是一个常见的活动，通过像 Feign 这样的库使得这个过程变得非常简单。然而，在这些调用过程中可能会发生很多问题。许多问题都是随机的或暂时的。</p>
<p>在本教程中，我们将学习如何重试失败的调用并使 REST 客户端更具弹性。</p>
<h2>2. Feign 客户端设置</h2>
<p>首先，让我们创建一个简单的 Feign 客户端构建器，我们稍后将通过重试功能对其进行增强。我们将使用 <em>OkHttpClient</em> 作为 HTTP 客户端。此外，我们将使用 <em>GsonEncoder</em> 和 <em>GsonDecoder</em> 对请求和响应进行编码和解码。最后，我们需要指定目标的 URI 和响应类型：</p>`,r:{minutes:4.54,words:1363},t:"重试 Feign 调用",y:"a"}}],["/posts/baeldung/2024-07-22/2024-07-22-SequenceInputStream%20Class%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-22-SequenceInputStream Class in Java.html-BUlLjVAl.js"),__vite__mapDeps([1230,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","IO"],g:["SequenceInputStream","Java IO"],e:`<hr>
<h1>Java中的SequenceInputStream类</h1>
<p>在这个教程中，我们将学习如何在Java中使用_SequenceInputStream_类。特别是，这个类在连续读取一系列文件或流时非常有用。</p>
<p>有关Java IO和其他相关Java类的更多基础知识，我们可以阅读Java IO教程。</p>
<h3>使用_SequenceInputStream_类</h3>
<p>_SequenceInputStream_接受两个或更多的_InputStream_对象作为源。它按照给定的顺序依次从每个源读取。当它完成从第一个_InputStream_的读取后，它会自动开始从第二个读取。这个过程会一直持续，直到它完成所有源流的读取。</p>`,r:{minutes:1.82,words:547},t:"Java中的SequenceInputStream类",y:"a"}}],["/posts/baeldung/2024-07-22/2024-07-22-Setting%20Example%20and%20Description%20with%20Swagger.html",{loader:()=>a(()=>import("./2024-07-22-Setting Example and Description with Swagger.html-CpAQabVf.js"),__vite__mapDeps([1231,1])),meta:{d:16436736e5,l:"2022年2月1日",c:["Spring Boot","Swagger"],g:["API文档","描述","示例"],e:`
<p>在本教程中，我们将展示如何使用Swagger注解使我们的文档更加描述性。首先，我们将学习如何为API的不同部分添加描述，比如方法、参数和错误代码。然后我们将看到如何添加请求/响应示例。</p>
<h2>2. 项目设置</h2>
<p>我们将创建一个简单的产品API，提供创建和获取产品的方法。</p>
<p>从头开始创建REST API，我们可以按照Spring Docs的这个教程使用Spring Boot创建RESTful web服务。</p>
<p>接下来将是为项目设置依赖项和配置。我们可以按照本文的步骤为Spring REST API设置Swagger 2。</p>
<h2>3. 创建API</h2>`,r:{minutes:4.73,words:1419},t:"使用Swagger设置示例和描述",y:"a"}}],["/posts/baeldung/2024-07-22/2024-07-22-Split%20a%20String%20Every%20n%20Characters%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-22-Split a String Every n Characters in Java.html-Bc1Qra8_.js"),__vite__mapDeps([1232,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","字符串处理"],g:["Java","字符串分割"],e:'\n<p>在本教程中，我们将探讨如何在Java中每n个字符分割字符串。首先，我们将探索使用内置Java方法实现此操作的可能方式。然后，我们将展示如何使用Guava库达到相同的目标。</p>\n<h2>2. 使用String#split方法</h2>\n<p>String类提供了一个方便的方法叫做split。顾名思义，它根据给定的分隔符或正则表达式将字符串分割成多个部分。</p>\n<p>让我们看看它的实际应用：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span>````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````` <span class="token function">usingSplitMethod</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> results <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"(?&lt;=\\\\G.{"</span> <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token string">"})"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:2.9,words:869},t:"Java中每n个字符分割字符串",y:"a"}}],["/posts/baeldung/2024-07-22/2024-07-22-String%20equals%20%20%20Vs%20contentEquals%20%20%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-22-String equals   Vs contentEquals   in Java.html-kEQ1sJHx.js"),__vite__mapDeps([1233,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","String"],g:["equals","contentEquals"],e:`
<h2>1. 引言</h2>
<p>Java中String类的equals()和contentEquals()方法用于执行字符串比较。然而，这两种方法在功能上存在特定的差异。</p>
<p>在本教程中，我们将通过实际示例快速查看这两种方法之间的区别。</p>
<h2>2. equals()方法</h2>
<p>equals()方法是Java String类的公共方法。它覆盖了Object类中的原始equals()方法。该方法的签名如下：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> anObject<span class="token punctuation">)</span>
</code></pre></div>`,r:{minutes:5.16,words:1547},t:"Java中String类的equals()与contentEquals()方法的比较",y:"a"}}],["/posts/baeldung/2024-07-22/2024-07-22-Using%20Spring%20Cloud%20Gateway%20with%20OAuth%202.0%20Patterns.html",{loader:()=>a(()=>import("./2024-07-22-Using Spring Cloud Gateway with OAuth 2.0 Patterns.html-C8nhfV8x.js"),__vite__mapDeps([1234,1])),meta:{d:16422912e5,l:"2022年1月16日",c:["Spring Cloud Gateway","OAuth 2.0"],g:["Spring Cloud Gateway","OAuth 2.0"],e:`<hr>
<h1>使用 Spring Cloud Gateway 实现 OAuth 2.0 模式</h1>
<h2>1. 引言</h2>
<p>Spring Cloud Gateway 是一个库，允许我们基于 Spring Boot 快速创建轻量级的 API 网关，我们之前的文章中已经介绍过。</p>
<p><strong>这次，我们将展示如何在其上快速实现 OAuth 2.0 模式。</strong></p>
<h2>2. OAuth 2.0 快速回顾</h2>
<p>OAuth 2.0 标准是一个在互联网上广泛使用的标准，作为安全机制，允许用户和应用程序安全地访问资源。</p>
<p>尽管详细描述这个标准超出了本文的范围，但让我们从几个关键术语开始快速回顾：</p>`,r:{minutes:6.32,words:1897},t:"使用 Spring Cloud Gateway 实现 OAuth 2.0 模式",y:"a"}}],["/posts/baeldung/2024-07-22/2024-07-22-What%20Is%20the%20Difference%20Between%20NIO%20and%20NIO.2%20.html",{loader:()=>a(()=>import("./2024-07-22-What Is the Difference Between NIO and NIO.2 .html-CFZO8xF4.js"),__vite__mapDeps([1235,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","NIO"],g:["Java NIO","Java NIO.2"],e:`<hr>
<h1>Java NIO和NIO.2的区别是什么？ | Baeldung---</h1>
<p>date: 2022-04-01
category:</p>
<ul>
<li>Java</li>
<li>NIO
tag:</li>
<li>Java NIO</li>
<li>Java NIO.2
head:</li>
<li>
<ul>
<li>meta</li>
<li>name: keywords
content: Java NIO, Java NIO.2, 文件系统操作, 非阻塞IO</li>
</ul>
</li>
</ul>
<hr>
<h1>Java NIO和NIO.2的区别是什么？ | Baeldung</h1>`,r:{minutes:5.62,words:1687},t:"Java NIO和NIO.2的区别是什么？ | Baeldung---",y:"a"}}],["/posts/baeldung/2024-07-22/2024-07-22-Working%20with%20%20Unknown%20Source%20%20Stack%20Traces%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-22-Working with  Unknown Source  Stack Traces in Java.html-BgXMYJRa.js"),__vite__mapDeps([1236,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Debugging"],g:["Java","Stack Trace","Debugging"],e:`<hr>
<h1>Java中处理未知来源堆栈跟踪</h1>
<p>在这篇短文中，我们将探讨为什么我们的Java异常堆栈跟踪中可能会出现未知来源，以及如何修复它。</p>
<h2>2. 类调试信息</h2>
<p>Java类文件包含可选的调试信息以便于调试。我们可以在编译时选择是否以及添加哪些调试信息到类文件中。这将决定在运行时可用的调试信息。</p>
<p>让我们查看Java编译器的帮助文档，看看可用的各种选项：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>javac -help

用法：javac \`&lt;选项&gt;\` \`&lt;源文件&gt;\`
其中可能的选项包括：
  -g                         生成所有调试信息
  -g:none                    不生成调试信息
  -g:{lines,vars,source}     只生成部分调试信息
</code></pre></div>`,r:{minutes:3.9,words:1169},t:"Java中处理未知来源堆栈跟踪",y:"a"}}],["/posts/baeldung/2024-07-23/2024-07-23-415%20Unsupported%20MediaType%20in%20Spring%20Application.html",{loader:()=>a(()=>import("./2024-07-23-415 Unsupported MediaType in Spring Application.html-BtZwfVlg.js"),__vite__mapDeps([1237,1])),meta:{d:17217792e5,l:"2024年7月24日",c:["Spring","Error Handling"],g:["415 Unsupported Media Type","Spring Application"],e:`
<p>在本教程中，我们将展示Spring应用程序中POST请求的HTTP响应码415 UnsupportedMediaType的原因和解决方法。</p>
<h2>2. 背景</h2>
<p>我们的一位老业务客户要求我们为他们的产品设计并开发一个新的桌面应用程序。该应用程序的目的是管理用户。我们以前从未在这个产品上工作过。</p>
<p>由于时间紧迫，我们决定使用他们之前编写的现有后端API集。<strong>我们面临的挑战是这些API的文档并不十分详尽。</strong> 结果，我们只知道可用的API端点及其方法。因此，我们决定不接触服务——相反，我们将开始开发将使用此服务API的应用程序。</p>`,r:{minutes:5.23,words:1569},t:"Spring 应用程序中的415 Unsupported MediaType问题解析",y:"a"}}],["/posts/baeldung/2024-07-23/2024-07-23-Check%20if%20an%20Enum%20Value%20Exists%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-23-Check if an Enum Value Exists in Java.html-9cEUPpOe.js"),__vite__mapDeps([1238,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Enum"],g:["Java","Enum","枚举","搜索"],e:`
<h2>1. 概述</h2>
<p>我们在几乎所有应用程序中都会看到枚举。这些包括订单状态代码，如_草稿(DRAFT)<em>和_处理中(PROCESSING)</em>，以及网页错误代码，如400、404、500、501等。每当我们在领域中看到枚举数据时，在我们的应用程序中就会看到对应的_Enum_。我们可以使用传入请求中的数据并找到该枚举。例如，我们可以将网页错误_400_映射到_BadRequest_。</p>
<p>因此，我们需要逻辑来按条件搜索枚举。这可以是它的名称或它的值。或者它甚至可以是任意的整型代码。</p>
<p>在本教程中，我们将学习如何按条件搜索枚举。此外，我们还将探索返回找到的枚举的不同方式。</p>`,r:{minutes:5.56,words:1669},t:"在Java中检查枚举值是否存在",y:"a"}}],["/posts/baeldung/2024-07-23/2024-07-23-Content%20Security%20Policy%20with%20Spring%20Security.html",{loader:()=>a(()=>import("./2024-07-23-Content Security Policy with Spring Security.html-tzIcAISU.js"),__vite__mapDeps([1239,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Security","Content Security Policy"],g:["XSS","Code Injection","Clickjacking"],e:`<hr>
<h1>Spring Security中的内容安全策略</h1>
<p>如果你正在处理Spring Security（特别是OAuth）实现，一定要看看《Learn Spring Security》课程。</p>
<h2>1. 概述</h2>
<p>跨站脚本攻击（XSS）始终排在最普遍的网络攻击前十名。XSS攻击发生在Web服务器未验证或编码用户的恶意输入并将其呈现在页面上时。像XSS攻击一样，代码注入和点击劫持通过窃取用户数据和冒充用户，在Web应用程序中造成混乱。</p>
<p>在本教程中，我们将学习如何使用内容安全策略（CSP）头来减轻基于Spring Security的Web应用程序中的代码注入风险。</p>`,r:{minutes:6.87,words:2060},t:"Spring Security中的内容安全策略",y:"a"}}],["/posts/baeldung/2024-07-23/2024-07-23-Convert%20String%20to%20Float%20and%20Back%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-23-Convert String to Float and Back in Java.html-ffqYFoAp.js"),__vite__mapDeps([1240,1])),meta:{d:17216928e5,l:"2024年7月23日",c:["Java","字符串转换"],g:["Java","浮点数","字符串"],e:`
<p>将数据从浮点数转换为字符串以及反向操作在Java中是一种常规操作。然而，进行这种转换的多种方法可能会引起混乱和不确定性，使人不确定应该选择哪种方法。</p>
<p>在本文中，我们将展示并比较所有可用的选项。</p>
<p>首先，让我们看看将浮点数值转换为字符串的最常见方式。</p>
<h3>2.1 字符串拼接</h3>
<p>我们可以使用的最直接解决方案是将浮点值与一个空字符串进行拼接。</p>
<p>让我们看一个例子：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">float</span> givenFloat <span class="token operator">=</span> <span class="token number">1.25f</span><span class="token punctuation">;</span>

<span class="token class-name">String</span> result <span class="token operator">=</span> givenFloat <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span>

<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"1.25"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:4.51,words:1352},t:"Java中将字符串转换为浮点数及反向转换",y:"a"}}],["/posts/baeldung/2024-07-23/2024-07-23-Custom%20Validation%20with%20Swagger%20Codegen.html",{loader:()=>a(()=>import("./2024-07-23-Custom Validation with Swagger Codegen.html-BULkzY4v.js"),__vite__mapDeps([1241,1])),meta:{d:17217792e5,l:"2024年7月24日",c:["Java","Swagger"],g:["Custom Validation","Swagger Codegen"],e:`
<h2>1. 概述</h2>
<p>当我们使用Swagger生成验证时，我们通常使用基本规范。然而，我们可能需要添加Spring自定义验证注解。</p>
<p>本教程将教授如何使用这些验证生成模型和REST API，同时重点介绍OpenAPI服务器生成器，而不是约束验证器。</p>
<h2>2. 设置</h2>
<p>在设置中，我们将使用之前的Baeldung教程从OpenAPI 3.0.0定义生成服务器。接下来，我们将添加一些自定义验证注解以及所有所需的依赖项。</p>
<h2>3. PetStore API OpenAPI定义</h2>
<p>假设我们有PetStore API的OpenAPI定义，我们需要为REST API和描述的模型_Pet_添加自定义验证。</p>`,r:{minutes:4.37,words:1312},t:"使用Swagger Codegen进行自定义验证",y:"a"}}],["/posts/baeldung/2024-07-23/2024-07-23-Getting%20a%20Bit%20at%20a%20Certain%20Position%20from%20Integral%20Values.html",{loader:()=>a(()=>import("./2024-07-23-Getting a Bit at a Certain Position from Integral Values.html-CRQ0iC4_.js"),__vite__mapDeps([1242,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Bit Manipulation"],g:["Java","Bitwise Operations","Bit Manipulation"],e:`
<p>有时我们需要测试一个数字中的二进制位是否被设置。这可能是因为我们使用数字作为一组标志，其中每个数字代表一个特定的布尔值。</p>
<p>在本教程中，我们将探讨从整数值（如字节、短整型、字符、整型和长整型）获取特定位置的位的不同方法。</p>
<h2>2. 测试特定位</h2>
<p>最常见的情况之一是我们想要使用掩码测试整数值的特定位。
例如，让我们检查字节值中的第三位是否被设置：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">byte</span> val1 <span class="token operator">=</span> <span class="token number">0b0110_0100</span><span class="token punctuation">;</span>
<span class="token keyword">byte</span> mask <span class="token operator">=</span> <span class="token number">0b0000_0100</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> isSet1 <span class="token operator">=</span> <span class="token punctuation">(</span>val1 <span class="token operator">&amp;</span> mask<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token function">assertTrue</span><span class="token punctuation">(</span>isSet1<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:4.97,words:1491},t:"从整数值获取特定位置的位",y:"a"}}],["/posts/baeldung/2024-07-23/2024-07-23-Guide%20to%20Netflix%20Spectator.html",{loader:()=>a(()=>import("./2024-07-23-Guide to Netflix Spectator.html-Cy-fRbhu.js"),__vite__mapDeps([1243,1])),meta:{d:17216928e5,l:"2024年7月23日",c:["Java","Netflix Spectator"],g:["Spectator","度量","监控"],e:'\n<h2>1. 概述</h2>\n<p><strong>Spectator 是一个用于代码度量和收集维度时间序列后端系统数据的库。</strong> Spectator 最初由 Netflix 开发用于各种度量数据的收集，与之对应的后端系统主要是 Atlas。</p>\n<p>在本教程中，我们将学习 Spectator 提供了什么以及我们如何使用它来收集度量数据。</p>\n<h2>2. Maven 依赖</h2>\n<p>在我们深入实际实现之前，让我们先在 <em>pom.xml</em> 文件中添加 Spectator 依赖：</p>\n<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>`&lt;dependency&gt;`\n    `&lt;groupId&gt;`com.netflix.spectator`&lt;/groupId&gt;`\n    `&lt;artifactId&gt;`spectator-api`&lt;/artifactId&gt;`\n    `&lt;version&gt;`1.7.7`&lt;/version&gt;`\n`&lt;/dependency&gt;`\n</code></pre></div>',r:{minutes:5.26,words:1579},t:"Netflix Spectator使用指南",y:"a"}}],["/posts/baeldung/2024-07-23/2024-07-23-Is%20Cassandra%20a%20Column%20Oriented%20or%20Column%20Family%20Database%20.html",{loader:()=>a(()=>import("./2024-07-23-Is Cassandra a Column Oriented or Column Family Database .html-BaNf_cUj.js"),__vite__mapDeps([1244,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Cassandra","Database"],g:["NoSQL","Data Model"],e:`
<p>Apache Cassandra 是一个开源的分布式 NoSQL 数据库，它被构建用于在多个数据中心处理大量数据。Cassandra 的数据模型在多个文档和论文中是讨论的话题，常常导致混淆或矛盾的信息。这是因为 Cassandra 能够分别存储和访问列族，这导致它被错误地分类为列式而不是列族。</p>
<p>在本教程中，我们将查看数据模型之间的差异，并确定 Cassandra 分区行存储数据模型的性质。</p>
<h2>2. 数据库数据模型</h2>
<p>Apache Cassandra git 仓库上的 README 说明如下：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>Cassandra 是一个分区行存储。行被组织成带有必需主键的表。

分区意味着 Cassandra 可以在应用透明的条件下跨多台机器分布您的数据。Cassandra 将自动重新分区，当集群中添加或移除机器时。

行存储意味着像关系数据库一样，Cassandra 按行和列组织数据。
</code></pre></div>`,r:{minutes:5.6,words:1680},t:"Apache Cassandra 是列式还是列族数据库？",y:"a"}}],["/posts/baeldung/2024-07-23/2024-07-23-JMX%20Ports.html",{loader:()=>a(()=>import("./2024-07-23-JMX Ports.html-Bhb74AFs.js"),__vite__mapDeps([1245,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","JMX"],g:["JMX","Java","端口"],e:`<hr>
<h1>JMX 端口</h1>
<h2>1. 概述</h2>
<p>在本教程中，我们将解释为什么 JMX 在启动时会打开三个端口。此外，我们将展示如何在 Java 中启动 JMX。之后，我们将展示如何限制打开的端口数量。</p>
<h2>2. JMX 定义</h2>
<p>首先让我们定义 JMX 框架是什么。<strong>Java 管理扩展 (JMX)</strong> 框架为管理 Java 应用程序提供了一个可配置、可扩展和可靠的基础设施。此外，它定义了一个 MBean 概念，用于应用程序的实时管理。该框架允许本地或远程管理应用程序。</p>
<h2>3. 在 Java 中启用 JMX</h2>`,r:{minutes:3.63,words:1090},t:"JMX 端口",y:"a"}}],["/posts/baeldung/2024-07-23/2024-07-23-Java%20HashMap%20With%20Different%20Value%20Types.html",{loader:()=>a(()=>import("./2024-07-23-Java HashMap With Different Value Types.html-CK8n9o1_.js"),__vite__mapDeps([1246,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","HashMap"],g:["Java","HashMap","Generics"],e:`
<ol>
<li>概述</li>
</ol>
<p>HashMap 存储键值映射。在本教程中，我们将讨论如何在 HashMap 中存储不同类型的值。</p>
<ol start="2">
<li>问题介绍</li>
</ol>
<p>自从 Java 泛型引入以来，我们通常以泛型的方式使用 HashMap，例如：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>Map\`&lt;String, Integer&gt;\` numberByName = new HashMap&lt;&gt;();
</code></pre></div>`,r:{minutes:5.74,words:1722},t:"Java HashMap 支持不同值类型",y:"a"}}],["/posts/baeldung/2024-07-23/2024-07-23-Kafka%20Streams%20With%20Spring%20Boot.html",{loader:()=>a(()=>import("./2024-07-23-Kafka Streams With Spring Boot.html-Bjcba2Gu.js"),__vite__mapDeps([1247,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Boot","Kafka Streams"],g:["Spring Boot","Kafka","Streams"],e:`
<p>在本文中，我们将了解如何使用 Spring Boot 设置 Kafka Streams。Kafka Streams 是建立在 Apache Kafka 之上的客户端库。它以声明式的方式使我们可以处理无限的事件流。</p>
<p>一些流数据的真实生活例子可能是传感器数据、股票市场事件流和系统日志。对于本教程，我们将构建一个简单的单词计数流应用程序。让我们首先了解 Kafka Streams 的概览，然后设置示例及其在 Spring Boot 中的测试。</p>
<h2>2. 概览</h2>
<p>Kafka Streams 提供了 Kafka 主题和关系数据库表之间的二元性。它使我们能够对一个或多个流事件执行诸如联接、分组、聚合和过滤等操作。</p>`,r:{minutes:6.13,words:1839},t:"Kafka Streams 与 Spring Boot | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-23/2024-07-23-Micronaut%20vs.%20Spring%20Boot.html",{loader:()=>a(()=>import("./2024-07-23-Micronaut vs. Spring Boot.html-C1yTX9xA.js"),__vite__mapDeps([1248,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Micronaut","Spring Boot"],g:["Java","Framework"],e:`
<p>在本教程中，我们将比较Micronaut和Spring Boot。Spring Boot是流行的Spring框架的一部分，用于快速启动Spring应用程序。Micronaut是一个基于JVM的框架，旨在解决Spring/Spring Boot的一些弱点。</p>
<p>我们将在几个领域比较这两个框架。首先，我们将比较创建新应用程序的便捷性、语言支持和其他配置选项。然后，我们将查看两个简单的REST应用程序。最后，我们将比较代码并测量性能差异。</p>
<h3>2. 功能</h3>
<p>在以下部分中，我们将分解两个框架中的几个功能。</p>
<h4>2.1. 设置</h4>
<p>首先，我们将比较在这两个框架中启动新应用程序的便捷性。</p>`,r:{minutes:7.81,words:2344},t:"Micronaut与Spring Boot的比较",y:"a"}}],["/posts/baeldung/2024-07-23/2024-07-23-Reading%20Values%20From%20Excel%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-23-Reading Values From Excel in Java.html-Df6cN5iz.js"),__vite__mapDeps([1249,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Apache POI"],g:["Excel","Java","教程"],e:'<hr>\n<h1>Java中从Excel读取数据值</h1>\n<p>当涉及到Microsoft Excel文件时，从不同单元格读取值可能有点棘手。Excel文件是按行和单元格组织的电子表格，可以包含字符串、数值、日期、布尔值，甚至是公式类型的值。Apache POI是一个提供一整套工具来处理不同Excel文件和值类型的库。</p>\n<p>在本教程中，我们将专注于学习如何处理Excel文件，遍历行和单元格，并使用正确的方法读取每种单元格值类型。</p>\n<h3>2. Maven依赖项</h3>\n<p>让我们从向pom.xml添加Apache POI依赖项开始：</p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`org.apache.poi`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`poi-ooxml`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`5.2.5`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n</code></pre></div>',r:{minutes:3.84,words:1153},t:"Java中从Excel读取数据值",y:"a"}}],["/posts/baeldung/2024-07-23/2024-07-23-Remote%20Monitoring%20with%20VisualVM%20and%20JMX.html",{loader:()=>a(()=>import("./2024-07-23-Remote Monitoring with VisualVM and JMX.html-Bb0XSGmu.js"),__vite__mapDeps([1250,1])),meta:{d:16383168e5,l:"2021年12月1日",c:["Java","VisualVM"],g:["Java","VisualVM","JMX","远程监控"],e:`
<p>在本文中，我们将学习如何使用VisualVM和Java管理扩展（JMX）对Java应用程序进行远程监控。</p>
<p>JMX是<strong>用于管理和监控JVM应用程序的标准API</strong>。JVM具有内置的仪器化工具，JMX可以利用这些工具进行管理与监控。因此，我们通常将这些工具称为“开箱即用的管理工具”或者在这种情况下称为“JMX代理”。</p>
<h2>3. VisualVM</h2>
<p>VisualVM是一个提供JVM轻量级分析功能的视觉工具。市场上有许多其他主流的分析工具。然而，<strong>VisualVM是免费的</strong>，并且从JDK 6U7版本开始捆绑发布，直到JDK 8的早期更新。对于其他版本，Java VisualVM作为一个独立的应用程序提供。</p>`,r:{minutes:4,words:1200},t:"使用VisualVM和JMX进行远程监控",y:"a"}}],["/posts/baeldung/2024-07-23/2024-07-23-Remove%20Duplicate%20Dependencies%20with%20Maven.html",{loader:()=>a(()=>import("./2024-07-23-Remove Duplicate Dependencies with Maven.html-PvirpRyT.js"),__vite__mapDeps([1251,1])),meta:{d:16540416e5,l:"2022年6月1日",c:["Maven","教程"],g:["Maven","依赖管理"],e:'<hr>\n<h1>Maven中移除重复依赖</h1>\n<p>在本教程中，我们将学习如何使用Maven命令在_pom.xml_中检测重复依赖。我们还将看到如何使用Maven Enforcer插件在存在重复依赖时使构建失败。</p>\n<h2>1. 概述</h2>\n<h2>2. 为什么要检测重复依赖？</h2>\n<p>在_pom.xml_中存在重复依赖的风险是，目标库的最新版本可能不会应用到我们项目的构建路径中。例如，考虑以下_pom.xml_：</p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span><span class="token punctuation">&gt;</span></span>``\n  [...]\n  `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>`\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n      ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```org.apache.commons```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n      ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```commons-lang3```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n      ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```3.12.0```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n      ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```org.apache.commons```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n      ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```commons-lang3```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n      ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```3.11```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n  `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>`\n  [...]\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span>``\n</code></pre></div>',r:{minutes:3.74,words:1122},t:"Maven中移除重复依赖",y:"a"}}],["/posts/baeldung/2024-07-23/2024-07-23-Replication%20Strategies%20and%20Partitioning%20in%20Cassandra.html",{loader:()=>a(()=>import("./2024-07-23-Replication Strategies and Partitioning in Cassandra.html-BqHUsXJN.js"),__vite__mapDeps([1252,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Database","Cassandra"],g:["Replication","Partitioning"],e:`
<p>在本文中，我们将学习Apache Cassandra如何在集群中的节点之间分区和分配数据。此外，我们将看到Cassandra如何在多个节点中存储复制的数据以实现高可用性。</p>
<h2>2. 节点</h2>
<p><strong>在Cassandra中，单个节点运行在服务器或虚拟机（VM）上</strong>。Cassandra是用Java语言编写的，这意味着Cassandra的运行实例是一个Java虚拟机（JVM）进程。Cassandra节点可以位于云中、本地数据中心或任何磁盘上。对于数据存储，根据推荐，我们应该使用本地存储或直连存储，而不是SAN。</p>
<p>Cassandra节点负责以分布式哈希表的形式存储所有数据。Cassandra提供了一个名为_nodetool_的工具，用于管理和检查节点或集群的状态。</p>`,r:{minutes:7.43,words:2228},t:"Apache Cassandra中的复制策略和分区",y:"a"}}],["/posts/baeldung/2024-07-23/2024-07-23-Serialize%20and%20Deserialize%20Booleans%20as%20Integers%20With%20Jackson.html",{loader:()=>a(()=>import("./2024-07-23-Serialize and Deserialize Booleans as Integers With Jackson.html-DzG17NET.js"),__vite__mapDeps([1253,1])),meta:{d:17217792e5,l:"2024年7月24日",c:["Java","Jackson"],g:["JSON","Serialization","Deserialization"],e:`
<p>Jackson库是Java世界处理JSON数据的事实标准。尽管Jackson有明确定义的默认设置，但要将布尔值映射为整数，我们仍然需要手动配置。</p>
<p>当然，一些开发人员想知道如何以最佳方式并以最小的努力实现这一点。</p>
<p>在本文中，我们将解释如何在Jackson中将布尔值序列化为整数和数字字符串，反之亦然。</p>
<h2>2. 序列化</h2>
<p>首先，我们将研究序列化部分。要测试布尔值到整数的序列化，让我们定义我们的模型，Game：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> paused<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> over<span class="token punctuation">;</span>

    <span class="token comment">// 构造函数，getter和setter</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:5.34,words:1601},t:"Jackson中将布尔值序列化为整数",y:"a"}}],["/posts/baeldung/2024-07-23/2024-07-23-Set%20the%20Name%20of%20a%20Thread%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-23-Set the Name of a Thread in Java.html-Dr7vPe-O.js"),__vite__mapDeps([1254,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Concurrency"],g:["Thread","Thread Name"],e:`<hr>
<h1>在Java中设置线程名称</h1>
<h2>1. 概述</h2>
<p>在本教程中，我们将探讨在Java中设置_线程_名称的不同方法。首先，我们将创建一个示例，运行两个_线程_。一个打印偶数，另一个只打印奇数。然后，我们将为我们的_线程_设置自定义名称并显示它们。</p>
<h2>2. 设置_线程_名称的方法</h2>
<p>_线程_是一个轻量级进程，可以并发执行。<strong>Java中的_线程_类为线程提供了默认名称。</strong></p>
<p>在某些情况下，我们可能需要知道哪个线程正在运行，因此为_线程_提供自定义名称可以使它在其他运行线程中更容易识别。</p>`,r:{minutes:2.78,words:833},t:"在Java中设置线程名称",y:"a"}}],["/posts/baeldung/2024-07-23/2024-07-23-Simulate%20touch%20Command%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-23-Simulate touch Command in Java.html-k0gVW0_4.js"),__vite__mapDeps([1255,1])),meta:{d:1721722988e3,e:`<p>我将为您提供网页内容的翻译。请稍等片刻，我将处理链接中的内容。</p>
<hr>
<p>date: 2024-07-23
category:</p>
<ul>
<li>Java</li>
<li>Tutorials
tag:</li>
<li>Java</li>
<li>Touch Command</li>
<li>Simulation
head:</li>
<li>
<ul>
<li>meta</li>
<li>name: keywords
content: Java, Touch Command, Simulation</li>
</ul>
</li>
</ul>
<hr>
<h1>Java 中模拟 touch 命令</h1>`,r:{minutes:1.16,words:349},t:"Java 中模拟 touch 命令",y:"a"}}],["/posts/baeldung/2024-07-23/2024-07-23-Solving%20the%20Hide%20Utility%20Class%20Public%20Constructor%20Sonar%20Warning.html",{loader:()=>a(()=>import("./2024-07-23-Solving the Hide Utility Class Public Constructor Sonar Warning.html-CUGV4dRg.js"),__vite__mapDeps([1256,1])),meta:{d:1721753221e3,c:["Java","SonarQube"],g:["Java","SonarQube","Code Quality"],e:`<hr>
<h1>Java SonarQube 隐藏隐式构造函数由于提供的网页内容仅显示了“Verifying you are human...”的验证信息，没有提供文章的标题、类别、标签或日期等详细信息，因此无法完成指定的翻译和格式化任务。如果网页内容有更新或提供更多信息，我将能够继续完成翻译和格式化工作。</h1>
<p>目前，根据网页显示的内容，我只能提供以下翻译：</p>
<hr>
<p>date: {2024-07-24}
category:</p>
<ul>
<li>网页安全验证
tag:</li>
<li>网页安全</li>
<li>连接验证
head:</li>
<li>
<ul>
<li>meta</li>
<li>name: keywords
content: 网页安全, 连接验证, 人工验证</li>
</ul>
</li>
</ul>`,r:{minutes:.62,words:187},t:"Java SonarQube 隐藏隐式构造函数由于提供的网页内容仅显示了“Verifying you are human...”的验证信息，没有提供文章的标题、类别、标签或日期等详细信息，因此无法完成指定的翻译和格式化任务。如果网页内容有更新或提供更多信息，我将能够继续完成翻译和格式化工作。",y:"a"}}],["/posts/baeldung/2024-07-23/2024-07-23-Speed%20up%20Spring%20Boot%20Startup%20Time.html",{loader:()=>a(()=>import("./2024-07-23-Speed up Spring Boot Startup Time.html-DyMFtfl7.js"),__vite__mapDeps([1257,1])),meta:{d:17216928e5,l:"2024年7月23日",c:["Spring Boot","Performance"],g:["Spring Boot","Startup Time","JVM","GraalVM"],e:`<hr>
<h1>提高Spring Boot启动时间</h1>
<h2>1. 引言</h2>
<p>在本教程中，我们将介绍不同的配置和设置，这些可以帮助减少Spring Boot的启动时间。首先，我们将讨论特定于Spring的配置。其次，我们将涵盖Java虚拟机选项。最后，我们将介绍如何利用GraalVM和原生镜像编译进一步减少启动时间。</p>
<h2>2. Spring调整</h2>
<p>在我们开始之前，让我们设置一个测试应用程序。我们将使用Spring Boot版本2.5.4，并将Spring Web、Spring Actuator和Spring Security作为依赖项。在_pom.xml_中，我们将添加_spring-boot-maven-plugin_，并配置打包我们的应用程序为jar文件：</p>`,r:{minutes:6.96,words:2088},t:"提高Spring Boot启动时间",y:"a"}}],["/posts/baeldung/2024-07-23/2024-07-23-Unix%20Domain%20Socket%20in%20Java%2016.html",{loader:()=>a(()=>import("./2024-07-23-Unix Domain Socket in Java 16.html-iu02-90F.js"),__vite__mapDeps([1258,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Socket"],g:["Unix Domain Socket","Java 16"],e:`<hr>
<h1>Unix域套接字在Java 16 | Baeldung</h1>
<h2>1. 引言</h2>
<p>在本教程中，我们将学习Unix域套接字通道。</p>
<p>我们将涵盖一些理论基础、优缺点，并构建一个简单的Java客户端-服务器应用程序，该应用程序使用Unix域套接字通道交换文本消息。</p>
<p>我们还将看看如何使用Unix域套接字连接数据库。</p>
<h2>2. Unix域套接字通道</h2>
<p>传统的进程间通信涉及由IP地址和端口号定义的TCP/IP套接字。它们用于互联网或私有网络上的网络通信。</p>
<p>另一方面，Unix域套接字仅限于同一物理主机上的进程之间的通信。它们在Unix操作系统中已经存在了几十年，但最近才被添加到Microsoft Windows中。因此，它们不再仅限于Unix系统。</p>`,r:{minutes:4.44,words:1333},t:"Unix域套接字在Java 16 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-23/2024-07-23-Use%20Dot%20%20.%20%20as%20the%20Decimal%20Separator%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-23-Use Dot  .  as the Decimal Separator in Java.html-C12dZbXV.js"),__vite__mapDeps([1259,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Programming"],g:["Java","Locale","DecimalFormat"],e:`
<p>在这个简短的教程中，我们将看到如何在Java中格式化数字输出时使用点“.”作为小数分隔符。</p>
<h3>2. 使用<code>String.format()</code>方法</h3>
<p>通常，我们只需要使用<code>String.format()</code>方法，如下所示：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">10.01d</span><span class="token punctuation">;</span>
<span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%.2f"</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:1.36,words:409},t:"Java中使用点“.”作为小数分隔符",y:"a"}}],["/posts/baeldung/2024-07-23/2024-07-23-Using%20return%20Inside%20a%20Lambda%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-23-Using return Inside a Lambda in Kotlin.html-B8zm4pUB.js"),__vite__mapDeps([1260,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin","Programming"],g:["Kotlin","Lambda","Return"],e:`
<p>在Kotlin中，函数是一等公民。此外，Lambda表达式提供了一种简洁而强大的方式表达功能。这些匿名函数使我们能够编写更具表现力的代码。</p>
<p>然而，由于Lambda的特性及其隐含的返回行为，Lambda内使用_return_关键字最初可能看起来令人困惑。在本教程中，我们将探索Kotlin中Lambda内_return_的使用。</p>
<h2>2. 问题介绍</h2>
<p>虽然Lambda通常依赖于隐式返回，但有时可能需要显式返回以处理复杂逻辑或跳出嵌套结构。</p>
<p>接下来，让我们看一个在Lambda中使用_return_的例子。</p>
<h3>2.1. 一个例子</h3>`,r:{minutes:5.05,words:1516},t:"Kotlin中Lambda内使用return的用法",y:"a"}}],["/posts/baeldung/2024-07-23/2024-07-23-Volatile%20Variables%20and%20Thread%20Safety.html",{loader:()=>a(()=>import("./2024-07-23-Volatile Variables and Thread Safety.html-CMqI5xbo.js"),__vite__mapDeps([1261,1])),meta:{d:16402176e5,l:"2021年12月23日",c:["Java","Concurrency"],g:["volatile","thread safety"],e:`
<p>尽管Java中的volatile关键字通常确保线程安全，但情况并非总是如此。在本教程中，我们将探讨共享volatile变量可能导致竞态条件的场景。</p>
<h2>什么是volatile变量？</h2>
<p>与其他变量不同，volatile变量是直接写入和从主内存中读取的。<strong>CPU不将volatile变量的值缓存。</strong></p>
<p>让我们看看如何声明一个volatile变量：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>static volatile int count = 0;
</code></pre></div>`,r:{minutes:5.95,words:1786},t:"Java中volatile变量与线程安全",y:"a"}}],["/posts/baeldung/2024-07-23/2024-07-23-Why%20Maven%20Uses%20a%20Different%20JDK.html",{loader:()=>a(()=>import("./2024-07-23-Why Maven Uses a Different JDK.html-Cjw1Tfuf.js"),__vite__mapDeps([1262,1])),meta:{d:16540416e5,l:"2022年6月1日",c:["Java","Maven"],g:["JDK","Maven配置"],e:`
<p>在本教程中，我们将解释为什么Maven可能会使用与系统中默认设置不同的Java版本。此外，我们将展示Maven的配置文件位于何处，然后解释如何在Maven中配置Java版本。</p>
<h2>2. Maven配置</h2>
<p>首先，让我们看一下系统配置的一个可能情况，其中Maven使用的Java版本与系统中默认设置的不同。Maven配置返回：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ mvn <span class="token parameter variable">-v</span>
Apache Maven <span class="token number">3.3</span>.9 <span class="token punctuation">(</span>bb52d8502b132ec0a5a3f4c09453c07478323dc5<span class="token punctuation">;</span> <span class="token number">2015</span>-11-10T17:41:47+01:00<span class="token punctuation">)</span>
Maven home: C:<span class="token punctuation">\\</span>Users<span class="token punctuation">\\</span>test<span class="token punctuation">\\</span>apps<span class="token punctuation">\\</span>maven<span class="token punctuation">\\</span><span class="token number">3.3</span>.9
Java version: <span class="token number">11.0</span>.10, vendor: Oracle Corporation
Java home: C:<span class="token punctuation">\\</span>my<span class="token punctuation">\\</span>java<span class="token punctuation">\\</span>jdk-11.0.10
Default locale: pl_PL, platform encoding: Cp1250
OS name: <span class="token string">"windows 10"</span>, version: <span class="token string">"10.0"</span>, arch: <span class="token string">"amd64"</span>, family: <span class="token string">"dos"</span>
</code></pre></div>`,r:{minutes:2.84,words:853},t:"Maven为何使用不同的JDK版本 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-24/2024-07-24-Assert%20That%20a%20Java%20Optional%20Has%20a%20Certain%20Value.html",{loader:()=>a(()=>import("./2024-07-24-Assert That a Java Optional Has a Certain Value.html-CVkZBit-.js"),__vite__mapDeps([1263,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Testing"],g:["Java Optional","AssertJ","JUnit"],e:`
<ol>
<li>
<p><strong>概述</strong>
当我们测试返回_Optional_对象的方法时，我们可能需要编写断言来检查_Optional_是否具有值，或者检查其内部的值。</p>
<p>在这个简短的教程中，我们将看看如何使用来自JUnit和AssertJ的函数来编写这些断言。</p>
</li>
<li>
<p><strong>测试Optional是否为空或非空</strong>
如果我们只需要找出_Optional_是否有值，我们可以对_isPresent_或_isEmpty_进行断言。</p>
<h3>2.1 测试_Optional_具有值</h3>
<p>如果一个_Optional_有值，我们可以对_Optional.isPresent_进行断言：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">assertTrue</span><span class="token punctuation">(</span>optional<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>然而，AssertJ库提供了一种更流畅的表达方式：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">assertThat</span><span class="token punctuation">(</span>optional<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3>2.2 测试Optional为空</h3>
<p>当使用JUnit时，我们可以反转逻辑：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">assertFalse</span><span class="token punctuation">(</span>optional<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>此外，从Java 11开始，我们可以使用_Optional.isEmpty_：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">assertTrue</span><span class="token punctuation">(</span>optional<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>然而，AssertJ也为我们提供了一个整洁的替代方案：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">assertThat</span><span class="token punctuation">(</span>optional<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></li>
<li>
<p><strong>测试_Optional_的值</strong>
通常我们想要测试_Optional_内部的值，而不仅仅是存在或不存在。</p>
<h3>3.1 使用_JUnit_断言</h3>
<p>我们可以使用_Optional.get_来提供值，然后在该值上编写断言：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Optional</span>\`\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\`\` optional <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"SOMEVALUE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"SOMEVALUE"</span><span class="token punctuation">,</span> optional<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>然而，使用_get_可能会引发异常，这使得测试失败更难理解。因此，我们可能更倾向于首先断言值是否存在：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">assertTrue</span><span class="token punctuation">(</span>optional<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"SOMEVALUE"</span><span class="token punctuation">,</span> optional<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>然而，<strong>_Optional_支持equals方法</strong>，所以我们可以使用一个具有正确值的_Optional_作为一般等式断言的一部分：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Optional</span>\`\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\`\` expected <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"SOMEVALUE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Optional</span>\`\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\`\` actual <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"SOMEVALUE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> actual<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3>3.2 使用_AssertJ_</h3>
<p>使用AssertJ，<strong>我们可以使用_hasValue_流畅的断言</strong>：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">assertThat</span><span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"SOMEVALUE"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasValue</span><span class="token punctuation">(</span><span class="token string">"SOMEVALUE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></li>
<li>
<p><strong>结论</strong>
在这篇文章中，我们探讨了几种测试_Optional_的方法。</p>
<p>我们看到了如何使用内置的JUnit断言与_isPresent_和_get_。我们还看到了_Optional.equals_如何为我们的断言提供了一种比较_Optional_对象的方法。</p>
<p>最后，我们看到了AssertJ断言，它为我们提供了一种流畅的语言来检查我们的_Optional_值。</p>
<p>正如往常一样，本文中呈现的代码可以在GitHub上找到。---
date: 2022-04-01
category:</p>
</li>
</ol>`,r:{minutes:3.79,words:1137},t:"断言Java Optional具有特定值",y:"a"}}],["/posts/baeldung/2024-07-24/2024-07-24-CassandraUnit%20Test%20Tutorial.html",{loader:()=>a(()=>import("./2024-07-24-CassandraUnit Test Tutorial.html-Cy_bWwHF.js"),__vite__mapDeps([1264,1])),meta:{d:17217792e5,l:"2024年7月24日",c:["Java","Cassandra"],g:["CassandraUnit","Unit Test"],e:`
<p>Apache Cassandra是一个功能强大的开源NoSQL分布式数据库。在之前的教程中，我们探讨了如何使用Cassandra和Java进行基本操作。</p>
<p>在本教程中，<strong>我们将在前一个教程的基础上，学习如何使用CassandraUnit编写可靠、自包含的单元测试。</strong></p>
<p>首先，我们将从设置和配置最新版本的CassandraUnit开始。然后，我们将探索几个示例，展示我们如何编写不依赖于外部数据库服务器运行的单元测试。</p>
<p>而且，如果您在生产环境中运行Cassandra，您肯定可以减少运行和维护自己的服务器的复杂性，转而使用Astra数据库，这是一个基于Apache Cassandra构建的<strong>云数据库</strong>。</p>`,r:{minutes:6.73,words:2019},t:"Cassandra单元测试教程",y:"a"}}],["/posts/baeldung/2024-07-24/2024-07-24-Chaining%20Constructors%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-24-Chaining Constructors in Java.html-BaGi7b-H.js"),__vite__mapDeps([1265,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Tutorial"],g:["Java","Constructor Chaining"],e:`
<p>在这个简短的教程中，我们将看到如何在Java中链式调用构造器。这是一种方便的设计理念，它减少了代码的重复，使代码更加易读。</p>
<p>首先，我们将解释构造器链式调用的含义。然后，我们将看到如何在同一个类中链式调用它们，以及如何使用父类的构造器。最后，我们将分析这种方法的优点和缺点。</p>
<h3>2.1. 同一类中构造器的链式调用</h3>
<p>让我们定义一个简单的<code>Person</code>类，它包含一些属性：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> middleName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>

    <span class="token comment">//getters, equals和hashcode</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:3.43,words:1028},t:"Java中构造器链式调用",y:"a"}}],["/posts/baeldung/2024-07-24/2024-07-24-Check%20if%20the%20First%20Letter%20of%20a%20String%20Is%20Uppercase.html",{loader:()=>a(()=>import("./2024-07-24-Check if the First Letter of a String Is Uppercase.html-DmkxO0ar.js"),__vite__mapDeps([1266,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","String Manipulation"],g:["Java","String","Uppercase"],e:`<hr>
<h1>检查字符串首字母是否大写</h1>
<h2>1. 引言</h2>
<p>在本简短教程中，我们将熟悉在Java中检查字符串首字母是否大写的不同选项。</p>
<h2>2. 示例</h2>
<p>首先，我们将定义在所有解决方案中使用的示例字符串：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> example <span class="token operator">=</span> <span class="token string">"Katie"</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:4.76,words:1427},t:"检查字符串首字母是否大写",y:"a"}}],["/posts/baeldung/2024-07-24/2024-07-24-Constructors%20in%20Java%20Abstract%20Classes.html",{loader:()=>a(()=>import("./2024-07-24-Constructors in Java Abstract Classes.html-DTZ4faTg.js"),__vite__mapDeps([1267,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Abstract Classes"],g:["Constructors","Java Abstract Classes"],e:`
<h2>1. 概述</h2>
<p>抽象类和构造器看起来可能不兼容。<strong>构造器是在类实例化时调用的方法</strong>，而<strong>抽象类不能被实例化</strong>。这听起来是不是有点反直觉？</p>
<p>在本文中，我们将看到抽象类为什么可以有构造器，以及在子类实例化时使用它们如何带来好处。</p>
<h2>2. 默认构造器</h2>
<p><strong>当一个类没有声明任何构造器时，编译器会为我们创建一个默认构造器</strong>。这对于抽象类来说也是成立的。即使没有显式构造器，抽象类也会有一个默认构造器可用。</p>
<p>在抽象类中，其派生类可以通过<code>_super()</code>调用抽象默认构造器：</p>`,r:{minutes:4.39,words:1316},t:"Java中的抽象类和构造器",y:"a"}}],["/posts/baeldung/2024-07-24/2024-07-24-Declaring%20Val%20and%20Var%20Variables%20in%20Lombok.html",{loader:()=>a(()=>import("./2024-07-24-Declaring Val and Var Variables in Lombok.html-GhSbYxYw.js"),__vite__mapDeps([1268,1])),meta:{d:17217792e5,l:"2024年7月24日",c:["Java","Lombok"],g:["Lombok","val","var"],e:`<hr>
<h1>Lombok中声明val和var变量</h1>
<h2>1. 引言</h2>
<p>项目Lombok帮助我们减少Java源代码中重复任务的冗余。在本教程中，我们将解释如何通过在Lombok中声明本地_val_和_var_变量来推断类型。</p>
<p><strong>Lombok提供了智能功能，以避免样板代码</strong>。例如，它隐藏了领域模型对象的getter和setter。Builder注解是另一个有趣的功能，它帮助正确实现Builder模式。</p>
<p>在以下部分中，我们将专注于<strong>Lombok定义不指定类型的局部变量的功能</strong>。我们将使用Lombok _val_和_var_类型来声明变量，并避免在源代码中添加额外的行。</p>`,r:{minutes:5.02,words:1507},t:"Lombok中声明val和var变量",y:"a"}}],["/posts/baeldung/2024-07-24/2024-07-24-Deserialize%20Snake%20Case%20to%20Camel%20Case%20With%20Jackson.html",{loader:()=>a(()=>import("./2024-07-24-Deserialize Snake Case to Camel Case With Jackson.html-8gDbluRn.js"),__vite__mapDeps([1269,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Jackson"],g:["JSON","Deserialization"],e:'<hr>\n<h1>使用Jackson将蛇形命名法JSON反序列化为驼峰命名法字段</h1>\n<p>字段名在JSON对象中可以有多种格式。当我们想要将这些加载到我们的POJOs中时，我们可能会遇到一个问题，即我们Java代码中的属性名与JSON中的命名约定不匹配。</p>\n<p>在这个简短的教程中，我们将看到如何使用<strong>Jackson</strong>将蛇形命名法JSON反序列化为驼峰命名法字段。</p>\n<h2>2. 安装Jackson</h2>\n<p>让我们从向我们的_pom.xml_文件中添加Jackson依赖开始：</p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`com.fasterxml.jackson.core`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`jackson-databind`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`2.13`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n</code></pre></div>',r:{minutes:2.54,words:762},t:"使用Jackson将蛇形命名法JSON反序列化为驼峰命名法字段",y:"a"}}],["/posts/baeldung/2024-07-24/2024-07-24-Get%20all%20the%20Keys%20in%20a%20JSON%20String%20Using%20JsonNode.html",{loader:()=>a(()=>import("./2024-07-24-Get all the Keys in a JSON String Using JsonNode.html-B6mwqbeh.js"),__vite__mapDeps([1270,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","JSON"],g:["Jackson","JsonNode"],e:`
<p>在本教程中，我们将探索使用_JsonNode_从JSON中提取所有嵌套键的不同方法。我们的目标是遍历一个JSON字符串并收集键名称到一个列表中。</p>
<h3>1. 概述</h3>
<p>Jackson库使用树模型来表示JSON数据。树模型为我们提供了一种有效的方式来与层次结构化的数据交互。</p>
<h3>2. 引言</h3>
<p>JSON对象在树模型中表示为节点。这使得对JSON内容执行CRUD操作变得更加容易。</p>
<h4>2.1 <em>ObjectMapper</em></h4>
<p>我们使用_ObjectMapper_类的方法来读取JSON内容。_ObjectMapper.readTree()_方法反序列化JSON并构建_JsonNode_实例的树。它以JSON源作为输入，并返回创建的树模型的根节点。然后，我们可以使用根节点遍历整个JSON树。</p>`,r:{minutes:1.42,words:426},t:"使用JsonNode从JSON字符串中获取所有键",y:"a"}}],["/posts/baeldung/2024-07-24/2024-07-24-HMAC%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-24-HMAC in Java.html-CaKrb24A.js"),__vite__mapDeps([1271,1])),meta:{d:16357248e5,l:"2021年11月1日",c:["Java","Security"],g:["HMAC","Java","BouncyCastle","Apache Commons"],e:`
<p>让我们考虑这样一个场景：两个参与者想要进行通信，并且他们需要一种方法来验证他们接收到的消息没有被篡改。基于哈希的消息认证码（HMAC）是一个不错的解决方案。</p>
<p>在本教程中，我们将探讨如何在Java中使用HMAC算法。</p>
<h2>2. 基于哈希的消息认证码（HMAC）</h2>
<p>HMAC是一种加密方法，保证了两个参与者之间消息的完整性。</p>
<p>HMAC算法由一个密钥和一个哈希函数组成。密钥是一段唯一的信息或一串字符。它被消息的发送者和接收者所知晓。</p>
<p>哈希函数是一种映射算法，将一个序列转换为另一个序列。</p>
<p>下面的图表展示了高级的HMAC算法：</p>`,r:{minutes:3.47,words:1041},t:"Java中的HMAC",y:"a"}}],["/posts/baeldung/2024-07-24/2024-07-24-Ignoring%20Commas%20in%20Quotes%20When%20Splitting%20a%20Comma%20separated%20String.html",{loader:()=>a(()=>import("./2024-07-24-Ignoring Commas in Quotes When Splitting a Comma separated String.html-wWzjh1st.js"),__vite__mapDeps([1272,1])),meta:{d:17217792e5,l:"2024年7月24日",c:["Java","编程"],g:["字符串处理","CSV解析"],e:`
<p>当处理包含逗号分隔值的文本时，可能需要忽略出现在引号子字符串中的逗号。</p>
<p>在本教程中，我们将探索在分割逗号分隔的字符串时忽略引号内逗号的不同方法。</p>
<h2>问题陈述</h2>
<p>假设我们需要分割以下逗号分隔的输入：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> input <span class="token operator">=</span> <span class="token string">"baeldung,tutorial,splitting,text,\\"ignoring this comma,\\""</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:5.61,words:1684},t:"忽略引号中的逗号在分割逗号分隔字符串时的处理方法 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-24/2024-07-24-Importing%20Maven%20Project%20into%20Eclipse.html",{loader:()=>a(()=>import("./2024-07-24-Importing Maven Project into Eclipse.html-DAKKpMVN.js"),__vite__mapDeps([1273,1])),meta:{d:16357248e5,l:"2021年11月1日",c:["Development","Tools"],g:["Eclipse","Maven"],e:`
<h2>1. 概述</h2>
<p>在本教程中，我们将看到如何将现有的Maven项目导入Eclipse。为此，我们可以使用Eclipse的Maven插件或Apache Maven Eclipse插件。</p>
<h2>2. Eclipse和Maven项目设置</h2>
<p>以我们的例子为例，我们将使用来自我们GitHub仓库的多模块Maven项目。一旦我们克隆了仓库或下载了项目，我们的多模块Maven项目的目录根应该看起来像这样：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>|-multimodulemavenproject
    |--daomodule
    |--entitymodule
    |--mainappmodule
    |--userdaomodule
    |--pom.xml
    |--README.md
</code></pre></div>`,r:{minutes:2.52,words:755},t:"将现有Maven项目导入Eclipse",y:"a"}}],["/posts/baeldung/2024-07-24/2024-07-24-Introduction%20to%20HexFormat%20in%20Java%2017.html",{loader:()=>a(()=>import("./2024-07-24-Introduction to HexFormat in Java 17.html-D6SCSULx.js"),__vite__mapDeps([1274,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","HexFormat"],g:["Java 17","Hexadecimal"],e:`
<p>在Java中，我们通常编写自己的方法来处理字节和十六进制字符串之间的转换。然而，Java 17引入了<code>java.util.HexFormat</code>，这是一个实用工具类，它<strong>可以转换原始类型、字节数组或字符数组到十六进制字符串，反之亦然</strong>。</p>
<p>在本教程中，我们将探索如何使用<code>HexFormat</code>并演示它提供的功能。</p>
<h2>2. Java 17之前处理十六进制字符串</h2>
<p>十六进制编号系统使用16作为基数来表示数字。这意味着它由16个符号组成，通常使用0-9的符号表示0到9的值，使用A-F的符号表示10到15的值。</p>`,r:{minutes:4.23,words:1269},t:"Java 17中HexFormat的介绍",y:"a"}}],["/posts/baeldung/2024-07-24/2024-07-24-Invoke%20a%20Static%20Method%20Using%20Java%20Reflection%20API.html",{loader:()=>a(()=>import("./2024-07-24-Invoke a Static Method Using Java Reflection API.html-CKU3S0OY.js"),__vite__mapDeps([1275,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Reflection API"],g:["Java Reflection","Static Method Invocation"],e:`<hr>
<h1>使用Java反射API调用静态方法</h1>
<h2>1. 概述</h2>
<p>在本快速教程中，我们将讨论如何使用反射API在Java中调用静态方法。</p>
<p>我们将涵盖两种不同的情况：</p>
<ul>
<li>静态方法是<strong>公共的</strong>。</li>
<li>静态方法是<strong>私有的</strong>。</li>
</ul>
<h2>2. 示例类</h2>
<p>为了使演示和解释更简单，我们首先创建一个<strong>GreetingAndBye</strong>类作为示例：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GreetingAndBye</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">greeting</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Hey %s, nice to meet you!"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">goodBye</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Bye %s, see you next time."</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.44,words:733},t:"使用Java反射API调用静态方法",y:"a"}}],["/posts/baeldung/2024-07-24/2024-07-24-Iterate%20Through%20an%20Array%20in%20Reverse%20Order%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-24-Iterate Through an Array in Reverse Order in Kotlin.html-YddvSwRI.js"),__vite__mapDeps([1276,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin","Programming"],g:["Kotlin","Array","Reverse Iteration"],e:`<hr>
<h1>在Kotlin中反转数组并迭代</h1>
<p>数组是存储和操作元素集合的基本数据结构。按自然顺序遍历数组是一项常见任务。然而，在某些情况下，需要按相反的顺序迭代它。</p>
<p>在本教程中，我们将探讨在Kotlin中按相反顺序迭代数组的各种方法。</p>
<h2>2. 问题介绍</h2>
<p>Kotlin通过提供简洁的语法和内置函数简化了数组操作。数组可以轻松初始化、操作，当然也可以遍历。例如，我们可以编写一个_for_循环来遍历其元素，或者使用_forEach{ … }_函数按自然顺序遍历数组。</p>
<p>然而，当涉及到按相反顺序迭代数组时，我们可能会想知道是否有专门的函数或是否需要一个变通方法。</p>`,r:{minutes:3.44,words:1032},t:"在Kotlin中反转数组并迭代",y:"a"}}],["/posts/baeldung/2024-07-24/2024-07-24-LDAP%20Authentication%20Using%20Pure%20Java.html",{loader:()=>a(()=>import("./2024-07-24-LDAP Authentication Using Pure Java.html-Buazu8QJ.js"),__vite__mapDeps([1277,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","LDAP"],g:["LDAP","JNDI","Java"],e:`<hr>
<h1>LDAP 使用纯 Java 进行认证</h1>
<h2><strong>1. 引言</strong></h2>
<p>在本文中，我们将介绍如何使用纯 Java 进行 LDAP 认证。此外，我们将探讨如何搜索用户的可区分名称（DN）。这很重要，因为 LDAP 需要 DN 来认证用户。</p>
<p>为了进行搜索和用户认证，我们将使用 Java 命名和目录接口（JNDI）的目录服务访问功能。</p>
<p>首先，我们将简要讨论 LDAP 和 JNDI 是什么。然后，我们将讨论如何通过 JNDI API 进行 LDAP 认证。</p>
<h2><strong>2. LDAP 是什么？</strong></h2>`,r:{minutes:8.12,words:2437},t:"LDAP 使用纯 Java 进行认证",y:"a"}}],["/posts/baeldung/2024-07-24/2024-07-24-List%20All%20the%20Classes%20Loaded%20in%20the%20JVM.html",{loader:()=>a(()=>import("./2024-07-24-List All the Classes Loaded in the JVM.html-CHUuHrB_.js"),__vite__mapDeps([1278,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["JVM","Java"],g:["CRaC","性能优化"],e:`
<p>Java应用程序以其启动缓慢和预热时间长而闻名。OpenJDK的CRaC（在检查点协调恢复）项目可以通过<strong>创建应用程序在性能峰值时的检查点</strong>并<strong>将JVM实例恢复到该点</strong>来帮助改善这些问题。</p>
<p>为了充分利用这一特性，BellSoft提供了为Java应用程序高度优化的容器。这些容器打包了Alpaquita Linux（一个为Java和云环境优化的全功能操作系统）和Liberica JDK（基于OpenJDK的开源Java运行时）。</p>
<p>这些即用型镜像允许我们轻松地在Spring Boot应用程序中<strong>集成CRaC</strong>：</p>`,r:{minutes:3.99,words:1197},t:"JVM中列出所有已加载的类",y:"a"}}],["/posts/baeldung/2024-07-24/2024-07-24-Logging%20Queries%20with%20Spring%20Data%20Cassandra.html",{loader:()=>a(()=>import("./2024-07-24-Logging Queries with Spring Data Cassandra.html-DO8ZFzqg.js"),__vite__mapDeps([1279,1])),meta:{d:17218656e5,l:"2024年7月25日",c:["Spring Data Cassandra","Logging Queries"],g:["Spring Boot","Apache Cassandra","NoSQL"],e:`
<p>Apache Cassandra是一个<strong>可扩展的分布式NoSQL数据库</strong>。Cassandra在节点之间传输数据，并提供持续的可用性，没有单点故障。实际上，Cassandra能够以异常的性能处理大量数据。</p>
<p>当开发使用数据库的应用程序时，能够记录和调试执行的查询是非常重要的。在本教程中，我们将探讨在使用Apache Cassandra与Spring Boot时如何记录查询和语句。</p>
<p>在我们的示例中，我们将使用Spring Data仓库抽象和_Testcontainers_库。我们将看到如何通过Spring配置配置Cassandra查询记录。此外，我们将探索Datastax请求记录器。我们可以为更高级的记录配置这个内置组件。</p>`,r:{minutes:6.7,words:2010},t:"使用Spring Data Cassandra记录查询",y:"a"}}],["/posts/baeldung/2024-07-24/2024-07-24-New%20Features%20in%20Java%2017.html",{loader:()=>a(()=>import("./2024-07-24-New Features in Java 17.html-FbVhJyIe.js"),__vite__mapDeps([1280,1])),meta:{d:16492896e5,l:"2022年4月7日",c:["Java","Java 17"],g:["Java 17","新特性"],e:`
<p>在本教程中，我们将讨论Java生态系统新版本Java SE 17的相关信息，包括新特性以及其发布过程、长期支持(LTS)和许可证的变更。</p>
<h2>从Java 8迁移到Java 17</h2>
<p>探索Java较新版本中提供的极为有用的特性。这些特性不仅易于学习，而且在计划从Java 8迁移到Java 17时，也可以快速实施，几乎不需要太多努力。</p>
<h2>JEP列表</h2>
<p>首先，让我们谈谈可能影响Java开发者日常工作的变化。</p>
<h3>2.1. 恢复始终严格的浮点运算语义 (JEP 306)</h3>
<p>这个JEP主要是针对科学应用，它使浮点运算始终严格一致。<strong>默认的浮点运算现在是_strict_或_strictfp_，两者都保证了在每个平台上进行浮点计算时得到相同的结果。</strong></p>`,r:{minutes:11.02,words:3306},t:"Java 17 新特性概览",y:"a"}}],["/posts/baeldung/2024-07-24/2024-07-24-Overriding%20Spring%20Boot%20Managed%20Dependency%20Versions.html",{loader:()=>a(()=>import("./2024-07-24-Overriding Spring Boot Managed Dependency Versions.html-DEhS77Fe.js"),__vite__mapDeps([1281,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Boot","Maven"],g:["Spring Boot","Maven","Gradle"],e:`<hr>
<h1>覆盖 Spring Boot 管理的依赖版本</h1>
<h2>1. 引言</h2>
<p>Spring Boot 是一个出色的框架，用于快速启动新项目。它帮助开发者快速创建新应用程序的一种方式是通过定义一套适合大多数用户的依赖项。</p>
<p>然而，在某些情况下，<strong>可能需要覆盖一个或多个依赖项的版本</strong>。</p>
<p>在本教程中，我们将探讨如何覆盖 Spring Boot 管理的依赖项及其版本。</p>
<h2>2. Spring Boot 材料清单 (BOM)</h2>
<p>让我们首先看看 Spring Boot 如何管理依赖项。简而言之，Spring Boot 使用材料清单 (BOM) 来定义依赖项和版本。</p>`,r:{minutes:4.52,words:1355},t:"覆盖 Spring Boot 管理的依赖版本",y:"a"}}],["/posts/baeldung/2024-07-24/2024-07-24-Remove%20HTML%20Tags%20Using%20Java.html",{loader:()=>a(()=>import("./2024-07-24-Remove HTML Tags Using Java.html-CYIqfepA.js"),__vite__mapDeps([1282,1])),meta:{d:17119296e5,l:"2024年4月1日",c:["Java","HTML"],g:["HTML","Java","Regex","Jsoup","HTMLCleaner","Jericho"],e:`<hr>
<h1>使用Java去除HTML标签</h1>
<h2>1. 概述</h2>
<p>有时，我们可能希望从HTML文档字符串中移除所有HTML标签并提取文本。</p>
<p>这个问题看起来相当简单。然而，根据需求的不同，它可能有不同的变体。</p>
<p>在本教程中，我们将讨论如何使用Java来实现这一点。</p>
<h2>2. 使用正则表达式</h2>
<p>既然我们已经将HTML作为_String_变量，我们需要进行一些文本操作。</p>
<p>面对文本操作问题时，正则表达式（Regex）可能是首先想到的方法。</p>
<p>从字符串中移除HTML标签对Regex来说并不是一个挑战，因为不管HTML元素的开始或结束，它们都遵循“\\u003c … \\u003e”的模式。</p>`,r:{minutes:6.23,words:1870},t:"使用Java去除HTML标签",y:"a"}}],["/posts/baeldung/2024-07-24/2024-07-24-Request%20Routing%20and%20Snitches%20in%20Cassandra.html",{loader:()=>a(()=>import("./2024-07-24-Request Routing and Snitches in Cassandra.html-CyNLYHPs.js"),__vite__mapDeps([1283,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Cassandra","Database"],g:["Snitch","Request Routing"],e:`
<p>在本教程中，我们将学习Snitch的作用以及Cassandra如何使用它来高效地路由请求。我们还将查看Cassandra中可用的各种类型的Snitch。</p>
<h2>1. 概述</h2>
<h2>2. Snitch是什么？</h2>
<p>Snitch简单地报告每个节点所属的机架和数据中心——本质上，它确定并告知Cassandra集群的网络拓扑。</p>
<p>有了对集群拓扑的了解，包括节点之间的相对接近性，Cassandra能够高效地将请求路由到集群中的适当节点。</p>
<h3>2.1. 写操作中的Snitch</h3>
<p>Cassandra使用Snitch的信息将节点分组到机架和数据中心中。<strong>为了避免在写操作期间发生相关故障，Cassandra尽一切努力不在同一机架上存储副本。</strong></p>`,r:{minutes:5.34,words:1601},t:"Cassandra中的请求路由和Snitch",y:"a"}}],["/posts/baeldung/2024-07-24/2024-07-24-Split%20a%20String%20Only%20on%20the%20First%20Occurrence%20of%20Delimiter.html",{loader:()=>a(()=>import("./2024-07-24-Split a String Only on the First Occurrence of Delimiter.html-Bc7qW1md.js"),__vite__mapDeps([1284,1])),meta:{d:17217792e5,l:"2024年7月24日",c:["Java"],g:["String","split"],e:`<hr>
<h1>在Java中仅在第一个分隔符处分割字符串</h1>
<h2>1. 概述</h2>
<p>在本教程中，我们将学习如何使用两种方法在Java中仅在第一个分隔符处分割一个_String_。</p>
<h2>2. 问题陈述</h2>
<p>假设我们有一个文本文件，每行都是一个字符串，由两部分组成——左部分表示一个人的名字，右部分表示他们的问候语：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>Roberto "I wish you a bug-free day!"
Daniele "Have a great day!"
Jonas "Good bye!"
</code></pre></div>`,r:{minutes:2.68,words:804},t:"在Java中仅在第一个分隔符处分割字符串",y:"a"}}],["/posts/baeldung/2024-07-24/2024-07-24-Splitting%20a%20Java%20String%20by%20Multiple%20Delimiters.html",{loader:()=>a(()=>import("./2024-07-24-Splitting a Java String by Multiple Delimiters.html-dzK-Ce6w.js"),__vite__mapDeps([1285,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","String Manipulation"],g:["Java","String","Split"],e:`<hr>
<h1>Java中按多个分隔符分割字符串</h1>
<h2>1. 引言</h2>
<p>我们都知道，分割字符串是一个非常常见的任务。然而，我们通常只使用一个分隔符进行分割。</p>
<p>在本教程中，我们将详细讨论<strong>按多个分隔符分割字符串的不同选项</strong>。</p>
<p>为了展示下面每种解决方案如何执行分割，我们将使用相同的示例字符串：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>String example = "Mary;Thomas:Jane-Kate";
String[] expectedArray = new String[]{"Mary", "Thomas", "Jane", "Kate"};
</code></pre></div>`,r:{minutes:3.73,words:1118},t:"Java中按多个分隔符分割字符串",y:"a"}}],["/posts/baeldung/2024-07-24/2024-07-24-What%20Is%20OncePerRequestFilter%20.html",{loader:()=>a(()=>import("./2024-07-24-What Is OncePerRequestFilter .html-BP70iCG5.js"),__vite__mapDeps([1286,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Framework"],g:["Spring","Java","OncePerRequestFilter"],e:`<hr>
<h1>OncePerRequestFilter 是什么？</h1>
<h2>1. 概述</h2>
<p>在本教程中，我们将学习 Spring 中的一种特殊类型的过滤器 <em>OncePerRequestFilter</em>。我们将看到它解决了什么问题，并通过一个快速示例了解如何使用它。</p>
<p>首先让我们理解过滤器是如何工作的。一个 <em>Filter</em> 可以在 servlet 执行之前或之后被调用。当一个请求被派发到一个 servlet 时，<em>RequestDispatcher</em> 可能会将其转发到另一个 servlet。在这种情况下，另一个 servlet 也可能有相同的过滤器。在这种情况下，<strong>同一个过滤器可能会被多次调用。</strong></p>`,r:{minutes:4.35,words:1304},t:"OncePerRequestFilter 是什么？",y:"a"}}],["/posts/baeldung/2024-07-25/2024-07-25-Add%20a%20Reference%20to%20Method%20Parameters%20in%20Javadoc.html",{loader:()=>a(()=>import("./2024-07-25-Add a Reference to Method Parameters in Javadoc.html-CYER_QO2.js"),__vite__mapDeps([1287,1])),meta:{d:16304544e5,l:"2021年9月1日",c:["Java","Javadoc"],g:["Java","Javadoc","Method Parameters"],e:`
<p>在Java语言中，我们可以使用Javadoc从Java源代码生成HTML格式的文档。本教程将介绍在Javadoc中添加方法参数引用的不同方式。</p>
<h2>不同的在Javadoc中添加方法参数引用的方式</h2>
<p>在这一部分，我们将讨论如何在Javadoc中添加方法参数的引用。我们将看到内联标签<code>{@code}</code>和HTML样式标签<code>&lt;code&gt;</code>在Javadoc中的使用。</p>
<p>此外，我们将看到<code>{@code}</code>和<code>&lt;code&gt;</code>标签如何处理一些特殊情况：</p>`,r:{minutes:3.06,words:918},t:"在Javadoc中添加方法参数引用",y:"a"}}],["/posts/baeldung/2024-07-25/2024-07-25-Cassandra%20Frozen%20Keyword.html",{loader:()=>a(()=>import("./2024-07-25-Cassandra Frozen Keyword.html-C31X5fp4.js"),__vite__mapDeps([1288,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Database","Apache Cassandra"],g:["frozen keyword","collections","user-defined types"],e:`
<p>在这个教程中，我们将讨论Apache Cassandra数据库中的_冻结_关键字。首先，我们将展示如何声明冻结的集合或用户定义类型（UDT）。接下来，我们将讨论使用示例以及它如何影响持久存储的基本操作。</p>
<h2>2. Cassandra数据库配置</h2>
<p>让我们使用docker镜像创建一个数据库，并使用_cqlsh_连接到数据库。接下来，我们应该创建一个_keyspace_：</p>
<div class="language-cql" data-ext="cql" data-title="cql"><pre class="language-cql"><code>CREATE KEYSPACE mykeyspace WITH replication = {'class':'SimpleStrategy', 'replication_factor' : 1};
</code></pre></div>`,r:{minutes:8.17,words:2450},t:"Apache Cassandra数据库中的冻结关键字",y:"a"}}],["/posts/baeldung/2024-07-25/2024-07-25-Convert%20Long%20to%20String%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-25-Convert Long to String in Java.html-CINAMlui.js"),__vite__mapDeps([1289,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Programming"],g:["Long to String","Java"],e:`
<p>在这篇简短的教程中，我们将学习如何在Java中将<strong>Long</strong>转换为<strong>String</strong>。</p>
<h2>2. 使用Long.toString()</h2>
<p>例如，假设我们有两个类型为<strong>long</strong>和<strong>Long</strong>的变量（一个是原始类型，另一个是引用类型）：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token number">10L</span><span class="token punctuation">;</span>
<span class="token class-name">Long</span> obj <span class="token operator">=</span> <span class="token number">15L</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:1.68,words:505},t:"Java中将Long转换为String的方法",y:"a"}}],["/posts/baeldung/2024-07-25/2024-07-25-Convert%20a%20Byte%20Array%20to%20a%20Numeric%20Representation%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-25-Convert a Byte Array to a Numeric Representation in Java.html-BqqsPHs3.js"),__vite__mapDeps([1290,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Byte Array"],g:["Java","Byte Array","Numeric Conversion"],e:`
<p>在本教程中，我们将探讨将字节数组转换为数值（int、long、float、double）及其反向转换的不同方法。</p>
<p>字节是计算机存储和处理信息的基本单位。Java语言中定义的原始类型是同时操作多个字节的便捷方式。因此，字节数组与原始类型之间存在固有的转换关系。</p>
<p>由于short和char类型仅由两个字节组成，它们不需要太多关注。因此，我们将重点放在字节数组与int、long、float和double类型的转换上。</p>
<h3>2. 使用位移运算符</h3>
<p>将字节数组转换为数值的最直接方法是使用位移运算符。</p>
<h4>2.1. 字节数组到int和long</h4>`,r:{minutes:7.89,words:2368},t:"Java中将字节数组转换为数值表示",y:"a"}}],["/posts/baeldung/2024-07-25/2024-07-25-Convert%20an%20Object%20to%20a%20Byte%20Array%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-25-Convert an Object to a Byte Array in Java.html-DQpQzvRV.js"),__vite__mapDeps([1291,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Serialization"],g:["Java","Object to byte array","Serialization"],e:`
<p>在这篇简短的教程中，我们将学习如何<strong>将Java对象转换为字节数组以及反向转换</strong>。</p>
<h2>2. 使用纯Java</h2>
<p>例如，假设我们有一个_User_类：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"User{name="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"}"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// getters and setters</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.88,words:563},t:"Java中对象与字节数组的转换",y:"a"}}],["/posts/baeldung/2024-07-25/2024-07-25-Format%20Swagger%20Text%20Descriptions.html",{loader:()=>a(()=>import("./2024-07-25-Format Swagger Text Descriptions.html-BhopcVWe.js"),__vite__mapDeps([1292,1])),meta:{d:16330464e5,l:"2021年10月1日",c:["OpenAPI","Swagger"],g:["文档格式化","YAML","JSON"],e:`
<h2>1. 引言</h2>
<p>OpenAPI规范（前Swagger规范）标准化了REST API文档语言，并且是平台无关的。我们可以以YAML或JSON格式创建<strong>OpenAPI文档</strong>。</p>
<p>另一方面，Swagger是一系列用于实现和使用该标准的<strong>工具集合</strong>。有些是免费的，有些是开源的，有些是商业的。这些工具帮助我们设计、文档化和使用REST API。</p>
<p>在本文中，我们将学习如何格式化OpenAPI文档中的文本描述。</p>
<h2>2. OpenAPI编辑器</h2>
<p>有几种工具支持我们创建OpenAPI文档。一些流行的工具包括：</p>`,r:{minutes:5.45,words:1636},t:"OpenAPI文档中的文本描述格式化 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-25/2024-07-25-Get%20a%20Field%20s%20Annotations%20Using%20Reflection.html",{loader:()=>a(()=>import("./2024-07-25-Get a Field s Annotations Using Reflection.html-jbHxMYu3.js"),__vite__mapDeps([1293,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Reflection"],g:["Annotations","Reflection","Java"],e:`<hr>
<h1>使用反射获取字段注解</h1>
<h2>1. 概述</h2>
<p>在本教程中，我们将学习如何获取字段的注解。此外，我们将解释保留策略元注解的工作原理。然后，我们将展示返回字段注解的两种方法之间的区别。</p>
<h2>2. 注解的保留策略</h2>
<p>首先，让我们看看_Retention_注解。它定义了注解的生命周期。这个元注解接受一个_RetentionPolicy_属性。也就是说，该属性定义了注解可见的生命周期：</p>
<ul>
<li><em>RetentionPolicy.SOURCE</em> – 仅在源代码中可见</li>
<li><em>RetentionPolicy.CLASS</em> – 在编译时对编译器可见</li>
<li><em>RetentionPolicy.RUNTIME</em> – 对编译器和运行时都可见</li>
</ul>`,r:{minutes:2.85,words:856},t:"使用反射获取字段注解",y:"a"}}],["/posts/baeldung/2024-07-25/2024-07-25-Get%20a%20Submap%20From%20a%20HashMap%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-25-Get a Submap From a HashMap in Java.html-DZfX7-Qo.js"),__vite__mapDeps([1294,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","HashMap"],g:["Java","HashMap","Submap"],e:`<hr>
<h1>从Java的HashMap中获取子映射</h1>
<h2>1. 概述</h2>
<p>在我们之前的教程《Java HashMap指南》中，我们展示了如何在Java中使用_HashMap_。</p>
<p>在这个简短的教程中，我们将学习<strong>如何根据一组键从</strong><em><strong>HashMap</strong></em><strong>中获取一个子映射</strong>。</p>
<h2>2. 使用Java 8 Stream</h2>
<p>例如，假设我们有一个_HashMap_和一个键列表：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Map</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>\`\`\` map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"E"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">List</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>\` keyList <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:1.12,words:336},t:"从Java的HashMap中获取子映射",y:"a"}}],["/posts/baeldung/2024-07-25/2024-07-25-Guide%20to%20Using%20ModelMapper.html",{loader:()=>a(()=>import("./2024-07-25-Guide to Using ModelMapper.html-CgWUX_TR.js"),__vite__mapDeps([1295,1])),meta:{d:16504992e5,l:"2022年4月21日",c:["Java","ModelMapper"],g:["ModelMapper","Java"],e:`
<ol>
<li>概述</li>
</ol>
<p>在之前的教程中，我们看到了如何使用ModelMapper映射列表。</p>
<p>在本教程中，我们将展示<strong>如何在ModelMapper中将数据映射到结构不同的对象之间。</strong></p>
<p>尽管ModelMapper的默认转换在典型情况下工作得很好，但我们将主要关注如何匹配使用默认配置无法处理的对象。</p>
<p>因此，这次我们将专注于属性映射和配置更改。</p>
<ol start="2">
<li>Maven依赖</li>
</ol>
<p>要开始使用ModelMapper库，我们将依赖项添加到我们的_pom.xml_:</p>`,r:{minutes:8.71,words:2614},t:"使用ModelMapper的指南",y:"a"}}],["/posts/baeldung/2024-07-25/2024-07-25-Hibernate%20s%20%20Object%20References%20an%20Unsaved%20Transient%20Instance%20%20Error.html",{loader:()=>a(()=>import("./2024-07-25-Hibernate s  Object References an Unsaved Transient Instance  Error.html-J1ntr35N.js"),__vite__mapDeps([1296,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Hibernate","Java"],g:["Hibernate","TransientObjectException","CascadeType"],e:`
<p>在本教程中，我们将了解如何解决Hibernate中常见的错误——“org.hibernate.TransientObjectException: object references an unsaved transient instance”。当我们尝试持久化一个受管理的实体，并且该实体引用了一个未保存的瞬时实例时，就会从Hibernate会话中得到这个错误。</p>
<h2>2. 问题描述</h2>
<p>TransientObjectException是在用户将瞬时实例传递给期望持久实例的会话方法时抛出的。避免此异常的最直接解决方案是<strong>通过持久化新实例或从数据库中获取一个实例，并在持久化之前将其与依赖实例关联</strong>。然而，这样做只涵盖了这个特定场景，并没有考虑到其他用例。</p>`,r:{minutes:6.16,words:1849},t:"Hibernate的“对象引用了一个未保存的瞬时实例”错误",y:"a"}}],["/posts/baeldung/2024-07-25/2024-07-25-JUnit%204%20on%20How%20to%20Ignore%20a%20Base%20Test%20Class.html",{loader:()=>a(()=>import("./2024-07-25-JUnit 4 on How to Ignore a Base Test Class.html-CS93cFTc.js"),__vite__mapDeps([1297,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","JUnit"],g:["JUnit 4","测试"],e:`<hr>
<h1>如何在JUnit 4中忽略基测试类</h1>
<h2>1. 概述</h2>
<p>本教程将讨论在JUnit 4中跳过运行基测试类中测试的可能解决方案。在本教程中，<strong>基类仅包含辅助方法，而子类将扩展它并运行实际测试</strong>。</p>
<h2>2. 绕过基测试类</h2>
<p>假设我们有一个包含一些辅助方法的_BaseUnitTest_类：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseUnitTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">helperMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.4,words:720},t:"如何在JUnit 4中忽略基测试类",y:"a"}}],["/posts/baeldung/2024-07-25/2024-07-25-Java%20Map%20%20%20keySet%20%20%20vs.%20entrySet%20%20%20vs.%20values%20%20%20Methods.html",{loader:()=>a(()=>import("./2024-07-25-Java Map   keySet   vs. entrySet   vs. values   Methods.html-DBWei-8v.js"),__vite__mapDeps([1298,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Collections"],g:["Java Map","keySet","entrySet","values"],e:`
<p>在本教程中，我们将讨论 Java 中 Map 接口的三种方法：keySet()、entrySet() 和 values()。这些方法分别用于检索 Map 中的键集合、键值映射集合和值集合。</p>
<h3>2. Map 初始化</h3>
<p>虽然我们可以在任何实现 Map 接口的类上使用这些方法，如 HashMap、TreeMap 和 LinkedHashMap，但这里我们将使用 HashMap。</p>
<p>让我们创建并初始化一个键类型为 String，值为 Integer 类型的 HashMap：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Map</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>\` map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:1.92,words:576},t:"Java Map – keySet() 与 entrySet() 以及 values() 方法 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-25/2024-07-25-Multiline%20Text%20in%20Excel%20Cell%20Using%20Apache%20POI.html",{loader:()=>a(()=>import("./2024-07-25-Multiline Text in Excel Cell Using Apache POI.html-BO8fu3a_.js"),__vite__mapDeps([1299,1])),meta:{d:16330464e5,l:"2021年10月1日",c:["Apache POI","Excel"],g:["多行文本","Java"],e:`
<ol>
<li>引言</li>
</ol>
<p>我们可以利用Apache POI在Microsoft Excel电子表格中以编程方式创建多行文本，但它们不会显示为多行。这是因为使用代码向单元格添加文本时，它不会自动调整单元格高度并应用所需的格式以将其转换为多行文本。</p>
<p>这个简短的教程将演示正确显示此类文本所需的代码。</p>
<ol start="2">
<li>Apache POI和Maven依赖</li>
</ol>
<p>Apache POI是一个开源库，允许软件开发者创建和操作Microsoft Office文档。作为先决条件，读者可以参考我们关于使用Java操作Microsoft Excel的文章以及使用Apache POI在Excel中插入行的教程。</p>`,r:{minutes:1.81,words:544},t:"使用Apache POI在Excel单元格中写入多行文本",y:"a"}}],["/posts/baeldung/2024-07-25/2024-07-25-New%20Features%20in%20Java%2016.html",{loader:()=>a(()=>import("./2024-07-25-New Features in Java 16.html-Bc_QgGqr.js"),__vite__mapDeps([1300,1])),meta:{d:1721952e6,l:"2024年7月26日",c:["Java","编程"],g:["Java 16","新特性"],e:`
<p>Java 16，于2021年3月16日发布，是继Java 15之后的短期增量发布。此版本带来了一些有趣的特性，例如记录（records）和封闭类（sealed classes）。</p>
<p>在本文中，我们将探索这些新特性中的一些。</p>
<h3>2. 通过代理实例调用接口的默认方法（JDK-8159746）</h3>
<p>作为接口中默认方法的增强，Java 16的发布增加了使用反射通过动态代理调用接口的默认方法的支持。</p>
<p>让我们通过一个简单的默认方法示例来说明：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>
    <span class="token keyword">default</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"world"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:7.38,words:2213},t:"Java 16 新特性概览",y:"a"}}],["/posts/baeldung/2024-07-25/2024-07-25-Parallel%20Test%20Execution%20for%20JUnit%205.html",{loader:()=>a(()=>import("./2024-07-25-Parallel Test Execution for JUnit 5.html-DZfqpwpj.js"),__vite__mapDeps([1301,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["JUnit","并行测试"],g:["JUnit 5","并行执行"],e:`
<p>在这篇文章中，我们将介绍如何使用JUnit 5执行并行单元测试。首先，我们将介绍基本配置和使用此功能的最低要求。接下来，我们将展示不同情况下的代码示例，并在最后讨论共享资源的同步。</p>
<p>并行测试执行是一个自5.3版本以来可选加入的实验性功能。</p>
<h2>2. 配置</h2>
<p>首先，<strong>我们需要在_src/test/resources_文件夹中创建一个_junit-platform.properties_文件以启用并行测试执行</strong>。我们通过在上述文件中添加以下行来启用并行化特性：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>junit.jupiter.execution.parallel.enabled = true
</code></pre></div>`,r:{minutes:5,words:1500},t:"JUnit 5的并行测试执行",y:"a"}}],["/posts/baeldung/2024-07-25/2024-07-25-Pattern%20Matching%20for%20Switch.html",{loader:()=>a(()=>import("./2024-07-25-Pattern Matching for Switch.html-C_qke-bn.js"),__vite__mapDeps([1302,1])),meta:{d:17218656e5,l:"2024年7月25日",c:["Java","Programming"],g:["Java SE 17","Pattern Matching","Switch"],e:`<hr>
<h1>Java SE 17 中的 switch 模式匹配</h1>
<h2>1. 概述</h2>
<p>Java SE 17 版本引入了 switch 表达式和语句的模式匹配（JEP 406）作为预览特性。模式匹配<strong>为我们在定义 switch 案例的条件时提供了更多的灵活性</strong>。</p>
<p>除了现在的案例标签可以包含模式外，选择表达式也不再仅限于几种类型。在模式匹配之前，switch 案例仅支持对选择表达式进行简单的测试，需要完全匹配一个常量值。</p>
<p>在本教程中，我们将涵盖三种不同的模式类型，这些模式可以应用于 switch 语句。我们还将探索一些 switch 的特定情况，比如覆盖所有值、排序子类和处理 null 值。</p>`,r:{minutes:6.08,words:1825},t:"Java SE 17 中的 switch 模式匹配",y:"a"}}],["/posts/baeldung/2024-07-25/2024-07-25-Prim%20s%20Algorithm%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-25-Prim s Algorithm in Kotlin.html-DXDZunbq.js"),__vite__mapDeps([1303,1])),meta:{d:17013888e5,l:"2023年12月1日",c:["Kotlin","Prim算法"],g:["Prim算法","最小生成树","图算法"],e:`<hr>
<h1>Prim算法在Kotlin中的实现</h1>
<h2>1. 引言</h2>
<p>在本教程中，我们将深入了解Prim算法。我们将了解它是什么以及如何在Kotlin中实现它。</p>
<h2>2. 什么是Prim算法？</h2>
<p><strong>Prim算法是一种贪心算法，用于为加权无向图找到最小生成树。</strong> 这是什么意思呢？</p>
<p>无向图是一种边没有方向的图。也就是说，我们可以沿着任何边的任一方向遍历。加权意味着每条边都有一个与之相关联的成本或权重：</p>
<figure><img src="https://www.baeldung.com/wp-content/uploads/sites/5/2023/12/Screenshot-2023-12-01-at-08.15.24-267x300.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>`,r:{minutes:6.22,words:1867},t:"Prim算法在Kotlin中的实现",y:"a"}}],["/posts/baeldung/2024-07-25/2024-07-25-Reactive%20Streams%20API%20with%20Ratpack.html",{loader:()=>a(()=>import("./2024-07-25-Reactive Streams API with Ratpack.html-ZVKMxwuw.js"),__vite__mapDeps([1304,1])),meta:{d:17218656e5,l:"2024年7月25日",c:["Java","Ratpack"],g:["Reactive Streams","Ratpack"],e:`<hr>
<h1>Ratpack 与反应式流 API</h1>
<h2>1. 引言</h2>
<p>Ratpack 是一个基于 Netty 引擎构建的框架，它允许我们快速构建 HTTP 应用程序。我们之前的文章已经介绍了它的基本用法。<strong>这次，我们将展示如何使用其流 API 实现反应式应用程序</strong>。</p>
<h2>2. 反应式流的快速回顾</h2>
<p>在深入实际实现之前，让我们首先回顾一下构成反应式应用程序的基本属性。根据原始作者的说法，这类应用程序必须具备以下属性：</p>
<ul>
<li>响应式</li>
<li>弹性</li>
<li>消息驱动</li>
</ul>`,r:{minutes:9.95,words:2984},t:"Ratpack 与反应式流 API",y:"a"}}],["/posts/baeldung/2024-07-25/2024-07-25-Saving%20Date%20Values%20in%20Spring%20Data%20Cassandra.html",{loader:()=>a(()=>import("./2024-07-25-Saving Date Values in Spring Data Cassandra.html-Dwg-la6q.js"),__vite__mapDeps([1305,1])),meta:{d:16330464e5,l:"2021年10月1日",c:["Spring Data Cassandra","Tutorial"],g:["Java","Cassandra","Spring Data"],e:`<hr>
<h1>在Spring Data Cassandra中保存日期值</h1>
<p>Apache Cassandra是一个可扩展的NoSQL数据库。它提供了<strong>无单点故障的持续可用性</strong>。此外，Cassandra能够以卓越的性能处理大量数据。</p>
<p>在本教程中，我们将探讨如何使用Spring Data和Docker连接到Cassandra。此外，我们将利用Spring Data的存储库抽象来处理Cassandra的数据层。</p>
<p>我们将看到如何在Cassandra中保存不同的Java日期值。最后，我们将研究这些日期值是如何映射到Cassandra类型的。</p>`,r:{minutes:4.65,words:1396},t:"在Spring Data Cassandra中保存日期值",y:"a"}}],["/posts/baeldung/2024-07-25/2024-07-25-Snapshotting%20Aggregates%20in%20Axon.html",{loader:()=>a(()=>import("./2024-07-25-Snapshotting Aggregates in Axon.html-BQ0tyi3x.js"),__vite__mapDeps([1306,1])),meta:{d:16304544e5,l:"2021年9月1日",c:["Axon","Event Sourcing"],g:["Axon Framework","Snapshotting"],e:`
<p>在本文中，我们将探讨 Axon 如何支持聚合快照。我们认为这篇文章是我们关于 Axon 主要指南的扩展。因此，我们将再次使用 Axon Framework 和 Axon Server。我们将在本文的实现中使用前者，后者是事件存储和消息路由器。</p>
<p>聚合快照
让我们首先理解聚合快照的含义。当我们开始在应用程序中使用事件溯源时，一个自然的问题是如何使我的应用程序中的聚合保持高性能？尽管有几种优化选项，最直接的是引入快照。</p>
<p>聚合快照是存储聚合状态的快照以提高加载性能的过程。当引入快照时，加载聚合以处理命令变成了一个两步过程：</p>
<ol>
<li>检索最近的快照（如果有），并使用它来溯源聚合。快照携带一个序列号，定义了它代表聚合状态的截止点。</li>
<li>从快照的序列号开始检索其余事件，并溯源聚合的其余部分。</li>
</ol>`,r:{minutes:4.73,words:1420},t:"Axon 中聚合快照的实现",y:"a"}}],["/posts/baeldung/2024-07-25/2024-07-25-Spring%20Boot%20vs%20Quarkus.html",{loader:()=>a(()=>import("./2024-07-25-Spring Boot vs Quarkus.html-BhIOYnTS.js"),__vite__mapDeps([1307,1])),meta:{d:16330464e5,l:"2021年10月1日",c:["Spring Boot","Quarkus"],g:["Java框架","性能比较"],e:`
<p>在本教程中，我们将专注于两个知名的Java框架Spring Boot和Quarkus之间的简单比较。到结束时，我们将更好地理解它们的相似之处和差异，以及一些特殊性。我们还将执行一些测试来衡量它们的性能并观察它们的行为。</p>
<p><strong>Spring Boot是一个基于Java的框架，专注于企业应用程序</strong>。它连接了所有Spring项目，并<strong>通过提供许多生产就绪的集成来帮助加速开发人员的生产力</strong>。</p>
<p>通过这样做，它减少了配置和样板代码的数量。此外，<strong>得益于其约定优于配置的方法</strong>，在运行时根据类路径上可用的依赖项自动注册默认配置，Spring Boot大大减少了许多Java应用程序的上市时间。</p>`,r:{minutes:8.61,words:2584},t:"Spring Boot与Quarkus | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-25/2024-07-25-Spring%20Security%20%20%20Request%20Rejected%20Exception.html",{loader:()=>a(()=>import("./2024-07-25-Spring Security   Request Rejected Exception.html-Ddo_qZtN.js"),__vite__mapDeps([1308,1])),meta:{d:1721952e6,l:"2024年7月26日",c:["Spring Security","Web Security"],g:["Request Rejected Exception","Path Traversal"],e:`
<h2><strong>1. 引言</strong></h2>
<p>Spring Framework 的 5.0 至 5.0.4 版本，以及 4.3 至 4.3.14 和其他旧版本，在 Windows 系统上存在目录或路径遍历安全漏洞。</p>
<p>错误配置静态资源可能会允许恶意用户访问服务器的文件系统。例如，在 Windows 上使用 file: 协议提供静态资源会提供对文件系统的非法访问。</p>
<p>Spring Framework 承认了这个漏洞，并在后续版本中进行了修复。</p>
<p>因此，这个修复保护应用程序免受路径遍历攻击。然而，由于这个修复，一些早期的 URL 现在会抛出 <em>org.springframework.security.web.firewall.RequestRejectedException</em> 异常。</p>`,r:{minutes:6.64,words:1993},t:"Spring Security – 请求被拒绝异常 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-25/2024-07-25-Update%20the%20Value%20Associated%20With%20a%20Key%20in%20a%20HashMap.html",{loader:()=>a(()=>import("./2024-07-25-Update the Value Associated With a Key in a HashMap.html-B1jQBCEl.js"),__vite__mapDeps([1309,1])),meta:{d:17218656e5,l:"2024年7月25日",c:["Java","HashMap"],g:["Java 8","更新键值"],e:`
<p>这篇文章将介绍在Java的HashMap中更新与给定键关联的值的不同方法。首先，我们将查看Java 8之前可用的一些常见解决方案。然后，我们将查看Java 8及以上版本中可用的一些额外解决方案。</p>
<h2>2. 初始化我们的示例HashMap</h2>
<p>为了展示如何在HashMap中更新值，我们首先需要创建并填充一个。因此，我们将创建一个以水果为键，它们的价格为值的映射：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Map</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span>\` priceMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
priceMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token number">2.45</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
priceMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"grapes"</span><span class="token punctuation">,</span> <span class="token number">1.22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:5.55,words:1664},t:"在HashMap中更新与给定键关联的值",y:"a"}}],["/posts/baeldung/2024-07-25/2024-07-25-Using%20Test%20Containers%20With%20Spring%20Data%20Cassandra.html",{loader:()=>a(()=>import("./2024-07-25-Using Test Containers With Spring Data Cassandra.html-Bv6q0K8_.js"),__vite__mapDeps([1310,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Data Cassandra","Testcontainers"],g:["Spring Boot","Cassandra","Integration Testing"],e:`<hr>
<h1>使用Testcontainers与Spring Data Cassandra</h1>
<h2>1. 概述</h2>
<p>Apache Cassandra 是一个开源的分布式 NoSQL 数据库。它被设计用来<strong>处理大量数据，具有快速的读写性能，并且没有单点故障</strong>。</p>
<p>在本教程中，我们将探讨测试一个使用 Cassandra 数据库的 Spring Boot 应用程序。我们将解释如何使用 Testcontainers 库中的 Cassandra 容器设置集成测试。此外，我们将利用 Spring Data 仓库抽象来处理 Cassandra 的数据层。</p>`,r:{minutes:5.83,words:1749},t:"使用Testcontainers与Spring Data Cassandra",y:"a"}}],["/posts/baeldung/2024-07-25/2024-07-25-Using%20a%20Custom%20Class%20as%20a%20Key%20in%20a%20Java%20HashMap.html",{loader:()=>a(()=>import("./2024-07-25-Using a Custom Class as a Key in a Java HashMap.html-CK6ieZ7o.js"),__vite__mapDeps([1311,1])),meta:{d:1721922987e3,e:`<h3>概述</h3>
<p>在本文中，我们将学习HashMap如何内部管理键值对以及如何编写自定义键实现。</p>
<h3>键管理</h3>
<h4>2.1 内部结构</h4>
<p>映射用于存储分配给键的值。键用于在Map中标识值并检测重复项。
尽管TreeMap使用Comparable#compareTo(Object)方法对键进行排序（也用于识别相等性），但HashMap使用基于哈希的结构，可以通过以下草图更容易地解释：
<img src="https://www.baeldung.com/wp-content/uploads/2021/10/hashtable.svg" alt="img" loading="lazy"></p>`,r:{minutes:4.17,words:1250},t:"",y:"a"}}],["/posts/baeldung/2024-07-26/2024-07-26-Access%20Control%20Models.html",{loader:()=>a(()=>import("./2024-07-26-Access Control Models.html-D0m9c-B0.js"),__vite__mapDeps([1312,1])),meta:{d:16304544e5,l:"2021年9月1日",c:["Java","Security"],g:["Access Control","RBAC","ACL","ABAC"],e:`
<p>在本文中，我们将探讨不同的访问控制模型以及如何在实践中实现它们。</p>
<h2>2. 什么是访问控制模型？</h2>
<p>应用程序，特别是基于Web的应用程序，通常需要满足一个共同的要求，即只有在满足一组特定条件（也称为策略）时，才能执行某些操作。这是一个非常通用的要求，让我们给出一些例子：</p>
<ul>
<li>互联网论坛：只有会员才能发布新消息或回复现有消息</li>
<li>电子商务网站：普通用户只能查看自己的订单</li>
<li>银行后台办公室：账户经理可以管理自己客户的投资组合。此外，当他们暂时不可用（例如，休假）时，账户经理还可以管理另一位账户经理客户的投资组合，并且前者充当其同行</li>
<li>数字钱包：在用户所在时区的20:00至08:00期间，支付限额为500美元</li>
</ul>`,r:{minutes:11.17,words:3351},t:"Java访问控制模型",y:"a"}}],["/posts/baeldung/2024-07-26/2024-07-26-Cassandra%20Partition%20Key%20%20Composite%20Key%20%20and%20Clustering%20Key.html",{loader:()=>a(()=>import("./2024-07-26-Cassandra Partition Key  Composite Key  and Clustering Key.html-OEzBVu-Z.js"),__vite__mapDeps([1313,1])),meta:{d:1627776e6,l:"2021年8月1日",c:["Database","Cassandra"],g:["Partition Key","Composite Key","Clustering Key"],e:`
<h2>1. 概述</h2>
<p>在Cassandra NoSQL数据库中，数据分布和数据建模与传统的关系型数据库不同。</p>
<p>在本文中，我们将学习分区键、复合键和聚簇键如何构成主键。我们还将看到它们之间的差异。因此，我们将触及Cassandra中的数据分布架构和数据建模主题。</p>
<h2>2. Apache Cassandra架构</h2>
<p>Apache Cassandra是一个开源的NoSQL分布式数据库，旨在实现高可用性和线性可扩展性，而不影响性能。</p>
<p>这是Cassandra的高级架构图：</p>
<figure><img src="https://www.baeldung.com/wp-content/uploads/2021/08/apache-cassandra-diagrams-01-1024x504.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>`,r:{minutes:6.68,words:2003},t:"Cassandra分区键、复合键和聚簇键 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-26/2024-07-26-Change%20the%20Default%20Location%20of%20the%20Log4j2%20Configuration%20File%20in%20Spring%20Boot.html",{loader:()=>a(()=>import("./2024-07-26-Change the Default Location of the Log4j2 Configuration File in Spring Boot.html-CYq5Xuz3.js"),__vite__mapDeps([1314,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Boot","Log4j2"],g:["Spring Boot","Log4j2","Configuration"],e:`<hr>
<h1>在Spring Boot中更改Log4j2配置文件的默认位置</h1>
<h2>1. 概述</h2>
<p>在我们之前的Spring Boot日志记录教程中，我们展示了如何在Spring Boot中使用Log4j2。</p>
<p>在这个简短的教程中，我们将学习如何<strong>更改Log4j2配置文件的默认位置</strong>。</p>
<h2>2. 使用属性文件</h2>
<p>默认情况下，我们将Log4j2配置文件（<em>log4j2.xml/log4j2-spring.xml</em>）保留在项目类路径或资源文件夹中。</p>
<p>我们可以通过在_ application.properties_文件中添加/修改以下行来更改此文件的位置：</p>`,r:{minutes:1.14,words:342},t:"在Spring Boot中更改Log4j2配置文件的默认位置",y:"a"}}],["/posts/baeldung/2024-07-26/2024-07-26-Compare%20the%20Content%20of%20Two%20Files%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-26-Compare the Content of Two Files in Java.html-Bzzsbxue.js"),__vite__mapDeps([1315,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","文件操作"],g:["文件比较","Java Stream I/O","Apache Commons I/O"],e:`
<h2>1. 概述</h2>
<p>在本教程中，我们将回顾不同的方法来确定两个文件的内容是否相等。我们将使用Java核心Stream I/O库来读取文件内容并实现基本比较。</p>
<p>最后，我们将回顾Apache Commons I/O提供的支持，以检查两个文件内容的相等性。</p>
<h2>2. 字节比较</h2>
<p>让我们从一种<strong>简单的方式来读取两个文件的字节并顺序比较它们</strong>。</p>
<p>为了加快文件读取速度，我们将使用_BufferedInputStream_。正如我们将看到的，_BufferedInputStream_从底层_InputStream_读取大块字节到内部缓冲区。当客户端读取完块中的所有字节时，缓冲区会从流中读取另一块字节。</p>`,r:{minutes:4.93,words:1478},t:"在Java中比较两个文件的内容 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-26/2024-07-26-Connect%20to%20Apache%20Kafka%20Running%20in%20Docker.html",{loader:()=>a(()=>import("./2024-07-26-Connect to Apache Kafka Running in Docker.html-BRoWhV5X.js"),__vite__mapDeps([1316,1])),meta:{d:1721952e6,l:"2024年7月26日",c:["Kafka","Docker"],g:["Apache Kafka","Docker"],e:`
<p>Apache Kafka是一个非常流行的事件流平台，经常与Docker一起使用。通常，当客户端不在同一个Docker网络或主机上时，人们会遇到与Kafka建立连接的问题。这主要是由于Kafka的公开监听器配置不当造成的。</p>
<p>在本教程中，我们将学习如何配置监听器，以便客户端可以连接到在Docker中运行的Kafka代理。</p>
<h2>2. 设置Kafka</h2>
<p>在我们尝试建立连接之前，我们需要使用Docker运行一个Kafka代理。这是我们的docker-compose.yaml文件的一个片段：</p>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'2'</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">zookeeper</span><span class="token punctuation">:</span>
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> zookeeper
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> kafka_network
    <span class="token punctuation">...</span>

  <span class="token key atrule">kafka</span><span class="token punctuation">:</span>
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> kafka
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> kafka_network
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 29092<span class="token punctuation">:</span><span class="token number">29092</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">KAFKA_LISTENERS</span><span class="token punctuation">:</span> EXTERNAL_SAME_HOST<span class="token punctuation">:</span>//<span class="token punctuation">:</span><span class="token number">29092</span><span class="token punctuation">,</span>INTERNAL<span class="token punctuation">:</span>//<span class="token punctuation">:</span><span class="token number">9092</span>
      <span class="token key atrule">KAFKA_ADVERTISED_LISTENERS</span><span class="token punctuation">:</span> INTERNAL<span class="token punctuation">:</span>//kafka<span class="token punctuation">:</span><span class="token number">9092</span><span class="token punctuation">,</span>EXTERNAL_SAME_HOST<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">29092</span>
      <span class="token key atrule">KAFKA_LISTENER_SECURITY_PROTOCOL_MAP</span><span class="token punctuation">:</span> INTERNAL<span class="token punctuation">:</span>PLAINTEXT<span class="token punctuation">,</span>EXTERNAL_SAME_HOST<span class="token punctuation">:</span>PLAINTEXT
      <span class="token key atrule">KAFKA_INTER_BROKER_LISTENER_NAME</span><span class="token punctuation">:</span> INTERNAL
    <span class="token punctuation">...</span>

<span class="token key atrule">networks</span><span class="token punctuation">:</span>
  <span class="token key atrule">kafka_network</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> kafka_docker_example_net
</code></pre></div>`,r:{minutes:5.69,words:1708},t:"在Docker中运行的Apache Kafka连接",y:"a"}}],["/posts/baeldung/2024-07-26/2024-07-26-Connecting%20to%20a%20Specific%20Schema%20in%20JDBC.html",{loader:()=>a(()=>import("./2024-07-26-Connecting to a Specific Schema in JDBC.html-CUOR8o3H.js"),__vite__mapDeps([1317,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["JDBC","PostgreSQL"],g:["Database Schema","PostgreSQL","JDBC"],e:`<hr>
<h1>通过JDBC连接到特定模式</h1>
<h2>1. 引言</h2>
<p>在本文中，我们将涵盖数据库模式的基础知识，为什么我们需要它们，以及它们是如何有用的。之后，我们将专注于使用PostgreSQL数据库的JDBC中设置模式的实际示例。</p>
<h2>2. 数据库模式是什么</h2>
<p>一般来说，数据库模式是一组规则，它规范了数据库。它是数据库的额外抽象层。有两种模式：</p>
<ol>
<li>逻辑数据库模式定义了适用于数据库中存储数据的规则。</li>
<li>物理数据库模式定义了数据在存储系统上如何物理存储的规则。</li>
</ol>
<p>在PostgreSQL中，模式指的是第一种。<strong>模式是一个逻辑命名空间，包含数据库对象，如表、视图、索引等。</strong> 每个模式属于一个数据库，每个数据库至少有一个模式。如果没有特别指定，PostgreSQL中的默认模式是public。我们创建的每个数据库对象，如果没有指定模式，都属于public模式。</p>`,r:{minutes:5.16,words:1547},t:"通过JDBC连接到特定模式",y:"a"}}],["/posts/baeldung/2024-07-26/2024-07-26-Convert%20an%20Array%20to%20a%20String.html",{loader:()=>a(()=>import("./2024-07-26-Convert an Array to a String.html-DelfNIMH.js"),__vite__mapDeps([1318,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin"],g:["Array","String","Conversion"],e:`<hr>
<h1>将数组转换为字符串 | Baeldung 关于 Kotlin## 将数组转换为字符串 | Baeldung 关于 Kotlin</h1>
<p>在本教程中，我们将讨论如何在 Kotlin 中将数组内容转换为字符串。首先，我们将探索四种不同的方法来实现这一点。然后，我们将根据它们的简洁性、不可变性和简单性进行比较。</p>
<p>我们将从内置方法 <code>contentToString()</code> 开始，该方法内部使用 Java 的静态方法 <code>Arrays.toString()</code>。之后，我们将学习如何使用 <code>reduce()</code> 和 <code>fold()</code> 聚合元素。最后，我们将通过在简单的 for 循环中连接元素来实现相同的功能。</p>`,r:{minutes:3.37,words:1010},t:"将数组转换为字符串 | Baeldung 关于 Kotlin## 将数组转换为字符串 | Baeldung 关于 Kotlin",y:"a"}}],["/posts/baeldung/2024-07-26/2024-07-26-Count%20Spaces%20in%20a%20Java%20String.html",{loader:()=>a(()=>import("./2024-07-26-Count Spaces in a Java String.html-DbxAzkvp.js"),__vite__mapDeps([1319,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","String Manipulation"],g:["Java","String","Spaces Count"],e:`<hr>
<h1>在Java字符串中计算空格数量</h1>
<h2>1. 概述</h2>
<p>当我们处理Java字符串时，有时我们可能希望计算字符串中的空格数量。</p>
<p>有多种方法可以得到结果。在这个快速教程中，我们将通过示例看到如何完成这个任务。</p>
<h2>2. 示例输入字符串</h2>
<p>首先，让我们准备一个输入字符串作为示例：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> <span class="token constant">INPUT_STRING</span> <span class="token operator">=</span> <span class="token string">"  This string has nine spaces and a Tab:'\\t'"</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:4.92,words:1475},t:"在Java字符串中计算空格数量",y:"a"}}],["/posts/baeldung/2024-07-26/2024-07-26-Custom%20Serializers%20in%20Apache%20Kafka.html",{loader:()=>a(()=>import("./2024-07-26-Custom Serializers in Apache Kafka.html-iTZaxGDz.js"),__vite__mapDeps([1320,1])),meta:{d:1721952e6,l:"2024年7月26日",c:["Apache Kafka","序列化"],g:["Kafka","序列化","自定义序列化器"],e:`
<ol>
<li>引言</li>
</ol>
<p>在Apache Kafka中传输消息时，客户端和服务器约定使用一种共同的语法格式。Apache Kafka提供了默认的转换器（例如_String_和_Long_），但同时也支持特定用例的自定义序列化器。在本教程中，我们将看到如何实现它们。</p>
<p><strong>序列化是将对象转换为字节的过程</strong>。反序列化是相反的过程——将字节流转换为对象。简而言之，它<strong>将内容转换为可读和可解释的信息</strong>。</p>
<p>正如我们所提到的，Apache Kafka为几种基本类型提供了预构建的序列化器和反序列化器，并允许我们实现自定义序列化器：</p>`,r:{minutes:4.75,words:1424},t:"Apache Kafka中的自定义序列化器",y:"a"}}],["/posts/baeldung/2024-07-26/2024-07-26-Deploying%20a%20Java%20War%20in%20a%20Docker%20Container.html",{loader:()=>a(()=>import("./2024-07-26-Deploying a Java War in a Docker Container.html-BxzzIa5b.js"),__vite__mapDeps([1321,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Docker","Java"],g:["Java WAR","Docker"],e:`
<p>在本教程中，我们将学习如何在Docker容器内部署Java WAR文件。
我们将在Apache Tomcat上部署WAR文件，Apache Tomcat是一个免费且开源的Web服务器，在Java社区中广泛使用。</p>
<p>WAR（Web Application Archive）是一个压缩归档文件，它打包了所有与Web应用程序相关的文件及其目录结构。</p>
<p>为了让事情变得简单，将WAR文件部署到Tomcat上无非就是将该WAR文件复制到Tomcat服务器的部署目录中。在Linux中，部署目录是_$CATALINA_HOME/webapps_。_$CATALINA_HOME_表示Tomcat服务器的安装目录。</p>`,r:{minutes:3.61,words:1084},t:"在Docker容器中部署Java WAR文件",y:"a"}}],["/posts/baeldung/2024-07-26/2024-07-26-Enabling%20Unlimited%20Strength%20Cryptography%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-26-Enabling Unlimited Strength Cryptography in Java.html-BCvv3nGJ.js"),__vite__mapDeps([1322,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Security"],g:["JCE","Cryptography"],e:`
<p>在本教程中，我们将学习为什么Java密码学扩展（JCE）的无限强度策略文件默认情况下并不总是启用的。此外，我们将解释如何检查密码学强度。之后，我们将展示如何在不同版本的Java中启用无限密码学。</p>
<h2>JCE无限强度策略文件</h2>
<p>让我们理解一下密码学强度的含义。它由发现密钥的难度来定义，这取决于所使用的密码算法和密钥的长度。通常，更长的密钥提供更强的加密。有限的密码学强度使用最大128位的密钥。另一方面，无限的强度使用最大长度为2147483647位的密钥。</p>
<p>正如我们所知，JRE本身包含加密功能。<strong>JCE使用管辖策略文件来控制密码学强度</strong>。<strong>策略文件由两个jar文件组成：<em>local_policy.jar</em> 和 <em>US_export_policy.jar</em></strong>。这使得Java平台内置了对密码学强度的控制。</p>`,r:{minutes:3.49,words:1047},t:"在Java中启用无限强度的密码学",y:"a"}}],["/posts/baeldung/2024-07-26/2024-07-26-Fixing%20the%20%20Declared%20package%20does%20not%20match%20the%20expected%20package%20%20Error.html",{loader:()=>a(()=>import("./2024-07-26-Fixing the  Declared package does not match the expected package  Error.html-CHVqj819.js"),__vite__mapDeps([1323,1])),meta:{d:1721962517e3,e:`<hr>
<h1>验证您是人类。这可能需要几秒钟。</h1>
<p>链接：https://www.baeldung.com/java-declared-expected-package-error</p>
<p>请注意，由于提供的网页内容不完整，无法获取到具体的日期、分类(category)、标签(tag)、关键词(keywords)和SEO内容(SEO content)。这些信息通常在网页的元数据或文章的头部信息中提供。如果需要翻译这些具体信息，请提供完整的页面内容。---
date: 2024-07-26
category:</p>
<ul>
<li>Java</li>
<li>编程
tag:</li>
<li>Java</li>
<li>错误</li>
<li>包
head:</li>
<li>
<ul>
<li>meta</li>
<li>name: keywords
content: Java, 错误, 包, 声明, 预期</li>
</ul>
</li>
</ul>`,r:{minutes:.87,words:262},t:"验证您是人类。这可能需要几秒钟。",y:"a"}}],["/posts/baeldung/2024-07-26/2024-07-26-Format%20a%20Milliseconds%20Duration%20to%20HH%20MM%20SS.html",{loader:()=>a(()=>import("./2024-07-26-Format a Milliseconds Duration to HH MM SS.html-CRYygA-Z.js"),__vite__mapDeps([1324,1])),meta:{d:1721952e6,l:"2024年7月26日",c:["Java","时间格式化"],g:["Java","时间","格式化","毫秒","HH:MM:SS"],e:`<hr>
<h1>将毫秒持续时间格式化为HH:MM:SS | Baeldung## 概述</h1>
<p>持续时间是指以小时、分钟、秒、毫秒等为单位表达的时间量。我们可能希望将持续时间格式化为特定的时间模式。</p>
<p>我们可以通过编写自定义代码并借助一些JDK库来实现这一点，或者使用第三方库。</p>
<p>在这个快速教程中，我们将看看如何编写简单的代码，将给定的持续时间格式化为HH:MM:SS格式。</p>
<h2>Java解决方案</h2>
<p>持续时间可以以多种方式表示——例如，以分钟、秒和毫秒表示，或者作为Java的_Duration_，它具有自己的特定格式。</p>
<p>本节和后续部分将专注于使用一些JDK库将以毫秒指定的间隔（经过的时间）格式化为HH:MM:SS。为了我们的例子，我们将格式化38114000ms为10:35:14（HH:MM:SS）。</p>`,r:{minutes:4.02,words:1206},t:"将毫秒持续时间格式化为HH:MM:SS | Baeldung## 概述",y:"a"}}],["/posts/baeldung/2024-07-26/2024-07-26-Generate%20a%20Java%20Class%20From%20JSON.html",{loader:()=>a(()=>import("./2024-07-26-Generate a Java Class From JSON.html-BkPqs3bB.js"),__vite__mapDeps([1325,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","JSON"],g:["jsonschema2pojo","Java类","POJO"],e:'\n<h2>1. 概述</h2>\n<p>在某些情况下，我们需要使用JSON文件创建Java类，也称为POJO。使用一个方便的<strong>jsonschema2pojo</strong>库，我们可以不必从头开始编写整个类。</p>\n<p>在本教程中，我们将看到如何使用这个库从JSON对象创建Java类。</p>\n<h2>2. 设置</h2>\n<p><strong>我们可以使用_jsonschema2pojo-core_依赖项将JSON对象转换为Java类：</strong></p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`org.jsonschema2pojo`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`jsonschema2pojo-core`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`1.1.1`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n</code></pre></div>',r:{minutes:2.59,words:776},t:"从JSON生成Java类 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-26/2024-07-26-Get%20All%20Running%20JVM%20Threads.html",{loader:()=>a(()=>import("./2024-07-26-Get All Running JVM Threads.html-CpxaUfN9.js"),__vite__mapDeps([1326,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","JVM"],g:["CRaC","Java性能","线程管理"],e:`
<p>Java应程序以其启动缓慢和预热时间长而闻名。OpenJDK中的CRaC（检查点的协调恢复）项目可以通过<strong>创建应用程序峰值性能的检查点</strong>并恢复JVM实例到该点来帮助改善这些问题。</p>
<p>要充分利用这一特性，BellSoft提供了高度优化的Java应用程序容器。这些容器打包了Alpaquita Linux（一个为Java和云环境优化的全功能操作系统）和Liberica JDK（基于OpenJDK的开源Java运行时）。</p>
<p>这些即用型镜像使我们能够轻松地在Spring Boot应用程序中<strong>集成CRaC</strong>：</p>`,r:{minutes:2.38,words:714},t:"获取当前JVM中所有运行的线程",y:"a"}}],["/posts/baeldung/2024-07-26/2024-07-26-Handling%20Exceptions%20in%20Project%20Reactor.html",{loader:()=>a(()=>import("./2024-07-26-Handling Exceptions in Project Reactor.html-CwBPNiND.js"),__vite__mapDeps([1327,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Reactive Programming"],g:["Project Reactor","Exception Handling"],e:'\n<p>在本教程中，我们将探讨在Project Reactor中处理异常的几种方式。代码示例中引入的操作符在_Mono_和_Flux_类中都有定义。然而，<strong>我们将只关注_Flux_类中的方法</strong>。</p>\n<h2>2. Maven依赖</h2>\n<p>让我们从添加Reactor核心依赖开始：</p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`io.projectreactor`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`reactor-core`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`3.6.0`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n</code></pre></div>',r:{minutes:4.82,words:1445},t:"在Project Reactor中处理异常",y:"a"}}],["/posts/baeldung/2024-07-26/2024-07-26-Inserting%20Delays%20Between%20Requests%20in%20Apache%20JMeter.html",{loader:()=>a(()=>import("./2024-07-26-Inserting Delays Between Requests in Apache JMeter.html-XcFYwvar.js"),__vite__mapDeps([1328,1])),meta:{d:16280352e5,l:"2021年8月4日",c:["Apache JMeter","性能测试"],g:["JMeter","延迟","测试计划"],e:`
<h2>1. 概述</h2>
<p>当我们使用Apache JMeter进行测试时，我们可能希望在请求之间添加延迟，以更好地模拟用户行为。</p>
<p>在本教程中，我们将创建一个简单的测试计划。我们将查看用于调整生成的工作负载的可用参数，并配置计时器以添加延迟。</p>
<h2>2. 使用案例</h2>
<p>有时我们可能希望在请求之间添加延迟：</p>
<ul>
<li>避免因在给定时间内发送太多请求而产生的错误</li>
<li>模拟具有自然间隔的实际用户操作</li>
<li>调整每分钟的请求数量，以更精细地控制工作负载配置</li>
</ul>
<h2>3. 使用延迟</h2>
<p>首先，我们需要定义负载配置文件。这里我们有多种目标：</p>`,r:{minutes:4.87,words:1460},t:"在Apache JMeter中在请求之间插入延迟 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-26/2024-07-26-Is%20Kotlin%20Pass%20By%20Value%20or%20Pass%20By%20Reference%20.html",{loader:()=>a(()=>import("./2024-07-26-Is Kotlin Pass By Value or Pass By Reference .html-BfNKIz_U.js"),__vite__mapDeps([1329,1])),meta:{d:17017344e5,l:"2023年12月5日",c:["Kotlin","Programming"],g:["Kotlin","Pass-by-Value","Pass-by-Reference"],e:`
<p>了解Kotlin在按值传递和按引用传递方面的行为对于有效使用该语言至关重要。</p>
<p>在本教程中，我们将探索Kotlin传递参数的行为。我们将通过一系列实际示例来检验按值传递和按引用传递。</p>
<p><strong>在Kotlin函数中，默认情况下参数是按值传递的，就像Java方法一样</strong>。这意味着参数的值作为函数的参数传递。如果我们在函数内更改参数的值，函数外原始值不会受到影响。这种机制的优点是防止函数外部意外更改。</p>
<p>在测试这种行为之前，重要的是要承认<strong>Kotlin中的参数不能重新赋值</strong>。当我们尝试这样做时，代码将无法编译，如下例所示：</p>`,r:{minutes:4.16,words:1248},t:"Kotlin是按值传递还是按引用传递？",y:"a"}}],["/posts/baeldung/2024-07-26/2024-07-26-Maven%20dependencyManagement%20vs.%20dependencies%20Tags.html",{loader:()=>a(()=>import("./2024-07-26-Maven dependencyManagement vs. dependencies Tags.html-BaTkk_g-.js"),__vite__mapDeps([1330,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Maven","Java"],g:["dependencyManagement","dependencies"],e:`
<p>在本教程中，我们将回顾 Maven 的两个重要标签 —— <em>dependencyManagement</em> 和 <em>dependencies</em>。</p>
<p>这些特性对于多模块项目尤其有用。</p>
<p>我们将回顾这两个标签的相似之处和不同之处，并且我们还将看看开发者在使用它们时常见的一些错误，这些错误可能会导致混淆。</p>
<h2>2. 使用</h2>
<p>通常，我们使 <em>dependencyManagement</em> 标签来避免在 <em>dependencies</em> 标签中重复定义 <em>version</em> 和 <em>scope</em> 标签。通过这种方式，所需依赖项在中央 POM 文件中声明。</p>`,r:{minutes:5.11,words:1534},t:"Maven dependencyManagement 与 dependencies 标签对比",y:"a"}}],["/posts/baeldung/2024-07-26/2024-07-26-Priority%20of%20a%20Thread%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-26-Priority of a Thread in Java.html-Biod6Q51.js"),__vite__mapDeps([1331,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Thread"],g:["Java","Thread Priority"],e:`
<p>在本教程中，我们将讨论<strong>Java线程调度器如何基于优先级执行线程</strong>。此外，我们还将涵盖Java中线程优先级的类型。</p>
<h2>2. 优先级类型</h2>
<p>在Java中，线程的优先级是一个介于1到10之间的整数。整数越大，优先级越高。线程调度器使用这个整数来决定哪个线程应该被允许执行。<strong>_Thread_类定义了三种优先级类型：</strong></p>
<ul>
<li>最低优先级</li>
<li>正常优先级</li>
<li>最高优先级</li>
</ul>
<p><em>Thread_类将这些优先级类型定义为常量_MIN_PRIORITY</em>, <em>NORM_PRIORITY_和_MAX_PRIORITY</em>，值分别为1, 5和10。<strong>_NORM_PRIORITY_是新_Thread_的默认优先级。</strong></p>`,r:{minutes:2.21,words:663},t:"Java线程优先级",y:"a"}}],["/posts/baeldung/2024-07-26/2024-07-26-Result%20Class%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-26-Result Class in Kotlin.html-DRB4UgpB.js"),__vite__mapDeps([1332,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin","Error Handling"],g:["Result Class","Kotlin"],e:`
<p>Kotlin提供了多种特性来增强代码的可读性、可维护性和健壮性。其中一种在错误处理中扮演关键角色的特性是_Result_类型。</p>
<p>在本教程中，我们将探讨什么是_Result_类，它为什么重要，以及如何在Kotlin中有效使用它。此外，我们将讨论实际用例，并提供代码片段以及相应的JUnit测试用例。</p>
<h3>2.1. 为什么_Result_很重要？</h3>
<p>Kotlin中_Result_类型的重要性在于它促进了显式的错误处理。通过强制开发者认真处理成功和失败的情况，_Result_最小化了忽视潜在错误的风险，有助于开发更健壮的应用程序。</p>
<p>此外，_Result_提供了比可空返回类型的优势，提供了一种有意识的方式来表示成功或失败。这不仅增强了代码的可读性，而且确保了代码的透明性，从而使开发者更容易理解程序流程，更容易推理代码。</p>`,r:{minutes:6.08,words:1823},t:"Kotlin中的Result类 | Baeldung关于Kotlin的教程",y:"a"}}],["/posts/baeldung/2024-07-26/2024-07-26-Run%20JUnit%20Test%20Cases%20From%20the%20Command%20Line.html",{loader:()=>a(()=>import("./2024-07-26-Run JUnit Test Cases From the Command Line.html-DWiPPNPZ.js"),__vite__mapDeps([1333,1])),meta:{d:17220384e5,l:"2024年7月27日",c:["Testing","JUnit"],g:["JUnit 5","Command Line"],e:`
<p>在本教程中，我们将了解如何直接从命令行运行JUnit 5测试。</p>
<h2>测试场景</h2>
<p>之前，我们已经介绍了如何以编程方式运行JUnit测试。对于我们的示例，我们将使用相同的JUnit测试：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FirstUnitTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenThis_thenThat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenSomething_thenSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenSomethingElse_thenSomethingElse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecondUnitTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenSomething_thenSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whensomethingElse_thenSomethingElse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:3.95,words:1185},t:"从命令行运行JUnit测试用例",y:"a"}}],["/posts/baeldung/2024-07-26/2024-07-26-Running%20a%20Single%20Test%20or%20Method%20With%20Maven.html",{loader:()=>a(()=>import("./2024-07-26-Running a Single Test or Method With Maven.html-CcCKDSPS.js"),__vite__mapDeps([1334,1])),meta:{d:16544736e5,l:"2022年6月6日",c:["Maven","Testing"],g:["Maven","Surefire Plugin","JUnit","Test"],e:`<hr>
<h1>使用Maven单独运行单个测试或方法</h1>
<h2>1. 概述</h2>
<p>通常，我们使用Maven surefire插件在Maven构建过程中执行测试。</p>
<p>本教程将探讨如何使用此插件来运行单个测试类或测试方法。</p>
<h2>2. 问题介绍</h2>
<p>Maven surefire插件使用起来非常简单。它只有一个目标：<em>test</em>。</p>
<p>因此，在默认配置下，我们可以通过命令 <em>mvn test</em> 执行项目中的所有测试。</p>
<p>有时，我们可能只想执行单个测试类甚至单个测试方法。</p>
<p>本教程将以JUnit 5作为测试提供者的例子，来说明如何实现这一点。</p>`,r:{minutes:4.6,words:1379},t:"使用Maven单独运行单个测试或方法",y:"a"}}],["/posts/baeldung/2024-07-26/2024-07-26-Spring%20Data%20with%20ArangoDB.html",{loader:()=>a(()=>import("./2024-07-26-Spring Data with ArangoDB.html-Dyp3cC_C.js"),__vite__mapDeps([1335,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Data","ArangoDB"],g:["Spring Data","ArangoDB","Java","Database"],e:`
<h2>1. 引言</h2>
<p>在本教程中，我们将学习如何使用 Spring Data 模块和 ArangoDB 数据库进行操作。ArangoDB 是一个免费且开源的多模型数据库系统。它支持键值对、文档和图形数据模型，具有统一的查询语言：AQL（ArangoDB 查询语言）。</p>
<p>我们将涵盖所需的配置、基本的 CRUD 操作、自定义查询和实体关系。</p>
<h2>2. ArangoDB 安装</h2>
<p>要安装 ArangoDB，我们首先需要从官方 ArangoDB 网站的下载页面下载软件包。</p>
<p>为了本教程的目的，我们将安装 ArangoDB 的社区版。详细的安装步骤可以在这里找到。</p>`,r:{minutes:5.51,words:1652},t:"Spring Data 与 ArangoDB | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-26/2024-07-26-Test%20WebSocket%20APIs%20With%20Postman.html",{loader:()=>a(()=>import("./2024-07-26-Test WebSocket APIs With Postman.html-CJhGhlfJ.js"),__vite__mapDeps([1336,1])),meta:{d:16304544e5,l:"2021年9月1日",c:["Web Development"],g:["Postman","WebSocket"],e:`
<p>在本文中，我们将创建一个带有WebSocket的应用程序，并使用Postman进行测试。</p>
<h2>2. Java WebSockets</h2>
<p><strong>WebSocket是在Web浏览器和服务器之间建立的双向、全双工、持久的连接</strong>。一旦WebSocket连接建立，连接就会保持开放状态，直到客户端或服务器决定关闭此连接。</p>
<p>WebSocket协议是我们应用程序处理实时消息的一种方式。最常见的替代方案是长轮询和服务器发送的事件。每种解决方案都有其优缺点。</p>
<p>在Spring中使用WebSocket的一种方式是使用STOMP子协议。<strong>然而，在本文中，我们将使用原始WebSocket，因为到目前为止，Postman中尚不支持STOMP。</strong></p>`,r:{minutes:3.34,words:1003},t:"使用Postman测试WebSocket API",y:"a"}}],["/posts/baeldung/2024-07-27/2024-07-27-Additional%20Source%20Directories%20in%20Maven.html",{loader:()=>a(()=>import("./2024-07-27-Additional Source Directories in Maven.html-BasKWQ7U.js"),__vite__mapDeps([1337,1])),meta:{d:16274304e5,l:"2021年7月28日",c:["Java","Maven"],g:["Maven","Source Directories"],e:`
<p>在本教程中，我们将解释如何在基于Maven的Java项目中添加多个源目录。</p>
<p>假设我们需要在_src/main_中添加一个_/newsrc_源目录：</p>
<p>首先，让我们在_src/main/newsrc/<em>文件夹中创建一个简单的Java类文件_DataConnection.java</em>：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataConnection</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">temp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"secondary source directory"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.22,words:667},t:"Maven中添加额外源目录",y:"a"}}],["/posts/baeldung/2024-07-27/2024-07-27-An%20Intro%20to%20Dapr%20with%20Spring%20Cloud%20Gateway.html",{loader:()=>a(()=>import("./2024-07-27-An Intro to Dapr with Spring Cloud Gateway.html-62ivn1sk.js"),__vite__mapDeps([1338,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Cloud","Dapr"],g:["Spring Cloud Gateway","Dapr"],e:`
<p>在本文中，我们将从Spring Cloud Gateway应用程序和Spring Boot应用程序开始。然后，我们将更新它以使用Dapr（分布式应用程序运行时）。最后，我们将更新Dapr配置以展示Dapr在与云原生组件集成时提供的<strong>灵活性</strong>。</p>
<p>使用Dapr，我们可以在不影响应用程序本身的情况下管理云原生应用程序的部署。Dapr使用<strong>边车模式</strong>来卸载应用程序的部署问题，这允许我们将应用程序部署到其他环境（例如本地、不同的专有云平台、Kubernetes等）<strong>而无需对应用程序本身进行任何更改</strong>。有关更多详细信息，请查看Dapr网站上的概述。</p>`,r:{minutes:6.75,words:2026},t:"Dapr 与 Spring Cloud Gateway 入门介绍",y:"a"}}],["/posts/baeldung/2024-07-27/2024-07-27-Architecture%20of%20a%20Geospatial%20Application%20with%20Java.html",{loader:()=>a(()=>import("./2024-07-27-Architecture of a Geospatial Application with Java.html-BTc1db06.js"),__vite__mapDeps([1339,1])),meta:{d:16250976e5,l:"2021年7月1日",c:["Java","Geospatial"],g:["Java","Geospatial","GIS","GPS"],e:`
<p>在本文中，我们将理解地理空间应用的核心架构和重要元素。我们将从理解什么是地理空间应用以及构建一个地理空间应用的典型挑战开始。</p>
<p>地理空间应用基本上是指利用地理空间数据来提供其核心功能的应用程序。简单来说，地理空间数据是任何代表地点、位置、地图、导航等的数据。即使没有花哨的定义，我们也经常被这些应用程序所包围。例如，我们最喜欢的拼车应用、外卖应用和电影预订应用都是地理空间应用。</p>
<p>地理空间数据基本上是描述具有地球表面或附近位置的对象、事件或其他特征的信息。例如，想象一个应用程序可以建议我们今天晚上最近的剧院播放我们最喜欢的莎士比亚戏剧。它可以通过结合剧院的位置信息、戏剧的属性信息以及事件的时间信息来实现这一点。</p>`,r:{minutes:17.13,words:5140},t:"基于Java的地理空间应用架构",y:"a"}}],["/posts/baeldung/2024-07-27/2024-07-27-Converting%20a%20PEM%20File%20to%20Java%20KeyStore%20Format.html",{loader:()=>a(()=>import("./2024-07-27-Converting a PEM File to Java KeyStore Format.html-D0tEOsyf.js"),__vite__mapDeps([1340,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","SSL"],g:["PEM","JKS","keytool","openssl"],e:`
<p>在之前的教程中，我们展示了如何将Java KeyStore（JKS）转换为PEM格式。在本教程中，我们将转换PEM格式为标准的Java KeyStore（JKS）格式。Java KeyStore是一个容器，用于存储与其匹配的私钥的证书。</p>
<p>我们将使用_keytool_和_openssl_命令的组合来完成从PEM到JKS的转换。_keytool_命令随JDK（Java开发工具包）提供，用于将PEM转换为PKCS12格式。第二个命令_openssl_需要下载，其作用是将PKCS12转换为JKS。</p>
<p>JKS是Java特有的文件格式，直到Java 8之前都是KeyStores的默认格式。从Java 9开始，PKCS#12成为默认的KeyStore格式。尽管JKS存在，PKCS#12是一个标准化的、语言中立的存储加密数据的格式。PKCS#12格式也被称为PKCS12或PFX。</p>`,r:{minutes:2.58,words:773},t:"将PEM文件转换为Java KeyStore格式",y:"a"}}],["/posts/baeldung/2024-07-27/2024-07-27-Creating%20a%20Kubernetes%20Admission%20Controller%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-27-Creating a Kubernetes Admission Controller in Java.html-CSbmyIDe.js"),__vite__mapDeps([1341,1])),meta:{d:16250976e5,l:"2021年7月1日",c:["Kubernetes","Java"],g:["Admission Controller","Java","Kubernetes"],e:`
<p>在与Kubernetes合作一段时间后，我们很快就会意识到其中涉及很多样板代码。即使是一个简单的服务，我们也需要提供所有必需的详细信息，通常以相当冗长的YAML文档的形式出现。</p>
<p>此外，当在给定环境中部署多个服务时，这些YAML文档往往包含很多重复的元素。例如，我们可能想要向所有部署中添加一个特定的_ConfigMap_或一些sidecar容器。</p>
<p>在本文中，我们将探讨如何使用Kubernetes准入控制器坚持DRY原则，避免所有这些重复的代码。</p>
<h2>2. 什么是准入控制器？</h2>
<p>准入控制器是Kubernetes用来在API请求经过身份验证但执行前进行预处理的机制。</p>`,r:{minutes:6.21,words:1863},t:"创建Java中的Kubernetes准入控制器",y:"a"}}],["/posts/baeldung/2024-07-27/2024-07-27-Creating%20a%20Self%20Signed%20Certificate%20With%20OpenSSL.html",{loader:()=>a(()=>import("./2024-07-27-Creating a Self Signed Certificate With OpenSSL.html-B4u-UjN6.js"),__vite__mapDeps([1342,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Open Source","SSL"],g:["OpenSSL","Self-Signed Certificate"],e:`
<h2>1. 概述</h2>
<p>OpenSSL是一个开源的命令行工具，允许用户执行各种与SSL相关的任务。</p>
<p>在本教程中，我们将学习<strong>如何使用OpenSSL创建自签名证书</strong>。</p>
<h2>2. 创建私钥</h2>
<p>首先，我们将创建一个私钥。私钥有助于实现加密，是我们证书中最重要的组成部分。</p>
<p>让我们使用<code>openssl</code>命令创建一个带密码保护的、2048位的RSA私钥（<em>domain.key</em>）：</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>openssl genrsa <span class="token parameter variable">-des3</span> <span class="token parameter variable">-out</span> domain.key <span class="token number">2048</span>
</code></pre></div>`,r:{minutes:5.68,words:1704},t:"使用OpenSSL创建自签名证书",y:"a"}}],["/posts/baeldung/2024-07-27/2024-07-27-Cyclically%20Rotate%20Array%20by%20One%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-27-Cyclically Rotate Array by One in Kotlin.html-1BmoXs5C.js"),__vite__mapDeps([1343,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin","Programming"],g:["Array","Rotation","Kotlin"],e:`
<h2>1. 引言</h2>
<p>在编程中，旋转数组经常在完成某些任务时非常有用。旋转数组意味着将数组的元素向前或向后移动一定数量的位置。</p>
<p>在本教程中，我们将讨论在Kotlin中循环旋转数组的一种方法。这简单地意味着将元素向右移动一个位置。</p>
<h2>2. 编程方法</h2>
<p>循环旋转数组的一种直接方法是使用一个临时变量和一个经典的_for()_循环。基本上，我们将数组的最后一个元素存储在一个临时变量中，并将数组的所有其他元素向右移动一个位置。最后，我们将临时变量放在数组的开头：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>fun rotateArrayByOneProgramaticApproach(arr: IntArray) {
    val temp = arr.last()
    for (i in arr.size - 1 downTo 1) {
        arr[i] = arr[i - 1]
    }
    arr[0] = temp
}
</code></pre></div>`,r:{minutes:4.64,words:1391},t:"Kotlin中循环旋转数组的一种方法 | Baeldung关于Kotlin",y:"a"}}],["/posts/baeldung/2024-07-27/2024-07-27-Default%20Values%20for%20Maven%20Properties.html",{loader:()=>a(()=>import("./2024-07-27-Default Values for Maven Properties.html-T1PXDmZl.js"),__vite__mapDeps([1344,1])),meta:{d:16540416e5,l:"2022年6月1日",c:["Maven","Java"],g:["Maven Properties","Build Automation"],e:`<hr>
<h1>Maven属性默认值</h1>
<p>Apache Maven是一个强大的构建自动化工具，主要用于Java项目。Maven使用项目对象模型（POM），其中包含有关项目的信息和构建项目的配置细节。在POM中，我们可以定义属性，这些属性可以在POM本身或多模块配置项目的任何子POM中使用。</p>
<p>Maven属性允许我们在一个地方定义值，并在项目定义中的多个不同位置使用它们。</p>
<p>在这篇短文中，我们将介绍如何配置默认值，以及如何使用它们。</p>
<h3>2. POM中的默认值</h3>
<p><strong>我们通常在POM中为Maven属性定义默认值</strong> - 为了演示这一点，我们将创建一个属性，该属性持有库依赖的默认值。让我们首先在POM中定义属性及其默认值：</p>`,r:{minutes:2.03,words:608},t:"Maven属性默认值",y:"a"}}],["/posts/baeldung/2024-07-27/2024-07-27-Difference%20Between%20MVC%20and%20MVP%20Patterns.html",{loader:()=>a(()=>import("./2024-07-27-Difference Between MVC and MVP Patterns.html-CJqdEHoC.js"),__vite__mapDeps([1345,1])),meta:{d:1627776e6,l:"2021年8月1日",c:["Software Engineering","Design Patterns"],g:["MVC","MVP"],e:`
<h2>1. 概述</h2>
<p>在本教程中，我们将学习模型-视图-控制器（Model View Controller，简称MVC）和模型-视图-呈现器（Model View Presenter，简称MVP）模式。我们还将讨论它们之间的区别。</p>
<h2>2. 设计模式和架构模式</h2>
<h3>2.1. 架构模式</h3>
<p>架构模式是软件架构中常见问题的通用且可复用的解决方案。它们对代码库有广泛的影响。</p>
<p>例如，它们会水平或垂直地影响软件。所谓水平，是指如何在一个层内组织代码。相反，垂直则意味着一个请求是如何从外层处理到内层并返回的。</p>
<p>一些更常见的架构模式包括<strong>MVC</strong>、<strong>MVP</strong>和<strong>MVVM</strong>。</p>`,r:{minutes:6.59,words:1977},t:"MVC和MVP模式的区别 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-27/2024-07-27-Disable%20the%20Maven%20Javadoc%20Plugin.html",{loader:()=>a(()=>import("./2024-07-27-Disable the Maven Javadoc Plugin.html-CUBoGpgf.js"),__vite__mapDeps([1346,1])),meta:{d:16540416e5,l:"2022年6月1日",c:["Maven","Javadoc"],g:["Maven","Javadoc","Java"],e:`
<h2>1. 概述</h2>
<p>Apache Maven Javadoc 插件允许我们在 Maven 构建过程中为指定项目生成 Javadocs。此外，该插件非常方便，因为它使用标准的 <em>javadoc</em> 工具自动生成 Javadocs。</p>
<p>在这个快速教程中，我们将看看如何在 Maven 构建中暂时禁用 Javadocs 生成。</p>
<h2>2. 问题介绍</h2>
<p>我们可以在我们的 <em>pom.xml</em> 中配置 Maven Javadoc 插件以生成 Javadocs 并将们附加到构建的 <em>jar</em> 文件上，例如：</p>
`,r:{minutes:1.74,words:523},t:"Maven禁用Javadoc插件",y:"a"}}],["/posts/baeldung/2024-07-27/2024-07-27-Find%20Whether%20an%20IP%20Address%20Is%20in%20the%20Specified%20Range%20or%20Not%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-27-Find Whether an IP Address Is in the Specified Range or Not in Java.html-BOFEPQue.js"),__vite__mapDeps([1347,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Networking"],g:["IP Address","Range Checking"],e:`
<p>在本教程中，我们将讨论如何使用Java确定一个IP地址是否在给定的范围内。在本文中，我们假定所有给定的IP地址都是有效的IPv4（互联网协议版本4）和IPv6（互联网协议版本6）地址。</p>
<h2>2. 问题介绍</h2>
<p>给定一个输入IP地址以及作为范围的另外两个IP地址（起始和结束）。我们应该能够确定输入的IP地址是否在给定的范围内。</p>
<p>例如：</p>
<ul>
<li>
<p>输入 = 192.220.3.0, 范围在 192.210.0.0 和 192.255.0.0 之间</p>
<p>输出 = true</p>
</li>
<li>
<p>输入 = 192.200.0.0, 范围在 192.210.0.0 和 192.255.0.0 之间</p>
<p>输出 = false</p>
</li>
</ul>`,r:{minutes:6.5,words:1950},t:"使用Java检查IP地址是否在指定范围内",y:"a"}}],["/posts/baeldung/2024-07-27/2024-07-27-Guava%20s%20Futures%20and%20ListenableFuture.html",{loader:()=>a(()=>import("./2024-07-27-Guava s Futures and ListenableFuture.html-C-2Bk1zX.js"),__vite__mapDeps([1348,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Guava"],g:["ListenableFuture","Futures"],e:`<hr>
<h1>Guava的Futures和ListenableFuture</h1>
<p>Guava为我们提供了ListenableFuture，它是一个比Java默认的Future拥有更丰富的API。让我们看看如何利用这一点。</p>
<p>让我们简单了解一下这些不同的类以及它们之间的关系。</p>
<h3>2.1 Future</h3>
<p>从Java 5开始，我们可以使用java.util.concurrent.Future来表示异步任务。</p>
<p>Future允许我们访问已经完成或将来可能完成的任务的结果，同时支持取消它们。</p>
<h3>2.2 ListenableFuture</h3>`,r:{minutes:9.42,words:2826},t:"Guava的Futures和ListenableFuture",y:"a"}}],["/posts/baeldung/2024-07-27/2024-07-27-Guide%20to%20Java%20BigInteger.html",{loader:()=>a(()=>import("./2024-07-27-Guide to Java BigInteger.html-DEDl47To.js"),__vite__mapDeps([1349,1])),meta:{d:16250976e5,l:"2021年7月1日",c:["Java","BigInteger"],g:["Java","BigInteger"],e:`<hr>
<h1>Java BigInteger 指南</h1>
<h2>1. 引言</h2>
<p>Java 提供了一些基本类型，如 <code>int</code> 或 <code>long</code>，用于执行整数运算。但有时，我们需要存储的数字会超出这些数据类型的可用限制。</p>
<p>在本教程中，我们将更深入地了解 <code>BigInteger</code> 类。我们将通过查看源代码来检查其结构，并回答这个问题——<strong>如何可能存储超出可用基本数据类型限制的大数字？</strong></p>
<h2>2. <code>BigInteger</code> 类</h2>`,r:{minutes:4.68,words:1403},t:"Java BigInteger 指南",y:"a"}}],["/posts/baeldung/2024-07-27/2024-07-27-Hosting%20a%20Maven%20Repository%20on%20GitHub.html",{loader:()=>a(()=>import("./2024-07-27-Hosting a Maven Repository on GitHub.html-Be0cGsac.js"),__vite__mapDeps([1350,1])),meta:{d:1627776e6,l:"2021年8月1日",c:["Maven","GitHub"],g:["Maven Repository","GitHub Pages"],e:`
<h2>1. 概述</h2>
<p>在本教程中，我们将了解如何使用_site-maven插件_在GitHub上托管一个带有源代码的Maven仓库。这是一种使用Nexus等仓库的可负担得起的替代方案。</p>
<h2>2. 前提条件</h2>
<p>如果我们还没有一个Maven项目的GitHub仓库，我们需要创建一个。在本文中，我们使用一个名为“<em>host-maven-repo-example</em>”的仓库，以及“main”分支。这是一个GitHub上的空仓库：</p>
<h2>3. Maven项目</h2>
<p>让我们创建一个简单的Maven项目。我们将把这个项目的生成的构件推送到GitHub。</p>`,r:{minutes:2.39,words:717},t:"在GitHub上托管Maven仓库",y:"a"}}],["/posts/baeldung/2024-07-27/2024-07-27-How%20to%20Create%20Password%20Protected%20Zip%20Files%20and%20Unzip%20Them%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-27-How to Create Password Protected Zip Files and Unzip Them in Java.html-BJZdVHMJ.js"),__vite__mapDeps([1351,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Zip4j"],g:["Java","Zip4j","密码保护","压缩文件"],e:'\n<ol>\n<li>概述</li>\n</ol>\n<p>在之前的教程中，我们展示了如何使用java.util.zip包在Java中进行压缩和解压。但我们没有标准的Java库来创建受密码保护的zip文件。</p>\n<p>在本教程中，我们将学习如何使用Zip4j库创建受密码保护的zip文件以及解压它们。它是Java中最全面的zip文件库。</p>\n<ol start="2">\n<li>依赖性</li>\n</ol>\n<p>让我们首先将zip4j依赖项添加到我们的pom.xml文件中：</p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`net.lingala.zip4j`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`zip4j`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`2.11.5`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n</code></pre></div>',r:{minutes:2.5,words:750},t:"如何在Java中创建受密码保护的Zip文件以及解压它们 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-27/2024-07-27-How%20to%20Implement%20LRU%20Cache%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-27-How to Implement LRU Cache in Java.html-Cp2jOFR4.js"),__vite__mapDeps([1352,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","LRU Cache"],g:["Java","LRU Cache","缓存","算法"],e:`
<p>在本教程中，我们将学习LRU缓存，并查看在Java中的一个实现。</p>
<p>最近最少使用（LRU）缓存是一种缓存逐出算法，它按使用顺序组织元素。正如名字所暗示的，在LRU中，使用时间最长的元素将从缓存中被逐出。</p>
<p>例如，如果我们有一个容量为三个项目的缓存：</p>
<figure><img src="https://www.baeldung.com/wp-content/uploads/2021/07/Screenshot-from-2021-07-03-14-30-34-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>`,r:{minutes:6.91,words:2073},t:"如何在Java中实现LRU缓存",y:"a"}}],["/posts/baeldung/2024-07-27/2024-07-27-Intro%20to%20Ktorm%20%20ORM%20Framework%20for%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-27-Intro to Ktorm  ORM Framework for Kotlin.html-S46FX2KF.js"),__vite__mapDeps([1353,1])),meta:{d:1722085205e3,e:`<hr>
<h1>Kotlin中的Ktorm ORM框架</h1>
<p>请注意，由于提供的网页内容不完整，无法获取到实际的日期、类别(category)、标签(tag)、SEO关键词(keywords)和SEO内容(SEO content)。因此，上述模板中的相应部分被保留为占位符。您可以访问链接并获取完整的页面信息，然后替换这些占位符以生成准确的输出。</p>
`,r:{minutes:.4,words:119},t:"Kotlin中的Ktorm ORM框架",y:"a"}}],["/posts/baeldung/2024-07-27/2024-07-27-Is%20java.sql.Connection%20Thread%20Safe%20.html",{loader:()=>a(()=>import("./2024-07-27-Is java.sql.Connection Thread Safe .html-D5Y2vKE6.js"),__vite__mapDeps([1354,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","JDBC"],g:["Connection","Thread-Safety"],e:`<hr>
<h1>java.sql.Connection 是否线程安全？ | Baeldung---</h1>
<p>date: 2022-04-01
category:</p>
<ul>
<li>Java</li>
<li>JDBC
tag:</li>
<li>Connection</li>
<li>Thread-Safety
head:</li>
<li>
<ul>
<li>meta</li>
<li>name: keywords
content: Java, JDBC, Connection, Thread-Safety</li>
</ul>
</li>
</ul>
<hr>
<h1>java.sql.Connection 是否线程安全？ | Baeldung</h1>`,r:{minutes:4.85,words:1456},t:"java.sql.Connection 是否线程安全？ | Baeldung---",y:"a"}}],["/posts/baeldung/2024-07-27/2024-07-27-Java%20Annotation%20Attribute%20Value%20Restrictions.html",{loader:()=>a(()=>import("./2024-07-27-Java Annotation Attribute Value Restrictions.html-DATDSo6V.js"),__vite__mapDeps([1355,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Annotations"],g:["Java Annotation","Attribute Value Restrictions"],e:`<hr>
<h1>Java 注解属性值限制</h1>
<h2>1. 概述</h2>
<p>如今，很难想象没有注解的 Java，注解是 Java 语言中的强大工具。</p>
<p>Java 提供了一组内置注解。此外，还有许多来自不同库的注解。我们甚至可以定义和处理我们自己的注解。我们可以调整这些注解的属性值，但这些属性值有限制。特别是，<strong>注解属性值必须是常量表达式</strong>。</p>
<p>在本教程中，我们将学习这种限制的一些原因，并深入 JVM 内部以更好地解释它。我们还将查看一些涉及注解属性值的问题和解决方案的示例。</p>
<h2>2. Java 注解属性的内部机制</h2>`,r:{minutes:4.95,words:1486},t:"Java 注解属性值限制",y:"a"}}],["/posts/baeldung/2024-07-27/2024-07-27-Looking%20for%20a%20Java%20Team%20Lead%20with%20Spring%20Experience%20%20Remote%20%20%20Part%20Time%20%20%20not%20open%20.html",{loader:()=>a(()=>import("./2024-07-27-Looking for a Java Team Lead with Spring Experience  Remote   Part Time   not open .html-COK4yLR9.js"),__vite__mapDeps([1356,1])),meta:{d:17220384e5,l:"2024年7月27日",c:["招聘","Java开发"],g:["Java Team Lead","远程工作"],e:`
<p><strong>此职位目前不开放。</strong></p>
<h3>关于我们</h3>
<p>Baeldung 是一家专注于编程领域的学习和媒体公司。我们是一支灵活的、完全远程的团队。</p>
<h3>职位描述</h3>
<p>我们正在寻找一位具有扎实Spring经验的<strong>高级Java开发人员</strong>，加入我们的团队，帮助指导团队维护Baeldung背后的代码库，以及开发以教学为重点的材料——特别是课程。</p>
<p>这个角色包括审查开发团队在更新网站上的现有帖子、改进代码库或开发课程中的新课程方面的工作。这意味着进行代码审查，并在团队内提供技术指导，必要时更新内部指南。</p>`,r:{minutes:1.58,words:473},t:"寻找具有Spring经验的Java团队领导（远程）（兼职）（目前不开放）| Baeldung",y:"a"}}],["/posts/baeldung/2024-07-27/2024-07-27-Set%20JWT%20with%20Spring%20Boot%20and%20Swagger%20UI.html",{loader:()=>a(()=>import("./2024-07-27-Set JWT with Spring Boot and Swagger UI.html-BVZ8ImE2.js"),__vite__mapDeps([1357,1])),meta:{d:16015104e5,l:"2020年10月1日",c:["Spring Boot","Swagger UI"],g:["JWT","API","Security"],e:'\n<p>在本简短教程中，我们将了解如何配置Swagger UI以在调用我们的API时包含JSON Web Token（JWT）。</p>\n<h2>2. Maven依赖项</h2>\n<p>在这个例子中，我们将使用springdoc-openapi-ui，它包含了开始使用Swagger和Swagger UI所需的所有依赖项。让我们将其添加到我们的_pom.xml_文件中：</p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>``org.springframework.boot``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>``spring-boot-starter-web``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>``org.springdoc``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>``springdoc-openapi-ui``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>``\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`1.7.0`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n</code></pre></div>',r:{minutes:1.82,words:546},t:"使用Spring Boot和Swagger UI设置JWT",y:"a"}}],["/posts/baeldung/2024-07-27/2024-07-27-Significance%20of%20Getters%20and%20Setters%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-27-Significance of Getters and Setters in Java.html-BA0xkOhr.js"),__vite__mapDeps([1358,1])),meta:{d:17221248e5,l:"2024年7月28日",c:["Java","Programming"],g:["Getters","Setters"],e:`
<ol>
<li>引言</li>
</ol>
<p>Getter和Setter在Java中扮演着重要的角色，用于在封装类之外检索和更新变量的值。Setter用于更新变量的值，而Getter用于读取变量的值。本教程将讨论不使用Getter/Setter的问题、它们的重要性以及在Java中实现它们时应避免的常见错误。</p>
<ol start="2">
<li>Java中没有Getter和Setter的生活</li>
</ol>
<p>想象一下，如果我们想根据某些条件改变对象的状态，没有Setter方法我们如何实现这一点？</p>
<ul>
<li>将变量标记为public、protected或默认</li>
<li>使用点(.)操作符更改值</li>
</ul>`,r:{minutes:4.92,words:1476},t:"Java中Getter和Setter的重要性",y:"a"}}],["/posts/baeldung/2024-07-27/2024-07-27-Throwing%20Exceptions%20in%20Constructors.html",{loader:()=>a(()=>import("./2024-07-27-Throwing Exceptions in Constructors.html-WazGjokh.js"),__vite__mapDeps([1359,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Exception Handling"],g:["Java","Constructors","Exceptions"],e:`<hr>
<h1>在构造函数中抛出异常</h1>
<p>异常提供了将错误处理代码与应用程序的正常流程分离的功能。在对象实例化期间抛出异常并不罕见。</p>
<p>在本文中，我们将检查有关在构造函数中抛出异常的所有细节。</p>
<p>构造函数是用于创建对象的特殊类型的方法。在以下部分中，我们将探讨如何抛出异常，应该抛出哪些异常，以及为什么我们会在构造函数中抛出异常。</p>
<h3>2.1. 如何抛出异常？</h3>
<p>在构造函数中抛出异常与在其他任何方法中抛出异常没有区别。让我们首先创建一个具有无参构造函数的_Animal_类：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InstantiationException</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">(</span><span class="token string">"Cannot be instantiated"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:4.42,words:1326},t:"在构造函数中抛出异常",y:"a"}}],["/posts/baeldung/2024-07-27/2024-07-27-Util%20Classes%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-27-Util Classes in Kotlin.html-Dgzjm0Fw.js"),__vite__mapDeps([1360,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin","Utility Classes"],g:["Kotlin","Utility Classes"],e:`
<p>实用类，简称工具类，是通常包含静态方法和常量的类。实用类在封装应用程序的核心功能中扮演着关键角色。这些类不打算被实例化，其主要目的是提供一组可重用的功能性。</p>
<p>在本教程中，我们将学习Kotlin中的实用类是什么，探索它们的重要性，提供代码示例，编写相应的测试，并展示实际用例。</p>
<h2>2. 为什么实用类很重要？</h2>
<p>实用类在软件开发中扮演着至关重要的角色。首先，它们遵循单一责任原则，专注于一组特定的实用功能。这确保了每个实用类都有一个明确定义的目的，有助于整体代码库的清晰度和可维护性。</p>
<p>此外，实用类通常具有静态方法和常量，消除了实例化的需求，这促进了效率。通过在专用类中封装实用功能，我们促进了项目中的关注点分离。这种隔离有助于维护一个干净和模块化的代码结构，使我们更容易管理和增强应用程序逻辑。</p>`,r:{minutes:4.51,words:1353},t:"Kotlin中的实用类",y:"a"}}],["/posts/baeldung/2024-07-27/2024-07-27-Why%20Missing%20Annotations%20Don%20t%20Cause%20ClassNotFoundException.html",{loader:()=>a(()=>import("./2024-07-27-Why Missing Annotations Don t Cause ClassNotFoundException.html-DTneud5L.js"),__vite__mapDeps([1361,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Annotations"],g:["Java","Annotation","ClassNotFoundException"],e:`<hr>
<h1>为什么缺少注解不会导致ClassNotFoundException</h1>
<p>在本教程中，我们将熟悉Java编程语言中一个看似奇怪的特性：缺少注解不会导致运行时异常。</p>
<p>然后，我们将深入探讨这种行为背后的规则和原因，以及这些规则的例外情况。</p>
<h2>2. 快速回顾</h2>
<p>让我们从一个熟悉的Java示例开始。有一个类_A_，然后是依赖于_A_的类_B_：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:3.92,words:1177},t:"为什么缺少注解不会导致ClassNotFoundException",y:"a"}}],["/posts/baeldung/2024-07-27/2024-07-27-Writing%20Log%20Data%20to%20Syslog%20Using%20Log4j2.html",{loader:()=>a(()=>import("./2024-07-27-Writing Log Data to Syslog Using Log4j2.html-B4eNdIRI.js"),__vite__mapDeps([1362,1])),meta:{d:1625616e6,l:"2021年7月7日",c:["Spring Boot","Log4j2"],g:["Syslog","Logging","Configuration"],e:`
<p>日志记录是每个应用程序中的重要组成部分。当我们在应用程序中使用日志记录机制时，我们可以将日志存储在文件或数据库中。此外，我们还可以将日志数据发送到集中的日志管理应用程序，如Graylog或Syslog。</p>
<p>在本教程中，我们将描述如何使用Log4j2在Spring Boot应用程序中将日志信息发送到Syslog服务器。</p>
<p>Log4j2是Log4j的最新版本。它是高性能日志记录的常见选择，并在许多生产应用程序中使用。</p>
<h3>2.1. Maven依赖</h3>
<p>让我们首先向我们的_pom.xml_添加_spring-boot-starter-log4j2_依赖项：</p>`,r:{minutes:3.41,words:1024},t:"使用Log4j2将日志数据写入Syslog",y:"a"}}],["/posts/baeldung/2024-07-28/2024-07-28-%20Code%20too%20large%20%20Compilation%20Error%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-28- Code too large  Compilation Error in Java.html-C71JGTba.js"),__vite__mapDeps([1363,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Compilation"],g:["Java","JVM","Compilation Error"],e:`<hr>
<h1>Java中"代码太大"编译错误解析</h1>
<h2>1. 概述</h2>
<p>当Java方法超过65535字节时，我们会收到“代码太大”的编译错误。本文将讨论这个错误发生的原因以及如何解决它。</p>
<h2>2. JVM限制</h2>
<p><em>Code_attribute</em> 是JVM规范中_method_info_结构的可变长度表。这个结构包含了一个方法的JVM指令，可以是一个常规方法，也可以是一个实例、类或接口的初始化方法：</p>
<div class="language-plaintext" data-ext="plaintext" data-title="plaintext"><pre class="language-plaintext"><code>Code_attribute {
    u2 attribute_name_index;
    u4 attribute_length;
    u2 max_stack;
    u2 max_locals;
    u4 code_length;
    u1 code[code_length];
    u2 exception_table_length;
    {
        u2 start_pc;
        u2 end_pc;
        u2 handler_pc;
        u2 catch_type;
    }
    exception_table[exception_table_length];
    u2 attributes_count;
    attribute_info attributes[attributes_count];
}
</code></pre></div>`,r:{minutes:2.59,words:777},t:'Java中"代码太大"编译错误解析',y:"a"}}],["/posts/baeldung/2024-07-28/2024-07-28-3DES%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-28-3DES in Java.html-DiPMX78R.js"),__vite__mapDeps([1364,1])),meta:{d:17221248e5,l:"2024年7月28日",c:["Java","3DES"],g:["Java","加密","解密"],e:`
<ol>
<li><strong>介绍</strong></li>
</ol>
<p>3DES或三重数据加密算法是一种对称密钥块密码算法，它将DES密码算法对每个数据块应用三次。</p>
<p>在本教程中，我们将学习如何在Java中<strong>创建3DES密钥并使用它们对字符串和文件进行加密和解密</strong>。</p>
<ol start="2">
<li><strong>生成密钥</strong></li>
</ol>
<p>生成3DES密钥需要几个步骤。首先，我们需要生成一个用于加密解密过程的密钥。在我们的案例中，我们将使用一个由随机数字和字母构成的24字节密钥：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> secretKey <span class="token operator">=</span> <span class="token string">"9mng65v8jf4lxn93nabf981m"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:3.28,words:983},t:"Java中的3DES",y:"a"}}],["/posts/baeldung/2024-07-28/2024-07-28-A%20Comparison%20Between%20JPA%20and%20JDBC.html",{loader:()=>a(()=>import("./2024-07-28-A Comparison Between JPA and JDBC.html-BkplFtxa.js"),__vite__mapDeps([1365,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java Persistence API","Java Database Connectivity"],g:["JPA","JDBC"],e:`
<p>在本教程中，我们将探讨Java数据库连接（JDBC）API和Java持久化API（JPA）之间的差异。</p>
<h2>2. JDBC是什么</h2>
<p>JDBC是Java应用程序与数据库通信的编程级接口。应用程序使用此API与JDBC管理器通信。这是我们的应用程序代码用来与数据库通信的通用API。在API之外，是供应商提供的符合JDBC标准的数据库驱动程序。</p>
<h2>3. JPA是什么</h2>
<p>JPA是允许我们将Java对象绑定到关系数据库记录的Java标准。<strong>它是对象关系映射（ORM）的一种可能方法</strong>，允许开发人员使用Java对象在关系数据库中检索、存储、更新和删除数据。JPA规范有几种实现可用。</p>`,r:{minutes:4.68,words:1404},t:"JPA与JDBC的比较",y:"a"}}],["/posts/baeldung/2024-07-28/2024-07-28-Build%20a%20Dashboard%20With%20Cassandra%20%20Astra%20%20REST%20%20%20GraphQL%20%20%20Recording%20Status%20Updates.html",{loader:()=>a(()=>import("./2024-07-28-Build a Dashboard With Cassandra  Astra  REST   GraphQL   Recording Status Updates.html-D1aYi5FK.js"),__vite__mapDeps([1366,1])),meta:{d:16225056e5,l:"2021年6月1日",c:["Cassandra","Astra","REST & GraphQL"],g:["DataStax Astra","Apache Cassandra","Stargate"],e:`<hr>
<h1>使用Cassandra、Astra、REST和GraphQL构建仪表板 - 记录状态更新</h1>
<h2><strong>1. 引言</strong></h2>
<p>在我们之前的文章中，我们探讨了使用DataStax Astra（一个由Apache Cassandra提供支持的DBaaS，使用Stargate提供额外的API来使用它）来构建一个仪表板，用于查看复仇者联盟当前的状态。</p>
<figure><img src="https://www.baeldung.com/wp-content/uploads/2021/06/cassandra-avengers-status-dashboard-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>`,r:{minutes:9.2,words:2759},t:"使用Cassandra、Astra、REST和GraphQL构建仪表板 - 记录状态更新",y:"a"}}],["/posts/baeldung/2024-07-28/2024-07-28-Cluster%20%20Datacenters%20%20Racks%20and%20Nodes%20in%20Cassandra.html",{loader:()=>a(()=>import("./2024-07-28-Cluster  Datacenters  Racks and Nodes in Cassandra.html-ChnInF1R.js"),__vite__mapDeps([1367,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Cassandra","Database"],g:["Cluster","Datacenters","Racks","Nodes"],e:`<hr>
<h1>Cassandra中的集群、数据中心、机架和节点</h1>
<p>在本教程中，我们将仔细研究Cassandra的架构。我们将了解在分布式架构中数据存储的方式，并讨论基本的架构组件。</p>
<h2>2. Cassandra概述</h2>
<p>Apache Cassandra是一个NoSQL分布式数据库管理系统。<strong>Cassandra的主要优势是它能够在普通服务器上处理大量结构化数据。此外，它提供高可用性并且没有单点故障。</strong> Cassandra通过使用环形架构来实现这一点，其中最小的逻辑单元是节点。它使用数据分区来优化查询。</p>
<p>每条数据都有一个分区键。每一行的分区键都会进行哈希。因此，我们将为每条数据获得一个唯一的令牌。每个节点都有一个分配的令牌范围。因此，具有相同令牌的数据将存储在同一个节点上。节点的环形架构如下所示：</p>`,r:{minutes:5.06,words:1519},t:"Cassandra中的集群、数据中心、机架和节点",y:"a"}}],["/posts/baeldung/2024-07-28/2024-07-28-Collection.toArray%20new%20T%200%20%20%20or%20.toArray%20new%20T%20size%20%20.html",{loader:()=>a(()=>import("./2024-07-28-Collection.toArray new T 0   or .toArray new T size  .html-DJHQPKZs.js"),__vite__mapDeps([1368,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Collections"],g:["Java","Collection","toArray"],e:`<hr>
<h1>Java集合.toArray()方法的深入分析</h1>
<h2>1. 概述</h2>
<p>Java编程语言提供了数组和集合来组织对象。大多数情况下，集合由数组支持，并配有一组方法来处理它包含的元素。</p>
<p>在开发软件时，使用这两种数据结构是很常见的。因此，程序员需要一种机制将这些元素从一种形式转换为另一种形式。Arrays类的_asList_方法和Collection接口的_toArray_方法形成了这种桥梁。</p>
<p>在本教程中，我们将深入分析一个有趣的论点：<strong>应该使用哪种toArray方法以及为什么？</strong> 我们还将使用JMH辅助基准测试来支持这些论点。</p>`,r:{minutes:8.11,words:2433},t:"Java集合.toArray()方法的深入分析",y:"a"}}],["/posts/baeldung/2024-07-28/2024-07-28-Converting%20Camel%20Case%20and%20Title%20Case%20to%20Words%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-28-Converting Camel Case and Title Case to Words in Java.html-DypOGSbm.js"),__vite__mapDeps([1369,1])),meta:{d:16507584e5,l:"2022年4月24日",c:["Java","Regular Expressions"],g:["camel case","title case","java"],e:`
<p>字符串通常包含单词和其他分隔符的混合。有时，这些字符串可能会在没有空格的情况下通过大小写变化来分隔单词。例如，<strong>驼峰式在第一个单词之后每个单词的首字母大写</strong>，而标题式（或帕斯卡式）每个单词的首字母都大写。</p>
<p>我们可能希望将这些字符串解析回单词以便处理它们。</p>
<p>在这个简短的教程中，我们将探讨如何使用正则表达式在混合大小写字符串中找到单词，以及如何将它们转换为句子或标题。</p>
<h3>2. 解析大写字符串的用例</h3>
<p>处理驼峰式字符串的一个常见用例可能是文档中的字段名称。假设一个文档有一个字段“<em>firstName</em>”——我们可能希望在屏幕上显示为“First name”或“First Name”。</p>`,r:{minutes:5.33,words:1599},t:"在Java中将驼峰式和标题式转换为单词",y:"a"}}],["/posts/baeldung/2024-07-28/2024-07-28-Converting%20String%20to%20BigInteger%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-28-Converting String to BigInteger in Java.html-DpPTSkat.js"),__vite__mapDeps([1370,1])),meta:{d:17221248e5,l:"2024年7月28日",c:["Java","BigInteger"],g:["Java","BigInteger","String"],e:`
<p>在本教程中，我们将演示如何将字符串转换为BigInteger。BigInteger通常用于处理非常大的数值，这些数值通常是由任意的算术计算得出的结果。</p>
<h2>2. 将十进制（基数10）整数字符串转换</h2>
<p>要将十进制字符串转换为BigInteger，我们将使用<strong>BigInteger(String value)构造函数</strong>：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> inputString <span class="token operator">=</span> <span class="token string">"878"</span><span class="token punctuation">;</span>
<span class="token class-name">BigInteger</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span>inputString<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"878"</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:1.34,words:403},t:"Java中将字符串转换为BigInteger",y:"a"}}],["/posts/baeldung/2024-07-28/2024-07-28-Determine%20if%20All%20Elements%20Are%20the%20Same%20in%20a%20Kotlin%20List.html",{loader:()=>a(()=>import("./2024-07-28-Determine if All Elements Are the Same in a Kotlin List.html-te19mKzi.js"),__vite__mapDeps([1371,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin"],g:["Lists","Collection Operations"],e:`<hr>
<h1>确定 Kotlin 列表中的所有元素是否相同 | Baeldung 关于 Kotlin---</h1>
<p>date: 2022-11-01
category:</p>
<ul>
<li>Kotlin
tag:</li>
<li>Lists</li>
<li>Collection Operations
head:</li>
<li>
<ul>
<li>meta</li>
<li>name: keywords
content: Kotlin, List, all elements equal, distinct, count, set</li>
</ul>
</li>
</ul>`,r:{minutes:3.9,words:1171},t:"确定 Kotlin 列表中的所有元素是否相同 | Baeldung 关于 Kotlin---",y:"a"}}],["/posts/baeldung/2024-07-28/2024-07-28-Difference%20Between%20Maven%20Surefire%20and%20Failsafe%20Plugins.html",{loader:()=>a(()=>import("./2024-07-28-Difference Between Maven Surefire and Failsafe Plugins.html-oHtmxxkN.js"),__vite__mapDeps([1372,1])),meta:{d:16544736e5,l:"2022年6月6日",c:["Maven","Testing"],g:["Maven","Surefire","Failsafe"],e:`
<h2>1. 概述</h2>
<p>在典型的测试驱动开发中，我们的目标是编写许多低级别的单元测试，这些测试运行速度快，可以独立设置。此外，还有一些高级别的集成测试，它们依赖于外部系统，例如设置服务器或数据库。不出所料，这些测试通常都是资源和时间密集型的。</p>
<p>因此，这些测试大多需要一些集成前的设置和集成后的清理，以实现优雅的终止。因此，区分这两种类型的测试并在构建过程中分别运行它们是可取的。</p>
<p>在本教程中，我们将比较Surefire和Failsafe插件，这两种插件通常用于在Apache Maven构建中运行各种类型的测试。</p>
<h2>2. Surefire插件</h2>`,r:{minutes:4.21,words:1263},t:"Maven Surefire与Failsafe插件比较",y:"a"}}],["/posts/baeldung/2024-07-28/2024-07-28-Download%20a%20Binary%20File%20Using%20OkHttp.html",{loader:()=>a(()=>import("./2024-07-28-Download a Binary File Using OkHttp.html-Z1qNuEf_.js"),__vite__mapDeps([1373,1])),meta:{d:17222112e5,l:"2024年7月29日",c:["Java","OkHttp"],g:["Java","OkHttp","文件下载"],e:'\n<p>本文将提供一个实用示例，展示如何使用OkHttp库下载二进制文件。</p>\n<h2>2. Maven依赖</h2>\n<p>我们将首先添加基础库okhttp依赖：</p>\n<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>``&lt;dependency&gt;``\n    ``&lt;groupId&gt;``com.squareup.okhttp3``&lt;/groupId&gt;``\n    ``&lt;artifactId&gt;``okhttp``&lt;/artifactId&gt;``\n    ``&lt;version&gt;``5.0.0-alpha.12``&lt;/version&gt;``\n``&lt;/dependency&gt;``\n</code></pre></div>',r:{minutes:3.11,words:933},t:"使用OkHttp下载二进制文件",y:"a"}}],["/posts/baeldung/2024-07-28/2024-07-28-Enabling%20Logging%20for%20Apache%20HttpClient.html",{loader:()=>a(()=>import("./2024-07-28-Enabling Logging for Apache HttpClient.html-riSLf4gg.js"),__vite__mapDeps([1374,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["HttpClient","Logging"],g:["Apache","HttpClient","Logging"],e:`<hr>
<h1>为Apache HttpClient启用日志记录</h1>
<h2>1. 概述</h2>
<p>在本教程中，我们将展示如何在Apache的HttpClient中<strong>启用日志记录</strong>。此外，我们将解释库内部的日志实现方式。之后，我们将展示如何启用不同级别的日志记录。</p>
<h2>2. 日志实现</h2>
<p>HttpClient库提供了高效、最新和功能丰富的HTTP协议客户端实现。</p>
<p><strong>确实作为一个库，HttpClient不强制实现日志记录</strong>。为此，4.5版本使用Commons Logging提供日志记录。类似地，最新版本5.1使用由SLF4J提供的日志门面。两个版本都使用层次结构模式将记录器与它们的配置相匹配。</p>`,r:{minutes:3.89,words:1168},t:"为Apache HttpClient启用日志记录",y:"a"}}],["/posts/baeldung/2024-07-28/2024-07-28-Find%20the%20GC%20Algorithm%20Used%20by%20a%20JVM%20Instance.html",{loader:()=>a(()=>import("./2024-07-28-Find the GC Algorithm Used by a JVM Instance.html-C88Zp-Vv.js"),__vite__mapDeps([1375,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","JVM"],g:["GC算法","JVM实例"],e:`
<p>Java应用程序以其启动缓慢和预热时间长而闻名。OpenJDK的CRaC（协调恢复检查点）项目可以通过<strong>创建应用程序峰值性能的检查点</strong>并恢复JVM实例到该点来帮助改善这些问题。</p>
<p>为了充分利用这一特性，BellSoft提供了高度优化的Java应用程序容器。这些容器打包了Alpaquita Linux（一个为Java和云环境优化的全功能操作系统）和Liberica JDK（基于OpenJDK的开源Java运行时）。</p>
<p>这些现成的镜像使我们能够轻松地在Spring Boot应用程序中<strong>集成CRaC</strong>：</p>`,r:{minutes:4.83,words:1448},t:"JVM实例使用的GC算法查找方法",y:"a"}}],["/posts/baeldung/2024-07-28/2024-07-28-Guide%20to%20the%20ModelAssert%20Library%20for%20JSON.html",{loader:()=>a(()=>import("./2024-07-28-Guide to the ModelAssert Library for JSON.html-CC_QjqM4.js"),__vite__mapDeps([1376,1])),meta:{d:17222112e5,l:"2024年7月29日",c:["Testing","JSON"],g:["ModelAssert","JSON Testing","AssertJ","Jackson"],e:`<hr>
<h1>ModelAssert 库指南：用于 JSON</h1>
<h2>1. 概述</h2>
<p>在编写使用 JSON 的软件的自动化测试时，我们经常需要将 JSON 数据与某个预期值进行比较。</p>
<p>在某些情况下，我们可以将实际和预期的 JSON 作为字符串进行字符串比较，但这种方法有很多限制。</p>
<p>在本教程中，我们将探讨如何使用 ModelAssert 编写断言并比较 JSON 值。我们将看到如何在 JSON 文档中的单个值上构建断言以及如何比较文档。我们还将涵盖如何处理无法预测确切值的字段，例如日期或 GUID。</p>
<h2>2. 入门</h2>
<p>ModelAssert 是一个数据断言库，语法类似于 AssertJ，并具有与 JSONAssert 相似的功能。它基于 Jackson 进行 JSON 解析，并使用 JSON Pointer 表达式来描述文档中字段的路径。</p>`,r:{minutes:10.93,words:3279},t:"ModelAssert 库指南：用于 JSON",y:"a"}}],["/posts/baeldung/2024-07-28/2024-07-28-How%20to%20Convert%20Integer%20List%20to%20IntArray%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-28-How to Convert Integer List to IntArray in Kotlin.html-DON8lH7d.js"),__vite__mapDeps([1377,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin"],g:["Kotlin","Programming"],e:`
<p>如果你有几年 Kotlin 语言和服务器端开发的经验，并且有兴趣与社区分享这些经验，请查看我们的<strong>贡献指南</strong>。</p>
<h2>1. 引言</h2>
<p>有时需要将整数列表转换为整数数组以进行进一步处理。幸运的是，Kotlin 中有几种方法可以实现这一点。</p>
<p>在本教程中，我们将讨论将整数列表转换为整数数组的三种不同方法，以及相应的 Kotlin 代码。</p>
<h2>2. 使用 for 循环</h2>
<p>第一种方法是程序化方法，我们<strong>使用简单的 for 循环遍历列表中的条目，并将每个条目添加到数组中</strong>：</p>`,r:{minutes:6.89,words:2066},t:"如何在 Kotlin 中将整数表转换为 IntArray",y:"a"}}],["/posts/baeldung/2024-07-28/2024-07-28-How%20to%20Get%20the%20Number%20of%20Threads%20in%20a%20Java%20Process.html",{loader:()=>a(()=>import("./2024-07-28-How to Get the Number of Threads in a Java Process.html-DqH93gGW.js"),__vite__mapDeps([1378,1])),meta:{d:16242336e5,l:"2021年6月21日",c:["Java","Concurrency"],g:["Java","Threads","Monitoring"],e:`<hr>
<h1>如何获取Java进程中的线程数</h1>
<p>线程是Java中并发的基本单位。在大多数情况下，当创建多个线程以并行执行任务时，应用程序的吞吐量会增加。</p>
<p>然而，总有一个饱和点。毕竟，应用程序的吞吐量取决于CPU和内存资源。<strong>超过一定限制后，增加线程数量可能会导致高内存使用、线程上下文切换等问题。</strong></p>
<p>因此，在排查Java应用程序中的高内存问题时，监控线程数量是一个不错的起点。在本教程中，我们将探讨一些检查Java进程创建的线程数量的方法。</p>
<h2>2. 图形化Java监控工具</h2>
<p>查看Java中线程数量的最简单方法是使用像Java VisualVM这样的图形化工具。<strong>除了应用程序线程外，Java VisualVM还列出了GC或应用程序使用的其他线程，如JMX线程。</strong></p>`,r:{minutes:5.45,words:1635},t:"如何获取Java进程中的线程数",y:"a"}}],["/posts/baeldung/2024-07-28/2024-07-28-How%20to%20Implement%20Min%20Max%20Heap%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-28-How to Implement Min Max Heap in Java.html-Xo9JLzUS.js"),__vite__mapDeps([1379,1])),meta:{d:16236288e5,l:"2021年6月14日",c:["Java"],g:["Min-Max Heap","Data Structures"],e:`
<p>在本教程中，我们将探讨如何在Java中实现最小-最大堆。</p>
<p>首先，让我们看看堆的定义和特性。最小-最大堆是一个完整的二叉树，同时具有最小堆和最大堆的特性：</p>
<figure><img src="https://www.baeldung.com/wp-content/uploads/2021/06/Screenshot-from-2021-06-14-22-37-11-1024x595.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<p>如上图所示，<strong>树中每个偶数层的节点都小于其所有后代，而每个奇数层的节点都大于其所有后代，根节点位于第零层。</strong></p>`,r:{minutes:6.03,words:1809},t:"如何在Java中实现最小-最大堆",y:"a"}}],["/posts/baeldung/2024-07-28/2024-07-28-Interface%20With%20Default%20Methods%20vs%20Abstract%20Class.html",{loader:()=>a(()=>import("./2024-07-28-Interface With Default Methods vs Abstract Class.html-CPSEtfFb.js"),__vite__mapDeps([1380,1])),meta:{d:17222112e5,l:"2024年7月29日",c:["Java","编程"],g:["接口","默认方法","抽象类"],e:`
<p>在Java接口引入了默认方法之后，似乎接口和抽象类之间不再有任何区别。但事实并非如此——它们之间存在一些根本性的差异。</p>
<p>在本教程中，我们将深入探讨接口和抽象类，看看它们是如何不同的。</p>
<h3>为什么使用默认方法？</h3>
<p>默认方法的<strong>目的是在不破坏现有实现的情况下提供外部功能</strong>。引入默认方法最初的动机是为集合框架提供与新lambda函数向后兼容的功能。</p>
<p>让我们看看主要的基本差异。</p>
<h3>3.1. 状态</h3>
<p>抽象类可以有状态，其方法可以访问实现的状态。尽管接口中允许使用默认方法，但它们不能访问实现的状态。</p>`,r:{minutes:3.56,words:1067},t:"Java接口中的默认方法与抽象类对比",y:"a"}}],["/posts/baeldung/2024-07-28/2024-07-28-JPA%20Entities%20and%20the%20Serializable%20Interface.html",{loader:()=>a(()=>import("./2024-07-28-JPA Entities and the Serializable Interface.html-6t5EpJnU.js"),__vite__mapDeps([1381,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["JPA","Hibernate"],g:["JPA Entities","Serializable"],e:`<hr>
<h1>JPA 实体和 Serializable 接口</h1>
<p>在本教程中，我们将讨论 JPA 实体和 Java Serializable 接口是如何结合的。首先，我们将看看 java.io.Serializable 接口是什么以及为什么我们需要它。之后，我们将看看 JPA 规范以及 Hibernate 作为其最流行的实现。</p>
<h3>2. Serializable 接口是什么？</h3>
<p>Serializable 是 Java 核心库中少数几个标记接口之一。标记接口是特殊情况的接口，没有方法或常量。</p>
<p><strong>对象序列化是将 Java 对象转换为字节流的过程</strong>。然后，我们可以将这些字节流通过线路传输或存储在持久性内存中。<strong>反序列化是相反的过程</strong>，我们从字节流中转换回 Java 对象。要允许对象序列化（或反序列化），一个类必须实现 Serializable 接口。否则，我们将遇到 java.io.NotSerializableException。<strong>序列化在 RMI、JPA 和 EJB 等技术中广泛使用</strong>。</p>`,r:{minutes:4.47,words:1342},t:"JPA 实体和 Serializable 接口",y:"a"}}],["/posts/baeldung/2024-07-28/2024-07-28-Mask%20Sensitive%20Data%20in%20Logs%20With%20Logback.html",{loader:()=>a(()=>import("./2024-07-28-Mask Sensitive Data in Logs With Logback.html-BTFvQh3B.js"),__vite__mapDeps([1382,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Logback","日志"],g:["日志","敏感数据","脱敏"],e:`<hr>
<h1>使用Logback在日志中遮蔽敏感数据</h1>
<p>在GDPR生效的新世界中，我们不仅要关注许多问题，还必须特别关注记录个人敏感数据的问题。在记录大量数据的同时，遮蔽用户敏感细节非常重要。</p>
<p>本文教程将展示如何使用Logback在日志中遮蔽敏感数据。虽然这种方法作为我们日志文件的最后防线，但它并不被视为问题的根本解决方案。</p>
<p>Logback是Java社区中最广泛使用的日志框架之一。它取代了其前身Log4j。Logback提供了更快的实现、更多的配置选项以及在归档旧日志文件时的更多灵活性。</p>
<p>敏感数据是任何旨在防止未经授权访问的信息。这可以包括从个人身份信息（PII），如社会安全号码，到银行信息、登录凭据、地址、电子邮件等。</p>`,r:{minutes:3.47,words:1042},t:"使用Logback在日志中遮蔽敏感数据",y:"a"}}],["/posts/baeldung/2024-07-28/2024-07-28-Monitor%20the%20Consumer%20Lag%20in%20Apache%20Kafka.html",{loader:()=>a(()=>import("./2024-07-28-Monitor the Consumer Lag in Apache Kafka.html-DqDADxvU.js"),__vite__mapDeps([1383,1])),meta:{d:17221248e5,l:"2024年7月28日",c:["Java","Kafka"],g:["Consumer Lag","Monitoring"],e:`<hr>
<h1>监控Apache Kafka中的消费者滞后</h1>
<p>Kafka消费者组滞后是任何基于Kafka的事件驱动系统的关键性能指标。</p>
<p>在本教程中，我们将构建一个分析应用程序来监控Kafka消费者滞后。</p>
<p>消费者滞后简单地说是消费者最后提交的偏移量与生产者在日志中的结束偏移量之间的差值。换句话说，消费者滞后度量了在任何生产者-消费者系统中生产和消费消息之间的延迟。</p>
<p>在本节中，让我们了解如何确定偏移量值。</p>
<h3>2.1. Kafka AdminClient</h3>
<p><strong>为了检查消费者组的偏移量值</strong>，<strong>我们需要管理Kafka客户端</strong>。因此，让我们在_LagAnalyzerService_类中编写一个方法来创建_AdminClient_类的实例：</p>`,r:{minutes:8.14,words:2441},t:"监控Apache Kafka中的消费者滞后",y:"a"}}],["/posts/baeldung/2024-07-28/2024-07-28-The%20java.lang.NoClassDefFoundError%20in%20JUnit.html",{loader:()=>a(()=>import("./2024-07-28-The java.lang.NoClassDefFoundError in JUnit.html-DmQXcT4m.js"),__vite__mapDeps([1384,1])),meta:{d:16274304e5,l:"2021年7月28日",c:["Java","JUnit"],g:["NoClassDefFoundError","JUnit"],e:`
<p>在本文中，我们将理解为什么JUnit中会出现_java.lang.NoClassDefFoundError_错误以及如何修复它。这个问题主要与IDE的配置有关。因此，我们将专注于最流行的IDE：Visual Studio Code、Eclipse和IntelliJ，来重现和解决这个错误。</p>
<p>当Java运行时运行Java程序时，它不会一次性加载所有类和依赖项。相反，它调用Java类加载器按需加载类到内存中。<strong>在加载类时，如果类加载器找不到类的声明，它会抛出_NoClassDefFoundError_。</strong></p>
<p>Java找不到类定义有几个原因，包括：</p>`,r:{minutes:3.53,words:1059},t:"JUnit中java.lang.NoClassDefFoundError的错误及其解决方法",y:"a"}}],["/posts/baeldung/2024-07-28/2024-07-28-What%20Does%20Mono.defer%20%20%20Do%20.html",{loader:()=>a(()=>import("./2024-07-28-What Does Mono.defer   Do .html-Bplv68rM.js"),__vite__mapDeps([1385,1])),meta:{d:1687392e6,l:"2023年6月22日",c:["Java","Reactive Programming"],g:["Mono","defer","Reactive Streams"],e:'\n<h2>1. 概述</h2>\n<p>在响应式编程中，我们有多种方法可以创建类型为 <em>Mono</em> 或 <em>Flux</em> 的发布者。在这里，我们将探讨使用 <em>defer</em> 方法来延迟执行 <em>Mono</em> 发布者。</p>\n<h2>2. Mono.defer 方法是什么？</h2>\n<p>我们可以使用 <em>defer</em> 方法创建一个最多产生一个值的冷发布者。让我们看看方法签名：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> ````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>```` <span class="token class-name">Mono</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>```` <span class="token function">defer</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span>``<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>``<span class="token operator">&gt;</span> supplier<span class="token punctuation">)</span>\n</code></pre></div>',r:{minutes:6.78,words:2035},t:"Mono.defer() 是做什么用的？ | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-28/2024-07-28-Wire%20Tap%20Enterprise%20Integration%20Pattern.html",{loader:()=>a(()=>import("./2024-07-28-Wire Tap Enterprise Integration Pattern.html-Ht5oINLR.js"),__vite__mapDeps([1386,1])),meta:{d:16225056e5,l:"2021年6月1日",c:["Enterprise Integration Patterns","Apache Camel"],g:["Wire Tap","EIP","Spring Boot","ActiveMQ"],e:`
<p>在这个教程中，我们将介绍Wire Tap企业集成模式（EIP），它帮助我们监控通过系统流动的消息。</p>
<p>这种模式允许我们<strong>拦截消息而不永久地从通道上消耗它们</strong>。</p>
<p>Wire Tap检查在点对点通道上传输的消息。它接收消息，进行复制，然后将其发送到<strong>Tap目的地</strong>：</p>
<figure><img src="https://www.baeldung.com/wp-content/uploads/2021/06/Wire-tap-EnterpriseIntegrationPattern.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>`,r:{minutes:3.21,words:962},t:"监控系统消息流的Wire Tap企业集成模式",y:"a"}}],["/posts/baeldung/2024-07-29/2024-07-29-Build%20a%20Dashboard%20Using%20Cassandra%20%20Astra%20%20and%20Stargate.html",{loader:()=>a(()=>import("./2024-07-29-Build a Dashboard Using Cassandra  Astra  and Stargate.html-CHujYkv-.js"),__vite__mapDeps([1387,1])),meta:{d:16198272e5,l:"2021年5月1日",c:["Cassandra","Astra"],g:["DataStax","Stargate"],e:`<hr>
<h1>使用Cassandra, Astra和Stargate构建仪表板</h1>
<p>在本文中，我们将构建“托尼·斯塔克的复仇者状态仪表板”，复仇者联盟用来监控团队成员状态的仪表板。</p>
<p><strong>这将使用DataStax Astra构建，这是一个由Apache Cassandra提供支持的DBaaS，使用Stargate提供额外的API来使用它。</strong> 在此基础上，我们将使用Spring Boot应用程序来呈现仪表板并显示正在发生的情况。</p>
<p>我们将使用Java 16构建此项目，因此在继续之前，请确保已经安装并准备好使用。</p>
<h2>2. 什么是Astra？</h2>`,r:{minutes:8.63,words:2590},t:"使用Cassandra, Astra和Stargate构建仪表板",y:"a"}}],["/posts/baeldung/2024-07-29/2024-07-29-Converting%20String%20to%20BigDecimal%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-29-Converting String to BigDecimal in Java.html-tH9tZCQH.js"),__vite__mapDeps([1388,1])),meta:{d:17222976e5,l:"2024年7月30日",c:["Java","BigDecimal"],g:["String","Convert","BigDecimal"],e:`
<p>在本教程中，我们将介绍Java中将字符串转换为BigDecimal的多种方法。</p>
<p><strong>BigDecimal</strong> 表示一个不可变的任意精度的有符号十进制数字。它由两部分组成：</p>
<ul>
<li>未缩放值 - 一个任意精度的整数</li>
<li>小数位 - 表示小数点右边数字数量的32位整数</li>
</ul>
<p>例如，BigDecimal 3.14 有一个未缩放值为314，小数位为2。</p>
<p>如果为零或正数，小数位是小数点右边的位数。</p>
<p>如果是负数，数字的未缩放值将乘以10的负小数位次幂。因此，<strong>BigDecimal表示的数值是（未缩放值 × 10^(-小数位)）</strong>。</p>`,r:{minutes:2.92,words:876},t:"Java中将字符串转换为BigDecimal",y:"a"}}],["/posts/baeldung/2024-07-29/2024-07-29-Creating%20%20Updating%20and%20Deleting%20Resources%20with%20the%20Java%20Kubernetes%20API.html",{loader:()=>a(()=>import("./2024-07-29-Creating  Updating and Deleting Resources with the Java Kubernetes API.html-DLRGf-tV.js"),__vite__mapDeps([1389,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Kubernetes","Java"],g:["Java","Kubernetes","API"],e:`
<p>在本教程中，我们将使用Kubernetes的官方Java API来执行资源的CRUD操作。</p>
<p>我们已经在之前的文章中介绍了这个API的基本使用方法，包括基本项目设置以及我们可以使用它来获取有关运行中集群的各种信息。</p>
<p>通常，Kubernetes部署大多是静态的。我们创建一些描述我们想要创建的内容的工件（例如YAML文件），然后将它们提交到DevOps流水线。然后，我们系统的各个部分保持不变，直到我们添加一个新组件或升级一个现有组件。</p>
<p>然而，有时我们需要即时添加资源。一个常见的例子是响应用户启动的请求来运行作业。作为响应，应用程序将启动一个后台作业来处理报告，并使其可供以后检索。</p>`,r:{minutes:5.68,words:1705},t:"使用Java Kubernetes API进行资源的创建、更新和删除",y:"a"}}],["/posts/baeldung/2024-07-29/2024-07-29-Defining%20Unique%20Constraints%20in%20JPA.html",{loader:()=>a(()=>import("./2024-07-29-Defining Unique Constraints in JPA.html-BJ7qvEff.js"),__vite__mapDeps([1390,1])),meta:{d:17222112e5,l:"2024年7月29日",c:["JPA","Hibernate"],g:["Unique Constraints","Database"],e:`<hr>
<h1>定义JPA中的唯一约束</h1>
<p>在本教程中，我们将讨论如何使用JPA和Hibernate定义唯一约束。</p>
<p>首先，我们将探讨唯一约束及其与主键约束的区别。</p>
<p>然后，我们将看看JPA的重要注解，@Column(unique=true)和@UniqueConstraint。我们将实现它们以在单个列和多个列上定义唯一约束。</p>
<p>最后，我们将学习如何在引用表列上定义唯一约束。</p>
<p>让我们从快速回顾开始。唯一键是表的单个或多个列的集合，它们在数据库表中唯一标识一条记录。</p>
<p><strong>唯一和主键约束都为列或列集提供了唯一性的保证。</strong></p>`,r:{minutes:7.85,words:2356},t:"定义JPA中的唯一约束",y:"a"}}],["/posts/baeldung/2024-07-29/2024-07-29-Difference%20Between%20Super%20%20Simplest%20%20and%20Effective%20POM.html",{loader:()=>a(()=>import("./2024-07-29-Difference Between Super  Simplest  and Effective POM.html-BZW1AGGB.js"),__vite__mapDeps([1391,1])),meta:{d:17222976e5,l:"2024年7月30日",c:["Maven","POM"],g:["super POM","simplest POM","effective POM"],e:`
<p>在这篇简短的教程中，我们将概述使用Maven时超POM、最简POM和有效POM之间的区别。</p>
<h2>2. POM是什么？</h2>
<p>POM代表项目对象模型（Project Object Model），它是Maven项目配置的核心。它是一个名为pom.xml的单一配置XML文件，包含了构建项目所需的大部分信息。</p>
<p>POM文件的作用是描述项目、管理依赖项，并声明帮助Maven构建项目的配置细节。</p>
<p>为了更容易理解超POM，我们可以将其与Java中的Object类进行类比：Java中的每个类默认都扩展了Object类。类似地，在POM的情况下，每个POM都扩展了超POM。</p>`,r:{minutes:4.04,words:1211},t:"Maven中超、最简、有效POM的区别",y:"a"}}],["/posts/baeldung/2024-07-29/2024-07-29-Find%20All%20Numbers%20in%20a%20String%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-29-Find All Numbers in a String in Java.html-BAoRCBLY.js"),__vite__mapDeps([1392,1])),meta:{d:17222112e5,l:"2024年7月29日",c:["Java","编程"],g:["Java","正则表达式","字符串处理"],e:`
<h2>1. 概述</h2>
<p>有时我们需要在字符串中查找数字或完整的数字。我们可以使用正则表达式或某些库函数来实现。</p>
<p>在本文中，我们将<strong>使用正则表达式来查找和提取字符串中的数字</strong>。我们还将介绍一些计数数字的方法。</p>
<h2>2. 计数数字</h2>
<p>让我们先从计数字符串中找到的数字开始。</p>
<h3>2.1. 使用正则表达式</h3>
<p>我们可以使用Java正则表达式来计算一个数字的匹配次数。</p>
<p>在正则表达式中，<strong>“<em>[d]</em>”表示“任何单个数字”</strong>。让我们使用这个表达式来计数字符串中的数字：</p>`,r:{minutes:4.03,words:1210},t:"在Java中查找字符串中的所有数字 | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-29/2024-07-29-Finding%20All%20Classes%20in%20a%20Java%20Package.html",{loader:()=>a(()=>import("./2024-07-29-Finding All Classes in a Java Package.html-BZVyWLPY.js"),__vite__mapDeps([1393,1])),meta:{d:16198272e5,l:"2021年5月1日",c:["Java","Reflection"],g:["Java","Reflection","Class Loaders","Reflections Library","Google Guava Library"],e:`<hr>
<h1>在Java包中查找所有类</h1>
<h2>1. 概述</h2>
<p>有时，我们希望了解应用程序的运行时行为，例如查找运行时可用的所有类。</p>
<p>在本教程中，我们将探讨几个示例，展示如何在运行时查找Java包中的所有类。</p>
<h2>2. 类加载器</h2>
<p>首先，我们将从Java类加载器开始讨论。Java类加载器是Java运行时环境（JRE）的一部分，它动态地将Java类加载到Java虚拟机（JVM）中。Java类加载器将JRE与文件和文件系统解耦。<strong>并非所有类都由单个类加载器加载</strong>。</p>
<p>让我们通过图示来理解Java中可用的类加载器：</p>`,r:{minutes:5.98,words:1795},t:"在Java包中查找所有类",y:"a"}}],["/posts/baeldung/2024-07-29/2024-07-29-How%20to%20Implement%20a%20Soft%20Delete%20with%20Spring%20JPA.html",{loader:()=>a(()=>import("./2024-07-29-How to Implement a Soft Delete with Spring JPA.html-88QSpVBg.js"),__vite__mapDeps([1394,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring JPA","Soft Delete"],g:["Spring","JPA","Soft Delete"],e:`<hr>
<h1>如何使用Spring JPA实现软删除</h1>
<h2>1. 引言</h2>
<p>从数据库中物理删除数据是一种常见的需求。但有时，业务需求要求我们不要从数据库中永久删除数据。这些需求可能包括数据历史跟踪或审计以及与引用完整性相关的需求。</p>
<p>与其物理删除数据，不如只是隐藏这些数据，使其无法从应用程序前端访问。</p>
<p><strong>在本教程中，我们将学习软删除以及如何使用Spring JPA实现这种技术。</strong></p>
<h2>2. 什么是软删除？</h2>
<p><strong>软删除执行更新过程，标记某些数据为已删除，而不是从数据库表中物理删除。</strong> 实现软删除的一种常见方式是添加一个字段，指示数据是否已被删除。</p>`,r:{minutes:4.97,words:1490},t:"如何使用Spring JPA实现软删除",y:"a"}}],["/posts/baeldung/2024-07-29/2024-07-29-IllegalAccessError%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-29-IllegalAccessError in Java.html-CzFkGsEi.js"),__vite__mapDeps([1395,1])),meta:{d:17222976e5,l:"2024年7月30日",c:["Java","Error Handling"],g:["IllegalAccessError","Java Exception"],e:`
<ol>
<li>概述</li>
</ol>
<p>在这个快速教程中，我们将讨论java.lang.IllegalAccessError。</p>
<p>我们将检查何时抛出此错误以及如何避免它。</p>
<ol start="2">
<li>IllegalAccessError简介</li>
</ol>
<p>当应用程序尝试访问无法访问的字段或调用方法时，会抛出IllegalAccessError。</p>
<p>编译器会捕获此类非法调用，但我们仍然可能在运行时遇到IllegalAccessError。</p>
<p>首先，让我们观察一下IllegalAccessError的类层次结构：</p>`,r:{minutes:2.78,words:833},t:"Java中的IllegalAccessError",y:"a"}}],["/posts/baeldung/2024-07-29/2024-07-29-Inserting%20Null%20Into%20an%20Integer%20Column%20Using%20JDBC.html",{loader:()=>a(()=>import("./2024-07-29-Inserting Null Into an Integer Column Using JDBC.html-I8i_MDPo.js"),__vite__mapDeps([1396,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","JDBC"],e:`
<p>在本文中，我们将探讨如何使用纯JDBC在数据库中存储空值。我们将首先描述使用空值的原因，然后提供几个代码示例。</p>
<h2>2. 使用空值</h2>
<p>空值是一个超越所有编程语言的关键字。它表示一个特殊值。<strong>普遍的看法是空值没有值或代表无</strong>。在数据库列中存储一个空值意味着在硬盘上保留了空间。如果适当的值变得可用，我们可以将其存储在那个空间中。</p>
<p><strong>另一种看法是空值等于零或一个空字符串</strong>。在特定上下文中，零或空字符串可能具有含义，例如，仓库中的零项。我们还可以执行如求和或连接等操作。但是，这些操作在处理空值时没有意义。</p>`,r:{minutes:3.64,words:1091},t:"使用JDBC向整数列插入空值",y:"a"}}],["/posts/baeldung/2024-07-29/2024-07-29-JPA%20Support%20%20%20State%20of%20the%20Tools%20Ecosystem%20in%202021.html",{loader:()=>a(()=>import("./2024-07-29-JPA Support   State of the Tools Ecosystem in 2021.html-Bf32gcCf.js"),__vite__mapDeps([1397,1])),meta:{d:162432e7,l:"2021年6月22日",c:["JPA","工具"],g:["JPA","工具","IntelliJ IDEA","Eclipse"],e:`
<p>在本教程中，我们将看看一些支持JPA的工具。我们将重点介绍两个最流行的IDE：IntelliJ IDEA和Eclipse中可用的插件。</p>
<h2>2. IntelliJ IDEA和Eclipse中的JPA支持</h2>
<p>JPA是Java应用程序中使用关系数据库的最广泛使用的规范。实际上，<strong>JPA定义了从注解到数据处理规则的所有实现方面。</strong></p>
<p>我们通常不仅仅在JPA实体上工作。除了纯ORM相关的代码，我们可能还需要诸如数据库版本控制系统、SQL/JPQL/HQL查询优化、与IoC容器的集成等。这就是插件变得非常有帮助的地方。它们可以支持数据库逆向工程、模式生成、迁移脚本生成或Spring Data JPA存储库脚手架。</p>`,r:{minutes:7,words:2100},t:"JPA 支持 - 2021年工具生态系统现状",y:"a"}}],["/posts/baeldung/2024-07-29/2024-07-29-JVM%20Parameters%20InitialRAMPercentage%20%20MinRAMPercentage%20%20and%20MaxRAMPercentage.html",{loader:()=>a(()=>import("./2024-07-29-JVM Parameters InitialRAMPercentage  MinRAMPercentage  and MaxRAMPercentage.html-BLpdTCl_.js"),__vite__mapDeps([1398,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["JVM参数","Java性能优化"],g:["InitialRAMPercentage","MinRAMPercentage","MaxRAMPercentage"],e:`
<p>Java应用程序以其启动缓慢和预热时间长而闻名。OpenJDK中的CRaC（协调恢复检查点）项目可以通过创建应用程序在峰值性能时的检查点，并恢复JVM实例到该点来帮助改善这些问题。</p>
<p>为了充分利用这一特性，BellSoft提供了高度优化的Java应用程序容器。这些容器打包了Alpaquita Linux（一个为Java和云环境优化的全功能操作系统）和Liberica JDK（基于OpenJDK的开源Java运行时）。</p>
<p>这些现成的镜像使我们能够轻松地将CRaC集成到Spring Boot应用程序中：</p>
<p><strong>使用CRaC支持提高Java应用程序性能</strong></p>`,r:{minutes:2.98,words:894},t:"JVM参数：InitialRAMPercentage、MinRAMPercentage 和 MaxRAMPercentage",y:"a"}}],["/posts/baeldung/2024-07-29/2024-07-29-Kotlin%20%20.let%20%20%20vs%20if%20not%20null.html",{loader:()=>a(()=>import("./2024-07-29-Kotlin  .let   vs if not null.html-BYFNGNE5.js"),__vite__mapDeps([1399,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin","Programming"],g:["Kotlin","Null Safety","if not null","?.let"],e:`
<p>如果你有几年的 Kotlin 语言和服务器端开发经验，并且有兴趣与社区分享这些经验，请查看我们的<strong>贡献指南</strong>。</p>
<h2>1. 引言</h2>
<p>Kotlin 的现代设计强调安全性和清晰性，特别是在空值处理方面。Kotlin 开发者之间一个常见的问题是选择使用 <em>?.let()</em> 和传统的 <em>if (x != null)</em> 进行空值检查。</p>
<p>本教深入探讨这两种方法，突出它们的使用场景、优势以及各自擅长的场景。</p>
<h2>2. 使用 <em>?.let()</em></h2>
<p><strong><em>?.let()</em> 扩展函数是一种强大且简洁的方式来执行一个转换代码块，仅当对象非空时执行</strong>。这种方法允许通过确保仅在对象非空时才运行转换，来更安全地处理可空变量：</p>`,r:{minutes:2.76,words:827},t:"Kotlin 中的 ?.let() 与 if not null 的比较",y:"a"}}],["/posts/baeldung/2024-07-29/2024-07-29-Local%20JAR%20Files%20as%20Gradle%20Dependencies.html",{loader:()=>a(()=>import("./2024-07-29-Local JAR Files as Gradle Dependencies.html-C9EIqg87.js"),__vite__mapDeps([1400,1])),meta:{d:16225056e5,l:"2021年6月1日",c:["Gradle","Dependencies"],g:["JAR Files","Local Dependencies"],e:`
<p>在本教程中，我们将重点介绍如何将本地JAR文件添加到我们的Gradle依赖中。</p>
<h2>2. 本地JAR文件</h2>
<p>在我们开始解释将本地JAR文件添加到Gradle之前，有必要提及，不推荐手动添加那些在公共仓库中可用的依赖。构建系统如Gradle存在的一个重要原因就是自动处理这类事情。在Gradle之前，我们通常需要下载JAR文件并将其放在_libs_文件夹中。现在，Gradle为我们自动处理了这些。</p>
<p>然而，对于特殊目的，如自定义JAR文件，Gradle仍然支持这一过程。</p>
<h2>3. 平铺目录</h2>
<p>如果我们想使用一个平铺的文件系统目录作为我们的仓库，我们需要在我们的_build.gradle_文件中添加以下内容：</p>`,r:{minutes:1.86,words:558},t:"Gradle中添加本地JAR文件作为依赖",y:"a"}}],["/posts/baeldung/2024-07-29/2024-07-29-Multipart%20Request%20Handling%20in%20Spring.html",{loader:()=>a(()=>import("./2024-07-29-Multipart Request Handling in Spring.html-5LJtMSUy.js"),__vite__mapDeps([1401,1])),meta:{d:17222976e5,l:"2024年7月30日",c:["Spring Boot","Multipart Request"],g:["Spring","Multipart"],e:`
<p>在本教程中，我们将重点介绍在Spring Boot中发送多部分请求的各种机制。多部分请求包括将许多不同类型的数据作为单一HTTP方法调用的一部分，通过边界分隔发送。通常，我们可以发送复杂的JSON、XML或CSV数据，以及在此请求中传输多部分文件。多部分文件的例子包括音频或图像文件。此外，我们还可以将简单的键/值对数据与多部分文件一起作为多部分请求发送。</p>
<p>现在让我们看看我们可以发送这些数据的各种方式。</p>
<h2>2. 使用 @ModelAttribute</h2>
<p>让我们考虑一个简单的用例，使用表单发送员工的数据，包括姓名和文件。</p>
<p>首先，我们将创建一个Employee抽象来存储表单数据：</p>`,r:{minutes:2.91,words:873},t:"Spring Boot中处理多部分请求",y:"a"}}],["/posts/baeldung/2024-07-29/2024-07-29-Non%20Capturing%20Regex%20Groups%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-29-Non Capturing Regex Groups in Java.html-DBfC3SLa.js"),__vite__mapDeps([1402,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Regular Expressions"],g:["Java","Regex","Non-Capturing Groups"],e:`<hr>
<h1>Java正则表达式中的非捕获组</h1>
<h2>1. 概述</h2>
<p>非捕获组是Java正则表达式中的重要结构。**它们创建了一个作为单一单元工作的子模式，但不会保存匹配的字符序列。**在本教程中，我们将探讨如何在Java正则表达式中使用非捕获组。</p>
<h2>2. 正则表达式组</h2>
<p>正则表达式组可以是两种类型之一：捕获和非捕获。</p>
<p>捕获组会保存匹配的字符序列。它们的值可以作为模式中的反向引用使用，或者稍后在代码中检索。</p>
<p>尽管它们不会保存匹配的字符序列，<strong>非捕获组可以改变组内的模式匹配修饰符。一些非捕获组甚至可以在成功匹配子模式后丢弃回溯信息。</strong></p>`,r:{minutes:6.18,words:1854},t:"Java正则表达式中的非捕获组",y:"a"}}],["/posts/baeldung/2024-07-29/2024-07-29-Observability%20in%20Distributed%20Systems.html",{loader:()=>a(()=>import("./2024-07-29-Observability in Distributed Systems.html-DlvjLkSL.js"),__vite__mapDeps([1403,1])),meta:{d:16225056e5,l:"2021年6月1日",c:["Distributed Systems"],g:["Observability","Monitoring","Microservices"],e:`
<p>在本教程中，我们将讨论可观测性以及它在分布式系统中的重要作用。我们将涵盖构成可观测性的数据类型。这将帮助我们理解从分布式系统收集、存储和分析遥测数据的挑战。</p>
<p>最终，我们将介绍可观测性领域的一些行业标准和流行工具。</p>
<h2>2. 什么是可观测性？</h2>
<p>让我们直接给出正式定义来开始吧！可观测性是<strong>仅通过系统的外部输出就能测量其内部状态的能力</strong>。</p>
<p>对于像微服务这样的分布式系统，这些外部输出基本上被称为遥测数据。它包括机器的资源消耗、在机器上运行的应用程序生成的日志等信息。</p>
<h3>2.1. 遥测数据的类型</h3>`,r:{minutes:16.23,words:4868},t:"分布式系统的可观测性",y:"a"}}],["/posts/baeldung/2024-07-29/2024-07-29-Private%20Methods%20in%20Java%20Interfaces.html",{loader:()=>a(()=>import("./2024-07-29-Private Methods in Java Interfaces.html-DOcs51kE.js"),__vite__mapDeps([1404,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Interfaces"],g:["Java 9","Private Methods"],e:`<hr>
<h1>Java接口中的私有方法</h1>
<h2>1. 概述</h2>
<p><strong>从Java 9开始，可以在Java接口中添加私有方法</strong>。在这个简短的教程中，让我们讨论如何定义这些方法以及它们的好处。</p>
<h2>2. 在接口中定义私有方法</h2>
<p><strong>私有方法可以是静态的或非静态的</strong>。这意味着在接口中，我们可以创建私有方法来封装来自默认和静态公共方法签名的代码。</p>
<p>首先，让我们看看如何从默认接口方法中使用私有方法：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:1.75,words:525},t:"Java接口中的私有方法",y:"a"}}],["/posts/baeldung/2024-07-29/2024-07-29-Remove%20Elements%20From%20a%20List%20While%20Iterating%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-07-29-Remove Elements From a List While Iterating in Kotlin.html-P6xvix1I.js"),__vite__mapDeps([1405,1])),meta:{d:16672608e5,l:"2022年11月1日",c:["Kotlin","Programming"],g:["Kotlin","List","Iterator","removeAll"],e:`
<p>如果你有几年的Kotlin语言和服务器端开发经验，并且有兴趣与社区分享这些经验，请查看我们的<strong>贡献指南</strong>。</p>
<h2>1. 概述</h2>
<p>在本教程中，我们将探讨如何在迭代过程中从列表中移除元素。Kotlin提供了多种灵活的方法，在迭代期间高效地从列表中移除元素。我们将探索适用于不同场景的不同技术。</p>
<h2>2. 使用迭代器移除元素</h2>
<p>首先，我们应该提到，只有当列表是可变的时，才可能从列表中移除元素。对于不可变的列表，当我们尝试从中移除元素时，编译器会抛出错误。不可变列表没有暴露修改的方法。</p>
<p>第一种经典方法是使用迭代器。它允许在向前迭代期间安全地移除元素：</p>`,r:{minutes:2.9,words:869},t:"Kotlin中在迭代列表时移除元素",y:"a"}}],["/posts/baeldung/2024-07-29/2024-07-29-Secret%20Key%20and%20String%20Conversion%20in%20Java.html",{loader:()=>a(()=>import("./2024-07-29-Secret Key and String Conversion in Java.html-TZf53ip9.js"),__vite__mapDeps([1406,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Java","Security"],g:["Secret Key","String Conversion"],e:`
<p>在现实生活中，我们经常会遇到需要进行加密和解密以确保安全的情况。我们可以使用密钥来轻松实现这一点。因此，为了加密和解密密钥，我们需要知道如何将密钥转换为字符串以及反之。在本教程中，我们将看到Java中的秘密密钥和字符串转换。此外，我们还将通过示例了解在Java中以不同方式创建Secret Key。</p>
<p>密钥是用于加密和解密消息的信息或参数。在Java中，我们有SecretKey接口，它将密钥定义为秘密（对称）密钥。这个接口的目的是将所有秘密密钥接口分组（并提供类型安全性）。</p>
<p>在Java中生成密钥有两种方式：从随机数生成或从给定的密码派生。</p>
<p><strong>第一种方法是使用密码学安全的（伪）随机数生成器如SecureRandom类来生成密钥。</strong></p>`,r:{minutes:2.33,words:700},t:"Java中的秘密密钥与字符串转换",y:"a"}}],["/posts/baeldung/2024-07-29/2024-07-29-Spring%20Boot%20Error%20ApplicationContextException.html",{loader:()=>a(()=>import("./2024-07-29-Spring Boot Error ApplicationContextException.html-CRfLCpBl.js"),__vite__mapDeps([1407,1])),meta:{d:16487712e5,l:"2022年4月1日",c:["Spring Boot","Error Handling"],g:["ApplicationContextException","ServletWebServerFactory"],e:`
<p>在本快速教程中，我们将仔细研究 Spring Boot 错误 "ApplicationContextException: 由于缺少 ServletWebServerFactory bean 而无法启动 ServletWebServerApplicationContext"。首先，我们将阐明此错误的背后主要原因。然后，我们将通过一个实际示例深入探讨如何重现它，以及如何解决它。</p>
<h2>1. 概述</h2>
<h2>2. 可能的原因</h2>
<p>首先，让我们尝试理解错误消息的含义。"由于缺少 ServletWebServerFactory bean 而无法启动 ServletWebServerApplicationContext" 已经说明了一切。它简单地告诉我们，在 ApplicationContext 中没有配置 ServletWebServerFactory bean。</p>`,r:{minutes:3.42,words:1027},t:"Spring Boot 错误 ApplicationContextException | Baeldung",y:"a"}}],["/posts/baeldung/2024-07-29/2024-07-29-Spring%20Validation%20in%20the%20Service%20Layer.html",{loader:()=>a(()=>import("./2024-07-29-Spring Validation in the Service Layer.html-CWIM4z7U.js"),__vite__mapDeps([1408,1])),meta:{d:1722236725e3,e:`<p>我将为您翻译网页标题和部分页面信息，但请注意，由于无法访问提供的链接，我将使用模拟数据来完成翻译任务。</p>
<hr>
<p>date: 2024-07-29
category:</p>
<ul>
<li>Spring Framework</li>
<li>Validation
tag:</li>
<li>Spring Service Layer</li>
<li>Validation Techniques
head:</li>
<li>
<ul>
<li>meta</li>
<li>name: keywords
content: Spring, Service Layer, Validation, Best Practices</li>
</ul>
</li>
</ul>`,r:{minutes:6.06,words:1819},t:"Spring服务层验证",y:"a"}}],["/posts/baeldung/Archive/2024-06-19-Check%20if%20an%20Element%20Is%20Present%20in%20a%20Set%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-19-Check if an Element Is Present in a Set in Java.html-gW5RuI3H.js"),__vite__mapDeps([1409,1])),meta:{d:17188416e5,l:"2024年6月20日",c:["Java","Set"],g:["Set Membership","Java Collection"],e:`
<p>在这篇简短的教程中，我们将探讨如何在Java中检查一个元素是否存在于一个集合（Set）中。</p>
<p>首先，我们将通过使用Java核心开发工具包（JDK）来探索解决方案。然后，我们将阐明如何使用外部库，如Apache Commons，来实现相同的结果。</p>
<h3>2.1 使用核心JDK的<code>Set#contains()</code>方法</h3>
<p>顾名思义，这个方法检查特定的集合是否包含给定的元素。这是我们可以使用的最简单的解决方案之一，以回答我们的核心问题：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenASet_whenUsingContainsMethod_thenCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertThat</span><span class="token punctuation">(</span><span class="token constant">CITIES</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"London"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertThat</span><span class="token punctuation">(</span><span class="token constant">CITIES</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"Madrid"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isFalse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:4.67,words:1401},t:"Java中检查集合中元素是否存在的方法",y:"a"}}],["/posts/baeldung/Archive/2024-06-19-Checking%20Which%20Java%20Version%20Is%20Running%20in%20Eclipse.html",{loader:()=>a(()=>import("./2024-06-19-Checking Which Java Version Is Running in Eclipse.html-Dwi33kJA.js"),__vite__mapDeps([1410,1])),meta:{d:17187552e5,l:"2024年6月19日",c:["Java","Eclipse"],g:["Java版本","Eclipse IDE"],e:`<hr>
<h1>在Eclipse中检查正在运行的Java版本</h1>
<h2><strong>1. 概述</strong></h2>
<p>在Eclipse IDE中使用Java时，确保正确的Java版本对于编译和执行代码至关重要。Eclipse通过提供简单的方法来检查和配置它所使用的Java版本，简化了这一过程。在本教程中，我们将介绍确定Eclipse中运行的Java版本的步骤。</p>
<h2>2. Eclipse中的Java：环境与项目配置</h2>
<p><strong>在Eclipse中使用的Java版本与Eclipse内特定项目配置的Java版本之间存在差异，这一点非常重要。</strong></p>`,r:{minutes:3.1,words:929},t:"在Eclipse中检查正在运行的Java版本",y:"a"}}],["/posts/baeldung/Archive/2024-06-19-Convert%20TemporalAccessor%20to%20LocalDate.html",{loader:()=>a(()=>import("./2024-06-19-Convert TemporalAccessor to LocalDate.html-CQ8Z2Qny.js"),__vite__mapDeps([1411,1])),meta:{d:17188416e5,l:"2024年6月20日",c:["Java","Date and Time"],g:["TemporalAccessor","LocalDate"],e:`
<h2>1. 引言</h2>
<p>处理日期和时间值是一项常见任务。有时，我们可能需要将TemporalAccessor对象转换为LocalDate对象以执行特定日期的操作。这在解析日期时间字符串或从日期时间对象中提取日期组件时可能非常有用。</p>
<p><strong>在本教程中，我们将探索在Java中实现这种转换的不同方法。</strong></p>
<h2>2. 使用LocalDate.from()方法</h2>
<p>将TemporalAccessor转换为LocalDate的一种直接方法是使用LocalDate.from(TemporalAccessor temporal)方法。实际上，此方法从TemporalAccessor中提取日期组件（年、月和日）并构建一个LocalDate对象。让我们看一个例子：</p>`,r:{minutes:2.11,words:632},t:"Java中将TemporalAccessor转换为LocalDate",y:"a"}}],["/posts/baeldung/Archive/2024-06-19-Convert%20a%20Phone%20Number%20in%20Words%20to%20Number%20with%20Java.html",{loader:()=>a(()=>import("./2024-06-19-Convert a Phone Number in Words to Number with Java.html-Co4KYM8m.js"),__vite__mapDeps([1412,1])),meta:{d:17187552e5,l:"2024年6月19日",c:["Java","Programming"],g:["Java","Algorithm","Phone Number Conversion"],e:`
<h2>1. 概述</h2>
<p>我们可能需要处理以文本形式表达的电话号码。也许我们通过语音转文字接口接收到了一个电话号码。</p>
<p>在本教程中，我们将研究一个算法，该算法处理一系列表达数字序列的单词，并将它们转换为一串数字。</p>
<h2>2. 问题陈述介绍</h2>
<p>让我们更深入地看看输入的格式。我们将得到一个用单词表达的电话号码，例如“five six eight”。然而，口语数字通常包括乘数，例如“double two”。</p>
<p>因此，我们期望我们的算法能够转换：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>输入："triple five two three six eight"
预期输出："5552368"
</code></pre></div>`,r:{minutes:4.77,words:1430},t:"Java中将用文字表达的电话号码转换为数字",y:"a"}}],["/posts/baeldung/Archive/2024-06-19-Disable%20%20Cacheable%20in%20Spring%20Boot.html",{loader:()=>a(()=>import("./2024-06-19-Disable  Cacheable in Spring Boot.html-BCrCQNPP.js"),__vite__mapDeps([1413,1])),meta:{d:17188416e5,l:"2024年6月20日",c:["Spring Boot","Jmix"],g:["Cacheable","Caching"],e:`
<p>无论你是刚开始还是拥有多年经验，<strong>Spring Boot</strong> 都是构建新应用程序的绝佳选择，使用起来非常便捷。</p>
<p>Jmix增强了Spring Boot开发者的能力，允许他们构建并交付<strong>全栈Web</strong> <strong>应用程序</strong>，而无需涉足前端技术。它使你能够创建从简单的Web GUI CRUD应用程序到复杂的企业解决方案，消除了前后端分离及其相关的安全问题。</p>
<p><strong>Jmix平台</strong>包括一个构建在<strong>Spring Boot, JPA, 和 Vaadin</strong>之上的框架，并配备了Jmix Studio，这是一个<strong>IntelliJ IDEA插件</strong>，配备了一系列开发者生产力工具。该平台还提供了<strong>现成</strong>的报告生成、BPM、地图等插件，你可以在你的Jmix应用程序中使用，或者作为单独的服务使用。所有技术都是相互连接的，赋予一个Java开发者以整个团队的水平，<strong>以最少的知识</strong> <strong>开始</strong>。</p>`,r:{minutes:5.18,words:1553},t:"在Spring Boot中禁用@Cacheable",y:"a"}}],["/posts/baeldung/Archive/2024-06-19-Disable%20%20EnableScheduling%20on%20Spring%20Tests.html",{loader:()=>a(()=>import("./2024-06-19-Disable  EnableScheduling on Spring Tests.html-SwrtYuM5.js"),__vite__mapDeps([1414,1])),meta:{d:17188416e5,l:"2024年6月20日",c:["Spring","Testing"],g:["Spring Boot","Scheduling","Integration Testing"],e:`<hr>
<h1>在Spring测试中禁用@EnableScheduling</h1>
<p>无论你是刚开始还是拥有多年经验，<strong>Spring Boot</strong> 都是构建新应用程序的绝佳选择，使用起来非常轻松。</p>
<p>Jmix增强了Spring Boot开发者的能力，允许他们构建和交付<strong>全栈Web</strong> <strong>应用程序</strong>，而无需涉足前端技术。它使你能够从简单的Web GUI CRUD应用程序到复杂的企业解决方案，消除了前端/后端分离及其相关的安全问题。</p>
<p><strong>Jmix平台</strong>包括一个构建在<strong>Spring Boot, JPA, 和 Vaadin</strong>之上的框架，并附带Jmix Studio，这是一个<strong>IntelliJ IDEA插件</strong>，配备了一套开发者生产力工具。该平台还提供了<strong>现成</strong>的插件，用于报告生成、BPM、地图等，你可以在Jmix应用程序中使用它们或作为单独的服务。所有技术都是相互连接的，使单个Java开发者能够以整个团队的水平进行工作，<strong>入门所需的知识最少</strong>。</p>`,r:{minutes:7.29,words:2186},t:"在Spring测试中禁用@EnableScheduling",y:"a"}}],["/posts/baeldung/Archive/2024-06-19-Get%20Last%20n%20Characters%20From%20a%20String.html",{loader:()=>a(()=>import("./2024-06-19-Get Last n Characters From a String.html-GerHzvH3.js"),__vite__mapDeps([1415,1])),meta:{d:17188416e5,l:"2024年6月20日",c:["Java","String Manipulation"],g:["substring","StringUtils","Stream API"],e:`
<p>在本教程中，我们将探讨几种不同的方法来从字符串中获取最后n个字符。</p>
<p>假设我们有以下字符串，其值表示一个日期：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"10-03-2024"</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:3.57,words:1070},t:"从字符串获取最后n个字符的几种方法",y:"a"}}],["/posts/baeldung/Archive/2024-06-19-Get%20a%20Path%20to%20a%20Resource%20in%20a%20Java%20JAR%20File.html",{loader:()=>a(()=>import("./2024-06-19-Get a Path to a Resource in a Java JAR File.html-CTrV8dyM.js"),__vite__mapDeps([1416,1])),meta:{d:17188416e5,l:"2024年6月20日",c:["Java","JAR文件"],g:["JAR","资源路径"],e:`
<h2>1. 引言</h2>
<p>Java中JAR文件内的资源通常使用相对于JAR文件根的路径来访问。此外，了解这路径的结构对于有效检索资源至关重要。</p>
<p><strong>在本教程中，我们将探讨获取Java JAR文件内资源路径的不同方法。</strong></p>
<h2>2. 使用 <em>Class.getResource()</em> 方法获取资源的URL</h2>
<p><em>Class.getResource()</em> 方法提供了一种直接获取JAR文件内资源的_URL_ 的方式。让我们看看如何使用这个方法：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenFile_whenClassUsed_thenGetResourcePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">URL</span> resourceUrl <span class="token operator">=</span> <span class="token class-name">GetPathToResourceUnitTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"/myFile.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertNotNull</span><span class="token punctuation">(</span>resourceUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.37,words:710},t:"在Java JAR文件中获取资源路径",y:"a"}}],["/posts/baeldung/Archive/2024-06-19-How%20to%20Check%20Number%20Perfection.html",{loader:()=>a(()=>import("./2024-06-19-How to Check Number Perfection.html-J4Yx9t4x.js"),__vite__mapDeps([1417,1])),meta:{d:17187552e5,l:"2024年6月19日",c:["Java","算法"],g:["完美数","算法"],e:`
<h2>1. 引言</h2>
<p><strong>完美数是一种特殊的正整数，它具有一个独特的属性，即它等于其所有真因子（不包括它本身）的和。</strong></p>
<p>完美数在整数领域中的稀有性是其最引人入胜的特点之一。事实上，在历史上，只确定了少数几个完美数。人类已知的前四个完美数是6、28、496和8128。</p>
<p>在本文中，我们将深入探讨完美数的概念，并探索各种方法来检查给定的数字是否属于这一有趣的类别。</p>
<h2>2. 理解完美数</h2>
<p>让我们通过前几个例子来理解完美数的概念。例如，数字6有真因子1、2和3。将这些因子相加得到1 + 2 + 3 = 6，使6成为一个完美数。同样，数字28有真因子1、2、4、7和14，它们的和等于1 + 2 + 4 + 7 + 14 = 28。因此，28是另一个完美数。</p>`,r:{minutes:6.92,words:2076},t:"如何检查完美数",y:"a"}}],["/posts/baeldung/Archive/2024-06-19-How%20to%20Scale%20a%20Bufferedimage%20in%20Java%20.html",{loader:()=>a(()=>import("./2024-06-19-How to Scale a Bufferedimage in Java .html-k1KBfQ3Z.js"),__vite__mapDeps([1418,1])),meta:{d:17187552e5,l:"2024年6月19日",c:["Java","图像处理"],g:["BufferedImage","图像缩放"],e:`
<p>在本教程中，我们将介绍如何使用Java的基本API重新调整图像大小。我们将展示如何从文件加载和保存图像，并解释缩放过程中的一些技术细节。</p>
<h2>2. 在Java中加载图像</h2>
<p>对于本教程，我们将使用一个简单的JPG图像文件。我们将使用Java SDK中包含的_ImageIO_ API来加载它。这个API有一些预设的_ImageReaders_，用于读取如JPEG和PNG等格式。_ImageReaders_知道如何读取它们各自的图像格式，并从图像文件中获取位图。</p>
<p>我们将使用_ImageIO_的_read_方法。这个方法有几个重载版本，但我们将使用最简单的一个：</p>`,r:{minutes:3.46,words:1037},t:"如何在Java中缩放BufferedImage？",y:"a"}}],["/posts/baeldung/Archive/2024-06-19-How%20to%20Test%20Spring%20Application%20Events.html",{loader:()=>a(()=>import("./2024-06-19-How to Test Spring Application Events.html-CFmhqhzv.js"),__vite__mapDeps([1419,1])),meta:{d:17187552e5,l:"2024年6月19日",c:["Spring Framework","Testing"],g:["Testing","Events","Spring","Application Events"],e:`<hr>
<h1>如何测试Spring应用程序事件</h1>
<p>在本教程中，我们将讨论使用Spring应用程序事件的代码测试。我们将从手动创建测试工具开始，这些工具帮助我们在测试目的下发布和收集应用程序事件。</p>
<p>之后，我们将探索Spring Modulith的测试库，并使用其流畅的场景API来讨论常见的测试案例。使用这种声明性DSL，我们将编写富有表现力的测试，这些测试可以轻松地产生和消费应用程序事件。</p>
<p><strong>Spring Framework提供应用程序事件，以允许组件在保持松散耦合的同时相互通信。</strong> 我们可以使用_ApplicationEventPublisher_ bean来发布内部事件，这些事件是普通的Java对象。因此，所有注册的监听器都会收到通知。</p>`,r:{minutes:6.65,words:1995},t:"如何测试Spring应用程序事件",y:"a"}}],["/posts/baeldung/Archive/2024-06-19-Immutable%20vs%20Unmodifiable%20Collection%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-19-Immutable vs Unmodifiable Collection in Java.html-C6hxaF1V.js"),__vite__mapDeps([1420,1])),meta:{d:17188416e5,l:"2024年6月20日",c:["Java","Collections"],g:["Immutable","Unmodifiable"],e:`
<p>在本教程中，我们将探讨Java中除了常见的_Collection_类之外的两种集合类型。众所周知，我们有三个核心集合类：<em>Map</em>、<em>List_和_Set</em>。它们有对应的<strong>不可修改</strong>和<strong>不可变版本</strong>。</p>
<p>在我们的示例中，我们涵盖了Java中的_Map_系列集合。_Collections.unmodifiableMap()<em>和_Map.of()<em>方法适用于_Map</em>，而_Collections.unmodifiableList()</em>、<em>Collections.unmodifiableSet()</em>、_List.of()_和_Set.of()_是_List_和_Set_集合类的相应实用方法。相同的概念也适用于_List_和_Set_集合类。</p>`,r:{minutes:5.78,words:1735},t:"Java中的不可变与不可修改集合",y:"a"}}],["/posts/baeldung/Archive/2024-06-19-Internet%20Address%20Resolution%20SPI%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-19-Internet Address Resolution SPI in Java.html-BuCsIi6D.js"),__vite__mapDeps([1421,1])),meta:{d:17188416e5,l:"2024年6月20日",c:["Java","JEP 418"],g:["Service Provider Interface","Internet Address Resolution"],e:`
<p>在本教程中，我们将讨论Java的JEP 418，它为Internet主机和地址解析建立了一个新的服务提供者接口（SPI）。</p>
<p>任何连接到计算机网络的设备都被分配一个数值或IP（Internet协议）地址。IP地址有助于唯一地识别网络上的设备，并且它们也有助于路由数据包到设备和从设备。</p>
<p>它们通常有两种类型。IPv4是IP标准的第四代，是一个32位地址。由于互联网的快速增长，还发布了一个更大的新的v6版本的IP标准，其中包含十六进制字符。</p>
<p>此外，还有另一种相关的地址类型。网络设备，如以太网端口或网络接口卡（NIC），具有MAC（媒体访问控制）地址。这些是全球分布的，所有网络接口设备都可以用MAC地址唯一地识别。</p>`,r:{minutes:7.23,words:2169},t:"Java中的Internet地址解析服务提供者接口",y:"a"}}],["/posts/baeldung/Archive/2024-06-19-Introduction%20to%20Light%204J.html",{loader:()=>a(()=>import("./2024-06-19-Introduction to Light 4J.html-BSSyhdUo.js"),__vite__mapDeps([1422,1])),meta:{d:17187552e5,l:"2024年6月19日",c:["Java","Framework"],g:["Light-4J","Microservices"],e:`
<p>传统的框架虽然健壮，但往往引入了挑战敏捷性的复杂性。现代开发需要的框架不仅要强大，还要灵活。轻量级框架，包括 Light-4J，在采用极简设计哲学的同时，专注于提供基本功能而不带不必要的复杂性，从而降低了开发人员的学习曲线，并优先考虑快速的开发周期。</p>
<p>**Light-4J 是一种尖端的 Java 框架，通过结合敏捷性和性能来彻底改变开发。**它采用现代开发范式，与微服务的原则保持一致，并满足当今动态软件架构的需求。</p>
<p>在本教程中，我们将深入探讨其核心理念、主要功能和架构概念。我们将剖析它之所以轻量级的原因，以及这种品质如何转化为增强的开发速度和资源效率。</p>`,r:{minutes:11.89,words:3568},t:"Light-4J 简介",y:"a"}}],["/posts/baeldung/Archive/2024-06-19-Logging%20in%20Apache%20Camel.html",{loader:()=>a(()=>import("./2024-06-19-Logging in Apache Camel.html-6cvIb92S.js"),__vite__mapDeps([1423,1])),meta:{d:17188416e5,l:"2024年6月20日",c:["Apache Camel","Logging"],g:["Java","Apache Camel","Logging"],e:`
<p>记录日志在软件开发中至关重要，它有助于记录应用程序的每一个足迹。它有助于跟踪应用程序的活动和状态。基本上，它对于调试非常有用。</p>
<p>Apache Camel提供了一个组件、接口和拦截器来记录消息和交换。它通过为各种日志框架提供一层抽象来简化记录日志。</p>
<p>在本教程中，我们将探讨在Camel应用程序中记录消息和交换的四种方式。</p>
<h2>2. 使用Log EIP</h2>
<p>Apache Camel 2.2提供了一个轻量级的_log()_ DSL，用于从路由中记录人类可读的消息。其主要用途是快速将消息输出到日志控制台。此外，我们还可以与Camel Simple表达式语言一起使用，以进一步将路由中的细节记录到日志控制台。</p>`,r:{minutes:5.47,words:1642},t:"在Apache Camel中记录日志",y:"a"}}],["/posts/baeldung/Archive/2024-06-19-Logging%20in%20Spring%20Boot%20With%20Loki.html",{loader:()=>a(()=>import("./2024-06-19-Logging in Spring Boot With Loki.html-DjVcGKT9.js"),__vite__mapDeps([1424,1])),meta:{d:17188416e5,l:"2024年6月20日",c:["Spring Boot","Logging"],g:["Loki","Grafana"],e:`
<p>无论你是刚开始学习还是拥有多年经验，<strong>Spring Boot</strong> 都是构建新应用程序的绝佳选择，它让开发变得轻松。</p>
<p>Jmix 增强了 Spring Boot 开发者的能力，允许他们构建和交付 <strong>全栈 Web 应用程序</strong>，而无需深入前端技术。它使你能够创建从简单的 Web GUI CRUD 应用程序到复杂的企业解决方案，消除了前端/后端分离及其相关的安全问题。</p>
<p><strong>Jmix 平台</strong> 包括一个基于 <strong>Spring Boot, JPA, 和 Vaadin</strong> 的框架，并附带 Jmix Studio，这是一个 IntelliJ IDEA 插件，配备了一套开发者生产力工具。该平台还提供了 <strong>即开即用</strong> 的插件，用于报告生成、BPM、地图等，你可以在 Jmix 应用程序中使用它们，或者作为单独的服务。所有技术都是相互连接的，使单个 Java 开发者能够在几乎不需要开始知识的情况下，达到整个团队的水平。</p>`,r:{minutes:4.96,words:1489},t:"Spring Boot 中使用 Loki 进行日志记录",y:"a"}}],["/posts/baeldung/Archive/2024-06-19-Multiple%20Level%20Mock%20Injection%20Into%20Mockito%20Spy%20Objects.html",{loader:()=>a(()=>import("./2024-06-19-Multiple Level Mock Injection Into Mockito Spy Objects.html-Cgf_GdEr.js"),__vite__mapDeps([1425,1])),meta:{d:17188416e5,l:"2024年6月20日",c:["Testing","Mockito"],g:["Mockito","Testing","Java"],e:`<hr>
<h1>Mockito 多级模拟注入到Spy对象</h1>
<p>在本教程中，我们将讨论众所周知的Mockito注解_@InjectMocks_、<em>@Mock_和</em>@Spy_，并理解它们在多级注入场景中的协同工作方式。我们将讨论重要的测试概念，并学习如何进行适当的测试配置。</p>
<h2>2. 多级注入概念</h2>
<p>多级注入是一个强大的概念，但如果误用可能会很危险。让我们在继续实现之前回顾一下重要的理论概念。</p>
<h3>2.1. 单元测试概念</h3>
<p><strong>根据定义，单元测试是覆盖源代码一个单元的测试。</strong> 在Java世界中，我们可以将单元测试视为覆盖某个特定类—服务、仓库、工具等的测试。</p>`,r:{minutes:6.83,words:2049},t:"Mockito 多级模拟注入到Spy对象",y:"a"}}],["/posts/baeldung/Archive/2024-06-19-New%20Features%20in%20Java%2021.html",{loader:()=>a(()=>import("./2024-06-19-New Features in Java 21.html-DA6eCg-7.js"),__vite__mapDeps([1426,1])),meta:{d:16950816e5,l:"2023年9月19日",c:["Java","New Features"],g:["Java 21","JEP"],e:`
<p>Oracle在2023年9月19日发布了Java 21，这是继Java 17之后的最新的Java长期支持(LTS)版本。</p>
<p>本文将讨论Java 21中新增的特性和增强功能。</p>
<h2>2. 通过JEP引入的显著增强功能列表</h2>
<h3>2.1. 记录模式（JEP 440）</h3>
<p>记录模式在Java 19和Java 20中作为预览特性被包含进来，Java 21进一步改进了这一特性。</p>
<p><strong>此JEP将现有的模式匹配功能扩展到解构记录类实例，这使得编写复杂的数据查询成为可能</strong>。还增加了对嵌套模式的支持，以实现更可组合的数据查询。</p>`,r:{minutes:6.07,words:1821},t:"Java 21的新特性概览",y:"a"}}],["/posts/baeldung/Archive/2024-06-19-Opening%20HTML%20File%20Using%20Java.html",{loader:()=>a(()=>import("./2024-06-19-Opening HTML File Using Java.html-Bi-6urjy.js"),__vite__mapDeps([1427,1])),meta:{d:17188416e5,l:"2024年6月20日",c:["Java","HTML"],g:["Desktop Class","ProcessBuilder"],e:`
<p>在各种Java应用程序中，经常需要以编程方式打开和显示HTML文件。Java提供了几种方法来完成这项任务，无论是生成报告、显示文档还是呈现用户界面。</p>
<p>在本教程中，我们将探讨两种不同的方法：使用_Desktop_和_ProcessBuilder_类。</p>
<h2>2. 使用_Desktop_类</h2>
<p>_Desktop_类提供了一种与桌面默认浏览器交互的独立于平台的方式。</p>
<p>在我们深入探讨这些方法之前，让我们首先初始化URL和HTML文件的绝对路径。让我们首先确保HTML文件存在，并获取其绝对路径以供我们的测试进一步使用：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">URL</span> url<span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> absolutePath<span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:2.49,words:748},t:"使用Java打开HTML文件",y:"a"}}],["/posts/baeldung/Archive/2024-06-19-Statements%20Before%20super%20%20%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-19-Statements Before super   in Java.html-BeRTIvnw.js"),__vite__mapDeps([1428,1])),meta:{d:17188416e5,l:"2024年6月20日",c:["Java","Programming"],g:["super()","Constructor","Java Best Practices"],e:`<hr>
<h1>Java中super()之前的语句</h1>
<p>在Java编程中，我们使用_super()_关键字来调用超类构造函数。然而，关于在子类构造函数中超类构造函数调用之前的语句放置有特定的规则。</p>
<p><strong>在本教程中，我们将深入探讨super()的重要性，放置语句之前它的影响，以及应遵循的最佳实践。</strong></p>
<h3>2. 理解super()的角色</h3>
<p>当一个子类被实例化时，它的构造函数隐式地使用super()调用其超类的构造函数。这确保了在子类构造函数继续其初始化逻辑之前，对象的超类部分被正确初始化。</p>
<p><strong>此外，省略或错误放置super()调用可能导致编译错误或意外的运行时行为。</strong></p>`,r:{minutes:2.71,words:813},t:"Java中super()之前的语句",y:"a"}}],["/posts/baeldung/Archive/2024-06-19-The%20%20Struct%20Annotation%20Type%20in%20Hibernate%20%20%20Structured%20User%20Defined%20Types.html",{loader:()=>a(()=>import("./2024-06-19-The  Struct Annotation Type in Hibernate   Structured User Defined Types.html-BeNOtU0O.js"),__vite__mapDeps([1429,1])),meta:{d:17188416e5,l:"2024年6月20日",c:["Hibernate","Java"],g:["Struct Annotation","User-Defined Types"],e:`
<p>在本教程中，我们将回顾Hibernate的@Struct注解，它允许开发者创建结构化用户定义类型。</p>
<p>结构化用户定义类型，也称为结构化类型，是在SQL:1999标准中引入的，是对象关系（ORM）数据库的一个特性。</p>
<p>结构化或复合类型有其用例，特别是自SQL:2016标准引入JSON支持以来。这些结构化类型的值可以访问它们的子部分，并且不像表中的行那样具有标识符或主键。</p>
<h3>结构映射</h3>
<p><strong>Hibernate允许你通过@Struct注解类型为带有@Embeddable注解或@Embedded属性的类指定结构化类型。</strong></p>`,r:{minutes:3.1,words:931},t:"Hibernate中的@Struct注解类型 - 结构化用户定义类型 | Baeldung",y:"a"}}],["/posts/baeldung/Archive/2024-06-19-The%20Difference%20Between%20Throwing%20an%20Exception%20and%20Mono.error%20%20%20in%20Spring%20Webflux.html",{loader:()=>a(()=>import("./2024-06-19-The Difference Between Throwing an Exception and Mono.error   in Spring Webflux.html-_wdsLIUj.js"),__vite__mapDeps([1430,1])),meta:{d:17187552e5,l:"2024年6月19日",c:["Spring WebFlux","Reactive Programming"],g:["Exception Handling","Mono.error()"],e:`
<p>错误处理是使用Spring WebFlux进行响应式编程的一个关键方面。开发者通常依赖两种主要方法来处理错误：抛出异常或使用Project Reactor提供的_Mono.error()_方法。这两种方法都用于信号错误，但它们具有不同的特点和用例。</p>
<p>在本教程中，我们将解释在Spring WebFlux中抛出异常和使用_Mono.error()_的区别。我们将提供说明性的Java代码示例，以使其更易于理解。</p>
<h2>2. 传统方法：抛出异常</h2>
<p>多年来，抛出异常一直是管理Java应用程序中错误的可靠方式。这是一种简单的方法，可以中断程序的正常流程，并将错误传达给应用程序的更高层。Spring WebFlux与这种传统的错误处理方法无缝集成，使开发者能够在其响应式端点中抛出异常。下面的代码代表了传统方法的一个例子：</p>`,r:{minutes:3.55,words:1066},t:"Spring WebFlux中抛出异常与Mono.error()的区别",y:"a"}}],["/posts/baeldung/Archive/2024-06-20-%20Subselect%20Annotation%20in%20Hibernate.html",{loader:()=>a(()=>import("./2024-06-20- Subselect Annotation in Hibernate.html-CPQMH3eQ.js"),__vite__mapDeps([1431,1])),meta:{d:17188416e5,l:"2024年6月20日",c:["Hibernate","JPA"],g:["Subselect","Entity","SQL"],e:`
<p>在本教程中，我们将回顾Hibernate中的@Subselect注解，如何使用它以及它的好处。我们还将看到Hibernate对使用@Subselect注解的实体的限制及其后果。</p>
<h2>@Subselect注解概述</h2>
<p>@Subselect允许我们将一个不可变的实体映射到SQL查询上。让我们从实体到SQL查询映射的含义开始解释。</p>
<h3>2.1. 映射到SQL查询</h3>
<p>通常，我们在Hibernate中创建实体时，会使用@Entity注解。这个注解表明这是一个实体，应该由持久化上下文管理。我们也可以提供@Table注解，以指示Hibernate应该将这个实体映射到哪个具体的表。默认情况下，每当我们在Hibernate中创建一个实体时，它都假定实体直接映射到一个特定的表。在大多数情况下，这正是我们想要的，但并不总是这样。</p>`,r:{minutes:6.5,words:1949},t:"Hibernate中的@Subselect注解",y:"a"}}],["/posts/baeldung/Archive/2024-06-20-A%20Guide%20to%20Kotlin%20Context%20Receivers.html",{loader:()=>a(()=>import("./2024-06-20-A Guide to Kotlin Context Receivers.html-cU6T3jBo.js"),__vite__mapDeps([1432,1])),meta:{d:17188416e5,l:"2024年6月20日",c:["Kotlin","Programming"],g:["Kotlin","Context Receivers"],e:`
<ol>
<li>引言</li>
</ol>
<p>Kotlin中的上下文接收器提供了一种强大的机制来定义函数可以被调用的上下文环境。这个特性通过允许函数声明它们所需的特定上下文，增强了Kotlin代码的表现力和可维护性，从而使得代码更加清晰和模块化。</p>
<p>在本教程中，我们将探讨上下文接收器，包括如何有效使用它们以及讨论它们的优势和局限性。</p>
<ol start="2">
<li>理解上下文接收器</li>
</ol>
<p>Kotlin中的上下文接收器允许函数显式声明它们操作所需的上下文或环境，类似于扩展函数。这个特性通过确保函数仅在满足必要条件或依赖性时才被调用，从而改善了我们的代码语义和安全性。</p>`,r:{minutes:4.84,words:1452},t:"Kotlin上下文接收器指南",y:"a"}}],["/posts/baeldung/Archive/2024-06-20-Add%20One%20Element%20to%20an%20Immutable%20List%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-20-Add One Element to an Immutable List in Java.html-DlVNSUMF.js"),__vite__mapDeps([1433,1])),meta:{d:1718928e6,l:"2024年6月21日",c:["Java","Collections"],g:["Immutable List","Java"],e:`
<p>在Java中，不可变对象确保了线程安全并防止了意外的修改，从而促进了健壮和可靠的代码。然而，有时我们希望向不可变列表添加元素。</p>
<p>在这个快速教程中，我们将探讨如何在Java中实现这一点。</p>
<h2>2. 问题介绍</h2>
<p>不可变列表不允许我们向其添加元素。但在某些情况下，我们希望将额外的元素合并到不可变列表中，同时不损害其不可变性。换句话说，<strong>我们希望有一个包含给定不可变列表所有元素和新元素的不可变列表。</strong></p>
<p>接下来，让我们创建一个方法来实现这一点。为了简单起见，我们将使用单元测试断言来验证我们的解决方案是否产生了预期的结果。</p>`,r:{minutes:3.4,words:1020},t:"在Java中向不可变列表添加一个元素 | Baeldung",y:"a"}}],["/posts/baeldung/Archive/2024-06-20-Avoiding%20the%20ConcurrentModificationException%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-06-20-Avoiding the ConcurrentModificationException in Kotlin.html-XMcgixap.js"),__vite__mapDeps([1434,1])),meta:{d:17188416e5,l:"2024年6月20日",c:["Kotlin","Programming"],g:["ConcurrentModificationException","Exception Handling"],e:`
<p>在本教程中，我们将解决Kotlin中的一个常见问题：<em>ConcurrentModificationException</em>。这通常发生在我们尝试在迭代集合的同时修改它，这是并发编程中的一个常见陷阱。</p>
<p>这种异常可能会令人沮丧，特别是当我们不确定是什么导致了它或如何修复它时。让我们探讨这种异常的根本原因，以及最重要的是，一些避免在代码中出现它的策略。</p>
<p><strong>_ConcurrentModificationException_通常在尝试在迭代过程中修改集合时抛出</strong>：</p>
<div class="language-kotlin" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> numbers <span class="token operator">=</span> <span class="token function">mutableListOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>

assertThrows\`<span class="token operator">&lt;</span>ConcurrentModificationException<span class="token operator">&gt;</span>\` <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>item <span class="token keyword">in</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            numbers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:3.77,words:1131},t:"Kotlin中避免ConcurrentModificationException",y:"a"}}],["/posts/baeldung/Archive/2024-06-20-Check%20if%20a%20Given%20Time%20Lies%20Between%20Two%20Times%20Regardless%20of%20Date.html",{loader:()=>a(()=>import("./2024-06-20-Check if a Given Time Lies Between Two Times Regardless of Date.html-BVXXtRkN.js"),__vite__mapDeps([1435,1])),meta:{d:1718928e6,l:"2024年6月21日",c:["Java","时间处理"],g:["Java 8","LocalTime","Date","Calendar"],e:`
<p>在Java中，有多种方法可以确定一个特定时间是否在两个时间之间，而不考虑日期。</p>
<p><strong>在本教程中，我们将探讨几种可能的实现方式。</strong></p>
<h2>2. 使用 <em>isAfter()</em> 和 <em>isBefore()</em> 方法</h2>
<p>Java 8在_java.time_包中引入了_LocalTime_类，提供了方便的方法来处理不考虑日期的时间：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>LocalTime startTime = LocalTime.parse("09:00:00");
LocalTime endTime = LocalTime.parse("17:00:00");
LocalTime targetTime = LocalTime.parse("12:30:00");
</code></pre></div>`,r:{minutes:2.65,words:795},t:"检查给定时间是否在两个时间之间，不论日期",y:"a"}}],["/posts/baeldung/Archive/2024-06-20-Checking%20if%20a%20Date%20Object%20Equals%20Yesterday.html",{loader:()=>a(()=>import("./2024-06-20-Checking if a Date Object Equals Yesterday.html-DaMrRBdA.js"),__vite__mapDeps([1436,1])),meta:{d:1718928e6,l:"2024年6月21日",c:["Java","Date and Time"],g:["Calendar","LocalDate","Date Comparison"],e:`<hr>
<h1>Java中检查日期对象是否等于昨天</h1>
<p>当在Java应用程序中使用日期和时间数据时，比较日期以实现各种目的通常至关重要，例如安排任务、提醒或报告。一个常见的场景是需要确定给定的日期是否相对于当前日期是昨天。在本教程中，我们将探讨确定给定日期对象是否落在昨天的各种方法。</p>
<h3>2. 使用java.util.Calendar</h3>
<p>一种常见的方法是使用java.util.Calendar类来操作日期和时间信息。要比较昨天的日期，我们通过Calendar.getInstance()实例化一个Calendar对象。接下来，我们使用calendar.setTime(new Date())将其时间设置为当前日期，然后使用calendar.add(Calendar.DATE, -1)减去一天。这样就得到了昨天的日期。</p>`,r:{minutes:5.08,words:1524},t:"Java中检查日期对象是否等于昨天",y:"a"}}],["/posts/baeldung/Archive/2024-06-20-Convert%20RxJava%20Single%20to%20Kotlin%20Coroutine%20Deferred.html",{loader:()=>a(()=>import("./2024-06-20-Convert RxJava Single to Kotlin Coroutine Deferred.html-DfGBV7e9.js"),__vite__mapDeps([1437,1])),meta:{d:17188416e5,l:"2024年6月20日",c:["Kotlin","RxJava"],g:["Kotlin Coroutine","RxJava Single","Deferred"],e:`
<ol>
<li>概述</li>
</ol>
<p>在 RxJava 中的 <strong>Single</strong> 和 Kotlin 协程中的 <strong>Deferred</strong> 是执行异步操作的机制。它们允许我们在不阻塞主线程的情况下执行耗时任务。</p>
<p>我们可能已经在项目中使用了 <strong>Single</strong>，但希望迁移到 <strong>Deferred</strong> 作为替代解决方案。转换是实现这一目标的一种方式，而无需进行完整的重写。</p>
<p>在本文中，我们将尝试以多种方式将 <strong>Single</strong> 转换为 <strong>Deferred</strong>。</p>`,r:{minutes:5.17,words:1552},t:"将 RxJava 的 Single 转换为 Kotlin 协程的 Deferred",y:"a"}}],["/posts/baeldung/Archive/2024-06-20-Converting%20UTF%208%20to%20ISO%208859%201%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-20-Converting UTF 8 to ISO 8859 1 in Java.html-BKRHry2z.js"),__vite__mapDeps([1438,1])),meta:{d:17188416e5,l:"2024年6月20日",c:["Java","编码转换"],g:["UTF-8","ISO-8859-1"],e:`
<h2>1. 引言</h2>
<p>字符编码问题对于Java编程至关重要，尤其是在与多个系统和数据源一起工作时。</p>
<h3>在本教程中，我们将讨论如何将UTF-8编码的字符串转换为拉丁-1编码，这通常被称为ISO-8859-1编码。</h3>
<h2>2. 问题定义</h2>
<p>将UTF-8字符串转换为ISO-8859-1编码环境可能会出奇地困难。如果字符映射方式不同，可能会导致数据损坏或丢失。</p>
<p>为了使这个问题更容易理解，假设我们有需要转换为ISO-8859-1的UTF-8编码字符串：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> string <span class="token operator">=</span> <span class="token string">"âabcd"</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:2.5,words:749},t:"Java中UTF-8到ISO-8859-1的编码转换",y:"a"}}],["/posts/baeldung/Archive/2024-06-20-Create%20Spring%20Prototype%20Scope%20Bean%20with%20Runtime%20Arguments.html",{loader:()=>a(()=>import("./2024-06-20-Create Spring Prototype Scope Bean with Runtime Arguments.html-BuTvF4d4.js"),__vite__mapDeps([1439,1])),meta:{d:17188416e5,l:"2024年6月20日",c:["Spring","Java"],g:["Spring Framework","Prototype Scope"],e:`
<p>在这篇文章中，我们将学习如何在Spring中使用运行时参数创建原型作用域的Bean。</p>
<p>在Spring中，有多种不同的Bean作用域，但默认的作用域是单例，这意味着单例作用域的Bean始终会产生相同的对象。</p>
<p>或者，如果我们每次需要从容器中获取一个新的实例，我们可以使用原型作用域的Bean。然而，在大多数情况下，如果我们想要从单例Bean中实例化原型，或者将动态参数传递给原型Bean，我们会遇到问题。</p>
<p>Spring提供了许多方法来实现这些目标，我们将在本教程中深入讨论。</p>
<p>有时我们需要使用动态参数作为输入来初始化Spring Bean。原型Bean可以通过Spring使用多种方法来分配不同的动态参数。</p>`,r:{minutes:3.74,words:1121},t:"在Spring中使用运行时参数创建原型作用域Bean",y:"a"}}],["/posts/baeldung/Archive/2024-06-20-Creating%20a%20Spring%20Security%20Key%20for%20Signing%20a%20JWT%20Token.html",{loader:()=>a(()=>import("./2024-06-20-Creating a Spring Security Key for Signing a JWT Token.html-BjllnOMP.js"),__vite__mapDeps([1440,1])),meta:{d:1718928e6,l:"2024年6月21日",c:["Spring Security","JWT"],g:["Spring","Security","JWT","Token"],e:`
<p>如果您正在使用Spring Security（尤其是OAuth）实现，一定要查看《学习Spring安全》课程。</p>
<h2>1. 概述</h2>
<p>JSON Web Tokens（JWT）是保护无状态应用程序的事实标准。Spring Security框架提供了将JWT集成以保护REST API的方法。生成令牌的一个关键过程是应用签名以保证真实性。</p>
<p>在本教程中，我们将探索一个使用JWT认证的无状态Spring Boot应用程序。我们将设置必要的组件并创建一个加密的_SecretKey_实例来签名和验证JWT。</p>
<h2>2. 项目设置</h2>
<p>首先，让我们使用Spring Security和JWT令牌来引导一个无状态的Spring Boot应用程序。<strong>值得注意的是，为了简单和简洁，我们不会展示完整的设置代码。</strong></p>`,r:{minutes:5.36,words:1608},t:"创建用于签名JWT令牌的Spring Security密钥",y:"a"}}],["/posts/baeldung/Archive/2024-06-20-Difference%20Between%20eachCount%20%20%20and%20eachCountTo%20%20%20Methods%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-06-20-Difference Between eachCount   and eachCountTo   Methods in Kotlin.html-DgBNECEJ.js"),__vite__mapDeps([1441,1])),meta:{d:1718928e6,l:"2024年6月21日",c:["Kotlin","Programming"],g:["Kotlin","eachCount","eachCountTo"],e:`
<p>Kotlin拥有一个丰富、高效且简洁的集合库。标准库提供了多种有用的方法来轻松处理集合内容。</p>
<p>在本教程中，我们将查看这两种方法：eachCount()和eachCountTo()，它们帮助执行聚合操作。</p>
<p><strong>eachCount()方法使我们能够计算元素的出现次数</strong>。此外，它在任何Grouping数据结构中都可用，其中keyOf()函数适用于获取键。它生成一个Map，包含每个组中元素的计数。</p>
<p>让我们看一个示例代码来实际演示这一点：</p>
<div class="language-kotlin" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> flights <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"EK060"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"EK531"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"LH7"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"LH1030"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"DL47"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"AI120"</span></span><span class="token punctuation">)</span>
<span class="token keyword">val</span> flightCount <span class="token operator">=</span> flights<span class="token punctuation">.</span><span class="token function">groupingBy</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">eachCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">val</span> expectedMap <span class="token operator">=</span> <span class="token function">mapOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"EK"</span></span> <span class="token keyword">to</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"LH"</span></span> <span class="token keyword">to</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"DL"</span></span> <span class="token keyword">to</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"AI"</span></span> <span class="token keyword">to</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span>expectedMap<span class="token punctuation">,</span> flightCount<span class="token punctuation">)</span>
</code></pre></div>`,r:{minutes:2.43,words:730},t:"Kotlin中eachCount()和eachCountTo()方法的区别",y:"a"}}],["/posts/baeldung/Archive/2024-06-20-Dynamically%20Managing%20Kafka%20Listeners%20in%20Spring%20Boot.html",{loader:()=>a(()=>import("./2024-06-20-Dynamically Managing Kafka Listeners in Spring Boot.html-GzmB7mLR.js"),__vite__mapDeps([1442,1])),meta:{d:1718928e6,l:"2024年6月21日",c:["Spring Boot","Apache Kafka"],g:["Spring Kafka","Kafka Listeners"],e:`<hr>
<h1>在Spring Boot中动态管理Kafka侦听器</h1>
<p>无论你是刚开始还是拥有多年经验，<strong>Spring Boot</strong>显然是构建Web应用程序的不错选择。</p>
<p>Jmix建立在这个非常强大和成熟的Boot堆栈之上，允许开发人员构建并交付<strong>全栈Web****应用程序</strong>，而无需编写前端代码。也非常灵活，从简单的Web GUI CRUD应用程序到复杂的企业解决方案。</p>
<p>具体来说，<strong>Jmix平台</strong>包括一个构建在<strong>Spring Boot, JPA和Vaadin</strong>之上的框架，并附带Jmix Studio，这是一个<strong>IntelliJ IDEA插件</strong>，配备了一套开发人员生产力工具。</p>`,r:{minutes:7.27,words:2181},t:"在Spring Boot中动态管理Kafka侦听器",y:"a"}}],["/posts/baeldung/Archive/2024-06-20-Dynamically%20Register%20Spring%20Beans%20Based%20on%20Properties.html",{loader:()=>a(()=>import("./2024-06-20-Dynamically Register Spring Beans Based on Properties.html-Biil_4qk.js"),__vite__mapDeps([1443,1])),meta:{d:1718928e6,l:"2024年6月21日",c:["Spring","Java"],g:["Spring Beans","Dynamic Registration"],e:`
<h2>1. 概述</h2>
<p>在本教程中，我们将探讨如何根据自定义属性动态注册Bean。我们将探索_BeanDefinitionRegistryPostProcessor_接口以及我们如何使用它来向应用程序上下文中添加Bean。</p>
<h2>2. 代码设置</h2>
<p>让我们先创建一个简单的Spring Boot应用程序。</p>
<p>首先，我们将定义一个我们想要动态注册的Bean。然后，<strong>我们将提供一个属性来决定如何注册Bean</strong>。最后，我们将定义一个配置类，根据我们的自定义属性来注册Bean。</p>
<h3>2.1. 依赖项</h3>
<p>让我们首先添加Maven依赖项：</p>`,r:{minutes:4.11,words:1232},t:"基于属性动态注册Spring Bean",y:"a"}}],["/posts/baeldung/Archive/2024-06-20-Finding%20Element%20by%20Attribute%20in%20Selenium.html",{loader:()=>a(()=>import("./2024-06-20-Finding Element by Attribute in Selenium.html-DWIGsxMv.js"),__vite__mapDeps([1444,1])),meta:{d:17188416e5,l:"2024年6月20日",c:["Selenium","Web Automation"],g:["CSS Selectors","Web Testing"],e:`
<p>Selenium提供了多种在网页上定位元素的方法，我们经常需要基于元素的属性来查找它。属性是额外的信息片段，可以添加以提供更多的上下文或功能。它们大致可以分为两种类型：</p>
<ul>
<li>标准属性：这些属性是预定义的，并且被浏览器所识别。例如_id_, <em>class</em>, <em>src</em>, <em>href</em>, <em>alt</em>, _title_等。标准属性具有预定义的含义，并且在不同的HTML元素中广泛使用。</li>
<li>自定义属性：自定义属性不是HTML规范预定义的，而是由开发人员为特定需求创建的。这些属性通常以“<em>data-</em>”开头，后面跟着一个描述性名称。例如_data-id_, <em>data-toggle</em>, _data-target_等。自定义属性对于存储与元素相关的额外信息或元数据很有用，它们通常在Web开发中用于在HTML和JavaScript之间传递数据。</li>
</ul>`,r:{minutes:4.77,words:1430},t:"Selenium中通过属性查找元素",y:"a"}}],["/posts/baeldung/Archive/2024-06-20-Fix%20Ambiguous%20Method%20Call%20Error%20in%20Mockito.html",{loader:()=>a(()=>import("./2024-06-20-Fix Ambiguous Method Call Error in Mockito.html-DrbrNVtJ.js"),__vite__mapDeps([1445,1])),meta:{d:17188416e5,l:"2024年6月20日",c:["Java","Mockito"],g:["Ambiguous Method Call","Mockito","Unit Testing"],e:'<hr>\n<h1>解决Mockito中的模糊方法调用错误</h1>\n<p>在本教程中，我们将了解如何在Mockito框架的特定上下文中避免模糊方法调用。</p>\n<p>在Java中，方法重载允许一个类拥有多个具有相同名称但不同参数的方法。当编译器无法根据提供的参数确定要调用的具体方法时，就会发生模糊方法调用。</p>\n<h2>2. Mockito的_ArgumentMatchers_介绍</h2>\n<p>Mockito是一个用于单元测试Java应用程序的模拟框架。您可以在Maven中央仓库中找到该库的最新版本。让我们将依赖项添加到我们的_pom.xml_中：</p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`org.mockito`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`mockito-core`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`5.11.0`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>`test`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n</code></pre></div>',r:{minutes:4.37,words:1311},t:"解决Mockito中的模糊方法调用错误",y:"a"}}],["/posts/baeldung/Archive/2024-06-20-Flatten%20a%20Stream%20of%20Maps%20to%20a%20Single%20Map%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-20-Flatten a Stream of Maps to a Single Map in Java.html-Bu9ROQQl.js"),__vite__mapDeps([1446,1])),meta:{d:1718928e6,l:"2024年6月21日",c:["Java","Stream API"],g:["Java 8","Stream","Map"],e:'\n<p>自Java 8推出以来，使用数据流已成为常态。这些流经常包含像Map这样的复杂结构，在进一步处理时可能会带来挑战。</p>\n<p>在本教程中，我们将探讨如何将Map流展平为单个Map。</p>\n<h2>2. 问题介绍</h2>\n<p>在深入解决方案之前，让我们先澄清一下“展平Map流”的含义。本质上，我们想要将流中的Map转换为包含流中每个Map的所有键值对的单个Map。</p>\n<p>像往常一样，一个例子可以帮助我们快速理解问题。假设我们有三个Map，存储了玩家名字和分数之间的关联：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Map</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>`````````````````` playerMap1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>``````````````````<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>\n    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Kai"</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Liam"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token class-name">Map</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>`````````````````` playerMap2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>``````````````````<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>\n    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Eric"</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Kevin"</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token class-name">Map</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>`````````````````` playerMap3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>``````````````````<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>\n    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Saajan"</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div>',r:{minutes:7.15,words:2146},t:"Java中将Map流展平为单个Map",y:"a"}}],["/posts/baeldung/Archive/2024-06-20-Getting%20a%20Kotlin%20KClass%20from%20a%20Package%20Class%20Name%20String.html",{loader:()=>a(()=>import("./2024-06-20-Getting a Kotlin KClass from a Package Class Name String.html-B2qjigVD.js"),__vite__mapDeps([1447,1])),meta:{d:17188416e5,l:"2024年6月20日",c:["Kotlin","Programming"],g:["KClass","Reflection"],e:`<hr>
<h1>从包类名字符串获取 Kotlin KClass 的方法</h1>
<p>在本教程中，我们将探讨在 Kotlin 中从包类名字符串获取 KClass 的不同方法。无论是动态实例化还是方法调用，将类名字符串转换为其对应的 KClass 对象的能力至关重要。KClass 对象在运行时表示 Kotlin 类，并且可以通过几种策略获得。</p>
<h2>1. 引言</h2>
<p>在 Kotlin 中工作时，有时需要从包类名字符串获取 KClass 实例。无论是为了动态实例化还是方法调用，将类名字符串转换为其对应的 KClass 对象的能力至关重要。KClass 对象在运行时表示 Kotlin 类，并且可以通过几种策略获得。</p>`,r:{minutes:3.26,words:977},t:"从包类名字符串获取 Kotlin KClass 的方法",y:"a"}}],["/posts/baeldung/Archive/2024-06-20-Guide%20to%20Duration%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-06-20-Guide to Duration in Kotlin.html-C986aJRP.js"),__vite__mapDeps([1448,1])),meta:{d:17188416e5,l:"2024年6月20日",c:["Kotlin","Duration"],g:["Duration","Time Management"],e:`
<h2>1. 引言</h2>
<p>在构建软件应用程序时，处理时间间隔和持续时间是一项常见任务。Kotlin通过_Duration_类提供了一个强大的API来处理时间管理的这一特定方面。</p>
<p>在本教程中，我们将探讨_Duration_类以及它如何使Kotlin中的时间和持续时间操作变得高效且容易。</p>
<h2>2. _Duration_是什么？</h2>
<p><strong>_Duration_表示一个特定的时间量，可以是正数、负数、零甚至无限大。</strong></p>
<p>这些间隔通过_DurationUnit_枚举指定，支持类型_DAYS_, <em>HOURS</em>, <em>MINUTES</em>, <em>SECONDS</em>, <em>MILLISECONDS</em>, <em>MICROSECONDS_和_NANOSECONDS</em>。因此，即使在指代周和月时，超过一天的持续时间也以天为单位表示。</p>`,r:{minutes:5.65,words:1695},t:"Kotlin中Duration类的指南",y:"a"}}],["/posts/baeldung/Archive/2024-06-20-Guide%20to%20ExecutorService%20vs.%20CompletableFuture.html",{loader:()=>a(()=>import("./2024-06-20-Guide to ExecutorService vs. CompletableFuture.html-jMv4ZM4s.js"),__vite__mapDeps([1449,1])),meta:{d:1718928e6,l:"2024年6月21日",c:["Java Concurrency","Java Tutorials"],g:["ExecutorService","CompletableFuture"],e:`
<p>在本教程中，我们将探讨Java中处理需要并发运行的任务的两个重要类：<em>ExecutorService_和_CompletableFuture</em>。我们将学习它们的功能以及如何有效地使用它们，并理解它们之间的关键差异。</p>
<h2>2. ExecutorService概述</h2>
<p>_ExecutorService_是Java的_java.util.concurrent_包中的强大接口，它简化了需要并发运行的任务的管理。它抽象了线程创建、管理和调度的复杂性，让我们可以专注于需要完成的实际工作。</p>
<p>_ExecutorService_提供了如_submit()_和_execute()_等方法来提交我们想要并发运行的任务。然后，这些任务被排队并分配给线程池中的可用线程。如果任务返回结果，我们可以使用_Future_对象来检索它们。然而，使用_Future_上的_get()_等方法检索结果可能会阻塞调用线程，直到任务完成。</p>`,r:{minutes:8.09,words:2426},t:"ExecutorService与CompletableFuture：Java并发处理的两种方式",y:"a"}}],["/posts/baeldung/Archive/2024-06-20-Guide%20to%20the%20HexFormat%20API.html",{loader:()=>a(()=>import("./2024-06-20-Guide to the HexFormat API.html-CtxZTyDl.js"),__vite__mapDeps([1450,1])),meta:{d:17188416e5,l:"2024年6月20日",c:["Kotlin","HexFormat API"],g:["Hexadecimal","String","Parse"],e:`
<p>十六进制表示因其人类可读性和紧凑性而被广泛使用，这使得它成为在Kotlin中表示二进制数据的一种高效且直接的方式。因此，Kotlin引入了HexFormat API作为一个方便的数据格式化为十六进制字符串形式并解析回原始数据的包。</p>
<p>在本教程中，<strong>我们将探索HexFormat API并解决一些涉及十六进制表示的常见用例</strong>。</p>
<h3>2.1. HexFormat类</h3>
<p>在Kotlin的标准库中，<strong>_HexFormat_类位于_kotlin.text_包中，它表示十六进制格式化的总体配置</strong>。让我们快速看一下它的定义：</p>`,r:{minutes:5.85,words:1754},t:"Kotlin中HexFormat API指南",y:"a"}}],["/posts/baeldung/Archive/2024-06-20-How%20to%20Convert%20Excel%20to%20JSON%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-20-How to Convert Excel to JSON in Java.html-ChBrc4b4.js"),__vite__mapDeps([1451,1])),meta:{d:1718928e6,l:"2024年6月21日",c:["Java","Excel"],g:["JSON","Apache POI","Jackson"],e:`
<p>将Excel数据转换为JSON格式在许多Java应用程序中很常见，特别是在处理不同系统之间的数据交换时。</p>
<h2>1. 引言</h2>
<p>在本教程中，我们将探讨在Java中将Excel文件转换为JSON的两种方法。</p>
<h2>2. 使用Apache POI库与JSON</h2>
<p>Apache POI是一个流行的Java库，用于读写Microsoft Office文件格式，包括Excel。因此，我们可以使用POI来读取Excel文件并将数据转换为JSON格式。</p>
<h3>2.1. 添加Apache POI和JSON依赖</h3>
<p>首先，我们需要将Apache POI和JSON依赖添加到我们的项目中。如果我们使用Maven，请在_pom.xml_中包含以下依赖：</p>`,r:{minutes:3.91,words:1173},t:"Java中Excel转JSON的转换方法",y:"a"}}],["/posts/baeldung/Archive/2024-06-20-Implement%20Two%20Level%20Cache%20With%20Spring.html",{loader:()=>a(()=>import("./2024-06-20-Implement Two Level Cache With Spring.html-YLQBNhpC.js"),__vite__mapDeps([1452,1])),meta:{d:1718928e6,l:"2024年6月21日",c:["Spring Framework","Caching"],g:["Spring Boot","Caffeine","Redis"],e:`<hr>
<h1>使用Spring实现两级缓存</h1>
<h2>1. 概述</h2>
<p>缓存数据意味着我们的应用程序不必访问较慢的存储层，从而提高它们的性能和响应能力。我们可以使用任何内存实现库来实现缓存，比如Caffeine。</p>
<p><strong>尽管这样做提高了数据检索的性能，但如果应用程序部署到多个副本集上，那么缓存就不会在实例之间共享</strong>。为了克服这个问题，我们可以引入一个所有实例都可以访问的分布式缓存层。</p>
<p>在本教程中，我们将学习如何在Spring中实现两级缓存机制。我们将展示如何使用Spring的缓存支持来实现这两个层，并演示当本地缓存层发生缓存未命中时，分布式缓存层是如何被调用的。</p>`,r:{minutes:6,words:1799},t:"使用Spring实现两级缓存",y:"a"}}],["/posts/baeldung/Archive/2024-06-20-Include%20null%20Value%20in%20JSON%20Serialization.html",{loader:()=>a(()=>import("./2024-06-20-Include null Value in JSON Serialization.html-rpzDckCd.js"),__vite__mapDeps([1453,1])),meta:{d:17188416e5,l:"2024年6月20日",c:["Java","JSON"],g:["JSON Serialization","Null Values"],e:`
<p>当我们使用Java对象并需要将其转换为JSON格式时，适当处理空值非常重要。从JSON输出中省略空值可能不符合我们的数据需求，特别是当数据完整性至关重要时。</p>
<p><strong>在本教程中，我们将深入探讨在Java中进行JSON序列化时包含空值的有效方法。</strong></p>
<h2>2. 使用案例场景：客户管理系统</h2>
<p>假设我们正在开发一个客户管理系统，其中每个客户都是一个具有名称、电子邮件和年龄等属性的Java对象。此外，一些客户可能没有电子邮件地址。</p>
<p><strong>在将客户数据序列化为JSON进行存储或传输时，包含缺失电子邮件地址的空值对于保持数据一致性至关重要。</strong></p>`,r:{minutes:2.69,words:807},t:"在Java JSON序列化中包含空值",y:"a"}}],["/posts/baeldung/Archive/2024-06-20-Invalid%20Characters%20in%20XML.html",{loader:()=>a(()=>import("./2024-06-20-Invalid Characters in XML.html-BKf_xiKX.js"),__vite__mapDeps([1454,1])),meta:{d:1718928e6,l:"2024年6月21日",c:["XML","Java"],g:["XML","Java","Invalid Characters"],e:`
<h2>1. 概述</h2>
<p>XML（可扩展标记语言）是用于跨不同平台和应用程序存储和传输数据的最广泛使用的格式之一。然而，尽管其具有强大的功能，XML并非没有问题，处理XML文档中的无效字符就是一个挑战。</p>
<p>在本文中，我们将探讨不同的无效字符以及如何在XML处理中处理它们。</p>
<h2>2. XML中有效字符</h2>
<p>XML规范定义了允许在元素内容和属性值中的字符。根据XML 1.0规范，可接受的字符如下所示。XML将这些范围之外的任何字符视为无效字符：</p>
<table>
<thead>
<tr>
<th><strong>描述</strong></th>
<th><strong>范围</strong></th>
<th><strong>示例</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>制表符（水平制表）</td>
<td>9 (TAB)</td>
<td>\\t</td>
</tr>
<tr>
<td>换行符（新行）</td>
<td>10 (LF)</td>
<td>\\n</td>
</tr>
<tr>
<td>回车符（回到行首）</td>
<td>13 (CR)</td>
<td>\\r</td>
</tr>
<tr>
<td>基本多语言平面（BMP）中的字符，不包括代理块</td>
<td>32 to 55295</td>
<td>A, b, &amp;, 1, α（希腊字母α）</td>
</tr>
<tr>
<td>辅助私用区A（SMP）中的字符，不包括代理块</td>
<td>57344 to 65533</td>
<td>😊（笑脸），🎉（派对彩带）</td>
</tr>
<tr>
<td>辅助平面中的BMP之外的字符</td>
<td>65536 to 1114111</td>
<td>🌍（带有经线的地球），🚀（火箭）</td>
</tr>
</tbody>
</table>`,r:{minutes:3.78,words:1134},t:"XML中无效字符的处理",y:"a"}}],["/posts/baeldung/Archive/2024-06-20-Iterating%20Over%20Components%20of%20Object%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-06-20-Iterating Over Components of Object in Kotlin.html-DPhM55Z6.js"),__vite__mapDeps([1455,1])),meta:{d:17188416e5,l:"2024年6月20日",c:["Kotlin","Programming"],g:["Kotlin","Reflection","Iteration"],e:'\n<p>本文将探讨迭代对象组件的不同方法。我们将深入研究如何使用多种方法访问Kotlin中的类和数据类的属性和函数，例如使用反射。这在我们需要在运行时动态地自省或操作对象时非常有用。</p>\n<h2>2. 依赖项</h2>\n<p>在本文中，我们将使用<strong>kotlin-reflect</strong>模块，因此让我们在_pom.xml_中包含它：</p>\n<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>`&lt;dependency&gt;`\n    `&lt;groupId&gt;`org.jetbrains.kotlin`&lt;/groupId&gt;`\n    `&lt;artifactId&gt;`kotlin-reflect`&lt;/artifactId&gt;`\n    `&lt;version&gt;`1.9.22`&lt;/version&gt;`\n`&lt;/dependency&gt;`\n</code></pre></div>',r:{minutes:5.77,words:1731},t:"在Kotlin中迭代对象组件",y:"a"}}],["/posts/baeldung/Archive/2024-06-20-Java%20InputStream%20vs.%20InputStreamReader.html",{loader:()=>a(()=>import("./2024-06-20-Java InputStream vs. InputStreamReader.html-HA6xnLb1.js"),__vite__mapDeps([1456,1])),meta:{d:17188416e5,l:"2024年6月20日",c:["Java","编程"],g:["InputStream","InputStreamReader"],e:`
<p>在本文中，我们将讨论InputStream类以及它如何处理来自不同来源的二进制信息。我们还将讨论InputStreamReader类以及它与InputStream的不同之处。</p>
<h2>2. InputStream是什么？</h2>
<p>InputStream是一个类，它以字节的形式从源读取二进制数据。因为它是一个抽象类，我们只能通过它的子类来实例化它，比如FileInputStream和ByteArrayInputStream等。</p>
<h2>3. InputStreamReader是什么？</h2>
<p>与InputStream类相比，InputStreamReader直接处理字符或文本。它使用给定的InputStream读取字节，然后根据某种字符集将其转换为字符。我们可以显式设置字符集，比如UTF-8、UTF-16等，或者依赖JVM的默认字符集：</p>`,r:{minutes:2.35,words:704},t:"Java InputStream与InputStreamReader | Baeldung",y:"a"}}],["/posts/baeldung/Archive/2024-06-20-Normalizing%20the%20EOL%20Character%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-20-Normalizing the EOL Character in Java.html-BbvMtQx8.js"),__vite__mapDeps([1457,1])),meta:{d:17188416e5,l:"2024年6月20日",c:["Java","EOL Characters"],g:["EOL Normalization","String Replace","Apache Commons Lang","Java 8 Stream API"],e:`
<h2>1. 引言</h2>
<p>不同的操作系统使用不同的换行符（EOL），这在文件在不同系统间传输或处理时可能会导致问题。此外，统一EOL字符意味着使用单一格式来渲染它们，以确保跨平台的一致性。</p>
<p><strong>本教程提供了不同的Java方法来统一EOL字符。</strong></p>
<h2>2. 理解EOL字符</h2>
<p>在Java中，EOL字符代表文本文件中的一行结束。不同的操作系统使用不同的序列来表示EOL：</p>
<ul>
<li>Unix/Linux: <em>\\n</em>（换行符）</li>
<li>Windows: <em>\\r\\n</em>（回车后跟换行符）</li>
<li>旧Mac: <em>\\r</em>（回车符）</li>
</ul>`,r:{minutes:2.47,words:741},t:"Java 统一换行符字符",y:"a"}}],["/posts/baeldung/Archive/2024-06-20-Parallel%20Operations%20on%20Kotlin%20Collections.html",{loader:()=>a(()=>import("./2024-06-20-Parallel Operations on Kotlin Collections.html-DPx0wWmh.js"),__vite__mapDeps([1458,1])),meta:{d:17188416e5,l:"2024年6月20日",c:["Kotlin","并行操作"],g:["Kotlin","并行流","协程"],e:`<hr>
<h1>Kotlin集合的并行操作</h1>
<p>使用Kotlin集合的并行操作允许我们同时处理集合中的元素，利用多核处理器来提高性能。这对于计算密集型任务，如过滤、映射和数据缩减，非常有用。</p>
<p>在本文中，我们将讨论一些在Kotlin集合上执行并行操作的方法。</p>
<p>为了解释并行操作的工作原理，我们将使用以下集合：</p>
<div class="language-kotlin" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> age<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token keyword">var</span> isAdult<span class="token operator">:</span> Boolean<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>

<span class="token keyword">private</span> <span class="token keyword">val</span> people <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span>
  <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Martin"</span></span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Ahmad"</span></span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Alina"</span></span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Alice"</span></span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Bob"</span></span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Charlie"</span></span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre></div>`,r:{minutes:4.9,words:1469},t:"Kotlin集合的并行操作",y:"a"}}],["/posts/baeldung/Archive/2024-06-20-Passing%20a%20Type%20to%20Generic%20Method%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-06-20-Passing a Type to Generic Method in Kotlin.html-C203V5VE.js"),__vite__mapDeps([1459,1])),meta:{d:17188416e5,l:"2024年6月20日",c:["Kotlin","Programming"],g:["Generics","Kotlin Tutorial"],e:'\n<p>泛型在Kotlin中使开发者能够编写可重用且类型安全的代码，提供在处理各种数据类型时的灵活性。</p>\n<p>正如我们所知，泛型类和方法使用尖括号来指定类型参数。我们通常需要向泛型方法传递类型参数。</p>\n<p>在本教程中，我们将探索向泛型方法传递类型的各种方法。</p>\n<h2>2. 使用类参数</h2>\n<p>向泛型方法传递类型的一种方式是使用<strong>类</strong>参数。这允许泛型方法访问并使用指定的类型：</p>\n<div class="language-kotlin" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> ````<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span>```` <span class="token function">passTypeUsingClassParameter</span><span class="token punctuation">(</span>clazz<span class="token operator">:</span> Class````<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span>````<span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> clazz<span class="token punctuation">.</span>simpleName\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:2.95,words:886},t:"Kotlin中向泛型方法传递类型",y:"a"}}],["/posts/baeldung/Archive/2024-06-20-Querydsl%20vs.%20JPA%20Criteria.html",{loader:()=>a(()=>import("./2024-06-20-Querydsl vs. JPA Criteria.html-JPEm7zSX.js"),__vite__mapDeps([1460,1])),meta:{d:1696896e6,l:"2023年10月10日",c:["Spring","JPA"],g:["Querydsl","JPA Criteria"],e:'\n<p>Querydsl 和 JPA Criteria 是 Java 中构建类型安全查询的流行框架。它们都提供了静态类型查询的表达方式，使得编写高效且易于维护的数据库交互代码变得更加容易。在本文中，我们将从不同的角度对它们进行比较。</p>\n<h2>2. 设置</h2>\n<p>首先，我们需要为我们的测试设置依赖项和配置。在所有示例中，我们将使用 HyperSQL 数据库：</p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>``````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``````\n    ```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```````org.hsqldb```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```````\n    ```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```````hsqldb```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```````\n    ```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```````2.7.1```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```````\n``````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>``````\n</code></pre></div>',r:{minutes:3.91,words:1174},t:"Querydsl 与 JPA Criteria 的比较",y:"a"}}],["/posts/baeldung/Archive/2024-06-20-Reading%20a%20.gz%20File%20Line%20by%20Line%20Using%20GZIPInputStream.html",{loader:()=>a(()=>import("./2024-06-20-Reading a .gz File Line by Line Using GZIPInputStream.html-ByU0BTig.js"),__vite__mapDeps([1461,1])),meta:{d:17188416e5,l:"2024年6月20日",c:["Java","GZIP"],g:["GZIPInputStream","文件处理"],e:`
<h2>1. 概述</h2>
<p>我们可能希望在Java中使用压缩文件。常见的格式是_.gz_，这是由GZIP实用工具生成的。</p>
<p><strong>在本教程中，我们将探讨如何使用_Java_中的_GZIPInputStream_类逐行读取压缩的(<em>.gz</em>)文件。</strong></p>
<h2>2. 读取GZipped文件</h2>
<p>让我们想象一下，我们想要将文件的内容读入一个_List_。首先，我们需要在我们的路径上找到文件：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> filePath <span class="token operator">=</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span><span class="token class-name">Main</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"myFile.gz"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:2.57,words:771},t:"Java中使用GZIPInputStream逐行读取.gz文件",y:"a"}}],["/posts/baeldung/Archive/2024-06-20-Representation%20of%20Integers%20at%20a%20Bit%20Level%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-20-Representation of Integers at a Bit Level in Java.html-DB8KFEO2.js"),__vite__mapDeps([1462,1])),meta:{d:1718928e6,l:"2024年6月21日",c:["Java","编程"],g:["位运算","Java"],e:`
<p>Java在内存中以二进制形式存储数字。了解整数在位级别上的表示可以帮助我们进行某些操作。</p>
<p>在本教程中，我们将查看Java中数字表示的一些具体细节，并了解Java的位运算是如何工作的。</p>
<h2>2. Java中的位运算</h2>
<p>在Java中，整数使用32位表示，长整数使用64位。需要注意的是，Java使用2的补码表示负数。在这种情况下，如果第一位是1，则假定该数字为负数。负数是通过取数字，翻转所有的1和0，然后加1来计算的。</p>
<p>例如，在8位中，数字6是_0b00000110_。将其转换为-6，我们将其反转为_0b11111001_，然后加1，变成_0b11111010_。</p>`,r:{minutes:4.58,words:1373},t:"Java中整数的位级表示",y:"a"}}],["/posts/baeldung/Archive/2024-06-20-Saga%20Pattern%20in%20a%20Microservices%20Architecture.html",{loader:()=>a(()=>import("./2024-06-20-Saga Pattern in a Microservices Architecture.html-BzhYgbQY.js"),__vite__mapDeps([1463,1])),meta:{d:17188416e5,l:"2024年6月20日",c:["Microservices","Saga Pattern"],g:["Spring Boot","Orkes Conductor","Distributed Transactions"],e:`
<p>无论你是刚开始还是拥有多年的经验，<strong>Spring Boot</strong> 显然是构建一个web应用的绝佳选择。</p>
<p>Jmix 建立在这个功能强大且成熟的 Boot 堆栈之上，允许开发者在不需要编写前端代码的情况下构建和交付<strong>全栈web应用</strong>。非常灵活，从简单的web GUI CRUD应用到复杂的企业解决方案。</p>
<p>具体来说，<strong>Jmix平台</strong>包括一个构建在<strong>Spring Boot, JPA, 和 Vaadin</strong>之上的框架，并附带了 Jmix Studio，<strong>一个 IntelliJ IDEA 插件</strong>，配备了一套开发者生产力工具。</p>`,r:{minutes:11.73,words:3519},t:"微服务架构中的Saga模式 | Baeldung",y:"a"}}],["/posts/baeldung/Archive/2024-06-20-Serialize%20Enum%20Property%20to%20JSON%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-06-20-Serialize Enum Property to JSON in Kotlin.html-CRV6fXI3.js"),__vite__mapDeps([1464,1])),meta:{d:17188416e5,l:"2024年6月20日",c:["Kotlin","JSON"],g:["Kotlin","JSON","Serialization","Enum","Jackson","Gson","kotlinx.serialization"],e:`
<p>在Kotlin中，处理JSON序列化通常需要处理枚举。当将这些枚举序列化为JSON时，我们需要确保它们正确地转换为字符串表示形式。</p>
<p>在本教程中，我们将探讨如何使用一些流行的JSON序列化库在Kotlin中将枚举字段序列化为JSON。</p>
<h2>2. 问题介绍</h2>
<p>像往常一样，让我们通过一个例子来理解问题。假设我们有一个表示不同编程语言的枚举类：</p>
<div class="language-kotlin" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">enum</span> <span class="token keyword">class</span> <span class="token function">Language</span><span class="token punctuation">(</span><span class="token keyword">val</span> description<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">KOTLIN</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Kotlin_is_awesome"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">JAVA</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Java_is_great"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">GO</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Go_is_nice"</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:5.65,words:1694},t:"在Kotlin中将枚举属性序列化为JSON",y:"a"}}],["/posts/baeldung/Archive/2024-06-20-Use%20of%20Backticks%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-06-20-Use of Backticks in Kotlin.html-DNgiVuHe.js"),__vite__mapDeps([1465,1])),meta:{d:17188416e5,l:"2024年6月20日",c:["Kotlin","Programming"],g:["Kotlin","Backticks","Programming"],e:`<hr>
<h1>Kotlin中反引号的使用</h1>
<h2>1. 引言</h2>
<p>Kotlin允许我们在定义变量和函数时使用反引号(\`)包围标识符。本教程将探讨使用反引号的不同方式以及它们的好处。</p>
<h2>2. 反引号的使用</h2>
<p>默认情况下，Kotlin遵循严格的函数和变量命名约定。然而，<strong>当我们需要以与这些规则冲突的方式命名函数或变量时，反引号就派上用场了</strong>。</p>
<p>在这一部分，让我们看看Kotlin代码中反引号的各种用法。</p>
<h3>2.1. 转义关键字</h3>
<p>反引号最常见的用途之一是转义保留关键字。通常，我们不能在Kotlin中将关键字用作变量或函数名。然而，在某些情况下，我们可能需要将关键字用作标识符。在这些情况下，我们可以使用反引号来转义关键字。让我们看一个例子：</p>`,r:{minutes:4.75,words:1425},t:"Kotlin中反引号的使用",y:"a"}}],["/posts/baeldung/Archive/2024-06-20-Using%20the%20%20Value%20Annotation%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-06-20-Using the  Value Annotation in Kotlin.html-mdH8PEqG.js"),__vite__mapDeps([1466,1])),meta:{d:17188416e5,l:"2024年6月20日",c:["Spring","Kotlin"],g:["Value注解","Annotation"],e:`
<p>在Spring中，@Value注解是一种强大的方式，可以从配置文件中将属性注入到类中。@Value在Kotlin中的工作方式与Java类似，但由于Kotlin语言特性如空安全和默认构造函数，它有一些细微的差别。</p>
<p>在本教程中，我们将学习如何正确使用@Value。</p>
<h2>2. @Value的基本使用</h2>
<p>@Value注解允许我们将应用程序属性文件中的值直接注入到我们的Spring Bean中。<strong>我们必须在属性占位符字符串中转义美元符号，因为Kotlin字符串也使用它进行字符串插值。</strong></p>
<p>让我们编写MyBean来演示这一点：</p>`,r:{minutes:2.66,words:797},t:"在Kotlin中使用@Value注解",y:"a"}}],["/posts/baeldung/Archive/2024-06-20-Variable%20Shadowing%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-06-20-Variable Shadowing in Kotlin.html-CgWDPpk0.js"),__vite__mapDeps([1467,1])),meta:{d:17188416e5,l:"2024年6月20日",c:["Kotlin"],g:["Variable Shadowing","Programming"],e:`
<p>在Kotlin中，每个在作用域内声明的变量都会遮蔽作用域外同名的变量。这适用于所有作用域级别，例如函数内、类内或代码块中。</p>
<p>有时，变量遮蔽是有用的——例如，用于将我们的代码与系统的其他部分隔离。然而，对于不熟悉它的人来说，这可能会造成混淆。尽管Kotlin允许这样做，但它强烈建议尽可能避免使用遮蔽。如果我们使用像IntelliJ IDEA这样的IDE，我们将很容易发现为我们突出显示的警告。</p>
<p>在本教程中，<strong>我们将讨论一些在Kotlin中可能发生遮蔽的情况。</strong></p>
<h3>类成员变量遮蔽</h3>
<p>这种情况发生在我们有一个类的成员变量，然后我们在函数作用域或代码块内创建了另一个同名的变量：</p>`,r:{minutes:6.79,words:2036},t:"Kotlin中的变量遮蔽",y:"a"}}],["/posts/baeldung/Archive/2024-06-20-Vigen%20re%20Cipher%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-20-Vigen re Cipher in Java.html-Di_jTtEW.js"),__vite__mapDeps([1468,1])),meta:{d:1718928e6,l:"2024年6月21日",c:["Java","密码学"],g:["Vigenère密码","加密","解密"],e:`<hr>
<h1>Vigenère密码在Java中的实现 | Baeldung</h1>
<h2><strong>1. 引言</strong></h2>
<p>在本文中，我们将研究Vigenère密码。我们将了解密码的工作原理，然后学习如何在Java中实现和逆向实现它。</p>
<h2><strong>2. Vigenère密码是什么？</strong></h2>
<p><strong>Vigenère密码是经典凯撒密码的一个变种，只是每个字母的位移量不同。</strong></p>
<p>在凯撒密码中，我们将明文中的每个字母都按照相同的量进行位移。例如，如果我们将每个字母位移三位，那么字符串"BAELDUNG"将变成"EDHOGXQJ"：</p>`,r:{minutes:6.88,words:2063},t:"Vigenère密码在Java中的实现 | Baeldung",y:"a"}}],["/posts/baeldung/Archive/2024-06-20-When%20to%20Use%20Setter%20Methods%20or%20Constructors%20for%20Setting%20a%20Variable%20s%20Value%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-20-When to Use Setter Methods or Constructors for Setting a Variable s Value in Java.html-fnKEiHfD.js"),__vite__mapDeps([1469,1])),meta:{d:17188416e5,l:"2024年6月20日",c:["Java","Programming"],g:["Java","Setter Methods","Constructors"],e:`<hr>
<h1>在Java中何时使用Setter方法或构造器设置变量的值</h1>
<h2>1. 引言</h2>
<p>开发者们经常面临的一个选择是：应该使用Setter方法还是构造器来设置变量的值。这两种技术都有其优点，但它们在不同的情况下被实现。</p>
<p><strong>在本教程中，我们将讨论在Java中何时使用Setter方法或构造器来设置变量的值。</strong></p>
<h2>2. 使用Setter方法</h2>
<p>Setter方法是我们可以在Java类中用来设置实例变量值的函数。<strong>此外，它们提供了一种灵活的方式来在对象初始化后修改其状态。</strong> 使用Setter方法设置的实例变量不能声明为final，因为这些值可以在对象初始化后更改。</p>`,r:{minutes:3.29,words:988},t:"在Java中何时使用Setter方法或构造器设置变量的值",y:"a"}}],["/posts/baeldung/Archive/2024-06-21-Adding%20Elements%20to%20a%20Collection%20During%20Iteration.html",{loader:()=>a(()=>import("./2024-06-21-Adding Elements to a Collection During Iteration.html-BnXQwvv_.js"),__vite__mapDeps([1470,1])),meta:{d:1718928e6,l:"2024年6月21日",c:["Java","Collections"],g:["List","ListIterator","Java 8"],e:`
<p>迭代一个列表是Java中的常见操作，但在迭代过程中向其中添加元素需要仔细考虑，以避免异常并确保代码的正确性。</p>
<p>在这个教程中，我们将讨论在迭代期间向集合添加元素的几种方法。</p>
<h2>2. 使用 ListIterator 类</h2>
<p>一种常见的方法是使用 ListIterator，它为列表提供了双向遍历和修改能力。</p>
<h3>2.1. 字符串场景</h3>
<p>考虑以下示例，我们在遇到 Python 后将 JavaScript 添加到编程语言列表中：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>\`\`\` programmingLanguages <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">,</span> <span class="token string">"Python"</span><span class="token punctuation">,</span> <span class="token string">"C++"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenList_whenAddElementWithListIterator_thenModifiedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ListIterator</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>\`\`\` listIterator <span class="token operator">=</span> programmingLanguages<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>listIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> language <span class="token operator">=</span> listIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>language<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"Python"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            listIterator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"JavaScript"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">assertIterableEquals</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">,</span> <span class="token string">"Python"</span><span class="token punctuation">,</span> <span class="token string">"JavaScript"</span><span class="token punctuation">,</span> <span class="token string">"C++"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> programmingLanguages<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:3.96,words:1188},t:"在迭代期间向集合添加元素",y:"a"}}],["/posts/baeldung/Archive/2024-06-21-Calculate%20Percentiles%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-21-Calculate Percentiles in Java.html-CzEZdH_n.js"),__vite__mapDeps([1471,1])),meta:{d:1718928e6,l:"2024年6月21日",c:["Java","数据分析"],g:["百分位数","数据集","统计分布"],e:`
<h2>1. 概述</h2>
<p>在Java中分析数据时，计算百位数是理解数值数据集的统计分布和特征的基本任务。</p>
<p>在本教程中，我们将逐步介绍Java中计算百分位数的过程，并提供代码示例和解释。</p>
<h2>2. 理解百分位数</h2>
<p>在讨论实现细节之前，我们首先了解百分位数是什么以及它们在数据分析中的常见用法。</p>
<p><strong>百分位数是统计学中用来表示低于某个给定百分比的观察值的值</strong>。例如，第50百分位数（也称为中位数）表示有50%的数据点低于此值。</p>
<p>值得注意的是，<strong>百分位数以与输入数据集相同的单位表示，而不是以百分比</strong>。例如，如果数据集指的是月薪，相应的百分位数将以美元、欧元或其他货币表示。</p>`,r:{minutes:4.31,words:1292},t:"Java中计算百分位数",y:"a"}}],["/posts/baeldung/Archive/2024-06-21-Capturing%20Method%20Arguments%20When%20Running%20Spock%20Tests.html",{loader:()=>a(()=>import("./2024-06-21-Capturing Method Arguments When Running Spock Tests.html-BRTofdFi.js"),__vite__mapDeps([1472,1])),meta:{d:1718928e6,l:"2024年6月21日",c:["Java","Spock"],g:["测试","Groovy"],e:`
<p>当我们测试代码时，有时我们想要捕获传递给方法的参数。</p>
<p>在本教程中，我们将学习如何使用Spock测试中的_Stubs_、_Mocks_和_Spies_来捕获参数，并检查我们捕获的内容。我们还将学习如何验证对同一_Mock_的多次调用使用不同的参数，并断言这些调用的顺序。</p>
<h2>2. 我们测试的主题</h2>
<p>首先，我们需要一个接受我们想要捕获的单个参数或参数的方法。</p>
<p>让我们创建一个_ArgumentCaptureSubject_类，它有一个_catchMeIfYouCan()_方法，该方法接受一个_String_并返回它，前面加上“Received ”：</p>`,r:{minutes:7.84,words:2352},t:"使用Spock测试捕获方法参数",y:"a"}}],["/posts/baeldung/Archive/2024-06-21-Check%20if%20a%20Number%20Is%20a%20Happy%20Number%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-21-Check if a Number Is a Happy Number in Java.html-BpxqyKxv.js"),__vite__mapDeps([1473,1])),meta:{d:1718928e6,l:"2024年6月21日",c:["Java","算法"],g:["Happy Number","算法实现"],e:`
<h2>1. 概述</h2>
<p>我们经常在编程中解决数学问题。确定一个数是否是快乐数是一个有趣的任务。</p>
<p>在本教程中，我们将理解快乐数的定义，并探索如何实现一个Java程序来检查给定的数是否是快乐数。</p>
<h2>2. 理解快乐数</h2>
<p><strong>快乐数是通过重复替换其数字平方和达到1的数。</strong> 相反，非快乐数（悲伤数）会陷入一个无限循环，永远无法达到1。</p>
<p>像往常一样，一些例子可以帮助我们快速理解快乐数的定义：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>给定数字：19

 19 -&gt; 1^2 + 9^2 = 82
 82 -&gt; 8^2 + 2^2 = 68
 68 -&gt; 6^2 + 8^2 = 100
100 -&gt; 1^2 + 0^2 + 0^2 = 1
  1

</code></pre></div>`,r:{minutes:5.03,words:1508},t:"Java中判断一个数是否是快乐数",y:"a"}}],["/posts/baeldung/Archive/2024-06-21-Commit%20Offsets%20in%20Kafka.html",{loader:()=>a(()=>import("./2024-06-21-Commit Offsets in Kafka.html-C1m08sXY.js"),__vite__mapDeps([1474,1])),meta:{d:1718928e6,l:"2024年6月21日",c:["Kafka","Commit Offsets"],g:["Kafka","Offsets","Commit"],e:`
<p>在Kafka中，消费者从分区中读取消息。在读取消息时，需要考虑一些问题，比如确定从分区中读取哪些消息，或者防止在故障情况下重复读取消息或消息丢失。解决这些问题的方案是使用偏移量。</p>
<p>在本教程中，我们将学习Kafka中的偏移量。我们将看到如何提交偏移量来管理消息消费，并讨论其方法和缺点。</p>
<h2>2. 什么是偏移量？</h2>
<p>我们知道Kafka将消息存储在主题中，每个主题可以有多个分区。每个消费者从一个主题的分区中读取消息。在这里，<strong>Kafka通过偏移量来跟踪消费者读取的消息。</strong> 偏移量是从零开始的整数，随着消息的存储而递增。</p>`,r:{minutes:5.41,words:1623},t:"Kafka中的提交偏移量",y:"a"}}],["/posts/baeldung/Archive/2024-06-21-Find%20the%20Largest%20Number%20Possible%20After%20Removing%20k%20Digits%20of%20a%20Number.html",{loader:()=>a(()=>import("./2024-06-21-Find the Largest Number Possible After Removing k Digits of a Number.html-CLzm6xFw.js"),__vite__mapDeps([1475,1])),meta:{d:1718928e6,l:"2024年6月21日",c:["Java","Algorithms"],g:["Largest Number","Remove Digits"],e:`
<h2>1. 概述</h2>
<p>在本教程中，我们将看到不同的算法，允许我们<strong>在移除数字k位后找到可能的最大数字</strong>。</p>
<p>首先，我们将解释问题。然后，我们将看到两种不同的算法，它们适合我们的需求。最后，我们将讨论它们的复杂性。</p>
<h2>2. 问题解释</h2>
<p>首先，让我们解释算法的目标。我们想要在移除数字k位后找到可能的最大数字。</p>
<p>例如，考虑数字286281。我们必须移除的位数是2，所以可能的最大数字将是8681。假设我们考虑另一个k值，即2，预期的输出将是88。</p>
<h2>3. 使用算术</h2>
<p>在这一部分，我们将看到逻辑解释以及时间和空间复杂性。</p>`,r:{minutes:3.77,words:1132},t:"移除数字k位后找到可能的最大数字 | Baeldung",y:"a"}}],["/posts/baeldung/Archive/2024-06-21-Finding%20the%20Majority%20Element%20of%20an%20Array%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-21-Finding the Majority Element of an Array in Java.html-Btk7Y5zK.js"),__vite__mapDeps([1476,1])),meta:{d:1718928e6,l:"2024年6月21日",c:["Java","Algorithms"],g:["Array","Majority Element"],e:`
<h2>1. 引言</h2>
<p>在本教程中，我们将探讨在数组中寻找主要元素的不同方法。对于每种方法，我们将提供它们各自的代码实现以及时间和空间复杂度的分析。</p>
<h2>2. 问题陈述</h2>
<p>让我们理解在数组中寻找主要元素的问题。我们有一个整数数组，我们的目标是确定其中是否存在一个主要元素。</p>
<p>**主要元素出现的次数超过数组长度的一半，即出现次数超过_n/2_，其中_n_代表数组的长度。**这意味着识别出在出现频率方面支配数组的元素。</p>
<p>在深入每种方法之前，我们将使用提供的样本数据作为输入：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:7.68,words:2305},t:"在Java中寻找数组的主要元素",y:"a"}}],["/posts/baeldung/Archive/2024-06-21-Finding%20the%20Peak%20Elements%20of%20a%20List.html",{loader:()=>a(()=>import("./2024-06-21-Finding the Peak Elements of a List.html-WIDO7TWN.js"),__vite__mapDeps([1477,1])),meta:{d:1718928e6,l:"2024年6月21日",c:["Java","Algorithms"],g:["Peak Elements","Array","Binary Search"],e:`
<h2>1. 引言</h2>
<p>数组中的峰值元素对于许多算法来说都非常重要，它们为数据集的特性提供了宝贵的洞察。在本教程中，我们将探讨峰值元素的概念，解释它们的重要性，并探索在单峰和多峰情况下有效识别它们的高效方法。</p>
<h2>2. 什么是峰值元素？</h2>
<p><strong>数组中的峰值元素定义为严格大于其相邻元素的元素。</strong> 如果边元素大于它们唯一的相邻元素，则认为它们处于峰值位置。</p>
<p>在元素相等的情况下，不存在严格的峰值。相反，峰值是元素首次超过其邻居的第一个实例。</p>
<h3>2.1. 示例</h3>
<p>为了更好地理解峰值元素的概念，请看以下示例：</p>`,r:{minutes:7.13,words:2139},t:"寻找列表中的峰值元素 | Baeldung",y:"a"}}],["/posts/baeldung/Archive/2024-06-21-HTML%20Builder%20in%20Kotlin.html",{loader:()=>a(()=>import("./2024-06-21-HTML Builder in Kotlin.html-CwhhF_4-.js"),__vite__mapDeps([1478,1])),meta:{d:1718928e6,l:"2024年6月21日",c:["Kotlin","Web Development"],g:["HTML","Kotlin","kotlinx.html"],e:`
<p>开发Web应用程序可能具有挑战性，特别是在处理动态内容时。然而，Kotlin提供了一个解决方案，即其HTML生成器库，这是_kotlinx.html_的一部分。使用这个库，开发者可以轻松地使用Kotlin的表达性语法创建HTML文档。</p>
<p>在本教程中，我们将探讨_kotlinx.html_如何简化Kotlin中的HTML生成。</p>
<h2>2. 理解_kotlinx.html_</h2>
<p>_kotlinx.html_库为在Kotlin中构建HTML结构提供了一个特定领域的语言（DSL）。通常，这个DSL允许我们以类型安全和简洁的方式创建HTML元素和属性，类似于HTML本身的结构。</p>`,r:{minutes:2.72,words:817},t:"Kotlin中的HTML生成器",y:"a"}}],["/posts/baeldung/Archive/2024-06-21-How%20to%20Autowire%20a%20Spring%20Bean%20in%20a%20Servlet%20Filter.html",{loader:()=>a(()=>import("./2024-06-21-How to Autowire a Spring Bean in a Servlet Filter.html-D-Xash19.js"),__vite__mapDeps([1479,1])),meta:{d:1718928e6,l:"2024年6月21日",c:["Spring","Java"],g:["Spring Framework","Servlet Filter"],e:`
<h2>1. 引言</h2>
<p>Servlet过滤器提供了一种强大的机制，用于拦截和操作传入的请求。然而，在这些过滤器中访问Spring管理的Bean可能会带来挑战。</p>
<p>在本教程中，我们将探讨在Servlet过滤器中无缝获取Spring Bean的各种方法，这在基于Spring的Web应用程序中是一个常见的需求。</p>
<h2>2. 理解@Autowired在Servlet过滤器中的限制</h2>
<p>虽然Spring的依赖注入机制@Autowired是将依赖注入Spring管理组件的便捷方式，但它与Servlet过滤器并不完全兼容。这是因为Servlet过滤器是由Servlet容器初始化的，通常在Spring的ApplicationContext完全加载和初始化之前。</p>`,r:{minutes:5.4,words:1620},t:"如何在Servlet过滤器中自动装配Spring Bean",y:"a"}}],["/posts/baeldung/Archive/2024-06-21-Intro%20to%20the%20Apache%20Commons%20CLI.html",{loader:()=>a(()=>import("./2024-06-21-Intro to the Apache Commons CLI.html-DkdWbtaL.js"),__vite__mapDeps([1480,1])),meta:{d:1718928e6,l:"2024年6月21日",c:["Java Libraries","Apache Commons"],g:["Apache Commons CLI","CLI Development"],e:`
<p>在这个教程中，我们将探索 Java Apache Commons CLI 库。它是一个框架，通过帮助开发者以一种高效和标准化的方式构建现有软件工具的命令行界面（CLI），赋予了开发者能力。</p>
<p><strong>该库可以通过支持定义 CLI 选项和基本验证来加速 CLI 的开发。</strong> 它帮助解析命令行参数及其值。最后，参数值可以传递给实现工具的底层服务。</p>
<p><strong>值得注意的是，Apache Commons CLI 库也在 Apache 的多个产品中使用，包括 Kafka、Maven、Ant 和 Tomcat。</strong></p>
<p>我们将讨论 Apache Commons CLI 中的一些重要类，然后使用它们在示例程序中展示其功能。</p>`,r:{minutes:6.38,words:1915},t:"Apache Commons CLI 入门指南",y:"a"}}],["/posts/baeldung/Archive/2024-06-21-Introduction%20to%20Redpanda.html",{loader:()=>a(()=>import("./2024-06-21-Introduction to Redpanda.html-Bs6Qbsud.js"),__vite__mapDeps([1481,1])),meta:{d:1718928e6,l:"2024年6月21日",c:["Redpanda","Kafka"],g:["事件流平台","性能"],e:`
<p>在本教程中，我们将讨论一个名为 Redpanda 的强大事件流平台。它是行业流平台 Kafka 的竞争对手，并且有趣的是，它还与 Kafka API 兼容。</p>
<p>我们将查看 Redpanda 的关键组件、特性和用例，创建 Java 程序以发布消息到 Redpanda 主题，然后从中读取消息。Redpanda 与 Kafka 的比较</p>
<p>由于 Redpanda 的制作者声称它是 Kafka 的竞争对手，让我们在一些重要因素上对它们进行比较：</p>
<table>
<thead>
<tr>
<th>特性</th>
<th>Redpanda</th>
<th>Kafka</th>
</tr>
</thead>
<tbody>
<tr>
<td>开发者体验</td>
<td>- 包括一个易于安装的单一二进制包<code>&lt;br&gt;</code>- 不依赖 JVM 和第三方工具</td>
<td>- 依赖 Zookeeper 或 KRaft<code>&lt;br&gt;</code>- 安装时开发者需要更多专业知识</td>
</tr>
<tr>
<td>性能</td>
<td>- 由于其每个核心一个线程的编程模型，比 Kafka 快 10 倍<code>&lt;br&gt;</code>- 用 C++ 编写<code>&lt;br&gt;</code>- 每个核心可以处理每秒 1GB 的写入<code>&lt;br&gt;</code>- 支持自动内核调整<code>&lt;br&gt;</code>- p99999 延迟是 16ms</td>
<td>- Kafka 是很久以前开发的，因此没有针对运行多个核心的新时代 CPU 进行优化。<code>&lt;br&gt;</code>- 用 Java 编写<code>&lt;br&gt;</code>- p99999 延迟是 1.8 秒</td>
</tr>
<tr>
<td>成本</td>
<td>- 比 Kafka 低 6 倍</td>
<td>- 需要更多的基础设施来支持类似的性能</td>
</tr>
<tr>
<td>连接器</td>
<td>- Redpanda Cloud 提供一些开箱即用的托管连接器</td>
<td>- 非常成熟，支持许多开箱即用的连接器</td>
</tr>
<tr>
<td>社区支持</td>
<td>- 在可接受性方面，与 Kafka 相比还有很长的路要走<code>&lt;br&gt;</code>- 有一个 Slack 频道</td>
<td>- 它在各个行业中有大量的采用，因此有一个非常成熟的社区</td>
</tr>
</tbody>
</table>`,r:{minutes:7.61,words:2283},t:"Redpanda 简介",y:"a"}}],["/posts/baeldung/Archive/2024-06-21-Obtaining%20the%20Last%20Path%20Segment%20of%20a%20URI%20in%20Java.html",{loader:()=>a(()=>import("./2024-06-21-Obtaining the Last Path Segment of a URI in Java.html-D9Pbat9c.js"),__vite__mapDeps([1482,1])),meta:{d:1718928e6,l:"2024年6月21日",c:["Java","URI"],g:["URI","Java","路径"],e:`
<hr>
<p>在Web开发和文件管理中，处理统一资源标识符（URI）是一项常见的操作。</p>
<p>除此之外，最常见的需求之一是从URL中获取最后一个路径段（最后一个段是在最后一个‘/’字符之后的最后一个段）。</p>
<p><strong>在本教程中，我们将探讨获取URL最后一个段的不同方法。</strong></p>
<h3>2. 使用_URI_类</h3>
<p>java.net.URI类提供了一种面向对象的URI解析和操作方法。为了简化，让我们以一个示例为例：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenURL_whenUsingURIClass_thenGetLastPathSegment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">URISyntaxException</span> <span class="token punctuation">{</span>
    <span class="token class-name">URI</span> uri <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URI</span><span class="token punctuation">(</span><span class="token string">"https://www.example.com/path/to/resource"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> path <span class="token operator">=</span> uri<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> segments <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> lastSegment <span class="token operator">=</span> segments<span class="token punctuation">[</span>segments<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"resource"</span><span class="token punctuation">,</span> lastSegment<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.96,words:887},t:"在Java中获取URI的最后一个路径段",y:"a"}}],["/posts/baeldung/Archive/2024-06-21-Parsing%20HTML%20Table%20in%20Java%20With%20Jsoup.html",{loader:()=>a(()=>import("./2024-06-21-Parsing HTML Table in Java With Jsoup.html-CbRZLHCY.js"),__vite__mapDeps([1483,1])),meta:{d:1718928e6,l:"2024年6月21日",c:["Java","Jsoup"],g:["HTML","网页抓取"],e:'<hr>\n<h1>Java中使用Jsoup解析HTML表格</h1>\n<p>Jsoup是一个开源库，用于抓取HTML页面。它提供了一个API，使用DOM API方法进行数据解析、提取和操作。</p>\n<p>在本文中，我们将看到如何使用Jsoup解析HTML表格。<strong>我们将检索和更新HTML表格中的数据，并且，使用Jsoup向表格中添加和删除行。</strong></p>\n<h3>2. 依赖性</h3>\n<p>要使用Jsoup库，请将以下依赖项添加到项目中：</p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`org.jsoup`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`jsoup`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`1.17.2`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n</code></pre></div>',r:{minutes:5.04,words:1511},t:"Java中使用Jsoup解析HTML表格",y:"a"}}],["/posts/baeldung/Archive/2024-06-21-Refresh%20and%20Fetch%20an%20Entity%20After%20Save%20in%20JPA.html",{loader:()=>a(()=>import("./2024-06-21-Refresh and Fetch an Entity After Save in JPA.html-JRnbvXmU.js"),__vite__mapDeps([1484,1])),meta:{d:1718928e6,l:"2024年6月21日",c:["Spring Data JPA","JPA"],g:["Refresh","Fetch","Entity Management"],e:`
<p>Java持久化API（JPA）充当Java对象和关系数据库之间的桥梁，允许我们无缝地持久化和检索数据。在本教程中，我们将探讨在JPA中保存操作后有效地刷新和获取实体的各种策略和技术。### 2. Spring Data JPA中的实体管理理解</p>
<p>在Spring Data JPA中，实体管理围绕<code>JpaRepository</code>接口展开，它是与数据库交互的主要机制。通过扩展<code>CrudRepository</code>的<code>JpaRepository</code>接口，Spring Data JPA提供了一套强大的方法用于实体的持久化、检索、更新和删除。</p>`,r:{minutes:7.21,words:2162},t:"在JPA中保存后刷新和获取实体",y:"a"}}],["/posts/baeldung/Archive/2024-06-21-Spring%20Security%20AuthorizationManager.html",{loader:()=>a(()=>import("./2024-06-21-Spring Security AuthorizationManager.html-CihXGITR.js"),__vite__mapDeps([1485,1])),meta:{d:1718928e6,l:"2024年6月21日",c:["Spring Security","Authorization"],g:["Spring Security","AuthorizationManager"],e:`
<p>如果你正在开发Spring Security（特别是OAuth）实现，一定要看看《学习Spring安全》课程：</p>
<p><strong>&gt;&gt; 学习 Spring</strong>
<strong>安全</strong></p>
<h2>1. 引言</h2>
<p>Spring Security是Spring框架的一个扩展，它使我们能够轻松地将常见的安全实践集成到我们的应用程序中。这包括用户认证和授权、API保护等。</p>
<p>在本教程中，我们将查看Spring Security内部的许多部分之一：<em>AuthorizationManager</em>。我们将看到它如何适应更大的Spring Security生态系统，以及它如何帮助保护我们的应用程序的各种用例。</p>`,r:{minutes:6.98,words:2094},t:"Spring Security 授权管理器",y:"a"}}],["/posts/baeldung/Archive/Add%20Global%20Exception%20Interceptor%20in%20gRPC%20Server.html",{loader:()=>a(()=>import("./Add Global Exception Interceptor in gRPC Server.html-BFMTzGna.js"),__vite__mapDeps([1486,1])),meta:{d:17184096e5,l:"2024年6月15日",c:["gRPC","异常处理"],g:["gRPC","拦截器","异常拦截器"],e:`
<p>在本教程中，我们将探讨gRPC服务器应用程序中拦截器的作用，以处理全局异常。</p>
<p>拦截器可以在请求到达RPC方法之前进行验证或操作。因此，它们对于处理应用程序的常见问题非常有用，例如日志记录、安全性、缓存、审计、身份验证和授权等。</p>
<p>应用程序也可以使用拦截器作为全局异常处理器。</p>
<p>主要地，拦截器可以帮助处理两种类型的异常：</p>
<ul>
<li>处理从无法处理它们的方法中逃逸的未知运行时异常</li>
<li>处理从任何其他下游拦截器中逃逸的异常</li>
</ul>
<p>拦截器可以帮助以集中的方式创建一个处理异常的框架。这样，应用程序就可以有一个一致的标准和强大的方法来处理异常。</p>`,r:{minutes:6.77,words:2032},t:"在gRPC服务器中添加全局异常拦截器",y:"a"}}],["/posts/baeldung/Archive/Add%20an%20Aggregation%20to%20an%20Elasticsearch%20Query.html",{loader:()=>a(()=>import("./Add an Aggregation to an Elasticsearch Query.html-XVUDeHeu.js"),__vite__mapDeps([1487,1])),meta:{d:17184096e5,l:"2024年6月15日",c:["Elasticsearch","Spring Data"],g:["Elasticsearch","Aggregation","Query","Spring Data","Tutorial"],e:`
<p>Elasticsearch是一个适用于需要灵活过滤的场景的搜索和分析引擎。<strong>有时，我们需要检索请求的数据及其聚合信息。</strong> 在本教程中，我们将探讨如何做到这一点。</p>
<h2>2. Elasticsearch搜索与聚合</h2>
<p>让我们从探索Elasticsearch的聚合功能开始。</p>
<p>一旦我们在本地主机上运行了Elasticsearch实例，<strong>让我们创建一个名为_store-items_的索引，并在其中添加一些文档</strong>：</p>
<div class="language-json" data-ext="json" data-title="json"><pre class="language-json"><code>POST http<span class="token operator">:</span><span class="token comment">//localhost:9200/store-items/_doc</span>
<span class="token punctuation">{</span>
    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"Multimedia"</span><span class="token punctuation">,</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"PC Monitor"</span><span class="token punctuation">,</span>
    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1000</span>
<span class="token punctuation">}</span>
...
POST http<span class="token operator">:</span><span class="token comment">//localhost:9200/store-items/_doc</span>
<span class="token punctuation">{</span>
    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"Pets"</span><span class="token punctuation">,</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Dog Toy"</span><span class="token punctuation">,</span>
    <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">10</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:4.18,words:1254},t:"Elasticsearch查询中添加聚合",y:"a"}}],["/posts/baeldung/Archive/BigDecimal%20equals%20%20%20vs.%20compareTo%20%20.html",{loader:()=>a(()=>import("./BigDecimal equals   vs. compareTo  .html-DSBdp9wR.js"),__vite__mapDeps([1488,1])),meta:{d:17186688e5,l:"2024年6月18日",c:["Java","BigDecimal"],g:["equals()","compareTo()"],e:`
<p>正确处理数字对于任何编程语言来说都至关重要。然而，有些应用程序更依赖于确切的值，并需要更好地表示小数。
例如，在处理金钱或精确计算时，我们应该避免允许四舍五入错误和溢出的数字表示。在这种情况下，强烈建议使用 <em>BigDecimal</em> 类。
尽管 <em>BigDecimal</em> 提供了许多好处，但它在 <em>equals()</em> 和 <em>compareTo()</em> 方法上表现出非直观的行为。在本教程中，我们将深入探讨它们的差异、底层实现以及这些方法的影响。</p>
<p>让我们从这些方法中最简单的 <em>compareTo()</em> 开始。它的美妙之处在于其行为是预期的，并且对于大多数开发人员来说被认为是一致和合乎逻辑的。
这个方法比较两个数字，并返回一个整数值，显示一个数字是大于、小于还是等于另一个数字。在这种情况下，我们根据 <em>compareTo()</em> 结果为零来引用两个数字的相等性。让我们检查一下 <em>compareTo()</em> 逻辑的以下示例：</p>`,r:{minutes:3.39,words:1016},t:"BigDecimal equals() 与 compareTo() 的差异 | Baeldung",y:"a"}}],["/posts/baeldung/Archive/Calculating%20Moving%20Averages%20in%20Java.html",{loader:()=>a(()=>import("./Calculating Moving Averages in Java.html-CHm-X0yH.js"),__vite__mapDeps([1489,1])),meta:{d:17186688e5,l:"2024年6月18日",c:["Java","编程"],g:["移动平均","计算"],e:`
<p>date: 2024-06-18
category:</p>
<ul>
<li>Java</li>
<li>编程
tag:</li>
<li>移动平均</li>
<li>计算</li>
</ul>
<hr>
<h1>Java中计算移动平均值 | Baeldung</h1>
<ul>
<li>
<p>从这里开始</p>
</li>
<li>
<p>课程▼▲</p>
</li>
<li>
<p><strong>使用Spring Boot构建REST</strong><br>
\\ 构建生产级API的权威参考**（几天后价格将上涨50美元）**</p>
</li>
<li>
<p><strong>学习Spring Security▼▲</strong><br>
\\ 如果你今天使用Java工作，这是唯一的Spring Security教育</p>
</li>
<li>
<p><strong>学习Spring Security Core</strong><br>
\\ 专注于Spring Security 6的核心</p>
</li>
<li>
<p><strong>学习Spring Security OAuth</strong><br>
\\ 专注于Spring Security 6中的新OAuth2堆栈</p>
</li>
<li>
<p><strong>学习Spring</strong><br>
\\ 从无经验到实际构建东西</p>
</li>
<li>
<p><strong>学习Spring Data JPA</strong><br>
\\ 完整的Spring Data JPA持久性指南</p>
</li>
<li>
<p>指南▼▲</p>
</li>
<li>
<p><strong>持久性</strong><br>
\\ Spring持久性的指南</p>
</li>
<li>
<p><strong>REST</strong><br>
\\ 使用Spring构建REST API的指南</p>
</li>
<li>
<p><strong>安全</strong><br>
\\ Spring Security指南</p>
</li>
<li>
<p>关于▼▲</p>
</li>
<li>
<p><strong>完整存档</strong><br>
\\ 网站上所有文章的高层次概述。</p>
</li>
<li>
<p><strong>Baeldung电子书</strong><br>
\\ 发现我们所有的电子书</p>
</li>
<li>
<p><strong>关于Baeldung</strong><br>
\\ 关于Baeldung。</p>
</li>
<li>
<p><strong>为Baeldung写作</strong><br>
\\ 成为网站上的作家。</p>
</li>
<li>
<p>RSS</p>
</li>
<li>
<p>搜索</p>
</li>
</ul>`,r:{minutes:.85,words:254},t:"Java中计算移动平均值 | Baeldung---",y:"a"}}],["/posts/baeldung/Archive/Can%20%20Transactional%20and%20%20Async%20Work%20Together%20.html",{loader:()=>a(()=>import("./Can  Transactional and  Async Work Together .html-CIhF9nG0.js"),__vite__mapDeps([1490,1])),meta:{d:17187552e5,l:"2024年6月19日",c:["Spring","Java"],g:["Spring Framework","Asynchronous","Transactional"],e:`
<h2>1. 引言</h2>
<p>在本文中，我们将探讨Spring框架中@Transactional和@Async注解之间的兼容性。</p>
<h2>2. 理解 @Transactional 和 @Async</h2>
<p><strong>@Transactional注解从许多其他代码块中创建一个原子代码块。因此，如果一个块以异常方式完成，所有部分都会回滚</strong>。因此，只有当其所有部分都成功时，新创建的原子单元才会成功完成提交。</p>
<p>创建事务使我们能够避免代码中的部分失败，提高数据一致性。</p>
<p>另一方面，@Async告诉Spring，被注解的单元可以与调用线程并行运行。<strong>换句话说，如果我们从线程调用一个@Async方法或类，Spring会在具有不同上下文的另一个线程中运行其代码</strong>。</p>`,r:{minutes:6.74,words:2023},t:"@Transactional 和 @Async 是否可以一起工作？ | Baeldung",y:"a"}}],["/posts/baeldung/Archive/Check%20if%20Two%20Strings%20Are%20Permutations%20of%20Each%20Other%20in%20Java.html",{loader:()=>a(()=>import("./Check if Two Strings Are Permutations of Each Other in Java.html-CS3U31mw.js"),__vite__mapDeps([1491,1])),meta:{d:17184096e5,l:"2024年6月15日",c:["Java","Algorithms"],g:["String","Permutation","Anagram"],e:`
<p>排列或变位词是通过重新排列不同单词或短语的字母形成的单词或短语。换句话说，<strong>排列包含与另一个字符串相同的字符，但字符的排列顺序可以变化</strong>。</p>
<p>在本教程中，我们将检查字符串是否是另一个字符串的排列或变位词的解决方案。</p>
<h3>2.1. 排列</h3>
<p>让我们看看单词 "CAT" 的排列：</p>
<p>显然，有六种排列（包括 "CAT" 本身）。我们可以计算 <em>n!</em>（字符串长度 <em>n</em> 的阶乘）。</p>
<h3>2.2. 如何解决问题</h3>
<p>正如我们所看到的，一个字符串有许多可能的排列。我们可能会想到创建一个算法，循环遍历所有的字符串排列，以检查是否有一个与我们比较的字符串相等。</p>`,r:{minutes:7.57,words:2271},t:"Java中检查两个字符串是否为彼此的排列",y:"a"}}],["/posts/baeldung/Archive/Check%20if%20a%20Number%20Is%20Power%20of%202%20in%20Java.html",{loader:()=>a(()=>import("./Check if a Number Is Power of 2 in Java.html-B3plK7TB.js"),__vite__mapDeps([1492,1])),meta:{d:17184096e5,l:"2024年6月15日",c:["Java","编程"],g:["Java","算法","位运算"],e:`
<h2>1. 引言</h2>
<p>2的幂是一个可以表示为2的某个整数次方的数字，例如2、4、8、16等。在Java中，有几种方法可以确定给定的数字是否是2的幂，包括使用对数、位运算、循环除法和内置方法。在本教程中，我们将探索这些不同的方法，并提供如何在Java中实现它们的示例。</p>
<h2>2. 循环除法</h2>
<p>检查一个数字是否是2的幂的一种方法是通过迭代地将数字除以2，直到它变为1。如果数字是2的幂，它将在有限次除法后变为1。让我们看看这种技术是如何实现的：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">boolean</span> <span class="token function">isPowerOfTwoUsingLoopDivision</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        n <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:5.04,words:1513},t:"Java中检查数字是否为2的幂的方法 | Baeldung",y:"a"}}],["/posts/baeldung/Archive/Clear%20Managed%20Entities%20in%20JPA%20Hibernate.html",{loader:()=>a(()=>import("./Clear Managed Entities in JPA Hibernate.html-DuLlhkTz.js"),__vite__mapDeps([1493,1])),meta:{d:1696896e6,l:"2023年10月10日",c:["JPA","Hibernate"],g:["JPA","Hibernate","持久化上下文","清除管理实体"],e:`
<h2>1. 概述</h2>
<p>在本教程中，我们将回顾JPA中实体是如何被管理的，然后探讨一个场景，即由于外部变化，持久化上下文可能不会返回最新数据。</p>
<h2>2. 持久化上下文</h2>
<p>每个_EntityManager_都与一个持久化上下文相关联，该上下文在内存中存储管理实体。每当我们通过_EntityManager_对实体执行任何数据操作时，该实体就会由持久化上下文管理。</p>
<p>当我们再次检索实体时，JPA会从持久化上下文中返回管理实体，而不是从数据库中获取。这种缓存机制有助于提高性能，避免了从数据库中重复获取相同的数据。</p>
<p><strong>持久化上下文在JPA中也被称为一级（L1）缓存。</strong></p>`,r:{minutes:3.03,words:908},t:"JPA/Hibernate 中清除管理实体的指南",y:"a"}}],["/posts/baeldung/Archive/Code%20Coverage%20vs.%20Test%20Coverage.html",{loader:()=>a(()=>import("./Code Coverage vs. Test Coverage.html-Eb1s0U1Q.js"),__vite__mapDeps([1494,1])),meta:{d:17187552e5,l:"2024年6月19日",c:["Software Testing","Development Practices"],g:["Code Coverage","Test Coverage"],e:`
<p>软件测试帮助我们确保代码正确运行，这使得它成为开发过程中的重要组成部分。当讨论测试时，可能会出现诸如代码覆盖率和测试覆盖率等术语。尽管它们都是衡量我们代码库有效性的方式，但它们指的是不同的概念。因此，我们不应该将它们交替使用。</p>
<p>在本教程中，我们将学习代码和测试覆盖率之间的区别，并讨论每种覆盖率的含义。</p>
<p>代码覆盖率是一种机制，用于衡量测试中源代码覆盖的部分。它代表了白盒测试的一种形式，需要访问源代码，并考虑实现细节和代码的内部结构。代码覆盖率主要由开发人员在单元测试中完成。</p>
<p>有几种方法可以衡量代码覆盖率：</p>
<ul>
<li><strong>语句/行覆盖率</strong>检查在测试期间至少执行一次的语句数量。</li>
<li><strong>分支覆盖率</strong>计算决策过程中覆盖的分支百分比。</li>
<li><strong>条件/表达式覆盖率</strong>确保每个条件至少被评估为真或假一次。</li>
<li><strong>函数覆盖率</strong>计算至少被调用一次的方法数量。</li>
</ul>`,r:{minutes:6.41,words:1923},t:"代码覆盖率与测试覆盖率 | Baeldung",y:"a"}}],["/posts/baeldung/Archive/Collecting%20into%20Map%20using%20Collectors.toMap%20%20%20vs%20Collectors.groupingBy%20%20.html",{loader:()=>a(()=>import("./Collecting into Map using Collectors.toMap   vs Collectors.groupingBy  .html-CJrsRtmh.js"),__vite__mapDeps([1495,1])),meta:{d:1718496e6,l:"2024年6月16日",c:["Java","编程"],g:["Java 8","Stream API","Collectors"],e:`
<p>在 Java 编程中，处理集合和流是常见任务，特别是在现代的函数式编程范式中。Java 8 引入了 Stream API，为处理数据集合提供了强大的工具。</p>
<p>Stream API 中的两个基本的 Collector 是 Collectors.toMap() 和 Collectors.groupingBy()，它们在将 Stream 元素转换为 Map 方面有着不同的目的。</p>
<p>在本教程中，我们将深入探讨这两种 Collector 的差异，并探索每种 Collector 更适用的场景。</p>
<h2>2. 城市示例</h2>
<p>示例可以帮助我们说明问题。因此，让我们创建一个简单的不可变 POJO 类：</p>`,r:{minutes:7.1,words:2131},t:"Java 8 中使用 Stream API 的 Collectors.toMap() 与 Collectors.groupingBy() 的比较",y:"a"}}],["/posts/baeldung/Archive/Compare%20the%20Numbers%20of%20Different%20Types.html",{loader:()=>a(()=>import("./Compare the Numbers of Different Types.html-B-sNg6PI.js"),__vite__mapDeps([1496,1])),meta:{d:17185824e5,l:"2024年6月17日",c:["Java"],g:["数字比较","浮点数","整数"],e:`
<ol>
<li>概述</li>
</ol>
<p>有时，我们必须比较数字，忽略它们的类别或类型。<strong>这在格式不统一且数字可能在不同上下文中使用时特别有用。</strong></p>
<p>在本教程中，我们将学习如何比较原始类型和不同类别的数字，例如_整数_、<em>长整数_和_浮点数</em>。我们还将检查如何将浮点数与整数进行比较。</p>
<ol start="2">
<li>比较不同类别</li>
</ol>
<p>让我们检查Java如何比较不同的原始类型、包装类和数字类型。<strong>为了澄清，在本文的上下文中，我们将把_“类型”_称为浮点数和整数，而不是类或原始类型。</strong></p>`,r:{minutes:6.03,words:1809},t:"Java中不同数字类型的比较",y:"a"}}],["/posts/baeldung/Archive/Comparison%20Between%20Flux.map()%20and%20Flux.doOnNext().html",{loader:()=>a(()=>import("./Comparison Between Flux.map() and Flux.doOnNext().html-qEIWmGJd.js"),__vite__mapDeps([1497,1])),meta:{d:17183232e5,l:"2024年6月14日",c:["Java","Reactive Programming"],g:["Reactor","Flux","map","doOnNext"],e:`
<p>在Reactor库中，Flux.map()和Flux.doOnNext()操作符在处理流数据元素时扮演着不同的角色。</p>
<p>Flux.map()操作符有助于转换Flux发出的每个元素。Flux.doOnNext()操作符是一个生命周期钩子，允许我们在每个元素发出时执行副作用操作。</p>
<p>在本教程中，我们将深入探讨这些操作符的详细信息，探索它们的内部实现和实际用例。此外，我们还将看到如何一起使用这两个操作符。</p>
<p>Maven依赖</p>
<p>要使用Flux发布者和其他响应式操作符，让我们将reactor-core依赖项添加到pom.xml中：</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>\\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency\\</span><span class="token punctuation">&gt;</span></span>
    \\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId\\</span><span class="token punctuation">&gt;</span></span>io.projectreactor\\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId\\</span><span class="token punctuation">&gt;</span></span>
    \\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId\\</span><span class="token punctuation">&gt;</span></span>reactor-core\\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId\\</span><span class="token punctuation">&gt;</span></span>
    \\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version\\</span><span class="token punctuation">&gt;</span></span>3.6.5\\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version\\</span><span class="token punctuation">&gt;</span></span>
\\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency\\</span><span class="token punctuation">&gt;</span></span>
</code></pre></div>`,r:{minutes:4.92,words:1476},t:"Reactor库中Flux.map()与Flux.doOnNext()的比较 | Baeldung概述",y:"a"}}],["/posts/baeldung/Archive/CompletableFuture%20vs.%20Mono.html",{loader:()=>a(()=>import("./CompletableFuture vs. Mono.html-DqG7uDLd.js"),__vite__mapDeps([1498,1])),meta:{d:17182368e5,l:"2024年6月13日",c:["Java"],g:["CompletableFuture","Mono","异步编程"],e:`
<p>在这篇快速教程中，我们将学习Java中CompletableFuture和来自Project Reactor的Mono之间的差异。我们将重点讨论它们如何处理异步任务以及为完成这些任务而发生的执行过程。</p>
<p>让我们先从CompletableFuture开始了解。</p>
<h3>2. CompletableFuture的理解</h3>
<p>CompletableFuture是在Java 8中引入的，它建立在之前的Future类之上，并提供了一种异步运行代码的方式。简而言之，它改善了异步编程并简化了线程的工作。</p>
<p>此外，我们可以使用thenApply()、thenAccept()和thenCompose()等方法创建一系列计算，以协调我们的异步任务。</p>`,r:{minutes:3.19,words:956},t:"CompletableFuture与Mono | Baeldung",y:"a"}}],["/posts/baeldung/Archive/Compress%20and%20Create%20a%20Byte%20Array%20Using%20GZip.html",{loader:()=>a(()=>import("./Compress and Create a Byte Array Using GZip.html-BCsnXPbg.js"),__vite__mapDeps([1499,1])),meta:{d:17186688e5,l:"2024年6月18日",c:["Java","GZIP"],g:["数据压缩","Java GZIP"],e:`
<h2>1. 概述</h2>
<p><strong>GZIP格式是一种用于数据压缩的文件格式</strong>。Java语言中的_GZipInputStream_和_GZipOutputStream_类实现了这种文件格式。</p>
<p>在本教程中，我们将学习如何在Java中使用GZIP压缩数据。同时，我们还将探讨如何将压缩后的数据写入字节数组。</p>
<h2>2. _GZipOutputStream_类</h2>
<p>_GZipOutputStream_类将数据压缩并写入底层输出流。</p>
<h3>2.1. 对象实例化</h3>
<p><strong>我们可以使用构造函数来创建类的实例</strong>：</p>`,r:{minutes:3.93,words:1179},t:"使用GZip压缩并创建字节数组",y:"a"}}],["/posts/baeldung/Archive/Configuring%20Retry%20Policy%20for%20gRPC%20Request.html",{loader:()=>a(()=>import("./Configuring Retry Policy for gRPC Request.html-CrW8ZHRM.js"),__vite__mapDeps([1500,1])),meta:{d:17184096e5,l:"2024年6月15日",c:["gRPC","Java"],g:["重试策略","微服务"],e:`
<h2>1. 概述</h2>
<p>在本教程中，我们将讨论在gRPC中实现重试策略的各种方式，gRPC是由Google开发的远程过程调用框架。gRPC可以在多种编程语言中互操作，但我们将专注于Java实现。</p>
<h2>2. 重试的重要性</h2>
<p>应用程序越来越多地依赖于分布式架构。这种方法有助于通过水平扩展来处理重负载。它还促进了高可用性。然而，它也引入了更多的潜在故障点。因此，在开发具有多个微服务的应用程序时，容错能力至关重要。</p>
<p><strong>RPC可能会因各种原因暂时或短暂地失败：</strong></p>
<ul>
<li><strong>网络延迟或网络中的连接中断</strong></li>
<li><strong>服务器由于内部错误而不响应</strong></li>
<li><strong>系统资源繁忙</strong></li>
<li><strong>下游服务忙碌或不可用</strong></li>
<li><strong>其他相关问题</strong></li>
</ul>`,r:{minutes:7.4,words:2219},t:"gRPC请求的重试策略配置 | Baeldung",y:"a"}}],["/posts/baeldung/Archive/Consumer%20Processing%20of%20Kafka%20Messages%20With%20Delay.html",{loader:()=>a(()=>import("./Consumer Processing of Kafka Messages With Delay.html--k2p8IY4.js"),__vite__mapDeps([1501,1])),meta:{d:17182368e5,l:"2024年6月13日",c:["Kafka","Spring"],g:["Kafka","Consumer","Delay","Spring Kafka"],e:`
<p>Apache Kafka是一个事件流平台，用于大规模地收集、处理、存储和集成数据。有时，我们可能希望延迟从Kafka处理消息。例如，一个客户订单处理系统设计为在X秒的延迟后处理订单，以适应这个时间框架内的取消。</p>
<p>在本文中，我们将使用Spring Kafka探索Kafka消息的延迟消费者处理。尽管Kafka没有提供开箱即用的延迟消费消息支持，但我们将查看实现的替代选项。</p>
<h2>2. 应用上下文</h2>
<p><strong>Kafka提供了多种方式来在错误时重试。我们将使用这种重试机制来延迟消费者处理消息。因此，了解Kafka重试的工作方式是值得的。</strong></p>`,r:{minutes:5.33,words:1599},t:"Apache Kafka消费者延迟处理消息概述",y:"a"}}],["/posts/baeldung/Archive/Continue%20the%20Test%20Even%20After%20Assertion%20Failure%20in%20TestNG.html",{loader:()=>a(()=>import("./Continue the Test Even After Assertion Failure in TestNG.html-UtSBB911.js"),__vite__mapDeps([1502,1])),meta:{d:17186688e5,l:"2024年6月18日",c:["Java","Testing"],g:["TestNG","SoftAssert"],e:`
<h2>1. 概述</h2>
<p>TestNG是一个流行的Java测试框架，它是JUnit的替代品。虽然两个框架都提供了自己的范例，但它们都有断言的概念：如果逻辑语句评估为false，则会停止程序执行，测试失败。TestNG中的一个简单断言可能看起来像这样：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">testNotNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertNotNull</span><span class="token punctuation">(</span><span class="token string">"My String"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:4.19,words:1258},t:"TestNG中在断言失败后继续测试 | Baeldung",y:"a"}}],["/posts/baeldung/Archive/Convert%202D%20Array%20Into%201D%20Array.html",{loader:()=>a(()=>import("./Convert 2D Array Into 1D Array.html-C2Qm40hm.js"),__vite__mapDeps([1503,1])),meta:{d:17185824e5,l:"2024年6月17日",c:["Java","编程"],g:["数组","2D数组","1D数组"],e:`
<p>数组是任何语言中最基本的数据结构。<strong>尽管我们大多数情况下不直接操作它们，但知道如何有效操作它们可以显著提高我们的代码效率。</strong></p>
<p>在本教程中，我们将学习如何将二维数组转换为一维数组，通常被称为扁平化。例如，我们将转换 { {1, 2, 3}, {4, 5, 6}, {7, 8, 9} } 为 {1, 2, 3, 4, 5, 6, 7, 8, 9}。</p>
<p>尽管我们将使用二维数组进行操作，但本教程中概述的思想可以应用于任何维度的数组。在本文中，我们将使用原始整数数组作为示例，但这些思想可以应用于任何数组。</p>
<h2>2. 循环和原始数组</h2>`,r:{minutes:4.1,words:1231},t:"Java中将二维数组转换为一维数组",y:"a"}}],["/posts/baeldung/Archive/Convert%20Between%20CLOB%20and%20String%20in%20Java.html",{loader:()=>a(()=>import("./Convert Between CLOB and String in Java.html-BkvFSy98.js"),__vite__mapDeps([1504,1])),meta:{d:17183232e5,l:"2024年6月14日",c:["Java","数据库"],g:["CLOB","String","数据库操作"],e:`
<h2>1. 引言</h2>
<p>在Java中使用数据库时，处理大型文本数据是一项常见任务。此外，字符大对象（CLOB）类型允许数据库存储大量的文本数据。而且，当从数据库读取或写入数据时，通常需要在CLOB和String对象之间进行转换。</p>
<p><strong>在本教程中，我们将探讨如何在Java中高效地执行此转换。</strong></p>
<h2>2. 将CLOB转换为String</h2>
<p>在这种方法中，我们将利用标准的Java I/O（Reader和Writer）操作来高效地处理来自SQL Clob对象的字符数据。Reader从Clob读取数据，然后处理并写入StringWriter以转换为String对象。</p>`,r:{minutes:2.4,words:720},t:"在Java中将CLOB和String相互转换",y:"a"}}],["/posts/baeldung/Archive/Convert%20Decimal%20to%20Fraction%20in%20Java.html",{loader:()=>a(()=>import("./Convert Decimal to Fraction in Java.html-bxjakNtB.js"),__vite__mapDeps([1505,1])),meta:{d:17182368e5,l:"2024年6月13日",c:["Java","编程"],g:["十进制转分数","Java"],e:`
<ol>
<li>引言</li>
</ol>
<p>分数是表示数字的另一种方式，由分子和分母组成。例如，分数3/5可以被看作是“5分之3”，表示的值与十进制数0.6相同。在本教程中，我们将探讨在Java中将十进制数字转换为分数的不同方法。</p>
<ol start="2">
<li>使用乘以10的幂</li>
</ol>
<p>将十进制转换为分数的一种简单方法是将十进制乘以10的幂，然后使用结果的分子和分母作为分数。</p>
<p>以下是这种方法的代码片段：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> <span class="token function">convertDecimalToFractionUsingMultiplyingWithPowerOf10</span><span class="token punctuation">(</span><span class="token keyword">double</span> decimal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> decimalStr <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>decimal<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> decimalPlaces <span class="token operator">=</span> decimalStr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> decimalStr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token char">'.'</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">long</span> denominator <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> decimalPlaces<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> numerator <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>decimal <span class="token operator">*</span> denominator<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> numerator <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> denominator<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:5.86,words:1757},t:"Java中将十进制转换为分数",y:"a"}}],["/posts/baeldung/Archive/Convert%20From%20int%20to%20short%20in%20Java.html",{loader:()=>a(()=>import("./Convert From int to short in Java.html-C6JpN5z7.js"),__vite__mapDeps([1506,1])),meta:{d:17185824e5,l:"2024年6月17日",c:["Java","数据类型转换"],g:["int","short"],e:`
<p>当我们在Java中工作时，经常会遇到需要转换数据类型以满足特定要求的场景。一种常见的转换是从int转换为short。</p>
<p>在本教程中，我们将探讨如何在Java中将int转换为short以及需要注意的潜在陷阱。</p>
<h2>2. 问题介绍</h2>
<p>Java提供了几种原始数据类型来存储数值，每种数据类型都有其范围和精度。例如，int数据类型是一个32位有符号整数，能够存储从-2<sup>31到2</sup>31 - 1的值。另一方面，short数据类型是一个16位有符号整数，能够存储从-2<sup>15到2</sup>15 - 1的值。</p>
<p>由于int的范围比short宽，将int转换为short可能会有潜在的陷阱，我们将在接下来的部分中详细讨论。</p>`,r:{minutes:9.58,words:2874},t:"Java中从int转换为short的方法",y:"a"}}],["/posts/baeldung/Archive/Convert%20Google%20Protocol%20Buffer%20Timestamp%20to%20LocalDate.html",{loader:()=>a(()=>import("./Convert Google Protocol Buffer Timestamp to LocalDate.html-D8W9lCM8.js"),__vite__mapDeps([1507,1])),meta:{d:17187552e5,l:"2024年6月19日",c:["Java","Google Protocol Buffer"],g:["LocalDate","Timestamp","Java"],e:`
<h2>1. 概述</h2>
<p>协议缓冲区（protobuf）数据格式帮助我们在网络上传输结构化数据。它独立于任何编程语言，并且大多数编程语言都有实现，包括Java。</p>
<p><strong>protobuf <em>Timestamp</em> 类型表示一个时间点，独立于任何特定时区</strong>。时间在计算中是一个关键组成部分，我们可能需要将 protobuf <em>Timestamp</em> 转换为 Java 时间实例，例如 <em>LocalDate</em>，以便将其无缝集成到现有的 Java 代码库中。</p>
<p>在本教程中，我们将探讨将 protobuf 时间戳实例转换为 <em>LocalDate</em> 类型的过程，使我们能够在 Java 应用程序中更有效地使用 protobuf 数据。</p>`,r:{minutes:2.76,words:827},t:"将 Google 协议缓冲区时间戳转换为 LocalDate | Baeldung",y:"a"}}],["/posts/baeldung/Archive/Convert%20InputStream%20to%20Stream%20in%20Java.html",{loader:()=>a(()=>import("./Convert InputStream to Stream in Java.html-aXQFCEg5.js"),__vite__mapDeps([1508,1])),meta:{d:17184096e5,l:"2024年6月15日",c:["Java"],g:["InputStream","Stream"],e:`
<h2>1. 引言</h2>
<p>在Java中处理来自不同来源的输入数据时，我们有时会遇到需要将_InputStream_转换为_Stream<code>&lt;String&gt;</code>_的情况。</p>
<p>在本教程中，我们将探讨实现这种转换的不同方法。</p>
<h2>2. 使用BufferedReader和lines()方法转换</h2>
<p>将_InputStream_转换为_Stream<code>&lt;String&gt;</code>_的一种有效方式是使用_BufferedReader_及其_lines()_方法。</p>
<p>首先，我们将定义一个_byte_数组_bytes_，其中包含一系列文本行：</p>`,r:{minutes:2.62,words:786},t:"Java中将InputStream转换为Stream<String> | Baeldung",y:"a"}}],["/posts/baeldung/Archive/Convert%20Jackson%20JsonNode%20to%20Typed%20Collection.html",{loader:()=>a(()=>import("./Convert Jackson JsonNode to Typed Collection.html-BuettmqD.js"),__vite__mapDeps([1509,1])),meta:{d:1718496e6,l:"2024年6月16日",c:["Spring","Java"],g:["Jackson","JSON","Collection"],e:'\n<h3>2. 示例设置</h3>\n<p>在我们的代码示例中，我们将探索将JsonNode转换为List或Map对象的不同方法。让我们设置我们示例的基础构件。</p>\n<h4>2.1. 依赖性</h4>\n<p>首先，让我们在pom.xml文件中添加Jackson核心依赖性：</p>\n<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>`&lt;dependency&gt;`\n    `&lt;groupId&gt;`com.fasterxml.jackson.core`&lt;/groupId&gt;`\n    `&lt;artifactId&gt;`jackson-core`&lt;/artifactId&gt;`\n    `&lt;version&gt;`2.17.0`&lt;/version&gt;`\n`&lt;/dependency&gt;`\n</code></pre></div>',r:{minutes:5.21,words:1563},t:"Jackson JsonNode 转换为类型化集合 | Baeldung这篇文章是关于如何将Jackson的原始数据类型JsonNode转换为Java类型集合的。我们可以利用JsonNode本身来读取JSON，但将其转换为Java集合可能更有益处。Java集合比原始JSON数据提供的优势包括类型安全性、更快的处理速度以及更多类型特定的操作。",y:"a"}}],["/posts/baeldung/Archive/Convert%20a%20Queue%20to%20a%20List.html",{loader:()=>a(()=>import("./Convert a Queue to a List.html-i99DAqMq.js"),__vite__mapDeps([1510,1])),meta:{d:1718496e6,l:"2024年6月16日",c:["Java"],g:["队列","列表"],e:'\n<p>在本教程中，我们将学习如何在Java中将队列对象转换为列表。</p>\n<p>我们将解释几种流行的方法及其实现方式，并在每个部分结束时提供一个测试用例来测试相应的实现。</p>\n<p>在这一部分，我们将使用标准Java类和方法介绍不同的将队列转换为列表的方法。我们假设所有示例中的队列都不为null。</p>\n<h3>2.1 使用ArrayList构造器</h3>\n<p>ArrayList构造器提供了将队列转换为ArrayList的最简单和最常见的方法。</p>\n<p><strong>基本思想是将队列作为参数传递给ArrayList构造器</strong>：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>````` list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div>',r:{minutes:2.67,words:801},t:"Java中将队列转换为列表",y:"a"}}],["/posts/baeldung/Archive/Convert%20an%20Optional%20to%20an%20ArrayList%20in%20Java.html",{loader:()=>a(()=>import("./Convert an Optional to an ArrayList in Java.html-D6kCJPKO.js"),__vite__mapDeps([1511,1])),meta:{d:1718496e6,l:"2024年6月16日",c:["Java"],g:["Optional","ArrayList","Java 8","转换"],e:`
<h2>1. 引言</h2>
<p>Java 8引入了_Optional_类来表示一个可能存在或不存在的值。**它帮助我们避免_NullPointerException_并编写更富有表现力和可读的代码。**在想要将可选值作为列表处理的场景中，将_Optional_转换为_ArrayList_可能很有用。在本教程中，我们将探索在Java中将_Optional_转换为_ArrayList_的不同方法。</p>
<h2>2. 使用_ifPresent()_</h2>
<p>这种方法利用了_Optional_类提供的_ifPresent()_方法来处理值的存在或缺失。<strong>它允许我们仅在_Optional_包含值时执行一段代码，消除了显式空值检查的需要，提高了代码的可读性。</strong></p>`,r:{minutes:4.79,words:1437},t:"Java中将Optional转换为ArrayList的方法 | Baeldung",y:"a"}}],["/posts/baeldung/Archive/Converting%20Float%20ArrayList%20to%20Primitive%20Array%20in%20Java.html",{loader:()=>a(()=>import("./Converting Float ArrayList to Primitive Array in Java.html-B8OUgtmR.js"),__vite__mapDeps([1512,1])),meta:{d:17185824e5,l:"2024年6月17日",c:["Java","编程"],g:["ArrayList","原始类型数组","转换"],e:`
<p>概述</p>
<p>数据序列是任何项目和编程语言中不可或缺的一部分。在Java中，有两种方式来表示元素序列：集合和数组。</p>
<p>本教程将学习如何将包装类数组列表转换为原始类型数组。尽管这听起来是一个简单的任务，但Java API中的一些怪癖使得这个过程不那么直接。</p>
<p>简单For循环</p>
<p>进行这种转换的最简单方式是使用声明性风格的for循环：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ParameterizedTest</span>
<span class="token annotation punctuation">@MethodSource</span><span class="token punctuation">(</span><span class="token string">"floatListProvider"</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">givenListOfWrapperFloat_whenConvertToPrimitiveArray_thenGetCorrectResult</span><span class="token punctuation">(</span><span class="token class-name">List</span>\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Float</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\` floats<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span> actual <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">float</span><span class="token punctuation">[</span>floats<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> floats<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        actual<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> floats<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">compareSequences</span><span class="token punctuation">(</span>floats<span class="token punctuation">,</span> actual<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:4.85,words:1454},t:"Java中将Float型ArrayList转换为原始类型数组 | Baeldung",y:"a"}}],["/posts/baeldung/Archive/Converting%20Image%20to%20BufferedImage%20in%20Java.html",{loader:()=>a(()=>import("./Converting Image to BufferedImage in Java.html-DYcGJqFk.js"),__vite__mapDeps([1513,1])),meta:{d:17186688e5,l:"2024年6月18日",c:["Java","图像处理"],g:["BufferedImage","图像转换"],e:`
<p>在Java开发中，管理和操作图像是至关重要的。图像处理的核心能力之一是将各种图像格式转换为BufferedImage对象。</p>
<h2>1. 概述</h2>
<p>在本文中，我们将学习如何在Java中将图像转换为BufferedImage。</p>
<h2>2. 理解BufferedImage</h2>
<p>在深入探讨将Image转换为BufferedImage的复杂性之前，理解BufferedImage的基本概念至关重要。作为Java AWT（抽象窗口工具包）中Image类的子类，BufferedImage由于其多功能性和强大的功能，在图像处理中扮演着关键角色。</p>
<p>此外，BufferedImage的核心功能是为开发人员提供了直接访问图像数据的能力，使得可以执行包括像素操作、颜色空间转换和光栅操作在内的广泛操作。这种可访问性使得BufferedImage成为Java应用程序中不可或缺的工具，促进了从基本图像渲染到高级图像分析和操作的任务。</p>`,r:{minutes:2.88,words:864},t:"Java中将图像转换为BufferedImage",y:"a"}}],["/posts/baeldung/Archive/Converting%20short%20to%20byte%20%20%20in%20Java.html",{loader:()=>a(()=>import("./Converting short to byte   in Java.html-B49g6zrq.js"),__vite__mapDeps([1514,1])),meta:{d:1718496e6,l:"2024年6月16日",c:["Java","编程"],g:["Java NIO","ByteBuffer","DataOutputStream","位操作"],e:`
<p>将short值转换为byte[]数组是Java编程中的一项常见任务，特别是在处理二进制数据或网络通信时。</p>
<p>在本教程中，我们将探索实现这种转换的不同方法。</p>
<h3>2. 使用ByteBuffer类（Java NIO）</h3>
<p>Java NIO包提供了ByteBuffer类，它简化了将原始数据类型转换为字节数组的过程。让我们看看如何使用它将short值转换为byte[]数组：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">short</span> shortValue <span class="token operator">=</span> <span class="token number">12345</span><span class="token punctuation">;</span>
<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> expectedByteArray <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenShort_whenUsingByteBuffer_thenConvertToByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    buffer<span class="token punctuation">.</span><span class="token function">putShort</span><span class="token punctuation">(</span>shortValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> byteArray <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">assertArrayEquals</span><span class="token punctuation">(</span>expectedByteArray<span class="token punctuation">,</span> byteArray<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:4.98,words:1495},t:"Java中将short转换为byte[]的几种方法",y:"a"}}],["/posts/baeldung/Archive/Create%20HashMap%20with%20Character%20Count%20of%20a%20String%20in%20Java.html",{loader:()=>a(()=>import("./Create HashMap with Character Count of a String in Java.html-DE-RRQt0.js"),__vite__mapDeps([1515,1])),meta:{d:17185824e5,l:"2024年6月17日",c:["Java","编程"],g:["HashMap","字符计数","Java 8"],e:`
<h2>1. 引言</h2>
<p>在各种编程场景中，处理字符串中的字符计数是常见的。一种高效的方法是使用_HashMap_来存储字符串中每个字符的频率。</p>
<p><strong>在本教程中，我们将探讨如何在Java中创建一个包含给定字符串字符计数的_HashMap_。</strong></p>
<h2>2. 使用传统循环</h2>
<p>创建一个包含字符串字符计数的_HashMap_的最简单方法之一是使用传统循环。在这种方法中，我们遍历字符串中的每个字符，并相应地在_HashMap_中更新每个字符的计数。</p>
<p>让我们看看这如何实现：</p>
<p><code>String str = "abcaadcbcb";</code></p>`,r:{minutes:2.57,words:770},t:"在Java中创建包含字符串字符计数的HashMap | Baeldung",y:"a"}}],["/posts/baeldung/Archive/Create%20and%20Run%20Apache%20JMeter%20Test%20Scripts%20via%20Java%20Program.html",{loader:()=>a(()=>import("./Create and Run Apache JMeter Test Scripts via Java Program.html-D7-UfIfE.js"),__vite__mapDeps([1516,1])),meta:{d:17187552e5,l:"2024年6月19日",c:["Java","JMeter"],g:["性能测试","自动化测试"],e:`
<p>Apache JMeter是一个开源的基于Java的应用程序，旨在分析和衡量Web应用程序的性能。它允许测试人员模拟对服务器、网络或对象的重负载，以分析不同负载下的总体性能。JMeter提供了一个易于使用的GUI，用于定义、执行和查看各种负载测试的报告。</p>
<p>尽管JMeter提供了一个用户友好的GUI来创建和执行测试脚本，但在某些情况下，利用Java编程进行自动化可能更有益，特别是在持续集成和部署流程中。</p>
<p>在本教程中，我们将探讨如何使用Java以编程方式创建和执行Apache JMeter测试脚本，并提供一个实际示例来说明所涉及的步骤。</p>
<h2>2. <strong>设置环境</strong></h2>`,r:{minutes:7.54,words:2261},t:"通过Java程序创建并运行Apache JMeter测试脚本",y:"a"}}],["/posts/baeldung/Archive/Declare%20an%20Enum%20in%20an%20Inner%20Class%20in%20Java.html",{loader:()=>a(()=>import("./Declare an Enum in an Inner Class in Java.html-CkWfvyb2.js"),__vite__mapDeps([1517,1])),meta:{d:17183232e5,l:"2024年6月14日",c:["Java","Programming"],g:["Java Enums","Inner Classes"],e:`
<p>当我们使用Java进行编程时，枚举是一种方便的方式来定义一组固定的常量。然而，在Java 16之前的版本中，在内部类中创建枚举可能会引入一些复杂性和考虑因素。</p>
<p>在本教程中，我们将深入探讨Java 16之前内部类中静态类型的历史悠久限制，然后讨论Java 16及更高版本中这些规则的显著放宽。</p>
<p>在Java 16之前，Java语言规范（JLS）严格规定了内部类中静态类型的规则：</p>
<ul>
<li>嵌套的枚举类型隐式地是静态的，如JLS §8.9所述。</li>
<li>在非静态嵌套类型（内部类）中声明静态嵌套类型（包括枚举）是被禁止的，如JLS §8.1.3所述。</li>
</ul>`,r:{minutes:1.79,words:536},t:"在Java中声明内部类的枚举",y:"a"}}],["/posts/baeldung/Archive/Difference%20Between%20Casting%20to%20String%20and%20String.valueOf%20%20.html",{loader:()=>a(()=>import("./Difference Between Casting to String and String.valueOf  .html-YliaOj5q.js"),__vite__mapDeps([1518,1])),meta:{d:17186688e5,l:"2024年6月18日",c:["Java","Programming"],g:["Java String","String Conversion"],e:`
<p>在Java中操作字符串是一项基本任务。我们经常需要将其他数据类型转换为字符串。实现这一目标的两种常见方法是将对象类型转换为String和使用String.valueOf()方法。它们在表面上可能看起来相似，但两种方法之间的一些差异可能会影响我们代码的行为。</p>
<p>在这个快速教程中，让我们讨论它们之间的区别。</p>
<p>首先，让我们看一个例子。假设我们将一个字符串值分配给一个类型为Object的变量：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token string">"Baeldung is awesome!"</span><span class="token punctuation">;</span>

</code></pre></div>`,r:{minutes:3.94,words:1181},t:"Java中字符串转换：类型转换与String.valueOf()方法的区别",y:"a"}}],["/posts/baeldung/Archive/Difference%20Between%20Iterator.forEachRemaining%20%20%20and%20Iterable.forEach%20%20.html",{loader:()=>a(()=>import("./Difference Between Iterator.forEachRemaining   and Iterable.forEach  .html-DJFUGqd0.js"),__vite__mapDeps([1519,1])),meta:{d:17183232e5,l:"2024年6月14日",c:["Java"],g:["Iterator","Iterable"],e:`
<h2>1. 引言</h2>
<p>_Iterator_和_Iterable_接口是Java中处理集合的基本构造。实际上，每个接口都提供了遍历元素的方法，但它们有不同的目的和使用场景。</p>
<p><strong>在本教程中，我们将深入探讨_Iterator.forEachRemaining()_和_Iterable.forEach()_之间的差异，以理解它们独特的功能。</strong></p>
<h2>2. _Iterator.forEachRemaining()_方法</h2>
<p>_Iterator_接口提供了一种顺序遍历集合元素的方式。_Iterator_接口中的_forEachRemaining()_方法是在Java 8中引入的。</p>`,r:{minutes:3.15,words:946},t:"Java中Iterator.forEachRemaining()与Iterable.forEach()的区别 | Baeldung",y:"a"}}],["/posts/baeldung/Archive/Difference%20Between%20Lombok%20%20AllArgsConstructor%20%20%20RequiredArgsConstructor%20and%20%20NoArgConstructor.html",{loader:()=>a(()=>import("./Difference Between Lombok  AllArgsConstructor   RequiredArgsConstructor and  NoArgConstructor.html-BDDt5g35.js"),__vite__mapDeps([1520,1])),meta:{d:17185824e5,l:"2024年6月17日",c:["Java","Lombok"],g:["Lombok","Annotations","Constructors"],e:'\n<h2>1. 概述</h2>\n<p>Lombok 项目通过提供注解自动生成常用的代码，从而减少了Java应用程序中的样板代码。</p>\n<p>在本教程中，我们将探讨这个库提供的三种构造函数注解之间的区别。</p>\n<h2>2. 设置</h2>\n<p>为了突出这些差异，让我们首先将 <em>lombok</em> 添加到我们的依赖中：</p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`org.projectlombok`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`lombok`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`1.18.30`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>`provided`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n</code></pre></div>',r:{minutes:3.9,words:1169},t:"Lombok @AllArgsConstructor, @RequiredArgsConstructor 和 @NoArgsConstructor 的区别 | Baeldung",y:"a"}}],["/posts/baeldung/Archive/Difference%20Between%20Optional.of%20%20%20and%20Optional.ofNullable%20%20%20in%20Java.html",{loader:()=>a(()=>import("./Difference Between Optional.of   and Optional.ofNullable   in Java.html-DDVi2MIb.js"),__vite__mapDeps([1521,1])),meta:{d:17184096e5,l:"2024年6月15日",c:["Java","Optional"],g:["Java","Optional.of()","Optional.ofNullable()"],e:`
<h2>1. 概述</h2>
<p>在Java中，一个引用可能指向内存中的一个对象，也可能不指向任何对象，换句话说，一个引用可以是_null_。因此，这可能导致抛出一个_NullPointerException_。</p>
<p>为了解决这个问题，Java 8引入了_Optional_类。<strong>将一个引用包装在_Optional_中可以让我们更好地表达一个值是否存在的可能性。</strong> 此外，我们可以利用_Optional_类上的多种工具方法，如_isPresent()<em>，以避免运行时抛出_NullPointerException</em>。</p>
<p>我们可以使用静态工厂方法_Optional.of()_和_Optional.ofNullable()<em>来为给定的引用获取一个_Optional</em>。但是，我们应该使用哪一个呢？在本教程中，我们将探讨这些方法之间的区别，并了解何时使用哪一个。</p>`,r:{minutes:2.41,words:724},t:"Java中Optional.of()与Optional.ofNullable()的区别 | Baeldung",y:"a"}}],["/posts/baeldung/Archive/Disable%20Logging%20From%20a%20Specific%20Class%20in%20Logback.html",{loader:()=>a(()=>import("./Disable Logging From a Specific Class in Logback.html-Ck3iC3T9.js"),__vite__mapDeps([1522,1])),meta:{d:17184096e5,l:"2024年6月15日",c:["Logback","Logging"],g:["Logback","Logging","Configuration"],e:`
<p>日志记录是任何应用程序的关键组成部分，它提供了对应用程序行为和健康状况的洞察。然而，过度的日志记录可能会使输出变得杂乱无章，特别是当详细的日志来自特定类时，可能会掩盖有用信息。</p>
<p>在本教程中，我们将探讨如何在Logback中禁用特定类的日志记录。</p>
<p>在Logback中禁用特定类的日志记录在多种场景下都很有用：</p>
<ul>
<li>减少日志量：减少日志量可以帮助我们专注于相关信息，并降低存储/处理成本。</li>
<li>安全性：一些类可能会无意中记录敏感信息；使它们静音可以降低这种风险。</li>
<li>性能：过度的日志记录可能会影响性能；禁用详细记录器可以帮助保持应用程序的最佳性能。</li>
</ul>`,r:{minutes:2.83,words:848},t:"在Logback中禁用特定类的日志记录",y:"a"}}],["/posts/baeldung/Archive/Download%20File%20from%20S3%20Given%20a%20URL.html",{loader:()=>a(()=>import("./Download File from S3 Given a URL.html-frkacwGH.js"),__vite__mapDeps([1523,1])),meta:{d:17186688e5,l:"2024年6月18日",c:["Java","AWS"],g:["S3","SDK","文件下载"],e:`
<p>在当今的软件领域，与云存储服务如Amazon Simple Storage Service (S3)的交互已成为许多应用程序的基本方面。一个常见的需求是使用提供的URL从S3下载文件。</p>
<p>在本文中，我们将探讨使用Java、Spring Boot和Java的AWS SDK来实现这一目标的简化方法。</p>
<h2>2. 设置</h2>
<p>首先，我们需要配置我们的AWS凭据以访问S3存储桶。这可以通过几种方式完成。对于开发目的，我们可以在_application.properties_文件中设置我们的凭据：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>aws.accessKeyId=\`&lt;你的访问密钥ID&gt;\`
aws.secretKey=\`&lt;你的密钥&gt;\`
aws.region=\`&lt;你的区域&gt;\`
</code></pre></div>`,r:{minutes:4.07,words:1222},t:"使用Java从S3 URL下载文件",y:"a"}}],["/posts/baeldung/Archive/Exploring%20Complex%20Number%20Arithmetic%20Operations%20in%20Java.html",{loader:()=>a(()=>import("./Exploring Complex Number Arithmetic Operations in Java.html-DUqijzqD.js"),__vite__mapDeps([1524,1])),meta:{d:17187552e5,l:"2024年6月19日",c:["Java","数学"],g:["复数","运算"],e:`
<p>在这个教程中，我们将检查复数的算术运算。具体来说，我们将探讨如何在Java中对两个复数进行加法、减法、乘法和除法。</p>
<h2>2. 什么是复数？</h2>
<p>复数使用实部和虚部的组合来表示。它们通常表示为a+bi，其中a和b是实数，i代表虚数单位，相当于-1的平方根。在正式的数学符号中，a是复数的实部，而bi项是虚部。尽管复数最初可能让新手感到困惑，但它们在各种实际应用中发挥着关键作用，例如物理学和数学，包括量子力学、信号处理和经济学等领域。</p>
<p>像实数一样，我们可以执行加法、减法、乘法和除法等算术运算。对复数进行算术运算由于实部和虚部的组合而引入了复杂性。然而，每种运算都有特定的公式，这些公式简化了运算并确保了准确的结果。</p>`,r:{minutes:4.97,words:1491},t:"探索Java中的复数算术运算",y:"a"}}],["/posts/baeldung/Archive/Extract%20Text%20From%20a%20HTML%20Tag%20with%20Regex.html",{loader:()=>a(()=>import("./Extract Text From a HTML Tag with Regex.html-Cu0GxEBu.js"),__vite__mapDeps([1525,1])),meta:{d:17184096e5,l:"2024年6月15日",c:["Java","HTML"],g:["正则表达式","文本提取"],e:`
<p>当在Java中处理HTML内容时，从HTML标签中提取特定文本是常见的需求。尽管通常不推荐使用正则表达式来解析HTML，因为它的结构复杂，但在某些简单任务中，这有时是足够的。</p>
<p>在本教程中，我们将看到如何使用Java中的正则表达式从HTML标签中提取文本。</p>
<h2>2. 使用Pattern和Matcher类</h2>
<p>Java提供了来自java.util.regex的Pattern和Matcher类，允许我们定义并应用正则表达式来从字符串中提取文本。以下是一个使用正则表达式从指定HTML标签中提取文本的示例：</p>
<p>在这里，我们首先定义了HTML内容，表示为htmlContent，其中包含带有<code>&lt;b&gt;</code>标签的HTML。此外，我们指定了标签名tagName为“b”，以从<code>&lt;b&gt;</code>标签中提取文本。</p>`,r:{minutes:1.99,words:596},t:"使用Java正则表达式从HTML标签提取文本",y:"a"}}],["/posts/baeldung/Archive/Extracting%20Text%20Between%20Parentheses%20in%20Java.html",{loader:()=>a(()=>import("./Extracting Text Between Parentheses in Java.html-DvqcMD9q.js"),__vite__mapDeps([1526,1])),meta:{d:17182368e5,l:"2024年6月13日",c:["Java","正则表达式"],g:["Java","字符串处理","正则表达式"],e:`
<h2>1. 概述</h2>
<p>在Java编程中，有许多场景需要我们提取括号内包含的文本。理解如何检索括号之间的文本是一项重要技能。</p>
<p>在本教程中，我们将探索实现这一目标的不同方法，重点关注正则表达式和一些流行的外部库。</p>
<h2>2. 问题介绍</h2>
<p>当我们的输入只包含一对括号时，我们可以使用两个replaceAll()方法调用来提取它们之间的内容：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> myString <span class="token operator">=</span> <span class="token string">"a b c (d e f) x y z"</span><span class="token punctuation">;</span>

<span class="token class-name">String</span> result <span class="token operator">=</span> myString<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">".*[(]"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"[)].*"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"d e f"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,r:{minutes:4.43,words:1328},t:"Java中提取括号内文本的方法 | Baeldung",y:"a"}}],["/posts/baeldung/Archive/Fault%20Tolerance%20in%20Java%20Using%20Failsafe.html",{loader:()=>a(()=>import("./Fault Tolerance in Java Using Failsafe.html-PsprNKxb.js"),__vite__mapDeps([1527,1])),meta:{d:17184096e5,l:"2024年6月15日",c:["Java"],g:["Failsafe","容错"],e:`
<p>在这篇文章中，我们将探索Failsafe库，并看到如何将其集成到我们的代码中，使其对故障情况更加有弹性。</p>
<h2>2. 什么是容错？</h2>
<p>无论我们多么精心构建应用程序，总会有出错的方式。通常，这些是我们无法控制的——例如，调用一个不可用的远程服务。因此，我们必须构建能够容忍这些故障并为用户提供最佳体验的应用程序。</p>
<p>我们可以根据不同的情况以许多不同的方式对这些故障做出反应。例如，如果我们正在调用一个我们知道会有间歇性中断的远程服务，我们可以重试并希望调用能够成功。或者我们可以尝试调用提供相同功能的另一个服务。</p>
<p>还有方法可以结构化我们的代码以避免这些情况。例如，限制对同一远程服务的并发调用数量将减少其负载。</p>`,r:{minutes:11.93,words:3578},t:"Java中使用Failsafe实现容错",y:"a"}}],["/posts/baeldung/Archive/Find%20the%20Date%20of%20Easter%20Sunday%20for%20the%20Given%20Year.html",{loader:()=>a(()=>import("./Find the Date of Easter Sunday for the Given Year.html-Bt96HilX.js"),__vite__mapDeps([1528,1])),meta:{d:17186688e5,l:"2024年6月18日",c:["Java","Algorithm"],g:["Easter","Algorithm","Java"],e:`
<p>在本教程中，我们将理解为什么复活节的日期计算起来很复杂。然后，我们将用Java实现三种算法来计算它：高斯算法、Butcher-Meeus算法和Conway算法。</p>
<p>复活节是一个庆祝耶稣基督从死里复活的节日。复活节的最初时间与犹太逾越节有关，因为耶稣与他的门徒共进的最后一餐是逾越节的晚餐。然而，在最初的几个世纪里，每个基督教社区都可以选择一个日期来庆祝它，导致了一些争议。<strong>公元325年的尼西亚会议最终标准化了复活节的定义：复活节是春分之后满月之后的第一个星期日。</strong></p>
<p>计算复活节的日期是具有挑战性的，因为它依赖于月亮和太阳日历，而月亮周期与太阳周期不匹配。因此，数学算法在确定复活节的日期时非常有用。</p>`,r:{minutes:4.81,words:1444},t:"如何计算特定年份的复活节日期",y:"a"}}],["/posts/baeldung/Archive/Find%20the%20Length%20of%20the%20Longest%20Symmetric%20Substring.html",{loader:()=>a(()=>import("./Find the Length of the Longest Symmetric Substring.html-DPZKusvW.js"),__vite__mapDeps([1529,1])),meta:{d:17186688e5,l:"2024年6月18日",c:["Java","Algorithm"],g:["Symmetric Substring","String Manipulation"],e:`<hr>
<h1>寻找最长对称子串的长度 | Baeldung</h1>
<h2>1. 引言</h2>
<p>确定最长对称子串的长度是字符串操作任务中的一个常见挑战。</p>
<p><strong>在本教程中，我们将讨论两种高效的Java方法来解决这个问题。</strong></p>
<h2>2. 理解对称子串</h2>
<p>对称子串是一个正读和反读都相同的子串。例如，在字符串 "abba" 中，最长的对称子串是 "abba"，它正读和反读都是相同的，最大长度为4。</p>
<h2>3. 对称子串扩展方法</h2>
<p>这种方法使用滑动窗口技术来高效地识别给定字符串中的最长对称子串。本质上，算法通过迭代字符串，从中间开始扩展，同时确保对称性。</p>`,r:{minutes:2.86,words:859},t:"寻找最长对称子串的长度 | Baeldung",y:"a"}}],["/posts/baeldung/Archive/Finding%20Minimum%20and%20Maximum%20in%20a%202D%20Array.html",{loader:()=>a(()=>import("./Finding Minimum and Maximum in a 2D Array.html-SK8tyhlH.js"),__vite__mapDeps([1530,1])),meta:{d:17183232e5,l:"2024年6月14日",c:["Java","编程"],g:["数组","算法"],e:`
<p>在本教程中，我们将讨论使用Java在二维数组中寻找最小和最大值的两种技术。二维数组是一种像网格一样的元素排列。它是一个数组的数组，其中每个内部数组代表网格中的一行。</p>
<p>我们首先将检查使用嵌套_for_循环的传统方法。接下来，我们将探索使用_Stream_ API来完成相同的任务。两种方法都有优缺点。最佳选择取决于我们的需求。</p>
<h2>2. 使用嵌套For循环识别极值</h2>
<p>我们将使用的第一个方法是嵌套_for_循环。这种技术提供了一种清晰直观的方法来迭代二维数组中的每个元素。<strong>我们通过迭代数组的每一行和列来实现这一点</strong>。当访问每个元素时，将其与我们迄今为止遇到的当前最小值和最大值进行比较：</p>`,r:{minutes:3.3,words:990},t:"在二维数组中寻找最小和最大值 | Baeldung",y:"a"}}],["/posts/baeldung/Archive/Finding%20the%20Index%20of%20the%20Smallest%20Element%20in%20an%20Array.html",{loader:()=>a(()=>import("./Finding the Index of the Smallest Element in an Array.html-D-8P7NOU.js"),__vite__mapDeps([1531,1])),meta:{d:17185824e5,l:"2024年6月17日",c:["Java","编程"],g:["数组","最小元素","索引"],e:`
<h2>1. 概述</h2>
<p>数组操作是必不可少的，我们可能在任何应用程序中都需要它们。有时，它们隐藏在像集合API这样更便利的接口后面。然而，这是我们应该在职业生涯早期就掌握的基本知识。</p>
<p>在本教程中，我们将学习如何找到数组中最小元素的索引。我们将讨论如何做到这一点，无论元素的类型如何，但为了简单起见，我们将使用一个整数数组。</p>
<h2>2. 简单迭代</h2>
<p>最简单的解决方案往往是最好的。<strong>这是出于几个原因：它更容易实现、更改和理解。</strong> 让我们看看如何使用基本的_for_循环找到最小元素的索引：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ParameterizedTest</span>
<span class="token annotation punctuation">@MethodSource</span><span class="token punctuation">(</span><span class="token string">"primitiveProvider"</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">givenArray_whenUsingForLoop_thenGetCorrectResult</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> expectedIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> minValue <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> minIndex <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i \`<span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> minValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            minValue <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">assertThat</span><span class="token punctuation">(</span>minIndex<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span>expectedIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:5.1,words:1529},t:"在数组中找到最小元素的索引 | Baeldung",y:"a"}}],["/posts/baeldung/Archive/Finding%20the%20Next%20Higher%20Number%20With%20the%20Same%20Digits.html",{loader:()=>a(()=>import("./Finding the Next Higher Number With the Same Digits.html-CBwMVXcv.js"),__vite__mapDeps([1532,1])),meta:{d:17183232e5,l:"2024年6月14日",c:["Java"],g:["Algorithm","Number"],e:`
<h2>1. 引言</h2>
<p>在本教程中，我们将学习如何在Java中找到与原始数字具有相同数字集的下一个更高数字。这个问题可以通过使用排列、排序和双指针方法的概念来解决。</p>
<h2>2. 问题陈述</h2>
<p>给定一个正整数，我们需要找到使用完全相同的数字集的下一个更高数字。例如，如果输入是123，我们的目标是重新排列其数字以形成具有相同数字的下一个更高数字。在这种情况下，下一个更高数字将是132。</p>
<p>如果输入是654或444，那么我们返回-1以表示无法找到下一个更高数字。</p>
<h2>3. 使用排列</h2>
<p>在这种方法中，我们将利用排列来找到与输入数字相同的数字集的下一个更大数字。<strong>我们将生成输入数字数字的所有可能排列，并将它们添加到_TreeSet_中以确保唯一性和排序。</strong></p>`,r:{minutes:6.21,words:1862},t:"寻找具有相同数字的下一个更高数字 | Baeldung",y:"a"}}],["/posts/baeldung/Archive/Finding%20the%20Redirected%20URL%20of%20a%20URL%20in%20Java.html",{loader:()=>a(()=>import("./Finding the Redirected URL of a URL in Java.html-DlimE9Ly.js"),__vite__mapDeps([1533,1])),meta:{d:17186688e5,l:"2024年6月18日",c:["Java","Web Development"],g:["URL Redirection","Java","HttpURLConnection","HttpClient"],e:`
<h2>1. 引言</h2>
<p>理解URL是如何重定向的对于网络开发和网络编程任务至关重要，例如处理HTTP重定向、验证URL重定向或提取最终目的地URL。在Java中，我们可以使用_HttpURLConnection_或_HttpClient_库来实现这一功能。</p>
<p><strong>在本教程中，我们将探讨在Java中查找给定URL重定向后的URL的不同方法。</strong></p>
<h2>2. 使用_HttpURLConnection_</h2>
<p>Java提供了_HttpURLConnection_类，它允许我们发出HTTP请求并处理响应。此外，我们可以使用_HttpURLConnection_来查找给定URL的重定向后的URL。以下是如何操作的示例：</p>`,r:{minutes:2.42,words:726},t:"在Java中查找URL重定向后的URL",y:"a"}}],["/posts/baeldung/Archive/Finding%20the%20Second%20Smallest%20Integer%20in%20an%20Array%20in%20Java.html",{loader:()=>a(()=>import("./Finding the Second Smallest Integer in an Array in Java.html-BJv2S2c-.js"),__vite__mapDeps([1534,1])),meta:{d:17184096e5,l:"2024年6月15日",c:["Java","Algorithm"],g:["Array","Second Smallest"],e:`
<h2>1. 引言</h2>
<p>在本教程中，我们将探索使用Java在数组中找到第二小元素的不同方法。</p>
<h2>2. 问题陈述</h2>
<p>给定一个整数数组，任务是在数组中找到第二小的元素。<strong>这个值代表数组中存在的第二低的整数，假设至少有两个不同的元素。</strong></p>
<p>数组中无法找到第二小元素有两种情况：</p>
<ul>
<li>如果输入数组为空（长度为0）或只包含一个元素，那么就无法识别出第二小的元素。</li>
<li>如果数组中的所有元素都相同，那么就不存在不同的第二小元素。</li>
</ul>
<p>在这些情况下，我们将返回 <em>-1</em> 以表示在给定的数组中没有找到第二小的数字。</p>`,r:{minutes:6.06,words:1818},t:"在Java中找到数组中的第二小整数",y:"a"}}],["/posts/baeldung/Archive/Finding%20the%20nth%20Last%20Occurrence%20of%20char%20in%20String.html",{loader:()=>a(()=>import("./Finding the nth Last Occurrence of char in String.html-9NDi48ES.js"),__vite__mapDeps([1535,1])),meta:{d:17186688e5,l:"2024年6月18日",c:["Java","编程"],g:["文本处理","Java 流"],e:`
<p>在各种文本处理任务中，我们经常需要在给定的字符串中找到特定字符的第n个最后一次出现。此外，这一操作在解析日志、分析文本数据或从字符串中提取相关信息等任务中特别有用。</p>
<p>在本教程中，我们将探索使用Java在字符串中查找字符的第n个最后一次出现的多种技术。</p>
<h2>2. 使用传统循环</h2>
<p>找到字符串中字符的第n个最后一次出现的一个传统方法是通过迭代循环。在这种方法中，我们从字符串的末尾开始迭代，直到达到所需位置，计算目标字符的出现次数。</p>
<p>让我们看看这如何实现：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"Welcome to Baeldung"</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> target <span class="token operator">=</span> <span class="token char">'e'</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> expectedIndex <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenStringAndCharAndN_whenFindingNthLastOccurrence_thenCorrectIndexReturned</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            count<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                index <span class="token operator">=</span> i<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span>expectedIndex<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.79,words:836},t:"在Java中查找字符串中字符的第n个最后一次出现",y:"a"}}],["/posts/baeldung/Archive/Fix%20Spring%20Boot%20H2%20JdbcSQLSyntaxErrorException%20%20Table%20not%20found%20.html",{loader:()=>a(()=>import("./Fix Spring Boot H2 JdbcSQLSyntaxErrorException  Table not found .html-BG_TtgjV.js"),__vite__mapDeps([1536,1])),meta:{d:1718496e6,l:"2024年6月16日",c:["Spring Boot","H2 Database"],g:["SQL Syntax Error","Table Not Found"],e:`
<h3>1. 引言</h3>
<p>H2提供了一个简单的内存数据库和轻量级数据库，Spring Boot可以自动配置，使开发人员能够轻松测试数据访问逻辑。</p>
<p>通常，正如其名称所示，_org.h2.jdbc.JdbcSQLSyntaxErrorException_被抛出以表示与SQL语法相关的错误。因此，消息“找不到表”表示H2未能找到指定的表。</p>
<p>因此，在本简短教程中，我们将学习如何产生并修复H2异常：<em>JdbcSQLSyntaxErrorException: 找不到表</em>。</p>
<h3>2. 实践示例</h3>
<p>现在我们知道了异常背后的原因，让我们看看如何在实践中重现它。</p>`,r:{minutes:2.95,words:884},t:"修复Spring Boot H2 JdbcSQLSyntaxErrorException “找不到表” | Baeldung",y:"a"}}],["/posts/baeldung/Archive/Full%20and%20Partial%20Text%20Search%20in%20MongoDB.html",{loader:()=>a(()=>import("./Full and Partial Text Search in MongoDB.html-DmNNePlr.js"),__vite__mapDeps([1537,1])),meta:{d:1718496e6,l:"2024年6月16日",c:["MongoDB","Java"],g:["Full-Text Search","Partial-Text Search"],e:`
<p>全文搜索和部分文本搜索的需求在开发数据库应用程序时经常出现。它们还应该支持全文和部分文本匹配，以使这些搜索更加用户友好。为此，MongoDB提供了几种使用文本搜索查找相关文档的方法。</p>
<p>在本教程中，我们将探索MongoDB中的文本搜索，其特性，如何使用它，以及如何充分利用它。</p>
<p>尽管文本搜索查询是一个强大的工具，但它们需要特定的设置。为了实现这一点，我们需要在集合上创建一个文本索引。</p>
<p><strong>索引就像是特殊的文件夹，只保存集合中每个文档的一点点信息</strong>。换句话说，它们与实际的文档本身是分开的。此外，MongoDB允许用户创建不同类型的索引。</p>`,r:{minutes:4.11,words:1232},t:"MongoDB中的全文和部分文本搜索",y:"a"}}],["/posts/baeldung/Archive/Generate%20Java%20Classes%20From%20Avro%20Schemas%20Using%20Gradle.html",{loader:()=>a(()=>import("./Generate Java Classes From Avro Schemas Using Gradle.html-DKznh3UU.js"),__vite__mapDeps([1538,1])),meta:{d:17185824e5,l:"2024年6月17日",c:["Java","Gradle"],g:["Apache Avro","代码生成"],e:`
<p>在这个教程中，我们将学习如何从Apache Avro模式生成Java类。
首先，我们将熟悉两种方法：使用现有的Gradle插件和为构建脚本实现自定义任务。然后，我们将确定每种方法的优缺点，并了解它们最适合的场景。</p>
<h2>2. 开始使用Apache Avro</h2>
<p>我们的主要焦点是从Apache Avro模式生成Java类。在深入代码生成的细节之前，让我们简要回顾一下基本概念。</p>
<h3>2.1. Apache Avro模式定义</h3>
<p>首先，我们准备所需的依赖项来处理Avro格式。<strong>我们将需要_apache.avro_模块进行数据序列化和反序列化，因此我们将在_libs.version.toml_和_build.gradle_文件中添加它：</strong></p>`,r:{minutes:2.21,words:663},t:"使用Gradle从Avro模式生成Java类",y:"a"}}],["/posts/baeldung/Archive/Get%202%20s%20Complement%20of%20a%20Number%20in%20Java.html",{loader:()=>a(()=>import("./Get 2 s Complement of a Number in Java.html-CnGUFguA.js"),__vite__mapDeps([1539,1])),meta:{d:17186688e5,l:"2024年6月18日",c:["Java","计算机科学"],g:["二进制","补码"],e:`
<ol>
<li>引言</li>
</ol>
<p>二进制补码是计算机科学中的一个基本概念，特别是在处理有符号二进制数时。它允许在固定数量的位内表示正整数和负整数。</p>
<p>在本教程中，我们将学习如何在Java中计算一个数的二进制补码。</p>
<ol start="2">
<li>什么是二进制补码？</li>
</ol>
<p>在计算机系统中，值是通过一系列由0和1组成的二进制数字来表示的。存在不同的方式在二进制表示中编码这些值，例如符号-数值表示法、1的补码、2的补码等。</p>
<p><strong>二进制补码表示法是一种非常高效的方式来存储和操作有符号数</strong>。在这里，最高有效位（MSB）表示数字的符号，0表示正数，1表示负数。这种表示简化了二进制数的加法和减法操作。</p>`,r:{minutes:4.9,words:1470},t:"在Java中计算一个数的二进制补码",y:"a"}}],["/posts/baeldung/Archive/Get%20JSON%20Content%20as%20Object%20Using%20MockMVC.html",{loader:()=>a(()=>import("./Get JSON Content as Object Using MockMVC.html-tWTp1GVs.js"),__vite__mapDeps([1540,1])),meta:{d:17185824e5,l:"2024年6月17日",c:["Spring","Spring Boot"],g:["MockMVC","JSON"],e:`
<h2>1. 概述</h2>
<p>在测试我们的REST端点时，有时我们希望获取响应并将其转换为对象，以便进一步检查和验证。众所周知，一种方法是使用如RestAssured等库在不将响应转换为对象的情况下验证响应。</p>
<p>在本教程中，我们将探索使用MockMVC和Spring Boot获取JSON内容为对象的几种方法。</p>
<h2>2. 示例设置</h2>
<p>在我们深入研究之前，让我们创建一个我们将用于测试的简单REST端点。</p>
<p>让我们从依赖设置开始。我们将在_pom.xml_中添加_spring-boot-starter-web_依赖，以便我们可以创建REST端点：</p>`,r:{minutes:4.56,words:1367},t:"使用MockMVC获取JSON内容为对象 | Baeldung",y:"a"}}],["/posts/baeldung/Archive/Get%20Nextval%20From%20Sequence%20With%20Spring%20JPA.html",{loader:()=>a(()=>import("./Get Nextval From Sequence With Spring JPA.html-DbAIte4P.js"),__vite__mapDeps([1541,1])),meta:{d:17185824e5,l:"2024年6月17日",c:["Spring JPA","Database"],g:["Sequence","Nextval"],e:`
<p>序列是数据库中生成唯一ID的数字生成器，以避免重复条目。Spring JPA提供了在大多数情况下自动使用序列的方法。然而，在某些特定场景中，我们可能需要在持久化实体之前手动检索下一个序列值。例如，我们可能想在将发票详细信息保存到数据库之前生成一个唯一的发票号码。</p>
<p>在本教程中，我们将探讨使用Spring Data JPA从数据库序列获取下一个值的几种方法。</p>
<h2>2. 设置项目依赖</h2>
<p>在我们深入使用Spring Data JPA中的序列之前，让我们确保我们的项目正确设置。我们需要在我们的Maven <em>pom.xml</em> 文件中添加Spring Data JPA和PostgreSQL驱动依赖，并在数据库中创建序列。</p>`,r:{minutes:5.14,words:1541},t:"使用Spring JPA从序列获取下一个值",y:"a"}}],["/posts/baeldung/Archive/Get%20the%20First%20and%20the%20Last%20Elements%20From%20an%20Array%20in%20Java.html",{loader:()=>a(()=>import("./Get the First and the Last Elements From an Array in Java.html-DwtZoqt6.js"),__vite__mapDeps([1542,1])),meta:{d:1718963696e3,e:`<p>由于网页链接解析失败，我无法获取到网页的具体内容，包括标题、日期、分类(category)和标签(tag)。请您检查链接的有效性，并确保网络连接正常。如果需要翻译其他内容或有其他问题，欢迎随时告知。---
date: {2024-06-15}
category:</p>
<ul>
<li>Java</li>
<li>编程
tag:</li>
<li>数组</li>
<li>Java基础</li>
</ul>
<hr>
<h1>在Java中获取数组的第一个和最后一个元素 | Baeldung</h1>
<p>OK</p>
`,r:{minutes:.37,words:111},t:"在Java中获取数组的第一个和最后一个元素 | Baeldung",y:"a"}}],["/posts/baeldung/Archive/Get%20the%20Indices%20of%20an%20Array%20After%20Sorting%20in%20Java.html",{loader:()=>a(()=>import("./Get the Indices of an Array After Sorting in Java.html-CcOByGos.js"),__vite__mapDeps([1543,1])),meta:{d:17183232e5,l:"2024年6月14日",c:["Java","编程"],g:["数组排序","索引"],e:`
<h2>1. 引言</h2>
<p>在Java中对数组进行排序是一项常见操作，但有时我们还需要知道排序后元素的原始索引。这些信息对于某些算法和应用至关重要。</p>
<p><strong>在本教程中，我们将展示在Java中实现这一点的不同方法。</strong></p>
<h2>2. 问题描述</h2>
<p>对数组进行排序是一项基本操作，但在某些场景中，我们不仅需要按顺序排列值；我们还需要保留这些值的原始位置。当我们想要知道排序后元素的顺序如何变化时，这一点尤其重要。让我们考虑以下数组：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>int[] array = {40, 10, 20, 30};
</code></pre></div>`,r:{minutes:2.98,words:893},t:"Java中数组排序后获取索引的方法 | Baeldung",y:"a"}}],["/posts/baeldung/Archive/Get%20the%20Position%20of%20Key%20Value%20in%20LinkedHashMap%20Using%20Its%20Key.html",{loader:()=>a(()=>import("./Get the Position of Key Value in LinkedHashMap Using Its Key.html-n9TTUes6.js"),__vite__mapDeps([1544,1])),meta:{d:1718496e6,l:"2024年6月16日",c:["Java","LinkedHashMap"],g:["Java","LinkedHashMap","编程技巧"],e:`
<h2>1. 引言</h2>
<p><em>LinkedHashMap</em> 类提供了一种方便的方式来保持键值对的插入顺序，同时还提供了 <em>HashMap</em> 的功能。</p>
<p><strong>在本教程中，我们将探讨几种在 <em>LinkedHashMap</em> 中检索位置（索引）的方法。</strong></p>
<h2>2. <em>LinkedHashMap</em> 概览</h2>
<p><em>LinkedHashMap</em> 是一个 Java 类，它扩展了 <em>HashMap</em> 并维护了一个插入顺序的条目链表。这意味着 <em>LinkedHashMap</em> 中元素的顺序是可预测的，并反映了键的插入顺序。</p>`,r:{minutes:2.45,words:735},t:"使用其键在LinkedHashMap中获取键/值的位置 | Baeldung",y:"a"}}],["/posts/baeldung/Archive/Get%20the%20Response%20Body%20in%20Spring%20Boot%20Filter.html",{loader:()=>a(()=>import("./Get the Response Body in Spring Boot Filter.html-DAJFG2GX.js"),__vite__mapDeps([1545,1])),meta:{d:17187552e5,l:"2024年6月19日",c:["Spring Boot","Java"],g:["Spring Boot","Filter","Response Body"],e:`
<p>无论你是刚开始学习还是拥有多年经验，<strong>Spring Boot</strong> 是构建新应用程序的绝佳选择，它让一切变得简单。</p>
<p>Jmix增强了Spring Boot开发者的能力，允许他们构建和交付<strong>全栈Web****应用程序</strong>，而无需涉足前端技术。它使你能够从简单的Web GUI CRUD应用程序到复杂的企业解决方案，消除了前端/后端分离及相关安全问题。</p>
<p><strong>Jmix平台</strong>包括一个构建在<strong>Spring Boot, JPA, 和 Vaadin</strong>之上的框架，并带有Jmix Studio，<strong>一个IntelliJ IDEA插件</strong>，配备了一套开发者生产力工具。该平台还提供了<strong>现成的</strong>插件，用于报告生成、BPM、地图等，你可以在Jmix应用程序中使用它们，或者作为单独的服务。所有技术都是相互连接的，使单个Java开发者能够以整个团队的水平执行任务，<strong>入门所需的知识最少</strong>。</p>`,r:{minutes:4.74,words:1423},t:"在Spring Boot Filter中获取响应体",y:"a"}}],["/posts/baeldung/Archive/Git%20Integration%20in%20IntelliJ%20IDEA.html",{loader:()=>a(()=>import("./Git Integration in IntelliJ IDEA.html-SSQ9NTy6.js"),__vite__mapDeps([1546,1])),meta:{d:16780608e5,l:"2023年3月6日",c:["Development Tools","Version Control"],g:["Git","IntelliJ IDEA"],e:`
<h2>1. 引言</h2>
<p>IntelliJ IDEA 提供了对 Git 版本控制系统的广泛支持。在本教程中，我们将查看 IDE 提供的一些功能。</p>
<p>由于 IntelliJ 定期更新，我们不会详细介绍每一个功能。相反，我们将提供一个概览。本教程的截图基于 IntelliJ IDEA 2023.3.6 版本，使用深色模式，我们将使用 Baeldung GitHub 仓库来演示示例。</p>
<h2>2. Git 配置</h2>
<p>在 IntelliJ 中使用 Git 之前，我们需要在系统中安装它，并在 IDE 的设置中配置路径：</p>
<p>这个设置告诉 IntelliJ 使用我们系统中安装的 Git 可执行文件。</p>`,r:{minutes:5.57,words:1672},t:"IntelliJ IDEA 中的 Git 集成",y:"a"}}],["/posts/baeldung/Archive/Handling%20Nulls%20in%20ArrayList.addAll%20%20.html",{loader:()=>a(()=>import("./Handling Nulls in ArrayList.addAll  .html-Yiw2jLJY.js"),__vite__mapDeps([1547,1])),meta:{d:17185824e5,l:"2024年6月17日",c:["Java","Collections"],g:["ArrayList","Null Handling"],e:'\n<p>熟练使用集合API是Java开发者最关键的技能之一。本教程将重点介绍_ArrayList_及其_addAll()_方法。</p>\n<p>尽管_addAll()_是向目标_ArrayList_添加一系列元素的最便捷方式，但它在处理空值时表现不佳。</p>\n<h3>空值和addAll()</h3>\n<p>正如前面所述，addAll()方法在处理空值时表现不佳。如果我们传递一个空引用，它将抛出_NullPointerException_：</p>\n<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ParameterizedTest</span>\n<span class="token annotation punctuation">@NullSource</span>\n<span class="token keyword">void</span> <span class="token function">givenNull_whenAddAll_thenAddThrowsNPE</span><span class="token punctuation">(</span><span class="token class-name">List</span>`````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>````````````` list<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">ArrayList</span>`````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>````````````` strings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertThatExceptionOfType</span><span class="token punctuation">(</span><span class="token class-name">NullPointerException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">isThrownBy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> strings<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:3.17,words:951},t:"ArrayList中addAll()方法处理空值 | Baeldung### 概述",y:"a"}}],["/posts/baeldung/Archive/How%20to%20Check%20if%20Optional%20Contains%20Value%20Equal%20to%20T%20Object.html",{loader:()=>a(()=>import("./How to Check if Optional Contains Value Equal to T Object.html-3OuO2mkx.js"),__vite__mapDeps([1548,1])),meta:{d:17184096e5,l:"2024年6月15日",c:["Java","Optional"],g:["Java 8","Optional","equals","get","map"],e:`
<h2>1. 概述</h2>
<p><em>Optional</em> 是Java 8引入的一个类，属于_java.util_包。它作为一个容器，可能包含也可能不包含一个非空值。<em>Optional_可以帮助我们更有效地处理_null_值，并避免代码中的_NullPointerException</em>。</p>
<p>当我们使用_Optional_时，一个常见的任务是检查它是否包含一个等于特定对象的值。在本教程中，我们将探讨执行此检查的各种技术。</p>
<h2>2. 问题的介绍</h2>
<p>首先，让我们澄清等值检查的要求。假设我们有两个对象；一个是类型为_T_的非空_valueOfT_对象，另一个是一个类型为_Optional<code>&lt;T&gt;</code>_的_opt_实例。</p>`,r:{minutes:3.61,words:1082},t:"如何检查Optional是否包含等于T对象的值 | Baeldung",y:"a"}}],["/posts/baeldung/Archive/How%20to%20Compile%20Java%20to%20WASM%20%20Web%20Assembly%20.html",{loader:()=>a(()=>import("./How to Compile Java to WASM  Web Assembly .html-CJVw1Q6J.js"),__vite__mapDeps([1549,1])),meta:{d:16935264e5,l:"2023年9月1日",c:["Web Development"],g:["WebAssembly","Java"],e:`
<h2>1. 概述</h2>
<p>在快节奏的Web开发世界中，WASM（WebAssembly）的引入为开发者带来了新的可能性。它允许他们在Web平台上利用编译语言的速度和适应性。</p>
<p>在本教程中，我们将探讨将Java编译为WebAssembly的过程，并研究可用的工具和方法。</p>
<h2>2. WASM（WebAssembly）是什么</h2>
<p>WebAssembly是一种低级的二进制指令格式，可以在现代Web浏览器中运行。它允许开发者在Web浏览器中以接近原生速度运行用C、C++等语言编写的代码。WebAssembly旨在与JavaScript一起运行，允许两者协同工作。</p>`,r:{minutes:3.29,words:988},t:"如何将Java编译为WASM（Web Assembly） | Baeldung",y:"a"}}],["/posts/baeldung/Archive/How%20to%20Convert%20Between%20java.sql.Timestamp%20and%20ZonedDateTime%20in%20Java.html",{loader:()=>a(()=>import("./How to Convert Between java.sql.Timestamp and ZonedDateTime in Java.html-G5JrvzY_.js"),__vite__mapDeps([1550,1])),meta:{d:1718496e6,l:"2024年6月16日",c:["Java","编程"],g:["java.sql.Timestamp","ZonedDateTime"],e:`
<p>处理Java中的时间戳是一项常见任务，它使我们能够更有效地操作和显示日期和时间信息，特别是在我们处理数据库或全球应用程序时。用于处理时间戳和时区的两个基本类是java.sql.Timestamp和ZonedDateTime。</p>
<p>在本教程中，我们将探讨在java.sql.Timestamp和ZonedDateTime之间进行转换的多种方法。</p>
<h3>2.1. 使用Instant类</h3>
<p>Instant类可以被看作是UTC时区中的一个单一时刻。如果我们将时间想象成一条线，Instant就代表线上的一个点。</p>
<p>在内部，Instant类只是计算相对于1970年1月1日标准Unix纪元时间00:00:00的秒数和纳秒数。这个时间点由0秒和0纳秒表示，其他一切都是从这个时间点的偏移量。</p>`,r:{minutes:4.95,words:1484},t:"如何在Java中转换java.sql.Timestamp和ZonedDateTime",y:"a"}}],["/posts/baeldung/Archive/How%20to%20Convert%20XML%20to%20PDF.html",{loader:()=>a(()=>import("./How to Convert XML to PDF.html-BuOax8Od.js"),__vite__mapDeps([1551,1])),meta:{d:17183232e5,l:"2024年6月14日",c:["Java","XML"],g:["XML to PDF","Apache FOP","iText"],e:`
<h2>1. 概览</h2>
<p>Java提供了多种库和API来处理XML和PDF文档。在Java中将XML转换为PDF涉及解析XML数据，应用样式和格式化，并生成PDF输出。</p>
<p>本文探讨了在Java中将XML转换为PDF的不同方法和库。</p>
<h2>2. 理解转换过程</h2>
<p>在讨论实现细节之前，让我们强调将XML转换为PDF的基本步骤。这个过程通常包括两个主要步骤：</p>
<ol>
<li><strong>第一步是XML解析，分析XML内容并提取其结构和文本数据。</strong> 在Java中，开发人员可以使用各种XML解析库，如DOM（文档对象模型）、SAX（简单API for XML）和StAX（流API for XML）。</li>
<li><strong>第二步涉及PDF生成。</strong> 这一步包括创建PDF组件，如段落、表格、图像和其他元素。然后根据XML文档中定义的结构对这些组件进行组织和格式化。</li>
</ol>`,r:{minutes:4.92,words:1475},t:"如何在Java中将XML转换为PDF | Baeldung",y:"a"}}],["/posts/baeldung/Archive/How%20to%20Convert%20org.w3c.dom.Document%20to%20String%20in%20Java.html",{loader:()=>a(()=>import("./How to Convert org.w3c.dom.Document to String in Java.html-CZ297rg1.js"),__vite__mapDeps([1552,1])),meta:{d:17182368e5,l:"2024年6月13日",c:["Java","XML"],g:["XML转换","DOM","Java"],e:`
<p>在Java中处理XML时，我们经常需要将一个_org.w3c.dom.Document_实例转换为_String_。<strong>通常我们可能出于多种原因需要这样做，例如序列化、记录日志以及处理HTTP请求或响应。</strong></p>
<p>在这个快速教程中，我们将看到如何将一个_Document_转换为_String_。要了解更多关于Java中使用XML的信息，请查看我们关于XML的全面系列。</p>
<h2>创建一个简单的文档</h2>
<p>本教程的示例将集中在一个描述一些水果的简单XML文档上：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>\\&lt;fruit\\&gt;
    \\&lt;name\\&gt;Apple\\&lt;/name\\&gt;
    \\&lt;color\\&gt;Red\\&lt;/color\\&gt;
    \\&lt;weight unit="grams"\\&gt;150\\&lt;/weight\\&gt;
    \\&lt;sweetness\\&gt;7\\&lt;/sweetness\\&gt;
\\&lt;/fruit\\&gt;
</code></pre></div>`,r:{minutes:3.68,words:1103},t:"在Java中将org.w3c.dom.Document转换为String的方法 | Baeldung## 概述",y:"a"}}],["/posts/baeldung/Archive/How%20to%20Fix%20EOFException%20in%20Java.html",{loader:()=>a(()=>import("./How to Fix EOFException in Java.html-BFdG6FuM.js"),__vite__mapDeps([1553,1])),meta:{d:17186688e5,l:"2024年6月18日",c:["Java","异常处理"],g:["EOFException","Java异常","文件读取"],e:`
<h2><strong>1. 概述</strong></h2>
<p>在本教程中，我们将讨论Java中的_java.io.EOFException_，这是一种在处理文件时可能遇到的特殊的_IOException_。</p>
<p>我们将首先理解这种异常的原因，然后讨论如何解决它。</p>
<h2><strong>2. EOFException是如何发生的？</strong></h2>
<p>在深入细节之前，让我们首先了解这个异常的含义。</p>
<p>_EOF_在_EOFException_中代表“文件结束”。它表示程序在读取文件内容时已经到达了文件的末尾。</p>
<p>**通常情况下，当使用输入流对象读取数据时，会抛出此异常。**例如，<em>DataInputStream_类提供了_readChar()</em>、<em>readInt()</em>、_readDouble()<em>等方法，用于从流中读取值。在这种情况下，当流的末尾到达时，会抛出_EOFException</em>。</p>`,r:{minutes:2.74,words:823},t:"如何在Java中解决EOFException问题 | Baeldung",y:"a"}}],["/posts/baeldung/Archive/How%20to%20Implement%20Elvis%20Operator%20in%20Java%208.html",{loader:()=>a(()=>import("./How to Implement Elvis Operator in Java 8.html-ZO5kQpH6.js"),__vite__mapDeps([1554,1])),meta:{d:1718496e6,l:"2024年6月16日",c:["Java","Programming"],g:["Java 8","Elvis Operator"],e:`
<h2>1. 引言</h2>
<p>在Java 8中，并没有像Groovy或Kotlin中内置的Elvis操作符。然而，我们可以使用方法引用和三元运算符来实现我们自己的Elvis操作符。在本教程中，我们将探讨如何在Java 8中实现Elvis操作符。</p>
<h2>2. 理解Elvis操作符</h2>
<p>Elvis操作符通常在Groovy和Kotlin等语言中使用。它由<code>?:</code>符号表示，用于在原始值为<code>null</code>时提供一个默认值。</p>
<p><strong>操作符评估其左侧的表达式，如果它不是<code>null</code>，则返回它。如果左侧的表达式评估为<code>null</code>，则返回右侧的表达式。</strong></p>`,r:{minutes:4.5,words:1350},t:"如何在Java 8中实现Elvis操作符 | Baeldung",y:"a"}}],["/posts/baeldung/Archive/How%20to%20Intercept%20a%20Request%20and%20Add%20Headers%20in%20WebFlux.html",{loader:()=>a(()=>import("./How to Intercept a Request and Add Headers in WebFlux.html-B47Uu0NH.js"),__vite__mapDeps([1555,1])),meta:{d:17187552e5,l:"2024年6月19日",c:["Spring WebFlux","Reactive Programming"],g:["WebFlux","Interceptor","Headers"],e:'\n<p>拦截器，也被称为过滤器，是 Spring 的一个特性，允许我们拦截客户端请求。这使我们能够在控制器处理它或向客户端返回响应之前检查和转换请求。</p>\n<p>在本教程中，我们将讨论使用 WebFlux 框架拦截客户端请求并添加自定义头部的各种方式。我们首先探索如何为特定端点执行此操作。然后，我们将确定拦截所有传入请求的方法。</p>\n<p>我们将使用以下 spring-boot-starter-webflux Maven 依赖项，以支持 Spring 框架的响应式 Web 功能：</p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`org.springframework.boot`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`spring-boot-starter-webflux`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`3.1.5`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n</code></pre></div>',r:{minutes:4.53,words:1358},t:"如何在 WebFlux 中拦截请求并添加头部信息 | Baeldung",y:"a"}}],["/posts/baeldung/Archive/How%20to%20Iterate%20a%20List%20of%20Maps%20in%20Java.html",{loader:()=>a(()=>import("./How to Iterate a List of Maps in Java.html-BTsP908a.js"),__vite__mapDeps([1556,1])),meta:{d:1718496e6,l:"2024年6月16日",c:["Java"],g:["集合","迭代"],e:`
<h2>1. 引言</h2>
<p>在Java编程中，处理集合是一个基本任务。列表（List）和映射（Map）是两种常用的集合类型，有时我们可能需要处理一个列表的映射。无论是处理数据、操作配置还是涉及复杂数据结构的任何其他任务，高效地迭代列表映射都是至关重要的。</p>
<p>在本教程中，我们将探讨在Java中迭代列表映射的各种技术。</p>
<h2>2. 理解列表映射</h2>
<p>在我们探索迭代技术之前，让我们先理解列表映射的概念。</p>
<p>列表映射由多个映射对象组成，每个映射都能够保存键值对，其中每个映射中的键是唯一的。<strong>这种结构提供了显著的灵活性，并在表示表格数据、配置或任何需要键到值映射的数据中找到常见应用。</strong></p>`,r:{minutes:2.76,words:827},t:"Java中迭代列表映射的方法 | Baeldung",y:"a"}}],["/posts/baeldung/Archive/How%20to%20Make%20Multiple%20REST%20Calls%20in%20CompletableFuture.html",{loader:()=>a(()=>import("./How to Make Multiple REST Calls in CompletableFuture.html-CvZQCmRT.js"),__vite__mapDeps([1557,1])),meta:{d:17184096e5,l:"2024年6月15日",c:["Java","Spring Boot"],g:["CompletableFuture","REST API","并行处理"],e:`
<p>现在，新版的《REST With Spring - "REST With Spring Boot"》终于发布了，当前价格将在6月22日之前有效，之后将永久上涨50美元。</p>
<p><strong>&gt;获取访问权限</strong></p>
<p><strong>现在</strong></p>
<h2>1. 引言</h2>
<p>在创建软件功能时，日常活动之一是从不同来源检索数据并在响应中聚合。在微服务中，这些来源通常是外部REST API。</p>
<p>在本教程中，我们将使用Java的CompletableFuture高效地从多个外部REST API并行检索数据。</p>
<h2>2. 为什么在REST调用中使用并行性</h2>`,r:{minutes:6.47,words:1941},t:"如何在CompletableFuture中进行多个REST调用 | Baeldung",y:"a"}}],["/posts/baeldung/Archive/How%20to%20Set%20JVM%20Arguments%20in%20IntelliJ%20IDEA%20.html",{loader:()=>a(()=>import("./How to Set JVM Arguments in IntelliJ IDEA .html-CTd_ATBA.js"),__vite__mapDeps([1558,1])),meta:{d:17184096e5,l:"2024年6月15日",c:["Software Development"],g:["IntelliJ IDEA","JVM"],e:`
<p>IntelliJ IDEA是开发各种编程语言软件中最受欢迎和功能强大的IDE之一。</p>
<p>在本教程中，<strong>我们将学习如何在IntelliJ IDEA中配置JVM参数</strong>，允许我们为开发和调试调整JVM。</p>
<h2>2. JVM参数基础</h2>
<p>我们可以根据应用程序的特定需求选择JVM参数。<strong>正确的JVM参数可以</strong> <strong>提高应用程序的性能和稳定性</strong>，并使调试应用程序更加容易。</p>
<h3>2.1. JVM参数类型</h3>
<p>有几种类别的JVM参数：</p>
<ul>
<li><strong>内存分配</strong> - 例如 <em>-Xms</em>（初始堆大小）或 <em>-Xmx</em>（最大堆大小）</li>
<li><strong>垃圾回收</strong> - 例如 <em>-XX:+UseConcMarkSweepGC</em>（启用并发标记-清除垃圾回收器）或 <em>-XX:+UseParallelGC</em>（启用并行垃圾回收器）</li>
<li><strong>调试</strong> - 例如 <em>-XX:+HeapDumpOnOutOfMemoryError</em>（当发生OutOfMemoryError时进行堆转储）或 <em>-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005</em> 用于通过JDWP在5005端口进行远程调试。</li>
<li><strong>系统属性</strong> - 例如 <em>-Djava.version</em>（Java版本）或 <em>-Dcustom.property=value</em>（定义自定义属性及其值）。</li>
</ul>`,r:{minutes:4.11,words:1232},t:"如何在IntelliJ IDEA中设置JVM参数 | Baeldung",y:"a"}}],["/posts/baeldung/Archive/How%20to%20Specify%20the%20logback.xml%20Location.html",{loader:()=>a(()=>import("./How to Specify the logback.xml Location.html-CrkS9DW6.js"),__vite__mapDeps([1559,1])),meta:{d:17186688e5,l:"2024年6月18日",c:["Java","Spring Boot"],g:["Logback","Configuration"],e:`<hr>
<h1>如何指定logback.xml的位置 | Baeldung</h1>
<p>无论你是刚开始还是拥有多年经验，Spring Boot 都是构建新应用程序的极佳选择，使用起来非常方便。</p>
<p>Jmix 增强了 Spring Boot 开发者的能力，允许他们构建和交付全栈 Web 应用程序，而无需涉足前端技术。它使你能够从简单的 Web GUI CRUD 应用程序到复杂的企业解决方案，消除了前端/后端分离及其相关的安全问题。</p>
<p>Jmix 平台包括一个构建在 Spring Boot、JPA 和 Vaadin 之上的框架，并附带 Jmix Studio，这是一个 IntelliJ IDEA 插件，配备了一整套开发者生产力工具。该平台还提供了即开即用的报告生成、BPM、地图等插件，你可以在 Jmix 应用程序中使用它们，或者作为独立服务使用。所有技术都是相互连接的，使单个 Java 开发者能够以整个团队的水平进行工作，<strong>所需的起步知识最少</strong>。</p>`,r:{minutes:4.69,words:1406},t:"如何指定logback.xml的位置 | Baeldung",y:"a"}}],["/posts/baeldung/Archive/How%20to%20Test%20a%20Spring%20AOP%20Aspect.html",{loader:()=>a(()=>import("./How to Test a Spring AOP Aspect.html-CSMXdz6V.js"),__vite__mapDeps([1560,1])),meta:{d:17185824e5,l:"2024年6月17日",c:["Spring AOP","Testing"],g:["AOP","Testing","Spring Boot"],e:`
<p>现在，新版的《REST With Spring - "REST With Spring Boot"》终于发布了，当前价格将在6月22日之前有效，之后将永久上涨50美元。</p>
<p><strong>&gt;获取访问权限</strong></p>
<p><strong>现在</strong></p>
<h2>1. 概述</h2>
<p>面向切面编程（AOP）通过将跨领域关注点分离到一个基本单元，称为切面，从而改善程序设计，这个单元与主应用程序逻辑分开。Spring AOP是一个框架，它帮助我们轻松实现切面。</p>
<p>AOP切面与其他软件组件没有什么不同。它们需要不同的测试来验证它们的正确性。在本教程中，我们将学习如何对Spring AOP切面进行单元测试和集成测试。</p>`,r:{minutes:5.43,words:1630},t:"如何测试Spring AOP切面 | Baeldung",y:"a"}}],["/posts/baeldung/Archive/How%20to%20Unit%20Test%20an%20ExecutorService%20Without%20Using%20Thread.sleep%20%20.html",{loader:()=>a(()=>import("./How to Unit Test an ExecutorService Without Using Thread.sleep  .html-BZibCon2.js"),__vite__mapDeps([1561,1])),meta:{d:17185824e5,l:"2024年6月17日",c:["Java","Concurrency"],g:["ExecutorService","Unit Testing"],e:`
<h2>1. 概述</h2>
<p>一个_ExecutorService_对象在后台运行任务。单元测试在另一个线程上运行的任务是具有挑战性的。<strong>父线程必须等待任务结束才能断言其结果</strong>。</p>
<p>此外，解决这个问题的一个方法是使用_Thread.sleep()_方法。这个方法会阻塞父线程一段时间。然而，如果任务超出了_sleep()_上设置的时间，单元测试会在任务完成之前结束并失败。</p>
<p>在本教程中，我们将学习如何在不使用_Thread.sleep()_方法的情况下单元测试一个_ExecutorService_实例。</p>
<h2>2. 创建一个_Runnable_对象</h2>`,r:{minutes:4.65,words:1396},t:"如何在不使用Thread.sleep()的情况下单元测试ExecutorService | Baeldung",y:"a"}}],["/posts/baeldung/Archive/How%20to%20Use%20Pair%20With%20Java%20PriorityQueue.html",{loader:()=>a(()=>import("./How to Use Pair With Java PriorityQueue.html-D-qnKPZe.js"),__vite__mapDeps([1562,1])),meta:{d:17185824e5,l:"2024年6月17日",c:["Java","PriorityQueue"],g:["Java","PriorityQueue","Pair","Comparator"],e:`
<p>优先队列是最强大数据结构之一。它在企业应用中不常见，但我们经常在编码挑战和算法实现中使用它。</p>
<p>在本教程中，我们将学习如何使用比较器（Comparators）与优先队列（PriorityQueues）以及如何改变这些队列中的排序顺序。然后我们将检查一个更通用的例子，使用自定义类，并了解如何将类似的逻辑应用到Pair类。</p>
<p>对于Pair类，我们将使用Apache Commons的实现。然而，有多种选项可供选择，我们可以选择最适合我们需求的那个。</p>
<p>首先，让我们讨论数据结构本身。这个结构的主要超能力是在将元素推入队列时保持它们的顺序。</p>
<p>然而，像其他队列一样，它不提供访问队列内元素的API。我们只能访问队列前面的元素。</p>`,r:{minutes:5.72,words:1715},t:"如何在Java中使用Pair与PriorityQueue | Baeldung",y:"a"}}],["/posts/baeldung/Archive/Implement%20Update%20Or%20Insert%20in%20Spring%20Data%20JPA.html",{loader:()=>a(()=>import("./Implement Update Or Insert in Spring Data JPA.html-9bCPWOWq.js"),__vite__mapDeps([1563,1])),meta:{d:17186688e5,l:"2024年6月18日",c:["Spring Data JPA","Update-Or-Insert"],g:["Spring Boot","REST API","Spring Security","Spring Data JPA"],e:`<hr>
<h1>在Spring Data JPA中实现更新或插入操作</h1>
<ul>
<li>
<p>从这里开始</p>
</li>
<li>
<p>课程▼▲</p>
</li>
<li>
<p><strong>Spring Boot与REST</strong><br>
用于构建生产级API的Spring的标准参考（几天后价格将上涨50美元）</p>
</li>
<li>
<p><strong>学习Spring Security▼▲</strong><br>
如果您今天使用Java工作，这是唯一的Spring Security教育</p>
</li>
<li>
<p><strong>学习Spring Security Core</strong><br>
专注于Spring Security 6的核心</p>
</li>
<li>
<p><strong>学习Spring Security OAuth</strong><br>
专注于Spring Security 6中的新OAuth2栈</p>
</li>
<li>
<p><strong>学习Spring</strong><br>
从无经验到实际构建东西</p>
</li>
<li>
<p><strong>学习Spring Data JPA</strong><br>
Spring Data JPA持久化的完整指南</p>
</li>
<li>
<p>指南▼▲</p>
</li>
<li>
<p><strong>持久化</strong><br>
Spring持久化指南</p>
</li>
<li>
<p><strong>REST</strong><br>
使用Spring构建REST API的指南</p>
</li>
<li>
<p><strong>安全</strong><br>
Spring Security指南</p>
</li>
<li>
<p>关于▼▲</p>
</li>
<li>
<p><strong>完整存档</strong><br>
网站上所有文章的高级概述。</p>
</li>
<li>
<p><strong>Baeldung电子书</strong><br>
发现我们所有的电子书</p>
</li>
<li>
<p><strong>关于Baeldung</strong><br>
关于Baeldung。</p>
</li>
<li>
<p><strong>为Baeldung写作</strong><br>
成为网站上的作者。</p>
</li>
<li>
<p>RSS</p>
</li>
<li>
<p>搜索---
date: 2024-06-18
category:</p>
<ul>
<li>Spring Data JPA</li>
<li>Update-Or-Insert
tag:</li>
<li>Spring Boot</li>
<li>REST API</li>
<li>Spring Security</li>
<li>Spring Data JPA
head:</li>
<li>
<ul>
<li>meta</li>
<li>name: keywords
content: Spring Data JPA, Update or Insert, JPA, Spring Boot, REST API, 持久化</li>
</ul>
</li>
</ul>
</li>
</ul>`,r:{minutes:1.7,words:509},t:"在Spring Data JPA中实现更新或插入操作",y:"a"}}],["/posts/baeldung/Archive/Implement%20the%20Builder%20Pattern%20in%20Java%208.html",{loader:()=>a(()=>import("./Implement the Builder Pattern in Java 8.html-2iyGAMgG.js"),__vite__mapDeps([1564,1])),meta:{d:17186688e5,l:"2024年6月18日",c:["Java","设计模式"],g:["Builder模式","Java 8"],e:`
<h2>1. 引言</h2>
<p>在软件开发的旅程中，我们经常遇到创建具有众多属性的对象的场景，这可能令人生畏。构造函数的混乱使得我们的代码可读性降低。这正是建造者模式大放异彩的地方。<strong>建造者模式是一种创建型设计模式，它将复杂对象的构建与其表示分离，提供了一种更干净、更灵活的对象创建方法。</strong></p>
<h2>2. 建造者模式的优势</h2>
<p>在我们深入编码之前，让我们快速回顾一下使用建造者模式的优势：</p>
<ul>
<li>灵活性 - 通过将构建过程与实际对象表示解耦，建造者模式允许我们以不同的配置创建对象，而不会在我们的代码库中充斥着多个构造函数或设置器</li>
<li>可读性 - 建造者模式提供了流畅的接口，使我们的代码更易于阅读；这使我们和其他开发人员能够一目了然地理解复杂对象的构建过程</li>
<li>不可变性 - 建造者可以通过在构建完成后创建不可变对象来强制执行不可变性；这确保了线程安全性并防止了意外的修改</li>
</ul>`,r:{minutes:4.94,words:1481},t:"Java 8中实现建造者模式 | Baeldung",y:"a"}}],["/posts/baeldung/Archive/Inheritance%20vs.%20Composition%20in%20JPA.html",{loader:()=>a(()=>import("./Inheritance vs. Composition in JPA.html-u8krXeCP.js"),__vite__mapDeps([1565,1])),meta:{d:1718496e6,l:"2024年6月16日",c:["JPA","数据库"],g:["继承","组合"],e:`
<h2>1. 引言</h2>
<p>继承和组合是面向对象编程（OOP）中的两个基本概念，我们同样可以在JPA中利用它们进行数据建模。在JPA中，继承和组合都是用于建模实体之间关系的技术，但它们代表了不同类型的关系。在本教程中，我们将探讨这两种方法及其含义。</p>
<h2>2.1. 单表继承（STI）</h2>
<p>单表继承（STI）涉及将所有子类映射到单个数据库表中。通过使用鉴别器列来区分子类实例，这简化了模式管理和查询执行。</p>
<p>我们首先使用@Entity注解定义_Employee_实体类作为超类。接下来，我们将继承策略设置为InheritanceType.SINGLE_TABLE，以便将所有子类映射到同一个数据库表。</p>`,r:{minutes:3.35,words:1005},t:"JPA中的继承与组合",y:"a"}}],["/posts/baeldung/Archive/Install%20Java%20on%20macOS.html",{loader:()=>a(()=>import("./Install Java on macOS.html-ta1ZQ0Hj.js"),__vite__mapDeps([1566,1])),meta:{d:17053632e5,l:"2024年1月16日",c:["Java","macOS"],g:["Java安装","macOS"],e:`<hr>
<h1>在macOS上安装Java</h1>
<p>Java是由Oracle拥有的一种编程语言，最初由Sun Microsystems在1995年开发。在企业中，Web开发以及开发高度可扩展的解决方案时，Java仍然是首选的开发语言。</p>
<p>Oracle提供了两种Java版本：Oracle JDK和OpenJDK。Oracle JDK是商业产品，而OpenJDK是开源替代品。</p>
<p>在这个简短的教程中，我们将讨论在macOS上安装Java的方法。以我们的例子，我们将通过DMG包安装Oracle JDK，并通过Homebrew包管理器安装OpenJDK。</p>
<h2>2. 通过DMG包手动安装</h2>`,r:{minutes:3.43,words:1028},t:"在macOS上安装Java",y:"a"}}],["/posts/baeldung/Archive/Intro%20to%20Apache%20Commons%20Configuration%20Project.html",{loader:()=>a(()=>import("./Intro to Apache Commons Configuration Project.html-UZYm1U0G.js"),__vite__mapDeps([1567,1])),meta:{d:17185824e5,l:"2024年6月17日",c:["Java","Apache Commons"],g:["Apache Commons Configuration","Java"],e:`
<ol>
<li>概述</li>
</ol>
<p>在部署时，我们可能需要向应用程序提供一些配置。这些配置可能来自多个外部来源。</p>
<p>Apache Commons Configuration 提供了一种统一的方法来管理来自不同来源的配置。</p>
<p>在本教程中，我们将探讨 Apache Commons Configuration 如何帮助我们配置应用程序。</p>
<ol start="2">
<li>Apache Commons Configuration 简介</li>
</ol>
<p>Apache Commons Configuration <strong>为 Java 应用程序提供了一个接口，用于访问和使用来自不同来源的配置数据</strong>。通过配置构建器，<strong>它提供了对单值和多值特性的类型化访问</strong>。</p>`,r:{minutes:5.14,words:1543},t:"Apache Commons Configuration 项目入门",y:"a"}}],["/posts/baeldung/Archive/Intro%20to%20the%20Apache%20Commons%20Compress%20Project.html",{loader:()=>a(()=>import("./Intro to the Apache Commons Compress Project.html-vRKAaChG.js"),__vite__mapDeps([1568,1])),meta:{d:17187552e5,l:"2024年6月19日",c:["Apache Commons Compress","Java"],g:["Java","Compression","Archiving"],e:`
<p>在本教程中，我们将学习如何使用 Apache Commons Compress 来压缩、归档和提取文件。我们还将了解其支持的格式以及一些限制。</p>
<h2>2. Apache Commons Compress 是什么</h2>
<p><strong>Apache Commons Compress 是一个库，它为最广泛使用的压缩和归档格式创建了一个标准接口。</strong> 它从无处不在的 TAR、ZIP 和 GZIP 到不太知名但同样常用的格式，如 BZIP2、XZ、LZMA 和 Snappy。</p>
<h3>2.1. 压缩器和归档器之间的区别</h3>
<p><strong>归档器（例如 TAR）将目录结构捆绑到一个单一文件中，而压缩器接收一个字节流并使其变小，节省空间。</strong> 有些格式（如 ZIP）可以充当归档器和压缩器，但库中将其视为归档器。</p>`,r:{minutes:7.53,words:2258},t:"Apache Commons Compress 项目简介",y:"a"}}],["/posts/baeldung/Archive/Introduction%20to%20Brave.html",{loader:()=>a(()=>import("./Introduction to Brave.html-LwuQ08Dv.js"),__vite__mapDeps([1569,1])),meta:{d:17187552e5,l:"2024年6月19日",c:["Java","Spring"],g:["Brave","Zipkin","分布式追踪"],e:`
<p>在现代软件开发中，微服务架构非常流行，因此，跨多个服务跟踪和分析请求流的能力至关重要。正因如此，分布式追踪作为一种关键工具出现，为我们的系统性能和行为提供了洞察。</p>
<p>在本教程中，我们将介绍Brave，这是Java生态系统中一个流行的分布式追踪工具库。</p>
<h2>2. 分布式追踪的理解</h2>
<p>分布式追踪是一种用于监控和排查由相互连接的服务组成的复杂分布式系统的方法。在这些系统中，请求可能会经过多个服务，每个服务都负责执行特定的任务。因此，没有使用一些专用工具，跟踪请求的旅程可能会变得具有挑战性。</p>
<p>在探索分布式追踪之前，我们必须定义两个关键概念：追踪和跨度。一个追踪代表一个外部请求，由一组跨度组成。一个跨度代表一个操作；其关键属性是操作名称、开始时间和结束时间。一个跨度可以有一个或多个子跨度，代表嵌套操作。</p>`,r:{minutes:6.6,words:1980},t:"Brave简介",y:"a"}}],["/posts/baeldung/Archive/Introduction%20to%20DuckDB.html",{loader:()=>a(()=>import("./Introduction to DuckDB.html-BAhuuF5p.js"),__vite__mapDeps([1570,1])),meta:{d:17187552e5,l:"2024年6月19日",c:["Database","Java"],g:["DuckDB","SQL","CSV","JSON"],e:`
<ol>
<li>概览</li>
</ol>
<p>在本教程中，我们将学习一个名为DuckDB的分析型关系数据库。我们将探索它的优势，并了解它如何成为分析任务的高效解决方案。然后，我们将介绍安装过程和一些基本操作。</p>
<ol start="2">
<li>DuckDB是什么？</li>
</ol>
<p><strong>DuckDB是一个主要设计用于数据分析的内存分析关系数据库。</strong> 由于其列存储特性，即将每个列的数据分别存储，因此被认为是分析数据库。相比之下，传统关系数据库使用基于行的存储，按行存储数据。</p>
<p>DuckDB的优势包括：</p>
<ul>
<li>快速查询——DuckDB利用列向量化查询执行引擎，优化了批量数据查询。</li>
<li>SQL兼容性——DuckDB支持标准SQL查询，例如聚合和窗口函数，非常适合熟悉SQL的数据分析人员。</li>
<li>快速部署——DuckDB外部依赖性很小，并且可以在应用程序进程内运行，无需单独的数据库实例，使得部署和集成变得简单。</li>
<li>免费——DuckDB是一个开源项目，对所有人免费开放。其全部源代码在GitHub上可供探索和贡献。</li>
</ul>`,r:{minutes:6.01,words:1803},t:"DuckDB数据库简介",y:"a"}}],["/posts/baeldung/Archive/Introduction%20to%20JFreeChart.html",{loader:()=>a(()=>import("./Introduction to JFreeChart.html-DmusnwPq.js"),__vite__mapDeps([1571,1])),meta:{d:17187552e5,l:"2024年6月19日",c:["编程","Java"],g:["JFreeChart","图表库"],e:`
<h2>1. 概览</h2>
<p>在本教程中，我们将了解如何使用JFreeChart，这是一个全面的Java库，用于创建各种图表。我们可以使用它将图形数据表示集成到Swing应用程序中。它还包括一个JavaFX的独立扩展。</p>
<p>我们将从基础开始，涵盖设置和图表创建，并尝试几种不同类型的图表。</p>
<h2>2. 创建我们的第一个图表</h2>
<p>JFreeChart允许我们创建折线图、条形图、饼图、散点图、时间序列图、直方图等。它还可以将不同的图表组合到一个视图中。</p>
<h3>2.1. 设置依赖项</h3>
<p>要开始使用，我们需要在我们的pom.xml文件中添加jfreechart构件：</p>`,r:{minutes:4.09,words:1226},t:"JFreeChart入门指南",y:"a"}}],["/posts/baeldung/Archive/Introduction%20to%20Java%2022.html",{loader:()=>a(()=>import("./Introduction to Java 22.html-DtwgttzB.js"),__vite__mapDeps([1572,1])),meta:{d:17185824e5,l:"2024年6月17日",c:["Java","Programming"],g:["Java 22","JEP"],e:`
<p>在本教程中，我们将深入探讨最新的 Java 版本，Java 22，它现在已经普遍可用。</p>
<h2>2. Java 语言更新</h2>
<p>让我们来谈谈作为这个版本一部分的 Java 语言的所有新变化。</p>
<h3>2.1. 未命名变量和模式 - JEP 456</h3>
<p>我们经常在代码中定义临时变量或模式变量，这些变量在代码中保持未使用。这往往是由于语言限制，移除它们是被禁止的或会引入副作用。异常、switch 模式和 Lambda 表达式是我们在某个作用域内定义变量或模式，但我们从未真正使用它们的例子：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> number <span class="token operator">=</span> someNumber <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"除以零"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">switch</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token class-name">Integer</span> i <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是整数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token class-name">Float</span> f <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是浮点数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token class-name">String</span> s <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是字符串"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"默认"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> pwd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token constant">STR</span><span class="token punctuation">.</span><span class="token string">""</span>
      <span class="token operator">+</span> <span class="token string">"数据库连接成功"</span>
      <span class="token operator">+</span> <span class="token string">"URL = {url}"</span>
      <span class="token operator">+</span> <span class="token string">"usr = {user}"</span>
      <span class="token operator">+</span> <span class="token string">"pwd = {pwd}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:9.11,words:2732},t:"Java 22 简介",y:"a"}}],["/posts/baeldung/Archive/Introduction%20to%20JavaParser.html",{loader:()=>a(()=>import("./Introduction to JavaParser.html-B6j6a2FK.js"),__vite__mapDeps([1573,1])),meta:{d:17184096e5,l:"2024年6月15日",c:["Java","Libraries"],g:["JavaParser","AST"],e:`
<p>在本文中，我们将了解 JavaParser 库。我们将看到它是什么，我们可以用它做什么，以及如何使用它。</p>
<h2><strong>2. JavaParser 是什么？</strong></h2>
<p>JavaParser 是一个用于处理 Java 源代码的开源库。<strong>它允许我们将 Java 源代码解析为抽象语法树（AST）。一旦我们完成这一步，我们可以分析解析后的代码，对其进行操作，甚至编写新的代码。</strong></p>
<p>使用 JavaParser，我们可以解析 Java 语言直到 Java 18 的源代码。这包括所有稳定的语言特性，但可能不包括任何预览特性。</p>`,r:{minutes:9.99,words:2997},t:"JavaParser 简介 | Baeldung",y:"a"}}],["/posts/baeldung/Archive/Introduction%20to%20SSHJ.html",{loader:()=>a(()=>import("./Introduction to SSHJ.html-CDXh5DbD.js"),__vite__mapDeps([1574,1])),meta:{d:1718496e6,l:"2024年6月16日",c:["SSHJ","Java"],g:["SSH","Java库"],e:'\n<h2>1. 概览</h2>\n<p><strong>SSHJ是一个使用SSH协议与远程服务器安全通信的开源Java库。</strong></p>\n<p>在本文中，我们将介绍SSHJ库的基本功能。</p>\n<h2>2. 依赖项</h2>\n<p>要使用SSHJ库，我们需要向项目中添加以下依赖项：</p>\n<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>`&lt;dependency&gt;`\n    `&lt;groupId&gt;`com.hierynomus`&lt;/groupId&gt;`\n    `&lt;artifactId&gt;`sshj`&lt;/artifactId&gt;`\n    `&lt;version&gt;`0.38.0`&lt;/version&gt;`\n`&lt;/dependency&gt;`\n</code></pre></div>',r:{minutes:5.54,words:1661},t:"SSHJ简介 | Baeldung",y:"a"}}],["/posts/baeldung/Archive/Introduction%20to%20Simple%20Java%20Mail.html",{loader:()=>a(()=>import("./Introduction to Simple Java Mail.html-B2CU_NEW.js"),__vite__mapDeps([1575,1])),meta:{d:17186688e5,l:"2024年6月18日",c:["Java","Email"],g:["Simple Java Mail","JavaMail API"],e:'\n<p>Simple Java Mail 是一个流行的开源库，它简化了 Java 应用程序中的邮件发送过程。与标准的 JavaMail API 相比，它提供了更用户友好的 API，让我们可以专注于电子邮件的内容和收件人，而不是底层细节。</p>\n<p>在本教程中，我们将探索设置 Simple Java Mail 的过程，并学习如何发送电子邮件，包括附件和 HTML 内容，处理异常等。</p>\n<h2>2. 设置项目</h2>\n<p>我们首先通过将 Simple Java Mail 依赖项添加到我们的项目配置文件 <em>pom.xml</em> 中开始：</p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`org.simplejavamail`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`simple-java-mail`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`8.7.0`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n</code></pre></div>',r:{minutes:8.74,words:2621},t:"Simple Java Mail 简介",y:"a"}}],["/posts/baeldung/Archive/Java%E4%B8%AD%E4%B8%8D%E5%90%8C%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%AF%94%E8%BE%83.html",{loader:()=>a(()=>import("./Java中不同数值类型的比较.html-BVWj13QS.js"),__vite__mapDeps([1576,1])),meta:{d:17157312e5,l:"2024年5月15日",c:["Java编程","数据类型比较"],g:["Java","BigDecimal","数据比较"],e:`
<h2>1. 概述</h2>
<p>有时，我们需要比较数字，忽略它们的类或类型。<strong>这在格式不统一，数字可能在不同上下文中使用时特别有用。</strong></p>
<p>在本教程中，我们将学习如何比较原始类型和不同类别的数字，例如_Integers_、<em>Longs_和_Floats</em>。我们还将检查如何将浮点数与整数进行比较。</p>
<h2>2. 比较不同类别</h2>
<p>让我们检查Java如何比较不同的原始类型、包装类和数字类型。<strong>为了澄清，在本文的上下文中，我们将把“类型”称为浮点数和整数，而不是类或原始类型。</strong></p>
<h3>2.1. 比较整数原始类型</h3>`,r:{minutes:5.92,words:1777},t:"Java中不同数值类型的比较",y:"a"}}],["/posts/baeldung/Archive/Java%E4%B8%AD%E5%B0%86int%E8%BD%AC%E6%8D%A2%E4%B8%BA%E6%97%A0%E7%AC%A6%E5%8F%B7%E5%AD%97%E8%8A%82.html",{loader:()=>a(()=>import("./Java中将int转换为无符号字节.html-X4lQ3FAO.js"),__vite__mapDeps([1577,1])),meta:{d:17186688e5,l:"2024年6月18日",c:["Java","编程"],g:["Java","转换","无符号字节"],e:`
<h2>1. 引言</h2>
<p>在Java中，_byte_类型是一个有符号的8位整数。这意味着它可以存储-128到127之间的值。然而，在某些情况下，我们可能需要将_bytes_作为无符号数来处理，表示0到255的值。这在处理二进制数据、网络和文件I/O时尤为重要，因为无符号字节很常见。</p>
<p><strong>在本教程中，我们将探讨将_int_转换为无符号_byte_的两种方法。</strong></p>
<h2>2. 使用类型转换和位掩码</h2>
<p>最常见的方法是使用类型转换结合位掩码。让我们探索实现方式：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenInt_whenUsingTypeCastingAndBitMasking_thenConvertToUnsignedByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">byte</span> unsignedByte <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>value <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">assertEquals</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token class-name">Byte</span><span class="token punctuation">.</span><span class="token function">toUnsignedInt</span><span class="token punctuation">(</span>unsignedByte<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.21,words:664},t:"Java中将int转换为无符号字节",y:"a"}}],["/posts/baeldung/Archive/Java%E4%B8%AD%E5%B0%86%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E4%B8%BAOffsetDateTime.html",{loader:()=>a(()=>import("./Java中将字符串转换为OffsetDateTime.html-BgUUusbC.js"),__vite__mapDeps([1578,1])),meta:{d:17187552e5,l:"2024年6月19日",c:["Java","Date and Time"],g:["OffsetDateTime","String Conversion"],e:`<hr>
<h1>Java中将字符串转换为OffsetDateTime</h1>
<p>在软件开发中，处理日期和时间值是一项常见任务，尤其是在构建涉及调度、日志记录或任何时间敏感操作的应用程序时。在相同的背景下，Java中的_OffsetDateTime_类提供了一种强大的解决方案，用于表示带有UTC/GMT偏移量的日期和时间信息。</p>
<p><strong>在本教程中，我们将探讨如何高效地将表示日期和时间信息的字符串转换为Java中的_OffsetDateTime_对象。</strong></p>
<h3>2. 使用_OffsetDateTime.parse()_方法</h3>
<p>将字符串转换为_OffsetDateTime_对象的最简单方法之一是使用_OffsetDateTime.parse(CharSequence text)_方法。此方法根据ISO-8601格式解析输入字符串，并返回表示解析日期和时间的_OffsetDateTime_对象：</p>`,r:{minutes:2.5,words:749},t:"Java中将字符串转换为OffsetDateTime",y:"a"}}],["/posts/baeldung/Archive/Join%20Two%20Tables%20Using%20jOOQ.html",{loader:()=>a(()=>import("./Join Two Tables Using jOOQ.html-zxrdPaWi.js"),__vite__mapDeps([1579,1])),meta:{d:17187552e5,l:"2024年6月19日",c:["Java","jOOQ"],g:["jOOQ","SQL","Java"],e:'\n<p>jOOQ（Java Object Oriented Querying）是一个强大的库，它通过使我们能够以面向对象的方式编写SQL查询，从而简化了Java中的数据库交互。在关系数据库中，连接表是一个基本操作，它允许我们根据特定条件从多个表中组合数据。在本教程中，我们将探索jOOQ中可用的各种连接类型。</p>\n<h2>2. 设置jOOQ</h2>\n<p>使用jOOQ连接两个表涉及使用jOOQ提供的DSL（领域特定语言）来构建SQL查询。</p>\n<p>要使用jOOQ，我们需要将jOOQ和PostgreSQL依赖项添加到我们的Maven项目的_pom.xml_文件中：</p>\n<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>``&lt;dependency&gt;``\n    ``&lt;groupId&gt;``org.jooq``&lt;/groupId&gt;``\n    ``&lt;artifactId&gt;``jooq``&lt;/artifactId&gt;``\n``&lt;/dependency&gt;``\n``&lt;dependency&gt;``\n    ``&lt;groupId&gt;``org.postgresql``&lt;/groupId&gt;``\n    ``&lt;artifactId&gt;``postgresql``&lt;/artifactId&gt;``\n``&lt;/dependency&gt;``\n</code></pre></div>',r:{minutes:6.08,words:1824},t:"使用jOOQ连接两个表",y:"a"}}],["/posts/baeldung/Archive/Logging%20SQL%20Queries%20to%20the%20Console%20in%20Mybatis.html",{loader:()=>a(()=>import("./Logging SQL Queries to the Console in Mybatis.html-q9HAQuyy.js"),__vite__mapDeps([1580,1])),meta:{d:17184096e5,l:"2024年6月15日",c:["Java","MyBatis"],g:["Logging","SQL"],e:`
<p>MyBatis是一个流行的基于Java的持久层框架，它通过将SQL查询映射到Java方法来简化数据库操作。</p>
<p>在使用MyBatis开发应用程序时，查看正在使用的SQL查询通常对调试非常有用。</p>
<p>在本教程中，我们将探讨如何在MyBatis中将SQL查询记录到控制台。</p>
<h2>2. 支持的日志实现</h2>
<p>在深入研究MyBatis中的SQL记录之前，了解支持的日志实现是很重要的。</p>
<p><strong>MyBatis是一个灵活的框架，可以与各种日志框架集成</strong>，包括SLF4J、Apache Commons Logging、Log4j 2和JDK Logging。本文将探讨两种不同的日志选项：标准输出日志和SLF4J。</p>`,r:{minutes:5.36,words:1607},t:"在MyBatis中将SQL查询记录到控制台",y:"a"}}],["/posts/baeldung/Archive/Map%20LocalDateTime%20to%20Instant%20in%20MapStruct.html",{loader:()=>a(()=>import("./Map LocalDateTime to Instant in MapStruct.html-DhHGZ4JD.js"),__vite__mapDeps([1581,1])),meta:{d:17183232e5,l:"2024年6月14日",c:["Java"],g:["MapStruct","LocalDateTime","Instant"],e:`
<h2>1. 概述</h2>
<p>在Java中处理日期和时间时，我们经常会遇到不同的格式，例如_LocalDateTime_和_Instant_。_LocalDateTime_表示没有时区的日期时间，而_Instant_表示通常参考自纪元（1970年1月1日，00:00:00 UTC）的特定时间点。在许多场景中，我们需要在这两种类型之间进行映射。幸运的是，MapStruct，一个强大的Java映射框架，允许我们轻松地做到这一点。</p>
<p>在本教程中，我们将学习如何在MapStruct中将_LocalDateTime_映射到_Instant_。</p>
<h2>2. 理解_LocalDateTime_和_Instant_</h2>`,r:{minutes:5.87,words:1762},t:"使用MapStruct映射LocalDateTime到Instant | Baeldung",y:"a"}}],["/posts/baeldung/Archive/Mapping%20Enum%20to%20String%20Using%20MapStruct.html",{loader:()=>a(()=>import("./Mapping Enum to String Using MapStruct.html-CocJ65Zq.js"),__vite__mapDeps([1582,1])),meta:{d:1718496e6,l:"2024年6月16日",c:["Java","MapStruct"],g:["数据映射","枚举"],e:`
<p>MapStruct是一个高效、类型安全的库，它简化了Java对象之间的数据映射，消除了手动转换逻辑的需要。</p>
<p>在本教程中，我们将探索如何使用MapStruct将枚举映射为字符串。</p>
<p>使用Java枚举作为字符串而不是序数可以简化与外部API的数据交换，使数据检索更简单，并提高UI中的可读性。</p>
<p>假设我们想要将_DayOfWeek_枚举转换为字符串。</p>
<p>_DayOfWeek_是Java Date-Time API中的一个枚举，表示一周的七天，从星期一到星期日。</p>
<p>让我们实现MapStruct映射器：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DayOfWeekMapper</span> <span class="token punctuation">{</span>
    <span class="token class-name">DayOfWeekMapper</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token class-name">Mappers</span><span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">DayOfWeekMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token class-name">DayOfWeek</span> dayOfWeek<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 根据需要添加其他映射方法</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:4,words:1199},t:"使用MapStruct将枚举映射为字符串",y:"a"}}],["/posts/baeldung/Archive/Merge%20Multiple%20PDF%20Files%20Into%20a%20Single%20PDF%20Using%20Java.html",{loader:()=>a(()=>import("./Merge Multiple PDF Files Into a Single PDF Using Java.html-DJHaOhzn.js"),__vite__mapDeps([1583,1])),meta:{d:17183232e5,l:"2024年6月14日",c:["Java","PDF"],g:["Apache PDFBox","iText"],e:`
<p>在现代商业和文档管理流程中，将多个PDF文件合并成一个单独的PDF文档是一个常见的需求。常见的用例包括演示文稿、整合报告或将多个包编译成一个单一的包。</p>
<p>在Java中，存在多个库，它们提供了现成的功能来处理PDF并将它们合并成一个单独的PDF。Apache PDFBox和iText是其中最受欢迎的。</p>
<p>在本教程中，我们将使用Apache PDFBox和iText实现PDF合并功能。</p>
<h2>2. 设置</h2>
<p>在深入实现之前，让我们先了解必要的设置步骤。我们将为项目添加所需的依赖项，此外，我们将为我们的测试创建辅助方法。</p>
<h3>2.1. 依赖项</h3>`,r:{minutes:4.39,words:1318},t:"使用Java合并多个PDF文件",y:"a"}}],["/posts/baeldung/Archive/Mocking%20Protected%20Method%20in%20Java.html",{loader:()=>a(()=>import("./Mocking Protected Method in Java.html-D8qGyyPl.js"),__vite__mapDeps([1584,1])),meta:{d:17184096e5,l:"2024年6月15日",c:["Java","Mockito"],g:["测试","Mockito","反射"],e:`
<h2>1. 概述</h2>
<p>在Java中模拟受保护的方法与模拟公共方法类似，但有一个问题：测试类中该方法的可见性。我们可以从同一包中的类和继承自A类的类中看到类A的受保护方法。因此，如果我们尝试从不同包中测试类A，我们将面临问题。</p>
<p>在本教程中，我们将探讨在测试中模拟受保护方法的情况。我们将演示两种情况：可以访问该方法和不能访问。我们将使用Mockito间谍而不是模拟，因为我们只想存根测试类中的某些行为。</p>
<p>当我们可以访问Mockito中的受保护方法时，模拟是直接的。我们可以通过两种方式获得访问权限。首先，将受保护的范围更改为公共，或者第二，将测试类移动到与具有受保护方法的类相同的包中。</p>`,r:{minutes:4.89,words:1466},t:"在Java中模拟受保护的方法",y:"a"}}],["/posts/baeldung/Archive/Monads%20in%20Java.html",{loader:()=>a(()=>import("./Monads in Java.html-BuVtPCgM.js"),__vite__mapDeps([1585,1])),meta:{d:17184096e5,l:"2024年6月15日",c:["Java"],g:["Monads","Functional Programming"],e:`
<h2>1. 概述</h2>
<p>在本教程中，我们将学习关于单子（monads），以及它们如何帮助我们处理副作用。我们将学习到关键的方法，这些方法使我们能够连接单子和操作：_map()<em>和_flatMap()</em>。在整篇文章中，我们将探索Java生态系统中一些流行的单子的API，重点关注它们的实际应用。</p>
<h2>2. 副作用</h2>
<p>在函数式编程中，“副作用”通常指的是那些超出函数或组件作用域的操作所引起的变化。</p>
<p>为了在处理这些副作用的同时应用函数式编程范式，我们可以将我们的操作或数据包装在一个容器中。<strong>我们可以将单子想象为容器，允许我们在函数作用域之外处理副作用，保持函数的纯度。</strong></p>`,r:{minutes:6.67,words:2002},t:"Java中的单子模式 | Baeldung",y:"a"}}],["/posts/baeldung/Archive/Monitor%20a%20Spring%20Boot%20App%20Using%20Prometheus.html",{loader:()=>a(()=>import("./Monitor a Spring Boot App Using Prometheus.html-Cn_KoF3r.js"),__vite__mapDeps([1586,1])),meta:{d:17183232e5,l:"2024年6月14日",c:["Spring Boot","Prometheus"],g:["监控","微服务"],e:`
<h2>1. 概述</h2>
<p>在软件开发的严格要求世界中，确保应用程序在生产环境中部署后能够最佳且可靠地执行不仅是可取的——这是必需的。使用Spring Boot，开发者可以轻松设置独立、高质量的应用程序。然而，要真正提高性能、可用性和可靠性，集成像Prometheus这样复杂的监控工具是关键。</p>
<p>本教程旨在提供<strong>一个详细的教程，介绍如何将Prometheus与Spring Boot应用程序连接</strong>，通过基本和复杂的配置丰富我们的监控策略。</p>
<h2>2. Prometheus是什么？</h2>
<p>Prometheus是一个<strong>开源项目，旨在深入挖掘我们的应用程序数据，创建过滤层来收集和分析从最简单的到最复杂的一切</strong>。这不仅仅是关于数字和图表：它是通过其高级查询语言和时间序列数据能力来理解我们应用程序的心跳。</p>`,r:{minutes:8.93,words:2678},t:"使用Prometheus监控Spring Boot应用 | Baeldung",y:"a"}}],["/posts/baeldung/Archive/OpenAI%20API%20Client%20in%20Java.html",{loader:()=>a(()=>import("./OpenAI API Client in Java.html-BmPGM67H.js"),__vite__mapDeps([1587,1])),meta:{d:17182368e5,l:"2024年6月13日",c:["Java","OpenAI API"],g:["Java","AI","ChatGPT","API"],e:`
<h2>1. 概述</h2>
<p>随着生成性AI的广泛使用，特别是ChatGPT，许多语言都开始提供与OpenAI API交互的库。Java也不例外。</p>
<p>在本教程中，我们将讨论_openai-java_。这是一个客户端，允许我们更方便地与OpenAI API进行通信。然而，在一篇文章中回顾整个库是不可能的。<strong>因此，我们将使用一个实际的例子，构建一个连接到ChatGPT的简单控制台工具。</strong></p>
<h2>2. 依赖项</h2>
<p>首先，我们必须为我们的项目导入所需的依赖项。我们可以在Maven仓库中找到这些库。<strong>这三个模块专门用于交互的不同方面：</strong></p>`,r:{minutes:9.26,words:2777},t:"Java中的OpenAI API客户端 | Baeldung",y:"a"}}],["/posts/baeldung/Archive/Parallel%20Collection%20Processing%20with%20Parallel%20Collectors%20and%20Virtual%20Threads.html",{loader:()=>a(()=>import("./Parallel Collection Processing with Parallel Collectors and Virtual Threads.html-DD_jF611.js"),__vite__mapDeps([1588,1])),meta:{d:17187552e5,l:"2024年6月19日",c:["Java","Concurrency"],g:["Virtual Threads","Parallel Collectors"],e:'\n<h2>1. 引言</h2>\n<p>在之前的文章中，我们介绍了并行收集器，这是一个小型的零依赖库，它使得自定义线程池中的Stream API能够进行并行处理。</p>\n<p>Project Loom是引入轻量级虚拟线程（之前称为Fibers）到JVM的有组织努力的代号，最终在JDK21中完成。</p>\n<p>让我们看看如何利用这个技术在并行收集器中。</p>\n<h2>2. Maven依赖</h2>\n<p>如果我们想开始使用这个库，我们需要在Maven的_pom.xml_文件中添加一个单一条目：</p>\n<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>`&lt;dependency&gt;`\n    `&lt;groupId&gt;`com.pivovarit`&lt;/groupId&gt;`\n    `&lt;artifactId&gt;`parallel-collectors`&lt;/artifactId&gt;`\n    `&lt;version&gt;`3.0.0`&lt;/version&gt;`\n`&lt;/dependency&gt;`\n</code></pre></div>',r:{minutes:4.6,words:1380},t:"Java虚拟线程和并行收集器的并行集合处理",y:"a"}}],["/posts/baeldung/Archive/Pass%20a%20Class%20as%20a%20Parameter%20in%20Java.html",{loader:()=>a(()=>import("./Pass a Class as a Parameter in Java.html-_ienn9Rr.js"),__vite__mapDeps([1589,1])),meta:{d:17187552e5,l:"2024年6月19日",c:["Java","Programming"],g:["Java","Reflection","Generics"],e:`<hr>
<h1>Java中将类作为参数传递</h1>
<h2>1. 引言</h2>
<p>在Java编程中，我们可能会遇到需要将类作为参数传递的情况，这可以在我们的代码中实现动态行为和灵活性。</p>
<p><strong>在本教程中，我们将深入探讨在Java中实现这一点的不同方法。</strong></p>
<h2>2. 问题定义</h2>
<p>在Java中，类作为对象的蓝图，定义了它们的属性和行为。此外，将类作为参数传递意味着提供对类本身的引用，而不是类的实例。</p>
<p><strong>这允许方法动态地操作或实例化不同类的实例。</strong></p>
<h2>3. 传递类参数</h2>`,r:{minutes:2.64,words:792},t:"Java中将类作为参数传递",y:"a"}}],["/posts/baeldung/Archive/Perform%20Action%20Only%20if%20All%20Optionals%20Are%20Available.html",{loader:()=>a(()=>import("./Perform Action Only if All Optionals Are Available.html-xyWkMjaf.js"),__vite__mapDeps([1590,1])),meta:{d:1718496e6,l:"2024年6月16日",c:["Java","Programming"],g:["Java 8","Optional","Functional Programming"],e:`
<p>介绍</p>
<p>空引用和空值多年来一直困扰着程序员。空引用的发明者Tony Hoare曾称他的发明是一个“价值十亿美元的错误”。特别是Java，一直在与空值和可怕的_NullPointerException_作斗争。</p>
<p>Java 8引入了_Optional_类来解决这一挑战，并确保正确处理空和空结果。在本教程中，我们将探讨仅当所有_Optional_变量都包含值时才执行操作，否则忽略该操作。</p>
<p>假设</p>
<p>本教程演示了使用三个_Optional_变量，但这些概念可以很容易地扩展到处理更多变量。此外，让我们声明这些变量，我们将在本文中使用它们：</p>`,r:{minutes:3.74,words:1121},t:"仅当所有Optional变量都可用时执行操作 | Baeldung",y:"a"}}],["/posts/baeldung/Archive/PersistenceUnit%20vs.%20PersistenceContext.html",{loader:()=>a(()=>import("./PersistenceUnit vs. PersistenceContext.html-B0S42cxn.js"),__vite__mapDeps([1591,1])),meta:{d:17186688e5,l:"2024年6月18日",c:["Java Persistence","JPA"],g:["PersistenceUnit","PersistenceContext"],e:`
<p>持久化上下文和持久化单元是JPA中用于管理应用程序中实体生命周期的两个重要概念。</p>
<p>在本教程中，我们将简要介绍实体管理器和实体管理器工厂。接下来，我们将看到持久化上下文的重要性及其用例。最后，我们将看到持久化单元的作用及其用例。</p>
<h3>实体管理器和实体管理器工厂</h3>
<p>在深入细节之前，有必要基本了解实体管理器和实体管理器工厂接口。正如我们将看到的，它们在管理持久性、实体和数据库交互中扮演着重要角色。</p>
<h4>实体管理器</h4>
<p>实体管理器是一个与持久化上下文交互的接口。它对实体执行CRUD操作，跟踪变更，并确保在事务提交时与数据库同步。实体管理器代表一个持久化上下文，并在事务的作用域内操作。</p>`,r:{minutes:5.67,words:1702},t:"持久化上下文与持久化单元 | Baeldung",y:"a"}}],["/posts/baeldung/Archive/Polymorphism%20with%20Gson.html",{loader:()=>a(()=>import("./Polymorphism with Gson.html-CQ2DDihp.js"),__vite__mapDeps([1592,1])),meta:{d:17187552e5,l:"2024年6月19日",c:["Spring","Java"],g:["Gson","Polymorphism"],e:`
<p>在本教程中，我们将探讨如何使用Gson处理多态性。我们还将探索一些处理多态性序列化和反序列化的技巧。</p>
<h2>2. JSON中的多态性</h2>
<p>Java中的多态性是众所周知的。我们有一个类层次结构，适当的时候，我们可以以某些方式将不同但相关的类型视为相同。</p>
<p>例如，我们可能有一些二维形状的定义。不同形状的定义方式各不相同，但它们都有一些共同的特征——例如，它们都可以计算面积。</p>
<p>因此，我们可以定义一些多态类来定义一些形状：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>
    <span class="token keyword">double</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token keyword">implements</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">double</span> radius<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">double</span> area<span class="token punctuation">;</span>

    <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>radius <span class="token operator">=</span> radius<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>area <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> radius <span class="token operator">*</span> radius<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> area<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">implements</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">double</span> side<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">double</span> area<span class="token punctuation">;</span>

    <span class="token class-name">Square</span><span class="token punctuation">(</span><span class="token keyword">double</span> side<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>side <span class="token operator">=</span> side<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>area <span class="token operator">=</span> side <span class="token operator">*</span> side<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> area<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:6.21,words:1864},t:"Gson中的多态性",y:"a"}}],["/posts/baeldung/Archive/Print%20Distinct%20Characters%20of%20a%20String%20in%20Java.html",{loader:()=>a(()=>import("./Print Distinct Characters of a String in Java.html-CVNnfKf6.js"),__vite__mapDeps([1593,1])),meta:{d:17185824e5,l:"2024年6月17日",c:["Java","编程"],g:["Java编程","字符串处理"],e:`
<h2>1. 引言</h2>
<p>在Java编程中，从字符串中打印不同的字符是一个基本任务，通常在文本处理和分析中需要。</p>
<p><strong>在本教程中，我们将探索处理和加工唯一字符的各种方法。</strong></p>
<h2>2. 使用_Set_集合</h2>
<p>从字符串中打印不同字符的一种有效方法是通过使用Java中的_Set_集合。_Set_自动处理重复项，允许我们高效地收集唯一字符。以下是实现此方法的方式：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> inputString <span class="token operator">=</span> <span class="token string">"BBaaeelldduunngg"</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenString_whenUsingSet_thenFindDistinctCharacters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Set</span>\`\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\`\` distinctChars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> ch <span class="token operator">:</span> inputString<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        distinctChars<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token char">'B'</span><span class="token punctuation">,</span> <span class="token char">'a'</span><span class="token punctuation">,</span> <span class="token char">'e'</span><span class="token punctuation">,</span> <span class="token char">'l'</span><span class="token punctuation">,</span> <span class="token char">'d'</span><span class="token punctuation">,</span> <span class="token char">'u'</span><span class="token punctuation">,</span> <span class="token char">'n'</span><span class="token punctuation">,</span> <span class="token char">'g'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> distinctChars<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:5.03,words:1509},t:"Java中打印字符串的不同字符 | Baeldung",y:"a"}}],["/posts/baeldung/Archive/Print%20the%20Default%20Value%20When%20Overriding%20toString%20%20%20Method.html",{loader:()=>a(()=>import("./Print the Default Value When Overriding toString   Method.html-D21QDV4X.js"),__vite__mapDeps([1594,1])),meta:{d:17186688e5,l:"2024年6月18日",c:["Java","编程"],g:["toString方法","空值处理","Java 8"],e:`
<p>我们可以在Java中使用<code>toString()</code>方法来返回对象的字符串表示。通常，我们会覆盖这个方法以提供一个有意义的对象状态描述。但是，某些字段可能是<code>null</code>，打印它们可能会导致<code>NullPointerExceptions</code>。</p>
<p><strong>在本教程中，我们将探索几种使用默认值来处理这种情况的方法。</strong></p>
<h2>2. 员工用例场景</h2>
<p>让我们考虑开发一个管理员工记录的应用程序。每个员工都有诸如<code>name</code>、<code>age</code>和<code>department</code>等属性：</p>`,r:{minutes:2.75,words:826},t:"Java中重写toString()方法时打印默认值",y:"a"}}],["/posts/baeldung/Archive/PrintWriter%20write%20%20%20vs%20print%20%20%20Method%20in%20Java.html",{loader:()=>a(()=>import("./PrintWriter write   vs print   Method in Java.html-BiMQy58T.js"),__vite__mapDeps([1595,1])),meta:{d:17187552e5,l:"2024年6月19日",c:["Java","IO"],g:["PrintWriter","write()","print()"],e:`
<p>本文将讨论Java IO包中的_PrintWriter_类。具体来说，我们将讨论它的两个方法，_write()<em>和_print()</em>，以及它们之间的区别。</p>
<p>_PrintWriter_类将对象的格式化表示打印到文本输出流。此类中的方法永远不会抛出I/O异常。然而，它的一些构造函数可能会抛出异常。要使用这些方法，我们必须调用_PrintWriter_构造函数，并提供文件、文件名或输出流作为参数。</p>
<p><strong><em>write()<em>方法有五个重载版本，两个用于_char</em>，两个用于_String</em>，一个用于_int_。</strong> 这个方法只是我们可以将内容写入控制台或文件的方式之一。</p>`,r:{minutes:4.1,words:1231},t:"Java 中的 PrintWriter write() 与 print() 方法比较 | Baeldung## 1. 引言",y:"a"}}],["/posts/baeldung/Archive/Reading%20CSV%20Headers%20Into%20a%20List.html",{loader:()=>a(()=>import("./Reading CSV Headers Into a List.html-BLmK8F-6.js"),__vite__mapDeps([1596,1])),meta:{d:17182368e5,l:"2024年6月13日",c:["Java","CSV"],g:["Java","CSV","OpenCSV","Apache Commons CSV"],e:`
<p>在这篇简短的教程中，我们将探讨在Java中将CSV头部读取到列表的不同方法。</p>
<p>首先，我们将学习如何使用JDK类来完成这项任务。然后，我们将看到如何使用如OpenCSV和Apache Commons CSV等外部库来实现相同的目标。</p>
<h2>2. 使用BufferedReader</h2>
<p>BufferedReader类为我们的挑战提供了最简单的解决方案。它提供了一种快速高效的方式来读取CSV文件，因为它通过分块读取内容来减少IO操作的次数。</p>
<p>让我们看看它的实际应用：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">CsvHeadersAsListUnitTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">CSV_FILE</span> <span class="token operator">=</span> <span class="token string">"src/test/resources/employees.csv"</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">COMMA_DELIMITER</span> <span class="token operator">=</span> <span class="token string">","</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">List</span>\\<span class="token operator">&lt;</span><span class="token class-name">String</span>\\<span class="token operator">&gt;</span> <span class="token constant">EXPECTED_HEADERS</span> <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"ID"</span><span class="token punctuation">,</span> <span class="token string">"First name"</span><span class="token punctuation">,</span> <span class="token string">"Last name"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">givenCsvFile_whenUsingBufferedReader_thenGetHeadersAsList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token constant">CSV_FILE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> csvHeadersLine <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">List</span>\\<span class="token operator">&lt;</span><span class="token class-name">String</span>\\<span class="token operator">&gt;</span> headers <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>csvHeadersLine<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token constant">COMMA_DELIMITER</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">assertThat</span><span class="token punctuation">(</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">containsExactlyElementsOf</span><span class="token punctuation">(</span><span class="token constant">EXPECTED_HEADERS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.97,words:891},t:"在Java中读取CSV头部到列表的不同方式",y:"a"}}],["/posts/baeldung/Archive/Remove%20All%20Characters%20Before%20a%20Specific%20Character%20in%20Java.html",{loader:()=>a(()=>import("./Remove All Characters Before a Specific Character in Java.html-BpjvQbhi.js"),__vite__mapDeps([1597,1])),meta:{d:17185824e5,l:"2024年6月17日",c:["Java","字符串操作"],g:["字符串","子字符串","正则表达式","StringBuilder"],e:`
<h2>1. 引言</h2>
<p>在Java中处理字符串时，我们可能会遇到需要移除特定分隔符或字符之前的所有字符的场景。幸运的是，我们可以使用Java中的多种技术来完成这项任务，比如传统的循环、字符串操作方法或正则表达式。</p>
<p><strong>在本教程中，我们将探索几种在字符串中移除指定字符之前所有字符的方法。</strong></p>
<h2>2. 使用索引和子字符串</h2>
<p>一种直接移除特定字符之前所有字符的方法是找到所需字符的索引，然后使用_substring()_方法提取从该索引开始的子字符串。</p>
<p>这里有一个简单的例子：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> inputString <span class="token operator">=</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> targetCharacter <span class="token operator">=</span> <span class="token char">'W'</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenString_whenUsingSubstring_thenCharactersRemoved</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> inputString<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>targetCharacter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> result <span class="token operator">=</span> inputString<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"World!"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span>inputString<span class="token punctuation">,</span> inputString<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:2.65,words:794},t:"在Java中移除特定字符之前的所有字符",y:"a"}}],["/posts/baeldung/Archive/Replacing%20Strings%20in%20Java%20Using%20Regex_%20Back%20Reference%20vs.%20Lookaround.html",{loader:()=>a(()=>import("./Replacing Strings in Java Using Regex_ Back Reference vs. Lookaround.html-CNvT1NwP.js"),__vite__mapDeps([1598,1])),meta:{d:17182368e5,l:"2024年6月13日",c:["Java","Regex"],g:["Java","Regex","Back Reference","Lookaround"],e:`
<p>在本教程中，我们将学习如何使用String类中提供的replaceAll()方法使用正则表达式替换文本。此外，我们将学习两种方法，后向引用和环视，来执行相同的操作，然后比较它们的性能。</p>
<p>让我们首先描述第一种方法。</p>
<h3>2. 使用replaceAll()中的后向引用</h3>
<p>要理解后向引用，我们首先需要了解匹配组。简单来说，一个组不过是将多个字符视为一个单元。因此，后向引用是正则表达式中的一个特性，它允许我们在同一个正则表达式中引用先前匹配的组。通常，我们使用数字来表示模式中的捕获组，如\\1、\\2等。</p>
<p>例如，正则表达式(a)(b)\\1使用\\1来引用第一个捕获的组，在我们的例子中是(a)。</p>`,r:{minutes:4.26,words:1278},t:"Java中使用正则表达式替换字符串：后向引用与环视的比较",y:"a"}}],["/posts/baeldung/Archive/Resolving%20Security%20Exception%20%20java.security.UnrecoverableKeyException%20%20Cannot%20Recover%20Key.html",{loader:()=>a(()=>import("./Resolving Security Exception  java.security.UnrecoverableKeyException  Cannot Recover Key.html-BxJ_zkrF.js"),__vite__mapDeps([1599,1])),meta:{d:1696896e6,l:"2023年10月10日",c:["Java","安全"],g:["Java安全","UnrecoverableKeyException"],e:`
<h2>1. 引言</h2>
<p>在本教程中，我们将探讨如何处理_java.security.UnrecoverableKeyException_。我们还将探索这个异常实际上意味着什么以及导致它的原因。最后，我们将审查解决这个问题的可能方案。</p>
<h2>2. 理论背景</h2>
<p>在Java中，我们有一个密钥库的概念。它本质上是一个包含一些秘密的文件。特别是，它可以包含证书链以及相应的私钥。由于证书只是一个花哨的公钥包装器，我们可以基本上说密钥库包含一个非对称密钥对。</p>
<p>通常，用密码（也通常称为“口令”）保护我们的私钥是一个好习惯。这不仅是Java密钥库中的好习惯，也是网络安全的一般做法。通常通过使用对称密钥加密算法（如各种AES实例）使用密码加密私钥来实现这种保护。</p>`,r:{minutes:5.96,words:1787},t:"解决安全异常：java.security.UnrecoverableKeyException：无法恢复密钥 | Baeldung",y:"a"}}],["/posts/baeldung/Archive/Return%20Non-null%20Elements%20From%20Java%20Map%20Operation.html",{loader:()=>a(()=>import("./Return Non-null Elements From Java Map Operation.html-Bi-SFeNN.js"),__vite__mapDeps([1600,1])),meta:{d:17183232e5,l:"2024年6月14日",c:["Java","Programming"],g:["Java Stream API","map","filter","Optional"],e:`
<p>Java Stream API引入了许多特性，显著增强了我们代码的功能和可读性。其中，map()方法作为一个强大的工具，用于转换集合中的元素，尤为突出。一个常见的需求是确保这些换结果不包含空(null)元素。</p>
<p>在本教程中，我们将探讨如何有效地从Stream的map()方法中收集非空元素。</p>
<h2>2. 问题介绍</h2>
<p>map()方法提供了一个高层次的抽象，用于处理元素序列。它是一个中间操作，将映射函数应用于Stream的每个元素，生成一个新的转换后的元素Stream。</p>
<p>有时，映射函数可能会返回空值。然而，我们希望从转换结果中排除这些空值。例如，假设我们有一个字符串列表：</p>`,r:{minutes:4.13,words:1239},t:"Java流中从map操作返回非空元素",y:"a"}}],["/posts/baeldung/Archive/Role%20Based%20Access%20Control%20in%20Quarkus.html",{loader:()=>a(()=>import("./Role Based Access Control in Quarkus.html-BCPVIsUo.js"),__vite__mapDeps([1601,1])),meta:{d:17186688e5,l:"2024年6月18日",c:["Java","Security"],g:["Quarkus","RBAC","Security"],e:`
<p>在本教程中，我们将讨论基于角色的访问控制（RBAC）以及如何使用Quarkus实现这一功能。</p>
<p>RBAC是一种广为人知的实现复杂安全系统的机制。Quarkus是一个现代的云原生全栈Java框架，它开箱即支持RBAC。</p>
<p>在我们开始之前，重要的是要注意角色可以以多种方式应用。在企业中，角色通常只是权限的聚合，用于识别用户可以执行的特定操作组。在Jakarta中，角色是允许执行资源操作（等同于权限）的标签。实现RBAC系统有多种不同的方式。</p>
<p>在本教程中，我们将使用分配给资源的权限来控制访问，而角色将组织一系列权限。</p>
<h2>2. RBAC</h2>`,r:{minutes:6.06,words:1817},t:"Quarkus中的基于角色的访问控制",y:"a"}}],["/posts/baeldung/Archive/Save%20Child%20Objects%20Automatically%20Using%20JPA.html",{loader:()=>a(()=>import("./Save Child Objects Automatically Using JPA.html-kSn4eObK.js"),__vite__mapDeps([1602,1])),meta:{d:1718496e6,l:"2024年6月16日",c:["JPA","Hibernate"],g:["JPA","持久化","级联"],e:`
<h2>1. 概述</h2>
<p>有时我们处理的实体模型包含有父实体和子实体的复杂结构。在这种情况下，如果能够通过保存父实体来自动保存其所有子实体，将会非常有益。</p>
<p>在本教程中，我们将深入探讨实现自动保存时可能被忽视的各个方面。我们将讨论单向和双向关系。</p>
<h2>2. 遗漏的关系注解</h2>
<p><strong>我们可能首先会忽视的是添加关系注解。</strong> 让我们创建一个子实体：</p>
<div class="language-java" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BidirectionalChild</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Id</span>
    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">AUTO</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token comment">//getters和setters</span>
<span class="token punctuation">}</span>
</code></pre></div>`,r:{minutes:5.79,words:1736},t:"使用JPA自动保存子对象 | Baeldung",y:"a"}}],["/posts/baeldung/Archive/Set%20Matrix%20Elements%20to%20Zero%20in%20Java.html",{loader:()=>a(()=>import("./Set Matrix Elements to Zero in Java.html-BaAtBDg3.js"),__vite__mapDeps([1603,1])),meta:{d:17187552e5,l:"2024年6月19日",c:["Java","Algorithms"],g:["Matrix","Zero","Optimization"],e:`
<p>矩阵是计算机科学、数学和工程领域中使用的基本数据结构。在某些场景中，我们可能需要根据特定条件或要求将某些矩阵元素设置为零。在本教程中，我们将讨论在Java中高效完成此任务的各种方法。</p>
<h2>2. 问题理解</h2>
<p>给定一个矩阵，我们的目标是将矩阵中每个零元素所在的整行和整列都设置为零。这个操作有效地“清零”了包含至少一个零元素的行和列。</p>
<p>例如，考虑以下矩阵：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>[1, 2, 3]
[4, 0, 6]
[7, 8, 9]
</code></pre></div>`,r:{minutes:5.91,words:1772},t:"Java中将矩阵元素设置为零",y:"a"}}],["/posts/baeldung/Archive/Solving%20Spring%20Data%20JPA%20ConverterNotFoundException_%20No%20converter%20found.html",{loader:()=>a(()=>import("./Solving Spring Data JPA ConverterNotFoundException_ No converter found.html-BKk5GiUq.js"),__vite__mapDeps([1604,1])),meta:{d:17183232e5,l:"2024年6月14日",c:["Spring Data JPA","ConverterNotFoundException"],g:["Spring Data JPA","JPA","DTO","Converter"],e:`
<h2>1. 概述</h2>
<p>在使用Spring Data JPA时，我们经常利用派生和自定义查询以我们偏好的格式返回结果。一个典型的例子是DTO投影，它提供了一种很好的方式仅选择某些特定列，减少选择不必要数据的开销。</p>
<p>然而，DTO投影并不总是容易实现，如果实现不当可能会导致_ConverterNotFoundException_。因此，在本简短教程中，我们将阐明如何在使用Spring Data JPA时避免_ConverterNotFoundException_异常。</p>
<h2>2. 实践中的异常理解</h2>
<p>在跳转到解决方案之前，让我们通过一个实际例子来理解异常及其堆栈跟踪的含义。</p>`,r:{minutes:3.95,words:1186},t:"解决Spring Data JPA转换器未找到异常：没有找到转换器 | Baeldung",y:"a"}}],["/posts/baeldung/Archive/Spring%20WebClient%20exchange%20%20%20vs%20retrieve%20%20.html",{loader:()=>a(()=>import("./Spring WebClient exchange   vs retrieve  .html-DqB2F_WJ.js"),__vite__mapDeps([1605,1])),meta:{d:17185824e5,l:"2024年6月17日",c:["Spring WebFlux","WebClient"],g:["Spring Boot","Web Client","Reactive Programming"],e:`
<p><em>WebClient</em> 是一个简化执行 HTTP 请求过程的接口。与 <em>RestTemplate</em> 不同，它是一个响应式且非阻塞的客户端，可以消费和操作 HTTP 响应。尽管它设计为非阻塞，但也可以在阻塞场景中使用。</p>
<p>在本教程中，我们将深入探讨 <em>WebClient</em> 接口的关键方法，包括 <em>retrieve()</em>、<em>exchangeToMono()</em> 和 <em>exchangeToFlux()</em>。我们还将探讨这些方法之间的差异和相似之处，并查看示例以展示不同的用例。此外，我们将使用 JSONPlaceholder API 获取用户数据。</p>`,r:{minutes:7.26,words:2178},t:"Spring WebClient的retrieve()与exchange()方法比较",y:"a"}}],["/posts/baeldung/Archive/Static%20Code%20Analysis%20Using%20Infer.html",{loader:()=>a(()=>import("./Static Code Analysis Using Infer.html-Cb-_jdUQ.js"),__vite__mapDeps([1606,1])),meta:{d:17182368e5,l:"2024年6月13日",c:["Software Development"],g:["Static Code Analysis","Infer"],e:`
<p>在软件开发领域，确保代码质量非常重要，尤其是对于复杂和庞大的代码库。像Infer这样的静态代码分析工具为我们提供了在潜在问题成为严重问题之前检测代码库中的技术。</p>
<p>在本教程中，我们将探讨代码分析的基础知识，探索Infer的功能，并提供将其纳入我们开发工作流程的实用见解。</p>
<p>静态分析是一种不执行程序而自动检查源代码的调试方法。这个过程有助于识别潜在的缺陷、安全漏洞和可维护性问题。通常由第三方工具进行，如众所周知的SonarQube，当自动化时，静态代码分析是直接的。</p>
<p>通常，它发生在早期的开发阶段。一旦代码编写完成，就应该运行静态代码分析器来检查代码。它将根据标准或自定义预定义规则检查代码。一旦代码通过静态代码分析器运行，分析器将确定代码是否符合设定规则。</p>`,r:{minutes:6.46,words:1939},t:"使用Infer进行静态代码分析",y:"a"}}],["/posts/baeldung/Archive/Supply%20Enum%20Value%20to%20an%20Annotation%20From%20a%20Constant%20in%20Java.html",{loader:()=>a(()=>import("./Supply Enum Value to an Annotation From a Constant in Java.html-D1USmr9D.js"),__vite__mapDeps([1607,1])),meta:{d:17184096e5,l:"2024年6月15日",c:["Java","Annotations"],g:["Java","Enum","Annotations"],e:`
<p>在本教程中，我们将探索Java中从常量向注解提供枚举值的可能性。为了理解所提出的设计决策的主要驱动因素，我们将从问题陈述开始，然后是一个演示用例。</p>
<h2>1. 引言</h2>
<h2>2. 问题陈述</h2>
<p>让我们设想以下需求。**在控制器类中，两个_POST_和_PUT_端点始终需要具有相同的_Content-Type_。**现在，让我们看看如何共享两个端点定义中的相同枚举值。</p>
<p>为了更好地理解问题陈述，我们将继续探索一个演示用例。</p>
<h2>3. 定义演示用例</h2>
<p>为了满足要求，我们需要以下数据结构。</p>
<p>一个看起来像这样的_RequestContentType_枚举：</p>`,r:{minutes:6.19,words:1856},t:"Java中从常量向注解提供枚举值",y:"a"}}],["/posts/baeldung/Archive/The%20Difference%20Between%20doAnswer%20%20%20and%20thenReturn%20%20%20in%20Mockito.html",{loader:()=>a(()=>import("./The Difference Between doAnswer   and thenReturn   in Mockito.html-d_9CDEoy.js"),__vite__mapDeps([1608,1])),meta:{d:17184096e5,l:"2024年6月15日",c:["Testing","Java"],g:["Mockito","JUnit","doAnswer","thenReturn"],e:'\n<p>Mockito是一个广泛使用的Java应用程序单元测试框架。它提供了各种API来模拟对象的行为。在本教程中，我们将探讨doAnswer()和thenReturn()存根技术的用法，并进行比较。我们可以在某些情况下使用这两种API来存根或模拟方法，但在某些情况下，我们只能使用其中之一。</p>\n<p>我们的代码将结合使用Mockito和JUnit 5作为我们的代码示例，并且我们需要在我们的pom.xml文件中添加一些依赖项：</p>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```org.junit.jupiter```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```junit-jupiter-api```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```5.10.0```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>```test```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>```\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n</code></pre></div>',r:{minutes:3.66,words:1099},t:"Mockito中doAnswer()和thenReturn()的区别 | Baeldung",y:"a"}}],["/posts/baeldung/Archive/Understanding%20Maven%20Dependency%20Graph%20or%20Tree.html",{loader:()=>a(()=>import("./Understanding Maven Dependency Graph or Tree.html-BWNzpDX5.js"),__vite__mapDeps([1609,1])),meta:{d:17184096e5,l:"2024年6月15日",c:["Maven","依赖管理"],g:["Maven","依赖树","依赖图"],e:`
<p>在处理大型Maven项目时可能会感到畏惧，同时跟踪所有模块和库之间的依赖关系并解决它们之间的冲突也是一个挑战。</p>
<p>在本教程中，我们将学习有关Maven依赖图或树的知识。首先，我们将了解如何创建依赖树，过滤依赖项，并创建不同的输出格式。接下来，我们将讨论以图形方式查看依赖树的不同方法。</p>
<h2>2. 项目设置</h2>
<p>在现实生活的项目中，依赖树会迅速增长并变得复杂。然而，对于我们的示例，我们将创建一个包含两个模块_module1_和_module2_的小项目，每个模块都有两到三个依赖项。此外，<em>module1_依赖于_module2</em>。</p>
`,r:{minutes:5.42,words:1627},t:"Maven依赖图或树的理解",y:"a"}}],["/posts/baeldung/Archive/Unit%20Test%20for%20hashCode%20%20%20in%20Java.html",{loader:()=>a(()=>import("./Unit Test for hashCode   in Java.html-j60oIPg-.js"),__vite__mapDeps([1610,1])),meta:{d:17186688e5,l:"2024年6月18日",c:["Java","Unit Testing"],g:["hashCode","Java","Unit Test"],e:`
<h2>1. 引言</h2>
<p>在Java中，我们可以使用_hashCode()_方法为对象生成一个哈希码值。这个值通常用于各种目的，比如存储在像_HashMap_或_HashSet_这样的集合中，其中高效的检索和存储至关重要。</p>
<p>除此之外，为_hashCode()_方法编写单元测试确保它产生一致且正确的哈希码，这对于基于哈希的数据结构的正确功能至关重要。</p>
<p><strong>在本文中，我们将深入探讨Java中_hashCode()_方法单元测试的重要性。</strong></p>
<h2>2. 理解_hashCode()_方法</h2>
<p>在Java中，每个对象都从_Object_类继承了_hashCode()_方法，该方法基于对象的内部状态为对象生成一个唯一的整型哈希码值。通常，这个哈希码是使用内存地址或某些对象属性计算的，旨在提供一种快速有效的方式来识别对象：</p>`,r:{minutes:3.65,words:1094},t:"Java中hashCode()方法的单元测试 | Baeldung",y:"a"}}],["/posts/baeldung/Archive/Using%20@Autowired%20and%20@InjectMocks%20in%20Spring%20Boot%20Tests.html",{loader:()=>a(()=>import("./Using @Autowired and @InjectMocks in Spring Boot Tests.html-C14AtEh5.js"),__vite__mapDeps([1611,1])),meta:{d:17183232e5,l:"2024年6月14日",c:["Spring Boot","Testing"],g:["Autowired","InjectMocks"],e:`
<p>在本教程中，我们将探讨在Spring Boot测试中使用Spring Boot的@Autowired和Mockito的@InjectMocks注入依赖项的使用情况。我们将讨论需要使用它们的用例，并查看相同的例子。</p>
<h3>2. 理解测试注解</h3>
<p>在开始代码示例之前，让我们快速看一下一些测试注解的基础知识。</p>
<p>首先，Mockito最常用的@Mock注解为测试创建了一个依赖项的模拟实例。<strong>它经常与@InjectMocks结合使用，后者将标记有@Mock的模拟注入到正在测试的目标对象中。</strong></p>
<p>除了Mockito的注解，Spring Boot的注解@MockBean可以帮助创建一个模拟的Spring bean。然后，模拟的bean可以被上下文中的其他bean使用。<strong>此外，如果Spring上下文自己创建了可以在不模拟的情况下使用的bean，我们可以使用@Autowired注解来注入它们。</strong></p>`,r:{minutes:6.35,words:1904},t:"使用Spring Boot测试中的@Autowired和@InjectMocks | Baeldung",y:"a"}}],["/posts/baeldung/Archive/Using%20Comparator.nullsLast()%20to%20Avoid%20NullPointerException%20When%20Sorting.html",{loader:()=>a(()=>import("./Using Comparator.nullsLast() to Avoid NullPointerException When Sorting.html-Bmt_7LPp.js"),__vite__mapDeps([1612,1])),meta:{d:17182368e5,l:"2024年6月13日",c:["Java","Comparator"],g:["Java 8","Sorting","NullPointerException"],e:`
<p>在Java 8中，Comparator.nullsLast()方法为我们提供了一种方便的方式来处理排序时可能遇到的NullPointerException问题。本文将介绍如何在Java中使用Comparator.nullsLast()来避免在排序时出现NullPointerException。</p>
<h2>1. 概述</h2>
<p>如果集合中包含null值，而没有适当的异常处理，排序时可能会导致NullPointerException。Java 8提供了一个方便的方法Comparator.nullsLast()来解决这个问题。这个方法允许在排序操作中处理null值。</p>
<p>在本教程中，我们将学习如何使用Comparator.nullsLast()来避免在Java排序时出现NullPointerException。</p>`,r:{minutes:2.6,words:781},t:"使用Comparator.nullsLast()在排序时避免NullPointerException",y:"a"}}],["/posts/baeldung/Archive/Using%20Reactor%20Mono.cache%20%20%20for%20Memoization.html",{loader:()=>a(()=>import("./Using Reactor Mono.cache   for Memoization.html-BLVnpar5.js"),__vite__mapDeps([1613,1])),meta:{d:1718496e6,l:"2024年6月16日",c:["Spring","WebFlux"],g:["Reactor","Mono","Cache"],e:`
<h2>1. 概述</h2>
<p>优化代码以提高性能是编程的关键部分，特别是当处理昂贵的操作或数据检索过程时。提高性能的一种有效方法是缓存。</p>
<p><strong>Project Reactor 库提供了一个 <em>cache()</em> 方法，用于缓存昂贵的操作或几乎不改变的数据，以避免重复操作并提高性能</strong>。</p>
<p>在本教程中，我们将探讨备忘录模式，这是一种缓存形式，并演示如何使用 Project Reactor 库中的 <em>Mono.cache()</em> 来缓存对 JSONPlaceholder API 的 HTTP GET 请求的结果。我们还将通过一个大理石图来理解 <em>Mono.cache()</em> 方法的内部机制。</p>`,r:{minutes:5.46,words:1639},t:"使用 Reactor Mono.cache() 进行备忘录模式 | Baeldung",y:"a"}}],["/posts/baeldung/Archive/%E6%8E%A2%E7%B4%A2Java%E4%B8%AD%E5%B0%86%E6%9E%9A%E4%B8%BE%E5%80%BC%E4%BB%8E%E5%B8%B8%E9%87%8F%E4%BC%A0%E9%80%92%E5%88%B0%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%8F%AF%E8%83%BD%E6%80%A7.html",{loader:()=>a(()=>import("./探索Java中将枚举值从常量传递到注解的可能性.html-2NEsGwIB.js"),__vite__mapDeps([1614,1])),meta:{d:17157312e5,l:"2024年5月15日",c:["Java编程","注解与枚举"],g:["Java","注解","枚举"],e:`
<h2>1. 引言</h2>
<p>在本教程中，我们将探索Java中将枚举值从常量传递到注解的可能性。为了理解所提出的设计决策的主要驱动因素，我们将从问题陈述开始，然后是一个演示用例。</p>
<p>在那之后，我们将定义理想解决方案，了解Java语言的限制，并最终讨论一些实现选项。</p>
<h2>2. 问题陈述</h2>
<p>让我们想象以下要求。在控制器类中，两个_POST_和_PUT_端点始终需要具有相同的_内容类型（Content-Type）_。现在，让我们看看如何在同一枚举值中共享这两个端点定义。</p>
<p>为了更好地理解问题陈述，我们将继续探索一个演示用例。</p>
<h2>3. 定义演示用例</h2>`,r:{minutes:6.22,words:1867},t:"探索Java中将枚举值从常量传递到注解的可能性",y:"a"}}],["/404.html",{loader:()=>a(()=>import("./404.html----rE2O9.js"),__vite__mapDeps([1615,1])),meta:{t:""}}],["/posts/articles/",{loader:()=>a(()=>import("./index.html-BDvYkpYE.js"),__vite__mapDeps([1616,1])),meta:{t:"Articles"}}],["/posts/",{loader:()=>a(()=>import("./index.html-DblTIlu5.js"),__vite__mapDeps([1617,1])),meta:{t:"Posts"}}],["/posts/articles/postgresql/",{loader:()=>a(()=>import("./index.html-D6jrwtJV.js"),__vite__mapDeps([1618,1])),meta:{t:"Postgresql"}}],["/posts/baeldung/2024-06-21/",{loader:()=>a(()=>import("./index.html-DdaFtUtm.js"),__vite__mapDeps([1619,1])),meta:{t:"2024 06 21"}}],["/posts/baeldung/",{loader:()=>a(()=>import("./index.html-CfxxzV1Y.js"),__vite__mapDeps([1620,1])),meta:{t:"Baeldung"}}],["/posts/baeldung/2024-06-22/",{loader:()=>a(()=>import("./index.html-BD7VCSlO.js"),__vite__mapDeps([1621,1])),meta:{t:"2024 06 22"}}],["/posts/baeldung/2024-06-23/",{loader:()=>a(()=>import("./index.html-CMJhu6oS.js"),__vite__mapDeps([1622,1])),meta:{t:"2024 06 23"}}],["/posts/baeldung/2024-06-24/",{loader:()=>a(()=>import("./index.html-BvrLUlKL.js"),__vite__mapDeps([1623,1])),meta:{t:"2024 06 24"}}],["/posts/baeldung/2024-06-25/",{loader:()=>a(()=>import("./index.html-CoV1fVOm.js"),__vite__mapDeps([1624,1])),meta:{t:"2024 06 25"}}],["/posts/baeldung/2024-06-26/",{loader:()=>a(()=>import("./index.html-BqXNz32E.js"),__vite__mapDeps([1625,1])),meta:{t:"2024 06 26"}}],["/posts/baeldung/2024-06-27/",{loader:()=>a(()=>import("./index.html-CimQ-Hei.js"),__vite__mapDeps([1626,1])),meta:{t:"2024 06 27"}}],["/posts/baeldung/2024-06-28/",{loader:()=>a(()=>import("./index.html-BNAcozQf.js"),__vite__mapDeps([1627,1])),meta:{t:"2024 06 28"}}],["/posts/baeldung/2024-06-29/",{loader:()=>a(()=>import("./index.html-DY6g-UEN.js"),__vite__mapDeps([1628,1])),meta:{t:"2024 06 29"}}],["/posts/baeldung/2024-06-30/",{loader:()=>a(()=>import("./index.html-CZo51bjC.js"),__vite__mapDeps([1629,1])),meta:{t:"2024 06 30"}}],["/posts/baeldung/2024-07-01/",{loader:()=>a(()=>import("./index.html-URYi09FU.js"),__vite__mapDeps([1630,1])),meta:{t:"2024 07 01"}}],["/posts/baeldung/2024-07-02/",{loader:()=>a(()=>import("./index.html-C9v7pWqr.js"),__vite__mapDeps([1631,1])),meta:{t:"2024 07 02"}}],["/posts/baeldung/2024-07-03/",{loader:()=>a(()=>import("./index.html-Ch-zSR7L.js"),__vite__mapDeps([1632,1])),meta:{t:"2024 07 03"}}],["/posts/baeldung/2024-07-04/",{loader:()=>a(()=>import("./index.html-C-cWHMqR.js"),__vite__mapDeps([1633,1])),meta:{t:"2024 07 04"}}],["/posts/baeldung/2024-07-05/",{loader:()=>a(()=>import("./index.html-DpRq2VJh.js"),__vite__mapDeps([1634,1])),meta:{t:"2024 07 05"}}],["/posts/baeldung/2024-07-06/",{loader:()=>a(()=>import("./index.html-BSRVBJzZ.js"),__vite__mapDeps([1635,1])),meta:{t:"2024 07 06"}}],["/posts/baeldung/2024-07-07/",{loader:()=>a(()=>import("./index.html-BFoPCaQI.js"),__vite__mapDeps([1636,1])),meta:{t:"2024 07 07"}}],["/posts/baeldung/2024-07-08/",{loader:()=>a(()=>import("./index.html-DD-8Aq4H.js"),__vite__mapDeps([1637,1])),meta:{t:"2024 07 08"}}],["/posts/baeldung/2024-07-09/",{loader:()=>a(()=>import("./index.html-9ueu0GbV.js"),__vite__mapDeps([1638,1])),meta:{t:"2024 07 09"}}],["/posts/baeldung/2024-07-10/",{loader:()=>a(()=>import("./index.html-CUcws5gK.js"),__vite__mapDeps([1639,1])),meta:{t:"2024 07 10"}}],["/posts/baeldung/2024-07-11/",{loader:()=>a(()=>import("./index.html-CMXgDx2i.js"),__vite__mapDeps([1640,1])),meta:{t:"2024 07 11"}}],["/posts/baeldung/2024-07-12/",{loader:()=>a(()=>import("./index.html-CUdkcKTX.js"),__vite__mapDeps([1641,1])),meta:{t:"2024 07 12"}}],["/posts/baeldung/2024-07-13/",{loader:()=>a(()=>import("./index.html-M0SUYSY2.js"),__vite__mapDeps([1642,1])),meta:{t:"2024 07 13"}}],["/posts/baeldung/2024-07-14/",{loader:()=>a(()=>import("./index.html-CsXQ7EwG.js"),__vite__mapDeps([1643,1])),meta:{t:"2024 07 14"}}],["/posts/baeldung/2024-07-15/",{loader:()=>a(()=>import("./index.html-BuoalrSE.js"),__vite__mapDeps([1644,1])),meta:{t:"2024 07 15"}}],["/posts/baeldung/2024-07-16/",{loader:()=>a(()=>import("./index.html-BkOa7vG0.js"),__vite__mapDeps([1645,1])),meta:{t:"2024 07 16"}}],["/posts/baeldung/2024-07-17/",{loader:()=>a(()=>import("./index.html-CO2ipHqe.js"),__vite__mapDeps([1646,1])),meta:{t:"2024 07 17"}}],["/posts/baeldung/2024-07-18/",{loader:()=>a(()=>import("./index.html-CzabNg1X.js"),__vite__mapDeps([1647,1])),meta:{t:"2024 07 18"}}],["/posts/baeldung/2024-07-19/",{loader:()=>a(()=>import("./index.html-ConyP7gb.js"),__vite__mapDeps([1648,1])),meta:{t:"2024 07 19"}}],["/posts/baeldung/2024-07-20/",{loader:()=>a(()=>import("./index.html-BkhG84rS.js"),__vite__mapDeps([1649,1])),meta:{t:"2024 07 20"}}],["/posts/baeldung/2024-07-21/",{loader:()=>a(()=>import("./index.html-ywWwayLb.js"),__vite__mapDeps([1650,1])),meta:{t:"2024 07 21"}}],["/posts/baeldung/2024-07-22/",{loader:()=>a(()=>import("./index.html-BgL-9bPp.js"),__vite__mapDeps([1651,1])),meta:{t:"2024 07 22"}}],["/posts/baeldung/2024-07-23/",{loader:()=>a(()=>import("./index.html-BiWM4vpF.js"),__vite__mapDeps([1652,1])),meta:{t:"2024 07 23"}}],["/posts/baeldung/2024-07-24/",{loader:()=>a(()=>import("./index.html-BT6WgWC3.js"),__vite__mapDeps([1653,1])),meta:{t:"2024 07 24"}}],["/posts/baeldung/2024-07-25/",{loader:()=>a(()=>import("./index.html-CitzKiKs.js"),__vite__mapDeps([1654,1])),meta:{t:"2024 07 25"}}],["/posts/baeldung/2024-07-26/",{loader:()=>a(()=>import("./index.html-3Bd9agFS.js"),__vite__mapDeps([1655,1])),meta:{t:"2024 07 26"}}],["/posts/baeldung/2024-07-27/",{loader:()=>a(()=>import("./index.html-CpaB6ShX.js"),__vite__mapDeps([1656,1])),meta:{t:"2024 07 27"}}],["/posts/baeldung/2024-07-28/",{loader:()=>a(()=>import("./index.html-Drum0ilJ.js"),__vite__mapDeps([1657,1])),meta:{t:"2024 07 28"}}],["/posts/baeldung/2024-07-29/",{loader:()=>a(()=>import("./index.html-DLH6YdcT.js"),__vite__mapDeps([1658,1])),meta:{t:"2024 07 29"}}],["/posts/baeldung/Archive/",{loader:()=>a(()=>import("./index.html-D0aMfbwZ.js"),__vite__mapDeps([1659,1])),meta:{t:"Archive"}}],["/category/",{loader:()=>a(()=>import("./index.html-DN7vU131.js"),__vite__mapDeps([1660,1])),meta:{t:"分类",I:!1}}],["/category/java/",{loader:()=>a(()=>import("./index.html-Bu3HG-SJ.js"),__vite__mapDeps([1661,1])),meta:{t:"Java 分类",I:!1}}],["/category/grpc/",{loader:()=>a(()=>import("./index.html-BnJTeRmV.js"),__vite__mapDeps([1662,1])),meta:{t:"gRPC 分类",I:!1}}],["/category/postgresql/",{loader:()=>a(()=>import("./index.html-BQ6MX8Qj.js"),__vite__mapDeps([1663,1])),meta:{t:"PostgreSQL 分类",I:!1}}],["/category/macos/",{loader:()=>a(()=>import("./index.html-d7Hw_ZnO.js"),__vite__mapDeps([1664,1])),meta:{t:"MacOS 分类",I:!1}}],["/category/spring-boot/",{loader:()=>a(()=>import("./index.html-DAkIj-3y.js"),__vite__mapDeps([1665,1])),meta:{t:"Spring Boot 分类",I:!1}}],["/category/junit/",{loader:()=>a(()=>import("./index.html-PucM616g.js"),__vite__mapDeps([1666,1])),meta:{t:"JUnit 分类",I:!1}}],["/category/%E6%95%B0%E5%AD%97%E5%A4%84%E7%90%86/",{loader:()=>a(()=>import("./index.html-DDhJRbx_.js"),__vite__mapDeps([1667,1])),meta:{t:"数字处理 分类",I:!1}}],["/category/jackson/",{loader:()=>a(()=>import("./index.html-BiDWvMci.js"),__vite__mapDeps([1668,1])),meta:{t:"Jackson 分类",I:!1}}],["/category/netty/",{loader:()=>a(()=>import("./index.html-Dq9Bjv65.js"),__vite__mapDeps([1669,1])),meta:{t:"Netty 分类",I:!1}}],["/category/%E7%BC%96%E7%A8%8B/",{loader:()=>a(()=>import("./index.html-KRBxnCrX.js"),__vite__mapDeps([1670,1])),meta:{t:"编程 分类",I:!1}}],["/category/apache-kafka/",{loader:()=>a(()=>import("./index.html-BojmcB-t.js"),__vite__mapDeps([1671,1])),meta:{t:"Apache Kafka 分类",I:!1}}],["/category/groupid-vs-consumerid/",{loader:()=>a(()=>import("./index.html-Djrvzp4s.js"),__vite__mapDeps([1672,1])),meta:{t:"GroupId vs ConsumerId 分类",I:!1}}],["/category/spring/",{loader:()=>a(()=>import("./index.html-OqjRgp5q.js"),__vite__mapDeps([1673,1])),meta:{t:"Spring 分类",I:!1}}],["/category/rest-docs/",{loader:()=>a(()=>import("./index.html-CjgpSVMc.js"),__vite__mapDeps([1674,1])),meta:{t:"REST Docs 分类",I:!1}}],["/category/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/",{loader:()=>a(()=>import("./index.html-Cq2eSid0.js"),__vite__mapDeps([1675,1])),meta:{t:"数据结构 分类",I:!1}}],["/category/%E7%AE%97%E6%B3%95/",{loader:()=>a(()=>import("./index.html-Cfkryg4c.js"),__vite__mapDeps([1676,1])),meta:{t:"算法 分类",I:!1}}],["/category/string-manipulation/",{loader:()=>a(()=>import("./index.html-ckE-My5G.js"),__vite__mapDeps([1677,1])),meta:{t:"String Manipulation 分类",I:!1}}],["/category/gson/",{loader:()=>a(()=>import("./index.html-Dm5Yyj6M.js"),__vite__mapDeps([1678,1])),meta:{t:"Gson 分类",I:!1}}],["/category/aws/",{loader:()=>a(()=>import("./index.html-DPN19fSZ.js"),__vite__mapDeps([1679,1])),meta:{t:"AWS 分类",I:!1}}],["/category/%E6%95%99%E7%A8%8B/",{loader:()=>a(()=>import("./index.html-ArMcQItG.js"),__vite__mapDeps([1680,1])),meta:{t:"教程 分类",I:!1}}],["/category/graphql/",{loader:()=>a(()=>import("./index.html-Cfs1un4g.js"),__vite__mapDeps([1681,1])),meta:{t:"GraphQL 分类",I:!1}}],["/category/rest-with-spring-boot/",{loader:()=>a(()=>import("./index.html-MZuzruaE.js"),__vite__mapDeps([1682,1])),meta:{t:"REST with Spring Boot 分类",I:!1}}],["/category/learn-spring-security/",{loader:()=>a(()=>import("./index.html-CET6aLOI.js"),__vite__mapDeps([1683,1])),meta:{t:"Learn Spring Security 分类",I:!1}}],["/category/spring-security/",{loader:()=>a(()=>import("./index.html-BiAu9fQc.js"),__vite__mapDeps([1684,1])),meta:{t:"Spring Security 分类",I:!1}}],["/category/spring-data-jpa/",{loader:()=>a(()=>import("./index.html-d_xYHwxH.js"),__vite__mapDeps([1685,1])),meta:{t:"Spring Data JPA 分类",I:!1}}],["/category/query-optimization/",{loader:()=>a(()=>import("./index.html-B2fsyBdF.js"),__vite__mapDeps([1686,1])),meta:{t:"Query Optimization 分类",I:!1}}],["/category/kotlin/",{loader:()=>a(()=>import("./index.html-72PbqVGU.js"),__vite__mapDeps([1687,1])),meta:{t:"Kotlin 分类",I:!1}}],["/category/serialization/",{loader:()=>a(()=>import("./index.html-CI25rqXD.js"),__vite__mapDeps([1688,1])),meta:{t:"Serialization 分类",I:!1}}],["/category/jpa/",{loader:()=>a(()=>import("./index.html-BfWasv6o.js"),__vite__mapDeps([1689,1])),meta:{t:"JPA 分类",I:!1}}],["/category/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A7%86%E5%9B%BE/",{loader:()=>a(()=>import("./index.html-CIpgCXXM.js"),__vite__mapDeps([1690,1])),meta:{t:"数据库视图 分类",I:!1}}],["/category/software-engineering/",{loader:()=>a(()=>import("./index.html-C4SVAzT4.js"),__vite__mapDeps([1691,1])),meta:{t:"Software Engineering 分类",I:!1}}],["/category/testing/",{loader:()=>a(()=>import("./index.html-C_ztcBud.js"),__vite__mapDeps([1692,1])),meta:{t:"Testing 分类",I:!1}}],["/category/etcd/",{loader:()=>a(()=>import("./index.html-BPA8GT10.js"),__vite__mapDeps([1693,1])),meta:{t:"etcd 分类",I:!1}}],["/category/hibernate/",{loader:()=>a(()=>import("./index.html-C6ap0YwV.js"),__vite__mapDeps([1694,1])),meta:{t:"Hibernate 分类",I:!1}}],["/category/softdelete/",{loader:()=>a(()=>import("./index.html-DxGmgXrr.js"),__vite__mapDeps([1695,1])),meta:{t:"SoftDelete 分类",I:!1}}],["/category/apache-camel/",{loader:()=>a(()=>import("./index.html-BTWocShe.js"),__vite__mapDeps([1696,1])),meta:{t:"Apache Camel 分类",I:!1}}],["/category/base64/",{loader:()=>a(()=>import("./index.html-JkBGSMHO.js"),__vite__mapDeps([1697,1])),meta:{t:"Base64 分类",I:!1}}],["/category/string-algorithms/",{loader:()=>a(()=>import("./index.html-B1n-svO2.js"),__vite__mapDeps([1698,1])),meta:{t:"String Algorithms 分类",I:!1}}],["/category/%E5%AD%97%E7%AC%A6%E4%B8%B2/",{loader:()=>a(()=>import("./index.html-edhn42lL.js"),__vite__mapDeps([1699,1])),meta:{t:"字符串 分类",I:!1}}],["/category/tutorial/",{loader:()=>a(()=>import("./index.html-_3YCuTlx.js"),__vite__mapDeps([1700,1])),meta:{t:"Tutorial 分类",I:!1}}],["/category/completablefuture/",{loader:()=>a(()=>import("./index.html-q2-FxPrc.js"),__vite__mapDeps([1701,1])),meta:{t:"CompletableFuture 分类",I:!1}}],["/category/date-time/",{loader:()=>a(()=>import("./index.html-HOrlPP9j.js"),__vite__mapDeps([1702,1])),meta:{t:"Date-Time 分类",I:!1}}],["/category/concurrency/",{loader:()=>a(()=>import("./index.html-CiYKMHOL.js"),__vite__mapDeps([1703,1])),meta:{t:"Concurrency 分类",I:!1}}],["/category/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/",{loader:()=>a(()=>import("./index.html-qvfF1C56.js"),__vite__mapDeps([1704,1])),meta:{t:"网络编程 分类",I:!1}}],["/category/%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/",{loader:()=>a(()=>import("./index.html-CKRAtik5.js"),__vite__mapDeps([1705,1])),meta:{t:"编程技巧 分类",I:!1}}],["/category/algorithm/",{loader:()=>a(()=>import("./index.html-3x3SRXz8.js"),__vite__mapDeps([1706,1])),meta:{t:"Algorithm 分类",I:!1}}],["/category/pagination/",{loader:()=>a(()=>import("./index.html-CJtVbsmH.js"),__vite__mapDeps([1707,1])),meta:{t:"Pagination 分类",I:!1}}],["/category/thymeleaf/",{loader:()=>a(()=>import("./index.html-DN0aGa3h.js"),__vite__mapDeps([1708,1])),meta:{t:"Thymeleaf 分类",I:!1}}],["/category/junit-5/",{loader:()=>a(()=>import("./index.html-BYGuUFSz.js"),__vite__mapDeps([1709,1])),meta:{t:"JUnit 5 分类",I:!1}}],["/category/mockito/",{loader:()=>a(()=>import("./index.html-auimAPuF.js"),__vite__mapDeps([1710,1])),meta:{t:"Mockito 分类",I:!1}}],["/category/openjdk/",{loader:()=>a(()=>import("./index.html-BhQXnyVL.js"),__vite__mapDeps([1711,1])),meta:{t:"OpenJDK 分类",I:!1}}],["/category/windows/",{loader:()=>a(()=>import("./index.html-BikauQxF.js"),__vite__mapDeps([1712,1])),meta:{t:"Windows 分类",I:!1}}],["/category/opengrok/",{loader:()=>a(()=>import("./index.html-PAd4-D8P.js"),__vite__mapDeps([1713,1])),meta:{t:"OpenGrok 分类",I:!1}}],["/category/%E4%BB%A3%E7%A0%81%E6%90%9C%E7%B4%A2/",{loader:()=>a(()=>import("./index.html-ubZ2puiJ.js"),__vite__mapDeps([1714,1])),meta:{t:"代码搜索 分类",I:!1}}],["/category/aop/",{loader:()=>a(()=>import("./index.html-6BvKMIhC.js"),__vite__mapDeps([1715,1])),meta:{t:"AOP 分类",I:!1}}],["/category/arrays/",{loader:()=>a(()=>import("./index.html-EBqrIIWB.js"),__vite__mapDeps([1716,1])),meta:{t:"Arrays 分类",I:!1}}],["/category/spring-cloud/",{loader:()=>a(()=>import("./index.html-GWEI9VVe.js"),__vite__mapDeps([1717,1])),meta:{t:"Spring Cloud 分类",I:!1}}],["/category/oauth2/",{loader:()=>a(()=>import("./index.html-BZsZivR7.js"),__vite__mapDeps([1718,1])),meta:{t:"OAuth2 分类",I:!1}}],["/category/jdbc/",{loader:()=>a(()=>import("./index.html-CvttUJF3.js"),__vite__mapDeps([1719,1])),meta:{t:"JDBC 分类",I:!1}}],["/category/programming/",{loader:()=>a(()=>import("./index.html-BVLUW6pb.js"),__vite__mapDeps([1720,1])),meta:{t:"Programming 分类",I:!1}}],["/category/quarkus/",{loader:()=>a(()=>import("./index.html-eQ7FutSZ.js"),__vite__mapDeps([1721,1])),meta:{t:"Quarkus 分类",I:!1}}],["/category/maven/",{loader:()=>a(()=>import("./index.html-Zjg31sQZ.js"),__vite__mapDeps([1722,1])),meta:{t:"Maven 分类",I:!1}}],["/category/web-server/",{loader:()=>a(()=>import("./index.html-CCowZIbr.js"),__vite__mapDeps([1723,1])),meta:{t:"Web Server 分类",I:!1}}],["/category/uuid/",{loader:()=>a(()=>import("./index.html-D7eGawHM.js"),__vite__mapDeps([1724,1])),meta:{t:"UUID 分类",I:!1}}],["/category/url%E7%BC%96%E7%A0%81/",{loader:()=>a(()=>import("./index.html-CTpqi3-t.js"),__vite__mapDeps([1725,1])),meta:{t:"URL编码 分类",I:!1}}],["/category/kafka/",{loader:()=>a(()=>import("./index.html-C4cGAXkp.js"),__vite__mapDeps([1726,1])),meta:{t:"Kafka 分类",I:!1}}],["/category/spring-batch/",{loader:()=>a(()=>import("./index.html-Bx7kt5Rb.js"),__vite__mapDeps([1727,1])),meta:{t:"Spring Batch 分类",I:!1}}],["/category/apache-poi/",{loader:()=>a(()=>import("./index.html-CYLwlmPQ.js"),__vite__mapDeps([1728,1])),meta:{t:"Apache POI 分类",I:!1}}],["/category/excel/",{loader:()=>a(()=>import("./index.html-rAcFOQC3.js"),__vite__mapDeps([1729,1])),meta:{t:"Excel 分类",I:!1}}],["/category/%E6%97%A5%E6%9C%9F%E8%BD%AC%E6%8D%A2/",{loader:()=>a(()=>import("./index.html-B7D64uLh.js"),__vite__mapDeps([1730,1])),meta:{t:"日期转换 分类",I:!1}}],["/category/%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4/",{loader:()=>a(()=>import("./index.html-BrSVycBL.js"),__vite__mapDeps([1731,1])),meta:{t:"日期时间 分类",I:!1}}],["/category/xmlgregoriancalendar/",{loader:()=>a(()=>import("./index.html-BnJYXP8Z.js"),__vite__mapDeps([1732,1])),meta:{t:"XMLGregorianCalendar 分类",I:!1}}],["/category/unicode/",{loader:()=>a(()=>import("./index.html-C3ikuDS3.js"),__vite__mapDeps([1733,1])),meta:{t:"Unicode 分类",I:!1}}],["/category/webflux/",{loader:()=>a(()=>import("./index.html-CHxZeCtn.js"),__vite__mapDeps([1734,1])),meta:{t:"WebFlux 分类",I:!1}}],["/category/%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/",{loader:()=>a(()=>import("./index.html-DEICmUu_.js"),__vite__mapDeps([1735,1])),meta:{t:"构建工具 分类",I:!1}}],["/category/ssl/",{loader:()=>a(()=>import("./index.html-BPgRl3zN.js"),__vite__mapDeps([1736,1])),meta:{t:"SSL 分类",I:!1}}],["/category/microservices/",{loader:()=>a(()=>import("./index.html-qRP1efbt.js"),__vite__mapDeps([1737,1])),meta:{t:"Microservices 分类",I:!1}}],["/category/event-driven-architecture/",{loader:()=>a(()=>import("./index.html-DqPTz8Td.js"),__vite__mapDeps([1738,1])),meta:{t:"Event-Driven Architecture 分类",I:!1}}],["/category/spring-modulith/",{loader:()=>a(()=>import("./index.html-BifoanR9.js"),__vite__mapDeps([1739,1])),meta:{t:"Spring Modulith 分类",I:!1}}],["/category/event-externalization/",{loader:()=>a(()=>import("./index.html-By1SeUeL.js"),__vite__mapDeps([1740,1])),meta:{t:"Event Externalization 分类",I:!1}}],["/category/securerandom/",{loader:()=>a(()=>import("./index.html-BNvOypZc.js"),__vite__mapDeps([1741,1])),meta:{t:"SecureRandom 分类",I:!1}}],["/category/%E7%BC%96%E7%A0%81/",{loader:()=>a(()=>import("./index.html-YF7Wupgl.js"),__vite__mapDeps([1742,1])),meta:{t:"编码 分类",I:!1}}],["/category/kubernetes/",{loader:()=>a(()=>import("./index.html-DKl-EHso.js"),__vite__mapDeps([1743,1])),meta:{t:"Kubernetes 分类",I:!1}}],["/category/networking/",{loader:()=>a(()=>import("./index.html-BCleoc1A.js"),__vite__mapDeps([1744,1])),meta:{t:"Networking 分类",I:!1}}],["/category/spock/",{loader:()=>a(()=>import("./index.html-Dn7d242M.js"),__vite__mapDeps([1745,1])),meta:{t:"Spock 分类",I:!1}}],["/category/spring-jpa/",{loader:()=>a(()=>import("./index.html-CkLwwA0G.js"),__vite__mapDeps([1746,1])),meta:{t:"Spring JPA 分类",I:!1}}],["/category/backend-javaspring-team-lead/",{loader:()=>a(()=>import("./index.html-6JNkRHk-.js"),__vite__mapDeps([1747,1])),meta:{t:"Backend Java/Spring Team Lead 分类",I:!1}}],["/category/remote-job/",{loader:()=>a(()=>import("./index.html-CvTM_-WV.js"),__vite__mapDeps([1748,1])),meta:{t:"Remote Job 分类",I:!1}}],["/category/web%E5%BC%80%E5%8F%91/",{loader:()=>a(()=>import("./index.html-c-qMZ7_l.js"),__vite__mapDeps([1749,1])),meta:{t:"Web开发 分类",I:!1}}],["/category/%E5%A4%9A%E7%BA%BF%E7%A8%8B/",{loader:()=>a(()=>import("./index.html-Blj5BE7H.js"),__vite__mapDeps([1750,1])),meta:{t:"多线程 分类",I:!1}}],["/category/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/",{loader:()=>a(()=>import("./index.html-BAHhA2A7.js"),__vite__mapDeps([1751,1])),meta:{t:"正则表达式 分类",I:!1}}],["/category/listiterator/",{loader:()=>a(()=>import("./index.html-rmZd1Bh3.js"),__vite__mapDeps([1752,1])),meta:{t:"ListIterator 分类",I:!1}}],["/category/%E6%95%B0%E6%8D%AE%E5%8E%8B%E7%BC%A9/",{loader:()=>a(()=>import("./index.html-DbeFpE4u.js"),__vite__mapDeps([1753,1])),meta:{t:"数据压缩 分类",I:!1}}],["/category/environment-variables/",{loader:()=>a(()=>import("./index.html-D0RW5468.js"),__vite__mapDeps([1754,1])),meta:{t:"Environment Variables 分类",I:!1}}],["/category/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/",{loader:()=>a(()=>import("./index.html-936qCcDM.js"),__vite__mapDeps([1755,1])),meta:{t:"内存管理 分类",I:!1}}],["/category/morse-code/",{loader:()=>a(()=>import("./index.html-BK4PXoCV.js"),__vite__mapDeps([1756,1])),meta:{t:"Morse Code 分类",I:!1}}],["/category/oauth/",{loader:()=>a(()=>import("./index.html-Cs7WeL_z.js"),__vite__mapDeps([1757,1])),meta:{t:"OAuth 分类",I:!1}}],["/category/2d-geometry/",{loader:()=>a(()=>import("./index.html-aSlVh9e0.js"),__vite__mapDeps([1758,1])),meta:{t:"2D Geometry 分类",I:!1}}],["/category/joda-time/",{loader:()=>a(()=>import("./index.html-LLxyRKsy.js"),__vite__mapDeps([1759,1])),meta:{t:"Joda-Time 分类",I:!1}}],["/category/bigdecimal/",{loader:()=>a(()=>import("./index.html-BxMWkUDy.js"),__vite__mapDeps([1760,1])),meta:{t:"BigDecimal 分类",I:!1}}],["/category/reactive-apis/",{loader:()=>a(()=>import("./index.html-5Jtg7oMh.js"),__vite__mapDeps([1761,1])),meta:{t:"Reactive APIs 分类",I:!1}}],["/category/micronaut/",{loader:()=>a(()=>import("./index.html-D2RiqvEP.js"),__vite__mapDeps([1762,1])),meta:{t:"Micronaut 分类",I:!1}}],["/category/mongodb/",{loader:()=>a(()=>import("./index.html-Dq4Wt4S7.js"),__vite__mapDeps([1763,1])),meta:{t:"MongoDB 分类",I:!1}}],["/category/jvm/",{loader:()=>a(()=>import("./index.html-Do15sdQr.js"),__vite__mapDeps([1764,1])),meta:{t:"JVM 分类",I:!1}}],["/category/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/",{loader:()=>a(()=>import("./index.html-9ApUysAo.js"),__vite__mapDeps([1765,1])),meta:{t:"垃圾收集器 分类",I:!1}}],["/category/spring-mvc/",{loader:()=>a(()=>import("./index.html-Czqw4Vn6.js"),__vite__mapDeps([1766,1])),meta:{t:"Spring MVC 分类",I:!1}}],["/category/apache-calcite/",{loader:()=>a(()=>import("./index.html-DfvCj0MC.js"),__vite__mapDeps([1767,1])),meta:{t:"Apache Calcite 分类",I:!1}}],["/category/postman/",{loader:()=>a(()=>import("./index.html-xl25ewGv.js"),__vite__mapDeps([1768,1])),meta:{t:"Postman 分类",I:!1}}],["/category/spring-ai/",{loader:()=>a(()=>import("./index.html-D-y6VJYA.js"),__vite__mapDeps([1769,1])),meta:{t:"Spring AI 分类",I:!1}}],["/category/baeldung/",{loader:()=>a(()=>import("./index.html-Bd0TVy5w.js"),__vite__mapDeps([1770,1])),meta:{t:"Baeldung 分类",I:!1}}],["/category/spring-cloud-aws/",{loader:()=>a(()=>import("./index.html-C7VsagT0.js"),__vite__mapDeps([1771,1])),meta:{t:"Spring Cloud AWS 分类",I:!1}}],["/category/sqs-integration/",{loader:()=>a(()=>import("./index.html-CpqH5kkA.js"),__vite__mapDeps([1772,1])),meta:{t:"SQS Integration 分类",I:!1}}],["/category/stream-api/",{loader:()=>a(()=>import("./index.html-CbLLD-qM.js"),__vite__mapDeps([1773,1])),meta:{t:"Stream API 分类",I:!1}}],["/category/https/",{loader:()=>a(()=>import("./index.html-B6Q5sbvq.js"),__vite__mapDeps([1774,1])),meta:{t:"HTTPS 分类",I:!1}}],["/category/priorityqueue/",{loader:()=>a(()=>import("./index.html-D0yTd2CK.js"),__vite__mapDeps([1775,1])),meta:{t:"PriorityQueue 分类",I:!1}}],["/category/%E8%BE%93%E5%85%A5%E5%A4%84%E7%90%86/",{loader:()=>a(()=>import("./index.html-DmI_Znex.js"),__vite__mapDeps([1776,1])),meta:{t:"输入处理 分类",I:!1}}],["/category/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/",{loader:()=>a(()=>import("./index.html-DFExVd6i.js"),__vite__mapDeps([1777,1])),meta:{t:"字符串操作 分类",I:!1}}],["/category/spring-webflux/",{loader:()=>a(()=>import("./index.html-CHJkw4tH.js"),__vite__mapDeps([1778,1])),meta:{t:"Spring WebFlux 分类",I:!1}}],["/category/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/",{loader:()=>a(()=>import("./index.html-0GcwcnSq.js"),__vite__mapDeps([1779,1])),meta:{t:"文件上传 分类",I:!1}}],["/category/json/",{loader:()=>a(()=>import("./index.html-DCzQa_Bu.js"),__vite__mapDeps([1780,1])),meta:{t:"JSON 分类",I:!1}}],["/category/spel/",{loader:()=>a(()=>import("./index.html-CIbnRXPx.js"),__vite__mapDeps([1781,1])),meta:{t:"SpEL 分类",I:!1}}],["/category/%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4%E8%AE%A1%E7%AE%97/",{loader:()=>a(()=>import("./index.html-S703O7XO.js"),__vite__mapDeps([1782,1])),meta:{t:"日期时间计算 分类",I:!1}}],["/category/stringbuilder/",{loader:()=>a(()=>import("./index.html-BiEaINH3.js"),__vite__mapDeps([1783,1])),meta:{t:"StringBuilder 分类",I:!1}}],["/category/io/",{loader:()=>a(()=>import("./index.html-Nl22vAnH.js"),__vite__mapDeps([1784,1])),meta:{t:"IO 分类",I:!1}}],["/category/algorithms/",{loader:()=>a(()=>import("./index.html-B6F1xqyU.js"),__vite__mapDeps([1785,1])),meta:{t:"Algorithms 分类",I:!1}}],["/category/%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/",{loader:()=>a(()=>import("./index.html-p_9WxE6a.js"),__vite__mapDeps([1786,1])),meta:{t:"文件处理 分类",I:!1}}],["/category/%E6%95%B0%E7%BB%84/",{loader:()=>a(()=>import("./index.html-DXkA9JQV.js"),__vite__mapDeps([1787,1])),meta:{t:"数组 分类",I:!1}}],["/category/queryexception/",{loader:()=>a(()=>import("./index.html-PrnE1vaF.js"),__vite__mapDeps([1788,1])),meta:{t:"QueryException 分类",I:!1}}],["/category/iso-8601/",{loader:()=>a(()=>import("./index.html-BY8ZvK_P.js"),__vite__mapDeps([1789,1])),meta:{t:"ISO 8601 分类",I:!1}}],["/category/reflection/",{loader:()=>a(()=>import("./index.html-BMfuaQ4K.js"),__vite__mapDeps([1790,1])),meta:{t:"Reflection 分类",I:!1}}],["/category/outputstream/",{loader:()=>a(()=>import("./index.html-CL4wxJbl.js"),__vite__mapDeps([1791,1])),meta:{t:"OutputStream 分类",I:!1}}],["/category/%E6%80%A7%E8%83%BD/",{loader:()=>a(()=>import("./index.html-DjNy3bKN.js"),__vite__mapDeps([1792,1])),meta:{t:"性能 分类",I:!1}}],["/category/%E5%88%86%E5%8C%BA/",{loader:()=>a(()=>import("./index.html-N-QcioaN.js"),__vite__mapDeps([1793,1])),meta:{t:"分区 分类",I:!1}}],["/category/utf-8/",{loader:()=>a(()=>import("./index.html-C2ZCrhOB.js"),__vite__mapDeps([1794,1])),meta:{t:"UTF-8 分类",I:!1}}],["/category/crud/",{loader:()=>a(()=>import("./index.html-BRG5vRti.js"),__vite__mapDeps([1795,1])),meta:{t:"CRUD 分类",I:!1}}],["/category/timefold-solver/",{loader:()=>a(()=>import("./index.html-Ws_8W59g.js"),__vite__mapDeps([1796,1])),meta:{t:"Timefold Solver 分类",I:!1}}],["/category/error-prone/",{loader:()=>a(()=>import("./index.html-DtuPT50x.js"),__vite__mapDeps([1797,1])),meta:{t:"Error Prone 分类",I:!1}}],["/category/security/",{loader:()=>a(()=>import("./index.html-Dd58JXb7.js"),__vite__mapDeps([1798,1])),meta:{t:"Security 分类",I:!1}}],["/category/database/",{loader:()=>a(()=>import("./index.html-BvacTolL.js"),__vite__mapDeps([1799,1])),meta:{t:"Database 分类",I:!1}}],["/category/intellij-idea/",{loader:()=>a(()=>import("./index.html-l3oGguAn.js"),__vite__mapDeps([1800,1])),meta:{t:"IntelliJ IDEA 分类",I:!1}}],["/category/localdatetime/",{loader:()=>a(()=>import("./index.html-BDTIs44n.js"),__vite__mapDeps([1801,1])),meta:{t:"LocalDateTime 分类",I:!1}}],["/category/xml/",{loader:()=>a(()=>import("./index.html-f67KO9SA.js"),__vite__mapDeps([1802,1])),meta:{t:"XML 分类",I:!1}}],["/category/csv/",{loader:()=>a(()=>import("./index.html-DOBrcCsL.js"),__vite__mapDeps([1803,1])),meta:{t:"CSV 分类",I:!1}}],["/category/software-development/",{loader:()=>a(()=>import("./index.html-CpsXvReW.js"),__vite__mapDeps([1804,1])),meta:{t:"Software Development 分类",I:!1}}],["/category/streams/",{loader:()=>a(()=>import("./index.html-DQhYiB-F.js"),__vite__mapDeps([1805,1])),meta:{t:"Streams 分类",I:!1}}],["/category/exception-handling/",{loader:()=>a(()=>import("./index.html-CTdrwDqf.js"),__vite__mapDeps([1806,1])),meta:{t:"Exception Handling 分类",I:!1}}],["/category/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/",{loader:()=>a(()=>import("./index.html-DZ3rdpK2.js"),__vite__mapDeps([1807,1])),meta:{t:"异步编程 分类",I:!1}}],["/category/gui/",{loader:()=>a(()=>import("./index.html-CV-D8V4M.js"),__vite__mapDeps([1808,1])),meta:{t:"GUI 分类",I:!1}}],["/category/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/",{loader:()=>a(()=>import("./index.html-CVTHsh3K.js"),__vite__mapDeps([1809,1])),meta:{t:"集合框架 分类",I:!1}}],["/category/coroutines/",{loader:()=>a(()=>import("./index.html-D-I_038-.js"),__vite__mapDeps([1810,1])),meta:{t:"Coroutines 分类",I:!1}}],["/category/gradle/",{loader:()=>a(()=>import("./index.html-DaVg8HpO.js"),__vite__mapDeps([1811,1])),meta:{t:"Gradle 分类",I:!1}}],["/category/unix-time/",{loader:()=>a(()=>import("./index.html-Dymk9rtC.js"),__vite__mapDeps([1812,1])),meta:{t:"Unix Time 分类",I:!1}}],["/category/asynchronous-programming/",{loader:()=>a(()=>import("./index.html-BjYEDWQc.js"),__vite__mapDeps([1813,1])),meta:{t:"Asynchronous Programming 分类",I:!1}}],["/category/inputstream/",{loader:()=>a(()=>import("./index.html-BQQih2vT.js"),__vite__mapDeps([1814,1])),meta:{t:"InputStream 分类",I:!1}}],["/category/spring-kafka/",{loader:()=>a(()=>import("./index.html-BZQcGRDN.js"),__vite__mapDeps([1815,1])),meta:{t:"Spring Kafka 分类",I:!1}}],["/category/trusted-packages/",{loader:()=>a(()=>import("./index.html-C3vH4Nk-.js"),__vite__mapDeps([1816,1])),meta:{t:"Trusted Packages 分类",I:!1}}],["/category/harperdb/",{loader:()=>a(()=>import("./index.html-KTW73dhw.js"),__vite__mapDeps([1817,1])),meta:{t:"HarperDB 分类",I:!1}}],["/category/jersey/",{loader:()=>a(()=>import("./index.html-DGWzNMox.js"),__vite__mapDeps([1818,1])),meta:{t:"Jersey 分类",I:!1}}],["/category/testing-_-debugging/",{loader:()=>a(()=>import("./index.html-ChjV_Y4T.js"),__vite__mapDeps([1819,1])),meta:{t:"Testing & Debugging 分类",I:!1}}],["/category/coroutine/",{loader:()=>a(()=>import("./index.html-C5q8oVuq.js"),__vite__mapDeps([1820,1])),meta:{t:"Coroutine 分类",I:!1}}],["/category/jep-290/",{loader:()=>a(()=>import("./index.html-DqJpIOc_.js"),__vite__mapDeps([1821,1])),meta:{t:"JEP 290 分类",I:!1}}],["/category/jep-415/",{loader:()=>a(()=>import("./index.html-eACp7TfO.js"),__vite__mapDeps([1822,1])),meta:{t:"JEP 415 分类",I:!1}}],["/category/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/",{loader:()=>a(()=>import("./index.html-XbhWRkKC.js"),__vite__mapDeps([1823,1])),meta:{t:"文件操作 分类",I:!1}}],["/category/ascii/",{loader:()=>a(()=>import("./index.html-8KG2Lo1C.js"),__vite__mapDeps([1824,1])),meta:{t:"ASCII 分类",I:!1}}],["/category/quartz/",{loader:()=>a(()=>import("./index.html-DjNd-VsB.js"),__vite__mapDeps([1825,1])),meta:{t:"Quartz 分类",I:!1}}],["/category/%E6%B6%88%E6%81%AF%E6%8E%92%E5%BA%8F/",{loader:()=>a(()=>import("./index.html-W2mRgEHZ.js"),__vite__mapDeps([1826,1])),meta:{t:"消息排序 分类",I:!1}}],["/category/development-tools/",{loader:()=>a(()=>import("./index.html-CzmW8V2p.js"),__vite__mapDeps([1827,1])),meta:{t:"Development Tools 分类",I:!1}}],["/category/configuration/",{loader:()=>a(()=>import("./index.html-Dsw8AJpx.js"),__vite__mapDeps([1828,1])),meta:{t:"Configuration 分类",I:!1}}],["/category/collections/",{loader:()=>a(()=>import("./index.html-2qFlYNzi.js"),__vite__mapDeps([1829,1])),meta:{t:"Collections 分类",I:!1}}],["/category/consumer-groups/",{loader:()=>a(()=>import("./index.html-CuWdbzYz.js"),__vite__mapDeps([1830,1])),meta:{t:"Consumer Groups 分类",I:!1}}],["/category/date/",{loader:()=>a(()=>import("./index.html-swvZcfsd.js"),__vite__mapDeps([1831,1])),meta:{t:"Date 分类",I:!1}}],["/category/date-time-api/",{loader:()=>a(()=>import("./index.html-Bxrwy9d7.js"),__vite__mapDeps([1832,1])),meta:{t:"Date-Time API 分类",I:!1}}],["/category/%E5%86%85%E5%AD%98%E5%85%B1%E4%BA%AB/",{loader:()=>a(()=>import("./index.html-DzxYQ1F-.js"),__vite__mapDeps([1833,1])),meta:{t:"内存共享 分类",I:!1}}],["/category/%E6%8E%92%E5%BA%8F/",{loader:()=>a(()=>import("./index.html-BT_kqRi9.js"),__vite__mapDeps([1834,1])),meta:{t:"排序 分类",I:!1}}],["/category/selenium-webdriver/",{loader:()=>a(()=>import("./index.html-CnHKk7HO.js"),__vite__mapDeps([1835,1])),meta:{t:"Selenium WebDriver 分类",I:!1}}],["/category/reactive-programming/",{loader:()=>a(()=>import("./index.html-CUjHzgJP.js"),__vite__mapDeps([1836,1])),meta:{t:"Reactive Programming 分类",I:!1}}],["/category/annotation/",{loader:()=>a(()=>import("./index.html-DTbv-xXi.js"),__vite__mapDeps([1837,1])),meta:{t:"Annotation 分类",I:!1}}],["/category/restclient/",{loader:()=>a(()=>import("./index.html-DvfZ48qn.js"),__vite__mapDeps([1838,1])),meta:{t:"RestClient 分类",I:!1}}],["/category/spring-framework/",{loader:()=>a(()=>import("./index.html-z3vcw6Yv.js"),__vite__mapDeps([1839,1])),meta:{t:"Spring Framework 分类",I:!1}}],["/category/glassfish/",{loader:()=>a(()=>import("./index.html-DIzqxj_n.js"),__vite__mapDeps([1840,1])),meta:{t:"GlassFish 分类",I:!1}}],["/category/eclipse/",{loader:()=>a(()=>import("./index.html-ClcGb4VU.js"),__vite__mapDeps([1841,1])),meta:{t:"Eclipse 分类",I:!1}}],["/category/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",{loader:()=>a(()=>import("./index.html-DYUjOs8y.js"),__vite__mapDeps([1842,1])),meta:{t:"设计模式 分类",I:!1}}],["/category/text-processing/",{loader:()=>a(()=>import("./index.html-KgWjzdxO.js"),__vite__mapDeps([1843,1])),meta:{t:"Text Processing 分类",I:!1}}],["/category/java-collections/",{loader:()=>a(()=>import("./index.html-6dq9qsgJ.js"),__vite__mapDeps([1844,1])),meta:{t:"Java Collections 分类",I:!1}}],["/category/linkedhashmap/",{loader:()=>a(()=>import("./index.html-YVZS8eGd.js"),__vite__mapDeps([1845,1])),meta:{t:"LinkedHashMap 分类",I:!1}}],["/category/testcontainers/",{loader:()=>a(()=>import("./index.html-Cu-Le0Ei.js"),__vite__mapDeps([1846,1])),meta:{t:"Testcontainers 分类",I:!1}}],["/category/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/",{loader:()=>a(()=>import("./index.html-Cf9nrcd6.js"),__vite__mapDeps([1847,1])),meta:{t:"环境变量 分类",I:!1}}],["/category/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/",{loader:()=>a(()=>import("./index.html-CQ-WWvsJ.js"),__vite__mapDeps([1848,1])),meta:{t:"游戏开发 分类",I:!1}}],["/category/collections-framework/",{loader:()=>a(()=>import("./index.html-B0NCfLlg.js"),__vite__mapDeps([1849,1])),meta:{t:"Collections Framework 分类",I:!1}}],["/category/language-models/",{loader:()=>a(()=>import("./index.html-DTbtiTdO.js"),__vite__mapDeps([1850,1])),meta:{t:"Language Models 分类",I:!1}}],["/category/jndi/",{loader:()=>a(()=>import("./index.html-Ci95EHiT.js"),__vite__mapDeps([1851,1])),meta:{t:"JNDI 分类",I:!1}}],["/category/rest/",{loader:()=>a(()=>import("./index.html-U3IjQZRg.js"),__vite__mapDeps([1852,1])),meta:{t:"REST 分类",I:!1}}],["/category/%E5%9B%BD%E9%99%85%E5%8C%96/",{loader:()=>a(()=>import("./index.html-DjNp8ppw.js"),__vite__mapDeps([1853,1])),meta:{t:"国际化 分类",I:!1}}],["/category/optional/",{loader:()=>a(()=>import("./index.html-BQY-0kkD.js"),__vite__mapDeps([1854,1])),meta:{t:"Optional 分类",I:!1}}],["/category/cucumber/",{loader:()=>a(()=>import("./index.html-BLPYSlqK.js"),__vite__mapDeps([1855,1])),meta:{t:"Cucumber 分类",I:!1}}],["/category/string/",{loader:()=>a(()=>import("./index.html-C8_flujd.js"),__vite__mapDeps([1856,1])),meta:{t:"String 分类",I:!1}}],["/category/tutorials/",{loader:()=>a(()=>import("./index.html-CDnEToIL.js"),__vite__mapDeps([1857,1])),meta:{t:"Tutorials 分类",I:!1}}],["/category/connection-details/",{loader:()=>a(()=>import("./index.html-BoJdt1Sl.js"),__vite__mapDeps([1858,1])),meta:{t:"Connection Details 分类",I:!1}}],["/category/graalvm/",{loader:()=>a(()=>import("./index.html-DyUX1Kv2.js"),__vite__mapDeps([1859,1])),meta:{t:"GraalVM 分类",I:!1}}],["/category/arraylist/",{loader:()=>a(()=>import("./index.html-LW7jZI0O.js"),__vite__mapDeps([1860,1])),meta:{t:"ArrayList 分类",I:!1}}],["/category/collection/",{loader:()=>a(()=>import("./index.html-6nQ0M5Zq.js"),__vite__mapDeps([1861,1])),meta:{t:"Collection 分类",I:!1}}],["/category/%E6%95%B0%E5%AD%A6%E8%BF%90%E7%AE%97/",{loader:()=>a(()=>import("./index.html-BhKc-nJy.js"),__vite__mapDeps([1862,1])),meta:{t:"数学运算 分类",I:!1}}],["/category/mime%E7%B1%BB%E5%9E%8B/",{loader:()=>a(()=>import("./index.html-GDj8xn--.js"),__vite__mapDeps([1863,1])),meta:{t:"MIME类型 分类",I:!1}}],["/category/%E5%8F%8D%E5%B0%84/",{loader:()=>a(()=>import("./index.html-Kbnfj2Q_.js"),__vite__mapDeps([1864,1])),meta:{t:"反射 分类",I:!1}}],["/category/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/",{loader:()=>a(()=>import("./index.html-IALsur4W.js"),__vite__mapDeps([1865,1])),meta:{t:"高阶函数 分类",I:!1}}],["/category/rsocket/",{loader:()=>a(()=>import("./index.html-WqQNYQGM.js"),__vite__mapDeps([1866,1])),meta:{t:"RSocket 分类",I:!1}}],["/category/docker/",{loader:()=>a(()=>import("./index.html--YWS82u5.js"),__vite__mapDeps([1867,1])),meta:{t:"Docker 分类",I:!1}}],["/category/string-templates/",{loader:()=>a(()=>import("./index.html-iurfsrn5.js"),__vite__mapDeps([1868,1])),meta:{t:"String Templates 分类",I:!1}}],["/category/devops/",{loader:()=>a(()=>import("./index.html-BvG_4VKS.js"),__vite__mapDeps([1869,1])),meta:{t:"DevOps 分类",I:!1}}],["/category/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/",{loader:()=>a(()=>import("./index.html-CA9GhMWr.js"),__vite__mapDeps([1870,1])),meta:{t:"版本控制 分类",I:!1}}],["/category/apache-commons-lang/",{loader:()=>a(()=>import("./index.html-Q8YLvXIX.js"),__vite__mapDeps([1871,1])),meta:{t:"Apache Commons Lang 分类",I:!1}}],["/category/validation/",{loader:()=>a(()=>import("./index.html-C62lR2MK.js"),__vite__mapDeps([1872,1])),meta:{t:"Validation 分类",I:!1}}],["/category/log4j/",{loader:()=>a(()=>import("./index.html-BaAMLo9T.js"),__vite__mapDeps([1873,1])),meta:{t:"Log4j 分类",I:!1}}],["/category/date-and-time/",{loader:()=>a(()=>import("./index.html-T2n0uUvN.js"),__vite__mapDeps([1874,1])),meta:{t:"Date and Time 分类",I:!1}}],["/category/tomcat/",{loader:()=>a(()=>import("./index.html-l17N1UC4.js"),__vite__mapDeps([1875,1])),meta:{t:"Tomcat 分类",I:!1}}],["/category/emoji/",{loader:()=>a(()=>import("./index.html-BCMnxnRY.js"),__vite__mapDeps([1876,1])),meta:{t:"Emoji 分类",I:!1}}],["/category/java-8/",{loader:()=>a(()=>import("./index.html-2fK_n1O1.js"),__vite__mapDeps([1877,1])),meta:{t:"Java 8 分类",I:!1}}],["/category/regex/",{loader:()=>a(()=>import("./index.html-BcAODoD-.js"),__vite__mapDeps([1878,1])),meta:{t:"Regex 分类",I:!1}}],["/category/io/",{loader:()=>a(()=>import("./index.html-Nl22vAnH.js"),__vite__mapDeps([1784,1])),meta:{t:"I/O 分类",I:!1}}],["/category/%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7/",{loader:()=>a(()=>import("./index.html-CgKAMCgf.js"),__vite__mapDeps([1879,1])),meta:{t:"性能监控 分类",I:!1}}],["/category/yaml/",{loader:()=>a(()=>import("./index.html-C8pHND-q.js"),__vite__mapDeps([1880,1])),meta:{t:"YAML 分类",I:!1}}],["/category/cache/",{loader:()=>a(()=>import("./index.html-DZnkEx0P.js"),__vite__mapDeps([1881,1])),meta:{t:"Cache 分类",I:!1}}],["/category/log4j2/",{loader:()=>a(()=>import("./index.html-JuROhDOZ.js"),__vite__mapDeps([1882,1])),meta:{t:"Log4j2 分类",I:!1}}],["/category/spring-data-cassandra/",{loader:()=>a(()=>import("./index.html-C-jYv8yJ.js"),__vite__mapDeps([1883,1])),meta:{t:"Spring Data Cassandra 分类",I:!1}}],["/category/query-in-clause/",{loader:()=>a(()=>import("./index.html-D8D7W4Jo.js"),__vite__mapDeps([1884,1])),meta:{t:"Query IN Clause 分类",I:!1}}],["/category/stream/",{loader:()=>a(()=>import("./index.html-8kUvN36u.js"),__vite__mapDeps([1885,1])),meta:{t:"Stream 分类",I:!1}}],["/category/telegram-bot/",{loader:()=>a(()=>import("./index.html--gverB38.js"),__vite__mapDeps([1886,1])),meta:{t:"Telegram Bot 分类",I:!1}}],["/category/sql/",{loader:()=>a(()=>import("./index.html-DrPlasoE.js"),__vite__mapDeps([1887,1])),meta:{t:"SQL 分类",I:!1}}],["/category/openapi/",{loader:()=>a(()=>import("./index.html-DKXkDLM7.js"),__vite__mapDeps([1888,1])),meta:{t:"OpenAPI 分类",I:!1}}],["/category/lombok/",{loader:()=>a(()=>import("./index.html-D7D7I3vl.js"),__vite__mapDeps([1889,1])),meta:{t:"Lombok 分类",I:!1}}],["/category/hashmap/",{loader:()=>a(()=>import("./index.html-B7ZkiSLa.js"),__vite__mapDeps([1890,1])),meta:{t:"HashMap 分类",I:!1}}],["/category/aws-sdk-for-java/",{loader:()=>a(()=>import("./index.html-Czj8Twv8.js"),__vite__mapDeps([1891,1])),meta:{t:"AWS SDK for Java 分类",I:!1}}],["/category/s3/",{loader:()=>a(()=>import("./index.html-DMqfEh8o.js"),__vite__mapDeps([1892,1])),meta:{t:"S3 分类",I:!1}}],["/category/error-handling/",{loader:()=>a(()=>import("./index.html-DSag-Wax.js"),__vite__mapDeps([1893,1])),meta:{t:"Error Handling 分类",I:!1}}],["/category/build-optimization/",{loader:()=>a(()=>import("./index.html-DL_-RhNT.js"),__vite__mapDeps([1894,1])),meta:{t:"Build Optimization 分类",I:!1}}],["/category/inner-classes/",{loader:()=>a(()=>import("./index.html-CPCKZQy0.js"),__vite__mapDeps([1895,1])),meta:{t:"Inner Classes 分类",I:!1}}],["/category/subclasses/",{loader:()=>a(()=>import("./index.html-D8-wxTEV.js"),__vite__mapDeps([1896,1])),meta:{t:"Subclasses 分类",I:!1}}],["/category/json-schema/",{loader:()=>a(()=>import("./index.html-BVFrISWb.js"),__vite__mapDeps([1897,1])),meta:{t:"JSON Schema 分类",I:!1}}],["/category/servlet/",{loader:()=>a(()=>import("./index.html-CCK6SQSZ.js"),__vite__mapDeps([1898,1])),meta:{t:"Servlet 分类",I:!1}}],["/category/design-pattern/",{loader:()=>a(()=>import("./index.html-C1ekTlta.js"),__vite__mapDeps([1899,1])),meta:{t:"Design Pattern 分类",I:!1}}],["/category/collection-framework/",{loader:()=>a(()=>import("./index.html-XZ1GZX_l.js"),__vite__mapDeps([1900,1])),meta:{t:"Collection Framework 分类",I:!1}}],["/category/jni/",{loader:()=>a(()=>import("./index.html-CCbDXAq5.js"),__vite__mapDeps([1901,1])),meta:{t:"JNI 分类",I:!1}}],["/category/rxjava/",{loader:()=>a(()=>import("./index.html-tPWZ4tTa.js"),__vite__mapDeps([1902,1])),meta:{t:"RxJava 分类",I:!1}}],["/category/docker-compose/",{loader:()=>a(()=>import("./index.html-DYn_P5zj.js"),__vite__mapDeps([1903,1])),meta:{t:"Docker Compose 分类",I:!1}}],["/category/web-development/",{loader:()=>a(()=>import("./index.html-CO2NpdIx.js"),__vite__mapDeps([1904,1])),meta:{t:"Web Development 分类",I:!1}}],["/category/%E8%BF%90%E7%BB%B4/",{loader:()=>a(()=>import("./index.html-DLJHG8a-.js"),__vite__mapDeps([1905,1])),meta:{t:"运维 分类",I:!1}}],["/category/apache-pulsar/",{loader:()=>a(()=>import("./index.html-CRfNluzH.js"),__vite__mapDeps([1906,1])),meta:{t:"Apache Pulsar 分类",I:!1}}],["/category/jackson-jr/",{loader:()=>a(()=>import("./index.html-CdaWQMZU.js"),__vite__mapDeps([1907,1])),meta:{t:"Jackson-jr 分类",I:!1}}],["/category/r2dbc/",{loader:()=>a(()=>import("./index.html-BGZ_Qdl9.js"),__vite__mapDeps([1908,1])),meta:{t:"R2DBC 分类",I:!1}}],["/category/mockk/",{loader:()=>a(()=>import("./index.html-BXAJ5G2-.js"),__vite__mapDeps([1909,1])),meta:{t:"MockK 分类",I:!1}}],["/category/logging/",{loader:()=>a(()=>import("./index.html-CCW-yx9h.js"),__vite__mapDeps([1910,1])),meta:{t:"Logging 分类",I:!1}}],["/category/%E6%80%A7%E8%83%BD%E6%AF%94%E8%BE%83/",{loader:()=>a(()=>import("./index.html-Dr1_PtZA.js"),__vite__mapDeps([1911,1])),meta:{t:"性能比较 分类",I:!1}}],["/category/scroll-api/",{loader:()=>a(()=>import("./index.html-DvU4gM-l.js"),__vite__mapDeps([1912,1])),meta:{t:"Scroll API 分类",I:!1}}],["/category/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/",{loader:()=>a(()=>import("./index.html-C2anEuC7.js"),__vite__mapDeps([1913,1])),meta:{t:"分布式系统 分类",I:!1}}],["/category/%E6%97%A5%E6%9C%9F%E5%A4%84%E7%90%86/",{loader:()=>a(()=>import("./index.html-nP8sGygh.js"),__vite__mapDeps([1914,1])),meta:{t:"日期处理 分类",I:!1}}],["/category/enums/",{loader:()=>a(()=>import("./index.html-DSlXmTuS.js"),__vite__mapDeps([1915,1])),meta:{t:"Enums 分类",I:!1}}],["/category/asyncapi/",{loader:()=>a(()=>import("./index.html-X4fkpxBM.js"),__vite__mapDeps([1916,1])),meta:{t:"AsyncAPI 分类",I:!1}}],["/category/endianness/",{loader:()=>a(()=>import("./index.html-IR5ZxvnP.js"),__vite__mapDeps([1917,1])),meta:{t:"Endianness 分类",I:!1}}],["/category/zip-files/",{loader:()=>a(()=>import("./index.html-BuQTwCLb.js"),__vite__mapDeps([1918,1])),meta:{t:"Zip Files 分类",I:!1}}],["/category/403-error/",{loader:()=>a(()=>import("./index.html-CktcnKw_.js"),__vite__mapDeps([1919,1])),meta:{t:"403 Error 分类",I:!1}}],["/category/messaging/",{loader:()=>a(()=>import("./index.html-C_2BYdZV.js"),__vite__mapDeps([1920,1])),meta:{t:"Messaging 分类",I:!1}}],["/category/selenide/",{loader:()=>a(()=>import("./index.html-tFbKdP1h.js"),__vite__mapDeps([1921,1])),meta:{t:"Selenide 分类",I:!1}}],["/category/ui%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/",{loader:()=>a(()=>import("./index.html-Be0vT1SG.js"),__vite__mapDeps([1922,1])),meta:{t:"UI自动化测试 分类",I:!1}}],["/category/this-%E5%85%B3%E9%94%AE%E5%AD%97/",{loader:()=>a(()=>import("./index.html-DtxNyohG.js"),__vite__mapDeps([1923,1])),meta:{t:"this 关键字 分类",I:!1}}],["/category/jsp/",{loader:()=>a(()=>import("./index.html-CvXg3EXj.js"),__vite__mapDeps([1924,1])),meta:{t:"JSP 分类",I:!1}}],["/category/javascript/",{loader:()=>a(()=>import("./index.html-CGIfGINr.js"),__vite__mapDeps([1925,1])),meta:{t:"JavaScript 分类",I:!1}}],["/category/openfeign/",{loader:()=>a(()=>import("./index.html-DtF-MIs5.js"),__vite__mapDeps([1926,1])),meta:{t:"OpenFeign 分类",I:!1}}],["/category/batch-processing/",{loader:()=>a(()=>import("./index.html-bL9eIjSb.js"),__vite__mapDeps([1927,1])),meta:{t:"Batch Processing 分类",I:!1}}],["/category/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/",{loader:()=>a(()=>import("./index.html-D47JM9RH.js"),__vite__mapDeps([1928,1])),meta:{t:"字符串处理 分类",I:!1}}],["/category/build/",{loader:()=>a(()=>import("./index.html-CMZyKcWq.js"),__vite__mapDeps([1929,1])),meta:{t:"Build 分类",I:!1}}],["/category/findby-vs-findoneby/",{loader:()=>a(()=>import("./index.html-gz0GyF2P.js"),__vite__mapDeps([1930,1])),meta:{t:"findBy vs findOneBy 分类",I:!1}}],["/category/web-testing/",{loader:()=>a(()=>import("./index.html-Dsh0kb9u.js"),__vite__mapDeps([1931,1])),meta:{t:"Web Testing 分类",I:!1}}],["/category/web-services/",{loader:()=>a(()=>import("./index.html-DmsyHCM3.js"),__vite__mapDeps([1932,1])),meta:{t:"Web Services 分类",I:!1}}],["/category/software-testing/",{loader:()=>a(()=>import("./index.html-ijKWyIXu.js"),__vite__mapDeps([1933,1])),meta:{t:"Software Testing 分类",I:!1}}],["/category/gatling/",{loader:()=>a(()=>import("./index.html-qaSklvyo.js"),__vite__mapDeps([1934,1])),meta:{t:"Gatling 分类",I:!1}}],["/category/%E5%BA%8F%E5%88%97%E5%8C%96/",{loader:()=>a(()=>import("./index.html-DAJhh3hx.js"),__vite__mapDeps([1935,1])),meta:{t:"序列化 分类",I:!1}}],["/category/%E5%9B%BE%E5%83%8F%E5%8E%8B%E7%BC%A9/",{loader:()=>a(()=>import("./index.html-DxrOiUWy.js"),__vite__mapDeps([1936,1])),meta:{t:"图像压缩 分类",I:!1}}],["/category/entity-classes/",{loader:()=>a(()=>import("./index.html-Bo-9Ci8g.js"),__vite__mapDeps([1937,1])),meta:{t:"Entity Classes 分类",I:!1}}],["/category/scanner/",{loader:()=>a(()=>import("./index.html-Dz_G6NU9.js"),__vite__mapDeps([1938,1])),meta:{t:"Scanner 分类",I:!1}}],["/category/apache-jmeter/",{loader:()=>a(()=>import("./index.html-D28tOige.js"),__vite__mapDeps([1939,1])),meta:{t:"Apache JMeter 分类",I:!1}}],["/category/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/",{loader:()=>a(()=>import("./index.html-C0z9B9Z2.js"),__vite__mapDeps([1940,1])),meta:{t:"性能测试 分类",I:!1}}],["/category/spring-data/",{loader:()=>a(()=>import("./index.html-BhG6eANF.js"),__vite__mapDeps([1941,1])),meta:{t:"Spring Data 分类",I:!1}}],["/category/mapstruct/",{loader:()=>a(()=>import("./index.html-BsYw2-cg.js"),__vite__mapDeps([1942,1])),meta:{t:"MapStruct 分类",I:!1}}],["/category/elasticsearch/",{loader:()=>a(()=>import("./index.html-b9sd7OWr.js"),__vite__mapDeps([1943,1])),meta:{t:"Elasticsearch 分类",I:!1}}],["/category/nosql/",{loader:()=>a(()=>import("./index.html-CwVsxOa2.js"),__vite__mapDeps([1944,1])),meta:{t:"NoSQL 分类",I:!1}}],["/category/api-testing/",{loader:()=>a(()=>import("./index.html-DEwEw01F.js"),__vite__mapDeps([1945,1])),meta:{t:"API Testing 分类",I:!1}}],["/category/flush()/",{loader:()=>a(()=>import("./index.html-D4Rd7C4X.js"),__vite__mapDeps([1946,1])),meta:{t:"flush() 分类",I:!1}}],["/category/dependency-management/",{loader:()=>a(()=>import("./index.html-DZ8uv-3X.js"),__vite__mapDeps([1947,1])),meta:{t:"Dependency Management 分类",I:!1}}],["/category/introduction/",{loader:()=>a(()=>import("./index.html-Ds_vurvn.js"),__vite__mapDeps([1948,1])),meta:{t:"Introduction 分类",I:!1}}],["/category/regular-expressions/",{loader:()=>a(()=>import("./index.html-B7coE2ko.js"),__vite__mapDeps([1949,1])),meta:{t:"Regular Expressions 分类",I:!1}}],["/category/api-key/",{loader:()=>a(()=>import("./index.html-CEV1D6qa.js"),__vite__mapDeps([1950,1])),meta:{t:"API Key 分类",I:!1}}],["/category/design-patterns/",{loader:()=>a(()=>import("./index.html-CCoW0kng.js"),__vite__mapDeps([1951,1])),meta:{t:"Design Patterns 分类",I:!1}}],["/category/actuator/",{loader:()=>a(()=>import("./index.html-DS2xfHeW.js"),__vite__mapDeps([1952,1])),meta:{t:"Actuator 分类",I:!1}}],["/category/flexypool/",{loader:()=>a(()=>import("./index.html-CIkQWA0n.js"),__vite__mapDeps([1953,1])),meta:{t:"FlexyPool 分类",I:!1}}],["/category/h2-database/",{loader:()=>a(()=>import("./index.html-CEssu2Yl.js"),__vite__mapDeps([1954,1])),meta:{t:"H2 Database 分类",I:!1}}],["/category/%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5/",{loader:()=>a(()=>import("./index.html-BkfkF6z6.js"),__vite__mapDeps([1955,1])),meta:{t:"编程实践 分类",I:!1}}],["/category/android/",{loader:()=>a(()=>import("./index.html-u-f4UBrb.js"),__vite__mapDeps([1956,1])),meta:{t:"Android 分类",I:!1}}],["/category/keycloak/",{loader:()=>a(()=>import("./index.html-C87Xr1EF.js"),__vite__mapDeps([1957,1])),meta:{t:"Keycloak 分类",I:!1}}],["/category/iam/",{loader:()=>a(()=>import("./index.html-Wqgy48rq.js"),__vite__mapDeps([1958,1])),meta:{t:"IAM 分类",I:!1}}],["/category/spring-boot-cli/",{loader:()=>a(()=>import("./index.html-DmsOjdw_.js"),__vite__mapDeps([1959,1])),meta:{t:"Spring Boot CLI 分类",I:!1}}],["/category/%E5%AF%86%E7%A0%81%E7%BC%96%E7%A0%81/",{loader:()=>a(()=>import("./index.html-Cy51Yqdi.js"),__vite__mapDeps([1960,1])),meta:{t:"密码编码 分类",I:!1}}],["/category/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/",{loader:()=>a(()=>import("./index.html-BtAJV9oD.js"),__vite__mapDeps([1961,1])),meta:{t:"图像处理 分类",I:!1}}],["/category/swagger/",{loader:()=>a(()=>import("./index.html-CJ2MYycl.js"),__vite__mapDeps([1962,1])),meta:{t:"Swagger 分类",I:!1}}],["/category/modular-monolith/",{loader:()=>a(()=>import("./index.html-uxJZOncq.js"),__vite__mapDeps([1963,1])),meta:{t:"Modular Monolith 分类",I:!1}}],["/category/records/",{loader:()=>a(()=>import("./index.html-R5noy0ej.js"),__vite__mapDeps([1964,1])),meta:{t:"Records 分类",I:!1}}],["/category/nlp/",{loader:()=>a(()=>import("./index.html-fYYEiRCh.js"),__vite__mapDeps([1965,1])),meta:{t:"NLP 分类",I:!1}}],["/category/automation-testing/",{loader:()=>a(()=>import("./index.html-CQifB6N8.js"),__vite__mapDeps([1966,1])),meta:{t:"Automation Testing 分类",I:!1}}],["/category/selenium/",{loader:()=>a(()=>import("./index.html-DYqTUQX7.js"),__vite__mapDeps([1967,1])),meta:{t:"Selenium 分类",I:!1}}],["/category/ktor/",{loader:()=>a(()=>import("./index.html-Bm8j8cFc.js"),__vite__mapDeps([1968,1])),meta:{t:"Ktor 分类",I:!1}}],["/category/openai/",{loader:()=>a(()=>import("./index.html-TYUeG44I.js"),__vite__mapDeps([1969,1])),meta:{t:"OpenAI 分类",I:!1}}],["/category/spring-cloud-azure/",{loader:()=>a(()=>import("./index.html-24ecb0_r.js"),__vite__mapDeps([1970,1])),meta:{t:"Spring Cloud Azure 分类",I:!1}}],["/category/azure-key-vault/",{loader:()=>a(()=>import("./index.html-BG_CGcwG.js"),__vite__mapDeps([1971,1])),meta:{t:"Azure Key Vault 分类",I:!1}}],["/category/companion-object/",{loader:()=>a(()=>import("./index.html-DZh9Qimb.js"),__vite__mapDeps([1972,1])),meta:{t:"Companion Object 分类",I:!1}}],["/category/jmx/",{loader:()=>a(()=>import("./index.html-DQreNkI-.js"),__vite__mapDeps([1973,1])),meta:{t:"JMX 分类",I:!1}}],["/category/localdate/",{loader:()=>a(()=>import("./index.html-DpV6B-ZR.js"),__vite__mapDeps([1974,1])),meta:{t:"LocalDate 分类",I:!1}}],["/category/webdriver/",{loader:()=>a(()=>import("./index.html-DwA-3Jvm.js"),__vite__mapDeps([1975,1])),meta:{t:"Webdriver 分类",I:!1}}],["/category/aws-secrets-manager/",{loader:()=>a(()=>import("./index.html-BGvhf1QG.js"),__vite__mapDeps([1976,1])),meta:{t:"AWS Secrets Manager 分类",I:!1}}],["/category/performance/",{loader:()=>a(()=>import("./index.html-Br82cyqy.js"),__vite__mapDeps([1977,1])),meta:{t:"Performance 分类",I:!1}}],["/category/%E5%A4%9A%E5%AF%B9%E5%A4%9A%E5%85%B3%E7%B3%BB/",{loader:()=>a(()=>import("./index.html-BrqV6cpr.js"),__vite__mapDeps([1978,1])),meta:{t:"多对多关系 分类",I:!1}}],["/category/resilience4j/",{loader:()=>a(()=>import("./index.html-Dckcu1hv.js"),__vite__mapDeps([1979,1])),meta:{t:"Resilience4j 分类",I:!1}}],["/category/httpclient/",{loader:()=>a(()=>import("./index.html-Dz_KuGz6.js"),__vite__mapDeps([1980,1])),meta:{t:"HttpClient 分类",I:!1}}],["/category/saml/",{loader:()=>a(()=>import("./index.html-_TjvrvEd.js"),__vite__mapDeps([1981,1])),meta:{t:"SAML 分类",I:!1}}],["/category/%E6%95%B0%E6%8D%AE%E5%BA%93/",{loader:()=>a(()=>import("./index.html-NkPDgNke.js"),__vite__mapDeps([1982,1])),meta:{t:"数据库 分类",I:!1}}],["/category/azuread/",{loader:()=>a(()=>import("./index.html-eTSeMxzY.js"),__vite__mapDeps([1983,1])),meta:{t:"AzureAD 分类",I:!1}}],["/category/feign-client/",{loader:()=>a(()=>import("./index.html-QCNBQejS.js"),__vite__mapDeps([1984,1])),meta:{t:"Feign Client 分类",I:!1}}],["/category/debugging/",{loader:()=>a(()=>import("./index.html-C7s47pfk.js"),__vite__mapDeps([1985,1])),meta:{t:"Debugging 分类",I:!1}}],["/category/object-creation/",{loader:()=>a(()=>import("./index.html-Bd_01oJI.js"),__vite__mapDeps([1986,1])),meta:{t:"Object Creation 分类",I:!1}}],["/category/web-scraping/",{loader:()=>a(()=>import("./index.html--rFyPZFq.js"),__vite__mapDeps([1987,1])),meta:{t:"Web Scraping 分类",I:!1}}],["/category/%E6%8F%92%E4%BB%B6/",{loader:()=>a(()=>import("./index.html-CI0A18Go.js"),__vite__mapDeps([1988,1])),meta:{t:"插件 分类",I:!1}}],["/category/project-panama/",{loader:()=>a(()=>import("./index.html-N_OUXlVi.js"),__vite__mapDeps([1989,1])),meta:{t:"Project Panama 分类",I:!1}}],["/category/curl/",{loader:()=>a(()=>import("./index.html-xdyg7KiF.js"),__vite__mapDeps([1990,1])),meta:{t:"cURL 分类",I:!1}}],["/category/http/",{loader:()=>a(()=>import("./index.html-B5KY-HxQ.js"),__vite__mapDeps([1991,1])),meta:{t:"HTTP 分类",I:!1}}],["/category/spring-data-redis/",{loader:()=>a(()=>import("./index.html-X3azi_5p.js"),__vite__mapDeps([1992,1])),meta:{t:"Spring Data Redis 分类",I:!1}}],["/category/redis-ttl/",{loader:()=>a(()=>import("./index.html-BIhdzJxN.js"),__vite__mapDeps([1993,1])),meta:{t:"Redis TTL 分类",I:!1}}],["/category/questdb/",{loader:()=>a(()=>import("./index.html-BLCBDHDZ.js"),__vite__mapDeps([1994,1])),meta:{t:"QuestDB 分类",I:!1}}],["/category/encryption/",{loader:()=>a(()=>import("./index.html-BGYkv3bu.js"),__vite__mapDeps([1995,1])),meta:{t:"Encryption 分类",I:!1}}],["/category/load-testing/",{loader:()=>a(()=>import("./index.html-CCqNOqei.js"),__vite__mapDeps([1996,1])),meta:{t:"Load Testing 分类",I:!1}}],["/category/feign/",{loader:()=>a(()=>import("./index.html-BKk3Uq8-.js"),__vite__mapDeps([1997,1])),meta:{t:"Feign 分类",I:!1}}],["/category/aws-lambda/",{loader:()=>a(()=>import("./index.html-DKWRNNXp.js"),__vite__mapDeps([1998,1])),meta:{t:"AWS Lambda 分类",I:!1}}],["/category/kafka-listener/",{loader:()=>a(()=>import("./index.html-DEyuPRhs.js"),__vite__mapDeps([1999,1])),meta:{t:"Kafka Listener 分类",I:!1}}],["/category/cassandra/",{loader:()=>a(()=>import("./index.html-BkEObjVt.js"),__vite__mapDeps([2000,1])),meta:{t:"Cassandra 分类",I:!1}}],["/category/rabbitmq/",{loader:()=>a(()=>import("./index.html-yfiOMO8Y.js"),__vite__mapDeps([2001,1])),meta:{t:"RabbitMQ 分类",I:!1}}],["/category/applicationcontext/",{loader:()=>a(()=>import("./index.html-Cn2idgLF.js"),__vite__mapDeps([2002,1])),meta:{t:"ApplicationContext 分类",I:!1}}],["/category/httpie/",{loader:()=>a(()=>import("./index.html-xINQapdM.js"),__vite__mapDeps([2003,1])),meta:{t:"HTTPie 分类",I:!1}}],["/category/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/",{loader:()=>a(()=>import("./index.html-DtydJKs-.js"),__vite__mapDeps([2004,1])),meta:{t:"命令行工具 分类",I:!1}}],["/category/maps/",{loader:()=>a(()=>import("./index.html-CJSBLUUQ.js"),__vite__mapDeps([2005,1])),meta:{t:"Maps 分类",I:!1}}],["/category/jmeter/",{loader:()=>a(()=>import("./index.html-kmoPkcZ6.js"),__vite__mapDeps([2006,1])),meta:{t:"JMeter 分类",I:!1}}],["/category/data-structures/",{loader:()=>a(()=>import("./index.html-DThxc1GV.js"),__vite__mapDeps([2007,1])),meta:{t:"Data Structures 分类",I:!1}}],["/category/jakarta-ee/",{loader:()=>a(()=>import("./index.html-C4nPE4Je.js"),__vite__mapDeps([2008,1])),meta:{t:"Jakarta EE 分类",I:!1}}],["/category/jvm%E5%86%85%E5%AD%98%E7%B1%BB%E5%9E%8B/",{loader:()=>a(()=>import("./index.html-BdDuPOnF.js"),__vite__mapDeps([2009,1])),meta:{t:"JVM内存类型 分类",I:!1}}],["/category/opentelemetry/",{loader:()=>a(()=>import("./index.html-zY3EcP--.js"),__vite__mapDeps([2010,1])),meta:{t:"OpenTelemetry 分类",I:!1}}],["/category/math/",{loader:()=>a(()=>import("./index.html-ByicKkgo.js"),__vite__mapDeps([2011,1])),meta:{t:"Math 分类",I:!1}}],["/category/unit-testing/",{loader:()=>a(()=>import("./index.html-B4GPaF7c.js"),__vite__mapDeps([2012,1])),meta:{t:"Unit Testing 分类",I:!1}}],["/category/asynchronous-operations/",{loader:()=>a(()=>import("./index.html-C8Vi4GwD.js"),__vite__mapDeps([2013,1])),meta:{t:"Asynchronous Operations 分类",I:!1}}],["/category/commandline/",{loader:()=>a(()=>import("./index.html-A2DUgzMC.js"),__vite__mapDeps([2014,1])),meta:{t:"CommandLine 分类",I:!1}}],["/category/tools/",{loader:()=>a(()=>import("./index.html-CNx4ayd_.js"),__vite__mapDeps([2015,1])),meta:{t:"Tools 分类",I:!1}}],["/category/number-conversion/",{loader:()=>a(()=>import("./index.html-LpjbxtuH.js"),__vite__mapDeps([2016,1])),meta:{t:"Number Conversion 分类",I:!1}}],["/category/findfirst()-vs-findtop()/",{loader:()=>a(()=>import("./index.html-CYt1Dp4r.js"),__vite__mapDeps([2017,1])),meta:{t:"findFirst() vs findTop() 分类",I:!1}}],["/category/resttemplate/",{loader:()=>a(()=>import("./index.html-DxmCEj2E.js"),__vite__mapDeps([2018,1])),meta:{t:"RestTemplate 分类",I:!1}}],["/category/scylladb/",{loader:()=>a(()=>import("./index.html--JBVhe2_.js"),__vite__mapDeps([2019,1])),meta:{t:"ScyllaDB 分类",I:!1}}],["/category/nonuniqueresultexception/",{loader:()=>a(()=>import("./index.html-BHMx6X1F.js"),__vite__mapDeps([2020,1])),meta:{t:"NonUniqueResultException 分类",I:!1}}],["/category/restful-microservices/",{loader:()=>a(()=>import("./index.html-BGMSX1Ng.js"),__vite__mapDeps([2021,1])),meta:{t:"RESTful Microservices 分类",I:!1}}],["/category/logback/",{loader:()=>a(()=>import("./index.html-BylPI3jI.js"),__vite__mapDeps([2022,1])),meta:{t:"Logback 分类",I:!1}}],["/category/jwt/",{loader:()=>a(()=>import("./index.html-CONAPJnu.js"),__vite__mapDeps([2023,1])),meta:{t:"JWT 分类",I:!1}}],["/category/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/",{loader:()=>a(()=>import("./index.html-DCVpZAEi.js"),__vite__mapDeps([2024,1])),meta:{t:"异常处理 分类",I:!1}}],["/category/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/",{loader:()=>a(()=>import("./index.html-CBSOaUqb.js"),__vite__mapDeps([2025,1])),meta:{t:"Lambda表达式 分类",I:!1}}],["/category/%E5%BC%82%E5%B8%B8%E4%B8%8E%E9%94%99%E8%AF%AF/",{loader:()=>a(()=>import("./index.html-C4PLc6Tv.js"),__vite__mapDeps([2026,1])),meta:{t:"异常与错误 分类",I:!1}}],["/category/linux/",{loader:()=>a(()=>import("./index.html-BWHNU_d3.js"),__vite__mapDeps([2027,1])),meta:{t:"Linux 分类",I:!1}}],["/category/springdoc-openapi/",{loader:()=>a(()=>import("./index.html-HzRCjgnb.js"),__vite__mapDeps([2028,1])),meta:{t:"Springdoc-OpenAPI 分类",I:!1}}],["/category/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/",{loader:()=>a(()=>import("./index.html-TnmmLV1X.js"),__vite__mapDeps([2029,1])),meta:{t:"函数式编程 分类",I:!1}}],["/category/spring-cloud-gateway/",{loader:()=>a(()=>import("./index.html-D-hOL1v9.js"),__vite__mapDeps([2030,1])),meta:{t:"Spring Cloud Gateway 分类",I:!1}}],["/category/rate-limiting/",{loader:()=>a(()=>import("./index.html-C7Hhsq9C.js"),__vite__mapDeps([2031,1])),meta:{t:"Rate Limiting 分类",I:!1}}],["/category/camunda/",{loader:()=>a(()=>import("./index.html-Bt7LWv_D.js"),__vite__mapDeps([2032,1])),meta:{t:"Camunda 分类",I:!1}}],["/category/web-client/",{loader:()=>a(()=>import("./index.html-Qg10G8qP.js"),__vite__mapDeps([2033,1])),meta:{t:"Web Client 分类",I:!1}}],["/category/webclient/",{loader:()=>a(()=>import("./index.html-Bbw3UDHb.js"),__vite__mapDeps([2034,1])),meta:{t:"WebClient 分类",I:!1}}],["/category/string-interpolation/",{loader:()=>a(()=>import("./index.html-BFo3sPS-.js"),__vite__mapDeps([2035,1])),meta:{t:"String Interpolation 分类",I:!1}}],["/category/firebase-cloud-messaging/",{loader:()=>a(()=>import("./index.html-s9jP76gL.js"),__vite__mapDeps([2036,1])),meta:{t:"Firebase Cloud Messaging 分类",I:!1}}],["/category/itext/",{loader:()=>a(()=>import("./index.html-DRVQ_F7o.js"),__vite__mapDeps([2037,1])),meta:{t:"iText 分类",I:!1}}],["/category/build-automation/",{loader:()=>a(()=>import("./index.html-N79Xb-Dl.js"),__vite__mapDeps([2038,1])),meta:{t:"Build Automation 分类",I:!1}}],["/category/datetime-api/",{loader:()=>a(()=>import("./index.html-DhFPUS1N.js"),__vite__mapDeps([2039,1])),meta:{t:"DateTime API 分类",I:!1}}],["/category/%E6%8A%80%E6%9C%AF/",{loader:()=>a(()=>import("./index.html-DxoIqWKE.js"),__vite__mapDeps([2040,1])),meta:{t:"技术 分类",I:!1}}],["/category/pdf/",{loader:()=>a(()=>import("./index.html-CzdrjfdS.js"),__vite__mapDeps([2041,1])),meta:{t:"PDF 分类",I:!1}}],["/category/%E8%BF%9C%E7%A8%8B%E5%B7%A5%E4%BD%9C/",{loader:()=>a(()=>import("./index.html-CUQ_hSzp.js"),__vite__mapDeps([2042,1])),meta:{t:"远程工作 分类",I:!1}}],["/category/zookeeper/",{loader:()=>a(()=>import("./index.html-BMNlJYYc.js"),__vite__mapDeps([2043,1])),meta:{t:"ZooKeeper 分类",I:!1}}],["/category/kong-ingress/",{loader:()=>a(()=>import("./index.html-COyTd0i_.js"),__vite__mapDeps([2044,1])),meta:{t:"Kong Ingress 分类",I:!1}}],["/category/axon/",{loader:()=>a(()=>import("./index.html-CPe2S0dP.js"),__vite__mapDeps([2045,1])),meta:{t:"Axon 分类",I:!1}}],["/category/method-security/",{loader:()=>a(()=>import("./index.html-C_E9IZyN.js"),__vite__mapDeps([2046,1])),meta:{t:"Method Security 分类",I:!1}}],["/category/reference-types/",{loader:()=>a(()=>import("./index.html-DeXaBw4G.js"),__vite__mapDeps([2047,1])),meta:{t:"Reference Types 分类",I:!1}}],["/category/tablesaw/",{loader:()=>a(()=>import("./index.html-RAdqDC5O.js"),__vite__mapDeps([2048,1])),meta:{t:"Tablesaw 分类",I:!1}}],["/category/reactor/",{loader:()=>a(()=>import("./index.html-reOZjNo0.js"),__vite__mapDeps([2049,1])),meta:{t:"Reactor 分类",I:!1}}],["/category/sbe/",{loader:()=>a(()=>import("./index.html-DwbE8nKi.js"),__vite__mapDeps([2050,1])),meta:{t:"SBE 分类",I:!1}}],["/category/spring-webflux/",{loader:()=>a(()=>import("./index.html-CHJkw4tH.js"),__vite__mapDeps([1778,1])),meta:{t:"Spring Webflux 分类",I:!1}}],["/category/databufferlimitexception/",{loader:()=>a(()=>import("./index.html-DD3rB_9c.js"),__vite__mapDeps([2051,1])),meta:{t:"DataBufferLimitException 分类",I:!1}}],["/category/remote-jobs/",{loader:()=>a(()=>import("./index.html-DWxvmUDA.js"),__vite__mapDeps([2052,1])),meta:{t:"Remote Jobs 分类",I:!1}}],["/category/part-time-jobs/",{loader:()=>a(()=>import("./index.html-TSgLKTlo.js"),__vite__mapDeps([2053,1])),meta:{t:"Part-Time Jobs 分类",I:!1}}],["/category/streaming/",{loader:()=>a(()=>import("./index.html-CKZ4ZcM1.js"),__vite__mapDeps([2054,1])),meta:{t:"Streaming 分类",I:!1}}],["/category/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/",{loader:()=>a(()=>import("./index.html-DfnQyYmn.js"),__vite__mapDeps([2055,1])),meta:{t:"数据库操作 分类",I:!1}}],["/category/redis/",{loader:()=>a(()=>import("./index.html-CVXhRWY_.js"),__vite__mapDeps([2056,1])),meta:{t:"Redis 分类",I:!1}}],["/category/caching/",{loader:()=>a(()=>import("./index.html-Da_Ni_78.js"),__vite__mapDeps([2057,1])),meta:{t:"Caching 分类",I:!1}}],["/category/mysql/",{loader:()=>a(()=>import("./index.html-NzJZI99J.js"),__vite__mapDeps([2058,1])),meta:{t:"MySQL 分类",I:!1}}],["/category/groovy/",{loader:()=>a(()=>import("./index.html-DwxwIkn_.js"),__vite__mapDeps([2059,1])),meta:{t:"Groovy 分类",I:!1}}],["/category/junit5/",{loader:()=>a(()=>import("./index.html-CQLzV2dw.js"),__vite__mapDeps([2060,1])),meta:{t:"JUnit5 分类",I:!1}}],["/category/api/",{loader:()=>a(()=>import("./index.html-BNsXphCU.js"),__vite__mapDeps([2061,1])),meta:{t:"API 分类",I:!1}}],["/category/nio2/",{loader:()=>a(()=>import("./index.html-CHf2UJI-.js"),__vite__mapDeps([2062,1])),meta:{t:"NIO2 分类",I:!1}}],["/category/lists/",{loader:()=>a(()=>import("./index.html-D9YXd8Wn.js"),__vite__mapDeps([2063,1])),meta:{t:"Lists 分类",I:!1}}],["/category/protobuf/",{loader:()=>a(()=>import("./index.html-CmSGhYcK.js"),__vite__mapDeps([2064,1])),meta:{t:"Protobuf 分类",I:!1}}],["/category/nio/",{loader:()=>a(()=>import("./index.html-AkzUSvJZ.js"),__vite__mapDeps([2065,1])),meta:{t:"NIO 分类",I:!1}}],["/category/axon-framework/",{loader:()=>a(()=>import("./index.html-BqNK__le.js"),__vite__mapDeps([2066,1])),meta:{t:"Axon Framework 分类",I:!1}}],["/category/md5/",{loader:()=>a(()=>import("./index.html-D1a39X-0.js"),__vite__mapDeps([2067,1])),meta:{t:"MD5 分类",I:!1}}],["/category/crac/",{loader:()=>a(()=>import("./index.html-BEkBEklS.js"),__vite__mapDeps([2068,1])),meta:{t:"CRaC 分类",I:!1}}],["/category/apache-cassandra/",{loader:()=>a(()=>import("./index.html-CoLlq_Vv.js"),__vite__mapDeps([2069,1])),meta:{t:"Apache Cassandra 分类",I:!1}}],["/category/garbage-collection/",{loader:()=>a(()=>import("./index.html-BkwW4rX3.js"),__vite__mapDeps([2070,1])),meta:{t:"Garbage Collection 分类",I:!1}}],["/category/string-concatenation/",{loader:()=>a(()=>import("./index.html-BW3pTJjn.js"),__vite__mapDeps([2071,1])),meta:{t:"String Concatenation 分类",I:!1}}],["/category/functional-programming/",{loader:()=>a(()=>import("./index.html-RDYHTV6Z.js"),__vite__mapDeps([2072,1])),meta:{t:"Functional Programming 分类",I:!1}}],["/category/armstrong-numbers/",{loader:()=>a(()=>import("./index.html-Ht0r6yTY.js"),__vite__mapDeps([2073,1])),meta:{t:"Armstrong Numbers 分类",I:!1}}],["/category/spring-data-mongodb/",{loader:()=>a(()=>import("./index.html-Hls0h1Vm.js"),__vite__mapDeps([2074,1])),meta:{t:"Spring Data MongoDB 分类",I:!1}}],["/category/api%E8%AE%BE%E8%AE%A1/",{loader:()=>a(()=>import("./index.html-H0B44G3s.js"),__vite__mapDeps([2075,1])),meta:{t:"API设计 分类",I:!1}}],["/category/git/",{loader:()=>a(()=>import("./index.html-BLLqJMpL.js"),__vite__mapDeps([2076,1])),meta:{t:"Git 分类",I:!1}}],["/category/ini%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/",{loader:()=>a(()=>import("./index.html-D5i5pNu5.js"),__vite__mapDeps([2077,1])),meta:{t:"INI文件解析 分类",I:!1}}],["/category/%E5%A4%9A%E7%A7%9F%E6%88%B7/",{loader:()=>a(()=>import("./index.html-Bo6SWtRb.js"),__vite__mapDeps([2078,1])),meta:{t:"多租户 分类",I:!1}}],["/category/rest-api/",{loader:()=>a(()=>import("./index.html-Buq2jOfj.js"),__vite__mapDeps([2079,1])),meta:{t:"REST API 分类",I:!1}}],["/category/%E6%B6%88%E6%81%AF%E8%AE%A1%E6%95%B0/",{loader:()=>a(()=>import("./index.html-B2OyN-2c.js"),__vite__mapDeps([2080,1])),meta:{t:"消息计数 分类",I:!1}}],["/category/repository/",{loader:()=>a(()=>import("./index.html-BY1n4Zga.js"),__vite__mapDeps([2081,1])),meta:{t:"Repository 分类",I:!1}}],["/category/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A0%BC%E5%BC%8F%E5%8C%96/",{loader:()=>a(()=>import("./index.html-Dg0PkbBp.js"),__vite__mapDeps([2082,1])),meta:{t:"字符串格式化 分类",I:!1}}],["/category/annotations/",{loader:()=>a(()=>import("./index.html-Bbf7kOoO.js"),__vite__mapDeps([2083,1])),meta:{t:"Annotations 分类",I:!1}}],["/category/soap/",{loader:()=>a(()=>import("./index.html-BS2z5x8N.js"),__vite__mapDeps([2084,1])),meta:{t:"SOAP 分类",I:!1}}],["/category/spring-boot-3/",{loader:()=>a(()=>import("./index.html-DoKsGDaA.js"),__vite__mapDeps([2085,1])),meta:{t:"Spring Boot 3 分类",I:!1}}],["/category/spring-framework-6.0/",{loader:()=>a(()=>import("./index.html-BnPVgJhJ.js"),__vite__mapDeps([2086,1])),meta:{t:"Spring Framework 6.0 分类",I:!1}}],["/category/spring-jms/",{loader:()=>a(()=>import("./index.html-CEDgztmC.js"),__vite__mapDeps([2087,1])),meta:{t:"Spring JMS 分类",I:!1}}],["/category/properties/",{loader:()=>a(()=>import("./index.html-C0w1TrNl.js"),__vite__mapDeps([2088,1])),meta:{t:"Properties 分类",I:!1}}],["/category/stringbuffer/",{loader:()=>a(()=>import("./index.html-Bz_QFMxu.js"),__vite__mapDeps([2089,1])),meta:{t:"StringBuffer 分类",I:!1}}],["/category/jar%E6%96%87%E4%BB%B6/",{loader:()=>a(()=>import("./index.html-UzOBxZ-6.js"),__vite__mapDeps([2090,1])),meta:{t:"JAR文件 分类",I:!1}}],["/category/file-management/",{loader:()=>a(()=>import("./index.html-DK-_wkMv.js"),__vite__mapDeps([2091,1])),meta:{t:"File Management 分类",I:!1}}],["/category/jar/",{loader:()=>a(()=>import("./index.html-BzrA6hls.js"),__vite__mapDeps([2092,1])),meta:{t:"JAR 分类",I:!1}}],["/category/windows-executables/",{loader:()=>a(()=>import("./index.html-CaZDy4u0.js"),__vite__mapDeps([2093,1])),meta:{t:"Windows Executables 分类",I:!1}}],["/category/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/",{loader:()=>a(()=>import("./index.html-DkhsAhDW.js"),__vite__mapDeps([2094,1])),meta:{t:"日期和时间 分类",I:!1}}],["/category/lightrun/",{loader:()=>a(()=>import("./index.html-oMfUqh6o.js"),__vite__mapDeps([2095,1])),meta:{t:"Lightrun 分类",I:!1}}],["/category/spring-data-rest/",{loader:()=>a(()=>import("./index.html-CXoGUGMW.js"),__vite__mapDeps([2096,1])),meta:{t:"Spring Data Rest 分类",I:!1}}],["/category/restful-web-services/",{loader:()=>a(()=>import("./index.html-BLIgtBwp.js"),__vite__mapDeps([2097,1])),meta:{t:"RESTful Web Services 分类",I:!1}}],["/category/messaging-systems/",{loader:()=>a(()=>import("./index.html-CWHTpSbp.js"),__vite__mapDeps([2098,1])),meta:{t:"Messaging Systems 分类",I:!1}}],["/category/spring-native/",{loader:()=>a(()=>import("./index.html-BSZj0nMr.js"),__vite__mapDeps([2099,1])),meta:{t:"Spring Native 分类",I:!1}}],["/category/liberica/",{loader:()=>a(()=>import("./index.html-OilyFhCO.js"),__vite__mapDeps([2100,1])),meta:{t:"Liberica 分类",I:!1}}],["/category/http-client/",{loader:()=>a(()=>import("./index.html-BvzaP0hR.js"),__vite__mapDeps([2101,1])),meta:{t:"HTTP Client 分类",I:!1}}],["/category/class-loader/",{loader:()=>a(()=>import("./index.html-BKOMOgQH.js"),__vite__mapDeps([2102,1])),meta:{t:"Class Loader 分类",I:!1}}],["/category/testing-_-mocking/",{loader:()=>a(()=>import("./index.html-BwXbqdU_.js"),__vite__mapDeps([2103,1])),meta:{t:"Testing & Mocking 分类",I:!1}}],["/category/java-servlets/",{loader:()=>a(()=>import("./index.html-fhc0_XHG.js"),__vite__mapDeps([2104,1])),meta:{t:"Java Servlets 分类",I:!1}}],["/category/sound/",{loader:()=>a(()=>import("./index.html-DNmqRAWx.js"),__vite__mapDeps([2105,1])),meta:{t:"Sound 分类",I:!1}}],["/category/spring/",{loader:()=>a(()=>import("./index.html-OqjRgp5q.js"),__vite__mapDeps([1673,1])),meta:{t:"spring 分类",I:!1}}],["/category/jpa/",{loader:()=>a(()=>import("./index.html-BfWasv6o.js"),__vite__mapDeps([1689,1])),meta:{t:"jpa 分类",I:!1}}],["/category/csrf-token/",{loader:()=>a(()=>import("./index.html-CsroYUgo.js"),__vite__mapDeps([2106,1])),meta:{t:"CSRF Token 分类",I:!1}}],["/category/transactions/",{loader:()=>a(()=>import("./index.html-vjk7WGVy.js"),__vite__mapDeps([2107,1])),meta:{t:"Transactions 分类",I:!1}}],["/category/jdk/",{loader:()=>a(()=>import("./index.html-DM4aDTFo.js"),__vite__mapDeps([2108,1])),meta:{t:"JDK 分类",I:!1}}],["/category/equals()-vs-__/",{loader:()=>a(()=>import("./index.html-0eauxDxJ.js"),__vite__mapDeps([2109,1])),meta:{t:"equals() vs == 分类",I:!1}}],["/category/hql/",{loader:()=>a(()=>import("./index.html-B9bsriZD.js"),__vite__mapDeps([2110,1])),meta:{t:"HQL 分类",I:!1}}],["/category/enum/",{loader:()=>a(()=>import("./index.html-BXvMgJFx.js"),__vite__mapDeps([2111,1])),meta:{t:"Enum 分类",I:!1}}],["/category/build-cache/",{loader:()=>a(()=>import("./index.html-Dz9MJscj.js"),__vite__mapDeps([2112,1])),meta:{t:"Build Cache 分类",I:!1}}],["/category/object-oriented-programming/",{loader:()=>a(()=>import("./index.html-BAMt9bAk.js"),__vite__mapDeps([2113,1])),meta:{t:"Object-Oriented Programming 分类",I:!1}}],["/category/sso/",{loader:()=>a(()=>import("./index.html-C7Hn_zHI.js"),__vite__mapDeps([2114,1])),meta:{t:"SSO 分类",I:!1}}],["/category/spark/",{loader:()=>a(()=>import("./index.html-BCHCH6Tw.js"),__vite__mapDeps([2115,1])),meta:{t:"Spark 分类",I:!1}}],["/category/dataframe/",{loader:()=>a(()=>import("./index.html-B-arleca.js"),__vite__mapDeps([2116,1])),meta:{t:"DataFrame 分类",I:!1}}],["/category/eureka/",{loader:()=>a(()=>import("./index.html-D8S8TJl7.js"),__vite__mapDeps([2117,1])),meta:{t:"Eureka 分类",I:!1}}],["/category/java-concurrency/",{loader:()=>a(()=>import("./index.html-DDra5egE.js"),__vite__mapDeps([2118,1])),meta:{t:"Java Concurrency 分类",I:!1}}],["/category/locks/",{loader:()=>a(()=>import("./index.html-ybdT_YSz.js"),__vite__mapDeps([2119,1])),meta:{t:"Locks 分类",I:!1}}],["/category/%E6%95%B0%E5%AD%A6/",{loader:()=>a(()=>import("./index.html-J_NGoB92.js"),__vite__mapDeps([2120,1])),meta:{t:"数学 分类",I:!1}}],["/category/http-basic-authentication/",{loader:()=>a(()=>import("./index.html-CSZgvf5L.js"),__vite__mapDeps([2121,1])),meta:{t:"HTTP Basic Authentication 分类",I:!1}}],["/category/jpa-repository/",{loader:()=>a(()=>import("./index.html-icGzTCDX.js"),__vite__mapDeps([2122,1])),meta:{t:"JPA Repository 分类",I:!1}}],["/category/command-line/",{loader:()=>a(()=>import("./index.html-B5WHYtnB.js"),__vite__mapDeps([2123,1])),meta:{t:"Command Line 分类",I:!1}}],["/category/development/",{loader:()=>a(()=>import("./index.html-DC5Uj0Q_.js"),__vite__mapDeps([2124,1])),meta:{t:"Development 分类",I:!1}}],["/category/upsert/",{loader:()=>a(()=>import("./index.html-CAXCWNY9.js"),__vite__mapDeps([2125,1])),meta:{t:"Upsert 分类",I:!1}}],["/category/operators/",{loader:()=>a(()=>import("./index.html-DMhJvpr8.js"),__vite__mapDeps([2126,1])),meta:{t:"Operators 分类",I:!1}}],["/category/apache-tomcat/",{loader:()=>a(()=>import("./index.html-DOZCyVve.js"),__vite__mapDeps([2127,1])),meta:{t:"Apache Tomcat 分类",I:!1}}],["/category/%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/",{loader:()=>a(()=>import("./index.html-BO1sa1bD.js"),__vite__mapDeps([2128,1])),meta:{t:"控制结构 分类",I:!1}}],["/category/nginx/",{loader:()=>a(()=>import("./index.html-D-pG8pFs.js"),__vite__mapDeps([2129,1])),meta:{t:"Nginx 分类",I:!1}}],["/category/%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/",{loader:()=>a(()=>import("./index.html-Cw5Ttgr_.js"),__vite__mapDeps([2130,1])),meta:{t:"代理服务器 分类",I:!1}}],["/category/faunadb/",{loader:()=>a(()=>import("./index.html-B70Io-fs.js"),__vite__mapDeps([2131,1])),meta:{t:"FaunaDB 分类",I:!1}}],["/category/servlets/",{loader:()=>a(()=>import("./index.html-Cu_up9x2.js"),__vite__mapDeps([2132,1])),meta:{t:"Servlets 分类",I:!1}}],["/category/%E6%95%B0%E6%8D%AE%E6%BA%90/",{loader:()=>a(()=>import("./index.html-B-F9daZo.js"),__vite__mapDeps([2133,1])),meta:{t:"数据源 分类",I:!1}}],["/category/zuul/",{loader:()=>a(()=>import("./index.html-3XsWBBkc.js"),__vite__mapDeps([2134,1])),meta:{t:"Zuul 分类",I:!1}}],["/category/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5/",{loader:()=>a(()=>import("./index.html-DxWJZSVM.js"),__vite__mapDeps([2135,1])),meta:{t:"数据库连接 分类",I:!1}}],["/category/%E5%B9%B6%E5%8F%91/",{loader:()=>a(()=>import("./index.html-vLWpVI3i.js"),__vite__mapDeps([2136,1])),meta:{t:"并发 分类",I:!1}}],["/category/autowired/",{loader:()=>a(()=>import("./index.html-CHdg3epK.js"),__vite__mapDeps([2137,1])),meta:{t:"Autowired 分类",I:!1}}],["/category/url-rewrite/",{loader:()=>a(()=>import("./index.html-B-Lvu6U1.js"),__vite__mapDeps([2138,1])),meta:{t:"URL Rewrite 分类",I:!1}}],["/category/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/",{loader:()=>a(()=>import("./index.html-BPGG0uox.js"),__vite__mapDeps([2139,1])),meta:{t:"编程语言 分类",I:!1}}],["/category/javafx/",{loader:()=>a(()=>import("./index.html-DVmvRz_c.js"),__vite__mapDeps([2140,1])),meta:{t:"JavaFX 分类",I:!1}}],["/category/%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/",{loader:()=>a(()=>import("./index.html-eX7sWl7U.js"),__vite__mapDeps([2141,1])),meta:{t:"事件处理 分类",I:!1}}],["/category/instantsource/",{loader:()=>a(()=>import("./index.html-BDYRqTU8.js"),__vite__mapDeps([2142,1])),meta:{t:"InstantSource 分类",I:!1}}],["/category/multithreading/",{loader:()=>a(()=>import("./index.html-C0jk11j9.js"),__vite__mapDeps([2143,1])),meta:{t:"Multithreading 分类",I:!1}}],["/category/constructor/",{loader:()=>a(()=>import("./index.html-BWoaRQDr.js"),__vite__mapDeps([2144,1])),meta:{t:"Constructor 分类",I:!1}}],["/category/spring-cloud-sleuth/",{loader:()=>a(()=>import("./index.html-_Zhme0_r.js"),__vite__mapDeps([2145,1])),meta:{t:"Spring Cloud Sleuth 分类",I:!1}}],["/category/hibernate-validator/",{loader:()=>a(()=>import("./index.html-CIvwufyo.js"),__vite__mapDeps([2146,1])),meta:{t:"Hibernate Validator 分类",I:!1}}],["/category/annotation-processor/",{loader:()=>a(()=>import("./index.html-Dl8VmuuX.js"),__vite__mapDeps([2147,1])),meta:{t:"Annotation Processor 分类",I:!1}}],["/category/jep-371/",{loader:()=>a(()=>import("./index.html-Do93UKsE.js"),__vite__mapDeps([2148,1])),meta:{t:"JEP-371 分类",I:!1}}],["/category/load-balancer/",{loader:()=>a(()=>import("./index.html-BbcRMM_R.js"),__vite__mapDeps([2149,1])),meta:{t:"Load Balancer 分类",I:!1}}],["/category/openid/",{loader:()=>a(()=>import("./index.html-DhyqrqNn.js"),__vite__mapDeps([2150,1])),meta:{t:"OpenID 分类",I:!1}}],["/category/swagger-ui/",{loader:()=>a(()=>import("./index.html-Cyb3KeOW.js"),__vite__mapDeps([2151,1])),meta:{t:"Swagger UI 分类",I:!1}}],["/category/javadoc/",{loader:()=>a(()=>import("./index.html-D8qsNGJr.js"),__vite__mapDeps([2152,1])),meta:{t:"Javadoc 分类",I:!1}}],["/category/%E5%A4%9A%E8%A1%8C%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/",{loader:()=>a(()=>import("./index.html-DW5NrpJE.js"),__vite__mapDeps([2153,1])),meta:{t:"多行代码示例 分类",I:!1}}],["/category/oauth-2.0/",{loader:()=>a(()=>import("./index.html-CzQYXgni.js"),__vite__mapDeps([2154,1])),meta:{t:"OAuth 2.0 分类",I:!1}}],["/category/content-security-policy/",{loader:()=>a(()=>import("./index.html-BnjNHXZB.js"),__vite__mapDeps([2155,1])),meta:{t:"Content Security Policy 分类",I:!1}}],["/category/%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2/",{loader:()=>a(()=>import("./index.html-C3VHWUpx.js"),__vite__mapDeps([2156,1])),meta:{t:"字符串转换 分类",I:!1}}],["/category/bit-manipulation/",{loader:()=>a(()=>import("./index.html-CC3njBLF.js"),__vite__mapDeps([2157,1])),meta:{t:"Bit Manipulation 分类",I:!1}}],["/category/netflix-spectator/",{loader:()=>a(()=>import("./index.html-Bp-CvxKl.js"),__vite__mapDeps([2158,1])),meta:{t:"Netflix Spectator 分类",I:!1}}],["/category/kafka-streams/",{loader:()=>a(()=>import("./index.html-CXsxF28J.js"),__vite__mapDeps([2159,1])),meta:{t:"Kafka Streams 分类",I:!1}}],["/category/visualvm/",{loader:()=>a(()=>import("./index.html-DrqXL9m3.js"),__vite__mapDeps([2160,1])),meta:{t:"VisualVM 分类",I:!1}}],["/category/sonarqube/",{loader:()=>a(()=>import("./index.html-C1aFKp2j.js"),__vite__mapDeps([2161,1])),meta:{t:"SonarQube 分类",I:!1}}],["/category/socket/",{loader:()=>a(()=>import("./index.html-BX8s3OaK.js"),__vite__mapDeps([2162,1])),meta:{t:"Socket 分类",I:!1}}],["/category/abstract-classes/",{loader:()=>a(()=>import("./index.html-DXN6j8mL.js"),__vite__mapDeps([2163,1])),meta:{t:"Abstract Classes 分类",I:!1}}],["/category/hexformat/",{loader:()=>a(()=>import("./index.html-CkO9Z78M.js"),__vite__mapDeps([2164,1])),meta:{t:"HexFormat 分类",I:!1}}],["/category/reflection-api/",{loader:()=>a(()=>import("./index.html-DKQlfURq.js"),__vite__mapDeps([2165,1])),meta:{t:"Reflection API 分类",I:!1}}],["/category/ldap/",{loader:()=>a(()=>import("./index.html-BIzDCXjq.js"),__vite__mapDeps([2166,1])),meta:{t:"LDAP 分类",I:!1}}],["/category/logging-queries/",{loader:()=>a(()=>import("./index.html-DHcGMaHT.js"),__vite__mapDeps([2167,1])),meta:{t:"Logging Queries 分类",I:!1}}],["/category/java-17/",{loader:()=>a(()=>import("./index.html-BFb35Ot6.js"),__vite__mapDeps([2168,1])),meta:{t:"Java 17 分类",I:!1}}],["/category/html/",{loader:()=>a(()=>import("./index.html-B65n1q5B.js"),__vite__mapDeps([2169,1])),meta:{t:"HTML 分类",I:!1}}],["/category/byte-array/",{loader:()=>a(()=>import("./index.html-DMT7pjSH.js"),__vite__mapDeps([2170,1])),meta:{t:"Byte Array 分类",I:!1}}],["/category/modelmapper/",{loader:()=>a(()=>import("./index.html-ZpXFeS82.js"),__vite__mapDeps([2171,1])),meta:{t:"ModelMapper 分类",I:!1}}],["/category/%E5%B9%B6%E8%A1%8C%E6%B5%8B%E8%AF%95/",{loader:()=>a(()=>import("./index.html-CNCCptFM.js"),__vite__mapDeps([2172,1])),meta:{t:"并行测试 分类",I:!1}}],["/category/prim%E7%AE%97%E6%B3%95/",{loader:()=>a(()=>import("./index.html-DZoeYgtf.js"),__vite__mapDeps([2173,1])),meta:{t:"Prim算法 分类",I:!1}}],["/category/ratpack/",{loader:()=>a(()=>import("./index.html-DverTfxj.js"),__vite__mapDeps([2174,1])),meta:{t:"Ratpack 分类",I:!1}}],["/category/event-sourcing/",{loader:()=>a(()=>import("./index.html-D_FPiK4g.js"),__vite__mapDeps([2175,1])),meta:{t:"Event Sourcing 分类",I:!1}}],["/category/web-security/",{loader:()=>a(()=>import("./index.html-BSCCEDGf.js"),__vite__mapDeps([2176,1])),meta:{t:"Web Security 分类",I:!1}}],["/category/%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%8C%96/",{loader:()=>a(()=>import("./index.html-BEoGOslT.js"),__vite__mapDeps([2177,1])),meta:{t:"时间格式化 分类",I:!1}}],["/category/thread/",{loader:()=>a(()=>import("./index.html-3jD70i5W.js"),__vite__mapDeps([2178,1])),meta:{t:"Thread 分类",I:!1}}],["/category/arangodb/",{loader:()=>a(()=>import("./index.html-DQr_3lfx.js"),__vite__mapDeps([2179,1])),meta:{t:"ArangoDB 分类",I:!1}}],["/category/dapr/",{loader:()=>a(()=>import("./index.html-3wE0OvTt.js"),__vite__mapDeps([2180,1])),meta:{t:"Dapr 分类",I:!1}}],["/category/geospatial/",{loader:()=>a(()=>import("./index.html-CC0Zv-So.js"),__vite__mapDeps([2181,1])),meta:{t:"Geospatial 分类",I:!1}}],["/category/open-source/",{loader:()=>a(()=>import("./index.html-DD4QEngw.js"),__vite__mapDeps([2182,1])),meta:{t:"Open Source 分类",I:!1}}],["/category/guava/",{loader:()=>a(()=>import("./index.html-PKYS-kmq.js"),__vite__mapDeps([2183,1])),meta:{t:"Guava 分类",I:!1}}],["/category/biginteger/",{loader:()=>a(()=>import("./index.html-LzXzqqiz.js"),__vite__mapDeps([2184,1])),meta:{t:"BigInteger 分类",I:!1}}],["/category/github/",{loader:()=>a(()=>import("./index.html-B_eAvIhO.js"),__vite__mapDeps([2185,1])),meta:{t:"GitHub 分类",I:!1}}],["/category/zip4j/",{loader:()=>a(()=>import("./index.html-Ox6A6wL6.js"),__vite__mapDeps([2186,1])),meta:{t:"Zip4j 分类",I:!1}}],["/category/lru-cache/",{loader:()=>a(()=>import("./index.html-CIQZVDin.js"),__vite__mapDeps([2187,1])),meta:{t:"LRU Cache 分类",I:!1}}],["/category/%E6%8B%9B%E8%81%98/",{loader:()=>a(()=>import("./index.html-DL5C365S.js"),__vite__mapDeps([2188,1])),meta:{t:"招聘 分类",I:!1}}],["/category/java%E5%BC%80%E5%8F%91/",{loader:()=>a(()=>import("./index.html-BslrQigf.js"),__vite__mapDeps([2189,1])),meta:{t:"Java开发 分类",I:!1}}],["/category/utility-classes/",{loader:()=>a(()=>import("./index.html-DObnwzma.js"),__vite__mapDeps([2190,1])),meta:{t:"Utility Classes 分类",I:!1}}],["/category/compilation/",{loader:()=>a(()=>import("./index.html-B1DecbdN.js"),__vite__mapDeps([2191,1])),meta:{t:"Compilation 分类",I:!1}}],["/category/3des/",{loader:()=>a(()=>import("./index.html-D8pttfI8.js"),__vite__mapDeps([2192,1])),meta:{t:"3DES 分类",I:!1}}],["/category/java-persistence-api/",{loader:()=>a(()=>import("./index.html-CfabDwDV.js"),__vite__mapDeps([2193,1])),meta:{t:"Java Persistence API 分类",I:!1}}],["/category/java-database-connectivity/",{loader:()=>a(()=>import("./index.html-GP69KiBN.js"),__vite__mapDeps([2194,1])),meta:{t:"Java Database Connectivity 分类",I:!1}}],["/category/astra/",{loader:()=>a(()=>import("./index.html-GQCcvFwm.js"),__vite__mapDeps([2195,1])),meta:{t:"Astra 分类",I:!1}}],["/category/rest-_-graphql/",{loader:()=>a(()=>import("./index.html-CKtll1Zp.js"),__vite__mapDeps([2196,1])),meta:{t:"REST & GraphQL 分类",I:!1}}],["/category/okhttp/",{loader:()=>a(()=>import("./index.html-utcxIWl0.js"),__vite__mapDeps([2197,1])),meta:{t:"OkHttp 分类",I:!1}}],["/category/%E6%97%A5%E5%BF%97/",{loader:()=>a(()=>import("./index.html-Bc_F7ght.js"),__vite__mapDeps([2198,1])),meta:{t:"日志 分类",I:!1}}],["/category/enterprise-integration-patterns/",{loader:()=>a(()=>import("./index.html-BpKdWB_9.js"),__vite__mapDeps([2199,1])),meta:{t:"Enterprise Integration Patterns 分类",I:!1}}],["/category/pom/",{loader:()=>a(()=>import("./index.html-DqhYNGC2.js"),__vite__mapDeps([2200,1])),meta:{t:"POM 分类",I:!1}}],["/category/soft-delete/",{loader:()=>a(()=>import("./index.html-BdfGu5Gd.js"),__vite__mapDeps([2201,1])),meta:{t:"Soft Delete 分类",I:!1}}],["/category/%E5%B7%A5%E5%85%B7/",{loader:()=>a(()=>import("./index.html-C2Z2NypW.js"),__vite__mapDeps([2202,1])),meta:{t:"工具 分类",I:!1}}],["/category/jvm%E5%8F%82%E6%95%B0/",{loader:()=>a(()=>import("./index.html-GTGkdf01.js"),__vite__mapDeps([2203,1])),meta:{t:"JVM参数 分类",I:!1}}],["/category/java%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/",{loader:()=>a(()=>import("./index.html-lrAtsUsn.js"),__vite__mapDeps([2204,1])),meta:{t:"Java性能优化 分类",I:!1}}],["/category/dependencies/",{loader:()=>a(()=>import("./index.html-X8SE1qwf.js"),__vite__mapDeps([2205,1])),meta:{t:"Dependencies 分类",I:!1}}],["/category/multipart-request/",{loader:()=>a(()=>import("./index.html-ByQf_Vj3.js"),__vite__mapDeps([2206,1])),meta:{t:"Multipart Request 分类",I:!1}}],["/category/distributed-systems/",{loader:()=>a(()=>import("./index.html-D8-HOA85.js"),__vite__mapDeps([2207,1])),meta:{t:"Distributed Systems 分类",I:!1}}],["/category/interfaces/",{loader:()=>a(()=>import("./index.html-DoKXxq1c.js"),__vite__mapDeps([2208,1])),meta:{t:"Interfaces 分类",I:!1}}],["/category/set/",{loader:()=>a(()=>import("./index.html-D4qORWPN.js"),__vite__mapDeps([2209,1])),meta:{t:"Set 分类",I:!1}}],["/category/jmix/",{loader:()=>a(()=>import("./index.html-CynLJFb9.js"),__vite__mapDeps([2210,1])),meta:{t:"Jmix 分类",I:!1}}],["/category/jep-418/",{loader:()=>a(()=>import("./index.html-BahXirie.js"),__vite__mapDeps([2211,1])),meta:{t:"JEP 418 分类",I:!1}}],["/category/framework/",{loader:()=>a(()=>import("./index.html-Cg-7ToiR.js"),__vite__mapDeps([2212,1])),meta:{t:"Framework 分类",I:!1}}],["/category/new-features/",{loader:()=>a(()=>import("./index.html-Cy4OPmYd.js"),__vite__mapDeps([2213,1])),meta:{t:"New Features 分类",I:!1}}],["/category/%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86/",{loader:()=>a(()=>import("./index.html-B19iV7wE.js"),__vite__mapDeps([2214,1])),meta:{t:"时间处理 分类",I:!1}}],["/category/%E7%BC%96%E7%A0%81%E8%BD%AC%E6%8D%A2/",{loader:()=>a(()=>import("./index.html-BWxeCZvx.js"),__vite__mapDeps([2215,1])),meta:{t:"编码转换 分类",I:!1}}],["/category/web-automation/",{loader:()=>a(()=>import("./index.html-zK49NceE.js"),__vite__mapDeps([2216,1])),meta:{t:"Web Automation 分类",I:!1}}],["/category/duration/",{loader:()=>a(()=>import("./index.html-DqacUBLr.js"),__vite__mapDeps([2217,1])),meta:{t:"Duration 分类",I:!1}}],["/category/java-tutorials/",{loader:()=>a(()=>import("./index.html-DqTMKTVy.js"),__vite__mapDeps([2218,1])),meta:{t:"Java Tutorials 分类",I:!1}}],["/category/hexformat-api/",{loader:()=>a(()=>import("./index.html-C_U8cNH7.js"),__vite__mapDeps([2219,1])),meta:{t:"HexFormat API 分类",I:!1}}],["/category/eol-characters/",{loader:()=>a(()=>import("./index.html-DkEiuGSZ.js"),__vite__mapDeps([2220,1])),meta:{t:"EOL Characters 分类",I:!1}}],["/category/%E5%B9%B6%E8%A1%8C%E6%93%8D%E4%BD%9C/",{loader:()=>a(()=>import("./index.html-CqJWqzew.js"),__vite__mapDeps([2221,1])),meta:{t:"并行操作 分类",I:!1}}],["/category/gzip/",{loader:()=>a(()=>import("./index.html-DMIHWCo9.js"),__vite__mapDeps([2222,1])),meta:{t:"GZIP 分类",I:!1}}],["/category/saga-pattern/",{loader:()=>a(()=>import("./index.html-B6nmy9iR.js"),__vite__mapDeps([2223,1])),meta:{t:"Saga Pattern 分类",I:!1}}],["/category/%E5%AF%86%E7%A0%81%E5%AD%A6/",{loader:()=>a(()=>import("./index.html-DRt0VeNU.js"),__vite__mapDeps([2224,1])),meta:{t:"密码学 分类",I:!1}}],["/category/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/",{loader:()=>a(()=>import("./index.html-Bea3BVxH.js"),__vite__mapDeps([2225,1])),meta:{t:"数据分析 分类",I:!1}}],["/category/commit-offsets/",{loader:()=>a(()=>import("./index.html-BIkwQDZr.js"),__vite__mapDeps([2226,1])),meta:{t:"Commit Offsets 分类",I:!1}}],["/category/java-libraries/",{loader:()=>a(()=>import("./index.html-DqxOMMST.js"),__vite__mapDeps([2227,1])),meta:{t:"Java Libraries 分类",I:!1}}],["/category/apache-commons/",{loader:()=>a(()=>import("./index.html-BAcoVLF-.js"),__vite__mapDeps([2228,1])),meta:{t:"Apache Commons 分类",I:!1}}],["/category/redpanda/",{loader:()=>a(()=>import("./index.html-wrt9hqkE.js"),__vite__mapDeps([2229,1])),meta:{t:"Redpanda 分类",I:!1}}],["/category/uri/",{loader:()=>a(()=>import("./index.html-DTb-7tqA.js"),__vite__mapDeps([2230,1])),meta:{t:"URI 分类",I:!1}}],["/category/jsoup/",{loader:()=>a(()=>import("./index.html-QbCYnlwR.js"),__vite__mapDeps([2231,1])),meta:{t:"Jsoup 分类",I:!1}}],["/category/authorization/",{loader:()=>a(()=>import("./index.html-IoCR6fdS.js"),__vite__mapDeps([2232,1])),meta:{t:"Authorization 分类",I:!1}}],["/category/development-practices/",{loader:()=>a(()=>import("./index.html-CjS8JOAJ.js"),__vite__mapDeps([2233,1])),meta:{t:"Development Practices 分类",I:!1}}],["/category/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/",{loader:()=>a(()=>import("./index.html-DxNj2279.js"),__vite__mapDeps([2234,1])),meta:{t:"数据类型转换 分类",I:!1}}],["/category/google-protocol-buffer/",{loader:()=>a(()=>import("./index.html-BsUP7Q3r.js"),__vite__mapDeps([2235,1])),meta:{t:"Google Protocol Buffer 分类",I:!1}}],["/category/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/",{loader:()=>a(()=>import("./index.html-zAOgo4KN.js"),__vite__mapDeps([2236,1])),meta:{t:"计算机科学 分类",I:!1}}],["/category/version-control/",{loader:()=>a(()=>import("./index.html-Ciu3u5nm.js"),__vite__mapDeps([2237,1])),meta:{t:"Version Control 分类",I:!1}}],["/category/spring-aop/",{loader:()=>a(()=>import("./index.html-BLUM7hrL.js"),__vite__mapDeps([2238,1])),meta:{t:"Spring AOP 分类",I:!1}}],["/category/update-or-insert/",{loader:()=>a(()=>import("./index.html-C6q2A-9b.js"),__vite__mapDeps([2239,1])),meta:{t:"Update-Or-Insert 分类",I:!1}}],["/category/macos/",{loader:()=>a(()=>import("./index.html-d7Hw_ZnO.js"),__vite__mapDeps([1664,1])),meta:{t:"macOS 分类",I:!1}}],["/category/apache-commons-compress/",{loader:()=>a(()=>import("./index.html-Hlv8NjbK.js"),__vite__mapDeps([2240,1])),meta:{t:"Apache Commons Compress 分类",I:!1}}],["/category/libraries/",{loader:()=>a(()=>import("./index.html-QJxvm-3F.js"),__vite__mapDeps([2241,1])),meta:{t:"Libraries 分类",I:!1}}],["/category/sshj/",{loader:()=>a(()=>import("./index.html-BEgncmj2.js"),__vite__mapDeps([2242,1])),meta:{t:"SSHJ 分类",I:!1}}],["/category/email/",{loader:()=>a(()=>import("./index.html-Je8RnItX.js"),__vite__mapDeps([2243,1])),meta:{t:"Email 分类",I:!1}}],["/category/java%E7%BC%96%E7%A8%8B/",{loader:()=>a(()=>import("./index.html-DgG_nmpk.js"),__vite__mapDeps([2244,1])),meta:{t:"Java编程 分类",I:!1}}],["/category/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%AF%94%E8%BE%83/",{loader:()=>a(()=>import("./index.html-CxYvMpgY.js"),__vite__mapDeps([2245,1])),meta:{t:"数据类型比较 分类",I:!1}}],["/category/jooq/",{loader:()=>a(()=>import("./index.html-CiEXqQZd.js"),__vite__mapDeps([2246,1])),meta:{t:"jOOQ 分类",I:!1}}],["/category/mybatis/",{loader:()=>a(()=>import("./index.html-DTxw7bp8.js"),__vite__mapDeps([2247,1])),meta:{t:"MyBatis 分类",I:!1}}],["/category/prometheus/",{loader:()=>a(()=>import("./index.html-C_pB7UPn.js"),__vite__mapDeps([2248,1])),meta:{t:"Prometheus 分类",I:!1}}],["/category/openai-api/",{loader:()=>a(()=>import("./index.html-BLGtO5e9.js"),__vite__mapDeps([2249,1])),meta:{t:"OpenAI API 分类",I:!1}}],["/category/java-persistence/",{loader:()=>a(()=>import("./index.html-BJOzF3PZ.js"),__vite__mapDeps([2250,1])),meta:{t:"Java Persistence 分类",I:!1}}],["/category/%E5%AE%89%E5%85%A8/",{loader:()=>a(()=>import("./index.html-qVf_5GJ3.js"),__vite__mapDeps([2251,1])),meta:{t:"安全 分类",I:!1}}],["/category/converternotfoundexception/",{loader:()=>a(()=>import("./index.html-Z6K4U2z-.js"),__vite__mapDeps([2252,1])),meta:{t:"ConverterNotFoundException 分类",I:!1}}],["/category/%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86/",{loader:()=>a(()=>import("./index.html-CZTMtUYy.js"),__vite__mapDeps([2253,1])),meta:{t:"依赖管理 分类",I:!1}}],["/category/comparator/",{loader:()=>a(()=>import("./index.html-CLI64ZUe.js"),__vite__mapDeps([2254,1])),meta:{t:"Comparator 分类",I:!1}}],["/category/%E6%B3%A8%E8%A7%A3%E4%B8%8E%E6%9E%9A%E4%B8%BE/",{loader:()=>a(()=>import("./index.html-Bjb4kKfE.js"),__vite__mapDeps([2255,1])),meta:{t:"注解与枚举 分类",I:!1}}],["/tag/",{loader:()=>a(()=>import("./index.html-DR_UTqu4.js"),__vite__mapDeps([2256,1])),meta:{t:"标签",I:!1}}],["/tag/alts/",{loader:()=>a(()=>import("./index.html-BCd9pTEg.js"),__vite__mapDeps([2257,1])),meta:{t:"标签: ALTS",I:!1}}],["/tag/%E5%AE%89%E5%85%A8/",{loader:()=>a(()=>import("./index.html-CXjQ3POd.js"),__vite__mapDeps([2258,1])),meta:{t:"标签: 安全",I:!1}}],["/tag/postgresql/",{loader:()=>a(()=>import("./index.html-DpHJkD1z.js"),__vite__mapDeps([2259,1])),meta:{t:"标签: PostgreSQL",I:!1}}],["/tag/macos/",{loader:()=>a(()=>import("./index.html-Ck4eOqyD.js"),__vite__mapDeps([2260,1])),meta:{t:"标签: MacOS",I:!1}}],["/tag/homebrew/",{loader:()=>a(()=>import("./index.html-GrM9-gPT.js"),__vite__mapDeps([2261,1])),meta:{t:"标签: Homebrew",I:!1}}],["/tag/database/",{loader:()=>a(()=>import("./index.html-D2bxAdxZ.js"),__vite__mapDeps([2262,1])),meta:{t:"标签: Database",I:!1}}],["/tag/datajpatest/",{loader:()=>a(()=>import("./index.html-D-PDMqRZ.js"),__vite__mapDeps([2263,1])),meta:{t:"标签: DataJpaTest",I:!1}}],["/tag/repository/",{loader:()=>a(()=>import("./index.html-D2-DP06f.js"),__vite__mapDeps([2264,1])),meta:{t:"标签: Repository",I:!1}}],["/tag/%E6%95%B0%E5%AD%97%E5%94%AF%E4%B8%80%E6%80%A7/",{loader:()=>a(()=>import("./index.html-DCQm6tpY.js"),__vite__mapDeps([2265,1])),meta:{t:"标签: 数字唯一性",I:!1}}],["/tag/%E9%9B%86%E5%90%88/",{loader:()=>a(()=>import("./index.html-o1pjAyW7.js"),__vite__mapDeps([2266,1])),meta:{t:"标签: 集合",I:!1}}],["/tag/%E6%B5%81api/",{loader:()=>a(()=>import("./index.html-CHIszqPx.js"),__vite__mapDeps([2267,1])),meta:{t:"标签: 流API",I:!1}}],["/tag/%E4%BD%8D%E6%93%8D%E4%BD%9C/",{loader:()=>a(()=>import("./index.html-D1kG9rT6.js"),__vite__mapDeps([2268,1])),meta:{t:"标签: 位操作",I:!1}}],["/tag/javatype/",{loader:()=>a(()=>import("./index.html-Doa9OZUP.js"),__vite__mapDeps([2269,1])),meta:{t:"标签: JavaType",I:!1}}],["/tag/class/",{loader:()=>a(()=>import("./index.html-DC0pLEuQ.js"),__vite__mapDeps([2270,1])),meta:{t:"标签: Class",I:!1}}],["/tag/netty/",{loader:()=>a(()=>import("./index.html-BbzK5mHG.js"),__vite__mapDeps([2271,1])),meta:{t:"标签: Netty",I:!1}}],["/tag/%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%99%A8/",{loader:()=>a(()=>import("./index.html-BqUt9DR5.js"),__vite__mapDeps([2272,1])),meta:{t:"标签: 事件处理器",I:!1}}],["/tag/%E7%9B%91%E5%90%AC%E5%99%A8/",{loader:()=>a(()=>import("./index.html-BDl9nVxI.js"),__vite__mapDeps([2273,1])),meta:{t:"标签: 监听器",I:!1}}],["/tag/groupid/",{loader:()=>a(()=>import("./index.html-DgOMxRaA.js"),__vite__mapDeps([2274,1])),meta:{t:"标签: GroupId",I:!1}}],["/tag/consumerid/",{loader:()=>a(()=>import("./index.html-CYDCq9nO.js"),__vite__mapDeps([2275,1])),meta:{t:"标签: ConsumerId",I:!1}}],["/tag/api%E6%96%87%E6%A1%A3/",{loader:()=>a(()=>import("./index.html-eih8_SVQ.js"),__vite__mapDeps([2276,1])),meta:{t:"标签: API文档",I:!1}}],["/tag/spring-boot/",{loader:()=>a(()=>import("./index.html-Ds9l_Y3c.js"),__vite__mapDeps([2277,1])),meta:{t:"标签: Spring Boot",I:!1}}],["/tag/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/",{loader:()=>a(()=>import("./index.html-DjnEQa-t.js"),__vite__mapDeps([2278,1])),meta:{t:"标签: 二叉搜索树",I:!1}}],["/tag/%E7%AE%97%E6%B3%95/",{loader:()=>a(()=>import("./index.html-DRnnSE4J.js"),__vite__mapDeps([2279,1])),meta:{t:"标签: 算法",I:!1}}],["/tag/%E5%BA%8F%E5%88%97/",{loader:()=>a(()=>import("./index.html-07qH-8bn.js"),__vite__mapDeps([2280,1])),meta:{t:"标签: 序列",I:!1}}],["/tag/%E9%80%92%E5%BD%92/",{loader:()=>a(()=>import("./index.html-TP77ljRf.js"),__vite__mapDeps([2281,1])),meta:{t:"标签: 递归",I:!1}}],["/tag/java/",{loader:()=>a(()=>import("./index.html-D-psLuW2.js"),__vite__mapDeps([2282,1])),meta:{t:"标签: Java",I:!1}}],["/tag/string/",{loader:()=>a(()=>import("./index.html-C8gO6sav.js"),__vite__mapDeps([2283,1])),meta:{t:"标签: String",I:!1}}],["/tag/substring/",{loader:()=>a(()=>import("./index.html-0I2I8BRB.js"),__vite__mapDeps([2284,1])),meta:{t:"标签: substring",I:!1}}],["/tag/apache-commons-lang/",{loader:()=>a(()=>import("./index.html-BgWPbz1f.js"),__vite__mapDeps([2285,1])),meta:{t:"标签: Apache Commons Lang",I:!1}}],["/tag/guava/",{loader:()=>a(()=>import("./index.html-Cn32YSuH.js"),__vite__mapDeps([2286,1])),meta:{t:"标签: Guava",I:!1}}],["/tag/%E7%BC%A9%E5%86%99/",{loader:()=>a(()=>import("./index.html-Djrw2NQe.js"),__vite__mapDeps([2287,1])),meta:{t:"标签: 缩写",I:!1}}],["/tag/%E5%A7%93%E5%90%8D%E7%BC%A9%E5%86%99/",{loader:()=>a(()=>import("./index.html-roGOpo9u.js"),__vite__mapDeps([2288,1])),meta:{t:"标签: 姓名缩写",I:!1}}],["/tag/json/",{loader:()=>a(()=>import("./index.html-DMdpPLi7.js"),__vite__mapDeps([2289,1])),meta:{t:"标签: JSON",I:!1}}],["/tag/java-list/",{loader:()=>a(()=>import("./index.html-BA-3ILg0.js"),__vite__mapDeps([2290,1])),meta:{t:"标签: Java List",I:!1}}],["/tag/typetoken/",{loader:()=>a(()=>import("./index.html-CqYdmPyB.js"),__vite__mapDeps([2291,1])),meta:{t:"标签: TypeToken",I:!1}}],["/tag/s3/",{loader:()=>a(()=>import("./index.html-CbPHk6hL.js"),__vite__mapDeps([2292,1])),meta:{t:"标签: S3",I:!1}}],["/tag/mock/",{loader:()=>a(()=>import("./index.html-Cvvzslwn.js"),__vite__mapDeps([2293,1])),meta:{t:"标签: Mock",I:!1}}],["/tag/testing/",{loader:()=>a(()=>import("./index.html-DZ-YK6K7.js"),__vite__mapDeps([2294,1])),meta:{t:"标签: Testing",I:!1}}],["/tag/%E5%9C%B0%E5%9B%BE/",{loader:()=>a(()=>import("./index.html-BaAPiBmN.js"),__vite__mapDeps([2295,1])),meta:{t:"标签: 地图",I:!1}}],["/tag/%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA/",{loader:()=>a(()=>import("./index.html-BPoPO44Z.js"),__vite__mapDeps([2296,1])),meta:{t:"标签: 格式化输出",I:!1}}],["/tag/graphql-mutation/",{loader:()=>a(()=>import("./index.html-DMwc8-HN.js"),__vite__mapDeps([2297,1])),meta:{t:"标签: GraphQL Mutation",I:!1}}],["/tag/spring/",{loader:()=>a(()=>import("./index.html-D3HD2YYe.js"),__vite__mapDeps([2298,1])),meta:{t:"标签: Spring",I:!1}}],["/tag/spring-security/",{loader:()=>a(()=>import("./index.html-CXbYqawh.js"),__vite__mapDeps([2299,1])),meta:{t:"标签: Spring Security",I:!1}}],["/tag/spring-data-jpa/",{loader:()=>a(()=>import("./index.html-VBB7ffA8.js"),__vite__mapDeps([2300,1])),meta:{t:"标签: Spring Data JPA",I:!1}}],["/tag/%E8%BF%81%E7%A7%BB/",{loader:()=>a(()=>import("./index.html-DdePspGW.js"),__vite__mapDeps([2301,1])),meta:{t:"标签: 迁移",I:!1}}],["/tag/%E6%B5%81/",{loader:()=>a(()=>import("./index.html-DYhEUrIj.js"),__vite__mapDeps([2302,1])),meta:{t:"标签: 流",I:!1}}],["/tag/%E5%88%97%E8%A1%A8/",{loader:()=>a(()=>import("./index.html-CvO9IfaD.js"),__vite__mapDeps([2303,1])),meta:{t:"标签: 列表",I:!1}}],["/tag/%E6%89%93%E5%8D%B0/",{loader:()=>a(()=>import("./index.html-CAVz0cFJ.js"),__vite__mapDeps([2304,1])),meta:{t:"标签: 打印",I:!1}}],["/tag/query-hints/",{loader:()=>a(()=>import("./index.html-D3StsCy9.js"),__vite__mapDeps([2305,1])),meta:{t:"标签: Query Hints",I:!1}}],["/tag/performance/",{loader:()=>a(()=>import("./index.html-x3rbtYZQ.js"),__vite__mapDeps([2306,1])),meta:{t:"标签: Performance",I:!1}}],["/tag/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/",{loader:()=>a(()=>import("./index.html-BWMik1ET.js"),__vite__mapDeps([2307,1])),meta:{t:"标签: 函数式编程",I:!1}}],["/tag/railway-oriented-programming/",{loader:()=>a(()=>import("./index.html-CP3Cb8_O.js"),__vite__mapDeps([2308,1])),meta:{t:"标签: Railway Oriented Programming",I:!1}}],["/tag/trailing-spaces/",{loader:()=>a(()=>import("./index.html-C0XgokKf.js"),__vite__mapDeps([2309,1])),meta:{t:"标签: trailing spaces",I:!1}}],["/tag/whitespace/",{loader:()=>a(()=>import("./index.html-oN2uN0HW.js"),__vite__mapDeps([2310,1])),meta:{t:"标签: whitespace",I:!1}}],["/tag/regex/",{loader:()=>a(()=>import("./index.html-DOivz3ly.js"),__vite__mapDeps([2311,1])),meta:{t:"标签: regex",I:!1}}],["/tag/striptrailing/",{loader:()=>a(()=>import("./index.html-BDC149TD.js"),__vite__mapDeps([2312,1])),meta:{t:"标签: stripTrailing",I:!1}}],["/tag/flatbuffers/",{loader:()=>a(()=>import("./index.html-CeMg9Jyb.js"),__vite__mapDeps([2313,1])),meta:{t:"标签: FlatBuffers",I:!1}}],["/tag/tutorial/",{loader:()=>a(()=>import("./index.html-D-RD4NIP.js"),__vite__mapDeps([2314,1])),meta:{t:"标签: Tutorial",I:!1}}],["/tag/jsonnode/",{loader:()=>a(()=>import("./index.html-BJ68DI0k.js"),__vite__mapDeps([2315,1])),meta:{t:"标签: JsonNode",I:!1}}],["/tag/arraynode/",{loader:()=>a(()=>import("./index.html-a-G1ho4y.js"),__vite__mapDeps([2316,1])),meta:{t:"标签: ArrayNode",I:!1}}],["/tag/hibernate/",{loader:()=>a(()=>import("./index.html-DdNS4ezh.js"),__vite__mapDeps([2317,1])),meta:{t:"标签: Hibernate",I:!1}}],["/tag/rest-api/",{loader:()=>a(()=>import("./index.html-DPlV8NhR.js"),__vite__mapDeps([2318,1])),meta:{t:"标签: REST API",I:!1}}],["/tag/testcontainers/",{loader:()=>a(()=>import("./index.html-BHvaRwD_.js"),__vite__mapDeps([2319,1])),meta:{t:"标签: Testcontainers",I:!1}}],["/tag/docker/",{loader:()=>a(()=>import("./index.html-DPgxrDkN.js"),__vite__mapDeps([2320,1])),meta:{t:"标签: Docker",I:!1}}],["/tag/testing-tools/",{loader:()=>a(()=>import("./index.html-o01zt9e3.js"),__vite__mapDeps([2321,1])),meta:{t:"标签: Testing Tools",I:!1}}],["/tag/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/",{loader:()=>a(()=>import("./index.html-45IhPKOs.js"),__vite__mapDeps([2322,1])),meta:{t:"标签: 分布式系统",I:!1}}],["/tag/%E9%94%AE%E5%80%BC%E5%AD%98%E5%82%A8/",{loader:()=>a(()=>import("./index.html-CTbZ0aWq.js"),__vite__mapDeps([2323,1])),meta:{t:"标签: 键值存储",I:!1}}],["/tag/annotation/",{loader:()=>a(()=>import("./index.html-CGtFwkUa.js"),__vite__mapDeps([2324,1])),meta:{t:"标签: Annotation",I:!1}}],["/tag/softdelete/",{loader:()=>a(()=>import("./index.html-s-2iR5Kq.js"),__vite__mapDeps([2325,1])),meta:{t:"标签: SoftDelete",I:!1}}],["/tag/%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1/",{loader:()=>a(()=>import("./index.html-DgyBBVHJ.js"),__vite__mapDeps([2326,1])),meta:{t:"标签: 动态路由",I:!1}}],["/tag/%E4%BC%81%E4%B8%9A%E9%9B%86%E6%88%90%E6%A8%A1%E5%BC%8F/",{loader:()=>a(()=>import("./index.html-Ca6DD1G_.js"),__vite__mapDeps([2327,1])),meta:{t:"标签: 企业集成模式",I:!1}}],["/tag/%E6%9D%83%E9%87%8D%E5%B9%B3%E5%9D%87%E6%95%B0/",{loader:()=>a(()=>import("./index.html-D_XZPg0-.js"),__vite__mapDeps([2328,1])),meta:{t:"标签: 权重平均数",I:!1}}],["/tag/%E8%AE%A1%E7%AE%97/",{loader:()=>a(()=>import("./index.html-BJG_sRVm.js"),__vite__mapDeps([2329,1])),meta:{t:"标签: 计算",I:!1}}],["/tag/base64%E7%BC%96%E7%A0%81/",{loader:()=>a(()=>import("./index.html-DVACygbL.js"),__vite__mapDeps([2330,1])),meta:{t:"标签: Base64编码",I:!1}}],["/tag/%E6%95%B0%E6%8D%AE%E7%BC%96%E7%A0%81/",{loader:()=>a(()=>import("./index.html-CxIklPcI.js"),__vite__mapDeps([2331,1])),meta:{t:"标签: 数据编码",I:!1}}],["/tag/string-rotation/",{loader:()=>a(()=>import("./index.html-B1xtXuOB.js"),__vite__mapDeps([2332,1])),meta:{t:"标签: String Rotation",I:!1}}],["/tag/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%8D%E8%BD%AC/",{loader:()=>a(()=>import("./index.html-BA3IWeGz.js"),__vite__mapDeps([2333,1])),meta:{t:"标签: 字符串反转",I:!1}}],["/tag/%E9%95%9C%E5%83%8F%E6%B5%8B%E8%AF%95/",{loader:()=>a(()=>import("./index.html-DgiAk9uP.js"),__vite__mapDeps([2334,1])),meta:{t:"标签: 镜像测试",I:!1}}],["/tag/linkedhashmap/",{loader:()=>a(()=>import("./index.html-CJwbvsmb.js"),__vite__mapDeps([2335,1])),meta:{t:"标签: LinkedHashMap",I:!1}}],["/tag/stream/",{loader:()=>a(()=>import("./index.html-DDToGDDg.js"),__vite__mapDeps([2336,1])),meta:{t:"标签: Stream",I:!1}}],["/tag/java-8/",{loader:()=>a(()=>import("./index.html-C3gX7ugZ.js"),__vite__mapDeps([2337,1])),meta:{t:"标签: Java 8",I:!1}}],["/tag/completablefuture/",{loader:()=>a(()=>import("./index.html-DEDCWTGT.js"),__vite__mapDeps([2338,1])),meta:{t:"标签: CompletableFuture",I:!1}}],["/tag/runasync/",{loader:()=>a(()=>import("./index.html-DArkrzN6.js"),__vite__mapDeps([2339,1])),meta:{t:"标签: runAsync",I:!1}}],["/tag/supplyasync/",{loader:()=>a(()=>import("./index.html-DDygiyfO.js"),__vite__mapDeps([2340,1])),meta:{t:"标签: supplyAsync",I:!1}}],["/tag/unix-timestamp/",{loader:()=>a(()=>import("./index.html-BAkaEfNd.js"),__vite__mapDeps([2341,1])),meta:{t:"标签: Unix Timestamp",I:!1}}],["/tag/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BD%AC%E6%8D%A2/",{loader:()=>a(()=>import("./index.html-C0iKjp-b.js"),__vite__mapDeps([2342,1])),meta:{t:"标签: 表达式转换",I:!1}}],["/tag/%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E7%A4%BA%E6%B3%95/",{loader:()=>a(()=>import("./index.html-CKJF3bnr.js"),__vite__mapDeps([2343,1])),meta:{t:"标签: 逆波兰表示法",I:!1}}],["/tag/uppercase/",{loader:()=>a(()=>import("./index.html-BWHq7u81.js"),__vite__mapDeps([2344,1])),meta:{t:"标签: uppercase",I:!1}}],["/tag/lowercase/",{loader:()=>a(()=>import("./index.html-Cfy5QRWZ.js"),__vite__mapDeps([2345,1])),meta:{t:"标签: lowercase",I:!1}}],["/tag/count/",{loader:()=>a(()=>import("./index.html-D1HZ240f.js"),__vite__mapDeps([2346,1])),meta:{t:"标签: count",I:!1}}],["/tag/countdownlatch/",{loader:()=>a(()=>import("./index.html-C8XHgw5u.js"),__vite__mapDeps([2347,1])),meta:{t:"标签: CountDownLatch",I:!1}}],["/tag/semaphore/",{loader:()=>a(()=>import("./index.html-DPiD7FHs.js"),__vite__mapDeps([2348,1])),meta:{t:"标签: Semaphore",I:!1}}],["/tag/urlconnection/",{loader:()=>a(()=>import("./index.html-DyTRyL8J.js"),__vite__mapDeps([2349,1])),meta:{t:"标签: URLConnection",I:!1}}],["/tag/%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BF%9E%E6%8E%A5/",{loader:()=>a(()=>import("./index.html-jCLLT66Q.js"),__vite__mapDeps([2350,1])),meta:{t:"标签: 自定义连接",I:!1}}],["/tag/thenapply/",{loader:()=>a(()=>import("./index.html-bT5NmzjR.js"),__vite__mapDeps([2351,1])),meta:{t:"标签: thenApply",I:!1}}],["/tag/thenapplyasync/",{loader:()=>a(()=>import("./index.html-BN4w5k0q.js"),__vite__mapDeps([2352,1])),meta:{t:"标签: thenApplyAsync",I:!1}}],["/tag/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/",{loader:()=>a(()=>import("./index.html-Dr-xB9rg.js"),__vite__mapDeps([2353,1])),meta:{t:"标签: 字符串处理",I:!1}}],["/tag/%E6%95%B0%E5%AD%97%E6%8F%90%E5%8F%96/",{loader:()=>a(()=>import("./index.html-Dn--pReK.js"),__vite__mapDeps([2354,1])),meta:{t:"标签: 数字提取",I:!1}}],["/tag/equilibrium-index/",{loader:()=>a(()=>import("./index.html-BFrzKSM6.js"),__vite__mapDeps([2355,1])),meta:{t:"标签: Equilibrium Index",I:!1}}],["/tag/array/",{loader:()=>a(()=>import("./index.html-BE3_R9ly.js"),__vite__mapDeps([2356,1])),meta:{t:"标签: Array",I:!1}}],["/tag/%E9%9D%9E%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/",{loader:()=>a(()=>import("./index.html-DRRQty0b.js"),__vite__mapDeps([2357,1])),meta:{t:"标签: 非重复元素",I:!1}}],["/tag/%E5%88%97%E8%A1%A8%E5%A4%84%E7%90%86/",{loader:()=>a(()=>import("./index.html-DjRIXPzB.js"),__vite__mapDeps([2358,1])),meta:{t:"标签: 列表处理",I:!1}}],["/tag/spring-data/",{loader:()=>a(()=>import("./index.html-DMmYJgAf.js"),__vite__mapDeps([2359,1])),meta:{t:"标签: Spring Data",I:!1}}],["/tag/jpa/",{loader:()=>a(()=>import("./index.html-BSwm5ueZ.js"),__vite__mapDeps([2360,1])),meta:{t:"标签: JPA",I:!1}}],["/tag/learn-spring-security/",{loader:()=>a(()=>import("./index.html-BwI3VwcI.js"),__vite__mapDeps([2361,1])),meta:{t:"标签: Learn Spring Security",I:!1}}],["/tag/learn-spring-security-core/",{loader:()=>a(()=>import("./index.html-3EalKTut.js"),__vite__mapDeps([2362,1])),meta:{t:"标签: Learn Spring Security Core",I:!1}}],["/tag/learn-spring-security-oauth/",{loader:()=>a(()=>import("./index.html-C3BAa-dY.js"),__vite__mapDeps([2363,1])),meta:{t:"标签: Learn Spring Security OAuth",I:!1}}],["/tag/learn-spring/",{loader:()=>a(()=>import("./index.html-BIqFJdis.js"),__vite__mapDeps([2364,1])),meta:{t:"标签: Learn Spring",I:!1}}],["/tag/learn-spring-data-jpa/",{loader:()=>a(()=>import("./index.html-BgQZRiHu.js"),__vite__mapDeps([2365,1])),meta:{t:"标签: Learn Spring Data JPA",I:!1}}],["/tag/system.in.read()/",{loader:()=>a(()=>import("./index.html-CQyPbKPb.js"),__vite__mapDeps([2366,1])),meta:{t:"标签: System.in.read()",I:!1}}],["/tag/%E7%94%A8%E6%88%B7%E8%BE%93%E5%85%A5/",{loader:()=>a(()=>import("./index.html-UQHepx0R.js"),__vite__mapDeps([2367,1])),meta:{t:"标签: 用户输入",I:!1}}],["/tag/findby/",{loader:()=>a(()=>import("./index.html-BXQf6N0m.js"),__vite__mapDeps([2368,1])),meta:{t:"标签: findBy",I:!1}}],["/tag/%E5%A4%9A%E5%88%97%E6%9F%A5%E8%AF%A2/",{loader:()=>a(()=>import("./index.html-CQ6bGDuN.js"),__vite__mapDeps([2369,1])),meta:{t:"标签: 多列查询",I:!1}}],["/tag/thymeleaf/",{loader:()=>a(()=>import("./index.html-CDwTnlhg.js"),__vite__mapDeps([2370,1])),meta:{t:"标签: Thymeleaf",I:!1}}],["/tag/spring-mvc/",{loader:()=>a(()=>import("./index.html-CsZhO9DQ.js"),__vite__mapDeps([2371,1])),meta:{t:"标签: Spring MVC",I:!1}}],["/tag/junit-5/",{loader:()=>a(()=>import("./index.html-CXo7VbWm.js"),__vite__mapDeps([2372,1])),meta:{t:"标签: JUnit 5",I:!1}}],["/tag/mockito/",{loader:()=>a(()=>import("./index.html-JYjcffBv.js"),__vite__mapDeps([2373,1])),meta:{t:"标签: Mockito",I:!1}}],["/tag/%E6%B5%8B%E8%AF%95/",{loader:()=>a(()=>import("./index.html-dLyNv99O.js"),__vite__mapDeps([2374,1])),meta:{t:"标签: 测试",I:!1}}],["/tag/jdk/",{loader:()=>a(()=>import("./index.html-BNQiKo93.js"),__vite__mapDeps([2375,1])),meta:{t:"标签: JDK",I:!1}}],["/tag/%E5%AE%89%E8%A3%85/",{loader:()=>a(()=>import("./index.html-B5QmlAol.js"),__vite__mapDeps([2376,1])),meta:{t:"标签: 安装",I:!1}}],["/tag/java%E5%8F%8D%E5%B0%84/",{loader:()=>a(()=>import("./index.html-Cf5aEXTG.js"),__vite__mapDeps([2377,1])),meta:{t:"标签: Java反射",I:!1}}],["/tag/%E5%86%85%E5%B5%8C%E7%B1%BB%E5%AE%9E%E4%BE%8B%E5%8C%96/",{loader:()=>a(()=>import("./index.html-BZqVEnYn.js"),__vite__mapDeps([2378,1])),meta:{t:"标签: 内嵌类实例化",I:!1}}],["/tag/%E6%BA%90%E4%BB%A3%E7%A0%81%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/",{loader:()=>a(()=>import("./index.html-C2-0l_lK.js"),__vite__mapDeps([2379,1])),meta:{t:"标签: 源代码搜索引擎",I:!1}}],["/tag/%E8%B7%A8%E5%BC%95%E7%94%A8/",{loader:()=>a(()=>import("./index.html-Bx4ySZpM.js"),__vite__mapDeps([2380,1])),meta:{t:"标签: 跨引用",I:!1}}],["/tag/%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/",{loader:()=>a(()=>import("./index.html-CjcAB3UK.js"),__vite__mapDeps([2381,1])),meta:{t:"标签: 安装指南",I:!1}}],["/tag/logging/",{loader:()=>a(()=>import("./index.html-B9K9fFGq.js"),__vite__mapDeps([2382,1])),meta:{t:"标签: Logging",I:!1}}],["/tag/aspect-oriented-programming/",{loader:()=>a(()=>import("./index.html-D7lSfI4J.js"),__vite__mapDeps([2383,1])),meta:{t:"标签: Aspect-Oriented Programming",I:!1}}],["/tag/%E9%82%AE%E7%AE%B1%E5%9C%B0%E5%9D%80/",{loader:()=>a(()=>import("./index.html-DDShDncB.js"),__vite__mapDeps([2384,1])),meta:{t:"标签: 邮箱地址",I:!1}}],["/tag/%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81/",{loader:()=>a(()=>import("./index.html-B_L4etaf.js"),__vite__mapDeps([2385,1])),meta:{t:"标签: 电话号码",I:!1}}],["/tag/%E8%84%B1%E6%95%8F/",{loader:()=>a(()=>import("./index.html-Cvbiw44h.js"),__vite__mapDeps([2386,1])),meta:{t:"标签: 脱敏",I:!1}}],["/tag/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/",{loader:()=>a(()=>import("./index.html-BpfAUpRw.js"),__vite__mapDeps([2387,1])),meta:{t:"标签: 正则表达式",I:!1}}],["/tag/algorithm/",{loader:()=>a(()=>import("./index.html-DM14UGU6.js"),__vite__mapDeps([2388,1])),meta:{t:"标签: Algorithm",I:!1}}],["/tag/%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1/",{loader:()=>a(()=>import("./index.html-FlCEvksT.js"),__vite__mapDeps([2389,1])),meta:{t:"标签: 可变对象",I:!1}}],["/tag/%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1/",{loader:()=>a(()=>import("./index.html-p5TzRiZj.js"),__vite__mapDeps([2390,1])),meta:{t:"标签: 不可变对象",I:!1}}],["/tag/backend-for-frontend/",{loader:()=>a(()=>import("./index.html-Bi_67X1c.js"),__vite__mapDeps([2391,1])),meta:{t:"标签: Backend for Frontend",I:!1}}],["/tag/pagination/",{loader:()=>a(()=>import("./index.html--XdWYAxt.js"),__vite__mapDeps([2392,1])),meta:{t:"标签: Pagination",I:!1}}],["/tag/jdbc/",{loader:()=>a(()=>import("./index.html-GHLd8_-J.js"),__vite__mapDeps([2393,1])),meta:{t:"标签: JDBC",I:!1}}],["/tag/kotlin/",{loader:()=>a(()=>import("./index.html-keGEMiYb.js"),__vite__mapDeps([2394,1])),meta:{t:"标签: Kotlin",I:!1}}],["/tag/string-parsing/",{loader:()=>a(()=>import("./index.html-ClrM-x4m.js"),__vite__mapDeps([2395,1])),meta:{t:"标签: String Parsing",I:!1}}],["/tag/number-format/",{loader:()=>a(()=>import("./index.html-5_yw3kzE.js"),__vite__mapDeps([2396,1])),meta:{t:"标签: Number Format",I:!1}}],["/tag/serialization/",{loader:()=>a(()=>import("./index.html-CML1zCNN.js"),__vite__mapDeps([2397,1])),meta:{t:"标签: Serialization",I:!1}}],["/tag/deserialization/",{loader:()=>a(()=>import("./index.html-y2A9qwhe.js"),__vite__mapDeps([2398,1])),meta:{t:"标签: Deserialization",I:!1}}],["/tag/java%E8%99%9A%E6%8B%9F%E7%BA%BF%E7%A8%8B/",{loader:()=>a(()=>import("./index.html-BOJNYL0J.js"),__vite__mapDeps([2399,1])),meta:{t:"标签: Java虚拟线程",I:!1}}],["/tag/%E5%B9%B6%E5%8F%91/",{loader:()=>a(()=>import("./index.html-C8u-7_2E.js"),__vite__mapDeps([2400,1])),meta:{t:"标签: 并发",I:!1}}],["/tag/maven/",{loader:()=>a(()=>import("./index.html-CMeI1EaQ.js"),__vite__mapDeps([2401,1])),meta:{t:"标签: Maven",I:!1}}],["/tag/java-18/",{loader:()=>a(()=>import("./index.html-QkdwWATF.js"),__vite__mapDeps([2402,1])),meta:{t:"标签: Java 18",I:!1}}],["/tag/simple-web-server/",{loader:()=>a(()=>import("./index.html-_vmqyye3.js"),__vite__mapDeps([2403,1])),meta:{t:"标签: Simple Web Server",I:!1}}],["/tag/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/",{loader:()=>a(()=>import("./index.html-CrVaXDYD.js"),__vite__mapDeps([2404,1])),meta:{t:"标签: 动态规划",I:!1}}],["/tag/base64/",{loader:()=>a(()=>import("./index.html-Cv6UoqGx.js"),__vite__mapDeps([2405,1])),meta:{t:"标签: Base64",I:!1}}],["/tag/encoding/",{loader:()=>a(()=>import("./index.html-Onw5UyK8.js"),__vite__mapDeps([2406,1])),meta:{t:"标签: Encoding",I:!1}}],["/tag/urlencoder/",{loader:()=>a(()=>import("./index.html-D3L4kJj4.js"),__vite__mapDeps([2407,1])),meta:{t:"标签: URLEncoder",I:!1}}],["/tag/%E7%BC%96%E7%A0%81/",{loader:()=>a(()=>import("./index.html-CxE806__.js"),__vite__mapDeps([2408,1])),meta:{t:"标签: 编码",I:!1}}],["/tag/%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6/",{loader:()=>a(()=>import("./index.html-CTyPFwsc.js"),__vite__mapDeps([2409,1])),meta:{t:"标签: 特殊字符",I:!1}}],["/tag/raw-type/",{loader:()=>a(()=>import("./index.html-DsE89hek.js"),__vite__mapDeps([2410,1])),meta:{t:"标签: Raw Type",I:!1}}],["/tag/java-generics/",{loader:()=>a(()=>import("./index.html-BKNbMgJW.js"),__vite__mapDeps([2411,1])),meta:{t:"标签: Java Generics",I:!1}}],["/tag/instancealreadyexistsexception/",{loader:()=>a(()=>import("./index.html-BoARI0fm.js"),__vite__mapDeps([2412,1])),meta:{t:"标签: InstanceAlreadyExistsException",I:!1}}],["/tag/kafka-producer/",{loader:()=>a(()=>import("./index.html-B9cEnCEX.js"),__vite__mapDeps([2413,1])),meta:{t:"标签: Kafka producer",I:!1}}],["/tag/kafka-consumer/",{loader:()=>a(()=>import("./index.html-CPV8pwoj.js"),__vite__mapDeps([2414,1])),meta:{t:"标签: Kafka consumer",I:!1}}],["/tag/apache-kafka/",{loader:()=>a(()=>import("./index.html-D9vVN9Iw.js"),__vite__mapDeps([2415,1])),meta:{t:"标签: Apache Kafka",I:!1}}],["/tag/kafka-headers/",{loader:()=>a(()=>import("./index.html-BByTURbv.js"),__vite__mapDeps([2416,1])),meta:{t:"标签: Kafka Headers",I:!1}}],["/tag/jobparameters/",{loader:()=>a(()=>import("./index.html-DMCttZEz.js"),__vite__mapDeps([2417,1])),meta:{t:"标签: JobParameters",I:!1}}],["/tag/itemreader/",{loader:()=>a(()=>import("./index.html-thDjsN9d.js"),__vite__mapDeps([2418,1])),meta:{t:"标签: ItemReader",I:!1}}],["/tag/%E6%95%99%E7%A8%8B/",{loader:()=>a(()=>import("./index.html-C0zbD8jP.js"),__vite__mapDeps([2419,1])),meta:{t:"标签: 教程",I:!1}}],["/tag/design-pattern/",{loader:()=>a(()=>import("./index.html-CMxLgLGL.js"),__vite__mapDeps([2420,1])),meta:{t:"标签: Design Pattern",I:!1}}],["/tag/builder-pattern/",{loader:()=>a(()=>import("./index.html-DdV2wTqS.js"),__vite__mapDeps([2421,1])),meta:{t:"标签: Builder Pattern",I:!1}}],["/tag/%E5%B7%A5%E4%BD%9C%E6%97%A5%E8%AE%A1%E7%AE%97/",{loader:()=>a(()=>import("./index.html-BRwa9uBd.js"),__vite__mapDeps([2422,1])),meta:{t:"标签: 工作日计算",I:!1}}],["/tag/java%E6%97%A5%E6%9C%9F%E6%93%8D%E4%BD%9C/",{loader:()=>a(()=>import("./index.html-DzKNVCRd.js"),__vite__mapDeps([2423,1])),meta:{t:"标签: Java日期操作",I:!1}}],["/tag/%E6%95%B0%E5%AD%A6%E8%BF%90%E7%AE%97/",{loader:()=>a(()=>import("./index.html-Yp4yBm6z.js"),__vite__mapDeps([2424,1])),meta:{t:"标签: 数学运算",I:!1}}],["/tag/persistence/",{loader:()=>a(()=>import("./index.html-Dyay9xgT.js"),__vite__mapDeps([2425,1])),meta:{t:"标签: Persistence",I:!1}}],["/tag/rest/",{loader:()=>a(()=>import("./index.html-CvjyUiYt.js"),__vite__mapDeps([2426,1])),meta:{t:"标签: REST",I:!1}}],["/tag/security/",{loader:()=>a(()=>import("./index.html-DQnvCnJf.js"),__vite__mapDeps([2427,1])),meta:{t:"标签: Security",I:!1}}],["/tag/gregorian/",{loader:()=>a(()=>import("./index.html-D6rN21i_.js"),__vite__mapDeps([2428,1])),meta:{t:"标签: Gregorian",I:!1}}],["/tag/hijri/",{loader:()=>a(()=>import("./index.html-CpqL5Hbq.js"),__vite__mapDeps([2429,1])),meta:{t:"标签: Hijri",I:!1}}],["/tag/%E6%97%A5%E6%9C%9F%E8%BD%AC%E6%8D%A2/",{loader:()=>a(()=>import("./index.html-Can1beyc.js"),__vite__mapDeps([2430,1])),meta:{t:"标签: 日期转换",I:!1}}],["/tag/instant/",{loader:()=>a(()=>import("./index.html-NEnGhYiV.js"),__vite__mapDeps([2431,1])),meta:{t:"标签: Instant",I:!1}}],["/tag/localdate/",{loader:()=>a(()=>import("./index.html-uoK81CSE.js"),__vite__mapDeps([2432,1])),meta:{t:"标签: LocalDate",I:!1}}],["/tag/joda-time/",{loader:()=>a(()=>import("./index.html-BaEviHTR.js"),__vite__mapDeps([2433,1])),meta:{t:"标签: Joda-Time",I:!1}}],["/tag/string-date-conversion/",{loader:()=>a(()=>import("./index.html-BJdvE8KF.js"),__vite__mapDeps([2434,1])),meta:{t:"标签: String Date Conversion",I:!1}}],["/tag/xml-schema/",{loader:()=>a(()=>import("./index.html-D9BC3gKd.js"),__vite__mapDeps([2435,1])),meta:{t:"标签: XML Schema",I:!1}}],["/tag/byte/",{loader:()=>a(()=>import("./index.html-BPKQkbKz.js"),__vite__mapDeps([2436,1])),meta:{t:"标签: byte",I:!1}}],["/tag/int/",{loader:()=>a(()=>import("./index.html-Bw62CsSB.js"),__vite__mapDeps([2437,1])),meta:{t:"标签: int",I:!1}}],["/tag/%E8%BD%AC%E6%8D%A2/",{loader:()=>a(()=>import("./index.html-B8WZb2nZ.js"),__vite__mapDeps([2438,1])),meta:{t:"标签: 转换",I:!1}}],["/tag/unicode/",{loader:()=>a(()=>import("./index.html-5XiDBMfk.js"),__vite__mapDeps([2439,1])),meta:{t:"标签: Unicode",I:!1}}],["/tag/spring-webclient/",{loader:()=>a(()=>import("./index.html-qGRSdyYO.js"),__vite__mapDeps([2440,1])),meta:{t:"标签: Spring WebClient",I:!1}}],["/tag/custom-deserialization/",{loader:()=>a(()=>import("./index.html-B3h_y2mv.js"),__vite__mapDeps([2441,1])),meta:{t:"标签: Custom Deserialization",I:!1}}],["/tag/mvn-verify/",{loader:()=>a(()=>import("./index.html-U2DQT2xD.js"),__vite__mapDeps([2442,1])),meta:{t:"标签: mvn verify",I:!1}}],["/tag/mvn-test/",{loader:()=>a(()=>import("./index.html-DtnlwCHm.js"),__vite__mapDeps([2443,1])),meta:{t:"标签: mvn test",I:!1}}],["/tag/mvn-install/",{loader:()=>a(()=>import("./index.html-Bq-wK7X9.js"),__vite__mapDeps([2444,1])),meta:{t:"标签: mvn install",I:!1}}],["/tag/%E6%97%B6%E9%97%B4/",{loader:()=>a(()=>import("./index.html-CdsbATWU.js"),__vite__mapDeps([2445,1])),meta:{t:"标签: 时间",I:!1}}],["/tag/%E6%97%B6%E5%8C%BA/",{loader:()=>a(()=>import("./index.html-Bw-UINDN.js"),__vite__mapDeps([2446,1])),meta:{t:"标签: 时区",I:!1}}],["/tag/ssl-debug/",{loader:()=>a(()=>import("./index.html-rVsY0v9M.js"),__vite__mapDeps([2447,1])),meta:{t:"标签: SSL Debug",I:!1}}],["/tag/java-secure-socket-layer/",{loader:()=>a(()=>import("./index.html-CwC_CIaD.js"),__vite__mapDeps([2448,1])),meta:{t:"标签: Java Secure Socket Layer",I:!1}}],["/tag/orkes-conductor/",{loader:()=>a(()=>import("./index.html-Bk9qQp4G.js"),__vite__mapDeps([2449,1])),meta:{t:"标签: Orkes Conductor",I:!1}}],["/tag/kafka/",{loader:()=>a(()=>import("./index.html-BTFXFPmZ.js"),__vite__mapDeps([2450,1])),meta:{t:"标签: Kafka",I:!1}}],["/tag/event-driven/",{loader:()=>a(()=>import("./index.html-CLF5cNHH.js"),__vite__mapDeps([2451,1])),meta:{t:"标签: Event-Driven",I:!1}}],["/tag/securerandom/",{loader:()=>a(()=>import("./index.html-Be6aVzEj.js"),__vite__mapDeps([2452,1])),meta:{t:"标签: SecureRandom",I:!1}}],["/tag/%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%94%9F%E6%88%90/",{loader:()=>a(()=>import("./index.html-DPiJ0I_R.js"),__vite__mapDeps([2453,1])),meta:{t:"标签: 随机数生成",I:!1}}],["/tag/spring-kafka/",{loader:()=>a(()=>import("./index.html-CYFc1Izw.js"),__vite__mapDeps([2454,1])),meta:{t:"标签: Spring-Kafka",I:!1}}],["/tag/%E5%AD%97%E7%AC%A6%E4%B8%B2/",{loader:()=>a(()=>import("./index.html-C1k5uMQP.js"),__vite__mapDeps([2455,1])),meta:{t:"标签: 字符串",I:!1}}],["/tag/utf-8/",{loader:()=>a(()=>import("./index.html-UNm8wvcS.js"),__vite__mapDeps([2456,1])),meta:{t:"标签: UTF-8",I:!1}}],["/tag/iso-8859-1/",{loader:()=>a(()=>import("./index.html-DxaurCy8.js"),__vite__mapDeps([2457,1])),meta:{t:"标签: ISO-8859-1",I:!1}}],["/tag/service-url/",{loader:()=>a(()=>import("./index.html-DI6nRxmT.js"),__vite__mapDeps([2458,1])),meta:{t:"标签: Service URL",I:!1}}],["/tag/clusterip/",{loader:()=>a(()=>import("./index.html-DH4L2BTK.js"),__vite__mapDeps([2459,1])),meta:{t:"标签: ClusterIP",I:!1}}],["/tag/nodeport/",{loader:()=>a(()=>import("./index.html-DmMEGpa4.js"),__vite__mapDeps([2460,1])),meta:{t:"标签: NodePort",I:!1}}],["/tag/loadbalancer/",{loader:()=>a(()=>import("./index.html-BQL5lq_U.js"),__vite__mapDeps([2461,1])),meta:{t:"标签: LoadBalancer",I:!1}}],["/tag/%E6%B5%8B%E8%AF%95%E8%A6%86%E7%9B%96%E7%8E%87/",{loader:()=>a(()=>import("./index.html-CvB2Fw9k.js"),__vite__mapDeps([2462,1])),meta:{t:"标签: 测试覆盖率",I:!1}}],["/tag/%E6%95%B0%E6%8D%AE%E7%AE%A1%E9%81%93/",{loader:()=>a(()=>import("./index.html-Bmzjuc_y.js"),__vite__mapDeps([2463,1])),meta:{t:"标签: 数据管道",I:!1}}],["/tag/kotlinpoet/",{loader:()=>a(()=>import("./index.html-DVYocQK6.js"),__vite__mapDeps([2464,1])),meta:{t:"标签: KotlinPoet",I:!1}}],["/tag/code-generation/",{loader:()=>a(()=>import("./index.html-CroJWr-i.js"),__vite__mapDeps([2465,1])),meta:{t:"标签: Code Generation",I:!1}}],["/tag/baeldung/",{loader:()=>a(()=>import("./index.html-JAKPd5Vk.js"),__vite__mapDeps([2466,1])),meta:{t:"标签: Baeldung",I:!1}}],["/tag/java-flight-recorder/",{loader:()=>a(()=>import("./index.html-BtZYZxyY.js"),__vite__mapDeps([2467,1])),meta:{t:"标签: Java Flight Recorder",I:!1}}],["/tag/jfr/",{loader:()=>a(()=>import("./index.html-BxUtPgp3.js"),__vite__mapDeps([2468,1])),meta:{t:"标签: JFR",I:!1}}],["/tag/java-21/",{loader:()=>a(()=>import("./index.html-qKRVPrB7.js"),__vite__mapDeps([2469,1])),meta:{t:"标签: Java 21",I:!1}}],["/tag/list-vs.-set/",{loader:()=>a(()=>import("./index.html-ChTUJVNX.js"),__vite__mapDeps([2470,1])),meta:{t:"标签: List vs. Set",I:!1}}],["/tag/onetomany/",{loader:()=>a(()=>import("./index.html-BfBIHwxV.js"),__vite__mapDeps([2471,1])),meta:{t:"标签: OneToMany",I:!1}}],["/tag/part-time/",{loader:()=>a(()=>import("./index.html-Bqs_9Lbv.js"),__vite__mapDeps([2472,1])),meta:{t:"标签: Part Time",I:!1}}],["/tag/integration-experience/",{loader:()=>a(()=>import("./index.html-DaFd3_n8.js"),__vite__mapDeps([2473,1])),meta:{t:"标签: Integration Experience",I:!1}}],["/tag/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/",{loader:()=>a(()=>import("./index.html-BmG5oBfG.js"),__vite__mapDeps([2474,1])),meta:{t:"标签: 动态代理",I:!1}}],["/tag/aop/",{loader:()=>a(()=>import("./index.html-D03kgUNF.js"),__vite__mapDeps([2475,1])),meta:{t:"标签: AOP",I:!1}}],["/tag/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/",{loader:()=>a(()=>import("./index.html-CYh5xzDx.js"),__vite__mapDeps([2476,1])),meta:{t:"标签: 装饰者模式",I:!1}}],["/tag/%E5%8F%8D%E5%B0%84/",{loader:()=>a(()=>import("./index.html-B-PE-5md.js"),__vite__mapDeps([2477,1])),meta:{t:"标签: 反射",I:!1}}],["/tag/n_1-problem/",{loader:()=>a(()=>import("./index.html-DTfZojU2.js"),__vite__mapDeps([2478,1])),meta:{t:"标签: N+1 Problem",I:!1}}],["/tag/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96/",{loader:()=>a(()=>import("./index.html-COUQ4UwV.js"),__vite__mapDeps([2479,1])),meta:{t:"标签: 数据库优化",I:!1}}],["/tag/url%E8%A7%84%E8%8C%83%E5%8C%96/",{loader:()=>a(()=>import("./index.html-D9lVcezD.js"),__vite__mapDeps([2480,1])),meta:{t:"标签: URL规范化",I:!1}}],["/tag/apache-commons-validator/",{loader:()=>a(()=>import("./index.html-DSl7v6hL.js"),__vite__mapDeps([2481,1])),meta:{t:"标签: Apache Commons Validator",I:!1}}],["/tag/uri%E7%B1%BB/",{loader:()=>a(()=>import("./index.html-Cku57uS6.js"),__vite__mapDeps([2482,1])),meta:{t:"标签: URI类",I:!1}}],["/tag/2d%E6%95%B0%E7%BB%84/",{loader:()=>a(()=>import("./index.html-Cu4SArqS.js"),__vite__mapDeps([2483,1])),meta:{t:"标签: 2D数组",I:!1}}],["/tag/%E5%A4%9A%E7%BA%BF%E7%A8%8B/",{loader:()=>a(()=>import("./index.html-T9iTYoER.js"),__vite__mapDeps([2484,1])),meta:{t:"标签: 多线程",I:!1}}],["/tag/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/",{loader:()=>a(()=>import("./index.html-36SgF-p6.js"),__vite__mapDeps([2485,1])),meta:{t:"标签: 文件读写",I:!1}}],["/tag/%E5%AF%86%E7%A0%81%E9%AA%8C%E8%AF%81/",{loader:()=>a(()=>import("./index.html-CHOhUU_t.js"),__vite__mapDeps([2486,1])),meta:{t:"标签: 密码验证",I:!1}}],["/tag/listiterator/",{loader:()=>a(()=>import("./index.html-BnA_qv9O.js"),__vite__mapDeps([2487,1])),meta:{t:"标签: ListIterator",I:!1}}],["/tag/%E7%BC%96%E7%A8%8B/",{loader:()=>a(()=>import("./index.html-lpfJ2Ex9.js"),__vite__mapDeps([2488,1])),meta:{t:"标签: 编程",I:!1}}],["/tag/run-length-encoding/",{loader:()=>a(()=>import("./index.html-B9SSlV4k.js"),__vite__mapDeps([2489,1])),meta:{t:"标签: Run-Length Encoding",I:!1}}],["/tag/environment-variables/",{loader:()=>a(()=>import("./index.html-C0o0srSq.js"),__vite__mapDeps([2490,1])),meta:{t:"标签: Environment Variables",I:!1}}],["/tag/runtime/",{loader:()=>a(()=>import("./index.html-BIbKML5L.js"),__vite__mapDeps([2491,1])),meta:{t:"标签: Runtime",I:!1}}],["/tag/spock/",{loader:()=>a(()=>import("./index.html-BjqwsHos.js"),__vite__mapDeps([2492,1])),meta:{t:"标签: Spock",I:!1}}],["/tag/gradle/",{loader:()=>a(()=>import("./index.html-D2aIMvA3.js"),__vite__mapDeps([2493,1])),meta:{t:"标签: Gradle",I:!1}}],["/tag/outofmemoryerror/",{loader:()=>a(()=>import("./index.html-CKf_wrNg.js"),__vite__mapDeps([2494,1])),meta:{t:"标签: OutOfMemoryError",I:!1}}],["/tag/morse-code/",{loader:()=>a(()=>import("./index.html-BR4gC4gT.js"),__vite__mapDeps([2495,1])),meta:{t:"标签: Morse Code",I:!1}}],["/tag/translation/",{loader:()=>a(()=>import("./index.html-D_ID5fsB.js"),__vite__mapDeps([2496,1])),meta:{t:"标签: Translation",I:!1}}],["/tag/%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95/",{loader:()=>a(()=>import("./index.html-BV2c8LB7.js"),__vite__mapDeps([2497,1])),meta:{t:"标签: 日志记录",I:!1}}],["/tag/%E7%BB%93%E6%9E%84%E5%8C%96%E6%97%A5%E5%BF%97/",{loader:()=>a(()=>import("./index.html-DrvszrS1.js"),__vite__mapDeps([2498,1])),meta:{t:"标签: 结构化日志",I:!1}}],["/tag/%E6%96%87%E4%BB%B6%E5%90%8D/",{loader:()=>a(()=>import("./index.html-DZ_tI-6t.js"),__vite__mapDeps([2499,1])),meta:{t:"标签: 文件名",I:!1}}],["/tag/%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4/",{loader:()=>a(()=>import("./index.html-CKSZXQ1u.js"),__vite__mapDeps([2500,1])),meta:{t:"标签: 当前时间",I:!1}}],["/tag/extension-functions/",{loader:()=>a(()=>import("./index.html-I4fX_gyF.js"),__vite__mapDeps([2501,1])),meta:{t:"标签: Extension Functions",I:!1}}],["/tag/private-fields/",{loader:()=>a(()=>import("./index.html-QJEiEG2k.js"),__vite__mapDeps([2502,1])),meta:{t:"标签: Private Fields",I:!1}}],["/tag/jwt/",{loader:()=>a(()=>import("./index.html-DuiAxRyP.js"),__vite__mapDeps([2503,1])),meta:{t:"标签: JWT",I:!1}}],["/tag/custom-claims/",{loader:()=>a(()=>import("./index.html-Ducu2_1X.js"),__vite__mapDeps([2504,1])),meta:{t:"标签: Custom Claims",I:!1}}],["/tag/spring-authorization-server/",{loader:()=>a(()=>import("./index.html-DET7D6As.js"),__vite__mapDeps([2505,1])),meta:{t:"标签: Spring Authorization Server",I:!1}}],["/tag/%E6%B5%81%E5%BC%8Fapi/",{loader:()=>a(()=>import("./index.html-dOkOnBin.js"),__vite__mapDeps([2506,1])),meta:{t:"标签: 流式API",I:!1}}],["/tag/%E5%88%97%E8%A1%A8%E6%93%8D%E4%BD%9C/",{loader:()=>a(()=>import("./index.html-CYbN_m1E.js"),__vite__mapDeps([2507,1])),meta:{t:"标签: 列表操作",I:!1}}],["/tag/%E6%9E%9A%E4%B8%BE/",{loader:()=>a(()=>import("./index.html-Bkwn7Twh.js"),__vite__mapDeps([2508,1])),meta:{t:"标签: 枚举",I:!1}}],["/tag/float/",{loader:()=>a(()=>import("./index.html-rfm85_u5.js"),__vite__mapDeps([2509,1])),meta:{t:"标签: float",I:!1}}],["/tag/integer/",{loader:()=>a(()=>import("./index.html-Be7M-lvE.js"),__vite__mapDeps([2510,1])),meta:{t:"标签: integer",I:!1}}],["/tag/%E6%AF%94%E8%BE%83/",{loader:()=>a(()=>import("./index.html-BYrrduIt.js"),__vite__mapDeps([2511,1])),meta:{t:"标签: 比较",I:!1}}],["/tag/point/",{loader:()=>a(()=>import("./index.html-B5W053y6.js"),__vite__mapDeps([2512,1])),meta:{t:"标签: Point",I:!1}}],["/tag/straight-line/",{loader:()=>a(()=>import("./index.html-DXkAj4ec.js"),__vite__mapDeps([2513,1])),meta:{t:"标签: Straight Line",I:!1}}],["/tag/check/",{loader:()=>a(()=>import("./index.html-CjdHl-_T.js"),__vite__mapDeps([2514,1])),meta:{t:"标签: Check",I:!1}}],["/tag/datetime/",{loader:()=>a(()=>import("./index.html-BogF_eSe.js"),__vite__mapDeps([2515,1])),meta:{t:"标签: DateTime",I:!1}}],["/tag/date/",{loader:()=>a(()=>import("./index.html-s7iyHd7H.js"),__vite__mapDeps([2516,1])),meta:{t:"标签: Date",I:!1}}],["/tag/bigdecimal/",{loader:()=>a(()=>import("./index.html-BuAWbrt4.js"),__vite__mapDeps([2517,1])),meta:{t:"标签: BigDecimal",I:!1}}],["/tag/integer/",{loader:()=>a(()=>import("./index.html-Be7M-lvE.js"),__vite__mapDeps([2510,1])),meta:{t:"标签: Integer",I:!1}}],["/tag/conversion/",{loader:()=>a(()=>import("./index.html-lv9zfNSA.js"),__vite__mapDeps([2518,1])),meta:{t:"标签: Conversion",I:!1}}],["/tag/kubernetes-operator/",{loader:()=>a(()=>import("./index.html-Tdxtmkvb.js"),__vite__mapDeps([2519,1])),meta:{t:"标签: Kubernetes Operator",I:!1}}],["/tag/java-operator-sdk/",{loader:()=>a(()=>import("./index.html-B9o9eG0I.js"),__vite__mapDeps([2520,1])),meta:{t:"标签: Java Operator SDK",I:!1}}],["/tag/micronaut/",{loader:()=>a(()=>import("./index.html-B1aBuAYl.js"),__vite__mapDeps([2521,1])),meta:{t:"标签: Micronaut",I:!1}}],["/tag/mongodb/",{loader:()=>a(()=>import("./index.html-D9a2PPVx.js"),__vite__mapDeps([2522,1])),meta:{t:"标签: MongoDB",I:!1}}],["/tag/reactive-programming/",{loader:()=>a(()=>import("./index.html-B6w3GWQS.js"),__vite__mapDeps([2523,1])),meta:{t:"标签: Reactive Programming",I:!1}}],["/tag/xmx/",{loader:()=>a(()=>import("./index.html-CAG7T498.js"),__vite__mapDeps([2524,1])),meta:{t:"标签: Xmx",I:!1}}],["/tag/maxram/",{loader:()=>a(()=>import("./index.html-ImLOmoFc.js"),__vite__mapDeps([2525,1])),meta:{t:"标签: MaxRAM",I:!1}}],["/tag/future/",{loader:()=>a(()=>import("./index.html-C25TxQ3Q.js"),__vite__mapDeps([2526,1])),meta:{t:"标签: Future",I:!1}}],["/tag/promise/",{loader:()=>a(()=>import("./index.html-DJdDS6Km.js"),__vite__mapDeps([2527,1])),meta:{t:"标签: Promise",I:!1}}],["/tag/generational-zgc/",{loader:()=>a(()=>import("./index.html-CvxZYhqP.js"),__vite__mapDeps([2528,1])),meta:{t:"标签: Generational ZGC",I:!1}}],["/tag/httpservletrequest/",{loader:()=>a(()=>import("./index.html-D4fs3_3n.js"),__vite__mapDeps([2529,1])),meta:{t:"标签: HttpServletRequest",I:!1}}],["/tag/query-string/",{loader:()=>a(()=>import("./index.html-BgsP2h4F.js"),__vite__mapDeps([2530,1])),meta:{t:"标签: Query String",I:!1}}],["/tag/data-management/",{loader:()=>a(()=>import("./index.html-C52jstDv.js"),__vite__mapDeps([2531,1])),meta:{t:"标签: Data Management",I:!1}}],["/tag/query-optimization/",{loader:()=>a(()=>import("./index.html-BXjdWoiK.js"),__vite__mapDeps([2532,1])),meta:{t:"标签: Query Optimization",I:!1}}],["/tag/spring-framework/",{loader:()=>a(()=>import("./index.html-qFtNF6HG.js"),__vite__mapDeps([2533,1])),meta:{t:"标签: Spring Framework",I:!1}}],["/tag/ai-generative-prompts/",{loader:()=>a(()=>import("./index.html-CqMyEGA2.js"),__vite__mapDeps([2534,1])),meta:{t:"标签: AI Generative Prompts",I:!1}}],["/tag/spring-cloud-aws-3.0/",{loader:()=>a(()=>import("./index.html-BFWglzfX.js"),__vite__mapDeps([2535,1])),meta:{t:"标签: Spring Cloud AWS 3.0",I:!1}}],["/tag/sqs/",{loader:()=>a(()=>import("./index.html-BRbGi8jH.js"),__vite__mapDeps([2536,1])),meta:{t:"标签: SQS",I:!1}}],["/tag/integration-test/",{loader:()=>a(()=>import("./index.html-CFXN9Gh5.js"),__vite__mapDeps([2537,1])),meta:{t:"标签: Integration Test",I:!1}}],["/tag/localstack/",{loader:()=>a(()=>import("./index.html-Bi7mJgHm.js"),__vite__mapDeps([2538,1])),meta:{t:"标签: LocalStack",I:!1}}],["/tag/stream%E6%93%8D%E4%BD%9C/",{loader:()=>a(()=>import("./index.html-CbvPJHxW.js"),__vite__mapDeps([2539,1])),meta:{t:"标签: Stream操作",I:!1}}],["/tag/https/",{loader:()=>a(()=>import("./index.html-BMfX1cZo.js"),__vite__mapDeps([2540,1])),meta:{t:"标签: HTTPS",I:!1}}],["/tag/501%E9%94%99%E8%AF%AF/",{loader:()=>a(()=>import("./index.html-BUNhV9rn.js"),__vite__mapDeps([2541,1])),meta:{t:"标签: 501错误",I:!1}}],["/tag/main-method/",{loader:()=>a(()=>import("./index.html-BMdGiCB3.js"),__vite__mapDeps([2542,1])),meta:{t:"标签: main method",I:!1}}],["/tag/static-block/",{loader:()=>a(()=>import("./index.html-CMzT7Du3.js"),__vite__mapDeps([2543,1])),meta:{t:"标签: static block",I:!1}}],["/tag/priorityqueue/",{loader:()=>a(()=>import("./index.html-BmVrcPRF.js"),__vite__mapDeps([2544,1])),meta:{t:"标签: PriorityQueue",I:!1}}],["/tag/iterator/",{loader:()=>a(()=>import("./index.html-BCIpkirq.js"),__vite__mapDeps([2545,1])),meta:{t:"标签: iterator",I:!1}}],["/tag/bufferedreader/",{loader:()=>a(()=>import("./index.html-Bf07sd3w.js"),__vite__mapDeps([2546,1])),meta:{t:"标签: BufferedReader",I:!1}}],["/tag/filereader/",{loader:()=>a(()=>import("./index.html-By5yBtVJ.js"),__vite__mapDeps([2547,1])),meta:{t:"标签: FileReader",I:!1}}],["/tag/scanner/",{loader:()=>a(()=>import("./index.html-DnDRCmZX.js"),__vite__mapDeps([2548,1])),meta:{t:"标签: Scanner",I:!1}}],["/tag/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/",{loader:()=>a(()=>import("./index.html-CtRxfhf7.js"),__vite__mapDeps([2549,1])),meta:{t:"标签: 性能分析",I:!1}}],["/tag/%E9%93%BE%E8%A1%A8/",{loader:()=>a(()=>import("./index.html-6ENY33Ow.js"),__vite__mapDeps([2550,1])),meta:{t:"标签: 链表",I:!1}}],["/tag/%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C/",{loader:()=>a(()=>import("./index.html-CLyHlAIf.js"),__vite__mapDeps([2551,1])),meta:{t:"标签: 删除操作",I:!1}}],["/tag/%E9%9D%9E%E6%89%93%E5%8D%B0%E5%AD%97%E7%AC%A6/",{loader:()=>a(()=>import("./index.html-Bz51mExI.js"),__vite__mapDeps([2552,1])),meta:{t:"标签: 非打印字符",I:!1}}],["/tag/%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/",{loader:()=>a(()=>import("./index.html-BD7x6yq9.js"),__vite__mapDeps([2553,1])),meta:{t:"标签: 文本处理",I:!1}}],["/tag/parameterresolutionexception/",{loader:()=>a(()=>import("./index.html-1vVLTTJY.js"),__vite__mapDeps([2554,1])),meta:{t:"标签: ParameterResolutionException",I:!1}}],["/tag/spring-webflux/",{loader:()=>a(()=>import("./index.html-DADLvpKM.js"),__vite__mapDeps([2555,1])),meta:{t:"标签: Spring WebFlux",I:!1}}],["/tag/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/",{loader:()=>a(()=>import("./index.html-CCNSWYbp.js"),__vite__mapDeps([2556,1])),meta:{t:"标签: 文件上传",I:!1}}],["/tag/%E5%BC%82%E6%AD%A5io/",{loader:()=>a(()=>import("./index.html-4wywJQ40.js"),__vite__mapDeps([2557,1])),meta:{t:"标签: 异步I/O",I:!1}}],["/tag/%E9%9D%9E%E9%98%BB%E5%A1%9E/",{loader:()=>a(()=>import("./index.html-D2vgvbp5.js"),__vite__mapDeps([2558,1])),meta:{t:"标签: 非阻塞",I:!1}}],["/tag/gson/",{loader:()=>a(()=>import("./index.html-BS98J1nL.js"),__vite__mapDeps([2559,1])),meta:{t:"标签: Gson",I:!1}}],["/tag/jsonparser/",{loader:()=>a(()=>import("./index.html-DtnCBxd1.js"),__vite__mapDeps([2560,1])),meta:{t:"标签: JsonParser",I:!1}}],["/tag/%E5%A0%86%E5%A4%A7%E5%B0%8F/",{loader:()=>a(()=>import("./index.html-CeQPUKWX.js"),__vite__mapDeps([2561,1])),meta:{t:"标签: 堆大小",I:!1}}],["/tag/static-context/",{loader:()=>a(()=>import("./index.html-C5qFkwxY.js"),__vite__mapDeps([2562,1])),meta:{t:"标签: Static Context",I:!1}}],["/tag/non-static-method/",{loader:()=>a(()=>import("./index.html-DWOFDIQZ.js"),__vite__mapDeps([2563,1])),meta:{t:"标签: Non-Static Method",I:!1}}],["/tag/query/",{loader:()=>a(()=>import("./index.html-9d1Mj3lU.js"),__vite__mapDeps([2564,1])),meta:{t:"标签: Query",I:!1}}],["/tag/spel/",{loader:()=>a(()=>import("./index.html-CKhX86vl.js"),__vite__mapDeps([2565,1])),meta:{t:"标签: SpEL",I:!1}}],["/tag/zero/",{loader:()=>a(()=>import("./index.html-BouZQoas.js"),__vite__mapDeps([2566,1])),meta:{t:"标签: ZERO",I:!1}}],["/tag/%E6%80%A7%E8%83%BD/",{loader:()=>a(()=>import("./index.html-3jDh6UEO.js"),__vite__mapDeps([2567,1])),meta:{t:"标签: 性能",I:!1}}],["/tag/%E6%97%A5%E6%9C%9F/",{loader:()=>a(()=>import("./index.html-TeW9m8kY.js"),__vite__mapDeps([2568,1])),meta:{t:"标签: 日期",I:!1}}],["/tag/%E6%9C%88%E4%BB%BD%E9%97%B4%E9%9A%94/",{loader:()=>a(()=>import("./index.html-DTxhB654.js"),__vite__mapDeps([2569,1])),meta:{t:"标签: 月份间隔",I:!1}}],["/tag/listenablefuture/",{loader:()=>a(()=>import("./index.html-BTbQc0em.js"),__vite__mapDeps([2570,1])),meta:{t:"标签: ListenableFuture",I:!1}}],["/tag/stringbuilder/",{loader:()=>a(()=>import("./index.html-BZ-FTwhU.js"),__vite__mapDeps([2571,1])),meta:{t:"标签: StringBuilder",I:!1}}],["/tag/contains/",{loader:()=>a(()=>import("./index.html-DyWu66tP.js"),__vite__mapDeps([2572,1])),meta:{t:"标签: contains",I:!1}}],["/tag/indexof/",{loader:()=>a(()=>import("./index.html-BwqulMee.js"),__vite__mapDeps([2573,1])),meta:{t:"标签: indexOf",I:!1}}],["/tag/string-comparison/",{loader:()=>a(()=>import("./index.html-CfACB67c.js"),__vite__mapDeps([2574,1])),meta:{t:"标签: String Comparison",I:!1}}],["/tag/set/",{loader:()=>a(()=>import("./index.html-CAW2AKmY.js"),__vite__mapDeps([2575,1])),meta:{t:"标签: Set",I:!1}}],["/tag/list/",{loader:()=>a(()=>import("./index.html-DUZPaScC.js"),__vite__mapDeps([2576,1])),meta:{t:"标签: List",I:!1}}],["/tag/for%E5%BE%AA%E7%8E%AF/",{loader:()=>a(()=>import("./index.html-BIfbtfKm.js"),__vite__mapDeps([2577,1])),meta:{t:"标签: for循环",I:!1}}],["/tag/%E8%BF%AD%E4%BB%A3%E5%99%A8/",{loader:()=>a(()=>import("./index.html-B0sev9XN.js"),__vite__mapDeps([2578,1])),meta:{t:"标签: 迭代器",I:!1}}],["/tag/byte-array/",{loader:()=>a(()=>import("./index.html-CdPvNycy.js"),__vite__mapDeps([2579,1])),meta:{t:"标签: byte array",I:!1}}],["/tag/json-conversion/",{loader:()=>a(()=>import("./index.html-0vl5BicL.js"),__vite__mapDeps([2580,1])),meta:{t:"标签: JSON conversion",I:!1}}],["/tag/excel/",{loader:()=>a(()=>import("./index.html-B4ignask.js"),__vite__mapDeps([2581,1])),meta:{t:"标签: Excel",I:!1}}],["/tag/pdf/",{loader:()=>a(()=>import("./index.html-c0gk1SMG.js"),__vite__mapDeps([2582,1])),meta:{t:"标签: PDF",I:!1}}],["/tag/long/",{loader:()=>a(()=>import("./index.html-Bw24m1f1.js"),__vite__mapDeps([2583,1])),meta:{t:"标签: Long",I:!1}}],["/tag/java%E5%AD%97%E7%AC%A6%E4%B8%B2/",{loader:()=>a(()=>import("./index.html-DZpX2KZI.js"),__vite__mapDeps([2584,1])),meta:{t:"标签: Java字符串",I:!1}}],["/tag/%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E5%AD%97%E7%AC%A6%E5%88%97%E8%A1%A8/",{loader:()=>a(()=>import("./index.html-BxUwoX_A.js"),__vite__mapDeps([2585,1])),meta:{t:"标签: 字符串转字符列表",I:!1}}],["/tag/outputstream/",{loader:()=>a(()=>import("./index.html-BiClqyKj.js"),__vite__mapDeps([2586,1])),meta:{t:"标签: OutputStream",I:!1}}],["/tag/byte-array/",{loader:()=>a(()=>import("./index.html-CdPvNycy.js"),__vite__mapDeps([2579,1])),meta:{t:"标签: Byte Array",I:!1}}],["/tag/executorservice/",{loader:()=>a(()=>import("./index.html-COi-RG10.js"),__vite__mapDeps([2587,1])),meta:{t:"标签: ExecutorService",I:!1}}],["/tag/submit()/",{loader:()=>a(()=>import("./index.html-CMthnfxM.js"),__vite__mapDeps([2588,1])),meta:{t:"标签: submit()",I:!1}}],["/tag/execute()/",{loader:()=>a(()=>import("./index.html-D9Ou7n3Z.js"),__vite__mapDeps([2589,1])),meta:{t:"标签: execute()",I:!1}}],["/tag/dijkstra%E2%80%99s-algorithm/",{loader:()=>a(()=>import("./index.html-CInZYX3v.js"),__vite__mapDeps([2590,1])),meta:{t:"标签: Dijkstra’s Algorithm",I:!1}}],["/tag/graphs/",{loader:()=>a(()=>import("./index.html-BuosH0Aa.js"),__vite__mapDeps([2591,1])),meta:{t:"标签: Graphs",I:!1}}],["/tag/%E6%96%87%E4%BB%B6%E6%90%9C%E7%B4%A2/",{loader:()=>a(()=>import("./index.html-KuseMFDO.js"),__vite__mapDeps([2592,1])),meta:{t:"标签: 文件搜索",I:!1}}],["/tag/%E6%96%87%E4%BB%B6%E9%81%8D%E5%8E%86/",{loader:()=>a(()=>import("./index.html-DG3HEuR3.js"),__vite__mapDeps([2593,1])),meta:{t:"标签: 文件遍历",I:!1}}],["/tag/%E6%95%B0%E7%BB%84/",{loader:()=>a(()=>import("./index.html-5rwVYkoA.js"),__vite__mapDeps([2594,1])),meta:{t:"标签: 数组",I:!1}}],["/tag/%E7%BC%BA%E5%A4%B1%E6%95%B0%E5%AD%97/",{loader:()=>a(()=>import("./index.html-BEHoYazi.js"),__vite__mapDeps([2595,1])),meta:{t:"标签: 缺失数字",I:!1}}],["/tag/queryexception/",{loader:()=>a(()=>import("./index.html-B6KMAu5o.js"),__vite__mapDeps([2596,1])),meta:{t:"标签: QueryException",I:!1}}],["/tag/named-parameter/",{loader:()=>a(()=>import("./index.html-BypO2m-H.js"),__vite__mapDeps([2597,1])),meta:{t:"标签: Named Parameter",I:!1}}],["/tag/datetimeformatter/",{loader:()=>a(()=>import("./index.html-Ihk2tX1i.js"),__vite__mapDeps([2598,1])),meta:{t:"标签: DateTimeFormatter",I:!1}}],["/tag/reflection/",{loader:()=>a(()=>import("./index.html-DBytiBt5.js"),__vite__mapDeps([2599,1])),meta:{t:"标签: Reflection",I:!1}}],["/tag/field-names/",{loader:()=>a(()=>import("./index.html-gvlHdX_Z.js"),__vite__mapDeps([2600,1])),meta:{t:"标签: Field Names",I:!1}}],["/tag/stringwriter/",{loader:()=>a(()=>import("./index.html-DVbNZC7K.js"),__vite__mapDeps([2601,1])),meta:{t:"标签: StringWriter",I:!1}}],["/tag/system.currenttimemillis()/",{loader:()=>a(()=>import("./index.html-xrYFWKxQ.js"),__vite__mapDeps([2602,1])),meta:{t:"标签: System.currentTimeMillis()",I:!1}}],["/tag/system.nanotime()/",{loader:()=>a(()=>import("./index.html-2LTBC4M5.js"),__vite__mapDeps([2603,1])),meta:{t:"标签: System.nanoTime()",I:!1}}],["/tag/string.length()/",{loader:()=>a(()=>import("./index.html-d3LzzSw9.js"),__vite__mapDeps([2604,1])),meta:{t:"标签: String.length()",I:!1}}],["/tag/string.getbytes().length/",{loader:()=>a(()=>import("./index.html-BmX750mA.js"),__vite__mapDeps([2605,1])),meta:{t:"标签: String.getBytes().length",I:!1}}],["/tag/lambda/",{loader:()=>a(()=>import("./index.html-V-W3U2Kz.js"),__vite__mapDeps([2606,1])),meta:{t:"标签: Lambda",I:!1}}],["/tag/lazy-initialization/",{loader:()=>a(()=>import("./index.html-CorDa-rE.js"),__vite__mapDeps([2607,1])),meta:{t:"标签: Lazy Initialization",I:!1}}],["/tag/double/",{loader:()=>a(()=>import("./index.html-brlqmnf_.js"),__vite__mapDeps([2608,1])),meta:{t:"标签: double",I:!1}}],["/tag/scientific-notation/",{loader:()=>a(()=>import("./index.html-BePSLWt5.js"),__vite__mapDeps([2609,1])),meta:{t:"标签: scientific notation",I:!1}}],["/tag/formatting/",{loader:()=>a(()=>import("./index.html-Dm2pPA9S.js"),__vite__mapDeps([2610,1])),meta:{t:"标签: formatting",I:!1}}],["/tag/reactor/",{loader:()=>a(()=>import("./index.html-C_I5hcCG.js"),__vite__mapDeps([2611,1])),meta:{t:"标签: Reactor",I:!1}}],["/tag/virtual-threads/",{loader:()=>a(()=>import("./index.html-CEkGfNqR.js"),__vite__mapDeps([2612,1])),meta:{t:"标签: Virtual Threads",I:!1}}],["/tag/%E6%96%87%E4%BB%B6%E5%88%86%E5%89%B2/",{loader:()=>a(()=>import("./index.html-BxCbUg75.js"),__vite__mapDeps([2613,1])),meta:{t:"标签: 文件分割",I:!1}}],["/tag/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/",{loader:()=>a(()=>import("./index.html-uz9dH-zh.js"),__vite__mapDeps([2614,1])),meta:{t:"标签: 字符串操作",I:!1}}],["/tag/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%97%8B%E8%BD%AC/",{loader:()=>a(()=>import("./index.html-Dtt3CGYe.js"),__vite__mapDeps([2615,1])),meta:{t:"标签: 字符串旋转",I:!1}}],["/tag/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/",{loader:()=>a(()=>import("./index.html-BUTTeil8.js"),__vite__mapDeps([2616,1])),meta:{t:"标签: 消息队列",I:!1}}],["/tag/%E5%88%97%E8%A1%A8%E6%8E%92%E5%BA%8F/",{loader:()=>a(()=>import("./index.html-Dl75Cec-.js"),__vite__mapDeps([2617,1])),meta:{t:"标签: 列表排序",I:!1}}],["/tag/%E9%AA%8C%E8%AF%81/",{loader:()=>a(()=>import("./index.html-BbXb7fwx.js"),__vite__mapDeps([2618,1])),meta:{t:"标签: 验证",I:!1}}],["/tag/object-hydration/",{loader:()=>a(()=>import("./index.html-Dn1sT_NI.js"),__vite__mapDeps([2619,1])),meta:{t:"标签: Object Hydration",I:!1}}],["/tag/orm-frameworks/",{loader:()=>a(()=>import("./index.html-CfY3SZIy.js"),__vite__mapDeps([2620,1])),meta:{t:"标签: ORM Frameworks",I:!1}}],["/tag/getreferencebyid/",{loader:()=>a(()=>import("./index.html-BVBKeHeA.js"),__vite__mapDeps([2621,1])),meta:{t:"标签: getReferenceById",I:!1}}],["/tag/findbyid/",{loader:()=>a(()=>import("./index.html-DyrF5Cou.js"),__vite__mapDeps([2622,1])),meta:{t:"标签: findById",I:!1}}],["/tag/%E5%91%98%E5%B7%A5%E8%B0%83%E5%BA%A6/",{loader:()=>a(()=>import("./index.html-Bk8lI1rT.js"),__vite__mapDeps([2623,1])),meta:{t:"标签: 员工调度",I:!1}}],["/tag/%E4%BC%98%E5%8C%96/",{loader:()=>a(()=>import("./index.html-ms7ZxBB7.js"),__vite__mapDeps([2624,1])),meta:{t:"标签: 优化",I:!1}}],["/tag/colon-usage/",{loader:()=>a(()=>import("./index.html-r0hGiY-l.js"),__vite__mapDeps([2625,1])),meta:{t:"标签: Colon Usage",I:!1}}],["/tag/java-features/",{loader:()=>a(()=>import("./index.html-DMhRNrPC.js"),__vite__mapDeps([2626,1])),meta:{t:"标签: Java Features",I:!1}}],["/tag/error-prone/",{loader:()=>a(()=>import("./index.html-D4nbKfFY.js"),__vite__mapDeps([2627,1])),meta:{t:"标签: Error Prone",I:!1}}],["/tag/java%E5%BA%93/",{loader:()=>a(()=>import("./index.html-CntZ0dUj.js"),__vite__mapDeps([2628,1])),meta:{t:"标签: Java库",I:!1}}],["/tag/java-keystore/",{loader:()=>a(()=>import("./index.html-XubvQil_.js"),__vite__mapDeps([2629,1])),meta:{t:"标签: Java KeyStore",I:!1}}],["/tag/keytool/",{loader:()=>a(()=>import("./index.html-ls4Xjo_0.js"),__vite__mapDeps([2630,1])),meta:{t:"标签: keytool",I:!1}}],["/tag/%E6%95%B4%E6%95%B0/",{loader:()=>a(()=>import("./index.html-qG8HUGS6.js"),__vite__mapDeps([2631,1])),meta:{t:"标签: 整数",I:!1}}],["/tag/%E6%95%B0%E5%80%BC%E6%A3%80%E6%9F%A5/",{loader:()=>a(()=>import("./index.html-F7gVx6pW.js"),__vite__mapDeps([2632,1])),meta:{t:"标签: 数值检查",I:!1}}],["/tag/database-connection/",{loader:()=>a(()=>import("./index.html-DWG1v5au.js"),__vite__mapDeps([2633,1])),meta:{t:"标签: Database Connection",I:!1}}],["/tag/intellij-idea/",{loader:()=>a(()=>import("./index.html-xasRAouD.js"),__vite__mapDeps([2634,1])),meta:{t:"标签: IntelliJ IDEA",I:!1}}],["/tag/long-timestamp/",{loader:()=>a(()=>import("./index.html-BFcfRrTs.js"),__vite__mapDeps([2635,1])),meta:{t:"标签: Long Timestamp",I:!1}}],["/tag/convert/",{loader:()=>a(()=>import("./index.html-DT2ruy2V.js"),__vite__mapDeps([2636,1])),meta:{t:"标签: Convert",I:!1}}],["/tag/%E5%8F%96%E5%8F%8D/",{loader:()=>a(()=>import("./index.html-DFNRNuBz.js"),__vite__mapDeps([2637,1])),meta:{t:"标签: 取反",I:!1}}],["/tag/%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2/",{loader:()=>a(()=>import("./index.html-TwWBllcO.js"),__vite__mapDeps([2638,1])),meta:{t:"标签: 数据转换",I:!1}}],["/tag/entity/",{loader:()=>a(()=>import("./index.html-CSVaGslS.js"),__vite__mapDeps([2639,1])),meta:{t:"标签: Entity",I:!1}}],["/tag/dto/",{loader:()=>a(()=>import("./index.html-D5Q_M2Lu.js"),__vite__mapDeps([2640,1])),meta:{t:"标签: DTO",I:!1}}],["/tag/%E5%94%AF%E4%B8%80%E6%80%A7/",{loader:()=>a(()=>import("./index.html-BjLoHWNn.js"),__vite__mapDeps([2641,1])),meta:{t:"标签: 唯一性",I:!1}}],["/tag/%E9%95%BF%E6%95%B4%E5%9E%8B/",{loader:()=>a(()=>import("./index.html-DMRBLNqQ.js"),__vite__mapDeps([2642,1])),meta:{t:"标签: 长整型",I:!1}}],["/tag/stream-api/",{loader:()=>a(()=>import("./index.html-Rsrg66ev.js"),__vite__mapDeps([2643,1])),meta:{t:"标签: Stream API",I:!1}}],["/tag/nullpointerexception/",{loader:()=>a(()=>import("./index.html-Ixv0cB1b.js"),__vite__mapDeps([2644,1])),meta:{t:"标签: NullPointerException",I:!1}}],["/tag/findfirst()/",{loader:()=>a(()=>import("./index.html-e1uuY-AV.js"),__vite__mapDeps([2645,1])),meta:{t:"标签: findFirst()",I:!1}}],["/tag/optional/",{loader:()=>a(()=>import("./index.html-GSX2kUO0.js"),__vite__mapDeps([2646,1])),meta:{t:"标签: Optional",I:!1}}],["/tag/%E5%AD%97%E8%8A%82%E6%95%B0%E7%BB%84/",{loader:()=>a(()=>import("./index.html-CrpG84jH.js"),__vite__mapDeps([2647,1])),meta:{t:"标签: 字节数组",I:!1}}],["/tag/%E5%AD%97%E7%AC%A6%E6%95%B0%E7%BB%84/",{loader:()=>a(()=>import("./index.html-C7gSAC6f.js"),__vite__mapDeps([2648,1])),meta:{t:"标签: 字符数组",I:!1}}],["/tag/objectnode/",{loader:()=>a(()=>import("./index.html-CUt8haLr.js"),__vite__mapDeps([2649,1])),meta:{t:"标签: ObjectNode",I:!1}}],["/tag/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/",{loader:()=>a(()=>import("./index.html-BQ5KacZi.js"),__vite__mapDeps([2650,1])),meta:{t:"标签: 单元测试",I:!1}}],["/tag/java-map/",{loader:()=>a(()=>import("./index.html-PE4KopHq.js"),__vite__mapDeps([2651,1])),meta:{t:"标签: Java Map",I:!1}}],["/tag/%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/",{loader:()=>a(()=>import("./index.html-riA4E7DX.js"),__vite__mapDeps([2652,1])),meta:{t:"标签: 编程技巧",I:!1}}],["/tag/sorting/",{loader:()=>a(()=>import("./index.html-CdQ5rT5h.js"),__vite__mapDeps([2653,1])),meta:{t:"标签: Sorting",I:!1}}],["/tag/%E5%AD%97%E4%BD%93/",{loader:()=>a(()=>import("./index.html-Cqn_9m1Q.js"),__vite__mapDeps([2654,1])),meta:{t:"标签: 字体",I:!1}}],["/tag/gui/",{loader:()=>a(()=>import("./index.html-CjCYaTbT.js"),__vite__mapDeps([2655,1])),meta:{t:"标签: GUI",I:!1}}],["/tag/inter-process-communication/",{loader:()=>a(()=>import("./index.html-DPSbD_qj.js"),__vite__mapDeps([2656,1])),meta:{t:"标签: Inter-Process Communication",I:!1}}],["/tag/java-ipc/",{loader:()=>a(()=>import("./index.html-Br0-wzaB.js"),__vite__mapDeps([2657,1])),meta:{t:"标签: Java IPC",I:!1}}],["/tag/hashmap/",{loader:()=>a(()=>import("./index.html-98BkMfft.js"),__vite__mapDeps([2658,1])),meta:{t:"标签: HashMap",I:!1}}],["/tag/flow/",{loader:()=>a(()=>import("./index.html-BLGdNSz_.js"),__vite__mapDeps([2659,1])),meta:{t:"标签: Flow",I:!1}}],["/tag/merging/",{loader:()=>a(()=>import("./index.html-CMQb54Ic.js"),__vite__mapDeps([2660,1])),meta:{t:"标签: Merging",I:!1}}],["/tag/%E6%96%B9%E6%B3%95/",{loader:()=>a(()=>import("./index.html-BN7U-AIw.js"),__vite__mapDeps([2661,1])),meta:{t:"标签: 方法",I:!1}}],["/tag/%E8%AF%B7%E6%B1%82%E4%BF%AE%E6%94%B9/",{loader:()=>a(()=>import("./index.html-DJSlFvBG.js"),__vite__mapDeps([2662,1])),meta:{t:"标签: 请求修改",I:!1}}],["/tag/%E8%BF%87%E6%BB%A4%E5%99%A8/",{loader:()=>a(()=>import("./index.html-CPUQVa-M.js"),__vite__mapDeps([2663,1])),meta:{t:"标签: 过滤器",I:!1}}],["/tag/%E6%8B%A6%E6%88%AA%E5%99%A8/",{loader:()=>a(()=>import("./index.html-ZzaHLWcD.js"),__vite__mapDeps([2664,1])),meta:{t:"标签: 拦截器",I:!1}}],["/tag/jvm/",{loader:()=>a(()=>import("./index.html-wv2VNigd.js"),__vite__mapDeps([2665,1])),meta:{t:"标签: JVM",I:!1}}],["/tag/%E9%85%8D%E7%BD%AE/",{loader:()=>a(()=>import("./index.html-6TFFqFsF.js"),__vite__mapDeps([2666,1])),meta:{t:"标签: 配置",I:!1}}],["/tag/exception/",{loader:()=>a(()=>import("./index.html-Bad0OgJe.js"),__vite__mapDeps([2667,1])),meta:{t:"标签: Exception",I:!1}}],["/tag/unix-time/",{loader:()=>a(()=>import("./index.html-KxVHv6On.js"),__vite__mapDeps([2668,1])),meta:{t:"标签: Unix Time",I:!1}}],["/tag/legacy-date-api/",{loader:()=>a(()=>import("./index.html-jSoKVp2Y.js"),__vite__mapDeps([2669,1])),meta:{t:"标签: Legacy Date API",I:!1}}],["/tag/date-time-api/",{loader:()=>a(()=>import("./index.html-Fum9ujEd.js"),__vite__mapDeps([2670,1])),meta:{t:"标签: Date Time API",I:!1}}],["/tag/%E9%9D%9E%E7%A9%BA/",{loader:()=>a(()=>import("./index.html-Ba8IionT.js"),__vite__mapDeps([2671,1])),meta:{t:"标签: 非空",I:!1}}],["/tag/async/",{loader:()=>a(()=>import("./index.html-zW9CYC4W.js"),__vite__mapDeps([2672,1])),meta:{t:"标签: Async",I:!1}}],["/tag/retry/",{loader:()=>a(()=>import("./index.html-gxHXwctx.js"),__vite__mapDeps([2673,1])),meta:{t:"标签: Retry",I:!1}}],["/tag/inputstream/",{loader:()=>a(()=>import("./index.html-PWFCa_SK.js"),__vite__mapDeps([2674,1])),meta:{t:"标签: InputStream",I:!1}}],["/tag/skip-bytes/",{loader:()=>a(()=>import("./index.html-CHBMeV2Z.js"),__vite__mapDeps([2675,1])),meta:{t:"标签: skip bytes",I:!1}}],["/tag/alpaquita-linux/",{loader:()=>a(()=>import("./index.html-Bjb8w7ot.js"),__vite__mapDeps([2676,1])),meta:{t:"标签: Alpaquita Linux",I:!1}}],["/tag/java-apps/",{loader:()=>a(()=>import("./index.html-DSyDYx_R.js"),__vite__mapDeps([2677,1])),meta:{t:"标签: Java apps",I:!1}}],["/tag/kafka-message-headers/",{loader:()=>a(()=>import("./index.html-D_xAy8JU.js"),__vite__mapDeps([2678,1])),meta:{t:"标签: Kafka message headers",I:!1}}],["/tag/static/",{loader:()=>a(()=>import("./index.html-CBiiVyc2.js"),__vite__mapDeps([2679,1])),meta:{t:"标签: static",I:!1}}],["/tag/final/",{loader:()=>a(()=>import("./index.html-By8I9OHf.js"),__vite__mapDeps([2680,1])),meta:{t:"标签: final",I:!1}}],["/tag/%E5%B8%B8%E9%87%8F/",{loader:()=>a(()=>import("./index.html-CpyygrMP.js"),__vite__mapDeps([2681,1])),meta:{t:"标签: 常量",I:!1}}],["/tag/%E5%86%85%E5%AD%98%E9%99%90%E5%88%B6/",{loader:()=>a(()=>import("./index.html-DT2GnAgr.js"),__vite__mapDeps([2682,1])),meta:{t:"标签: 内存限制",I:!1}}],["/tag/integer.max-value/",{loader:()=>a(()=>import("./index.html-CfIfRyOm.js"),__vite__mapDeps([2683,1])),meta:{t:"标签: Integer.MAX_VALUE",I:!1}}],["/tag/stringbuffer/",{loader:()=>a(()=>import("./index.html-BTiUiaMz.js"),__vite__mapDeps([2684,1])),meta:{t:"标签: StringBuffer",I:!1}}],["/tag/lambda-expression/",{loader:()=>a(()=>import("./index.html-C5daXUsH.js"),__vite__mapDeps([2685,1])),meta:{t:"标签: Lambda Expression",I:!1}}],["/tag/nosql/",{loader:()=>a(()=>import("./index.html-DnROx5pO.js"),__vite__mapDeps([2686,1])),meta:{t:"标签: NoSQL",I:!1}}],["/tag/openrewrite/",{loader:()=>a(()=>import("./index.html-CF0OvxQa.js"),__vite__mapDeps([2687,1])),meta:{t:"标签: OpenRewrite",I:!1}}],["/tag/%E4%BB%A3%E7%A0%81%E9%87%8D%E6%9E%84/",{loader:()=>a(()=>import("./index.html-CeoCz5AX.js"),__vite__mapDeps([2688,1])),meta:{t:"标签: 代码重构",I:!1}}],["/tag/restful-web-services/",{loader:()=>a(()=>import("./index.html-Brh2siR8.js"),__vite__mapDeps([2689,1])),meta:{t:"标签: RESTful Web Services",I:!1}}],["/tag/jax-rs/",{loader:()=>a(()=>import("./index.html-CNw6pR_i.js"),__vite__mapDeps([2690,1])),meta:{t:"标签: JAX-RS",I:!1}}],["/tag/junit/",{loader:()=>a(()=>import("./index.html-wYdqMku6.js"),__vite__mapDeps([2691,1])),meta:{t:"标签: JUnit",I:!1}}],["/tag/hamcrest/",{loader:()=>a(()=>import("./index.html-c4lBsGt1.js"),__vite__mapDeps([2692,1])),meta:{t:"标签: Hamcrest",I:!1}}],["/tag/exception-handling/",{loader:()=>a(()=>import("./index.html-BPhjbIm4.js"),__vite__mapDeps([2693,1])),meta:{t:"标签: Exception Handling",I:!1}}],["/tag/asynchronous-programming/",{loader:()=>a(()=>import("./index.html-B4hSPNM4.js"),__vite__mapDeps([2694,1])),meta:{t:"标签: Asynchronous Programming",I:!1}}],["/tag/enum/",{loader:()=>a(()=>import("./index.html-BpY2_v7L.js"),__vite__mapDeps([2695,1])),meta:{t:"标签: Enum",I:!1}}],["/tag/type-checking/",{loader:()=>a(()=>import("./index.html-DRfWmxh4.js"),__vite__mapDeps([2696,1])),meta:{t:"标签: Type Checking",I:!1}}],["/tag/kotlin-coroutines/",{loader:()=>a(()=>import("./index.html-wM1NBCYI.js"),__vite__mapDeps([2697,1])),meta:{t:"标签: Kotlin Coroutines",I:!1}}],["/tag/flows/",{loader:()=>a(()=>import("./index.html-ComsYGfv.js"),__vite__mapDeps([2698,1])),meta:{t:"标签: Flows",I:!1}}],["/tag/comparison/",{loader:()=>a(()=>import("./index.html-g5AFw3U-.js"),__vite__mapDeps([2699,1])),meta:{t:"标签: Comparison",I:!1}}],["/tag/java%E6%B3%9B%E5%9E%8B/",{loader:()=>a(()=>import("./index.html-D0YyjZw2.js"),__vite__mapDeps([2700,1])),meta:{t:"标签: Java泛型",I:!1}}],["/tag/%E6%AF%94%E8%BE%83%E6%96%B9%E6%B3%95/",{loader:()=>a(()=>import("./index.html-yrwOQET1.js"),__vite__mapDeps([2701,1])),meta:{t:"标签: 比较方法",I:!1}}],["/tag/java-17/",{loader:()=>a(()=>import("./index.html-Bq2xosRb.js"),__vite__mapDeps([2702,1])),meta:{t:"标签: Java 17",I:!1}}],["/tag/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/",{loader:()=>a(()=>import("./index.html-Db0m7DkC.js"),__vite__mapDeps([2703,1])),meta:{t:"标签: 反序列化",I:!1}}],["/tag/%E5%AE%89%E5%85%A8%E6%80%A7/",{loader:()=>a(()=>import("./index.html-n2z2-IHb.js"),__vite__mapDeps([2704,1])),meta:{t:"标签: 安全性",I:!1}}],["/tag/%E6%96%87%E4%BB%B6%E8%BD%AC%E6%8D%A2/",{loader:()=>a(()=>import("./index.html-t_mmEKT6.js"),__vite__mapDeps([2705,1])),meta:{t:"标签: 文件转换",I:!1}}],["/tag/resultset/",{loader:()=>a(()=>import("./index.html-DcpVF66f.js"),__vite__mapDeps([2706,1])),meta:{t:"标签: ResultSet",I:!1}}],["/tag/map/",{loader:()=>a(()=>import("./index.html-gjcKbEcl.js"),__vite__mapDeps([2707,1])),meta:{t:"标签: Map",I:!1}}],["/tag/%E6%97%B6%E9%97%B4%E6%88%B3%E8%BD%AC%E6%8D%A2/",{loader:()=>a(()=>import("./index.html-BA_Ys2Ip.js"),__vite__mapDeps([2708,1])),meta:{t:"标签: 时间戳转换",I:!1}}],["/tag/hexadecimal/",{loader:()=>a(()=>import("./index.html-CfOfWZX-.js"),__vite__mapDeps([2709,1])),meta:{t:"标签: Hexadecimal",I:!1}}],["/tag/streams/",{loader:()=>a(()=>import("./index.html-Da-H_NSC.js"),__vite__mapDeps([2710,1])),meta:{t:"标签: Streams",I:!1}}],["/tag/multimap/",{loader:()=>a(()=>import("./index.html-CQOKRjNk.js"),__vite__mapDeps([2711,1])),meta:{t:"标签: Multimap",I:!1}}],["/tag/ascii/",{loader:()=>a(()=>import("./index.html-3iolcG_Y.js"),__vite__mapDeps([2712,1])),meta:{t:"标签: ASCII",I:!1}}],["/tag/%E6%8E%A7%E5%88%B6%E5%8F%B0/",{loader:()=>a(()=>import("./index.html-KuzBGuFl.js"),__vite__mapDeps([2713,1])),meta:{t:"标签: 控制台",I:!1}}],["/tag/%E8%A1%A8%E6%A0%BC/",{loader:()=>a(()=>import("./index.html-DYG4hxi2.js"),__vite__mapDeps([2714,1])),meta:{t:"标签: 表格",I:!1}}],["/tag/%E5%8F%AF%E5%8F%98%E5%AD%97%E7%AC%A6%E4%B8%B2/",{loader:()=>a(()=>import("./index.html-CSmdiGKj.js"),__vite__mapDeps([2715,1])),meta:{t:"标签: 可变字符串",I:!1}}],["/tag/isempty/",{loader:()=>a(()=>import("./index.html-Ds2riILl.js"),__vite__mapDeps([2716,1])),meta:{t:"标签: isEmpty",I:!1}}],["/tag/isblank/",{loader:()=>a(()=>import("./index.html-C_UwcddE.js"),__vite__mapDeps([2717,1])),meta:{t:"标签: isBlank",I:!1}}],["/tag/cron%E8%A1%A8%E8%BE%BE%E5%BC%8F/",{loader:()=>a(()=>import("./index.html-Cm_CqXm1.js"),__vite__mapDeps([2718,1])),meta:{t:"标签: Cron表达式",I:!1}}],["/tag/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/",{loader:()=>a(()=>import("./index.html-BhjdV8Dl.js"),__vite__mapDeps([2719,1])),meta:{t:"标签: 定时任务",I:!1}}],["/tag/%E6%B6%88%E6%81%AF%E9%A1%BA%E5%BA%8F/",{loader:()=>a(()=>import("./index.html-CXwFX3n9.js"),__vite__mapDeps([2720,1])),meta:{t:"标签: 消息顺序",I:!1}}],["/tag/%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%B3%A8%E9%87%8A/",{loader:()=>a(()=>import("./index.html-P924sruC.js"),__vite__mapDeps([2721,1])),meta:{t:"标签: 可执行注释",I:!1}}],["/tag/indexof()/",{loader:()=>a(()=>import("./index.html-CYDmz8NP.js"),__vite__mapDeps([2722,1])),meta:{t:"标签: indexOf()",I:!1}}],["/tag/proxy/",{loader:()=>a(()=>import("./index.html-BDOSgmHO.js"),__vite__mapDeps([2723,1])),meta:{t:"标签: Proxy",I:!1}}],["/tag/hashset/",{loader:()=>a(()=>import("./index.html--e1FutLA.js"),__vite__mapDeps([2724,1])),meta:{t:"标签: HashSet",I:!1}}],["/tag/toarray/",{loader:()=>a(()=>import("./index.html-XwVM3F6p.js"),__vite__mapDeps([2725,1])),meta:{t:"标签: toArray",I:!1}}],["/tag/nosuchelementexception/",{loader:()=>a(()=>import("./index.html-U3KU0OME.js"),__vite__mapDeps([2726,1])),meta:{t:"标签: NoSuchElementException",I:!1}}],["/tag/xml%E8%A7%A3%E6%9E%90/",{loader:()=>a(()=>import("./index.html-C2xRZTty.js"),__vite__mapDeps([2727,1])),meta:{t:"标签: XML解析",I:!1}}],["/tag/consumer-group/",{loader:()=>a(()=>import("./index.html-BE62gVN1.js"),__vite__mapDeps([2728,1])),meta:{t:"标签: Consumer Group",I:!1}}],["/tag/partition-rebalancing/",{loader:()=>a(()=>import("./index.html-BSWlWHrf.js"),__vite__mapDeps([2729,1])),meta:{t:"标签: Partition Rebalancing",I:!1}}],["/tag/%E4%BF%AE%E6%94%B9/",{loader:()=>a(()=>import("./index.html-DspQKEBT.js"),__vite__mapDeps([2730,1])),meta:{t:"标签: 修改",I:!1}}],["/tag/mongodb-atlas/",{loader:()=>a(()=>import("./index.html-CidMRv9U.js"),__vite__mapDeps([2731,1])),meta:{t:"标签: MongoDB Atlas",I:!1}}],["/tag/integration-testing/",{loader:()=>a(()=>import("./index.html-D_AYrqcX.js"),__vite__mapDeps([2732,1])),meta:{t:"标签: Integration Testing",I:!1}}],["/tag/simpledateformat/",{loader:()=>a(()=>import("./index.html-DzZePes7.js"),__vite__mapDeps([2733,1])),meta:{t:"标签: SimpleDateFormat",I:!1}}],["/tag/rounding/",{loader:()=>a(()=>import("./index.html-U9QPCeNN.js"),__vite__mapDeps([2734,1])),meta:{t:"标签: Rounding",I:!1}}],["/tag/bean-configuration/",{loader:()=>a(()=>import("./index.html-DpjxPAus.js"),__vite__mapDeps([2735,1])),meta:{t:"标签: Bean Configuration",I:!1}}],["/tag/%E5%86%85%E5%AD%98%E6%98%A0%E5%B0%84/",{loader:()=>a(()=>import("./index.html-C3e_Wozz.js"),__vite__mapDeps([2736,1])),meta:{t:"标签: 内存映射",I:!1}}],["/tag/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/",{loader:()=>a(()=>import("./index.html-DAvY9Hpl.js"),__vite__mapDeps([2737,1])),meta:{t:"标签: 共享内存",I:!1}}],["/tag/%E6%97%A5%E6%9C%9F%E6%8E%92%E5%BA%8F/",{loader:()=>a(()=>import("./index.html-DyMwyfpo.js"),__vite__mapDeps([2738,1])),meta:{t:"标签: 日期排序",I:!1}}],["/tag/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%AF%94%E8%BE%83%E5%99%A8/",{loader:()=>a(()=>import("./index.html-BATr6qdT.js"),__vite__mapDeps([2739,1])),meta:{t:"标签: 自定义比较器",I:!1}}],["/tag/%E6%B5%8B%E8%AF%95%E8%87%AA%E5%8A%A8%E5%8C%96/",{loader:()=>a(()=>import("./index.html-DRlBHlcX.js"),__vite__mapDeps([2740,1])),meta:{t:"标签: 测试自动化",I:!1}}],["/tag/web%E8%87%AA%E5%8A%A8%E5%8C%96/",{loader:()=>a(()=>import("./index.html-CBxaUu1g.js"),__vite__mapDeps([2741,1])),meta:{t:"标签: Web自动化",I:!1}}],["/tag/synchronization/",{loader:()=>a(()=>import("./index.html-C-WWTdX0.js"),__vite__mapDeps([2742,1])),meta:{t:"标签: Synchronization",I:!1}}],["/tag/thread/",{loader:()=>a(()=>import("./index.html-Dtu2iGV-.js"),__vite__mapDeps([2743,1])),meta:{t:"标签: Thread",I:!1}}],["/tag/java-collections/",{loader:()=>a(()=>import("./index.html-CM4crSM0.js"),__vite__mapDeps([2744,1])),meta:{t:"标签: Java Collections",I:!1}}],["/tag/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/",{loader:()=>a(()=>import("./index.html-DeGvOv4g.js"),__vite__mapDeps([2745,1])),meta:{t:"标签: 时间复杂度",I:!1}}],["/tag/timeunit/",{loader:()=>a(()=>import("./index.html-CJv8f6vj.js"),__vite__mapDeps([2746,1])),meta:{t:"标签: TimeUnit",I:!1}}],["/tag/%E6%97%B6%E9%97%B4%E8%BD%AC%E6%8D%A2/",{loader:()=>a(()=>import("./index.html-BILWLSuX.js"),__vite__mapDeps([2747,1])),meta:{t:"标签: 时间转换",I:!1}}],["/tag/%E4%BB%A3%E7%A0%81/",{loader:()=>a(()=>import("./index.html-CF0r_eZL.js"),__vite__mapDeps([2748,1])),meta:{t:"标签: 代码",I:!1}}],["/tag/%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF/",{loader:()=>a(()=>import("./index.html-CtCVXcsn.js"),__vite__mapDeps([2749,1])),meta:{t:"标签: 编译错误",I:!1}}],["/tag/unsafe/",{loader:()=>a(()=>import("./index.html-CEXEs5BO.js"),__vite__mapDeps([2750,1])),meta:{t:"标签: Unsafe",I:!1}}],["/tag/park/",{loader:()=>a(()=>import("./index.html-DWbEYqNb.js"),__vite__mapDeps([2751,1])),meta:{t:"标签: park",I:!1}}],["/tag/unpark/",{loader:()=>a(()=>import("./index.html-CF4nKW9N.js"),__vite__mapDeps([2752,1])),meta:{t:"标签: unpark",I:!1}}],["/tag/mathflux/",{loader:()=>a(()=>import("./index.html-CXPiM06e.js"),__vite__mapDeps([2753,1])),meta:{t:"标签: MathFlux",I:!1}}],["/tag/project-reactor/",{loader:()=>a(()=>import("./index.html-LJlS_Odj.js"),__vite__mapDeps([2754,1])),meta:{t:"标签: Project Reactor",I:!1}}],["/tag/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/",{loader:()=>a(()=>import("./index.html-FbesOjwF.js"),__vite__mapDeps([2755,1])),meta:{t:"标签: 异常处理",I:!1}}],["/tag/conditionalonthreading/",{loader:()=>a(()=>import("./index.html-Cu0ACOWL.js"),__vite__mapDeps([2756,1])),meta:{t:"标签: ConditionalOnThreading",I:!1}}],["/tag/http-client/",{loader:()=>a(()=>import("./index.html-C2LfX7Wo.js"),__vite__mapDeps([2757,1])),meta:{t:"标签: HTTP Client",I:!1}}],["/tag/spring-6/",{loader:()=>a(()=>import("./index.html-C8ld4SZL.js"),__vite__mapDeps([2758,1])),meta:{t:"标签: Spring 6",I:!1}}],["/tag/jdbcclient-api/",{loader:()=>a(()=>import("./index.html-cGayFXE4.js"),__vite__mapDeps([2759,1])),meta:{t:"标签: JdbcClient API",I:!1}}],["/tag/arrays/",{loader:()=>a(()=>import("./index.html-BlqNw7tk.js"),__vite__mapDeps([2760,1])),meta:{t:"标签: Arrays",I:!1}}],["/tag/mismatch()/",{loader:()=>a(()=>import("./index.html-VIj3UU7E.js"),__vite__mapDeps([2761,1])),meta:{t:"标签: mismatch()",I:!1}}],["/tag/capitalize/",{loader:()=>a(()=>import("./index.html-Bx24nJ-k.js"),__vite__mapDeps([2762,1])),meta:{t:"标签: Capitalize",I:!1}}],["/tag/apache-commons/",{loader:()=>a(()=>import("./index.html-Dcm2hud4.js"),__vite__mapDeps([2763,1])),meta:{t:"标签: Apache Commons",I:!1}}],["/tag/character/",{loader:()=>a(()=>import("./index.html-HGa6-6yf.js"),__vite__mapDeps([2764,1])),meta:{t:"标签: Character",I:!1}}],["/tag/regular-expression/",{loader:()=>a(()=>import("./index.html-BKFWW00Q.js"),__vite__mapDeps([2765,1])),meta:{t:"标签: Regular Expression",I:!1}}],["/tag/java-streams/",{loader:()=>a(()=>import("./index.html-D-wi55MQ.js"),__vite__mapDeps([2766,1])),meta:{t:"标签: Java Streams",I:!1}}],["/tag/number-detection/",{loader:()=>a(()=>import("./index.html-C3L0I_57.js"),__vite__mapDeps([2767,1])),meta:{t:"标签: Number Detection",I:!1}}],["/tag/conditional-throwing/",{loader:()=>a(()=>import("./index.html-CXmc9lHH.js"),__vite__mapDeps([2768,1])),meta:{t:"标签: Conditional Throwing",I:!1}}],["/tag/glassfish-server/",{loader:()=>a(()=>import("./index.html-DnQadmq6.js"),__vite__mapDeps([2769,1])),meta:{t:"标签: GlassFish Server",I:!1}}],["/tag/java-enterprise/",{loader:()=>a(()=>import("./index.html-C2lEOWFM.js"),__vite__mapDeps([2770,1])),meta:{t:"标签: Java Enterprise",I:!1}}],["/tag/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/",{loader:()=>a(()=>import("./index.html-86xas-tM.js"),__vite__mapDeps([2771,1])),meta:{t:"标签: 异步编程",I:!1}}],["/tag/dom/",{loader:()=>a(()=>import("./index.html-I40YXCm4.js"),__vite__mapDeps([2772,1])),meta:{t:"标签: DOM",I:!1}}],["/tag/xml-parsing/",{loader:()=>a(()=>import("./index.html-CRAvfSI7.js"),__vite__mapDeps([2773,1])),meta:{t:"标签: XML Parsing",I:!1}}],["/tag/xml%E8%BD%AC%E6%8D%A2/",{loader:()=>a(()=>import("./index.html-CQXwmhKl.js"),__vite__mapDeps([2774,1])),meta:{t:"标签: XML转换",I:!1}}],["/tag/%E6%96%87%E6%A1%A3%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/",{loader:()=>a(()=>import("./index.html-DQySMDk2.js"),__vite__mapDeps([2775,1])),meta:{t:"标签: 文档对象模型",I:!1}}],["/tag/%E7%AE%80%E5%8D%95api/",{loader:()=>a(()=>import("./index.html-B0lig2Y0.js"),__vite__mapDeps([2776,1])),meta:{t:"标签: 简单API",I:!1}}],["/tag/zipfile/",{loader:()=>a(()=>import("./index.html-t_KfQIbS.js"),__vite__mapDeps([2777,1])),meta:{t:"标签: ZipFile",I:!1}}],["/tag/zipinputstream/",{loader:()=>a(()=>import("./index.html-DNPIjDdo.js"),__vite__mapDeps([2778,1])),meta:{t:"标签: ZipInputStream",I:!1}}],["/tag/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/",{loader:()=>a(()=>import("./index.html-D_iWquXc.js"),__vite__mapDeps([2779,1])),meta:{t:"标签: 单例模式",I:!1}}],["/tag/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",{loader:()=>a(()=>import("./index.html-U5_BdNsw.js"),__vite__mapDeps([2780,1])),meta:{t:"标签: 设计模式",I:!1}}],["/tag/stringutils/",{loader:()=>a(()=>import("./index.html-BRCbnykW.js"),__vite__mapDeps([2781,1])),meta:{t:"标签: StringUtils",I:!1}}],["/tag/pojo/",{loader:()=>a(()=>import("./index.html-rvBXukMO.js"),__vite__mapDeps([2782,1])),meta:{t:"标签: POJO",I:!1}}],["/tag/opencsv/",{loader:()=>a(()=>import("./index.html-4kgxcvy0.js"),__vite__mapDeps([2783,1])),meta:{t:"标签: OpenCSV",I:!1}}],["/tag/csv%E6%96%87%E4%BB%B6/",{loader:()=>a(()=>import("./index.html-BOW_hk6A.js"),__vite__mapDeps([2784,1])),meta:{t:"标签: CSV文件",I:!1}}],["/tag/javadoc/",{loader:()=>a(()=>import("./index.html-BaNAjp0A.js"),__vite__mapDeps([2785,1])),meta:{t:"标签: JavaDoc",I:!1}}],["/tag/generics/",{loader:()=>a(()=>import("./index.html-DMOiXuOh.js"),__vite__mapDeps([2786,1])),meta:{t:"标签: Generics",I:!1}}],["/tag/entry/",{loader:()=>a(()=>import("./index.html-BxNBJ1i3.js"),__vite__mapDeps([2787,1])),meta:{t:"标签: Entry",I:!1}}],["/tag/iteration/",{loader:()=>a(()=>import("./index.html-NnpFC9R7.js"),__vite__mapDeps([2788,1])),meta:{t:"标签: Iteration",I:!1}}],["/tag/testng/",{loader:()=>a(()=>import("./index.html-DmEQZixI.js"),__vite__mapDeps([2789,1])),meta:{t:"标签: TestNG",I:!1}}],["/tag/reuse/",{loader:()=>a(()=>import("./index.html-DtPsWtlN.js"),__vite__mapDeps([2790,1])),meta:{t:"标签: Reuse",I:!1}}],["/tag/local-development/",{loader:()=>a(()=>import("./index.html-Bn883GKA.js"),__vite__mapDeps([2791,1])),meta:{t:"标签: Local Development",I:!1}}],["/tag/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/",{loader:()=>a(()=>import("./index.html-BE_OmyDz.js"),__vite__mapDeps([2792,1])),meta:{t:"标签: 环境变量",I:!1}}],["/tag/%E5%BA%94%E7%94%A8/",{loader:()=>a(()=>import("./index.html-HR4z_ZbS.js"),__vite__mapDeps([2793,1])),meta:{t:"标签: 应用",I:!1}}],["/tag/csv/",{loader:()=>a(()=>import("./index.html-DVszgLVH.js"),__vite__mapDeps([2794,1])),meta:{t:"标签: CSV",I:!1}}],["/tag/apache-commons-csv/",{loader:()=>a(()=>import("./index.html-BmcBKgcg.js"),__vite__mapDeps([2795,1])),meta:{t:"标签: Apache Commons CSV",I:!1}}],["/tag/httpsecurity/",{loader:()=>a(()=>import("./index.html-BWWXOsGt.js"),__vite__mapDeps([2796,1])),meta:{t:"标签: HttpSecurity",I:!1}}],["/tag/websecurity/",{loader:()=>a(()=>import("./index.html-KWluqoyh.js"),__vite__mapDeps([2797,1])),meta:{t:"标签: WebSecurity",I:!1}}],["/tag/connect-4/",{loader:()=>a(()=>import("./index.html-CrTytglh.js"),__vite__mapDeps([2798,1])),meta:{t:"标签: Connect 4",I:!1}}],["/tag/%E6%B8%B8%E6%88%8F%E5%AE%9E%E7%8E%B0/",{loader:()=>a(()=>import("./index.html-Brm35bx6.js"),__vite__mapDeps([2799,1])),meta:{t:"标签: 游戏实现",I:!1}}],["/tag/vector/",{loader:()=>a(()=>import("./index.html-B6_iax2o.js"),__vite__mapDeps([2800,1])),meta:{t:"标签: Vector",I:!1}}],["/tag/arraylist/",{loader:()=>a(()=>import("./index.html-CP_8nP2V.js"),__vite__mapDeps([2801,1])),meta:{t:"标签: ArrayList",I:!1}}],["/tag/langchain/",{loader:()=>a(()=>import("./index.html-DiN9IK_n.js"),__vite__mapDeps([2802,1])),meta:{t:"标签: LangChain",I:!1}}],["/tag/%E5%9B%BD%E9%99%85%E5%8C%96/",{loader:()=>a(()=>import("./index.html-BrPmhLQi.js"),__vite__mapDeps([2803,1])),meta:{t:"标签: 国际化",I:!1}}],["/tag/java%E8%AE%B0%E5%BD%95/",{loader:()=>a(()=>import("./index.html-BW0Yq6G5.js"),__vite__mapDeps([2804,1])),meta:{t:"标签: Java记录",I:!1}}],["/tag/optional%E5%8F%82%E6%95%B0/",{loader:()=>a(()=>import("./index.html-D7X_Jk_-.js"),__vite__mapDeps([2805,1])),meta:{t:"标签: Optional参数",I:!1}}],["/tag/%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92/",{loader:()=>a(()=>import("./index.html-1a86f8ha.js"),__vite__mapDeps([2806,1])),meta:{t:"标签: 引用传递",I:!1}}],["/tag/printwriter/",{loader:()=>a(()=>import("./index.html-CGAIyp3b.js"),__vite__mapDeps([2807,1])),meta:{t:"标签: PrintWriter",I:!1}}],["/tag/filewriter/",{loader:()=>a(()=>import("./index.html-DiAzj8hw.js"),__vite__mapDeps([2808,1])),meta:{t:"标签: FileWriter",I:!1}}],["/tag/queue/",{loader:()=>a(()=>import("./index.html-DKAQ991-.js"),__vite__mapDeps([2809,1])),meta:{t:"标签: Queue",I:!1}}],["/tag/%E9%87%8D%E8%AF%95%E9%80%BB%E8%BE%91/",{loader:()=>a(()=>import("./index.html-isi9QOlz.js"),__vite__mapDeps([2810,1])),meta:{t:"标签: 重试逻辑",I:!1}}],["/tag/string-split/",{loader:()=>a(()=>import("./index.html-CZR9VGB2.js"),__vite__mapDeps([2811,1])),meta:{t:"标签: String Split",I:!1}}],["/tag/key-value-pairs/",{loader:()=>a(()=>import("./index.html-B_ZJyhqN.js"),__vite__mapDeps([2812,1])),meta:{t:"标签: Key-Value Pairs",I:!1}}],["/tag/spring-boot-3.1/",{loader:()=>a(()=>import("./index.html-Dz0o_EEK.js"),__vite__mapDeps([2813,1])),meta:{t:"标签: Spring Boot 3.1",I:!1}}],["/tag/connectiondetails/",{loader:()=>a(()=>import("./index.html-BWDxX-sg.js"),__vite__mapDeps([2814,1])),meta:{t:"标签: ConnectionDetails",I:!1}}],["/tag/n-th-element/",{loader:()=>a(()=>import("./index.html-V2wbhWwX.js"),__vite__mapDeps([2815,1])),meta:{t:"标签: N-th Element",I:!1}}],["/tag/wait()/",{loader:()=>a(()=>import("./index.html-q4Poi92i.js"),__vite__mapDeps([2816,1])),meta:{t:"标签: wait()",I:!1}}],["/tag/notify()/",{loader:()=>a(()=>import("./index.html-BIZGjiKw.js"),__vite__mapDeps([2817,1])),meta:{t:"标签: notify()",I:!1}}],["/tag/synchronization/",{loader:()=>a(()=>import("./index.html-C-WWTdX0.js"),__vite__mapDeps([2742,1])),meta:{t:"标签: synchronization",I:!1}}],["/tag/%E6%8D%A2%E8%A1%8C/",{loader:()=>a(()=>import("./index.html-0qtipdWl.js"),__vite__mapDeps([2818,1])),meta:{t:"标签: 换行",I:!1}}],["/tag/api/",{loader:()=>a(()=>import("./index.html-BH5MuM6u.js"),__vite__mapDeps([2819,1])),meta:{t:"标签: API",I:!1}}],["/tag/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/",{loader:()=>a(()=>import("./index.html-CwbVjbrj.js"),__vite__mapDeps([2820,1])),meta:{t:"标签: 版本控制",I:!1}}],["/tag/case-insensitive-search/",{loader:()=>a(()=>import("./index.html-DrbjckTY.js"),__vite__mapDeps([2821,1])),meta:{t:"标签: Case-Insensitive Search",I:!1}}],["/tag/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/",{loader:()=>a(()=>import("./index.html-Cd6FzG6n.js"),__vite__mapDeps([2822,1])),meta:{t:"标签: 性能测试",I:!1}}],["/tag/class-equality/",{loader:()=>a(()=>import("./index.html-D_0D12X1.js"),__vite__mapDeps([2823,1])),meta:{t:"标签: Class Equality",I:!1}}],["/tag/char-array/",{loader:()=>a(()=>import("./index.html-CCbgIYXa.js"),__vite__mapDeps([2824,1])),meta:{t:"标签: char array",I:!1}}],["/tag/int-array/",{loader:()=>a(()=>import("./index.html-DshNkwxU.js"),__vite__mapDeps([2825,1])),meta:{t:"标签: int array",I:!1}}],["/tag/java-7/",{loader:()=>a(()=>import("./index.html-S6lmKd1K.js"),__vite__mapDeps([2826,1])),meta:{t:"标签: Java 7",I:!1}}],["/tag/string-conversion/",{loader:()=>a(()=>import("./index.html-Dbr4eUpX.js"),__vite__mapDeps([2827,1])),meta:{t:"标签: String Conversion",I:!1}}],["/tag/native-image/",{loader:()=>a(()=>import("./index.html-i3syRRYq.js"),__vite__mapDeps([2828,1])),meta:{t:"标签: Native Image",I:!1}}],["/tag/%E5%A4%9A%E7%B1%BB%E5%9E%8B%E5%AF%B9%E8%B1%A1/",{loader:()=>a(()=>import("./index.html-D6GOQRVl.js"),__vite__mapDeps([2829,1])),meta:{t:"标签: 多类型对象",I:!1}}],["/tag/finalization/",{loader:()=>a(()=>import("./index.html-D0rbc0Fh.js"),__vite__mapDeps([2830,1])),meta:{t:"标签: Finalization",I:!1}}],["/tag/arrays.sort/",{loader:()=>a(()=>import("./index.html-DmF2Imnn.js"),__vite__mapDeps([2831,1])),meta:{t:"标签: Arrays.sort",I:!1}}],["/tag/collections.sort/",{loader:()=>a(()=>import("./index.html-DmnI5172.js"),__vite__mapDeps([2832,1])),meta:{t:"标签: Collections.sort",I:!1}}],["/tag/information-hiding/",{loader:()=>a(()=>import("./index.html-CjrVO-66.js"),__vite__mapDeps([2833,1])),meta:{t:"标签: Information Hiding",I:!1}}],["/tag/encapsulation/",{loader:()=>a(()=>import("./index.html-BuFMm1Up.js"),__vite__mapDeps([2834,1])),meta:{t:"标签: Encapsulation",I:!1}}],["/tag/putifabsent/",{loader:()=>a(()=>import("./index.html-BdkLLWQj.js"),__vite__mapDeps([2835,1])),meta:{t:"标签: putIfAbsent",I:!1}}],["/tag/computeifabsent/",{loader:()=>a(()=>import("./index.html-BRbCXRMA.js"),__vite__mapDeps([2836,1])),meta:{t:"标签: computeIfAbsent",I:!1}}],["/tag/biginteger/",{loader:()=>a(()=>import("./index.html-DuzjiqCb.js"),__vite__mapDeps([2837,1])),meta:{t:"标签: BigInteger",I:!1}}],["/tag/%E6%80%A7%E8%83%BD%E6%AF%94%E8%BE%83/",{loader:()=>a(()=>import("./index.html-CA-NKnd7.js"),__vite__mapDeps([2838,1])),meta:{t:"标签: 性能比较",I:!1}}],["/tag/record/",{loader:()=>a(()=>import("./index.html-BoRsWUbs.js"),__vite__mapDeps([2839,1])),meta:{t:"标签: Record",I:!1}}],["/tag/mime%E7%B1%BB%E5%9E%8B/",{loader:()=>a(()=>import("./index.html-m25x8O8x.js"),__vite__mapDeps([2840,1])),meta:{t:"标签: MIME类型",I:!1}}],["/tag/%E6%96%87%E4%BB%B6%E6%89%A9%E5%B1%95%E5%90%8D/",{loader:()=>a(()=>import("./index.html-CrIPs8gk.js"),__vite__mapDeps([2841,1])),meta:{t:"标签: 文件扩展名",I:!1}}],["/tag/conversion/",{loader:()=>a(()=>import("./index.html-lv9zfNSA.js"),__vite__mapDeps([2518,1])),meta:{t:"标签: conversion",I:!1}}],["/tag/%E7%94%A8%E6%88%B7%E5%90%8D/",{loader:()=>a(()=>import("./index.html-BivNl46a.js"),__vite__mapDeps([2842,1])),meta:{t:"标签: 用户名",I:!1}}],["/tag/%E7%B3%BB%E7%BB%9F%E5%B1%9E%E6%80%A7/",{loader:()=>a(()=>import("./index.html-RxTdklzv.js"),__vite__mapDeps([2843,1])),meta:{t:"标签: 系统属性",I:!1}}],["/tag/consumer/",{loader:()=>a(()=>import("./index.html-_BlQ2T_Z.js"),__vite__mapDeps([2844,1])),meta:{t:"标签: Consumer",I:!1}}],["/tag/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/",{loader:()=>a(()=>import("./index.html-Cfj1hF4s.js"),__vite__mapDeps([2845,1])),meta:{t:"标签: 开发环境",I:!1}}],["/tag/character-sequence/",{loader:()=>a(()=>import("./index.html-DgYEcTRZ.js"),__vite__mapDeps([2846,1])),meta:{t:"标签: Character Sequence",I:!1}}],["/tag/messaging-system/",{loader:()=>a(()=>import("./index.html-D1aal1PR.js"),__vite__mapDeps([2847,1])),meta:{t:"标签: Messaging System",I:!1}}],["/tag/stream-processing/",{loader:()=>a(()=>import("./index.html-B9d_hcCz.js"),__vite__mapDeps([2848,1])),meta:{t:"标签: Stream Processing",I:!1}}],["/tag/%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5/",{loader:()=>a(()=>import("./index.html-Drt9lxBl.js"),__vite__mapDeps([2849,1])),meta:{t:"标签: 编程实践",I:!1}}],["/tag/string-concatenation/",{loader:()=>a(()=>import("./index.html-C-ZV-uvB.js"),__vite__mapDeps([2850,1])),meta:{t:"标签: String Concatenation",I:!1}}],["/tag/natural-language/",{loader:()=>a(()=>import("./index.html-CQXP1kPf.js"),__vite__mapDeps([2851,1])),meta:{t:"标签: Natural Language",I:!1}}],["/tag/%E5%88%86%E5%8C%BA/",{loader:()=>a(()=>import("./index.html-DaNGwyey.js"),__vite__mapDeps([2852,1])),meta:{t:"标签: 分区",I:!1}}],["/tag/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/",{loader:()=>a(()=>import("./index.html-Ca5qqsBD.js"),__vite__mapDeps([2853,1])),meta:{t:"标签: 高阶函数",I:!1}}],["/tag/rsocket-server/",{loader:()=>a(()=>import("./index.html-CApGuL8V.js"),__vite__mapDeps([2854,1])),meta:{t:"标签: RSocket Server",I:!1}}],["/tag/rsocket-client/",{loader:()=>a(()=>import("./index.html-DELrf5Yx.js"),__vite__mapDeps([2855,1])),meta:{t:"标签: RSocket Client",I:!1}}],["/tag/array-rotation/",{loader:()=>a(()=>import("./index.html-dGeGfJhE.js"),__vite__mapDeps([2856,1])),meta:{t:"标签: Array Rotation",I:!1}}],["/tag/loop/",{loader:()=>a(()=>import("./index.html-GSZ63Eou.js"),__vite__mapDeps([2857,1])),meta:{t:"标签: Loop",I:!1}}],["/tag/liberica-jdk/",{loader:()=>a(()=>import("./index.html-C30kjEMz.js"),__vite__mapDeps([2858,1])),meta:{t:"标签: Liberica JDK",I:!1}}],["/tag/springrunner/",{loader:()=>a(()=>import("./index.html-C4OwZJ6O.js"),__vite__mapDeps([2859,1])),meta:{t:"标签: SpringRunner",I:!1}}],["/tag/springboottest/",{loader:()=>a(()=>import("./index.html-BmQqlj1S.js"),__vite__mapDeps([2860,1])),meta:{t:"标签: SpringBootTest",I:!1}}],["/tag/jep-430/",{loader:()=>a(()=>import("./index.html-DsQQCTyB.js"),__vite__mapDeps([2861,1])),meta:{t:"标签: JEP 430",I:!1}}],["/tag/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/",{loader:()=>a(()=>import("./index.html-DafFY9e8.js"),__vite__mapDeps([2862,1])),meta:{t:"标签: 接口测试",I:!1}}],["/tag/double/",{loader:()=>a(()=>import("./index.html-brlqmnf_.js"),__vite__mapDeps([2608,1])),meta:{t:"标签: Double",I:!1}}],["/tag/trunk-based-development/",{loader:()=>a(()=>import("./index.html-Bnu0Sz5K.js"),__vite__mapDeps([2863,1])),meta:{t:"标签: Trunk-Based Development",I:!1}}],["/tag/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/",{loader:()=>a(()=>import("./index.html-Dun-wy2w.js"),__vite__mapDeps([2864,1])),meta:{t:"标签: 持续集成",I:!1}}],["/tag/%E6%9C%AA%E5%91%BD%E5%90%8D%E7%B1%BB/",{loader:()=>a(()=>import("./index.html-CeZMRAey.js"),__vite__mapDeps([2865,1])),meta:{t:"标签: 未命名类",I:!1}}],["/tag/%E5%AE%9E%E4%BE%8B%E4%B8%BB%E6%96%B9%E6%B3%95/",{loader:()=>a(()=>import("./index.html-BR3naCv6.js"),__vite__mapDeps([2866,1])),meta:{t:"标签: 实例主方法",I:!1}}],["/tag/unnamed-patterns/",{loader:()=>a(()=>import("./index.html-BSjYbUw5.js"),__vite__mapDeps([2867,1])),meta:{t:"标签: Unnamed Patterns",I:!1}}],["/tag/%E6%AF%94%E8%BE%83%E5%AF%B9%E8%B1%A1/",{loader:()=>a(()=>import("./index.html-wz91Opc3.js"),__vite__mapDeps([2868,1])),meta:{t:"标签: 比较对象",I:!1}}],["/tag/apache-commons-lang-3/",{loader:()=>a(()=>import("./index.html-Dp0gmGop.js"),__vite__mapDeps([2869,1])),meta:{t:"标签: Apache Commons Lang 3",I:!1}}],["/tag/boolean/",{loader:()=>a(()=>import("./index.html-DBrIBoI6.js"),__vite__mapDeps([2870,1])),meta:{t:"标签: Boolean",I:!1}}],["/tag/validation/",{loader:()=>a(()=>import("./index.html-C-L6kC87.js"),__vite__mapDeps([2871,1])),meta:{t:"标签: Validation",I:!1}}],["/tag/log4j/",{loader:()=>a(()=>import("./index.html-B-Uw_l0D.js"),__vite__mapDeps([2872,1])),meta:{t:"标签: Log4j",I:!1}}],["/tag/log4j.properties/",{loader:()=>a(()=>import("./index.html-BSK6quVh.js"),__vite__mapDeps([2873,1])),meta:{t:"标签: log4j.properties",I:!1}}],["/tag/java%E6%97%A5%E5%BF%97/",{loader:()=>a(()=>import("./index.html-BjfKF35k.js"),__vite__mapDeps([2874,1])),meta:{t:"标签: Java日志",I:!1}}],["/tag/date-and-time/",{loader:()=>a(()=>import("./index.html-BZig0qgt.js"),__vite__mapDeps([2875,1])),meta:{t:"标签: Date and Time",I:!1}}],["/tag/%E6%96%AD%E8%A8%80/",{loader:()=>a(()=>import("./index.html-pcFfSd4e.js"),__vite__mapDeps([2876,1])),meta:{t:"标签: 断言",I:!1}}],["/tag/catalina-opts/",{loader:()=>a(()=>import("./index.html-CfGGcM8t.js"),__vite__mapDeps([2877,1])),meta:{t:"标签: CATALINA_OPTS",I:!1}}],["/tag/java-opts/",{loader:()=>a(()=>import("./index.html-Dt-N0Vt5.js"),__vite__mapDeps([2878,1])),meta:{t:"标签: JAVA_OPTS",I:!1}}],["/tag/emoji/",{loader:()=>a(()=>import("./index.html-BvpSIfTf.js"),__vite__mapDeps([2879,1])),meta:{t:"标签: Emoji",I:!1}}],["/tag/java-io/",{loader:()=>a(()=>import("./index.html-CFDpZi8Z.js"),__vite__mapDeps([2880,1])),meta:{t:"标签: Java IO",I:!1}}],["/tag/reflection-api/",{loader:()=>a(()=>import("./index.html-BqfM3ukU.js"),__vite__mapDeps([2881,1])),meta:{t:"标签: Reflection API",I:!1}}],["/tag/object-creation/",{loader:()=>a(()=>import("./index.html-DRM22gHJ.js"),__vite__mapDeps([2882,1])),meta:{t:"标签: Object Creation",I:!1}}],["/tag/double-to-string/",{loader:()=>a(()=>import("./index.html-BIaRVZpR.js"),__vite__mapDeps([2883,1])),meta:{t:"标签: Double to String",I:!1}}],["/tag/scientific-notation/",{loader:()=>a(()=>import("./index.html-BePSLWt5.js"),__vite__mapDeps([2609,1])),meta:{t:"标签: Scientific Notation",I:!1}}],["/tag/java-stream/",{loader:()=>a(()=>import("./index.html-xnbXbu_f.js"),__vite__mapDeps([2884,1])),meta:{t:"标签: Java Stream",I:!1}}],["/tag/regex-match/",{loader:()=>a(()=>import("./index.html-CAjJfdEt.js"),__vite__mapDeps([2885,1])),meta:{t:"标签: Regex Match",I:!1}}],["/tag/eof/",{loader:()=>a(()=>import("./index.html-Cls3nk7I.js"),__vite__mapDeps([2886,1])),meta:{t:"标签: EOF",I:!1}}],["/tag/fileinputstream/",{loader:()=>a(()=>import("./index.html-B6S1ZgHA.js"),__vite__mapDeps([2887,1])),meta:{t:"标签: FileInputStream",I:!1}}],["/tag/filechannel/",{loader:()=>a(()=>import("./index.html-DQH1Fq2P.js"),__vite__mapDeps([2888,1])),meta:{t:"标签: FileChannel",I:!1}}],["/tag/snyk/",{loader:()=>a(()=>import("./index.html-e00tChr3.js"),__vite__mapDeps([2889,1])),meta:{t:"标签: Snyk",I:!1}}],["/tag/hashtable/",{loader:()=>a(()=>import("./index.html-dUFJTDuN.js"),__vite__mapDeps([2890,1])),meta:{t:"标签: Hashtable",I:!1}}],["/tag/concurrenthashmap/",{loader:()=>a(()=>import("./index.html-ar5Qpx9i.js"),__vite__mapDeps([2891,1])),meta:{t:"标签: ConcurrentHashMap",I:!1}}],["/tag/permitall()/",{loader:()=>a(()=>import("./index.html-Ct8i_Jit.js"),__vite__mapDeps([2892,1])),meta:{t:"标签: permitAll()",I:!1}}],["/tag/anonymous()/",{loader:()=>a(()=>import("./index.html-ukKwf-m5.js"),__vite__mapDeps([2893,1])),meta:{t:"标签: anonymous()",I:!1}}],["/tag/%E5%A0%86%E8%BD%AC%E5%82%A8/",{loader:()=>a(()=>import("./index.html-CVYYiXxo.js"),__vite__mapDeps([2894,1])),meta:{t:"标签: 堆转储",I:!1}}],["/tag/%E7%BA%BF%E7%A8%8B%E8%BD%AC%E5%82%A8/",{loader:()=>a(()=>import("./index.html-m-7VXX6-.js"),__vite__mapDeps([2895,1])),meta:{t:"标签: 线程转储",I:!1}}],["/tag/%E6%A0%B8%E5%BF%83%E8%BD%AC%E5%82%A8/",{loader:()=>a(()=>import("./index.html-IGJ88TXZ.js"),__vite__mapDeps([2896,1])),meta:{t:"标签: 核心转储",I:!1}}],["/tag/spreadsheet/",{loader:()=>a(()=>import("./index.html-CnwWwr46.js"),__vite__mapDeps([2897,1])),meta:{t:"标签: Spreadsheet",I:!1}}],["/tag/x509/",{loader:()=>a(()=>import("./index.html-CrCZmA7f.js"),__vite__mapDeps([2898,1])),meta:{t:"标签: X509",I:!1}}],["/tag/certificate/",{loader:()=>a(()=>import("./index.html-QON0FkDK.js"),__vite__mapDeps([2899,1])),meta:{t:"标签: Certificate",I:!1}}],["/tag/common-name/",{loader:()=>a(()=>import("./index.html-C07nj7JT.js"),__vite__mapDeps([2900,1])),meta:{t:"标签: Common Name",I:!1}}],["/tag/middle-element/",{loader:()=>a(()=>import("./index.html-zDaelfb3.js"),__vite__mapDeps([2901,1])),meta:{t:"标签: Middle Element",I:!1}}],["/tag/yaml/",{loader:()=>a(()=>import("./index.html-BFKDA0du.js"),__vite__mapDeps([2902,1])),meta:{t:"标签: YAML",I:!1}}],["/tag/kotlinx-serialization/",{loader:()=>a(()=>import("./index.html-D0YlbqQ3.js"),__vite__mapDeps([2903,1])),meta:{t:"标签: kotlinx-serialization",I:!1}}],["/tag/kaml/",{loader:()=>a(()=>import("./index.html-LiZlAHZk.js"),__vite__mapDeps([2904,1])),meta:{t:"标签: kaml",I:!1}}],["/tag/yamlkt/",{loader:()=>a(()=>import("./index.html-D5h3yY6o.js"),__vite__mapDeps([2905,1])),meta:{t:"标签: YamlKt",I:!1}}],["/tag/apache-poi/",{loader:()=>a(()=>import("./index.html-UV4EtiDj.js"),__vite__mapDeps([2906,1])),meta:{t:"标签: Apache POI",I:!1}}],["/tag/poiji/",{loader:()=>a(()=>import("./index.html-DLp7mnij.js"),__vite__mapDeps([2907,1])),meta:{t:"标签: Poiji",I:!1}}],["/tag/fastexcel/",{loader:()=>a(()=>import("./index.html-I9N9Szdx.js"),__vite__mapDeps([2908,1])),meta:{t:"标签: FastExcel",I:!1}}],["/tag/jexcelapi/",{loader:()=>a(()=>import("./index.html-D6T4mNI2.js"),__vite__mapDeps([2909,1])),meta:{t:"标签: JExcelApi",I:!1}}],["/tag/index/",{loader:()=>a(()=>import("./index.html-BERV01FT.js"),__vite__mapDeps([2910,1])),meta:{t:"标签: Index",I:!1}}],["/tag/unit-testing/",{loader:()=>a(()=>import("./index.html-CnBqsjyv.js"),__vite__mapDeps([2911,1])),meta:{t:"标签: Unit Testing",I:!1}}],["/tag/mocking/",{loader:()=>a(()=>import("./index.html-Cz0L9LAp.js"),__vite__mapDeps([2912,1])),meta:{t:"标签: Mocking",I:!1}}],["/tag/%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8/",{loader:()=>a(()=>import("./index.html-C9uayhG-.js"),__vite__mapDeps([2913,1])),meta:{t:"标签: 代码编辑器",I:!1}}],["/tag/%E4%BB%A3%E7%A0%81%E8%A1%8C%E5%8F%B7/",{loader:()=>a(()=>import("./index.html-BLxRlMx5.js"),__vite__mapDeps([2914,1])),meta:{t:"标签: 代码行号",I:!1}}],["/tag/deprecated-methods/",{loader:()=>a(()=>import("./index.html-u4LZgO4l.js"),__vite__mapDeps([2915,1])),meta:{t:"标签: Deprecated Methods",I:!1}}],["/tag/digits/",{loader:()=>a(()=>import("./index.html-COsZsQ5z.js"),__vite__mapDeps([2916,1])),meta:{t:"标签: Digits",I:!1}}],["/tag/mapstruct/",{loader:()=>a(()=>import("./index.html-Ds-ARP_E.js"),__vite__mapDeps([2917,1])),meta:{t:"标签: MapStruct",I:!1}}],["/tag/%E6%9D%A1%E4%BB%B6%E6%98%A0%E5%B0%84/",{loader:()=>a(()=>import("./index.html-AgKINwes.js"),__vite__mapDeps([2918,1])),meta:{t:"标签: 条件映射",I:!1}}],["/tag/gradle-lint/",{loader:()=>a(()=>import("./index.html-Bok3fZVU.js"),__vite__mapDeps([2919,1])),meta:{t:"标签: Gradle Lint",I:!1}}],["/tag/%E6%8F%92%E4%BB%B6/",{loader:()=>a(()=>import("./index.html-DFPu2Hkd.js"),__vite__mapDeps([2920,1])),meta:{t:"标签: 插件",I:!1}}],["/tag/cacheable/",{loader:()=>a(()=>import("./index.html-Dc3auNtY.js"),__vite__mapDeps([2921,1])),meta:{t:"标签: Cacheable",I:!1}}],["/tag/streaming/",{loader:()=>a(()=>import("./index.html-C_UYjpBO.js"),__vite__mapDeps([2922,1])),meta:{t:"标签: Streaming",I:!1}}],["/tag/log4j2/",{loader:()=>a(()=>import("./index.html-CMlRkC4M.js"),__vite__mapDeps([2923,1])),meta:{t:"标签: Log4j2",I:!1}}],["/tag/%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE/",{loader:()=>a(()=>import("./index.html-DCLnYmeQ.js"),__vite__mapDeps([2924,1])),meta:{t:"标签: 日志配置",I:!1}}],["/tag/jacoco/",{loader:()=>a(()=>import("./index.html-jQgLNQzb.js"),__vite__mapDeps([2925,1])),meta:{t:"标签: Jacoco",I:!1}}],["/tag/%E5%A4%9A%E6%A8%A1%E5%9D%97/",{loader:()=>a(()=>import("./index.html-BqhT0OzB.js"),__vite__mapDeps([2926,1])),meta:{t:"标签: 多模块",I:!1}}],["/tag/maven%E6%8F%92%E4%BB%B6/",{loader:()=>a(()=>import("./index.html-CtyWEAoM.js"),__vite__mapDeps([2927,1])),meta:{t:"标签: Maven插件",I:!1}}],["/tag/%E6%A8%A1%E6%8B%9F/",{loader:()=>a(()=>import("./index.html-BCMmZrgg.js"),__vite__mapDeps([2928,1])),meta:{t:"标签: 模拟",I:!1}}],["/tag/spring-data-cassandra/",{loader:()=>a(()=>import("./index.html-Brqm0pKD.js"),__vite__mapDeps([2929,1])),meta:{t:"标签: Spring Data Cassandra",I:!1}}],["/tag/in-clause/",{loader:()=>a(()=>import("./index.html-CAb5jscy.js"),__vite__mapDeps([2930,1])),meta:{t:"标签: IN Clause",I:!1}}],["/tag/replace/",{loader:()=>a(()=>import("./index.html-BBzGzLVu.js"),__vite__mapDeps([2931,1])),meta:{t:"标签: replace",I:!1}}],["/tag/escape/",{loader:()=>a(()=>import("./index.html-BfQLqdX9.js"),__vite__mapDeps([2932,1])),meta:{t:"标签: escape",I:!1}}],["/tag/vault/",{loader:()=>a(()=>import("./index.html-BMXUXm6a.js"),__vite__mapDeps([2933,1])),meta:{t:"标签: Vault",I:!1}}],["/tag/kubernetes-secrets/",{loader:()=>a(()=>import("./index.html-Drr7Yxsy.js"),__vite__mapDeps([2934,1])),meta:{t:"标签: Kubernetes Secrets",I:!1}}],["/tag/ssl/",{loader:()=>a(()=>import("./index.html-LCRRIsiN.js"),__vite__mapDeps([2935,1])),meta:{t:"标签: SSL",I:!1}}],["/tag/%E5%BA%8F%E5%88%97%E5%8C%96%E9%9B%86%E5%90%88/",{loader:()=>a(()=>import("./index.html-Dc77ksck.js"),__vite__mapDeps([2936,1])),meta:{t:"标签: 序列化集合",I:!1}}],["/tag/%E5%8F%AF%E8%AF%BB%E6%80%A7/",{loader:()=>a(()=>import("./index.html-DIF7UlLx.js"),__vite__mapDeps([2937,1])),meta:{t:"标签: 可读性",I:!1}}],["/tag/value-based-classes/",{loader:()=>a(()=>import("./index.html-Cyoi_1d6.js"),__vite__mapDeps([2938,1])),meta:{t:"标签: Value-Based Classes",I:!1}}],["/tag/project-valhalla/",{loader:()=>a(()=>import("./index.html-CyGMhWKF.js"),__vite__mapDeps([2939,1])),meta:{t:"标签: Project Valhalla",I:!1}}],["/tag/tlab/",{loader:()=>a(()=>import("./index.html-D-DCLOUH.js"),__vite__mapDeps([2940,1])),meta:{t:"标签: TLAB",I:!1}}],["/tag/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/",{loader:()=>a(()=>import("./index.html-wIwzWWHh.js"),__vite__mapDeps([2941,1])),meta:{t:"标签: 内存分配",I:!1}}],["/tag/system.out/",{loader:()=>a(()=>import("./index.html-YVPLGtFL.js"),__vite__mapDeps([2942,1])),meta:{t:"标签: System.out",I:!1}}],["/tag/flush/",{loader:()=>a(()=>import("./index.html-B3lvcFwK.js"),__vite__mapDeps([2943,1])),meta:{t:"标签: flush",I:!1}}],["/tag/amazon-sns/",{loader:()=>a(()=>import("./index.html-DKqXAQLz.js"),__vite__mapDeps([2944,1])),meta:{t:"标签: Amazon SNS",I:!1}}],["/tag/amazon-sqs/",{loader:()=>a(()=>import("./index.html-Duw1WvYY.js"),__vite__mapDeps([2945,1])),meta:{t:"标签: Amazon SQS",I:!1}}],["/tag/bfs/",{loader:()=>a(()=>import("./index.html-DgrlJtxW.js"),__vite__mapDeps([2946,1])),meta:{t:"标签: BFS",I:!1}}],["/tag/%E9%9B%86%E6%88%90%E6%B5%8B%E8%AF%95/",{loader:()=>a(()=>import("./index.html-jOH5Iq5i.js"),__vite__mapDeps([2947,1])),meta:{t:"标签: 集成测试",I:!1}}],["/tag/%E5%9C%B0%E7%90%86%E5%9D%90%E6%A0%87/",{loader:()=>a(()=>import("./index.html-C2IFjbLn.js"),__vite__mapDeps([2948,1])),meta:{t:"标签: 地理坐标",I:!1}}],["/tag/%E8%B7%9D%E7%A6%BB%E8%AE%A1%E7%AE%97/",{loader:()=>a(()=>import("./index.html-DcuPtpZK.js"),__vite__mapDeps([2949,1])),meta:{t:"标签: 距离计算",I:!1}}],["/tag/sum/",{loader:()=>a(()=>import("./index.html-C6UipZlx.js"),__vite__mapDeps([2950,1])),meta:{t:"标签: Sum",I:!1}}],["/tag/clamp-function/",{loader:()=>a(()=>import("./index.html-B5DDJfuZ.js"),__vite__mapDeps([2951,1])),meta:{t:"标签: clamp function",I:!1}}],["/tag/math-class/",{loader:()=>a(()=>import("./index.html-BuMI0f2I.js"),__vite__mapDeps([2952,1])),meta:{t:"标签: Math class",I:!1}}],["/tag/time-conversion/",{loader:()=>a(()=>import("./index.html-CAjCCWrA.js"),__vite__mapDeps([2953,1])),meta:{t:"标签: Time Conversion",I:!1}}],["/tag/epoch/",{loader:()=>a(()=>import("./index.html-DofGJGSc.js"),__vite__mapDeps([2954,1])),meta:{t:"标签: Epoch",I:!1}}],["/tag/epoch-time/",{loader:()=>a(()=>import("./index.html-Daasd0QB.js"),__vite__mapDeps([2955,1])),meta:{t:"标签: Epoch Time",I:!1}}],["/tag/localdatetime/",{loader:()=>a(()=>import("./index.html-Dm1okwQE.js"),__vite__mapDeps([2956,1])),meta:{t:"标签: LocalDateTime",I:!1}}],["/tag/list-to-array/",{loader:()=>a(()=>import("./index.html-yCfHUgha.js"),__vite__mapDeps([2957,1])),meta:{t:"标签: List to Array",I:!1}}],["/tag/string-array/",{loader:()=>a(()=>import("./index.html-BMvTrdGJ.js"),__vite__mapDeps([2958,1])),meta:{t:"标签: String Array",I:!1}}],["/tag/int-to-long/",{loader:()=>a(()=>import("./index.html-CoQyBVdd.js"),__vite__mapDeps([2959,1])),meta:{t:"标签: int to Long",I:!1}}],["/tag/data-type-conversion/",{loader:()=>a(()=>import("./index.html-DoQ7_DXF.js"),__vite__mapDeps([2960,1])),meta:{t:"标签: data type conversion",I:!1}}],["/tag/magic-square/",{loader:()=>a(()=>import("./index.html-B_wVw6EJ.js"),__vite__mapDeps([2961,1])),meta:{t:"标签: Magic Square",I:!1}}],["/tag/telegram/",{loader:()=>a(()=>import("./index.html-B765GEuG.js"),__vite__mapDeps([2962,1])),meta:{t:"标签: Telegram",I:!1}}],["/tag/mybatis/",{loader:()=>a(()=>import("./index.html-DSBhQhjg.js"),__vite__mapDeps([2963,1])),meta:{t:"标签: MyBatis",I:!1}}],["/tag/spring-jdbc/",{loader:()=>a(()=>import("./index.html-BHOMCupf.js"),__vite__mapDeps([2964,1])),meta:{t:"标签: Spring JDBC",I:!1}}],["/tag/if-statement/",{loader:()=>a(()=>import("./index.html-EzXaoq_V.js"),__vite__mapDeps([2965,1])),meta:{t:"标签: if statement",I:!1}}],["/tag/switch-statement/",{loader:()=>a(()=>import("./index.html-CB08G-SM.js"),__vite__mapDeps([2966,1])),meta:{t:"标签: switch statement",I:!1}}],["/tag/functional-programming/",{loader:()=>a(()=>import("./index.html-pgn-PMTW.js"),__vite__mapDeps([2967,1])),meta:{t:"标签: functional programming",I:!1}}],["/tag/lombok/",{loader:()=>a(()=>import("./index.html-CcNZzqk9.js"),__vite__mapDeps([2968,1])),meta:{t:"标签: Lombok",I:!1}}],["/tag/openapi/",{loader:()=>a(()=>import("./index.html-aosG79Rk.js"),__vite__mapDeps([2969,1])),meta:{t:"标签: OpenAPI",I:!1}}],["/tag/%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E6%A8%A1%E5%9E%8B/",{loader:()=>a(()=>import("./index.html-DX_08HOO.js"),__vite__mapDeps([2970,1])),meta:{t:"标签: 自动生成模型",I:!1}}],["/tag/%E9%9A%8F%E6%9C%BA%E5%85%83%E7%B4%A0/",{loader:()=>a(()=>import("./index.html-C8xvb4h1.js"),__vite__mapDeps([2971,1])),meta:{t:"标签: 随机元素",I:!1}}],["/tag/java.util.random/",{loader:()=>a(()=>import("./index.html-DmJoxckQ.js"),__vite__mapDeps([2972,1])),meta:{t:"标签: Java.util.Random",I:!1}}],["/tag/threadlocalrandom/",{loader:()=>a(()=>import("./index.html-Crva0FEk.js"),__vite__mapDeps([2973,1])),meta:{t:"标签: ThreadLocalRandom",I:!1}}],["/tag/regex/",{loader:()=>a(()=>import("./index.html-DOivz3ly.js"),__vite__mapDeps([2311,1])),meta:{t:"标签: Regex",I:!1}}],["/tag/pattern/",{loader:()=>a(()=>import("./index.html-BPDeuTDi.js"),__vite__mapDeps([2974,1])),meta:{t:"标签: Pattern",I:!1}}],["/tag/matcher/",{loader:()=>a(()=>import("./index.html-D7qM_ywM.js"),__vite__mapDeps([2975,1])),meta:{t:"标签: Matcher",I:!1}}],["/tag/multiple-values/",{loader:()=>a(()=>import("./index.html-CGBincH-.js"),__vite__mapDeps([2976,1])),meta:{t:"标签: Multiple Values",I:!1}}],["/tag/%E6%96%87%E4%BB%B6%E9%87%8D%E5%91%BD%E5%90%8D/",{loader:()=>a(()=>import("./index.html-D9b7u0jK.js"),__vite__mapDeps([2977,1])),meta:{t:"标签: 文件重命名",I:!1}}],["/tag/jackson/",{loader:()=>a(()=>import("./index.html-C4Zj4jhZ.js"),__vite__mapDeps([2978,1])),meta:{t:"标签: Jackson",I:!1}}],["/tag/maven/",{loader:()=>a(()=>import("./index.html-CMeI1EaQ.js"),__vite__mapDeps([2401,1])),meta:{t:"标签: maven",I:!1}}],["/tag/error/",{loader:()=>a(()=>import("./index.html-v9f_FPm_.js"),__vite__mapDeps([2979,1])),meta:{t:"标签: error",I:!1}}],["/tag/zip-file/",{loader:()=>a(()=>import("./index.html-Cna2Py_m.js"),__vite__mapDeps([2980,1])),meta:{t:"标签: zip file",I:!1}}],["/tag/maven-build/",{loader:()=>a(()=>import("./index.html-DfYMQLLc.js"),__vite__mapDeps([2981,1])),meta:{t:"标签: Maven Build",I:!1}}],["/tag/inner-classes/",{loader:()=>a(()=>import("./index.html-D3qOhBIz.js"),__vite__mapDeps([2982,1])),meta:{t:"标签: Inner Classes",I:!1}}],["/tag/subclasses/",{loader:()=>a(()=>import("./index.html-CnwcILVw.js"),__vite__mapDeps([2983,1])),meta:{t:"标签: Subclasses",I:!1}}],["/tag/%E9%94%81%E5%AE%9A/",{loader:()=>a(()=>import("./index.html-G0CIyggV.js"),__vite__mapDeps([2984,1])),meta:{t:"标签: 锁定",I:!1}}],["/tag/%E8%A1%A8%E5%A4%B4/",{loader:()=>a(()=>import("./index.html-BN0BhE2t.js"),__vite__mapDeps([2985,1])),meta:{t:"标签: 表头",I:!1}}],["/tag/json-schema/",{loader:()=>a(()=>import("./index.html-BNS9RYrG.js"),__vite__mapDeps([2986,1])),meta:{t:"标签: JSON Schema",I:!1}}],["/tag/%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90/",{loader:()=>a(()=>import("./index.html-D8tAZmAU.js"),__vite__mapDeps([2987,1])),meta:{t:"标签: 自动生成",I:!1}}],["/tag/maps/",{loader:()=>a(()=>import("./index.html-CMzpuAO0.js"),__vite__mapDeps([2988,1])),meta:{t:"标签: Maps",I:!1}}],["/tag/java-web/",{loader:()=>a(()=>import("./index.html-DOoomGaF.js"),__vite__mapDeps([2989,1])),meta:{t:"标签: Java Web",I:!1}}],["/tag/execution-control/",{loader:()=>a(()=>import("./index.html-BTi6kNsV.js"),__vite__mapDeps([2990,1])),meta:{t:"标签: Execution Control",I:!1}}],["/tag/composite-pattern/",{loader:()=>a(()=>import("./index.html-BZAVsPNn.js"),__vite__mapDeps([2991,1])),meta:{t:"标签: Composite Pattern",I:!1}}],["/tag/amazon-s3/",{loader:()=>a(()=>import("./index.html-DNklrRhR.js"),__vite__mapDeps([2992,1])),meta:{t:"标签: Amazon S3",I:!1}}],["/tag/java-sdk/",{loader:()=>a(()=>import("./index.html-D_PEs0Oc.js"),__vite__mapDeps([2993,1])),meta:{t:"标签: Java SDK",I:!1}}],["/tag/sorted-list/",{loader:()=>a(()=>import("./index.html-CYNALuNu.js"),__vite__mapDeps([2994,1])),meta:{t:"标签: Sorted List",I:!1}}],["/tag/list-interface/",{loader:()=>a(()=>import("./index.html-D8khCRrt.js"),__vite__mapDeps([2995,1])),meta:{t:"标签: List Interface",I:!1}}],["/tag/bootstrap.servers/",{loader:()=>a(()=>import("./index.html-xAfXd-9n.js"),__vite__mapDeps([2996,1])),meta:{t:"标签: bootstrap.servers",I:!1}}],["/tag/kafka-configuration/",{loader:()=>a(()=>import("./index.html-B5rcITW1.js"),__vite__mapDeps([2997,1])),meta:{t:"标签: Kafka configuration",I:!1}}],["/tag/polymorphic-deserialization/",{loader:()=>a(()=>import("./index.html-CgcQ7AfJ.js"),__vite__mapDeps([2998,1])),meta:{t:"标签: Polymorphic Deserialization",I:!1}}],["/tag/jsonsubtypes/",{loader:()=>a(()=>import("./index.html-DMzyc2LX.js"),__vite__mapDeps([2999,1])),meta:{t:"标签: JsonSubTypes",I:!1}}],["/tag/reflections/",{loader:()=>a(()=>import("./index.html-Ba9CfxTQ.js"),__vite__mapDeps([3000,1])),meta:{t:"标签: Reflections",I:!1}}],["/tag/shardingsphere/",{loader:()=>a(()=>import("./index.html-Bb2t-dGX.js"),__vite__mapDeps([3001,1])),meta:{t:"标签: ShardingSphere",I:!1}}],["/tag/database-sharding/",{loader:()=>a(()=>import("./index.html-DSqylvyw.js"),__vite__mapDeps([3002,1])),meta:{t:"标签: Database Sharding",I:!1}}],["/tag/unique-characters/",{loader:()=>a(()=>import("./index.html-BtoDSzub.js"),__vite__mapDeps([3003,1])),meta:{t:"标签: Unique Characters",I:!1}}],["/tag/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/",{loader:()=>a(()=>import("./index.html-DRCa1T9M.js"),__vite__mapDeps([3004,1])),meta:{t:"标签: 并发编程",I:!1}}],["/tag/%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84/",{loader:()=>a(()=>import("./index.html-CdYN5P7p.js"),__vite__mapDeps([3005,1])),meta:{t:"标签: 文件路径",I:!1}}],["/tag/%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84/",{loader:()=>a(()=>import("./index.html-DdCHSfKS.js"),__vite__mapDeps([3006,1])),meta:{t:"标签: 绝对路径",I:!1}}],["/tag/unsatisfiedlinkerror/",{loader:()=>a(()=>import("./index.html-BsR3V_JN.js"),__vite__mapDeps([3007,1])),meta:{t:"标签: UnsatisfiedLinkError",I:!1}}],["/tag/java-native-libraries/",{loader:()=>a(()=>import("./index.html-Cs8HDnrt.js"),__vite__mapDeps([3008,1])),meta:{t:"标签: Java Native Libraries",I:!1}}],["/tag/observable/",{loader:()=>a(()=>import("./index.html-DWilPb7w.js"),__vite__mapDeps([3009,1])),meta:{t:"标签: Observable",I:!1}}],["/tag/map.clear()/",{loader:()=>a(()=>import("./index.html-Or-X4WtK.js"),__vite__mapDeps([3010,1])),meta:{t:"标签: Map.clear()",I:!1}}],["/tag/%E6%96%B0%E5%AE%9E%E4%BE%8B/",{loader:()=>a(()=>import("./index.html-CG61mOHr.js"),__vite__mapDeps([3011,1])),meta:{t:"标签: 新实例",I:!1}}],["/tag/spring-boot-3/",{loader:()=>a(()=>import("./index.html-TzEw5YpW.js"),__vite__mapDeps([3012,1])),meta:{t:"标签: Spring Boot 3",I:!1}}],["/tag/docker-compose-%E6%94%AF%E6%8C%81/",{loader:()=>a(()=>import("./index.html-BmTxTme5.js"),__vite__mapDeps([3013,1])),meta:{t:"标签: Docker Compose 支持",I:!1}}],["/tag/html/",{loader:()=>a(()=>import("./index.html-CNJ8GBK6.js"),__vite__mapDeps([3014,1])),meta:{t:"标签: HTML",I:!1}}],["/tag/xss/",{loader:()=>a(()=>import("./index.html-wkZHZafb.js"),__vite__mapDeps([3015,1])),meta:{t:"标签: XSS",I:!1}}],["/tag/jacoco/",{loader:()=>a(()=>import("./index.html-jQgLNQzb.js"),__vite__mapDeps([2925,1])),meta:{t:"标签: JaCoCo",I:!1}}],["/tag/kubernetes/",{loader:()=>a(()=>import("./index.html-btpMXSMq.js"),__vite__mapDeps([3016,1])),meta:{t:"标签: Kubernetes",I:!1}}],["/tag/%E6%97%A5%E5%BF%97%E6%B5%81/",{loader:()=>a(()=>import("./index.html-C9--f9Y8.js"),__vite__mapDeps([3017,1])),meta:{t:"标签: 日志流",I:!1}}],["/tag/%E7%9B%91%E6%8E%A7/",{loader:()=>a(()=>import("./index.html-CUkI364I.js"),__vite__mapDeps([3018,1])),meta:{t:"标签: 监控",I:!1}}],["/tag/apache-pulsar/",{loader:()=>a(()=>import("./index.html-NuSwNkTg.js"),__vite__mapDeps([3019,1])),meta:{t:"标签: Apache Pulsar",I:!1}}],["/tag/%E5%BA%93/",{loader:()=>a(()=>import("./index.html-D0-DVkaC.js"),__vite__mapDeps([3020,1])),meta:{t:"标签: 库",I:!1}}],["/tag/%E8%BD%BB%E9%87%8F%E7%BA%A7/",{loader:()=>a(()=>import("./index.html-B6I145Sn.js"),__vite__mapDeps([3021,1])),meta:{t:"标签: 轻量级",I:!1}}],["/tag/yield/",{loader:()=>a(()=>import("./index.html-BXU8P70e.js"),__vite__mapDeps([3022,1])),meta:{t:"标签: yield",I:!1}}],["/tag/switch/",{loader:()=>a(()=>import("./index.html-Cg7i2ljf.js"),__vite__mapDeps([3023,1])),meta:{t:"标签: switch",I:!1}}],["/tag/java-14/",{loader:()=>a(()=>import("./index.html-CVFTHeDV.js"),__vite__mapDeps([3024,1])),meta:{t:"标签: Java 14",I:!1}}],["/tag/linkedhashset/",{loader:()=>a(()=>import("./index.html-gJrqnL3R.js"),__vite__mapDeps([3025,1])),meta:{t:"标签: LinkedHashSet",I:!1}}],["/tag/executors/",{loader:()=>a(()=>import("./index.html-cMthZk2d.js"),__vite__mapDeps([3026,1])),meta:{t:"标签: Executors",I:!1}}],["/tag/task-notification/",{loader:()=>a(()=>import("./index.html-DY50ovuC.js"),__vite__mapDeps([3027,1])),meta:{t:"标签: Task Notification",I:!1}}],["/tag/calendar/",{loader:()=>a(()=>import("./index.html-DgCeX4rB.js"),__vite__mapDeps([3028,1])),meta:{t:"标签: Calendar",I:!1}}],["/tag/spring-data-jdbc/",{loader:()=>a(()=>import("./index.html-C_miNNUM.js"),__vite__mapDeps([3029,1])),meta:{t:"标签: Spring Data JDBC",I:!1}}],["/tag/law-of-demeter/",{loader:()=>a(()=>import("./index.html-B11ORoCt.js"),__vite__mapDeps([3030,1])),meta:{t:"标签: Law of Demeter",I:!1}}],["/tag/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1/",{loader:()=>a(()=>import("./index.html-xLWiDCT_.js"),__vite__mapDeps([3031,1])),meta:{t:"标签: 面向对象设计",I:!1}}],["/tag/mockk/",{loader:()=>a(()=>import("./index.html-BNseEMO6.js"),__vite__mapDeps([3032,1])),meta:{t:"标签: MockK",I:!1}}],["/tag/varargs/",{loader:()=>a(()=>import("./index.html-Dy6-CNAE.js"),__vite__mapDeps([3033,1])),meta:{t:"标签: varargs",I:!1}}],["/tag/metaspace/",{loader:()=>a(()=>import("./index.html-irdcsGF-.js"),__vite__mapDeps([3034,1])),meta:{t:"标签: Metaspace",I:!1}}],["/tag/garbage-collection/",{loader:()=>a(()=>import("./index.html-DZdanQUy.js"),__vite__mapDeps([3035,1])),meta:{t:"标签: Garbage Collection",I:!1}}],["/tag/spring-data-reactive/",{loader:()=>a(()=>import("./index.html-DOurWnji.js"),__vite__mapDeps([3036,1])),meta:{t:"标签: Spring Data Reactive",I:!1}}],["/tag/slf4j/",{loader:()=>a(()=>import("./index.html-LFfGyB_7.js"),__vite__mapDeps([3037,1])),meta:{t:"标签: SLF4J",I:!1}}],["/tag/parameterized-logging/",{loader:()=>a(()=>import("./index.html-CjcaGelp.js"),__vite__mapDeps([3038,1])),meta:{t:"标签: Parameterized Logging",I:!1}}],["/tag/logback/",{loader:()=>a(()=>import("./index.html-DKoRsbzN.js"),__vite__mapDeps([3039,1])),meta:{t:"标签: Logback",I:!1}}],["/tag/%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BF%9E%E6%8E%A5/",{loader:()=>a(()=>import("./index.html-BxaiuC1T.js"),__vite__mapDeps([3040,1])),meta:{t:"标签: 字符串连接",I:!1}}],["/tag/jqwik/",{loader:()=>a(()=>import("./index.html-B7EBVRYz.js"),__vite__mapDeps([3041,1])),meta:{t:"标签: jqwik",I:!1}}],["/tag/property-based-testing/",{loader:()=>a(()=>import("./index.html-tPl8wTFL.js"),__vite__mapDeps([3042,1])),meta:{t:"标签: Property-Based Testing",I:!1}}],["/tag/spring-integration/",{loader:()=>a(()=>import("./index.html-B_o8MRMk.js"),__vite__mapDeps([3043,1])),meta:{t:"标签: Spring Integration",I:!1}}],["/tag/notifylisten/",{loader:()=>a(()=>import("./index.html-zECIr0Yb.js"),__vite__mapDeps([3044,1])),meta:{t:"标签: NOTIFY/LISTEN",I:!1}}],["/tag/%E5%8E%BB%E9%87%8D/",{loader:()=>a(()=>import("./index.html-BGS_g5FC.js"),__vite__mapDeps([3045,1])),meta:{t:"标签: 去重",I:!1}}],["/tag/json-minify/",{loader:()=>a(()=>import("./index.html-DXheDoxZ.js"),__vite__mapDeps([3046,1])),meta:{t:"标签: JSON Minify",I:!1}}],["/tag/whitespace-removal/",{loader:()=>a(()=>import("./index.html-2lKdX_ZT.js"),__vite__mapDeps([3047,1])),meta:{t:"标签: Whitespace Removal",I:!1}}],["/tag/scroll-api/",{loader:()=>a(()=>import("./index.html-CDnsNubJ.js"),__vite__mapDeps([3048,1])),meta:{t:"标签: Scroll API",I:!1}}],["/tag/stateless-object/",{loader:()=>a(()=>import("./index.html-DvGQVnx5.js"),__vite__mapDeps([3049,1])),meta:{t:"标签: Stateless Object",I:!1}}],["/tag/%E4%B8%BB%E9%A2%98/",{loader:()=>a(()=>import("./index.html-DR-c7t1T.js"),__vite__mapDeps([3050,1])),meta:{t:"标签: 主题",I:!1}}],["/tag/socketexception/",{loader:()=>a(()=>import("./index.html-C-2jXpZ7.js"),__vite__mapDeps([3051,1])),meta:{t:"标签: SocketException",I:!1}}],["/tag/broken-pipe/",{loader:()=>a(()=>import("./index.html-BaTmC5rz.js"),__vite__mapDeps([3052,1])),meta:{t:"标签: Broken Pipe",I:!1}}],["/tag/system.in/",{loader:()=>a(()=>import("./index.html-AyCua0X4.js"),__vite__mapDeps([3053,1])),meta:{t:"标签: System.in",I:!1}}],["/tag/holder/",{loader:()=>a(()=>import("./index.html-Dml3golN.js"),__vite__mapDeps([3054,1])),meta:{t:"标签: Holder",I:!1}}],["/tag/pass-by-value/",{loader:()=>a(()=>import("./index.html-69ZYN9wU.js"),__vite__mapDeps([3055,1])),meta:{t:"标签: Pass-by-Value",I:!1}}],["/tag/iterator/",{loader:()=>a(()=>import("./index.html-BCIpkirq.js"),__vite__mapDeps([2545,1])),meta:{t:"标签: Iterator",I:!1}}],["/tag/http-session/",{loader:()=>a(()=>import("./index.html-BYVs0_uT.js"),__vite__mapDeps([3056,1])),meta:{t:"标签: HTTP Session",I:!1}}],["/tag/apache-commons-lang3/",{loader:()=>a(()=>import("./index.html-B0hbvSye.js"),__vite__mapDeps([3057,1])),meta:{t:"标签: Apache Commons Lang3",I:!1}}],["/tag/%E6%96%87%E4%BB%B6%E6%A3%80%E6%9F%A5/",{loader:()=>a(()=>import("./index.html-CS7YhXxx.js"),__vite__mapDeps([3058,1])),meta:{t:"标签: 文件检查",I:!1}}],["/tag/%E6%96%87%E4%BB%B6%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA/",{loader:()=>a(()=>import("./index.html-DWNLpte1.js"),__vite__mapDeps([3059,1])),meta:{t:"标签: 文件是否为空",I:!1}}],["/tag/non-alphanumeric/",{loader:()=>a(()=>import("./index.html-CbaJPtrV.js"),__vite__mapDeps([3060,1])),meta:{t:"标签: Non-Alphanumeric",I:!1}}],["/tag/special-characters/",{loader:()=>a(()=>import("./index.html-CkbDD5z-.js"),__vite__mapDeps([3061,1])),meta:{t:"标签: Special Characters",I:!1}}],["/tag/%E7%BA%BF%E7%A8%8B%E6%B1%A0/",{loader:()=>a(()=>import("./index.html-Cnvwg6n9.js"),__vite__mapDeps([3062,1])),meta:{t:"标签: 线程池",I:!1}}],["/tag/enum%E8%BD%AC%E6%8D%A2/",{loader:()=>a(()=>import("./index.html-C0VkRISD.js"),__vite__mapDeps([3063,1])),meta:{t:"标签: Enum转换",I:!1}}],["/tag/row-count/",{loader:()=>a(()=>import("./index.html-vgMQZbbk.js"),__vite__mapDeps([3064,1])),meta:{t:"标签: row count",I:!1}}],["/tag/jpa-repository/",{loader:()=>a(()=>import("./index.html-BoW1onKN.js"),__vite__mapDeps([3065,1])),meta:{t:"标签: JPA Repository",I:!1}}],["/tag/criteriaquery/",{loader:()=>a(()=>import("./index.html-DbM-G3q4.js"),__vite__mapDeps([3066,1])),meta:{t:"标签: CriteriaQuery",I:!1}}],["/tag/jpql/",{loader:()=>a(()=>import("./index.html-CEPfvJXq.js"),__vite__mapDeps([3067,1])),meta:{t:"标签: JPQL",I:!1}}],["/tag/%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91/",{loader:()=>a(()=>import("./index.html-CDu0XFOp.js"),__vite__mapDeps([3068,1])),meta:{t:"标签: 代码编辑",I:!1}}],["/tag/%E5%AF%BC%E5%85%A5%E4%BC%98%E5%8C%96/",{loader:()=>a(()=>import("./index.html-YZCwkhSw.js"),__vite__mapDeps([3069,1])),meta:{t:"标签: 导入优化",I:!1}}],["/tag/springwolf/",{loader:()=>a(()=>import("./index.html-BkdNvs1T.js"),__vite__mapDeps([3070,1])),meta:{t:"标签: Springwolf",I:!1}}],["/tag/documentation/",{loader:()=>a(()=>import("./index.html-CB-bYpcH.js"),__vite__mapDeps([3071,1])),meta:{t:"标签: Documentation",I:!1}}],["/tag/big-endian/",{loader:()=>a(()=>import("./index.html-CeKvqcc7.js"),__vite__mapDeps([3072,1])),meta:{t:"标签: Big Endian",I:!1}}],["/tag/little-endian/",{loader:()=>a(()=>import("./index.html-Co1JctQq.js"),__vite__mapDeps([3073,1])),meta:{t:"标签: Little Endian",I:!1}}],["/tag/tar/",{loader:()=>a(()=>import("./index.html-_mGhZqVv.js"),__vite__mapDeps([3074,1])),meta:{t:"标签: tar",I:!1}}],["/tag/gzip/",{loader:()=>a(()=>import("./index.html-ygLK056h.js"),__vite__mapDeps([3075,1])),meta:{t:"标签: gzip",I:!1}}],["/tag/apache-ant/",{loader:()=>a(()=>import("./index.html-6XazyMvx.js"),__vite__mapDeps([3076,1])),meta:{t:"标签: Apache Ant",I:!1}}],["/tag/apache-commons-vfs/",{loader:()=>a(()=>import("./index.html-CKpLdAAA.js"),__vite__mapDeps([3077,1])),meta:{t:"标签: Apache Commons VFS",I:!1}}],["/tag/partitions/",{loader:()=>a(()=>import("./index.html-Ycl5Db4y.js"),__vite__mapDeps([3078,1])),meta:{t:"标签: Partitions",I:!1}}],["/tag/time/",{loader:()=>a(()=>import("./index.html-Da4nJ6ZE.js"),__vite__mapDeps([3079,1])),meta:{t:"标签: Time",I:!1}}],["/tag/toolchains/",{loader:()=>a(()=>import("./index.html-DGoqbFg-.js"),__vite__mapDeps([3080,1])),meta:{t:"标签: Toolchains",I:!1}}],["/tag/application.properties/",{loader:()=>a(()=>import("./index.html-C5D0cVLt.js"),__vite__mapDeps([3081,1])),meta:{t:"标签: application.properties",I:!1}}],["/tag/application.yml/",{loader:()=>a(()=>import("./index.html-V-L51T_O.js"),__vite__mapDeps([3082,1])),meta:{t:"标签: application.yml",I:!1}}],["/tag/%E6%B7%B1%E6%8B%B7%E8%B4%9D/",{loader:()=>a(()=>import("./index.html-CqB_Zv1F.js"),__vite__mapDeps([3083,1])),meta:{t:"标签: 深拷贝",I:!1}}],["/tag/%E6%97%A5%E6%9C%9F%E5%A4%84%E7%90%86/",{loader:()=>a(()=>import("./index.html-DiYPmjDI.js"),__vite__mapDeps([3084,1])),meta:{t:"标签: 日期处理",I:!1}}],["/tag/joda-time/",{loader:()=>a(()=>import("./index.html-BaEviHTR.js"),__vite__mapDeps([2433,1])),meta:{t:"标签: Joda Time",I:!1}}],["/tag/zipentry/",{loader:()=>a(()=>import("./index.html-Bk8U5S7X.js"),__vite__mapDeps([3085,1])),meta:{t:"标签: ZipEntry",I:!1}}],["/tag/csrf/",{loader:()=>a(()=>import("./index.html-BekXGiu2.js"),__vite__mapDeps([3086,1])),meta:{t:"标签: CSRF",I:!1}}],["/tag/wrapper-class/",{loader:()=>a(()=>import("./index.html-uFUnpiNx.js"),__vite__mapDeps([3087,1])),meta:{t:"标签: Wrapper Class",I:!1}}],["/tag/primitive-type/",{loader:()=>a(()=>import("./index.html-DXwEQjJF.js"),__vite__mapDeps([3088,1])),meta:{t:"标签: Primitive Type",I:!1}}],["/tag/jeromq/",{loader:()=>a(()=>import("./index.html-BZBMpJIL.js"),__vite__mapDeps([3089,1])),meta:{t:"标签: JeroMQ",I:!1}}],["/tag/zeromq/",{loader:()=>a(()=>import("./index.html-BDCog6Gk.js"),__vite__mapDeps([3090,1])),meta:{t:"标签: ZeroMQ",I:!1}}],["/tag/selenide/",{loader:()=>a(()=>import("./index.html-C6kOzb9S.js"),__vite__mapDeps([3091,1])),meta:{t:"标签: Selenide",I:!1}}],["/tag/selenium-webdriver/",{loader:()=>a(()=>import("./index.html-BXRPyK54.js"),__vite__mapDeps([3092,1])),meta:{t:"标签: Selenium WebDriver",I:!1}}],["/tag/ui%E6%B5%8B%E8%AF%95/",{loader:()=>a(()=>import("./index.html-Cp9ZeZ5B.js"),__vite__mapDeps([3093,1])),meta:{t:"标签: UI测试",I:!1}}],["/tag/jaxp/",{loader:()=>a(()=>import("./index.html-ZUVzXGgg.js"),__vite__mapDeps([3094,1])),meta:{t:"标签: JAXP",I:!1}}],["/tag/jaxb/",{loader:()=>a(()=>import("./index.html-_Tkqc2Yi.js"),__vite__mapDeps([3095,1])),meta:{t:"标签: JAXB",I:!1}}],["/tag/encryption/",{loader:()=>a(()=>import("./index.html-BjCJLA38.js"),__vite__mapDeps([3096,1])),meta:{t:"标签: Encryption",I:!1}}],["/tag/java-20/",{loader:()=>a(()=>import("./index.html-vFokApTz.js"),__vite__mapDeps([3097,1])),meta:{t:"标签: Java 20",I:!1}}],["/tag/%E6%96%B0%E7%89%B9%E6%80%A7/",{loader:()=>a(()=>import("./index.html-B0nC5Msr.js"),__vite__mapDeps([3098,1])),meta:{t:"标签: 新特性",I:!1}}],["/tag/for-loop/",{loader:()=>a(()=>import("./index.html-Ck0iMOzn.js"),__vite__mapDeps([3099,1])),meta:{t:"标签: for loop",I:!1}}],["/tag/parallelism/",{loader:()=>a(()=>import("./index.html-BxI1oLGm.js"),__vite__mapDeps([3100,1])),meta:{t:"标签: parallelism",I:!1}}],["/tag/function/",{loader:()=>a(()=>import("./index.html-BjR4xAj_.js"),__vite__mapDeps([3101,1])),meta:{t:"标签: Function",I:!1}}],["/tag/json%E6%A0%BC%E5%BC%8F%E5%8C%96/",{loader:()=>a(()=>import("./index.html-DGsBYlf8.js"),__vite__mapDeps([3102,1])),meta:{t:"标签: JSON格式化",I:!1}}],["/tag/this/",{loader:()=>a(()=>import("./index.html-9ODggA76.js"),__vite__mapDeps([3103,1])),meta:{t:"标签: this",I:!1}}],["/tag/yugabytedb/",{loader:()=>a(()=>import("./index.html-BMe55HZM.js"),__vite__mapDeps([3104,1])),meta:{t:"标签: YugabyteDB",I:!1}}],["/tag/sql/",{loader:()=>a(()=>import("./index.html-Cu9iKG1b.js"),__vite__mapDeps([3105,1])),meta:{t:"标签: SQL",I:!1}}],["/tag/distributed-sql/",{loader:()=>a(()=>import("./index.html-CBEq7fWa.js"),__vite__mapDeps([3106,1])),meta:{t:"标签: Distributed SQL",I:!1}}],["/tag/jsp/",{loader:()=>a(()=>import("./index.html-CP9JFR3g.js"),__vite__mapDeps([3107,1])),meta:{t:"标签: JSP",I:!1}}],["/tag/javascript/",{loader:()=>a(()=>import("./index.html-CVGNH2sa.js"),__vite__mapDeps([3108,1])),meta:{t:"标签: JavaScript",I:!1}}],["/tag/web%E5%BC%80%E5%8F%91/",{loader:()=>a(()=>import("./index.html-DgCrlnnO.js"),__vite__mapDeps([3109,1])),meta:{t:"标签: Web开发",I:!1}}],["/tag/scheduling/",{loader:()=>a(()=>import("./index.html-C02f0jGp.js"),__vite__mapDeps([3110,1])),meta:{t:"标签: Scheduling",I:!1}}],["/tag/coroutines/",{loader:()=>a(()=>import("./index.html-bT8ksnAI.js"),__vite__mapDeps([3111,1])),meta:{t:"标签: Coroutines",I:!1}}],["/tag/default-values/",{loader:()=>a(()=>import("./index.html-BlFj3SYk.js"),__vite__mapDeps([3112,1])),meta:{t:"标签: Default Values",I:!1}}],["/tag/http-patch/",{loader:()=>a(()=>import("./index.html-BqVkuggQ.js"),__vite__mapDeps([3113,1])),meta:{t:"标签: HTTP PATCH",I:!1}}],["/tag/smart-batching/",{loader:()=>a(()=>import("./index.html-pBgI9Xpv.js"),__vite__mapDeps([3114,1])),meta:{t:"标签: Smart Batching",I:!1}}],["/tag/micro-batching/",{loader:()=>a(()=>import("./index.html-ToxULdb5.js"),__vite__mapDeps([3115,1])),meta:{t:"标签: Micro Batching",I:!1}}],["/tag/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%86%E5%89%B2/",{loader:()=>a(()=>import("./index.html-OgDstoiT.js"),__vite__mapDeps([3116,1])),meta:{t:"标签: 字符串分割",I:!1}}],["/tag/build/",{loader:()=>a(()=>import("./index.html-B8PlWbzd.js"),__vite__mapDeps([3117,1])),meta:{t:"标签: Build",I:!1}}],["/tag/resume/",{loader:()=>a(()=>import("./index.html-CLa3EnBw.js"),__vite__mapDeps([3118,1])),meta:{t:"标签: Resume",I:!1}}],["/tag/vector-api/",{loader:()=>a(()=>import("./index.html-BD4Bt6fN.js"),__vite__mapDeps([3119,1])),meta:{t:"标签: Vector API",I:!1}}],["/tag/java-19/",{loader:()=>a(()=>import("./index.html-SK52rnrB.js"),__vite__mapDeps([3120,1])),meta:{t:"标签: Java 19",I:!1}}],["/tag/call-stack/",{loader:()=>a(()=>import("./index.html-BYgMlSbl.js"),__vite__mapDeps([3121,1])),meta:{t:"标签: Call Stack",I:!1}}],["/tag/stack-overflow/",{loader:()=>a(()=>import("./index.html-CrVv3OVR.js"),__vite__mapDeps([3122,1])),meta:{t:"标签: Stack Overflow",I:!1}}],["/tag/equals/",{loader:()=>a(()=>import("./index.html-BD4KkM5j.js"),__vite__mapDeps([3123,1])),meta:{t:"标签: equals",I:!1}}],["/tag/assert/",{loader:()=>a(()=>import("./index.html-CmeUu6cf.js"),__vite__mapDeps([3124,1])),meta:{t:"标签: assert",I:!1}}],["/tag/comparison/",{loader:()=>a(()=>import("./index.html-g5AFw3U-.js"),__vite__mapDeps([2699,1])),meta:{t:"标签: comparison",I:!1}}],["/tag/programming/",{loader:()=>a(()=>import("./index.html-BflErDl9.js"),__vite__mapDeps([3125,1])),meta:{t:"标签: Programming",I:!1}}],["/tag/uppercase/",{loader:()=>a(()=>import("./index.html-BWHq7u81.js"),__vite__mapDeps([2344,1])),meta:{t:"标签: Uppercase",I:!1}}],["/tag/lowercase/",{loader:()=>a(()=>import("./index.html-Cfy5QRWZ.js"),__vite__mapDeps([2345,1])),meta:{t:"标签: Lowercase",I:!1}}],["/tag/%E5%85%8B%E9%9A%86/",{loader:()=>a(()=>import("./index.html-DEuMSu4y.js"),__vite__mapDeps([3126,1])),meta:{t:"标签: 克隆",I:!1}}],["/tag/%E5%AF%B9%E8%B1%A1/",{loader:()=>a(()=>import("./index.html-CJapRUbP.js"),__vite__mapDeps([3127,1])),meta:{t:"标签: 对象",I:!1}}],["/tag/%E6%B5%85%E6%8B%B7%E8%B4%9D/",{loader:()=>a(()=>import("./index.html-D1-BTbJh.js"),__vite__mapDeps([3128,1])),meta:{t:"标签: 浅拷贝",I:!1}}],["/tag/code-quality/",{loader:()=>a(()=>import("./index.html-GkmmG9Gv.js"),__vite__mapDeps([3129,1])),meta:{t:"标签: Code Quality",I:!1}}],["/tag/refactoring/",{loader:()=>a(()=>import("./index.html-B9-axkMj.js"),__vite__mapDeps([3130,1])),meta:{t:"标签: Refactoring",I:!1}}],["/tag/%E5%90%88%E5%B9%B6/",{loader:()=>a(()=>import("./index.html-x1HURoJB.js"),__vite__mapDeps([3131,1])),meta:{t:"标签: 合并",I:!1}}],["/tag/findoneby/",{loader:()=>a(()=>import("./index.html-C5g8d3mE.js"),__vite__mapDeps([3132,1])),meta:{t:"标签: findOneBy",I:!1}}],["/tag/get()/",{loader:()=>a(()=>import("./index.html-D-L4Fn-d.js"),__vite__mapDeps([3133,1])),meta:{t:"标签: get()",I:!1}}],["/tag/navigate()/",{loader:()=>a(()=>import("./index.html-CLAGmjRv.js"),__vite__mapDeps([3134,1])),meta:{t:"标签: navigate()",I:!1}}],["/tag/kotlin-flows/",{loader:()=>a(()=>import("./index.html-Bjrcwube.js"),__vite__mapDeps([3135,1])),meta:{t:"标签: Kotlin Flows",I:!1}}],["/tag/single()-vs-first()/",{loader:()=>a(()=>import("./index.html-BjvXgcar.js"),__vite__mapDeps([3136,1])),meta:{t:"标签: single() vs first()",I:!1}}],["/tag/command-line/",{loader:()=>a(()=>import("./index.html-DlzClLzB.js"),__vite__mapDeps([3137,1])),meta:{t:"标签: Command Line",I:!1}}],["/tag/wsdl/",{loader:()=>a(()=>import("./index.html-B7r5i7ta.js"),__vite__mapDeps([3138,1])),meta:{t:"标签: WSDL",I:!1}}],["/tag/web-services/",{loader:()=>a(()=>import("./index.html-DDhxH7Fw.js"),__vite__mapDeps([3139,1])),meta:{t:"标签: Web Services",I:!1}}],["/tag/gray-box-testing/",{loader:()=>a(()=>import("./index.html-BX6LOhHy.js"),__vite__mapDeps([3140,1])),meta:{t:"标签: Gray Box Testing",I:!1}}],["/tag/oat/",{loader:()=>a(()=>import("./index.html-DRz5ofJ9.js"),__vite__mapDeps([3141,1])),meta:{t:"标签: OAT",I:!1}}],["/tag/test-coverage/",{loader:()=>a(()=>import("./index.html-8LPM2qr5.js"),__vite__mapDeps([3142,1])),meta:{t:"标签: Test Coverage",I:!1}}],["/tag/%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4api/",{loader:()=>a(()=>import("./index.html-BQ9uEdYq.js"),__vite__mapDeps([3143,1])),meta:{t:"标签: 日期时间API",I:!1}}],["/tag/http%E5%93%8D%E5%BA%94%E4%BD%93/",{loader:()=>a(()=>import("./index.html-3ZmAswO9.js"),__vite__mapDeps([3144,1])),meta:{t:"标签: HTTP响应体",I:!1}}],["/tag/%E8%B4%9F%E8%BD%BD%E6%B5%8B%E8%AF%95/",{loader:()=>a(()=>import("./index.html-DiGUZlYy.js"),__vite__mapDeps([3145,1])),meta:{t:"标签: 负载测试",I:!1}}],["/tag/illegalstateexception/",{loader:()=>a(()=>import("./index.html-OjVB2KJY.js"),__vite__mapDeps([3146,1])),meta:{t:"标签: IllegalStateException",I:!1}}],["/tag/servletrequest/",{loader:()=>a(()=>import("./index.html-BSfyrC1C.js"),__vite__mapDeps([3147,1])),meta:{t:"标签: ServletRequest",I:!1}}],["/tag/getreader/",{loader:()=>a(()=>import("./index.html-BJgGM6fB.js"),__vite__mapDeps([3148,1])),meta:{t:"标签: getReader",I:!1}}],["/tag/getinputstream/",{loader:()=>a(()=>import("./index.html-BQUwx3kO.js"),__vite__mapDeps([3149,1])),meta:{t:"标签: getInputStream",I:!1}}],["/tag/readobject/",{loader:()=>a(()=>import("./index.html-tFCouEfM.js"),__vite__mapDeps([3150,1])),meta:{t:"标签: readObject",I:!1}}],["/tag/readresolve/",{loader:()=>a(()=>import("./index.html-CbzaB7A2.js"),__vite__mapDeps([3151,1])),meta:{t:"标签: readResolve",I:!1}}],["/tag/%E5%9B%BE%E5%83%8F%E5%8E%8B%E7%BC%A9/",{loader:()=>a(()=>import("./index.html-C8Ofock6.js"),__vite__mapDeps([3152,1])),meta:{t:"标签: 图像压缩",I:!1}}],["/tag/jmockit/",{loader:()=>a(()=>import("./index.html-SP9VtYEF.js"),__vite__mapDeps([3153,1])),meta:{t:"标签: JMockit",I:!1}}],["/tag/%E7%A7%81%E6%9C%89%E5%AD%97%E6%AE%B5/",{loader:()=>a(()=>import("./index.html-RfIbKs29.js"),__vite__mapDeps([3154,1])),meta:{t:"标签: 私有字段",I:!1}}],["/tag/jpa-specification/",{loader:()=>a(()=>import("./index.html-CQlgBYQ1.js"),__vite__mapDeps([3155,1])),meta:{t:"标签: JPA Specification",I:!1}}],["/tag/no-argument-constructor/",{loader:()=>a(()=>import("./index.html-D-jwm_QC.js"),__vite__mapDeps([3156,1])),meta:{t:"标签: No-Argument Constructor",I:!1}}],["/tag/kafka-consumer-api/",{loader:()=>a(()=>import("./index.html-D9vB0rdQ.js"),__vite__mapDeps([3157,1])),meta:{t:"标签: Kafka Consumer API",I:!1}}],["/tag/real-time-data-processing/",{loader:()=>a(()=>import("./index.html-D5CP_1tQ.js"),__vite__mapDeps([3158,1])),meta:{t:"标签: Real-time data processing",I:!1}}],["/tag/dateformat/",{loader:()=>a(()=>import("./index.html-COn3bh20.js"),__vite__mapDeps([3159,1])),meta:{t:"标签: DateFormat",I:!1}}],["/tag/word%E6%96%87%E6%A1%A3/",{loader:()=>a(()=>import("./index.html--mzjVmTW.js"),__vite__mapDeps([3160,1])),meta:{t:"标签: Word文档",I:!1}}],["/tag/%E6%96%87%E6%A1%A3%E6%A8%A1%E6%9D%BF/",{loader:()=>a(()=>import("./index.html-CjbkmeMo.js"),__vite__mapDeps([3161,1])),meta:{t:"标签: 文档模板",I:!1}}],["/tag/%E6%96%87%E6%9C%AC%E6%9B%BF%E6%8D%A2/",{loader:()=>a(()=>import("./index.html-DwL3e0Ct.js"),__vite__mapDeps([3162,1])),meta:{t:"标签: 文本替换",I:!1}}],["/tag/callable/",{loader:()=>a(()=>import("./index.html-fOhjrBtS.js"),__vite__mapDeps([3163,1])),meta:{t:"标签: Callable",I:!1}}],["/tag/jmeter/",{loader:()=>a(()=>import("./index.html-tKWVD63S.js"),__vite__mapDeps([3164,1])),meta:{t:"标签: JMeter",I:!1}}],["/tag/%E5%91%BD%E4%BB%A4%E8%A1%8C/",{loader:()=>a(()=>import("./index.html-BskWcJd6.js"),__vite__mapDeps([3165,1])),meta:{t:"标签: 命令行",I:!1}}],["/tag/%E6%97%A5%E6%9C%9F%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8E%92%E5%BA%8F/",{loader:()=>a(()=>import("./index.html-CfhZwSVH.js"),__vite__mapDeps([3166,1])),meta:{t:"标签: 日期字符串排序",I:!1}}],["/tag/getbyid/",{loader:()=>a(()=>import("./index.html-B3-L_eTj.js"),__vite__mapDeps([3167,1])),meta:{t:"标签: getById",I:!1}}],["/tag/enum-mapping/",{loader:()=>a(()=>import("./index.html-BS-CAdej.js"),__vite__mapDeps([3168,1])),meta:{t:"标签: Enum Mapping",I:!1}}],["/tag/orm/",{loader:()=>a(()=>import("./index.html-DpooO55Z.js"),__vite__mapDeps([3169,1])),meta:{t:"标签: ORM",I:!1}}],["/tag/associations/",{loader:()=>a(()=>import("./index.html-5KbAjPkw.js"),__vite__mapDeps([3170,1])),meta:{t:"标签: Associations",I:!1}}],["/tag/listennotify/",{loader:()=>a(()=>import("./index.html-CMhKymry.js"),__vite__mapDeps([3171,1])),meta:{t:"标签: LISTEN/NOTIFY",I:!1}}],["/tag/%E6%B6%88%E6%81%AF%E4%BB%A3%E7%90%86/",{loader:()=>a(()=>import("./index.html-DARSdCH6.js"),__vite__mapDeps([3172,1])),meta:{t:"标签: 消息代理",I:!1}}],["/tag/elasticsearch/",{loader:()=>a(()=>import("./index.html-BmKh1YR8.js"),__vite__mapDeps([3173,1])),meta:{t:"标签: Elasticsearch",I:!1}}],["/tag/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/",{loader:()=>a(()=>import("./index.html-B3u6_99n.js"),__vite__mapDeps([3174,1])),meta:{t:"标签: 搜索引擎",I:!1}}],["/tag/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/",{loader:()=>a(()=>import("./index.html-CUbtz28V.js"),__vite__mapDeps([3175,1])),meta:{t:"标签: 数据分析",I:!1}}],["/tag/arrayblockingqueue/",{loader:()=>a(()=>import("./index.html-B0C7mDiX.js"),__vite__mapDeps([3176,1])),meta:{t:"标签: ArrayBlockingQueue",I:!1}}],["/tag/linkedblockingqueue/",{loader:()=>a(()=>import("./index.html-Cjx1-nEx.js"),__vite__mapDeps([3177,1])),meta:{t:"标签: LinkedBlockingQueue",I:!1}}],["/tag/%E7%99%BE%E5%88%86%E6%AF%94%E8%AE%A1%E7%AE%97/",{loader:()=>a(()=>import("./index.html-DeV17xRD.js"),__vite__mapDeps([3178,1])),meta:{t:"标签: 百分比计算",I:!1}}],["/tag/%E9%9B%86%E5%90%88%E6%93%8D%E4%BD%9C/",{loader:()=>a(()=>import("./index.html-BvLucis1.js"),__vite__mapDeps([3179,1])),meta:{t:"标签: 集合操作",I:!1}}],["/tag/classpath/",{loader:()=>a(()=>import("./index.html-C4ehozJA.js"),__vite__mapDeps([3180,1])),meta:{t:"标签: Classpath",I:!1}}],["/tag/modulepath/",{loader:()=>a(()=>import("./index.html-CLCW1xeJ.js"),__vite__mapDeps([3181,1])),meta:{t:"标签: Modulepath",I:!1}}],["/tag/json%E8%BD%AC%E6%8D%A2/",{loader:()=>a(()=>import("./index.html-DRfeTm5L.js"),__vite__mapDeps([3182,1])),meta:{t:"标签: JSON转换",I:!1}}],["/tag/json-java/",{loader:()=>a(()=>import("./index.html-CVlclyAE.js"),__vite__mapDeps([3183,1])),meta:{t:"标签: JSON-Java",I:!1}}],["/tag/%E5%B0%81%E8%A3%85/",{loader:()=>a(()=>import("./index.html-CNDKBIh6.js"),__vite__mapDeps([3184,1])),meta:{t:"标签: 封装",I:!1}}],["/tag/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%B0%E6%95%B4%E6%95%B0%E8%BD%AC%E6%8D%A2/",{loader:()=>a(()=>import("./index.html-DCikflCn.js"),__vite__mapDeps([3185,1])),meta:{t:"标签: 字符串到整数转换",I:!1}}],["/tag/xml/",{loader:()=>a(()=>import("./index.html-C9ZnGlto.js"),__vite__mapDeps([3186,1])),meta:{t:"标签: XML",I:!1}}],["/tag/curl/",{loader:()=>a(()=>import("./index.html-8njpoMWN.js"),__vite__mapDeps([3187,1])),meta:{t:"标签: cURL",I:!1}}],["/tag/postman/",{loader:()=>a(()=>import("./index.html-DpCD7cei.js"),__vite__mapDeps([3188,1])),meta:{t:"标签: Postman",I:!1}}],["/tag/flush()/",{loader:()=>a(()=>import("./index.html-TpGC16nm.js"),__vite__mapDeps([3189,1])),meta:{t:"标签: flush()",I:!1}}],["/tag/entitymanager/",{loader:()=>a(()=>import("./index.html-CTnHecKT.js"),__vite__mapDeps([3190,1])),meta:{t:"标签: EntityManager",I:!1}}],["/tag/%E8%87%AA%E5%AE%9A%E4%B9%89/",{loader:()=>a(()=>import("./index.html-DepqOJB9.js"),__vite__mapDeps([3191,1])),meta:{t:"标签: 自定义",I:!1}}],["/tag/compile/",{loader:()=>a(()=>import("./index.html-CJchtZ2y.js"),__vite__mapDeps([3192,1])),meta:{t:"标签: compile",I:!1}}],["/tag/implementation/",{loader:()=>a(()=>import("./index.html-CxFNIprY.js"),__vite__mapDeps([3193,1])),meta:{t:"标签: implementation",I:!1}}],["/tag/%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86/",{loader:()=>a(()=>import("./index.html-C67NKXjQ.js"),__vite__mapDeps([3194,1])),meta:{t:"标签: 依赖管理",I:!1}}],["/tag/%E5%AE%9E%E4%BD%93/",{loader:()=>a(()=>import("./index.html-DQ-6-11i.js"),__vite__mapDeps([3195,1])),meta:{t:"标签: 实体",I:!1}}],["/tag/singleton/",{loader:()=>a(()=>import("./index.html-Bl3CsLUJ.js"),__vite__mapDeps([3196,1])),meta:{t:"标签: Singleton",I:!1}}],["/tag/synchronized/",{loader:()=>a(()=>import("./index.html-B0tvaZtf.js"),__vite__mapDeps([3197,1])),meta:{t:"标签: Synchronized",I:!1}}],["/tag/atomicboolean/",{loader:()=>a(()=>import("./index.html-BONxWJ_t.js"),__vite__mapDeps([3198,1])),meta:{t:"标签: AtomicBoolean",I:!1}}],["/tag/static-initialization/",{loader:()=>a(()=>import("./index.html-8jjfAuRV.js"),__vite__mapDeps([3199,1])),meta:{t:"标签: Static Initialization",I:!1}}],["/tag/javadoc/",{loader:()=>a(()=>import("./index.html-BaNAjp0A.js"),__vite__mapDeps([2785,1])),meta:{t:"标签: Javadoc",I:!1}}],["/tag/%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90/",{loader:()=>a(()=>import("./index.html-CTRtAb5v.js"),__vite__mapDeps([3200,1])),meta:{t:"标签: 文档生成",I:!1}}],["/tag/argon2/",{loader:()=>a(()=>import("./index.html-BRp_jPR9.js"),__vite__mapDeps([3201,1])),meta:{t:"标签: Argon2",I:!1}}],["/tag/hashing/",{loader:()=>a(()=>import("./index.html-C0-ZsSXy.js"),__vite__mapDeps([3202,1])),meta:{t:"标签: Hashing",I:!1}}],["/tag/natural-id/",{loader:()=>a(()=>import("./index.html-C4ibTS4q.js"),__vite__mapDeps([3203,1])),meta:{t:"标签: Natural ID",I:!1}}],["/tag/input/",{loader:()=>a(()=>import("./index.html-B6FS0f5G.js"),__vite__mapDeps([3204,1])),meta:{t:"标签: Input",I:!1}}],["/tag/spaces/",{loader:()=>a(()=>import("./index.html-BWjRqmQU.js"),__vite__mapDeps([3205,1])),meta:{t:"标签: Spaces",I:!1}}],["/tag/pod-logs/",{loader:()=>a(()=>import("./index.html-CBvclHle.js"),__vite__mapDeps([3206,1])),meta:{t:"标签: Pod Logs",I:!1}}],["/tag/kubectl/",{loader:()=>a(()=>import("./index.html-CL7elJHG.js"),__vite__mapDeps([3207,1])),meta:{t:"标签: kubectl",I:!1}}],["/tag/kubernetes-dashboard/",{loader:()=>a(()=>import("./index.html-WeRwIfUp.js"),__vite__mapDeps([3208,1])),meta:{t:"标签: Kubernetes Dashboard",I:!1}}],["/tag/minio/",{loader:()=>a(()=>import("./index.html-eTjlPVnb.js"),__vite__mapDeps([3209,1])),meta:{t:"标签: MinIO",I:!1}}],["/tag/printstream/",{loader:()=>a(()=>import("./index.html-H2QKP2Or.js"),__vite__mapDeps([3210,1])),meta:{t:"标签: PrintStream",I:!1}}],["/tag/%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2/",{loader:()=>a(()=>import("./index.html-CPCrpg4b.js"),__vite__mapDeps([3211,1])),meta:{t:"标签: 字符串转换",I:!1}}],["/tag/object.tostring()/",{loader:()=>a(()=>import("./index.html-Bbf_Ml0x.js"),__vite__mapDeps([3212,1])),meta:{t:"标签: Object.toString()",I:!1}}],["/tag/string.valueof()/",{loader:()=>a(()=>import("./index.html-DZ1um47E.js"),__vite__mapDeps([3213,1])),meta:{t:"标签: String.valueOf()",I:!1}}],["/tag/selenium/",{loader:()=>a(()=>import("./index.html-BwFMzC-Q.js"),__vite__mapDeps([3214,1])),meta:{t:"标签: Selenium",I:!1}}],["/tag/webdriver/",{loader:()=>a(()=>import("./index.html-D6wafLJM.js"),__vite__mapDeps([3215,1])),meta:{t:"标签: WebDriver",I:!1}}],["/tag/%E6%96%B0%E5%BB%BA%E6%A0%87%E7%AD%BE%E9%A1%B5/",{loader:()=>a(()=>import("./index.html-CnyXrTG_.js"),__vite__mapDeps([3216,1])),meta:{t:"标签: 新建标签页",I:!1}}],["/tag/%E8%BE%93%E5%85%A5%E5%A4%84%E7%90%86/",{loader:()=>a(()=>import("./index.html-AZo5HVda.js"),__vite__mapDeps([3217,1])),meta:{t:"标签: 输入处理",I:!1}}],["/tag/java/",{loader:()=>a(()=>import("./index.html-D-psLuW2.js"),__vite__mapDeps([2282,1])),meta:{t:"标签: java",I:!1}}],["/tag/anchors/",{loader:()=>a(()=>import("./index.html-BzAoe8OP.js"),__vite__mapDeps([3218,1])),meta:{t:"标签: anchors",I:!1}}],["/tag/api-key/",{loader:()=>a(()=>import("./index.html-B6HP61od.js"),__vite__mapDeps([3219,1])),meta:{t:"标签: API Key",I:!1}}],["/tag/shared-secret-authentication/",{loader:()=>a(()=>import("./index.html-DsSiXsuU.js"),__vite__mapDeps([3220,1])),meta:{t:"标签: Shared Secret Authentication",I:!1}}],["/tag/microservices/",{loader:()=>a(()=>import("./index.html-Wc-EhANg.js"),__vite__mapDeps([3221,1])),meta:{t:"标签: Microservices",I:!1}}],["/tag/interfaces/",{loader:()=>a(()=>import("./index.html-BK-oCvnK.js"),__vite__mapDeps([3222,1])),meta:{t:"标签: Interfaces",I:!1}}],["/tag/implementation/",{loader:()=>a(()=>import("./index.html-CxFNIprY.js"),__vite__mapDeps([3193,1])),meta:{t:"标签: Implementation",I:!1}}],["/tag/spring-boot-actuator/",{loader:()=>a(()=>import("./index.html-ClKa86WM.js"),__vite__mapDeps([3223,1])),meta:{t:"标签: Spring Boot Actuator",I:!1}}],["/tag/next()/",{loader:()=>a(()=>import("./index.html-9xB4M77z.js"),__vite__mapDeps([3224,1])),meta:{t:"标签: next()",I:!1}}],["/tag/nextline()/",{loader:()=>a(()=>import("./index.html-DcGLRWw6.js"),__vite__mapDeps([3225,1])),meta:{t:"标签: nextLine()",I:!1}}],["/tag/empty-stream/",{loader:()=>a(()=>import("./index.html-BpMXgeDN.js"),__vite__mapDeps([3226,1])),meta:{t:"标签: Empty Stream",I:!1}}],["/tag/%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA/",{loader:()=>a(()=>import("./index.html-C4TK71a4.js"),__vite__mapDeps([3227,1])),meta:{t:"标签: 控制台输出",I:!1}}],["/tag/%E6%96%87%E4%BB%B6%E8%BE%93%E5%87%BA/",{loader:()=>a(()=>import("./index.html-BtGC08nj.js"),__vite__mapDeps([3228,1])),meta:{t:"标签: 文件输出",I:!1}}],["/tag/h2/",{loader:()=>a(()=>import("./index.html-BXPMGp5t.js"),__vite__mapDeps([3229,1])),meta:{t:"标签: H2",I:!1}}],["/tag/hikaricp/",{loader:()=>a(()=>import("./index.html-Bf9sRq78.js"),__vite__mapDeps([3230,1])),meta:{t:"标签: HikariCP",I:!1}}],["/tag/spoon/",{loader:()=>a(()=>import("./index.html-CuDP8vRJ.js"),__vite__mapDeps([3231,1])),meta:{t:"标签: Spoon",I:!1}}],["/tag/java%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/",{loader:()=>a(()=>import("./index.html-CbwZkH99.js"),__vite__mapDeps([3232,1])),meta:{t:"标签: Java代码分析",I:!1}}],["/tag/java%E4%BB%A3%E7%A0%81%E8%BD%AC%E6%8D%A2/",{loader:()=>a(()=>import("./index.html-k2x8ds9R.js"),__vite__mapDeps([3233,1])),meta:{t:"标签: Java代码转换",I:!1}}],["/tag/in-memory-database/",{loader:()=>a(()=>import("./index.html-2TogxTiH.js"),__vite__mapDeps([3234,1])),meta:{t:"标签: In-Memory Database",I:!1}}],["/tag/schema-creation/",{loader:()=>a(()=>import("./index.html-JYwfU5vZ.js"),__vite__mapDeps([3235,1])),meta:{t:"标签: Schema Creation",I:!1}}],["/tag/%E5%8F%82%E6%95%B0/",{loader:()=>a(()=>import("./index.html-AT3-O6Hc.js"),__vite__mapDeps([3236,1])),meta:{t:"标签: 参数",I:!1}}],["/tag/java-bean/",{loader:()=>a(()=>import("./index.html-BRw41DRo.js"),__vite__mapDeps([3237,1])),meta:{t:"标签: Java Bean",I:!1}}],["/tag/%E6%9E%84%E5%BB%BA%E5%99%A8%E6%A8%A1%E5%BC%8F/",{loader:()=>a(()=>import("./index.html-CGPpHfuE.js"),__vite__mapDeps([3238,1])),meta:{t:"标签: 构建器模式",I:!1}}],["/tag/hibernate-6/",{loader:()=>a(()=>import("./index.html-B8hEu704.js"),__vite__mapDeps([3239,1])),meta:{t:"标签: Hibernate 6",I:!1}}],["/tag/boolean-converters/",{loader:()=>a(()=>import("./index.html-FlcWLYC_.js"),__vite__mapDeps([3240,1])),meta:{t:"标签: Boolean Converters",I:!1}}],["/tag/webflux/",{loader:()=>a(()=>import("./index.html-CHTaQQAR.js"),__vite__mapDeps([3241,1])),meta:{t:"标签: WebFlux",I:!1}}],["/tag/flux/",{loader:()=>a(()=>import("./index.html-LXUIJSki.js"),__vite__mapDeps([3242,1])),meta:{t:"标签: Flux",I:!1}}],["/tag/reactive-streams/",{loader:()=>a(()=>import("./index.html-C07QdPiO.js"),__vite__mapDeps([3243,1])),meta:{t:"标签: Reactive Streams",I:!1}}],["/tag/byte-arrays/",{loader:()=>a(()=>import("./index.html-DsnbWLNc.js"),__vite__mapDeps([3244,1])),meta:{t:"标签: byte arrays",I:!1}}],["/tag/array-comparison/",{loader:()=>a(()=>import("./index.html-qszcwub_.js"),__vite__mapDeps([3245,1])),meta:{t:"标签: array comparison",I:!1}}],["/tag/aar/",{loader:()=>a(()=>import("./index.html-pEe-wadr.js"),__vite__mapDeps([3246,1])),meta:{t:"标签: AAR",I:!1}}],["/tag/jar/",{loader:()=>a(()=>import("./index.html-DVnESiK3.js"),__vite__mapDeps([3247,1])),meta:{t:"标签: JAR",I:!1}}],["/tag/%E6%B5%8B%E8%AF%95%E5%A5%97%E4%BB%B6/",{loader:()=>a(()=>import("./index.html-6zcXWbBs.js"),__vite__mapDeps([3248,1])),meta:{t:"标签: 测试套件",I:!1}}],["/tag/keycloak/",{loader:()=>a(()=>import("./index.html-CCSoJ4px.js"),__vite__mapDeps([3249,1])),meta:{t:"标签: Keycloak",I:!1}}],["/tag/iam/",{loader:()=>a(()=>import("./index.html-Cz35Upfk.js"),__vite__mapDeps([3250,1])),meta:{t:"标签: IAM",I:!1}}],["/tag/custom-protocol-mapper/",{loader:()=>a(()=>import("./index.html-BibSM0E1.js"),__vite__mapDeps([3251,1])),meta:{t:"标签: Custom Protocol Mapper",I:!1}}],["/tag/thtext/",{loader:()=>a(()=>import("./index.html-HK_eCL8E.js"),__vite__mapDeps([3252,1])),meta:{t:"标签: th:text",I:!1}}],["/tag/thvalue/",{loader:()=>a(()=>import("./index.html-FhfYO3MX.js"),__vite__mapDeps([3253,1])),meta:{t:"标签: th:value",I:!1}}],["/tag/oauth/",{loader:()=>a(()=>import("./index.html-BNPigu58.js"),__vite__mapDeps([3254,1])),meta:{t:"标签: OAuth",I:!1}}],["/tag/%E7%B4%A2%E5%BC%95/",{loader:()=>a(()=>import("./index.html-DPrVMJ-D.js"),__vite__mapDeps([3255,1])),meta:{t:"标签: 索引",I:!1}}],["/tag/longest-word/",{loader:()=>a(()=>import("./index.html-CIUF9Bsr.js"),__vite__mapDeps([3256,1])),meta:{t:"标签: Longest Word",I:!1}}],["/tag/java-string/",{loader:()=>a(()=>import("./index.html-B9y9RTzR.js"),__vite__mapDeps([3257,1])),meta:{t:"标签: Java String",I:!1}}],["/tag/uuid/",{loader:()=>a(()=>import("./index.html-Dz0XRMdy.js"),__vite__mapDeps([3258,1])),meta:{t:"标签: UUID",I:!1}}],["/tag/bufferedimage/",{loader:()=>a(()=>import("./index.html-BXt23JWU.js"),__vite__mapDeps([3259,1])),meta:{t:"标签: BufferedImage",I:!1}}],["/tag/%E5%83%8F%E7%B4%A0%E6%95%B0%E7%BB%84/",{loader:()=>a(()=>import("./index.html-BNcsk0ZS.js"),__vite__mapDeps([3260,1])),meta:{t:"标签: 像素数组",I:!1}}],["/tag/%E5%9B%BE%E5%83%8F%E6%95%B0%E6%8D%AE/",{loader:()=>a(()=>import("./index.html-Du0ytlcK.js"),__vite__mapDeps([3261,1])),meta:{t:"标签: 图像数据",I:!1}}],["/tag/text-extraction/",{loader:()=>a(()=>import("./index.html-BrubeWEI.js"),__vite__mapDeps([3262,1])),meta:{t:"标签: Text Extraction",I:!1}}],["/tag/%E6%8C%81%E4%B9%85%E5%8C%96/",{loader:()=>a(()=>import("./index.html-C0tTrJhj.js"),__vite__mapDeps([3263,1])),meta:{t:"标签: 持久化",I:!1}}],["/tag/list_______________string_______________/",{loader:()=>a(()=>import("./index.html-DGzANAFI.js"),__vite__mapDeps([3264,1])),meta:{t:"标签: List```````````````<String>```````````````",I:!1}}],["/tag/mutablemap/",{loader:()=>a(()=>import("./index.html-BoEmyuqT.js"),__vite__mapDeps([3265,1])),meta:{t:"标签: MutableMap",I:!1}}],["/tag/integer.parseint/",{loader:()=>a(()=>import("./index.html-2Wk7ZICo.js"),__vite__mapDeps([3266,1])),meta:{t:"标签: Integer.parseInt",I:!1}}],["/tag/nextint/",{loader:()=>a(()=>import("./index.html-Bl6k96Wa.js"),__vite__mapDeps([3267,1])),meta:{t:"标签: nextInt",I:!1}}],["/tag/spring-modulith/",{loader:()=>a(()=>import("./index.html-CXeD5-1e.js"),__vite__mapDeps([3268,1])),meta:{t:"标签: Spring Modulith",I:!1}}],["/tag/modular-monolith-architecture/",{loader:()=>a(()=>import("./index.html-ByOAUG2a.js"),__vite__mapDeps([3269,1])),meta:{t:"标签: Modular Monolith Architecture",I:!1}}],["/tag/java-home/",{loader:()=>a(()=>import("./index.html-B8j74u1S.js"),__vite__mapDeps([3270,1])),meta:{t:"标签: JAVA_HOME",I:!1}}],["/tag/path/",{loader:()=>a(()=>import("./index.html-D86va9a0.js"),__vite__mapDeps([3271,1])),meta:{t:"标签: PATH",I:!1}}],["/tag/hashcode/",{loader:()=>a(()=>import("./index.html-CwPqWJ_t.js"),__vite__mapDeps([3272,1])),meta:{t:"标签: hashCode",I:!1}}],["/tag/apache-opennlp/",{loader:()=>a(()=>import("./index.html-F0pXk3gv.js"),__vite__mapDeps([3273,1])),meta:{t:"标签: Apache OpenNLP",I:!1}}],["/tag/stanford-corenlp/",{loader:()=>a(()=>import("./index.html-C1pQA8ZO.js"),__vite__mapDeps([3274,1])),meta:{t:"标签: Stanford CoreNLP",I:!1}}],["/tag/%E5%BC%95%E5%8F%B7/",{loader:()=>a(()=>import("./index.html-DPZZTjUL.js"),__vite__mapDeps([3275,1])),meta:{t:"标签: 引号",I:!1}}],["/tag/string-manipulation/",{loader:()=>a(()=>import("./index.html-DP49Hjm1.js"),__vite__mapDeps([3276,1])),meta:{t:"标签: String Manipulation",I:!1}}],["/tag/regular-expressions/",{loader:()=>a(()=>import("./index.html-CanSwhtz.js"),__vite__mapDeps([3277,1])),meta:{t:"标签: Regular Expressions",I:!1}}],["/tag/html-input/",{loader:()=>a(()=>import("./index.html-BLvHsjhA.js"),__vite__mapDeps([3278,1])),meta:{t:"标签: HTML Input",I:!1}}],["/tag/scoped-values/",{loader:()=>a(()=>import("./index.html-z81j8OMD.js"),__vite__mapDeps([3279,1])),meta:{t:"标签: Scoped Values",I:!1}}],["/tag/self-injection/",{loader:()=>a(()=>import("./index.html-BL9CGZQI.js"),__vite__mapDeps([3280,1])),meta:{t:"标签: Self-Injection",I:!1}}],["/tag/sql-syntax-error/",{loader:()=>a(()=>import("./index.html-CsEVXEgm.js"),__vite__mapDeps([3281,1])),meta:{t:"标签: SQL Syntax Error",I:!1}}],["/tag/staleelementreferenceexception/",{loader:()=>a(()=>import("./index.html-8-7c-wqh.js"),__vite__mapDeps([3282,1])),meta:{t:"标签: StaleElementReferenceException",I:!1}}],["/tag/ktor/",{loader:()=>a(()=>import("./index.html-CdpN64Z5.js"),__vite__mapDeps([3283,1])),meta:{t:"标签: Ktor",I:!1}}],["/tag/url-manipulation/",{loader:()=>a(()=>import("./index.html-TWLHi6UQ.js"),__vite__mapDeps([3284,1])),meta:{t:"标签: URL Manipulation",I:!1}}],["/tag/chatgpt/",{loader:()=>a(()=>import("./index.html-CHzdCD0b.js"),__vite__mapDeps([3285,1])),meta:{t:"标签: ChatGPT",I:!1}}],["/tag/timeout-annotation/",{loader:()=>a(()=>import("./index.html-VSEtWecG.js"),__vite__mapDeps([3286,1])),meta:{t:"标签: Timeout Annotation",I:!1}}],["/tag/unit-test/",{loader:()=>a(()=>import("./index.html-AZtrJ6WX.js"),__vite__mapDeps([3287,1])),meta:{t:"标签: Unit Test",I:!1}}],["/tag/azure/",{loader:()=>a(()=>import("./index.html-CFHN1mj2.js"),__vite__mapDeps([3288,1])),meta:{t:"标签: Azure",I:!1}}],["/tag/companion-object/",{loader:()=>a(()=>import("./index.html-C5l9rvmG.js"),__vite__mapDeps([3289,1])),meta:{t:"标签: Companion Object",I:!1}}],["/tag/static-methods/",{loader:()=>a(()=>import("./index.html-YSWzKvOz.js"),__vite__mapDeps([3290,1])),meta:{t:"标签: Static Methods",I:!1}}],["/tag/buffer-overflow/",{loader:()=>a(()=>import("./index.html-ChsI6kcs.js"),__vite__mapDeps([3291,1])),meta:{t:"标签: Buffer Overflow",I:!1}}],["/tag/java-security/",{loader:()=>a(()=>import("./index.html-C8isgdEu.js"),__vite__mapDeps([3292,1])),meta:{t:"标签: Java Security",I:!1}}],["/tag/boolean-to-string/",{loader:()=>a(()=>import("./index.html-PMj80QEn.js"),__vite__mapDeps([3293,1])),meta:{t:"标签: Boolean to String",I:!1}}],["/tag/%E6%95%B4%E6%95%B0%E8%BD%AC%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6/",{loader:()=>a(()=>import("./index.html-DtTJjiE7.js"),__vite__mapDeps([3294,1])),meta:{t:"标签: 整数转十六进制",I:!1}}],["/tag/generic-type/",{loader:()=>a(()=>import("./index.html-DgAbeTfs.js"),__vite__mapDeps([3295,1])),meta:{t:"标签: Generic Type",I:!1}}],["/tag/classpath/",{loader:()=>a(()=>import("./index.html-C4ehozJA.js"),__vite__mapDeps([3180,1])),meta:{t:"标签: classpath",I:!1}}],["/tag/sourcepath/",{loader:()=>a(()=>import("./index.html-CEW_lzBK.js"),__vite__mapDeps([3296,1])),meta:{t:"标签: sourcepath",I:!1}}],["/tag/jmxterm/",{loader:()=>a(()=>import("./index.html-tUwDRk4i.js"),__vite__mapDeps([3297,1])),meta:{t:"标签: JMXTerm",I:!1}}],["/tag/%E8%B0%83%E8%AF%95/",{loader:()=>a(()=>import("./index.html-DNaUxe1A.js"),__vite__mapDeps([3298,1])),meta:{t:"标签: 调试",I:!1}}],["/tag/propertyreferenceexception/",{loader:()=>a(()=>import("./index.html-B_soEmC6.js"),__vite__mapDeps([3299,1])),meta:{t:"标签: PropertyReferenceException",I:!1}}],["/tag/jsonmappingexception/",{loader:()=>a(()=>import("./index.html-DTYKSLCo.js"),__vite__mapDeps([3300,1])),meta:{t:"标签: JsonMappingException",I:!1}}],["/tag/functional-testing/",{loader:()=>a(()=>import("./index.html-D7F8j0oQ.js"),__vite__mapDeps([3301,1])),meta:{t:"标签: Functional Testing",I:!1}}],["/tag/non-functional-testing/",{loader:()=>a(()=>import("./index.html-BjCB5Cid.js"),__vite__mapDeps([3302,1])),meta:{t:"标签: Non-Functional Testing",I:!1}}],["/tag/%E6%8A%80%E6%9C%AF/",{loader:()=>a(()=>import("./index.html-Dg9saSLR.js"),__vite__mapDeps([3303,1])),meta:{t:"标签: 技术",I:!1}}],["/tag/week/",{loader:()=>a(()=>import("./index.html-oqXrVsTR.js"),__vite__mapDeps([3304,1])),meta:{t:"标签: Week",I:!1}}],["/tag/date-calculation/",{loader:()=>a(()=>import("./index.html-BfeZn4F-.js"),__vite__mapDeps([3305,1])),meta:{t:"标签: Date Calculation",I:!1}}],["/tag/implicit-wait/",{loader:()=>a(()=>import("./index.html-BkhX6hNS.js"),__vite__mapDeps([3306,1])),meta:{t:"标签: Implicit Wait",I:!1}}],["/tag/explicit-wait/",{loader:()=>a(()=>import("./index.html-BXzlCQNs.js"),__vite__mapDeps([3307,1])),meta:{t:"标签: Explicit Wait",I:!1}}],["/tag/aws/",{loader:()=>a(()=>import("./index.html-4WZjr6YF.js"),__vite__mapDeps([3308,1])),meta:{t:"标签: AWS",I:!1}}],["/tag/secrets-manager/",{loader:()=>a(()=>import("./index.html-Dy6rpSt0.js"),__vite__mapDeps([3309,1])),meta:{t:"标签: Secrets Manager",I:!1}}],["/tag/helper-class/",{loader:()=>a(()=>import("./index.html-G7F8aTK9.js"),__vite__mapDeps([3310,1])),meta:{t:"标签: helper class",I:!1}}],["/tag/utility-class/",{loader:()=>a(()=>import("./index.html-Dd8N0hSC.js"),__vite__mapDeps([3311,1])),meta:{t:"标签: utility class",I:!1}}],["/tag/configuration/",{loader:()=>a(()=>import("./index.html-CnDdzmKR.js"),__vite__mapDeps([3312,1])),meta:{t:"标签: Configuration",I:!1}}],["/tag/offsetdatetime/",{loader:()=>a(()=>import("./index.html-aQSyKrOV.js"),__vite__mapDeps([3313,1])),meta:{t:"标签: OffsetDateTime",I:!1}}],["/tag/java%E6%97%A5%E6%9C%9F%E8%A7%A3%E6%9E%90/",{loader:()=>a(()=>import("./index.html-PT8VtCln.js"),__vite__mapDeps([3314,1])),meta:{t:"标签: Java日期解析",I:!1}}],["/tag/datetimeformatterbuilder/",{loader:()=>a(()=>import("./index.html-Bg-OdpZ3.js"),__vite__mapDeps([3315,1])),meta:{t:"标签: DateTimeFormatterBuilder",I:!1}}],["/tag/apache-commons-dateutils/",{loader:()=>a(()=>import("./index.html-CB4j4HI7.js"),__vite__mapDeps([3316,1])),meta:{t:"标签: Apache Commons DateUtils",I:!1}}],["/tag/cpu/",{loader:()=>a(()=>import("./index.html-CzNOpA7X.js"),__vite__mapDeps([3317,1])),meta:{t:"标签: CPU",I:!1}}],["/tag/troubleshooting/",{loader:()=>a(()=>import("./index.html-Bw7w8lNh.js"),__vite__mapDeps([3318,1])),meta:{t:"标签: Troubleshooting",I:!1}}],["/tag/private-constructors/",{loader:()=>a(()=>import("./index.html-C_bRYPKB.js"),__vite__mapDeps([3319,1])),meta:{t:"标签: Private Constructors",I:!1}}],["/tag/%E5%A4%9A%E5%AF%B9%E5%A4%9A/",{loader:()=>a(()=>import("./index.html-BvnvDLXH.js"),__vite__mapDeps([3320,1])),meta:{t:"标签: 多对多",I:!1}}],["/tag/%E5%AE%9E%E4%BD%93%E5%88%A0%E9%99%A4/",{loader:()=>a(()=>import("./index.html-DIdUfJwt.js"),__vite__mapDeps([3321,1])),meta:{t:"标签: 实体删除",I:!1}}],["/tag/resilience4j/",{loader:()=>a(()=>import("./index.html-C0v8zi28.js"),__vite__mapDeps([3322,1])),meta:{t:"标签: Resilience4j",I:!1}}],["/tag/circuit-breaker/",{loader:()=>a(()=>import("./index.html-qdrm9SXl.js"),__vite__mapDeps([3323,1])),meta:{t:"标签: Circuit Breaker",I:!1}}],["/tag/rate-limiter/",{loader:()=>a(()=>import("./index.html-dgwZ90oV.js"),__vite__mapDeps([3324,1])),meta:{t:"标签: Rate Limiter",I:!1}}],["/tag/bulkhead/",{loader:()=>a(()=>import("./index.html-HyfcxuYf.js"),__vite__mapDeps([3325,1])),meta:{t:"标签: Bulkhead",I:!1}}],["/tag/time-limiter/",{loader:()=>a(()=>import("./index.html-C8bKuorX.js"),__vite__mapDeps([3326,1])),meta:{t:"标签: Time Limiter",I:!1}}],["/tag/apache-httpclient/",{loader:()=>a(()=>import("./index.html-CGxouxeW.js"),__vite__mapDeps([3327,1])),meta:{t:"标签: Apache HttpClient",I:!1}}],["/tag/efficiency/",{loader:()=>a(()=>import("./index.html-Cq68vOov.js"),__vite__mapDeps([3328,1])),meta:{t:"标签: Efficiency",I:!1}}],["/tag/saml2/",{loader:()=>a(()=>import("./index.html-D6DPoxCQ.js"),__vite__mapDeps([3329,1])),meta:{t:"标签: SAML2",I:!1}}],["/tag/%E7%94%A8%E6%88%B7%E6%90%9C%E7%B4%A2/",{loader:()=>a(()=>import("./index.html-DD55WSdr.js"),__vite__mapDeps([3330,1])),meta:{t:"标签: 用户搜索",I:!1}}],["/tag/%E7%BA%A7%E8%81%94%E5%88%A0%E9%99%A4/",{loader:()=>a(()=>import("./index.html-B--fbh94.js"),__vite__mapDeps([3331,1])),meta:{t:"标签: 级联删除",I:!1}}],["/tag/%E5%8D%95%E5%90%91%E4%B8%80%E5%AF%B9%E5%A4%9A/",{loader:()=>a(()=>import("./index.html-BDYTahqh.js"),__vite__mapDeps([3332,1])),meta:{t:"标签: 单向一对多",I:!1}}],["/tag/%E6%98%A0%E5%B0%84/",{loader:()=>a(()=>import("./index.html-Dqlf_MWO.js"),__vite__mapDeps([3333,1])),meta:{t:"标签: 映射",I:!1}}],["/tag/spies/",{loader:()=>a(()=>import("./index.html-DCEFzR8t.js"),__vite__mapDeps([3334,1])),meta:{t:"标签: Spies",I:!1}}],["/tag/api-first-development/",{loader:()=>a(()=>import("./index.html-CDddXHNP.js"),__vite__mapDeps([3335,1])),meta:{t:"标签: API-First Development",I:!1}}],["/tag/agile-development/",{loader:()=>a(()=>import("./index.html-dNvJiDhF.js"),__vite__mapDeps([3336,1])),meta:{t:"标签: Agile Development",I:!1}}],["/tag/bson/",{loader:()=>a(()=>import("./index.html-GVSCA9fP.js"),__vite__mapDeps([3337,1])),meta:{t:"标签: BSON",I:!1}}],["/tag/filter/",{loader:()=>a(()=>import("./index.html-BkgR5qnm.js"),__vite__mapDeps([3338,1])),meta:{t:"标签: Filter",I:!1}}],["/tag/java-driver/",{loader:()=>a(()=>import("./index.html-CONrikxt.js"),__vite__mapDeps([3339,1])),meta:{t:"标签: Java Driver",I:!1}}],["/tag/domain-driven-design/",{loader:()=>a(()=>import("./index.html-C2dp2v7O.js"),__vite__mapDeps([3340,1])),meta:{t:"标签: Domain-Driven Design",I:!1}}],["/tag/object-oriented-programming/",{loader:()=>a(()=>import("./index.html-BSk_9qRQ.js"),__vite__mapDeps([3341,1])),meta:{t:"标签: Object-Oriented Programming",I:!1}}],["/tag/oidc/",{loader:()=>a(()=>import("./index.html-rRk86bUz.js"),__vite__mapDeps([3342,1])),meta:{t:"标签: OIDC",I:!1}}],["/tag/swagger-ui/",{loader:()=>a(()=>import("./index.html-BRvm5kBr.js"),__vite__mapDeps([3343,1])),meta:{t:"标签: Swagger-UI",I:!1}}],["/tag/url-prefix/",{loader:()=>a(()=>import("./index.html-CCOaZG_f.js"),__vite__mapDeps([3344,1])),meta:{t:"标签: URL Prefix",I:!1}}],["/tag/spring-cloud/",{loader:()=>a(()=>import("./index.html-l9NyOFNn.js"),__vite__mapDeps([3345,1])),meta:{t:"标签: Spring Cloud",I:!1}}],["/tag/feign-client/",{loader:()=>a(()=>import("./index.html-DJbpQFyP.js"),__vite__mapDeps([3346,1])),meta:{t:"标签: Feign Client",I:!1}}],["/tag/collection/",{loader:()=>a(()=>import("./index.html-MKqQkRfK.js"),__vite__mapDeps([3347,1])),meta:{t:"标签: Collection",I:!1}}],["/tag/%E5%A4%8D%E5%88%B6/",{loader:()=>a(()=>import("./index.html-CEAYizWZ.js"),__vite__mapDeps([3348,1])),meta:{t:"标签: 复制",I:!1}}],["/tag/java-records/",{loader:()=>a(()=>import("./index.html-fatGLvb-.js"),__vite__mapDeps([3349,1])),meta:{t:"标签: Java Records",I:!1}}],["/tag/custom-constructor/",{loader:()=>a(()=>import("./index.html-CjoFEGGn.js"),__vite__mapDeps([3350,1])),meta:{t:"标签: Custom Constructor",I:!1}}],["/tag/lightrun/",{loader:()=>a(()=>import("./index.html-B99W8CCI.js"),__vite__mapDeps([3351,1])),meta:{t:"标签: Lightrun",I:!1}}],["/tag/spring-method-annotations/",{loader:()=>a(()=>import("./index.html-By5EV8Lo.js"),__vite__mapDeps([3352,1])),meta:{t:"标签: Spring Method Annotations",I:!1}}],["/tag/fluent-interface/",{loader:()=>a(()=>import("./index.html-KaQa7C2T.js"),__vite__mapDeps([3353,1])),meta:{t:"标签: Fluent Interface",I:!1}}],["/tag/javac/",{loader:()=>a(()=>import("./index.html-BJLHm9N6.js"),__vite__mapDeps([3354,1])),meta:{t:"标签: javac",I:!1}}],["/tag/eclipse/",{loader:()=>a(()=>import("./index.html-Cm9PKjCX.js"),__vite__mapDeps([3355,1])),meta:{t:"标签: Eclipse",I:!1}}],["/tag/oop/",{loader:()=>a(()=>import("./index.html-BKIGaAB_.js"),__vite__mapDeps([3356,1])),meta:{t:"标签: OOP",I:!1}}],["/tag/jsoup/",{loader:()=>a(()=>import("./index.html-Dk7QZH8Y.js"),__vite__mapDeps([3357,1])),meta:{t:"标签: Jsoup",I:!1}}],["/tag/httpurlconnection/",{loader:()=>a(()=>import("./index.html-BoxwfJV7.js"),__vite__mapDeps([3358,1])),meta:{t:"标签: HttpURLConnection",I:!1}}],["/tag/%E4%BE%9D%E8%B5%96%E6%8E%92%E9%99%A4/",{loader:()=>a(()=>import("./index.html--wK4zOPo.js"),__vite__mapDeps([3359,1])),meta:{t:"标签: 依赖排除",I:!1}}],["/tag/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/",{loader:()=>a(()=>import("./index.html-DGxcTHmI.js"),__vite__mapDeps([3360,1])),meta:{t:"标签: 文件系统",I:!1}}],["/tag/%E6%A1%8C%E9%9D%A2%E8%B7%AF%E5%BE%84/",{loader:()=>a(()=>import("./index.html-DUgO4N0z.js"),__vite__mapDeps([3361,1])),meta:{t:"标签: 桌面路径",I:!1}}],["/tag/jni/",{loader:()=>a(()=>import("./index.html-DPUyb5cQ.js"),__vite__mapDeps([3362,1])),meta:{t:"标签: JNI",I:!1}}],["/tag/foreign-function/",{loader:()=>a(()=>import("./index.html-BtJM0uUj.js"),__vite__mapDeps([3363,1])),meta:{t:"标签: Foreign Function",I:!1}}],["/tag/memory-api/",{loader:()=>a(()=>import("./index.html-Bg9TOBe-.js"),__vite__mapDeps([3364,1])),meta:{t:"标签: Memory API",I:!1}}],["/tag/duplicate-keys/",{loader:()=>a(()=>import("./index.html-DPCif3_k.js"),__vite__mapDeps([3365,1])),meta:{t:"标签: Duplicate Keys",I:!1}}],["/tag/post%E8%AF%B7%E6%B1%82/",{loader:()=>a(()=>import("./index.html-haB5N_k0.js"),__vite__mapDeps([3366,1])),meta:{t:"标签: POST请求",I:!1}}],["/tag/%E5%8E%9F%E5%A7%8B%E6%95%B0%E6%8D%AE/",{loader:()=>a(()=>import("./index.html-C-a3PUGh.js"),__vite__mapDeps([3367,1])),meta:{t:"标签: 原始数据",I:!1}}],["/tag/redis/",{loader:()=>a(()=>import("./index.html-CPJ51UEo.js"),__vite__mapDeps([3368,1])),meta:{t:"标签: Redis",I:!1}}],["/tag/ttl/",{loader:()=>a(()=>import("./index.html-2kKaYEWC.js"),__vite__mapDeps([3369,1])),meta:{t:"标签: TTL",I:!1}}],["/tag/session/",{loader:()=>a(()=>import("./index.html-ceCtGE4F.js"),__vite__mapDeps([3370,1])),meta:{t:"标签: Session",I:!1}}],["/tag/tostring()/",{loader:()=>a(()=>import("./index.html-BDXmWhDY.js"),__vite__mapDeps([3371,1])),meta:{t:"标签: toString()",I:!1}}],["/tag/java-enum/",{loader:()=>a(()=>import("./index.html-CIzXNB7B.js"),__vite__mapDeps([3372,1])),meta:{t:"标签: Java Enum",I:!1}}],["/tag/interface-driven-development/",{loader:()=>a(()=>import("./index.html-78Jv0B3W.js"),__vite__mapDeps([3373,1])),meta:{t:"标签: Interface Driven Development",I:!1}}],["/tag/idd/",{loader:()=>a(()=>import("./index.html-WbVLRZLG.js"),__vite__mapDeps([3374,1])),meta:{t:"标签: IDD",I:!1}}],["/tag/design-patterns/",{loader:()=>a(()=>import("./index.html-pnsT-of7.js"),__vite__mapDeps([3375,1])),meta:{t:"标签: Design Patterns",I:!1}}],["/tag/questdb/",{loader:()=>a(()=>import("./index.html-CTdUd7cG.js"),__vite__mapDeps([3376,1])),meta:{t:"标签: QuestDB",I:!1}}],["/tag/%E6%95%B0%E6%8D%AE%E5%BA%93/",{loader:()=>a(()=>import("./index.html-DeN5S5tH.js"),__vite__mapDeps([3377,1])),meta:{t:"标签: 数据库",I:!1}}],["/tag/aes/",{loader:()=>a(()=>import("./index.html-D3Ome75_.js"),__vite__mapDeps([3378,1])),meta:{t:"标签: AES",I:!1}}],["/tag/decryption/",{loader:()=>a(()=>import("./index.html-52c3i5qv.js"),__vite__mapDeps([3379,1])),meta:{t:"标签: Decryption",I:!1}}],["/tag/gatling/",{loader:()=>a(()=>import("./index.html-DupsTlBc.js"),__vite__mapDeps([3380,1])),meta:{t:"标签: Gatling",I:!1}}],["/tag/load-testing/",{loader:()=>a(()=>import("./index.html-CX28CK3M.js"),__vite__mapDeps([3381,1])),meta:{t:"标签: Load Testing",I:!1}}],["/tag/rest-endpoint/",{loader:()=>a(()=>import("./index.html-DCBkHMF9.js"),__vite__mapDeps([3382,1])),meta:{t:"标签: REST Endpoint",I:!1}}],["/tag/performance-testing/",{loader:()=>a(()=>import("./index.html-tc4bSvjL.js"),__vite__mapDeps([3383,1])),meta:{t:"标签: Performance Testing",I:!1}}],["/tag/jenv/",{loader:()=>a(()=>import("./index.html-C_FPG32-.js"),__vite__mapDeps([3384,1])),meta:{t:"标签: jEnv",I:!1}}],["/tag/java-development/",{loader:()=>a(()=>import("./index.html-06XN9Pzx.js"),__vite__mapDeps([3385,1])),meta:{t:"标签: Java Development",I:!1}}],["/tag/maven-reactor/",{loader:()=>a(()=>import("./index.html-T0JXwxHb.js"),__vite__mapDeps([3386,1])),meta:{t:"标签: Maven Reactor",I:!1}}],["/tag/%E5%A4%9A%E6%A8%A1%E5%9D%97%E9%A1%B9%E7%9B%AE/",{loader:()=>a(()=>import("./index.html-Bge9ZcX8.js"),__vite__mapDeps([3387,1])),meta:{t:"标签: 多模块项目",I:!1}}],["/tag/collections/",{loader:()=>a(()=>import("./index.html-BJP0h89m.js"),__vite__mapDeps([3388,1])),meta:{t:"标签: Collections",I:!1}}],["/tag/%E6%97%8B%E8%BD%AC/",{loader:()=>a(()=>import("./index.html-I5rtxjKd.js"),__vite__mapDeps([3389,1])),meta:{t:"标签: 旋转",I:!1}}],["/tag/%E4%BA%A4%E6%8D%A2/",{loader:()=>a(()=>import("./index.html-H68XKuDA.js"),__vite__mapDeps([3390,1])),meta:{t:"标签: 交换",I:!1}}],["/tag/crud/",{loader:()=>a(()=>import("./index.html-DwxpHsHV.js"),__vite__mapDeps([3391,1])),meta:{t:"标签: CRUD",I:!1}}],["/tag/pipeline/",{loader:()=>a(()=>import("./index.html-CHdvfeKO.js"),__vite__mapDeps([3392,1])),meta:{t:"标签: Pipeline",I:!1}}],["/tag/form-url-encoded/",{loader:()=>a(()=>import("./index.html-BbWMMUsm.js"),__vite__mapDeps([3393,1])),meta:{t:"标签: form-url-encoded",I:!1}}],["/tag/post/",{loader:()=>a(()=>import("./index.html-Bdp-IChI.js"),__vite__mapDeps([3394,1])),meta:{t:"标签: POST",I:!1}}],["/tag/serverless/",{loader:()=>a(()=>import("./index.html-l_t1U9LE.js"),__vite__mapDeps([3395,1])),meta:{t:"标签: Serverless",I:!1}}],["/tag/deployment/",{loader:()=>a(()=>import("./index.html-C6tdv5kx.js"),__vite__mapDeps([3396,1])),meta:{t:"标签: Deployment",I:!1}}],["/tag/listeners/",{loader:()=>a(()=>import("./index.html-ClQPZ3vq.js"),__vite__mapDeps([3397,1])),meta:{t:"标签: Listeners",I:!1}}],["/tag/access-control/",{loader:()=>a(()=>import("./index.html-By8vQ-dg.js"),__vite__mapDeps([3398,1])),meta:{t:"标签: Access Control",I:!1}}],["/tag/primary-key/",{loader:()=>a(()=>import("./index.html-CBMoQcMA.js"),__vite__mapDeps([3399,1])),meta:{t:"标签: Primary Key",I:!1}}],["/tag/database-design/",{loader:()=>a(()=>import("./index.html-C-a8gkD7.js"),__vite__mapDeps([3400,1])),meta:{t:"标签: Database Design",I:!1}}],["/tag/%E7%A7%81%E6%9C%89%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/",{loader:()=>a(()=>import("./index.html-CrU2KYxz.js"),__vite__mapDeps([3401,1])),meta:{t:"标签: 私有构造函数",I:!1}}],["/tag/%E5%8F%8D%E5%B0%84api/",{loader:()=>a(()=>import("./index.html-By7QlB-D.js"),__vite__mapDeps([3402,1])),meta:{t:"标签: 反射API",I:!1}}],["/tag/datastax-java-driver/",{loader:()=>a(()=>import("./index.html-B79dUgqp.js"),__vite__mapDeps([3403,1])),meta:{t:"标签: DataStax Java Driver",I:!1}}],["/tag/object-mapping/",{loader:()=>a(()=>import("./index.html-BFw1CI49.js"),__vite__mapDeps([3404,1])),meta:{t:"标签: Object Mapping",I:!1}}],["/tag/%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6/",{loader:()=>a(()=>import("./index.html-DWWFGDrZ.js"),__vite__mapDeps([3405,1])),meta:{t:"标签: 十六进制",I:!1}}],["/tag/rgb/",{loader:()=>a(()=>import("./index.html-BgB2xl_W.js"),__vite__mapDeps([3406,1])),meta:{t:"标签: RGB",I:!1}}],["/tag/%E5%8A%A8%E6%80%81%E9%98%9F%E5%88%97/",{loader:()=>a(()=>import("./index.html-BI7uHFdb.js"),__vite__mapDeps([3407,1])),meta:{t:"标签: 动态队列",I:!1}}],["/tag/class.forname()/",{loader:()=>a(()=>import("./index.html-DC56qYA5.js"),__vite__mapDeps([3408,1])),meta:{t:"标签: Class.forName()",I:!1}}],["/tag/newinstance()/",{loader:()=>a(()=>import("./index.html-8E17VxQi.js"),__vite__mapDeps([3409,1])),meta:{t:"标签: newInstance()",I:!1}}],["/tag/findallby/",{loader:()=>a(()=>import("./index.html-CVGQe8Q3.js"),__vite__mapDeps([3410,1])),meta:{t:"标签: findAllBy",I:!1}}],["/tag/java.util.regex/",{loader:()=>a(()=>import("./index.html-CtX6TeX3.js"),__vite__mapDeps([3411,1])),meta:{t:"标签: java.util.regex",I:!1}}],["/tag/java.util.scanner/",{loader:()=>a(()=>import("./index.html-CES36aca.js"),__vite__mapDeps([3412,1])),meta:{t:"标签: java.util.Scanner",I:!1}}],["/tag/string-split/",{loader:()=>a(()=>import("./index.html-CZR9VGB2.js"),__vite__mapDeps([2811,1])),meta:{t:"标签: String split",I:!1}}],["/tag/duplicates/",{loader:()=>a(()=>import("./index.html-CLPRKCMP.js"),__vite__mapDeps([3413,1])),meta:{t:"标签: Duplicates",I:!1}}],["/tag/jdbctemplate/",{loader:()=>a(()=>import("./index.html-Dxub32Ug.js"),__vite__mapDeps([3414,1])),meta:{t:"标签: JdbcTemplate",I:!1}}],["/tag/emptyresultdataaccessexception/",{loader:()=>a(()=>import("./index.html-DZsw0PlJ.js"),__vite__mapDeps([3415,1])),meta:{t:"标签: EmptyResultDataAccessException",I:!1}}],["/tag/rethinkdb/",{loader:()=>a(()=>import("./index.html-BK6OwiDL.js"),__vite__mapDeps([3416,1])),meta:{t:"标签: RethinkDB",I:!1}}],["/tag/real-time/",{loader:()=>a(()=>import("./index.html-DUXTux5r.js"),__vite__mapDeps([3417,1])),meta:{t:"标签: Real-time",I:!1}}],["/tag/applicationcontext/",{loader:()=>a(()=>import("./index.html-jyH0pXrG.js"),__vite__mapDeps([3418,1])),meta:{t:"标签: ApplicationContext",I:!1}}],["/tag/http%E5%AE%A2%E6%88%B7%E7%AB%AF/",{loader:()=>a(()=>import("./index.html-U7OL4oFR.js"),__vite__mapDeps([3419,1])),meta:{t:"标签: HTTP客户端",I:!1}}],["/tag/api%E6%B5%8B%E8%AF%95/",{loader:()=>a(()=>import("./index.html-CjBAgSOw.js"),__vite__mapDeps([3420,1])),meta:{t:"标签: API测试",I:!1}}],["/tag/map-merging/",{loader:()=>a(()=>import("./index.html-9S9uHERF.js"),__vite__mapDeps([3421,1])),meta:{t:"标签: Map Merging",I:!1}}],["/tag/funqy/",{loader:()=>a(()=>import("./index.html-CaEExTa3.js"),__vite__mapDeps([3422,1])),meta:{t:"标签: Funqy",I:!1}}],["/tag/%E6%8A%A5%E5%91%8A/",{loader:()=>a(()=>import("./index.html-CNgTCgQh.js"),__vite__mapDeps([3423,1])),meta:{t:"标签: 报告",I:!1}}],["/tag/%E5%88%9D%E5%A7%8B%E5%8C%96/",{loader:()=>a(()=>import("./index.html-Crxh6HgD.js"),__vite__mapDeps([3424,1])),meta:{t:"标签: 初始化",I:!1}}],["/tag/roaring-bitmap/",{loader:()=>a(()=>import("./index.html-BcTcIBaS.js"),__vite__mapDeps([3425,1])),meta:{t:"标签: Roaring Bitmap",I:!1}}],["/tag/bitset/",{loader:()=>a(()=>import("./index.html-Cb53PwVx.js"),__vite__mapDeps([3426,1])),meta:{t:"标签: BitSet",I:!1}}],["/tag/web-applications/",{loader:()=>a(()=>import("./index.html-Ls-YRayV.js"),__vite__mapDeps([3427,1])),meta:{t:"标签: Web Applications",I:!1}}],["/tag/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/",{loader:()=>a(()=>import("./index.html-DGY91LE4.js"),__vite__mapDeps([3428,1])),meta:{t:"标签: 内存管理",I:!1}}],["/tag/opentelemetry/",{loader:()=>a(()=>import("./index.html-h8kyElDt.js"),__vite__mapDeps([3429,1])),meta:{t:"标签: OpenTelemetry",I:!1}}],["/tag/%E5%BE%AE%E6%9C%8D%E5%8A%A1/",{loader:()=>a(()=>import("./index.html-DuFVeDHO.js"),__vite__mapDeps([3430,1])),meta:{t:"标签: 微服务",I:!1}}],["/tag/%E8%BF%BD%E8%B8%AA/",{loader:()=>a(()=>import("./index.html-vdiHQX68.js"),__vite__mapDeps([3431,1])),meta:{t:"标签: 追踪",I:!1}}],["/tag/apache-pdfbox/",{loader:()=>a(()=>import("./index.html-Ci5u-8Xg.js"),__vite__mapDeps([3432,1])),meta:{t:"标签: Apache PDFBox",I:!1}}],["/tag/itext/",{loader:()=>a(()=>import("./index.html-BIDUgASU.js"),__vite__mapDeps([3433,1])),meta:{t:"标签: iText",I:!1}}],["/tag/absolute-difference/",{loader:()=>a(()=>import("./index.html-BgCDvyQl.js"),__vite__mapDeps([3434,1])),meta:{t:"标签: Absolute Difference",I:!1}}],["/tag/overflow/",{loader:()=>a(()=>import("./index.html-houa6i4m.js"),__vite__mapDeps([3435,1])),meta:{t:"标签: Overflow",I:!1}}],["/tag/underflow/",{loader:()=>a(()=>import("./index.html-Cqktl2to.js"),__vite__mapDeps([3436,1])),meta:{t:"标签: Underflow",I:!1}}],["/tag/assertj/",{loader:()=>a(()=>import("./index.html-C5i-MuLt.js"),__vite__mapDeps([3437,1])),meta:{t:"标签: AssertJ",I:!1}}],["/tag/thread.sleep()/",{loader:()=>a(()=>import("./index.html-B_KOQNKC.js"),__vite__mapDeps([3438,1])),meta:{t:"标签: Thread.sleep()",I:!1}}],["/tag/awaitility.await()/",{loader:()=>a(()=>import("./index.html-Dl2fmCr1.js"),__vite__mapDeps([3439,1])),meta:{t:"标签: Awaitility.await()",I:!1}}],["/tag/stream.of()/",{loader:()=>a(()=>import("./index.html-BjzuEiFd.js"),__vite__mapDeps([3440,1])),meta:{t:"标签: Stream.of()",I:!1}}],["/tag/intstream.range()/",{loader:()=>a(()=>import("./index.html-whPek5Fm.js"),__vite__mapDeps([3441,1])),meta:{t:"标签: IntStream.range()",I:!1}}],["/tag/ipv4/",{loader:()=>a(()=>import("./index.html-x2UZelKb.js"),__vite__mapDeps([3442,1])),meta:{t:"标签: IPv4",I:!1}}],["/tag/array/",{loader:()=>a(()=>import("./index.html-BE3_R9ly.js"),__vite__mapDeps([2356,1])),meta:{t:"标签: array",I:!1}}],["/tag/method-parameters/",{loader:()=>a(()=>import("./index.html-Dg1NdcUh.js"),__vite__mapDeps([3443,1])),meta:{t:"标签: method parameters",I:!1}}],["/tag/aot/",{loader:()=>a(()=>import("./index.html-CiWvC53G.js"),__vite__mapDeps([3444,1])),meta:{t:"标签: AOT",I:!1}}],["/tag/performance-optimization/",{loader:()=>a(()=>import("./index.html-C8Kt6dN8.js"),__vite__mapDeps([3445,1])),meta:{t:"标签: Performance Optimization",I:!1}}],["/tag/case-insensitive/",{loader:()=>a(()=>import("./index.html-Dr4duTyW.js"),__vite__mapDeps([3446,1])),meta:{t:"标签: Case-Insensitive",I:!1}}],["/tag/search/",{loader:()=>a(()=>import("./index.html-DHOr13-7.js"),__vite__mapDeps([3447,1])),meta:{t:"标签: Search",I:!1}}],["/tag/null-check/",{loader:()=>a(()=>import("./index.html-D5CKQ3ci.js"),__vite__mapDeps([3448,1])),meta:{t:"标签: null check",I:!1}}],["/tag/reflection/",{loader:()=>a(()=>import("./index.html-DBytiBt5.js"),__vite__mapDeps([2599,1])),meta:{t:"标签: reflection",I:!1}}],["/tag/commandline/",{loader:()=>a(()=>import("./index.html-Q5WYHE8-.js"),__vite__mapDeps([3449,1])),meta:{t:"标签: CommandLine",I:!1}}],["/tag/arguments/",{loader:()=>a(()=>import("./index.html-CNUTooIF.js"),__vite__mapDeps([3450,1])),meta:{t:"标签: Arguments",I:!1}}],["/tag/null-check/",{loader:()=>a(()=>import("./index.html-D5CKQ3ci.js"),__vite__mapDeps([3448,1])),meta:{t:"标签: Null Check",I:!1}}],["/tag/%E7%B1%BB%E6%96%B9%E6%B3%95/",{loader:()=>a(()=>import("./index.html-DEgllOBH.js"),__vite__mapDeps([3451,1])),meta:{t:"标签: 类方法",I:!1}}],["/tag/%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95/",{loader:()=>a(()=>import("./index.html-LlN0vVGB.js"),__vite__mapDeps([3452,1])),meta:{t:"标签: 实例方法",I:!1}}],["/tag/jar-comparison/",{loader:()=>a(()=>import("./index.html-uXs0Juh2.js"),__vite__mapDeps([3453,1])),meta:{t:"标签: JAR Comparison",I:!1}}],["/tag/java-tools/",{loader:()=>a(()=>import("./index.html-DlHZeC_H.js"),__vite__mapDeps([3454,1])),meta:{t:"标签: Java Tools",I:!1}}],["/tag/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%AF%94%E8%BE%83/",{loader:()=>a(()=>import("./index.html-D9XyTmIO.js"),__vite__mapDeps([3455,1])),meta:{t:"标签: 字符串比较",I:!1}}],["/tag/javacompiler-api/",{loader:()=>a(()=>import("./index.html-DGFGZE0f.js"),__vite__mapDeps([3456,1])),meta:{t:"标签: JavaCompiler API",I:!1}}],["/tag/%E5%8A%A8%E6%80%81%E7%BC%96%E8%AF%91/",{loader:()=>a(()=>import("./index.html-n8ZCtFpi.js"),__vite__mapDeps([3457,1])),meta:{t:"标签: 动态编译",I:!1}}],["/tag/char/",{loader:()=>a(()=>import("./index.html-DhM6oIk_.js"),__vite__mapDeps([3458,1])),meta:{t:"标签: Char",I:!1}}],["/tag/multipartfile/",{loader:()=>a(()=>import("./index.html-Bx29tomA.js"),__vite__mapDeps([3459,1])),meta:{t:"标签: MultipartFile",I:!1}}],["/tag/base-conversion/",{loader:()=>a(()=>import("./index.html-DRqP5DLD.js"),__vite__mapDeps([3460,1])),meta:{t:"标签: Base Conversion",I:!1}}],["/tag/integer-class/",{loader:()=>a(()=>import("./index.html-Xc51PG_a.js"),__vite__mapDeps([3461,1])),meta:{t:"标签: Integer Class",I:!1}}],["/tag/int-array/",{loader:()=>a(()=>import("./index.html-DshNkwxU.js"),__vite__mapDeps([2825,1])),meta:{t:"标签: int Array",I:!1}}],["/tag/findtop()/",{loader:()=>a(()=>import("./index.html-BfYjJn0B.js"),__vite__mapDeps([3462,1])),meta:{t:"标签: findTop()",I:!1}}],["/tag/uri%E7%BC%96%E7%A0%81/",{loader:()=>a(()=>import("./index.html-OYe8GcMe.js"),__vite__mapDeps([3463,1])),meta:{t:"标签: URI编码",I:!1}}],["/tag/resttemplate/",{loader:()=>a(()=>import("./index.html-BOGWX0tI.js"),__vite__mapDeps([3464,1])),meta:{t:"标签: RestTemplate",I:!1}}],["/tag/flyway/",{loader:()=>a(()=>import("./index.html-DDsir6-0.js"),__vite__mapDeps([3465,1])),meta:{t:"标签: Flyway",I:!1}}],["/tag/migrations/",{loader:()=>a(()=>import("./index.html-RqSoxc9u.js"),__vite__mapDeps([3466,1])),meta:{t:"标签: Migrations",I:!1}}],["/tag/forname/",{loader:()=>a(()=>import("./index.html-BJaK2y-6.js"),__vite__mapDeps([3467,1])),meta:{t:"标签: forName",I:!1}}],["/tag/newinstance/",{loader:()=>a(()=>import("./index.html-DSEA-XsC.js"),__vite__mapDeps([3468,1])),meta:{t:"标签: newInstance",I:!1}}],["/tag/kafka-consumer/",{loader:()=>a(()=>import("./index.html-CPV8pwoj.js"),__vite__mapDeps([2414,1])),meta:{t:"标签: Kafka Consumer",I:!1}}],["/tag/linkedlist/",{loader:()=>a(()=>import("./index.html-Da7Vs-WZ.js"),__vite__mapDeps([3469,1])),meta:{t:"标签: LinkedList",I:!1}}],["/tag/when/",{loader:()=>a(()=>import("./index.html-CcIm1Tcs.js"),__vite__mapDeps([3470,1])),meta:{t:"标签: when",I:!1}}],["/tag/anonymous-class/",{loader:()=>a(()=>import("./index.html-DQR82J9v.js"),__vite__mapDeps([3471,1])),meta:{t:"标签: Anonymous Class",I:!1}}],["/tag/monad/",{loader:()=>a(()=>import("./index.html-C9txtKfH.js"),__vite__mapDeps([3472,1])),meta:{t:"标签: Monad",I:!1}}],["/tag/restexpress/",{loader:()=>a(()=>import("./index.html--EJKhYgQ.js"),__vite__mapDeps([3473,1])),meta:{t:"标签: RestExpress",I:!1}}],["/tag/record-patterns/",{loader:()=>a(()=>import("./index.html-gJAww62I.js"),__vite__mapDeps([3474,1])),meta:{t:"标签: Record Patterns",I:!1}}],["/tag/%E6%97%A5%E5%BF%97/",{loader:()=>a(()=>import("./index.html-C7prz1_o.js"),__vite__mapDeps([3475,1])),meta:{t:"标签: 日志",I:!1}}],["/tag/root-url-mapping/",{loader:()=>a(()=>import("./index.html-C4mLaoQl.js"),__vite__mapDeps([3476,1])),meta:{t:"标签: Root URL Mapping",I:!1}}],["/tag/triple/",{loader:()=>a(()=>import("./index.html-CMJINi_h.js"),__vite__mapDeps([3477,1])),meta:{t:"标签: Triple",I:!1}}],["/tag/iterable/",{loader:()=>a(()=>import("./index.html-mILyU8Wx.js"),__vite__mapDeps([3478,1])),meta:{t:"标签: Iterable",I:!1}}],["/tag/structured-concurrency/",{loader:()=>a(()=>import("./index.html-TNP2uIuH.js"),__vite__mapDeps([3479,1])),meta:{t:"标签: Structured Concurrency",I:!1}}],["/tag/%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/",{loader:()=>a(()=>import("./index.html-BMxg6Bpd.js"),__vite__mapDeps([3480,1])),meta:{t:"标签: 运行时数据区",I:!1}}],["/tag/%E5%A4%9A%E4%BB%93%E5%BA%93%E7%AE%A1%E7%90%86/",{loader:()=>a(()=>import("./index.html-CMuF70z1.js"),__vite__mapDeps([3481,1])),meta:{t:"标签: 多仓库管理",I:!1}}],["/tag/any()/",{loader:()=>a(()=>import("./index.html-CMnSjWjc.js"),__vite__mapDeps([3482,1])),meta:{t:"标签: any()",I:!1}}],["/tag/all()/",{loader:()=>a(()=>import("./index.html-PMDQyeGR.js"),__vite__mapDeps([3483,1])),meta:{t:"标签: all()",I:!1}}],["/tag/none()/",{loader:()=>a(()=>import("./index.html-CmL26rfI.js"),__vite__mapDeps([3484,1])),meta:{t:"标签: none()",I:!1}}],["/tag/credhub/",{loader:()=>a(()=>import("./index.html-CGXevLOT.js"),__vite__mapDeps([3485,1])),meta:{t:"标签: CredHub",I:!1}}],["/tag/instanceof/",{loader:()=>a(()=>import("./index.html-BNpg8JlU.js"),__vite__mapDeps([3486,1])),meta:{t:"标签: instanceof",I:!1}}],["/tag/%E6%9B%BF%E4%BB%A3%E6%96%B9%E6%A1%88/",{loader:()=>a(()=>import("./index.html-CiLZnD7w.js"),__vite__mapDeps([3487,1])),meta:{t:"标签: 替代方案",I:!1}}],["/tag/expiry/",{loader:()=>a(()=>import("./index.html-BDNREtmb.js"),__vite__mapDeps([3488,1])),meta:{t:"标签: Expiry",I:!1}}],["/tag/java%E5%8A%A0%E5%AF%86/",{loader:()=>a(()=>import("./index.html-CrtEHxQo.js"),__vite__mapDeps([3489,1])),meta:{t:"标签: Java加密",I:!1}}],["/tag/%E5%BC%82%E5%B8%B8/",{loader:()=>a(()=>import("./index.html-C8WytyJ0.js"),__vite__mapDeps([3490,1])),meta:{t:"标签: 异常",I:!1}}],["/tag/%E5%8C%BF%E5%90%8D%E7%B1%BB/",{loader:()=>a(()=>import("./index.html-CF50h40h.js"),__vite__mapDeps([3491,1])),meta:{t:"标签: 匿名类",I:!1}}],["/tag/char/",{loader:()=>a(()=>import("./index.html-DhM6oIk_.js"),__vite__mapDeps([3458,1])),meta:{t:"标签: char",I:!1}}],["/tag/list-of-maps/",{loader:()=>a(()=>import("./index.html-Bi3eMUcn.js"),__vite__mapDeps([3492,1])),meta:{t:"标签: List of Maps",I:!1}}],["/tag/map-grouping/",{loader:()=>a(()=>import("./index.html-CQtnT6j6.js"),__vite__mapDeps([3493,1])),meta:{t:"标签: Map Grouping",I:!1}}],["/tag/java-9/",{loader:()=>a(()=>import("./index.html-CdN7FKKS.js"),__vite__mapDeps([3494,1])),meta:{t:"标签: Java 9",I:!1}}],["/tag/map.of()/",{loader:()=>a(()=>import("./index.html-DGzfaK-h.js"),__vite__mapDeps([3495,1])),meta:{t:"标签: Map.of()",I:!1}}],["/tag/map.ofentries()/",{loader:()=>a(()=>import("./index.html-D5TfUJFl.js"),__vite__mapDeps([3496,1])),meta:{t:"标签: Map.ofEntries()",I:!1}}],["/tag/throwable/",{loader:()=>a(()=>import("./index.html-DOmg18oG.js"),__vite__mapDeps([3497,1])),meta:{t:"标签: Throwable",I:!1}}],["/tag/error/",{loader:()=>a(()=>import("./index.html-v9f_FPm_.js"),__vite__mapDeps([2979,1])),meta:{t:"标签: Error",I:!1}}],["/tag/bash/",{loader:()=>a(()=>import("./index.html-B12CfgSa.js"),__vite__mapDeps([3498,1])),meta:{t:"标签: Bash",I:!1}}],["/tag/unzip/",{loader:()=>a(()=>import("./index.html-B2rLVxxn.js"),__vite__mapDeps([3499,1])),meta:{t:"标签: unzip",I:!1}}],["/tag/executable-jar/",{loader:()=>a(()=>import("./index.html-BRBEp6ye.js"),__vite__mapDeps([3500,1])),meta:{t:"标签: Executable JAR",I:!1}}],["/tag/form-login/",{loader:()=>a(()=>import("./index.html-DKYqN3rc.js"),__vite__mapDeps([3501,1])),meta:{t:"标签: Form Login",I:!1}}],["/tag/basic-authentication/",{loader:()=>a(()=>import("./index.html-Cc0i4nAb.js"),__vite__mapDeps([3502,1])),meta:{t:"标签: Basic Authentication",I:!1}}],["/tag/functor/",{loader:()=>a(()=>import("./index.html-ClHapl_C.js"),__vite__mapDeps([3503,1])),meta:{t:"标签: Functor",I:!1}}],["/tag/blaze-persistence/",{loader:()=>a(()=>import("./index.html-Di8dc1b4.js"),__vite__mapDeps([3504,1])),meta:{t:"标签: Blaze Persistence",I:!1}}],["/tag/jsonobject/",{loader:()=>a(()=>import("./index.html-DR0CJ_al.js"),__vite__mapDeps([3505,1])),meta:{t:"标签: JSONObject",I:!1}}],["/tag/split/",{loader:()=>a(()=>import("./index.html-CaQvZu_U.js"),__vite__mapDeps([3506,1])),meta:{t:"标签: split",I:!1}}],["/tag/browser-automation/",{loader:()=>a(()=>import("./index.html-pCuvu2tp.js"),__vite__mapDeps([3507,1])),meta:{t:"标签: Browser Automation",I:!1}}],["/tag/pecs/",{loader:()=>a(()=>import("./index.html-DzQXViiL.js"),__vite__mapDeps([3508,1])),meta:{t:"标签: PECS",I:!1}}],["/tag/pascal's-triangle/",{loader:()=>a(()=>import("./index.html-Ca6waXRf.js"),__vite__mapDeps([3509,1])),meta:{t:"标签: Pascal's Triangle",I:!1}}],["/tag/auth0/",{loader:()=>a(()=>import("./index.html-BbMTupRM.js"),__vite__mapDeps([3510,1])),meta:{t:"标签: Auth0",I:!1}}],["/tag/couchbase/",{loader:()=>a(()=>import("./index.html-DM4XdbC3.js"),__vite__mapDeps([3511,1])),meta:{t:"标签: Couchbase",I:!1}}],["/tag/graphql/",{loader:()=>a(()=>import("./index.html-DblM9oPO.js"),__vite__mapDeps([3512,1])),meta:{t:"标签: GraphQL",I:!1}}],["/tag/grpc/",{loader:()=>a(()=>import("./index.html-CCb66atK.js"),__vite__mapDeps([3513,1])),meta:{t:"标签: gRPC",I:!1}}],["/tag/spring-cloud-gateway/",{loader:()=>a(()=>import("./index.html-0D_-rWQd.js"),__vite__mapDeps([3514,1])),meta:{t:"标签: Spring Cloud Gateway",I:!1}}],["/tag/rate-limiting/",{loader:()=>a(()=>import("./index.html-BQ2oAkZq.js"),__vite__mapDeps([3515,1])),meta:{t:"标签: Rate Limiting",I:!1}}],["/tag/client-ip/",{loader:()=>a(()=>import("./index.html-xCbhgBbw.js"),__vite__mapDeps([3516,1])),meta:{t:"标签: Client IP",I:!1}}],["/tag/thread-safe/",{loader:()=>a(()=>import("./index.html-DbiXliHg.js"),__vite__mapDeps([3517,1])),meta:{t:"标签: Thread-Safe",I:!1}}],["/tag/singleton-bean/",{loader:()=>a(()=>import("./index.html-uj6uh6--.js"),__vite__mapDeps([3518,1])),meta:{t:"标签: Singleton Bean",I:!1}}],["/tag/%E6%A0%88/",{loader:()=>a(()=>import("./index.html-D2Fe_eWC.js"),__vite__mapDeps([3519,1])),meta:{t:"标签: 栈",I:!1}}],["/tag/%E9%98%9F%E5%88%97/",{loader:()=>a(()=>import("./index.html-BmeFzH1V.js"),__vite__mapDeps([3520,1])),meta:{t:"标签: 队列",I:!1}}],["/tag/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BB%84/",{loader:()=>a(()=>import("./index.html-C8hmd0CS.js"),__vite__mapDeps([3521,1])),meta:{t:"标签: 多线程组",I:!1}}],["/tag/workflow/",{loader:()=>a(()=>import("./index.html-Se7By-Yj.js"),__vite__mapDeps([3522,1])),meta:{t:"标签: workflow",I:!1}}],["/tag/bpms/",{loader:()=>a(()=>import("./index.html-BfRkI_IO.js"),__vite__mapDeps([3523,1])),meta:{t:"标签: BPMS",I:!1}}],["/tag/rxjava/",{loader:()=>a(()=>import("./index.html-BgAAUFIC.js"),__vite__mapDeps([3524,1])),meta:{t:"标签: RxJava",I:!1}}],["/tag/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/",{loader:()=>a(()=>import("./index.html-Cz2nLZ-y.js"),__vite__mapDeps([3525,1])),meta:{t:"标签: 性能优化",I:!1}}],["/tag/date-format/",{loader:()=>a(()=>import("./index.html-DoZ-NAvF.js"),__vite__mapDeps([3526,1])),meta:{t:"标签: Date Format",I:!1}}],["/tag/sort/",{loader:()=>a(()=>import("./index.html-aO2h4SfB.js"),__vite__mapDeps([3527,1])),meta:{t:"标签: sort",I:!1}}],["/tag/feignclient/",{loader:()=>a(()=>import("./index.html-BJH0ULt3.js"),__vite__mapDeps([3528,1])),meta:{t:"标签: FeignClient",I:!1}}],["/tag/webclient/",{loader:()=>a(()=>import("./index.html-ChzggmS3.js"),__vite__mapDeps([3529,1])),meta:{t:"标签: WebClient",I:!1}}],["/tag/large-file/",{loader:()=>a(()=>import("./index.html--Ci66W_d.js"),__vite__mapDeps([3530,1])),meta:{t:"标签: Large File",I:!1}}],["/tag/interpolation/",{loader:()=>a(()=>import("./index.html-DsObaOlb.js"),__vite__mapDeps([3531,1])),meta:{t:"标签: Interpolation",I:!1}}],["/tag/lambda-expressions/",{loader:()=>a(()=>import("./index.html-Y8t-Czzo.js"),__vite__mapDeps([3532,1])),meta:{t:"标签: Lambda Expressions",I:!1}}],["/tag/fcm/",{loader:()=>a(()=>import("./index.html-Cov5hF21.js"),__vite__mapDeps([3533,1])),meta:{t:"标签: FCM",I:!1}}],["/tag/push-notifications/",{loader:()=>a(()=>import("./index.html-CLqL8Yqe.js"),__vite__mapDeps([3534,1])),meta:{t:"标签: Push Notifications",I:!1}}],["/tag/watermark/",{loader:()=>a(()=>import("./index.html-O4GzqZUz.js"),__vite__mapDeps([3535,1])),meta:{t:"标签: Watermark",I:!1}}],["/tag/supplier/",{loader:()=>a(()=>import("./index.html-BIlFZxRO.js"),__vite__mapDeps([3536,1])),meta:{t:"标签: Supplier",I:!1}}],["/tag/build-scripts/",{loader:()=>a(()=>import("./index.html-BvTyk0-X.js"),__vite__mapDeps([3537,1])),meta:{t:"标签: Build Scripts",I:!1}}],["/tag/build-automation/",{loader:()=>a(()=>import("./index.html-B2eQXpe7.js"),__vite__mapDeps([3538,1])),meta:{t:"标签: Build Automation",I:!1}}],["/tag/java%E5%BA%94%E7%94%A8/",{loader:()=>a(()=>import("./index.html-C_ogb_-q.js"),__vite__mapDeps([3539,1])),meta:{t:"标签: Java应用",I:!1}}],["/tag/%E5%86%85%E5%AD%98/",{loader:()=>a(()=>import("./index.html-Bx5amRiY.js"),__vite__mapDeps([3540,1])),meta:{t:"标签: 内存",I:!1}}],["/tag/%E5%A0%86%E5%A4%96%E5%86%85%E5%AD%98/",{loader:()=>a(()=>import("./index.html-C60JDMkR.js"),__vite__mapDeps([3541,1])),meta:{t:"标签: 堆外内存",I:!1}}],["/tag/prime-number/",{loader:()=>a(()=>import("./index.html-DEN9_Ccy.js"),__vite__mapDeps([3542,1])),meta:{t:"标签: prime number",I:!1}}],["/tag/algorithm/",{loader:()=>a(()=>import("./index.html-DM14UGU6.js"),__vite__mapDeps([2388,1])),meta:{t:"标签: algorithm",I:!1}}],["/tag/zoneddatetime/",{loader:()=>a(()=>import("./index.html-CANPgU9c.js"),__vite__mapDeps([3543,1])),meta:{t:"标签: ZonedDateTime",I:!1}}],["/tag/string-to-instant/",{loader:()=>a(()=>import("./index.html-BpNYPPWK.js"),__vite__mapDeps([3544,1])),meta:{t:"标签: String to Instant",I:!1}}],["/tag/java.util.date/",{loader:()=>a(()=>import("./index.html-DgcPw6vr.js"),__vite__mapDeps([3545,1])),meta:{t:"标签: java.util.Date",I:!1}}],["/tag/java.sql.date/",{loader:()=>a(()=>import("./index.html-BjwPhUVN.js"),__vite__mapDeps([3546,1])),meta:{t:"标签: java.sql.Date",I:!1}}],["/tag/operating-system/",{loader:()=>a(()=>import("./index.html-SeK-RUVb.js"),__vite__mapDeps([3547,1])),meta:{t:"标签: Operating System",I:!1}}],["/tag/systemutils/",{loader:()=>a(()=>import("./index.html-DSx4Gyi1.js"),__vite__mapDeps([3548,1])),meta:{t:"标签: SystemUtils",I:!1}}],["/tag/endpoints/",{loader:()=>a(()=>import("./index.html-ex0siSff.js"),__vite__mapDeps([3549,1])),meta:{t:"标签: Endpoints",I:!1}}],["/tag/dynamic-configuration/",{loader:()=>a(()=>import("./index.html-DHhBvTOj.js"),__vite__mapDeps([3550,1])),meta:{t:"标签: Dynamic Configuration",I:!1}}],["/tag/template-engine/",{loader:()=>a(()=>import("./index.html-CyqhfE2E.js"),__vite__mapDeps([3551,1])),meta:{t:"标签: Template Engine",I:!1}}],["/tag/expression-types/",{loader:()=>a(()=>import("./index.html-B-qZl3w7.js"),__vite__mapDeps([3552,1])),meta:{t:"标签: Expression Types",I:!1}}],["/tag/non-repeating-character/",{loader:()=>a(()=>import("./index.html-D81_o8hQ.js"),__vite__mapDeps([3553,1])),meta:{t:"标签: Non-Repeating Character",I:!1}}],["/tag/objectid/",{loader:()=>a(()=>import("./index.html-Bg1Nyun6.js"),__vite__mapDeps([3554,1])),meta:{t:"标签: ObjectId",I:!1}}],["/tag/pdfbox/",{loader:()=>a(()=>import("./index.html-0MoYNIsz.js"),__vite__mapDeps([3555,1])),meta:{t:"标签: PDFBox",I:!1}}],["/tag/filters/",{loader:()=>a(()=>import("./index.html-9nD0CT6C.js"),__vite__mapDeps([3556,1])),meta:{t:"标签: Filters",I:!1}}],["/tag/spring-data-mongodb/",{loader:()=>a(()=>import("./index.html-BFnNYwLS.js"),__vite__mapDeps([3557,1])),meta:{t:"标签: Spring Data MongoDB",I:!1}}],["/tag/system.exit/",{loader:()=>a(()=>import("./index.html-BaTPeum9.js"),__vite__mapDeps([3558,1])),meta:{t:"标签: System.exit",I:!1}}],["/tag/java%E8%AF%BE%E7%A8%8B%E8%B4%9F%E8%B4%A3%E4%BA%BA/",{loader:()=>a(()=>import("./index.html-PkepY4OM.js"),__vite__mapDeps([3559,1])),meta:{t:"标签: Java课程负责人",I:!1}}],["/tag/spring%E6%A1%86%E6%9E%B6/",{loader:()=>a(()=>import("./index.html-BE0cfWnr.js"),__vite__mapDeps([3560,1])),meta:{t:"标签: Spring框架",I:!1}}],["/tag/zookeeper/",{loader:()=>a(()=>import("./index.html-BPW6JDw9.js"),__vite__mapDeps([3561,1])),meta:{t:"标签: ZooKeeper",I:!1}}],["/tag/kraft/",{loader:()=>a(()=>import("./index.html-Bm3gAEF1.js"),__vite__mapDeps([3562,1])),meta:{t:"标签: Kraft",I:!1}}],["/tag/api-gateway/",{loader:()=>a(()=>import("./index.html-CAxp5FKg.js"),__vite__mapDeps([3563,1])),meta:{t:"标签: API Gateway",I:!1}}],["/tag/validation-api/",{loader:()=>a(()=>import("./index.html-Loe5fAtF.js"),__vite__mapDeps([3564,1])),meta:{t:"标签: Validation API",I:!1}}],["/tag/spring-cloud-config/",{loader:()=>a(()=>import("./index.html-B9IGIq3B.js"),__vite__mapDeps([3565,1])),meta:{t:"标签: Spring Cloud Config",I:!1}}],["/tag/remote-properties/",{loader:()=>a(()=>import("./index.html-B9yZxNbZ.js"),__vite__mapDeps([3566,1])),meta:{t:"标签: Remote Properties",I:!1}}],["/tag/axon-framework/",{loader:()=>a(()=>import("./index.html-CLIuNi6Q.js"),__vite__mapDeps([3567,1])),meta:{t:"标签: Axon Framework",I:!1}}],["/tag/subarray/",{loader:()=>a(()=>import("./index.html-BRhYdVi0.js"),__vite__mapDeps([3568,1])),meta:{t:"标签: Subarray",I:!1}}],["/tag/%E6%8E%92%E5%BA%8F/",{loader:()=>a(()=>import("./index.html-CMBqaQLH.js"),__vite__mapDeps([3569,1])),meta:{t:"标签: 排序",I:!1}}],["/tag/method-security/",{loader:()=>a(()=>import("./index.html-CxMd5Yyq.js"),__vite__mapDeps([3570,1])),meta:{t:"标签: Method Security",I:!1}}],["/tag/mockitojunitrunner/",{loader:()=>a(()=>import("./index.html-DIoyH_9F.js"),__vite__mapDeps([3571,1])),meta:{t:"标签: MockitoJUnitRunner",I:!1}}],["/tag/soft-reference/",{loader:()=>a(()=>import("./index.html-DqXaRxDJ.js"),__vite__mapDeps([3572,1])),meta:{t:"标签: Soft Reference",I:!1}}],["/tag/weak-reference/",{loader:()=>a(()=>import("./index.html-CgmDfLek.js"),__vite__mapDeps([3573,1])),meta:{t:"标签: Weak Reference",I:!1}}],["/tag/phantom-reference/",{loader:()=>a(()=>import("./index.html-eMx3R7eO.js"),__vite__mapDeps([3574,1])),meta:{t:"标签: Phantom Reference",I:!1}}],["/tag/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/",{loader:()=>a(()=>import("./index.html-BrqVZIse.js"),__vite__mapDeps([3575,1])),meta:{t:"标签: 工厂模式",I:!1}}],["/tag/visitor-pattern/",{loader:()=>a(()=>import("./index.html-mmuwyO1O.js"),__vite__mapDeps([3576,1])),meta:{t:"标签: Visitor Pattern",I:!1}}],["/tag/tablesaw/",{loader:()=>a(()=>import("./index.html-BZxywoay.js"),__vite__mapDeps([3577,1])),meta:{t:"标签: Tablesaw",I:!1}}],["/tag/channels/",{loader:()=>a(()=>import("./index.html-CoXIWRY1.js"),__vite__mapDeps([3578,1])),meta:{t:"标签: Channels",I:!1}}],["/tag/connections/",{loader:()=>a(()=>import("./index.html-DR5NNhvC.js"),__vite__mapDeps([3579,1])),meta:{t:"标签: Connections",I:!1}}],["/tag/mono/",{loader:()=>a(()=>import("./index.html-CWd-X1DP.js"),__vite__mapDeps([3580,1])),meta:{t:"标签: Mono",I:!1}}],["/tag/doonnext/",{loader:()=>a(()=>import("./index.html-D1OhDOjk.js"),__vite__mapDeps([3581,1])),meta:{t:"标签: doOnNext",I:!1}}],["/tag/doonsuccess/",{loader:()=>a(()=>import("./index.html-DlPiNVal.js"),__vite__mapDeps([3582,1])),meta:{t:"标签: doOnSuccess",I:!1}}],["/tag/count-occurrences/",{loader:()=>a(()=>import("./index.html-BV6W4ODn.js"),__vite__mapDeps([3583,1])),meta:{t:"标签: Count Occurrences",I:!1}}],["/tag/coupling/",{loader:()=>a(()=>import("./index.html-BneYbq09.js"),__vite__mapDeps([3584,1])),meta:{t:"标签: Coupling",I:!1}}],["/tag/inversion-of-control/",{loader:()=>a(()=>import("./index.html-DJBeYsuE.js"),__vite__mapDeps([3585,1])),meta:{t:"标签: Inversion of Control",I:!1}}],["/tag/permgen/",{loader:()=>a(()=>import("./index.html-Bb8O8AUV.js"),__vite__mapDeps([3586,1])),meta:{t:"标签: PermGen",I:!1}}],["/tag/enumeration/",{loader:()=>a(()=>import("./index.html-D_bL0-Zi.js"),__vite__mapDeps([3587,1])),meta:{t:"标签: Enumeration",I:!1}}],["/tag/multivaluedmap/",{loader:()=>a(()=>import("./index.html-Ciq3ux3s.js"),__vite__mapDeps([3588,1])),meta:{t:"标签: MultivaluedMap",I:!1}}],["/tag/uri/",{loader:()=>a(()=>import("./index.html-CxSOtqwG.js"),__vite__mapDeps([3589,1])),meta:{t:"标签: URI",I:!1}}],["/tag/mutablestateflow/",{loader:()=>a(()=>import("./index.html-BQv7ONVa.js"),__vite__mapDeps([3590,1])),meta:{t:"标签: MutableStateFlow",I:!1}}],["/tag/value/",{loader:()=>a(()=>import("./index.html-C_-5j3je.js"),__vite__mapDeps([3591,1])),meta:{t:"标签: value",I:!1}}],["/tag/emit/",{loader:()=>a(()=>import("./index.html-aQipBvYz.js"),__vite__mapDeps([3592,1])),meta:{t:"标签: emit",I:!1}}],["/tag/itext7/",{loader:()=>a(()=>import("./index.html-DzhT8tyq.js"),__vite__mapDeps([3593,1])),meta:{t:"标签: iText7",I:!1}}],["/tag/pdf%E7%BC%96%E8%BE%91/",{loader:()=>a(()=>import("./index.html-CQxHX2Ik.js"),__vite__mapDeps([3594,1])),meta:{t:"标签: PDF编辑",I:!1}}],["/tag/gravity-sort/",{loader:()=>a(()=>import("./index.html-CEkv7Pn3.js"),__vite__mapDeps([3595,1])),meta:{t:"标签: Gravity Sort",I:!1}}],["/tag/bead-sort/",{loader:()=>a(()=>import("./index.html-Cz6XAs0a.js"),__vite__mapDeps([3596,1])),meta:{t:"标签: Bead Sort",I:!1}}],["/tag/%E5%AE%B9%E9%94%99/",{loader:()=>a(()=>import("./index.html-CVe1HtKE.js"),__vite__mapDeps([3597,1])),meta:{t:"标签: 容错",I:!1}}],["/tag/%E6%96%AD%E8%B7%AF%E5%99%A8/",{loader:()=>a(()=>import("./index.html-B_A-gPoI.js"),__vite__mapDeps([3598,1])),meta:{t:"标签: 断路器",I:!1}}],["/tag/%E9%87%8D%E8%AF%95/",{loader:()=>a(()=>import("./index.html-Df97dVLX.js"),__vite__mapDeps([3599,1])),meta:{t:"标签: 重试",I:!1}}],["/tag/simple-binary-encoding/",{loader:()=>a(()=>import("./index.html-Cy8EDfdX.js"),__vite__mapDeps([3600,1])),meta:{t:"标签: Simple Binary Encoding",I:!1}}],["/tag/java%E7%BC%96%E7%A0%81/",{loader:()=>a(()=>import("./index.html-DZQ36a1B.js"),__vite__mapDeps([3601,1])),meta:{t:"标签: Java编码",I:!1}}],["/tag/ansi/",{loader:()=>a(()=>import("./index.html-CWgKmheM.js"),__vite__mapDeps([3602,1])),meta:{t:"标签: ANSI",I:!1}}],["/tag/color/",{loader:()=>a(()=>import("./index.html-B-Ul4Ahq.js"),__vite__mapDeps([3603,1])),meta:{t:"标签: Color",I:!1}}],["/tag/console/",{loader:()=>a(()=>import("./index.html-CvXMxsHf.js"),__vite__mapDeps([3604,1])),meta:{t:"标签: Console",I:!1}}],["/tag/infinity/",{loader:()=>a(()=>import("./index.html-BrtKgSzt.js"),__vite__mapDeps([3605,1])),meta:{t:"标签: Infinity",I:!1}}],["/tag/java-literals/",{loader:()=>a(()=>import("./index.html-CNc_IZUY.js"),__vite__mapDeps([3606,1])),meta:{t:"标签: Java Literals",I:!1}}],["/tag/developer/",{loader:()=>a(()=>import("./index.html-CjKyse0B.js"),__vite__mapDeps([3607,1])),meta:{t:"标签: Developer",I:!1}}],["/tag/brainstorming/",{loader:()=>a(()=>import("./index.html-DHPch2Ox.js"),__vite__mapDeps([3608,1])),meta:{t:"标签: Brainstorming",I:!1}}],["/tag/concurrency/",{loader:()=>a(()=>import("./index.html-CDniq8-b.js"),__vite__mapDeps([3609,1])),meta:{t:"标签: Concurrency",I:!1}}],["/tag/properties/",{loader:()=>a(()=>import("./index.html-DCrgQi9-.js"),__vite__mapDeps([3610,1])),meta:{t:"标签: Properties",I:!1}}],["/tag/message-delivery/",{loader:()=>a(()=>import("./index.html-CoEA2DBr.js"),__vite__mapDeps([3611,1])),meta:{t:"标签: Message Delivery",I:!1}}],["/tag/semantics/",{loader:()=>a(()=>import("./index.html-CKLkXL_D.js"),__vite__mapDeps([3612,1])),meta:{t:"标签: Semantics",I:!1}}],["/tag/%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/",{loader:()=>a(()=>import("./index.html-lbqdah8d.js"),__vite__mapDeps([3613,1])),meta:{t:"标签: 分页查询",I:!1}}],["/tag/%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%9B%86%E5%A4%84%E7%90%86/",{loader:()=>a(()=>import("./index.html-BONSo6L3.js"),__vite__mapDeps([3614,1])),meta:{t:"标签: 大数据集处理",I:!1}}],["/tag/%E6%B5%81%E5%BC%8F%E5%A4%84%E7%90%86/",{loader:()=>a(()=>import("./index.html-Cgb673sk.js"),__vite__mapDeps([3615,1])),meta:{t:"标签: 流式处理",I:!1}}],["/tag/port-scanning/",{loader:()=>a(()=>import("./index.html-Bhjl6aEg.js"),__vite__mapDeps([3616,1])),meta:{t:"标签: Port Scanning",I:!1}}],["/tag/java-socket/",{loader:()=>a(()=>import("./index.html-Dz-xS2cH.js"),__vite__mapDeps([3617,1])),meta:{t:"标签: Java Socket",I:!1}}],["/tag/redis-sentinel/",{loader:()=>a(()=>import("./index.html-DMYka6ye.js"),__vite__mapDeps([3618,1])),meta:{t:"标签: Redis Sentinel",I:!1}}],["/tag/redis-cluster/",{loader:()=>a(()=>import("./index.html-DiNS5Oqr.js"),__vite__mapDeps([3619,1])),meta:{t:"标签: Redis Cluster",I:!1}}],["/tag/x-www-form-urlencoded/",{loader:()=>a(()=>import("./index.html-b4ZMXhy2.js"),__vite__mapDeps([3620,1])),meta:{t:"标签: x-www-form-urlencoded",I:!1}}],["/tag/cache/",{loader:()=>a(()=>import("./index.html-C5kEdtNy.js"),__vite__mapDeps([3621,1])),meta:{t:"标签: Cache",I:!1}}],["/tag/tls/",{loader:()=>a(()=>import("./index.html-Bop0x0Ia.js"),__vite__mapDeps([3622,1])),meta:{t:"标签: TLS",I:!1}}],["/tag/locksupport/",{loader:()=>a(()=>import("./index.html-ycDm496C.js"),__vite__mapDeps([3623,1])),meta:{t:"标签: LockSupport",I:!1}}],["/tag/json%E6%95%B0%E6%8D%AE/",{loader:()=>a(()=>import("./index.html-CPQQfTpn.js"),__vite__mapDeps([3624,1])),meta:{t:"标签: JSON数据",I:!1}}],["/tag/groovy/",{loader:()=>a(()=>import("./index.html-CwPpdElB.js"),__vite__mapDeps([3625,1])),meta:{t:"标签: Groovy",I:!1}}],["/tag/treeset/",{loader:()=>a(()=>import("./index.html-DbY2idC6.js"),__vite__mapDeps([3626,1])),meta:{t:"标签: TreeSet",I:!1}}],["/tag/url-validation/",{loader:()=>a(()=>import("./index.html-Ldv1ojVH.js"),__vite__mapDeps([3627,1])),meta:{t:"标签: URL Validation",I:!1}}],["/tag/constructor/",{loader:()=>a(()=>import("./index.html-DWZlESsm.js"),__vite__mapDeps([3628,1])),meta:{t:"标签: Constructor",I:!1}}],["/tag/variable-initialization/",{loader:()=>a(()=>import("./index.html-D8S7JyLk.js"),__vite__mapDeps([3629,1])),meta:{t:"标签: Variable Initialization",I:!1}}],["/tag/assertall/",{loader:()=>a(()=>import("./index.html-MFrnvkkz.js"),__vite__mapDeps([3630,1])),meta:{t:"标签: assertAll",I:!1}}],["/tag/assertions/",{loader:()=>a(()=>import("./index.html-B0RVcSEl.js"),__vite__mapDeps([3631,1])),meta:{t:"标签: Assertions",I:!1}}],["/tag/variables/",{loader:()=>a(()=>import("./index.html-C8hUsdxY.js"),__vite__mapDeps([3632,1])),meta:{t:"标签: Variables",I:!1}}],["/tag/%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84/",{loader:()=>a(()=>import("./index.html-cWo0E8I5.js"),__vite__mapDeps([3633,1])),meta:{t:"标签: 相对路径",I:!1}}],["/tag/protobuf/",{loader:()=>a(()=>import("./index.html-Dbu2xeSH.js"),__vite__mapDeps([3634,1])),meta:{t:"标签: Protobuf",I:!1}}],["/tag/date-conversion/",{loader:()=>a(()=>import("./index.html-rE242bBL.js"),__vite__mapDeps([3635,1])),meta:{t:"标签: Date Conversion",I:!1}}],["/tag/bmi-calculator/",{loader:()=>a(()=>import("./index.html-DcwEtH7T.js"),__vite__mapDeps([3636,1])),meta:{t:"标签: BMI Calculator",I:!1}}],["/tag/random-numbers/",{loader:()=>a(()=>import("./index.html-BVSghCBi.js"),__vite__mapDeps([3637,1])),meta:{t:"标签: Random Numbers",I:!1}}],["/tag/classloader/",{loader:()=>a(()=>import("./index.html-GCFhAC0m.js"),__vite__mapDeps([3638,1])),meta:{t:"标签: ClassLoader",I:!1}}],["/tag/getresource/",{loader:()=>a(()=>import("./index.html-DYQSlQmb.js"),__vite__mapDeps([3639,1])),meta:{t:"标签: getResource",I:!1}}],["/tag/paths.get/",{loader:()=>a(()=>import("./index.html-DYtmEV2d.js"),__vite__mapDeps([3640,1])),meta:{t:"标签: Paths.get",I:!1}}],["/tag/path.of/",{loader:()=>a(()=>import("./index.html-CtGdMst9.js"),__vite__mapDeps([3641,1])),meta:{t:"标签: Path.of",I:!1}}],["/tag/axon/",{loader:()=>a(()=>import("./index.html-BlJehSc9.js"),__vite__mapDeps([3642,1])),meta:{t:"标签: Axon",I:!1}}],["/tag/query-dispatching/",{loader:()=>a(()=>import("./index.html-uw15L_bh.js"),__vite__mapDeps([3643,1])),meta:{t:"标签: Query Dispatching",I:!1}}],["/tag/md5/",{loader:()=>a(()=>import("./index.html-CbtRckzF.js"),__vite__mapDeps([3644,1])),meta:{t:"标签: MD5",I:!1}}],["/tag/checksum/",{loader:()=>a(()=>import("./index.html-DOGYmc7f.js"),__vite__mapDeps([3645,1])),meta:{t:"标签: Checksum",I:!1}}],["/tag/binary-representation/",{loader:()=>a(()=>import("./index.html-Cm1Kjvt-.js"),__vite__mapDeps([3646,1])),meta:{t:"标签: Binary Representation",I:!1}}],["/tag/classgraph/",{loader:()=>a(()=>import("./index.html-BFW1p-F7.js"),__vite__mapDeps([3647,1])),meta:{t:"标签: Classgraph",I:!1}}],["/tag/java-.class-%E7%89%88%E6%9C%AC/",{loader:()=>a(()=>import("./index.html-CjSZ_Aff.js"),__vite__mapDeps([3648,1])),meta:{t:"标签: Java .class 版本",I:!1}}],["/tag/javap/",{loader:()=>a(()=>import("./index.html-TGbgf0hX.js"),__vite__mapDeps([3649,1])),meta:{t:"标签: Javap",I:!1}}],["/tag/hexdump/",{loader:()=>a(()=>import("./index.html-D2M696kA.js"),__vite__mapDeps([3650,1])),meta:{t:"标签: Hexdump",I:!1}}],["/tag/storage-engine/",{loader:()=>a(()=>import("./index.html-C4n4iVx2.js"),__vite__mapDeps([3651,1])),meta:{t:"标签: Storage Engine",I:!1}}],["/tag/lsmt/",{loader:()=>a(()=>import("./index.html-D6pA6TeN.js"),__vite__mapDeps([3652,1])),meta:{t:"标签: LSMT",I:!1}}],["/tag/%E7%B1%BB%E5%90%8D%E5%86%B2%E7%AA%81/",{loader:()=>a(()=>import("./index.html-PZ-JogGr.js"),__vite__mapDeps([3653,1])),meta:{t:"标签: 类名冲突",I:!1}}],["/tag/%E5%91%BD%E5%90%8D%E5%86%B2%E7%AA%81/",{loader:()=>a(()=>import("./index.html-DvuwfdtM.js"),__vite__mapDeps([3654,1])),meta:{t:"标签: 命名冲突",I:!1}}],["/tag/mongodb-shell/",{loader:()=>a(()=>import("./index.html-Y9Cxn5eR.js"),__vite__mapDeps([3655,1])),meta:{t:"标签: MongoDB Shell",I:!1}}],["/tag/document/",{loader:()=>a(()=>import("./index.html-BAmOf82n.js"),__vite__mapDeps([3656,1])),meta:{t:"标签: Document",I:!1}}],["/tag/%E4%BA%8C%E6%AC%A1%E6%96%B9%E7%A8%8B%E6%A0%B9/",{loader:()=>a(()=>import("./index.html-DLRvm7aL.js"),__vite__mapDeps([3657,1])),meta:{t:"标签: 二次方程根",I:!1}}],["/tag/%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/",{loader:()=>a(()=>import("./index.html-CAVhZEri.js"),__vite__mapDeps([3658,1])),meta:{t:"标签: 算法实现",I:!1}}],["/tag/character-input/",{loader:()=>a(()=>import("./index.html-CRtXM-hv.js"),__vite__mapDeps([3659,1])),meta:{t:"标签: Character Input",I:!1}}],["/tag/static-fields/",{loader:()=>a(()=>import("./index.html-CtCFOo2M.js"),__vite__mapDeps([3660,1])),meta:{t:"标签: Static Fields",I:!1}}],["/tag/concatenation/",{loader:()=>a(()=>import("./index.html-aQ3whcL0.js"),__vite__mapDeps([3661,1])),meta:{t:"标签: Concatenation",I:!1}}],["/tag/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/",{loader:()=>a(()=>import("./index.html-DwxBlUzN.js"),__vite__mapDeps([3662,1])),meta:{t:"标签: 代理模式",I:!1}}],["/tag/trifunction/",{loader:()=>a(()=>import("./index.html-DtA1mURB.js"),__vite__mapDeps([3663,1])),meta:{t:"标签: TriFunction",I:!1}}],["/tag/functionalinterface/",{loader:()=>a(()=>import("./index.html-QgBp_1K3.js"),__vite__mapDeps([3664,1])),meta:{t:"标签: FunctionalInterface",I:!1}}],["/tag/haproxy/",{loader:()=>a(()=>import("./index.html-BBzgzSv_.js"),__vite__mapDeps([3665,1])),meta:{t:"标签: HAProxy",I:!1}}],["/tag/file/",{loader:()=>a(()=>import("./index.html-DjR56iQV.js"),__vite__mapDeps([3666,1])),meta:{t:"标签: File",I:!1}}],["/tag/bufferedwriter/",{loader:()=>a(()=>import("./index.html-bxJgGcWa.js"),__vite__mapDeps([3667,1])),meta:{t:"标签: BufferedWriter",I:!1}}],["/tag/files.writestring/",{loader:()=>a(()=>import("./index.html-D_aq3B_1.js"),__vite__mapDeps([3668,1])),meta:{t:"标签: Files.writeString",I:!1}}],["/tag/credit-card-validation/",{loader:()=>a(()=>import("./index.html-BjT8dXEU.js"),__vite__mapDeps([3669,1])),meta:{t:"标签: Credit Card Validation",I:!1}}],["/tag/luhn-algorithm/",{loader:()=>a(()=>import("./index.html-ByJEj_l4.js"),__vite__mapDeps([3670,1])),meta:{t:"标签: Luhn Algorithm",I:!1}}],["/tag/conditional-routing/",{loader:()=>a(()=>import("./index.html-DzSZcvKn.js"),__vite__mapDeps([3671,1])),meta:{t:"标签: Conditional Routing",I:!1}}],["/tag/message-routing/",{loader:()=>a(()=>import("./index.html-DIssAUPZ.js"),__vite__mapDeps([3672,1])),meta:{t:"标签: Message Routing",I:!1}}],["/tag/armstrong-numbers/",{loader:()=>a(()=>import("./index.html-Bh5isuFd.js"),__vite__mapDeps([3673,1])),meta:{t:"标签: Armstrong Numbers",I:!1}}],["/tag/%E6%95%B0%E5%AD%A6/",{loader:()=>a(()=>import("./index.html-BJWDkoLW.js"),__vite__mapDeps([3674,1])),meta:{t:"标签: 数学",I:!1}}],["/tag/number/",{loader:()=>a(()=>import("./index.html-oHjlg47D.js"),__vite__mapDeps([3675,1])),meta:{t:"标签: Number",I:!1}}],["/tag/positive/",{loader:()=>a(()=>import("./index.html-BadZ_LnX.js"),__vite__mapDeps([3676,1])),meta:{t:"标签: Positive",I:!1}}],["/tag/negative/",{loader:()=>a(()=>import("./index.html-1aKiod3x.js"),__vite__mapDeps([3677,1])),meta:{t:"标签: Negative",I:!1}}],["/tag/character-comparison/",{loader:()=>a(()=>import("./index.html-BY7sNcw7.js"),__vite__mapDeps([3678,1])),meta:{t:"标签: Character Comparison",I:!1}}],["/tag/debugging/",{loader:()=>a(()=>import("./index.html-CJTHm-UK.js"),__vite__mapDeps([3679,1])),meta:{t:"标签: Debugging",I:!1}}],["/tag/arrays.aslist()/",{loader:()=>a(()=>import("./index.html-C8ie8YFI.js"),__vite__mapDeps([3680,1])),meta:{t:"标签: Arrays.asList()",I:!1}}],["/tag/list.of()/",{loader:()=>a(()=>import("./index.html-C8cxpZH1.js"),__vite__mapDeps([3681,1])),meta:{t:"标签: List.of()",I:!1}}],["/tag/feign/",{loader:()=>a(()=>import("./index.html-B93WjiJy.js"),__vite__mapDeps([3682,1])),meta:{t:"标签: Feign",I:!1}}],["/tag/git/",{loader:()=>a(()=>import("./index.html-CJMxMT4F.js"),__vite__mapDeps([3683,1])),meta:{t:"标签: Git",I:!1}}],["/tag/merge/",{loader:()=>a(()=>import("./index.html-XTTEPniB.js"),__vite__mapDeps([3684,1])),meta:{t:"标签: Merge",I:!1}}],["/tag/ini%E6%96%87%E4%BB%B6/",{loader:()=>a(()=>import("./index.html-C_MYaiIM.js"),__vite__mapDeps([3685,1])),meta:{t:"标签: INI文件",I:!1}}],["/tag/java%E8%A7%A3%E6%9E%90/",{loader:()=>a(()=>import("./index.html-f9L9HmNf.js"),__vite__mapDeps([3686,1])),meta:{t:"标签: Java解析",I:!1}}],["/tag/ini4j/",{loader:()=>a(()=>import("./index.html-lZisZ3CO.js"),__vite__mapDeps([3687,1])),meta:{t:"标签: ini4j",I:!1}}],["/tag/factors/",{loader:()=>a(()=>import("./index.html-B9BYvmH0.js"),__vite__mapDeps([3688,1])),meta:{t:"标签: Factors",I:!1}}],["/tag/optimization/",{loader:()=>a(()=>import("./index.html-Bitf1jW1.js"),__vite__mapDeps([3689,1])),meta:{t:"标签: Optimization",I:!1}}],["/tag/%E6%95%B4%E6%95%B0%E9%99%A4%E6%B3%95/",{loader:()=>a(()=>import("./index.html-DxHTEMW3.js"),__vite__mapDeps([3690,1])),meta:{t:"标签: 整数除法",I:!1}}],["/tag/%E6%B5%AE%E7%82%B9%E6%95%B0%E7%BB%93%E6%9E%9C/",{loader:()=>a(()=>import("./index.html-BXxj3WhM.js"),__vite__mapDeps([3691,1])),meta:{t:"标签: 浮点数结果",I:!1}}],["/tag/%E5%A4%9A%E7%A7%9F%E6%88%B7%E6%9E%B6%E6%9E%84/",{loader:()=>a(()=>import("./index.html-x07WjW67.js"),__vite__mapDeps([3692,1])),meta:{t:"标签: 多租户架构",I:!1}}],["/tag/pkce/",{loader:()=>a(()=>import("./index.html-C3dFmHm6.js"),__vite__mapDeps([3693,1])),meta:{t:"标签: PKCE",I:!1}}],["/tag/secret-clients/",{loader:()=>a(()=>import("./index.html-DqEdXW2l.js"),__vite__mapDeps([3694,1])),meta:{t:"标签: Secret Clients",I:!1}}],["/tag/url/",{loader:()=>a(()=>import("./index.html-CGblR38C.js"),__vite__mapDeps([3695,1])),meta:{t:"标签: URL",I:!1}}],["/tag/http/",{loader:()=>a(()=>import("./index.html-Bt9oDY94.js"),__vite__mapDeps([3696,1])),meta:{t:"标签: HTTP",I:!1}}],["/tag/httpclient/",{loader:()=>a(()=>import("./index.html-BfOhT_ou.js"),__vite__mapDeps([3697,1])),meta:{t:"标签: HttpClient",I:!1}}],["/tag/objectmapper/",{loader:()=>a(()=>import("./index.html-DNNPIRS5.js"),__vite__mapDeps([3698,1])),meta:{t:"标签: ObjectMapper",I:!1}}],["/tag/%E5%88%A0%E9%99%A4%E5%AD%97%E7%AC%A6/",{loader:()=>a(()=>import("./index.html-B0HXiwvF.js"),__vite__mapDeps([3699,1])),meta:{t:"标签: 删除字符",I:!1}}],["/tag/batch-inserts/",{loader:()=>a(()=>import("./index.html-fKYhFp0e.js"),__vite__mapDeps([3700,1])),meta:{t:"标签: Batch Inserts",I:!1}}],["/tag/%E5%B8%83%E5%B0%94%E5%8F%98%E9%87%8F/",{loader:()=>a(()=>import("./index.html-gqmCER_U.js"),__vite__mapDeps([3701,1])),meta:{t:"标签: 布尔变量",I:!1}}],["/tag/thread-dump/",{loader:()=>a(()=>import("./index.html-3rIydQsW.js"),__vite__mapDeps([3702,1])),meta:{t:"标签: Thread Dump",I:!1}}],["/tag/deadlock/",{loader:()=>a(()=>import("./index.html-Dv32sMLI.js"),__vite__mapDeps([3703,1])),meta:{t:"标签: Deadlock",I:!1}}],["/tag/operation/",{loader:()=>a(()=>import("./index.html-LPCDnOoq.js"),__vite__mapDeps([3704,1])),meta:{t:"标签: Operation",I:!1}}],["/tag/apiresponse/",{loader:()=>a(()=>import("./index.html-BjaDwxZl.js"),__vite__mapDeps([3705,1])),meta:{t:"标签: ApiResponse",I:!1}}],["/tag/java-source/",{loader:()=>a(()=>import("./index.html-DkNRfH9d.js"),__vite__mapDeps([3706,1])),meta:{t:"标签: Java Source",I:!1}}],["/tag/java-target/",{loader:()=>a(()=>import("./index.html-Cf1Be4Lw.js"),__vite__mapDeps([3707,1])),meta:{t:"标签: Java Target",I:!1}}],["/tag/springdoc-openapi/",{loader:()=>a(()=>import("./index.html-zV4FQIJf.js"),__vite__mapDeps([3708,1])),meta:{t:"标签: springdoc-openapi",I:!1}}],["/tag/api-security/",{loader:()=>a(()=>import("./index.html-Bd7zf_Q7.js"),__vite__mapDeps([3709,1])),meta:{t:"标签: API Security",I:!1}}],["/tag/collections.singletonlist()/",{loader:()=>a(()=>import("./index.html-BRc7ODKh.js"),__vite__mapDeps([3710,1])),meta:{t:"标签: Collections.singletonList()",I:!1}}],["/tag/prime-numbers/",{loader:()=>a(()=>import("./index.html-Dy_dL0mW.js"),__vite__mapDeps([3711,1])),meta:{t:"标签: Prime Numbers",I:!1}}],["/tag/user-information/",{loader:()=>a(()=>import("./index.html-BCGNrfHu.js"),__vite__mapDeps([3712,1])),meta:{t:"标签: User Information",I:!1}}],["/tag/%E5%AE%B9%E5%99%A8%E5%8C%96/",{loader:()=>a(()=>import("./index.html-D6_r94MM.js"),__vite__mapDeps([3713,1])),meta:{t:"标签: 容器化",I:!1}}],["/tag/reduction/",{loader:()=>a(()=>import("./index.html-Cd1wcZz6.js"),__vite__mapDeps([3714,1])),meta:{t:"标签: Reduction",I:!1}}],["/tag/stack-trace/",{loader:()=>a(()=>import("./index.html-BLvDzQmj.js"),__vite__mapDeps([3715,1])),meta:{t:"标签: Stack Trace",I:!1}}],["/tag/%E6%B6%88%E6%81%AF%E6%95%B0%E9%87%8F/",{loader:()=>a(()=>import("./index.html-BW7b-yIs.js"),__vite__mapDeps([3716,1])),meta:{t:"标签: 消息数量",I:!1}}],["/tag/dependency-management/",{loader:()=>a(()=>import("./index.html-BS88RKci.js"),__vite__mapDeps([3717,1])),meta:{t:"标签: Dependency Management",I:!1}}],["/tag/range/",{loader:()=>a(()=>import("./index.html-Bcc4GzOK.js"),__vite__mapDeps([3718,1])),meta:{t:"标签: Range",I:!1}}],["/tag/interval/",{loader:()=>a(()=>import("./index.html-DRw4tHAM.js"),__vite__mapDeps([3719,1])),meta:{t:"标签: Interval",I:!1}}],["/tag/%E6%9D%A1%E4%BB%B6%E4%BE%9D%E8%B5%96/",{loader:()=>a(()=>import("./index.html-DI9JGq50.js"),__vite__mapDeps([3720,1])),meta:{t:"标签: 条件依赖",I:!1}}],["/tag/%E5%A4%9A%E9%94%AEmap/",{loader:()=>a(()=>import("./index.html-CC4jURjk.js"),__vite__mapDeps([3721,1])),meta:{t:"标签: 多键Map",I:!1}}],["/tag/integer.tostring()/",{loader:()=>a(()=>import("./index.html-CN3Vzm2q.js"),__vite__mapDeps([3722,1])),meta:{t:"标签: Integer.toString()",I:!1}}],["/tag/%E6%96%87%E4%BB%B6/",{loader:()=>a(()=>import("./index.html-Ct63TzDM.js"),__vite__mapDeps([3723,1])),meta:{t:"标签: 文件",I:!1}}],["/tag/maven-snapshot/",{loader:()=>a(()=>import("./index.html-B3lpQN0a.js"),__vite__mapDeps([3724,1])),meta:{t:"标签: Maven Snapshot",I:!1}}],["/tag/maven-release/",{loader:()=>a(()=>import("./index.html-DEL0m4R1.js"),__vite__mapDeps([3725,1])),meta:{t:"标签: Maven Release",I:!1}}],["/tag/%E6%A0%BC%E5%BC%8F%E5%8C%96/",{loader:()=>a(()=>import("./index.html-N4TfopvK.js"),__vite__mapDeps([3726,1])),meta:{t:"标签: 格式化",I:!1}}],["/tag/stringsubstitutor/",{loader:()=>a(()=>import("./index.html-DvWKwytC.js"),__vite__mapDeps([3727,1])),meta:{t:"标签: StringSubstitutor",I:!1}}],["/tag/%E6%8E%92%E5%88%97/",{loader:()=>a(()=>import("./index.html-CW8UCIJg.js"),__vite__mapDeps([3728,1])),meta:{t:"标签: 排列",I:!1}}],["/tag/%E7%A9%BA%E7%99%BD%E5%AD%97%E7%AC%A6/",{loader:()=>a(()=>import("./index.html-FXI-jA5w.js"),__vite__mapDeps([3729,1])),meta:{t:"标签: 空白字符",I:!1}}],["/tag/jandex/",{loader:()=>a(()=>import("./index.html-BqrM7tDj.js"),__vite__mapDeps([3730,1])),meta:{t:"标签: Jandex",I:!1}}],["/tag/soap-request/",{loader:()=>a(()=>import("./index.html-DJEFIl05.js"),__vite__mapDeps([3731,1])),meta:{t:"标签: SOAP Request",I:!1}}],["/tag/jakarta-ee-9/",{loader:()=>a(()=>import("./index.html-C6wAFz5M.js"),__vite__mapDeps([3732,1])),meta:{t:"标签: Jakarta EE 9",I:!1}}],["/tag/mvc/",{loader:()=>a(()=>import("./index.html-CKO2sqz7.js"),__vite__mapDeps([3733,1])),meta:{t:"标签: MVC",I:!1}}],["/tag/static-block/",{loader:()=>a(()=>import("./index.html-CMzT7Du3.js"),__vite__mapDeps([2543,1])),meta:{t:"标签: Static Block",I:!1}}],["/tag/instance-initializer-block/",{loader:()=>a(()=>import("./index.html-Bo-Y-NDU.js"),__vite__mapDeps([3734,1])),meta:{t:"标签: Instance Initializer Block",I:!1}}],["/tag/jms/",{loader:()=>a(()=>import("./index.html-d5eybOLC.js"),__vite__mapDeps([3735,1])),meta:{t:"标签: JMS",I:!1}}],["/tag/image-upload/",{loader:()=>a(()=>import("./index.html-BhBSlbw0.js"),__vite__mapDeps([3736,1])),meta:{t:"标签: Image Upload",I:!1}}],["/tag/java-web-application/",{loader:()=>a(()=>import("./index.html-Eg6lpGJl.js"),__vite__mapDeps([3737,1])),meta:{t:"标签: Java Web Application",I:!1}}],["/tag/volatile/",{loader:()=>a(()=>import("./index.html-C1dFS2L9.js"),__vite__mapDeps([3738,1])),meta:{t:"标签: volatile",I:!1}}],["/tag/atomic/",{loader:()=>a(()=>import("./index.html-DikkFFoA.js"),__vite__mapDeps([3739,1])),meta:{t:"标签: atomic",I:!1}}],["/tag/java-wildcard-imports/",{loader:()=>a(()=>import("./index.html-C-V7ka3F.js"),__vite__mapDeps([3740,1])),meta:{t:"标签: Java Wildcard Imports",I:!1}}],["/tag/code-cleanliness/",{loader:()=>a(()=>import("./index.html-CgX65CBA.js"),__vite__mapDeps([3741,1])),meta:{t:"标签: Code Cleanliness",I:!1}}],["/tag/number-parity/",{loader:()=>a(()=>import("./index.html-ChMWRpdJ.js"),__vite__mapDeps([3742,1])),meta:{t:"标签: Number Parity",I:!1}}],["/tag/bitwise-operations/",{loader:()=>a(()=>import("./index.html-C7yx2bxI.js"),__vite__mapDeps([3743,1])),meta:{t:"标签: Bitwise Operations",I:!1}}],["/tag/least-significant-bit/",{loader:()=>a(()=>import("./index.html-C57wII9d.js"),__vite__mapDeps([3744,1])),meta:{t:"标签: Least Significant Bit",I:!1}}],["/tag/logic/",{loader:()=>a(()=>import("./index.html-BmFG8sLm.js"),__vite__mapDeps([3745,1])),meta:{t:"标签: Logic",I:!1}}],["/tag/int-array/",{loader:()=>a(()=>import("./index.html-DshNkwxU.js"),__vite__mapDeps([2825,1])),meta:{t:"标签: Int Array",I:!1}}],["/tag/count/",{loader:()=>a(()=>import("./index.html-D1HZ240f.js"),__vite__mapDeps([2346,1])),meta:{t:"标签: Count",I:!1}}],["/tag/jar%E6%96%87%E4%BB%B6/",{loader:()=>a(()=>import("./index.html-BIdxNiaA.js"),__vite__mapDeps([3746,1])),meta:{t:"标签: JAR文件",I:!1}}],["/tag/file-deletion/",{loader:()=>a(()=>import("./index.html-DzjgpfZ_.js"),__vite__mapDeps([3747,1])),meta:{t:"标签: File Deletion",I:!1}}],["/tag/directory-deletion/",{loader:()=>a(()=>import("./index.html-BJvr5071.js"),__vite__mapDeps([3748,1])),meta:{t:"标签: Directory Deletion",I:!1}}],["/tag/java-se/",{loader:()=>a(()=>import("./index.html-DaUZ3QQJ.js"),__vite__mapDeps([3749,1])),meta:{t:"标签: Java SE",I:!1}}],["/tag/java-ee/",{loader:()=>a(()=>import("./index.html-DHulRoh_.js"),__vite__mapDeps([3750,1])),meta:{t:"标签: Java EE",I:!1}}],["/tag/java-me/",{loader:()=>a(()=>import("./index.html-BlmtOYno.js"),__vite__mapDeps([3751,1])),meta:{t:"标签: Java ME",I:!1}}],["/tag/kotlin-flow/",{loader:()=>a(()=>import("./index.html-r79AgXXn.js"),__vite__mapDeps([3752,1])),meta:{t:"标签: Kotlin Flow",I:!1}}],["/tag/collect()/",{loader:()=>a(()=>import("./index.html-C5NYh_Qu.js"),__vite__mapDeps([3753,1])),meta:{t:"标签: collect()",I:!1}}],["/tag/collectlatest()/",{loader:()=>a(()=>import("./index.html-o8HTh1aI.js"),__vite__mapDeps([3754,1])),meta:{t:"标签: collectLatest()",I:!1}}],["/tag/form-data/",{loader:()=>a(()=>import("./index.html-Co7_TTtl.js"),__vite__mapDeps([3755,1])),meta:{t:"标签: form-data",I:!1}}],["/tag/raw/",{loader:()=>a(()=>import("./index.html-CxvFYHB2.js"),__vite__mapDeps([3756,1])),meta:{t:"标签: raw",I:!1}}],["/tag/%E7%B1%BB%E8%B7%AF%E5%BE%84/",{loader:()=>a(()=>import("./index.html-B2WNOjKN.js"),__vite__mapDeps([3757,1])),meta:{t:"标签: 类路径",I:!1}}],["/tag/jar/",{loader:()=>a(()=>import("./index.html-DVnESiK3.js"),__vite__mapDeps([3247,1])),meta:{t:"标签: jar",I:!1}}],["/tag/jpackage/",{loader:()=>a(()=>import("./index.html-DJJeDYAo.js"),__vite__mapDeps([3758,1])),meta:{t:"标签: jpackage",I:!1}}],["/tag/java-applications/",{loader:()=>a(()=>import("./index.html-CYBksxat.js"),__vite__mapDeps([3759,1])),meta:{t:"标签: Java Applications",I:!1}}],["/tag/find/",{loader:()=>a(()=>import("./index.html-Dft84WSb.js"),__vite__mapDeps([3760,1])),meta:{t:"标签: find",I:!1}}],["/tag/query/",{loader:()=>a(()=>import("./index.html-9d1Mj3lU.js"),__vite__mapDeps([2564,1])),meta:{t:"标签: query",I:!1}}],["/tag/exceptionhandler/",{loader:()=>a(()=>import("./index.html-DcSLPvf3.js"),__vite__mapDeps([3761,1])),meta:{t:"标签: ExceptionHandler",I:!1}}],["/tag/authenticationexception/",{loader:()=>a(()=>import("./index.html-JxdEbztH.js"),__vite__mapDeps([3762,1])),meta:{t:"标签: AuthenticationException",I:!1}}],["/tag/accessdeniedexception/",{loader:()=>a(()=>import("./index.html--yQ32OWW.js"),__vite__mapDeps([3763,1])),meta:{t:"标签: AccessDeniedException",I:!1}}],["/tag/detached-entity/",{loader:()=>a(()=>import("./index.html-DD8bWtBz.js"),__vite__mapDeps([3764,1])),meta:{t:"标签: Detached Entity",I:!1}}],["/tag/%E6%97%B6%E9%97%B4%E8%AE%A1%E7%AE%97/",{loader:()=>a(()=>import("./index.html-CcXLm9KH.js"),__vite__mapDeps([3765,1])),meta:{t:"标签: 时间计算",I:!1}}],["/tag/prettytime/",{loader:()=>a(()=>import("./index.html-46njzWt7.js"),__vite__mapDeps([3766,1])),meta:{t:"标签: PrettyTime",I:!1}}],["/tag/time4j/",{loader:()=>a(()=>import("./index.html-_nE0vL3m.js"),__vite__mapDeps([3767,1])),meta:{t:"标签: Time4J",I:!1}}],["/tag/collectors/",{loader:()=>a(()=>import("./index.html-6kI6LrQT.js"),__vite__mapDeps([3768,1])),meta:{t:"标签: Collectors",I:!1}}],["/tag/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%88%AA%E6%96%AD/",{loader:()=>a(()=>import("./index.html-rOOI1GcR.js"),__vite__mapDeps([3769,1])),meta:{t:"标签: 字符串截断",I:!1}}],["/tag/beans/",{loader:()=>a(()=>import("./index.html-CU-YaS2g.js"),__vite__mapDeps([3770,1])),meta:{t:"标签: Beans",I:!1}}],["/tag/java-configuration/",{loader:()=>a(()=>import("./index.html-BDXuRY2J.js"),__vite__mapDeps([3771,1])),meta:{t:"标签: Java Configuration",I:!1}}],["/tag/observability/",{loader:()=>a(()=>import("./index.html-BOv653PK.js"),__vite__mapDeps([3772,1])),meta:{t:"标签: Observability",I:!1}}],["/tag/developer-tools/",{loader:()=>a(()=>import("./index.html-CakSvZ88.js"),__vite__mapDeps([3773,1])),meta:{t:"标签: Developer Tools",I:!1}}],["/tag/destructor/",{loader:()=>a(()=>import("./index.html-DvCHtATM.js"),__vite__mapDeps([3774,1])),meta:{t:"标签: Destructor",I:!1}}],["/tag/finalizer/",{loader:()=>a(()=>import("./index.html-3Lne7LjE.js"),__vite__mapDeps([3775,1])),meta:{t:"标签: Finalizer",I:!1}}],["/tag/autocloseable/",{loader:()=>a(()=>import("./index.html-CCS5mPzM.js"),__vite__mapDeps([3776,1])),meta:{t:"标签: AutoCloseable",I:!1}}],["/tag/cleaner/",{loader:()=>a(()=>import("./index.html-BMsgmbeu.js"),__vite__mapDeps([3777,1])),meta:{t:"标签: Cleaner",I:!1}}],["/tag/response-body-manipulation/",{loader:()=>a(()=>import("./index.html-CB271D5E.js"),__vite__mapDeps([3778,1])),meta:{t:"标签: Response Body Manipulation",I:!1}}],["/tag/mysql/",{loader:()=>a(()=>import("./index.html-DxZiSd6o.js"),__vite__mapDeps([3779,1])),meta:{t:"标签: MySQL",I:!1}}],["/tag/spring-data-rest/",{loader:()=>a(()=>import("./index.html-DQfc6x9W.js"),__vite__mapDeps([3780,1])),meta:{t:"标签: Spring Data Rest",I:!1}}],["/tag/entity-ids/",{loader:()=>a(()=>import("./index.html-tGsKL6kn.js"),__vite__mapDeps([3781,1])),meta:{t:"标签: Entity IDs",I:!1}}],["/tag/unique-index/",{loader:()=>a(()=>import("./index.html-Cn9FCB4s.js"),__vite__mapDeps([3782,1])),meta:{t:"标签: Unique Index",I:!1}}],["/tag/private-methods/",{loader:()=>a(()=>import("./index.html-BgiBzsTj.js"),__vite__mapDeps([3783,1])),meta:{t:"标签: Private Methods",I:!1}}],["/tag/%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95/",{loader:()=>a(()=>import("./index.html-BaLYfDUZ.js"),__vite__mapDeps([3784,1])),meta:{t:"标签: 静态方法",I:!1}}],["/tag/date-operations/",{loader:()=>a(()=>import("./index.html-BuJy1mze.js"),__vite__mapDeps([3785,1])),meta:{t:"标签: Date Operations",I:!1}}],["/tag/xsd/",{loader:()=>a(()=>import("./index.html-CNDpfTxL.js"),__vite__mapDeps([3786,1])),meta:{t:"标签: XSD",I:!1}}],["/tag/memory-settings/",{loader:()=>a(()=>import("./index.html-BCfWOhvQ.js"),__vite__mapDeps([3787,1])),meta:{t:"标签: Memory Settings",I:!1}}],["/tag/requestmapping/",{loader:()=>a(()=>import("./index.html-CKQA3WP2.js"),__vite__mapDeps([3788,1])),meta:{t:"标签: RequestMapping",I:!1}}],["/tag/apache-activemq/",{loader:()=>a(()=>import("./index.html-CLMnw4D8.js"),__vite__mapDeps([3789,1])),meta:{t:"标签: Apache ActiveMQ",I:!1}}],["/tag/messaging/",{loader:()=>a(()=>import("./index.html-R3G-Qq6-.js"),__vite__mapDeps([3790,1])),meta:{t:"标签: Messaging",I:!1}}],["/tag/graalvm/",{loader:()=>a(()=>import("./index.html-C2jWgrWH.js"),__vite__mapDeps([3791,1])),meta:{t:"标签: GraalVM",I:!1}}],["/tag/inner-class/",{loader:()=>a(()=>import("./index.html-CYkTni1E.js"),__vite__mapDeps([3792,1])),meta:{t:"标签: Inner Class",I:!1}}],["/tag/zero/",{loader:()=>a(()=>import("./index.html-BouZQoas.js"),__vite__mapDeps([2566,1])),meta:{t:"标签: Zero",I:!1}}],["/tag/vowel/",{loader:()=>a(()=>import("./index.html-swNNltGf.js"),__vite__mapDeps([3793,1])),meta:{t:"标签: Vowel",I:!1}}],["/tag/springdoc-openapi/",{loader:()=>a(()=>import("./index.html-zV4FQIJf.js"),__vite__mapDeps([3708,1])),meta:{t:"标签: Springdoc-OpenAPI",I:!1}}],["/tag/collection-name/",{loader:()=>a(()=>import("./index.html-COKy-VgB.js"),__vite__mapDeps([3794,1])),meta:{t:"标签: Collection Name",I:!1}}],["/tag/bean-validation/",{loader:()=>a(()=>import("./index.html-BzxjYImu.js"),__vite__mapDeps([3795,1])),meta:{t:"标签: Bean Validation",I:!1}}],["/tag/constraint-composition/",{loader:()=>a(()=>import("./index.html-BWG5VUPP.js"),__vite__mapDeps([3796,1])),meta:{t:"标签: Constraint Composition",I:!1}}],["/tag/%E7%BB%93%E6%9E%9C%E9%9B%86/",{loader:()=>a(()=>import("./index.html-tqfTJjqA.js"),__vite__mapDeps([3797,1])),meta:{t:"标签: 结果集",I:!1}}],["/tag/custom-header/",{loader:()=>a(()=>import("./index.html-ChhXw1aJ.js"),__vite__mapDeps([3798,1])),meta:{t:"标签: Custom Header",I:!1}}],["/tag/class-loader/",{loader:()=>a(()=>import("./index.html-a96kxRXv.js"),__vite__mapDeps([3799,1])),meta:{t:"标签: Class Loader",I:!1}}],["/tag/thread-context-class-loader/",{loader:()=>a(()=>import("./index.html-Dy5Y-SXA.js"),__vite__mapDeps([3800,1])),meta:{t:"标签: Thread Context Class Loader",I:!1}}],["/tag/schema/",{loader:()=>a(()=>import("./index.html-CSCFmTON.js"),__vite__mapDeps([3801,1])),meta:{t:"标签: Schema",I:!1}}],["/tag/aliases/",{loader:()=>a(()=>import("./index.html-BOeCE4YK.js"),__vite__mapDeps([3802,1])),meta:{t:"标签: Aliases",I:!1}}],["/tag/%E9%80%9A%E9%85%8D%E7%AC%A6/",{loader:()=>a(()=>import("./index.html-CWU6LmgQ.js"),__vite__mapDeps([3803,1])),meta:{t:"标签: 通配符",I:!1}}],["/tag/sso/",{loader:()=>a(()=>import("./index.html-BGPZvxdT.js"),__vite__mapDeps([3804,1])),meta:{t:"标签: SSO",I:!1}}],["/tag/openid-connect/",{loader:()=>a(()=>import("./index.html-DAiMnzoh.js"),__vite__mapDeps([3805,1])),meta:{t:"标签: OpenID Connect",I:!1}}],["/tag/mutable-list/",{loader:()=>a(()=>import("./index.html-B9mzOT-5.js"),__vite__mapDeps([3806,1])),meta:{t:"标签: Mutable List",I:!1}}],["/tag/list-manipulation/",{loader:()=>a(()=>import("./index.html-Dkxv6qE-.js"),__vite__mapDeps([3807,1])),meta:{t:"标签: List Manipulation",I:!1}}],["/tag/java-sound/",{loader:()=>a(()=>import("./index.html-BbMg3IFt.js"),__vite__mapDeps([3808,1])),meta:{t:"标签: Java Sound",I:!1}}],["/tag/audio/",{loader:()=>a(()=>import("./index.html-BwnLQyp0.js"),__vite__mapDeps([3809,1])),meta:{t:"标签: Audio",I:!1}}],["/tag/spring-cloud-sidecar/",{loader:()=>a(()=>import("./index.html-BEWyJS4C.js"),__vite__mapDeps([3810,1])),meta:{t:"标签: Spring Cloud Sidecar",I:!1}}],["/tag/netflix-sidecar/",{loader:()=>a(()=>import("./index.html-CoIn2kdM.js"),__vite__mapDeps([3811,1])),meta:{t:"标签: Netflix Sidecar",I:!1}}],["/tag/service-discovery/",{loader:()=>a(()=>import("./index.html-IpKG5JUv.js"),__vite__mapDeps([3812,1])),meta:{t:"标签: Service Discovery",I:!1}}],["/tag/eureka/",{loader:()=>a(()=>import("./index.html-qagQb749.js"),__vite__mapDeps([3813,1])),meta:{t:"标签: Eureka",I:!1}}],["/tag/zuul-proxy/",{loader:()=>a(()=>import("./index.html-DcaT8vWc.js"),__vite__mapDeps([3814,1])),meta:{t:"标签: Zuul Proxy",I:!1}}],["/tag/error-handling/",{loader:()=>a(()=>import("./index.html-C0jw-gJG.js"),__vite__mapDeps([3815,1])),meta:{t:"标签: Error Handling",I:!1}}],["/tag/java-basics/",{loader:()=>a(()=>import("./index.html-BG-KlgW0.js"),__vite__mapDeps([3816,1])),meta:{t:"标签: Java Basics",I:!1}}],["/tag/timeout/",{loader:()=>a(()=>import("./index.html-T3DeM6cz.js"),__vite__mapDeps([3817,1])),meta:{t:"标签: Timeout",I:!1}}],["/tag/usedelimiter/",{loader:()=>a(()=>import("./index.html-f_s6SUoD.js"),__vite__mapDeps([3818,1])),meta:{t:"标签: useDelimiter",I:!1}}],["/tag/spring-data-jpa/",{loader:()=>a(()=>import("./index.html-VBB7ffA8.js"),__vite__mapDeps([2300,1])),meta:{t:"标签: spring data jpa",I:!1}}],["/tag/jpa-specifications/",{loader:()=>a(()=>import("./index.html-BEFNu4TO.js"),__vite__mapDeps([3819,1])),meta:{t:"标签: jpa specifications",I:!1}}],["/tag/printing/",{loader:()=>a(()=>import("./index.html-BRRudV-9.js"),__vite__mapDeps([3820,1])),meta:{t:"标签: Printing",I:!1}}],["/tag/reverse-number/",{loader:()=>a(()=>import("./index.html-BwGtlimQ.js"),__vite__mapDeps([3821,1])),meta:{t:"标签: reverse number",I:!1}}],["/tag/403-forbidden/",{loader:()=>a(()=>import("./index.html-DhzQl4jG.js"),__vite__mapDeps([3822,1])),meta:{t:"标签: 403 Forbidden",I:!1}}],["/tag/comparator/",{loader:()=>a(()=>import("./index.html-DBTBsD4X.js"),__vite__mapDeps([3823,1])),meta:{t:"标签: Comparator",I:!1}}],["/tag/comparable/",{loader:()=>a(()=>import("./index.html-BSPSI3wI.js"),__vite__mapDeps([3824,1])),meta:{t:"标签: Comparable",I:!1}}],["/tag/spring-web-services/",{loader:()=>a(()=>import("./index.html-GZXG03eh.js"),__vite__mapDeps([3825,1])),meta:{t:"标签: Spring Web Services",I:!1}}],["/tag/profile/",{loader:()=>a(()=>import("./index.html-qcT2FXCf.js"),__vite__mapDeps([3826,1])),meta:{t:"标签: Profile",I:!1}}],["/tag/memory-leak/",{loader:()=>a(()=>import("./index.html-ChQq3ono.js"),__vite__mapDeps([3827,1])),meta:{t:"标签: Memory Leak",I:!1}}],["/tag/jdbc-driver/",{loader:()=>a(()=>import("./index.html-CWevJOya.js"),__vite__mapDeps([3828,1])),meta:{t:"标签: JDBC Driver",I:!1}}],["/tag/enums/",{loader:()=>a(()=>import("./index.html-Bv1fSUik.js"),__vite__mapDeps([3829,1])),meta:{t:"标签: Enums",I:!1}}],["/tag/when()/",{loader:()=>a(()=>import("./index.html-B7LNYG-7.js"),__vite__mapDeps([3830,1])),meta:{t:"标签: when()",I:!1}}],["/tag/innodb/",{loader:()=>a(()=>import("./index.html-6ijXJDmP.js"),__vite__mapDeps([3831,1])),meta:{t:"标签: InnoDB",I:!1}}],["/tag/read-only/",{loader:()=>a(()=>import("./index.html-CNFg7VK7.js"),__vite__mapDeps([3832,1])),meta:{t:"标签: Read-Only",I:!1}}],["/tag/http-headers/",{loader:()=>a(()=>import("./index.html-CEDmfMJO.js"),__vite__mapDeps([3833,1])),meta:{t:"标签: HTTP headers",I:!1}}],["/tag/pre-request-scripts/",{loader:()=>a(()=>import("./index.html-CTQJj5Us.js"),__vite__mapDeps([3834,1])),meta:{t:"标签: pre-request scripts",I:!1}}],["/tag/json%E9%AA%8C%E8%AF%81/",{loader:()=>a(()=>import("./index.html-X_KvqngP.js"),__vite__mapDeps([3835,1])),meta:{t:"标签: JSON验证",I:!1}}],["/tag/connection/",{loader:()=>a(()=>import("./index.html-Cxod3_Rj.js"),__vite__mapDeps([3836,1])),meta:{t:"标签: Connection",I:!1}}],["/tag/java%E7%BC%96%E8%AF%91/",{loader:()=>a(()=>import("./index.html-B7C3OyPc.js"),__vite__mapDeps([3837,1])),meta:{t:"标签: Java编译",I:!1}}],["/tag/boolean/",{loader:()=>a(()=>import("./index.html-DBrIBoI6.js"),__vite__mapDeps([2870,1])),meta:{t:"标签: boolean",I:!1}}],["/tag/polymorphism/",{loader:()=>a(()=>import("./index.html-BKnn7iI-.js"),__vite__mapDeps([3838,1])),meta:{t:"标签: Polymorphism",I:!1}}],["/tag/equals()/",{loader:()=>a(()=>import("./index.html-MYXbzpwI.js"),__vite__mapDeps([3839,1])),meta:{t:"标签: equals()",I:!1}}],["/tag//",{loader:()=>a(()=>import("./index.html-DR_UTqu4.js"),__vite__mapDeps([2256,1])),meta:{t:"标签: ==",I:!1}}],["/tag/atomic-variables/",{loader:()=>a(()=>import("./index.html-KhNOB4rI.js"),__vite__mapDeps([3840,1])),meta:{t:"标签: Atomic Variables",I:!1}}],["/tag/set()/",{loader:()=>a(()=>import("./index.html-BxTpazK4.js"),__vite__mapDeps([3841,1])),meta:{t:"标签: set()",I:!1}}],["/tag/lazyset()/",{loader:()=>a(()=>import("./index.html-B1WBg8Pn.js"),__vite__mapDeps([3842,1])),meta:{t:"标签: lazySet()",I:!1}}],["/tag/hql/",{loader:()=>a(()=>import("./index.html-GmPuOGMr.js"),__vite__mapDeps([3843,1])),meta:{t:"标签: HQL",I:!1}}],["/tag/distinct/",{loader:()=>a(()=>import("./index.html-CDP4XKXG.js"),__vite__mapDeps([3844,1])),meta:{t:"标签: DISTINCT",I:!1}}],["/tag/custom-annotation/",{loader:()=>a(()=>import("./index.html-BW-RhOp1.js"),__vite__mapDeps([3845,1])),meta:{t:"标签: Custom Annotation",I:!1}}],["/tag/random-value/",{loader:()=>a(()=>import("./index.html-DZBrqlfY.js"),__vite__mapDeps([3846,1])),meta:{t:"标签: Random Value",I:!1}}],["/tag/ip-address/",{loader:()=>a(()=>import("./index.html-DvSOIwxE.js"),__vite__mapDeps([3847,1])),meta:{t:"标签: IP Address",I:!1}}],["/tag/build-cache/",{loader:()=>a(()=>import("./index.html-CamZLykg.js"),__vite__mapDeps([3848,1])),meta:{t:"标签: Build Cache",I:!1}}],["/tag/%E6%9E%84%E5%BB%BA%E4%BC%98%E5%8C%96/",{loader:()=>a(()=>import("./index.html-CW60G35m.js"),__vite__mapDeps([3849,1])),meta:{t:"标签: 构建优化",I:!1}}],["/tag/%E8%B5%84%E6%BA%90%E6%9C%8D%E5%8A%A1%E5%99%A8/",{loader:()=>a(()=>import("./index.html-D01wLkPm.js"),__vite__mapDeps([3850,1])),meta:{t:"标签: 资源服务器",I:!1}}],["/tag/swagger/",{loader:()=>a(()=>import("./index.html-0bzqr3oX.js"),__vite__mapDeps([3851,1])),meta:{t:"标签: Swagger",I:!1}}],["/tag/parent-pom/",{loader:()=>a(()=>import("./index.html-CLA8u-P7.js"),__vite__mapDeps([3852,1])),meta:{t:"标签: Parent POM",I:!1}}],["/tag/plugin/",{loader:()=>a(()=>import("./index.html-D6k9vXPX.js"),__vite__mapDeps([3853,1])),meta:{t:"标签: Plugin",I:!1}}],["/tag/lists/",{loader:()=>a(()=>import("./index.html-yDvvG5sx.js"),__vite__mapDeps([3854,1])),meta:{t:"标签: Lists",I:!1}}],["/tag/null-and-empty-values/",{loader:()=>a(()=>import("./index.html-CvYFbN6y.js"),__vite__mapDeps([3855,1])),meta:{t:"标签: Null and Empty Values",I:!1}}],["/tag/inheritance/",{loader:()=>a(()=>import("./index.html-2nH4EwJ5.js"),__vite__mapDeps([3856,1])),meta:{t:"标签: Inheritance",I:!1}}],["/tag/criteria-query/",{loader:()=>a(()=>import("./index.html-C8NLfnil.js"),__vite__mapDeps([3857,1])),meta:{t:"标签: Criteria Query",I:!1}}],["/tag/%E5%8F%8D%E5%B0%84%E8%AE%BF%E9%97%AE/",{loader:()=>a(()=>import("./index.html-DGvCyTf8.js"),__vite__mapDeps([3858,1])),meta:{t:"标签: 反射访问",I:!1}}],["/tag/skip/",{loader:()=>a(()=>import("./index.html-BdeJw-J5.js"),__vite__mapDeps([3859,1])),meta:{t:"标签: skip",I:!1}}],["/tag/liquibase/",{loader:()=>a(()=>import("./index.html-DmtH3cBB.js"),__vite__mapDeps([3860,1])),meta:{t:"标签: Liquibase",I:!1}}],["/tag/%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81/",{loader:()=>a(()=>import("./index.html-CrP2mf0P.js"),__vite__mapDeps([3861,1])),meta:{t:"标签: 身份认证",I:!1}}],["/tag/spark/",{loader:()=>a(()=>import("./index.html-Tz8zY4az.js"),__vite__mapDeps([3862,1])),meta:{t:"标签: Spark",I:!1}}],["/tag/dataframe/",{loader:()=>a(()=>import("./index.html-Ch8aedIK.js"),__vite__mapDeps([3863,1])),meta:{t:"标签: DataFrame",I:!1}}],["/tag/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/",{loader:()=>a(()=>import("./index.html-eFoamue5.js"),__vite__mapDeps([3864,1])),meta:{t:"标签: 数据处理",I:!1}}],["/tag/discovery-client/",{loader:()=>a(()=>import("./index.html-B3jgOxOF.js"),__vite__mapDeps([3865,1])),meta:{t:"标签: Discovery Client",I:!1}}],["/tag/opa/",{loader:()=>a(()=>import("./index.html-CaoMxq20.js"),__vite__mapDeps([3866,1])),meta:{t:"标签: OPA",I:!1}}],["/tag/authorization/",{loader:()=>a(()=>import("./index.html-DHAswnnG.js"),__vite__mapDeps([3867,1])),meta:{t:"标签: Authorization",I:!1}}],["/tag/policy/",{loader:()=>a(()=>import("./index.html-CBQgsb_8.js"),__vite__mapDeps([3868,1])),meta:{t:"标签: Policy",I:!1}}],["/tag/swap/",{loader:()=>a(()=>import("./index.html-DT662O2R.js"),__vite__mapDeps([3869,1])),meta:{t:"标签: Swap",I:!1}}],["/tag/lock/",{loader:()=>a(()=>import("./index.html-HDp6BLwa.js"),__vite__mapDeps([3870,1])),meta:{t:"标签: Lock",I:!1}}],["/tag/servlet/",{loader:()=>a(()=>import("./index.html--vt6lr10.js"),__vite__mapDeps([3871,1])),meta:{t:"标签: Servlet",I:!1}}],["/tag/annotations/",{loader:()=>a(()=>import("./index.html-Cjo4UnyL.js"),__vite__mapDeps([3872,1])),meta:{t:"标签: Annotations",I:!1}}],["/tag/authentication/",{loader:()=>a(()=>import("./index.html-BnNl7a8h.js"),__vite__mapDeps([3873,1])),meta:{t:"标签: Authentication",I:!1}}],["/tag/automorphic-numbers/",{loader:()=>a(()=>import("./index.html-A6jVKA03.js"),__vite__mapDeps([3874,1])),meta:{t:"标签: Automorphic Numbers",I:!1}}],["/tag/bulk-update/",{loader:()=>a(()=>import("./index.html-BkEKGUv2.js"),__vite__mapDeps([3875,1])),meta:{t:"标签: Bulk Update",I:!1}}],["/tag/case-insensitive-sorting/",{loader:()=>a(()=>import("./index.html-CHZON9YZ.js"),__vite__mapDeps([3876,1])),meta:{t:"标签: Case Insensitive Sorting",I:!1}}],["/tag/compile-errors/",{loader:()=>a(()=>import("./index.html-DsmISv4D.js"),__vite__mapDeps([3877,1])),meta:{t:"标签: Compile Errors",I:!1}}],["/tag/directory/",{loader:()=>a(()=>import("./index.html-VsmKWl3-.js"),__vite__mapDeps([3878,1])),meta:{t:"标签: directory",I:!1}}],["/tag/%E6%96%87%E4%BB%B6%E5%A4%A7%E5%B0%8F/",{loader:()=>a(()=>import("./index.html-CpIl9bpa.js"),__vite__mapDeps([3879,1])),meta:{t:"标签: 文件大小",I:!1}}],["/tag/%E5%8F%AF%E8%AF%BB%E6%A0%BC%E5%BC%8F/",{loader:()=>a(()=>import("./index.html-BIIpSzTt.js"),__vite__mapDeps([3880,1])),meta:{t:"标签: 可读格式",I:!1}}],["/tag/long-to-int/",{loader:()=>a(()=>import("./index.html-Dv1b8btJ.js"),__vite__mapDeps([3881,1])),meta:{t:"标签: Long to Int",I:!1}}],["/tag/javabeans/",{loader:()=>a(()=>import("./index.html-aF54pr8K.js"),__vite__mapDeps([3882,1])),meta:{t:"标签: JavaBeans",I:!1}}],["/tag/vo/",{loader:()=>a(()=>import("./index.html-BrL1Ty6H.js"),__vite__mapDeps([3883,1])),meta:{t:"标签: VO",I:!1}}],["/tag/%E8%A1%8C%E6%95%B0/",{loader:()=>a(()=>import("./index.html-CX1DVjfC.js"),__vite__mapDeps([3884,1])),meta:{t:"标签: 行数",I:!1}}],["/tag/spqr/",{loader:()=>a(()=>import("./index.html-C_2Kci8h.js"),__vite__mapDeps([3885,1])),meta:{t:"标签: SPQR",I:!1}}],["/tag/upsert/",{loader:()=>a(()=>import("./index.html-fzAAZTLX.js"),__vite__mapDeps([3886,1])),meta:{t:"标签: Upsert",I:!1}}],["/tag/spring-singleton/",{loader:()=>a(()=>import("./index.html-CslQU7xS.js"),__vite__mapDeps([3887,1])),meta:{t:"标签: Spring Singleton",I:!1}}],["/tag/%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5/",{loader:()=>a(()=>import("./index.html-Blm6iUBv.js"),__vite__mapDeps([3888,1])),meta:{t:"标签: 数据导入",I:!1}}],["/tag/jakarta-ee-mvc/",{loader:()=>a(()=>import("./index.html-ByfoEpEo.js"),__vite__mapDeps([3889,1])),meta:{t:"标签: Jakarta EE MVC",I:!1}}],["/tag/eclipse-krazo/",{loader:()=>a(()=>import("./index.html-BVY9uk37.js"),__vite__mapDeps([3890,1])),meta:{t:"标签: Eclipse Krazo",I:!1}}],["/tag/%E8%BF%AD%E4%BB%A3/",{loader:()=>a(()=>import("./index.html-C4BMPOb3.js"),__vite__mapDeps([3891,1])),meta:{t:"标签: 迭代",I:!1}}],["/tag/%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0/",{loader:()=>a(()=>import("./index.html-CCPYtNYF.js"),__vite__mapDeps([3892,1])),meta:{t:"标签: 动态添加",I:!1}}],["/tag/bitwise-operators/",{loader:()=>a(()=>import("./index.html-D4Vd3IQP.js"),__vite__mapDeps([3893,1])),meta:{t:"标签: Bitwise Operators",I:!1}}],["/tag/operator-precedence/",{loader:()=>a(()=>import("./index.html-Bk4dVcDQ.js"),__vite__mapDeps([3894,1])),meta:{t:"标签: Operator Precedence",I:!1}}],["/tag/java-error/",{loader:()=>a(()=>import("./index.html-D5rKSVqD.js"),__vite__mapDeps([3895,1])),meta:{t:"标签: Java Error",I:!1}}],["/tag/uninitialized-variable/",{loader:()=>a(()=>import("./index.html-BVES6v9n.js"),__vite__mapDeps([3896,1])),meta:{t:"标签: Uninitialized Variable",I:!1}}],["/tag/java-operators/",{loader:()=>a(()=>import("./index.html-C2IxjMmK.js"),__vite__mapDeps([3897,1])),meta:{t:"标签: Java Operators",I:!1}}],["/tag/pretty-print/",{loader:()=>a(()=>import("./index.html-BBjd4D4i.js"),__vite__mapDeps([3898,1])),meta:{t:"标签: Pretty-Print",I:!1}}],["/tag/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/",{loader:()=>a(()=>import("./index.html-PAUIyi3s.js"),__vite__mapDeps([3899,1])),meta:{t:"标签: 数据库操作",I:!1}}],["/tag/update/",{loader:()=>a(()=>import("./index.html-HAfM5rUV.js"),__vite__mapDeps([3900,1])),meta:{t:"标签: Update",I:!1}}],["/tag/push/",{loader:()=>a(()=>import("./index.html-IrN19lY-.js"),__vite__mapDeps([3901,1])),meta:{t:"标签: $push",I:!1}}],["/tag/set/",{loader:()=>a(()=>import("./index.html-CAW2AKmY.js"),__vite__mapDeps([2575,1])),meta:{t:"标签: $set",I:!1}}],["/tag/%E6%95%B0%E6%8D%AE%E6%A3%80%E7%B4%A2/",{loader:()=>a(()=>import("./index.html-Bef_Knye.js"),__vite__mapDeps([3902,1])),meta:{t:"标签: 数据检索",I:!1}}],["/tag/single-sign-on/",{loader:()=>a(()=>import("./index.html-Bh0_zdeV.js"),__vite__mapDeps([3903,1])),meta:{t:"标签: Single Sign-On",I:!1}}],["/tag/tomcat-configuration/",{loader:()=>a(()=>import("./index.html-CK06mBZr.js"),__vite__mapDeps([3904,1])),meta:{t:"标签: Tomcat Configuration",I:!1}}],["/tag/soap/",{loader:()=>a(()=>import("./index.html-DhI2lhfj.js"),__vite__mapDeps([3905,1])),meta:{t:"标签: SOAP",I:!1}}],["/tag/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8E%92%E5%BA%8F/",{loader:()=>a(()=>import("./index.html-gkdBaT7-.js"),__vite__mapDeps([3906,1])),meta:{t:"标签: 字符串排序",I:!1}}],["/tag/%E6%97%A5%E6%9C%9F%E5%87%8F%E6%B3%95/",{loader:()=>a(()=>import("./index.html-B2S6DzXo.js"),__vite__mapDeps([3907,1])),meta:{t:"标签: 日期减法",I:!1}}],["/tag/for-each%E5%BE%AA%E7%8E%AF/",{loader:()=>a(()=>import("./index.html-BJC8YGWa.js"),__vite__mapDeps([3908,1])),meta:{t:"标签: for-each循环",I:!1}}],["/tag/java-5/",{loader:()=>a(()=>import("./index.html-Bciz0oM_.js"),__vite__mapDeps([3909,1])),meta:{t:"标签: Java 5",I:!1}}],["/tag/%E5%A2%9E%E5%BC%BAfor%E5%BE%AA%E7%8E%AF/",{loader:()=>a(()=>import("./index.html-Cyyn77nN.js"),__vite__mapDeps([3910,1])),meta:{t:"标签: 增强for循环",I:!1}}],["/tag/type-inference/",{loader:()=>a(()=>import("./index.html-KBGvoyoa.js"),__vite__mapDeps([3911,1])),meta:{t:"标签: Type Inference",I:!1}}],["/tag/underscore-operator/",{loader:()=>a(()=>import("./index.html-BdaiFYOo.js"),__vite__mapDeps([3912,1])),meta:{t:"标签: Underscore Operator",I:!1}}],["/tag/nginx/",{loader:()=>a(()=>import("./index.html-DNJj8UWb.js"),__vite__mapDeps([3913,1])),meta:{t:"标签: Nginx",I:!1}}],["/tag/%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86/",{loader:()=>a(()=>import("./index.html-B-nva2tH.js"),__vite__mapDeps([3914,1])),meta:{t:"标签: 正向代理",I:!1}}],["/tag/faunadb/",{loader:()=>a(()=>import("./index.html-BTsLe9wS.js"),__vite__mapDeps([3915,1])),meta:{t:"标签: FaunaDB",I:!1}}],["/tag/login/",{loader:()=>a(()=>import("./index.html-CjpuUgdM.js"),__vite__mapDeps([3916,1])),meta:{t:"标签: Login",I:!1}}],["/tag/%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/",{loader:()=>a(()=>import("./index.html-bPbwTjSt.js"),__vite__mapDeps([3917,1])),meta:{t:"标签: 多数据源",I:!1}}],["/tag/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%85%8D%E7%BD%AE/",{loader:()=>a(()=>import("./index.html-3dZ3VocQ.js"),__vite__mapDeps([3918,1])),meta:{t:"标签: 数据库配置",I:!1}}],["/tag/cassandra/",{loader:()=>a(()=>import("./index.html-DsYC5vcl.js"),__vite__mapDeps([3919,1])),meta:{t:"标签: Cassandra",I:!1}}],["/tag/datastax/",{loader:()=>a(()=>import("./index.html-wdtE2QnE.js"),__vite__mapDeps([3920,1])),meta:{t:"标签: DataStax",I:!1}}],["/tag/rock-paper-scissors/",{loader:()=>a(()=>import("./index.html-QAwPelBr.js"),__vite__mapDeps([3921,1])),meta:{t:"标签: Rock-Paper-Scissors",I:!1}}],["/tag/game-development/",{loader:()=>a(()=>import("./index.html-BZ4zWlvX.js"),__vite__mapDeps([3922,1])),meta:{t:"标签: Game Development",I:!1}}],["/tag/zuul/",{loader:()=>a(()=>import("./index.html-eEl5N_GA.js"),__vite__mapDeps([3923,1])),meta:{t:"标签: Zuul",I:!1}}],["/tag/trustanchors/",{loader:()=>a(()=>import("./index.html-B4Z0kl-p.js"),__vite__mapDeps([3924,1])),meta:{t:"标签: TrustAnchors",I:!1}}],["/tag/keystore/",{loader:()=>a(()=>import("./index.html-YpHOM4M6.js"),__vite__mapDeps([3925,1])),meta:{t:"标签: KeyStore",I:!1}}],["/tag/pkixparameters/",{loader:()=>a(()=>import("./index.html-BlYoeJ0p.js"),__vite__mapDeps([3926,1])),meta:{t:"标签: PKIXParameters",I:!1}}],["/tag/java%E7%89%88%E6%9C%AC/",{loader:()=>a(()=>import("./index.html-rh_YxTPy.js"),__vite__mapDeps([3927,1])),meta:{t:"标签: Java版本",I:!1}}],["/tag/bytebuffer/",{loader:()=>a(()=>import("./index.html-U1s93n6O.js"),__vite__mapDeps([3928,1])),meta:{t:"标签: ByteBuffer",I:!1}}],["/tag/java-nio/",{loader:()=>a(()=>import("./index.html-B0ZfnaMI.js"),__vite__mapDeps([3929,1])),meta:{t:"标签: Java NIO",I:!1}}],["/tag/addscalar/",{loader:()=>a(()=>import("./index.html-u-lZUE9e.js"),__vite__mapDeps([3930,1])),meta:{t:"标签: addScalar",I:!1}}],["/tag/%E6%A0%87%E5%87%86%E5%B7%AE/",{loader:()=>a(()=>import("./index.html-DfbCAvyN.js"),__vite__mapDeps([3931,1])),meta:{t:"标签: 标准差",I:!1}}],["/tag/%E7%BB%9F%E8%AE%A1%E5%AD%A6/",{loader:()=>a(()=>import("./index.html-gyQW92CR.js"),__vite__mapDeps([3932,1])),meta:{t:"标签: 统计学",I:!1}}],["/tag/%E9%80%86%E5%90%91%E6%98%A0%E5%B0%84/",{loader:()=>a(()=>import("./index.html-B1_ZOQrI.js"),__vite__mapDeps([3933,1])),meta:{t:"标签: 逆向映射",I:!1}}],["/tag/registernatives/",{loader:()=>a(()=>import("./index.html-Bm8zJlNw.js"),__vite__mapDeps([3934,1])),meta:{t:"标签: RegisterNatives",I:!1}}],["/tag/httpmessagenotwritableexception/",{loader:()=>a(()=>import("./index.html-Dgda2Irs.js"),__vite__mapDeps([3935,1])),meta:{t:"标签: HttpMessageNotWritableException",I:!1}}],["/tag/messageconverter/",{loader:()=>a(()=>import("./index.html-DHWxhEaS.js"),__vite__mapDeps([3936,1])),meta:{t:"标签: MessageConverter",I:!1}}],["/tag/oauth2/",{loader:()=>a(()=>import("./index.html-D1MPRBrf.js"),__vite__mapDeps([3937,1])),meta:{t:"标签: OAuth2",I:!1}}],["/tag/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E7%8A%B6%E6%80%81/",{loader:()=>a(()=>import("./index.html-CxEV3jTJ.js"),__vite__mapDeps([3938,1])),meta:{t:"标签: 数据库连接状态",I:!1}}],["/tag/arrayindexoutofboundsexception/",{loader:()=>a(()=>import("./index.html-C1wEw1gO.js"),__vite__mapDeps([3939,1])),meta:{t:"标签: ArrayIndexOutOfBoundsException",I:!1}}],["/tag/web%E6%9C%8D%E5%8A%A1/",{loader:()=>a(()=>import("./index.html-DAtQHg6v.js"),__vite__mapDeps([3940,1])),meta:{t:"标签: Web服务",I:!1}}],["/tag/mediator-pattern/",{loader:()=>a(()=>import("./index.html-oHvdV7_s.js"),__vite__mapDeps([3941,1])),meta:{t:"标签: Mediator Pattern",I:!1}}],["/tag/%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97/",{loader:()=>a(()=>import("./index.html-DBOo4xDC.js"),__vite__mapDeps([3942,1])),meta:{t:"标签: 阻塞队列",I:!1}}],["/tag/errordecoder/",{loader:()=>a(()=>import("./index.html-De3mQpzb.js"),__vite__mapDeps([3943,1])),meta:{t:"标签: ErrorDecoder",I:!1}}],["/tag/secondary-indexes/",{loader:()=>a(()=>import("./index.html-BLATa7Vi.js"),__vite__mapDeps([3944,1])),meta:{t:"标签: Secondary Indexes",I:!1}}],["/tag/dependency-injection/",{loader:()=>a(()=>import("./index.html-C7yF2mKI.js"),__vite__mapDeps([3945,1])),meta:{t:"标签: Dependency Injection",I:!1}}],["/tag/url%E9%85%8D%E7%BD%AE/",{loader:()=>a(()=>import("./index.html-CC30gxSn.js"),__vite__mapDeps([3946,1])),meta:{t:"标签: URL配置",I:!1}}],["/tag/%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE/",{loader:()=>a(()=>import("./index.html-CkYsQ7WZ.js"),__vite__mapDeps([3947,1])),meta:{t:"标签: 安全配置",I:!1}}],["/tag/gateway/",{loader:()=>a(()=>import("./index.html-C8Kykmpo.js"),__vite__mapDeps([3948,1])),meta:{t:"标签: Gateway",I:!1}}],["/tag/url-rewriting/",{loader:()=>a(()=>import("./index.html-DRX1DlgY.js"),__vite__mapDeps([3949,1])),meta:{t:"标签: URL Rewriting",I:!1}}],["/tag/%E6%9B%B4%E6%96%B0%E6%96%87%E6%A1%A3/",{loader:()=>a(()=>import("./index.html-Dpwhkx-u.js"),__vite__mapDeps([3950,1])),meta:{t:"标签: 更新文档",I:!1}}],["/tag/%E6%9B%B4%E6%96%B0/",{loader:()=>a(()=>import("./index.html-Gqbo5EVu.js"),__vite__mapDeps([3951,1])),meta:{t:"标签: 更新",I:!1}}],["/tag/%E6%96%87%E6%A1%A3/",{loader:()=>a(()=>import("./index.html-DAIcX9vY.js"),__vite__mapDeps([3952,1])),meta:{t:"标签: 文档",I:!1}}],["/tag/maven-artifact/",{loader:()=>a(()=>import("./index.html-D8l92-Wh.js"),__vite__mapDeps([3953,1])),meta:{t:"标签: Maven Artifact",I:!1}}],["/tag/build-tool/",{loader:()=>a(()=>import("./index.html-D0RbCzLQ.js"),__vite__mapDeps([3954,1])),meta:{t:"标签: Build Tool",I:!1}}],["/tag/java%E5%8E%86%E5%8F%B2/",{loader:()=>a(()=>import("./index.html--313qxlq.js"),__vite__mapDeps([3955,1])),meta:{t:"标签: Java历史",I:!1}}],["/tag/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/",{loader:()=>a(()=>import("./index.html-2t0oBfby.js"),__vite__mapDeps([3956,1])),meta:{t:"标签: 编程语言",I:!1}}],["/tag/javafx-button/",{loader:()=>a(()=>import("./index.html-C0mwuE7I.js"),__vite__mapDeps([3957,1])),meta:{t:"标签: JavaFX Button",I:!1}}],["/tag/domain-graph-service/",{loader:()=>a(()=>import("./index.html-BNjP_zM6.js"),__vite__mapDeps([3958,1])),meta:{t:"标签: Domain Graph Service",I:!1}}],["/tag/netflix-dgs/",{loader:()=>a(()=>import("./index.html-MbVWmjle.js"),__vite__mapDeps([3959,1])),meta:{t:"标签: Netflix DGS",I:!1}}],["/tag/instantsource/",{loader:()=>a(()=>import("./index.html-BvFtO50w.js"),__vite__mapDeps([3960,1])),meta:{t:"标签: InstantSource",I:!1}}],["/tag/cql/",{loader:()=>a(()=>import("./index.html-iUOWFJsj.js"),__vite__mapDeps([3961,1])),meta:{t:"标签: CQL",I:!1}}],["/tag/batch/",{loader:()=>a(()=>import("./index.html-DROzqk5r.js"),__vite__mapDeps([3962,1])),meta:{t:"标签: Batch",I:!1}}],["/tag/cheat-sheet/",{loader:()=>a(()=>import("./index.html-BuR0oQFl.js"),__vite__mapDeps([3963,1])),meta:{t:"标签: Cheat Sheet",I:!1}}],["/tag/pattern-matching/",{loader:()=>a(()=>import("./index.html-CIeZpmgb.js"),__vite__mapDeps([3964,1])),meta:{t:"标签: Pattern Matching",I:!1}}],["/tag/sleep()/",{loader:()=>a(()=>import("./index.html-CdrtBjoj.js"),__vite__mapDeps([3965,1])),meta:{t:"标签: sleep()",I:!1}}],["/tag/delay()/",{loader:()=>a(()=>import("./index.html-BsGjk-OK.js"),__vite__mapDeps([3966,1])),meta:{t:"标签: delay()",I:!1}}],["/tag/thumbprint/",{loader:()=>a(()=>import("./index.html-D4dWOy8C.js"),__vite__mapDeps([3967,1])),meta:{t:"标签: Thumbprint",I:!1}}],["/tag/data-objects/",{loader:()=>a(()=>import("./index.html-C_75rlke.js"),__vite__mapDeps([3968,1])),meta:{t:"标签: Data Objects",I:!1}}],["/tag/xml-configuration/",{loader:()=>a(()=>import("./index.html-BSSiQk4U.js"),__vite__mapDeps([3969,1])),meta:{t:"标签: XML Configuration",I:!1}}],["/tag/repeated-characters/",{loader:()=>a(()=>import("./index.html-CFQeO_Ka.js"),__vite__mapDeps([3970,1])),meta:{t:"标签: Repeated Characters",I:!1}}],["/tag/key-generation/",{loader:()=>a(()=>import("./index.html-BXKoDVS4.js"),__vite__mapDeps([3971,1])),meta:{t:"标签: Key Generation",I:!1}}],["/tag/trace-id/",{loader:()=>a(()=>import("./index.html-FrUEjI3q.js"),__vite__mapDeps([3972,1])),meta:{t:"标签: Trace ID",I:!1}}],["/tag/document-id/",{loader:()=>a(()=>import("./index.html-ucXbmGyh.js"),__vite__mapDeps([3973,1])),meta:{t:"标签: Document ID",I:!1}}],["/tag/junit-4/",{loader:()=>a(()=>import("./index.html-Dv2hPPpw.js"),__vite__mapDeps([3974,1])),meta:{t:"标签: JUnit 4",I:!1}}],["/tag/test-case/",{loader:()=>a(()=>import("./index.html-v8zR5Dkm.js"),__vite__mapDeps([3975,1])),meta:{t:"标签: Test Case",I:!1}}],["/tag/hidden-classes/",{loader:()=>a(()=>import("./index.html-CUVWoSSR.js"),__vite__mapDeps([3976,1])),meta:{t:"标签: Hidden Classes",I:!1}}],["/tag/java-15/",{loader:()=>a(()=>import("./index.html-BujFvh3E.js"),__vite__mapDeps([3977,1])),meta:{t:"标签: Java 15",I:!1}}],["/tag/kotlinx-serialization/",{loader:()=>a(()=>import("./index.html-D0YlbqQ3.js"),__vite__mapDeps([2903,1])),meta:{t:"标签: Kotlinx Serialization",I:!1}}],["/tag/fault-tolerance/",{loader:()=>a(()=>import("./index.html-C0Lh5iLw.js"),__vite__mapDeps([3978,1])),meta:{t:"标签: Fault Tolerance",I:!1}}],["/tag/load-balancing/",{loader:()=>a(()=>import("./index.html-GK_sxAHN.js"),__vite__mapDeps([3979,1])),meta:{t:"标签: Load Balancing",I:!1}}],["/tag/thread-safety/",{loader:()=>a(()=>import("./index.html-D4-vyZdy.js"),__vite__mapDeps([3980,1])),meta:{t:"标签: Thread Safety",I:!1}}],["/tag/identityhashmap/",{loader:()=>a(()=>import("./index.html-DKL2wKtS.js"),__vite__mapDeps([3981,1])),meta:{t:"标签: IdentityHashMap",I:!1}}],["/tag/integration/",{loader:()=>a(()=>import("./index.html-Ca0Pcp8z.js"),__vite__mapDeps([3982,1])),meta:{t:"标签: Integration",I:!1}}],["/tag/%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F/",{loader:()=>a(()=>import("./index.html-B-5tn8et.js"),__vite__mapDeps([3983,1])),meta:{t:"标签: 代码格式",I:!1}}],["/tag/thread-information/",{loader:()=>a(()=>import("./index.html-Ba_w6ft2.js"),__vite__mapDeps([3984,1])),meta:{t:"标签: Thread Information",I:!1}}],["/tag/%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%94%9F%E6%88%90%E5%99%A8/",{loader:()=>a(()=>import("./index.html-CvfSB6nm.js"),__vite__mapDeps([3985,1])),meta:{t:"标签: 随机数生成器",I:!1}}],["/tag/springfox/",{loader:()=>a(()=>import("./index.html-BTOA9OaK.js"),__vite__mapDeps([3986,1])),meta:{t:"标签: SpringFox",I:!1}}],["/tag/basicerrorcontroller/",{loader:()=>a(()=>import("./index.html-BvcIX5_B.js"),__vite__mapDeps([3987,1])),meta:{t:"标签: BasicErrorController",I:!1}}],["/tag/sequenceinputstream/",{loader:()=>a(()=>import("./index.html-imMXKsni.js"),__vite__mapDeps([3988,1])),meta:{t:"标签: SequenceInputStream",I:!1}}],["/tag/%E6%8F%8F%E8%BF%B0/",{loader:()=>a(()=>import("./index.html-DpxvCrPM.js"),__vite__mapDeps([3989,1])),meta:{t:"标签: 描述",I:!1}}],["/tag/%E7%A4%BA%E4%BE%8B/",{loader:()=>a(()=>import("./index.html-B01SD_Wd.js"),__vite__mapDeps([3990,1])),meta:{t:"标签: 示例",I:!1}}],["/tag/contentequals/",{loader:()=>a(()=>import("./index.html-BKGAm0M_.js"),__vite__mapDeps([3991,1])),meta:{t:"标签: contentEquals",I:!1}}],["/tag/oauth-2.0/",{loader:()=>a(()=>import("./index.html-CcM0bVX7.js"),__vite__mapDeps([3992,1])),meta:{t:"标签: OAuth 2.0",I:!1}}],["/tag/java-nio.2/",{loader:()=>a(()=>import("./index.html-CQ72ZKIs.js"),__vite__mapDeps([3993,1])),meta:{t:"标签: Java NIO.2",I:!1}}],["/tag/415-unsupported-media-type/",{loader:()=>a(()=>import("./index.html-DvxlQ8Ax.js"),__vite__mapDeps([3994,1])),meta:{t:"标签: 415 Unsupported Media Type",I:!1}}],["/tag/spring-application/",{loader:()=>a(()=>import("./index.html-DLloETXI.js"),__vite__mapDeps([3995,1])),meta:{t:"标签: Spring Application",I:!1}}],["/tag/%E6%90%9C%E7%B4%A2/",{loader:()=>a(()=>import("./index.html-PPgCl1_j.js"),__vite__mapDeps([3996,1])),meta:{t:"标签: 搜索",I:!1}}],["/tag/code-injection/",{loader:()=>a(()=>import("./index.html-8nl1ctLj.js"),__vite__mapDeps([3997,1])),meta:{t:"标签: Code Injection",I:!1}}],["/tag/clickjacking/",{loader:()=>a(()=>import("./index.html-BYROFcyw.js"),__vite__mapDeps([3998,1])),meta:{t:"标签: Clickjacking",I:!1}}],["/tag/%E6%B5%AE%E7%82%B9%E6%95%B0/",{loader:()=>a(()=>import("./index.html-Ddf9xaC3.js"),__vite__mapDeps([3999,1])),meta:{t:"标签: 浮点数",I:!1}}],["/tag/custom-validation/",{loader:()=>a(()=>import("./index.html-DvSiI2sK.js"),__vite__mapDeps([4000,1])),meta:{t:"标签: Custom Validation",I:!1}}],["/tag/swagger-codegen/",{loader:()=>a(()=>import("./index.html-CzxTj1Un.js"),__vite__mapDeps([4001,1])),meta:{t:"标签: Swagger Codegen",I:!1}}],["/tag/bit-manipulation/",{loader:()=>a(()=>import("./index.html-BlOJjiuA.js"),__vite__mapDeps([4002,1])),meta:{t:"标签: Bit Manipulation",I:!1}}],["/tag/spectator/",{loader:()=>a(()=>import("./index.html-GgCeKxsE.js"),__vite__mapDeps([4003,1])),meta:{t:"标签: Spectator",I:!1}}],["/tag/%E5%BA%A6%E9%87%8F/",{loader:()=>a(()=>import("./index.html-CMIZTQjx.js"),__vite__mapDeps([4004,1])),meta:{t:"标签: 度量",I:!1}}],["/tag/data-model/",{loader:()=>a(()=>import("./index.html-Db_dUG_r.js"),__vite__mapDeps([4005,1])),meta:{t:"标签: Data Model",I:!1}}],["/tag/jmx/",{loader:()=>a(()=>import("./index.html-DOD3JHMk.js"),__vite__mapDeps([4006,1])),meta:{t:"标签: JMX",I:!1}}],["/tag/%E7%AB%AF%E5%8F%A3/",{loader:()=>a(()=>import("./index.html-CKgioTc1.js"),__vite__mapDeps([4007,1])),meta:{t:"标签: 端口",I:!1}}],["/tag/framework/",{loader:()=>a(()=>import("./index.html-ClTvphCa.js"),__vite__mapDeps([4008,1])),meta:{t:"标签: Framework",I:!1}}],["/tag/visualvm/",{loader:()=>a(()=>import("./index.html-DiH5V9oV.js"),__vite__mapDeps([4009,1])),meta:{t:"标签: VisualVM",I:!1}}],["/tag/%E8%BF%9C%E7%A8%8B%E7%9B%91%E6%8E%A7/",{loader:()=>a(()=>import("./index.html-DrdnLsrc.js"),__vite__mapDeps([4010,1])),meta:{t:"标签: 远程监控",I:!1}}],["/tag/replication/",{loader:()=>a(()=>import("./index.html-Cad3MNMH.js"),__vite__mapDeps([4011,1])),meta:{t:"标签: Replication",I:!1}}],["/tag/partitioning/",{loader:()=>a(()=>import("./index.html-CP3qkBR_.js"),__vite__mapDeps([4012,1])),meta:{t:"标签: Partitioning",I:!1}}],["/tag/thread-name/",{loader:()=>a(()=>import("./index.html-DKgqdaA0.js"),__vite__mapDeps([4013,1])),meta:{t:"标签: Thread Name",I:!1}}],["/tag/sonarqube/",{loader:()=>a(()=>import("./index.html-CkNG8pX4.js"),__vite__mapDeps([4014,1])),meta:{t:"标签: SonarQube",I:!1}}],["/tag/startup-time/",{loader:()=>a(()=>import("./index.html-DGPCCrK1.js"),__vite__mapDeps([4015,1])),meta:{t:"标签: Startup Time",I:!1}}],["/tag/unix-domain-socket/",{loader:()=>a(()=>import("./index.html-BQKZt8iv.js"),__vite__mapDeps([4016,1])),meta:{t:"标签: Unix Domain Socket",I:!1}}],["/tag/java-16/",{loader:()=>a(()=>import("./index.html-C3dd-C3F.js"),__vite__mapDeps([4017,1])),meta:{t:"标签: Java 16",I:!1}}],["/tag/locale/",{loader:()=>a(()=>import("./index.html-D950IU2b.js"),__vite__mapDeps([4018,1])),meta:{t:"标签: Locale",I:!1}}],["/tag/decimalformat/",{loader:()=>a(()=>import("./index.html-nqZgNBOO.js"),__vite__mapDeps([4019,1])),meta:{t:"标签: DecimalFormat",I:!1}}],["/tag/return/",{loader:()=>a(()=>import("./index.html-DbijfANN.js"),__vite__mapDeps([4020,1])),meta:{t:"标签: Return",I:!1}}],["/tag/thread-safety/",{loader:()=>a(()=>import("./index.html-D4-vyZdy.js"),__vite__mapDeps([3980,1])),meta:{t:"标签: thread safety",I:!1}}],["/tag/maven%E9%85%8D%E7%BD%AE/",{loader:()=>a(()=>import("./index.html-Dt6uipu9.js"),__vite__mapDeps([4021,1])),meta:{t:"标签: Maven配置",I:!1}}],["/tag/java-optional/",{loader:()=>a(()=>import("./index.html-RquD44MT.js"),__vite__mapDeps([4022,1])),meta:{t:"标签: Java Optional",I:!1}}],["/tag/cassandraunit/",{loader:()=>a(()=>import("./index.html-ByyH3mVC.js"),__vite__mapDeps([4023,1])),meta:{t:"标签: CassandraUnit",I:!1}}],["/tag/constructor-chaining/",{loader:()=>a(()=>import("./index.html-D5YzpCgT.js"),__vite__mapDeps([4024,1])),meta:{t:"标签: Constructor Chaining",I:!1}}],["/tag/constructors/",{loader:()=>a(()=>import("./index.html-DJnoROSL.js"),__vite__mapDeps([4025,1])),meta:{t:"标签: Constructors",I:!1}}],["/tag/java-abstract-classes/",{loader:()=>a(()=>import("./index.html-DXUPhSAA.js"),__vite__mapDeps([4026,1])),meta:{t:"标签: Java Abstract Classes",I:!1}}],["/tag/val/",{loader:()=>a(()=>import("./index.html-OKXxhMnt.js"),__vite__mapDeps([4027,1])),meta:{t:"标签: val",I:!1}}],["/tag/var/",{loader:()=>a(()=>import("./index.html-D4c8Pw1w.js"),__vite__mapDeps([4028,1])),meta:{t:"标签: var",I:!1}}],["/tag/hmac/",{loader:()=>a(()=>import("./index.html-70DrA6T-.js"),__vite__mapDeps([4029,1])),meta:{t:"标签: HMAC",I:!1}}],["/tag/bouncycastle/",{loader:()=>a(()=>import("./index.html-CEbFd2Ac.js"),__vite__mapDeps([4030,1])),meta:{t:"标签: BouncyCastle",I:!1}}],["/tag/csv%E8%A7%A3%E6%9E%90/",{loader:()=>a(()=>import("./index.html-QdInjvvg.js"),__vite__mapDeps([4031,1])),meta:{t:"标签: CSV解析",I:!1}}],["/tag/java-reflection/",{loader:()=>a(()=>import("./index.html-C8mQSmo3.js"),__vite__mapDeps([4032,1])),meta:{t:"标签: Java Reflection",I:!1}}],["/tag/static-method-invocation/",{loader:()=>a(()=>import("./index.html-CZrgNATY.js"),__vite__mapDeps([4033,1])),meta:{t:"标签: Static Method Invocation",I:!1}}],["/tag/reverse-iteration/",{loader:()=>a(()=>import("./index.html-BLk6AuLX.js"),__vite__mapDeps([4034,1])),meta:{t:"标签: Reverse Iteration",I:!1}}],["/tag/ldap/",{loader:()=>a(()=>import("./index.html-pgrpF3DF.js"),__vite__mapDeps([4035,1])),meta:{t:"标签: LDAP",I:!1}}],["/tag/jndi/",{loader:()=>a(()=>import("./index.html-C-DRkrku.js"),__vite__mapDeps([4036,1])),meta:{t:"标签: JNDI",I:!1}}],["/tag/crac/",{loader:()=>a(()=>import("./index.html-CGMAxb5c.js"),__vite__mapDeps([4037,1])),meta:{t:"标签: CRaC",I:!1}}],["/tag/apache-cassandra/",{loader:()=>a(()=>import("./index.html-DEj3dD76.js"),__vite__mapDeps([4038,1])),meta:{t:"标签: Apache Cassandra",I:!1}}],["/tag/htmlcleaner/",{loader:()=>a(()=>import("./index.html-Dm9NjMfY.js"),__vite__mapDeps([4039,1])),meta:{t:"标签: HTMLCleaner",I:!1}}],["/tag/jericho/",{loader:()=>a(()=>import("./index.html-C0kWxa8L.js"),__vite__mapDeps([4040,1])),meta:{t:"标签: Jericho",I:!1}}],["/tag/snitch/",{loader:()=>a(()=>import("./index.html-BEZ3NQwp.js"),__vite__mapDeps([4041,1])),meta:{t:"标签: Snitch",I:!1}}],["/tag/request-routing/",{loader:()=>a(()=>import("./index.html-D8oQhdmc.js"),__vite__mapDeps([4042,1])),meta:{t:"标签: Request Routing",I:!1}}],["/tag/split/",{loader:()=>a(()=>import("./index.html-CaQvZu_U.js"),__vite__mapDeps([3506,1])),meta:{t:"标签: Split",I:!1}}],["/tag/onceperrequestfilter/",{loader:()=>a(()=>import("./index.html-BPWQ6Bqz.js"),__vite__mapDeps([4043,1])),meta:{t:"标签: OncePerRequestFilter",I:!1}}],["/tag/method-parameters/",{loader:()=>a(()=>import("./index.html-Dg1NdcUh.js"),__vite__mapDeps([3443,1])),meta:{t:"标签: Method Parameters",I:!1}}],["/tag/frozen-keyword/",{loader:()=>a(()=>import("./index.html-BoWCVHC5.js"),__vite__mapDeps([4044,1])),meta:{t:"标签: frozen keyword",I:!1}}],["/tag/collections/",{loader:()=>a(()=>import("./index.html-BJP0h89m.js"),__vite__mapDeps([3388,1])),meta:{t:"标签: collections",I:!1}}],["/tag/user-defined-types/",{loader:()=>a(()=>import("./index.html-DnP1XIzo.js"),__vite__mapDeps([4045,1])),meta:{t:"标签: user-defined types",I:!1}}],["/tag/long-to-string/",{loader:()=>a(()=>import("./index.html-_1rc6Oh8.js"),__vite__mapDeps([4046,1])),meta:{t:"标签: Long to String",I:!1}}],["/tag/numeric-conversion/",{loader:()=>a(()=>import("./index.html-Dm7tpIy2.js"),__vite__mapDeps([4047,1])),meta:{t:"标签: Numeric Conversion",I:!1}}],["/tag/object-to-byte-array/",{loader:()=>a(()=>import("./index.html-Ckhy3Upe.js"),__vite__mapDeps([4048,1])),meta:{t:"标签: Object to byte array",I:!1}}],["/tag/%E6%96%87%E6%A1%A3%E6%A0%BC%E5%BC%8F%E5%8C%96/",{loader:()=>a(()=>import("./index.html-B5R4YWg7.js"),__vite__mapDeps([4049,1])),meta:{t:"标签: 文档格式化",I:!1}}],["/tag/submap/",{loader:()=>a(()=>import("./index.html-C4JTnEbn.js"),__vite__mapDeps([4050,1])),meta:{t:"标签: Submap",I:!1}}],["/tag/modelmapper/",{loader:()=>a(()=>import("./index.html-DFkk0P_L.js"),__vite__mapDeps([4051,1])),meta:{t:"标签: ModelMapper",I:!1}}],["/tag/transientobjectexception/",{loader:()=>a(()=>import("./index.html-DW8nphEG.js"),__vite__mapDeps([4052,1])),meta:{t:"标签: TransientObjectException",I:!1}}],["/tag/cascadetype/",{loader:()=>a(()=>import("./index.html-Sz97Y9Pp.js"),__vite__mapDeps([4053,1])),meta:{t:"标签: CascadeType",I:!1}}],["/tag/keyset/",{loader:()=>a(()=>import("./index.html-BmEsqyfm.js"),__vite__mapDeps([4054,1])),meta:{t:"标签: keySet",I:!1}}],["/tag/entryset/",{loader:()=>a(()=>import("./index.html-CPRhuN1N.js"),__vite__mapDeps([4055,1])),meta:{t:"标签: entrySet",I:!1}}],["/tag/values/",{loader:()=>a(()=>import("./index.html-BxbnwxIc.js"),__vite__mapDeps([4056,1])),meta:{t:"标签: values",I:!1}}],["/tag/%E5%A4%9A%E8%A1%8C%E6%96%87%E6%9C%AC/",{loader:()=>a(()=>import("./index.html-VF7cu1uB.js"),__vite__mapDeps([4057,1])),meta:{t:"标签: 多行文本",I:!1}}],["/tag/%E5%B9%B6%E8%A1%8C%E6%89%A7%E8%A1%8C/",{loader:()=>a(()=>import("./index.html-CQlLv3dC.js"),__vite__mapDeps([4058,1])),meta:{t:"标签: 并行执行",I:!1}}],["/tag/java-se-17/",{loader:()=>a(()=>import("./index.html-CQknQyox.js"),__vite__mapDeps([4059,1])),meta:{t:"标签: Java SE 17",I:!1}}],["/tag/switch/",{loader:()=>a(()=>import("./index.html-Cg7i2ljf.js"),__vite__mapDeps([3023,1])),meta:{t:"标签: Switch",I:!1}}],["/tag/prim%E7%AE%97%E6%B3%95/",{loader:()=>a(()=>import("./index.html-B4PnNs1V.js"),__vite__mapDeps([4060,1])),meta:{t:"标签: Prim算法",I:!1}}],["/tag/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/",{loader:()=>a(()=>import("./index.html-CEEgXlCF.js"),__vite__mapDeps([4061,1])),meta:{t:"标签: 最小生成树",I:!1}}],["/tag/%E5%9B%BE%E7%AE%97%E6%B3%95/",{loader:()=>a(()=>import("./index.html-dcNcTih8.js"),__vite__mapDeps([4062,1])),meta:{t:"标签: 图算法",I:!1}}],["/tag/ratpack/",{loader:()=>a(()=>import("./index.html-BjBxVPiF.js"),__vite__mapDeps([4063,1])),meta:{t:"标签: Ratpack",I:!1}}],["/tag/snapshotting/",{loader:()=>a(()=>import("./index.html-mPl_sv_A.js"),__vite__mapDeps([4064,1])),meta:{t:"标签: Snapshotting",I:!1}}],["/tag/java%E6%A1%86%E6%9E%B6/",{loader:()=>a(()=>import("./index.html-BdMnEjPI.js"),__vite__mapDeps([4065,1])),meta:{t:"标签: Java框架",I:!1}}],["/tag/request-rejected-exception/",{loader:()=>a(()=>import("./index.html-DjM6cTM4.js"),__vite__mapDeps([4066,1])),meta:{t:"标签: Request Rejected Exception",I:!1}}],["/tag/path-traversal/",{loader:()=>a(()=>import("./index.html-D1aaq9iw.js"),__vite__mapDeps([4067,1])),meta:{t:"标签: Path Traversal",I:!1}}],["/tag/%E6%9B%B4%E6%96%B0%E9%94%AE%E5%80%BC/",{loader:()=>a(()=>import("./index.html-PAKaauRN.js"),__vite__mapDeps([4068,1])),meta:{t:"标签: 更新键值",I:!1}}],["/tag/rbac/",{loader:()=>a(()=>import("./index.html-DBXdc9-a.js"),__vite__mapDeps([4069,1])),meta:{t:"标签: RBAC",I:!1}}],["/tag/acl/",{loader:()=>a(()=>import("./index.html-B62J73ri.js"),__vite__mapDeps([4070,1])),meta:{t:"标签: ACL",I:!1}}],["/tag/abac/",{loader:()=>a(()=>import("./index.html-C8UMr4gE.js"),__vite__mapDeps([4071,1])),meta:{t:"标签: ABAC",I:!1}}],["/tag/partition-key/",{loader:()=>a(()=>import("./index.html-Bzq6O2W9.js"),__vite__mapDeps([4072,1])),meta:{t:"标签: Partition Key",I:!1}}],["/tag/composite-key/",{loader:()=>a(()=>import("./index.html-BjsMp41Z.js"),__vite__mapDeps([4073,1])),meta:{t:"标签: Composite Key",I:!1}}],["/tag/clustering-key/",{loader:()=>a(()=>import("./index.html-DWWH6GFB.js"),__vite__mapDeps([4074,1])),meta:{t:"标签: Clustering Key",I:!1}}],["/tag/%E6%96%87%E4%BB%B6%E6%AF%94%E8%BE%83/",{loader:()=>a(()=>import("./index.html-Cr4EXE5u.js"),__vite__mapDeps([4075,1])),meta:{t:"标签: 文件比较",I:!1}}],["/tag/java-stream-io/",{loader:()=>a(()=>import("./index.html-CypnEE5C.js"),__vite__mapDeps([4076,1])),meta:{t:"标签: Java Stream I/O",I:!1}}],["/tag/apache-commons-io/",{loader:()=>a(()=>import("./index.html-BllaWRgc.js"),__vite__mapDeps([4077,1])),meta:{t:"标签: Apache Commons I/O",I:!1}}],["/tag/database-schema/",{loader:()=>a(()=>import("./index.html-CU8viLeS.js"),__vite__mapDeps([4078,1])),meta:{t:"标签: Database Schema",I:!1}}],["/tag/spaces-count/",{loader:()=>a(()=>import("./index.html-Bflkqcc7.js"),__vite__mapDeps([4079,1])),meta:{t:"标签: Spaces Count",I:!1}}],["/tag/%E5%BA%8F%E5%88%97%E5%8C%96/",{loader:()=>a(()=>import("./index.html-e_hE-h3O.js"),__vite__mapDeps([4080,1])),meta:{t:"标签: 序列化",I:!1}}],["/tag/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8/",{loader:()=>a(()=>import("./index.html-C9IuYYRd.js"),__vite__mapDeps([4081,1])),meta:{t:"标签: 自定义序列化器",I:!1}}],["/tag/java-war/",{loader:()=>a(()=>import("./index.html-DErtjLaC.js"),__vite__mapDeps([4082,1])),meta:{t:"标签: Java WAR",I:!1}}],["/tag/jce/",{loader:()=>a(()=>import("./index.html-CSkas68j.js"),__vite__mapDeps([4083,1])),meta:{t:"标签: JCE",I:!1}}],["/tag/cryptography/",{loader:()=>a(()=>import("./index.html-Dw2u2Xn1.js"),__vite__mapDeps([4084,1])),meta:{t:"标签: Cryptography",I:!1}}],["/tag/%E6%AF%AB%E7%A7%92/",{loader:()=>a(()=>import("./index.html-BMFMl9ys.js"),__vite__mapDeps([4085,1])),meta:{t:"标签: 毫秒",I:!1}}],["/tag/hhmmss/",{loader:()=>a(()=>import("./index.html-CIgGFNJR.js"),__vite__mapDeps([4086,1])),meta:{t:"标签: HH:MM:SS",I:!1}}],["/tag/jsonschema2pojo/",{loader:()=>a(()=>import("./index.html-C0dMeX4p.js"),__vite__mapDeps([4087,1])),meta:{t:"标签: jsonschema2pojo",I:!1}}],["/tag/java%E7%B1%BB/",{loader:()=>a(()=>import("./index.html-GafbP-o2.js"),__vite__mapDeps([4088,1])),meta:{t:"标签: Java类",I:!1}}],["/tag/java%E6%80%A7%E8%83%BD/",{loader:()=>a(()=>import("./index.html-BN83e2DE.js"),__vite__mapDeps([4089,1])),meta:{t:"标签: Java性能",I:!1}}],["/tag/%E7%BA%BF%E7%A8%8B%E7%AE%A1%E7%90%86/",{loader:()=>a(()=>import("./index.html-CTJnCoYx.js"),__vite__mapDeps([4090,1])),meta:{t:"标签: 线程管理",I:!1}}],["/tag/%E5%BB%B6%E8%BF%9F/",{loader:()=>a(()=>import("./index.html-DoHLD90l.js"),__vite__mapDeps([4091,1])),meta:{t:"标签: 延迟",I:!1}}],["/tag/%E6%B5%8B%E8%AF%95%E8%AE%A1%E5%88%92/",{loader:()=>a(()=>import("./index.html-RpkY23cL.js"),__vite__mapDeps([4092,1])),meta:{t:"标签: 测试计划",I:!1}}],["/tag/pass-by-reference/",{loader:()=>a(()=>import("./index.html-q915yIAR.js"),__vite__mapDeps([4093,1])),meta:{t:"标签: Pass-by-Reference",I:!1}}],["/tag/dependencymanagement/",{loader:()=>a(()=>import("./index.html-B7byuYqH.js"),__vite__mapDeps([4094,1])),meta:{t:"标签: dependencyManagement",I:!1}}],["/tag/dependencies/",{loader:()=>a(()=>import("./index.html-D5GdRtW7.js"),__vite__mapDeps([4095,1])),meta:{t:"标签: dependencies",I:!1}}],["/tag/thread-priority/",{loader:()=>a(()=>import("./index.html-Dme67JNR.js"),__vite__mapDeps([4096,1])),meta:{t:"标签: Thread Priority",I:!1}}],["/tag/result-class/",{loader:()=>a(()=>import("./index.html-5yLoKS2b.js"),__vite__mapDeps([4097,1])),meta:{t:"标签: Result Class",I:!1}}],["/tag/surefire-plugin/",{loader:()=>a(()=>import("./index.html-Cs9iSiRZ.js"),__vite__mapDeps([4098,1])),meta:{t:"标签: Surefire Plugin",I:!1}}],["/tag/test/",{loader:()=>a(()=>import("./index.html-CA79lthX.js"),__vite__mapDeps([4099,1])),meta:{t:"标签: Test",I:!1}}],["/tag/arangodb/",{loader:()=>a(()=>import("./index.html-BBalmBvH.js"),__vite__mapDeps([4100,1])),meta:{t:"标签: ArangoDB",I:!1}}],["/tag/websocket/",{loader:()=>a(()=>import("./index.html-jZnwq92S.js"),__vite__mapDeps([4101,1])),meta:{t:"标签: WebSocket",I:!1}}],["/tag/source-directories/",{loader:()=>a(()=>import("./index.html-DIDPNwGH.js"),__vite__mapDeps([4102,1])),meta:{t:"标签: Source Directories",I:!1}}],["/tag/dapr/",{loader:()=>a(()=>import("./index.html-DQm9kouZ.js"),__vite__mapDeps([4103,1])),meta:{t:"标签: Dapr",I:!1}}],["/tag/geospatial/",{loader:()=>a(()=>import("./index.html-CuxxxtoF.js"),__vite__mapDeps([4104,1])),meta:{t:"标签: Geospatial",I:!1}}],["/tag/gis/",{loader:()=>a(()=>import("./index.html-DplkWPpg.js"),__vite__mapDeps([4105,1])),meta:{t:"标签: GIS",I:!1}}],["/tag/gps/",{loader:()=>a(()=>import("./index.html-BprSm3ai.js"),__vite__mapDeps([4106,1])),meta:{t:"标签: GPS",I:!1}}],["/tag/pem/",{loader:()=>a(()=>import("./index.html-gYIK_Fmk.js"),__vite__mapDeps([4107,1])),meta:{t:"标签: PEM",I:!1}}],["/tag/jks/",{loader:()=>a(()=>import("./index.html-PmlGIY0w.js"),__vite__mapDeps([4108,1])),meta:{t:"标签: JKS",I:!1}}],["/tag/openssl/",{loader:()=>a(()=>import("./index.html-BuZgWPTe.js"),__vite__mapDeps([4109,1])),meta:{t:"标签: openssl",I:!1}}],["/tag/admission-controller/",{loader:()=>a(()=>import("./index.html-CA442oas.js"),__vite__mapDeps([4110,1])),meta:{t:"标签: Admission Controller",I:!1}}],["/tag/openssl/",{loader:()=>a(()=>import("./index.html-BuZgWPTe.js"),__vite__mapDeps([4109,1])),meta:{t:"标签: OpenSSL",I:!1}}],["/tag/self-signed-certificate/",{loader:()=>a(()=>import("./index.html-C7p9uy2w.js"),__vite__mapDeps([4111,1])),meta:{t:"标签: Self-Signed Certificate",I:!1}}],["/tag/rotation/",{loader:()=>a(()=>import("./index.html-Bdj0JabA.js"),__vite__mapDeps([4112,1])),meta:{t:"标签: Rotation",I:!1}}],["/tag/maven-properties/",{loader:()=>a(()=>import("./index.html-DtTfBa72.js"),__vite__mapDeps([4113,1])),meta:{t:"标签: Maven Properties",I:!1}}],["/tag/mvp/",{loader:()=>a(()=>import("./index.html-CVZ03snZ.js"),__vite__mapDeps([4114,1])),meta:{t:"标签: MVP",I:!1}}],["/tag/range-checking/",{loader:()=>a(()=>import("./index.html-sxXiFT6X.js"),__vite__mapDeps([4115,1])),meta:{t:"标签: Range Checking",I:!1}}],["/tag/futures/",{loader:()=>a(()=>import("./index.html-cyj01XY2.js"),__vite__mapDeps([4116,1])),meta:{t:"标签: Futures",I:!1}}],["/tag/maven-repository/",{loader:()=>a(()=>import("./index.html-DyGBdn6A.js"),__vite__mapDeps([4117,1])),meta:{t:"标签: Maven Repository",I:!1}}],["/tag/github-pages/",{loader:()=>a(()=>import("./index.html-BIW9za2e.js"),__vite__mapDeps([4118,1])),meta:{t:"标签: GitHub Pages",I:!1}}],["/tag/zip4j/",{loader:()=>a(()=>import("./index.html-n0XYxlSj.js"),__vite__mapDeps([4119,1])),meta:{t:"标签: Zip4j",I:!1}}],["/tag/%E5%AF%86%E7%A0%81%E4%BF%9D%E6%8A%A4/",{loader:()=>a(()=>import("./index.html-DwOdFGsc.js"),__vite__mapDeps([4120,1])),meta:{t:"标签: 密码保护",I:!1}}],["/tag/%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6/",{loader:()=>a(()=>import("./index.html-CwM-8Dl4.js"),__vite__mapDeps([4121,1])),meta:{t:"标签: 压缩文件",I:!1}}],["/tag/lru-cache/",{loader:()=>a(()=>import("./index.html-CebRACKH.js"),__vite__mapDeps([4122,1])),meta:{t:"标签: LRU Cache",I:!1}}],["/tag/%E7%BC%93%E5%AD%98/",{loader:()=>a(()=>import("./index.html-Y7joX6q7.js"),__vite__mapDeps([4123,1])),meta:{t:"标签: 缓存",I:!1}}],["/tag/thread-safety/",{loader:()=>a(()=>import("./index.html-D4-vyZdy.js"),__vite__mapDeps([3980,1])),meta:{t:"标签: Thread-Safety",I:!1}}],["/tag/java-annotation/",{loader:()=>a(()=>import("./index.html-CngBDk8_.js"),__vite__mapDeps([4124,1])),meta:{t:"标签: Java Annotation",I:!1}}],["/tag/attribute-value-restrictions/",{loader:()=>a(()=>import("./index.html-C5irVuh8.js"),__vite__mapDeps([4125,1])),meta:{t:"标签: Attribute Value Restrictions",I:!1}}],["/tag/java-team-lead/",{loader:()=>a(()=>import("./index.html-COVndX9y.js"),__vite__mapDeps([4126,1])),meta:{t:"标签: Java Team Lead",I:!1}}],["/tag/%E8%BF%9C%E7%A8%8B%E5%B7%A5%E4%BD%9C/",{loader:()=>a(()=>import("./index.html-Dn3iKnO4.js"),__vite__mapDeps([4127,1])),meta:{t:"标签: 远程工作",I:!1}}],["/tag/getters/",{loader:()=>a(()=>import("./index.html-BThug1P1.js"),__vite__mapDeps([4128,1])),meta:{t:"标签: Getters",I:!1}}],["/tag/setters/",{loader:()=>a(()=>import("./index.html-BZJC1Qy4.js"),__vite__mapDeps([4129,1])),meta:{t:"标签: Setters",I:!1}}],["/tag/exceptions/",{loader:()=>a(()=>import("./index.html-zjW4AD0f.js"),__vite__mapDeps([4130,1])),meta:{t:"标签: Exceptions",I:!1}}],["/tag/utility-classes/",{loader:()=>a(()=>import("./index.html-DZTcMDa7.js"),__vite__mapDeps([4131,1])),meta:{t:"标签: Utility Classes",I:!1}}],["/tag/classnotfoundexception/",{loader:()=>a(()=>import("./index.html-CIiz06I2.js"),__vite__mapDeps([4132,1])),meta:{t:"标签: ClassNotFoundException",I:!1}}],["/tag/syslog/",{loader:()=>a(()=>import("./index.html-CnsU7PbE.js"),__vite__mapDeps([4133,1])),meta:{t:"标签: Syslog",I:!1}}],["/tag/compilation-error/",{loader:()=>a(()=>import("./index.html-CjyVcTyh.js"),__vite__mapDeps([4134,1])),meta:{t:"标签: Compilation Error",I:!1}}],["/tag/%E5%8A%A0%E5%AF%86/",{loader:()=>a(()=>import("./index.html-C5FsjWyZ.js"),__vite__mapDeps([4135,1])),meta:{t:"标签: 加密",I:!1}}],["/tag/%E8%A7%A3%E5%AF%86/",{loader:()=>a(()=>import("./index.html-Diepu2dY.js"),__vite__mapDeps([4136,1])),meta:{t:"标签: 解密",I:!1}}],["/tag/datastax-astra/",{loader:()=>a(()=>import("./index.html-D0MnbsFU.js"),__vite__mapDeps([4137,1])),meta:{t:"标签: DataStax Astra",I:!1}}],["/tag/stargate/",{loader:()=>a(()=>import("./index.html-C1XEkrwh.js"),__vite__mapDeps([4138,1])),meta:{t:"标签: Stargate",I:!1}}],["/tag/cluster/",{loader:()=>a(()=>import("./index.html-CTanSnHz.js"),__vite__mapDeps([4139,1])),meta:{t:"标签: Cluster",I:!1}}],["/tag/datacenters/",{loader:()=>a(()=>import("./index.html-k98FGvqq.js"),__vite__mapDeps([4140,1])),meta:{t:"标签: Datacenters",I:!1}}],["/tag/racks/",{loader:()=>a(()=>import("./index.html-DxZmTvBJ.js"),__vite__mapDeps([4141,1])),meta:{t:"标签: Racks",I:!1}}],["/tag/nodes/",{loader:()=>a(()=>import("./index.html-CbRyEhjH.js"),__vite__mapDeps([4142,1])),meta:{t:"标签: Nodes",I:!1}}],["/tag/camel-case/",{loader:()=>a(()=>import("./index.html-or_0kuXj.js"),__vite__mapDeps([4143,1])),meta:{t:"标签: camel case",I:!1}}],["/tag/title-case/",{loader:()=>a(()=>import("./index.html-DLwRzSUa.js"),__vite__mapDeps([4144,1])),meta:{t:"标签: title case",I:!1}}],["/tag/collection-operations/",{loader:()=>a(()=>import("./index.html-CgXxwo1c.js"),__vite__mapDeps([4145,1])),meta:{t:"标签: Collection Operations",I:!1}}],["/tag/surefire/",{loader:()=>a(()=>import("./index.html-BWXchyEt.js"),__vite__mapDeps([4146,1])),meta:{t:"标签: Surefire",I:!1}}],["/tag/failsafe/",{loader:()=>a(()=>import("./index.html-BSjSaa2V.js"),__vite__mapDeps([4147,1])),meta:{t:"标签: Failsafe",I:!1}}],["/tag/okhttp/",{loader:()=>a(()=>import("./index.html-DLtWKk5t.js"),__vite__mapDeps([4148,1])),meta:{t:"标签: OkHttp",I:!1}}],["/tag/%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/",{loader:()=>a(()=>import("./index.html-iLcJ1UYo.js"),__vite__mapDeps([4149,1])),meta:{t:"标签: 文件下载",I:!1}}],["/tag/apache/",{loader:()=>a(()=>import("./index.html-9FSxDtSm.js"),__vite__mapDeps([4150,1])),meta:{t:"标签: Apache",I:!1}}],["/tag/gc%E7%AE%97%E6%B3%95/",{loader:()=>a(()=>import("./index.html-D3JVi_Wg.js"),__vite__mapDeps([4151,1])),meta:{t:"标签: GC算法",I:!1}}],["/tag/jvm%E5%AE%9E%E4%BE%8B/",{loader:()=>a(()=>import("./index.html-CbmPcI1b.js"),__vite__mapDeps([4152,1])),meta:{t:"标签: JVM实例",I:!1}}],["/tag/modelassert/",{loader:()=>a(()=>import("./index.html-zf2iAvHD.js"),__vite__mapDeps([4153,1])),meta:{t:"标签: ModelAssert",I:!1}}],["/tag/json-testing/",{loader:()=>a(()=>import("./index.html-DxBDa5Fx.js"),__vite__mapDeps([4154,1])),meta:{t:"标签: JSON Testing",I:!1}}],["/tag/threads/",{loader:()=>a(()=>import("./index.html-C-BUcFHU.js"),__vite__mapDeps([4155,1])),meta:{t:"标签: Threads",I:!1}}],["/tag/monitoring/",{loader:()=>a(()=>import("./index.html-DdIKVbMX.js"),__vite__mapDeps([4156,1])),meta:{t:"标签: Monitoring",I:!1}}],["/tag/min-max-heap/",{loader:()=>a(()=>import("./index.html-C_eSpdS8.js"),__vite__mapDeps([4157,1])),meta:{t:"标签: Min-Max Heap",I:!1}}],["/tag/data-structures/",{loader:()=>a(()=>import("./index.html-Cg_hqaO9.js"),__vite__mapDeps([4158,1])),meta:{t:"标签: Data Structures",I:!1}}],["/tag/%E6%8E%A5%E5%8F%A3/",{loader:()=>a(()=>import("./index.html-CRIIM3cQ.js"),__vite__mapDeps([4159,1])),meta:{t:"标签: 接口",I:!1}}],["/tag/%E9%BB%98%E8%AE%A4%E6%96%B9%E6%B3%95/",{loader:()=>a(()=>import("./index.html-Co2fNwNc.js"),__vite__mapDeps([4160,1])),meta:{t:"标签: 默认方法",I:!1}}],["/tag/%E6%8A%BD%E8%B1%A1%E7%B1%BB/",{loader:()=>a(()=>import("./index.html-MPhvEUUA.js"),__vite__mapDeps([4161,1])),meta:{t:"标签: 抽象类",I:!1}}],["/tag/jpa-entities/",{loader:()=>a(()=>import("./index.html-CHcjbp0P.js"),__vite__mapDeps([4162,1])),meta:{t:"标签: JPA Entities",I:!1}}],["/tag/serializable/",{loader:()=>a(()=>import("./index.html-Cjsvkw9C.js"),__vite__mapDeps([4163,1])),meta:{t:"标签: Serializable",I:!1}}],["/tag/%E6%95%8F%E6%84%9F%E6%95%B0%E6%8D%AE/",{loader:()=>a(()=>import("./index.html-NboGRhnJ.js"),__vite__mapDeps([4164,1])),meta:{t:"标签: 敏感数据",I:!1}}],["/tag/consumer-lag/",{loader:()=>a(()=>import("./index.html-DYwQ_H0E.js"),__vite__mapDeps([4165,1])),meta:{t:"标签: Consumer Lag",I:!1}}],["/tag/noclassdeffounderror/",{loader:()=>a(()=>import("./index.html-B-pe639p.js"),__vite__mapDeps([4166,1])),meta:{t:"标签: NoClassDefFoundError",I:!1}}],["/tag/defer/",{loader:()=>a(()=>import("./index.html-CbpUvbN0.js"),__vite__mapDeps([4167,1])),meta:{t:"标签: defer",I:!1}}],["/tag/wire-tap/",{loader:()=>a(()=>import("./index.html-DZGvjV0z.js"),__vite__mapDeps([4168,1])),meta:{t:"标签: Wire Tap",I:!1}}],["/tag/eip/",{loader:()=>a(()=>import("./index.html-Bc87GnZV.js"),__vite__mapDeps([4169,1])),meta:{t:"标签: EIP",I:!1}}],["/tag/activemq/",{loader:()=>a(()=>import("./index.html-B_VvUrTd.js"),__vite__mapDeps([4170,1])),meta:{t:"标签: ActiveMQ",I:!1}}],["/tag/unique-constraints/",{loader:()=>a(()=>import("./index.html-DnqeRTtD.js"),__vite__mapDeps([4171,1])),meta:{t:"标签: Unique Constraints",I:!1}}],["/tag/super-pom/",{loader:()=>a(()=>import("./index.html-BArjNRRW.js"),__vite__mapDeps([4172,1])),meta:{t:"标签: super POM",I:!1}}],["/tag/simplest-pom/",{loader:()=>a(()=>import("./index.html-CXGi1h3R.js"),__vite__mapDeps([4173,1])),meta:{t:"标签: simplest POM",I:!1}}],["/tag/effective-pom/",{loader:()=>a(()=>import("./index.html-x897yBEf.js"),__vite__mapDeps([4174,1])),meta:{t:"标签: effective POM",I:!1}}],["/tag/class-loaders/",{loader:()=>a(()=>import("./index.html-Cu4clJYm.js"),__vite__mapDeps([4175,1])),meta:{t:"标签: Class Loaders",I:!1}}],["/tag/reflections-library/",{loader:()=>a(()=>import("./index.html-ByocT82X.js"),__vite__mapDeps([4176,1])),meta:{t:"标签: Reflections Library",I:!1}}],["/tag/google-guava-library/",{loader:()=>a(()=>import("./index.html-BOvpM_dz.js"),__vite__mapDeps([4177,1])),meta:{t:"标签: Google Guava Library",I:!1}}],["/tag/soft-delete/",{loader:()=>a(()=>import("./index.html-CilP0Xoh.js"),__vite__mapDeps([4178,1])),meta:{t:"标签: Soft Delete",I:!1}}],["/tag/illegalaccesserror/",{loader:()=>a(()=>import("./index.html-Cv2jn6s-.js"),__vite__mapDeps([4179,1])),meta:{t:"标签: IllegalAccessError",I:!1}}],["/tag/java-exception/",{loader:()=>a(()=>import("./index.html-BmoPn50S.js"),__vite__mapDeps([4180,1])),meta:{t:"标签: Java Exception",I:!1}}],["/tag/%E5%B7%A5%E5%85%B7/",{loader:()=>a(()=>import("./index.html-CDSl2p92.js"),__vite__mapDeps([4181,1])),meta:{t:"标签: 工具",I:!1}}],["/tag/initialrampercentage/",{loader:()=>a(()=>import("./index.html-CeYeGqpg.js"),__vite__mapDeps([4182,1])),meta:{t:"标签: InitialRAMPercentage",I:!1}}],["/tag/minrampercentage/",{loader:()=>a(()=>import("./index.html-DcauUBnm.js"),__vite__mapDeps([4183,1])),meta:{t:"标签: MinRAMPercentage",I:!1}}],["/tag/maxrampercentage/",{loader:()=>a(()=>import("./index.html-BTkHT5ZI.js"),__vite__mapDeps([4184,1])),meta:{t:"标签: MaxRAMPercentage",I:!1}}],["/tag/null-safety/",{loader:()=>a(()=>import("./index.html-Bp-3CQVs.js"),__vite__mapDeps([4185,1])),meta:{t:"标签: Null Safety",I:!1}}],["/tag/if-not-null/",{loader:()=>a(()=>import("./index.html-D76B8I3u.js"),__vite__mapDeps([4186,1])),meta:{t:"标签: if not null",I:!1}}],["/tag/.let/",{loader:()=>a(()=>import("./index.html-S9K66oUx.js"),__vite__mapDeps([4187,1])),meta:{t:"标签: ?.let",I:!1}}],["/tag/jar-files/",{loader:()=>a(()=>import("./index.html-EnOFQdRp.js"),__vite__mapDeps([4188,1])),meta:{t:"标签: JAR Files",I:!1}}],["/tag/local-dependencies/",{loader:()=>a(()=>import("./index.html-DuD7Nkd0.js"),__vite__mapDeps([4189,1])),meta:{t:"标签: Local Dependencies",I:!1}}],["/tag/multipart/",{loader:()=>a(()=>import("./index.html-COJnRNSb.js"),__vite__mapDeps([4190,1])),meta:{t:"标签: Multipart",I:!1}}],["/tag/non-capturing-groups/",{loader:()=>a(()=>import("./index.html-C50lYIcn.js"),__vite__mapDeps([4191,1])),meta:{t:"标签: Non-Capturing Groups",I:!1}}],["/tag/removeall/",{loader:()=>a(()=>import("./index.html-BqqND4wK.js"),__vite__mapDeps([4192,1])),meta:{t:"标签: removeAll",I:!1}}],["/tag/secret-key/",{loader:()=>a(()=>import("./index.html-C8tpXo8o.js"),__vite__mapDeps([4193,1])),meta:{t:"标签: Secret Key",I:!1}}],["/tag/applicationcontextexception/",{loader:()=>a(()=>import("./index.html-CJGSqNrT.js"),__vite__mapDeps([4194,1])),meta:{t:"标签: ApplicationContextException",I:!1}}],["/tag/servletwebserverfactory/",{loader:()=>a(()=>import("./index.html-ggXFK8E2.js"),__vite__mapDeps([4195,1])),meta:{t:"标签: ServletWebServerFactory",I:!1}}],["/tag/set-membership/",{loader:()=>a(()=>import("./index.html-7G8qpnFA.js"),__vite__mapDeps([4196,1])),meta:{t:"标签: Set Membership",I:!1}}],["/tag/java-collection/",{loader:()=>a(()=>import("./index.html-Ct1T984V.js"),__vite__mapDeps([4197,1])),meta:{t:"标签: Java Collection",I:!1}}],["/tag/eclipse-ide/",{loader:()=>a(()=>import("./index.html-B1MFnctp.js"),__vite__mapDeps([4198,1])),meta:{t:"标签: Eclipse IDE",I:!1}}],["/tag/temporalaccessor/",{loader:()=>a(()=>import("./index.html-BZPfBJkk.js"),__vite__mapDeps([4199,1])),meta:{t:"标签: TemporalAccessor",I:!1}}],["/tag/phone-number-conversion/",{loader:()=>a(()=>import("./index.html-DxTsideo.js"),__vite__mapDeps([4200,1])),meta:{t:"标签: Phone Number Conversion",I:!1}}],["/tag/caching/",{loader:()=>a(()=>import("./index.html-Bkw2iKjN.js"),__vite__mapDeps([4201,1])),meta:{t:"标签: Caching",I:!1}}],["/tag/%E8%B5%84%E6%BA%90%E8%B7%AF%E5%BE%84/",{loader:()=>a(()=>import("./index.html-CVuaOkSg.js"),__vite__mapDeps([4202,1])),meta:{t:"标签: 资源路径",I:!1}}],["/tag/%E5%AE%8C%E7%BE%8E%E6%95%B0/",{loader:()=>a(()=>import("./index.html-CBlnzerD.js"),__vite__mapDeps([4203,1])),meta:{t:"标签: 完美数",I:!1}}],["/tag/%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE/",{loader:()=>a(()=>import("./index.html-BHcKLVt7.js"),__vite__mapDeps([4204,1])),meta:{t:"标签: 图像缩放",I:!1}}],["/tag/events/",{loader:()=>a(()=>import("./index.html-D3VWE-cV.js"),__vite__mapDeps([4205,1])),meta:{t:"标签: Events",I:!1}}],["/tag/application-events/",{loader:()=>a(()=>import("./index.html-3N2xu8gI.js"),__vite__mapDeps([4206,1])),meta:{t:"标签: Application Events",I:!1}}],["/tag/immutable/",{loader:()=>a(()=>import("./index.html-ByQKygWg.js"),__vite__mapDeps([4207,1])),meta:{t:"标签: Immutable",I:!1}}],["/tag/unmodifiable/",{loader:()=>a(()=>import("./index.html-Bv5f_1vY.js"),__vite__mapDeps([4208,1])),meta:{t:"标签: Unmodifiable",I:!1}}],["/tag/service-provider-interface/",{loader:()=>a(()=>import("./index.html-GceZceX4.js"),__vite__mapDeps([4209,1])),meta:{t:"标签: Service Provider Interface",I:!1}}],["/tag/internet-address-resolution/",{loader:()=>a(()=>import("./index.html-DQZ0atcR.js"),__vite__mapDeps([4210,1])),meta:{t:"标签: Internet Address Resolution",I:!1}}],["/tag/light-4j/",{loader:()=>a(()=>import("./index.html-TeFqlF6v.js"),__vite__mapDeps([4211,1])),meta:{t:"标签: Light-4J",I:!1}}],["/tag/apache-camel/",{loader:()=>a(()=>import("./index.html-DBhIvE1J.js"),__vite__mapDeps([4212,1])),meta:{t:"标签: Apache Camel",I:!1}}],["/tag/loki/",{loader:()=>a(()=>import("./index.html-CluP6X74.js"),__vite__mapDeps([4213,1])),meta:{t:"标签: Loki",I:!1}}],["/tag/grafana/",{loader:()=>a(()=>import("./index.html-CmcrjfMz.js"),__vite__mapDeps([4214,1])),meta:{t:"标签: Grafana",I:!1}}],["/tag/jep/",{loader:()=>a(()=>import("./index.html-DejtE-2R.js"),__vite__mapDeps([4215,1])),meta:{t:"标签: JEP",I:!1}}],["/tag/desktop-class/",{loader:()=>a(()=>import("./index.html-0l2Vee-F.js"),__vite__mapDeps([4216,1])),meta:{t:"标签: Desktop Class",I:!1}}],["/tag/processbuilder/",{loader:()=>a(()=>import("./index.html-Df1qjbJV.js"),__vite__mapDeps([4217,1])),meta:{t:"标签: ProcessBuilder",I:!1}}],["/tag/super()/",{loader:()=>a(()=>import("./index.html-D493WE6C.js"),__vite__mapDeps([4218,1])),meta:{t:"标签: super()",I:!1}}],["/tag/java-best-practices/",{loader:()=>a(()=>import("./index.html-CAdVO-DF.js"),__vite__mapDeps([4219,1])),meta:{t:"标签: Java Best Practices",I:!1}}],["/tag/struct-annotation/",{loader:()=>a(()=>import("./index.html-Bi4KMU4r.js"),__vite__mapDeps([4220,1])),meta:{t:"标签: Struct Annotation",I:!1}}],["/tag/user-defined-types/",{loader:()=>a(()=>import("./index.html-DnP1XIzo.js"),__vite__mapDeps([4045,1])),meta:{t:"标签: User-Defined Types",I:!1}}],["/tag/mono.error()/",{loader:()=>a(()=>import("./index.html-eHdCEMdh.js"),__vite__mapDeps([4221,1])),meta:{t:"标签: Mono.error()",I:!1}}],["/tag/subselect/",{loader:()=>a(()=>import("./index.html-CBURVd6m.js"),__vite__mapDeps([4222,1])),meta:{t:"标签: Subselect",I:!1}}],["/tag/context-receivers/",{loader:()=>a(()=>import("./index.html-B54sxhsT.js"),__vite__mapDeps([4223,1])),meta:{t:"标签: Context Receivers",I:!1}}],["/tag/immutable-list/",{loader:()=>a(()=>import("./index.html-x6npVI--.js"),__vite__mapDeps([4224,1])),meta:{t:"标签: Immutable List",I:!1}}],["/tag/concurrentmodificationexception/",{loader:()=>a(()=>import("./index.html-gx0jjfC3.js"),__vite__mapDeps([4225,1])),meta:{t:"标签: ConcurrentModificationException",I:!1}}],["/tag/localtime/",{loader:()=>a(()=>import("./index.html-DNAQUafK.js"),__vite__mapDeps([4226,1])),meta:{t:"标签: LocalTime",I:!1}}],["/tag/date-comparison/",{loader:()=>a(()=>import("./index.html-DT1W0kmS.js"),__vite__mapDeps([4227,1])),meta:{t:"标签: Date Comparison",I:!1}}],["/tag/kotlin-coroutine/",{loader:()=>a(()=>import("./index.html-DGN6C1ye.js"),__vite__mapDeps([4228,1])),meta:{t:"标签: Kotlin Coroutine",I:!1}}],["/tag/rxjava-single/",{loader:()=>a(()=>import("./index.html-Dff3odCH.js"),__vite__mapDeps([4229,1])),meta:{t:"标签: RxJava Single",I:!1}}],["/tag/deferred/",{loader:()=>a(()=>import("./index.html-DaytNhJw.js"),__vite__mapDeps([4230,1])),meta:{t:"标签: Deferred",I:!1}}],["/tag/prototype-scope/",{loader:()=>a(()=>import("./index.html-D4o82O_l.js"),__vite__mapDeps([4231,1])),meta:{t:"标签: Prototype Scope",I:!1}}],["/tag/token/",{loader:()=>a(()=>import("./index.html-DPT1448Z.js"),__vite__mapDeps([4232,1])),meta:{t:"标签: Token",I:!1}}],["/tag/eachcount/",{loader:()=>a(()=>import("./index.html-Di8XGvbB.js"),__vite__mapDeps([4233,1])),meta:{t:"标签: eachCount",I:!1}}],["/tag/eachcountto/",{loader:()=>a(()=>import("./index.html-BdEP_7wo.js"),__vite__mapDeps([4234,1])),meta:{t:"标签: eachCountTo",I:!1}}],["/tag/spring-kafka/",{loader:()=>a(()=>import("./index.html-CYFc1Izw.js"),__vite__mapDeps([2454,1])),meta:{t:"标签: Spring Kafka",I:!1}}],["/tag/kafka-listeners/",{loader:()=>a(()=>import("./index.html-CwqpZ8KK.js"),__vite__mapDeps([4235,1])),meta:{t:"标签: Kafka Listeners",I:!1}}],["/tag/spring-beans/",{loader:()=>a(()=>import("./index.html-BrY-elCv.js"),__vite__mapDeps([4236,1])),meta:{t:"标签: Spring Beans",I:!1}}],["/tag/dynamic-registration/",{loader:()=>a(()=>import("./index.html-QOFtXboa.js"),__vite__mapDeps([4237,1])),meta:{t:"标签: Dynamic Registration",I:!1}}],["/tag/css-selectors/",{loader:()=>a(()=>import("./index.html-DIUmvRES.js"),__vite__mapDeps([4238,1])),meta:{t:"标签: CSS Selectors",I:!1}}],["/tag/web-testing/",{loader:()=>a(()=>import("./index.html-Dq4O3KFU.js"),__vite__mapDeps([4239,1])),meta:{t:"标签: Web Testing",I:!1}}],["/tag/ambiguous-method-call/",{loader:()=>a(()=>import("./index.html-COO2pDde.js"),__vite__mapDeps([4240,1])),meta:{t:"标签: Ambiguous Method Call",I:!1}}],["/tag/kclass/",{loader:()=>a(()=>import("./index.html-CpF-54fM.js"),__vite__mapDeps([4241,1])),meta:{t:"标签: KClass",I:!1}}],["/tag/duration/",{loader:()=>a(()=>import("./index.html-BhIDy67C.js"),__vite__mapDeps([4242,1])),meta:{t:"标签: Duration",I:!1}}],["/tag/time-management/",{loader:()=>a(()=>import("./index.html-DIyjjlzM.js"),__vite__mapDeps([4243,1])),meta:{t:"标签: Time Management",I:!1}}],["/tag/parse/",{loader:()=>a(()=>import("./index.html-BSnrPo4j.js"),__vite__mapDeps([4244,1])),meta:{t:"标签: Parse",I:!1}}],["/tag/caffeine/",{loader:()=>a(()=>import("./index.html-BIRJQGnc.js"),__vite__mapDeps([4245,1])),meta:{t:"标签: Caffeine",I:!1}}],["/tag/json-serialization/",{loader:()=>a(()=>import("./index.html-qED2Vts6.js"),__vite__mapDeps([4246,1])),meta:{t:"标签: JSON Serialization",I:!1}}],["/tag/null-values/",{loader:()=>a(()=>import("./index.html-DY4T5AI9.js"),__vite__mapDeps([4247,1])),meta:{t:"标签: Null Values",I:!1}}],["/tag/invalid-characters/",{loader:()=>a(()=>import("./index.html-CYZnz0s_.js"),__vite__mapDeps([4248,1])),meta:{t:"标签: Invalid Characters",I:!1}}],["/tag/inputstreamreader/",{loader:()=>a(()=>import("./index.html-BJD31QYx.js"),__vite__mapDeps([4249,1])),meta:{t:"标签: InputStreamReader",I:!1}}],["/tag/eol-normalization/",{loader:()=>a(()=>import("./index.html-B5KvPEg5.js"),__vite__mapDeps([4250,1])),meta:{t:"标签: EOL Normalization",I:!1}}],["/tag/string-replace/",{loader:()=>a(()=>import("./index.html-CO-1Tpoo.js"),__vite__mapDeps([4251,1])),meta:{t:"标签: String Replace",I:!1}}],["/tag/java-8-stream-api/",{loader:()=>a(()=>import("./index.html-D7o1liOQ.js"),__vite__mapDeps([4252,1])),meta:{t:"标签: Java 8 Stream API",I:!1}}],["/tag/%E5%B9%B6%E8%A1%8C%E6%B5%81/",{loader:()=>a(()=>import("./index.html-CTxRWz6A.js"),__vite__mapDeps([4253,1])),meta:{t:"标签: 并行流",I:!1}}],["/tag/%E5%8D%8F%E7%A8%8B/",{loader:()=>a(()=>import("./index.html--EZe7rgc.js"),__vite__mapDeps([4254,1])),meta:{t:"标签: 协程",I:!1}}],["/tag/kotlin-tutorial/",{loader:()=>a(()=>import("./index.html-CuC5GAdy.js"),__vite__mapDeps([4255,1])),meta:{t:"标签: Kotlin Tutorial",I:!1}}],["/tag/querydsl/",{loader:()=>a(()=>import("./index.html-DWnaV3kt.js"),__vite__mapDeps([4256,1])),meta:{t:"标签: Querydsl",I:!1}}],["/tag/jpa-criteria/",{loader:()=>a(()=>import("./index.html-BguNztEO.js"),__vite__mapDeps([4257,1])),meta:{t:"标签: JPA Criteria",I:!1}}],["/tag/gzipinputstream/",{loader:()=>a(()=>import("./index.html-KuJAQM8D.js"),__vite__mapDeps([4258,1])),meta:{t:"标签: GZIPInputStream",I:!1}}],["/tag/%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/",{loader:()=>a(()=>import("./index.html-BYA93oPW.js"),__vite__mapDeps([4259,1])),meta:{t:"标签: 文件处理",I:!1}}],["/tag/%E4%BD%8D%E8%BF%90%E7%AE%97/",{loader:()=>a(()=>import("./index.html-B2fSx9Ar.js"),__vite__mapDeps([4260,1])),meta:{t:"标签: 位运算",I:!1}}],["/tag/distributed-transactions/",{loader:()=>a(()=>import("./index.html-BfI3n1iJ.js"),__vite__mapDeps([4261,1])),meta:{t:"标签: Distributed Transactions",I:!1}}],["/tag/kotlinx.serialization/",{loader:()=>a(()=>import("./index.html-dciXAeX0.js"),__vite__mapDeps([4262,1])),meta:{t:"标签: kotlinx.serialization",I:!1}}],["/tag/backticks/",{loader:()=>a(()=>import("./index.html-EOu_fYBm.js"),__vite__mapDeps([4263,1])),meta:{t:"标签: Backticks",I:!1}}],["/tag/value%E6%B3%A8%E8%A7%A3/",{loader:()=>a(()=>import("./index.html-B9M25DKp.js"),__vite__mapDeps([4264,1])),meta:{t:"标签: Value注解",I:!1}}],["/tag/variable-shadowing/",{loader:()=>a(()=>import("./index.html-BQ_BJOkr.js"),__vite__mapDeps([4265,1])),meta:{t:"标签: Variable Shadowing",I:!1}}],["/tag/vigen%C3%A8re%E5%AF%86%E7%A0%81/",{loader:()=>a(()=>import("./index.html-DPrKhZqw.js"),__vite__mapDeps([4266,1])),meta:{t:"标签: Vigenère密码",I:!1}}],["/tag/setter-methods/",{loader:()=>a(()=>import("./index.html-C_HD6Ws0.js"),__vite__mapDeps([4267,1])),meta:{t:"标签: Setter Methods",I:!1}}],["/tag/%E7%99%BE%E5%88%86%E4%BD%8D%E6%95%B0/",{loader:()=>a(()=>import("./index.html-cAplacdo.js"),__vite__mapDeps([4268,1])),meta:{t:"标签: 百分位数",I:!1}}],["/tag/%E6%95%B0%E6%8D%AE%E9%9B%86/",{loader:()=>a(()=>import("./index.html-CNFnCXXK.js"),__vite__mapDeps([4269,1])),meta:{t:"标签: 数据集",I:!1}}],["/tag/%E7%BB%9F%E8%AE%A1%E5%88%86%E5%B8%83/",{loader:()=>a(()=>import("./index.html-DBNBMZj3.js"),__vite__mapDeps([4270,1])),meta:{t:"标签: 统计分布",I:!1}}],["/tag/happy-number/",{loader:()=>a(()=>import("./index.html-WsHR0jSo.js"),__vite__mapDeps([4271,1])),meta:{t:"标签: Happy Number",I:!1}}],["/tag/offsets/",{loader:()=>a(()=>import("./index.html-DQDcL6w_.js"),__vite__mapDeps([4272,1])),meta:{t:"标签: Offsets",I:!1}}],["/tag/commit/",{loader:()=>a(()=>import("./index.html-Cg14bqU3.js"),__vite__mapDeps([4273,1])),meta:{t:"标签: Commit",I:!1}}],["/tag/largest-number/",{loader:()=>a(()=>import("./index.html-DmDh8B_E.js"),__vite__mapDeps([4274,1])),meta:{t:"标签: Largest Number",I:!1}}],["/tag/remove-digits/",{loader:()=>a(()=>import("./index.html-BczWCjx0.js"),__vite__mapDeps([4275,1])),meta:{t:"标签: Remove Digits",I:!1}}],["/tag/majority-element/",{loader:()=>a(()=>import("./index.html-BcGp8UC3.js"),__vite__mapDeps([4276,1])),meta:{t:"标签: Majority Element",I:!1}}],["/tag/peak-elements/",{loader:()=>a(()=>import("./index.html-B1U5890p.js"),__vite__mapDeps([4277,1])),meta:{t:"标签: Peak Elements",I:!1}}],["/tag/binary-search/",{loader:()=>a(()=>import("./index.html-mmRmeZJu.js"),__vite__mapDeps([4278,1])),meta:{t:"标签: Binary Search",I:!1}}],["/tag/kotlinx.html/",{loader:()=>a(()=>import("./index.html-VuDIiqUW.js"),__vite__mapDeps([4279,1])),meta:{t:"标签: kotlinx.html",I:!1}}],["/tag/servlet-filter/",{loader:()=>a(()=>import("./index.html-Bd-L52NJ.js"),__vite__mapDeps([4280,1])),meta:{t:"标签: Servlet Filter",I:!1}}],["/tag/apache-commons-cli/",{loader:()=>a(()=>import("./index.html-CJDfZyQC.js"),__vite__mapDeps([4281,1])),meta:{t:"标签: Apache Commons CLI",I:!1}}],["/tag/cli-development/",{loader:()=>a(()=>import("./index.html-wPiTUVeN.js"),__vite__mapDeps([4282,1])),meta:{t:"标签: CLI Development",I:!1}}],["/tag/%E4%BA%8B%E4%BB%B6%E6%B5%81%E5%B9%B3%E5%8F%B0/",{loader:()=>a(()=>import("./index.html-CXsK6GIa.js"),__vite__mapDeps([4283,1])),meta:{t:"标签: 事件流平台",I:!1}}],["/tag/%E8%B7%AF%E5%BE%84/",{loader:()=>a(()=>import("./index.html-CKgFEJqz.js"),__vite__mapDeps([4284,1])),meta:{t:"标签: 路径",I:!1}}],["/tag/%E7%BD%91%E9%A1%B5%E6%8A%93%E5%8F%96/",{loader:()=>a(()=>import("./index.html-DiNwA98V.js"),__vite__mapDeps([4285,1])),meta:{t:"标签: 网页抓取",I:!1}}],["/tag/refresh/",{loader:()=>a(()=>import("./index.html-BEh-74b9.js"),__vite__mapDeps([4286,1])),meta:{t:"标签: Refresh",I:!1}}],["/tag/fetch/",{loader:()=>a(()=>import("./index.html-BkpjegsB.js"),__vite__mapDeps([4287,1])),meta:{t:"标签: Fetch",I:!1}}],["/tag/entity-management/",{loader:()=>a(()=>import("./index.html-BSGkoyC8.js"),__vite__mapDeps([4288,1])),meta:{t:"标签: Entity Management",I:!1}}],["/tag/authorizationmanager/",{loader:()=>a(()=>import("./index.html-hRanrdU1.js"),__vite__mapDeps([4289,1])),meta:{t:"标签: AuthorizationManager",I:!1}}],["/tag/%E5%BC%82%E5%B8%B8%E6%8B%A6%E6%88%AA%E5%99%A8/",{loader:()=>a(()=>import("./index.html-C02pFsaB.js"),__vite__mapDeps([4290,1])),meta:{t:"标签: 异常拦截器",I:!1}}],["/tag/aggregation/",{loader:()=>a(()=>import("./index.html--JibzmYb.js"),__vite__mapDeps([4291,1])),meta:{t:"标签: Aggregation",I:!1}}],["/tag/compareto()/",{loader:()=>a(()=>import("./index.html-C_SWEN6t.js"),__vite__mapDeps([4292,1])),meta:{t:"标签: compareTo()",I:!1}}],["/tag/%E7%A7%BB%E5%8A%A8%E5%B9%B3%E5%9D%87/",{loader:()=>a(()=>import("./index.html-h4spoJkj.js"),__vite__mapDeps([4293,1])),meta:{t:"标签: 移动平均",I:!1}}],["/tag/asynchronous/",{loader:()=>a(()=>import("./index.html-C5aqg5nA.js"),__vite__mapDeps([4294,1])),meta:{t:"标签: Asynchronous",I:!1}}],["/tag/transactional/",{loader:()=>a(()=>import("./index.html-BCiB28DE.js"),__vite__mapDeps([4295,1])),meta:{t:"标签: Transactional",I:!1}}],["/tag/permutation/",{loader:()=>a(()=>import("./index.html-COPBbTEt.js"),__vite__mapDeps([4296,1])),meta:{t:"标签: Permutation",I:!1}}],["/tag/anagram/",{loader:()=>a(()=>import("./index.html-BPkiQacq.js"),__vite__mapDeps([4297,1])),meta:{t:"标签: Anagram",I:!1}}],["/tag/%E6%8C%81%E4%B9%85%E5%8C%96%E4%B8%8A%E4%B8%8B%E6%96%87/",{loader:()=>a(()=>import("./index.html-CqUeotqS.js"),__vite__mapDeps([4298,1])),meta:{t:"标签: 持久化上下文",I:!1}}],["/tag/%E6%B8%85%E9%99%A4%E7%AE%A1%E7%90%86%E5%AE%9E%E4%BD%93/",{loader:()=>a(()=>import("./index.html-DsMStVn6.js"),__vite__mapDeps([4299,1])),meta:{t:"标签: 清除管理实体",I:!1}}],["/tag/code-coverage/",{loader:()=>a(()=>import("./index.html-BN0Tllhy.js"),__vite__mapDeps([4300,1])),meta:{t:"标签: Code Coverage",I:!1}}],["/tag/%E6%95%B0%E5%AD%97%E6%AF%94%E8%BE%83/",{loader:()=>a(()=>import("./index.html-C2KMPfQv.js"),__vite__mapDeps([4301,1])),meta:{t:"标签: 数字比较",I:!1}}],["/tag/map/",{loader:()=>a(()=>import("./index.html-gjcKbEcl.js"),__vite__mapDeps([2707,1])),meta:{t:"标签: map",I:!1}}],["/tag/%E6%95%B0%E6%8D%AE%E5%8E%8B%E7%BC%A9/",{loader:()=>a(()=>import("./index.html-DH2KW9Rx.js"),__vite__mapDeps([4302,1])),meta:{t:"标签: 数据压缩",I:!1}}],["/tag/java-gzip/",{loader:()=>a(()=>import("./index.html-DLu9k4_2.js"),__vite__mapDeps([4303,1])),meta:{t:"标签: Java GZIP",I:!1}}],["/tag/%E9%87%8D%E8%AF%95%E7%AD%96%E7%95%A5/",{loader:()=>a(()=>import("./index.html-CaNyRcF9.js"),__vite__mapDeps([4304,1])),meta:{t:"标签: 重试策略",I:!1}}],["/tag/delay/",{loader:()=>a(()=>import("./index.html-DGs7DoaU.js"),__vite__mapDeps([4305,1])),meta:{t:"标签: Delay",I:!1}}],["/tag/softassert/",{loader:()=>a(()=>import("./index.html-DeJ4qQkb.js"),__vite__mapDeps([4306,1])),meta:{t:"标签: SoftAssert",I:!1}}],["/tag/1d%E6%95%B0%E7%BB%84/",{loader:()=>a(()=>import("./index.html-D_HJUSMf.js"),__vite__mapDeps([4307,1])),meta:{t:"标签: 1D数组",I:!1}}],["/tag/clob/",{loader:()=>a(()=>import("./index.html-wE4Czono.js"),__vite__mapDeps([4308,1])),meta:{t:"标签: CLOB",I:!1}}],["/tag/%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%88%86%E6%95%B0/",{loader:()=>a(()=>import("./index.html-BKJeWHRy.js"),__vite__mapDeps([4309,1])),meta:{t:"标签: 十进制转分数",I:!1}}],["/tag/short/",{loader:()=>a(()=>import("./index.html-BMN2dxJt.js"),__vite__mapDeps([4310,1])),meta:{t:"标签: short",I:!1}}],["/tag/timestamp/",{loader:()=>a(()=>import("./index.html-HDu6_wsd.js"),__vite__mapDeps([4311,1])),meta:{t:"标签: Timestamp",I:!1}}],["/tag/%E5%8E%9F%E5%A7%8B%E7%B1%BB%E5%9E%8B%E6%95%B0%E7%BB%84/",{loader:()=>a(()=>import("./index.html-M4Kwogwa.js"),__vite__mapDeps([4312,1])),meta:{t:"标签: 原始类型数组",I:!1}}],["/tag/%E5%9B%BE%E5%83%8F%E8%BD%AC%E6%8D%A2/",{loader:()=>a(()=>import("./index.html-zNK-kO4O.js"),__vite__mapDeps([4313,1])),meta:{t:"标签: 图像转换",I:!1}}],["/tag/dataoutputstream/",{loader:()=>a(()=>import("./index.html-DHUrrtMM.js"),__vite__mapDeps([4314,1])),meta:{t:"标签: DataOutputStream",I:!1}}],["/tag/%E5%AD%97%E7%AC%A6%E8%AE%A1%E6%95%B0/",{loader:()=>a(()=>import("./index.html-CIhZy_wL.js"),__vite__mapDeps([4315,1])),meta:{t:"标签: 字符计数",I:!1}}],["/tag/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/",{loader:()=>a(()=>import("./index.html-CKDefzD-.js"),__vite__mapDeps([4316,1])),meta:{t:"标签: 自动化测试",I:!1}}],["/tag/java-enums/",{loader:()=>a(()=>import("./index.html-c6piUMWk.js"),__vite__mapDeps([4317,1])),meta:{t:"标签: Java Enums",I:!1}}],["/tag/optional.of()/",{loader:()=>a(()=>import("./index.html-WMIm5UwY.js"),__vite__mapDeps([4318,1])),meta:{t:"标签: Optional.of()",I:!1}}],["/tag/optional.ofnullable()/",{loader:()=>a(()=>import("./index.html-C4mWIttA.js"),__vite__mapDeps([4319,1])),meta:{t:"标签: Optional.ofNullable()",I:!1}}],["/tag/sdk/",{loader:()=>a(()=>import("./index.html-THajXv_4.js"),__vite__mapDeps([4320,1])),meta:{t:"标签: SDK",I:!1}}],["/tag/%E5%A4%8D%E6%95%B0/",{loader:()=>a(()=>import("./index.html-CV5NjHB2.js"),__vite__mapDeps([4321,1])),meta:{t:"标签: 复数",I:!1}}],["/tag/%E8%BF%90%E7%AE%97/",{loader:()=>a(()=>import("./index.html-BeiVfUfQ.js"),__vite__mapDeps([4322,1])),meta:{t:"标签: 运算",I:!1}}],["/tag/%E6%96%87%E6%9C%AC%E6%8F%90%E5%8F%96/",{loader:()=>a(()=>import("./index.html-BqweqA7t.js"),__vite__mapDeps([4323,1])),meta:{t:"标签: 文本提取",I:!1}}],["/tag/easter/",{loader:()=>a(()=>import("./index.html-ChOTOf6f.js"),__vite__mapDeps([4324,1])),meta:{t:"标签: Easter",I:!1}}],["/tag/symmetric-substring/",{loader:()=>a(()=>import("./index.html-iyCRwPQ6.js"),__vite__mapDeps([4325,1])),meta:{t:"标签: Symmetric Substring",I:!1}}],["/tag/%E6%9C%80%E5%B0%8F%E5%85%83%E7%B4%A0/",{loader:()=>a(()=>import("./index.html-wrEjmX7-.js"),__vite__mapDeps([4326,1])),meta:{t:"标签: 最小元素",I:!1}}],["/tag/url-redirection/",{loader:()=>a(()=>import("./index.html-Ck8Nc7gm.js"),__vite__mapDeps([4327,1])),meta:{t:"标签: URL Redirection",I:!1}}],["/tag/second-smallest/",{loader:()=>a(()=>import("./index.html-CwedcAG4.js"),__vite__mapDeps([4328,1])),meta:{t:"标签: Second Smallest",I:!1}}],["/tag/java-%E6%B5%81/",{loader:()=>a(()=>import("./index.html-oRoO44J8.js"),__vite__mapDeps([4329,1])),meta:{t:"标签: Java 流",I:!1}}],["/tag/table-not-found/",{loader:()=>a(()=>import("./index.html-BHRSi6tg.js"),__vite__mapDeps([4330,1])),meta:{t:"标签: Table Not Found",I:!1}}],["/tag/full-text-search/",{loader:()=>a(()=>import("./index.html-_M1xn5AN.js"),__vite__mapDeps([4331,1])),meta:{t:"标签: Full-Text Search",I:!1}}],["/tag/partial-text-search/",{loader:()=>a(()=>import("./index.html-BidE2FM1.js"),__vite__mapDeps([4332,1])),meta:{t:"标签: Partial-Text Search",I:!1}}],["/tag/apache-avro/",{loader:()=>a(()=>import("./index.html-CfYRyLTF.js"),__vite__mapDeps([4333,1])),meta:{t:"标签: Apache Avro",I:!1}}],["/tag/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90/",{loader:()=>a(()=>import("./index.html-Zonemov2.js"),__vite__mapDeps([4334,1])),meta:{t:"标签: 代码生成",I:!1}}],["/tag/%E4%BA%8C%E8%BF%9B%E5%88%B6/",{loader:()=>a(()=>import("./index.html-C5y_GlgQ.js"),__vite__mapDeps([4335,1])),meta:{t:"标签: 二进制",I:!1}}],["/tag/%E8%A1%A5%E7%A0%81/",{loader:()=>a(()=>import("./index.html-C1fuqDH8.js"),__vite__mapDeps([4336,1])),meta:{t:"标签: 补码",I:!1}}],["/tag/mockmvc/",{loader:()=>a(()=>import("./index.html-Ch6Z4J8_.js"),__vite__mapDeps([4337,1])),meta:{t:"标签: MockMVC",I:!1}}],["/tag/sequence/",{loader:()=>a(()=>import("./index.html-Deo0beYF.js"),__vite__mapDeps([4338,1])),meta:{t:"标签: Sequence",I:!1}}],["/tag/nextval/",{loader:()=>a(()=>import("./index.html-BaVRo2QM.js"),__vite__mapDeps([4339,1])),meta:{t:"标签: Nextval",I:!1}}],["/tag/%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F/",{loader:()=>a(()=>import("./index.html-CgtTTbcc.js"),__vite__mapDeps([4340,1])),meta:{t:"标签: 数组排序",I:!1}}],["/tag/response-body/",{loader:()=>a(()=>import("./index.html-Dddy_M9a.js"),__vite__mapDeps([4341,1])),meta:{t:"标签: Response Body",I:!1}}],["/tag/null-handling/",{loader:()=>a(()=>import("./index.html-C7MEJWR4.js"),__vite__mapDeps([4342,1])),meta:{t:"标签: Null Handling",I:!1}}],["/tag/get/",{loader:()=>a(()=>import("./index.html-DXf0sKkY.js"),__vite__mapDeps([4343,1])),meta:{t:"标签: get",I:!1}}],["/tag/webassembly/",{loader:()=>a(()=>import("./index.html-DszRIIhL.js"),__vite__mapDeps([4344,1])),meta:{t:"标签: WebAssembly",I:!1}}],["/tag/java.sql.timestamp/",{loader:()=>a(()=>import("./index.html-BorIWBj7.js"),__vite__mapDeps([4345,1])),meta:{t:"标签: java.sql.Timestamp",I:!1}}],["/tag/xml-to-pdf/",{loader:()=>a(()=>import("./index.html-CNXitSmg.js"),__vite__mapDeps([4346,1])),meta:{t:"标签: XML to PDF",I:!1}}],["/tag/apache-fop/",{loader:()=>a(()=>import("./index.html-vhjhdbky.js"),__vite__mapDeps([4347,1])),meta:{t:"标签: Apache FOP",I:!1}}],["/tag/eofexception/",{loader:()=>a(()=>import("./index.html-C2t5bz0n.js"),__vite__mapDeps([4348,1])),meta:{t:"标签: EOFException",I:!1}}],["/tag/java%E5%BC%82%E5%B8%B8/",{loader:()=>a(()=>import("./index.html-D1GSExrS.js"),__vite__mapDeps([4349,1])),meta:{t:"标签: Java异常",I:!1}}],["/tag/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/",{loader:()=>a(()=>import("./index.html-BPxoJET_.js"),__vite__mapDeps([4350,1])),meta:{t:"标签: 文件读取",I:!1}}],["/tag/elvis-operator/",{loader:()=>a(()=>import("./index.html-CV6foL9s.js"),__vite__mapDeps([4351,1])),meta:{t:"标签: Elvis Operator",I:!1}}],["/tag/interceptor/",{loader:()=>a(()=>import("./index.html-DRZNbvOo.js"),__vite__mapDeps([4352,1])),meta:{t:"标签: Interceptor",I:!1}}],["/tag/headers/",{loader:()=>a(()=>import("./index.html-CytaIsSn.js"),__vite__mapDeps([4353,1])),meta:{t:"标签: Headers",I:!1}}],["/tag/%E5%B9%B6%E8%A1%8C%E5%A4%84%E7%90%86/",{loader:()=>a(()=>import("./index.html-1mKjA0H6.js"),__vite__mapDeps([4354,1])),meta:{t:"标签: 并行处理",I:!1}}],["/tag/pair/",{loader:()=>a(()=>import("./index.html-C8VwX2b4.js"),__vite__mapDeps([4355,1])),meta:{t:"标签: Pair",I:!1}}],["/tag/builder%E6%A8%A1%E5%BC%8F/",{loader:()=>a(()=>import("./index.html-b8YPerEv.js"),__vite__mapDeps([4356,1])),meta:{t:"标签: Builder模式",I:!1}}],["/tag/%E7%BB%A7%E6%89%BF/",{loader:()=>a(()=>import("./index.html-BtDURFEX.js"),__vite__mapDeps([4357,1])),meta:{t:"标签: 继承",I:!1}}],["/tag/%E7%BB%84%E5%90%88/",{loader:()=>a(()=>import("./index.html-Dn-NNxUU.js"),__vite__mapDeps([4358,1])),meta:{t:"标签: 组合",I:!1}}],["/tag/java%E5%AE%89%E8%A3%85/",{loader:()=>a(()=>import("./index.html-Cnborh_e.js"),__vite__mapDeps([4359,1])),meta:{t:"标签: Java安装",I:!1}}],["/tag/macos/",{loader:()=>a(()=>import("./index.html-Ck4eOqyD.js"),__vite__mapDeps([2260,1])),meta:{t:"标签: macOS",I:!1}}],["/tag/apache-commons-configuration/",{loader:()=>a(()=>import("./index.html-DvefaKFn.js"),__vite__mapDeps([4360,1])),meta:{t:"标签: Apache Commons Configuration",I:!1}}],["/tag/compression/",{loader:()=>a(()=>import("./index.html-D1mbbgNW.js"),__vite__mapDeps([4361,1])),meta:{t:"标签: Compression",I:!1}}],["/tag/archiving/",{loader:()=>a(()=>import("./index.html-BfSb5m37.js"),__vite__mapDeps([4362,1])),meta:{t:"标签: Archiving",I:!1}}],["/tag/brave/",{loader:()=>a(()=>import("./index.html-ChYi9Ksw.js"),__vite__mapDeps([4363,1])),meta:{t:"标签: Brave",I:!1}}],["/tag/zipkin/",{loader:()=>a(()=>import("./index.html-CJ0qVbsh.js"),__vite__mapDeps([4364,1])),meta:{t:"标签: Zipkin",I:!1}}],["/tag/%E5%88%86%E5%B8%83%E5%BC%8F%E8%BF%BD%E8%B8%AA/",{loader:()=>a(()=>import("./index.html-CV-6pgm7.js"),__vite__mapDeps([4365,1])),meta:{t:"标签: 分布式追踪",I:!1}}],["/tag/duckdb/",{loader:()=>a(()=>import("./index.html-D-RFiwTQ.js"),__vite__mapDeps([4366,1])),meta:{t:"标签: DuckDB",I:!1}}],["/tag/jfreechart/",{loader:()=>a(()=>import("./index.html-CypUOGyx.js"),__vite__mapDeps([4367,1])),meta:{t:"标签: JFreeChart",I:!1}}],["/tag/%E5%9B%BE%E8%A1%A8%E5%BA%93/",{loader:()=>a(()=>import("./index.html-3BBBP5BJ.js"),__vite__mapDeps([4368,1])),meta:{t:"标签: 图表库",I:!1}}],["/tag/java-22/",{loader:()=>a(()=>import("./index.html-CJcKnQAj.js"),__vite__mapDeps([4369,1])),meta:{t:"标签: Java 22",I:!1}}],["/tag/javaparser/",{loader:()=>a(()=>import("./index.html-T1EWTC7U.js"),__vite__mapDeps([4370,1])),meta:{t:"标签: JavaParser",I:!1}}],["/tag/ast/",{loader:()=>a(()=>import("./index.html-C1PMeI3I.js"),__vite__mapDeps([4371,1])),meta:{t:"标签: AST",I:!1}}],["/tag/ssh/",{loader:()=>a(()=>import("./index.html-GLSX71sO.js"),__vite__mapDeps([4372,1])),meta:{t:"标签: SSH",I:!1}}],["/tag/simple-java-mail/",{loader:()=>a(()=>import("./index.html-Cx_N-eQv.js"),__vite__mapDeps([4373,1])),meta:{t:"标签: Simple Java Mail",I:!1}}],["/tag/javamail-api/",{loader:()=>a(()=>import("./index.html-CTX3eE9n.js"),__vite__mapDeps([4374,1])),meta:{t:"标签: JavaMail API",I:!1}}],["/tag/%E6%95%B0%E6%8D%AE%E6%AF%94%E8%BE%83/",{loader:()=>a(()=>import("./index.html-BrqKhAG-.js"),__vite__mapDeps([4375,1])),meta:{t:"标签: 数据比较",I:!1}}],["/tag/%E6%97%A0%E7%AC%A6%E5%8F%B7%E5%AD%97%E8%8A%82/",{loader:()=>a(()=>import("./index.html-C5m3_IYn.js"),__vite__mapDeps([4376,1])),meta:{t:"标签: 无符号字节",I:!1}}],["/tag/jooq/",{loader:()=>a(()=>import("./index.html-C3AHKdJN.js"),__vite__mapDeps([4377,1])),meta:{t:"标签: jOOQ",I:!1}}],["/tag/%E6%95%B0%E6%8D%AE%E6%98%A0%E5%B0%84/",{loader:()=>a(()=>import("./index.html-BgxXUBZ-.js"),__vite__mapDeps([4378,1])),meta:{t:"标签: 数据映射",I:!1}}],["/tag/monads/",{loader:()=>a(()=>import("./index.html-BJyeMNEj.js"),__vite__mapDeps([4379,1])),meta:{t:"标签: Monads",I:!1}}],["/tag/functional-programming/",{loader:()=>a(()=>import("./index.html-pgn-PMTW.js"),__vite__mapDeps([2967,1])),meta:{t:"标签: Functional Programming",I:!1}}],["/tag/ai/",{loader:()=>a(()=>import("./index.html-Cpz9eEW7.js"),__vite__mapDeps([4380,1])),meta:{t:"标签: AI",I:!1}}],["/tag/parallel-collectors/",{loader:()=>a(()=>import("./index.html-CMmivxbw.js"),__vite__mapDeps([4381,1])),meta:{t:"标签: Parallel Collectors",I:!1}}],["/tag/persistenceunit/",{loader:()=>a(()=>import("./index.html-DCLbVFGA.js"),__vite__mapDeps([4382,1])),meta:{t:"标签: PersistenceUnit",I:!1}}],["/tag/persistencecontext/",{loader:()=>a(()=>import("./index.html-cPHiQJKb.js"),__vite__mapDeps([4383,1])),meta:{t:"标签: PersistenceContext",I:!1}}],["/tag/java%E7%BC%96%E7%A8%8B/",{loader:()=>a(()=>import("./index.html-CJhFp2gj.js"),__vite__mapDeps([4384,1])),meta:{t:"标签: Java编程",I:!1}}],["/tag/tostring%E6%96%B9%E6%B3%95/",{loader:()=>a(()=>import("./index.html-CxNCeshr.js"),__vite__mapDeps([4385,1])),meta:{t:"标签: toString方法",I:!1}}],["/tag/%E7%A9%BA%E5%80%BC%E5%A4%84%E7%90%86/",{loader:()=>a(()=>import("./index.html-z1N0HFuj.js"),__vite__mapDeps([4386,1])),meta:{t:"标签: 空值处理",I:!1}}],["/tag/write()/",{loader:()=>a(()=>import("./index.html-Dw5Llp2h.js"),__vite__mapDeps([4387,1])),meta:{t:"标签: write()",I:!1}}],["/tag/print()/",{loader:()=>a(()=>import("./index.html-C7s_gr0D.js"),__vite__mapDeps([4388,1])),meta:{t:"标签: print()",I:!1}}],["/tag/%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2/",{loader:()=>a(()=>import("./index.html-B01jDY1x.js"),__vite__mapDeps([4389,1])),meta:{t:"标签: 子字符串",I:!1}}],["/tag/back-reference/",{loader:()=>a(()=>import("./index.html-CzrNEEvS.js"),__vite__mapDeps([4390,1])),meta:{t:"标签: Back Reference",I:!1}}],["/tag/lookaround/",{loader:()=>a(()=>import("./index.html-D4vHPHI-.js"),__vite__mapDeps([4391,1])),meta:{t:"标签: Lookaround",I:!1}}],["/tag/java%E5%AE%89%E5%85%A8/",{loader:()=>a(()=>import("./index.html-sTB8xnvp.js"),__vite__mapDeps([4392,1])),meta:{t:"标签: Java安全",I:!1}}],["/tag/unrecoverablekeyexception/",{loader:()=>a(()=>import("./index.html-BWsEAotN.js"),__vite__mapDeps([4393,1])),meta:{t:"标签: UnrecoverableKeyException",I:!1}}],["/tag/java-stream-api/",{loader:()=>a(()=>import("./index.html-BKyEsS2P.js"),__vite__mapDeps([4394,1])),meta:{t:"标签: Java Stream API",I:!1}}],["/tag/filter/",{loader:()=>a(()=>import("./index.html-BkgR5qnm.js"),__vite__mapDeps([3338,1])),meta:{t:"标签: filter",I:!1}}],["/tag/quarkus/",{loader:()=>a(()=>import("./index.html-C7GNQNOQ.js"),__vite__mapDeps([4395,1])),meta:{t:"标签: Quarkus",I:!1}}],["/tag/%E7%BA%A7%E8%81%94/",{loader:()=>a(()=>import("./index.html-NakQvjHl.js"),__vite__mapDeps([4396,1])),meta:{t:"标签: 级联",I:!1}}],["/tag/matrix/",{loader:()=>a(()=>import("./index.html-taPt2GHK.js"),__vite__mapDeps([4397,1])),meta:{t:"标签: Matrix",I:!1}}],["/tag/converter/",{loader:()=>a(()=>import("./index.html-est45O8-.js"),__vite__mapDeps([4398,1])),meta:{t:"标签: Converter",I:!1}}],["/tag/web-client/",{loader:()=>a(()=>import("./index.html-Cuf_AH8C.js"),__vite__mapDeps([4399,1])),meta:{t:"标签: Web Client",I:!1}}],["/tag/static-code-analysis/",{loader:()=>a(()=>import("./index.html-Rc9U-OGB.js"),__vite__mapDeps([4400,1])),meta:{t:"标签: Static Code Analysis",I:!1}}],["/tag/infer/",{loader:()=>a(()=>import("./index.html-C5v4uiJ5.js"),__vite__mapDeps([4401,1])),meta:{t:"标签: Infer",I:!1}}],["/tag/doanswer/",{loader:()=>a(()=>import("./index.html-BKinnnLs.js"),__vite__mapDeps([4402,1])),meta:{t:"标签: doAnswer",I:!1}}],["/tag/thenreturn/",{loader:()=>a(()=>import("./index.html-DtVlnPbR.js"),__vite__mapDeps([4403,1])),meta:{t:"标签: thenReturn",I:!1}}],["/tag/%E4%BE%9D%E8%B5%96%E6%A0%91/",{loader:()=>a(()=>import("./index.html-BoHc3tEA.js"),__vite__mapDeps([4404,1])),meta:{t:"标签: 依赖树",I:!1}}],["/tag/%E4%BE%9D%E8%B5%96%E5%9B%BE/",{loader:()=>a(()=>import("./index.html-BA-XHZ_-.js"),__vite__mapDeps([4405,1])),meta:{t:"标签: 依赖图",I:!1}}],["/tag/autowired/",{loader:()=>a(()=>import("./index.html-pg1JDoDC.js"),__vite__mapDeps([4406,1])),meta:{t:"标签: Autowired",I:!1}}],["/tag/injectmocks/",{loader:()=>a(()=>import("./index.html-BsUzBAox.js"),__vite__mapDeps([4407,1])),meta:{t:"标签: InjectMocks",I:!1}}],["/tag/%E6%B3%A8%E8%A7%A3/",{loader:()=>a(()=>import("./index.html-BgQ15KLP.js"),__vite__mapDeps([4408,1])),meta:{t:"标签: 注解",I:!1}}],["/article/",{loader:()=>a(()=>import("./index.html-D_t_i4FV.js"),__vite__mapDeps([4409,1])),meta:{t:"文章",I:!1}}],["/star/",{loader:()=>a(()=>import("./index.html-BR0okIEN.js"),__vite__mapDeps([4410,1])),meta:{t:"星标",I:!1}}],["/timeline/",{loader:()=>a(()=>import("./index.html-EPeaKV9S.js"),__vite__mapDeps([4411,1])),meta:{t:"时间轴",I:!1}}]]);/*!
  * vue-router v4.3.2
  * (c) 2024 Eduardo San Martin Morote
  * @license MIT
  */const yt=typeof document<"u";function _d(n){return n.__esModule||n[Symbol.toStringTag]==="Module"}const ma=Object.assign;function zs(n,t){const e={};for(const s in t){const o=t[s];e[s]=kn(o)?o.map(n):n(o)}return e}const se=()=>{},kn=Array.isArray,h0=/#/g,hd=/&/g,vd=/\//g,Ed=/=/g,kd=/\?/g,v0=/\+/g,Ad=/%5B/g,fd=/%5D/g,E0=/%5E/g,Id=/%60/g,k0=/%7B/g,yd=/%7C/g,A0=/%7D/g,Sd=/%20/g;function op(n){return encodeURI(""+n).replace(yd,"|").replace(Ad,"[").replace(fd,"]")}function bd(n){return op(n).replace(k0,"{").replace(A0,"}").replace(E0,"^")}function Eo(n){return op(n).replace(v0,"%2B").replace(Sd,"+").replace(h0,"%23").replace(hd,"%26").replace(Id,"`").replace(k0,"{").replace(A0,"}").replace(E0,"^")}function Dd(n){return Eo(n).replace(Ed,"%3D")}function Jd(n){return op(n).replace(h0,"%23").replace(kd,"%3F")}function Pd(n){return n==null?"":Jd(n).replace(vd,"%2F")}function me(n){try{return decodeURIComponent(""+n)}catch{}return""+n}const Td=/\/$/,Ld=n=>n.replace(Td,"");function qs(n,t,e="/"){let s,o={},p="",i="";const l=t.indexOf("#");let c=t.indexOf("?");return l<c&&l>=0&&(c=-1),c>-1&&(s=t.slice(0,c),p=t.slice(c+1,l>-1?l:t.length),o=n(p)),l>-1&&(s=s||t.slice(0,l),i=t.slice(l,t.length)),s=Bd(s??t,e),{fullPath:s+(p&&"?")+p+i,path:s,query:o,hash:me(i)}}function Rd(n,t){const e=t.query?n(t.query):"";return t.path+(e&&"?")+e+(t.hash||"")}function vi(n,t){return!t||!n.toLowerCase().startsWith(t.toLowerCase())?n:n.slice(t.length)||"/"}function Od(n,t,e){const s=t.matched.length-1,o=e.matched.length-1;return s>-1&&s===o&&Ct(t.matched[s],e.matched[o])&&f0(t.params,e.params)&&n(t.query)===n(e.query)&&t.hash===e.hash}function Ct(n,t){return(n.aliasOf||n)===(t.aliasOf||t)}function f0(n,t){if(Object.keys(n).length!==Object.keys(t).length)return!1;for(const e in n)if(!xd(n[e],t[e]))return!1;return!0}function xd(n,t){return kn(n)?Ei(n,t):kn(t)?Ei(t,n):n===t}function Ei(n,t){return kn(t)?n.length===t.length&&n.every((e,s)=>e===t[s]):n.length===1&&n[0]===t}function Bd(n,t){if(n.startsWith("/"))return n;if(!n)return t;const e=t.split("/"),s=n.split("/"),o=s[s.length-1];(o===".."||o===".")&&s.push("");let p=e.length-1,i,l;for(i=0;i<s.length;i++)if(l=s[i],l!==".")if(l==="..")p>1&&p--;else break;return e.slice(0,p).join("/")+"/"+s.slice(i).join("/")}var _e;(function(n){n.pop="pop",n.push="push"})(_e||(_e={}));var oe;(function(n){n.back="back",n.forward="forward",n.unknown=""})(oe||(oe={}));function Cd(n){if(!n)if(yt){const t=document.querySelector("base");n=t&&t.getAttribute("href")||"/",n=n.replace(/^\w+:\/\/[^\/]+/,"")}else n="/";return n[0]!=="/"&&n[0]!=="#"&&(n="/"+n),Ld(n)}const wd=/^[^#]+#/;function Vd(n,t){return n.replace(wd,"#")+t}function Md(n,t){const e=document.documentElement.getBoundingClientRect(),s=n.getBoundingClientRect();return{behavior:t.behavior,left:s.left-e.left-(t.left||0),top:s.top-e.top-(t.top||0)}}const Ds=()=>({left:window.scrollX,top:window.scrollY});function Fd(n){let t;if("el"in n){const e=n.el,s=typeof e=="string"&&e.startsWith("#"),o=typeof e=="string"?s?document.getElementById(e.slice(1)):document.querySelector(e):e;if(!o)return;t=Md(o,n)}else t=n;"scrollBehavior"in document.documentElement.style?window.scrollTo(t):window.scrollTo(t.left!=null?t.left:window.scrollX,t.top!=null?t.top:window.scrollY)}function ki(n,t){return(history.state?history.state.position-t:-1)+n}const ko=new Map;function jd(n,t){ko.set(n,t)}function Hd(n){const t=ko.get(n);return ko.delete(n),t}let Ud=()=>location.protocol+"//"+location.host;function I0(n,t){const{pathname:e,search:s,hash:o}=t,p=n.indexOf("#");if(p>-1){let l=o.includes(n.slice(p))?n.slice(p).length:1,c=o.slice(l);return c[0]!=="/"&&(c="/"+c),vi(c,"")}return vi(e,n)+s+o}function Nd(n,t,e,s){let o=[],p=[],i=null;const l=({state:m})=>{const _=I0(n,location),v=e.value,A=t.value;let S=0;if(m){if(e.value=_,t.value=m,i&&i===v){i=null;return}S=A?m.position-A.position:0}else s(_);o.forEach(f=>{f(e.value,v,{delta:S,type:_e.pop,direction:S?S>0?oe.forward:oe.back:oe.unknown})})};function c(){i=e.value}function u(m){o.push(m);const _=()=>{const v=o.indexOf(m);v>-1&&o.splice(v,1)};return p.push(_),_}function d(){const{history:m}=window;m.state&&m.replaceState(ma({},m.state,{scroll:Ds()}),"")}function g(){for(const m of p)m();p=[],window.removeEventListener("popstate",l),window.removeEventListener("beforeunload",d)}return window.addEventListener("popstate",l),window.addEventListener("beforeunload",d,{passive:!0}),{pauseListeners:c,listen:u,destroy:g}}function Ai(n,t,e,s=!1,o=!1){return{back:n,current:t,forward:e,replaced:s,position:window.history.length,scroll:o?Ds():null}}function Kd(n){const{history:t,location:e}=window,s={value:I0(n,e)},o={value:t.state};o.value||p(s.value,{back:null,current:s.value,forward:null,position:t.length-1,replaced:!0,scroll:null},!0);function p(c,u,d){const g=n.indexOf("#"),m=g>-1?(e.host&&document.querySelector("base")?n:n.slice(g))+c:Ud()+n+c;try{t[d?"replaceState":"pushState"](u,"",m),o.value=u}catch(_){console.error(_),e[d?"replace":"assign"](m)}}function i(c,u){const d=ma({},t.state,Ai(o.value.back,c,o.value.forward,!0),u,{position:o.value.position});p(c,d,!0),s.value=c}function l(c,u){const d=ma({},o.value,t.state,{forward:c,scroll:Ds()});p(d.current,d,!0);const g=ma({},Ai(s.value,c,null),{position:d.position+1},u);p(c,g,!1),s.value=c}return{location:s,state:o,push:l,replace:i}}function Wd(n){n=Cd(n);const t=Kd(n),e=Nd(n,t.state,t.location,t.replace);function s(p,i=!0){i||e.pauseListeners(),history.go(p)}const o=ma({location:"",base:n,go:s,createHref:Vd.bind(null,n)},t,e);return Object.defineProperty(o,"location",{enumerable:!0,get:()=>t.location.value}),Object.defineProperty(o,"state",{enumerable:!0,get:()=>t.state.value}),o}function Gd(n){return typeof n=="string"||n&&typeof n=="object"}function y0(n){return typeof n=="string"||typeof n=="symbol"}const On={path:"/",name:void 0,params:{},query:{},hash:"",fullPath:"/",matched:[],meta:{},redirectedFrom:void 0},S0=Symbol("");var fi;(function(n){n[n.aborted=4]="aborted",n[n.cancelled=8]="cancelled",n[n.duplicated=16]="duplicated"})(fi||(fi={}));function wt(n,t){return ma(new Error,{type:n,[S0]:!0},t)}function Ln(n,t){return n instanceof Error&&S0 in n&&(t==null||!!(n.type&t))}const Ii="[^/]+?",zd={sensitive:!1,strict:!1,start:!0,end:!0},qd=/[.+*?^${}()[\]/\\]/g;function Qd(n,t){const e=ma({},zd,t),s=[];let o=e.start?"^":"";const p=[];for(const u of n){const d=u.length?[]:[90];e.strict&&!u.length&&(o+="/");for(let g=0;g<u.length;g++){const m=u[g];let _=40+(e.sensitive?.25:0);if(m.type===0)g||(o+="/"),o+=m.value.replace(qd,"\\$&"),_+=40;else if(m.type===1){const{value:v,repeatable:A,optional:S,regexp:f}=m;p.push({name:v,repeatable:A,optional:S});const y=f||Ii;if(y!==Ii){_+=10;try{new RegExp(`(${y})`)}catch(D){throw new Error(`Invalid custom RegExp for param "${v}" (${y}): `+D.message)}}let k=A?`((?:${y})(?:/(?:${y}))*)`:`(${y})`;g||(k=S&&u.length<2?`(?:/${k})`:"/"+k),S&&(k+="?"),o+=k,_+=20,S&&(_+=-8),A&&(_+=-20),y===".*"&&(_+=-50)}d.push(_)}s.push(d)}if(e.strict&&e.end){const u=s.length-1;s[u][s[u].length-1]+=.7000000000000001}e.strict||(o+="/?"),e.end?o+="$":e.strict&&(o+="(?:/|$)");const i=new RegExp(o,e.sensitive?"":"i");function l(u){const d=u.match(i),g={};if(!d)return null;for(let m=1;m<d.length;m++){const _=d[m]||"",v=p[m-1];g[v.name]=_&&v.repeatable?_.split("/"):_}return g}function c(u){let d="",g=!1;for(const m of n){(!g||!d.endsWith("/"))&&(d+="/"),g=!1;for(const _ of m)if(_.type===0)d+=_.value;else if(_.type===1){const{value:v,repeatable:A,optional:S}=_,f=v in u?u[v]:"";if(kn(f)&&!A)throw new Error(`Provided param "${v}" is an array but it is not repeatable (* or + modifiers)`);const y=kn(f)?f.join("/"):f;if(!y)if(S)m.length<2&&(d.endsWith("/")?d=d.slice(0,-1):g=!0);else throw new Error(`Missing required param "${v}"`);d+=y}}return d||"/"}return{re:i,score:s,keys:p,parse:l,stringify:c}}function $d(n,t){let e=0;for(;e<n.length&&e<t.length;){const s=t[e]-n[e];if(s)return s;e++}return n.length<t.length?n.length===1&&n[0]===80?-1:1:n.length>t.length?t.length===1&&t[0]===80?1:-1:0}function Xd(n,t){let e=0;const s=n.score,o=t.score;for(;e<s.length&&e<o.length;){const p=$d(s[e],o[e]);if(p)return p;e++}if(Math.abs(o.length-s.length)===1){if(yi(s))return 1;if(yi(o))return-1}return o.length-s.length}function yi(n){const t=n[n.length-1];return n.length>0&&t[t.length-1]<0}const Zd={type:0,value:""},Yd=/[a-zA-Z0-9_]/;function ag(n){if(!n)return[[]];if(n==="/")return[[Zd]];if(!n.startsWith("/"))throw new Error(`Invalid path "${n}"`);function t(_){throw new Error(`ERR (${e})/"${u}": ${_}`)}let e=0,s=e;const o=[];let p;function i(){p&&o.push(p),p=[]}let l=0,c,u="",d="";function g(){u&&(e===0?p.push({type:0,value:u}):e===1||e===2||e===3?(p.length>1&&(c==="*"||c==="+")&&t(`A repeatable param (${u}) must be alone in its segment. eg: '/:ids+.`),p.push({type:1,value:u,regexp:d,repeatable:c==="*"||c==="+",optional:c==="*"||c==="?"})):t("Invalid state to consume buffer"),u="")}function m(){u+=c}for(;l<n.length;){if(c=n[l++],c==="\\"&&e!==2){s=e,e=4;continue}switch(e){case 0:c==="/"?(u&&g(),i()):c===":"?(g(),e=1):m();break;case 4:m(),e=s;break;case 1:c==="("?e=2:Yd.test(c)?m():(g(),e=0,c!=="*"&&c!=="?"&&c!=="+"&&l--);break;case 2:c===")"?d[d.length-1]=="\\"?d=d.slice(0,-1)+c:e=3:d+=c;break;case 3:g(),e=0,c!=="*"&&c!=="?"&&c!=="+"&&l--,d="";break;default:t("Unknown state");break}}return e===2&&t(`Unfinished custom RegExp for param "${u}"`),g(),i(),o}function ng(n,t,e){const s=Qd(ag(n.path),e),o=ma(s,{record:n,parent:t,children:[],alias:[]});return t&&!o.record.aliasOf==!t.record.aliasOf&&t.children.push(o),o}function tg(n,t){const e=[],s=new Map;t=Di({strict:!1,end:!0,sensitive:!1},t);function o(d){return s.get(d)}function p(d,g,m){const _=!m,v=eg(d);v.aliasOf=m&&m.record;const A=Di(t,d),S=[v];if("alias"in d){const k=typeof d.alias=="string"?[d.alias]:d.alias;for(const D of k)S.push(ma({},v,{components:m?m.record.components:v.components,path:D,aliasOf:m?m.record:v}))}let f,y;for(const k of S){const{path:D}=k;if(g&&D[0]!=="/"){const M=g.record.path,B=M[M.length-1]==="/"?"":"/";k.path=g.record.path+(D&&B+D)}if(f=ng(k,g,A),m?m.alias.push(f):(y=y||f,y!==f&&y.alias.push(f),_&&d.name&&!bi(f)&&i(d.name)),v.children){const M=v.children;for(let B=0;B<M.length;B++)p(M[B],f,m&&m.children[B])}m=m||f,(f.record.components&&Object.keys(f.record.components).length||f.record.name||f.record.redirect)&&c(f)}return y?()=>{i(y)}:se}function i(d){if(y0(d)){const g=s.get(d);g&&(s.delete(d),e.splice(e.indexOf(g),1),g.children.forEach(i),g.alias.forEach(i))}else{const g=e.indexOf(d);g>-1&&(e.splice(g,1),d.record.name&&s.delete(d.record.name),d.children.forEach(i),d.alias.forEach(i))}}function l(){return e}function c(d){let g=0;for(;g<e.length&&Xd(d,e[g])>=0&&(d.record.path!==e[g].record.path||!b0(d,e[g]));)g++;e.splice(g,0,d),d.record.name&&!bi(d)&&s.set(d.record.name,d)}function u(d,g){let m,_={},v,A;if("name"in d&&d.name){if(m=s.get(d.name),!m)throw wt(1,{location:d});A=m.record.name,_=ma(Si(g.params,m.keys.filter(y=>!y.optional).concat(m.parent?m.parent.keys.filter(y=>y.optional):[]).map(y=>y.name)),d.params&&Si(d.params,m.keys.map(y=>y.name))),v=m.stringify(_)}else if(d.path!=null)v=d.path,m=e.find(y=>y.re.test(v)),m&&(_=m.parse(v),A=m.record.name);else{if(m=g.name?s.get(g.name):e.find(y=>y.re.test(g.path)),!m)throw wt(1,{location:d,currentLocation:g});A=m.record.name,_=ma({},g.params,d.params),v=m.stringify(_)}const S=[];let f=m;for(;f;)S.unshift(f.record),f=f.parent;return{name:A,path:v,params:_,matched:S,meta:og(S)}}return n.forEach(d=>p(d)),{addRoute:p,resolve:u,removeRoute:i,getRoutes:l,getRecordMatcher:o}}function Si(n,t){const e={};for(const s of t)s in n&&(e[s]=n[s]);return e}function eg(n){return{path:n.path,redirect:n.redirect,name:n.name,meta:n.meta||{},aliasOf:void 0,beforeEnter:n.beforeEnter,props:sg(n),children:n.children||[],instances:{},leaveGuards:new Set,updateGuards:new Set,enterCallbacks:{},components:"components"in n?n.components||null:n.component&&{default:n.component}}}function sg(n){const t={},e=n.props||!1;if("component"in n)t.default=e;else for(const s in n.components)t[s]=typeof e=="object"?e[s]:e;return t}function bi(n){for(;n;){if(n.record.aliasOf)return!0;n=n.parent}return!1}function og(n){return n.reduce((t,e)=>ma(t,e.meta),{})}function Di(n,t){const e={};for(const s in n)e[s]=s in t?t[s]:n[s];return e}function b0(n,t){return t.children.some(e=>e===n||b0(n,e))}function pg(n){const t={};if(n===""||n==="?")return t;const s=(n[0]==="?"?n.slice(1):n).split("&");for(let o=0;o<s.length;++o){const p=s[o].replace(v0," "),i=p.indexOf("="),l=me(i<0?p:p.slice(0,i)),c=i<0?null:me(p.slice(i+1));if(l in t){let u=t[l];kn(u)||(u=t[l]=[u]),u.push(c)}else t[l]=c}return t}function Ji(n){let t="";for(let e in n){const s=n[e];if(e=Dd(e),s==null){s!==void 0&&(t+=(t.length?"&":"")+e);continue}(kn(s)?s.map(p=>p&&Eo(p)):[s&&Eo(s)]).forEach(p=>{p!==void 0&&(t+=(t.length?"&":"")+e,p!=null&&(t+="="+p))})}return t}function ig(n){const t={};for(const e in n){const s=n[e];s!==void 0&&(t[e]=kn(s)?s.map(o=>o==null?null:""+o):s==null?s:""+s)}return t}const rg=Symbol(""),Pi=Symbol(""),Js=Symbol(""),pp=Symbol(""),Ao=Symbol("");function zt(){let n=[];function t(s){return n.push(s),()=>{const o=n.indexOf(s);o>-1&&n.splice(o,1)}}function e(){n=[]}return{add:t,list:()=>n.slice(),reset:e}}function Qn(n,t,e,s,o,p=i=>i()){const i=s&&(s.enterCallbacks[o]=s.enterCallbacks[o]||[]);return()=>new Promise((l,c)=>{const u=m=>{m===!1?c(wt(4,{from:e,to:t})):m instanceof Error?c(m):Gd(m)?c(wt(2,{from:t,to:m})):(i&&s.enterCallbacks[o]===i&&typeof m=="function"&&i.push(m),l())},d=p(()=>n.call(s&&s.instances[o],t,e,u));let g=Promise.resolve(d);n.length<3&&(g=g.then(u)),g.catch(m=>c(m))})}function Qs(n,t,e,s,o=p=>p()){const p=[];for(const i of n)for(const l in i.components){let c=i.components[l];if(!(t!=="beforeRouteEnter"&&!i.instances[l]))if(lg(c)){const d=(c.__vccOpts||c)[t];d&&p.push(Qn(d,e,s,i,l,o))}else{let u=c();p.push(()=>u.then(d=>{if(!d)return Promise.reject(new Error(`Couldn't resolve component "${l}" at "${i.path}"`));const g=_d(d)?d.default:d;i.components[l]=g;const _=(g.__vccOpts||g)[t];return _&&Qn(_,e,s,i,l,o)()}))}}return p}function lg(n){return typeof n=="object"||"displayName"in n||"props"in n||"__vccOpts"in n}function Ti(n){const t=ba(Js),e=ba(pp),s=I(()=>{const c=_t(n.to);return t.resolve(c)}),o=I(()=>{const{matched:c}=s.value,{length:u}=c,d=c[u-1],g=e.matched;if(!d||!g.length)return-1;const m=g.findIndex(Ct.bind(null,d));if(m>-1)return m;const _=Li(c[u-2]);return u>1&&Li(d)===_&&g[g.length-1].path!==_?g.findIndex(Ct.bind(null,c[u-2])):m}),p=I(()=>o.value>-1&&gg(e.params,s.value.params)),i=I(()=>o.value>-1&&o.value===e.matched.length-1&&f0(e.params,s.value.params));function l(c={}){return dg(c)?t[_t(n.replace)?"replace":"push"](_t(n.to)).catch(se):Promise.resolve()}return{route:s,href:I(()=>s.value.href),isActive:p,isExactActive:i,navigate:l}}const cg=j({name:"RouterLink",compatConfig:{MODE:3},props:{to:{type:[String,Object],required:!0},replace:Boolean,activeClass:String,exactActiveClass:String,custom:Boolean,ariaCurrentValue:{type:String,default:"page"}},useLink:Ti,setup(n,{slots:t}){const e=Se(Ti(n)),{options:s}=ba(Js),o=I(()=>({[Ri(n.activeClass,s.linkActiveClass,"router-link-active")]:e.isActive,[Ri(n.exactActiveClass,s.linkExactActiveClass,"router-link-exact-active")]:e.isExactActive}));return()=>{const p=t.default&&t.default(e);return n.custom?p:r("a",{"aria-current":e.isExactActive?n.ariaCurrentValue:null,href:e.href,onClick:e.navigate,class:o.value},p)}}}),ug=cg;function dg(n){if(!(n.metaKey||n.altKey||n.ctrlKey||n.shiftKey)&&!n.defaultPrevented&&!(n.button!==void 0&&n.button!==0)){if(n.currentTarget&&n.currentTarget.getAttribute){const t=n.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(t))return}return n.preventDefault&&n.preventDefault(),!0}}function gg(n,t){for(const e in t){const s=t[e],o=n[e];if(typeof s=="string"){if(s!==o)return!1}else if(!kn(o)||o.length!==s.length||s.some((p,i)=>p!==o[i]))return!1}return!0}function Li(n){return n?n.aliasOf?n.aliasOf.path:n.path:""}const Ri=(n,t,e)=>n??t??e,mg=j({name:"RouterView",inheritAttrs:!1,props:{name:{type:String,default:"default"},route:Object},compatConfig:{MODE:3},setup(n,{attrs:t,slots:e}){const s=ba(Ao),o=I(()=>n.route||s.value),p=ba(Pi,0),i=I(()=>{let u=_t(p);const{matched:d}=o.value;let g;for(;(g=d[u])&&!g.components;)u++;return u}),l=I(()=>o.value.matched[i.value]);En(Pi,I(()=>i.value+1)),En(rg,l),En(Ao,o);const c=X();return ua(()=>[c.value,l.value,n.name],([u,d,g],[m,_,v])=>{d&&(d.instances[g]=u,_&&_!==d&&u&&u===m&&(d.leaveGuards.size||(d.leaveGuards=_.leaveGuards),d.updateGuards.size||(d.updateGuards=_.updateGuards))),u&&d&&(!_||!Ct(d,_)||!m)&&(d.enterCallbacks[g]||[]).forEach(A=>A(u))},{flush:"post"}),()=>{const u=o.value,d=n.name,g=l.value,m=g&&g.components[d];if(!m)return Oi(e.default,{Component:m,route:u});const _=g.props[d],v=_?_===!0?u.params:typeof _=="function"?_(u):_:null,S=r(m,ma({},v,t,{onVnodeUnmounted:f=>{f.component.isUnmounted&&(g.instances[d]=null)},ref:c}));return Oi(e.default,{Component:S,route:u})||S}}});function Oi(n,t){if(!n)return null;const e=n(t);return e.length===1?e[0]:e}const _g=mg;function hg(n){const t=tg(n.routes,n),e=n.parseQuery||pg,s=n.stringifyQuery||Ji,o=n.history,p=zt(),i=zt(),l=zt(),c=La(On);let u=On;yt&&n.scrollBehavior&&"scrollRestoration"in history&&(history.scrollRestoration="manual");const d=zs.bind(null,J=>""+J),g=zs.bind(null,Pd),m=zs.bind(null,me);function _(J,N){let H,Q;return y0(J)?(H=t.getRecordMatcher(J),Q=N):Q=J,t.addRoute(Q,H)}function v(J){const N=t.getRecordMatcher(J);N&&t.removeRoute(N)}function A(){return t.getRoutes().map(J=>J.record)}function S(J){return!!t.getRecordMatcher(J)}function f(J,N){if(N=ma({},N||c.value),typeof J=="string"){const E=qs(e,J,N.path),b=t.resolve({path:E.path},N),T=o.createHref(E.fullPath);return ma(E,b,{params:m(b.params),hash:me(E.hash),redirectedFrom:void 0,href:T})}let H;if(J.path!=null)H=ma({},J,{path:qs(e,J.path,N.path).path});else{const E=ma({},J.params);for(const b in E)E[b]==null&&delete E[b];H=ma({},J,{params:g(E)}),N.params=g(N.params)}const Q=t.resolve(H,N),ia=J.hash||"";Q.params=d(m(Q.params));const va=Rd(s,ma({},J,{hash:bd(ia),path:Q.path})),h=o.createHref(va);return ma({fullPath:va,hash:ia,query:s===Ji?ig(J.query):J.query||{}},Q,{redirectedFrom:void 0,href:h})}function y(J){return typeof J=="string"?qs(e,J,c.value.path):ma({},J)}function k(J,N){if(u!==J)return wt(8,{from:N,to:J})}function D(J){return L(J)}function M(J){return D(ma(y(J),{replace:!0}))}function B(J){const N=J.matched[J.matched.length-1];if(N&&N.redirect){const{redirect:H}=N;let Q=typeof H=="function"?H(J):H;return typeof Q=="string"&&(Q=Q.includes("?")||Q.includes("#")?Q=y(Q):{path:Q},Q.params={}),ma({query:J.query,hash:J.hash,params:Q.path!=null?{}:J.params},Q)}}function L(J,N){const H=u=f(J),Q=c.value,ia=J.state,va=J.force,h=J.replace===!0,E=B(H);if(E)return L(ma(y(E),{state:typeof E=="object"?ma({},ia,E.state):ia,force:va,replace:h}),N||H);const b=H;b.redirectedFrom=N;let T;return!va&&Od(s,Q,H)&&(T=wt(16,{to:b,from:Q}),tn(Q,Q,!0,!1)),(T?Promise.resolve(T):x(b,Q)).catch(P=>Ln(P)?Ln(P,2)?P:In(P):q(P,b,Q)).then(P=>{if(P){if(Ln(P,2))return L(ma({replace:h},y(P.to),{state:typeof P.to=="object"?ma({},ia,P.to.state):ia,force:va}),N||b)}else P=C(b,Q,!0,h,ia);return W(b,Q,P),P})}function O(J,N){const H=k(J,N);return H?Promise.reject(H):Promise.resolve()}function G(J){const N=Tn.values().next().value;return N&&typeof N.runWithContext=="function"?N.runWithContext(J):J()}function x(J,N){let H;const[Q,ia,va]=vg(J,N);H=Qs(Q.reverse(),"beforeRouteLeave",J,N);for(const E of Q)E.leaveGuards.forEach(b=>{H.push(Qn(b,J,N))});const h=O.bind(null,J,N);return H.push(h),Oa(H).then(()=>{H=[];for(const E of p.list())H.push(Qn(E,J,N));return H.push(h),Oa(H)}).then(()=>{H=Qs(ia,"beforeRouteUpdate",J,N);for(const E of ia)E.updateGuards.forEach(b=>{H.push(Qn(b,J,N))});return H.push(h),Oa(H)}).then(()=>{H=[];for(const E of va)if(E.beforeEnter)if(kn(E.beforeEnter))for(const b of E.beforeEnter)H.push(Qn(b,J,N));else H.push(Qn(E.beforeEnter,J,N));return H.push(h),Oa(H)}).then(()=>(J.matched.forEach(E=>E.enterCallbacks={}),H=Qs(va,"beforeRouteEnter",J,N,G),H.push(h),Oa(H))).then(()=>{H=[];for(const E of i.list())H.push(Qn(E,J,N));return H.push(h),Oa(H)}).catch(E=>Ln(E,8)?E:Promise.reject(E))}function W(J,N,H){l.list().forEach(Q=>G(()=>Q(J,N,H)))}function C(J,N,H,Q,ia){const va=k(J,N);if(va)return va;const h=N===On,E=yt?history.state:{};H&&(Q||h?o.replace(J.fullPath,ma({scroll:h&&E&&E.scroll},ia)):o.push(J.fullPath,ia)),c.value=J,tn(J,N,H,h),In()}let aa;function Ja(){aa||(aa=o.listen((J,N,H)=>{if(!yn.listening)return;const Q=f(J),ia=B(Q);if(ia){L(ma(ia,{replace:!0}),Q).catch(se);return}u=Q;const va=c.value;yt&&jd(ki(va.fullPath,H.delta),Ds()),x(Q,va).catch(h=>Ln(h,12)?h:Ln(h,2)?(L(h.to,Q).then(E=>{Ln(E,20)&&!H.delta&&H.type===_e.pop&&o.go(-1,!1)}).catch(se),Promise.reject()):(H.delta&&o.go(-H.delta,!1),q(h,Q,va))).then(h=>{h=h||C(Q,va,!1),h&&(H.delta&&!Ln(h,8)?o.go(-H.delta,!1):H.type===_e.pop&&Ln(h,20)&&o.go(-1,!1)),W(Q,va,h)}).catch(se)}))}let Ia=zt(),z=zt(),na;function q(J,N,H){In(J);const Q=z.list();return Q.length?Q.forEach(ia=>ia(J,N,H)):console.error(J),Promise.reject(J)}function Ra(){return na&&c.value!==On?Promise.resolve():new Promise((J,N)=>{Ia.add([J,N])})}function In(J){return na||(na=!J,Ja(),Ia.list().forEach(([N,H])=>J?H(J):N()),Ia.reset()),J}function tn(J,N,H,Q){const{scrollBehavior:ia}=n;if(!yt||!ia)return Promise.resolve();const va=!H&&Hd(ki(J.fullPath,0))||(Q||!H)&&history.state&&history.state.scroll||null;return wn().then(()=>ia(J,N,va)).then(h=>h&&Fd(h)).catch(h=>q(h,J,N))}const wa=J=>o.go(J);let $a;const Tn=new Set,yn={currentRoute:c,listening:!0,addRoute:_,removeRoute:v,hasRoute:S,getRoutes:A,resolve:f,options:n,push:D,replace:M,go:wa,back:()=>wa(-1),forward:()=>wa(1),beforeEach:p.add,beforeResolve:i.add,afterEach:l.add,onError:z.add,isReady:Ra,install(J){const N=this;J.component("RouterLink",ug),J.component("RouterView",_g),J.config.globalProperties.$router=N,Object.defineProperty(J.config.globalProperties,"$route",{enumerable:!0,get:()=>_t(c)}),yt&&!$a&&c.value===On&&($a=!0,D(o.location).catch(ia=>{}));const H={};for(const ia in On)Object.defineProperty(H,ia,{get:()=>c.value[ia],enumerable:!0});J.provide(Js,N),J.provide(pp,Ir(H)),J.provide(Ao,c);const Q=J.unmount;Tn.add(J),J.unmount=function(){Tn.delete(J),Tn.size<1&&(u=On,aa&&aa(),aa=null,c.value=On,$a=!1,na=!1),Q()}}};function Oa(J){return J.reduce((N,H)=>N.then(()=>G(H)),Promise.resolve())}return yn}function vg(n,t){const e=[],s=[],o=[],p=Math.max(t.matched.length,n.matched.length);for(let i=0;i<p;i++){const l=t.matched[i];l&&(n.matched.find(u=>Ct(u,l))?s.push(l):e.push(l));const c=n.matched[i];c&&(t.matched.find(u=>Ct(u,c))||o.push(c))}return[e,s,o]}function kt(){return ba(Js)}function Mn(){return ba(pp)}var ip=Symbol(""),An=()=>{const n=ba(ip);if(!n)throw new Error("useClientData() is called without provider.");return n},Eg=()=>An().pageComponent,fa=()=>An().pageData,da=()=>An().pageFrontmatter,kg=()=>An().pageHead,D0=()=>An().pageLang,Ag=()=>An().pageLayout,st=()=>An().routeLocale,fg=()=>An().routePath,Ig=()=>An().routes,J0=()=>An().siteData,Le=()=>An().siteLocaleData,yg=Symbol(""),fo=La(gd),he=La(md),P0=n=>{const t=ld(n);if(he.value[t])return t;const e=encodeURI(t);return he.value[e]?e:fo.value[t]||fo.value[e]||t},Jn=n=>{const t=P0(n),e=he.value[t]??{...he.value["/404.html"],notFound:!0};return{path:t,notFound:!1,...e}},Ps=j({name:"ClientOnly",setup(n,t){const e=X(!1);return Ea(()=>{e.value=!0}),()=>{var s,o;return e.value?(o=(s=t.slots).default)==null?void 0:o.call(s):null}}}),T0=j({name:"Content",props:{path:{type:String,required:!1,default:""}},setup(n){const t=Eg(),e=I(()=>{if(!n.path)return t.value;const s=Jn(n.path);return Rc(()=>s.loader().then(({comp:o})=>o))});return()=>r(e.value)}}),Pn=(n={})=>n,ha=n=>et(n)?n:`/${_0(n)}`,Sg=n=>{if(!(n.metaKey||n.altKey||n.ctrlKey||n.shiftKey)&&!n.defaultPrevented&&!(n.button!==void 0&&n.button!==0)){if(n.currentTarget){const t=n.currentTarget.getAttribute("target");if(t!=null&&t.match(/\b_blank\b/i))return}return n.preventDefault(),!0}},Pa=({active:n=!1,activeClass:t="route-link-active",to:e,...s},{slots:o})=>{var c;const p=kt(),i=P0(e),l=i.startsWith("#")||i.startsWith("?")?i:ha(i);return r("a",{...s,class:["route-link",{[t]:n}],href:l,onClick:(u={})=>{Sg(u)?p.push(e).catch():Promise.resolve()}},(c=o.default)==null?void 0:c.call(o))};Pa.displayName="RouteLink";Pa.props={active:Boolean,activeClass:String,to:String};var bg="Layout",Dg="en-US",lt=Se({resolveLayouts:n=>n.reduce((t,e)=>({...t,...e.layouts}),{}),resolvePageHead:(n,t,e)=>{const s=Da(t.description)?t.description:e.description,o=[...Array.isArray(t.head)?t.head:[],...e.head,["title",{},n],["meta",{name:"description",content:s}]];return pd(o)},resolvePageHeadTitle:(n,t)=>[n.title,t.title].filter(e=>!!e).join(" | "),resolvePageLang:(n,t)=>n.lang||t.lang||Dg,resolvePageLayout:(n,t)=>{const e=Da(n.frontmatter.layout)?n.frontmatter.layout:bg;if(!t[e])throw new Error(`[vuepress] Cannot resolve layout: ${e}`);return t[e]},resolveRouteLocale:(n,t)=>cd(n,t),resolveSiteLocaleData:(n,t)=>{var e;return{...n,...n.locales[t],head:[...((e=n.locales[t])==null?void 0:e.head)??[],...n.head??[]]}}});const Jg={},Re=n=>{const t=st();return I(()=>n[t.value]??{})};var an=Uint8Array,Dt=Uint16Array,Pg=Int32Array,L0=new an([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0,0]),R0=new an([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0]),Tg=new an([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),O0=function(n,t){for(var e=new Dt(31),s=0;s<31;++s)e[s]=t+=1<<n[s-1];for(var o=new Pg(e[30]),s=1;s<30;++s)for(var p=e[s];p<e[s+1];++p)o[p]=p-e[s]<<5|s;return{b:e,r:o}},x0=O0(L0,2),B0=x0.b,Lg=x0.r;B0[28]=258,Lg[258]=28;var Rg=O0(R0,0),Og=Rg.b,Io=new Dt(32768);for(var ka=0;ka<32768;++ka){var Un=(ka&43690)>>1|(ka&21845)<<1;Un=(Un&52428)>>2|(Un&13107)<<2,Un=(Un&61680)>>4|(Un&3855)<<4,Io[ka]=((Un&65280)>>8|(Un&255)<<8)>>1}var pe=function(n,t,e){for(var s=n.length,o=0,p=new Dt(t);o<s;++o)n[o]&&++p[n[o]-1];var i=new Dt(t);for(o=1;o<t;++o)i[o]=i[o-1]+p[o-1]<<1;var l;if(e){l=new Dt(1<<t);var c=15-t;for(o=0;o<s;++o)if(n[o])for(var u=o<<4|n[o],d=t-n[o],g=i[n[o]-1]++<<d,m=g|(1<<d)-1;g<=m;++g)l[Io[g]>>c]=u}else for(l=new Dt(s),o=0;o<s;++o)n[o]&&(l[o]=Io[i[n[o]-1]++]>>15-n[o]);return l},Oe=new an(288);for(var ka=0;ka<144;++ka)Oe[ka]=8;for(var ka=144;ka<256;++ka)Oe[ka]=9;for(var ka=256;ka<280;++ka)Oe[ka]=7;for(var ka=280;ka<288;++ka)Oe[ka]=8;var C0=new an(32);for(var ka=0;ka<32;++ka)C0[ka]=5;var xg=pe(Oe,9,1),Bg=pe(C0,5,1),$s=function(n){for(var t=n[0],e=1;e<n.length;++e)n[e]>t&&(t=n[e]);return t},mn=function(n,t,e){var s=t/8|0;return(n[s]|n[s+1]<<8)>>(t&7)&e},Xs=function(n,t){var e=t/8|0;return(n[e]|n[e+1]<<8|n[e+2]<<16)>>(t&7)},Cg=function(n){return(n+7)/8|0},w0=function(n,t,e){return(t==null||t<0)&&(t=0),(e==null||e>n.length)&&(e=n.length),new an(n.subarray(t,e))},wg=["unexpected EOF","invalid block type","invalid length/literal","invalid distance","stream finished","no stream handler",,"no callback","invalid UTF-8 data","extra field too long","date not in range 1980-2099","filename too long","stream finishing","invalid zip data"],on=function(n,t,e){var s=new Error(t||wg[n]);if(s.code=n,Error.captureStackTrace&&Error.captureStackTrace(s,on),!e)throw s;return s},Vg=function(n,t,e,s){var o=n.length,p=0;if(!o||t.f&&!t.l)return e||new an(0);var i=!e,l=i||t.i!=2,c=t.i;i&&(e=new an(o*3));var u=function(ia){var va=e.length;if(ia>va){var h=new an(Math.max(va*2,ia));h.set(e),e=h}},d=t.f||0,g=t.p||0,m=t.b||0,_=t.l,v=t.d,A=t.m,S=t.n,f=o*8;do{if(!_){d=mn(n,g,1);var y=mn(n,g+1,3);if(g+=3,y)if(y==1)_=xg,v=Bg,A=9,S=5;else if(y==2){var B=mn(n,g,31)+257,L=mn(n,g+10,15)+4,O=B+mn(n,g+5,31)+1;g+=14;for(var G=new an(O),x=new an(19),W=0;W<L;++W)x[Tg[W]]=mn(n,g+W*3,7);g+=L*3;for(var C=$s(x),aa=(1<<C)-1,Ja=pe(x,C,1),W=0;W<O;){var Ia=Ja[mn(n,g,aa)];g+=Ia&15;var k=Ia>>4;if(k<16)G[W++]=k;else{var z=0,na=0;for(k==16?(na=3+mn(n,g,3),g+=2,z=G[W-1]):k==17?(na=3+mn(n,g,7),g+=3):k==18&&(na=11+mn(n,g,127),g+=7);na--;)G[W++]=z}}var q=G.subarray(0,B),Ra=G.subarray(B);A=$s(q),S=$s(Ra),_=pe(q,A,1),v=pe(Ra,S,1)}else on(1);else{var k=Cg(g)+4,D=n[k-4]|n[k-3]<<8,M=k+D;if(M>o){c&&on(0);break}l&&u(m+D),e.set(n.subarray(k,M),m),t.b=m+=D,t.p=g=M*8,t.f=d;continue}if(g>f){c&&on(0);break}}l&&u(m+131072);for(var In=(1<<A)-1,tn=(1<<S)-1,wa=g;;wa=g){var z=_[Xs(n,g)&In],$a=z>>4;if(g+=z&15,g>f){c&&on(0);break}if(z||on(2),$a<256)e[m++]=$a;else if($a==256){wa=g,_=null;break}else{var Tn=$a-254;if($a>264){var W=$a-257,yn=L0[W];Tn=mn(n,g,(1<<yn)-1)+B0[W],g+=yn}var Oa=v[Xs(n,g)&tn],J=Oa>>4;Oa||on(3),g+=Oa&15;var Ra=Og[J];if(J>3){var yn=R0[J];Ra+=Xs(n,g)&(1<<yn)-1,g+=yn}if(g>f){c&&on(0);break}l&&u(m+131072);var N=m+Tn;if(m<Ra){var H=p-Ra,Q=Math.min(Ra,N);for(H+m<0&&on(3);m<Q;++m)e[m]=s[H+m]}for(;m<N;++m)e[m]=e[m-Ra]}}t.l=_,t.p=wa,t.b=m,t.f=d,_&&(d=1,t.m=A,t.d=v,t.n=S)}while(!d);return m!=e.length&&i?w0(e,0,m):e.subarray(0,m)},Mg=new an(0),Fg=function(n,t){return((n[0]&15)!=8||n[0]>>4>7||(n[0]<<8|n[1])%31)&&on(6,"invalid zlib data"),(n[1]>>5&1)==+!t&&on(6,"invalid zlib data: "+(n[1]&32?"need":"unexpected")+" dictionary"),(n[1]>>3&4)+2};function jg(n,t){return Vg(n.subarray(Fg(n,t),-4),{i:2},t,t)}var yo=typeof TextDecoder<"u"&&new TextDecoder,Hg=0;try{yo.decode(Mg,{stream:!0}),Hg=1}catch{}var Ug=function(n){for(var t="",e=0;;){var s=n[e++],o=(s>127)+(s>223)+(s>239);if(e+o>n.length)return{s:t,r:w0(n,e-1)};o?o==3?(s=((s&15)<<18|(n[e++]&63)<<12|(n[e++]&63)<<6|n[e++]&63)-65536,t+=String.fromCharCode(55296|s>>10,56320|s&1023)):o&1?t+=String.fromCharCode((s&31)<<6|n[e++]&63):t+=String.fromCharCode((s&15)<<12|(n[e++]&63)<<6|n[e++]&63):t+=String.fromCharCode(s)}};function Ng(n,t){{for(var e=new an(n.length),s=0;s<n.length;++s)e[s]=n.charCodeAt(s);return e}for(var o=n.length,s=0;s<o;++s);}function Kg(n,t){var e;if(yo)return yo.decode(n);var s=Ug(n),o=s.s,e=s.r;return e.length&&on(8),o}const xi=n=>{const t=atob(n);return Kg(jg(Ng(t)))},nn=(n,t)=>{var s;const e=(s=(t==null?void 0:t._instance)||Je())==null?void 0:s.appContext.components;return e?n in e||un(n)in e||ye(un(n))in e:!1},V0=n=>typeof n<"u",Zs=n=>typeof n=="number",So=Array.isArray,Vt=(n,t)=>Da(n)&&n.startsWith(t),Wg=(n,t)=>Da(n)&&n.endsWith(t),xe=Object.entries,dn=Object.keys,rp=n=>{if(n){if(typeof n=="number")return new Date(n);const t=Date.parse(n.toString());if(!Number.isNaN(t))return new Date(t)}return null},Be=n=>Vt(n,"/"),Gg="http://.",zg=(n,t)=>{if(Be(n)||typeof t!="string")return Jn(n);const e=t.slice(0,t.lastIndexOf("/"));return Jn(new URL(`${e}/${encodeURI(n)}`,Gg).pathname)},M0=n=>new Promise(t=>setTimeout(t,n));function Nt(n){return cr()?(Vl(n),!0):!1}function ja(n){return typeof n=="function"?n():_t(n)}const Ce=typeof window<"u"&&typeof document<"u";typeof WorkerGlobalScope<"u"&&globalThis instanceof WorkerGlobalScope;const qg=Object.prototype.toString,Qg=n=>qg.call(n)==="[object Object]",ht=()=>{},Bi=$g();function $g(){var n,t;return Ce&&((n=window==null?void 0:window.navigator)==null?void 0:n.userAgent)&&(/iP(ad|hone|od)/.test(window.navigator.userAgent)||((t=window==null?void 0:window.navigator)==null?void 0:t.maxTouchPoints)>2&&/iPad|Macintosh/.test(window==null?void 0:window.navigator.userAgent))}function lp(n,t){function e(...s){return new Promise((o,p)=>{Promise.resolve(n(()=>t.apply(this,s),{fn:t,thisArg:this,args:s})).then(o).catch(p)})}return e}const F0=n=>n();function Xg(n,t={}){let e,s,o=ht;const p=l=>{clearTimeout(l),o(),o=ht};return l=>{const c=ja(n),u=ja(t.maxWait);return e&&p(e),c<=0||u!==void 0&&u<=0?(s&&(p(s),s=null),Promise.resolve(l())):new Promise((d,g)=>{o=t.rejectOnCancel?g:d,u&&!s&&(s=setTimeout(()=>{e&&p(e),s=null,d(l())},u)),e=setTimeout(()=>{s&&p(s),s=null,d(l())},c)})}}function Zg(...n){let t=0,e,s=!0,o=ht,p,i,l,c,u;!Fa(n[0])&&typeof n[0]=="object"?{delay:i,trailing:l=!0,leading:c=!0,rejectOnCancel:u=!1}=n[0]:[i,l=!0,c=!0,u=!1]=n;const d=()=>{e&&(clearTimeout(e),e=void 0,o(),o=ht)};return m=>{const _=ja(i),v=Date.now()-t,A=()=>p=m();return d(),_<=0?(t=Date.now(),A()):(v>_&&(c||!s)?(t=Date.now(),A()):l&&(p=new Promise((S,f)=>{o=u?f:S,e=setTimeout(()=>{t=Date.now(),s=!0,S(A()),d()},Math.max(0,_-v))})),!c&&!e&&(e=setTimeout(()=>s=!0,_)),s=!1,p)}}function Yg(n=F0){const t=X(!0);function e(){t.value=!1}function s(){t.value=!0}const o=(...p)=>{t.value&&n(...p)};return{isActive:Et(t),pause:e,resume:s,eventFilter:o}}function am(n){let t;function e(){return t||(t=n()),t}return e.reset=async()=>{const s=t;t=void 0,s&&await s},e}function j0(n){return Je()}function nm(...n){if(n.length!==1)return jt(...n);const t=n[0];return typeof t=="function"?Et(Jr(()=>({get:t,set:ht}))):X(t)}function tm(n,t=200,e={}){return lp(Xg(t,e),n)}function em(n,t=200,e=!1,s=!0,o=!1){return lp(Zg(t,e,s,o),n)}function sm(n,t,e={}){const{eventFilter:s=F0,...o}=e;return ua(n,lp(s,t),o)}function om(n,t,e={}){const{eventFilter:s,...o}=e,{eventFilter:p,pause:i,resume:l,isActive:c}=Yg(s);return{stop:sm(n,t,{...o,eventFilter:p}),pause:i,resume:l,isActive:c}}function Ts(n,t=!0,e){j0()?Ea(n,e):t?n():wn(n)}function pm(n,t){j0()&&Ht(n,t)}function im(n,t,e={}){const{immediate:s=!0}=e,o=X(!1);let p=null;function i(){p&&(clearTimeout(p),p=null)}function l(){o.value=!1,i()}function c(...u){i(),o.value=!0,p=setTimeout(()=>{o.value=!1,p=null,n(...u)},ja(t))}return s&&(o.value=!0,Ce&&c()),Nt(l),{isPending:Et(o),start:c,stop:l}}function ve(n=!1,t={}){const{truthyValue:e=!0,falsyValue:s=!1}=t,o=Fa(n),p=X(n);function i(l){if(arguments.length)return p.value=l,p.value;{const c=ja(e);return p.value=p.value===c?ja(s):c,p.value}}return o?i:[p,i]}function xn(n){var t;const e=ja(n);return(t=e==null?void 0:e.$el)!=null?t:e}const Cn=Ce?window:void 0,H0=Ce?window.document:void 0,U0=Ce?window.navigator:void 0;function Ca(...n){let t,e,s,o;if(typeof n[0]=="string"||Array.isArray(n[0])?([e,s,o]=n,t=Cn):[t,e,s,o]=n,!t)return ht;Array.isArray(e)||(e=[e]),Array.isArray(s)||(s=[s]);const p=[],i=()=>{p.forEach(d=>d()),p.length=0},l=(d,g,m,_)=>(d.addEventListener(g,m,_),()=>d.removeEventListener(g,m,_)),c=ua(()=>[xn(t),ja(o)],([d,g])=>{if(i(),!d)return;const m=Qg(g)?{...g}:g;p.push(...e.flatMap(_=>s.map(v=>l(d,_,v,m))))},{immediate:!0,flush:"post"}),u=()=>{c(),i()};return Nt(u),u}function rm(){const n=X(!1),t=Je();return t&&Ea(()=>{n.value=!0},t),n}function we(n){const t=rm();return I(()=>(t.value,!!n()))}function N0(n,t={}){const{window:e=Cn}=t,s=we(()=>e&&"matchMedia"in e&&typeof e.matchMedia=="function");let o;const p=X(!1),i=u=>{p.value=u.matches},l=()=>{o&&("removeEventListener"in o?o.removeEventListener("change",i):o.removeListener(i))},c=Cr(()=>{s.value&&(l(),o=e.matchMedia(ja(n)),"addEventListener"in o?o.addEventListener("change",i):o.addListener(i),p.value=o.matches)});return Nt(()=>{c(),l(),o=void 0}),p}function Ci(n,t={}){const{controls:e=!1,navigator:s=U0}=t,o=we(()=>s&&"permissions"in s);let p;const i=typeof n=="string"?{name:n}:n,l=X(),c=()=>{p&&(l.value=p.state)},u=am(async()=>{if(o.value){if(!p)try{p=await s.permissions.query(i),Ca(p,"change",c),c()}catch{l.value="prompt"}return p}});return u(),e?{state:l,isSupported:o,query:u}:l}function lm(n={}){const{navigator:t=U0,read:e=!1,source:s,copiedDuring:o=1500,legacy:p=!1}=n,i=we(()=>t&&"clipboard"in t),l=Ci("clipboard-read"),c=Ci("clipboard-write"),u=I(()=>i.value||p),d=X(""),g=X(!1),m=im(()=>g.value=!1,o);function _(){i.value&&f(l.value)?t.clipboard.readText().then(y=>{d.value=y}):d.value=S()}u.value&&e&&Ca(["copy","cut"],_);async function v(y=ja(s)){u.value&&y!=null&&(i.value&&f(c.value)?await t.clipboard.writeText(y):A(y),d.value=y,g.value=!0,m.start())}function A(y){const k=document.createElement("textarea");k.value=y??"",k.style.position="absolute",k.style.opacity="0",document.body.appendChild(k),k.select(),document.execCommand("copy"),k.remove()}function S(){var y,k,D;return(D=(k=(y=document==null?void 0:document.getSelection)==null?void 0:y.call(document))==null?void 0:k.toString())!=null?D:""}function f(y){return y==="granted"||y==="prompt"}return{isSupported:u,text:d,copied:g,copy:v}}const as=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},ns="__vueuse_ssr_handlers__",cm=um();function um(){return ns in as||(as[ns]=as[ns]||{}),as[ns]}function dm(n,t){return cm[n]||t}function gm(n){return n==null?"any":n instanceof Set?"set":n instanceof Map?"map":n instanceof Date?"date":typeof n=="boolean"?"boolean":typeof n=="string"?"string":typeof n=="object"?"object":Number.isNaN(n)?"any":"number"}const mm={boolean:{read:n=>n==="true",write:n=>String(n)},object:{read:n=>JSON.parse(n),write:n=>JSON.stringify(n)},number:{read:n=>Number.parseFloat(n),write:n=>String(n)},any:{read:n=>n,write:n=>String(n)},string:{read:n=>n,write:n=>String(n)},map:{read:n=>new Map(JSON.parse(n)),write:n=>JSON.stringify(Array.from(n.entries()))},set:{read:n=>new Set(JSON.parse(n)),write:n=>JSON.stringify(Array.from(n))},date:{read:n=>new Date(n),write:n=>n.toISOString()}},wi="vueuse-storage";function Kt(n,t,e,s={}){var o;const{flush:p="pre",deep:i=!0,listenToStorageChanges:l=!0,writeDefaults:c=!0,mergeDefaults:u=!1,shallow:d,window:g=Cn,eventFilter:m,onError:_=x=>{console.error(x)},initOnMounted:v}=s,A=(d?La:X)(typeof t=="function"?t():t);if(!e)try{e=dm("getDefaultStorage",()=>{var x;return(x=Cn)==null?void 0:x.localStorage})()}catch(x){_(x)}if(!e)return A;const S=ja(t),f=gm(S),y=(o=s.serializer)!=null?o:mm[f],{pause:k,resume:D}=om(A,()=>B(A.value),{flush:p,deep:i,eventFilter:m});g&&l&&Ts(()=>{Ca(g,"storage",O),Ca(g,wi,G),v&&O()}),v||O();function M(x,W){g&&g.dispatchEvent(new CustomEvent(wi,{detail:{key:n,oldValue:x,newValue:W,storageArea:e}}))}function B(x){try{const W=e.getItem(n);if(x==null)M(W,null),e.removeItem(n);else{const C=y.write(x);W!==C&&(e.setItem(n,C),M(W,C))}}catch(W){_(W)}}function L(x){const W=x?x.newValue:e.getItem(n);if(W==null)return c&&S!=null&&e.setItem(n,y.write(S)),S;if(!x&&u){const C=y.read(W);return typeof u=="function"?u(C,S):f==="object"&&!Array.isArray(C)?{...S,...C}:C}else return typeof W!="string"?W:y.read(W)}function O(x){if(!(x&&x.storageArea!==e)){if(x&&x.key==null){A.value=S;return}if(!(x&&x.key!==n)){k();try{(x==null?void 0:x.newValue)!==y.write(A.value)&&(A.value=L(x))}catch(W){_(W)}finally{x?wn(D):D()}}}}function G(x){O(x.detail)}return A}function _m(n){return N0("(prefers-color-scheme: dark)",n)}function hm(n,t,e={}){const{window:s=Cn,...o}=e;let p;const i=we(()=>s&&"ResizeObserver"in s),l=()=>{p&&(p.disconnect(),p=void 0)},c=I(()=>Array.isArray(n)?n.map(g=>xn(g)):[xn(n)]),u=ua(c,g=>{if(l(),i.value&&s){p=new ResizeObserver(t);for(const m of g)m&&p.observe(m,o)}},{immediate:!0,flush:"post"}),d=()=>{l(),u()};return Nt(d),{isSupported:i,stop:d}}function vm(n,t={width:0,height:0},e={}){const{window:s=Cn,box:o="content-box"}=e,p=I(()=>{var g,m;return(m=(g=xn(n))==null?void 0:g.namespaceURI)==null?void 0:m.includes("svg")}),i=X(t.width),l=X(t.height),{stop:c}=hm(n,([g])=>{const m=o==="border-box"?g.borderBoxSize:o==="content-box"?g.contentBoxSize:g.devicePixelContentBoxSize;if(s&&p.value){const _=xn(n);if(_){const v=s.getComputedStyle(_);i.value=Number.parseFloat(v.width),l.value=Number.parseFloat(v.height)}}else if(m){const _=Array.isArray(m)?m:[m];i.value=_.reduce((v,{inlineSize:A})=>v+A,0),l.value=_.reduce((v,{blockSize:A})=>v+A,0)}else i.value=g.contentRect.width,l.value=g.contentRect.height},e);Ts(()=>{const g=xn(n);g&&(i.value="offsetWidth"in g?g.offsetWidth:t.width,l.value="offsetHeight"in g?g.offsetHeight:t.height)});const u=ua(()=>xn(n),g=>{i.value=g?t.width:0,l.value=g?t.height:0});function d(){c(),u()}return{width:i,height:l,stop:d}}const Vi=["fullscreenchange","webkitfullscreenchange","webkitendfullscreen","mozfullscreenchange","MSFullscreenChange"];function cp(n,t={}){const{document:e=H0,autoExit:s=!1}=t,o=I(()=>{var f;return(f=xn(n))!=null?f:e==null?void 0:e.querySelector("html")}),p=X(!1),i=I(()=>["requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","webkitEnterFullScreen","webkitRequestFullScreen","mozRequestFullScreen","msRequestFullscreen"].find(f=>e&&f in e||o.value&&f in o.value)),l=I(()=>["exitFullscreen","webkitExitFullscreen","webkitExitFullScreen","webkitCancelFullScreen","mozCancelFullScreen","msExitFullscreen"].find(f=>e&&f in e||o.value&&f in o.value)),c=I(()=>["fullScreen","webkitIsFullScreen","webkitDisplayingFullscreen","mozFullScreen","msFullscreenElement"].find(f=>e&&f in e||o.value&&f in o.value)),u=["fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement"].find(f=>e&&f in e),d=we(()=>o.value&&e&&i.value!==void 0&&l.value!==void 0&&c.value!==void 0),g=()=>u?(e==null?void 0:e[u])===o.value:!1,m=()=>{if(c.value){if(e&&e[c.value]!=null)return e[c.value];{const f=o.value;if((f==null?void 0:f[c.value])!=null)return!!f[c.value]}}return!1};async function _(){if(!(!d.value||!p.value)){if(l.value)if((e==null?void 0:e[l.value])!=null)await e[l.value]();else{const f=o.value;(f==null?void 0:f[l.value])!=null&&await f[l.value]()}p.value=!1}}async function v(){if(!d.value||p.value)return;m()&&await _();const f=o.value;i.value&&(f==null?void 0:f[i.value])!=null&&(await f[i.value](),p.value=!0)}async function A(){await(p.value?_():v())}const S=()=>{const f=m();(!f||f&&g())&&(p.value=f)};return Ca(e,Vi,S,!1),Ca(()=>xn(o),Vi,S,!1),s&&Nt(_),{isSupported:d,isFullscreen:p,enter:v,exit:_,toggle:A}}function Ys(n){return typeof Window<"u"&&n instanceof Window?n.document.documentElement:typeof Document<"u"&&n instanceof Document?n.documentElement:n}function ao(n,t=ht,e={}){const{immediate:s=!0,manual:o=!1,type:p="text/javascript",async:i=!0,crossOrigin:l,referrerPolicy:c,noModule:u,defer:d,document:g=H0,attrs:m={}}=e,_=X(null);let v=null;const A=y=>new Promise((k,D)=>{const M=O=>(_.value=O,k(O),O);if(!g){k(!1);return}let B=!1,L=g.querySelector(`script[src="${ja(n)}"]`);L?L.hasAttribute("data-loaded")&&M(L):(L=g.createElement("script"),L.type=p,L.async=i,L.src=ja(n),d&&(L.defer=d),l&&(L.crossOrigin=l),u&&(L.noModule=u),c&&(L.referrerPolicy=c),Object.entries(m).forEach(([O,G])=>L==null?void 0:L.setAttribute(O,G)),B=!0),L.addEventListener("error",O=>D(O)),L.addEventListener("abort",O=>D(O)),L.addEventListener("load",()=>{L.setAttribute("data-loaded","true"),t(L),M(L)}),B&&(L=g.head.appendChild(L)),y||M(L)}),S=(y=!0)=>(v||(v=A(y)),v),f=()=>{if(!g)return;v=null,_.value&&(_.value=null);const y=g.querySelector(`script[src="${ja(n)}"]`);y&&g.head.removeChild(y)};return s&&!o&&Ts(S),o||pm(f),{scriptTag:_,load:S,unload:f}}function K0(n){const t=window.getComputedStyle(n);if(t.overflowX==="scroll"||t.overflowY==="scroll"||t.overflowX==="auto"&&n.clientWidth<n.scrollWidth||t.overflowY==="auto"&&n.clientHeight<n.scrollHeight)return!0;{const e=n.parentNode;return!e||e.tagName==="BODY"?!1:K0(e)}}function Em(n){const t=n||window.event,e=t.target;return K0(e)?!1:t.touches.length>1?!0:(t.preventDefault&&t.preventDefault(),!1)}const ts=new WeakMap;function W0(n,t=!1){const e=X(t);let s=null;ua(nm(n),i=>{const l=Ys(ja(i));if(l){const c=l;ts.get(c)||ts.set(c,c.style.overflow),e.value&&(c.style.overflow="hidden")}},{immediate:!0});const o=()=>{const i=Ys(ja(n));!i||e.value||(Bi&&(s=Ca(i,"touchmove",l=>{Em(l)},{passive:!1})),i.style.overflow="hidden",e.value=!0)},p=()=>{var i;const l=Ys(ja(n));!l||!e.value||(Bi&&(s==null||s()),l.style.overflow=(i=ts.get(l))!=null?i:"",ts.delete(l),e.value=!1)};return Nt(p),I({get(){return e.value},set(i){i?o():p()}})}function G0(n,t,e={}){const{window:s=Cn}=e;return Kt(n,t,s==null?void 0:s.sessionStorage,e)}function km(n={}){const{window:t=Cn,behavior:e="auto"}=n;if(!t)return{x:X(0),y:X(0)};const s=X(t.scrollX),o=X(t.scrollY),p=I({get(){return s.value},set(l){scrollTo({left:l,behavior:e})}}),i=I({get(){return o.value},set(l){scrollTo({top:l,behavior:e})}});return Ca(t,"scroll",()=>{s.value=t.scrollX,o.value=t.scrollY},{capture:!1,passive:!0}),{x:p,y:i}}function Am(n={}){const{window:t=Cn,initialWidth:e=Number.POSITIVE_INFINITY,initialHeight:s=Number.POSITIVE_INFINITY,listenOrientation:o=!0,includeScrollbar:p=!0}=n,i=X(e),l=X(s),c=()=>{t&&(p?(i.value=t.innerWidth,l.value=t.innerHeight):(i.value=t.document.documentElement.clientWidth,l.value=t.document.documentElement.clientHeight))};if(c(),Ts(c),Ca("resize",c,{passive:!0}),o){const u=N0("(orientation: portrait)");ua(u,()=>c())}return{width:i,height:l}}var fm=j({name:"FontIcon",props:{icon:{type:String,default:""},color:{type:String,default:""},size:{type:[String,Number],default:""}},setup(n){const t=I(()=>{const s=["font-icon icon"],o=`fas fa-${n.icon}`;return s.push("fa-fw fa-sm"),s.push(n.icon.includes(" ")?n.icon:o),s}),e=I(()=>{const s={};return n.color&&(s.color=n.color),n.size&&(s["font-size"]=Number.isNaN(Number(n.size))?n.size:`${n.size}px`),dn(s).length?s:null});return()=>n.icon?r("span",{key:n.icon,class:t.value,style:e.value}):null}});const z0=({type:n="info",text:t="",vertical:e,color:s},{slots:o})=>{var p;return r("span",{class:["vp-badge",n,{diy:s}],style:{verticalAlign:e??!1,backgroundColor:s??!1}},((p=o.default)==null?void 0:p.call(o))??t)};z0.displayName="Badge";const q0=({title:n,desc:t="",logo:e,background:s,color:o,link:p})=>{const i=[e?r("img",{class:"vp-card-logo",src:ha(e),loading:"lazy","no-view":""}):null,r("div",{class:"vp-card-content"},[r("div",{class:"vp-card-title",innerHTML:n}),r("hr"),r("div",{class:"vp-card-desc",innerHTML:t})])],l={};return s&&(l.background=s),o&&(l.color=o),p?Ss(p)?r("a",{class:"vp-card",href:p,target:"_blank",style:l},i):r(Pa,{to:p,class:"vp-card",style:l},()=>i):r("div",{class:"vp-card",style:l},i)};q0.displayName="VPCard";const Im=Pn({enhance:({app:n})=>{nn("FontIcon")||n.component("FontIcon",fm),nn("Badge")||n.component("Badge",z0),nn("VPCard")||n.component("VPCard",q0)},setup:()=>{ao("https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/js/brands.min.js",()=>{},{attrs:{"data-auto-replace-svg":"nest"}}),ao("https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/js/solid.min.js",()=>{},{attrs:{"data-auto-replace-svg":"nest"}}),ao("https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/js/fontawesome.min.js",()=>{},{attrs:{"data-auto-replace-svg":"nest"}})},rootComponents:[]}),Mi=async(n,t)=>{const{path:e,query:s}=n.currentRoute.value,{scrollBehavior:o}=n.options;n.options.scrollBehavior=void 0,await n.replace({path:e,query:s,hash:t}),n.options.scrollBehavior=o},ym=({headerLinkSelector:n,headerAnchorSelector:t,delay:e,offset:s=5})=>{const o=kt();Ca("scroll",tm(()=>{var v,A;const i=Math.max(window.scrollY,document.documentElement.scrollTop,document.body.scrollTop);if(Math.abs(i-0)<s){Mi(o,"");return}const c=window.innerHeight+i,u=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),d=Math.abs(u-c)<s,g=Array.from(document.querySelectorAll(n)),_=Array.from(document.querySelectorAll(t)).filter(S=>g.some(f=>f.hash===S.hash));for(let S=0;S<_.length;S++){const f=_[S],y=_[S+1],k=i>=(((v=f.parentElement)==null?void 0:v.offsetTop)??0)-s,D=!y||i<(((A=y.parentElement)==null?void 0:A.offsetTop)??0)-s;if(!(k&&D))continue;const B=decodeURIComponent(o.currentRoute.value.hash),L=decodeURIComponent(f.hash);if(B===L)return;if(d){for(let O=S+1;O<_.length;O++)if(B===decodeURIComponent(_[O].hash))return}Mi(o,L);return}},e))},Sm=".vp-sidebar-link, .vp-toc-link",bm=".header-anchor",Dm=200,Jm=5,Pm=Pn({setup(){ym({headerLinkSelector:Sm,headerAnchorSelector:bm,delay:Dm,offset:Jm})}});let Q0=n=>Da(n.title)?{title:n.title}:null;const $0=Symbol(""),Tm=n=>{Q0=n},Lm=()=>ba($0),Rm=n=>{n.provide($0,Q0)};var Om={"/":{title:"目录",empty:"暂无目录"}};const xm=j({name:"Catalog",props:{base:{type:String,default:""},level:{type:Number,default:3},index:Boolean,hideHeading:Boolean},setup(n){const t=Lm(),e=Re(Om),s=fa(),o=Ig(),p=J0(),l=La(xe(o.value).map(([u,{meta:d}])=>{const g=t(d);if(!g)return null;const m=u.split("/").length;return{level:Wg(u,"/")?m-2:m-1,base:u.replace(/\/[^/]+\/?$/,"/"),path:u,...g}}).filter(u=>Ut(u)&&Da(u.title))),c=I(()=>{const u=n.base?id(m0(n.base)):s.value.path.replace(/\/[^/]+$/,"/"),d=u.split("/").length-2,g=[];return l.value.filter(({level:m,path:_})=>{if(!Vt(_,u)||_===u)return!1;if(u==="/"){const v=dn(p.value.locales).filter(A=>A!=="/");if(_==="/404.html"||v.some(A=>Vt(_,A)))return!1}return m-d<=n.level}).sort(({title:m,level:_,order:v},{title:A,level:S,order:f})=>{const y=_-S;return y||(Zs(v)?Zs(f)?v>0?f>0?v-f:-1:f<0?v-f:1:v:Zs(f)?f:m.localeCompare(A))}).forEach(m=>{var A;const{base:_,level:v}=m;switch(v-d){case 1:{g.push(m);break}case 2:{const S=g.find(f=>f.path===_);S&&(S.children??(S.children=[])).push(m);break}default:{const S=g.find(f=>f.path===_.replace(/\/[^/]+\/$/,"/"));if(S){const f=(A=S.children)==null?void 0:A.find(y=>y.path===_);f&&(f.children??(f.children=[])).push(m)}}}}),g});return()=>{const u=c.value.some(d=>d.children);return r("div",{class:["vp-catalog-wrapper",{index:n.index}]},[n.hideHeading?null:r("h2",{class:"vp-catalog-main-title"},e.value.title),c.value.length?r(n.index?"ol":"ul",{class:["vp-catalogs",{deep:u}]},c.value.map(({children:d=[],title:g,path:m,content:_})=>{const v=r(Pa,{class:"vp-catalog-title",to:m},()=>_?r(_):g);return r("li",{class:"vp-catalog"},u?[r("h3",{id:g,class:["vp-catalog-child-title",{"has-children":d.length}]},[r("a",{href:`#${g}`,class:"vp-catalog-header-anchor","aria-hidden":!0},"#"),v]),d.length?r(n.index?"ol":"ul",{class:"vp-child-catalogs"},d.map(({children:A=[],content:S,path:f,title:y})=>r("li",{class:"vp-child-catalog"},[r("div",{class:["vp-catalog-sub-title",{"has-children":A.length}]},[r("a",{href:`#${y}`,class:"vp-catalog-header-anchor"},"#"),r(Pa,{class:"vp-catalog-title",to:f},()=>S?r(S):y)]),A.length?r(n.index?"ol":"div",{class:n.index?"vp-sub-catalogs":"vp-sub-catalogs-wrapper"},A.map(({content:k,path:D,title:M})=>n.index?r("li",{class:"vp-sub-catalog"},r(Pa,{to:D},()=>k?r(k):M)):r(Pa,{class:"vp-sub-catalog-link",to:D},()=>k?r(k):M))):null]))):null]:r("div",{class:"vp-catalog-child-title"},v))})):r("p",{class:"vp-empty-catalog"},e.value.empty)])}}}),Bm=Pn({enhance:({app:n})=>{Rm(n),nn("Catalog",n)||n.component("Catalog",xm)}});var Cm={"/":{backToTop:"返回顶部"}};const wm=j({name:"BackToTop",setup(){const n=da(),t=Re(Cm),e=La(),{height:s}=vm(e),{height:o}=Am(),{y:p}=km(),i=I(()=>n.value.backToTop!==!1&&p.value>100),l=I(()=>p.value/(s.value-o.value)*100);return Ea(()=>{e.value=document.body}),()=>r(at,{name:"back-to-top"},()=>i.value?r("button",{type:"button",class:"vp-back-to-top-button","aria-label":t.value.backToTop,onClick:()=>{window.scrollTo({top:0,behavior:"smooth"})}},[r("span",{class:"vp-scroll-progress",role:"progressbar","aria-labelledby":"loadinglabel","aria-valuenow":l.value},r("svg",r("circle",{cx:"26",cy:"26",r:"24",fill:"none",stroke:"currentColor","stroke-width":"4","stroke-dasharray":`${Math.PI*l.value*.48} ${Math.PI*(100-l.value)*.48}`}))),r("div",{class:"back-to-top-icon"})]):null)}}),Vm=Pn({rootComponents:[wm]});/**
 * NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT
 */const ra={settings:{minimum:.08,easing:"ease",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,barSelector:'[role="bar"]',parent:"body",template:'<div class="bar" role="bar"></div>'},status:null,set:n=>{const t=ra.isStarted();n=no(n,ra.settings.minimum,1),ra.status=n===1?null:n;const e=ra.render(!t),s=e.querySelector(ra.settings.barSelector),o=ra.settings.speed,p=ra.settings.easing;return e.offsetWidth,Mm(i=>{es(s,{transform:"translate3d("+Fi(n)+"%,0,0)",transition:"all "+o+"ms "+p}),n===1?(es(e,{transition:"none",opacity:"1"}),e.offsetWidth,setTimeout(function(){es(e,{transition:"all "+o+"ms linear",opacity:"0"}),setTimeout(function(){ra.remove(),i()},o)},o)):setTimeout(()=>i(),o)}),ra},isStarted:()=>typeof ra.status=="number",start:()=>{ra.status||ra.set(0);const n=()=>{setTimeout(()=>{ra.status&&(ra.trickle(),n())},ra.settings.trickleSpeed)};return ra.settings.trickle&&n(),ra},done:n=>!n&&!ra.status?ra:ra.inc(.3+.5*Math.random()).set(1),inc:n=>{let t=ra.status;return t?(typeof n!="number"&&(n=(1-t)*no(Math.random()*t,.1,.95)),t=no(t+n,0,.994),ra.set(t)):ra.start()},trickle:()=>ra.inc(Math.random()*ra.settings.trickleRate),render:n=>{if(ra.isRendered())return document.getElementById("nprogress");ji(document.documentElement,"nprogress-busy");const t=document.createElement("div");t.id="nprogress",t.innerHTML=ra.settings.template;const e=t.querySelector(ra.settings.barSelector),s=n?"-100":Fi(ra.status||0),o=document.querySelector(ra.settings.parent);return es(e,{transition:"all 0 linear",transform:"translate3d("+s+"%,0,0)"}),o!==document.body&&ji(o,"nprogress-custom-parent"),o==null||o.appendChild(t),t},remove:()=>{Hi(document.documentElement,"nprogress-busy"),Hi(document.querySelector(ra.settings.parent),"nprogress-custom-parent");const n=document.getElementById("nprogress");n&&Fm(n)},isRendered:()=>!!document.getElementById("nprogress")},no=(n,t,e)=>n<t?t:n>e?e:n,Fi=n=>(-1+n)*100,Mm=function(){const n=[];function t(){const e=n.shift();e&&e(t)}return function(e){n.push(e),n.length===1&&t()}}(),es=function(){const n=["Webkit","O","Moz","ms"],t={};function e(i){return i.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,function(l,c){return c.toUpperCase()})}function s(i){const l=document.body.style;if(i in l)return i;let c=n.length;const u=i.charAt(0).toUpperCase()+i.slice(1);let d;for(;c--;)if(d=n[c]+u,d in l)return d;return i}function o(i){return i=e(i),t[i]??(t[i]=s(i))}function p(i,l,c){l=o(l),i.style[l]=c}return function(i,l){for(const c in l){const u=l[c];u!==void 0&&Object.prototype.hasOwnProperty.call(l,c)&&p(i,c,u)}}}(),X0=(n,t)=>(typeof n=="string"?n:up(n)).indexOf(" "+t+" ")>=0,ji=(n,t)=>{const e=up(n),s=e+t;X0(e,t)||(n.className=s.substring(1))},Hi=(n,t)=>{const e=up(n);if(!X0(n,t))return;const s=e.replace(" "+t+" "," ");n.className=s.substring(1,s.length-1)},up=n=>(" "+(n.className||"")+" ").replace(/\s+/gi," "),Fm=n=>{n&&n.parentNode&&n.parentNode.removeChild(n)},jm=()=>{Ea(()=>{const n=kt(),t=new Set;t.add(n.currentRoute.value.path),n.beforeEach(e=>{t.has(e.path)||ra.start()}),n.afterEach(e=>{t.add(e.path),ra.done()})})},Hm=Pn({setup(){jm()}}),Um=JSON.parse('{"encrypt":{"config":{"/demo/encrypt.html":["$2a$10$vwu/.gu1OoRPLg8KxZzFd.UnukrYU8O7XuYU3/85CLkyFRuzcFr3y"]}},"author":{"name":"Kahen","url":"https://www.kahen.xyz"},"logo":"logo.svg","repo":"https://www.kahen.xyz","docsDir":"src","footer":"粤ICP备2024249047号-2","displayFooter":true,"blog":{"description":"一个后端开发者","intro":"/intro.html","medias":{"Email":"mailto:free-forest@outlook.com"}},"locales":{"/":{"lang":"zh-CN","navbarLocales":{"langName":"简体中文","selectLangAriaLabel":"选择语言"},"metaLocales":{"author":"作者","date":"写作日期","origin":"原创","views":"访问量","category":"分类","tag":"标签","readingTime":"阅读时间","words":"字数","toc":"此页内容","prev":"上一页","next":"下一页","lastUpdated":"上次编辑于","contributors":"贡献者","editLink":"在 GitHub 上编辑此页","print":"打印"},"blogLocales":{"article":"文章","articleList":"文章列表","category":"分类","tag":"标签","timeline":"时间轴","timelineTitle":"昨日不在","all":"全部","intro":"个人介绍","star":"星标","empty":"$text 为空"},"paginationLocales":{"prev":"上一页","next":"下一页","navigate":"跳转到","action":"前往","errorText":"请输入 1 到 $page 之前的页码！"},"outlookLocales":{"themeColor":"主题色","darkmode":"外观","fullscreen":"全屏"},"encryptLocales":{"iconLabel":"文章已加密","placeholder":"输入密码","remember":"记住密码","errorHint":"请输入正确的密码"},"routeLocales":{"skipToContent":"跳至主要內容","notFoundTitle":"页面不存在","notFoundMsg":["这里什么也没有","我们是怎么来到这儿的？","这 是 四 零 四 !","看起来你访问了一个失效的链接"],"back":"返回上一页","home":"带我回家","openInNewWindow":"Open in new window"},"navbar":["/",{"text":"Baeldung","icon":"book","prefix":"/posts/baeldung/","link":"/posts/baeldung/"},{"text":"个人博客","icon":"pen-to-square","prefix":"/posts/articles/","link":"/posts/articles/"}],"sidebar":{"/":["",{"text":"BaelDung","icon":"book","prefix":"posts/baeldung/","children":"structure"},{"text":"个人博客","icon":"book","prefix":"posts/articles/","children":"structure"}]}}}}'),Nm=X(Um),Z0=()=>Nm,Y0=Symbol(""),Km=()=>{const n=ba(Y0);if(!n)throw new Error("useThemeLocaleData() is called without provider.");return n},Wm=(n,t)=>{const{locales:e,...s}=n;return{...s,...e==null?void 0:e[t]}},Gm=Pn({enhance({app:n}){const t=Z0(),e=n._context.provides[ip],s=I(()=>Wm(t.value,e.routeLocale.value));n.provide(Y0,s),Object.defineProperties(n.config.globalProperties,{$theme:{get(){return t.value}},$themeLocale:{get(){return s.value}}})}}),zm=/\b(?:Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini)/i,qm=()=>typeof window<"u"&&window.navigator&&"userAgent"in window.navigator&&zm.test(navigator.userAgent),Qm=({delay:n=500,duration:t=2e3,locales:e,selector:s,showInMobile:o})=>{const{copy:p,copied:i}=lm({legacy:!0,copiedDuring:t}),l=Re(e),c=fa(),u=m=>{if(!m.hasAttribute("copy-code-registered")){const _=document.createElement("button");_.type="button",_.classList.add("vp-copy-code-button"),_.innerHTML='<div class="vp-copy-icon" />',_.setAttribute("aria-label",l.value.copy),_.setAttribute("data-copied",l.value.copied),m.parentElement&&m.parentElement.insertBefore(_,m),m.setAttribute("copy-code-registered","")}},d=()=>{wn().then(()=>M0(n)).then(()=>{s.forEach(m=>{document.querySelectorAll(m).forEach(u)})})},g=(m,_,v)=>{let{innerText:A=""}=_;/language-(shellscript|shell|bash|sh|zsh)/.test(m.classList.toString())&&(A=A.replace(/^ *(\$|>) /gm,"")),p(A).then(()=>{v.classList.add("copied"),ua(i,()=>{v.classList.remove("copied"),v.blur()},{once:!0})})};Ea(()=>{const m=!qm()||o;m&&d(),Ca("click",_=>{const v=_.target;if(v.matches('div[class*="language-"] > button.copy')){const A=v.parentElement,S=v.nextElementSibling;S&&g(A,S,v)}else if(v.matches('div[class*="language-"] div.vp-copy-icon')){const A=v.parentElement,S=A.parentElement,f=A.nextElementSibling;f&&g(S,f,A)}}),ua(()=>c.value.path,()=>{m&&d()})})};var $m={"/":{copy:"复制代码",copied:"已复制"}},Xm=['.theme-hope-content div[class*="language-"] pre'];const Zm=Pn({setup:()=>{Qm({selector:Xm,locales:$m,duration:2e3,delay:500,showInMobile:!1})}}),ss=Kt("VUEPRESS_CODE_TAB_STORE",{});var Ym=j({name:"CodeTabs",props:{active:{type:Number,default:0},data:{type:Array,required:!0},id:{type:String,required:!0},tabId:{type:String,default:""}},slots:Object,setup(n,{slots:t}){const e=X(n.active),s=La([]),o=()=>{n.tabId&&(ss.value[n.tabId]=n.data[e.value].id)},p=(u=e.value)=>{e.value=u<s.value.length-1?u+1:0,s.value[e.value].focus()},i=(u=e.value)=>{e.value=u>0?u-1:s.value.length-1,s.value[e.value].focus()},l=(u,d)=>{u.key===" "||u.key==="Enter"?(u.preventDefault(),e.value=d):u.key==="ArrowRight"?(u.preventDefault(),p()):u.key==="ArrowLeft"&&(u.preventDefault(),i()),n.tabId&&(ss.value[n.tabId]=n.data[e.value].id)},c=()=>{if(n.tabId){const u=n.data.findIndex(({id:d})=>ss.value[n.tabId]===d);if(u!==-1)return u}return n.active};return Ea(()=>{e.value=c(),ua(()=>ss.value[n.tabId],(u,d)=>{if(n.tabId&&u!==d){const g=n.data.findIndex(({id:m})=>m===u);g!==-1&&(e.value=g)}})}),()=>n.data.length?r("div",{class:"vp-code-tabs"},[r("div",{class:"vp-code-tabs-nav",role:"tablist"},n.data.map(({id:u},d)=>{const g=d===e.value;return r("button",{type:"button",ref:m=>{m&&(s.value[d]=m)},class:["vp-code-tab-nav",{active:g}],role:"tab","aria-controls":`codetab-${n.id}-${d}`,"aria-selected":g,onClick:()=>{e.value=d,o()},onKeydown:m=>l(m,d)},t[`title${d}`]({value:u,isActive:g}))})),n.data.map(({id:u},d)=>{const g=d===e.value;return r("div",{class:["vp-code-tab",{active:g}],id:`codetab-${n.id}-${d}`,role:"tabpanel","aria-expanded":g},[r("div",{class:"vp-code-tab-title"},t[`title${d}`]({value:u,isActive:g})),t[`tab${d}`]({value:u,isActive:g})])})]):null}});const a2=({active:n=!1},{slots:t})=>{var e;return r("div",{class:["code-group-item",{active:n}],"aria-selected":n},(e=t.default)==null?void 0:e.call(t))};a2.displayName="CodeGroupItem";const a_=j({name:"CodeGroup",slots:Object,setup(n,{slots:t}){const e=X(-1),s=La([]),o=(l=e.value)=>{e.value=l<s.value.length-1?l+1:0,s.value[e.value].focus()},p=(l=e.value)=>{e.value=l>0?l-1:s.value.length-1,s.value[e.value].focus()},i=(l,c)=>{l.key===" "||l.key==="Enter"?(l.preventDefault(),e.value=c):l.key==="ArrowRight"?(l.preventDefault(),o(c)):l.key==="ArrowLeft"&&(l.preventDefault(),p(c))};return()=>{var c;const l=(((c=t.default)==null?void 0:c.call(t))||[]).filter(u=>u.type.name==="CodeGroupItem").map(u=>(u.props===null&&(u.props={}),u));return l.length===0?null:(e.value<0||e.value>l.length-1?(e.value=l.findIndex(u=>"active"in u.props),e.value===-1&&(e.value=0)):l.forEach((u,d)=>{u.props.active=d===e.value}),r("div",{class:"code-group"},[r("div",{class:"code-group-nav"},l.map((u,d)=>{const g=d===e.value;return r("button",{type:"button",ref:m=>{m&&(s.value[d]=m)},class:["code-group-nav-tab",{active:g}],"aria-pressed":g,"aria-expanded":g,onClick:()=>{e.value=d},onKeydown:m=>i(m,d)},u.props.title)})),l]))}}}),ga=({name:n="",color:t="currentColor",ariaLabel:e},{attrs:s,slots:o})=>{var p;return r("svg",{xmlns:"http://www.w3.org/2000/svg",class:["icon",`${n}-icon`],viewBox:"0 0 1024 1024",fill:t,"aria-label":e??`${n} icon`,...s},(p=o.default)==null?void 0:p.call(o))};ga.displayName="IconBase";const n2=({size:n=48,stroke:t=4,wrapper:e=!0,height:s=2*n})=>{const o=r("svg",{xmlns:"http://www.w3.org/2000/svg",width:n,height:n,preserveAspectRatio:"xMidYMid",viewBox:"25 25 50 50"},[r("animateTransform",{attributeName:"transform",type:"rotate",dur:"2s",keyTimes:"0;1",repeatCount:"indefinite",values:"0;360"}),r("circle",{cx:"50",cy:"50",r:"20",fill:"none",stroke:"currentColor","stroke-width":t,"stroke-linecap":"round"},[r("animate",{attributeName:"stroke-dasharray",dur:"1.5s",keyTimes:"0;0.5;1",repeatCount:"indefinite",values:"1,200;90,200;1,200"}),r("animate",{attributeName:"stroke-dashoffset",dur:"1.5s",keyTimes:"0;0.5;1",repeatCount:"indefinite",values:"0;-35px;-125px"})])]);return e?r("div",{class:"loading-icon-wrapper",style:`display:flex;align-items:center;justify-content:center;height:${s}px`},o):o};n2.displayName="LoadingIcon";const Ls=(n,{slots:t})=>{var e;return(e=t.default)==null?void 0:e.call(t)},n_=n=>et(n)?n:`https://github.com/${n}`,dp=(n="")=>!et(n)||/github\.com/.test(n)?"GitHub":/bitbucket\.org/.test(n)?"Bitbucket":/gitlab\.com/.test(n)?"GitLab":/gitee\.com/.test(n)?"Gitee":null,t2=()=>r(ga,{name:"github"},()=>r("path",{d:"M511.957 21.333C241.024 21.333 21.333 240.981 21.333 512c0 216.832 140.544 400.725 335.574 465.664 24.49 4.395 32.256-10.07 32.256-23.083 0-11.69.256-44.245 0-85.205-136.448 29.61-164.736-64.64-164.736-64.64-22.315-56.704-54.4-71.765-54.4-71.765-44.587-30.464 3.285-29.824 3.285-29.824 49.195 3.413 75.179 50.517 75.179 50.517 43.776 75.008 114.816 53.333 142.762 40.79 4.523-31.66 17.152-53.377 31.19-65.537-108.971-12.458-223.488-54.485-223.488-242.602 0-53.547 19.114-97.323 50.517-131.67-5.035-12.33-21.93-62.293 4.779-129.834 0 0 41.258-13.184 134.912 50.346a469.803 469.803 0 0 1 122.88-16.554c41.642.213 83.626 5.632 122.88 16.554 93.653-63.488 134.784-50.346 134.784-50.346 26.752 67.541 9.898 117.504 4.864 129.834 31.402 34.347 50.474 78.123 50.474 131.67 0 188.586-114.73 230.016-224.042 242.09 17.578 15.232 33.578 44.672 33.578 90.454v135.85c0 13.142 7.936 27.606 32.854 22.87C862.25 912.597 1002.667 728.747 1002.667 512c0-271.019-219.648-490.667-490.71-490.667z"}));t2.displayName="GitHubIcon";const e2=()=>r(ga,{name:"gitee"},()=>r("path",{d:"M512 992C246.92 992 32 777.08 32 512S246.92 32 512 32s480 214.92 480 480-214.92 480-480 480zm242.97-533.34H482.39a23.7 23.7 0 0 0-23.7 23.7l-.03 59.28c0 13.08 10.59 23.7 23.7 23.7h165.96a23.7 23.7 0 0 1 23.7 23.7v11.85a71.1 71.1 0 0 1-71.1 71.1H375.71a23.7 23.7 0 0 1-23.7-23.7V423.11a71.1 71.1 0 0 1 71.1-71.1h331.8a23.7 23.7 0 0 0 23.7-23.7l.06-59.25a23.73 23.73 0 0 0-23.7-23.73H423.11a177.78 177.78 0 0 0-177.78 177.75v331.83c0 13.08 10.62 23.7 23.7 23.7h349.62a159.99 159.99 0 0 0 159.99-159.99V482.33a23.7 23.7 0 0 0-23.7-23.7z"}));e2.displayName="GiteeIcon";const s2=()=>r(ga,{name:"bitbucket"},()=>r("path",{d:"M575.256 490.862c6.29 47.981-52.005 85.723-92.563 61.147-45.714-20.004-45.714-92.562-1.133-113.152 38.29-23.442 93.696 7.424 93.696 52.005zm63.451-11.996c-10.276-81.152-102.29-134.839-177.152-101.156-47.433 21.138-79.433 71.424-77.129 124.562 2.853 69.705 69.157 126.866 138.862 120.576S647.3 548.571 638.708 478.83zm136.558-309.723c-25.161-33.134-67.986-38.839-105.728-45.13-106.862-17.151-216.576-17.7-323.438 1.134-35.438 5.706-75.447 11.996-97.719 43.996 36.572 34.304 88.576 39.424 135.424 45.129 84.553 10.862 171.447 11.447 256 .585 47.433-5.705 99.987-10.276 135.424-45.714zm32.585 591.433c-16.018 55.99-6.839 131.438-66.304 163.986-102.29 56.576-226.304 62.867-338.87 42.862-59.43-10.862-129.135-29.696-161.72-85.723-14.3-54.858-23.442-110.848-32.585-166.84l3.438-9.142 10.276-5.157c170.277 112.567 408.576 112.567 579.438 0 26.844 8.01 6.84 40.558 6.29 60.014zm103.424-549.157c-19.42 125.148-41.728 249.71-63.415 374.272-6.29 36.572-41.728 57.162-71.424 72.558-106.862 53.724-231.424 62.866-348.562 50.286-79.433-8.558-160.585-29.696-225.134-79.433-30.28-23.443-30.28-63.415-35.986-97.134-20.005-117.138-42.862-234.277-57.161-352.585 6.839-51.42 64.585-73.728 107.447-89.71 57.16-21.138 118.272-30.866 178.87-36.571 129.134-12.58 261.157-8.01 386.304 28.562 44.581 13.13 92.563 31.415 122.844 69.705 13.714 17.7 9.143 40.01 6.29 60.014z"}));s2.displayName="BitbucketIcon";const o2=()=>r(ga,{name:"source"},()=>r("path",{d:"M601.92 475.2c0 76.428-8.91 83.754-28.512 99.594-14.652 11.88-43.956 14.058-78.012 16.434-18.81 1.386-40.392 2.97-62.172 6.534-18.612 2.97-36.432 9.306-53.064 17.424V299.772c37.818-21.978 63.36-62.766 63.36-109.692 0-69.894-56.826-126.72-126.72-126.72S190.08 120.186 190.08 190.08c0 46.926 25.542 87.714 63.36 109.692v414.216c-37.818 21.978-63.36 62.766-63.36 109.692 0 69.894 56.826 126.72 126.72 126.72s126.72-56.826 126.72-126.72c0-31.086-11.286-59.598-29.7-81.576 13.266-9.504 27.522-17.226 39.996-19.206 16.038-2.574 32.868-3.762 50.688-5.148 48.312-3.366 103.158-7.326 148.896-44.55 61.182-49.698 74.25-103.158 75.24-187.902V475.2h-126.72zM316.8 126.72c34.848 0 63.36 28.512 63.36 63.36s-28.512 63.36-63.36 63.36-63.36-28.512-63.36-63.36 28.512-63.36 63.36-63.36zm0 760.32c-34.848 0-63.36-28.512-63.36-63.36s28.512-63.36 63.36-63.36 63.36 28.512 63.36 63.36-28.512 63.36-63.36 63.36zM823.68 158.4h-95.04V63.36h-126.72v95.04h-95.04v126.72h95.04v95.04h126.72v-95.04h95.04z"}));o2.displayName="SourceIcon";const t_=({link:n,type:t=dp(n??"")})=>{if(!t)return null;const e=t.toLowerCase();return r(e==="bitbucket"?s2:e==="github"?t2:e==="gitlab"?"GitLab":e==="gitee"?e2:o2)},e_=(n,t=0)=>{let e=3735928559^t,s=1103547991^t;for(let o=0,p;o<n.length;o++)p=n.charCodeAt(o),e=Math.imul(e^p,2654435761),s=Math.imul(s^p,1597334677);return e=Math.imul(e^e>>>16,2246822507),e^=Math.imul(s^s>>>13,3266489909),s=Math.imul(s^s>>>16,2246822507),s^=Math.imul(e^e>>>13,3266489909),4294967296*(2097151&s)+(e>>>0)},Ve=(n,t)=>e_(n)%t;let s_=class{constructor(){Bs(this,"containerElement");Bs(this,"messageElements",{});const t="message-container",e=document.getElementById(t);e?this.containerElement=e:(this.containerElement=document.createElement("div"),this.containerElement.id=t,document.body.appendChild(this.containerElement))}pop(t,e=2e3){const s=document.createElement("div"),o=Date.now();return s.className="message move-in",s.innerHTML=t,this.containerElement.appendChild(s),this.messageElements[o]=s,e>0&&setTimeout(()=>{this.close(o)},e),o}close(t){if(t){const e=this.messageElements[t];e.classList.remove("move-in"),e.classList.add("move-out"),e.addEventListener("animationend",()=>{e.remove(),delete this.messageElements[t]})}else dn(this.messageElements).forEach(e=>this.close(Number(e)))}destroy(){document.body.removeChild(this.containerElement)}};const p2=/#.*$/u,o_=n=>{const t=p2.exec(n);return t?t[0]:""},Ui=n=>decodeURI(n).replace(p2,"").replace(/\/index\.html$/iu,"/").replace(/\.html$/iu,"").replace(/(README|index)?\.md$/iu,""),i2=(n,t)=>{if(!V0(t))return!1;const e=Ui(n.path),s=Ui(t),o=o_(t);return o?o===n.hash&&(!s||e===s):e===s};var p_=n=>Object.prototype.toString.call(n)==="[object Object]",Ee=n=>typeof n=="string";const r2=Array.isArray,Ni=n=>p_(n)&&Ee(n.name),ke=(n,t=!1)=>n?r2(n)?n.map(e=>Ee(e)?{name:e}:Ni(e)?e:null).filter(e=>e!==null):Ee(n)?[{name:n}]:Ni(n)?[n]:(console.error(`Expect "author" to be \`AuthorInfo[] | AuthorInfo | string[] | string ${t?"":"| false"} | undefined\`, but got`,n),[]):[],l2=(n,t)=>{if(n){if(r2(n)&&n.every(Ee))return n;if(Ee(n))return[n];console.error(`Expect ${t} to be \`string[] | string | undefined\`, but got`,n)}return[]},c2=n=>l2(n,"category"),u2=n=>l2(n,"tag"),i_='<svg class="codepen-icon" viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg"><path d="M123.429 668L468 897.714V692.571L277.143 565.143zM88 585.714L198.286 512 88 438.286v147.428zm468 312L900.571 668 746.857 565.143 556 692.57v205.143zM512 616l155.429-104L512 408 356.571 512zM277.143 458.857L468 331.43V126.286L123.429 356zM825.714 512L936 585.714V438.286zm-78.857-53.143L900.571 356 556 126.286v205.143zM1024 356v312q0 23.429-19.429 36.571l-468 312Q524.571 1024 512 1024t-24.571-7.429l-468-312Q0 691.43 0 668V356q0-23.429 19.429-36.571l468-312Q499.429 0 512 0t24.571 7.429l468 312Q1024 332.57 1024 356z"/></svg>',r_='<svg class="jsfiddle-icon" viewBox="0 0 1170 1024" xmlns="http://www.w3.org/2000/svg"><path d="M1028.571 441.143q63.429 26.286 102.572 83.143t39.143 126.571q0 93.714-67.429 160.286T940 877.714q-2.286 0-6.571-.285t-6-.286H232q-97.143-5.714-164.571-71.714T0 645.143q0-62.857 31.429-116t84-84q-6.858-22.286-6.858-46.857 0-65.715 46.858-112T269.143 240q54.286 0 98.286 33.143 42.857-88 127.142-141.714t186.572-53.715q94.857 0 174.857 46t126.571 124.857 46.572 172q0 3.429-.286 10.286t-.286 10.286zm-761.142 152q0 69.714 48 110.286T434.286 744q78.285 0 137.143-56.571-9.143-11.429-27.143-32.286t-24.857-28.857q-38.286 37.143-82.286 37.143-31.429 0-53.429-19.143t-22-50q0-30.286 22-49.715T436 525.143q25.143 0 48.286 12T526 568.57t37.143 42.858 39.428 46.857 44 42.857T702 732.57t69.429 12q69.142 0 116.857-40.857T936 594.857q0-69.143-48-109.714T769.714 444.57Q688 444.571 632 500l53.143 61.714q37.714-36.571 81.143-36.571 29.714 0 52.571 18.857t22.857 48q0 32.571-21.143 52.286T766.857 664q-24.571 0-47.143-12t-41.143-31.429-37.428-42.857-39.714-46.857T557.143 488 502 456.571t-67.714-12q-69.715 0-118.286 40.286t-48.571 108.286z"/></svg>';var l_={useBabel:!1,jsLib:[],cssLib:[],codepenLayout:"left",codepenEditors:"101",babel:"https://unpkg.com/@babel/standalone/babel.min.js",vue:"https://unpkg.com/vue/dist/vue.global.prod.js",react:"https://unpkg.com/react/umd/react.production.min.js",reactDOM:"https://unpkg.com/react-dom/umd/react-dom.production.min.js"};const to=l_,Ki={html:{types:["html","slim","haml","md","markdown","vue"],map:{html:"none",vue:"none",md:"markdown"}},js:{types:["js","javascript","coffee","coffeescript","ts","typescript","ls","livescript"],map:{js:"none",javascript:"none",coffee:"coffeescript",ls:"livescript",ts:"typescript"}},css:{types:["css","less","sass","scss","stylus","styl"],map:{css:"none",styl:"stylus"}}},c_=(n,t,e)=>{const s=document.createElement(n);return Ut(t)&&dn(t).forEach(o=>{if(o.indexOf("data"))s[o]=t[o];else{const p=o.replace("data","");s.dataset[p]=t[o]}}),s},gp=n=>({...to,...n,jsLib:Array.from(new Set([...to.jsLib??[],...n.jsLib??[]])),cssLib:Array.from(new Set([...to.cssLib??[],...n.cssLib??[]]))}),Rt=(n,t)=>{if(V0(n[t]))return n[t];const e=new Promise(s=>{var p;const o=document.createElement("script");o.src=t,(p=document.querySelector("body"))==null||p.appendChild(o),o.onload=()=>{s()}});return n[t]=e,e},u_=(n,t)=>{if(t.css&&Array.from(n.childNodes).every(e=>e.nodeName!=="STYLE")){const e=c_("style",{innerHTML:t.css});n.appendChild(e)}},d_=(n,t,e)=>{const s=e.getScript();if(s&&Array.from(t.childNodes).every(o=>o.nodeName!=="SCRIPT")){const o=document.createElement("script");o.appendChild(document.createTextNode(`{const document=window.document.querySelector('#${n} .vp-code-demo-display').shadowRoot;
${s}}`)),t.appendChild(o)}},g_=["html","js","css"],m_=n=>{const t=dn(n),e={html:[],js:[],css:[],isLegal:!1};return g_.forEach(s=>{const o=t.filter(p=>Ki[s].types.includes(p));if(o.length){const p=o[0];e[s]=[n[p].replace(/^\n|\n$/g,""),Ki[s].map[p]??p]}}),e.isLegal=(!e.html.length||e.html[1]==="none")&&(!e.js.length||e.js[1]==="none")&&(!e.css.length||e.css[1]==="none"),e},d2=n=>n.replace(/<br \/>/g,"<br>").replace(/<((\S+)[^<]*?)\s+\/>/g,"<$1></$2>"),g2=n=>`<div id="app">
${d2(n)}
</div>`,__=n=>`${n.replace("export default ","const $reactApp = ").replace(/App\.__style__(\s*)=(\s*)`([\s\S]*)?`/,"")};
ReactDOM.createRoot(document.getElementById("app")).render(React.createElement($reactApp))`,h_=n=>n.replace(/export\s+default\s*\{(\n*[\s\S]*)\n*\}\s*;?$/u,"Vue.createApp({$1}).mount('#app')").replace(/export\s+default\s*define(Async)?Component\s*\(\s*\{(\n*[\s\S]*)\n*\}\s*\)\s*;?$/u,"Vue.createApp({$1}).mount('#app')").trim(),m2=n=>`(function(exports){var module={};module.exports=exports;${n};return module.exports.__esModule?module.exports.default:module.exports;})({})`,v_=(n,t)=>{const e=gp(t),s=n.js[0]??"";return{...e,html:d2(n.html[0]??""),js:s,css:n.css[0]??"",isLegal:n.isLegal,getScript:()=>{var o;return e.useBabel?((o=window.Babel.transform(s,{presets:["es2015"]}))==null?void 0:o.code)??"":s}}},E_=/<template>([\s\S]+)<\/template>/u,k_=/<script(\s*lang=(['"])(.*?)\2)?>([\s\S]+)<\/script>/u,A_=/<style(\s*lang=(['"])(.*?)\2)?\s*(?:scoped)?>([\s\S]+)<\/style>/u,f_=(n,t)=>{const e=gp(t),s=n.html[0]??"",o=E_.exec(s),p=k_.exec(s),i=A_.exec(s),l=(o==null?void 0:o[1].replace(/^\n|\n$/g,""))??"",[c="",u=""]=p?[p[4].replace(/^\n|\n$/g,""),p[3]]:[],[d="",g=""]=i?[i[4].replace(/^\n|\n$/g,""),i[3]]:[],m=u===""&&(g===""||g==="css");return{...e,html:g2(l),js:h_(c),css:d,isLegal:m,jsLib:[e.vue,...e.jsLib],getScript:()=>{var v,A;const _=t.useBabel?((A=(v=window.Babel)==null?void 0:v.transform(c,{presets:["es2015"]}))==null?void 0:A.code)??"":c.replace(/export\s+default/u,"return");return`const app=window.document.createElement('div');document.firstElementChild.appendChild(app);const appOptions=${m2(_)};appOptions.template=\`${l.replace("`",'\\`"')}\`;window.Vue.createApp(appOptions).mount(app);`}}},I_=(n,t)=>{var o;const e=gp(t),s=n.js[0]??"";return{...e,html:g2(""),js:__(s),css:n.css[0]??((o=n.js[0])==null?void 0:o.replace(/App\.__style__(?:\s*)=(?:\s*)`([\s\S]*)?`/,"$1").trim())??"",isLegal:n.isLegal,jsLib:[e.react,e.reactDOM,...e.jsLib],jsx:!0,getScript:()=>{var i,l;const p=((l=(i=window.Babel)==null?void 0:i.transform(s,{presets:["es2015","react"]}))==null?void 0:l.code)??"";return`window.ReactDOM.createRoot(document.firstElementChild).render(window.React.createElement(${m2(p)}))`}}},Ot={},y_=n=>Promise.all([Rt(Ot,n.babel),Rt(Ot,n.react),Rt(Ot,n.reactDOM)]),S_=n=>{const t=[Rt(Ot,n.vue)];return n.useBabel&&t.push(Rt(Ot,n.babel)),Promise.all(t)},b_=n=>n.useBabel?Rt(Ot,n.babel):Promise.resolve();var D_=j({name:"CodeDemo",props:{id:{type:String,required:!0},type:{type:String,default:"normal"},title:{type:String,default:""},config:{type:String,default:""},code:{type:String,required:!0}},slots:Object,setup(n,{slots:t}){const[e,s]=ve(!1),o=La(),p=La(),i=X("0"),l=X(!1),c=I(()=>JSON.parse(n.config?xi(n.config):"{}")),u=I(()=>{const v=JSON.parse(xi(n.code));return m_(v)}),d=I(()=>n.type==="react"?I_(u.value,c.value):n.type==="vue"?f_(u.value,c.value):v_(u.value,c.value)),g=I(()=>d.value.isLegal),m=(v=!1)=>{const A=o.value.attachShadow({mode:"open"}),S=document.createElement("div");S.classList.add("code-demo-app"),A.appendChild(S),g.value?(v&&(S.innerHTML=d.value.html),u_(A,d.value),d_(n.id,A,d.value),i.value="0"):i.value="auto",l.value=!0},_=()=>{switch(n.type){case"react":return y_(d.value).then(()=>m());case"vue":return S_(d.value).then(()=>m());default:return b_(d.value).then(()=>m(!0))}};return Ca("beforeprint",()=>{s(!0)}),Ea(()=>{setTimeout(()=>{_()},800)}),()=>{var v;return r("div",{class:"vp-code-demo",id:n.id},[r("div",{class:"vp-code-demo-header"},[d.value.isLegal?r("button",{type:"button",title:"toggle","aria-hidden":!0,class:["vp-code-demo-toggle-button",e.value?"down":"end"],onClick:()=>{i.value=e.value?"0":`${p.value.clientHeight+13.8}px`,s()}}):null,n.title?r("span",{class:"vp-code-demo-title"},decodeURIComponent(n.title)):null,d.value.isLegal&&d.value.jsfiddle!==!1?r("form",{class:"code-demo-jsfiddle",target:"_blank",action:"https://jsfiddle.net/api/post/library/pure/",method:"post"},[r("input",{type:"hidden",name:"html",value:d.value.html}),r("input",{type:"hidden",name:"js",value:d.value.js}),r("input",{type:"hidden",name:"css",value:d.value.css}),r("input",{type:"hidden",name:"wrap",value:"1"}),r("input",{type:"hidden",name:"panel_js",value:"3"}),r("input",{type:"hidden",name:"resources",value:[...d.value.cssLib,...d.value.jsLib].join(",")}),r("button",{type:"submit",class:"jsfiddle-button",innerHTML:r_,"aria-label":"JSFiddle","data-balloon-pos":"up"})]):null,!d.value.isLegal||d.value.codepen!==!1?r("form",{class:"code-demo-codepen",target:"_blank",action:"https://codepen.io/pen/define",method:"post"},[r("input",{type:"hidden",name:"data",value:JSON.stringify({html:d.value.html,js:d.value.js,css:d.value.css,js_external:d.value.jsLib.join(";"),css_external:d.value.cssLib.join(";"),layout:d.value.codepenLayout,html_pre_processor:u.value?u.value.html[1]:"none",js_pre_processor:u.value?u.value.js[1]:d.value.jsx?"babel":"none",css_pre_processor:u.value?u.value.css[1]:"none",editors:d.value.codepenEditors})}),r("button",{type:"submit",innerHTML:i_,class:"codepen-button","aria-label":"Codepen","data-balloon-pos":"up"})]):null]),l.value?null:r(n2,{class:"vp-code-demo-loading"}),r("div",{ref:o,class:"vp-code-demo-display",style:{display:g.value&&l.value?"block":"none"}}),r("div",{class:"vp-code-demo-code-wrapper",style:{height:i.value}},r("div",{ref:p,class:"vp-code-demo-codes"},(v=t.default)==null?void 0:v.call(t)))])}}}),J_=j({name:"MdDemo",props:{id:{type:String,required:!0},title:{type:String,default:""}},slots:Object,setup(n,{slots:t}){const[e,s]=ve(!1),o=La(),p=X("0");return Ca("beforeprint",()=>{s(!0)}),()=>{var i,l;return r("div",{class:"vp-md-demo",id:n.id},[r("div",{class:"vp-md-demo-header"},[r("button",{type:"button",title:"toggle","aria-hidden":!0,class:["vp-md-demo-toggle-button",e.value?"down":"end"],onClick:()=>{p.value=e.value?"0":`${o.value.clientHeight+13.8}px`,s()}}),n.title?decodeURIComponent(n.title):null]),r("div",{class:"vp-md-demo-display"},(i=t.default)==null?void 0:i.call(t)),r("div",{class:"vp-md-demo-code-wrapper",style:{height:p.value}},r("div",{ref:o,class:"vp-md-demo-codes"},(l=t.code)==null?void 0:l.call(t)))])}}});const P_=()=>{Ca("beforeprint",()=>{document.querySelectorAll("details").forEach(n=>{n.open=!0})})},eo=Kt("VUEPRESS_TAB_STORE",{});var T_=j({name:"Tabs",props:{active:{type:Number,default:0},data:{type:Array,required:!0},id:{type:String,required:!0},tabId:{type:String,default:""}},slots:Object,setup(n,{slots:t}){const e=X(n.active),s=La([]),o=()=>{n.tabId&&(eo.value[n.tabId]=n.data[e.value].id)},p=(u=e.value)=>{e.value=u<s.value.length-1?u+1:0,s.value[e.value].focus()},i=(u=e.value)=>{e.value=u>0?u-1:s.value.length-1,s.value[e.value].focus()},l=(u,d)=>{u.key===" "||u.key==="Enter"?(u.preventDefault(),e.value=d):u.key==="ArrowRight"?(u.preventDefault(),p()):u.key==="ArrowLeft"&&(u.preventDefault(),i()),o()},c=()=>{if(n.tabId){const u=n.data.findIndex(({id:d})=>eo.value[n.tabId]===d);if(u!==-1)return u}return n.active};return Ea(()=>{e.value=c(),ua(()=>eo.value[n.tabId],(u,d)=>{if(n.tabId&&u!==d){const g=n.data.findIndex(({id:m})=>m===u);g!==-1&&(e.value=g)}})}),()=>n.data.length?r("div",{class:"vp-tabs"},[r("div",{class:"vp-tabs-nav",role:"tablist"},n.data.map(({id:u},d)=>{const g=d===e.value;return r("button",{type:"button",ref:m=>{m&&(s.value[d]=m)},class:["vp-tab-nav",{active:g}],role:"tab","aria-controls":`tab-${n.id}-${d}`,"aria-selected":g,onClick:()=>{e.value=d,o()},onKeydown:m=>l(m,d)},t[`title${d}`]({value:u,isActive:g}))})),n.data.map(({id:u},d)=>{const g=d===e.value;return r("div",{class:["vp-tab",{active:g}],id:`tab-${n.id}-${d}`,role:"tabpanel","aria-expanded":g},[r("div",{class:"vp-tab-title"},t[`title${d}`]({value:u,isActive:g})),t[`tab${d}`]({value:u,isActive:g})])})]):null}});const L_=Pn({enhance:({app:n})=>{n.component("CodeTabs",Ym),nn("CodeGroup",n)||n.component("CodeGroup",a_),nn("CodeGroupItem",n)||n.component("CodeGroupItem",a2),n.component("CodeDemo",D_),n.component("MdDemo",J_),n.component("Tabs",T_)},setup:()=>{P_()}}),R_=X({}),_2=Symbol(""),O_=()=>ba(_2),x_=n=>{n.provide(_2,R_)},B_='<div class="photo-swipe-loading"><svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" preserveAspectRatio="xMidYMid" viewBox="25 25 50 50"><animateTransform attributeName="transform" type="rotate" dur="2s" keyTimes="0;1" repeatCount="indefinite" values="0;360"></animateTransform><circle cx="50" cy="50" r="20" fill="none" stroke="currentColor" stroke-width="4" stroke-linecap="round"><animate attributeName="stroke-dasharray" dur="1.5s" keyTimes="0;0.5;1" repeatCount="indefinite" values="1,200;90,200;1,200"></animate><animate attributeName="stroke-dashoffset" dur="1.5s" keyTimes="0;0.5;1" repeatCount="indefinite" values="0;-35px;-125px"></animate></circle></svg></div>',C_=n=>Da(n)?Array.from(document.querySelectorAll(n)):n.map(t=>Array.from(document.querySelectorAll(t))).flat(),h2=n=>new Promise((t,e)=>{n.complete?t({type:"image",element:n,src:n.src,width:n.naturalWidth,height:n.naturalHeight,alt:n.alt,msrc:n.src}):(n.onload=()=>t(h2(n)),n.onerror=s=>e(s))}),w_=n=>{const{isSupported:t,toggle:e}=cp();n.on("uiRegister",()=>{t.value&&n.ui.registerElement({name:"fullscreen",order:7,isButton:!0,html:'<svg class="pswp__icn" viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg"><path d="M249.5 270.833H437v-75H212a37.5 37.5 0 0 0-37.5 37.5v225h75v-187.5zm-37.5 600h225v-75H249.5v-187.5h-75v225a37.5 37.5 0 0 0 37.5 37.5zm637.5-37.5v-225h-75v187.5H587v75h225a37.5 37.5 0 0 0 37.5-37.5zM587 270.833h187.5v187.5h75v-225a37.5 37.5 0 0 0-37.5-37.5H587v75z"/></svg>',onClick:()=>{e()}}),n.ui.registerElement({name:"download",order:8,isButton:!0,tagName:"a",html:{isCustomSVG:!0,inner:'<path d="M20.5 14.3 17.1 18V10h-2.2v7.9l-3.4-3.6L10 16l6 6.1 6-6.1-1.5-1.6ZM23 23H9v2h14" id="pswp__icn-download"/>',outlineID:"pswp__icn-download"},onInit:(s,o)=>{s.setAttribute("download",""),s.setAttribute("target","_blank"),s.setAttribute("rel","noopener"),o.on("change",()=>{s.setAttribute("href",o.currSlide.data.src)})}}),n.ui.registerElement({name:"bulletsIndicator",className:"photo-swipe-bullets-indicator",appendTo:"wrapper",onInit:(s,o)=>{const p=[];let i=-1;for(let l=0;l<o.getNumItems();l++){const c=document.createElement("div");c.className="photo-swipe-bullet",c.onclick=u=>{o.goTo(p.indexOf(u.target))},p.push(c),s.appendChild(c)}o.on("change",()=>{i>=0&&p[i].classList.remove("active"),p[o.currIndex].classList.add("active"),i=o.currIndex})}})})},V_=(n,t,e=!0)=>a(()=>import("./photoswipe.esm-SzV8tJDW.js"),[]).then(({default:s})=>{let o=null;const p=n.map(i=>({html:B_,element:i,msrc:i.src}));return n.forEach((i,l)=>{const c=()=>{o==null||o.destroy(),o=new s({preloaderDelay:0,showHideAnimationType:"zoom",...t,dataSource:p,index:l,...e?{closeOnVerticalDrag:!0,wheelToZoom:!1}:{}}),w_(o),o.addFilter("thumbEl",()=>i),o.addFilter("placeholderSrc",()=>i.src),o.init()};i.getAttribute("photo-swipe")||(i.style.cursor="zoom-in",i.addEventListener("click",()=>{c()}),i.addEventListener("keypress",({key:u})=>{u==="Enter"&&c()}),i.setAttribute("photo-swipe","")),h2(i).then(u=>{p.splice(l,1,u),o==null||o.refreshSlideContent(l)})}),e?Ca("wheel",()=>{o==null||o.close()}):()=>{}}),M_=({selector:n,locales:t,delay:e=500,scrollToClose:s=!0})=>{const o=O_(),p=Re(t),i=fa(),l=da();let c=null;const u=()=>{const{photoSwipe:d}=l.value;d!==!1&&wn().then(()=>M0(e)).then(async()=>{const g=Da(d)?d:n;c=await V_(C_(g),{...o.value,...p.value},s)})};Ea(()=>{u(),ua(()=>[i.value.path,o.value],()=>{c==null||c(),u()})}),Ht(()=>{c==null||c()})};var F_={"/":{closeTitle:"关闭",downloadTitle:"下载图片",fullscreenTitle:"切换全屏",zoomTitle:"缩放",arrowPrevTitle:"上一个 (左箭头)",arrowNextTitle:"下一个 (右箭头)"}};const j_=".theme-hope-content :not(a) > img:not([no-view])",H_=F_,U_=800,N_=!0,K_=Pn({enhance:({app:n})=>{x_(n)},setup:()=>{M_({selector:j_,delay:U_,locales:H_,scrollToClose:N_})}}),v2=()=>{const n=fa();return I(()=>n.value.readingTime??null)},E2=(n,t)=>{const{minutes:e,words:s}=n,{less1Minute:o,word:p,time:i}=t;return{time:e<1?o:i.replace("$time",Math.round(e).toString()),words:p.replace("$word",s.toString())}};var Wi={"/":{word:"约 $word 字",less1Minute:"小于 1 分钟",time:"大约 $time 分钟"}};const Gi={words:"",time:""},bo=typeof Wi>"u"?null:Wi,k2=()=>bo?Re(bo):I(()=>null),W_=()=>{if(typeof bo>"u")return I(()=>Gi);const n=v2(),t=k2();return I(()=>n.value&&t.value?E2(n.value,t.value):Gi)},fn=()=>Z0(),pa=()=>Km(),Wa=()=>{const n=fn();return I(()=>!!n.value.pure)},ls=()=>null,G_="719px",z_="1440px",q_="false",Q_="9",ot={mobileBreakPoint:G_,pcBreakPoint:z_,enableThemeColor:q_,colorNumber:Q_},mp={"/posts/baeldung/":[{text:"2024 06 21",prefix:"2024-06-21/",collapsible:!0,children:["2024-06-21-Iterating All Fields of a Data Class Without Reflection in Kotlin","2024-06-21- DataJpaTest and Repository Class in JUnit","2024-06-21-Difference Between GroupId and ConsumerId in Apache Kafka","2024-06-21-Gson TypeToken With Dynamic List Item Type","2024-06-21-Simplified Array Operations on JsonNode Without Typecasting in Jackson","2024-06-21-Serialization with FlatBuffers in Java","2024-06-21-How to Pretty Print a Map in Java","2024-06-21-Generate Juggler Sequence in Java","2024-06-21-Get First n Characters in a String in Java","2024-06-21-Custom Event Handlers and Listeners in Netty","2024-06-21-Spring Data JPA Repository for Database View","2024-06-21-Skip Select Before Insert in Spring Data JPA","2024-06-21-Query Hints in Spring Data JPA","2024-06-21-Testcontainers Desktop","2024-06-21-Create JavaType From Class with Jackson","2024-06-21-Modify and Print List Items With Java Streams","2024-06-21-Count the Number of Unique Digits in an Integer using Java","2024-06-21-Document Query Parameters with Spring REST Docs","2024-06-21-Increase the Memory Size Limit on IntelliJ IDEA","2024-06-21-Remove Only Trailing Spaces or Whitespace From a String in Java","2024-06-21-Finding the Parent of a Node in a Binary Search Tree with Java","2024-06-21-Find an Unique Email Address in a List","2024-06-21-Get the Initials of a Name in Java","2024-06-21-Implementing GraphQL Mutation Without Returning Data","2024-06-21-How to Mock Amazon S3 for Integration Test","2024-06-21-Migrate Application from Spring Security 5 to Spring Security 6 Spring Boot 3","2024-06-21-Railway Oriented Programming in Kotlin"]},{text:"2024 06 22",prefix:"2024-06-22/",collapsible:!0,children:["2024-06-22-Understanding Kafka InstanceAlreadyExistsException in Java","2024-06-22-Difference Between thenApply   and thenApplyAsync   in CompletableFuture","2024-06-22-CountDownLatch vs. Semaphore","2024-06-22-A Guide to etcd","2024-06-22-A Guide to the  SoftDelete Annotation in Hibernate","2024-06-22-Simple Web Server in Java 18","2024-06-22-CompletableFuture runAsync   vs. supplyAsync   in Java","2024-06-22-Guide to System.in.read  ","2024-06-22-Translating Space Characters in URLEncoder","2024-06-22-Convert Infix to Postfix Expressions in Java","2024-06-22-Moves Zeros to the End of an Array in Java","2024-06-22-Convert Date to Unix Timestamp in Java","2024-06-22-Mutable vs. Immutable Objects in Java","2024-06-22-Solving Rod Cutting Problem in Java","2024-06-22-Pagination With JDBC","2024-06-22-Injecting  Mock and  Captor in JUnit 5 Method Parameters","2024-06-22-View Kafka Headers in Java","2024-06-22-Parse String With Thousands Separator in Kotlin","2024-06-22-Introduction to OpenGrok","2024-06-22-Quarkus and Virtual Threads","2024-06-22-Run Maven From Java Code","2024-06-22-Instantiate an Inner Class With Reflection in Java","2024-06-22-Logging With AOP in Spring","2024-06-22-OAuth2 Backend for Frontend With Spring Cloud Gateway","2024-06-22-Creating a Custom URL Connection","2024-06-22-Add Camel Route at Runtime in Java","2024-06-22-Storing UUID as Base64 String in Java","2024-06-22-Find the Equilibrium Indexes of an Array in Java","2024-06-22-Count Uppercase and Lowercase Letters in a String","2024-06-22-Calculate Weighted Mean in Java","2024-06-22-Mask an Email Address and Phone Number in Java","2024-06-22-Get a Range of Items from a Stream in Java","2024-06-22-Get All Results at Once in a Spring Boot Paged Query Method","2024-06-22-Install OpenJDK on Windows","2024-06-22-Find The Largest Number in a String","2024-06-22-Check if String is Base64 Encoded","2024-06-22-How To Use findBy   With Multiple Columns in JPA","2024-06-22-How to Check if a Variable Is Defined in Thymeleaf","2024-06-22-Check if Two Strings Are Rotations of Each Other","2024-06-22-Find the First Non repeating Element of a List","2024-06-22-Collect Stream of entrySet   to a LinkedHashMap","2024-06-22-Check if a String Is Equal to Its Mirror Reflection","2024-06-22-Understanding  Raw type. References to generic types should be parameterized  Error","2024-06-22-Preventing Gson from Expressing Integers as Floats"]},{text:"2024 06 23",prefix:"2024-06-23/",collapsible:!0,children:["2024-06-23-Difference Between mvn install and mvn verify","2024-06-23-Introduction to gRPC with Spring Boot","2024-06-23-N 1 Problem in Hibernate and Spring Data JPA","2024-06-23-Print a Java 2D Array","2024-06-23-JFR View Command in Java 21","2024-06-23-Convert byte to int Type in Java","2024-06-23-Normalize a URL in Java","2024-06-23-Calculating the Power of Any Number in Java Without Using Math pow   Method","2024-06-23-Read and Write Files in Java Using Separate Threads","2024-06-23-Regular Expression for Password Validation in Java","2024-06-23-Convert Long to Date in Java","2024-06-23-Convert Gregorian to Hijri Date in Java","2024-06-23-Convert String Date to XMLGregorianCalendar in Java","2024-06-23-Difference between ZoneOffset.UTC and ZoneId.of  UTC  ","2024-06-23-Run Length Encoding and Decoding in Java","2024-06-23-Monkey Patching in Java","2024-06-23-Structured Logging in Java","2024-06-23-Calculate Number of Weekdays Between Two Dates in Java","2024-06-23-Reset ListIterator to First Element of the List in Java","2024-06-23-Introduction to KotlinPoet","2024-06-23-Difference Between  mvn verify  and  mvn test ","2024-06-23-Setting up and Using Spock With Gradle","2024-06-23-Access Job Parameters From ItemReader in Spring Batch","2024-06-23-List vs. Set in  OneToMany JPA","2024-06-23-Event Externalization with Spring Modulith","2024-06-23-Creating Unicode Character From Its Code Point Hex String","2024-06-23-Apply Bold Text Style for an Entire Row Using Apache POI","2024-06-23-Generating Unique Positive Long Using SecureRandom in Java","2024-06-23-Using Current Time as Filename in Java","2024-06-23-Event Driven Microservices With Orkes Conductor","2024-06-23-Improving Test Coverage and Readability With Spock s Data Pipes and Tables","2024-06-23-Custom JSON Deserialization Using Spring WebClient","2024-06-23-Enable Java SSL Debug Logging","2024-06-23-Rotate a Vertex Around a Certain Point in Java","2024-06-23-Set an Environment Variable at Runtime in Java","2024-06-23-Shutting Down on OutOfMemoryError in Java","2024-06-23-How to Find the URL of a Service in Kubernetes","2024-06-23-How to Catch Deserialization Errors in Spring Kafka ","2024-06-23-How to Determine if a String Contains Invalid Encoded Characters","2024-06-23-Looking for a Backend Java Spring Team Lead with Integration Experience  Remote   Part Time    not open","2024-06-23-Builder Pattern and Inheritance","2024-06-23-Check if Two Date Ranges Overlap","2024-06-23-Simple Morse Code Translation in Java"]},{text:"2024 06 24",prefix:"2024-06-24/",collapsible:!0,children:["2024-06-24-Introduction to Apache Calcite","2024-06-24-Java 8 Stream Operation on the Empty List","2024-06-24-Generational ZGC in Java 21","2024-06-24-Difference Between a Future and a Promise in Java","2024-06-24-PriorityQueue iterator   Method in Java","2024-06-24-Difference Between Xmx and MaxRAM JVM Parameters","2024-06-24-Converting BigDecimal to Integer in Java","2024-06-24-Converting Integer to BigDecimal in Java","2024-06-24-Convert Null Value to a Default Value in Java","2024-06-24-Replace Non Printable Unicode Characters in Java","2024-06-24-Check if List Contains at Least One Enum","2024-06-24-Check if a Float Value is Equivalent to an Integer Value in Java","2024-06-24-What Is the Error   Non static method cannot be referenced from a static context  ","2024-06-24-Read Input Character by Character in Java","2024-06-24-Convert Joda Time DateTime to Date and Vice Versa","2024-06-24-What Happens When the JVM Runs Out of Memory to Allocate During Runtime ","2024-06-24-Maven Dependencies Failing With a 501 Error  HTTPS Required ","2024-06-24-Introduction to Postman","2024-06-24-Introduction to Spring AI","2024-06-24-Introduction to Spring Cloud AWS 3.0   SQS Integration","2024-06-24-Upload Multiple Files Using WebFlux","2024-06-24-Getting Query String Parameters from HttpServletRequest","2024-06-24-Remove Characters From a String That Are in the Other String","2024-06-24-Removing the Last Node in a Linked List","2024-06-24-Create Kubernetes Operators with the Java Operator SDK","2024-06-24-Creating Reactive APIs With Micronaut and MongoDB","2024-06-24-Using Static Methods Instead of Deprecated JsonParser","2024-06-24-Printing Message on Console without Using main   Method in Java","2024-06-24-Call a Method on Each Element of a List in Java","2024-06-24-Check if a Point Is Between Two Points Drawn on a Straight Line in Java","2024-06-24-Add Authorities as Custom Claims in JWT Access Tokens in Spring Authorization Server","2024-06-24-Solving the ParameterResolutionException in JUnit 5","2024-06-24-Accessing Private Java Fields via Kotlin Extension Functions"]},{text:"2024 06 25",prefix:"2024-06-25/",collapsible:!0,children:["2024-06-25-Sending Data to a Specific Partition in Kafka","2024-06-25-BigDecimal.ZERO vs. new BigDecimal 0 ","2024-06-25-Java System.currentTimeMillis   Vs. System.nanoTime  ","2024-06-25-Difference Between 1L and  long  1","2024-06-25-Difference Between execute   and submit   in Executor Service","2024-06-25-Comparison of for Loops and Iterators","2024-06-25-Callbacks in ListenableFuture and CompletableFuture","2024-06-25-Java s String.length   and String.getBytes  .length","2024-06-25-Lazy Field Initialization with Lambdas","2024-06-25-Format LocalDate to ISO 8601 With T and Z","2024-06-25-Convert String to long or Long in Java","2024-06-25-Convert a String to a List of Characters in Java","2024-06-25-Convert Byte Array to JSON and Vice Versa in Java","2024-06-25-Sorting One List Based on Another List in Java","2024-06-25-Detect the Last Iteration in for Loops in Java","2024-06-25-UTF 8 Validation in Java","2024-06-25-Calculate Months Between Two Dates in Java","2024-06-25-Read a File and Split It Into Multiple Files in Java","2024-06-25-Rotating a Java String By n Characters","2024-06-25-Dijkstra s Algorithm in Kotlin","2024-06-25-Reactor WebFlux vs Virtual Threads","2024-06-25- Query Definitions With SpEL Support in Spring Data JPA","2024-06-25-What Does It Mean to Hydrate an Object ","2024-06-25-Getting All Field Names of a Class Using Kotlin Reflection","2024-06-25-Convert Excel Files to PDF Using Java","2024-06-25-Get Client Information From HTTP Request in Java","2024-06-25-Find Missing Number From a Given Array in Java","2024-06-25-Comparing One String With Multiple Values in One Expression in Java","2024-06-25-Convert an OutputStream to a Byte Array in Java","2024-06-25-Print a Double Value Without Scientific Notation in Java","2024-06-25-Find Files by Extension in Specified Directory in Java","2024-06-25-When to Use the getReferenceById   and findById   Methods in Spring Data JPA","2024-06-25-Return Map Instead of List in Spring Data JPA","2024-06-25-How to Write Strings to OutputStream in Java","2024-06-25-How to Get Last Record in Spring Data JPA","2024-06-25-Check If a Java StringBuilder Object Contains a Character","2024-06-25-Fixing Hibernate QueryException  Named Parameter Not Bound"]},{text:"2024 06 26",prefix:"2024-06-26/",collapsible:!0,children:["2024-06-26-Methods in Java","2024-06-26-String vs StringBuffer Comparison in Java","2024-06-26-String s Maximum Length in Java","2024-06-26-All the Ways Java Uses the Colon Character","2024-06-26-Skip Bytes in InputStream in Java","2024-06-26-Rounding Up a Number to Nearest Multiple of 5 in Java","2024-06-26-Convert Positive Integer to Negative and Vice Versa in Java","2024-06-26-Convert Long Timestamp to LocalDateTime in Java","2024-06-26-Inter Process Communication Methods in Java","2024-06-26-Static Final Variables in Java","2024-06-26-Return First Non null Value in Java","2024-06-26-Limiting the Max Size of a HashMap in Java","2024-06-26-Check Certificate Name and Alias in Keystore File","2024-06-26-Merging Kotlin Flows","2024-06-26-Spring Kafka Trusted Packages Feature","2024-06-26-A Guide to Timefold Solver for Employee Scheduling","2024-06-26-Deserializing JSON to Java Record using Gson","2024-06-26-Get Index of First Element Matching Boolean Using Java Streams","2024-06-26-Working With HarperDB and Java","2024-06-26-Catch Common Mistakes with Error Prone Library in Java","2024-06-26-Verify That Lambda Expression Was Called Using Mockito","2024-06-26-Generating Unique Positive long Using UUID in Java","2024-06-26-Check if a double Is an Integer in Java","2024-06-26-Retrieving Unix Time in Java","2024-06-26-Extract Numbers From a String in Kotlin","2024-06-26-Modify Request Body Before Reaching Controller in Spring Boot","2024-06-26-Setup Asynchronous Retry Mechanism in Spring","2024-06-26-Handling NullPointerException in findFirst   When the First Element Is Null","2024-06-26-How to Use a Custom Font in Java","2024-06-26-How to Convert JsonNode to ObjectNode","2024-06-26-How to Convert Byte Array to Char Array","2024-06-26-How to Sort LinkedHashMap by Values in Java","2024-06-26-How to Increment a Map Value in Java","2024-06-26-How to Effectively Unit Test CompletableFuture","2024-06-26-Differences Between Entities and DTOs","2024-06-26-Convert an XML File to CSV File","2024-06-26-Recursively Sum the Integers in an Array","2024-06-26-Resolving Gson s  Multiple JSON Fields  Exception","2024-06-26-Passing JVM Options from Gradle bootRun","2024-06-26-Connect to Database Through Intellij Data Sources and Drivers"]},{text:"2024 06 27",prefix:"2024-06-27/",collapsible:!0,children:["2024-06-27-Differences Between   and   in Cron Expressions","2024-06-27-Gradle Proxy Configuration","2024-06-27-Context Specific Deserialization Filters in Java 17","2024-06-27-Working with Exceptions in Java CompletableFuture","2024-06-27-Time Complexity of Java Collections Sort in Java","2024-06-27-HashSet toArray   Method in Java","2024-06-27-Difference Between String isEmpty   and isBlank  ","2024-06-27-Time Conversions Using TimeUnit","2024-06-27-Round the Date in Java","2024-06-27-Convert a Stream into a Map or Multimap in Java","2024-06-27-Convert a Hex String to an Integer in Java","2024-06-27-Convert File to Byte Array in Java","2024-06-27-Convert Timestamp String to Long in Java","2024-06-27-Compare StringBuilder Objects in Java","2024-06-27-Comparing the Values of Two Generic Numbers in Java","2024-06-27-Unreachable Statements in Java","2024-06-27-Executable Comments in Java","2024-06-27-Representing Furthest Possible Date in Java","2024-06-27-Asserting Nested Map With JUnit","2024-06-27-Manage Kafka Consumer Groups","2024-06-27-Sorting List with String Dates in Kotlin","2024-06-27-Combining Multiple Kotlin Flows","2024-06-27-Async Exception Handling in Kotlin","2024-06-27-Working With MathFlux","2024-06-27-MongoDB Atlas Search Using the Java Driver and Spring Data","2024-06-27-A Guide to OpenRewrite","2024-06-27-Convert ResultSet Into Map","2024-06-27-Overriding Spring Beans in Integration Test","2024-06-27-Why Is sun.misc.Unsafe.park Actually Unsafe ","2024-06-27-Create Table Using ASCII in a Console in Java","2024-06-27-Switching Between Frames Using Selenium WebDriver in Java","2024-06-27-Create a  Mutable  String in Java","2024-06-27-Finding the N th Occurrence of a Substring in a String in Java","2024-06-27-Add a List as Query Parameter in Jersey","2024-06-27-Ensuring Message Ordering in Kafka  Strategies and Configurations","2024-06-27-Setting a Spring Bean to Null","2024-06-27-Synchronize a Static Variable Among Different Threads","2024-06-27-Sharing Memory Between JVMs","2024-06-27-Modifying Objects Within Stream While Iterating","2024-06-27-How to Write and Read a File with a Java HashMap","2024-06-27-How to Parse XML to HashMap in Java","2024-06-27-How to Avoid NoSuchElementException in Stream API","2024-06-27-Checking if an Object s Type Is Enum"]},{text:"2024 06 28",prefix:"2024-06-28/",collapsible:!0,children:["2024-06-28- ConditionalOnThreading Annotation Spring","2024-06-28-Retry Logic with CompletableFuture","2024-06-28-Arrays mismatch   Method in Java","2024-06-28-Difference Between ZipFile and ZipInputStream in Java","2024-06-28-Difference Between  final static  and  static final ","2024-06-28-Taking Every N th Element from Finite and Infinite Streams in Java","2024-06-28-Intro to Vector Class in Java","2024-06-28-Split Java String Into Key Value Pairs","2024-06-28-Wrapping a String After a Number of Characters Word Wise","2024-06-28-How to Center Text Output in Java","2024-06-28-PrintWriter vs. FileWriter in Java","2024-06-28-Passing Strings by Reference in Java","2024-06-28-Optional as a Record Parameter in Java","2024-06-28-JNDI   What Is java comp env ","2024-06-28-Conditional Exception Throwing in Kotlin","2024-06-28-Introduction to LangChain","2024-06-28-Localized Validation Messages in REST","2024-06-28-A Guide to Spring 6 JdbcClient API","2024-06-28-Spring Boot 3.1 s ConnectionDetails Abstraction","2024-06-28-A Guide to RestClient in Spring Boot","2024-06-28-HttpSecurity vs. WebSecurity in Spring Security","2024-06-28-Why wait   Requires Synchronization ","2024-06-28-Remove Elements From a Queue Using Loop","2024-06-28-Drawbacks of the Singleton Design Pattern","2024-06-28-Configuring the GlassFish Server in Eclipse","2024-06-28-Convert an XML Object to a String in Java","2024-06-28-Capitalize the First Letter of Each Word in a String","2024-06-28-Check if a String Contains a Number Value in Java","2024-06-28-How to Create CSV File from POJO with Custom Column Headers and Positions","2024-06-28-How to Set Up Environment Variables in IntelliJ IDEA","2024-06-28-How to Document Generic Type Parameters in Javadoc","2024-06-28-How to Get First or Last Entry From a LinkedHashMap in Java","2024-06-28-How to Iterate Over the String Characters in Java","2024-06-28-How to Reuse Testcontainers in Java","2024-06-28-How to Mock Environment Variables in Unit Tests","2024-06-28-Convert From List of CompletableFuture to CompletableFuture List","2024-06-28-How to Write Hashmap to CSV File","2024-06-28-How To Manage Timeout for CompletableFuture","2024-06-28-Overriding Cucumber Option Values","2024-06-28-Implement Connect 4 Game with Java","2024-06-28-Convert String Containing XML to org.w3c.dom.Document","2024-06-28-Check if a String Contains Only Unicode Letters"]},{text:"2024 06 29",prefix:"2024-06-29/",collapsible:!0,children:["2024-06-29-Introduction to Apache Kafka","2024-06-29-Partition a Stream in Java","2024-06-29-Deprecate Finalization in Java 18","2024-06-29-Unnamed Patterns and Variables in Java 21","2024-06-29-Unnamed Classes and Instance Main Methods in Java 21","2024-06-29-String Templates in Java 21","2024-06-29-Difference Between Arrays.sort   and Collections.sort  ","2024-06-29-How to Convert Double to Float in Java","2024-06-29-Difference Between putIfAbsent   and computeIfAbsent   in Java s Map","2024-06-29-Joining a List String  in Java With Commas and  and ","2024-06-29-Create an ArrayList with Multiple Object Types","2024-06-29-Truncate a Double to Two Decimal Places in Java","2024-06-29-Converting HashMap Values to an ArrayList in Java","2024-06-29-Convert Char Array to Int Array in Java","2024-06-29-Rotate Arrays in Java","2024-06-29-Testing Interface Contract in Java","2024-06-29-Finding the Square Root of a BigInteger in Java","2024-06-29-Skipping the First Iteration in Java","2024-06-29-Increment Character in Java","2024-06-29-Is Java Reflection Bad Practice ","2024-06-29-Pass a Function as Parameter to Another in Kotlin","2024-06-29-Checking if Two Objects Have the Same Class in Kotlin","2024-06-29-API Versioning in Micronaut","2024-06-29-RSocket Interface in Spring 6","2024-06-29-SpringRunner vs. SpringBootTest","2024-06-29-Trunk Based Development","2024-06-29-Using the Apache Commons Lang 3 for Comparing Objects in Java","2024-06-29-Check if a String Is Strictly Alphanumeric With Java","2024-06-29-Difference Between Information Hiding and Encapsulation","2024-06-29-Create a GraalVM Docker Image","2024-06-29-Get File Extension From MIME Type in Java","2024-06-29-Validate Boolean Type in Spring Boot","2024-06-29-How to Detect the Username Using Java","2024-06-29-Spring Boot Application on Liberica Runtime Container","2024-06-29-How to Support UTF 8 Encoding in Eclipse","2024-06-29-How to Subscribe a Kafka Consumer to Multiple Topics","2024-06-29-Convert a String with Unicode Encoding to a String of Letters","2024-06-29-Check if a List Contains a String Element While Ignoring Case","2024-06-29-Get All Record Fields and Its Values via Reflection"]},{text:"2024 06 30",prefix:"2024-06-30/",collapsible:!0,children:["2024-06-30-CATALINA OPTS vs. JAVA OPTS in Apache Tomcat","2024-06-30-Intro to Gradle Lint Plugin","2024-06-30-Difference Between Hashtable and ConcurrentHashMap in Java","2024-06-30-Sequenced Collections in Java 21","2024-06-30-Java Double vs. BigDecimal","2024-06-30-Closing Java IO Streams","2024-06-30-Streams vs. Loops in Java","2024-06-30-When to Call System.out.flush   in Java ","2024-06-30-Value Based Classes in Java","2024-06-30-Detect EOF in Java","2024-06-30-Mock Same Method with Different Parameters","2024-06-30-What Is a TLAB or Thread Local Allocation Buffer in Java ","2024-06-30-Differences Between Heap Dump  Thread Dump and Core Dump","2024-06-30-Add Minutes to a Time String in Java","2024-06-30-Assert Regex Matches in JUnit","2024-06-30-JSON File Data Into Kafka Topic","2024-06-30-Guide to Reading YAML Content in Kotlin","2024-06-30-Log4j 2 Configuration Using a Properties File","2024-06-30-A Guide to Log4j and the log4j.properties File in Java","2024-06-30-Maven Multi Module Project Coverage With Jacoco","2024-06-30-Overview of Mockito MockedConstruction","2024-06-30-Query With IN Clause in Spring Data Cassandra","2024-06-30-Difference Between permitAll   and anonymous   in Spring Security","2024-06-30-Expand Columns with Apache POI","2024-06-30-Create List of Object From Another Type Using Java 8","2024-06-30-Test Main Method with JUnit","2024-06-30-Detect Security Vulnerabilities with Snyk","2024-06-30-Securing Spring Boot 3 Applications With SSL Bundles","2024-06-30-Secure Kubernetes Secrets with Vault","2024-06-30-Constructing Java Objects From Only the Class Name","2024-06-30-Creating Stream of Regex Matches","2024-06-30-Extract CN From X509 Certificate in Java","2024-06-30-Find the Middle Element of an Array in Java","2024-06-30-Replacing Single Quote with    in Java String","2024-06-30-Invoke Spring  Cacheable from Another Method of Same Bean","2024-06-30-How to Use Conditional Mapping With MapStruct","2024-06-30-How to Mock Constructors for Unit Testing using Mockito","2024-06-30-How to Permanently Enable Line Numbers in IntelliJ IDEA ","2024-06-30-How to Split an Integer Number Into Digits in Java","2024-06-30-Check if Letter Is Emoji With Java","2024-06-30-How to Get Index of an Item in Java Set","2024-06-30-How to Replace Deprecated jdbcTemplate.queryForObject and jdbcTemplate.query in Spring Boot 2.4.X and above","2024-06-30-How To Convert Excel Data Into List Of Java Objects","2024-06-30-Convert Double to String Removing Scientific Notation"]},{text:"2024 07 01",prefix:"2024-07-01/",collapsible:!0,children:["2024-07-01-Amazon SNS vs. Amazon SQS","2024-07-01-Convert Between Java LocalDate and Epoch","2024-07-01-Sorting Java Map in Descending Order","2024-07-01-Aggregate Runtime Exceptions in Java Streams","2024-07-01-What Does       Mean in Java ","2024-07-01-Conversion From 12 Hour Time to 24 Hour Time in Java","2024-07-01-HashMap with Multiple Values for the Same Key","2024-07-01-Format Multiple  or  Conditions in an If Statement in Java","2024-07-01-Why There Is No Sorted List in Java ","2024-07-01-Convert int to Long in Java","2024-07-01-Convert List to Long   Array in Java","2024-07-01-Convert an ArrayList of String to a String Array in Java","2024-07-01-Extract Text Between Square Brackets","2024-07-01-Inner Classes vs. Subclasses in Java","2024-07-01-Clamp Function in Java","2024-07-01-Programmatic Generation of JSON Schemas in Java","2024-07-01-Calculating the Sum of Two Arrays in Java","2024-07-01-bootstrap server in Kafka Configuration","2024-07-01-Breadth First Search Algorithm in Kotlin","2024-07-01-The Composite Pattern in Kotlin","2024-07-01-Built in Testcontainers Support in Spring Boot","2024-07-01-Get Values and Keys as ArrayList From a HashMap","2024-07-01-Lock Header Rows With Apache POI","2024-07-01-Update an Existing Amazon S3 Object Using Java","2024-07-01-Generate Models Using OpenAPI With Lombok Annotations","2024-07-01-Creating a Telegram Bot with Spring Boot","2024-07-01-Set a Parameter in an HttpServletRequest in Java","2024-07-01-Get a Random Element From a Set in Java","2024-07-01-Stop Executing Further Code in Java","2024-07-01-Creating a Magic Square in Java","2024-07-01-Get the Indexes of Regex Pattern Matches in Java","2024-07-01-Calculate Distance Between Two Coordinates in Java","2024-07-01-Executing SQL Script File in Java","2024-07-01-How to Speed Up Maven Build","2024-07-01-How To Rename Files and Folders in Amazon S3","2024-07-01-How to Check if a Value Exists in a JSON Array for a Particular Key","2024-07-01-How to Fix  Error in Opening Zip File  When Running Maven","2024-07-01-Get the First n Elements of a List Into an Array","2024-07-01-Convert Epoch Time to LocalDate and LocalDateTime","2024-07-01-Reading JSON Documents as Maps and Comparing Them"]},{text:"2024 07 02",prefix:"2024-07-02/",collapsible:!0,children:["2024-07-02-A Guide to ShardingSphere","2024-07-02-CompletableFuture allOf  .join   vs. CompletableFuture.join  ","2024-07-02-Docker Compose Support in Spring Boot 3","2024-07-02-Difference between Gson  Expose and  SerializedName","2024-07-02-Guide to Java Jackson jr Library","2024-07-02- JsonSubTypes vs. Reflections for Polymorphic Deserialization in Jackson","2024-07-02-Difference Between Future  CompletableFuture  and Rxjava s Observable","2024-07-02-Guide to the yield Keyword in Java","2024-07-02-Difference Between Map.clear   and Instantiating a New Map","2024-07-02-Performance Comparison Between Different Java String Concatenation Methods","2024-07-02-Remove Duplicate Values From HashMap in Java","2024-07-02-Converting an int   to HashSet in Java","2024-07-02-Converting String or String Array to Map in Java","2024-07-02-Converting Relative to Absolute Paths in Java","2024-07-02-What Does the Holder T  Class Do in Java ","2024-07-02-Metadata GC Threshold in Java","2024-07-02-Stateless Object in Java","2024-07-02-Escape HTML Symbols in Java","2024-07-02-What s the Difference Between Iterator and ListIterator ","2024-07-02-JDBC vs. R2DBC vs. Spring JDBC vs. Spring Data JDBC","2024-07-02-Property Based Testing with jqwik","2024-07-02-Converting JsonNode Object to Map","2024-07-02-Understanding Kafka Topics and Partitions","2024-07-02-Get a Continuous Stream of Logs for Pods in Kubernetes","2024-07-02-Fail Maven Build if JUnit Coverage Falls Below Certain Threshold","2024-07-02-Matching Varargs Using MockK in Kotlin","2024-07-02-Scroll API in Spring Data JPA","2024-07-02-Pagination in Spring Webflux and Spring Data Reactive","2024-07-02-Unit Testing of System.in With JUnit","2024-07-02-Parameterized Logging With SLF4J","2024-07-02-Receiving PostreSQL Push Notifications with Spring Integration","2024-07-02-Getting Started With Apache Pulsar and Spring Boot","2024-07-02-Remove Whitespaces From a JSON in Java","2024-07-02-How to Get First Item From a Java Set","2024-07-02-How to Get the Start and End Dates of a Year Using Java","2024-07-02-How to Get Notified When a Task Completes in Java Executors","2024-07-02-How to Modify a Key in a HashMap ","2024-07-02-Convert JSON Array to Java List","2024-07-02-Check if a String Has All Unique Characters in Java","2024-07-02-Understanding the java.net.SocketException Broken Pipe Error","2024-07-02-Custom DLL Load   Fixing the  java.lang.UnsatisfiedLinkError  Error","2024-07-02-Law of Demeter in Java"]},{text:"2024 07 03",prefix:"2024-07-03/",collapsible:!0,children:["2024-07-03-Gradle Toolchains Support for JVM Projects","2024-07-03-Integer.class vs Integer.TYPE vs int.class","2024-07-03-Disable Wildcard Import in IntelliJ","2024-07-03-Setting Default Values to Null Fields in Jackson Mapping","2024-07-03-The Vector API in Java 19","2024-07-03-New Features in Java 20","2024-07-03-CompletableFuture and ThreadPool in Java","2024-07-03-Difference Between Boolean.TRUE and true in Java","2024-07-03-Difference Between Instant and LocalDateTime","2024-07-03-Split a String Into Digit and Non Digit Substrings","2024-07-03-Parallelize for Loop in Java","2024-07-03-Smart Batching in Java","2024-07-03-Pretty Print a JSON in Java","2024-07-03-Extracting a Tar File in Java","2024-07-03-Does Java Read Integers in Little Endian or Big Endian ","2024-07-03-What Is the Maximum Depth of the Java Call Stack ","2024-07-03-JAXP vs JAXB  XML Processing APIs Compared","2024-07-03-Introduction to JeroMQ","2024-07-03-Qualified this and Implicit this in Kotlin","2024-07-03-Scheduling Repeating Task in Kotlin","2024-07-03-MongoDB   Field Level Encryption","2024-07-03-Introduction to Selenide","2024-07-03-How to Convert application.properties to application.yml for Spring Boot","2024-07-03-Quick Guide to YugabyteDB","2024-07-03-Starting the Maven Build From the Point Where It Failed","2024-07-03-Documenting Spring Event Driven API Using AsyncAPI and Springwolf","2024-07-03-Removing JSON Elements With Jackson","2024-07-03-Setup Http Patch Request With OpenFeign","2024-07-03-Count the Number of Rows in Spring Data JPA","2024-07-03-Adding One Month to Current Date in Java","2024-07-03-Convert One Enum to Another Enum in Java","2024-07-03-Check if a File Is Empty in Java","2024-07-03-Getting Yesterday s Date in Java","2024-07-03-Reading a JSP Variable From JavaScript","2024-07-03-Passing a Class to a Function in Kotlin","2024-07-03-Accessing Session Attributes in Thymeleaf","2024-07-03-How to Read Zip Files Entries With Java","2024-07-03-How to Deep Copy an ArrayList in Java","2024-07-03-How to Get Last Day of a Month in Java","2024-07-03-Check if a String Contains Non Alphanumeric Characters","2024-07-03-How to Solve 403 Error in Spring Boot POST Request","2024-07-03-Get Partition Count for a Topic in Kafka"]},{text:"2024 07 04",prefix:"2024-07-04/",collapsible:!0,children:["2024-07-04-Hex Representation of a SHA 1 Digest of a String in Java","2024-07-04-Spring Boot Properties Prefix Must Be in Canonical Form","2024-07-04-Run JMeter .jmx File From the Command Line and Configure the Report File","2024-07-04-Is a Key Required as Part of Sending Messages to Kafka ","2024-07-04-What Is Elasticsearch ","2024-07-04- JsonMerge Annotation in Jackson","2024-07-04-Java IllegalStateException   getInputStream   has already been called for this request ","2024-07-04-Java Serialization  readObject   vs. readResolve  ","2024-07-04-Read Date in Java Using Scanner","2024-07-04-Lossy and Lossless Image Compression Using Java","2024-07-04-Combining Two or More Byte Arrays","2024-07-04-Sort Date Strings in Java","2024-07-04-Converting Map String  Object  to Map String  String  in Java","2024-07-04-Converting Object To Map in Java","2024-07-04-Mock a URL Connection in Java","2024-07-04-Returning a Value After Finishing Thread s Job in Java","2024-07-04-Need for Default Constructor in JPA Entities","2024-07-04-Difference Between single   and first   in Kotlin Flows","2024-07-04-Assignment in While Expression in Kotlin","2024-07-04-Cloning an Object in Kotlin","2024-07-04-Mocking Private Fields With Mockito","2024-07-04-Difference Between get   and navigate   in Selenium WebDriver","2024-07-04-Difference Between findBy and findOneBy in Spring Data JPA","2024-07-04-The Difference Between findById and getById in Spring Data","2024-07-04-Get Unique Values From an ArrayList in Java","2024-07-04-Generating WSDL Stubs With Gradle","2024-07-04-Read Data From the Beginning Using Kafka Consumer API","2024-07-04-Throw Exception for Unexpected Input for Enum With MapStruct","2024-07-04-Matching Null With Mockito","2024-07-04-Using PostgreSQL as a Message Broker","2024-07-04-Replacing Variables in a Document Template with Java","2024-07-04-Listing All AWS S3 Objects in a Bucket Using Java","2024-07-04-Check if a String Is All Uppercase or Lowercase in Java","2024-07-04-Add a Checked Attribute to Input Conditionally in Thymeleaf","2024-07-04-Asserting Equality on Two Classes Without an equals   Method","2024-07-04-How to Display a Full HTTP Response Body With Gatling","2024-07-04-How Many Days Are There in a Particular Month of a Given Year ","2024-07-04-Gray Box Testing Using the OAT Technique","2024-07-04-Understanding JPA Hibernate Associations","2024-07-04-Fix  Command Line is Too Long  in IntelliJ","2024-07-04-Resolving Mockito Exception  Wanted But Not Invoked","2024-07-04-Cognitive Complexity and Its Effect on the Code"]},{text:"2024 07 05",prefix:"2024-07-05/",collapsible:!0,children:["2024-07-05-Configuring Gradle Tasks in Spring Boot 3","2024-07-05-Converting a cURL Into Postman and Vice Versa","2024-07-05-Difference Between implementation and compile in Gradle","2024-07-05-Different Dependency Version Declarations in Gradle","2024-07-05-Hibernate Natural IDs in Spring Boot","2024-07-05-Java PrintStream to String","2024-07-05-What s the Difference between Scanner next   and nextLine   Methods ","2024-07-05-Difference Between null and Empty String in Java","2024-07-05-Execute a Method Only Once in Java","2024-07-05-Hashing With Argon2 in Java","2024-07-05-How to Take Input as String With Spaces in Java Using Scanner ","2024-07-05-Read Multiple Inputs on the Same Line in Java","2024-07-05-Working With Empty Stream in Java","2024-07-05-Convert String to Int Using Encapsulation","2024-07-05-Convert Hashmap to JSON Object in Java","2024-07-05-Converting JSON to XML in Java","2024-07-05-Write Console Output to Text File in Java","2024-07-05-Array vs. List Performance in Java","2024-07-05-Check if a List Contains an Element From Another List in Java","2024-07-05-ArrayBlockingQueue vs. LinkedBlockingQueue","2024-07-05-Classpath vs. Modulepath in Java","2024-07-05-Regular Expression   z vs  Z Anchors in Java","2024-07-05-Calculate Percentage in Kotlin","2024-07-05-Introduction to MinIO","2024-07-05-Object.toString   vs String.valueOf  ","2024-07-05-Custom WebFlux Exceptions in Spring Boot 3","2024-07-05-Spring Boot Actuator Without Spring Boot","2024-07-05-Shared Secret Authentication in Spring Boot Application","2024-07-05-Correct Use of flush   in JPA","2024-07-05-Encoding Special Characters in XML","2024-07-05-Securing Spring Boot API With API Key and Secret","2024-07-05-Generating Javadoc With Gradle","2024-07-05-Opening a New Tab Using Selenium WebDriver in Java","2024-07-05-Handle NoSuchElementException When Reading a File Through Scanner","2024-07-05-Creating Custom Iterator in Java","2024-07-05-Should We Create an Interface for Only One Implementation ","2024-07-05-Get Last N Messages in Apache Kafka Topic","2024-07-05-How to View Logs of a Pod in Kubernetes ","2024-07-05-Convert an OutputStream to an InputStream"]},{text:"2024 07 06",prefix:"2024-07-06/",collapsible:!0,children:["2024-07-06-Is CompletableFuture Non blocking ","2024-07-06-A Guide to FlexyPool","2024-07-06-Automatically Create Schemas for H2 In Memory Database","2024-07-06-Boolean Converters in Hibernate 6","2024-07-06-Scoped Values in Java 20","2024-07-06-JAVA HOME vs PATH Environment Variables","2024-07-06-Integer.parseInt scanner.nextLine    and scanner.nextInt   in Java","2024-07-06-URL Query Manipulation in Java","2024-07-06-Best Practices for Passing Many Arguments to a Method in Java","2024-07-06-Comparing Two Byte Arrays in Java","2024-07-06-Overview of NLP Libraries in Java","2024-07-06-Overriding hashCode   And equals   For Records","2024-07-06-Custom Protocol Mapper with Keycloak","2024-07-06-Testing Ktor Controllers","2024-07-06-Lombok EqualsAndHashCode Annotation","2024-07-06-StaleElementReferenceException in Selenium","2024-07-06-Spring Boot H2 JdbcSQLSyntaxErrorException expected  identifier ","2024-07-06-Introduction to Spring Modulith","2024-07-06-Self Injection With Spring","2024-07-06-Guide to Swagger Parser","2024-07-06-Difference Between th text and th value in Thymeleaf","2024-07-06-Generate UUIDs as Primary Keys With Hibernate","2024-07-06-Uploading File Using Selenium Webdriver in Java","2024-07-06-Creating a Test Suite With JUnit","2024-07-06-Retrieve the Value of an HTML Input in Selenium WebDriver","2024-07-06-Analyze  Generate and Transform Code Using Spoon in Java","2024-07-06-Encode Passwords With Spring Boot CLI","2024-07-06-Getting Pixel Array From Image in Java","2024-07-06-Remove Punctuation From a String in Java","2024-07-06-Getting the Text That Follows After the Regex Match in Java","2024-07-06-Print    Quotes Around a String in Java","2024-07-06-Find the Longest Word in a Given String in Java","2024-07-06-Find the Index of an Element in a Java Array","2024-07-06-Add Custom Headers to a Kafka Message","2024-07-06-In Place Modification of Map Entry in Kotlin","2024-07-06-Working with Virtual Threads in Spring 6","2024-07-06-Using OpenAI ChatGPT APIs in Spring Boot","2024-07-06-Cancel an Ongoing Flux in Spring WebFlux","2024-07-06-How to Persist a List of String in JPA ","2024-07-06-Converting an AAR File to a JAR File","2024-07-06-Check if the First Letter of a String Is a Number"]},{text:"2024 07 07",prefix:"2024-07-07/",collapsible:!0,children:["2024-07-07-OffsetDateTime Serialization With Jackson","2024-07-07-Java Helper vs. Utility Classes","2024-07-07-Convert Boolean to String in Java","2024-07-07-Convert Integer to Hexadecimal in Java","2024-07-07-Buffer Overflows in Java","2024-07-07-Differences Between Classpath and Sourcepath","2024-07-07-Possible Root Causes for High CPU Usage in Java","2024-07-07-Unidirectional One to Many and Cascading Delete in JPA","2024-07-07-A Guide to  Timeout Annotation in JUnit 5","2024-07-07-The Difference Between junit vintage engine and junit jupiter engine","2024-07-07-Search Users With Keycloak in Java","2024-07-07-Accessing Methods Outside Companion Object in Kotlin","2024-07-07-Private Constructors in Kotlin","2024-07-07-Using Spy in MockK","2024-07-07-Resilience4j Events Endpoints","2024-07-07-Implicit Wait vs Explicit Wait in Selenium Webdriver","2024-07-07-Get All Cached Keys with Caffeine Cache in Spring Boot","2024-07-07-SAML with Spring Boot and Spring Security","2024-07-07-Retrying Requests using Apache HttpClient","2024-07-07-Deserialize Generic Type with Jackson","2024-07-07-External Debugging With JMXTerm","2024-07-07-Use Mapper in Another Mapper with Mapstruct and Java","2024-07-07-A Guide to Spring Cloud Azure Key Vault","2024-07-07-Functional vs. Non Functional Testing","2024-07-07-Generate the Same UUID From a String in Java","2024-07-07-Remove Entity with Many to Many Relationship in JPA","2024-07-07-Loading Multiple YAML Configuration Files in Spring Boot","2024-07-07-How to Determine Date of the First Day of the Week Using LocalDate in Java","2024-07-07-Check if a Specified Key Exists in a Given S3 Bucket Using Java","2024-07-07-Integrate AWS Secrets Manager in Spring Boot","2024-07-07-Generating Time Based UUIDs","2024-07-07-Fix the JsonMappingException  Can not deserialize instance of java.util.ArrayList from Object value  token  JsonToken.START OBJECT  ","2024-07-07-Fix Spring Data JPA Exception  No Property Found for Type","2024-07-07-Parsing Date Strings with Varying Formats","2024-07-07-Reuse StringBuilder for Efficiency"]},{text:"2024 07 08",prefix:"2024-07-08/",collapsible:!0,children:["2024-07-08-Difference Between Fluent Interface and Builder Pattern in Java","2024-07-08-Moving Items Around in an Arraylist","2024-07-08-Guide to Java Project Panama","2024-07-08-Difference Between Javac and the Eclipse Compiler","2024-07-08-Download a Webpage in Java","2024-07-08-Different Ways to Create an Object in Java","2024-07-08-Convert a Number to a Letter in Java","2024-07-08-Implementing toString   on enums in Java","2024-07-08-Pipeline Design Pattern in Java","2024-07-08-Custom Constructor in Java Records","2024-07-08-Kotlin AES Encryption and Decryption","2024-07-08-Convert a Collection Into an ArrayList in Kotlin","2024-07-08-Maven Reactor","2024-07-08-Exclude a Dependency in a Maven Plugin","2024-07-08-Introduction to QuestDB","2024-07-08-Pitfalls on Testing with Spring Boot","2024-07-08-New CRUD Repository Interfaces in Spring Data 3","2024-07-08-TRUNCATE TABLE in Spring Data JPA","2024-07-08-Spring Kafka  Configure Multiple Listeners on Same Topic","2024-07-08-Can Stream.collect   Return the null Value ","2024-07-08-UUID vs. Sequential ID as Primary Key","2024-07-08-Authenticating Users with AzureAD in Spring Boot","2024-07-08-Load Testing Rest Endpoint Using Gatling","2024-07-08-Using Java Records with JPA","2024-07-08-Handle Duplicate Keys When Producing Map Using Java Stream","2024-07-08-Managing Multiple JDK Installations With jEnv","2024-07-08-Debugging Spring Method Annotations Using Lightrun","2024-07-08-API First Development with Spring Boot and OpenAPI 3.0","2024-07-08-Post form url encoded Data with Spring Cloud Feign","2024-07-08-Change Swagger UI URL prefix","2024-07-08-Run a Spring Boot Application in AWS Lambda","2024-07-08-Add Field to an Existing MongoDB Bson Filter in Java","2024-07-08-Check if an Enum Value Contains a Given String in Kotlin","2024-07-08-How to Post Raw Body Data With cURL","2024-07-08-How to configure Redis TTL with Spring Data Redis ","2024-07-08-Copying All Keys and Values From One Hashmap Onto Another Without Replacing Existing Keys and Values","2024-07-08-Introduction to Interface Driven Development  IDD ","2024-07-08-Testing Spring OAuth2 Access Control","2024-07-08-Get the Desktop Path in Java","2024-07-08-Anemic vs. Rich Domain Objects","2024-07-08-Configuring Spring Cloud FeignClient URL"]},{text:"2024 07 09",prefix:"2024-07-09/",collapsible:!0,children:["2024-07-09-Cassandra   Object Mapping with DataStax Java Driver","2024-07-09-Guide to HTTPie for Terminal","2024-07-09-Jakarta EE 10","2024-07-09-Understanding the Difference Between Stream.of   and IntStream.range  ","2024-07-09-Difference Between Class.forName   and Class.forName  .newInstance  ","2024-07-09-Initialize an ArrayList with Zeroes or Null in Java","2024-07-09-VarArgs vs Array Input Parameters in Java","2024-07-09-Combining Two Lists Into a Map in Java","2024-07-09-Convert Hex to RGB Using Java","2024-07-09-Thread.sleep   vs Awaitility.await  ","2024-07-09-Accessing Private Constructor in Java","2024-07-09-Reading PDF File Using Java","2024-07-09-Return Absolute Difference of Two Integers in Java","2024-07-09-Validating IPv4 Address in Java","2024-07-09-Single Assert Call for Multiple Properties in Java Unit Testing","2024-07-09-Memory Types in JVM","2024-07-09-Guide to Merging Two Maps in Kotlin","2024-07-09-Convert Array to Set and Vice Versa in Kotlin","2024-07-09-Guide to Quarkus Funqy","2024-07-09-Getting Started With RethinkDB","2024-07-09-Introduction to Roaring Bitmap","2024-07-09-OpenTelemetry Setup in Spring Boot Application","2024-07-09-Difference Between findBy and findAllBy in Spring Data JPA","2024-07-09-Migrate From Java 8 to Java 17","2024-07-09-Mapping an Array of Integers to Strings Using Java Streams","2024-07-09-Fix EmptyResultDataAccessException When Using JdbcTemplate","2024-07-09-Finding All Duplicates in a List in Java","2024-07-09-Find the First Embedded Occurrence of an Integer in a Java String","2024-07-09-Create Dynamic Queues in RabbitMQ","2024-07-09-Getting the Current ApplicationContext in Spring","2024-07-09-Check if Object Is an Array in Java","2024-07-09-How Do I Generate a Dashboard Report in JMeter "]},{text:"2024 07 10",prefix:"2024-07-10/",collapsible:!0,children:["2024-07-10-Case Insensitive Searching in ArrayList","2024-07-10-Flyway Out of Order Migrations","2024-07-10-Record Patterns in Java 19","2024-07-10-Structured Concurrency in Java 19","2024-07-10-Java List Interface","2024-07-10-Stream to Iterable in Java","2024-07-10-Multiply a BigDecimal by an Integer in Java","2024-07-10-Comparing a String to an Enum Value in Java","2024-07-10-Converting a String Array Into an int Array in Java","2024-07-10-Convert byte   to MultipartFile in Java","2024-07-10-Converting a Number from One Base to Another in Java","2024-07-10-Check if Command Line Arguments Are Null in Java","2024-07-10-Comparing Two JAR Files in Java","2024-07-10-Monads in Java   Optional","2024-07-10-PrintStream vs PrintWriter in Java","2024-07-10-Class Methods vs Instance Methods in Java","2024-07-10-The JVM Run Time Data Areas","2024-07-10-Difference Between JPA and Spring Data JPA","2024-07-10-Kotlin when vs. Java switch Statement","2024-07-10-Convert String to Char in Kotlin","2024-07-10-any   vs. none   vs. all   in Kotlin","2024-07-10-Lambda Expression vs. Anonymous Inner Class","2024-07-10-Introduction to ScyllaDB with Java","2024-07-10-Ahead of Time Optimizations in Spring 6","2024-07-10-Spring Boot Logback and Log4j2 Extensions","2024-07-10-Differences Between Spring Data JPA findFirst   and findTop  ","2024-07-10-NonUniqueResultException in Spring Data JPA","2024-07-10-Spring MVC   Mapping the Root URL to a Page","2024-07-10-Encoding of URI Variables on RestTemplate","2024-07-10-RESTful Microservices With RestExpress","2024-07-10-Working With Multiple Repositories in Gradle","2024-07-10-Compiling and Executing Code From a String in Java","2024-07-10-Getting Class Type From a String in Java","2024-07-10-Storing Data Triple in a List in Java","2024-07-10-Check if an Integer Value Is Null or Zero in Java","2024-07-10-Implementing Retry in Kafka Consumer","2024-07-10-Convert an ArrayList of Object to an ArrayList of String Elements","2024-07-10-Check If All the Variables of an Object Are Null"]},{text:"2024 07 11",prefix:"2024-07-11/",collapsible:!0,children:["2024-07-11-Reading and Writing With a ConcurrentHashMap","2024-07-11-Difference Between Map.ofEntries   and Map.of  ","2024-07-11-Common Exceptions of Crypto APIs in Java","2024-07-11-Alternatives for instanceof Operator in Java","2024-07-11-Convert Between int and char in Java","2024-07-11-Check JWT Expiry Without Throwing Exceptions","2024-07-11-When to Use Callable and Supplier in Java","2024-07-11-Reversing a Stack in Java","2024-07-11-String Interpolation in Java","2024-07-11-Sorting a HashSet in Java","2024-07-11-Convert Anonymous Class into Lambda in Java","2024-07-11-Guide to Splitting a String by Whitespace in Java","2024-07-11-Functors in Java","2024-07-11-Errors and Exceptions in Java","2024-07-11-Guide to Java PriorityQueue","2024-07-11-Java Generics PECS   Producer Extends Consumer Super","2024-07-11-Java Program to Print Pascal s Triangle","2024-07-11-Kotlin and Spring Boot  Injecting Configuration Properties Using  Value","2024-07-11-The Implicit Name Of the Single Parameter in Lambda Expressions  it","2024-07-11-Converting a List of Maps to a Map Grouped by Key in Kotlin","2024-07-11-MongoDB vs. Couchbase","2024-07-11-REST vs. GraphQL vs. gRPC   Which API to Choose ","2024-07-11-RxJava Single.just   vs Single.fromCallable  ","2024-07-11-Spring Boot FeignClient vs. WebClient","2024-07-11-Rate Limiting With Client IP in Spring Cloud Gateway","2024-07-11-A Guide to Spring CredHub","2024-07-11-Form Login and Basic Authentication in springdoc openapi","2024-07-11-Set the Date Format Using Apache POI","2024-07-11-Extract Values using AssertJ in Java","2024-07-11-Managing JWT With Auth0 java jwt","2024-07-11-Getting Started with Blaze Persistence","2024-07-11-Using Firebase Cloud Messaging in Spring Boot Applications","2024-07-11-Using Watermarks with iText in Java","2024-07-11-Handle Browser Tabs With Selenium","2024-07-11-Stream Large Byte   to File With WebClient","2024-07-11-Running Multiple Thread Groups in JMeter","2024-07-11-Getting a Value in JSONObject","2024-07-11-Running Spring Boot Applications with the Embedded Camunda Engine","2024-07-11-Reinitialize Singleton Bean in Spring Context","2024-07-11-Choosing the Right Java Collection","2024-07-11-Convert a List of Integers to a List of Strings","2024-07-11-Extracting JAR to a Specified Directory","2024-07-11-Fixing the No Main Manifest Attribute in Spring Boot"]},{text:"2024 07 12",prefix:"2024-07-12/",collapsible:!0,children:["2024-07-12-Persisting the Query Model","2024-07-12-BuildScripts Blocks in Gradle","2024-07-12-Jackson s Deserialization With Lombok","2024-07-12-The Factory Design Pattern in Java","2024-07-12-Convert java.util.Date to java.sql.Date","2024-07-12-Convert Between LocalDateTime and ZonedDateTime","2024-07-12-Uses for Optional in Java","2024-07-12-Thread vs. Single Thread Executor Service","2024-07-12-Convert String to Instant","2024-07-12-Find the First Non Repeating Character in a String in Java","2024-07-12-Sort Collection of Objects by Multiple Fields in Java","2024-07-12-Slicing Arrays in Java","2024-07-12-Strong  Weak  Soft  and Phantom References in Java","2024-07-12-Object Validation After Deserialization","2024-07-12-Can a Java Application Use More Memory Than the Heap Size ","2024-07-12-Java Course Team Lead with Spring Experience  Remote   Part Time   not open ","2024-07-12-JUnit   Testing Methods That Call System.exit  ","2024-07-12-Kafka s Shift from ZooKeeper to Kraft","2024-07-12-Kong Ingress Controller with Spring Boot","2024-07-12-The Visitor Pattern in Kotlin","2024-07-12-Determine Operating System in Kotlin","2024-07-12-Guide to Filters in MongoDB","2024-07-12-Spring  EnableMethodSecurity Annotation","2024-07-12-Overriding the Values of Remote Properties in Spring Cloud Config","2024-07-12-SpringRunner vs MockitoJUnitRunner","2024-07-12-Expression Types in Thymeleaf","2024-07-12-Access HTTPS REST Service Using Spring RestTemplate","2024-07-12-Finding Max Date in List Using Streams","2024-07-12-Working with Tabular Data Using Tablesaw","2024-07-12-Filling a List With All Enum Values in Java","2024-07-12-Get Information About a PDF in Java","2024-07-12-Check if a Number Is Prime in Kotlin","2024-07-12-Generate Unique ObjectId in MongoDB","2024-07-12-Enable and Disable Endpoints at Runtime With Spring Boot","2024-07-12-Retain Only Digits and Decimal Separator in String","2024-07-12-Inserting an Object in an ArrayList at a Specific Position","2024-07-12-How to Insert a HashMap Into MongoDB With Java ","2024-07-12-Fixing Selenium WebDriver Executable Path Error"]},{text:"2024 07 13",prefix:"2024-07-13/",collapsible:!0,children:["2024-07-13-Using Groovy in Spring","2024-07-13-Difference Between Map and MultivaluedMap in Java","2024-07-13-Implementing Factory Pattern With Generics in Java","2024-07-13-Variable Instantiation on Declaration vs. on Constructor in Java","2024-07-13-Convert String to String Array","2024-07-13-Convert String to char in Java","2024-07-13-Capitalize the First Letter of a String in Java","2024-07-13-Mocking Java InputStream Object","2024-07-13-Infinity in Java","2024-07-13-Difference Between Java Enumeration and Iterator","2024-07-13-Coupling in Java","2024-07-13-Gravity Bead Sort in Java","2024-07-13-Editing Existing PDF Files in Java","2024-07-13-Validating URL in Java","2024-07-13-Java Literals","2024-07-13-Port Scanning With Java","2024-07-13-assertAll   vs Multiple Assertions in JUnit5","2024-07-13-Kotlin Spring Developer to help with brainstorming topics for a site  Remote   Part Time ","2024-07-13-Difference Between Value and Emit in MutableStateFlow Kotlin","2024-07-13-Creating a Map from Two Arrays in Kotlin","2024-07-13-Counting Occurrences of a Value in a List in Kotlin","2024-07-13-TLS Setup in MySQL and Spring Boot Application","2024-07-13-Channels and Connections in RabbitMQ","2024-07-13-Difference Between Flux and Mono","2024-07-13-Redis Sentinel vs Clustering","2024-07-13-Guide to Resilience4j With Spring Boot","2024-07-13-Guide to Simple Binary Encoding","2024-07-13-Comparison Between Mono s doOnNext   and doOnSuccess  ","2024-07-13-Log Properties in a Spring Boot Application","2024-07-13-Difference Between URI.create   and new URI  ","2024-07-13-Setting Time To Live Value for Caching","2024-07-13-Uploading a File and JSON Data in Postman","2024-07-13-Send Array as Part of x www form urlencoded Using Postman","2024-07-13-Limiting the Requests per Second With WebClient","2024-07-13-Patterns for Iterating Over Large Result Sets With Spring Data JPA","2024-07-13-Using Streams to Collect Into a TreeSet","2024-07-13-How to Log to the Console in Color","2024-07-13-How to Resolve Spring Webflux DataBufferLimitException","2024-07-13-How to Access the First Element of a Flux","2024-07-13-Message Delivery Semantics in Streaming Platforms","2024-07-13-Understanding java.lang.Thread.State  WAITING  parking ","2024-07-13-Fixing the  java  integer number too large  Error","2024-07-13-Dealing with  java.lang.OutOfMemoryError  PermGen space  Error"]},{text:"2024 07 14",prefix:"2024-07-14/",collapsible:!0,children:["2024-07-14-Guide to the Storage Engine in Apache Cassandra","2024-07-14-Difference Between Class.getResource   and ClassLoader.getResource  ","2024-07-14-Guide to Classgraph Library","2024-07-14-Java Scanner Taking a Character Input","2024-07-14-Convert between JSON and Protobuf","2024-07-14-Differences Between Paths.get and Path.of","2024-07-14-Create Date From Unix Timestamp in Java","2024-07-14-Handle Classes With the Same Name in Java","2024-07-14-Writing a List of Strings Into a Text File","2024-07-14-Generate the MD5 Checksum for a File in Java","2024-07-14-What Is the null Type in Java ","2024-07-14-Set vs List in Java","2024-07-14-TriFunction Interface in Java","2024-07-14-String Concatenation in Java","2024-07-14-Static Fields and Garbage Collection","2024-07-14-Java Program to Find the Roots of a Quadratic Equation","2024-07-14-The Proxy Pattern in Kotlin","2024-07-14-Insert Array Inside an Object in MongoDB","2024-07-14-A Guide to Variables in Postman","2024-07-14-Getting the Filename From a String Containing an Absolute File Path","2024-07-14-Using HAProxy as an API Gateway for Routing and Rate Limiting","2024-07-14-Dispatching Queries in Axon Framework","2024-07-14-Constructing a Relative Path From Two Absolute Paths in Java","2024-07-14-Create a BMI Calculator in Java","2024-07-14-Creating Random Numbers With No Duplicates in Java","2024-07-14-Getting Binary Representation of Int in Kotlin","2024-07-14-Guide to Find the Java .class Version","2024-07-14-Convert a List to a Comma Separated String"]},{text:"2024 07 15",prefix:"2024-07-15/",collapsible:!0,children:["2024-07-15-Apache Camel Conditional Routing","2024-07-15-Feign Client Exception Handling","2024-07-15-Difference Between Arrays.asList   and List.of  ","2024-07-15-Toggle a Boolean Variable in Java","2024-07-15-List All Factors of a Number in Java","2024-07-15-Make Division of Two Integers Result in a Float","2024-07-15-Check if a Number Is Positive or Negative in Java","2024-07-15-Compare Characters in Java","2024-07-15-Armstrong Numbers in Java","2024-07-15-Multitenancy With Spring Data JPA","2024-07-15-Spring JDBC Batch Inserts","2024-07-15-Swagger  Specify Two Responses with the Same Response Code","2024-07-15-Define an Array of Varying Types in OpenAPI","2024-07-15-Connect to Multiple Databases Using Spring Data MongoDB","2024-07-15-PKCE Support for Secret Clients with Spring Security","2024-07-15-Remove the Last Character of a Java StringBuilder","2024-07-15-Debugging an Application Running in Docker With IntelliJ IDEA","2024-07-15-Reading JSON From a URL in Java","2024-07-15-How to Fix Git  Refusing to Merge Unrelated Histories ","2024-07-15-How to Parse an INI File in Java","2024-07-15-What Is  Locked Ownable Synchronizers  in Thread Dump ","2024-07-15-Algorithm to Identify and Validate a Credit Card Number"]},{text:"2024 07 16",prefix:"2024-07-16/",collapsible:!0,children:["2024-07-16-Spring Data MongoDB   Configure Connection","2024-07-16-Arrays.asList   vs Collections.singletonList  ","2024-07-16-Dockerizing a Java Application","2024-07-16-Java 8 Streams  Multiple Filters vs. Complex Condition","2024-07-16-Volatile vs. Atomic Variables in Java","2024-07-16-Integer.toString   vs String.valueOf   in Java","2024-07-16-Named Placeholders in String Formatting","2024-07-16-Permutations of a String in Java","2024-07-16-Implementing a Map with Multiple Keys in Java","2024-07-16-Static vs. Instance Initializer Block in Java","2024-07-16-Filter Java Stream to 1 and Only 1 Element","2024-07-16-A Guide to Java Source and Target Options","2024-07-16-Scanning Java Annotations at Runtime","2024-07-16-Skip Null Values When Converting a List to a Map in Kotlin","2024-07-16-Convert File to Byte Array in Kotlin","2024-07-16-Check if a Number Can Be Expressed as Sum of Two Prime Numbers in Kotlin","2024-07-16-Maven Snapshot Repository vs Release Repository","2024-07-16-Spring Boot 3 and Spring Framework 6.0   What s New","2024-07-16-Testing Spring JMS","2024-07-16-Spring Security  Upgrading the Deprecated WebSecurityConfigurerAdapter","2024-07-16- Operation vs  ApiResponse in Swagger","2024-07-16-Using Environment Variables in Spring Boot s Properties Files","2024-07-16-Log4j2   Logging to Both File and Console","2024-07-16-Upload Image With Spring Boot and Thymeleaf","2024-07-16-Reading Flux Into a Single InputStream Using Spring Reactive WebClient","2024-07-16-Get the Number of Messages in an Apache Kafka Topic","2024-07-16-Replace Element at a Specific Index in a Java ArrayList","2024-07-16-Remove Whitespace From a String in Java","2024-07-16-Apply Default Global SecurityScheme in springdoc openapi","2024-07-16-Display Logged in User s Information in Thymeleaf","2024-07-16-How to Check Whether an Integer Exists in a Range with Java","2024-07-16-How to Configure Conditional Dependencies in Gradle","2024-07-16-How To Find Maven Dependencies","2024-07-16-Import Swagger APIs into Postman","2024-07-16-Get the Current Stack Trace in Java","2024-07-16-Sending SOAP Request via Postman"]},{text:"2024 07 17",prefix:"2024-07-17/",collapsible:!0,children:["2024-07-17-Processing the Response Body in Spring Cloud Gateway","2024-07-17-Difference Between Flux.create and Flux.generate","2024-07-17-Hibernate s  Detached Entity Passed to Persist  Error","2024-07-17-Java 14 Record vs. Lombok","2024-07-17-Difference Between Java SE EE ME","2024-07-17-JavaScript Function Call with Thymeleaf","2024-07-17-Unit Test Private Methods in Java","2024-07-17-Is There a Destructor in Java ","2024-07-17-Use Cases for Static Methods in Java","2024-07-17-Advantages and Disadvantages of Using Java Wildcard Imports","2024-07-17-Difference Between collect   and collectLatest   in Kotlin Flows","2024-07-17-Kotlin Equivalent of Java s equalsIgnoreCase  ","2024-07-17-Convert String Array to Int Array in Kotlin","2024-07-17-Introduction to Lightrun with Java","2024-07-17-A Guide to Maven Encoding","2024-07-17-UUID as Entity ID in MongoDB","2024-07-17-Query Documents using Document ID in MongoDB","2024-07-17-Guide to Find in MongoDB","2024-07-17-Unique Field in MongoDB Document in Spring Data","2024-07-17-Difference Between form data  x www form urlencoded and raw in Postman","2024-07-17-Spring Boot   Testing Redis With Testcontainers","2024-07-17-Spring Boot   Keycloak Integration Testing with Testcontainers","2024-07-17-What Are the Spring Boot Default Memory Settings ","2024-07-17-Spring Data JPA   Run an App Without a Database","2024-07-17-Spring Data Rest   Serializing the Entity ID","2024-07-17-Guide to Creating Jar Executables and Windows Executables from Java","2024-07-17-Get the Full Path of a JAR File From a Class","2024-07-17-Handle Spring Security Exceptions With  ExceptionHandler","2024-07-17-Count Documents Using Spring Data MongoDB Repository","2024-07-17-Instantiating Multiple Beans of the Same Class with Spring Annotations","2024-07-17-Check if at Least Two Out of Three Booleans Are True in Java","2024-07-17-Check if a Number Is Odd or Even in Java","2024-07-17-Delete Files and Subdirectories in a Directory in Kotlin","2024-07-17-Using Dates in CRUD Operations in MongoDB","2024-07-17-How to Calculate  Time Ago  in Java","2024-07-17-How to Truncate a String in Java","2024-07-17-Validate an XML File Against an XSD File","2024-07-17-How to Convert InputStream to Base64 String","2024-07-17-How to Split a Stream into Multiple Streams","2024-07-17-Clearing a StringBuilder or StringBuffer","2024-07-17-Creating JAR Files Programmatically"]},{text:"2024 07 18",prefix:"2024-07-18/",collapsible:!0,children:["2024-07-18-Get Domain Name From Given URL in Java","2024-07-18-Apache ActiveMQ vs. Kafka","2024-07-18-Constraint Composition with Bean Validation","2024-07-18-Expose GraphQL Field with Different Name","2024-07-18-Java  int char Cannot Be Dereferenced  Error","2024-07-18-Adding Parameters to Java HttpClient Requests","2024-07-18-Java HttpClient Timeout","2024-07-18-Java Scanner useDelimiter with Examples","2024-07-18-Difference Between Thread s Context Class Loader and Normal Class Loader","2024-07-18-Reverse a Number in Java","2024-07-18-What Is the JDK com.sun.proxy. Proxy Class ","2024-07-18-Introduction to Spring Cloud Sidecar","2024-07-18-Spring Web Service Integration Tests with  WebServiceServerTest","2024-07-18-Tomcat Warning  To Prevent a Memory Leak  the JDBC Driver Has Been Forcibly Unregistered ","2024-07-18-Calling Private Methods of a Class From Outside the Class","2024-07-18-Setting Request Headers Using Feign","2024-07-18-Posting with Java HttpClient","2024-07-18-Custom HTTP Header With the Java HttpClient","2024-07-18-Using Enums With when   in Kotlin","2024-07-18-Sending CSRF Token From Postman REST Client","2024-07-18-Joining Tables With Spring Data JPA Specifications","2024-07-18-Building Native Images With Spring Native and Liberica Tools With a Speed Comparison","2024-07-18-Using Transactions for Read Only Operations","2024-07-18-Printing All Elements of a String Array in a Single Line in Kotlin","2024-07-18-Starting Spring Boot Application in Docker With Profile","2024-07-18-Find Files That Match Wildcard Strings in Java","2024-07-18-Converting a JDBC ResultSet to JSON in Java","2024-07-18-Sorting Objects in a List by Date","2024-07-18-Check if a Character Is a Vowel in Java","2024-07-18-Disabling Keycloak Security in Spring Boot","2024-07-18-Configure MongoDB Collection Name for a Class in Spring Data","2024-07-18-Get Keycloak User ID in Spring","2024-07-18- RequestMapping Value in Properties File","2024-07-18-Configure JWT Authentication for OpenAPI","2024-07-18-How to Play Sound With Java","2024-07-18-How to Change a Value in a Mutable List in Kotlin","2024-07-18-How to Mock HttpServletRequest","2024-07-18-Check if BigDecimal Value Is Zero"]},{text:"2024 07 19",prefix:"2024-07-19/",collapsible:!0,children:["2024-07-19-Spark DataFrame","2024-07-19-Gradle Build Cache Basics","2024-07-19-Return Map from GraphQL","2024-07-19-Error Handling in GraphQL With Spring Boot","2024-07-19-Hibernate s  Not Null Property References a Null or Transient Value  Error","2024-07-19-Distinct Queries in HQL","2024-07-19-Deduction Based Polymorphism in Jackson 2.12","2024-07-19-Java 9 Illegal Reflective Access Warning","2024-07-19-Java HttpClient With SSL","2024-07-19-Java HttpClient Basic Authentication","2024-07-19-Java Scanner.skip Method with Examples","2024-07-19-Differences Between Iterator and Iterable and How to Use Them ","2024-07-19-List vs. ArrayList in Java","2024-07-19-Differences Between set   and lazySet   in Java Atomic Variables","2024-07-19-Difference Between    and equals   in Java","2024-07-19-Implements vs. Extends in Java","2024-07-19-Illegal Character Compilation Error","2024-07-19-Swap Two Variables in Java","2024-07-19-Creating a Java Array from Regular Expression Matches","2024-07-19-Convert Between boolean and int in Java","2024-07-19-Serialize a Lambda in Java","2024-07-19-Single Sign On Solutions for Java Applications","2024-07-19-Exception Handling With Jersey","2024-07-19-JPA and Hibernate   Criteria vs. JPQL vs. HQL Query","2024-07-19-Create a Function That Works for All Enum Classes in Kotlin","2024-07-19-Liquibase vs Flyway","2024-07-19-Spring Cloud   Disable Discovery Clients with Profiles","2024-07-19-Generate a Random Value From an Enum","2024-07-19-Get the IP Address of the Current Machine Using Java","2024-07-19-Compile Multiple Java Source Files Using the Command Line","2024-07-19-Check Whether a String Is Valid JSON in Java","2024-07-19-Get the ASCII Value of a Character in Java","2024-07-19-Add Header to Every Request in Postman","2024-07-19-Finding All Beans with a Custom Annotation","2024-07-19-Hide a Request Field in Swagger API","2024-07-19-Handle Spring Security Exceptions","2024-07-19-How to Remove Null and Empty Values from a List in Kotlin","2024-07-19-How to Initialize a List of Lists in Kotlin","2024-07-19-Spring Security Authorization with OPA","2024-07-19-How to Disable a Maven Plugin Defined in a Parent POM","2024-07-19-Checking Connection to MongoDB"]},{text:"2024 07 20",prefix:"2024-07-20/",collapsible:!0,children:["2024-07-20-Apache Camel Routes Testing in Spring Boot","2024-07-20-Basic Authentication in JMeter","2024-07-20-SSO with Apache Tomcat","2024-07-20-Introduction to Jakarta EE MVC   Eclipse Krazo","2024-07-20-The for each Loop in Java","2024-07-20-Java Error  bad operand types for binary operator ","2024-07-20-Format Instant to String in Java","2024-07-20-Convert long to int Type in Java","2024-07-20-Convert Byte Size Into a Human Readable Format in Java","2024-07-20-Automorphic Numbers in Java","2024-07-20-Pretty Print XML in Java","2024-07-20-Read User Input Until a Condition Is Met","2024-07-20-Acquire a Lock by a Key in Java","2024-07-20-Common Command Line Compile Errors in Java","2024-07-20-Java Operators","2024-07-20-Java Error  variable might not have been initialized ","2024-07-20-BootstrapMode for JPA Repositories","2024-07-20-Sorting a String Alphabetically in Kotlin","2024-07-20-Underscore Operator for Type Arguments in Kotlin","2024-07-20-Iterate Through a List and Add Items in Kotlin","2024-07-20-Case Insensitive Sorting in MongoDB","2024-07-20-Push and Set Operations in Same MongoDB Update","2024-07-20-Bulk Update of Documents in MongoDB","2024-07-20-Push Operations in MongoDB","2024-07-20-Guide to Upsert in MongoDB","2024-07-20-Retrieve a Value from MongoDB by Its Key Name","2024-07-20-Using Nginx as a Forward Proxy","2024-07-20-Difference Between POJO  JavaBeans  DTO and VO","2024-07-20-How Does the Spring Singleton Bean Serve Concurrent Requests ","2024-07-20-Add Prefix to All Spring Boot Controllers","2024-07-20-Send a SOAP Object with Feign Client","2024-07-20-Getting Started With GraphQL SPQR and Spring Boot","2024-07-20-Compile All Java Classes in Directory Structure with javac","2024-07-20-Creating a Web Application With Ktor and Thymeleaf","2024-07-20-Logging MongoDB Queries with Spring Boot","2024-07-20-Authentication With Spring Security and MongoDB","2024-07-20-Set List of Objects in Swagger API Response","2024-07-20-Subtract Days from a Date in Java","2024-07-20-Import Data to MongoDB From JSON File Using Java","2024-07-20-Get the Number of Rows in a ResultSet"]},{text:"2024 07 21",prefix:"2024-07-21/",collapsible:!0,children:["2024-07-21-Does GC Release Back Memory to OS ","2024-07-21-Error   trustAnchors parameter must be non empty ","2024-07-21-Building a Web App Using Fauna and Spring for Your First Web Agency Client","2024-07-21-Secondary Indexes in Cassandra","2024-07-21-What Is an Apache Maven Artifact ","2024-07-21-Gradle  sourceCompatiblity vs targetCompatibility","2024-07-21-Hibernate s addScalar   Method","2024-07-21-HttpMessageNotWritableException  No Converter for  class    With Preset Content Type","2024-07-21-Guide to ByteBuffer","2024-07-21-Java Missing Return Statement","2024-07-21-Difference Between Map and HashMap in Java","2024-07-21-Convert Between Byte Array and UUID in Java","2024-07-21-Producer Consumer Problem With Example in Java","2024-07-21-Java ArrayIndexOutOfBoundsException","2024-07-21-Make a Call to a GraphQL Service from a Java Application","2024-07-21-JDBC Connection Status","2024-07-21-Mediator Pattern in Kotlin","2024-07-21-Update Documents in MongoDB","2024-07-21-Check Collection Existence in MongoDB","2024-07-21-Spring  Autowired Field Null   Common Causes and Solutions","2024-07-21-Configure and Use Multiple DataSources in Spring Boot","2024-07-21-Introduction to OAuth2RestTemplate","2024-07-21-Spring Security   Configuring Different URLs","2024-07-21-Document Enum in Swagger","2024-07-21-Customizing Zuul Exceptions","2024-07-21-Enable Logging for Spring Security","2024-07-21-Retrieve Original Message From Feign ErrorDecoder","2024-07-21-Check if a User Is Logged in With Servlets and JSP","2024-07-21-Connecting to a NoSQL Database with Spring Boot","2024-07-21-URL Rewriting With Spring Cloud Gateway","2024-07-21-Create a Simple  Rock Paper Scissors  Game in Java","2024-07-21-Provide an OAuth2 Token to a Feign Client","2024-07-21-How to use JNI s RegisterNatives   method ","2024-07-21-How to Calculate Standard Deviation in Kotlin","2024-07-21-How to Invert a Map in Java","2024-07-21-How to Create a New Entry in a Map","2024-07-21-Looking for a Java Developer with Spring Experience  Remote   Part Time   not open ","2024-07-21-Update Multiple Fields in a MongoDB Document","2024-07-21-Create an Empty Map in Java"]},{text:"2024 07 22",prefix:"2024-07-22/",collapsible:!0,children:["2024-07-22-Cassandra Query Cheat Sheet","2024-07-22-Cassandra Batch in Cassandra Query Language and Java","2024-07-22-An Introduction to Domain Graph Service  DGS  Framework","2024-07-22-Hibernate Validator Annotation Processor in Depth","2024-07-22-Hidden Classes in Java 15","2024-07-22-An Introduction to InstantSource in Java 17","2024-07-22-Random Number Generators in Java 17","2024-07-22-Java Concurrent HashSet Equivalent to ConcurrentHashMap","2024-07-22-Java IdentityHashMap Class and Its Use Cases","2024-07-22-What Is the Difference Between NIO and NIO.2 ","2024-07-22-Multiple Line Code Example in Javadoc Comment","2024-07-22-Adding EventHandler to JavaFX Button","2024-07-22-String equals   Vs contentEquals   in Java","2024-07-22-Working with  Unknown Source  Stack Traces in Java","2024-07-22-Split a String Every n Characters in Java","2024-07-22-SequenceInputStream Class in Java","2024-07-22-Constructor Specification in Java","2024-07-22-A Brief History of the Java Programming Language","2024-07-22-Keycloak Integration   OAuth2 and OpenID with Swagger UI","2024-07-22-Comparing wait    sleep    and delay   in Kotlin","2024-07-22-Data Objects in Kotlin","2024-07-22-Lombok Configuration System","2024-07-22-Failed to Load ApplicationContext for JUnit Test of Spring Controller","2024-07-22-Introduction to Spring Cloud Load Balancer","2024-07-22-Using Spring Cloud Gateway with OAuth 2.0 Patterns","2024-07-22-Printing Thread Info in Log File Using Log4j2","2024-07-22-Setting Example and Description with Swagger","2024-07-22-Generating a Secure AES Key in Java","2024-07-22-Computing an X509 Certificate s Thumbprint in Java","2024-07-22-Get Last Inserted Document ID in MongoDB With Java Driver","2024-07-22-Get the Name of the Currently Executing Test in JUnit","2024-07-22-Get Current Trace ID in Spring Cloud Sleuth","2024-07-22-Remove Basic Error Controller In SpringFox Swagger UI","2024-07-22-Check if a String Ends with a Certain Pattern in Java","2024-07-22-How to Extract Individual Values From a JSON String","2024-07-22-How to Access EntityManager with Spring Data","2024-07-22-Find All Jars Containing Given Class","2024-07-22-Generating a Java String of N Repeated Characters","2024-07-22-Retrying Feign Calls"]},{text:"2024 07 23",prefix:"2024-07-23/",collapsible:!0,children:["2024-07-23-Is Cassandra a Column Oriented or Column Family Database ","2024-07-23-Replication Strategies and Partitioning in Cassandra","2024-07-23-Serialize and Deserialize Booleans as Integers With Jackson","2024-07-23-Java HashMap With Different Value Types","2024-07-23-Solving the Hide Utility Class Public Constructor Sonar Warning","2024-07-23-Simulate touch Command in Java","2024-07-23-Volatile Variables and Thread Safety","2024-07-23-Reading Values From Excel in Java","2024-07-23-Use Dot  .  as the Decimal Separator in Java","2024-07-23-Convert String to Float and Back in Java","2024-07-23-JMX Ports","2024-07-23-Kafka Streams With Spring Boot","2024-07-23-Using return Inside a Lambda in Kotlin","2024-07-23-Remove Duplicate Dependencies with Maven","2024-07-23-Why Maven Uses a Different JDK","2024-07-23-Micronaut vs. Spring Boot","2024-07-23-Guide to Netflix Spectator","2024-07-23-Content Security Policy with Spring Security","2024-07-23-415 Unsupported MediaType in Spring Application","2024-07-23-Unix Domain Socket in Java 16","2024-07-23-Getting a Bit at a Certain Position from Integral Values","2024-07-23-Custom Validation with Swagger Codegen","2024-07-23-Remote Monitoring with VisualVM and JMX","2024-07-23-Check if an Enum Value Exists in Java","2024-07-23-Set the Name of a Thread in Java","2024-07-23-Speed up Spring Boot Startup Time"]},{text:"2024 07 24",prefix:"2024-07-24/",collapsible:!0,children:["2024-07-24-Request Routing and Snitches in Cassandra","2024-07-24-CassandraUnit Test Tutorial","2024-07-24-New Features in Java 17","2024-07-24-Introduction to HexFormat in Java 17","2024-07-24-Splitting a Java String by Multiple Delimiters","2024-07-24-Chaining Constructors in Java","2024-07-24-HMAC in Java","2024-07-24-Constructors in Java Abstract Classes","2024-07-24-List All the Classes Loaded in the JVM","2024-07-24-LDAP Authentication Using Pure Java","2024-07-24-Declaring Val and Var Variables in Lombok","2024-07-24-What Is OncePerRequestFilter ","2024-07-24-Deserialize Snake Case to Camel Case With Jackson","2024-07-24-Remove HTML Tags Using Java","2024-07-24-Invoke a Static Method Using Java Reflection API","2024-07-24-Get all the Keys in a JSON String Using JsonNode","2024-07-24-Logging Queries with Spring Data Cassandra","2024-07-24-Split a String Only on the First Occurrence of Delimiter","2024-07-24-Iterate Through an Array in Reverse Order in Kotlin","2024-07-24-Importing Maven Project into Eclipse","2024-07-24-Ignoring Commas in Quotes When Splitting a Comma separated String","2024-07-24-Assert That a Java Optional Has a Certain Value","2024-07-24-Check if the First Letter of a String Is Uppercase","2024-07-24-Overriding Spring Boot Managed Dependency Versions"]},{text:"2024 07 25",prefix:"2024-07-25/",collapsible:!0,children:["2024-07-25-Using a Custom Class as a Key in a Java HashMap","2024-07-25-Cassandra Frozen Keyword","2024-07-25-Snapshotting Aggregates in Axon","2024-07-25-Hibernate s  Object References an Unsaved Transient Instance  Error","2024-07-25-New Features in Java 16","2024-07-25-Java Map   keySet   vs. entrySet   vs. values   Methods","2024-07-25-Pattern Matching for Switch","2024-07-25-Convert an Object to a Byte Array in Java","2024-07-25-Convert Long to String in Java","2024-07-25-Convert a Byte Array to a Numeric Representation in Java","2024-07-25-Parallel Test Execution for JUnit 5","2024-07-25-Format Swagger Text Descriptions","2024-07-25-Prim s Algorithm in Kotlin","2024-07-25-Reactive Streams API with Ratpack","2024-07-25-Spring Boot vs Quarkus","2024-07-25-Spring Security   Request Rejected Exception","2024-07-25-Get a Submap From a HashMap in Java","2024-07-25-Multiline Text in Excel Cell Using Apache POI","2024-07-25-Guide to Using ModelMapper","2024-07-25-Using Test Containers With Spring Data Cassandra","2024-07-25-Get a Field s Annotations Using Reflection","2024-07-25-Update the Value Associated With a Key in a HashMap","2024-07-25-Add a Reference to Method Parameters in Javadoc","2024-07-25-Saving Date Values in Spring Data Cassandra","2024-07-25-JUnit 4 on How to Ignore a Base Test Class"]},{text:"2024 07 26",prefix:"2024-07-26/",collapsible:!0,children:["2024-07-26-Custom Serializers in Apache Kafka","2024-07-26-Cassandra Partition Key  Composite Key  and Clustering Key","2024-07-26-Priority of a Thread in Java","2024-07-26-Access Control Models","2024-07-26-Result Class in Kotlin","2024-07-26-Is Kotlin Pass By Value or Pass By Reference ","2024-07-26-Maven dependencyManagement vs. dependencies Tags","2024-07-26-Spring Data with ArangoDB","2024-07-26-Generate a Java Class From JSON","2024-07-26-Run JUnit Test Cases From the Command Line","2024-07-26-Running a Single Test or Method With Maven","2024-07-26-Test WebSocket APIs With Postman","2024-07-26-Inserting Delays Between Requests in Apache JMeter","2024-07-26-Connect to Apache Kafka Running in Docker","2024-07-26-Deploying a Java War in a Docker Container","2024-07-26-Enabling Unlimited Strength Cryptography in Java","2024-07-26-Compare the Content of Two Files in Java","2024-07-26-Count Spaces in a Java String","2024-07-26-Handling Exceptions in Project Reactor","2024-07-26-Change the Default Location of the Log4j2 Configuration File in Spring Boot","2024-07-26-Convert an Array to a String","2024-07-26-Format a Milliseconds Duration to HH MM SS","2024-07-26-Get All Running JVM Threads","2024-07-26-Connecting to a Specific Schema in JDBC","2024-07-26-Fixing the  Declared package does not match the expected package  Error"]},{text:"2024 07 27",prefix:"2024-07-27/",collapsible:!0,children:["2024-07-27-An Intro to Dapr with Spring Cloud Gateway","2024-07-27-Guava s Futures and ListenableFuture","2024-07-27-Guide to Java BigInteger","2024-07-27-Java Annotation Attribute Value Restrictions","2024-07-27-Is java.sql.Connection Thread Safe ","2024-07-27-Significance of Getters and Setters in Java","2024-07-27-Cyclically Rotate Array by One in Kotlin","2024-07-27-Intro to Ktorm  ORM Framework for Kotlin","2024-07-27-Util Classes in Kotlin","2024-07-27-Additional Source Directories in Maven","2024-07-27-Default Values for Maven Properties","2024-07-27-Disable the Maven Javadoc Plugin","2024-07-27-Difference Between MVC and MVP Patterns","2024-07-27-Why Missing Annotations Don t Cause ClassNotFoundException","2024-07-27-Find Whether an IP Address Is in the Specified Range or Not in Java","2024-07-27-Writing Log Data to Syslog Using Log4j2","2024-07-27-Creating a Self Signed Certificate With OpenSSL","2024-07-27-Set JWT with Spring Boot and Swagger UI","2024-07-27-Creating a Kubernetes Admission Controller in Java","2024-07-27-Hosting a Maven Repository on GitHub","2024-07-27-Throwing Exceptions in Constructors","2024-07-27-Architecture of a Geospatial Application with Java","2024-07-27-How to Create Password Protected Zip Files and Unzip Them in Java","2024-07-27-How to Implement LRU Cache in Java","2024-07-27-Looking for a Java Team Lead with Spring Experience  Remote   Part Time   not open ","2024-07-27-Converting a PEM File to Java KeyStore Format"]},{text:"2024 07 28",prefix:"2024-07-28/",collapsible:!0,children:["2024-07-28-Cluster  Datacenters  Racks and Nodes in Cassandra","2024-07-28- Code too large  Compilation Error in Java","2024-07-28-Converting String to BigInteger in Java","2024-07-28-3DES in Java","2024-07-28-Interface With Default Methods vs Abstract Class","2024-07-28-Collection.toArray new T 0   or .toArray new T size  ","2024-07-28-JPA Entities and the Serializable Interface","2024-07-28-A Comparison Between JPA and JDBC","2024-07-28-The java.lang.NoClassDefFoundError in JUnit","2024-07-28-Find the GC Algorithm Used by a JVM Instance","2024-07-28-Difference Between Maven Surefire and Failsafe Plugins","2024-07-28-Guide to the ModelAssert Library for JSON","2024-07-28-What Does Mono.defer   Do ","2024-07-28-Enabling Logging for Apache HttpClient","2024-07-28-Build a Dashboard With Cassandra  Astra  REST   GraphQL   Recording Status Updates","2024-07-28-Mask Sensitive Data in Logs With Logback","2024-07-28-Download a Binary File Using OkHttp","2024-07-28-Converting Camel Case and Title Case to Words in Java","2024-07-28-How to Convert Integer List to IntArray in Kotlin","2024-07-28-How to Implement Min Max Heap in Java","2024-07-28-How to Get the Number of Threads in a Java Process","2024-07-28-Monitor the Consumer Lag in Apache Kafka","2024-07-28-Wire Tap Enterprise Integration Pattern","2024-07-28-Determine if All Elements Are the Same in a Kotlin List"]},{text:"2024 07 29",prefix:"2024-07-29/",collapsible:!0,children:["2024-07-29-Local JAR Files as Gradle Dependencies","2024-07-29-Converting String to BigDecimal in Java","2024-07-29-IllegalAccessError in Java","2024-07-29-Secret Key and String Conversion in Java","2024-07-29-Private Methods in Java Interfaces","2024-07-29-Non Capturing Regex Groups in Java","2024-07-29-JPA Support   State of the Tools Ecosystem in 2021","2024-07-29-JVM Parameters InitialRAMPercentage  MinRAMPercentage  and MaxRAMPercentage","2024-07-29-Kotlin  .let   vs if not null","2024-07-29-Remove Elements From a List While Iterating in Kotlin","2024-07-29-Difference Between Super  Simplest  and Effective POM","2024-07-29-Spring Boot Error ApplicationContextException","2024-07-29-Multipart Request Handling in Spring","2024-07-29-Spring Validation in the Service Layer","2024-07-29-Build a Dashboard Using Cassandra  Astra  and Stargate","2024-07-29-Creating  Updating and Deleting Resources with the Java Kubernetes API","2024-07-29-Inserting Null Into an Integer Column Using JDBC","2024-07-29-Observability in Distributed Systems","2024-07-29-Find All Numbers in a String in Java","2024-07-29-Finding All Classes in a Java Package","2024-07-29-How to Implement a Soft Delete with Spring JPA","2024-07-29-Defining Unique Constraints in JPA"]},{text:"Archive",prefix:"Archive/",collapsible:!0,children:["Can  Transactional and  Async Work Together ","2024-06-21-Intro to the Apache Commons CLI","Intro to the Apache Commons Compress Project","Intro to Apache Commons Configuration Project","Consumer Processing of Kafka Messages With Delay","Handling Nulls in ArrayList.addAll  ","BigDecimal equals   vs. compareTo  ","Introduction to Brave","CompletableFuture vs. Mono","Introduction to DuckDB","Add an Aggregation to an Elasticsearch Query","2024-06-20-Guide to ExecutorService vs. CompletableFuture","Configuring Retry Policy for gRPC Request","Polymorphism with Gson","2024-06-19-The  Struct Annotation Type in Hibernate   Structured User Defined Types","2024-06-20- Subselect Annotation in Hibernate","Git Integration in IntelliJ IDEA","Convert Jackson JsonNode to Typed Collection","Collecting into Map using Collectors.toMap   vs Collectors.groupingBy  ","Implement the Builder Pattern in Java 8","2024-06-19-New Features in Java 21","Introduction to Java 22","2024-06-20-Java InputStream vs. InputStreamReader","PrintWriter write   vs print   Method in Java","2024-06-20-Normalizing the EOL Character in Java","Introduction to JavaParser","2024-06-20-How to Convert Excel to JSON in Java","Unit Test for hashCode   in Java","Difference Between Iterator.forEachRemaining   and Iterable.forEach  ","Difference Between Optional.of   and Optional.ofNullable   in Java","2024-06-19-Statements Before super   in Java","2024-06-20-Converting UTF 8 to ISO 8859 1 in Java","Java中不同数值类型的比较","Compare the Numbers of Different Types","Convert From int to short in Java","Supply Enum Value to an Annotation From a Constant in Java","Fault Tolerance in Java Using Failsafe","2024-06-20-Reading a .gz File Line by Line Using GZIPInputStream","2024-06-21-Parsing HTML Table in Java With Jsoup","/posts/baeldung/Archive/Replacing%20Strings%20in%20Java%20Using%20Regex_%20Back%20Reference%20vs.%20Lookaround.html","2024-06-21-Check if a Number Is a Happy Number in Java","Difference Between Casting to String and String.valueOf  ","Converting Float ArrayList to Primitive Array in Java","Convert InputStream to Stream in Java","Java中将int转换为无符号字节","2024-06-20-Flatten a Stream of Maps to a Single Map in Java","Convert an Optional to an ArrayList in Java","Converting short to byte   in Java","2024-06-19-Convert TemporalAccessor to LocalDate","Convert 2D Array Into 1D Array","Convert Decimal to Fraction in Java","Converting Image to BufferedImage in Java","Java中将字符串转换为OffsetDateTime","2024-06-19-Convert a Phone Number in Words to Number with Java","Set Matrix Elements to Zero in Java","Pass a Class as a Parameter in Java","Convert a Queue to a List","Print Distinct Characters of a String in Java","Extracting Text Between Parentheses in Java","Get the Indices of an Array After Sorting in Java","2024-06-20-Representation of Integers at a Bit Level in Java","Check if Two Strings Are Permutations of Each Other in Java","Check if a Number Is Power of 2 in Java","2024-06-20-Checking if a Date Object Equals Yesterday","2024-06-19-Check if an Element Is Present in a Set in Java","2024-06-19-Internet Address Resolution SPI in Java","OpenAI API Client in Java","2024-06-19-Immutable vs Unmodifiable Collection in Java","Monads in Java","2024-06-21-Calculate Percentiles in Java","Calculating Moving Averages in Java","How to Iterate a List of Maps in Java","Print the Default Value When Overriding toString   Method","Return Non-null Elements From Java Map Operation","Parallel Collection Processing with Parallel Collectors and Virtual Threads","Introduction to JFreeChart","Clear Managed Entities in JPA Hibernate","Inheritance vs. Composition in JPA","2024-06-21-Commit Offsets in Kafka","2024-06-20-A Guide to Kotlin Context Receivers","2024-06-20-Guide to Duration in Kotlin","2024-06-20-Difference Between eachCount   and eachCountTo   Methods in Kotlin","2024-06-20-Guide to the HexFormat API","2024-06-20-Use of Backticks in Kotlin","2024-06-20-Passing a Type to Generic Method in Kotlin","2024-06-21-HTML Builder in Kotlin","2024-06-20-Variable Shadowing in Kotlin","2024-06-20-Avoiding the ConcurrentModificationException in Kotlin","2024-06-20-Parallel Operations on Kotlin Collections","2024-06-19-Introduction to Light 4J","Difference Between Lombok  AllArgsConstructor   RequiredArgsConstructor and  NoArgConstructor","Understanding Maven Dependency Graph or Tree","2024-06-19-Multiple Level Mock Injection Into Mockito Spy Objects","The Difference Between doAnswer   and thenReturn   in Mockito","Full and Partial Text Search in MongoDB","Role Based Access Control in Quarkus","2024-06-20-Querydsl vs. JPA Criteria","Comparison Between Flux.map() and Flux.doOnNext()","2024-06-21-Introduction to Redpanda","2024-06-20-Finding Element by Attribute in Selenium","Introduction to Simple Java Mail","2024-06-19-Logging in Spring Boot With Loki","2024-06-21-Spring Security AuthorizationManager","Spring WebClient exchange   vs retrieve  ","2024-06-19-The Difference Between Throwing an Exception and Mono.error   in Spring Webflux","Introduction to SSHJ","Continue the Test Even After Assertion Failure in TestNG","2024-06-20-Vigen re Cipher in Java","2024-06-20-Invalid Characters in XML","Perform Action Only if All Optionals Are Available","2024-06-20-Getting a Kotlin KClass from a Package Class Name String","2024-06-19-Get Last n Characters From a String","Code Coverage vs. Test Coverage","Using Reactor Mono.cache   for Memoization","Using Comparator.nullsLast() to Avoid NullPointerException When Sorting","Generate Java Classes From Avro Schemas Using Gradle","Compress and Create a Byte Array Using GZip","Static Code Analysis Using Infer","Download File from S3 Given a URL","Merge Multiple PDF Files Into a Single PDF Using Java","2024-06-19-Opening HTML File Using Java","Extract Text From a HTML Tag with Regex","Join Two Tables Using jOOQ","Save Child Objects Automatically Using JPA","Mapping Enum to String Using MapStruct","Map LocalDateTime to Instant in MapStruct","Get JSON Content as Object Using MockMVC","Monitor a Spring Boot App Using Prometheus","2024-06-21-Capturing Method Arguments When Running Spock Tests","Using @Autowired and @InjectMocks in Spring Boot Tests","Get Nextval From Sequence With Spring JPA","2024-06-20-Implement Two Level Cache With Spring","Get the Position of Key Value in LinkedHashMap Using Its Key","Fix Spring Boot H2 JdbcSQLSyntaxErrorException  Table not found ","2024-06-20-Creating a Spring Security Key for Signing a JWT Token","2024-06-19-Logging in Apache Camel","2024-06-19-Checking Which Java Version Is Running in Eclipse","Add Global Exception Interceptor in gRPC Server","2024-06-19-Get a Path to a Resource in a Java JAR File","2024-06-20-Include null Value in JSON Serialization","2024-06-20-When to Use Setter Methods or Constructors for Setting a Variable s Value in Java","Create HashMap with Character Count of a String in Java","2024-06-20-Add One Element to an Immutable List in Java","Declare an Enum in an Inner Class in Java","2024-06-21-Finding the Majority Element of an Array in Java","Convert Between CLOB and String in Java","How to Convert org.w3c.dom.Document to String in Java","Finding the Second Smallest Integer in an Array in Java","Finding the Redirected URL of a URL in Java","Finding the nth Last Occurrence of char in String","Mocking Protected Method in Java","Remove All Characters Before a Specific Character in Java","2024-06-21-Obtaining the Last Path Segment of a URI in Java","Get the First and the Last Elements From an Array in Java","Get 2 s Complement of a Number in Java","Reading CSV Headers Into a List","2024-06-21-Refresh and Fetch an Entity After Save in JPA","2024-06-20-Using the  Value Annotation in Kotlin","2024-06-20-Serialize Enum Property to JSON in Kotlin","2024-06-20-Iterating Over Components of Object in Kotlin","Disable Logging From a Specific Class in Logback","Install Java on macOS","Logging SQL Queries to the Console in Mybatis","Get the Response Body in Spring Boot Filter","2024-06-20-Dynamically Managing Kafka Listeners in Spring Boot","2024-06-19-Disable  Cacheable in Spring Boot","Implement Update Or Insert in Spring Data JPA","2024-06-20-Create Spring Prototype Scope Bean with Runtime Arguments","2024-06-19-Disable  EnableScheduling on Spring Tests","Finding Minimum and Maximum in a 2D Array","Finding the Index of the Smallest Element in an Array","2024-06-21-Adding Elements to a Collection During Iteration","2024-06-20-Dynamically Register Spring Beans Based on Properties","How to Intercept a Request and Add Headers in WebFlux","How to Make Multiple REST Calls in CompletableFuture","How to Set JVM Arguments in IntelliJ IDEA ","How to Implement Elvis Operator in Java 8","How to Use Pair With Java PriorityQueue","How to Convert XML to PDF","2024-06-19-How to Scale a Bufferedimage in Java ","How to Fix EOFException in Java","How to Convert Between java.sql.Timestamp and ZonedDateTime in Java","2024-06-21-How to Autowire a Spring Bean in a Servlet Filter","How to Unit Test an ExecutorService Without Using Thread.sleep  ","How to Compile Java to WASM  Web Assembly ","How to Specify the logback.xml Location","How to Check if Optional Contains Value Equal to T Object","2024-06-19-How to Check Number Perfection","How to Test a Spring AOP Aspect","2024-06-19-How to Test Spring Application Events","Find the Date of Easter Sunday for the Given Year","Finding the Next Higher Number With the Same Digits","Find the Length of the Longest Symmetric Substring","2024-06-21-Finding the Peak Elements of a List","Convert Google Protocol Buffer Timestamp to LocalDate","2024-06-20-Convert RxJava Single to Kotlin Coroutine Deferred","2024-06-20-Saga Pattern in a Microservices Architecture","PersistenceUnit vs. PersistenceContext","探索Java中将枚举值从常量传递到注解的可能性","Exploring Complex Number Arithmetic Operations in Java","2024-06-20-Check if a Given Time Lies Between Two Times Regardless of Date","2024-06-21-Find the Largest Number Possible After Removing k Digits of a Number","2024-06-20-Fix Ambiguous Method Call Error in Mockito","/posts/baeldung/Archive/Solving%20Spring%20Data%20JPA%20ConverterNotFoundException_%20No%20converter%20found.html","Resolving Security Exception  java.security.UnrecoverableKeyException  Cannot Recover Key","Create and Run Apache JMeter Test Scripts via Java Program"]}],"/posts/articles/":["gRPC Authentication in Java Using Application Layer Transport Security (ALTS)","mongo-share",{text:"Postgresql",prefix:"postgresql/",collapsible:!0,children:["在Mac说安装postgresql并且创建一个数据库单独给一个用户赋予权限"]}]},A2=n=>{const{icon:t="",color:e,size:s}=n,o=e||s?{}:null;return e&&(o.color=e),s&&(o.height=Number.isNaN(Number(s))?s:`${s}px`),et(t)?r("img",{class:"icon",src:t,alt:"","no-view":"",style:o}):Be(t)?r("img",{class:"icon",src:ha(t),alt:"","aria-hidden":"","no-view":"",style:o}):r(cn("FontIcon"),n)};A2.displayName="HopeIcon";var Ha=A2;const f2=()=>{const n=pa();return I(()=>n.value.author)},$_="http://.",At=()=>{const n=kt(),t=Mn();return e=>{if(e)if(Be(e))t.path!==e&&n.push(e);else if(bs(e))window&&window.open(e);else{const s=t.path.slice(0,t.path.lastIndexOf("/"));n.push(new URL(`${s}/${encodeURI(e)}`,$_).pathname)}}},I2=()=>{const n=da(),t=f2();return I(()=>{const{author:e}=n.value;return e?ke(e):e===!1?[]:ke(t.value,!1)})},X_=()=>{const n=da(),t=ba(Symbol.for("categoryMap"));return I(()=>c2(n.value.category??n.value.categories).map(e=>{var s;return{name:e,path:((s=t==null?void 0:t.value.map[e])==null?void 0:s.path)??""}}))},Z_=()=>{const n=da(),t=ba(Symbol.for("tagMap"));return I(()=>u2(n.value.tag??n.value.tags).map(e=>{var s;return{name:e,path:((s=t==null?void 0:t.value.map[e])==null?void 0:s.path)??""}}))},Y_=()=>{const n=da(),t=fa();return I(()=>{const e=rp(n.value.date);if(e)return e;const{createdTime:s}=t.value.git??{};return s?new Date(s):null})},a1=()=>{const n=pa(),t=fa(),e=da(),s=I2(),o=X_(),p=Z_(),i=Y_(),l=v2(),c=W_(),u=I(()=>({author:s.value,category:o.value,date:i.value,localizedDate:t.value.localizedDate,tag:p.value,isOriginal:e.value.isOriginal??!1,readingTime:l.value,readingTimeLocale:c.value,pageview:e.value.pageview??!0})),d=I(()=>e.value.pageInfo??n.value.pageInfo??null);return{info:u,items:d}},{mobileBreakPoint:n1,pcBreakPoint:t1}=ot,zi=n=>n.endsWith("px")?Number(n.slice(0,-2)):null,Me=()=>{const n=X(!1),t=X(!1),e=()=>{n.value=window.innerWidth<=(zi(n1)??719),t.value=window.innerWidth>=(zi(t1)??1440)};return Ca("resize",e,!1),Ca("orientationchange",e,!1),Ea(()=>{e()}),{isMobile:n,isPC:t}},y2=Symbol(""),Fe=()=>{const n=ba(y2);if(!n)throw new Error("useDarkmode() is called without provider.");return n},e1=n=>{const t=fn(),e=_m(),s=I(()=>t.value.darkmode??"switch"),o=Kt("vuepress-theme-hope-scheme","auto"),p=I(()=>{const l=s.value;return l==="disable"?!1:l==="enable"?!0:l==="auto"?e.value:l==="toggle"?o.value==="dark":o.value==="dark"||o.value==="auto"&&e.value}),i=I(()=>{const l=s.value;return l==="switch"||l==="toggle"});n.provide(y2,{canToggle:i,config:s,isDarkmode:p,status:o}),Object.defineProperties(n.config.globalProperties,{$isDarkmode:{get:()=>p.value}})},s1=()=>{const{config:n,isDarkmode:t,status:e}=Fe();Cr(()=>{n.value==="disable"?e.value="light":n.value==="enable"?e.value="dark":n.value==="toggle"&&e.value==="auto"&&(e.value="light")}),Ea(()=>{ua(t,s=>document.documentElement.setAttribute("data-theme",s?"dark":"light"),{immediate:!0})})},Ae=(n,t,e=!1)=>"activeMatch"in t?new RegExp(t.activeMatch,"u").test(n.path):i2(n,t.link)?!0:"children"in t&&!e?t.children.some(s=>Ae(n,s)):!1,S2=(n,t)=>t.type==="group"?!!(t.prefix&&i2(n,t.prefix))||t.children.some(e=>e.type==="group"?S2(n,e):e.type==="page"&&Ae(n,e,!0)):!1,Do=n=>!Ss(n)&&!bs(n);var za=(n=>(n.title="t",n.shortTitle="s",n.icon="i",n.index="I",n.order="O",n.breadcrumbExclude="b",n))(za||{}),Na=(n=>(n.type="y",n.author="a",n.date="d",n.localizedDate="l",n.category="c",n.tag="g",n.isEncrypted="n",n.isOriginal="o",n.readingTime="r",n.excerpt="e",n.sticky="u",n.cover="v",n))(Na||{}),b2=(n=>(n.article="a",n.home="h",n.slide="s",n.page="p",n))(b2||{});const _p=(n,t=!1,e)=>{const{meta:s,path:o,notFound:p}=zg(n,e);return p?{text:o,link:o}:{text:!t&&s[za.shortTitle]?s[za.shortTitle]:s[za.title]||o,link:o,...s[za.icon]?{icon:s[za.icon]}:{}}},dt=(n="",t="")=>Be(t)||bs(t)?t:`${m0(n)}${t}`,Jo=({config:n,prefix:t=""})=>{const e=(s,o=t)=>{const p=Da(s)?_p(dt(o,s)):s.link?{...s,link:Do(s.link)?Jn(dt(o,s.link)).path:s.link}:s;if("children"in p){const i=dt(o,p.prefix),l=p.children==="structure"?mp[i]:p.children;return{type:"group",...p,prefix:i,children:l.map(c=>e(c,i))}}return{type:"page",...p}};return n.map(s=>e(s))},o1=({config:n,routePath:t,headerDepth:e})=>{const s=dn(n).sort((o,p)=>p.length-o.length);for(const o of s)if(Vt(decodeURI(t),o)){const p=n[o];return p?Jo({config:p==="structure"?mp[o]:p,headerDepth:e,prefix:o}):[]}return console.warn(`${decodeURI(t)} is missing sidebar config.`),[]},p1=({config:n,headerDepth:t,routeLocale:e,routePath:s})=>n==="structure"?Jo({config:mp[e],headerDepth:t,prefix:e}):So(n)?Jo({config:n,headerDepth:t}):Ut(n)?o1({config:n,routePath:s,headerDepth:t}):[],D2=Symbol(""),i1=()=>{const n=da(),t=pa(),e=st(),s=fg(),o=I(()=>n.value.home?!1:n.value.sidebar??t.value.sidebar??"structure"),p=I(()=>n.value.headerDepth??t.value.headerDepth??2),i=I(()=>p1({config:o.value,headerDepth:p.value,routeLocale:e.value,routePath:s.value}));En(D2,i)},hp=()=>{const n=ba(D2);if(!n)throw new Error("useSidebarItems() is called without provider.");return n};var r1=j({name:"PageFooter",setup(){const n=fn(),t=pa(),e=da(),s=I2(),o=I(()=>{const{copyright:u,footer:d}=e.value;return d!==!1&&!!(u||d||t.value.displayFooter)}),p=I(()=>{const{footer:u}=e.value;return u===!1?!1:Da(u)?u:t.value.footer??""}),i=I(()=>s.value.map(({name:u})=>u).join(", ")),l=u=>`Copyright © ${new Date().getFullYear()} ${i.value} ${u?`${u} Licensed`:""}`,c=I(()=>{const{copyright:u,license:d=""}=e.value,{license:g}=n.value,{copyright:m}=t.value;return u??(d?l(d):Da(m)?m:i.value||g?l(g):!1)});return()=>o.value?r("footer",{class:"vp-footer-wrapper"},[p.value?r("div",{class:"vp-footer",innerHTML:p.value}):null,c.value?r("div",{class:"vp-copyright",innerHTML:c.value}):null]):null}}),qa=j({name:"AutoLink",props:{config:{type:Object,required:!0},exact:Boolean,noExternalLinkIcon:Boolean},emits:["focusout"],slots:Object,setup(n,{emit:t,slots:e}){const s=da(),o=fn(),p=Mn(),i=J0(),l=jt(n,"config"),c=I(()=>et(l.value.link)),u=I(()=>!c.value&&bs(l.value.link)),d=I(()=>l.value.target??(c.value?"_blank":void 0)),g=I(()=>d.value==="_blank"),m=I(()=>!c.value&&!u.value&&!g.value),_=I(()=>l.value.rel??(g.value?"noopener noreferrer":"")),v=I(()=>l.value.ariaLabel??l.value.text),A=I(()=>{if(n.exact)return!1;const y=dn(i.value.locales);return y.length?y.every(k=>k!==l.value.link):l.value.link!=="/"}),S=I(()=>m.value?l.value.activeMatch?new RegExp(l.value.activeMatch,"u").test(p.path):A.value?Vt(p.path,l.value.link):p.path===l.value.link:!1),f=I(()=>n.noExternalLinkIcon===!1&&(s.value.externalLinkIcon??o.value.externalLinkIcon??!0));return()=>{const{before:y,after:k,default:D}=e,{text:M,icon:B,link:L}=l.value;return m.value?r(Pa,{class:"vp-link",to:L,active:S.value,activeClass:"active","aria-label":v.value,onFocusout:()=>t("focusout")},()=>D?D():[y?y():r(Ha,{icon:B}),M,k==null?void 0:k()]):r("a",{class:["vp-link",{"vp-external-link-icon":f}],href:L,rel:_.value,target:d.value,"aria-label":v.value,onFocusout:()=>t("focusout")},D?D():[y?y():r(Ha,{icon:B}),M,k==null?void 0:k()])}}}),l1=j({name:"NavbarDropdown",props:{config:{type:Object,required:!0}},slots:Object,setup(n,{slots:t}){const e=fa(),s=jt(n,"config"),o=I(()=>s.value.ariaLabel??s.value.text),p=X(!1);ua(()=>e.value.path,()=>{p.value=!1});const i=l=>{l.detail===0&&(p.value=!p.value)};return()=>{var l;return r("div",{class:["vp-dropdown-wrapper",{open:p.value}]},[r("button",{type:"button",class:"vp-dropdown-title","aria-label":o.value,onClick:i},[((l=t.title)==null?void 0:l.call(t))||[r(Ha,{icon:s.value.icon}),n.config.text],r("span",{class:"arrow"}),r("ul",{class:"vp-dropdown"},s.value.children.map((c,u)=>{const d=u===s.value.children.length-1;return r("li",{class:"vp-dropdown-item"},"children"in c?[r("h4",{class:"vp-dropdown-subtitle"},c.link?r(qa,{config:c,onFocusout:()=>{c.children.length===0&&d&&(p.value=!1)}}):c.text),r("ul",{class:"vp-dropdown-subitems"},c.children.map((g,m)=>r("li",{class:"vp-dropdown-subitem"},r(qa,{config:g,onFocusout:()=>{m===c.children.length-1&&d&&(p.value=!1)}}))))]:r(qa,{config:c,onFocusout:()=>{d&&(p.value=!1)}}))}))])])}}});const J2=(n,t="")=>Da(n)?_p(dt(t,n)):"children"in n?{...n,...n.link&&Do(n.link)?{link:Jn(dt(t,n.link)).path}:{},children:n.children.map(e=>J2(e,dt(t,n.prefix)))}:{...n,link:Do(n.link)?Jn(dt(t,n.link)).path:n.link},P2=()=>{const n=pa();return I(()=>(n.value.navbar||[]).map(t=>J2(t)))},c1=()=>{const n=pa(),t=I(()=>n.value.repo),e=I(()=>t.value?n_(t.value):null),s=I(()=>t.value?dp(t.value):null),o=I(()=>e.value?n.value.repoLabel??s.value??"Source":null);return I(()=>!e.value||!o.value||n.value.repoDisplay===!1?null:{type:s.value??"Source",label:o.value,link:e.value})};var u1=j({name:"NavScreenMenu",props:{config:{type:Object,required:!0}},setup(n){const t=fa(),e=jt(n,"config"),s=I(()=>e.value.ariaLabel??e.value.text),o=X(!1);ua(()=>t.value.path,()=>{o.value=!1});const p=(i,l)=>l[l.length-1]===i;return()=>[r("button",{type:"button",class:["vp-nav-screen-menu-title",{active:o.value}],"aria-label":s.value,onClick:()=>{o.value=!o.value}},[r("span",{class:"text"},[r(Ha,{icon:e.value.icon}),n.config.text]),r("span",{class:["arrow",o.value?"down":"end"]})]),r("ul",{class:["vp-nav-screen-menu",{hide:!o.value}]},e.value.children.map(i=>r("li",{class:"vp-nav-screen-menu-item"},"children"in i?[r("h4",{class:"vp-nav-screen-menu-subtitle"},i.link?r(qa,{config:i,onFocusout:()=>{p(i,e.value.children)&&i.children.length===0&&(o.value=!1)}}):i.text),r("ul",{class:"vp-nav-screen-menu-subitems"},i.children.map(l=>r("li",{class:"vp-nav-screen-menu-subitem"},r(qa,{config:l,onFocusout:()=>{p(l,i.children)&&p(i,e.value.children)&&(o.value=!1)}}))))]:r(qa,{config:i,onFocusout:()=>{p(i,e.value.children)&&(o.value=!1)}}))))]}}),d1=j({name:"NavScreenLinks",setup(){const n=P2();return()=>n.value.length?r("nav",{class:"nav-screen-links"},n.value.map(t=>r("div",{class:"navbar-links-item"},"children"in t?r(u1,{config:t}):r(qa,{config:t})))):null}});const T2=()=>r(ga,{name:"dark"},()=>r("path",{d:"M524.8 938.667h-4.267a439.893 439.893 0 0 1-313.173-134.4 446.293 446.293 0 0 1-11.093-597.334A432.213 432.213 0 0 1 366.933 90.027a42.667 42.667 0 0 1 45.227 9.386 42.667 42.667 0 0 1 10.24 42.667 358.4 358.4 0 0 0 82.773 375.893 361.387 361.387 0 0 0 376.747 82.774 42.667 42.667 0 0 1 54.187 55.04 433.493 433.493 0 0 1-99.84 154.88 438.613 438.613 0 0 1-311.467 128z"}));T2.displayName="DarkIcon";const L2=()=>r(ga,{name:"light"},()=>r("path",{d:"M952 552h-80a40 40 0 0 1 0-80h80a40 40 0 0 1 0 80zM801.88 280.08a41 41 0 0 1-57.96-57.96l57.96-58a41.04 41.04 0 0 1 58 58l-58 57.96zM512 752a240 240 0 1 1 0-480 240 240 0 0 1 0 480zm0-560a40 40 0 0 1-40-40V72a40 40 0 0 1 80 0v80a40 40 0 0 1-40 40zm-289.88 88.08-58-57.96a41.04 41.04 0 0 1 58-58l57.96 58a41 41 0 0 1-57.96 57.96zM192 512a40 40 0 0 1-40 40H72a40 40 0 0 1 0-80h80a40 40 0 0 1 40 40zm30.12 231.92a41 41 0 0 1 57.96 57.96l-57.96 58a41.04 41.04 0 0 1-58-58l58-57.96zM512 832a40 40 0 0 1 40 40v80a40 40 0 0 1-80 0v-80a40 40 0 0 1 40-40zm289.88-88.08 58 57.96a41.04 41.04 0 0 1-58 58l-57.96-58a41 41 0 0 1 57.96-57.96z"}));L2.displayName="LightIcon";const R2=()=>r(ga,{name:"auto"},()=>r("path",{d:"M512 992C246.92 992 32 777.08 32 512S246.92 32 512 32s480 214.92 480 480-214.92 480-480 480zm0-840c-198.78 0-360 161.22-360 360 0 198.84 161.22 360 360 360s360-161.16 360-360c0-198.78-161.22-360-360-360zm0 660V212c165.72 0 300 134.34 300 300 0 165.72-134.28 300-300 300z"}));R2.displayName="AutoIcon";const O2=()=>r(ga,{name:"enter-fullscreen"},()=>r("path",{d:"M762.773 90.24h-497.28c-96.106 0-174.4 78.293-174.4 174.4v497.28c0 96.107 78.294 174.4 174.4 174.4h497.28c96.107 0 175.04-78.293 174.4-174.4V264.64c0-96.213-78.186-174.4-174.4-174.4zm-387.2 761.173H215.04c-21.867 0-40.427-17.92-41.067-41.066V649.92c0-22.507 17.92-40.427 40.427-40.427 11.307 0 21.227 4.694 28.48 11.947 7.253 7.253 11.947 17.92 11.947 28.48v62.293l145.28-145.28c15.893-15.893 41.813-15.893 57.706 0 15.894 15.894 15.894 41.814 0 57.707l-145.28 145.28h62.294c22.506 0 40.426 17.92 40.426 40.427s-17.173 41.066-39.68 41.066zM650.24 165.76h160.427c21.866 0 40.426 17.92 41.066 41.067v160.426c0 22.507-17.92 40.427-40.426 40.427-11.307 0-21.227-4.693-28.48-11.947-7.254-7.253-11.947-17.92-11.947-28.48v-62.186L625.6 450.347c-15.893 15.893-41.813 15.893-57.707 0-15.893-15.894-15.893-41.814 0-57.707l145.28-145.28H650.88c-22.507 0-40.427-17.92-40.427-40.427s17.174-41.173 39.787-41.173z"}));O2.displayName="EnterFullScreenIcon";const x2=()=>r(ga,{name:"cancel-fullscreen"},()=>r("path",{d:"M778.468 78.62H247.922c-102.514 0-186.027 83.513-186.027 186.027V795.08c0 102.514 83.513 186.027 186.027 186.027h530.432c102.514 0 186.71-83.513 186.026-186.027V264.647C964.494 162.02 880.981 78.62 778.468 78.62zM250.88 574.35h171.122c23.324 0 43.122 19.115 43.804 43.805v171.121c0 24.008-19.114 43.122-43.122 43.122-12.06 0-22.641-5.006-30.378-12.743s-12.743-19.115-12.743-30.379V722.83L224.597 877.91c-16.953 16.952-44.6 16.952-61.553 0-16.953-16.954-16.953-44.602 0-61.554L318.009 661.39h-66.446c-24.007 0-43.122-19.114-43.122-43.122 0-24.12 18.432-43.918 42.439-43.918zm521.899-98.873H601.657c-23.325 0-43.122-19.114-43.805-43.804V260.55c0-24.007 19.115-43.122 43.122-43.122 12.06 0 22.642 5.007 30.379 12.743s12.743 19.115 12.743 30.38v66.445l154.965-154.965c16.953-16.953 44.601-16.953 61.554 0 16.953 16.953 16.953 44.6 0 61.554L705.536 388.55h66.446c24.007 0 43.122 19.115 43.122 43.122.114 24.007-18.318 43.804-42.325 43.804z"}));x2.displayName="CancelFullScreenIcon";const B2=()=>r(ga,{name:"outlook"},()=>[r("path",{d:"M224 800c0 9.6 3.2 44.8 6.4 54.4 6.4 48-48 76.8-48 76.8s80 41.6 147.2 0 134.4-134.4 38.4-195.2c-22.4-12.8-41.6-19.2-57.6-19.2C259.2 716.8 227.2 761.6 224 800zM560 675.2l-32 51.2c-51.2 51.2-83.2 32-83.2 32 25.6 67.2 0 112-12.8 128 25.6 6.4 51.2 9.6 80 9.6 54.4 0 102.4-9.6 150.4-32l0 0c3.2 0 3.2-3.2 3.2-3.2 22.4-16 12.8-35.2 6.4-44.8-9.6-12.8-12.8-25.6-12.8-41.6 0-54.4 60.8-99.2 137.6-99.2 6.4 0 12.8 0 22.4 0 12.8 0 38.4 9.6 48-25.6 0-3.2 0-3.2 3.2-6.4 0-3.2 3.2-6.4 3.2-6.4 6.4-16 6.4-16 6.4-19.2 9.6-35.2 16-73.6 16-115.2 0-105.6-41.6-198.4-108.8-268.8C704 396.8 560 675.2 560 675.2zM224 419.2c0-28.8 22.4-51.2 51.2-51.2 28.8 0 51.2 22.4 51.2 51.2 0 28.8-22.4 51.2-51.2 51.2C246.4 470.4 224 448 224 419.2zM320 284.8c0-22.4 19.2-41.6 41.6-41.6 22.4 0 41.6 19.2 41.6 41.6 0 22.4-19.2 41.6-41.6 41.6C339.2 326.4 320 307.2 320 284.8zM457.6 208c0-12.8 12.8-25.6 25.6-25.6 12.8 0 25.6 12.8 25.6 25.6 0 12.8-12.8 25.6-25.6 25.6C470.4 233.6 457.6 220.8 457.6 208zM128 505.6C128 592 153.6 672 201.6 736c28.8-60.8 112-60.8 124.8-60.8-16-51.2 16-99.2 16-99.2l316.8-422.4c-48-19.2-99.2-32-150.4-32C297.6 118.4 128 291.2 128 505.6zM764.8 86.4c-22.4 19.2-390.4 518.4-390.4 518.4-22.4 28.8-12.8 76.8 22.4 99.2l9.6 6.4c35.2 22.4 80 12.8 99.2-25.6 0 0 6.4-12.8 9.6-19.2 54.4-105.6 275.2-524.8 288-553.6 6.4-19.2-3.2-32-19.2-32C777.6 76.8 771.2 80 764.8 86.4z"})]);B2.displayName="OutlookIcon";var C2=j({name:"ColorModeSwitch",setup(){const{config:n,isDarkmode:t,status:e}=Fe(),s=Wa(),o=()=>{n.value==="switch"?e.value={light:"dark",dark:"auto",auto:"light"}[e.value]:e.value=e.value==="light"?"dark":"light"},p=async i=>{if(!(document.startViewTransition&&!window.matchMedia("(prefers-reduced-motion: reduce)").matches&&!s.value)||!i){o();return}const l=i.clientX,c=i.clientY,u=Math.hypot(Math.max(l,innerWidth-l),Math.max(c,innerHeight-c)),d=t.value;await document.startViewTransition(async()=>{o(),await wn()}).ready,t.value!==d&&document.documentElement.animate({clipPath:t.value?[`circle(${u}px at ${l}px ${c}px)`,`circle(0px at ${l}px ${c}px)`]:[`circle(0px at ${l}px ${c}px)`,`circle(${u}px at ${l}px ${c}px)`]},{duration:400,pseudoElement:t.value?"::view-transition-old(root)":"::view-transition-new(root)"})};return()=>r("button",{type:"button",class:"vp-color-mode-switch",id:"color-mode-switch",onClick:p},[r(R2,{style:{display:e.value==="auto"?"block":"none"}}),r(T2,{style:{display:e.value==="dark"?"block":"none"}}),r(L2,{style:{display:e.value==="light"?"block":"none"}})])}}),g1=j({name:"ColorMode",setup(){const n=pa(),{canToggle:t}=Fe(),e=I(()=>n.value.outlookLocales.darkmode);return()=>t.value?r("div",{class:"vp-color-mode"},[r("label",{class:"vp-color-mode-title",for:"color-mode-switch"},e.value),r(C2)]):null}});const qi=ot.enableThemeColor==="true";var w2=j({name:"ToggleFullScreenButton",setup(){const n=pa(),{isSupported:t,isFullscreen:e,toggle:s}=cp(),o=I(()=>n.value.outlookLocales.fullscreen);return()=>t?r("div",{class:"full-screen-wrapper"},[r("label",{class:"full-screen-title",for:"full-screen-switch"},o.value),r("button",{type:"button",id:"full-screen-switch",class:"full-screen",ariaPressed:e.value,onClick:()=>s()},e.value?r(x2):r(O2))]):null}}),V2=j({name:"OutlookSettings",setup(){const n=fn(),t=Wa(),e=I(()=>!t.value&&n.value.fullscreen);return()=>r(Ps,()=>[null,r(g1),e.value?r(w2):null])}}),m1=j({name:"NavScreen",props:{show:Boolean},emits:["close"],slots:Object,setup(n,{emit:t,slots:e}){const s=fa(),{isMobile:o}=Me(),p=La(),i=W0(p);return Ea(()=>{p.value=document.body,ua(o,l=>{!l&&n.show&&(i.value=!1,t("close"))}),ua(()=>s.value.path,()=>{i.value=!1,t("close")})}),Ht(()=>{i.value=!1}),()=>r(at,{name:"fade",onEnter:()=>{i.value=!0},onAfterLeave:()=>{i.value=!1}},()=>{var l,c;return n.show?r("div",{id:"nav-screen",class:"vp-nav-screen"},r("div",{class:"vp-nav-screen-container"},[(l=e.before)==null?void 0:l.call(e),r(d1),r("div",{class:"vp-outlook-wrapper"},r(V2)),(c=e.after)==null?void 0:c.call(e)])):null})}}),_1=j({name:"NavbarBrand",setup(){const n=st(),t=Le(),e=pa(),s=I(()=>e.value.home??n.value),o=I(()=>t.value.title),p=I(()=>e.value.navbarTitle??o.value),i=I(()=>e.value.logo?ha(e.value.logo):null),l=I(()=>e.value.logoDark?ha(e.value.logoDark):null);return()=>r(Pa,{to:s.value,class:"vp-brand"},()=>[i.value?r("img",{class:["vp-nav-logo",{light:!!l.value}],src:i.value,alt:""}):null,l.value?r("img",{class:["vp-nav-logo dark"],src:l.value,alt:""}):null,p.value?r("span",{class:["vp-site-name",{"hide-in-pad":i.value&&(e.value.hideSiteNameOnMobile??!0)}]},p.value):null])}}),h1=j({name:"NavbarLinks",setup(){const n=P2();return()=>n.value.length?r("nav",{class:"vp-nav-links"},n.value.map(t=>r("div",{class:"vp-nav-item hide-in-mobile"},"children"in t?r(l1,{config:t}):r(qa,{config:t})))):null}}),v1=j({name:"RepoLink",setup(){const n=c1();return()=>n.value?r("div",{class:"vp-nav-item vp-action"},r("a",{class:"vp-action-link",href:n.value.link,target:"_blank",rel:"noopener noreferrer","aria-label":n.value.label},r(t_,{type:n.value.type,style:{width:"1.25rem",height:"1.25rem",verticalAlign:"middle"}}))):null}});const M2=({active:n=!1},{emit:t})=>r("button",{type:"button",class:["vp-toggle-navbar-button",{"is-active":n}],"aria-label":"Toggle Navbar","aria-expanded":n,"aria-controls":"nav-screen",onClick:()=>t("toggle")},r("span",[r("span",{class:"vp-top"}),r("span",{class:"vp-middle"}),r("span",{class:"vp-bottom"})]));M2.displayName="ToggleNavbarButton";const Po=(n,{emit:t})=>r("button",{type:"button",class:"vp-toggle-sidebar-button",title:"Toggle Sidebar",onClick:()=>t("toggle")},r("span",{class:"icon"}));Po.displayName="ToggleSidebarButton",Po.emits=["toggle"];var E1=j({name:"OutlookButton",setup(){const n=fn(),t=fa(),{canToggle:e}=Fe(),{isSupported:s}=cp(),o=Wa(),p=X(!1),i=I(()=>!o.value&&n.value.fullscreen&&s),l=I(()=>e.value||i.value);return ua(()=>t.value.path,()=>{p.value=!1}),()=>l.value?r("div",{class:"vp-nav-item hide-in-mobile"},e.value&&!i.value&&!qi?r(C2):i.value&&!e.value&&!qi?r(w2):r("button",{type:"button",class:["vp-outlook-button",{open:p.value}],tabindex:"-1","aria-hidden":!0},[r(B2),r("div",{class:"vp-outlook-dropdown"},r(V2))])):null}}),k1=j({name:"NavBar",emits:["toggleSidebar"],slots:Object,setup(n,{emit:t,slots:e}){const s=pa(),{isMobile:o}=Me(),p=X(!1),i=I(()=>{const{navbarAutoHide:d="mobile"}=s.value;return d!=="none"&&(d==="always"||o.value)}),l=I(()=>s.value.navbarLayout??{start:["Brand"],center:["Links"],end:["Language","Repo","Outlook","Search"]}),c={Brand:_1,Language:ls,Links:h1,Repo:v1,Outlook:E1,Search:nn("Docsearch")?cn("Docsearch"):nn("SearchBox")?cn("SearchBox"):ls},u=d=>c[d]??(nn(d)?cn(d):ls);return()=>{var d,g,m,_,v,A,S,f,y;return[r("header",{key:"navbar",id:"navbar",class:["vp-navbar",{"auto-hide":i.value}]},[r("div",{class:"vp-navbar-start"},[r(Po,{onToggle:()=>{p.value&&(p.value=!1),t("toggleSidebar")}}),(d=e.startBefore)==null?void 0:d.call(e),(g=l.value.start)==null?void 0:g.map(k=>r(u(k))),(m=e.startAfter)==null?void 0:m.call(e)]),r("div",{class:"vp-navbar-center"},[(_=e.centerBefore)==null?void 0:_.call(e),(v=l.value.center)==null?void 0:v.map(k=>r(u(k))),(A=e.centerAfter)==null?void 0:A.call(e)]),r("div",{class:"vp-navbar-end"},[(S=e.endBefore)==null?void 0:S.call(e),(f=l.value.end)==null?void 0:f.map(k=>r(u(k))),(y=e.endAfter)==null?void 0:y.call(e),r(M2,{active:p.value,onToggle:()=>{p.value=!p.value}})])]),r(m1,{show:p.value,onClose:()=>{p.value=!1}},{before:e.screenTop?()=>e.screenTop():null,after:e.screenBottom?()=>e.screenBottom():null})]}}}),A1=j({name:"SidebarChild",props:{config:{type:Object,required:!0}},setup(n){const t=Mn();return()=>Da(n.config.link)?r(qa,{class:["vp-sidebar-link","vp-sidebar-page",{active:Ae(t,n.config,!0)}],exact:!0,config:n.config}):r("p",n,[r(Ha,{icon:n.config.icon}),n.config.text])}}),f1=j({name:"SidebarGroup",props:{config:{type:Object,required:!0},open:{type:Boolean,required:!0}},emits:["toggle"],setup(n,{emit:t}){const e=Mn(),s=I(()=>Ae(e,n.config)),o=I(()=>Ae(e,n.config,!0));return()=>{const{collapsible:p,children:i=[],icon:l,prefix:c,link:u,text:d}=n.config;return r("section",{class:"vp-sidebar-group"},[r(p?"button":"p",{class:["vp-sidebar-header",{clickable:p||u,exact:o.value,active:s.value}],...p?{type:"button",onClick:()=>t("toggle"),onKeydown:g=>{g.key==="Enter"&&t("toggle")}}:{}},[r(Ha,{icon:l}),u?r(qa,{class:"vp-sidebar-title",config:{text:d,link:u},noExternalLinkIcon:!0}):r("span",{class:"vp-sidebar-title"},d),p?r("span",{class:["vp-arrow",n.open?"down":"end"]}):null]),n.open||!p?r(F2,{key:c,config:i}):null])}}}),F2=j({name:"SidebarLinks",props:{config:{type:Array,required:!0}},setup(n){const t=Mn(),e=X(-1),s=o=>{e.value=o===e.value?-1:o};return ua(()=>t.path,()=>{const o=n.config.findIndex(p=>S2(t,p));e.value=o},{immediate:!0,flush:"post"}),()=>r("ul",{class:"vp-sidebar-links"},n.config.map((o,p)=>r("li",o.type==="group"?r(f1,{config:o,open:p===e.value,onToggle:()=>s(p)}):r(A1,{config:o}))))}}),I1=j({name:"SideBar",slots:Object,setup(n,{slots:t}){const e=Mn(),s=hp(),o=La();return Ea(()=>{ua(()=>e.hash,p=>{const i=document.querySelector(`.vp-sidebar a.vp-sidebar-link[href="${e.path}${p}"]`);if(!i)return;const{top:l,height:c}=o.value.getBoundingClientRect(),{top:u,height:d}=i.getBoundingClientRect();u<l?i.scrollIntoView(!0):u+d>l+c&&i.scrollIntoView(!1)},{immediate:!0})}),()=>{var p,i,l;return r("aside",{ref:o,key:"sidebar",id:"sidebar",class:"vp-sidebar"},[(p=t.top)==null?void 0:p.call(t),((i=t.default)==null?void 0:i.call(t))??r(F2,{config:s.value}),(l=t.bottom)==null?void 0:l.call(t)])}}}),vp=j({name:"CommonWrapper",props:{containerClass:{type:String,default:""},noNavbar:Boolean,noSidebar:Boolean,noToc:Boolean},slots:Object,setup(n,{slots:t}){const e=kt(),s=da(),o=fn(),p=pa(),{isMobile:i,isPC:l}=Me(),c=Wa(),[u,d]=ve(!1),[g,m]=ve(!1),_=hp(),v=X(!1),A=I(()=>n.noNavbar||s.value.navbar===!1||p.value.navbar===!1?!1:!!(p.value.logo??p.value.repo??p.value.navbar)),S=I(()=>n.noSidebar?!1:s.value.sidebar!==!1&&_.value.length!==0&&!s.value.home),f=I(()=>s.value.externalLinkIcon??o.value.externalLinkIcon??!0),y=I(()=>!n.noToc&&!s.value.home&&(s.value.toc??p.value.toc??!0)),k={x:0,y:0},D=L=>{k.x=L.changedTouches[0].clientX,k.y=L.changedTouches[0].clientY},M=L=>{const O=L.changedTouches[0].clientX-k.x,G=L.changedTouches[0].clientY-k.y;Math.abs(O)>Math.abs(G)*1.5&&Math.abs(O)>40&&(O>0&&k.x<=80?d(!0):d(!1))};let B=0;return Ca("scroll",em(()=>{const L=window.scrollY;L<=58||L<B?v.value=!1:B+200<L&&!u.value&&(v.value=!0),B=L},300,!0)),ua(i,L=>{L||d(!1)}),Ea(()=>{const L=W0(document.body);ua(u,G=>{L.value=G});const O=e.afterEach(()=>{d(!1)});Ht(()=>{L.value=!1,O()})}),()=>r(nn("GlobalEncrypt")?cn("GlobalEncrypt"):Ls,()=>r("div",{class:["theme-container",{"hide-navbar":v.value,"no-navbar":!A.value,"sidebar-collapsed":!i.value&&!l.value&&g.value,"sidebar-open":i.value&&u.value,"no-sidebar":!S.value&&!t.sidebar&&!t.sidebarTop&&!t.sidebarBottom,"external-link-icon":f.value,pure:c.value,"has-toc":y.value},n.containerClass,s.value.containerClass??""],onTouchStart:D,onTouchEnd:M},[A.value?r(k1,{onToggleSidebar:()=>d()},{startBefore:t.navbarStartBefore?()=>t.navbarStartBefore():null,startAfter:t.navbarStartAfter?()=>t.navbarStartAfter():null,centerBefore:t.navbarCenterBefore?()=>t.navbarCenterBefore():null,centerAfter:t.navbarCenterAfter?()=>t.navbarCenterAfter():null,endBefore:t.navbarEndBefore?()=>t.navbarEndBefore():null,endAfter:t.navbarEndAfter?()=>t.navbarEndAfter():null,screenTop:t.navScreenTop?()=>t.navScreenTop():null,screenBottom:t.navScreenBottom?()=>t.navScreenBottom():null}):null,r(at,{name:"fade"},()=>u.value?r("div",{class:"vp-sidebar-mask",onClick:()=>d(!1)}):null),r(at,{name:"fade"},()=>i.value?null:r("div",{class:"toggle-sidebar-wrapper",onClick:()=>m()},r("span",{class:["arrow",g.value?"end":"start"]}))),r(I1,{},{default:t.sidebar?()=>t.sidebar():null,top:t.sidebarTop?()=>t.sidebarTop():null,bottom:t.sidebarBottom?()=>t.sidebarBottom():null}),t.default(),r(r1)]))}});const sa=j({name:"DropTransition",props:{type:{type:String,default:"single"},delay:{type:Number,default:0},duration:{type:Number,default:.25},appear:Boolean},slots:Object,setup(n,{slots:t}){const e=o=>{o.style.transition=`transform ${n.duration}s ease-in-out ${n.delay}s, opacity ${n.duration}s ease-in-out ${n.delay}s`,o.style.transform="translateY(-20px)",o.style.opacity="0"},s=o=>{o.style.transform="translateY(0)",o.style.opacity="1"};return()=>{const o={name:"drop",appear:n.appear,onAppear:e,onAfterAppear:s,onEnter:e,onAfterEnter:s,onBeforeLeave:e},p=()=>t.default();return n.type==="group"?r(zu,o,p):r(at,o,p)}}}),Mt=({custom:n})=>r(T0,{class:["theme-hope-content",{custom:n}]});Mt.displayName="MarkdownContent",Mt.props={custom:Boolean};const j2=()=>r(ga,{name:"author"},()=>r("path",{d:"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z"}));j2.displayName="AuthorIcon";const H2=()=>r(ga,{name:"calendar"},()=>r("path",{d:"M716.4 110.137c0-18.753-14.72-33.473-33.472-33.473-18.753 0-33.473 14.72-33.473 33.473v33.473h66.993v-33.473zm-334.87 0c0-18.753-14.72-33.473-33.473-33.473s-33.52 14.72-33.52 33.473v33.473h66.993v-33.473zm468.81 33.52H716.4v100.465c0 18.753-14.72 33.473-33.472 33.473a33.145 33.145 0 01-33.473-33.473V143.657H381.53v100.465c0 18.753-14.72 33.473-33.473 33.473a33.145 33.145 0 01-33.473-33.473V143.657H180.6A134.314 134.314 0 0046.66 277.595v535.756A134.314 134.314 0 00180.6 947.289h669.74a134.36 134.36 0 00133.94-133.938V277.595a134.314 134.314 0 00-133.94-133.938zm33.473 267.877H147.126a33.145 33.145 0 01-33.473-33.473c0-18.752 14.72-33.473 33.473-33.473h736.687c18.752 0 33.472 14.72 33.472 33.473a33.145 33.145 0 01-33.472 33.473z"}));H2.displayName="CalendarIcon";const U2=()=>r(ga,{name:"category"},()=>r("path",{d:"M148.41 106.992h282.176c22.263 0 40.31 18.048 40.31 40.31V429.48c0 22.263-18.047 40.31-40.31 40.31H148.41c-22.263 0-40.311-18.047-40.311-40.31V147.302c0-22.263 18.048-40.31 40.311-40.31zM147.556 553.478H429.73c22.263 0 40.311 18.048 40.311 40.31v282.176c0 22.263-18.048 40.312-40.31 40.312H147.555c-22.263 0-40.311-18.049-40.311-40.312V593.79c0-22.263 18.048-40.311 40.31-40.311zM593.927 106.992h282.176c22.263 0 40.31 18.048 40.31 40.31V429.48c0 22.263-18.047 40.31-40.31 40.31H593.927c-22.263 0-40.311-18.047-40.311-40.31V147.302c0-22.263 18.048-40.31 40.31-40.31zM730.22 920.502H623.926c-40.925 0-74.22-33.388-74.22-74.425V623.992c0-41.038 33.387-74.424 74.425-74.424h222.085c41.038 0 74.424 33.226 74.424 74.067v114.233c0 10.244-8.304 18.548-18.547 18.548s-18.548-8.304-18.548-18.548V623.635c0-20.388-16.746-36.974-37.33-36.974H624.13c-20.585 0-37.331 16.747-37.331 37.33v222.086c0 20.585 16.654 37.331 37.126 37.331H730.22c10.243 0 18.547 8.304 18.547 18.547 0 10.244-8.304 18.547-18.547 18.547z"}));U2.displayName="CategoryIcon";const N2=()=>r(ga,{name:"print"},()=>r("path",{d:"M819.2 364.8h-44.8V128c0-17.067-14.933-32-32-32H281.6c-17.067 0-32 14.933-32 32v236.8h-44.8C145.067 364.8 96 413.867 96 473.6v192c0 59.733 49.067 108.8 108.8 108.8h44.8V896c0 17.067 14.933 32 32 32h460.8c17.067 0 32-14.933 32-32V774.4h44.8c59.733 0 108.8-49.067 108.8-108.8v-192c0-59.733-49.067-108.8-108.8-108.8zM313.6 160h396.8v204.8H313.6V160zm396.8 704H313.6V620.8h396.8V864zM864 665.6c0 25.6-19.2 44.8-44.8 44.8h-44.8V588.8c0-17.067-14.933-32-32-32H281.6c-17.067 0-32 14.933-32 32v121.6h-44.8c-25.6 0-44.8-19.2-44.8-44.8v-192c0-25.6 19.2-44.8 44.8-44.8h614.4c25.6 0 44.8 19.2 44.8 44.8v192z"}));N2.displayName="PrintIcon";const K2=()=>r(ga,{name:"tag"},()=>r("path",{d:"M939.902 458.563L910.17 144.567c-1.507-16.272-14.465-29.13-30.737-30.737L565.438 84.098h-.402c-3.215 0-5.726 1.005-7.634 2.913l-470.39 470.39a10.004 10.004 0 000 14.164l365.423 365.424c1.909 1.908 4.42 2.913 7.132 2.913s5.223-1.005 7.132-2.913l470.39-470.39c2.01-2.11 3.014-5.023 2.813-8.036zm-240.067-72.121c-35.458 0-64.286-28.828-64.286-64.286s28.828-64.285 64.286-64.285 64.286 28.828 64.286 64.285-28.829 64.286-64.286 64.286z"}));K2.displayName="TagIcon";const W2=()=>r(ga,{name:"timer"},()=>r("path",{d:"M799.387 122.15c4.402-2.978 7.38-7.897 7.38-13.463v-1.165c0-8.933-7.38-16.312-16.312-16.312H256.33c-8.933 0-16.311 7.38-16.311 16.312v1.165c0 5.825 2.977 10.874 7.637 13.592 4.143 194.44 97.22 354.963 220.201 392.763-122.204 37.542-214.893 196.511-220.2 389.397-4.661 5.049-7.638 11.651-7.638 19.03v5.825h566.49v-5.825c0-7.379-2.849-13.981-7.509-18.9-5.049-193.016-97.867-351.985-220.2-389.527 123.24-37.67 216.446-198.453 220.588-392.892zM531.16 450.445v352.632c117.674 1.553 211.787 40.778 211.787 88.676H304.097c0-48.286 95.149-87.382 213.728-88.676V450.445c-93.077-3.107-167.901-81.297-167.901-177.093 0-8.803 6.99-15.793 15.793-15.793 8.803 0 15.794 6.99 15.794 15.793 0 80.261 63.69 145.635 142.01 145.635s142.011-65.374 142.011-145.635c0-8.803 6.99-15.793 15.794-15.793s15.793 6.99 15.793 15.793c0 95.019-73.789 172.82-165.96 177.093z"}));W2.displayName="TimerIcon";const G2=()=>r(ga,{name:"word"},()=>[r("path",{d:"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z"}),r("path",{d:"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z"})]);G2.displayName="WordIcon";const pt=()=>{const n=pa();return I(()=>n.value.metaLocales)};var y1=j({name:"AuthorInfo",inheritAttrs:!1,props:{author:{type:Array,required:!0}},setup(n){const t=pt(),e=Wa();return()=>n.author.length?r("span",{class:"page-author-info","aria-label":`${t.value.author}${e.value?"":"🖊"}`,...e.value?{}:{"data-balloon-pos":"up"}},[r(j2),r("span",n.author.map(s=>s.url?r("a",{class:"page-author-item",href:s.url,target:"_blank",rel:"noopener noreferrer"},s.name):r("span",{class:"page-author-item"},s.name))),r("span",{property:"author",content:n.author.map(s=>s.name).join(", ")})]):null}}),S1=j({name:"CategoryInfo",inheritAttrs:!1,props:{category:{type:Array,required:!0}},setup(n){const t=pt(),e=At(),s=Wa();return()=>n.category.length?r("span",{class:"page-category-info","aria-label":`${t.value.category}${s.value?"":"🌈"}`,...s.value?{}:{"data-balloon-pos":"up"}},[r(U2),n.category.map(({name:o,path:p})=>r("span",{class:["page-category-item",{[`color${Ve(o,Number(ot.colorNumber))}`]:!s.value,clickable:p}],role:p?"navigation":"",onClick:()=>{p&&e(p)}},o)),r("meta",{property:"articleSection",content:n.category.map(({name:o})=>o).join(",")})]):null}}),b1=j({name:"DateInfo",inheritAttrs:!1,props:{date:{type:Object,default:null},localizedDate:{type:String,default:""}},setup(n){const t=D0(),e=pt(),s=Wa();return()=>n.date?r("span",{class:"page-date-info","aria-label":`${e.value.date}${s.value?"":"📅"}`,...s.value?{}:{"data-balloon-pos":"up"}},[r(H2),r("span",r(Ps,()=>n.localizedDate||n.date.toLocaleDateString(t.value))),r("meta",{property:"datePublished",content:n.date.toISOString()||""})]):null}}),D1=j({name:"OriginalInfo",inheritAttrs:!1,props:{isOriginal:Boolean},setup(n){const t=pt();return()=>n.isOriginal?r("span",{class:"page-original-info"},t.value.origin):null}}),J1=j({name:"ReadingTimeInfo",inheritAttrs:!1,props:{readingTime:{type:Object,default:()=>null},readingTimeLocale:{type:Object,default:()=>null}},setup(n){const t=pt(),e=Wa(),s=I(()=>{if(!n.readingTime)return null;const{minutes:o}=n.readingTime;return o<1?"PT1M":`PT${Math.round(o)}M`});return()=>{var o,p;return(o=n.readingTimeLocale)!=null&&o.time?r("span",{class:"page-reading-time-info","aria-label":`${t.value.readingTime}${e.value?"":"⌛"}`,...e.value?{}:{"data-balloon-pos":"up"}},[r(W2),r("span",(p=n.readingTimeLocale)==null?void 0:p.time),r("meta",{property:"timeRequired",content:s.value})]):null}}}),P1=j({name:"TagInfo",inheritAttrs:!1,props:{tag:{type:Array,default:()=>[]}},setup(n){const t=pt(),e=At(),s=Wa();return()=>n.tag.length?r("span",{class:"page-tag-info","aria-label":`${t.value.tag}${s.value?"":"🏷"}`,...s.value?{}:{"data-balloon-pos":"up"}},[r(K2),n.tag.map(({name:o,path:p})=>r("span",{class:["page-tag-item",{[`color${Ve(o,Number(ot.colorNumber))}`]:!s.value,clickable:p}],role:p?"navigation":"",onClick:()=>{p&&e(p)}},o)),r("meta",{property:"keywords",content:n.tag.map(({name:o})=>o).join(",")})]):null}}),T1=j({name:"ReadTimeInfo",inheritAttrs:!1,props:{readingTime:{type:Object,default:()=>null},readingTimeLocale:{type:Object,default:()=>null}},setup(n){const t=pt(),e=Wa();return()=>{var s,o,p;return(s=n.readingTimeLocale)!=null&&s.words?r("span",{class:"page-word-info","aria-label":`${t.value.words}${e.value?"":"🔠"}`,...e.value?{}:{"data-balloon-pos":"up"}},[r(G2),r("span",(o=n.readingTimeLocale)==null?void 0:o.words),r("meta",{property:"wordCount",content:(p=n.readingTime)==null?void 0:p.words})]):null}}}),z2=j({name:"PageInfo",components:{AuthorInfo:y1,CategoryInfo:S1,DateInfo:b1,OriginalInfo:D1,PageViewInfo:ls,ReadingTimeInfo:J1,TagInfo:P1,WordInfo:T1},props:{items:{type:[Array,Boolean],default:()=>["Author","Original","Date","PageView","ReadingTime","Category","Tag"]},info:{type:Object,required:!0}},setup(n){const t=Wa();return()=>n.items?r("div",{class:"page-info"},n.items.map(e=>r(cn(`${e}Info`),{...n.info,isPure:t.value}))):null}}),L1=j({name:"PrintButton",setup(){const n=fn(),t=pa();return()=>n.value.print===!1?null:r("button",{type:"button",class:"print-button",title:t.value.metaLocales.print,onClick:()=>{window.print()}},r(N2))}}),q2=j({name:"TOC",props:{items:{type:Array,default:()=>[]},headerDepth:{type:Number,default:2}},slots:Object,setup(n,{slots:t}){const e=Mn(),s=fa(),o=pt(),[p,i]=ve(),l=La(),c=X("-1.7rem"),u=g=>{var m;(m=l.value)==null||m.scrollTo({top:g,behavior:"smooth"})},d=()=>{if(l.value){const g=document.querySelector(".vp-toc-item.active");g?c.value=`${g.getBoundingClientRect().top-l.value.getBoundingClientRect().top+l.value.scrollTop}px`:c.value="-1.7rem"}else c.value="-1.7rem"};return Ea(()=>{ua(()=>e.hash,g=>{if(l.value){const m=document.querySelector(`#toc a.vp-toc-link[href$="${g}"]`);if(!m)return;const{top:_,height:v}=l.value.getBoundingClientRect(),{top:A,height:S}=m.getBoundingClientRect();A<_?u(l.value.scrollTop+A-_):A+S>_+v&&u(l.value.scrollTop+A+S-_-v)}}),ua(()=>e.fullPath,d,{flush:"post",immediate:!0})}),()=>{var v,A;const g=({title:S,level:f,slug:y})=>r(Pa,{to:`#${y}`,class:["vp-toc-link",`level${f}`],onClick:()=>{i()}},()=>S),m=(S,f)=>S.length&&f>0?r("ul",{class:"vp-toc-list"},S.map(y=>{const k=m(y.children,f-1);return[r("li",{class:["vp-toc-item",{active:e.hash===`#${y.slug}`}]},g(y)),k?r("li",k):null]})):null,_=n.items.length?m(n.items,n.headerDepth):s.value.headers?m(s.value.headers,n.headerDepth):null;return _?r("div",{class:"vp-toc-placeholder"},[r("aside",{id:"toc"},[(v=t.before)==null?void 0:v.call(t),r("div",{class:"vp-toc-header",onClick:()=>{i()}},[o.value.toc,r(L1),r("div",{class:["arrow",p.value?"down":"end"]})]),r("div",{class:["vp-toc-wrapper",p.value?"open":""],ref:l},[_,r("div",{class:"vp-toc-marker",style:{top:c.value}})]),(A=t.after)==null?void 0:A.call(t)])]):null}}}),Ep=j({name:"SkipLink",props:{content:{type:String,default:"main-content"}},setup(n){const t=fa(),e=pa(),s=La(),o=({target:p})=>{const i=document.querySelector(p.hash);if(i){const l=()=>{i.removeAttribute("tabindex"),i.removeEventListener("blur",l)};i.setAttribute("tabindex","-1"),i.addEventListener("blur",l),i.focus(),window.scrollTo(0,0)}};return Ea(()=>{ua(()=>t.value.path,()=>s.value.focus())}),()=>[r("span",{ref:s,tabindex:"-1"}),r("a",{href:`#${n.content}`,class:"vp-skip-link sr-only",onClick:o},e.value.routeLocales.skipToContent)]}});let so=null,qt=null;const To={wait:()=>so,pending:()=>{so=new Promise(n=>{qt=n})},resolve:()=>{qt==null||qt(),so=null,qt=null}},kp=(n,{slots:t})=>r(at,{name:"fade-slide-y",mode:"out-in",onBeforeEnter:To.resolve,onBeforeLeave:To.pending},()=>t.default());kp.displayName="FadeSlideY";const R1=(n,t)=>{const e=n.replace(t,"/").split("/"),s=[];let o=sp(t);return e.forEach((p,i)=>{i!==e.length-1?(o+=`${p}/`,s.push({link:o,name:p||"Home"})):p!==""&&(o+=p,s.push({link:o,name:p}))}),s},Lo=(n,{slots:t})=>{var g,m;const{bgImage:e,bgImageDark:s,bgImageStyle:o,color:p,description:i,image:l,imageDark:c,header:u,features:d=[]}=n;return r("div",{class:"vp-feature-wrapper"},[e?r("div",{class:["vp-feature-bg",{light:s}],style:[{"background-image":`url(${e})`},o]}):null,s?r("div",{class:"vp-feature-bg dark",style:[{"background-image":`url(${s})`},o]}):null,r("div",{class:"vp-feature",style:p?{color:p}:{}},[((g=t.image)==null?void 0:g.call(t,n))??[l?r("img",{class:["vp-feature-image",{light:c}],src:ha(l),alt:""}):null,c?r("img",{class:"vp-feature-image dark",src:ha(c),alt:""}):null],((m=t.info)==null?void 0:m.call(t,n))??[u?r("h2",{class:"vp-feature-header"},u):null,i?r("p",{class:"vp-feature-description",innerHTML:i}):null],d.length?r("div",{class:"vp-features"},d.map(({icon:_,title:v,details:A,link:S})=>{const f=[r("h3",{class:"vp-feature-title"},[r(Ha,{icon:_}),r("span",{innerHTML:v})]),r("p",{class:"vp-feature-details",innerHTML:A})];return S?Ss(S)?r("a",{class:"vp-feature-item link",href:S,"aria-label":v,target:"_blank"},f):r(Pa,{class:"vp-feature-item link",to:S,"aria-label":v},()=>f):r("div",{class:"vp-feature-item"},f)})):null])])};Lo.displayName="FeaturePanel";var O1=j({name:"HeroInfo",slots:Object,setup(n,{slots:t}){const e=da(),s=Le(),o=I(()=>e.value.heroFullScreen??!1),p=I(()=>{const{heroText:u,tagline:d}=e.value;return{text:u??s.value.title??"Hello",tagline:d??s.value.description??"",isFullScreen:o.value}}),i=I(()=>{const{heroText:u,heroImage:d,heroImageDark:g,heroAlt:m,heroImageStyle:_}=e.value;return{image:d?ha(d):null,imageDark:g?ha(g):null,imageStyle:_,alt:m??u??"",isFullScreen:o.value}}),l=I(()=>{const{bgImage:u,bgImageDark:d,bgImageStyle:g}=e.value;return{image:Da(u)?ha(u):null,imageDark:Da(d)?ha(d):null,bgStyle:g,isFullScreen:o.value}}),c=I(()=>e.value.actions??[]);return()=>{var u,d,g;return r("header",{class:["vp-hero-info-wrapper",{fullscreen:o.value}]},[((u=t.bg)==null?void 0:u.call(t,l.value))??[l.value.image?r("div",{class:["vp-hero-mask",{light:l.value.imageDark}],style:[{"background-image":`url(${l.value.image})`},l.value.bgStyle]}):null,l.value.imageDark?r("div",{class:"vp-hero-mask dark",style:[{"background-image":`url(${l.value.imageDark})`},l.value.bgStyle]}):null],r("div",{class:"vp-hero-info"},[((d=t.logo)==null?void 0:d.call(t,i.value))??r(sa,{appear:!0,type:"group"},()=>{const{image:m,imageDark:_,imageStyle:v,alt:A}=i.value;return[m?r("img",{key:"light",class:["vp-hero-image",{light:_}],style:v,src:m,alt:A}):null,_?r("img",{key:"dark",class:"vp-hero-image dark",style:v,src:_,alt:A}):null]}),((g=t.info)==null?void 0:g.call(t,p.value))??r("div",{class:"vp-hero-infos"},[p.value.text?r(sa,{appear:!0,delay:.04},()=>r("h1",{id:"main-title",class:"vp-hero-title"},p.value.text)):null,p.value.tagline?r(sa,{appear:!0,delay:.08},()=>r("p",{id:"main-description",innerHTML:p.value.tagline})):null,c.value.length?r(sa,{appear:!0,delay:.12},()=>r("p",{class:"vp-hero-actions"},c.value.map(m=>r(qa,{class:["vp-hero-action",m.type??"default"],config:m,noExternalLinkIcon:!0},m.icon?{before:()=>r(Ha,{icon:m.icon})}:{})))):null])])])}}});const Q2=(n,{slots:t})=>{var m,_,v;const{bgImage:e,bgImageDark:s,bgImageStyle:o,color:p,description:i,image:l,imageDark:c,header:u,highlights:d=[],type:g="un-order"}=n;return r("div",{class:"vp-highlight-wrapper",style:p?{color:p}:{}},[e?r("div",{class:["vp-highlight-bg",{light:s}],style:[{"background-image":`url(${e})`},o]}):null,s?r("div",{class:"vp-highlight-bg dark",style:[{"background-image":`url(${s})`},o]}):null,r("div",{class:"vp-highlight"},[((m=t.image)==null?void 0:m.call(t,n))??[l?r("img",{class:["vp-highlight-image",{light:c}],src:ha(l),alt:""}):null,c?r("img",{class:"vp-highlight-image dark",src:ha(c),alt:""}):null],((_=t.info)==null?void 0:_.call(t,n))??[r("div",{class:"vp-highlight-info-wrapper"},r("div",{class:"vp-highlight-info"},[u?r("h2",{class:"vp-highlight-header",innerHTML:u}):null,i?r("p",{class:"vp-highlight-description",innerHTML:i}):null,((v=t.highlights)==null?void 0:v.call(t,d))??r(g==="order"?"ol":g==="no-order"?"dl":"ul",{class:"vp-highlights"},d.map(({icon:A,title:S,details:f,link:y})=>{const k=[r(g==="no-order"?"dt":"h3",{class:"vp-highlight-title"},[A?r(Ha,{class:"vp-highlight-icon",icon:A}):null,r("span",{innerHTML:S})]),f?r(g==="no-order"?"dd":"p",{class:"vp-highlight-details",innerHTML:f}):null];return r(g==="no-order"?"div":"li",{class:["vp-highlight-item-wrapper",{link:y}]},y?Ss(y)?r("a",{class:"vp-highlight-item link",href:y,"aria-label":S,target:"_blank"},k):r(Pa,{class:"vp-highlight-item link",to:y,"aria-label":S},()=>k):r("div",{class:"vp-highlight-item"},k))}))]))]])])};Q2.displayName="HighlightPanel";var x1=j({name:"HomePage",slots:Object,setup(n,{slots:t}){const e=da(),s=I(()=>{const{features:p}=e.value;return So(p)?p:null}),o=I(()=>{const{highlights:p}=e.value;return So(p)?p:null});return()=>{var p,i,l,c;return r("main",{id:"main-content",class:"vp-page vp-project-home","aria-labelledby":e.value.heroText===null?"":"main-title"},[(p=t.top)==null?void 0:p.call(t),r(O1),((i=o.value)==null?void 0:i.map(u=>"features"in u?r(Lo,u):r(Q2,u)))??(s.value?r(sa,{appear:!0,delay:.24},()=>r(Lo,{features:s.value})):null),(l=t.center)==null?void 0:l.call(t),r(sa,{appear:!0,delay:.32},()=>r(Mt)),(c=t.bottom)==null?void 0:c.call(t)])}}}),B1=j({name:"BreadCrumb",setup(){const n=fa(),t=st(),e=da(),s=pa(),o=La([]),p=I(()=>(e.value.breadcrumb??s.value.breadcrumb??!0)&&o.value.length>1),i=I(()=>e.value.breadcrumbIcon??s.value.breadcrumbIcon??!0),l=()=>{const c=R1(n.value.path,t.value).map(({link:u,name:d})=>{const{path:g,meta:m,notFound:_}=Jn(u);return _||m[za.breadcrumbExclude]?null:{title:m[za.shortTitle]||m[za.title]||d,icon:m[za.icon],path:g}}).filter(u=>u!==null);c.length>1&&(o.value=c)};return Ea(()=>{ua(()=>n.value.path,l,{immediate:!0})}),()=>r("nav",{class:["vp-breadcrumb",{disable:!p.value}]},p.value?r("ol",{vocab:"https://schema.org/",typeof:"BreadcrumbList"},o.value.map((c,u)=>r("li",{class:{"is-active":o.value.length-1===u},property:"itemListElement",typeof:"ListItem"},[r(Pa,{to:c.path,property:"item",typeof:"WebPage"},()=>[i.value?r(Ha,{icon:c.icon}):null,r("span",{property:"name"},c.title||"Unknown")]),r("meta",{property:"position",content:u+1})]))):[])}});const Qi=(n,t)=>n===!1||Ut(n)?n:Da(n)?_p(n,!0,t):null,Ro=(n,t,e)=>{const s=n.findIndex(o=>o.link===t);if(s!==-1){const o=n[s+e];return o!=null&&o.link?o:null}for(const o of n)if("children"in o){const p=Ro(o.children,t,e);if(p)return p}return null};var C1=j({name:"PageNav",setup(){const n=pa(),t=da(),e=hp(),s=fa(),o=At(),p=Mn(),i=I(()=>{const c=Qi(t.value.prev,p.path);return c===!1?null:c||(n.value.prevLink===!1?null:Ro(e.value,s.value.path,-1))}),l=I(()=>{const c=Qi(t.value.next,p.path);return c===!1?null:c??(n.value.nextLink===!1?null:Ro(e.value,s.value.path,1))});return Ca("keydown",c=>{c.altKey&&(c.key==="ArrowRight"?l.value&&(o(l.value.link),c.preventDefault()):c.key==="ArrowLeft"&&i.value&&(o(i.value.link),c.preventDefault()))}),()=>i.value||l.value?r("nav",{class:"vp-page-nav"},[i.value?r(qa,{class:"prev",config:i.value},()=>{var c,u;return[r("div",{class:"hint"},[r("span",{class:"arrow start"}),n.value.metaLocales.prev]),r("div",{class:"link"},[r(Ha,{icon:(c=i.value)==null?void 0:c.icon}),(u=i.value)==null?void 0:u.text])]}):null,l.value?r(qa,{class:"next",config:l.value},()=>{var c,u;return[r("div",{class:"hint"},[n.value.metaLocales.next,r("span",{class:"arrow end"})]),r("div",{class:"link"},[(c=l.value)==null?void 0:c.text,r(Ha,{icon:(u=l.value)==null?void 0:u.icon})])]}):null]):null}});const w1=()=>{const n=pa(),t=fa(),e=da();return I(()=>{var s;return e.value.contributors??n.value.contributors??!0?((s=t.value.git)==null?void 0:s.contributors)??null:null})},V1={GitHub:":repo/edit/:branch/:path",GitLab:":repo/-/edit/:branch/:path",Gitee:":repo/edit/:branch/:path",Bitbucket:":repo/src/:branch/:path?mode=edit&spa=0&at=:branch&fileviewer=file-view-default"},M1=({docsRepo:n,docsBranch:t,docsDir:e,filePathRelative:s,editLinkPattern:o})=>{if(!s)return null;const p=dp(n);let i;return o?i=o:p!==null&&(i=V1[p]),i?i.replace(/:repo/u,et(n)?n:`https://github.com/${n}`).replace(/:branch/u,t).replace(/:path/u,_0(`${sp(e)}/${s}`)):null},F1=()=>{const n=pa(),t=fa(),e=da();return I(()=>{const{repo:s,docsRepo:o=s,docsBranch:p="main",docsDir:i="",editLink:l,editLinkPattern:c=""}=n.value;if(!(e.value.editLink??l??!0)||!o)return null;const u=M1({docsRepo:o,docsBranch:p,docsDir:i,editLinkPattern:c,filePathRelative:t.value.filePathRelative});return u?{text:n.value.metaLocales.editLink,link:u}:null})},j1=()=>{const n=Le(),t=pa(),e=fa(),s=da();return I(()=>{var o,p;return!(s.value.lastUpdated??t.value.lastUpdated??!0)||!((o=e.value.git)!=null&&o.updatedTime)?null:new Date((p=e.value.git)==null?void 0:p.updatedTime).toLocaleString(n.value.lang)})};var H1=j({name:"PageTitle",setup(){const n=fa(),t=da(),e=pa(),{info:s,items:o}=a1();return()=>r("div",{class:"vp-page-title"},[r("h1",[e.value.titleIcon===!1?null:r(Ha,{icon:t.value.icon}),n.value.title]),r(z2,{info:s.value,...o.value===null?{}:{items:o.value}}),r("hr")])}});const $2=()=>r(ga,{name:"edit"},()=>[r("path",{d:"M430.818 653.65a60.46 60.46 0 0 1-50.96-93.281l71.69-114.012 7.773-10.365L816.038 80.138A60.46 60.46 0 0 1 859.225 62a60.46 60.46 0 0 1 43.186 18.138l43.186 43.186a60.46 60.46 0 0 1 0 86.373L588.879 565.55l-8.637 8.637-117.466 68.234a60.46 60.46 0 0 1-31.958 11.229z"}),r("path",{d:"M728.802 962H252.891A190.883 190.883 0 0 1 62.008 771.98V296.934a190.883 190.883 0 0 1 190.883-192.61h267.754a60.46 60.46 0 0 1 0 120.92H252.891a69.962 69.962 0 0 0-69.098 69.099V771.98a69.962 69.962 0 0 0 69.098 69.098h475.911A69.962 69.962 0 0 0 797.9 771.98V503.363a60.46 60.46 0 1 1 120.922 0V771.98A190.883 190.883 0 0 1 728.802 962z"})]);$2.displayName="EditIcon";var U1=j({name:"PageMeta",setup(){const n=pa(),t=F1(),e=j1(),s=w1();return()=>{var p;const{metaLocales:o}=n.value;return r("footer",{class:"vp-page-meta"},[t.value?r("div",{class:"vp-meta-item edit-link"},r(qa,{class:"vp-meta-label",config:t.value},{before:()=>r($2)})):null,r("div",{class:"vp-meta-item git-info"},[e.value?r("div",{class:"update-time"},[r("span",{class:"vp-meta-label"},`${o.lastUpdated}: `),r(Ps,()=>r("span",{class:"vp-meta-info"},e.value))]):null,(p=s.value)!=null&&p.length?r("div",{class:"contributors"},[r("span",{class:"vp-meta-label"},`${o.contributors}: `),s.value.map(({email:i,name:l},c)=>[r("span",{class:"vp-meta-info",title:`email: ${i}`},l),c!==s.value.length-1?",":""])]):null])])}}}),N1=j({name:"NormalPage",slots:Object,setup(n,{slots:t}){const e=da(),{isDarkmode:s}=Fe(),o=pa(),p=I(()=>e.value.toc??o.value.toc??!0),i=I(()=>e.value.headerDepth??o.value.headerDepth??2);return()=>r("main",{id:"main-content",class:"vp-page"},r(nn("LocalEncrypt")?cn("LocalEncrypt"):Ls,()=>{var l,c,u,d;return[(l=t.top)==null?void 0:l.call(t),e.value.cover?r("div",{class:"page-cover"},r("img",{src:ha(e.value.cover),alt:"","no-view":""})):null,r(B1),r(H1),p.value?r(q2,{headerDepth:i.value},{before:t.tocBefore?()=>t.tocBefore():null,after:t.tocAfter?()=>t.tocAfter():null}):null,(c=t.contentBefore)==null?void 0:c.call(t),r(Mt),(u=t.contentAfter)==null?void 0:u.call(t),r(U1),r(C1),nn("CommentService")?r(cn("CommentService"),{darkmode:s.value}):null,(d=t.bottom)==null?void 0:d.call(t)]}))}}),K1=j({name:"PortfolioHero",slots:Object,setup(n,{slots:t}){const e=f2(),s=da(),o=X(0),p=I(()=>{var m;return((m=s.value.titles)==null?void 0:m[o.value])??""}),i=X(""),l=I(()=>{const{name:m,avatar:_,avatarDark:v,avatarAlt:A,avatarStyle:S}=s.value;return{name:m??e.value.name,avatar:_?ha(_):null,avatarDark:v?ha(v):null,avatarStyle:S,alt:(A||m)??""}}),c=I(()=>{const{bgImage:m,bgImageDark:_,bgImageStyle:v}=s.value;return{image:Da(m)?ha(m):null,imageDark:Da(_)?ha(_):null,bgStyle:v}}),u=I(()=>{const{welcome:m,name:_,titles:v,medias:A}=s.value;return{name:_??e.value.name,welcome:m??"👋 Hi There, I'm",title:i.value,titles:v??[],medias:A??[]}}),d=()=>{i.value="";let m=0,_=!1;const v=async()=>{if(!_)if(i.value+=p.value[m],m+=1,await wn(),m<p.value.length)setTimeout(()=>{v()},150);else{const A=u.value.titles.length;setTimeout(()=>{o.value=A<=1||o.value===u.value.titles.length-1?0:o.value+1},1e3)}};return v(),()=>{_=!0}};let g;return Ea(()=>{ua(p,()=>{g==null||g(),g=d()},{immediate:!0})}),()=>{var m,_,v;return r("section",{id:"portfolio",class:["vp-portfolio",{bg:c.value.image}]},[((m=t.bg)==null?void 0:m.call(t,c.value))??[c.value.image?r("div",{class:["vp-portfolio-mask",{light:c.value.imageDark}],style:[{background:`url(${c.value.image}) center/cover no-repeat`},c.value.bgStyle]}):null,c.value.imageDark?r("div",{class:"vp-portfolio-mask dark",style:[{background:`url(${c.value.imageDark}) center/cover no-repeat`},c.value.bgStyle]}):null],((_=t.avatar)==null?void 0:_.call(t,l.value))??r("div",{class:"vp-portfolio-avatar"},[r(sa,{delay:.04},()=>{const{avatarDark:A,name:S,alt:f,avatarStyle:y}=l.value;return[r("img",{key:"light",class:{light:A},src:l.value.avatar,title:S,alt:f,style:y}),A?r("img",{key:"dark",class:"dark",src:A,title:S,alt:f,style:y}):null]})]),r("div",{class:"vp-portfolio-container"},((v=t.info)==null?void 0:v.call(t,u.value))??r("div",{class:"vp-portfolio-info"},[r(sa,{appear:!0,delay:.08},()=>r("h6",{class:"vp-portfolio-welcome"},u.value.welcome)),r(sa,{appear:!0,delay:.12},()=>r("h1",{class:"vp-portfolio-name",id:"main-title"},u.value.name)),r(sa,{appear:!0,delay:.16},()=>r("h2",{class:"vp-portfolio-title"},i.value)),r(sa,{appear:!0,delay:.2},()=>u.value.medias.length?r("div",{class:"vp-portfolio-medias"},u.value.medias.map(({name:A,url:S,icon:f})=>r("a",{class:"vp-portfolio-media",href:S,rel:"noopener noreferrer",target:"_blank",title:A},r(Ha,{icon:f})))):nn("SocialMedias")?r(cn("SocialMedias")):null)]))])}}}),W1=j({name:"PortfolioHome",setup(){const n=da(),t=I(()=>n.value.content??"portfolio");return()=>r("main",{id:"main-content",class:"vp-page vp-portfolio-home","aria-labelledby":"main-title"},[r(K1),t.value==="none"?null:r("div",{},r(sa,{appear:!0,delay:.24},()=>r(Mt,{class:{"vp-portfolio-content":t.value==="portfolio"}})))])}}),G1=j({name:"Layout",slots:Object,setup(n,{slots:t}){const e=fn(),s=pa(),o=fa(),p=da(),i=Wa(),{isMobile:l}=Me(),c=I(()=>{var u,d;return((u=s.value.blog)==null?void 0:u.sidebarDisplay)??((d=e.value.blog)==null?void 0:d.sidebarDisplay)??"mobile"});return()=>[r(Ep),r(vp,{},{default:()=>{var u;return((u=t.default)==null?void 0:u.call(t))??(p.value.portfolio?r(W1):p.value.home?r(x1):r(i.value?Ls:kp,()=>r(N1,{key:o.value.path},{top:t.top?()=>t.top():null,bottom:t.bottom?()=>t.bottom():null,contentBefore:t.contentBefore?()=>t.contentBefore():null,contentAfter:t.contentAfter?()=>t.contentAfter():null,tocBefore:t.tocBefore?()=>t.tocBefore():null,tocAfter:t.tocAfter?()=>t.tocAfter():null})))},navScreenBottom:c.value==="none"?()=>r(cn("BloggerInfo")):null,sidebar:!l.value&&c.value==="always"?()=>r(cn("BloggerInfo")):null})]}}),z1=j({name:"NotFoundHint",setup(){const n=pa(),t=()=>{const e=n.value.routeLocales.notFoundMsg;return e[Math.floor(Math.random()*e.length)]};return()=>r("div",{class:"not-found-hint"},[r("p",{class:"error-code"},"404"),r("h1",{class:"error-title"},n.value.routeLocales.notFoundTitle),r("p",{class:"error-hint"},t())])}}),q1=j({name:"NotFound",slots:Object,setup(n,{slots:t}){const e=kt(),s=st(),o=pa();return()=>[r(Ep),r(vp,{noSidebar:!0},()=>{var p;return r("main",{id:"main-content",class:"vp-page not-found"},((p=t.default)==null?void 0:p.call(t))??[r(z1),r("div",{class:"actions"},[r("button",{type:"button",class:"action-button",onClick:()=>{window.history.go(-1)}},o.value.routeLocales.back),r("button",{type:"button",class:"action-button",onClick:()=>{e.push(o.value.home??s.value)}},o.value.routeLocales.home)])])})]}});const Q1={Email:'<svg xmlns="http://www.w3.org/2000/svg" class="icon email-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#1384FF"/><path fill="#fff" d="M270.077 286.233H751.99c32.933 0 59.86 24.855 60.274 55.51l-301.023 157L210.217 341.88c.207-30.723 26.927-55.717 59.86-55.717zm-59.929 115.714-.276 277.756c0 30.931 27.134 56.2 60.205 56.2H751.99c33.14 0 60.274-25.269 60.274-56.2V401.81L518.283 551.492a15.88 15.88 0 0 1-14.43 0L210.148 401.947z"/></svg>'},$1={category:{"/":{path:"/category/",map:{Java:{path:"/category/java/",indexes:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1e3,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049]},gRPC:{path:"/category/grpc/",indexes:[1050,1051,458,483]},PostgreSQL:{path:"/category/postgresql/",indexes:[1052,1053,1054,1055]},MacOS:{path:"/category/macos/",indexes:[1053]},"Spring Boot":{path:"/category/spring-boot/",indexes:[1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1050,1080,1081,1082,1083,1084,1085,396,421,1086,1087,465,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,636,1113,1114,1115,1116,1117,1118,1119,1120,812,1121,1122,1123,1124,1125,911,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1029,1138,1139,1140,1141,1142,1143]},JUnit:{path:"/category/junit/",indexes:[1144,282,1080,620,1145,645,688,740,765,1146,1147,999,1148,1140,1043]},数字处理:{path:"/category/%E6%95%B0%E5%AD%97%E5%A4%84%E7%90%86/",indexes:[343]},Jackson:{path:"/category/jackson/",indexes:[15,131,222,318,350,704,705,708,755,757,761,832,833,927,986]},Netty:{path:"/category/netty/",indexes:[1149]},编程:{path:"/category/%E7%BC%96%E7%A8%8B/",indexes:[3,4,9,18,25,35,51,55,63,67,1150,75,82,93,101,102,103,106,110,113,114,118,120,121,122,123,124,126,129,135,137,138,142,148,158,159,160,161,165,171,173,175,176,180,184,187,189,191,193,207,209,1151,224,225,228,230,231,232,235,237,241,245,247,256,263,265,269,271,272,286,291,297,305,309,311,316,1152,335,336,338,346,348,358,383,400,409,418,424,425,429,431,432,434,441,443,447,450,457,476,478,485,1149,506,542,1153,1154,1155,1156,562,563,644,712,725,732,769,778,780,787,835,864,885,925,950,967]},"Apache Kafka":{path:"/category/apache-kafka/",indexes:[1157,1158,1159,1083,1160,728,1161]},"GroupId vs ConsumerId":{path:"/category/groupid-vs-consumerid/",indexes:[1159]},Spring:{path:"/category/spring/",indexes:[1162,1163,1164,1165,1166,1167,1052,1168,1169,1170,1171,1172,197,1173,1174,1175,354,367,1176,380,1177,392,398,405,1086,444,1178,1179,1180,1181,1182,1183,1184,527,1185,1186,1187,1112,1188,1189,1190,1191,1054,749,1192,1193,1194,1119,818,1146,1195,1196,1197,1198,1199,914,922,1126,1200,968,1201]},"REST Docs":{path:"/category/rest-docs/",indexes:[1175]},数据结构:{path:"/category/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/",indexes:[260,344,531,1202]},算法:{path:"/category/%E7%AE%97%E6%B3%95/",indexes:[70,141,201,331,334,340,345,363,389,865]},"String Manipulation":{path:"/category/string-manipulation/",indexes:[21,80,162,163,317,319,323,372,585,603,618,643,670,710,840,962,984,992,1002]},Gson:{path:"/category/gson/",indexes:[226,320,339,678]},AWS:{path:"/category/aws/",indexes:[92,347,414,1203,521,666]},教程:{path:"/category/%E6%95%99%E7%A8%8B/",indexes:[73,262,321,1203,1204,1205,615,723]},GraphQL:{path:"/category/graphql/",indexes:[1060,1206,322,581,1128,957,1130]},"REST with Spring Boot":{path:"/category/rest-with-spring-boot/",indexes:[1207,1208,1209,1210,1211]},"Learn Spring Security":{path:"/category/learn-spring-security/",indexes:[1207,1208,1209,1211]},"Spring Security":{path:"/category/spring-security/",indexes:[1212,1213,1082,1214,1215,1216,1217,1218,1219,1114,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237]},"Spring Data JPA":{path:"/category/spring-data-jpa/",indexes:[1238,1239,1240,1241,255,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1125,1258]},"Query Optimization":{path:"/category/query-optimization/",indexes:[1245]},Kotlin:{path:"/category/kotlin/",indexes:[1259,1260,1261,1262,1151,1263,270,1264,1265,1152,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1177,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1153,1301,1302,1303,1304,1305,1306,1307,1202,1308,1309,547,1310,1311,1107,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1329,1330,1331,1154,1155,1332,1156,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346]},Serialization:{path:"/category/serialization/",indexes:[349,573,995]},JPA:{path:"/category/jpa/",indexes:[1347,1167,109,1240,1243,1246,1348,1349,1350,1351,1249,1181,1352,1353,1354,1252,1355,1356,1255,1357,1358,1359,1360,1361,1362]},数据库视图:{path:"/category/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A7%86%E5%9B%BE/",indexes:[1244]},"Software Engineering":{path:"/category/software-engineering/",indexes:[88,1363,1364,1365,1366,610,1367,1368]},Testing:{path:"/category/testing/",indexes:[1369,1144,1370,57,1169,1172,233,1364,1176,1371,1372,411,1373,471,1089,1365,528,1102,550,1374,1375,567,578,709,1376,1377,810,1378,1147,982]},etcd:{path:"/category/etcd/",indexes:[324]},Hibernate:{path:"/category/hibernate/",indexes:[1347,1071,104,107,1379,1380,1381,1242,378,1348,1351,1352,1354,1355,1194,1357,1358,1359,998,1361]},SoftDelete:{path:"/category/softdelete/",indexes:[1381]},"Apache Camel":{path:"/category/apache-camel/",indexes:[1058,325,1382,1198,1383]},Base64:{path:"/category/base64/",indexes:[326,901]},"String Algorithms":{path:"/category/string-algorithms/",indexes:[327]},字符串:{path:"/category/%E5%AD%97%E7%AC%A6%E4%B8%B2/",indexes:[150,252,328]},Tutorial:{path:"/category/tutorial/",indexes:[1384,177,1385,329,1386,756,866,983,1387]},CompletableFuture:{path:"/category/completablefuture/",indexes:[203,330,332,514,526,591,602,671]},"Date-Time":{path:"/category/date-time/",indexes:[287]},Concurrency:{path:"/category/concurrency/",indexes:[100,200,202,205,248,288,403,437,515,523,535,541,1388,605,681,727,817,822,837,851,891,930,964,979,1037,1047]},网络编程:{path:"/category/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/",indexes:[289]},编程技巧:{path:"/category/%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/",indexes:[34,83,182,257,299,333,1389]},Algorithm:{path:"/category/algorithm/",indexes:[290,415,416,463,532,1320,871]},Pagination:{path:"/category/pagination/",indexes:[1081]},Thymeleaf:{path:"/category/thymeleaf/",indexes:[1062,90,1173,1182,826,1226,1390]},"JUnit 5":{path:"/category/junit-5/",indexes:[1391,752]},Mockito:{path:"/category/mockito/",indexes:[1391,1371,381,468,635,642,1376,717,1377]},OpenJDK:{path:"/category/openjdk/",indexes:[1392]},Windows:{path:"/category/windows/",indexes:[1392]},OpenGrok:{path:"/category/opengrok/",indexes:[1393]},代码搜索:{path:"/category/%E4%BB%A3%E7%A0%81%E6%90%9C%E7%B4%A2/",indexes:[1393]},AOP:{path:"/category/aop/",indexes:[1174]},Arrays:{path:"/category/arrays/",indexes:[337,511,589,633,776,834]},"Spring Cloud":{path:"/category/spring-cloud/",indexes:[1394,52,1395,1396,1397,1398,1399,1400,1401,1402,1403,1404]},OAuth2:{path:"/category/oauth2/",indexes:[1396,1221,1237,1404,1405]},JDBC:{path:"/category/jdbc/",indexes:[40,1165,1406,186,292,1407,1192,825,1408,946,1409,1055,1015,1023]},Programming:{path:"/category/programming/",indexes:[5,11,33,53,99,146,151,154,157,183,206,212,214,216,239,253,279,284,1264,1265,1266,377,1268,1269,1271,1274,1276,1278,386,388,404,413,440,451,455,474,482,1283,502,530,1295,1301,1303,1309,1311,1312,1313,1316,1326,1330,1332,1337,1338,1341,1345,1346,574,597,614,621,637,646,648,649,652,654,657,658,665,674,679,689,694,701,754,760,766,1410,777,788,790,792,796,798,849,857,858,873,874,877,882,884,886,890,892,893,894,896,905,906,921,926,944,948,981,993]},Quarkus:{path:"/category/quarkus/",indexes:[81,293,1141]},Maven:{path:"/category/maven/",indexes:[1411,1412,1413,294,304,1414,505,1415,516,1416,537,561,1417,565,1374,1375,1418,1205,569,570,1419,1420,1421,1120,1422,1423,961,1134,1008,1424,1042]},"Web Server":{path:"/category/web-server/",indexes:[493]},UUID:{path:"/category/uuid/",indexes:[95,174,295,953]},URL编码:{path:"/category/url%E7%BC%96%E7%A0%81/",indexes:[296]},Kafka:{path:"/category/kafka/",indexes:[8,1425,1426,1427,1428,1429,1079,341,342,1430,1431,1179,513,1432,1189,616,640,1433,697,715,718,737]},"Spring Batch":{path:"/category/spring-batch/",indexes:[298]},"Apache POI":{path:"/category/apache-poi/",indexes:[1434,504,512,522,819,978,1435]},Excel:{path:"/category/excel/",indexes:[144,1434,356,1435]},日期转换:{path:"/category/%E6%97%A5%E6%9C%9F%E8%BD%AC%E6%8D%A2/",indexes:[300]},日期时间:{path:"/category/%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4/",indexes:[39,301,762]},XMLGregorianCalendar:{path:"/category/xmlgregoriancalendar/",indexes:[302]},Unicode:{path:"/category/unicode/",indexes:[281,303,590,607]},WebFlux:{path:"/category/webflux/",indexes:[1072,213,1178,1180,1186,847]},构建工具:{path:"/category/%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/",indexes:[1412]},SSL:{path:"/category/ssl/",indexes:[264,1010,1436]},Microservices:{path:"/category/microservices/",indexes:[1437,1438,1439,1400]},"Event-Driven Architecture":{path:"/category/event-driven-architecture/",indexes:[1437]},"Spring Modulith":{path:"/category/spring-modulith/",indexes:[1440]},"Event Externalization":{path:"/category/event-externalization/",indexes:[1440]},SecureRandom:{path:"/category/securerandom/",indexes:[306]},编码:{path:"/category/%E7%BC%96%E7%A0%81/",indexes:[307,1441,1422]},Kubernetes:{path:"/category/kubernetes/",indexes:[1442,1443,276,1444,1190,1022,1045]},Networking:{path:"/category/networking/",indexes:[1444,687,850,935,1011]},Spock:{path:"/category/spock/",indexes:[267,308,362]},"Spring JPA":{path:"/category/spring-jpa/",indexes:[1445,1380,1446,1447,1448]},"Backend Java/Spring Team Lead":{path:"/category/backend-javaspring-team-lead/",indexes:[1449]},"Remote Job":{path:"/category/remote-job/",indexes:[1449]},Web开发:{path:"/category/web%E5%BC%80%E5%8F%91/",indexes:[29,1078,310]},多线程:{path:"/category/%E5%A4%9A%E7%BA%BF%E7%A8%8B/",indexes:[312]},正则表达式:{path:"/category/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/",indexes:[313,486,1145,656]},ListIterator:{path:"/category/listiterator/",indexes:[266]},数据压缩:{path:"/category/%E6%95%B0%E6%8D%AE%E5%8E%8B%E7%BC%A9/",indexes:[285]},"Environment Variables":{path:"/category/environment-variables/",indexes:[314]},内存管理:{path:"/category/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/",indexes:[1450,315]},"Morse Code":{path:"/category/morse-code/",indexes:[268]},OAuth:{path:"/category/oauth/",indexes:[1213,1217,1223,1225,1227,1229,1232,1235]},"2D Geometry":{path:"/category/2d-geometry/",indexes:[238]},"Joda-Time":{path:"/category/joda-time/",indexes:[273]},BigDecimal:{path:"/category/bigdecimal/",indexes:[0,204,274,275,408,641,800,912]},"Reactive APIs":{path:"/category/reactive-apis/",indexes:[1451]},Micronaut:{path:"/category/micronaut/",indexes:[149,1451,1133]},MongoDB:{path:"/category/mongodb/",indexes:[28,1452,31,1453,1454,1455,1456,1457,56,85,195,1451,448,1458,1098,1459,830,831,1460,899,907,908,1461,909,924,1233,942,947,952,958,963,1137]},JVM:{path:"/category/jvm/",indexes:[240,1450,507,682,707,804,823,842,991,1006,1021]},垃圾收集器:{path:"/category/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/",indexes:[242]},"Spring MVC":{path:"/category/spring-mvc/",indexes:[277,1462]},"Apache Calcite":{path:"/category/apache-calcite/",indexes:[1385]},Postman:{path:"/category/postman/",indexes:[278,1109,1463,559,1464,1465,1466,1467,1468]},"Spring AI":{path:"/category/spring-ai/",indexes:[1469]},Baeldung:{path:"/category/baeldung/",indexes:[1469]},"Spring Cloud AWS":{path:"/category/spring-cloud-aws/",indexes:[1470]},"SQS Integration":{path:"/category/sqs-integration/",indexes:[1470]},"Stream API":{path:"/category/stream-api/",indexes:[86,87,243,355,586,604,619,736,786,852]},HTTPS:{path:"/category/https/",indexes:[1413]},PriorityQueue:{path:"/category/priorityqueue/",indexes:[280,438,814]},输入处理:{path:"/category/%E8%BE%93%E5%85%A5%E5%A4%84%E7%90%86/",indexes:[261]},字符串操作:{path:"/category/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/",indexes:[46,259,442,903]},"Spring WebFlux":{path:"/category/spring-webflux/",indexes:[1471,1472,1473,1474,1475,1476,1477]},文件上传:{path:"/category/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/",indexes:[1472]},JSON:{path:"/category/json/",indexes:[1369,41,115,130,132,218,246,283,382,1277,1336,661,663,672,685,813,879,987,1005]},SpEL:{path:"/category/spel/",indexes:[1241]},日期时间计算:{path:"/category/%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4%E8%AE%A1%E7%AE%97/",indexes:[244]},StringBuilder:{path:"/category/stringbuilder/",indexes:[47,236,584,880]},IO:{path:"/category/io/",indexes:[208,406,626,724,969]},Algorithms:{path:"/category/algorithms/",indexes:[1263,364,365,366,407,456,500,510,1292,554]},文件处理:{path:"/category/%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/",indexes:[210,254,673]},数组:{path:"/category/%E6%95%B0%E7%BB%84/",indexes:[249]},QueryException:{path:"/category/queryexception/",indexes:[1379]},"ISO 8601":{path:"/category/iso-8601/",indexes:[211]},Reflection:{path:"/category/reflection/",indexes:[1262,503,1288,612,996,1049]},OutputStream:{path:"/category/outputstream/",indexes:[250]},性能:{path:"/category/%E6%80%A7%E8%83%BD/",indexes:[112,251]},分区:{path:"/category/%E5%88%86%E5%8C%BA/",indexes:[1429]},"UTF-8":{path:"/category/utf-8/",indexes:[258,1478]},CRUD:{path:"/category/crud/",indexes:[1250]},"Timefold Solver":{path:"/category/timefold-solver/",indexes:[215]},"Error Prone":{path:"/category/error-prone/",indexes:[217]},Security:{path:"/category/security/",indexes:[71,170,426,630,632,1113,730,753,954,960,1004,1026,1036,1039,1041]},Database:{path:"/category/database/",indexes:[1479,399,1446,1183,1480,669,1410,1481,1118,1482,1483,1484,1485,1486,1487,1488,1489,1490]},"IntelliJ IDEA":{path:"/category/intellij-idea/",indexes:[125,1479,1491,1389,524,1492]},LocalDateTime:{path:"/category/localdatetime/",indexes:[172]},XML:{path:"/category/xml/",indexes:[30,116,164,194,1493,357,479,487,1441,592,703,910]},CSV:{path:"/category/csv/",indexes:[147,166,1493,489]},"Software Development":{path:"/category/software-development/",indexes:[79,1494,219,1495,1496,555]},Streams:{path:"/category/streams/",indexes:[77,220,902]},"Exception Handling":{path:"/category/exception-handling/",indexes:[221,1287,729,1254,1228,1200,956,1017]},异步编程:{path:"/category/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/",indexes:[223]},GUI:{path:"/category/gui/",indexes:[178]},集合框架:{path:"/category/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/",indexes:[179]},Coroutines:{path:"/category/coroutines/",indexes:[1259,1260,1297,1325]},Gradle:{path:"/category/gradle/",indexes:[1497,128,181,435,525,1204,639,1498,1420,805,1499,1500]},"Unix Time":{path:"/category/unix-time/",indexes:[227]},"Asynchronous Programming":{path:"/category/asynchronous-programming/",indexes:[1171]},InputStream:{path:"/category/inputstream/",indexes:[229]},"Spring Kafka":{path:"/category/spring-kafka/",indexes:[1501,1502]},"Trusted Packages":{path:"/category/trusted-packages/",indexes:[1501]},HarperDB:{path:"/category/harperdb/",indexes:[234]},Jersey:{path:"/category/jersey/",indexes:[155,932]},"Testing & Debugging":{path:"/category/testing-_-debugging/",indexes:[1503]},Coroutine:{path:"/category/coroutine/",indexes:[1286]},"JEP 290":{path:"/category/jep-290/",indexes:[185]},"JEP 415":{path:"/category/jep-415/",indexes:[185]},文件操作:{path:"/category/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/",indexes:[36,156,1321,571,600,691,862,1001]},ASCII:{path:"/category/ascii/",indexes:[188,934]},Quartz:{path:"/category/quartz/",indexes:[190]},消息排序:{path:"/category/%E6%B6%88%E6%81%AF%E6%8E%92%E5%BA%8F/",indexes:[1427]},"Development Tools":{path:"/category/development-tools/",indexes:[1504,1505,1482]},Configuration:{path:"/category/configuration/",indexes:[1504,1099,1397]},Collections:{path:"/category/collections/",indexes:[24,48,192,351,360,374,436,548,549,608,631,634,664,675,680,690,711,713,781,797,820,875,1e3,1020]},"Consumer Groups":{path:"/category/consumer-groups/",indexes:[1428]},Date:{path:"/category/date/",indexes:[196]},"Date-Time API":{path:"/category/date-time-api/",indexes:[587,824]},内存共享:{path:"/category/%E5%86%85%E5%AD%98%E5%85%B1%E4%BA%AB/",indexes:[198]},排序:{path:"/category/%E6%8E%92%E5%BA%8F/",indexes:[1261]},"Selenium WebDriver":{path:"/category/selenium-webdriver/",indexes:[199,1506,733,1507]},"Reactive Programming":{path:"/category/reactive-programming/",indexes:[44,1164,1471,1170,1473,1474,472,518,1477,1007]},Annotation:{path:"/category/annotation/",indexes:[1191]},RestClient:{path:"/category/restclient/",indexes:[1077]},"Spring Framework":{path:"/category/spring-framework/",indexes:[74,1508,1406,1509,1372,1388,904,1510]},GlassFish:{path:"/category/glassfish/",indexes:[1511]},Eclipse:{path:"/category/eclipse/",indexes:[387,1511,1478]},设计模式:{path:"/category/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",indexes:[127,422,1280,538,551,553,594,768,775]},"Text Processing":{path:"/category/text-processing/",indexes:[98,596]},"Java Collections":{path:"/category/java-collections/",indexes:[1512,1513,1514]},LinkedHashMap:{path:"/category/linkedhashmap/",indexes:[449,1512]},Testcontainers:{path:"/category/testcontainers/",indexes:[497,1095,1515]},环境变量:{path:"/category/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/",indexes:[1491,744]},游戏开发:{path:"/category/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/",indexes:[498]},"Collections Framework":{path:"/category/collections-framework/",indexes:[598]},"Language Models":{path:"/category/language-models/",indexes:[1384]},JNDI:{path:"/category/jndi/",indexes:[167]},REST:{path:"/category/rest/",indexes:[1516,1199]},国际化:{path:"/category/%E5%9B%BD%E9%99%85%E5%8C%96/",indexes:[1516]},Optional:{path:"/category/optional/",indexes:[168,460,464,838]},Cucumber:{path:"/category/cucumber/",indexes:[169]},String:{path:"/category/string/",indexes:[59,599,726,741,815,841,971]},Tutorials:{path:"/category/tutorials/",indexes:[601,869]},"Connection Details":{path:"/category/connection-details/",indexes:[1091]},GraalVM:{path:"/category/graalvm/",indexes:[140]},ArrayList:{path:"/category/arraylist/",indexes:[152,653,699,773,782,789,803,888]},Collection:{path:"/category/collection/",indexes:[611]},数学运算:{path:"/category/%E6%95%B0%E5%AD%A6%E8%BF%90%E7%AE%97/",indexes:[153]},MIME类型:{path:"/category/mime%E7%B1%BB%E5%9E%8B/",indexes:[613]},反射:{path:"/category/%E5%8F%8D%E5%B0%84/",indexes:[72,617,938]},高阶函数:{path:"/category/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/",indexes:[1289]},RSocket:{path:"/category/rsocket/",indexes:[1508]},Docker:{path:"/category/docker/",indexes:[1425,49,1090,1092,1492,1003]},"String Templates":{path:"/category/string-templates/",indexes:[534]},DevOps:{path:"/category/devops/",indexes:[1517,1442,1518,1519]},版本控制:{path:"/category/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/",indexes:[1518]},"Apache Commons Lang":{path:"/category/apache-commons-lang/",indexes:[622]},Validation:{path:"/category/validation/",indexes:[1076]},Log4j:{path:"/category/log4j/",indexes:[143]},"Date and Time":{path:"/category/date-and-time/",indexes:[353,371,401,580,623,650,695,698,856]},Tomcat:{path:"/category/tomcat/",indexes:[624,1408]},Emoji:{path:"/category/emoji/",indexes:[625]},"Java 8":{path:"/category/java-8/",indexes:[627]},Regex:{path:"/category/regex/",indexes:[490,628,659,692,742]},"I/O":{path:"/category/io/",indexes:[508,629,870]},性能监控:{path:"/category/%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7/",indexes:[136]},YAML:{path:"/category/yaml/",indexes:[1069,1291]},Cache:{path:"/category/cache/",indexes:[1168]},Log4j2:{path:"/category/log4j2/",indexes:[50,1065,145,1135,1142]},"Spring Data Cassandra":{path:"/category/spring-data-cassandra/",indexes:[1520,1521,1515,1387]},"Query IN Clause":{path:"/category/query-in-clause/",indexes:[1521]},Stream:{path:"/category/stream/",indexes:[45,647]},"Telegram Bot":{path:"/category/telegram-bot/",indexes:[1094]},SQL:{path:"/category/sql/",indexes:[655]},OpenAPI:{path:"/category/openapi/",indexes:[1066,495,1522,1523,1524]},Lombok:{path:"/category/lombok/",indexes:[17,433,495,745,965]},HashMap:{path:"/category/hashmap/",indexes:[13,78,134,1513,660,684,977,997]},"AWS SDK for Java":{path:"/category/aws-sdk-for-java/",indexes:[1525]},S3:{path:"/category/s3/",indexes:[1525]},"Error Handling":{path:"/category/error-handling/",indexes:[1,1162,1340,1417,583,1136]},"Build Optimization":{path:"/category/build-optimization/",indexes:[1415]},"Inner Classes":{path:"/category/inner-classes/",indexes:[662]},Subclasses:{path:"/category/subclasses/",indexes:[662]},"JSON Schema":{path:"/category/json-schema/",indexes:[139]},Servlet:{path:"/category/servlet/",indexes:[509,716]},"Design Pattern":{path:"/category/design-pattern/",indexes:[1293]},"Collection Framework":{path:"/category/collection-framework/",indexes:[668,929]},JNI:{path:"/category/jni/",indexes:[676,955]},RxJava:{path:"/category/rxjava/",indexes:[1150,1270,677]},"Docker Compose":{path:"/category/docker-compose/",indexes:[1073]},"Web Development":{path:"/category/web-development/",indexes:[1526,1267,417,1282,1527,1462,1528,750,853,1529,1127,1530]},运维:{path:"/category/%E8%BF%90%E7%BB%B4/",indexes:[1443]},"Apache Pulsar":{path:"/category/apache-pulsar/",indexes:[1075]},"Jackson-jr":{path:"/category/jackson-jr/",indexes:[133]},R2DBC:{path:"/category/r2dbc/",indexes:[1407]},MockK:{path:"/category/mockk/",indexes:[1294,1304]},Logging:{path:"/category/logging/",indexes:[61,1494,1382,1085,1531,1122,1234,966,1532]},性能比较:{path:"/category/%E6%80%A7%E8%83%BD%E6%AF%94%E8%BE%83/",indexes:[683]},"Scroll API":{path:"/category/scroll-api/",indexes:[1239]},分布式系统:{path:"/category/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/",indexes:[1433]},日期处理:{path:"/category/%E6%97%A5%E6%9C%9F%E5%A4%84%E7%90%86/",indexes:[119,577,720]},Enums:{path:"/category/enums/",indexes:[1305,693,772,827]},AsyncAPI:{path:"/category/asyncapi/",indexes:[1096]},Endianness:{path:"/category/endianness/",indexes:[696]},"Zip Files":{path:"/category/zip-files/",indexes:[700]},"403 Error":{path:"/category/403-error/",indexes:[1097]},Messaging:{path:"/category/messaging/",indexes:[702]},Selenide:{path:"/category/selenide/",indexes:[1533]},UI自动化测试:{path:"/category/ui%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/",indexes:[1533]},"this 关键字":{path:"/category/this-%E5%85%B3%E9%94%AE%E5%AD%97/",indexes:[1296]},JSP:{path:"/category/jsp/",indexes:[1534,1535]},JavaScript:{path:"/category/javascript/",indexes:[1534,1390]},OpenFeign:{path:"/category/openfeign/",indexes:[1074]},"Batch Processing":{path:"/category/batch-processing/",indexes:[706]},字符串处理:{path:"/category/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/",indexes:[62,105,582,748,970]},Build:{path:"/category/build/",indexes:[1416]},"findBy vs findOneBy":{path:"/category/findby-vs-findoneby/",indexes:[1253]},"Web Testing":{path:"/category/web-testing/",indexes:[1506,1536]},"Web Services":{path:"/category/web-services/",indexes:[1206,1061,520,1537,1028]},"Software Testing":{path:"/category/software-testing/",indexes:[1538,714,1539]},Gatling:{path:"/category/gatling/",indexes:[517,1540]},序列化:{path:"/category/%E5%BA%8F%E5%88%97%E5%8C%96/",indexes:[1157,111]},图像压缩:{path:"/category/%E5%9B%BE%E5%83%8F%E5%8E%8B%E7%BC%A9/",indexes:[519]},"Entity Classes":{path:"/category/entity-classes/",indexes:[1353]},Scanner:{path:"/category/scanner/",indexes:[117,719,731,743,919,939]},"Apache JMeter":{path:"/category/apache-jmeter/",indexes:[1541,1542]},性能测试:{path:"/category/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/",indexes:[1541,1543,1544,1542]},"Spring Data":{path:"/category/spring-data/",indexes:[1545,1458,721,774,1461,1360,1546]},MapStruct:{path:"/category/mapstruct/",indexes:[97,454,722]},Elasticsearch:{path:"/category/elasticsearch/",indexes:[1545,1547]},NoSQL:{path:"/category/nosql/",indexes:[1059,1547,1548,1481]},"API Testing":{path:"/category/api-testing/",indexes:[1386]},"flush()":{path:"/category/flush()/",indexes:[1447]},"Dependency Management":{path:"/category/dependency-management/",indexes:[1498]},Introduction:{path:"/category/introduction/",indexes:[1549]},"Regular Expressions":{path:"/category/regular-expressions/",indexes:[42,575,734,1024]},"API Key":{path:"/category/api-key/",indexes:[1219]},"Design Patterns":{path:"/category/design-patterns/",indexes:[1315,1333,735,1368]},Actuator:{path:"/category/actuator/",indexes:[1100,1105]},FlexyPool:{path:"/category/flexypool/",indexes:[1185]},"H2 Database":{path:"/category/h2-database/",indexes:[1087,738,1115]},编程实践:{path:"/category/%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5/",indexes:[89]},Android:{path:"/category/android/",indexes:[739]},Keycloak:{path:"/category/keycloak/",indexes:[84,1216,1550,1111,1230,1405]},IAM:{path:"/category/iam/",indexes:[1550]},"Spring Boot CLI":{path:"/category/spring-boot-cli/",indexes:[1551]},密码编码:{path:"/category/%E5%AF%86%E7%A0%81%E7%BC%96%E7%A0%81/",indexes:[1551]},图像处理:{path:"/category/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/",indexes:[108,390,412]},Swagger:{path:"/category/swagger/",indexes:[14,1067,91,1093,1522,1464,1552,1553,1138,1139,1524]},"Modular Monolith":{path:"/category/modular-monolith/",indexes:[1184]},Records:{path:"/category/records/",indexes:[746,767]},NLP:{path:"/category/nlp/",indexes:[747]},"Automation Testing":{path:"/category/automation-testing/",indexes:[1507]},Selenium:{path:"/category/selenium/",indexes:[58,1554,1536,751,1555,816]},Ktor:{path:"/category/ktor/",indexes:[1302]},OpenAI:{path:"/category/openai/",indexes:[1101]},"Spring Cloud Azure":{path:"/category/spring-cloud-azure/",indexes:[1556]},"Azure Key Vault":{path:"/category/azure-key-vault/",indexes:[1556]},"Companion Object":{path:"/category/companion-object/",indexes:[1285]},JMX:{path:"/category/jmx/",indexes:[94,976]},LocalDate:{path:"/category/localdate/",indexes:[759]},Webdriver:{path:"/category/webdriver/",indexes:[1555]},"AWS Secrets Manager":{path:"/category/aws-secrets-manager/",indexes:[1068]},Performance:{path:"/category/performance/",indexes:[1057,96,763]},多对多关系:{path:"/category/%E5%A4%9A%E5%AF%B9%E5%A4%9A%E5%85%B3%E7%B3%BB/",indexes:[1356]},Resilience4j:{path:"/category/resilience4j/",indexes:[1063,1070]},HttpClient:{path:"/category/httpclient/",indexes:[43,552,764,1532]},SAML:{path:"/category/saml/",indexes:[1220]},数据库:{path:"/category/%E6%95%B0%E6%8D%AE%E5%BA%93/",indexes:[1452,1453,1455,1445,1350,473,1548,1557]},AzureAD:{path:"/category/azuread/",indexes:[1116]},"Feign Client":{path:"/category/feign-client/",indexes:[1395]},Debugging:{path:"/category/debugging/",indexes:[1187,973]},"Object Creation":{path:"/category/object-creation/",indexes:[770]},"Web Scraping":{path:"/category/web-scraping/",indexes:[771]},插件:{path:"/category/%E6%8F%92%E4%BB%B6/",indexes:[1421]},"Project Panama":{path:"/category/project-panama/",indexes:[1033]},cURL:{path:"/category/curl/",indexes:[1558]},HTTP:{path:"/category/http/",indexes:[1558,1468,920]},"Spring Data Redis":{path:"/category/spring-data-redis/",indexes:[1559]},"Redis TTL":{path:"/category/redis-ttl/",indexes:[1559]},QuestDB:{path:"/category/questdb/",indexes:[536]},Encryption:{path:"/category/encryption/",indexes:[1307]},"Load Testing":{path:"/category/load-testing/",indexes:[1540]},Feign:{path:"/category/feign/",indexes:[1399,1401]},"AWS Lambda":{path:"/category/aws-lambda/",indexes:[1117]},"Kafka Listener":{path:"/category/kafka-listener/",indexes:[1502]},Cassandra:{path:"/category/cassandra/",indexes:[16,533,1483,1484,1485,1486,1488,1489,1034,1490,1560,1561]},RabbitMQ:{path:"/category/rabbitmq/",indexes:[556,779]},ApplicationContext:{path:"/category/applicationcontext/",indexes:[1193]},HTTPie:{path:"/category/httpie/",indexes:[1562]},命令行工具:{path:"/category/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/",indexes:[1562]},Maps:{path:"/category/maps/",indexes:[1308]},JMeter:{path:"/category/jmeter/",indexes:[394,1543,1544,1563]},"Data Structures":{path:"/category/data-structures/",indexes:[539,1514]},"Jakarta EE":{path:"/category/jakarta-ee/",indexes:[540]},JVM内存类型:{path:"/category/jvm%E5%86%85%E5%AD%98%E7%B1%BB%E5%9E%8B/",indexes:[1564]},OpenTelemetry:{path:"/category/opentelemetry/",indexes:[1103]},Math:{path:"/category/math/",indexes:[783]},"Unit Testing":{path:"/category/unit-testing/",indexes:[427,784]},"Asynchronous Operations":{path:"/category/asynchronous-operations/",indexes:[785]},CommandLine:{path:"/category/commandline/",indexes:[791]},Tools:{path:"/category/tools/",indexes:[543,1565]},"Number Conversion":{path:"/category/number-conversion/",indexes:[795]},"findFirst() vs findTop()":{path:"/category/findfirst()-vs-findtop()/",indexes:[1256]},RestTemplate:{path:"/category/resttemplate/",indexes:[1166]},ScyllaDB:{path:"/category/scylladb/",indexes:[76]},NonUniqueResultException:{path:"/category/nonuniqueresultexception/",indexes:[1257]},"RESTful Microservices":{path:"/category/restful-microservices/",indexes:[802]},Logback:{path:"/category/logback/",indexes:[1065,1531,1566]},JWT:{path:"/category/jwt/",indexes:[1214,806]},异常处理:{path:"/category/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/",indexes:[420,1051,807,883]},Lambda表达式:{path:"/category/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/",indexes:[808]},异常与错误:{path:"/category/%E5%BC%82%E5%B8%B8%E4%B8%8E%E9%94%99%E8%AF%AF/",indexes:[544]},Linux:{path:"/category/linux/",indexes:[69]},"Springdoc-OpenAPI":{path:"/category/springdoc-openapi/",indexes:[1222]},函数式编程:{path:"/category/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/",indexes:[811]},"Spring Cloud Gateway":{path:"/category/spring-cloud-gateway/",indexes:[1567,1529,1568,1569]},"Rate Limiting":{path:"/category/rate-limiting/",indexes:[1567]},Camunda:{path:"/category/camunda/",indexes:[1104]},"Web Client":{path:"/category/web-client/",indexes:[1064]},WebClient:{path:"/category/webclient/",indexes:[1475,1476,1195]},"String Interpolation":{path:"/category/string-interpolation/",indexes:[821]},"Firebase Cloud Messaging":{path:"/category/firebase-cloud-messaging/",indexes:[1108]},iText:{path:"/category/itext/",indexes:[546]},"Build Automation":{path:"/category/build-automation/",indexes:[1499]},"DateTime API":{path:"/category/datetime-api/",indexes:[64]},技术:{path:"/category/%E6%8A%80%E6%9C%AF/",indexes:[1459]},PDF:{path:"/category/pdf/",indexes:[481,557,829]},远程工作:{path:"/category/%E8%BF%9C%E7%A8%8B%E5%B7%A5%E4%BD%9C/",indexes:[65]},ZooKeeper:{path:"/category/zookeeper/",indexes:[1426]},"Kong Ingress":{path:"/category/kong-ingress/",indexes:[1106]},Axon:{path:"/category/axon/",indexes:[1121,1570]},"Method Security":{path:"/category/method-security/",indexes:[1224]},"Reference Types":{path:"/category/reference-types/",indexes:[836]},Tablesaw:{path:"/category/tablesaw/",indexes:[839]},Reactor:{path:"/category/reactor/",indexes:[843]},SBE:{path:"/category/sbe/",indexes:[558]},"Spring Webflux":{path:"/category/spring-webflux/",indexes:[1571]},DataBufferLimitException:{path:"/category/databufferlimitexception/",indexes:[1571]},"Remote Jobs":{path:"/category/remote-jobs/",indexes:[1572]},"Part-Time Jobs":{path:"/category/part-time-jobs/",indexes:[1572]},Streaming:{path:"/category/streaming/",indexes:[1432]},数据库操作:{path:"/category/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/",indexes:[1238]},Redis:{path:"/category/redis/",indexes:[1557,1124]},Caching:{path:"/category/caching/",indexes:[1509,1196]},MySQL:{path:"/category/mysql/",indexes:[1110]},Groovy:{path:"/category/groovy/",indexes:[1197]},JUnit5:{path:"/category/junit5/",indexes:[1378]},API:{path:"/category/api/",indexes:[1463,1466]},NIO2:{path:"/category/nio2/",indexes:[54]},Lists:{path:"/category/lists/",indexes:[854]},Protobuf:{path:"/category/protobuf/",indexes:[855]},NIO:{path:"/category/nio/",indexes:[860,972,1030]},"Axon Framework":{path:"/category/axon-framework/",indexes:[1439]},MD5:{path:"/category/md5/",indexes:[861]},CRaC:{path:"/category/crac/",indexes:[863]},"Apache Cassandra":{path:"/category/apache-cassandra/",indexes:[1480,1487]},"Garbage Collection":{path:"/category/garbage-collection/",indexes:[560]},"String Concatenation":{path:"/category/string-concatenation/",indexes:[867]},"Functional Programming":{path:"/category/functional-programming/",indexes:[868]},"Armstrong Numbers":{path:"/category/armstrong-numbers/",indexes:[872]},"Spring Data MongoDB":{path:"/category/spring-data-mongodb/",indexes:[1456,1457,1460]},API设计:{path:"/category/api%E8%AE%BE%E8%AE%A1/",indexes:[1523]},Git:{path:"/category/git/",indexes:[1517]},INI文件解析:{path:"/category/ini%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/",indexes:[876]},多租户:{path:"/category/%E5%A4%9A%E7%A7%9F%E6%88%B7/",indexes:[1251]},"REST API":{path:"/category/rest-api/",indexes:[1552]},消息计数:{path:"/category/%E6%B6%88%E6%81%AF%E8%AE%A1%E6%95%B0/",indexes:[1158]},Repository:{path:"/category/repository/",indexes:[1418]},字符串格式化:{path:"/category/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A0%BC%E5%BC%8F%E5%8C%96/",indexes:[887]},Annotations:{path:"/category/annotations/",indexes:[470,889,1016,1018]},SOAP:{path:"/category/soap/",indexes:[1465]},"Spring Boot 3":{path:"/category/spring-boot-3/",indexes:[1573]},"Spring Framework 6.0":{path:"/category/spring-framework-6.0/",indexes:[1573]},"Spring JMS":{path:"/category/spring-jms/",indexes:[1370]},Properties:{path:"/category/properties/",indexes:[1123]},StringBuffer:{path:"/category/stringbuffer/",indexes:[47]},JAR文件:{path:"/category/jar%E6%96%87%E4%BB%B6/",indexes:[373,895]},"File Management":{path:"/category/file-management/",indexes:[1324]},JAR:{path:"/category/jar/",indexes:[897]},"Windows Executables":{path:"/category/windows-executables/",indexes:[898]},日期和时间:{path:"/category/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/",indexes:[900]},Lightrun:{path:"/category/lightrun/",indexes:[566]},"Spring Data Rest":{path:"/category/spring-data-rest/",indexes:[1574]},"RESTful Web Services":{path:"/category/restful-web-services/",indexes:[1574]},"Messaging Systems":{path:"/category/messaging-systems/",indexes:[1161]},"Spring Native":{path:"/category/spring-native/",indexes:[1575]},Liberica:{path:"/category/liberica/",indexes:[1575]},"HTTP Client":{path:"/category/http-client/",indexes:[37,915,918]},"Class Loader":{path:"/category/class-loader/",indexes:[916]},"Testing & Mocking":{path:"/category/testing-_-mocking/",indexes:[1576]},"Java Servlets":{path:"/category/java-servlets/",indexes:[1576]},Sound:{path:"/category/sound/",indexes:[917]},spring:{path:"/category/spring/",indexes:[1577]},jpa:{path:"/category/jpa/",indexes:[1577]},"CSRF Token":{path:"/category/csrf-token/",indexes:[1467]},Transactions:{path:"/category/transactions/",indexes:[1188]},JDK:{path:"/category/jdk/",indexes:[572]},"equals() vs ==":{path:"/category/equals()-vs-__/",indexes:[928]},HQL:{path:"/category/hql/",indexes:[931]},Enum:{path:"/category/enum/",indexes:[933,974]},"Build Cache":{path:"/category/build-cache/",indexes:[1497]},"Object-Oriented Programming":{path:"/category/object-oriented-programming/",indexes:[937]},SSO:{path:"/category/sso/",indexes:[38,1578]},Spark:{path:"/category/spark/",indexes:[1579]},DataFrame:{path:"/category/dataframe/",indexes:[1579]},Eureka:{path:"/category/eureka/",indexes:[1398]},"Java Concurrency":{path:"/category/java-concurrency/",indexes:[1580,1581]},Locks:{path:"/category/locks/",indexes:[1581]},数学:{path:"/category/%E6%95%B0%E5%AD%A6/",indexes:[395,941]},"HTTP Basic Authentication":{path:"/category/http-basic-authentication/",indexes:[1563]},"JPA Repository":{path:"/category/jpa-repository/",indexes:[1258]},"Command Line":{path:"/category/command-line/",indexes:[943]},Development:{path:"/category/development/",indexes:[1027,1565]},Upsert:{path:"/category/upsert/",indexes:[1454]},Operators:{path:"/category/operators/",indexes:[949]},"Apache Tomcat":{path:"/category/apache-tomcat/",indexes:[1578]},控制结构:{path:"/category/%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/",indexes:[951]},Nginx:{path:"/category/nginx/",indexes:[1582]},代理服务器:{path:"/category/%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/",indexes:[1582]},FaunaDB:{path:"/category/faunadb/",indexes:[1201]},Servlets:{path:"/category/servlets/",indexes:[1535]},数据源:{path:"/category/%E6%95%B0%E6%8D%AE%E6%BA%90/",indexes:[1129]},Zuul:{path:"/category/zuul/",indexes:[1403]},数据库连接:{path:"/category/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5/",indexes:[1409]},并发:{path:"/category/%E5%B9%B6%E5%8F%91/",indexes:[1032]},Autowired:{path:"/category/autowired/",indexes:[1163]},"URL Rewrite":{path:"/category/url-rewrite/",indexes:[1568]},编程语言:{path:"/category/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/",indexes:[959]},JavaFX:{path:"/category/javafx/",indexes:[1583]},事件处理:{path:"/category/%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/",indexes:[1583]},InstantSource:{path:"/category/instantsource/",indexes:[26]},Multithreading:{path:"/category/multithreading/",indexes:[1334]},Constructor:{path:"/category/constructor/",indexes:[1035]},"Spring Cloud Sleuth":{path:"/category/spring-cloud-sleuth/",indexes:[1131]},"Hibernate Validator":{path:"/category/hibernate-validator/",indexes:[1584]},"Annotation Processor":{path:"/category/annotation-processor/",indexes:[1584]},"JEP-371":{path:"/category/jep-371/",indexes:[27]},"Load Balancer":{path:"/category/load-balancer/",indexes:[1394]},OpenID:{path:"/category/openid/",indexes:[1405]},"Swagger UI":{path:"/category/swagger-ui/",indexes:[1405,1143]},Javadoc:{path:"/category/javadoc/",indexes:[1419,1585,1040]},多行代码示例:{path:"/category/%E5%A4%9A%E8%A1%8C%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/",indexes:[1585]},"OAuth 2.0":{path:"/category/oauth-2.0/",indexes:[1569]},"Content Security Policy":{path:"/category/content-security-policy/",indexes:[1236]},字符串转换:{path:"/category/%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2/",indexes:[22]},"Bit Manipulation":{path:"/category/bit-manipulation/",indexes:[975]},"Netflix Spectator":{path:"/category/netflix-spectator/",indexes:[23]},"Kafka Streams":{path:"/category/kafka-streams/",indexes:[1132]},VisualVM:{path:"/category/visualvm/",indexes:[1038]},SonarQube:{path:"/category/sonarqube/",indexes:[20]},Socket:{path:"/category/socket/",indexes:[980]},"Abstract Classes":{path:"/category/abstract-classes/",indexes:[985]},HexFormat:{path:"/category/hexformat/",indexes:[988]},"Reflection API":{path:"/category/reflection-api/",indexes:[989]},LDAP:{path:"/category/ldap/",indexes:[990]},"Logging Queries":{path:"/category/logging-queries/",indexes:[1520]},"Java 17":{path:"/category/java-17/",indexes:[579]},HTML:{path:"/category/html/",indexes:[376,461,492]},"Byte Array":{path:"/category/byte-array/",indexes:[994]},ModelMapper:{path:"/category/modelmapper/",indexes:[576]},并行测试:{path:"/category/%E5%B9%B6%E8%A1%8C%E6%B5%8B%E8%AF%95/",indexes:[1148]},Prim算法:{path:"/category/prim%E7%AE%97%E6%B3%95/",indexes:[1284]},Ratpack:{path:"/category/ratpack/",indexes:[12]},"Event Sourcing":{path:"/category/event-sourcing/",indexes:[1570]},"Web Security":{path:"/category/web-security/",indexes:[1212]},时间格式化:{path:"/category/%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%8C%96/",indexes:[10]},Thread:{path:"/category/thread/",indexes:[1009]},ArangoDB:{path:"/category/arangodb/",indexes:[1546]},Dapr:{path:"/category/dapr/",indexes:[1402]},Geospatial:{path:"/category/geospatial/",indexes:[1044]},"Open Source":{path:"/category/open-source/",indexes:[1436]},Guava:{path:"/category/guava/",indexes:[1012]},BigInteger:{path:"/category/biginteger/",indexes:[7,1046]},GitHub:{path:"/category/github/",indexes:[1424]},Zip4j:{path:"/category/zip4j/",indexes:[1013]},"LRU Cache":{path:"/category/lru-cache/",indexes:[1014]},招聘:{path:"/category/%E6%8B%9B%E8%81%98/",indexes:[1586]},Java开发:{path:"/category/java%E5%BC%80%E5%8F%91/",indexes:[1586]},"Utility Classes":{path:"/category/utility-classes/",indexes:[1342]},Compilation:{path:"/category/compilation/",indexes:[1019]},"3DES":{path:"/category/3des/",indexes:[6]},"Java Persistence API":{path:"/category/java-persistence-api/",indexes:[1587]},"Java Database Connectivity":{path:"/category/java-database-connectivity/",indexes:[1587]},Astra:{path:"/category/astra/",indexes:[1560,1561]},"REST & GraphQL":{path:"/category/rest-_-graphql/",indexes:[1560]},OkHttp:{path:"/category/okhttp/",indexes:[2]},日志:{path:"/category/%E6%97%A5%E5%BF%97/",indexes:[1566]},"Enterprise Integration Patterns":{path:"/category/enterprise-integration-patterns/",indexes:[1383]},POM:{path:"/category/pom/",indexes:[1411]},"Soft Delete":{path:"/category/soft-delete/",indexes:[1448]},工具:{path:"/category/%E5%B7%A5%E5%85%B7/",indexes:[1362]},JVM参数:{path:"/category/jvm%E5%8F%82%E6%95%B0/",indexes:[1588]},Java性能优化:{path:"/category/java%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/",indexes:[1588]},Dependencies:{path:"/category/dependencies/",indexes:[1500]},"Multipart Request":{path:"/category/multipart-request/",indexes:[1056]},"Distributed Systems":{path:"/category/distributed-systems/",indexes:[1589]},Interfaces:{path:"/category/interfaces/",indexes:[1025]},Set:{path:"/category/set/",indexes:[370]},Jmix:{path:"/category/jmix/",indexes:[1084]},"JEP 418":{path:"/category/jep-418/",indexes:[375]},Framework:{path:"/category/framework/",indexes:[391]},"New Features":{path:"/category/new-features/",indexes:[501]},时间处理:{path:"/category/%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86/",indexes:[352]},编码转换:{path:"/category/%E7%BC%96%E7%A0%81%E8%BD%AC%E6%8D%A2/",indexes:[379]},"Web Automation":{path:"/category/web-automation/",indexes:[1554]},Duration:{path:"/category/duration/",indexes:[1272]},"Java Tutorials":{path:"/category/java-tutorials/",indexes:[1580]},"HexFormat API":{path:"/category/hexformat-api/",indexes:[1273]},"EOL Characters":{path:"/category/eol-characters/",indexes:[384]},并行操作:{path:"/category/%E5%B9%B6%E8%A1%8C%E6%93%8D%E4%BD%9C/",indexes:[1275]},GZIP:{path:"/category/gzip/",indexes:[385,410]},"Saga Pattern":{path:"/category/saga-pattern/",indexes:[1438]},密码学:{path:"/category/%E5%AF%86%E7%A0%81%E5%AD%A6/",indexes:[359]},数据分析:{path:"/category/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/",indexes:[361]},"Commit Offsets":{path:"/category/commit-offsets/",indexes:[1430]},"Java Libraries":{path:"/category/java-libraries/",indexes:[1590]},"Apache Commons":{path:"/category/apache-commons/",indexes:[1590,439]},Redpanda:{path:"/category/redpanda/",indexes:[1431]},URI:{path:"/category/uri/",indexes:[368]},Jsoup:{path:"/category/jsoup/",indexes:[369]},Authorization:{path:"/category/authorization/",indexes:[1215]},"Development Practices":{path:"/category/development-practices/",indexes:[1538]},数据类型转换:{path:"/category/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/",indexes:[430]},"Google Protocol Buffer":{path:"/category/google-protocol-buffer/",indexes:[393]},计算机科学:{path:"/category/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/",indexes:[419]},"Version Control":{path:"/category/version-control/",indexes:[1505]},"Spring AOP":{path:"/category/spring-aop/",indexes:[1373]},"Update-Or-Insert":{path:"/category/update-or-insert/",indexes:[1247]},macOS:{path:"/category/macos/",indexes:[494]},"Apache Commons Compress":{path:"/category/apache-commons-compress/",indexes:[397]},Libraries:{path:"/category/libraries/",indexes:[466]},SSHJ:{path:"/category/sshj/",indexes:[453]},Email:{path:"/category/email/",indexes:[423]},Java编程:{path:"/category/java%E7%BC%96%E7%A8%8B/",indexes:[1591,1592]},数据类型比较:{path:"/category/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%AF%94%E8%BE%83/",indexes:[1591]},jOOQ:{path:"/category/jooq/",indexes:[402]},MyBatis:{path:"/category/mybatis/",indexes:[467]},Prometheus:{path:"/category/prometheus/",indexes:[1088]},"OpenAI API":{path:"/category/openai-api/",indexes:[488]},"Java Persistence":{path:"/category/java-persistence/",indexes:[1349]},安全:{path:"/category/%E5%AE%89%E5%85%A8/",indexes:[499]},ConverterNotFoundException:{path:"/category/converternotfoundexception/",indexes:[1248]},依赖管理:{path:"/category/%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86/",indexes:[1414]},Comparator:{path:"/category/comparator/",indexes:[491]},注解与枚举:{path:"/category/%E6%B3%A8%E8%A7%A3%E4%B8%8E%E6%9E%9A%E4%B8%BE/",indexes:[1592]}}}},tag:{"/":{path:"/tag/",map:{ALTS:{path:"/tag/alts/",indexes:[483]},安全:{path:"/tag/%E5%AE%89%E5%85%A8/",indexes:[1082,483]},PostgreSQL:{path:"/tag/postgresql/",indexes:[1053,1055]},MacOS:{path:"/tag/macos/",indexes:[1053]},Homebrew:{path:"/tag/homebrew/",indexes:[1053]},Database:{path:"/tag/database/",indexes:[1347,76,1053,907,1546]},DataJpaTest:{path:"/tag/datajpatest/",indexes:[1080]},Repository:{path:"/tag/repository/",indexes:[1456,255,1080,774,1258,1360]},数字唯一性:{path:"/tag/%E6%95%B0%E5%AD%97%E5%94%AF%E4%B8%80%E6%80%A7/",indexes:[343]},集合:{path:"/tag/%E9%9B%86%E5%90%88/",indexes:[34,237,343,452,835]},流API:{path:"/tag/%E6%B5%81api/",indexes:[343]},位操作:{path:"/tag/%E4%BD%8D%E6%93%8D%E4%BD%9C/",indexes:[343,447]},JavaType:{path:"/tag/javatype/",indexes:[318]},Class:{path:"/tag/class/",indexes:[72,318,1295,859]},Netty:{path:"/tag/netty/",indexes:[1149]},事件处理器:{path:"/tag/%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%99%A8/",indexes:[1149,1583]},监听器:{path:"/tag/%E7%9B%91%E5%90%AC%E5%99%A8/",indexes:[1149]},GroupId:{path:"/tag/groupid/",indexes:[1159]},ConsumerId:{path:"/tag/consumerid/",indexes:[1159]},API文档:{path:"/tag/api%E6%96%87%E6%A1%A3/",indexes:[91,1175,1139]},"Spring Boot":{path:"/tag/spring-boot/",indexes:[1520,1057,1059,1060,1457,1063,1065,1068,1069,1070,1052,1075,167,1078,181,1171,1172,278,322,1244,1175,1509,1176,1438,396,1247,1373,1475,1090,495,1094,1216,1098,524,527,1185,1559,1102,1103,1107,1251,1191,1528,1219,1220,1502,1120,1122,1460,1227,1123,911,1575,1230,1127,1233,1128,947,1129,1200,1132,1134,1515,1135,1404,1405,1383]},二叉搜索树:{path:"/tag/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/",indexes:[344]},算法:{path:"/tag/%E7%AE%97%E6%B3%95/",indexes:[299,344,389,457,476,1014]},序列:{path:"/tag/%E5%BA%8F%E5%88%97/",indexes:[345]},递归:{path:"/tag/%E9%80%92%E5%BD%92/",indexes:[225,299,340,345,531]},Java:{path:"/tag/java/",indexes:[2,4,6,7,10,20,21,22,24,28,30,31,33,34,1453,36,1454,41,42,45,46,47,49,53,59,67,70,75,77,78,83,93,99,105,118,119,121,1526,134,1525,139,146,152,156,159,162,163,1384,178,182,187,188,200,202,203,204,206,209,210,212,1493,227,229,234,236,237,244,249,250,254,257,259,261,1434,1363,266,268,269,275,279,280,284,285,1381,294,301,303,310,312,314,319,321,327,1392,342,348,351,357,358,368,1382,1371,386,388,393,397,402,404,415,417,424,427,438,439,449,457,460,470,485,486,487,488,489,490,1591,1592,492,495,497,498,500,1092,502,503,1527,1094,510,511,1365,519,523,1556,536,540,548,552,560,1492,1522,563,566,1419,1579,571,573,576,581,584,586,587,589,591,1512,599,601,602,603,604,607,612,613,615,616,618,621,622,623,625,627,630,633,634,637,643,646,647,653,1513,658,659,660,662,663,664,665,667,668,670,673,674,675,678,680,683,684,686,691,693,696,698,700,704,708,710,711,712,715,719,720,725,727,728,729,730,731,733,737,742,743,748,750,751,754,758,759,766,770,773,776,777,781,782,1564,791,792,795,796,800,803,806,811,813,814,817,821,827,830,833,834,835,836,838,839,840,841,845,846,848,851,853,856,857,861,862,864,867,870,872,873,874,877,878,879,880,884,885,887,888,889,890,893,894,895,902,903,905,1529,907,1124,910,1161,912,915,916,1576,918,919,921,923,924,928,930,934,935,937,1581,941,942,943,944,948,950,952,953,956,957,958,961,963,964,970,973,974,975,976,977,1133,978,981,983,984,990,992,1510,993,994,995,996,997,1002,1009,1546,1013,1014,1017,1018,1019,1020,1022,1024,1201,1535,1032,1584,1033,1035,1585,1038,1039,1435,1387,1040,1044,1045,1046,1047,1049]},String:{path:"/tag/string/",indexes:[0,7,19,21,39,77,163,189,231,232,247,319,1273,456,473,529,532,1305,1309,1339,590,596,597,599,643,670,674,692,710,821,840,841,854,867,939,984,992,1002]},substring:{path:"/tag/substring/",indexes:[319,372,585]},"Apache Commons Lang":{path:"/tag/apache-commons-lang/",indexes:[319,384,590]},Guava:{path:"/tag/guava/",indexes:[62,105,319,529,652]},缩写:{path:"/tag/%E7%BC%A9%E5%86%99/",indexes:[346]},姓名缩写:{path:"/tag/%E5%A7%93%E5%90%8D%E7%BC%A9%E5%86%99/",indexes:[346]},JSON:{path:"/tag/json/",indexes:[15,40,116,133,226,320,356,1277,399,1086,444,1180,1336,640,663,704,705,708,755,813,855,879,927,947,986,1524]},"Java List":{path:"/tag/java-list/",indexes:[113,320,606]},TypeToken:{path:"/tag/typetoken/",indexes:[320]},S3:{path:"/tag/s3/",indexes:[92,1525,347,414,521,1549]},Mock:{path:"/tag/mock/",indexes:[347]},Testing:{path:"/tag/testing/",indexes:[1370,1503,233,314,347,1371,1372,1373,497,1102,1302,645,1376,1377,765,1221,810,1576]},地图:{path:"/tag/%E5%9C%B0%E5%9B%BE/",indexes:[321]},格式化输出:{path:"/tag/%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA/",indexes:[321]},"GraphQL Mutation":{path:"/tag/graphql-mutation/",indexes:[322]},Spring:{path:"/tag/spring/",indexes:[1056,1370,1572,1168,1240,1241,255,1437,1440,1211,1214,1372,1093,1556,636,1476,1224,847,889,904,1390,1576,1258,1510,1448,1201]},"Spring Security":{path:"/tag/spring-security/",indexes:[167,1244,1211,1215,1247,1396,1097,1111,1113,1551,1220,1116,1119,1226,1228,1232,1234,1235,1237]},"Spring Data JPA":{path:"/tag/spring-data-jpa/",indexes:[167,1211,1247,1248,1194,1256]},迁移:{path:"/tag/%E8%BF%81%E7%A7%BB/",indexes:[1082]},流:{path:"/tag/%E6%B5%81/",indexes:[348,644]},列表:{path:"/tag/%E5%88%97%E8%A1%A8/",indexes:[112,348,445,1154]},打印:{path:"/tag/%E6%89%93%E5%8D%B0/",indexes:[311,348]},"Query Hints":{path:"/tag/query-hints/",indexes:[1245]},Performance:{path:"/tag/performance/",indexes:[1165,1243,1245,1415,539]},函数式编程:{path:"/tag/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/",indexes:[1152,1289,811]},"Railway Oriented Programming":{path:"/tag/railway-oriented-programming/",indexes:[1152]},"trailing spaces":{path:"/tag/trailing-spaces/",indexes:[323]},whitespace:{path:"/tag/whitespace/",indexes:[323,815]},regex:{path:"/tag/regex/",indexes:[80,323,585,734]},stripTrailing:{path:"/tag/striptrailing/",indexes:[323]},FlatBuffers:{path:"/tag/flatbuffers/",indexes:[349]},Tutorial:{path:"/tag/tutorial/",indexes:[337,349,1545,728,949]},JsonNode:{path:"/tag/jsonnode/",indexes:[222,350,987]},ArrayNode:{path:"/tag/arraynode/",indexes:[350]},Hibernate:{path:"/tag/hibernate/",indexes:[1240,1243,1352,1354,812,1357,1125,1358,998]},"REST API":{path:"/tag/rest-api/",indexes:[1074,1451,1244,1247,465,1093,932,1237,1405]},Testcontainers:{path:"/tag/testcontainers/",indexes:[1470,1364,497,1111,1124]},Docker:{path:"/tag/docker/",indexes:[1425,49,140,1364,1090,1492,1003]},"Testing Tools":{path:"/tag/testing-tools/",indexes:[1364]},分布式系统:{path:"/tag/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/",indexes:[1426,1429,324,1547]},键值存储:{path:"/tag/%E9%94%AE%E5%80%BC%E5%AD%98%E5%82%A8/",indexes:[324]},Annotation:{path:"/tag/annotation/",indexes:[1381,1177,889,1018]},SoftDelete:{path:"/tag/softdelete/",indexes:[1381]},动态路由:{path:"/tag/%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1/",indexes:[325]},企业集成模式:{path:"/tag/%E4%BC%81%E4%B8%9A%E9%9B%86%E6%88%90%E6%A8%A1%E5%BC%8F/",indexes:[325]},权重平均数:{path:"/tag/%E6%9D%83%E9%87%8D%E5%B9%B3%E5%9D%87%E6%95%B0/",indexes:[286]},计算:{path:"/tag/%E8%AE%A1%E7%AE%97/",indexes:[286,409]},Base64编码:{path:"/tag/base64%E7%BC%96%E7%A0%81/",indexes:[326]},数据编码:{path:"/tag/%E6%95%B0%E6%8D%AE%E7%BC%96%E7%A0%81/",indexes:[326]},"String Rotation":{path:"/tag/string-rotation/",indexes:[327]},字符串反转:{path:"/tag/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%8D%E8%BD%AC/",indexes:[328]},镜像测试:{path:"/tag/%E9%95%9C%E5%83%8F%E6%B5%8B%E8%AF%95/",indexes:[328]},LinkedHashMap:{path:"/tag/linkedhashmap/",indexes:[177,179,329,449,1512]},Stream:{path:"/tag/stream/",indexes:[45,77,206,329,355,459,586,604,619,647,736]},"Java 8":{path:"/tag/java-8/",indexes:[13,62,82,106,124,151,158,220,243,271,287,329,352,355,360,422,425,432,443,446,451,455,464,491,514,515,530,562,577,580,619,644,649,652,671,736,799,828,852,854,858,868,900]},CompletableFuture:{path:"/tag/completablefuture/",indexes:[203,205,223,330,1580,465,484,591,595,602,671,677]},runAsync:{path:"/tag/runasync/",indexes:[330]},supplyAsync:{path:"/tag/supplyasync/",indexes:[330]},"Unix Timestamp":{path:"/tag/unix-timestamp/",indexes:[287,856]},表达式转换:{path:"/tag/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BD%AC%E6%8D%A2/",indexes:[331]},逆波兰表示法:{path:"/tag/%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E7%A4%BA%E6%B3%95/",indexes:[331]},uppercase:{path:"/tag/uppercase/",indexes:[317]},lowercase:{path:"/tag/lowercase/",indexes:[317]},count:{path:"/tag/count/",indexes:[317]},CountDownLatch:{path:"/tag/countdownlatch/",indexes:[288]},Semaphore:{path:"/tag/semaphore/",indexes:[288]},URLConnection:{path:"/tag/urlconnection/",indexes:[289,528]},自定义连接:{path:"/tag/%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BF%9E%E6%8E%A5/",indexes:[289]},thenApply:{path:"/tag/thenapply/",indexes:[332]},thenApplyAsync:{path:"/tag/thenapplyasync/",indexes:[332]},字符串处理:{path:"/tag/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/",indexes:[4,18,333,441,486]},数字提取:{path:"/tag/%E6%95%B0%E5%AD%97%E6%8F%90%E5%8F%96/",indexes:[1151,333]},"Equilibrium Index":{path:"/tag/equilibrium-index/",indexes:[290]},Array:{path:"/tag/array/",indexes:[42,56,290,365,366,463,1338,1339,1341,559,658]},非重复元素:{path:"/tag/%E9%9D%9E%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/",indexes:[334]},列表处理:{path:"/tag/%E5%88%97%E8%A1%A8%E5%A4%84%E7%90%86/",indexes:[334]},"Spring Data":{path:"/tag/spring-data/",indexes:[1456,1239,195,1081,1545,1458,1253,1254,1461,1546,1387]},JPA:{path:"/tag/jpa/",indexes:[1445,1167,1071,107,109,1239,1240,1241,255,1081,1351,1248,1352,1354,1253,1447,1254,1356,1194,1257,812,1357,1125,1258,1587,1448,1362]},"Learn Spring Security":{path:"/tag/learn-spring-security/",indexes:[1210]},"Learn Spring Security Core":{path:"/tag/learn-spring-security-core/",indexes:[1210]},"Learn Spring Security OAuth":{path:"/tag/learn-spring-security-oauth/",indexes:[1210]},"Learn Spring":{path:"/tag/learn-spring/",indexes:[1210]},"Learn Spring Data JPA":{path:"/tag/learn-spring-data-jpa/",indexes:[1210]},"System.in.read()":{path:"/tag/system.in.read()/",indexes:[335]},用户输入:{path:"/tag/%E7%94%A8%E6%88%B7%E8%BE%93%E5%85%A5/",indexes:[335,950]},findBy:{path:"/tag/findby/",indexes:[1249,1253,1255]},多列查询:{path:"/tag/%E5%A4%9A%E5%88%97%E6%9F%A5%E8%AF%A2/",indexes:[1249]},Thymeleaf:{path:"/tag/thymeleaf/",indexes:[1173,1282,1182,1528,1226,1390]},"Spring MVC":{path:"/tag/spring-mvc/",indexes:[1173,1462,1199]},"JUnit 5":{path:"/tag/junit-5/",indexes:[1144,282,1391,765,1147,1148]},Mockito:{path:"/tag/mockito/",indexes:[233,1391,1371,381,468,471,528,550,642,1376,1377,1576]},测试:{path:"/tag/%E6%B5%8B%E8%AF%95/",indexes:[137,169,1391,362,468,999]},JDK:{path:"/tag/jdk/",indexes:[79,162,1392,569,572]},安装:{path:"/tag/%E5%AE%89%E8%A3%85/",indexes:[1392]},Java反射:{path:"/tag/java%E5%8F%8D%E5%B0%84/",indexes:[291,617]},内嵌类实例化:{path:"/tag/%E5%86%85%E5%B5%8C%E7%B1%BB%E5%AE%9E%E4%BE%8B%E5%8C%96/",indexes:[291]},源代码搜索引擎:{path:"/tag/%E6%BA%90%E4%BB%A3%E7%A0%81%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/",indexes:[1393]},跨引用:{path:"/tag/%E8%B7%A8%E5%BC%95%E7%94%A8/",indexes:[1393]},安装指南:{path:"/tag/%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/",indexes:[1393]},Logging:{path:"/tag/logging/",indexes:[1174,1382,1531,467,1122,1234,1131,1532,1137,1142]},"Aspect-Oriented Programming":{path:"/tag/aspect-oriented-programming/",indexes:[1174]},邮箱地址:{path:"/tag/%E9%82%AE%E7%AE%B1%E5%9C%B0%E5%9D%80/",indexes:[336]},电话号码:{path:"/tag/%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81/",indexes:[336]},脱敏:{path:"/tag/%E8%84%B1%E6%95%8F/",indexes:[336,1566]},正则表达式:{path:"/tag/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/",indexes:[4,62,105,150,281,310,313,336,442,461,486,582,1145,656,887]},Algorithm:{path:"/tag/algorithm/",indexes:[337,388,415,477]},可变对象:{path:"/tag/%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1/",indexes:[338]},不可变对象:{path:"/tag/%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1/",indexes:[338]},"Backend for Frontend":{path:"/tag/backend-for-frontend/",indexes:[1396]},Pagination:{path:"/tag/pagination/",indexes:[292,1186]},JDBC:{path:"/tag/jdbc/",indexes:[234,292,636,1409,1055,1587]},Kotlin:{path:"/tag/kotlin/",indexes:[1572,1261,1262,1151,1265,1266,1267,1268,1274,1275,1277,1278,1280,1281,1283,1285,1287,1288,1289,1291,1292,1293,1295,1296,1297,1298,1153,1301,1303,1305,1202,1308,1311,1107,1312,1315,1316,1319,1320,1321,1324,1326,1327,1328,1330,1154,1155,1332,1333,1335,1337,1338,1340,1341,1342,1344,1345,1346]},"String Parsing":{path:"/tag/string-parsing/",indexes:[1265]},"Number Format":{path:"/tag/number-format/",indexes:[1265]},Serialization:{path:"/tag/serialization/",indexes:[15,339,1277,573,761,1574,995]},Deserialization:{path:"/tag/deserialization/",indexes:[15,218,1079,339,755,757,832,833,986]},Java虚拟线程:{path:"/tag/java%E8%99%9A%E6%8B%9F%E7%BA%BF%E7%A8%8B/",indexes:[293]},并发:{path:"/tag/%E5%B9%B6%E5%8F%91/",indexes:[293,644]},Maven:{path:"/tag/maven/",indexes:[1413,294,1414,1416,561,1374,1375,1205,1419,1120,1422,1423,961,1134,1565,1042]},"Java 18":{path:"/tag/java-18/",indexes:[493,609]},"Simple Web Server":{path:"/tag/simple-web-server/",indexes:[493]},动态规划:{path:"/tag/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/",indexes:[340]},Base64:{path:"/tag/base64/",indexes:[295,901]},Encoding:{path:"/tag/encoding/",indexes:[295,901]},URLEncoder:{path:"/tag/urlencoder/",indexes:[296]},编码:{path:"/tag/%E7%BC%96%E7%A0%81/",indexes:[258,296,1478,1422,936]},特殊字符:{path:"/tag/%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6/",indexes:[296,1441]},"Raw Type":{path:"/tag/raw-type/",indexes:[297]},"Java Generics":{path:"/tag/java-generics/",indexes:[297,545,689]},InstanceAlreadyExistsException:{path:"/tag/instancealreadyexistsexception/",indexes:[341]},"Kafka producer":{path:"/tag/kafka-producer/",indexes:[341]},"Kafka consumer":{path:"/tag/kafka-consumer/",indexes:[341]},"Apache Kafka":{path:"/tag/apache-kafka/",indexes:[1425,1427,342,1161]},"Kafka Headers":{path:"/tag/kafka-headers/",indexes:[342]},JobParameters:{path:"/tag/jobparameters/",indexes:[298]},ItemReader:{path:"/tag/itemreader/",indexes:[298]},教程:{path:"/tag/%E6%95%99%E7%A8%8B/",indexes:[180,1434,1050,519,1582,978]},"Design Pattern":{path:"/tag/design-pattern/",indexes:[1363]},"Builder Pattern":{path:"/tag/builder-pattern/",indexes:[1363,768]},工作日计算:{path:"/tag/%E5%B7%A5%E4%BD%9C%E6%97%A5%E8%AE%A1%E7%AE%97/",indexes:[262]},Java日期操作:{path:"/tag/java%E6%97%A5%E6%9C%9F%E6%93%8D%E4%BD%9C/",indexes:[262]},数学运算:{path:"/tag/%E6%95%B0%E5%AD%A6%E8%BF%90%E7%AE%97/",indexes:[228,299]},Persistence:{path:"/tag/persistence/",indexes:[1207,1208,1209,1357]},REST:{path:"/tag/rest/",indexes:[1207,278,1208,1209,1537,1464,922]},Security:{path:"/tag/security/",indexes:[1207,1208,1209,1214,426,1110,630,1219,1224,1227,1230,1535,1405,1143]},Gregorian:{path:"/tag/gregorian/",indexes:[300]},Hijri:{path:"/tag/hijri/",indexes:[300]},日期转换:{path:"/tag/%E6%97%A5%E6%9C%9F%E8%BD%AC%E6%8D%A2/",indexes:[301]},Instant:{path:"/tag/instant/",indexes:[39,301,480,695,824]},LocalDate:{path:"/tag/localdate/",indexes:[119,1261,211,301,353,371,393,650,651,719,759]},"Joda-Time":{path:"/tag/joda-time/",indexes:[39,119,227,273,301,577,900]},"String Date Conversion":{path:"/tag/string-date-conversion/",indexes:[302]},"XML Schema":{path:"/tag/xml-schema/",indexes:[302]},byte:{path:"/tag/byte/",indexes:[263]},int:{path:"/tag/int/",indexes:[263,430,809,926]},转换:{path:"/tag/%E8%BD%AC%E6%8D%A2/",indexes:[40,68,235,247,263,424,431,446,808,809]},Unicode:{path:"/tag/unicode/",indexes:[191,303,607,625]},"Spring WebClient":{path:"/tag/spring-webclient/",indexes:[1180]},"Custom Deserialization":{path:"/tag/custom-deserialization/",indexes:[1180]},"mvn verify":{path:"/tag/mvn-verify/",indexes:[1412,304]},"mvn test":{path:"/tag/mvn-test/",indexes:[304]},"mvn install":{path:"/tag/mvn-install/",indexes:[1412]},时间:{path:"/tag/%E6%97%B6%E9%97%B4/",indexes:[10,305]},时区:{path:"/tag/%E6%97%B6%E5%8C%BA/",indexes:[305]},"SSL Debug":{path:"/tag/ssl-debug/",indexes:[264]},"Java Secure Socket Layer":{path:"/tag/java-secure-socket-layer/",indexes:[264]},"Orkes Conductor":{path:"/tag/orkes-conductor/",indexes:[1437,1438]},Kafka:{path:"/tag/kafka/",indexes:[1157,1158,1426,1428,1440,1430,1179,1160,616,640,1433,697,715,728,737,1502,1132]},"Event-Driven":{path:"/tag/event-driven/",indexes:[1440,1096]},SecureRandom:{path:"/tag/securerandom/",indexes:[306]},随机数生成:{path:"/tag/%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%94%9F%E6%88%90/",indexes:[306]},"Spring-Kafka":{path:"/tag/spring-kafka/",indexes:[1079]},字符串:{path:"/tag/%E5%AD%97%E7%AC%A6%E4%B8%B2/",indexes:[22,46,51,62,148,1151,259,307,442,748,887]},"UTF-8":{path:"/tag/utf-8/",indexes:[258,307,379]},"ISO-8859-1":{path:"/tag/iso-8859-1/",indexes:[307,379]},"Service URL":{path:"/tag/service-url/",indexes:[1444]},ClusterIP:{path:"/tag/clusterip/",indexes:[1444]},NodePort:{path:"/tag/nodeport/",indexes:[1444]},LoadBalancer:{path:"/tag/loadbalancer/",indexes:[1444]},测试覆盖率:{path:"/tag/%E6%B5%8B%E8%AF%95%E8%A6%86%E7%9B%96%E7%8E%87/",indexes:[308]},数据管道:{path:"/tag/%E6%95%B0%E6%8D%AE%E7%AE%A1%E9%81%93/",indexes:[308]},KotlinPoet:{path:"/tag/kotlinpoet/",indexes:[1264]},"Code Generation":{path:"/tag/code-generation/",indexes:[1264]},Baeldung:{path:"/tag/baeldung/",indexes:[1050]},"Java Flight Recorder":{path:"/tag/java-flight-recorder/",indexes:[265]},JFR:{path:"/tag/jfr/",indexes:[265]},"Java 21":{path:"/tag/java-21/",indexes:[142,154,242,265,501,506,534,648]},"List vs. Set":{path:"/tag/list-vs.-set/",indexes:[1380]},OneToMany:{path:"/tag/onetomany/",indexes:[1380]},"Part Time":{path:"/tag/part-time/",indexes:[1449]},"Integration Experience":{path:"/tag/integration-experience/",indexes:[1449]},动态代理:{path:"/tag/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/",indexes:[309,572]},AOP:{path:"/tag/aop/",indexes:[1168,1078,309,1373]},装饰者模式:{path:"/tag/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/",indexes:[309]},反射:{path:"/tag/%E5%8F%8D%E5%B0%84/",indexes:[309,468,717]},"N+1 Problem":{path:"/tag/n_1-problem/",indexes:[1242]},数据库优化:{path:"/tag/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96/",indexes:[1242]},URL规范化:{path:"/tag/url%E8%A7%84%E8%8C%83%E5%8C%96/",indexes:[310]},"Apache Commons Validator":{path:"/tag/apache-commons-validator/",indexes:[310]},URI类:{path:"/tag/uri%E7%B1%BB/",indexes:[310]},"2D数组":{path:"/tag/2d%E6%95%B0%E7%BB%84/",indexes:[311,429]},多线程:{path:"/tag/%E5%A4%9A%E7%BA%BF%E7%A8%8B/",indexes:[312,315,1032]},文件读写:{path:"/tag/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/",indexes:[160,312]},密码验证:{path:"/tag/%E5%AF%86%E7%A0%81%E9%AA%8C%E8%AF%81/",indexes:[313]},ListIterator:{path:"/tag/listiterator/",indexes:[266,360,690]},编程:{path:"/tag/%E7%BC%96%E7%A8%8B/",indexes:[68,1150,95,97,266,895]},"Run-Length Encoding":{path:"/tag/run-length-encoding/",indexes:[285]},"Environment Variables":{path:"/tag/environment-variables/",indexes:[314,578,1123]},Runtime:{path:"/tag/runtime/",indexes:[314]},Spock:{path:"/tag/spock/",indexes:[267]},Gradle:{path:"/tag/gradle/",indexes:[25,1497,1504,267,520,805,1499,1134]},OutOfMemoryError:{path:"/tag/outofmemoryerror/",indexes:[1450,315,842]},"Morse Code":{path:"/tag/morse-code/",indexes:[268]},Translation:{path:"/tag/translation/",indexes:[268]},日志记录:{path:"/tag/%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95/",indexes:[316]},结构化日志:{path:"/tag/%E7%BB%93%E6%9E%84%E5%8C%96%E6%97%A5%E5%BF%97/",indexes:[316]},文件名:{path:"/tag/%E6%96%87%E4%BB%B6%E5%90%8D/",indexes:[269,862]},当前时间:{path:"/tag/%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4/",indexes:[269]},"Extension Functions":{path:"/tag/extension-functions/",indexes:[270]},"Private Fields":{path:"/tag/private-fields/",indexes:[270]},JWT:{path:"/tag/jwt/",indexes:[71,1213,1214,806,1229,1143]},"Custom Claims":{path:"/tag/custom-claims/",indexes:[1213]},"Spring Authorization Server":{path:"/tag/spring-authorization-server/",indexes:[1213]},流式API:{path:"/tag/%E6%B5%81%E5%BC%8Fapi/",indexes:[271]},列表操作:{path:"/tag/%E5%88%97%E8%A1%A8%E6%93%8D%E4%BD%9C/",indexes:[271]},枚举:{path:"/tag/%E6%9E%9A%E4%B8%BE/",indexes:[75,237,454,1592,974]},float:{path:"/tag/float/",indexes:[272,614]},integer:{path:"/tag/integer/",indexes:[272]},比较:{path:"/tag/%E6%AF%94%E8%BE%83/",indexes:[272]},Point:{path:"/tag/point/",indexes:[238]},"Straight Line":{path:"/tag/straight-line/",indexes:[238]},Check:{path:"/tag/check/",indexes:[238,1320]},DateTime:{path:"/tag/datetime/",indexes:[273]},Date:{path:"/tag/date/",indexes:[196,273,352,587,698]},BigDecimal:{path:"/tag/bigdecimal/",indexes:[0,204,274,275,1591,641,800,912]},Integer:{path:"/tag/integer/",indexes:[77,157,274,275,637,701,783,792,800]},Conversion:{path:"/tag/conversion/",indexes:[157,274,1309,1322,1339,711]},"Kubernetes Operator":{path:"/tag/kubernetes-operator/",indexes:[276]},"Java Operator SDK":{path:"/tag/java-operator-sdk/",indexes:[276]},Micronaut:{path:"/tag/micronaut/",indexes:[1451]},MongoDB:{path:"/tag/mongodb/",indexes:[28,1452,31,1453,1454,1455,1456,1457,1451,1458,1098,1548,830,1121,1460,899,907,1461,924,942,952,958,963]},"Reactive Programming":{path:"/tag/reactive-programming/",indexes:[1571,1451,1475,847,1529]},Xmx:{path:"/tag/xmx/",indexes:[240]},MaxRAM:{path:"/tag/maxram/",indexes:[240]},Future:{path:"/tag/future/",indexes:[241,523,677]},Promise:{path:"/tag/promise/",indexes:[241]},"Generational ZGC":{path:"/tag/generational-zgc/",indexes:[242]},HttpServletRequest:{path:"/tag/httpservletrequest/",indexes:[277,509]},"Query String":{path:"/tag/query-string/",indexes:[277]},"Data Management":{path:"/tag/data-management/",indexes:[1385]},"Query Optimization":{path:"/tag/query-optimization/",indexes:[1385,1521]},"Spring Framework":{path:"/tag/spring-framework/",indexes:[1163,1072,1077,197,1469,367,380,392,1100,749,1193,818,1196,1197,1126]},"AI Generative Prompts":{path:"/tag/ai-generative-prompts/",indexes:[1469]},"Spring Cloud AWS 3.0":{path:"/tag/spring-cloud-aws-3.0/",indexes:[1470]},SQS:{path:"/tag/sqs/",indexes:[1470]},"Integration Test":{path:"/tag/integration-test/",indexes:[1470]},LocalStack:{path:"/tag/localstack/",indexes:[1470]},Stream操作:{path:"/tag/stream%E6%93%8D%E4%BD%9C/",indexes:[243]},HTTPS:{path:"/tag/https/",indexes:[43,1413,1223]},"501错误":{path:"/tag/501%E9%94%99%E8%AF%AF/",indexes:[1413]},"main method":{path:"/tag/main-method/",indexes:[279,645]},"static block":{path:"/tag/static-block/",indexes:[279]},PriorityQueue:{path:"/tag/priorityqueue/",indexes:[280,438,814]},iterator:{path:"/tag/iterator/",indexes:[280]},BufferedReader:{path:"/tag/bufferedreader/",indexes:[261,629]},FileReader:{path:"/tag/filereader/",indexes:[261]},Scanner:{path:"/tag/scanner/",indexes:[102,261,629,719,729,731,743,866,919]},性能分析:{path:"/tag/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/",indexes:[259]},链表:{path:"/tag/%E9%93%BE%E8%A1%A8/",indexes:[260]},删除操作:{path:"/tag/%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C/",indexes:[260]},非打印字符:{path:"/tag/%E9%9D%9E%E6%89%93%E5%8D%B0%E5%AD%97%E7%AC%A6/",indexes:[281]},文本处理:{path:"/tag/%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/",indexes:[281,418,656]},ParameterResolutionException:{path:"/tag/parameterresolutionexception/",indexes:[282]},"Spring WebFlux":{path:"/tag/spring-webflux/",indexes:[1472]},文件上传:{path:"/tag/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/",indexes:[1472,1109]},"异步I/O":{path:"/tag/%E5%BC%82%E6%AD%A5io/",indexes:[1472]},非阻塞:{path:"/tag/%E9%9D%9E%E9%98%BB%E5%A1%9E/",indexes:[1472,526]},Gson:{path:"/tag/gson/",indexes:[115,130,132,218,283,1277,405,1336,661,672,678,712]},JsonParser:{path:"/tag/jsonparser/",indexes:[283]},堆大小:{path:"/tag/%E5%A0%86%E5%A4%A7%E5%B0%8F/",indexes:[1450]},"Static Context":{path:"/tag/static-context/",indexes:[284]},"Non-Static Method":{path:"/tag/non-static-method/",indexes:[284]},Query:{path:"/tag/query/",indexes:[1241,1545]},SpEL:{path:"/tag/spel/",indexes:[1241]},ZERO:{path:"/tag/zero/",indexes:[204]},性能:{path:"/tag/%E6%80%A7%E8%83%BD/",indexes:[204,245,1431,562,644,683]},日期:{path:"/tag/%E6%97%A5%E6%9C%9F/",indexes:[244]},月份间隔:{path:"/tag/%E6%9C%88%E4%BB%BD%E9%97%B4%E9%9A%94/",indexes:[244]},ListenableFuture:{path:"/tag/listenablefuture/",indexes:[205,1012]},StringBuilder:{path:"/tag/stringbuilder/",indexes:[47,96,236,442,584,596,599,880]},contains:{path:"/tag/contains/",indexes:[236]},indexOf:{path:"/tag/indexof/",indexes:[236]},"String Comparison":{path:"/tag/string-comparison/",indexes:[206]},Set:{path:"/tag/set/",indexes:[135,206,1202,548,634,680,713,1514]},List:{path:"/tag/list/",indexes:[206,360,548,1316,1322,1346,627,658,777,781,797,827,854,1514,870,940]},for循环:{path:"/tag/for%E5%BE%AA%E7%8E%AF/",indexes:[209,245]},迭代器:{path:"/tag/%E8%BF%AD%E4%BB%A3%E5%99%A8/",indexes:[209,245,725]},"byte array":{path:"/tag/byte-array/",indexes:[246,794]},"JSON conversion":{path:"/tag/json-conversion/",indexes:[246]},Excel:{path:"/tag/excel/",indexes:[235,504,512,819,978]},PDF:{path:"/tag/pdf/",indexes:[73,235,546]},Long:{path:"/tag/long/",indexes:[196,247]},Java字符串:{path:"/tag/java%E5%AD%97%E7%AC%A6%E4%B8%B2/",indexes:[207]},字符串转字符列表:{path:"/tag/%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E5%AD%97%E7%AC%A6%E5%88%97%E8%A1%A8/",indexes:[207]},OutputStream:{path:"/tag/outputstream/",indexes:[208,250,724]},"Byte Array":{path:"/tag/byte-array/",indexes:[208,953,994]},ExecutorService:{path:"/tag/executorservice/",indexes:[248,1580,437,837]},"submit()":{path:"/tag/submit()/",indexes:[248]},"execute()":{path:"/tag/execute()/",indexes:[248]},"Dijkstra’s Algorithm":{path:"/tag/dijkstra%E2%80%99s-algorithm/",indexes:[1263]},Graphs:{path:"/tag/graphs/",indexes:[1263,1292]},文件搜索:{path:"/tag/%E6%96%87%E4%BB%B6%E6%90%9C%E7%B4%A2/",indexes:[210,571]},文件遍历:{path:"/tag/%E6%96%87%E4%BB%B6%E9%81%8D%E5%8E%86/",indexes:[210]},数组:{path:"/tag/%E6%95%B0%E7%BB%84/",indexes:[106,112,225,249,429,434,476,1202]},缺失数字:{path:"/tag/%E7%BC%BA%E5%A4%B1%E6%95%B0%E5%AD%97/",indexes:[249]},QueryException:{path:"/tag/queryexception/",indexes:[1379]},"Named Parameter":{path:"/tag/named-parameter/",indexes:[1379]},DateTimeFormatter:{path:"/tag/datetimeformatter/",indexes:[39,211]},Reflection:{path:"/tag/reflection/",indexes:[1262,1271,1274,404,1288,1295,1326,567,612,889,996,1049]},"Field Names":{path:"/tag/field-names/",indexes:[1262]},StringWriter:{path:"/tag/stringwriter/",indexes:[250]},"System.currentTimeMillis()":{path:"/tag/system.currenttimemillis()/",indexes:[251]},"System.nanoTime()":{path:"/tag/system.nanotime()/",indexes:[251]},"String.length()":{path:"/tag/string.length()/",indexes:[252]},"String.getBytes().length":{path:"/tag/string.getbytes().length/",indexes:[252]},Lambda:{path:"/tag/lambda/",indexes:[212,1337,573]},"Lazy Initialization":{path:"/tag/lazy-initialization/",indexes:[212,214]},double:{path:"/tag/double/",indexes:[171,253,614]},"scientific notation":{path:"/tag/scientific-notation/",indexes:[253]},formatting:{path:"/tag/formatting/",indexes:[253]},Reactor:{path:"/tag/reactor/",indexes:[213,1178,472]},"Virtual Threads":{path:"/tag/virtual-threads/",indexes:[213,403,527]},文件分割:{path:"/tag/%E6%96%87%E4%BB%B6%E5%88%86%E5%89%B2/",indexes:[254]},字符串操作:{path:"/tag/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/",indexes:[256]},字符串旋转:{path:"/tag/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%97%8B%E8%BD%AC/",indexes:[256]},消息队列:{path:"/tag/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/",indexes:[1429,779]},列表排序:{path:"/tag/%E5%88%97%E8%A1%A8%E6%8E%92%E5%BA%8F/",indexes:[257]},验证:{path:"/tag/%E9%AA%8C%E8%AF%81/",indexes:[258,787]},"Object Hydration":{path:"/tag/object-hydration/",indexes:[214]},"ORM Frameworks":{path:"/tag/orm-frameworks/",indexes:[214]},getReferenceById:{path:"/tag/getreferencebyid/",indexes:[1250]},findById:{path:"/tag/findbyid/",indexes:[1250,721]},员工调度:{path:"/tag/%E5%91%98%E5%B7%A5%E8%B0%83%E5%BA%A6/",indexes:[215]},优化:{path:"/tag/%E4%BC%98%E5%8C%96/",indexes:[215]},"Colon Usage":{path:"/tag/colon-usage/",indexes:[216]},"Java Features":{path:"/tag/java-features/",indexes:[216]},"Error Prone":{path:"/tag/error-prone/",indexes:[217]},Java库:{path:"/tag/java%E5%BA%93/",indexes:[55,217,453]},"Java KeyStore":{path:"/tag/java-keystore/",indexes:[170]},keytool:{path:"/tag/keytool/",indexes:[170,1010]},整数:{path:"/tag/%E6%95%B4%E6%95%B0/",indexes:[171,173,428]},数值检查:{path:"/tag/%E6%95%B0%E5%80%BC%E6%A3%80%E6%9F%A5/",indexes:[171]},"Database Connection":{path:"/tag/database-connection/",indexes:[1457,1479]},"IntelliJ IDEA":{path:"/tag/intellij-idea/",indexes:[1479,1495,1505,1362]},"Long Timestamp":{path:"/tag/long-timestamp/",indexes:[172]},Convert:{path:"/tag/convert/",indexes:[0,172,766,944]},取反:{path:"/tag/%E5%8F%96%E5%8F%8D/",indexes:[173,881]},数据转换:{path:"/tag/%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2/",indexes:[116,1493]},Entity:{path:"/tag/entity/",indexes:[219,1348]},DTO:{path:"/tag/dto/",indexes:[219,1248,945]},唯一性:{path:"/tag/%E5%94%AF%E4%B8%80%E6%80%A7/",indexes:[174,1459]},长整型:{path:"/tag/%E9%95%BF%E6%95%B4%E5%9E%8B/",indexes:[174]},"Stream API":{path:"/tag/stream-api/",indexes:[151,193,220,372,443,502,627,713]},NullPointerException:{path:"/tag/nullpointerexception/",indexes:[1163,221,491]},"findFirst()":{path:"/tag/findfirst()/",indexes:[221,1256]},Optional:{path:"/tag/optional/",indexes:[182,221,446,455,464,482,799,838]},字节数组:{path:"/tag/%E5%AD%97%E8%8A%82%E6%95%B0%E7%BB%84/",indexes:[123,156,175,1321]},字符数组:{path:"/tag/%E5%AD%97%E7%AC%A6%E6%95%B0%E7%BB%84/",indexes:[175]},ObjectNode:{path:"/tag/objectnode/",indexes:[222]},单元测试:{path:"/tag/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/",indexes:[1058,223]},"Java Map":{path:"/tag/java-map/",indexes:[176,1e3]},编程技巧:{path:"/tag/%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/",indexes:[35,1158,176,228,449,667,885]},Sorting:{path:"/tag/sorting/",indexes:[177,491,664,923]},字体:{path:"/tag/%E5%AD%97%E4%BD%93/",indexes:[178]},GUI:{path:"/tag/gui/",indexes:[178]},"Inter-Process Communication":{path:"/tag/inter-process-communication/",indexes:[224]},"Java IPC":{path:"/tag/java-ipc/",indexes:[224]},HashMap:{path:"/tag/hashmap/",indexes:[78,115,134,147,160,179,194,432,608,1513,660,684,831,977,997,1031]},Flow:{path:"/tag/flow/",indexes:[1259]},Merging:{path:"/tag/merging/",indexes:[1259]},方法:{path:"/tag/%E6%96%B9%E6%B3%95/",indexes:[180]},请求修改:{path:"/tag/%E8%AF%B7%E6%B1%82%E4%BF%AE%E6%94%B9/",indexes:[1078]},过滤器:{path:"/tag/%E8%BF%87%E6%BB%A4%E5%99%A8/",indexes:[1078]},拦截器:{path:"/tag/%E6%8B%A6%E6%88%AA%E5%99%A8/",indexes:[1078,1051]},JVM:{path:"/tag/jvm/",indexes:[1057,128,181,198,1495,1564,804,1019]},配置:{path:"/tag/%E9%85%8D%E7%BD%AE/",indexes:[169,181,1491,1204,965]},Exception:{path:"/tag/exception/",indexes:[226,544,1287,1377]},"Unix Time":{path:"/tag/unix-time/",indexes:[227]},"Legacy Date API":{path:"/tag/legacy-date-api/",indexes:[227,623]},"Date Time API":{path:"/tag/date-time-api/",indexes:[227,580,623]},非空:{path:"/tag/%E9%9D%9E%E7%A9%BA/",indexes:[182]},Async:{path:"/tag/async/",indexes:[1171]},Retry:{path:"/tag/retry/",indexes:[1070,1171,1189,764,968]},InputStream:{path:"/tag/inputstream/",indexes:[1164,57,229,383,459,724,901]},"skip bytes":{path:"/tag/skip-bytes/",indexes:[229]},"Alpaquita Linux":{path:"/tag/alpaquita-linux/",indexes:[1508,1501,1092]},"Java apps":{path:"/tag/java-apps/",indexes:[1501]},"Kafka message headers":{path:"/tag/kafka-message-headers/",indexes:[1501]},static:{path:"/tag/static/",indexes:[230,593]},final:{path:"/tag/final/",indexes:[230,593]},常量:{path:"/tag/%E5%B8%B8%E9%87%8F/",indexes:[230]},内存限制:{path:"/tag/%E5%86%85%E5%AD%98%E9%99%90%E5%88%B6/",indexes:[231]},"Integer.MAX_VALUE":{path:"/tag/integer.max-value/",indexes:[231]},StringBuffer:{path:"/tag/stringbuffer/",indexes:[47,232,599]},"Lambda Expression":{path:"/tag/lambda-expression/",indexes:[233,798]},NoSQL:{path:"/tag/nosql/",indexes:[1520,1059,76,234,1484,1489]},OpenRewrite:{path:"/tag/openrewrite/",indexes:[564]},代码重构:{path:"/tag/%E4%BB%A3%E7%A0%81%E9%87%8D%E6%9E%84/",indexes:[564]},"RESTful Web Services":{path:"/tag/restful-web-services/",indexes:[155,1516]},"JAX-RS":{path:"/tag/jax-rs/",indexes:[155]},JUnit:{path:"/tag/junit/",indexes:[1503,471,516,550,1374,578,620,1145,645,717,740,784,982,1043]},Hamcrest:{path:"/tag/hamcrest/",indexes:[1503]},"Exception Handling":{path:"/tag/exception-handling/",indexes:[52,1269,1473,1286,647,722,1115,1257,932,1401,1007]},"Asynchronous Programming":{path:"/tag/asynchronous-programming/",indexes:[1286]},Enum:{path:"/tag/enum/",indexes:[183,1277,470,1305,1330,827,974]},"Type Checking":{path:"/tag/type-checking/",indexes:[183]},"Kotlin Coroutines":{path:"/tag/kotlin-coroutines/",indexes:[1260]},Flows:{path:"/tag/flows/",indexes:[1260]},Comparison:{path:"/tag/comparison/",indexes:[584,663]},Java泛型:{path:"/tag/java%E6%B3%9B%E5%9E%8B/",indexes:[184,553]},比较方法:{path:"/tag/%E6%AF%94%E8%BE%83%E6%96%B9%E6%B3%95/",indexes:[184]},"Java 17":{path:"/tag/java-17/",indexes:[26,1573,82,185,579,967,988]},反序列化:{path:"/tag/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/",indexes:[185]},安全性:{path:"/tag/%E5%AE%89%E5%85%A8%E6%80%A7/",indexes:[185]},文件转换:{path:"/tag/%E6%96%87%E4%BB%B6%E8%BD%AC%E6%8D%A2/",indexes:[156,1321]},ResultSet:{path:"/tag/resultset/",indexes:[186,946]},Map:{path:"/tag/map/",indexes:[33,60,87,158,186,355,1301,548,1317,1322,664,674,711,712,777,1031]},时间戳转换:{path:"/tag/%E6%97%B6%E9%97%B4%E6%88%B3%E8%BD%AC%E6%8D%A2/",indexes:[187]},Hexadecimal:{path:"/tag/hexadecimal/",indexes:[157,1273,988]},Streams:{path:"/tag/streams/",indexes:[158,529,530,626,828,902,1132]},Multimap:{path:"/tag/multimap/",indexes:[158]},ASCII:{path:"/tag/ascii/",indexes:[146,188,766,934]},控制台:{path:"/tag/%E6%8E%A7%E5%88%B6%E5%8F%B0/",indexes:[50,188]},表格:{path:"/tag/%E8%A1%A8%E6%A0%BC/",indexes:[188]},可变字符串:{path:"/tag/%E5%8F%AF%E5%8F%98%E5%AD%97%E7%AC%A6%E4%B8%B2/",indexes:[159]},isEmpty:{path:"/tag/isempty/",indexes:[189]},isBlank:{path:"/tag/isblank/",indexes:[189]},Cron表达式:{path:"/tag/cron%E8%A1%A8%E8%BE%BE%E5%BC%8F/",indexes:[190]},定时任务:{path:"/tag/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/",indexes:[190]},消息顺序:{path:"/tag/%E6%B6%88%E6%81%AF%E9%A1%BA%E5%BA%8F/",indexes:[1427]},可执行注释:{path:"/tag/%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%B3%A8%E9%87%8A/",indexes:[191]},"indexOf()":{path:"/tag/indexof()/",indexes:[585]},Proxy:{path:"/tag/proxy/",indexes:[1504]},HashSet:{path:"/tag/hashset/",indexes:[192,675,820,964]},toArray:{path:"/tag/toarray/",indexes:[192,1020]},NoSuchElementException:{path:"/tag/nosuchelementexception/",indexes:[193,729]},XML解析:{path:"/tag/xml%E8%A7%A3%E6%9E%90/",indexes:[194]},"Consumer Group":{path:"/tag/consumer-group/",indexes:[1428]},"Partition Rebalancing":{path:"/tag/partition-rebalancing/",indexes:[1428]},修改:{path:"/tag/%E4%BF%AE%E6%94%B9/",indexes:[586]},"MongoDB Atlas":{path:"/tag/mongodb-atlas/",indexes:[195]},"Integration Testing":{path:"/tag/integration-testing/",indexes:[1061,1172,1176,1111,1515]},SimpleDateFormat:{path:"/tag/simpledateformat/",indexes:[196,1261,762]},Rounding:{path:"/tag/rounding/",indexes:[587,621]},"Bean Configuration":{path:"/tag/bean-configuration/",indexes:[197]},内存映射:{path:"/tag/%E5%86%85%E5%AD%98%E6%98%A0%E5%B0%84/",indexes:[198]},共享内存:{path:"/tag/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/",indexes:[198]},日期排序:{path:"/tag/%E6%97%A5%E6%9C%9F%E6%8E%92%E5%BA%8F/",indexes:[1261]},自定义比较器:{path:"/tag/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%AF%94%E8%BE%83%E5%99%A8/",indexes:[1261]},测试自动化:{path:"/tag/%E6%B5%8B%E8%AF%95%E8%87%AA%E5%8A%A8%E5%8C%96/",indexes:[199]},Web自动化:{path:"/tag/web%E8%87%AA%E5%8A%A8%E5%8C%96/",indexes:[199]},Synchronization:{path:"/tag/synchronization/",indexes:[200]},Thread:{path:"/tag/thread/",indexes:[200,523,665,837,851,883,979]},"Java Collections":{path:"/tag/java-collections/",indexes:[201,549]},时间复杂度:{path:"/tag/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/",indexes:[201]},TimeUnit:{path:"/tag/timeunit/",indexes:[588]},时间转换:{path:"/tag/%E6%97%B6%E9%97%B4%E8%BD%AC%E6%8D%A2/",indexes:[588]},代码:{path:"/tag/%E4%BB%A3%E7%A0%81/",indexes:[161]},编译错误:{path:"/tag/%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF/",indexes:[35,161,936]},Unsafe:{path:"/tag/unsafe/",indexes:[202]},park:{path:"/tag/park/",indexes:[202]},unpark:{path:"/tag/unpark/",indexes:[202]},MathFlux:{path:"/tag/mathflux/",indexes:[1170]},"Project Reactor":{path:"/tag/project-reactor/",indexes:[44,1170,1007]},异常处理:{path:"/tag/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/",indexes:[1072,203,1231,1403]},ConditionalOnThreading:{path:"/tag/conditionalonthreading/",indexes:[1191]},"HTTP Client":{path:"/tag/http-client/",indexes:[1077]},"Spring 6":{path:"/tag/spring-6/",indexes:[74,1508,1406]},"JdbcClient API":{path:"/tag/jdbcclient-api/",indexes:[1406]},Arrays:{path:"/tag/arrays/",indexes:[1281,511,1317,1328,589,633,675,776,834]},"mismatch()":{path:"/tag/mismatch()/",indexes:[589]},Capitalize:{path:"/tag/capitalize/",indexes:[162,840]},"Apache Commons":{path:"/tag/apache-commons/",indexes:[62,120,162,876,1039]},Character:{path:"/tag/character/",indexes:[590,913,934]},"Regular Expression":{path:"/tag/regular-expression/",indexes:[590]},"Java Streams":{path:"/tag/java-streams/",indexes:[590]},"Number Detection":{path:"/tag/number-detection/",indexes:[163]},"Conditional Throwing":{path:"/tag/conditional-throwing/",indexes:[1287]},"GlassFish Server":{path:"/tag/glassfish-server/",indexes:[1511]},"Java Enterprise":{path:"/tag/java-enterprise/",indexes:[1511]},异步编程:{path:"/tag/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/",indexes:[484,526,591,595]},DOM:{path:"/tag/dom/",indexes:[487,592]},"XML Parsing":{path:"/tag/xml-parsing/",indexes:[592]},XML转换:{path:"/tag/xml%E8%BD%AC%E6%8D%A2/",indexes:[164,487]},文档对象模型:{path:"/tag/%E6%96%87%E6%A1%A3%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/",indexes:[164]},简单API:{path:"/tag/%E7%AE%80%E5%8D%95api/",indexes:[164]},ZipFile:{path:"/tag/zipfile/",indexes:[165,700]},ZipInputStream:{path:"/tag/zipinputstream/",indexes:[165]},单例模式:{path:"/tag/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/",indexes:[594]},设计模式:{path:"/tag/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",indexes:[89,1280,538,551,594]},StringUtils:{path:"/tag/stringutils/",indexes:[372,596]},POJO:{path:"/tag/pojo/",indexes:[166,705,945,1005]},OpenCSV:{path:"/tag/opencsv/",indexes:[166,489]},CSV文件:{path:"/tag/csv%E6%96%87%E4%BB%B6/",indexes:[166]},JavaDoc:{path:"/tag/javadoc/",indexes:[496]},Generics:{path:"/tag/generics/",indexes:[1276,404,496,977]},Entry:{path:"/tag/entry/",indexes:[33,1512]},Iteration:{path:"/tag/iteration/",indexes:[1274,597]},TestNG:{path:"/tag/testng/",indexes:[411,578]},Reuse:{path:"/tag/reuse/",indexes:[497]},"Local Development":{path:"/tag/local-development/",indexes:[497]},环境变量:{path:"/tag/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/",indexes:[1491]},应用:{path:"/tag/%E5%BA%94%E7%94%A8/",indexes:[1491]},CSV:{path:"/tag/csv/",indexes:[147,399,489]},"Apache Commons CSV":{path:"/tag/apache-commons-csv/",indexes:[147,489]},HttpSecurity:{path:"/tag/httpsecurity/",indexes:[1217]},WebSecurity:{path:"/tag/websecurity/",indexes:[1217]},"Connect 4":{path:"/tag/connect-4/",indexes:[498]},游戏实现:{path:"/tag/%E6%B8%B8%E6%88%8F%E5%AE%9E%E7%8E%B0/",indexes:[498]},Vector:{path:"/tag/vector/",indexes:[598]},ArrayList:{path:"/tag/arraylist/",indexes:[152,431,436,446,529,1306,549,598,608,653,1513,699,713,773,782,797,803,888,940]},LangChain:{path:"/tag/langchain/",indexes:[1384]},国际化:{path:"/tag/%E5%9B%BD%E9%99%85%E5%8C%96/",indexes:[1516]},Java记录:{path:"/tag/java%E8%AE%B0%E5%BD%95/",indexes:[168]},Optional参数:{path:"/tag/optional%E5%8F%82%E6%95%B0/",indexes:[168]},引用传递:{path:"/tag/%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92/",indexes:[599]},PrintWriter:{path:"/tag/printwriter/",indexes:[406,600,801]},FileWriter:{path:"/tag/filewriter/",indexes:[600,870]},Queue:{path:"/tag/queue/",indexes:[548,601]},重试逻辑:{path:"/tag/%E9%87%8D%E8%AF%95%E9%80%BB%E8%BE%91/",indexes:[602]},"String Split":{path:"/tag/string-split/",indexes:[603]},"Key-Value Pairs":{path:"/tag/key-value-pairs/",indexes:[603]},"Spring Boot 3.1":{path:"/tag/spring-boot-3.1/",indexes:[1091,1095]},ConnectionDetails:{path:"/tag/connectiondetails/",indexes:[1091]},"N-th Element":{path:"/tag/n-th-element/",indexes:[604]},"wait()":{path:"/tag/wait()/",indexes:[1334,605]},"notify()":{path:"/tag/notify()/",indexes:[605]},synchronization:{path:"/tag/synchronization/",indexes:[605]},换行:{path:"/tag/%E6%8D%A2%E8%A1%8C/",indexes:[148]},API:{path:"/tag/api/",indexes:[149,488,1101,1302,1522,1464,1399,838,1523,1022,1029,1553,1143]},版本控制:{path:"/tag/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/",indexes:[149,1420]},"Case-Insensitive Search":{path:"/tag/case-insensitive-search/",indexes:[606]},性能测试:{path:"/tag/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/",indexes:[150,394,1541,1543,1544]},"Class Equality":{path:"/tag/class-equality/",indexes:[1288]},"char array":{path:"/tag/char-array/",indexes:[151]},"int array":{path:"/tag/int-array/",indexes:[151]},"Java 7":{path:"/tag/java-7/",indexes:[151]},"String Conversion":{path:"/tag/string-conversion/",indexes:[401,413,607,1026]},"Native Image":{path:"/tag/native-image/",indexes:[140,1575]},多类型对象:{path:"/tag/%E5%A4%9A%E7%B1%BB%E5%9E%8B%E5%AF%B9%E8%B1%A1/",indexes:[152]},Finalization:{path:"/tag/finalization/",indexes:[609]},"Arrays.sort":{path:"/tag/arrays.sort/",indexes:[141]},"Collections.sort":{path:"/tag/collections.sort/",indexes:[141]},"Information Hiding":{path:"/tag/information-hiding/",indexes:[610]},Encapsulation:{path:"/tag/encapsulation/",indexes:[610]},putIfAbsent:{path:"/tag/putifabsent/",indexes:[611]},computeIfAbsent:{path:"/tag/computeifabsent/",indexes:[611]},BigInteger:{path:"/tag/biginteger/",indexes:[7,153,1313,1046]},性能比较:{path:"/tag/%E6%80%A7%E8%83%BD%E6%AF%94%E8%BE%83/",indexes:[153,1141]},Record:{path:"/tag/record/",indexes:[612]},MIME类型:{path:"/tag/mime%E7%B1%BB%E5%9E%8B/",indexes:[613]},文件扩展名:{path:"/tag/%E6%96%87%E4%BB%B6%E6%89%A9%E5%B1%95%E5%90%8D/",indexes:[613]},conversion:{path:"/tag/conversion/",indexes:[614,926]},用户名:{path:"/tag/%E7%94%A8%E6%88%B7%E5%90%8D/",indexes:[615]},系统属性:{path:"/tag/%E7%B3%BB%E7%BB%9F%E5%B1%9E%E6%80%A7/",indexes:[615]},Consumer:{path:"/tag/consumer/",indexes:[1179,616]},开发环境:{path:"/tag/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/",indexes:[1478]},"Character Sequence":{path:"/tag/character-sequence/",indexes:[146]},"Messaging System":{path:"/tag/messaging-system/",indexes:[1075,1160]},"Stream Processing":{path:"/tag/stream-processing/",indexes:[1160]},编程实践:{path:"/tag/%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5/",indexes:[617]},"String Concatenation":{path:"/tag/string-concatenation/",indexes:[618]},"Natural Language":{path:"/tag/natural-language/",indexes:[618]},分区:{path:"/tag/%E5%88%86%E5%8C%BA/",indexes:[619,1433]},高阶函数:{path:"/tag/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/",indexes:[1289]},"RSocket Server":{path:"/tag/rsocket-server/",indexes:[1508]},"RSocket Client":{path:"/tag/rsocket-client/",indexes:[1508]},"Array Rotation":{path:"/tag/array-rotation/",indexes:[500]},Loop:{path:"/tag/loop/",indexes:[502]},"Liberica JDK":{path:"/tag/liberica-jdk/",indexes:[1092]},SpringRunner:{path:"/tag/springrunner/",indexes:[1169,1146]},SpringBootTest:{path:"/tag/springboottest/",indexes:[1169]},"JEP 430":{path:"/tag/jep-430/",indexes:[534]},接口测试:{path:"/tag/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/",indexes:[620]},Double:{path:"/tag/double/",indexes:[621,641]},"Trunk-Based Development":{path:"/tag/trunk-based-development/",indexes:[1518]},持续集成:{path:"/tag/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/",indexes:[1518]},未命名类:{path:"/tag/%E6%9C%AA%E5%91%BD%E5%90%8D%E7%B1%BB/",indexes:[142]},实例主方法:{path:"/tag/%E5%AE%9E%E4%BE%8B%E4%B8%BB%E6%96%B9%E6%B3%95/",indexes:[142]},"Unnamed Patterns":{path:"/tag/unnamed-patterns/",indexes:[154]},比较对象:{path:"/tag/%E6%AF%94%E8%BE%83%E5%AF%B9%E8%B1%A1/",indexes:[622]},"Apache Commons Lang 3":{path:"/tag/apache-commons-lang-3/",indexes:[622]},Boolean:{path:"/tag/boolean/",indexes:[1076,894]},Validation:{path:"/tag/validation/",indexes:[1076]},Log4j:{path:"/tag/log4j/",indexes:[143]},"log4j.properties":{path:"/tag/log4j.properties/",indexes:[143]},Java日志:{path:"/tag/java%E6%97%A5%E5%BF%97/",indexes:[143]},"Date and Time":{path:"/tag/date-and-time/",indexes:[623]},断言:{path:"/tag/%E6%96%AD%E8%A8%80/",indexes:[1145]},CATALINA_OPTS:{path:"/tag/catalina-opts/",indexes:[624]},JAVA_OPTS:{path:"/tag/java-opts/",indexes:[624]},Emoji:{path:"/tag/emoji/",indexes:[625]},"Java IO":{path:"/tag/java-io/",indexes:[626,969]},"Reflection API":{path:"/tag/reflection-api/",indexes:[503]},"Object Creation":{path:"/tag/object-creation/",indexes:[503,770]},"Double to String":{path:"/tag/double-to-string/",indexes:[1290]},"Scientific Notation":{path:"/tag/scientific-notation/",indexes:[1290]},"Java Stream":{path:"/tag/java-stream/",indexes:[87,628]},"Regex Match":{path:"/tag/regex-match/",indexes:[628]},EOF:{path:"/tag/eof/",indexes:[629]},FileInputStream:{path:"/tag/fileinputstream/",indexes:[629]},FileChannel:{path:"/tag/filechannel/",indexes:[629]},Snyk:{path:"/tag/snyk/",indexes:[630]},Hashtable:{path:"/tag/hashtable/",indexes:[631]},ConcurrentHashMap:{path:"/tag/concurrenthashmap/",indexes:[631,817,964]},"permitAll()":{path:"/tag/permitall()/",indexes:[1218]},"anonymous()":{path:"/tag/anonymous()/",indexes:[1218]},堆转储:{path:"/tag/%E5%A0%86%E8%BD%AC%E5%82%A8/",indexes:[136]},线程转储:{path:"/tag/%E7%BA%BF%E7%A8%8B%E8%BD%AC%E5%82%A8/",indexes:[136]},核心转储:{path:"/tag/%E6%A0%B8%E5%BF%83%E8%BD%AC%E5%82%A8/",indexes:[136]},Spreadsheet:{path:"/tag/spreadsheet/",indexes:[504]},X509:{path:"/tag/x509/",indexes:[632,960]},Certificate:{path:"/tag/certificate/",indexes:[632,960]},"Common Name":{path:"/tag/common-name/",indexes:[632]},"Middle Element":{path:"/tag/middle-element/",indexes:[633]},YAML:{path:"/tag/yaml/",indexes:[1069,1291,1522,1524]},"kotlinx-serialization":{path:"/tag/kotlinx-serialization/",indexes:[1291]},kaml:{path:"/tag/kaml/",indexes:[1291]},YamlKt:{path:"/tag/yamlkt/",indexes:[1291]},"Apache POI":{path:"/tag/apache-poi/",indexes:[144,356]},Poiji:{path:"/tag/poiji/",indexes:[144]},FastExcel:{path:"/tag/fastexcel/",indexes:[144]},JExcelApi:{path:"/tag/jexcelapi/",indexes:[144]},Index:{path:"/tag/index/",indexes:[634]},"Unit Testing":{path:"/tag/unit-testing/",indexes:[381,437,1304,567,635,642,688]},Mocking:{path:"/tag/mocking/",indexes:[57,1304,635]},代码编辑器:{path:"/tag/%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8/",indexes:[1389]},代码行号:{path:"/tag/%E4%BB%A3%E7%A0%81%E8%A1%8C%E5%8F%B7/",indexes:[1389]},"Deprecated Methods":{path:"/tag/deprecated-methods/",indexes:[636]},Digits:{path:"/tag/digits/",indexes:[637]},MapStruct:{path:"/tag/mapstruct/",indexes:[480,638]},条件映射:{path:"/tag/%E6%9D%A1%E4%BB%B6%E6%98%A0%E5%B0%84/",indexes:[638]},"Gradle Lint":{path:"/tag/gradle-lint/",indexes:[639]},插件:{path:"/tag/%E6%8F%92%E4%BB%B6/",indexes:[639]},Cacheable:{path:"/tag/cacheable/",indexes:[1168,1084]},Streaming:{path:"/tag/streaming/",indexes:[640]},Log4j2:{path:"/tag/log4j2/",indexes:[1065,145,966,1135]},日志配置:{path:"/tag/%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE/",indexes:[145]},Jacoco:{path:"/tag/jacoco/",indexes:[505]},多模块:{path:"/tag/%E5%A4%9A%E6%A8%A1%E5%9D%97/",indexes:[505]},Maven插件:{path:"/tag/maven%E6%8F%92%E4%BB%B6/",indexes:[505,516,1421]},模拟:{path:"/tag/%E6%A8%A1%E6%8B%9F/",indexes:[137]},"Spring Data Cassandra":{path:"/tag/spring-data-cassandra/",indexes:[1521]},"IN Clause":{path:"/tag/in-clause/",indexes:[1521]},replace:{path:"/tag/replace/",indexes:[643,888]},escape:{path:"/tag/escape/",indexes:[643]},Vault:{path:"/tag/vault/",indexes:[1190]},"Kubernetes Secrets":{path:"/tag/kubernetes-secrets/",indexes:[1190]},SSL:{path:"/tag/ssl/",indexes:[43,1113,1223]},序列化集合:{path:"/tag/%E5%BA%8F%E5%88%97%E5%8C%96%E9%9B%86%E5%90%88/",indexes:[506]},可读性:{path:"/tag/%E5%8F%AF%E8%AF%BB%E6%80%A7/",indexes:[562,644]},"Value-Based Classes":{path:"/tag/value-based-classes/",indexes:[646]},"Project Valhalla":{path:"/tag/project-valhalla/",indexes:[646]},TLAB:{path:"/tag/tlab/",indexes:[507]},内存分配:{path:"/tag/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/",indexes:[507]},"System.out":{path:"/tag/system.out/",indexes:[508]},flush:{path:"/tag/flush/",indexes:[508]},"Amazon SNS":{path:"/tag/amazon-sns/",indexes:[1203]},"Amazon SQS":{path:"/tag/amazon-sqs/",indexes:[1203]},BFS:{path:"/tag/bfs/",indexes:[1292]},集成测试:{path:"/tag/%E9%9B%86%E6%88%90%E6%B5%8B%E8%AF%95/",indexes:[1058,1095]},地理坐标:{path:"/tag/%E5%9C%B0%E7%90%86%E5%9D%90%E6%A0%87/",indexes:[138]},距离计算:{path:"/tag/%E8%B7%9D%E7%A6%BB%E8%AE%A1%E7%AE%97/",indexes:[138]},Sum:{path:"/tag/sum/",indexes:[511,1320]},"clamp function":{path:"/tag/clamp-function/",indexes:[648]},"Math class":{path:"/tag/math-class/",indexes:[648]},"Time Conversion":{path:"/tag/time-conversion/",indexes:[649]},Epoch:{path:"/tag/epoch/",indexes:[650]},"Epoch Time":{path:"/tag/epoch-time/",indexes:[651]},LocalDateTime:{path:"/tag/localdatetime/",indexes:[64,480,651,695,824]},"List to Array":{path:"/tag/list-to-array/",indexes:[652]},"String Array":{path:"/tag/string-array/",indexes:[59,1323,653,796]},"int to Long":{path:"/tag/int-to-long/",indexes:[654]},"data type conversion":{path:"/tag/data-type-conversion/",indexes:[654]},"Magic Square":{path:"/tag/magic-square/",indexes:[510]},Telegram:{path:"/tag/telegram/",indexes:[1094]},MyBatis:{path:"/tag/mybatis/",indexes:[655]},"Spring JDBC":{path:"/tag/spring-jdbc/",indexes:[655,1407]},"if statement":{path:"/tag/if-statement/",indexes:[657]},"switch statement":{path:"/tag/switch-statement/",indexes:[657]},"functional programming":{path:"/tag/functional-programming/",indexes:[657]},Lombok:{path:"/tag/lombok/",indexes:[17,433,495,832,906,965]},OpenAPI:{path:"/tag/openapi/",indexes:[91,495,1523,1229]},自动生成模型:{path:"/tag/%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E6%A8%A1%E5%9E%8B/",indexes:[495]},随机元素:{path:"/tag/%E9%9A%8F%E6%9C%BA%E5%85%83%E7%B4%A0/",indexes:[135]},"Java.util.Random":{path:"/tag/java.util.random/",indexes:[135]},ThreadLocalRandom:{path:"/tag/threadlocalrandom/",indexes:[135]},Regex:{path:"/tag/regex/",indexes:[42,490,492,659,742,1024]},Pattern:{path:"/tag/pattern/",indexes:[659,939]},Matcher:{path:"/tag/matcher/",indexes:[659]},"Multiple Values":{path:"/tag/multiple-values/",indexes:[660]},文件重命名:{path:"/tag/%E6%96%87%E4%BB%B6%E9%87%8D%E5%91%BD%E5%90%8D/",indexes:[1525]},Jackson:{path:"/tag/jackson/",indexes:[1369,115,130,132,356,1277,444,1336,661,672,704,708,712,879,987]},maven:{path:"/tag/maven/",indexes:[1417]},error:{path:"/tag/error/",indexes:[1417]},"zip file":{path:"/tag/zip-file/",indexes:[1417]},"Maven Build":{path:"/tag/maven-build/",indexes:[1415]},"Inner Classes":{path:"/tag/inner-classes/",indexes:[474,662]},Subclasses:{path:"/tag/subclasses/",indexes:[662]},锁定:{path:"/tag/%E9%94%81%E5%AE%9A/",indexes:[512]},表头:{path:"/tag/%E8%A1%A8%E5%A4%B4/",indexes:[512]},"JSON Schema":{path:"/tag/json-schema/",indexes:[139]},自动生成:{path:"/tag/%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90/",indexes:[139]},Maps:{path:"/tag/maps/",indexes:[663]},"Java Web":{path:"/tag/java-web/",indexes:[509]},"Execution Control":{path:"/tag/execution-control/",indexes:[665]},"Composite Pattern":{path:"/tag/composite-pattern/",indexes:[1293]},"Amazon S3":{path:"/tag/amazon-s3/",indexes:[666]},"Java SDK":{path:"/tag/java-sdk/",indexes:[92,521,666]},"Sorted List":{path:"/tag/sorted-list/",indexes:[668]},"List Interface":{path:"/tag/list-interface/",indexes:[668]},"bootstrap.servers":{path:"/tag/bootstrap.servers/",indexes:[513]},"Kafka configuration":{path:"/tag/kafka-configuration/",indexes:[513]},"Polymorphic Deserialization":{path:"/tag/polymorphic-deserialization/",indexes:[131]},JsonSubTypes:{path:"/tag/jsonsubtypes/",indexes:[131]},Reflections:{path:"/tag/reflections/",indexes:[131,889]},ShardingSphere:{path:"/tag/shardingsphere/",indexes:[669]},"Database Sharding":{path:"/tag/database-sharding/",indexes:[669]},"Unique Characters":{path:"/tag/unique-characters/",indexes:[670]},并发编程:{path:"/tag/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/",indexes:[671]},文件路径:{path:"/tag/%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84/",indexes:[673,862]},绝对路径:{path:"/tag/%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84/",indexes:[54,673]},UnsatisfiedLinkError:{path:"/tag/unsatisfiedlinkerror/",indexes:[676]},"Java Native Libraries":{path:"/tag/java-native-libraries/",indexes:[676]},Observable:{path:"/tag/observable/",indexes:[677]},"Map.clear()":{path:"/tag/map.clear()/",indexes:[126]},新实例:{path:"/tag/%E6%96%B0%E5%AE%9E%E4%BE%8B/",indexes:[126]},"Spring Boot 3":{path:"/tag/spring-boot-3/",indexes:[1073]},"Docker Compose 支持":{path:"/tag/docker-compose-%E6%94%AF%E6%8C%81/",indexes:[1073]},HTML:{path:"/tag/html/",indexes:[1526,1267,369,492,1528]},XSS:{path:"/tag/xss/",indexes:[1526,1236]},JaCoCo:{path:"/tag/jacoco/",indexes:[516]},Kubernetes:{path:"/tag/kubernetes/",indexes:[1443,1106,1022,1045]},日志流:{path:"/tag/%E6%97%A5%E5%BF%97%E6%B5%81/",indexes:[1443]},监控:{path:"/tag/%E7%9B%91%E6%8E%A7/",indexes:[23,1443,1088,1103]},"Apache Pulsar":{path:"/tag/apache-pulsar/",indexes:[1075]},库:{path:"/tag/%E5%BA%93/",indexes:[133,876]},轻量级:{path:"/tag/%E8%BD%BB%E9%87%8F%E7%BA%A7/",indexes:[133]},yield:{path:"/tag/yield/",indexes:[679]},switch:{path:"/tag/switch/",indexes:[547,679]},"Java 14":{path:"/tag/java-14/",indexes:[1573,679,906]},LinkedHashSet:{path:"/tag/linkedhashset/",indexes:[680]},Executors:{path:"/tag/executors/",indexes:[681]},"Task Notification":{path:"/tag/task-notification/",indexes:[681]},Calendar:{path:"/tag/calendar/",indexes:[119,124,352,353,580]},"Spring Data JDBC":{path:"/tag/spring-data-jdbc/",indexes:[1407]},"Law of Demeter":{path:"/tag/law-of-demeter/",indexes:[127]},面向对象设计:{path:"/tag/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1/",indexes:[127]},MockK:{path:"/tag/mockk/",indexes:[1294]},varargs:{path:"/tag/varargs/",indexes:[1294,788]},Metaspace:{path:"/tag/metaspace/",indexes:[682]},"Garbage Collection":{path:"/tag/garbage-collection/",indexes:[560,682,905]},"Spring Data Reactive":{path:"/tag/spring-data-reactive/",indexes:[1186]},SLF4J:{path:"/tag/slf4j/",indexes:[1494]},"Parameterized Logging":{path:"/tag/parameterized-logging/",indexes:[1494]},Logback:{path:"/tag/logback/",indexes:[1065,1494,421,1531]},字符串连接:{path:"/tag/%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BF%9E%E6%8E%A5/",indexes:[683]},jqwik:{path:"/tag/jqwik/",indexes:[1365]},"Property-Based Testing":{path:"/tag/property-based-testing/",indexes:[1365]},"Spring Integration":{path:"/tag/spring-integration/",indexes:[1054]},"NOTIFY/LISTEN":{path:"/tag/notifylisten/",indexes:[1054]},去重:{path:"/tag/%E5%8E%BB%E9%87%8D/",indexes:[684]},"JSON Minify":{path:"/tag/json-minify/",indexes:[685]},"Whitespace Removal":{path:"/tag/whitespace-removal/",indexes:[685]},"Scroll API":{path:"/tag/scroll-api/",indexes:[1239]},"Stateless Object":{path:"/tag/stateless-object/",indexes:[686]},主题:{path:"/tag/%E4%B8%BB%E9%A2%98/",indexes:[1433]},SocketException:{path:"/tag/socketexception/",indexes:[687]},"Broken Pipe":{path:"/tag/broken-pipe/",indexes:[687]},"System.in":{path:"/tag/system.in/",indexes:[688]},Holder:{path:"/tag/holder/",indexes:[689]},"Pass-by-Value":{path:"/tag/pass-by-value/",indexes:[1283,689]},Iterator:{path:"/tag/iterator/",indexes:[475,1346,690,844,929]},"HTTP Session":{path:"/tag/http-session/",indexes:[1182]},"Apache Commons Lang3":{path:"/tag/apache-commons-lang3/",indexes:[119]},文件检查:{path:"/tag/%E6%96%87%E4%BB%B6%E6%A3%80%E6%9F%A5/",indexes:[691]},文件是否为空:{path:"/tag/%E6%96%87%E4%BB%B6%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA/",indexes:[691]},"Non-Alphanumeric":{path:"/tag/non-alphanumeric/",indexes:[692]},"Special Characters":{path:"/tag/special-characters/",indexes:[692]},线程池:{path:"/tag/%E7%BA%BF%E7%A8%8B%E6%B1%A0/",indexes:[514]},Enum转换:{path:"/tag/enum%E8%BD%AC%E6%8D%A2/",indexes:[693]},"row count":{path:"/tag/row-count/",indexes:[1252]},"JPA Repository":{path:"/tag/jpa-repository/",indexes:[1252]},CriteriaQuery:{path:"/tag/criteriaquery/",indexes:[1252]},JPQL:{path:"/tag/jpql/",indexes:[1252,1359]},代码编辑:{path:"/tag/%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91/",indexes:[125]},导入优化:{path:"/tag/%E5%AF%BC%E5%85%A5%E4%BC%98%E5%8C%96/",indexes:[125]},Springwolf:{path:"/tag/springwolf/",indexes:[1096]},Documentation:{path:"/tag/documentation/",indexes:[1096,1553]},"Big Endian":{path:"/tag/big-endian/",indexes:[696]},"Little Endian":{path:"/tag/little-endian/",indexes:[696]},tar:{path:"/tag/tar/",indexes:[120]},gzip:{path:"/tag/gzip/",indexes:[120]},"Apache Ant":{path:"/tag/apache-ant/",indexes:[120]},"Apache Commons VFS":{path:"/tag/apache-commons-vfs/",indexes:[120]},Partitions:{path:"/tag/partitions/",indexes:[697]},Time:{path:"/tag/time/",indexes:[698]},Toolchains:{path:"/tag/toolchains/",indexes:[128]},"application.properties":{path:"/tag/application.properties/",indexes:[1099]},"application.yml":{path:"/tag/application.yml/",indexes:[1099]},深拷贝:{path:"/tag/%E6%B7%B1%E6%8B%B7%E8%B4%9D/",indexes:[1299,699]},日期处理:{path:"/tag/%E6%97%A5%E6%9C%9F%E5%A4%84%E7%90%86/",indexes:[121]},"Joda Time":{path:"/tag/joda-time/",indexes:[121,762]},ZipEntry:{path:"/tag/zipentry/",indexes:[700]},CSRF:{path:"/tag/csrf/",indexes:[1097,1467]},"Wrapper Class":{path:"/tag/wrapper-class/",indexes:[701]},"Primitive Type":{path:"/tag/primitive-type/",indexes:[701]},JeroMQ:{path:"/tag/jeromq/",indexes:[702]},ZeroMQ:{path:"/tag/zeromq/",indexes:[702]},Selenide:{path:"/tag/selenide/",indexes:[1533]},"Selenium WebDriver":{path:"/tag/selenium-webdriver/",indexes:[1533,1536,816]},UI测试:{path:"/tag/ui%E6%B5%8B%E8%AF%95/",indexes:[1533]},JAXP:{path:"/tag/jaxp/",indexes:[703]},JAXB:{path:"/tag/jaxb/",indexes:[703]},Encryption:{path:"/tag/encryption/",indexes:[1098,1307,1036]},"Java 20":{path:"/tag/java-20/",indexes:[110,129]},新特性:{path:"/tag/%E6%96%B0%E7%89%B9%E6%80%A7/",indexes:[9,129,579]},"for loop":{path:"/tag/for-loop/",indexes:[515]},parallelism:{path:"/tag/parallelism/",indexes:[515]},Function:{path:"/tag/function/",indexes:[1295,1330]},JSON格式化:{path:"/tag/json%E6%A0%BC%E5%BC%8F%E5%8C%96/",indexes:[130]},this:{path:"/tag/this/",indexes:[1296]},YugabyteDB:{path:"/tag/yugabytedb/",indexes:[1183]},SQL:{path:"/tag/sql/",indexes:[1348,399,402,467,1183]},"Distributed SQL":{path:"/tag/distributed-sql/",indexes:[1183]},JSP:{path:"/tag/jsp/",indexes:[1534]},JavaScript:{path:"/tag/javascript/",indexes:[1534,1390]},Web开发:{path:"/tag/web%E5%BC%80%E5%8F%91/",indexes:[1534]},Scheduling:{path:"/tag/scheduling/",indexes:[1176,1297]},Coroutines:{path:"/tag/coroutines/",indexes:[1297,1334]},"Default Values":{path:"/tag/default-values/",indexes:[705]},"HTTP PATCH":{path:"/tag/http-patch/",indexes:[1074]},"Smart Batching":{path:"/tag/smart-batching/",indexes:[706]},"Micro Batching":{path:"/tag/micro-batching/",indexes:[706]},字符串分割:{path:"/tag/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%86%E5%89%B2/",indexes:[582,970]},Build:{path:"/tag/build/",indexes:[1416]},Resume:{path:"/tag/resume/",indexes:[1416]},"Vector API":{path:"/tag/vector-api/",indexes:[122]},"Java 19":{path:"/tag/java-19/",indexes:[66,122,527,541]},"Call Stack":{path:"/tag/call-stack/",indexes:[707]},"Stack Overflow":{path:"/tag/stack-overflow/",indexes:[707]},equals:{path:"/tag/equals/",indexes:[464,709,745,746,971]},assert:{path:"/tag/assert/",indexes:[709]},comparison:{path:"/tag/comparison/",indexes:[709]},Programming:{path:"/tag/programming/",indexes:[1278,1279,1298,1344,849]},Uppercase:{path:"/tag/uppercase/",indexes:[710,984]},Lowercase:{path:"/tag/lowercase/",indexes:[710]},克隆:{path:"/tag/%E5%85%8B%E9%9A%86/",indexes:[1299]},对象:{path:"/tag/%E5%AF%B9%E8%B1%A1/",indexes:[1299]},浅拷贝:{path:"/tag/%E6%B5%85%E6%8B%B7%E8%B4%9D/",indexes:[1299]},"Code Quality":{path:"/tag/code-quality/",indexes:[20,1366]},Refactoring:{path:"/tag/refactoring/",indexes:[1366,892]},合并:{path:"/tag/%E5%90%88%E5%B9%B6/",indexes:[78,123]},findOneBy:{path:"/tag/findoneby/",indexes:[1253]},"get()":{path:"/tag/get()/",indexes:[1506]},"navigate()":{path:"/tag/navigate()/",indexes:[1506]},"Kotlin Flows":{path:"/tag/kotlin-flows/",indexes:[1300]},"single() vs first()":{path:"/tag/single()-vs-first()/",indexes:[1300]},"Command Line":{path:"/tag/command-line/",indexes:[1144,524]},WSDL:{path:"/tag/wsdl/",indexes:[520,1465]},"Web Services":{path:"/tag/web-services/",indexes:[520]},"Gray Box Testing":{path:"/tag/gray-box-testing/",indexes:[714]},OAT:{path:"/tag/oat/",indexes:[714]},"Test Coverage":{path:"/tag/test-coverage/",indexes:[1538,714]},日期时间API:{path:"/tag/%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4api/",indexes:[124]},HTTP响应体:{path:"/tag/http%E5%93%8D%E5%BA%94%E4%BD%93/",indexes:[517]},负载测试:{path:"/tag/%E8%B4%9F%E8%BD%BD%E6%B5%8B%E8%AF%95/",indexes:[517]},IllegalStateException:{path:"/tag/illegalstateexception/",indexes:[716]},ServletRequest:{path:"/tag/servletrequest/",indexes:[716]},getReader:{path:"/tag/getreader/",indexes:[716]},getInputStream:{path:"/tag/getinputstream/",indexes:[716]},readObject:{path:"/tag/readobject/",indexes:[111]},readResolve:{path:"/tag/readresolve/",indexes:[111]},图像压缩:{path:"/tag/%E5%9B%BE%E5%83%8F%E5%8E%8B%E7%BC%A9/",indexes:[519]},JMockit:{path:"/tag/jmockit/",indexes:[528,1576]},私有字段:{path:"/tag/%E7%A7%81%E6%9C%89%E5%AD%97%E6%AE%B5/",indexes:[717]},"JPA Specification":{path:"/tag/jpa-specification/",indexes:[1353]},"No-Argument Constructor":{path:"/tag/no-argument-constructor/",indexes:[1353]},"Kafka Consumer API":{path:"/tag/kafka-consumer-api/",indexes:[718]},"Real-time data processing":{path:"/tag/real-time-data-processing/",indexes:[718]},DateFormat:{path:"/tag/dateformat/",indexes:[719]},Word文档:{path:"/tag/word%E6%96%87%E6%A1%A3/",indexes:[522]},文档模板:{path:"/tag/%E6%96%87%E6%A1%A3%E6%A8%A1%E6%9D%BF/",indexes:[522]},文本替换:{path:"/tag/%E6%96%87%E6%9C%AC%E6%9B%BF%E6%8D%A2/",indexes:[522]},Callable:{path:"/tag/callable/",indexes:[523,822]},JMeter:{path:"/tag/jmeter/",indexes:[1541,1543,1544,1563,1542]},命令行:{path:"/tag/%E5%91%BD%E4%BB%A4%E8%A1%8C/",indexes:[1541,925]},日期字符串排序:{path:"/tag/%E6%97%A5%E6%9C%9F%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8E%92%E5%BA%8F/",indexes:[720]},getById:{path:"/tag/getbyid/",indexes:[721]},"Enum Mapping":{path:"/tag/enum-mapping/",indexes:[722]},ORM:{path:"/tag/orm/",indexes:[1355]},Associations:{path:"/tag/associations/",indexes:[1355]},"LISTEN/NOTIFY":{path:"/tag/listennotify/",indexes:[1052]},消息代理:{path:"/tag/%E6%B6%88%E6%81%AF%E4%BB%A3%E7%90%86/",indexes:[1052]},Elasticsearch:{path:"/tag/elasticsearch/",indexes:[1545,1547]},搜索引擎:{path:"/tag/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/",indexes:[1547]},数据分析:{path:"/tag/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/",indexes:[1547,839]},ArrayBlockingQueue:{path:"/tag/arrayblockingqueue/",indexes:[100]},LinkedBlockingQueue:{path:"/tag/linkedblockingqueue/",indexes:[100]},百分比计算:{path:"/tag/%E7%99%BE%E5%88%86%E6%AF%94%E8%AE%A1%E7%AE%97/",indexes:[1153]},集合操作:{path:"/tag/%E9%9B%86%E5%90%88%E6%93%8D%E4%BD%9C/",indexes:[113]},Classpath:{path:"/tag/classpath/",indexes:[114,961]},Modulepath:{path:"/tag/modulepath/",indexes:[114]},JSON转换:{path:"/tag/json%E8%BD%AC%E6%8D%A2/",indexes:[115]},"JSON-Java":{path:"/tag/json-java/",indexes:[115]},封装:{path:"/tag/%E5%B0%81%E8%A3%85/",indexes:[723]},字符串到整数转换:{path:"/tag/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%B0%E6%95%B4%E6%95%B0%E8%BD%AC%E6%8D%A2/",indexes:[723]},XML:{path:"/tag/xml/",indexes:[30,116,357,1441,910]},cURL:{path:"/tag/curl/",indexes:[1386,1558]},Postman:{path:"/tag/postman/",indexes:[1386,1463,1467,1468,1530]},"flush()":{path:"/tag/flush()/",indexes:[1447]},EntityManager:{path:"/tag/entitymanager/",indexes:[1447,1360]},自定义:{path:"/tag/%E8%87%AA%E5%AE%9A%E4%B9%89/",indexes:[725]},compile:{path:"/tag/compile/",indexes:[1498,1027]},implementation:{path:"/tag/implementation/",indexes:[1498]},依赖管理:{path:"/tag/%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86/",indexes:[1205,1420]},实体:{path:"/tag/%E5%AE%9E%E4%BD%93/",indexes:[1441]},Singleton:{path:"/tag/singleton/",indexes:[727]},Synchronized:{path:"/tag/synchronized/",indexes:[727]},AtomicBoolean:{path:"/tag/atomicboolean/",indexes:[727]},"Static Initialization":{path:"/tag/static-initialization/",indexes:[727]},Javadoc:{path:"/tag/javadoc/",indexes:[525,1419,1040]},文档生成:{path:"/tag/%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90/",indexes:[525]},Argon2:{path:"/tag/argon2/",indexes:[730]},Hashing:{path:"/tag/hashing/",indexes:[730]},"Natural ID":{path:"/tag/natural-id/",indexes:[1071]},Input:{path:"/tag/input/",indexes:[731]},Spaces:{path:"/tag/spaces/",indexes:[731]},"Pod Logs":{path:"/tag/pod-logs/",indexes:[1442]},kubectl:{path:"/tag/kubectl/",indexes:[1442]},"Kubernetes Dashboard":{path:"/tag/kubernetes-dashboard/",indexes:[1442]},MinIO:{path:"/tag/minio/",indexes:[1549]},PrintStream:{path:"/tag/printstream/",indexes:[101,801]},字符串转换:{path:"/tag/%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2/",indexes:[101]},"Object.toString()":{path:"/tag/object.tostring()/",indexes:[732]},"String.valueOf()":{path:"/tag/string.valueof()/",indexes:[732,886]},Selenium:{path:"/tag/selenium/",indexes:[733,1507]},WebDriver:{path:"/tag/webdriver/",indexes:[58,733,1507,751]},新建标签页:{path:"/tag/%E6%96%B0%E5%BB%BA%E6%A0%87%E7%AD%BE%E9%A1%B5/",indexes:[733]},输入处理:{path:"/tag/%E8%BE%93%E5%85%A5%E5%A4%84%E7%90%86/",indexes:[102,950]},java:{path:"/tag/java/",indexes:[575,734,790]},anchors:{path:"/tag/anchors/",indexes:[734]},"API Key":{path:"/tag/api-key/",indexes:[1219]},"Shared Secret Authentication":{path:"/tag/shared-secret-authentication/",indexes:[1114]},Microservices:{path:"/tag/microservices/",indexes:[1394,391,1439,1114,802,1589]},Interfaces:{path:"/tag/interfaces/",indexes:[735,937]},Implementation:{path:"/tag/implementation/",indexes:[735]},"Spring Boot Actuator":{path:"/tag/spring-boot-actuator/",indexes:[1100]},"next()":{path:"/tag/next()/",indexes:[117]},"nextLine()":{path:"/tag/nextline()/",indexes:[117]},"Empty Stream":{path:"/tag/empty-stream/",indexes:[736]},控制台输出:{path:"/tag/%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA/",indexes:[118]},文件输出:{path:"/tag/%E6%96%87%E4%BB%B6%E8%BE%93%E5%87%BA/",indexes:[118]},H2:{path:"/tag/h2/",indexes:[1185,738]},HikariCP:{path:"/tag/hikaricp/",indexes:[1185]},Spoon:{path:"/tag/spoon/",indexes:[103]},Java代码分析:{path:"/tag/java%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/",indexes:[103]},Java代码转换:{path:"/tag/java%E4%BB%A3%E7%A0%81%E8%BD%AC%E6%8D%A2/",indexes:[103]},"In-Memory Database":{path:"/tag/in-memory-database/",indexes:[738]},"Schema Creation":{path:"/tag/schema-creation/",indexes:[738]},参数:{path:"/tag/%E5%8F%82%E6%95%B0/",indexes:[89,552]},"Java Bean":{path:"/tag/java-bean/",indexes:[89]},构建器模式:{path:"/tag/%E6%9E%84%E5%BB%BA%E5%99%A8%E6%A8%A1%E5%BC%8F/",indexes:[89]},"Hibernate 6":{path:"/tag/hibernate-6/",indexes:[104]},"Boolean Converters":{path:"/tag/boolean-converters/",indexes:[104]},WebFlux:{path:"/tag/webflux/",indexes:[1571,1471,1474]},Flux:{path:"/tag/flux/",indexes:[44,1164,1471,472,843]},"Reactive Streams":{path:"/tag/reactive-streams/",indexes:[12,1471,518]},"byte arrays":{path:"/tag/byte-arrays/",indexes:[99]},"array comparison":{path:"/tag/array-comparison/",indexes:[99]},AAR:{path:"/tag/aar/",indexes:[739]},JAR:{path:"/tag/jar/",indexes:[69,373,739,961]},测试套件:{path:"/tag/%E6%B5%8B%E8%AF%95%E5%A5%97%E4%BB%B6/",indexes:[740]},Keycloak:{path:"/tag/keycloak/",indexes:[84,1550]},IAM:{path:"/tag/iam/",indexes:[1550]},"Custom Protocol Mapper":{path:"/tag/custom-protocol-mapper/",indexes:[1550]},"th:text":{path:"/tag/thtext/",indexes:[90]},"th:value":{path:"/tag/thvalue/",indexes:[90]},OAuth:{path:"/tag/oauth/",indexes:[1216,1111,1551,1116,1230]},索引:{path:"/tag/%E7%B4%A2%E5%BC%95/",indexes:[106,434,478]},"Longest Word":{path:"/tag/longest-word/",indexes:[741]},"Java String":{path:"/tag/java-string/",indexes:[413,741,962]},UUID:{path:"/tag/uuid/",indexes:[107,758,1410,908,953]},BufferedImage:{path:"/tag/bufferedimage/",indexes:[108,390,412]},像素数组:{path:"/tag/%E5%83%8F%E7%B4%A0%E6%95%B0%E7%BB%84/",indexes:[108]},图像数据:{path:"/tag/%E5%9B%BE%E5%83%8F%E6%95%B0%E6%8D%AE/",indexes:[108]},"Text Extraction":{path:"/tag/text-extraction/",indexes:[742]},持久化:{path:"/tag/%E6%8C%81%E4%B9%85%E5%8C%96/",indexes:[109,1351]},"List```````````````<String>```````````````":{path:"/tag/list_______________string_______________/",indexes:[109]},MutableMap:{path:"/tag/mutablemap/",indexes:[1301]},"Integer.parseInt":{path:"/tag/integer.parseint/",indexes:[743]},nextInt:{path:"/tag/nextint/",indexes:[743]},"Spring Modulith":{path:"/tag/spring-modulith/",indexes:[1184]},"Modular Monolith Architecture":{path:"/tag/modular-monolith-architecture/",indexes:[1184]},JAVA_HOME:{path:"/tag/java-home/",indexes:[744]},PATH:{path:"/tag/path/",indexes:[744]},hashCode:{path:"/tag/hashcode/",indexes:[427,745,746]},"Apache OpenNLP":{path:"/tag/apache-opennlp/",indexes:[747]},"Stanford CoreNLP":{path:"/tag/stanford-corenlp/",indexes:[747]},引号:{path:"/tag/%E5%BC%95%E5%8F%B7/",indexes:[748]},"String Manipulation":{path:"/tag/string-manipulation/",indexes:[98,416]},"Regular Expressions":{path:"/tag/regular-expressions/",indexes:[98]},"HTML Input":{path:"/tag/html-input/",indexes:[1507]},"Scoped Values":{path:"/tag/scoped-values/",indexes:[110]},"Self-Injection":{path:"/tag/self-injection/",indexes:[749]},"SQL Syntax Error":{path:"/tag/sql-syntax-error/",indexes:[1087,1115]},StaleElementReferenceException:{path:"/tag/staleelementreferenceexception/",indexes:[1536]},Ktor:{path:"/tag/ktor/",indexes:[1282,1302]},"URL Manipulation":{path:"/tag/url-manipulation/",indexes:[750]},ChatGPT:{path:"/tag/chatgpt/",indexes:[488,1101]},"Timeout Annotation":{path:"/tag/timeout-annotation/",indexes:[752]},"Unit Test":{path:"/tag/unit-test/",indexes:[16,57,427,752]},Azure:{path:"/tag/azure/",indexes:[1556]},"Companion Object":{path:"/tag/companion-object/",indexes:[1285]},"Static Methods":{path:"/tag/static-methods/",indexes:[1285]},"Buffer Overflow":{path:"/tag/buffer-overflow/",indexes:[753]},"Java Security":{path:"/tag/java-security/",indexes:[753]},"Boolean to String":{path:"/tag/boolean-to-string/",indexes:[754]},整数转十六进制:{path:"/tag/%E6%95%B4%E6%95%B0%E8%BD%AC%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6/",indexes:[93]},"Generic Type":{path:"/tag/generic-type/",indexes:[755]},classpath:{path:"/tag/classpath/",indexes:[756]},sourcepath:{path:"/tag/sourcepath/",indexes:[756]},JMXTerm:{path:"/tag/jmxterm/",indexes:[94]},调试:{path:"/tag/%E8%B0%83%E8%AF%95/",indexes:[94]},PropertyReferenceException:{path:"/tag/propertyreferenceexception/",indexes:[1254]},JsonMappingException:{path:"/tag/jsonmappingexception/",indexes:[757]},"Functional Testing":{path:"/tag/functional-testing/",indexes:[1539]},"Non-Functional Testing":{path:"/tag/non-functional-testing/",indexes:[1539]},技术:{path:"/tag/%E6%8A%80%E6%9C%AF/",indexes:[95,1459]},Week:{path:"/tag/week/",indexes:[759]},"Date Calculation":{path:"/tag/date-calculation/",indexes:[759]},"Implicit Wait":{path:"/tag/implicit-wait/",indexes:[1555]},"Explicit Wait":{path:"/tag/explicit-wait/",indexes:[1555]},AWS:{path:"/tag/aws/",indexes:[1068,1117]},"Secrets Manager":{path:"/tag/secrets-manager/",indexes:[1068]},"helper class":{path:"/tag/helper-class/",indexes:[760]},"utility class":{path:"/tag/utility-class/",indexes:[760]},Configuration:{path:"/tag/configuration/",indexes:[1395,1069,421,1531,1458,1197,1460,1135,1142]},OffsetDateTime:{path:"/tag/offsetdatetime/",indexes:[401,761]},Java日期解析:{path:"/tag/java%E6%97%A5%E6%9C%9F%E8%A7%A3%E6%9E%90/",indexes:[762]},DateTimeFormatterBuilder:{path:"/tag/datetimeformatterbuilder/",indexes:[762]},"Apache Commons DateUtils":{path:"/tag/apache-commons-dateutils/",indexes:[762]},CPU:{path:"/tag/cpu/",indexes:[763]},Troubleshooting:{path:"/tag/troubleshooting/",indexes:[763]},"Private Constructors":{path:"/tag/private-constructors/",indexes:[1303]},多对多:{path:"/tag/%E5%A4%9A%E5%AF%B9%E5%A4%9A/",indexes:[1356]},实体删除:{path:"/tag/%E5%AE%9E%E4%BD%93%E5%88%A0%E9%99%A4/",indexes:[1356]},Resilience4j:{path:"/tag/resilience4j/",indexes:[1063,1070]},"Circuit Breaker":{path:"/tag/circuit-breaker/",indexes:[1070]},"Rate Limiter":{path:"/tag/rate-limiter/",indexes:[1070]},Bulkhead:{path:"/tag/bulkhead/",indexes:[1070]},"Time Limiter":{path:"/tag/time-limiter/",indexes:[1070]},"Apache HttpClient":{path:"/tag/apache-httpclient/",indexes:[764]},Efficiency:{path:"/tag/efficiency/",indexes:[96]},SAML2:{path:"/tag/saml2/",indexes:[1220]},用户搜索:{path:"/tag/%E7%94%A8%E6%88%B7%E6%90%9C%E7%B4%A2/",indexes:[84]},级联删除:{path:"/tag/%E7%BA%A7%E8%81%94%E5%88%A0%E9%99%A4/",indexes:[1445]},单向一对多:{path:"/tag/%E5%8D%95%E5%90%91%E4%B8%80%E5%AF%B9%E5%A4%9A/",indexes:[1445]},映射:{path:"/tag/%E6%98%A0%E5%B0%84/",indexes:[97]},Spies:{path:"/tag/spies/",indexes:[1304]},"API-First Development":{path:"/tag/api-first-development/",indexes:[1066]},"Agile Development":{path:"/tag/agile-development/",indexes:[1066]},BSON:{path:"/tag/bson/",indexes:[85]},Filter:{path:"/tag/filter/",indexes:[45,85,396]},"Java Driver":{path:"/tag/java-driver/",indexes:[56,76,85,899]},"Domain-Driven Design":{path:"/tag/domain-driven-design/",indexes:[1367]},"Object-Oriented Programming":{path:"/tag/object-oriented-programming/",indexes:[1367]},OIDC:{path:"/tag/oidc/",indexes:[1116]},"Swagger-UI":{path:"/tag/swagger-ui/",indexes:[1067,1229,1138]},"URL Prefix":{path:"/tag/url-prefix/",indexes:[1067]},"Spring Cloud":{path:"/tag/spring-cloud/",indexes:[1395,1398,1568,1131]},"Feign Client":{path:"/tag/feign-client/",indexes:[1395,1404]},Collection:{path:"/tag/collection/",indexes:[444,1306,1020]},复制:{path:"/tag/%E5%A4%8D%E5%88%B6/",indexes:[78]},"Java Records":{path:"/tag/java-records/",indexes:[1167,767]},"Custom Constructor":{path:"/tag/custom-constructor/",indexes:[767]},Lightrun:{path:"/tag/lightrun/",indexes:[1187,566]},"Spring Method Annotations":{path:"/tag/spring-method-annotations/",indexes:[1187]},"Fluent Interface":{path:"/tag/fluent-interface/",indexes:[768]},javac:{path:"/tag/javac/",indexes:[769,1027]},Eclipse:{path:"/tag/eclipse/",indexes:[769,1565,1362]},OOP:{path:"/tag/oop/",indexes:[770]},Jsoup:{path:"/tag/jsoup/",indexes:[492,771]},HttpURLConnection:{path:"/tag/httpurlconnection/",indexes:[417,771]},依赖排除:{path:"/tag/%E4%BE%9D%E8%B5%96%E6%8E%92%E9%99%A4/",indexes:[1421]},文件系统:{path:"/tag/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/",indexes:[83]},桌面路径:{path:"/tag/%E6%A1%8C%E9%9D%A2%E8%B7%AF%E5%BE%84/",indexes:[83]},JNI:{path:"/tag/jni/",indexes:[955,1033]},"Foreign Function":{path:"/tag/foreign-function/",indexes:[1033]},"Memory API":{path:"/tag/memory-api/",indexes:[1033]},"Duplicate Keys":{path:"/tag/duplicate-keys/",indexes:[87]},POST请求:{path:"/tag/post%E8%AF%B7%E6%B1%82/",indexes:[1558,920]},原始数据:{path:"/tag/%E5%8E%9F%E5%A7%8B%E6%95%B0%E6%8D%AE/",indexes:[1558]},Redis:{path:"/tag/redis/",indexes:[1509,1559]},TTL:{path:"/tag/ttl/",indexes:[1559,1196]},Session:{path:"/tag/session/",indexes:[1559]},"toString()":{path:"/tag/tostring()/",indexes:[772]},"Java Enum":{path:"/tag/java-enum/",indexes:[772,933]},"Interface Driven Development":{path:"/tag/interface-driven-development/",indexes:[88]},IDD:{path:"/tag/idd/",indexes:[88]},"Design Patterns":{path:"/tag/design-patterns/",indexes:[88,555]},QuestDB:{path:"/tag/questdb/",indexes:[536]},数据库:{path:"/tag/%E6%95%B0%E6%8D%AE%E5%BA%93/",indexes:[1454,536,1251,839]},AES:{path:"/tag/aes/",indexes:[1307,1036]},Decryption:{path:"/tag/decryption/",indexes:[1307]},Gatling:{path:"/tag/gatling/",indexes:[1540]},"Load Testing":{path:"/tag/load-testing/",indexes:[1540]},"REST Endpoint":{path:"/tag/rest-endpoint/",indexes:[1540]},"Performance Testing":{path:"/tag/performance-testing/",indexes:[1540]},jEnv:{path:"/tag/jenv/",indexes:[79]},"Java Development":{path:"/tag/java-development/",indexes:[79]},"Maven Reactor":{path:"/tag/maven-reactor/",indexes:[537]},多模块项目:{path:"/tag/%E5%A4%9A%E6%A8%A1%E5%9D%97%E9%A1%B9%E7%9B%AE/",indexes:[537]},Collections:{path:"/tag/collections/",indexes:[529,773,923]},旋转:{path:"/tag/%E6%97%8B%E8%BD%AC/",indexes:[773]},交换:{path:"/tag/%E4%BA%A4%E6%8D%A2/",indexes:[773]},CRUD:{path:"/tag/crud/",indexes:[774,909]},Pipeline:{path:"/tag/pipeline/",indexes:[538]},"form-url-encoded":{path:"/tag/form-url-encoded/",indexes:[1399]},POST:{path:"/tag/post/",indexes:[1399]},Serverless:{path:"/tag/serverless/",indexes:[81,1117]},Deployment:{path:"/tag/deployment/",indexes:[1117]},Listeners:{path:"/tag/listeners/",indexes:[1502]},"Access Control":{path:"/tag/access-control/",indexes:[1221,1041]},"Primary Key":{path:"/tag/primary-key/",indexes:[1410]},"Database Design":{path:"/tag/database-design/",indexes:[1410]},私有构造函数:{path:"/tag/%E7%A7%81%E6%9C%89%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/",indexes:[775]},反射API:{path:"/tag/%E5%8F%8D%E5%B0%84api/",indexes:[775]},"DataStax Java Driver":{path:"/tag/datastax-java-driver/",indexes:[533]},"Object Mapping":{path:"/tag/object-mapping/",indexes:[533]},十六进制:{path:"/tag/%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6/",indexes:[778]},RGB:{path:"/tag/rgb/",indexes:[778]},动态队列:{path:"/tag/%E5%8A%A8%E6%80%81%E9%98%9F%E5%88%97/",indexes:[779]},"Class.forName()":{path:"/tag/class.forname()/",indexes:[780]},"newInstance()":{path:"/tag/newinstance()/",indexes:[780]},findAllBy:{path:"/tag/findallby/",indexes:[1255]},"java.util.regex":{path:"/tag/java.util.regex/",indexes:[80]},"java.util.Scanner":{path:"/tag/java.util.scanner/",indexes:[80]},"String split":{path:"/tag/string-split/",indexes:[80]},Duplicates:{path:"/tag/duplicates/",indexes:[781]},JdbcTemplate:{path:"/tag/jdbctemplate/",indexes:[1192]},EmptyResultDataAccessException:{path:"/tag/emptyresultdataaccessexception/",indexes:[1192]},RethinkDB:{path:"/tag/rethinkdb/",indexes:[1481]},"Real-time":{path:"/tag/real-time/",indexes:[1481]},ApplicationContext:{path:"/tag/applicationcontext/",indexes:[1193,1140]},HTTP客户端:{path:"/tag/http%E5%AE%A2%E6%88%B7%E7%AB%AF/",indexes:[1562]},API测试:{path:"/tag/api%E6%B5%8B%E8%AF%95/",indexes:[1562,1109]},"Map Merging":{path:"/tag/map-merging/",indexes:[1308]},Funqy:{path:"/tag/funqy/",indexes:[81]},报告:{path:"/tag/%E6%8A%A5%E5%91%8A/",indexes:[1543]},初始化:{path:"/tag/%E5%88%9D%E5%A7%8B%E5%8C%96/",indexes:[782]},"Roaring Bitmap":{path:"/tag/roaring-bitmap/",indexes:[539]},BitSet:{path:"/tag/bitset/",indexes:[539]},"Web Applications":{path:"/tag/web-applications/",indexes:[540]},内存管理:{path:"/tag/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/",indexes:[1564]},OpenTelemetry:{path:"/tag/opentelemetry/",indexes:[1103]},微服务:{path:"/tag/%E5%BE%AE%E6%9C%8D%E5%8A%A1/",indexes:[458,1088,1103,1403]},追踪:{path:"/tag/%E8%BF%BD%E8%B8%AA/",indexes:[1103]},"Apache PDFBox":{path:"/tag/apache-pdfbox/",indexes:[73,481]},iText:{path:"/tag/itext/",indexes:[73,479,481,829]},"Absolute Difference":{path:"/tag/absolute-difference/",indexes:[783]},Overflow:{path:"/tag/overflow/",indexes:[783]},Underflow:{path:"/tag/underflow/",indexes:[783]},AssertJ:{path:"/tag/assertj/",indexes:[1369,784,810,982]},"Thread.sleep()":{path:"/tag/thread.sleep()/",indexes:[785]},"Awaitility.await()":{path:"/tag/awaitility.await()/",indexes:[785]},"Stream.of()":{path:"/tag/stream.of()/",indexes:[786]},"IntStream.range()":{path:"/tag/intstream.range()/",indexes:[786]},IPv4:{path:"/tag/ipv4/",indexes:[787]},array:{path:"/tag/array/",indexes:[788]},"method parameters":{path:"/tag/method-parameters/",indexes:[788]},AOT:{path:"/tag/aot/",indexes:[74]},"Performance Optimization":{path:"/tag/performance-optimization/",indexes:[74]},"Case-Insensitive":{path:"/tag/case-insensitive/",indexes:[789]},Search:{path:"/tag/search/",indexes:[789]},"null check":{path:"/tag/null-check/",indexes:[790]},reflection:{path:"/tag/reflection/",indexes:[790]},CommandLine:{path:"/tag/commandline/",indexes:[791]},Arguments:{path:"/tag/arguments/",indexes:[791]},"Null Check":{path:"/tag/null-check/",indexes:[792]},类方法:{path:"/tag/%E7%B1%BB%E6%96%B9%E6%B3%95/",indexes:[793]},实例方法:{path:"/tag/%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95/",indexes:[793]},"JAR Comparison":{path:"/tag/jar-comparison/",indexes:[543]},"Java Tools":{path:"/tag/java-tools/",indexes:[543]},字符串比较:{path:"/tag/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%AF%94%E8%BE%83/",indexes:[75]},"JavaCompiler API":{path:"/tag/javacompiler-api/",indexes:[542]},动态编译:{path:"/tag/%E5%8A%A8%E6%80%81%E7%BC%96%E8%AF%91/",indexes:[542]},Char:{path:"/tag/char/",indexes:[1309]},MultipartFile:{path:"/tag/multipartfile/",indexes:[794]},"Base Conversion":{path:"/tag/base-conversion/",indexes:[795]},"Integer Class":{path:"/tag/integer-class/",indexes:[795]},"int Array":{path:"/tag/int-array/",indexes:[796]},"findTop()":{path:"/tag/findtop()/",indexes:[1256]},URI编码:{path:"/tag/uri%E7%BC%96%E7%A0%81/",indexes:[1166]},RestTemplate:{path:"/tag/resttemplate/",indexes:[1166,1223]},Flyway:{path:"/tag/flyway/",indexes:[1118,1482]},Migrations:{path:"/tag/migrations/",indexes:[1118]},forName:{path:"/tag/forname/",indexes:[72]},newInstance:{path:"/tag/newinstance/",indexes:[72]},"Kafka Consumer":{path:"/tag/kafka-consumer/",indexes:[1189]},LinkedList:{path:"/tag/linkedlist/",indexes:[797]},when:{path:"/tag/when/",indexes:[547]},"Anonymous Class":{path:"/tag/anonymous-class/",indexes:[798]},Monad:{path:"/tag/monad/",indexes:[799]},RestExpress:{path:"/tag/restexpress/",indexes:[802]},"Record Patterns":{path:"/tag/record-patterns/",indexes:[66]},日志:{path:"/tag/%E6%97%A5%E5%BF%97/",indexes:[50,1065,1566]},"Root URL Mapping":{path:"/tag/root-url-mapping/",indexes:[1462]},Triple:{path:"/tag/triple/",indexes:[803]},Iterable:{path:"/tag/iterable/",indexes:[475,530,929]},"Structured Concurrency":{path:"/tag/structured-concurrency/",indexes:[541]},运行时数据区:{path:"/tag/%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/",indexes:[804]},多仓库管理:{path:"/tag/%E5%A4%9A%E4%BB%93%E5%BA%93%E7%AE%A1%E7%90%86/",indexes:[805]},"any()":{path:"/tag/any()/",indexes:[1310]},"all()":{path:"/tag/all()/",indexes:[1310]},"none()":{path:"/tag/none()/",indexes:[1310]},CredHub:{path:"/tag/credhub/",indexes:[1119]},instanceof:{path:"/tag/instanceof/",indexes:[67]},替代方案:{path:"/tag/%E6%9B%BF%E4%BB%A3%E6%96%B9%E6%A1%88/",indexes:[67]},Expiry:{path:"/tag/expiry/",indexes:[806]},Java加密:{path:"/tag/java%E5%8A%A0%E5%AF%86/",indexes:[807]},异常:{path:"/tag/%E5%BC%82%E5%B8%B8/",indexes:[807]},匿名类:{path:"/tag/%E5%8C%BF%E5%90%8D%E7%B1%BB/",indexes:[808]},char:{path:"/tag/char/",indexes:[809,841]},"List of Maps":{path:"/tag/list-of-maps/",indexes:[1311]},"Map Grouping":{path:"/tag/map-grouping/",indexes:[1311]},"Java 9":{path:"/tag/java-9/",indexes:[63,938,1025]},"Map.of()":{path:"/tag/map.of()/",indexes:[63]},"Map.ofEntries()":{path:"/tag/map.ofentries()/",indexes:[63]},Throwable:{path:"/tag/throwable/",indexes:[544,883]},Error:{path:"/tag/error/",indexes:[1517,58,544,846,1358]},Bash:{path:"/tag/bash/",indexes:[69]},unzip:{path:"/tag/unzip/",indexes:[69]},"Executable JAR":{path:"/tag/executable-jar/",indexes:[1120]},"Form Login":{path:"/tag/form-login/",indexes:[1222]},"Basic Authentication":{path:"/tag/basic-authentication/",indexes:[37,1222,1563]},Functor:{path:"/tag/functor/",indexes:[811]},"Blaze Persistence":{path:"/tag/blaze-persistence/",indexes:[812]},JSONObject:{path:"/tag/jsonobject/",indexes:[813]},split:{path:"/tag/split/",indexes:[19,815]},"Browser Automation":{path:"/tag/browser-automation/",indexes:[816]},PECS:{path:"/tag/pecs/",indexes:[545]},"Pascal's Triangle":{path:"/tag/pascal's-triangle/",indexes:[70]},Auth0:{path:"/tag/auth0/",indexes:[71]},Couchbase:{path:"/tag/couchbase/",indexes:[1548]},GraphQL:{path:"/tag/graphql/",indexes:[1206,1537,581,1128,957]},gRPC:{path:"/tag/grpc/",indexes:[1051,1537]},"Spring Cloud Gateway":{path:"/tag/spring-cloud-gateway/",indexes:[1567,1529,1402,1569]},"Rate Limiting":{path:"/tag/rate-limiting/",indexes:[1567,1195]},"Client IP":{path:"/tag/client-ip/",indexes:[1567]},"Thread-Safe":{path:"/tag/thread-safe/",indexes:[817]},"Singleton Bean":{path:"/tag/singleton-bean/",indexes:[818]},栈:{path:"/tag/%E6%A0%88/",indexes:[531]},队列:{path:"/tag/%E9%98%9F%E5%88%97/",indexes:[445,531]},多线程组:{path:"/tag/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BB%84/",indexes:[1544]},workflow:{path:"/tag/workflow/",indexes:[1104]},BPMS:{path:"/tag/bpms/",indexes:[1104]},RxJava:{path:"/tag/rxjava/",indexes:[1150,902]},性能优化:{path:"/tag/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/",indexes:[1150,991]},"Date Format":{path:"/tag/date-format/",indexes:[819]},sort:{path:"/tag/sort/",indexes:[820]},FeignClient:{path:"/tag/feignclient/",indexes:[1064]},WebClient:{path:"/tag/webclient/",indexes:[1164,1064,1476]},"Large File":{path:"/tag/large-file/",indexes:[1476]},Interpolation:{path:"/tag/interpolation/",indexes:[821]},"Lambda Expressions":{path:"/tag/lambda-expressions/",indexes:[1312]},FCM:{path:"/tag/fcm/",indexes:[1108]},"Push Notifications":{path:"/tag/push-notifications/",indexes:[1108]},Watermark:{path:"/tag/watermark/",indexes:[546]},Supplier:{path:"/tag/supplier/",indexes:[822]},"Build Scripts":{path:"/tag/build-scripts/",indexes:[1499]},"Build Automation":{path:"/tag/build-automation/",indexes:[570,1499]},Java应用:{path:"/tag/java%E5%BA%94%E7%94%A8/",indexes:[38,823]},内存:{path:"/tag/%E5%86%85%E5%AD%98/",indexes:[823]},堆外内存:{path:"/tag/%E5%A0%86%E5%A4%96%E5%86%85%E5%AD%98/",indexes:[823]},"prime number":{path:"/tag/prime-number/",indexes:[1313]},algorithm:{path:"/tag/algorithm/",indexes:[1313]},ZonedDateTime:{path:"/tag/zoneddatetime/",indexes:[64,450]},"String to Instant":{path:"/tag/string-to-instant/",indexes:[824]},"java.util.Date":{path:"/tag/java.util.date/",indexes:[825]},"java.sql.Date":{path:"/tag/java.sql.date/",indexes:[825]},"Operating System":{path:"/tag/operating-system/",indexes:[1314]},SystemUtils:{path:"/tag/systemutils/",indexes:[1314]},Endpoints:{path:"/tag/endpoints/",indexes:[1105]},"Dynamic Configuration":{path:"/tag/dynamic-configuration/",indexes:[1105]},"Template Engine":{path:"/tag/template-engine/",indexes:[826]},"Expression Types":{path:"/tag/expression-types/",indexes:[826]},"Non-Repeating Character":{path:"/tag/non-repeating-character/",indexes:[532]},ObjectId:{path:"/tag/objectid/",indexes:[1459]},PDFBox:{path:"/tag/pdfbox/",indexes:[829]},Filters:{path:"/tag/filters/",indexes:[830]},"Spring Data MongoDB":{path:"/tag/spring-data-mongodb/",indexes:[831,908]},"System.exit":{path:"/tag/system.exit/",indexes:[550]},Java课程负责人:{path:"/tag/java%E8%AF%BE%E7%A8%8B%E8%B4%9F%E8%B4%A3%E4%BA%BA/",indexes:[65]},Spring框架:{path:"/tag/spring%E6%A1%86%E6%9E%B6/",indexes:[65]},ZooKeeper:{path:"/tag/zookeeper/",indexes:[1426]},Kraft:{path:"/tag/kraft/",indexes:[1426]},"API Gateway":{path:"/tag/api-gateway/",indexes:[1106,1519,1529]},"Validation API":{path:"/tag/validation-api/",indexes:[833]},"Spring Cloud Config":{path:"/tag/spring-cloud-config/",indexes:[1397]},"Remote Properties":{path:"/tag/remote-properties/",indexes:[1397]},"Axon Framework":{path:"/tag/axon-framework/",indexes:[1121,1570]},Subarray:{path:"/tag/subarray/",indexes:[834]},排序:{path:"/tag/%E6%8E%92%E5%BA%8F/",indexes:[835]},"Method Security":{path:"/tag/method-security/",indexes:[1224]},MockitoJUnitRunner:{path:"/tag/mockitojunitrunner/",indexes:[1146]},"Soft Reference":{path:"/tag/soft-reference/",indexes:[836]},"Weak Reference":{path:"/tag/weak-reference/",indexes:[836]},"Phantom Reference":{path:"/tag/phantom-reference/",indexes:[836]},工厂模式:{path:"/tag/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/",indexes:[551,553]},"Visitor Pattern":{path:"/tag/visitor-pattern/",indexes:[1315]},Tablesaw:{path:"/tag/tablesaw/",indexes:[839]},Channels:{path:"/tag/channels/",indexes:[556]},Connections:{path:"/tag/connections/",indexes:[556]},Mono:{path:"/tag/mono/",indexes:[1178,484,518,1477,843]},doOnNext:{path:"/tag/doonnext/",indexes:[472,1477]},doOnSuccess:{path:"/tag/doonsuccess/",indexes:[1477]},"Count Occurrences":{path:"/tag/count-occurrences/",indexes:[1316]},Coupling:{path:"/tag/coupling/",indexes:[555]},"Inversion of Control":{path:"/tag/inversion-of-control/",indexes:[555]},PermGen:{path:"/tag/permgen/",indexes:[842]},Enumeration:{path:"/tag/enumeration/",indexes:[844]},MultivaluedMap:{path:"/tag/multivaluedmap/",indexes:[60]},URI:{path:"/tag/uri/",indexes:[368,845]},MutableStateFlow:{path:"/tag/mutablestateflow/",indexes:[1318]},value:{path:"/tag/value/",indexes:[1318]},emit:{path:"/tag/emit/",indexes:[1318]},iText7:{path:"/tag/itext7/",indexes:[557]},PDF编辑:{path:"/tag/pdf%E7%BC%96%E8%BE%91/",indexes:[557]},"Gravity Sort":{path:"/tag/gravity-sort/",indexes:[554]},"Bead Sort":{path:"/tag/bead-sort/",indexes:[554]},容错:{path:"/tag/%E5%AE%B9%E9%94%99/",indexes:[1063,462]},断路器:{path:"/tag/%E6%96%AD%E8%B7%AF%E5%99%A8/",indexes:[1063]},重试:{path:"/tag/%E9%87%8D%E8%AF%95/",indexes:[1063]},"Simple Binary Encoding":{path:"/tag/simple-binary-encoding/",indexes:[558]},Java编码:{path:"/tag/java%E7%BC%96%E7%A0%81/",indexes:[558]},ANSI:{path:"/tag/ansi/",indexes:[61]},Color:{path:"/tag/color/",indexes:[61]},Console:{path:"/tag/console/",indexes:[61]},Infinity:{path:"/tag/infinity/",indexes:[848]},"Java Literals":{path:"/tag/java-literals/",indexes:[849]},Developer:{path:"/tag/developer/",indexes:[1572]},Brainstorming:{path:"/tag/brainstorming/",indexes:[1572]},Concurrency:{path:"/tag/concurrency/",indexes:[1388,1195,1581]},Properties:{path:"/tag/properties/",indexes:[1122]},"Message Delivery":{path:"/tag/message-delivery/",indexes:[1432]},Semantics:{path:"/tag/semantics/",indexes:[1432]},分页查询:{path:"/tag/%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/",indexes:[1238]},大数据集处理:{path:"/tag/%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%9B%86%E5%A4%84%E7%90%86/",indexes:[1238]},流式处理:{path:"/tag/%E6%B5%81%E5%BC%8F%E5%A4%84%E7%90%86/",indexes:[1238]},"Port Scanning":{path:"/tag/port-scanning/",indexes:[850]},"Java Socket":{path:"/tag/java-socket/",indexes:[850]},"Redis Sentinel":{path:"/tag/redis-sentinel/",indexes:[1557]},"Redis Cluster":{path:"/tag/redis-cluster/",indexes:[1557]},"x-www-form-urlencoded":{path:"/tag/x-www-form-urlencoded/",indexes:[559,1466]},Cache:{path:"/tag/cache/",indexes:[1178,1196]},TLS:{path:"/tag/tls/",indexes:[1110]},LockSupport:{path:"/tag/locksupport/",indexes:[851]},JSON数据:{path:"/tag/json%E6%95%B0%E6%8D%AE/",indexes:[1109]},Groovy:{path:"/tag/groovy/",indexes:[362,1197]},TreeSet:{path:"/tag/treeset/",indexes:[852]},"URL Validation":{path:"/tag/url-validation/",indexes:[853]},Constructor:{path:"/tag/constructor/",indexes:[53,377,1035]},"Variable Initialization":{path:"/tag/variable-initialization/",indexes:[53]},assertAll:{path:"/tag/assertall/",indexes:[1378]},Assertions:{path:"/tag/assertions/",indexes:[1378]},Variables:{path:"/tag/variables/",indexes:[1463,574]},相对路径:{path:"/tag/%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84/",indexes:[54]},Protobuf:{path:"/tag/protobuf/",indexes:[855]},"Date Conversion":{path:"/tag/date-conversion/",indexes:[856]},"BMI Calculator":{path:"/tag/bmi-calculator/",indexes:[857]},"Random Numbers":{path:"/tag/random-numbers/",indexes:[858]},ClassLoader:{path:"/tag/classloader/",indexes:[859]},getResource:{path:"/tag/getresource/",indexes:[859]},"Paths.get":{path:"/tag/paths.get/",indexes:[860]},"Path.of":{path:"/tag/path.of/",indexes:[860]},Axon:{path:"/tag/axon/",indexes:[1439]},"Query Dispatching":{path:"/tag/query-dispatching/",indexes:[1439]},MD5:{path:"/tag/md5/",indexes:[861]},Checksum:{path:"/tag/checksum/",indexes:[861]},"Binary Representation":{path:"/tag/binary-representation/",indexes:[1319]},Classgraph:{path:"/tag/classgraph/",indexes:[55]},"Java .class 版本":{path:"/tag/java-.class-%E7%89%88%E6%9C%AC/",indexes:[863]},Javap:{path:"/tag/javap/",indexes:[863]},Hexdump:{path:"/tag/hexdump/",indexes:[863]},"Storage Engine":{path:"/tag/storage-engine/",indexes:[1480]},LSMT:{path:"/tag/lsmt/",indexes:[1480]},类名冲突:{path:"/tag/%E7%B1%BB%E5%90%8D%E5%86%B2%E7%AA%81/",indexes:[864]},命名冲突:{path:"/tag/%E5%91%BD%E5%90%8D%E5%86%B2%E7%AA%81/",indexes:[864]},"MongoDB Shell":{path:"/tag/mongodb-shell/",indexes:[56]},Document:{path:"/tag/document/",indexes:[56]},二次方程根:{path:"/tag/%E4%BA%8C%E6%AC%A1%E6%96%B9%E7%A8%8B%E6%A0%B9/",indexes:[865]},算法实现:{path:"/tag/%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/",indexes:[363,865]},"Character Input":{path:"/tag/character-input/",indexes:[866]},"Static Fields":{path:"/tag/static-fields/",indexes:[560]},Concatenation:{path:"/tag/concatenation/",indexes:[867]},代理模式:{path:"/tag/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/",indexes:[1280]},TriFunction:{path:"/tag/trifunction/",indexes:[868]},FunctionalInterface:{path:"/tag/functionalinterface/",indexes:[868]},HAProxy:{path:"/tag/haproxy/",indexes:[1519]},File:{path:"/tag/file/",indexes:[870]},BufferedWriter:{path:"/tag/bufferedwriter/",indexes:[870]},"Files.writeString":{path:"/tag/files.writestring/",indexes:[870]},"Credit Card Validation":{path:"/tag/credit-card-validation/",indexes:[871]},"Luhn Algorithm":{path:"/tag/luhn-algorithm/",indexes:[871]},"Conditional Routing":{path:"/tag/conditional-routing/",indexes:[1198]},"Message Routing":{path:"/tag/message-routing/",indexes:[1198]},"Armstrong Numbers":{path:"/tag/armstrong-numbers/",indexes:[872]},数学:{path:"/tag/%E6%95%B0%E5%AD%A6/",indexes:[1156,872]},Number:{path:"/tag/number/",indexes:[477,873]},Positive:{path:"/tag/positive/",indexes:[873]},Negative:{path:"/tag/negative/",indexes:[873]},"Character Comparison":{path:"/tag/character-comparison/",indexes:[874]},Debugging:{path:"/tag/debugging/",indexes:[1492,973,1137]},"Arrays.asList()":{path:"/tag/arrays.aslist()/",indexes:[48,875]},"List.of()":{path:"/tag/list.of()/",indexes:[875]},Feign:{path:"/tag/feign/",indexes:[52,922,1401,968,1028]},Git:{path:"/tag/git/",indexes:[1517,1505]},Merge:{path:"/tag/merge/",indexes:[1517]},INI文件:{path:"/tag/ini%E6%96%87%E4%BB%B6/",indexes:[876]},Java解析:{path:"/tag/java%E8%A7%A3%E6%9E%90/",indexes:[876]},ini4j:{path:"/tag/ini4j/",indexes:[876]},Factors:{path:"/tag/factors/",indexes:[877]},Optimization:{path:"/tag/optimization/",indexes:[407,877]},整数除法:{path:"/tag/%E6%95%B4%E6%95%B0%E9%99%A4%E6%B3%95/",indexes:[878]},浮点数结果:{path:"/tag/%E6%B5%AE%E7%82%B9%E6%95%B0%E7%BB%93%E6%9E%9C/",indexes:[878]},多租户架构:{path:"/tag/%E5%A4%9A%E7%A7%9F%E6%88%B7%E6%9E%B6%E6%9E%84/",indexes:[1251]},PKCE:{path:"/tag/pkce/",indexes:[1225]},"Secret Clients":{path:"/tag/secret-clients/",indexes:[1225]},URL:{path:"/tag/url/",indexes:[879]},HTTP:{path:"/tag/http/",indexes:[879,922,1563]},HttpClient:{path:"/tag/httpclient/",indexes:[37,417,552,879,915,918,920,1532]},ObjectMapper:{path:"/tag/objectmapper/",indexes:[879]},删除字符:{path:"/tag/%E5%88%A0%E9%99%A4%E5%AD%97%E7%AC%A6/",indexes:[880]},"Batch Inserts":{path:"/tag/batch-inserts/",indexes:[1165]},布尔变量:{path:"/tag/%E5%B8%83%E5%B0%94%E5%8F%98%E9%87%8F/",indexes:[881]},"Thread Dump":{path:"/tag/thread-dump/",indexes:[535]},Deadlock:{path:"/tag/deadlock/",indexes:[535]},Operation:{path:"/tag/operation/",indexes:[1552]},ApiResponse:{path:"/tag/apiresponse/",indexes:[1552]},"Java Source":{path:"/tag/java-source/",indexes:[882]},"Java Target":{path:"/tag/java-target/",indexes:[882]},"springdoc-openapi":{path:"/tag/springdoc-openapi/",indexes:[1112]},"API Security":{path:"/tag/api-security/",indexes:[1112]},"Collections.singletonList()":{path:"/tag/collections.singletonlist()/",indexes:[48]},"Prime Numbers":{path:"/tag/prime-numbers/",indexes:[1320]},"User Information":{path:"/tag/user-information/",indexes:[1226]},容器化:{path:"/tag/%E5%AE%B9%E5%99%A8%E5%8C%96/",indexes:[49]},Reduction:{path:"/tag/reduction/",indexes:[45]},"Stack Trace":{path:"/tag/stack-trace/",indexes:[883,973]},消息数量:{path:"/tag/%E6%B6%88%E6%81%AF%E6%95%B0%E9%87%8F/",indexes:[1158]},"Dependency Management":{path:"/tag/dependency-management/",indexes:[561]},Range:{path:"/tag/range/",indexes:[884]},Interval:{path:"/tag/interval/",indexes:[884]},条件依赖:{path:"/tag/%E6%9D%A1%E4%BB%B6%E4%BE%9D%E8%B5%96/",indexes:[1204]},多键Map:{path:"/tag/%E5%A4%9A%E9%94%AEmap/",indexes:[885]},"Integer.toString()":{path:"/tag/integer.tostring()/",indexes:[886]},文件:{path:"/tag/%E6%96%87%E4%BB%B6/",indexes:[50]},"Maven Snapshot":{path:"/tag/maven-snapshot/",indexes:[1418]},"Maven Release":{path:"/tag/maven-release/",indexes:[1418]},格式化:{path:"/tag/%E6%A0%BC%E5%BC%8F%E5%8C%96/",indexes:[10,887]},StringSubstitutor:{path:"/tag/stringsubstitutor/",indexes:[887]},排列:{path:"/tag/%E6%8E%92%E5%88%97/",indexes:[51]},空白字符:{path:"/tag/%E7%A9%BA%E7%99%BD%E5%AD%97%E7%AC%A6/",indexes:[46]},Jandex:{path:"/tag/jandex/",indexes:[889]},"SOAP Request":{path:"/tag/soap-request/",indexes:[1465]},"Jakarta EE 9":{path:"/tag/jakarta-ee-9/",indexes:[1573]},MVC:{path:"/tag/mvc/",indexes:[1227,1368]},"Static Block":{path:"/tag/static-block/",indexes:[890]},"Instance Initializer Block":{path:"/tag/instance-initializer-block/",indexes:[890]},JMS:{path:"/tag/jms/",indexes:[1370]},"Image Upload":{path:"/tag/image-upload/",indexes:[1062]},"Java Web Application":{path:"/tag/java-web-application/",indexes:[1062]},volatile:{path:"/tag/volatile/",indexes:[891,1037]},atomic:{path:"/tag/atomic/",indexes:[891]},"Java Wildcard Imports":{path:"/tag/java-wildcard-imports/",indexes:[892]},"Code Cleanliness":{path:"/tag/code-cleanliness/",indexes:[892]},"Number Parity":{path:"/tag/number-parity/",indexes:[893]},"Bitwise Operations":{path:"/tag/bitwise-operations/",indexes:[893,975]},"Least Significant Bit":{path:"/tag/least-significant-bit/",indexes:[893]},Logic:{path:"/tag/logic/",indexes:[894]},"Int Array":{path:"/tag/int-array/",indexes:[1323]},Count:{path:"/tag/count/",indexes:[1456]},JAR文件:{path:"/tag/jar%E6%96%87%E4%BB%B6/",indexes:[895,897]},"File Deletion":{path:"/tag/file-deletion/",indexes:[1324]},"Directory Deletion":{path:"/tag/directory-deletion/",indexes:[1324]},"Java SE":{path:"/tag/java-se/",indexes:[896]},"Java EE":{path:"/tag/java-ee/",indexes:[896]},"Java ME":{path:"/tag/java-me/",indexes:[896]},"Kotlin Flow":{path:"/tag/kotlin-flow/",indexes:[1325]},"collect()":{path:"/tag/collect()/",indexes:[1325]},"collectLatest()":{path:"/tag/collectlatest()/",indexes:[1325]},"form-data":{path:"/tag/form-data/",indexes:[1466]},raw:{path:"/tag/raw/",indexes:[1466]},类路径:{path:"/tag/%E7%B1%BB%E8%B7%AF%E5%BE%84/",indexes:[897]},jar:{path:"/tag/jar/",indexes:[898]},jpackage:{path:"/tag/jpackage/",indexes:[898]},"Java Applications":{path:"/tag/java-applications/",indexes:[898]},find:{path:"/tag/find/",indexes:[899]},query:{path:"/tag/query/",indexes:[899]},ExceptionHandler:{path:"/tag/exceptionhandler/",indexes:[1228]},AuthenticationException:{path:"/tag/authenticationexception/",indexes:[1228]},AccessDeniedException:{path:"/tag/accessdeniedexception/",indexes:[1228]},"Detached Entity":{path:"/tag/detached-entity/",indexes:[1357]},时间计算:{path:"/tag/%E6%97%B6%E9%97%B4%E8%AE%A1%E7%AE%97/",indexes:[900]},PrettyTime:{path:"/tag/prettytime/",indexes:[900]},Time4J:{path:"/tag/time4j/",indexes:[900]},Collectors:{path:"/tag/collectors/",indexes:[443,902]},字符串截断:{path:"/tag/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%88%AA%E6%96%AD/",indexes:[903]},Beans:{path:"/tag/beans/",indexes:[904]},"Java Configuration":{path:"/tag/java-configuration/",indexes:[904]},Observability:{path:"/tag/observability/",indexes:[566,1589]},"Developer Tools":{path:"/tag/developer-tools/",indexes:[566]},Destructor:{path:"/tag/destructor/",indexes:[905]},Finalizer:{path:"/tag/finalizer/",indexes:[905]},AutoCloseable:{path:"/tag/autocloseable/",indexes:[905]},Cleaner:{path:"/tag/cleaner/",indexes:[905]},"Response Body Manipulation":{path:"/tag/response-body-manipulation/",indexes:[1529]},MySQL:{path:"/tag/mysql/",indexes:[1188,1125]},"Spring Data Rest":{path:"/tag/spring-data-rest/",indexes:[1574]},"Entity IDs":{path:"/tag/entity-ids/",indexes:[1574]},"Unique Index":{path:"/tag/unique-index/",indexes:[1461]},"Private Methods":{path:"/tag/private-methods/",indexes:[1326,567,1025]},静态方法:{path:"/tag/%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95/",indexes:[563]},"Date Operations":{path:"/tag/date-operations/",indexes:[909]},XSD:{path:"/tag/xsd/",indexes:[910]},"Memory Settings":{path:"/tag/memory-settings/",indexes:[911]},RequestMapping:{path:"/tag/requestmapping/",indexes:[1199]},"Apache ActiveMQ":{path:"/tag/apache-activemq/",indexes:[1161]},Messaging:{path:"/tag/messaging/",indexes:[1161]},GraalVM:{path:"/tag/graalvm/",indexes:[1057,1575]},"Inner Class":{path:"/tag/inner-class/",indexes:[1326]},Zero:{path:"/tag/zero/",indexes:[407,912]},Vowel:{path:"/tag/vowel/",indexes:[913]},"Springdoc-OpenAPI":{path:"/tag/springdoc-openapi/",indexes:[1229]},"Collection Name":{path:"/tag/collection-name/",indexes:[1458]},"Bean Validation":{path:"/tag/bean-validation/",indexes:[914,1584]},"Constraint Composition":{path:"/tag/constraint-composition/",indexes:[914]},结果集:{path:"/tag/%E7%BB%93%E6%9E%9C%E9%9B%86/",indexes:[40]},"Custom Header":{path:"/tag/custom-header/",indexes:[915]},"Class Loader":{path:"/tag/class-loader/",indexes:[916]},"Thread Context Class Loader":{path:"/tag/thread-context-class-loader/",indexes:[916]},Schema:{path:"/tag/schema/",indexes:[1206]},Aliases:{path:"/tag/aliases/",indexes:[1206]},通配符:{path:"/tag/%E9%80%9A%E9%85%8D%E7%AC%A6/",indexes:[571]},SSO:{path:"/tag/sso/",indexes:[38,1216]},"OpenID Connect":{path:"/tag/openid-connect/",indexes:[1216]},"Mutable List":{path:"/tag/mutable-list/",indexes:[1327]},"List Manipulation":{path:"/tag/list-manipulation/",indexes:[1327]},"Java Sound":{path:"/tag/java-sound/",indexes:[917]},Audio:{path:"/tag/audio/",indexes:[917]},"Spring Cloud Sidecar":{path:"/tag/spring-cloud-sidecar/",indexes:[1400]},"Netflix Sidecar":{path:"/tag/netflix-sidecar/",indexes:[1400]},"Service Discovery":{path:"/tag/service-discovery/",indexes:[1400]},Eureka:{path:"/tag/eureka/",indexes:[1398,1400]},"Zuul Proxy":{path:"/tag/zuul-proxy/",indexes:[1400]},"Error Handling":{path:"/tag/error-handling/",indexes:[1060,568]},"Java Basics":{path:"/tag/java-basics/",indexes:[568]},Timeout:{path:"/tag/timeout/",indexes:[918]},useDelimiter:{path:"/tag/usedelimiter/",indexes:[919]},"spring data jpa":{path:"/tag/spring-data-jpa/",indexes:[1577]},"jpa specifications":{path:"/tag/jpa-specifications/",indexes:[1577]},Printing:{path:"/tag/printing/",indexes:[1328]},"reverse number":{path:"/tag/reverse-number/",indexes:[921]},"403 Forbidden":{path:"/tag/403-forbidden/",indexes:[1467]},Comparator:{path:"/tag/comparator/",indexes:[438,923]},Comparable:{path:"/tag/comparable/",indexes:[923]},"Spring Web Services":{path:"/tag/spring-web-services/",indexes:[1061]},Profile:{path:"/tag/profile/",indexes:[1090]},"Memory Leak":{path:"/tag/memory-leak/",indexes:[1408]},"JDBC Driver":{path:"/tag/jdbc-driver/",indexes:[1408]},Enums:{path:"/tag/enums/",indexes:[1329]},"when()":{path:"/tag/when()/",indexes:[1329]},InnoDB:{path:"/tag/innodb/",indexes:[1188]},"Read-Only":{path:"/tag/read-only/",indexes:[1188]},"HTTP headers":{path:"/tag/http-headers/",indexes:[1468]},"pre-request scripts":{path:"/tag/pre-request-scripts/",indexes:[1468]},JSON验证:{path:"/tag/json%E9%AA%8C%E8%AF%81/",indexes:[41]},Connection:{path:"/tag/connection/",indexes:[924,1015]},Java编译:{path:"/tag/java%E7%BC%96%E8%AF%91/",indexes:[925]},boolean:{path:"/tag/boolean/",indexes:[926]},Polymorphism:{path:"/tag/polymorphism/",indexes:[405,927]},"equals()":{path:"/tag/equals()/",indexes:[408,928]},"==":{path:"/tag//",indexes:[928]},"Atomic Variables":{path:"/tag/atomic-variables/",indexes:[930]},"set()":{path:"/tag/set()/",indexes:[930]},"lazySet()":{path:"/tag/lazyset()/",indexes:[930]},HQL:{path:"/tag/hql/",indexes:[931,1359]},DISTINCT:{path:"/tag/distinct/",indexes:[931]},"Custom Annotation":{path:"/tag/custom-annotation/",indexes:[1126]},"Random Value":{path:"/tag/random-value/",indexes:[933]},"IP Address":{path:"/tag/ip-address/",indexes:[935,1011]},"Build Cache":{path:"/tag/build-cache/",indexes:[1497]},构建优化:{path:"/tag/%E6%9E%84%E5%BB%BA%E4%BC%98%E5%8C%96/",indexes:[1497]},资源服务器:{path:"/tag/%E8%B5%84%E6%BA%90%E6%9C%8D%E5%8A%A1%E5%99%A8/",indexes:[1231]},Swagger:{path:"/tag/swagger/",indexes:[1093,1029]},"Parent POM":{path:"/tag/parent-pom/",indexes:[1423]},Plugin:{path:"/tag/plugin/",indexes:[1423]},Lists:{path:"/tag/lists/",indexes:[1281,1331,1343]},"Null and Empty Values":{path:"/tag/null-and-empty-values/",indexes:[1331]},Inheritance:{path:"/tag/inheritance/",indexes:[937]},"Criteria Query":{path:"/tag/criteria-query/",indexes:[1359]},反射访问:{path:"/tag/%E5%8F%8D%E5%B0%84%E8%AE%BF%E9%97%AE/",indexes:[938]},skip:{path:"/tag/skip/",indexes:[939]},Liquibase:{path:"/tag/liquibase/",indexes:[1482]},身份认证:{path:"/tag/%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81/",indexes:[38]},Spark:{path:"/tag/spark/",indexes:[1579]},DataFrame:{path:"/tag/dataframe/",indexes:[1579]},数据处理:{path:"/tag/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/",indexes:[1579]},"Discovery Client":{path:"/tag/discovery-client/",indexes:[1398]},OPA:{path:"/tag/opa/",indexes:[1232]},Authorization:{path:"/tag/authorization/",indexes:[1232]},Policy:{path:"/tag/policy/",indexes:[1232]},Swap:{path:"/tag/swap/",indexes:[574]},Lock:{path:"/tag/lock/",indexes:[1581]},Servlet:{path:"/tag/servlet/",indexes:[1127]},Annotations:{path:"/tag/annotations/",indexes:[433,470,1127,996]},Authentication:{path:"/tag/authentication/",indexes:[1233]},"Automorphic Numbers":{path:"/tag/automorphic-numbers/",indexes:[941]},"Bulk Update":{path:"/tag/bulk-update/",indexes:[942]},"Case Insensitive Sorting":{path:"/tag/case-insensitive-sorting/",indexes:[28]},"Compile Errors":{path:"/tag/compile-errors/",indexes:[943]},directory:{path:"/tag/directory/",indexes:[1027]},文件大小:{path:"/tag/%E6%96%87%E4%BB%B6%E5%A4%A7%E5%B0%8F/",indexes:[36]},可读格式:{path:"/tag/%E5%8F%AF%E8%AF%BB%E6%A0%BC%E5%BC%8F/",indexes:[36]},"Long to Int":{path:"/tag/long-to-int/",indexes:[944]},JavaBeans:{path:"/tag/javabeans/",indexes:[945]},VO:{path:"/tag/vo/",indexes:[945]},行数:{path:"/tag/%E8%A1%8C%E6%95%B0/",indexes:[946]},SPQR:{path:"/tag/spqr/",indexes:[1128]},Upsert:{path:"/tag/upsert/",indexes:[1454]},"Spring Singleton":{path:"/tag/spring-singleton/",indexes:[1388]},数据导入:{path:"/tag/%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5/",indexes:[947]},"Jakarta EE MVC":{path:"/tag/jakarta-ee-mvc/",indexes:[29]},"Eclipse Krazo":{path:"/tag/eclipse-krazo/",indexes:[29]},迭代:{path:"/tag/%E8%BF%AD%E4%BB%A3/",indexes:[452,1154]},动态添加:{path:"/tag/%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0/",indexes:[1154]},"Bitwise Operators":{path:"/tag/bitwise-operators/",indexes:[948]},"Operator Precedence":{path:"/tag/operator-precedence/",indexes:[948]},"Java Error":{path:"/tag/java-error/",indexes:[583]},"Uninitialized Variable":{path:"/tag/uninitialized-variable/",indexes:[583]},"Java Operators":{path:"/tag/java-operators/",indexes:[949]},"Pretty-Print":{path:"/tag/pretty-print/",indexes:[30]},数据库操作:{path:"/tag/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/",indexes:[1452,473]},Update:{path:"/tag/update/",indexes:[31]},$push:{path:"/tag/push/",indexes:[31]},$set:{path:"/tag/set/",indexes:[31]},数据检索:{path:"/tag/%E6%95%B0%E6%8D%AE%E6%A3%80%E7%B4%A2/",indexes:[1455]},"Single Sign-On":{path:"/tag/single-sign-on/",indexes:[1578]},"Tomcat Configuration":{path:"/tag/tomcat-configuration/",indexes:[1578]},SOAP:{path:"/tag/soap/",indexes:[1028]},字符串排序:{path:"/tag/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8E%92%E5%BA%8F/",indexes:[1155]},日期减法:{path:"/tag/%E6%97%A5%E6%9C%9F%E5%87%8F%E6%B3%95/",indexes:[577]},"for-each循环":{path:"/tag/for-each%E5%BE%AA%E7%8E%AF/",indexes:[951]},"Java 5":{path:"/tag/java-5/",indexes:[951]},增强for循环:{path:"/tag/%E5%A2%9E%E5%BC%BAfor%E5%BE%AA%E7%8E%AF/",indexes:[951]},"Type Inference":{path:"/tag/type-inference/",indexes:[1332]},"Underscore Operator":{path:"/tag/underscore-operator/",indexes:[1332]},Nginx:{path:"/tag/nginx/",indexes:[1582]},正向代理:{path:"/tag/%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86/",indexes:[1582]},FaunaDB:{path:"/tag/faunadb/",indexes:[1201]},Login:{path:"/tag/login/",indexes:[1535]},多数据源:{path:"/tag/%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/",indexes:[1129]},数据库配置:{path:"/tag/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%85%8D%E7%BD%AE/",indexes:[1129]},Cassandra:{path:"/tag/cassandra/",indexes:[1059,1515,1387]},DataStax:{path:"/tag/datastax/",indexes:[1059,1561]},"Rock-Paper-Scissors":{path:"/tag/rock-paper-scissors/",indexes:[32]},"Game Development":{path:"/tag/game-development/",indexes:[32]},Zuul:{path:"/tag/zuul/",indexes:[1403]},TrustAnchors:{path:"/tag/trustanchors/",indexes:[954]},KeyStore:{path:"/tag/keystore/",indexes:[954]},PKIXParameters:{path:"/tag/pkixparameters/",indexes:[954]},Java版本:{path:"/tag/java%E7%89%88%E6%9C%AC/",indexes:[25,387]},ByteBuffer:{path:"/tag/bytebuffer/",indexes:[447,1030]},"Java NIO":{path:"/tag/java-nio/",indexes:[447,972,1030]},addScalar:{path:"/tag/addscalar/",indexes:[1354]},标准差:{path:"/tag/%E6%A0%87%E5%87%86%E5%B7%AE/",indexes:[1156]},统计学:{path:"/tag/%E7%BB%9F%E8%AE%A1%E5%AD%A6/",indexes:[1156]},逆向映射:{path:"/tag/%E9%80%86%E5%90%91%E6%98%A0%E5%B0%84/",indexes:[34]},RegisterNatives:{path:"/tag/registernatives/",indexes:[955]},HttpMessageNotWritableException:{path:"/tag/httpmessagenotwritableexception/",indexes:[1200]},MessageConverter:{path:"/tag/messageconverter/",indexes:[1200]},OAuth2:{path:"/tag/oauth2/",indexes:[1237,1404]},数据库连接状态:{path:"/tag/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E7%8A%B6%E6%80%81/",indexes:[1409]},ArrayIndexOutOfBoundsException:{path:"/tag/arrayindexoutofboundsexception/",indexes:[956]},Web服务:{path:"/tag/web%E6%9C%8D%E5%8A%A1/",indexes:[957]},"Mediator Pattern":{path:"/tag/mediator-pattern/",indexes:[1333]},阻塞队列:{path:"/tag/%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97/",indexes:[1032]},ErrorDecoder:{path:"/tag/errordecoder/",indexes:[1401]},"Secondary Indexes":{path:"/tag/secondary-indexes/",indexes:[1489]},"Dependency Injection":{path:"/tag/dependency-injection/",indexes:[1163]},URL配置:{path:"/tag/url%E9%85%8D%E7%BD%AE/",indexes:[1235]},安全配置:{path:"/tag/%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE/",indexes:[1235]},Gateway:{path:"/tag/gateway/",indexes:[1568]},"URL Rewriting":{path:"/tag/url-rewriting/",indexes:[1568]},更新文档:{path:"/tag/%E6%9B%B4%E6%96%B0%E6%96%87%E6%A1%A3/",indexes:[1453]},更新:{path:"/tag/%E6%9B%B4%E6%96%B0/",indexes:[958]},文档:{path:"/tag/%E6%96%87%E6%A1%A3/",indexes:[958,1585]},"Maven Artifact":{path:"/tag/maven-artifact/",indexes:[565]},"Build Tool":{path:"/tag/build-tool/",indexes:[565]},Java历史:{path:"/tag/java%E5%8E%86%E5%8F%B2/",indexes:[959]},编程语言:{path:"/tag/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/",indexes:[959]},"JavaFX Button":{path:"/tag/javafx-button/",indexes:[1583]},"Domain Graph Service":{path:"/tag/domain-graph-service/",indexes:[1130]},"Netflix DGS":{path:"/tag/netflix-dgs/",indexes:[1130]},InstantSource:{path:"/tag/instantsource/",indexes:[26]},CQL:{path:"/tag/cql/",indexes:[1483,1034]},Batch:{path:"/tag/batch/",indexes:[1034]},"Cheat Sheet":{path:"/tag/cheat-sheet/",indexes:[1483]},"Pattern Matching":{path:"/tag/pattern-matching/",indexes:[11,21]},"sleep()":{path:"/tag/sleep()/",indexes:[1334]},"delay()":{path:"/tag/delay()/",indexes:[1334]},Thumbprint:{path:"/tag/thumbprint/",indexes:[960]},"Data Objects":{path:"/tag/data-objects/",indexes:[1335]},"XML Configuration":{path:"/tag/xml-configuration/",indexes:[1140]},"Repeated Characters":{path:"/tag/repeated-characters/",indexes:[962]},"Key Generation":{path:"/tag/key-generation/",indexes:[1036]},"Trace ID":{path:"/tag/trace-id/",indexes:[1131]},"Document ID":{path:"/tag/document-id/",indexes:[963]},"JUnit 4":{path:"/tag/junit-4/",indexes:[1147,999]},"Test Case":{path:"/tag/test-case/",indexes:[1147]},"Hidden Classes":{path:"/tag/hidden-classes/",indexes:[27]},"Java 15":{path:"/tag/java-15/",indexes:[27]},"Kotlinx Serialization":{path:"/tag/kotlinx-serialization/",indexes:[1336]},"Fault Tolerance":{path:"/tag/fault-tolerance/",indexes:[1394]},"Load Balancing":{path:"/tag/load-balancing/",indexes:[1394]},"Thread Safety":{path:"/tag/thread-safety/",indexes:[964]},IdentityHashMap:{path:"/tag/identityhashmap/",indexes:[24]},Integration:{path:"/tag/integration/",indexes:[1405]},代码格式:{path:"/tag/%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F/",indexes:[1585]},"Thread Information":{path:"/tag/thread-information/",indexes:[966]},随机数生成器:{path:"/tag/%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%94%9F%E6%88%90%E5%99%A8/",indexes:[967]},SpringFox:{path:"/tag/springfox/",indexes:[1138]},BasicErrorController:{path:"/tag/basicerrorcontroller/",indexes:[1138]},SequenceInputStream:{path:"/tag/sequenceinputstream/",indexes:[969]},描述:{path:"/tag/%E6%8F%8F%E8%BF%B0/",indexes:[1139]},示例:{path:"/tag/%E7%A4%BA%E4%BE%8B/",indexes:[1139]},contentEquals:{path:"/tag/contentequals/",indexes:[971]},"OAuth 2.0":{path:"/tag/oauth-2.0/",indexes:[1569]},"Java NIO.2":{path:"/tag/java-nio.2/",indexes:[972]},"415 Unsupported Media Type":{path:"/tag/415-unsupported-media-type/",indexes:[1162]},"Spring Application":{path:"/tag/spring-application/",indexes:[1162]},搜索:{path:"/tag/%E6%90%9C%E7%B4%A2/",indexes:[974]},"Code Injection":{path:"/tag/code-injection/",indexes:[1236]},Clickjacking:{path:"/tag/clickjacking/",indexes:[1236]},浮点数:{path:"/tag/%E6%B5%AE%E7%82%B9%E6%95%B0/",indexes:[22,428]},"Custom Validation":{path:"/tag/custom-validation/",indexes:[14]},"Swagger Codegen":{path:"/tag/swagger-codegen/",indexes:[14]},"Bit Manipulation":{path:"/tag/bit-manipulation/",indexes:[975]},Spectator:{path:"/tag/spectator/",indexes:[23]},度量:{path:"/tag/%E5%BA%A6%E9%87%8F/",indexes:[23]},"Data Model":{path:"/tag/data-model/",indexes:[1484]},JMX:{path:"/tag/jmx/",indexes:[976,1038]},端口:{path:"/tag/%E7%AB%AF%E5%8F%A3/",indexes:[976]},Framework:{path:"/tag/framework/",indexes:[1133]},VisualVM:{path:"/tag/visualvm/",indexes:[1038]},远程监控:{path:"/tag/%E8%BF%9C%E7%A8%8B%E7%9B%91%E6%8E%A7/",indexes:[1038]},Replication:{path:"/tag/replication/",indexes:[1485]},Partitioning:{path:"/tag/partitioning/",indexes:[1485]},"Thread Name":{path:"/tag/thread-name/",indexes:[979]},SonarQube:{path:"/tag/sonarqube/",indexes:[20]},"Startup Time":{path:"/tag/startup-time/",indexes:[1057]},"Unix Domain Socket":{path:"/tag/unix-domain-socket/",indexes:[980]},"Java 16":{path:"/tag/java-16/",indexes:[9,980]},Locale:{path:"/tag/locale/",indexes:[981]},DecimalFormat:{path:"/tag/decimalformat/",indexes:[981]},Return:{path:"/tag/return/",indexes:[1337]},"thread safety":{path:"/tag/thread-safety/",indexes:[1037]},Maven配置:{path:"/tag/maven%E9%85%8D%E7%BD%AE/",indexes:[569]},"Java Optional":{path:"/tag/java-optional/",indexes:[982]},CassandraUnit:{path:"/tag/cassandraunit/",indexes:[16]},"Constructor Chaining":{path:"/tag/constructor-chaining/",indexes:[983]},Constructors:{path:"/tag/constructors/",indexes:[386,433,985,1017]},"Java Abstract Classes":{path:"/tag/java-abstract-classes/",indexes:[985]},val:{path:"/tag/val/",indexes:[17]},var:{path:"/tag/var/",indexes:[17]},HMAC:{path:"/tag/hmac/",indexes:[1039]},BouncyCastle:{path:"/tag/bouncycastle/",indexes:[1039]},CSV解析:{path:"/tag/csv%E8%A7%A3%E6%9E%90/",indexes:[18]},"Java Reflection":{path:"/tag/java-reflection/",indexes:[989]},"Static Method Invocation":{path:"/tag/static-method-invocation/",indexes:[989]},"Reverse Iteration":{path:"/tag/reverse-iteration/",indexes:[1338]},LDAP:{path:"/tag/ldap/",indexes:[990]},JNDI:{path:"/tag/jndi/",indexes:[990]},CRaC:{path:"/tag/crac/",indexes:[991,1006]},"Apache Cassandra":{path:"/tag/apache-cassandra/",indexes:[1520,1560]},HTMLCleaner:{path:"/tag/htmlcleaner/",indexes:[492]},Jericho:{path:"/tag/jericho/",indexes:[492]},Snitch:{path:"/tag/snitch/",indexes:[1486]},"Request Routing":{path:"/tag/request-routing/",indexes:[1486]},Split:{path:"/tag/split/",indexes:[992]},OncePerRequestFilter:{path:"/tag/onceperrequestfilter/",indexes:[1510]},"Method Parameters":{path:"/tag/method-parameters/",indexes:[1040]},"frozen keyword":{path:"/tag/frozen-keyword/",indexes:[1487]},collections:{path:"/tag/collections/",indexes:[1487]},"user-defined types":{path:"/tag/user-defined-types/",indexes:[1487]},"Long to String":{path:"/tag/long-to-string/",indexes:[993]},"Numeric Conversion":{path:"/tag/numeric-conversion/",indexes:[994]},"Object to byte array":{path:"/tag/object-to-byte-array/",indexes:[995]},文档格式化:{path:"/tag/%E6%96%87%E6%A1%A3%E6%A0%BC%E5%BC%8F%E5%8C%96/",indexes:[1524]},Submap:{path:"/tag/submap/",indexes:[997]},ModelMapper:{path:"/tag/modelmapper/",indexes:[576]},TransientObjectException:{path:"/tag/transientobjectexception/",indexes:[998]},CascadeType:{path:"/tag/cascadetype/",indexes:[998]},keySet:{path:"/tag/keyset/",indexes:[1e3]},entrySet:{path:"/tag/entryset/",indexes:[1e3]},values:{path:"/tag/values/",indexes:[1e3]},多行文本:{path:"/tag/%E5%A4%9A%E8%A1%8C%E6%96%87%E6%9C%AC/",indexes:[1435]},并行执行:{path:"/tag/%E5%B9%B6%E8%A1%8C%E6%89%A7%E8%A1%8C/",indexes:[1148]},"Java SE 17":{path:"/tag/java-se-17/",indexes:[11]},Switch:{path:"/tag/switch/",indexes:[11]},Prim算法:{path:"/tag/prim%E7%AE%97%E6%B3%95/",indexes:[1284]},最小生成树:{path:"/tag/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/",indexes:[1284]},图算法:{path:"/tag/%E5%9B%BE%E7%AE%97%E6%B3%95/",indexes:[1284]},Ratpack:{path:"/tag/ratpack/",indexes:[12]},Snapshotting:{path:"/tag/snapshotting/",indexes:[1570]},Java框架:{path:"/tag/java%E6%A1%86%E6%9E%B6/",indexes:[1141]},"Request Rejected Exception":{path:"/tag/request-rejected-exception/",indexes:[1212]},"Path Traversal":{path:"/tag/path-traversal/",indexes:[1212]},更新键值:{path:"/tag/%E6%9B%B4%E6%96%B0%E9%94%AE%E5%80%BC/",indexes:[13]},RBAC:{path:"/tag/rbac/",indexes:[426,1041]},ACL:{path:"/tag/acl/",indexes:[1041]},ABAC:{path:"/tag/abac/",indexes:[1041]},"Partition Key":{path:"/tag/partition-key/",indexes:[1490]},"Composite Key":{path:"/tag/composite-key/",indexes:[1490]},"Clustering Key":{path:"/tag/clustering-key/",indexes:[1490]},文件比较:{path:"/tag/%E6%96%87%E4%BB%B6%E6%AF%94%E8%BE%83/",indexes:[1001]},"Java Stream I/O":{path:"/tag/java-stream-io/",indexes:[1001]},"Apache Commons I/O":{path:"/tag/apache-commons-io/",indexes:[1001]},"Database Schema":{path:"/tag/database-schema/",indexes:[1055]},"Spaces Count":{path:"/tag/spaces-count/",indexes:[1002]},序列化:{path:"/tag/%E5%BA%8F%E5%88%97%E5%8C%96/",indexes:[1157]},自定义序列化器:{path:"/tag/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8/",indexes:[1157]},"Java WAR":{path:"/tag/java-war/",indexes:[1003]},JCE:{path:"/tag/jce/",indexes:[1004]},Cryptography:{path:"/tag/cryptography/",indexes:[1004]},毫秒:{path:"/tag/%E6%AF%AB%E7%A7%92/",indexes:[10]},"HH:MM:SS":{path:"/tag/hhmmss/",indexes:[10]},jsonschema2pojo:{path:"/tag/jsonschema2pojo/",indexes:[1005]},Java类:{path:"/tag/java%E7%B1%BB/",indexes:[1005]},Java性能:{path:"/tag/java%E6%80%A7%E8%83%BD/",indexes:[1006]},线程管理:{path:"/tag/%E7%BA%BF%E7%A8%8B%E7%AE%A1%E7%90%86/",indexes:[1006]},延迟:{path:"/tag/%E5%BB%B6%E8%BF%9F/",indexes:[1542]},测试计划:{path:"/tag/%E6%B5%8B%E8%AF%95%E8%AE%A1%E5%88%92/",indexes:[1542]},"Pass-by-Reference":{path:"/tag/pass-by-reference/",indexes:[1283]},dependencyManagement:{path:"/tag/dependencymanagement/",indexes:[1008]},dependencies:{path:"/tag/dependencies/",indexes:[1008]},"Thread Priority":{path:"/tag/thread-priority/",indexes:[1009]},"Result Class":{path:"/tag/result-class/",indexes:[1340]},"Surefire Plugin":{path:"/tag/surefire-plugin/",indexes:[1374]},Test:{path:"/tag/test/",indexes:[1374]},ArangoDB:{path:"/tag/arangodb/",indexes:[1546]},WebSocket:{path:"/tag/websocket/",indexes:[1530]},"Source Directories":{path:"/tag/source-directories/",indexes:[1042]},Dapr:{path:"/tag/dapr/",indexes:[1402]},Geospatial:{path:"/tag/geospatial/",indexes:[1044]},GIS:{path:"/tag/gis/",indexes:[1044]},GPS:{path:"/tag/gps/",indexes:[1044]},PEM:{path:"/tag/pem/",indexes:[1010]},JKS:{path:"/tag/jks/",indexes:[1010]},openssl:{path:"/tag/openssl/",indexes:[1010]},"Admission Controller":{path:"/tag/admission-controller/",indexes:[1045]},OpenSSL:{path:"/tag/openssl/",indexes:[1436]},"Self-Signed Certificate":{path:"/tag/self-signed-certificate/",indexes:[1436]},Rotation:{path:"/tag/rotation/",indexes:[1341]},"Maven Properties":{path:"/tag/maven-properties/",indexes:[570]},MVP:{path:"/tag/mvp/",indexes:[1368]},"Range Checking":{path:"/tag/range-checking/",indexes:[1011]},Futures:{path:"/tag/futures/",indexes:[1012]},"Maven Repository":{path:"/tag/maven-repository/",indexes:[1424]},"GitHub Pages":{path:"/tag/github-pages/",indexes:[1424]},Zip4j:{path:"/tag/zip4j/",indexes:[1013]},密码保护:{path:"/tag/%E5%AF%86%E7%A0%81%E4%BF%9D%E6%8A%A4/",indexes:[1013]},压缩文件:{path:"/tag/%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6/",indexes:[1013]},"LRU Cache":{path:"/tag/lru-cache/",indexes:[1014]},缓存:{path:"/tag/%E7%BC%93%E5%AD%98/",indexes:[1014]},"Thread-Safety":{path:"/tag/thread-safety/",indexes:[1015]},"Java Annotation":{path:"/tag/java-annotation/",indexes:[1016]},"Attribute Value Restrictions":{path:"/tag/attribute-value-restrictions/",indexes:[1016]},"Java Team Lead":{path:"/tag/java-team-lead/",indexes:[1586]},远程工作:{path:"/tag/%E8%BF%9C%E7%A8%8B%E5%B7%A5%E4%BD%9C/",indexes:[1586]},Getters:{path:"/tag/getters/",indexes:[5]},Setters:{path:"/tag/setters/",indexes:[5]},Exceptions:{path:"/tag/exceptions/",indexes:[1017]},"Utility Classes":{path:"/tag/utility-classes/",indexes:[1342]},ClassNotFoundException:{path:"/tag/classnotfoundexception/",indexes:[1018]},Syslog:{path:"/tag/syslog/",indexes:[1142]},"Compilation Error":{path:"/tag/compilation-error/",indexes:[1019]},加密:{path:"/tag/%E5%8A%A0%E5%AF%86/",indexes:[6,359]},解密:{path:"/tag/%E8%A7%A3%E5%AF%86/",indexes:[6,359]},"DataStax Astra":{path:"/tag/datastax-astra/",indexes:[1560]},Stargate:{path:"/tag/stargate/",indexes:[1560,1561]},Cluster:{path:"/tag/cluster/",indexes:[1488]},Datacenters:{path:"/tag/datacenters/",indexes:[1488]},Racks:{path:"/tag/racks/",indexes:[1488]},Nodes:{path:"/tag/nodes/",indexes:[1488]},"camel case":{path:"/tag/camel-case/",indexes:[575]},"title case":{path:"/tag/title-case/",indexes:[575]},"Collection Operations":{path:"/tag/collection-operations/",indexes:[1343]},Surefire:{path:"/tag/surefire/",indexes:[1375]},Failsafe:{path:"/tag/failsafe/",indexes:[462,1375]},OkHttp:{path:"/tag/okhttp/",indexes:[2]},文件下载:{path:"/tag/%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/",indexes:[2,414]},Apache:{path:"/tag/apache/",indexes:[1532]},GC算法:{path:"/tag/gc%E7%AE%97%E6%B3%95/",indexes:[1021]},JVM实例:{path:"/tag/jvm%E5%AE%9E%E4%BE%8B/",indexes:[1021]},ModelAssert:{path:"/tag/modelassert/",indexes:[1369]},"JSON Testing":{path:"/tag/json-testing/",indexes:[1369]},Threads:{path:"/tag/threads/",indexes:[1047]},Monitoring:{path:"/tag/monitoring/",indexes:[8,1047,1589]},"Min-Max Heap":{path:"/tag/min-max-heap/",indexes:[1048]},"Data Structures":{path:"/tag/data-structures/",indexes:[1048]},接口:{path:"/tag/%E6%8E%A5%E5%8F%A3/",indexes:[3]},默认方法:{path:"/tag/%E9%BB%98%E8%AE%A4%E6%96%B9%E6%B3%95/",indexes:[3]},抽象类:{path:"/tag/%E6%8A%BD%E8%B1%A1%E7%B1%BB/",indexes:[3]},"JPA Entities":{path:"/tag/jpa-entities/",indexes:[1361]},Serializable:{path:"/tag/serializable/",indexes:[1361]},敏感数据:{path:"/tag/%E6%95%8F%E6%84%9F%E6%95%B0%E6%8D%AE/",indexes:[1566]},"Consumer Lag":{path:"/tag/consumer-lag/",indexes:[8]},NoClassDefFoundError:{path:"/tag/noclassdeffounderror/",indexes:[1043]},defer:{path:"/tag/defer/",indexes:[518]},"Wire Tap":{path:"/tag/wire-tap/",indexes:[1383]},EIP:{path:"/tag/eip/",indexes:[1383]},ActiveMQ:{path:"/tag/activemq/",indexes:[1383]},"Unique Constraints":{path:"/tag/unique-constraints/",indexes:[1347]},"super POM":{path:"/tag/super-pom/",indexes:[1411]},"simplest POM":{path:"/tag/simplest-pom/",indexes:[1411]},"effective POM":{path:"/tag/effective-pom/",indexes:[1411]},"Class Loaders":{path:"/tag/class-loaders/",indexes:[1049]},"Reflections Library":{path:"/tag/reflections-library/",indexes:[1049]},"Google Guava Library":{path:"/tag/google-guava-library/",indexes:[1049]},"Soft Delete":{path:"/tag/soft-delete/",indexes:[1448]},IllegalAccessError:{path:"/tag/illegalaccesserror/",indexes:[1]},"Java Exception":{path:"/tag/java-exception/",indexes:[1]},工具:{path:"/tag/%E5%B7%A5%E5%85%B7/",indexes:[1362]},InitialRAMPercentage:{path:"/tag/initialrampercentage/",indexes:[1588]},MinRAMPercentage:{path:"/tag/minrampercentage/",indexes:[1588]},MaxRAMPercentage:{path:"/tag/maxrampercentage/",indexes:[1588]},"Null Safety":{path:"/tag/null-safety/",indexes:[1345]},"if not null":{path:"/tag/if-not-null/",indexes:[1345]},"?.let":{path:"/tag/.let/",indexes:[1345]},"JAR Files":{path:"/tag/jar-files/",indexes:[1500]},"Local Dependencies":{path:"/tag/local-dependencies/",indexes:[1500]},Multipart:{path:"/tag/multipart/",indexes:[1056]},"Non-Capturing Groups":{path:"/tag/non-capturing-groups/",indexes:[1024]},removeAll:{path:"/tag/removeall/",indexes:[1346]},"Secret Key":{path:"/tag/secret-key/",indexes:[1026]},ApplicationContextException:{path:"/tag/applicationcontextexception/",indexes:[1136]},ServletWebServerFactory:{path:"/tag/servletwebserverfactory/",indexes:[1136]},"Set Membership":{path:"/tag/set-membership/",indexes:[370]},"Java Collection":{path:"/tag/java-collection/",indexes:[370]},"Eclipse IDE":{path:"/tag/eclipse-ide/",indexes:[387]},TemporalAccessor:{path:"/tag/temporalaccessor/",indexes:[371]},"Phone Number Conversion":{path:"/tag/phone-number-conversion/",indexes:[388]},Caching:{path:"/tag/caching/",indexes:[1084]},资源路径:{path:"/tag/%E8%B5%84%E6%BA%90%E8%B7%AF%E5%BE%84/",indexes:[373]},完美数:{path:"/tag/%E5%AE%8C%E7%BE%8E%E6%95%B0/",indexes:[389]},图像缩放:{path:"/tag/%E5%9B%BE%E5%83%8F%E7%BC%A9%E6%94%BE/",indexes:[390]},Events:{path:"/tag/events/",indexes:[1372]},"Application Events":{path:"/tag/application-events/",indexes:[1372]},Immutable:{path:"/tag/immutable/",indexes:[374]},Unmodifiable:{path:"/tag/unmodifiable/",indexes:[374]},"Service Provider Interface":{path:"/tag/service-provider-interface/",indexes:[375]},"Internet Address Resolution":{path:"/tag/internet-address-resolution/",indexes:[375]},"Light-4J":{path:"/tag/light-4j/",indexes:[391]},"Apache Camel":{path:"/tag/apache-camel/",indexes:[1382]},Loki:{path:"/tag/loki/",indexes:[1085]},Grafana:{path:"/tag/grafana/",indexes:[1085]},JEP:{path:"/tag/jep/",indexes:[440,501]},"Desktop Class":{path:"/tag/desktop-class/",indexes:[376]},ProcessBuilder:{path:"/tag/processbuilder/",indexes:[376]},"super()":{path:"/tag/super()/",indexes:[377]},"Java Best Practices":{path:"/tag/java-best-practices/",indexes:[377]},"Struct Annotation":{path:"/tag/struct-annotation/",indexes:[378]},"User-Defined Types":{path:"/tag/user-defined-types/",indexes:[378]},"Mono.error()":{path:"/tag/mono.error()/",indexes:[1473]},Subselect:{path:"/tag/subselect/",indexes:[1348]},"Context Receivers":{path:"/tag/context-receivers/",indexes:[1268]},"Immutable List":{path:"/tag/immutable-list/",indexes:[351]},ConcurrentModificationException:{path:"/tag/concurrentmodificationexception/",indexes:[1269]},LocalTime:{path:"/tag/localtime/",indexes:[352]},"Date Comparison":{path:"/tag/date-comparison/",indexes:[353]},"Kotlin Coroutine":{path:"/tag/kotlin-coroutine/",indexes:[1270]},"RxJava Single":{path:"/tag/rxjava-single/",indexes:[1270]},Deferred:{path:"/tag/deferred/",indexes:[1270]},"Prototype Scope":{path:"/tag/prototype-scope/",indexes:[380]},Token:{path:"/tag/token/",indexes:[1214]},eachCount:{path:"/tag/eachcount/",indexes:[1266]},eachCountTo:{path:"/tag/eachcountto/",indexes:[1266]},"Spring Kafka":{path:"/tag/spring-kafka/",indexes:[1083,1179]},"Kafka Listeners":{path:"/tag/kafka-listeners/",indexes:[1083]},"Spring Beans":{path:"/tag/spring-beans/",indexes:[354]},"Dynamic Registration":{path:"/tag/dynamic-registration/",indexes:[354]},"CSS Selectors":{path:"/tag/css-selectors/",indexes:[1554]},"Web Testing":{path:"/tag/web-testing/",indexes:[1554]},"Ambiguous Method Call":{path:"/tag/ambiguous-method-call/",indexes:[381]},KClass:{path:"/tag/kclass/",indexes:[1271]},Duration:{path:"/tag/duration/",indexes:[1272]},"Time Management":{path:"/tag/time-management/",indexes:[1272]},Parse:{path:"/tag/parse/",indexes:[1273]},Caffeine:{path:"/tag/caffeine/",indexes:[1509]},"JSON Serialization":{path:"/tag/json-serialization/",indexes:[382]},"Null Values":{path:"/tag/null-values/",indexes:[382]},"Invalid Characters":{path:"/tag/invalid-characters/",indexes:[357]},InputStreamReader:{path:"/tag/inputstreamreader/",indexes:[383]},"EOL Normalization":{path:"/tag/eol-normalization/",indexes:[384]},"String Replace":{path:"/tag/string-replace/",indexes:[384]},"Java 8 Stream API":{path:"/tag/java-8-stream-api/",indexes:[384]},并行流:{path:"/tag/%E5%B9%B6%E8%A1%8C%E6%B5%81/",indexes:[1275]},协程:{path:"/tag/%E5%8D%8F%E7%A8%8B/",indexes:[1275]},"Kotlin Tutorial":{path:"/tag/kotlin-tutorial/",indexes:[1276]},Querydsl:{path:"/tag/querydsl/",indexes:[1181]},"JPA Criteria":{path:"/tag/jpa-criteria/",indexes:[1181]},GZIPInputStream:{path:"/tag/gzipinputstream/",indexes:[385]},文件处理:{path:"/tag/%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/",indexes:[385]},位运算:{path:"/tag/%E4%BD%8D%E8%BF%90%E7%AE%97/",indexes:[358,457]},"Distributed Transactions":{path:"/tag/distributed-transactions/",indexes:[1438]},"kotlinx.serialization":{path:"/tag/kotlinx.serialization/",indexes:[1277]},Backticks:{path:"/tag/backticks/",indexes:[1278]},Value注解:{path:"/tag/value%E6%B3%A8%E8%A7%A3/",indexes:[1177]},"Variable Shadowing":{path:"/tag/variable-shadowing/",indexes:[1279]},Vigenère密码:{path:"/tag/vigen%C3%A8re%E5%AF%86%E7%A0%81/",indexes:[359]},"Setter Methods":{path:"/tag/setter-methods/",indexes:[386]},百分位数:{path:"/tag/%E7%99%BE%E5%88%86%E4%BD%8D%E6%95%B0/",indexes:[361]},数据集:{path:"/tag/%E6%95%B0%E6%8D%AE%E9%9B%86/",indexes:[361]},统计分布:{path:"/tag/%E7%BB%9F%E8%AE%A1%E5%88%86%E5%B8%83/",indexes:[361]},"Happy Number":{path:"/tag/happy-number/",indexes:[363]},Offsets:{path:"/tag/offsets/",indexes:[1430]},Commit:{path:"/tag/commit/",indexes:[1430]},"Largest Number":{path:"/tag/largest-number/",indexes:[364]},"Remove Digits":{path:"/tag/remove-digits/",indexes:[364]},"Majority Element":{path:"/tag/majority-element/",indexes:[365]},"Peak Elements":{path:"/tag/peak-elements/",indexes:[366]},"Binary Search":{path:"/tag/binary-search/",indexes:[366]},"kotlinx.html":{path:"/tag/kotlinx.html/",indexes:[1267]},"Servlet Filter":{path:"/tag/servlet-filter/",indexes:[367]},"Apache Commons CLI":{path:"/tag/apache-commons-cli/",indexes:[1590]},"CLI Development":{path:"/tag/cli-development/",indexes:[1590]},事件流平台:{path:"/tag/%E4%BA%8B%E4%BB%B6%E6%B5%81%E5%B9%B3%E5%8F%B0/",indexes:[1431]},路径:{path:"/tag/%E8%B7%AF%E5%BE%84/",indexes:[368]},网页抓取:{path:"/tag/%E7%BD%91%E9%A1%B5%E6%8A%93%E5%8F%96/",indexes:[369]},Refresh:{path:"/tag/refresh/",indexes:[1246]},Fetch:{path:"/tag/fetch/",indexes:[1246]},"Entity Management":{path:"/tag/entity-management/",indexes:[1246]},AuthorizationManager:{path:"/tag/authorizationmanager/",indexes:[1215]},异常拦截器:{path:"/tag/%E5%BC%82%E5%B8%B8%E6%8B%A6%E6%88%AA%E5%99%A8/",indexes:[1051]},Aggregation:{path:"/tag/aggregation/",indexes:[1545]},"compareTo()":{path:"/tag/compareto()/",indexes:[408]},移动平均:{path:"/tag/%E7%A7%BB%E5%8A%A8%E5%B9%B3%E5%9D%87/",indexes:[409]},Asynchronous:{path:"/tag/asynchronous/",indexes:[392]},Transactional:{path:"/tag/transactional/",indexes:[392]},Permutation:{path:"/tag/permutation/",indexes:[456]},Anagram:{path:"/tag/anagram/",indexes:[456]},持久化上下文:{path:"/tag/%E6%8C%81%E4%B9%85%E5%8C%96%E4%B8%8A%E4%B8%8B%E6%96%87/",indexes:[1352]},清除管理实体:{path:"/tag/%E6%B8%85%E9%99%A4%E7%AE%A1%E7%90%86%E5%AE%9E%E4%BD%93/",indexes:[1352]},"Code Coverage":{path:"/tag/code-coverage/",indexes:[1538]},数字比较:{path:"/tag/%E6%95%B0%E5%AD%97%E6%AF%94%E8%BE%83/",indexes:[428]},map:{path:"/tag/map/",indexes:[464,472,482]},数据压缩:{path:"/tag/%E6%95%B0%E6%8D%AE%E5%8E%8B%E7%BC%A9/",indexes:[410]},"Java GZIP":{path:"/tag/java-gzip/",indexes:[410]},重试策略:{path:"/tag/%E9%87%8D%E8%AF%95%E7%AD%96%E7%95%A5/",indexes:[458]},Delay:{path:"/tag/delay/",indexes:[1179]},SoftAssert:{path:"/tag/softassert/",indexes:[411]},"1D数组":{path:"/tag/1d%E6%95%B0%E7%BB%84/",indexes:[429]},CLOB:{path:"/tag/clob/",indexes:[473]},十进制转分数:{path:"/tag/%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%88%86%E6%95%B0/",indexes:[485]},short:{path:"/tag/short/",indexes:[430]},Timestamp:{path:"/tag/timestamp/",indexes:[393]},原始类型数组:{path:"/tag/%E5%8E%9F%E5%A7%8B%E7%B1%BB%E5%9E%8B%E6%95%B0%E7%BB%84/",indexes:[431]},图像转换:{path:"/tag/%E5%9B%BE%E5%83%8F%E8%BD%AC%E6%8D%A2/",indexes:[412]},DataOutputStream:{path:"/tag/dataoutputstream/",indexes:[447]},字符计数:{path:"/tag/%E5%AD%97%E7%AC%A6%E8%AE%A1%E6%95%B0/",indexes:[432]},自动化测试:{path:"/tag/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/",indexes:[394]},"Java Enums":{path:"/tag/java-enums/",indexes:[474]},"Optional.of()":{path:"/tag/optional.of()/",indexes:[460]},"Optional.ofNullable()":{path:"/tag/optional.ofnullable()/",indexes:[460]},SDK:{path:"/tag/sdk/",indexes:[414]},复数:{path:"/tag/%E5%A4%8D%E6%95%B0/",indexes:[395]},运算:{path:"/tag/%E8%BF%90%E7%AE%97/",indexes:[395]},文本提取:{path:"/tag/%E6%96%87%E6%9C%AC%E6%8F%90%E5%8F%96/",indexes:[461]},Easter:{path:"/tag/easter/",indexes:[415]},"Symmetric Substring":{path:"/tag/symmetric-substring/",indexes:[416]},最小元素:{path:"/tag/%E6%9C%80%E5%B0%8F%E5%85%83%E7%B4%A0/",indexes:[434]},"URL Redirection":{path:"/tag/url-redirection/",indexes:[417]},"Second Smallest":{path:"/tag/second-smallest/",indexes:[463]},"Java 流":{path:"/tag/java-%E6%B5%81/",indexes:[418]},"Table Not Found":{path:"/tag/table-not-found/",indexes:[1087]},"Full-Text Search":{path:"/tag/full-text-search/",indexes:[448]},"Partial-Text Search":{path:"/tag/partial-text-search/",indexes:[448]},"Apache Avro":{path:"/tag/apache-avro/",indexes:[435]},代码生成:{path:"/tag/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90/",indexes:[435]},二进制:{path:"/tag/%E4%BA%8C%E8%BF%9B%E5%88%B6/",indexes:[419]},补码:{path:"/tag/%E8%A1%A5%E7%A0%81/",indexes:[419]},MockMVC:{path:"/tag/mockmvc/",indexes:[1086]},Sequence:{path:"/tag/sequence/",indexes:[1446]},Nextval:{path:"/tag/nextval/",indexes:[1446]},数组排序:{path:"/tag/%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F/",indexes:[478]},"Response Body":{path:"/tag/response-body/",indexes:[396]},"Null Handling":{path:"/tag/null-handling/",indexes:[436]},get:{path:"/tag/get/",indexes:[464]},WebAssembly:{path:"/tag/webassembly/",indexes:[1527]},"java.sql.Timestamp":{path:"/tag/java.sql.timestamp/",indexes:[450]},"XML to PDF":{path:"/tag/xml-to-pdf/",indexes:[479]},"Apache FOP":{path:"/tag/apache-fop/",indexes:[479]},EOFException:{path:"/tag/eofexception/",indexes:[420]},Java异常:{path:"/tag/java%E5%BC%82%E5%B8%B8/",indexes:[420]},文件读取:{path:"/tag/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/",indexes:[420]},"Elvis Operator":{path:"/tag/elvis-operator/",indexes:[451]},Interceptor:{path:"/tag/interceptor/",indexes:[1474]},Headers:{path:"/tag/headers/",indexes:[1474]},并行处理:{path:"/tag/%E5%B9%B6%E8%A1%8C%E5%A4%84%E7%90%86/",indexes:[465]},Pair:{path:"/tag/pair/",indexes:[438]},Builder模式:{path:"/tag/builder%E6%A8%A1%E5%BC%8F/",indexes:[422]},继承:{path:"/tag/%E7%BB%A7%E6%89%BF/",indexes:[1350]},组合:{path:"/tag/%E7%BB%84%E5%90%88/",indexes:[1350]},Java安装:{path:"/tag/java%E5%AE%89%E8%A3%85/",indexes:[494]},macOS:{path:"/tag/macos/",indexes:[494]},"Apache Commons Configuration":{path:"/tag/apache-commons-configuration/",indexes:[439]},Compression:{path:"/tag/compression/",indexes:[397]},Archiving:{path:"/tag/archiving/",indexes:[397]},Brave:{path:"/tag/brave/",indexes:[398]},Zipkin:{path:"/tag/zipkin/",indexes:[398]},分布式追踪:{path:"/tag/%E5%88%86%E5%B8%83%E5%BC%8F%E8%BF%BD%E8%B8%AA/",indexes:[398]},DuckDB:{path:"/tag/duckdb/",indexes:[399]},JFreeChart:{path:"/tag/jfreechart/",indexes:[400]},图表库:{path:"/tag/%E5%9B%BE%E8%A1%A8%E5%BA%93/",indexes:[400]},"Java 22":{path:"/tag/java-22/",indexes:[440]},JavaParser:{path:"/tag/javaparser/",indexes:[466]},AST:{path:"/tag/ast/",indexes:[466]},SSH:{path:"/tag/ssh/",indexes:[453]},"Simple Java Mail":{path:"/tag/simple-java-mail/",indexes:[423]},"JavaMail API":{path:"/tag/javamail-api/",indexes:[423]},数据比较:{path:"/tag/%E6%95%B0%E6%8D%AE%E6%AF%94%E8%BE%83/",indexes:[1591]},无符号字节:{path:"/tag/%E6%97%A0%E7%AC%A6%E5%8F%B7%E5%AD%97%E8%8A%82/",indexes:[424]},jOOQ:{path:"/tag/jooq/",indexes:[402]},数据映射:{path:"/tag/%E6%95%B0%E6%8D%AE%E6%98%A0%E5%B0%84/",indexes:[454]},Monads:{path:"/tag/monads/",indexes:[469]},"Functional Programming":{path:"/tag/functional-programming/",indexes:[455,469]},AI:{path:"/tag/ai/",indexes:[488]},"Parallel Collectors":{path:"/tag/parallel-collectors/",indexes:[403]},PersistenceUnit:{path:"/tag/persistenceunit/",indexes:[1349]},PersistenceContext:{path:"/tag/persistencecontext/",indexes:[1349]},Java编程:{path:"/tag/java%E7%BC%96%E7%A8%8B/",indexes:[441]},toString方法:{path:"/tag/tostring%E6%96%B9%E6%B3%95/",indexes:[425]},空值处理:{path:"/tag/%E7%A9%BA%E5%80%BC%E5%A4%84%E7%90%86/",indexes:[425]},"write()":{path:"/tag/write()/",indexes:[406]},"print()":{path:"/tag/print()/",indexes:[406]},子字符串:{path:"/tag/%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2/",indexes:[442]},"Back Reference":{path:"/tag/back-reference/",indexes:[490]},Lookaround:{path:"/tag/lookaround/",indexes:[490]},Java安全:{path:"/tag/java%E5%AE%89%E5%85%A8/",indexes:[499]},UnrecoverableKeyException:{path:"/tag/unrecoverablekeyexception/",indexes:[499]},"Java Stream API":{path:"/tag/java-stream-api/",indexes:[482]},filter:{path:"/tag/filter/",indexes:[482]},Quarkus:{path:"/tag/quarkus/",indexes:[426]},级联:{path:"/tag/%E7%BA%A7%E8%81%94/",indexes:[1351]},Matrix:{path:"/tag/matrix/",indexes:[407]},Converter:{path:"/tag/converter/",indexes:[1248]},"Web Client":{path:"/tag/web-client/",indexes:[1475]},"Static Code Analysis":{path:"/tag/static-code-analysis/",indexes:[1496]},Infer:{path:"/tag/infer/",indexes:[1496]},doAnswer:{path:"/tag/doanswer/",indexes:[471]},thenReturn:{path:"/tag/thenreturn/",indexes:[471]},依赖树:{path:"/tag/%E4%BE%9D%E8%B5%96%E6%A0%91/",indexes:[1414]},依赖图:{path:"/tag/%E4%BE%9D%E8%B5%96%E5%9B%BE/",indexes:[1414]},Autowired:{path:"/tag/autowired/",indexes:[1089]},InjectMocks:{path:"/tag/injectmocks/",indexes:[1089]},注解:{path:"/tag/%E6%B3%A8%E8%A7%A3/",indexes:[1592]}}}}},X2=["/posts/baeldung/2024-07-29/2024-07-29-Converting%20String%20to%20BigDecimal%20in%20Java.html","/posts/baeldung/2024-07-29/2024-07-29-IllegalAccessError%20in%20Java.html","/posts/baeldung/2024-07-28/2024-07-28-Download%20a%20Binary%20File%20Using%20OkHttp.html","/posts/baeldung/2024-07-28/2024-07-28-Interface%20With%20Default%20Methods%20vs%20Abstract%20Class.html","/posts/baeldung/2024-07-29/2024-07-29-Find%20All%20Numbers%20in%20a%20String%20in%20Java.html","/posts/baeldung/2024-07-27/2024-07-27-Significance%20of%20Getters%20and%20Setters%20in%20Java.html","/posts/baeldung/2024-07-28/2024-07-28-3DES%20in%20Java.html","/posts/baeldung/2024-07-28/2024-07-28-Converting%20String%20to%20BigInteger%20in%20Java.html","/posts/baeldung/2024-07-28/2024-07-28-Monitor%20the%20Consumer%20Lag%20in%20Apache%20Kafka.html","/posts/baeldung/2024-07-25/2024-07-25-New%20Features%20in%20Java%2016.html","/posts/baeldung/2024-07-26/2024-07-26-Format%20a%20Milliseconds%20Duration%20to%20HH%20MM%20SS.html","/posts/baeldung/2024-07-25/2024-07-25-Pattern%20Matching%20for%20Switch.html","/posts/baeldung/2024-07-25/2024-07-25-Reactive%20Streams%20API%20with%20Ratpack.html","/posts/baeldung/2024-07-25/2024-07-25-Update%20the%20Value%20Associated%20With%20a%20Key%20in%20a%20HashMap.html","/posts/baeldung/2024-07-23/2024-07-23-Custom%20Validation%20with%20Swagger%20Codegen.html","/posts/baeldung/2024-07-23/2024-07-23-Serialize%20and%20Deserialize%20Booleans%20as%20Integers%20With%20Jackson.html","/posts/baeldung/2024-07-24/2024-07-24-CassandraUnit%20Test%20Tutorial.html","/posts/baeldung/2024-07-24/2024-07-24-Declaring%20Val%20and%20Var%20Variables%20in%20Lombok.html","/posts/baeldung/2024-07-24/2024-07-24-Ignoring%20Commas%20in%20Quotes%20When%20Splitting%20a%20Comma%20separated%20String.html","/posts/baeldung/2024-07-24/2024-07-24-Split%20a%20String%20Only%20on%20the%20First%20Occurrence%20of%20Delimiter.html","/posts/baeldung/2024-07-23/2024-07-23-Solving%20the%20Hide%20Utility%20Class%20Public%20Constructor%20Sonar%20Warning.html","/posts/baeldung/2024-07-22/2024-07-22-Check%20if%20a%20String%20Ends%20with%20a%20Certain%20Pattern%20in%20Java.html","/posts/baeldung/2024-07-23/2024-07-23-Convert%20String%20to%20Float%20and%20Back%20in%20Java.html","/posts/baeldung/2024-07-23/2024-07-23-Guide%20to%20Netflix%20Spectator.html","/posts/baeldung/2024-07-22/2024-07-22-Java%20IdentityHashMap%20Class%20and%20Its%20Use%20Cases.html","/posts/baeldung/2024-07-21/2024-07-21-Gradle%20%20sourceCompatiblity%20vs%20targetCompatibility.html","/posts/baeldung/2024-07-22/2024-07-22-An%20Introduction%20to%20InstantSource%20in%20Java%2017.html","/posts/baeldung/2024-07-22/2024-07-22-Hidden%20Classes%20in%20Java%2015.html","/posts/baeldung/2024-07-20/2024-07-20-Case%20Insensitive%20Sorting%20in%20MongoDB.html","/posts/baeldung/2024-07-20/2024-07-20-Introduction%20to%20Jakarta%20EE%20MVC%20%20%20Eclipse%20Krazo.html","/posts/baeldung/2024-07-20/2024-07-20-Pretty%20Print%20XML%20in%20Java.html","/posts/baeldung/2024-07-20/2024-07-20-Push%20and%20Set%20Operations%20in%20Same%20MongoDB%20Update.html","/posts/baeldung/2024-07-21/2024-07-21-Create%20a%20Simple%20%20Rock%20Paper%20Scissors%20%20Game%20in%20Java.html","/posts/baeldung/2024-07-21/2024-07-21-How%20to%20Create%20a%20New%20Entry%20in%20a%20Map.html","/posts/baeldung/2024-07-21/2024-07-21-How%20to%20Invert%20a%20Map%20in%20Java.html","/posts/baeldung/2024-07-21/2024-07-21-Java%20Missing%20Return%20Statement.html","/posts/baeldung/2024-07-20/2024-07-20-Convert%20Byte%20Size%20Into%20a%20Human%20Readable%20Format%20in%20Java.html","/posts/baeldung/2024-07-19/2024-07-19-Java%20HttpClient%20Basic%20Authentication.html","/posts/baeldung/2024-07-19/2024-07-19-Single%20Sign%20On%20Solutions%20for%20Java%20Applications.html","/posts/baeldung/2024-07-20/2024-07-20-Format%20Instant%20to%20String%20in%20Java.html","/posts/baeldung/2024-07-18/2024-07-18-Converting%20a%20JDBC%20ResultSet%20to%20JSON%20in%20Java.html","/posts/baeldung/2024-07-19/2024-07-19-Check%20Whether%20a%20String%20Is%20Valid%20JSON%20in%20Java.html","/posts/baeldung/2024-07-19/2024-07-19-Creating%20a%20Java%20Array%20from%20Regular%20Expression%20Matches.html","/posts/baeldung/2024-07-19/2024-07-19-Java%20HttpClient%20With%20SSL.html","/posts/baeldung/2024-07-17/2024-07-17-Difference%20Between%20Flux.create%20and%20Flux.generate.html","/posts/baeldung/2024-07-16/2024-07-16-Filter%20Java%20Stream%20to%201%20and%20Only%201%20Element.html","/posts/baeldung/2024-07-16/2024-07-16-Remove%20Whitespace%20From%20a%20String%20in%20Java.html","/posts/baeldung/2024-07-17/2024-07-17-Clearing%20a%20StringBuilder%20or%20StringBuffer.html","/posts/baeldung/2024-07-16/2024-07-16-Arrays.asList%20%20%20vs%20Collections.singletonList%20%20.html","/posts/baeldung/2024-07-16/2024-07-16-Dockerizing%20a%20Java%20Application.html","/posts/baeldung/2024-07-16/2024-07-16-Log4j2%20%20%20Logging%20to%20Both%20File%20and%20Console.html","/posts/baeldung/2024-07-16/2024-07-16-Permutations%20of%20a%20String%20in%20Java.html","/posts/baeldung/2024-07-15/2024-07-15-Feign%20Client%20Exception%20Handling.html","/posts/baeldung/2024-07-13/2024-07-13-Variable%20Instantiation%20on%20Declaration%20vs.%20on%20Constructor%20in%20Java.html","/posts/baeldung/2024-07-14/2024-07-14-Constructing%20a%20Relative%20Path%20From%20Two%20Absolute%20Paths%20in%20Java.html","/posts/baeldung/2024-07-14/2024-07-14-Guide%20to%20Classgraph%20Library.html","/posts/baeldung/2024-07-14/2024-07-14-Insert%20Array%20Inside%20an%20Object%20in%20MongoDB.html","/posts/baeldung/2024-07-13/2024-07-13-Mocking%20Java%20InputStream%20Object.html","/posts/baeldung/2024-07-12/2024-07-12-Fixing%20Selenium%20WebDriver%20Executable%20Path%20Error.html","/posts/baeldung/2024-07-13/2024-07-13-Convert%20String%20to%20String%20Array.html","/posts/baeldung/2024-07-13/2024-07-13-Difference%20Between%20Map%20and%20MultivaluedMap%20in%20Java.html","/posts/baeldung/2024-07-13/2024-07-13-How%20to%20Log%20to%20the%20Console%20in%20Color.html","/posts/baeldung/2024-07-12/2024-07-12-Retain%20Only%20Digits%20and%20Decimal%20Separator%20in%20String.html","/posts/baeldung/2024-07-11/2024-07-11-Difference%20Between%20Map.ofEntries%20%20%20and%20Map.of%20%20.html","/posts/baeldung/2024-07-12/2024-07-12-Convert%20Between%20LocalDateTime%20and%20ZonedDateTime.html","/posts/baeldung/2024-07-12/2024-07-12-Java%20Course%20Team%20Lead%20with%20Spring%20Experience%20%20Remote%20%20%20Part%20Time%20%20%20not%20open%20.html","/posts/baeldung/2024-07-10/2024-07-10-Record%20Patterns%20in%20Java%2019.html","/posts/baeldung/2024-07-11/2024-07-11-Alternatives%20for%20instanceof%20Operator%20in%20Java.html","/posts/baeldung/2024-07-11/2024-07-11-Convert%20a%20List%20of%20Integers%20to%20a%20List%20of%20Strings.html","/posts/baeldung/2024-07-11/2024-07-11-Extracting%20JAR%20to%20a%20Specified%20Directory.html","/posts/baeldung/2024-07-11/2024-07-11-Java%20Program%20to%20Print%20Pascal%20s%20Triangle.html","/posts/baeldung/2024-07-11/2024-07-11-Managing%20JWT%20With%20Auth0%20java%20jwt.html","/posts/baeldung/2024-07-10/2024-07-10-Getting%20Class%20Type%20From%20a%20String%20in%20Java.html","/posts/baeldung/2024-07-09/2024-07-09-Reading%20PDF%20File%20Using%20Java.html","/posts/baeldung/2024-07-10/2024-07-10-Ahead%20of%20Time%20Optimizations%20in%20Spring%206.html","/posts/baeldung/2024-07-10/2024-07-10-Comparing%20a%20String%20to%20an%20Enum%20Value%20in%20Java.html","/posts/baeldung/2024-07-10/2024-07-10-Introduction%20to%20ScyllaDB%20with%20Java.html","/posts/baeldung/2024-07-09/2024-07-09-Mapping%20an%20Array%20of%20Integers%20to%20Strings%20Using%20Java%20Streams.html","/posts/baeldung/2024-07-08/2024-07-08-Copying%20All%20Keys%20and%20Values%20From%20One%20Hashmap%20Onto%20Another%20Without%20Replacing%20Existing%20Keys%20and%20Values.html","/posts/baeldung/2024-07-08/2024-07-08-Managing%20Multiple%20JDK%20Installations%20With%20jEnv.html","/posts/baeldung/2024-07-09/2024-07-09-Find%20the%20First%20Embedded%20Occurrence%20of%20an%20Integer%20in%20a%20Java%20String.html","/posts/baeldung/2024-07-09/2024-07-09-Guide%20to%20Quarkus%20Funqy.html","/posts/baeldung/2024-07-09/2024-07-09-Migrate%20From%20Java%208%20to%20Java%2017.html","/posts/baeldung/2024-07-08/2024-07-08-Get%20the%20Desktop%20Path%20in%20Java.html","/posts/baeldung/2024-07-07/2024-07-07-Search%20Users%20With%20Keycloak%20in%20Java.html","/posts/baeldung/2024-07-08/2024-07-08-Add%20Field%20to%20an%20Existing%20MongoDB%20Bson%20Filter%20in%20Java.html","/posts/baeldung/2024-07-08/2024-07-08-Can%20Stream.collect%20%20%20Return%20the%20null%20Value%20.html","/posts/baeldung/2024-07-08/2024-07-08-Handle%20Duplicate%20Keys%20When%20Producing%20Map%20Using%20Java%20Stream.html","/posts/baeldung/2024-07-08/2024-07-08-Introduction%20to%20Interface%20Driven%20Development%20%20IDD%20.html","/posts/baeldung/2024-07-06/2024-07-06-Best%20Practices%20for%20Passing%20Many%20Arguments%20to%20a%20Method%20in%20Java.html","/posts/baeldung/2024-07-06/2024-07-06-Difference%20Between%20th%20text%20and%20th%20value%20in%20Thymeleaf.html","/posts/baeldung/2024-07-06/2024-07-06-Guide%20to%20Swagger%20Parser.html","/posts/baeldung/2024-07-07/2024-07-07-Check%20if%20a%20Specified%20Key%20Exists%20in%20a%20Given%20S3%20Bucket%20Using%20Java.html","/posts/baeldung/2024-07-07/2024-07-07-Convert%20Integer%20to%20Hexadecimal%20in%20Java.html","/posts/baeldung/2024-07-07/2024-07-07-External%20Debugging%20With%20JMXTerm.html","/posts/baeldung/2024-07-07/2024-07-07-Generating%20Time%20Based%20UUIDs.html","/posts/baeldung/2024-07-07/2024-07-07-Reuse%20StringBuilder%20for%20Efficiency.html","/posts/baeldung/2024-07-07/2024-07-07-Use%20Mapper%20in%20Another%20Mapper%20with%20Mapstruct%20and%20Java.html","/posts/baeldung/2024-07-06/2024-07-06-Remove%20Punctuation%20From%20a%20String%20in%20Java.html","/posts/baeldung/2024-07-06/2024-07-06-Comparing%20Two%20Byte%20Arrays%20in%20Java.html","/posts/baeldung/2024-07-05/2024-07-05-ArrayBlockingQueue%20vs.%20LinkedBlockingQueue.html","/posts/baeldung/2024-07-05/2024-07-05-Java%20PrintStream%20to%20String.html","/posts/baeldung/2024-07-05/2024-07-05-Read%20Multiple%20Inputs%20on%20the%20Same%20Line%20in%20Java.html","/posts/baeldung/2024-07-06/2024-07-06-Analyze%20%20Generate%20and%20Transform%20Code%20Using%20Spoon%20in%20Java.html","/posts/baeldung/2024-07-06/2024-07-06-Boolean%20Converters%20in%20Hibernate%206.html","/posts/baeldung/2024-07-06/2024-07-06-Check%20if%20the%20First%20Letter%20of%20a%20String%20Is%20a%20Number.html","/posts/baeldung/2024-07-06/2024-07-06-Find%20the%20Index%20of%20an%20Element%20in%20a%20Java%20Array.html","/posts/baeldung/2024-07-06/2024-07-06-Generate%20UUIDs%20as%20Primary%20Keys%20With%20Hibernate.html","/posts/baeldung/2024-07-06/2024-07-06-Getting%20Pixel%20Array%20From%20Image%20in%20Java.html","/posts/baeldung/2024-07-06/2024-07-06-How%20to%20Persist%20a%20List%20of%20String%20in%20JPA%20.html","/posts/baeldung/2024-07-06/2024-07-06-Scoped%20Values%20in%20Java%2020.html","/posts/baeldung/2024-07-04/2024-07-04-Java%20Serialization%20%20readObject%20%20%20vs.%20readResolve%20%20.html","/posts/baeldung/2024-07-05/2024-07-05-Array%20vs.%20List%20Performance%20in%20Java.html","/posts/baeldung/2024-07-05/2024-07-05-Check%20if%20a%20List%20Contains%20an%20Element%20From%20Another%20List%20in%20Java.html","/posts/baeldung/2024-07-05/2024-07-05-Classpath%20vs.%20Modulepath%20in%20Java.html","/posts/baeldung/2024-07-05/2024-07-05-Convert%20Hashmap%20to%20JSON%20Object%20in%20Java.html","/posts/baeldung/2024-07-05/2024-07-05-Converting%20JSON%20to%20XML%20in%20Java.html","/posts/baeldung/2024-07-05/2024-07-05-What%20s%20the%20Difference%20between%20Scanner%20next%20%20%20and%20nextLine%20%20%20Methods%20.html","/posts/baeldung/2024-07-05/2024-07-05-Write%20Console%20Output%20to%20Text%20File%20in%20Java.html","/posts/baeldung/2024-07-03/2024-07-03-Adding%20One%20Month%20to%20Current%20Date%20in%20Java.html","/posts/baeldung/2024-07-03/2024-07-03-Extracting%20a%20Tar%20File%20in%20Java.html","/posts/baeldung/2024-07-03/2024-07-03-How%20to%20Get%20Last%20Day%20of%20a%20Month%20in%20Java.html","/posts/baeldung/2024-07-03/2024-07-03-The%20Vector%20API%20in%20Java%2019.html","/posts/baeldung/2024-07-04/2024-07-04-Combining%20Two%20or%20More%20Byte%20Arrays.html","/posts/baeldung/2024-07-04/2024-07-04-How%20Many%20Days%20Are%20There%20in%20a%20Particular%20Month%20of%20a%20Given%20Year%20.html","/posts/baeldung/2024-07-03/2024-07-03-Disable%20Wildcard%20Import%20in%20IntelliJ.html","/posts/baeldung/2024-07-02/2024-07-02-Difference%20Between%20Map.clear%20%20%20and%20Instantiating%20a%20New%20Map.html","/posts/baeldung/2024-07-02/2024-07-02-Law%20of%20Demeter%20in%20Java.html","/posts/baeldung/2024-07-03/2024-07-03-Gradle%20Toolchains%20Support%20for%20JVM%20Projects.html","/posts/baeldung/2024-07-03/2024-07-03-New%20Features%20in%20Java%2020.html","/posts/baeldung/2024-07-03/2024-07-03-Pretty%20Print%20a%20JSON%20in%20Java.html","/posts/baeldung/2024-07-02/2024-07-02-%20JsonSubTypes%20vs.%20Reflections%20for%20Polymorphic%20Deserialization%20in%20Jackson.html","/posts/baeldung/2024-07-02/2024-07-02-Convert%20JSON%20Array%20to%20Java%20List.html","/posts/baeldung/2024-07-02/2024-07-02-Guide%20to%20Java%20Jackson%20jr%20Library.html","/posts/baeldung/2024-07-02/2024-07-02-How%20to%20Modify%20a%20Key%20in%20a%20HashMap%20.html","/posts/baeldung/2024-07-01/2024-07-01-Get%20a%20Random%20Element%20From%20a%20Set%20in%20Java.html","/posts/baeldung/2024-06-30/2024-06-30-Differences%20Between%20Heap%20Dump%20%20Thread%20Dump%20and%20Core%20Dump.html","/posts/baeldung/2024-06-30/2024-06-30-Mock%20Same%20Method%20with%20Different%20Parameters.html","/posts/baeldung/2024-07-01/2024-07-01-Calculate%20Distance%20Between%20Two%20Coordinates%20in%20Java.html","/posts/baeldung/2024-07-01/2024-07-01-Programmatic%20Generation%20of%20JSON%20Schemas%20in%20Java.html","/posts/baeldung/2024-06-29/2024-06-29-Create%20a%20GraalVM%20Docker%20Image.html","/posts/baeldung/2024-06-29/2024-06-29-Difference%20Between%20Arrays.sort%20%20%20and%20Collections.sort%20%20.html","/posts/baeldung/2024-06-29/2024-06-29-Unnamed%20Classes%20and%20Instance%20Main%20Methods%20in%20Java%2021.html","/posts/baeldung/2024-06-30/2024-06-30-A%20Guide%20to%20Log4j%20and%20the%20log4j.properties%20File%20in%20Java.html","/posts/baeldung/2024-06-30/2024-06-30-How%20To%20Convert%20Excel%20Data%20Into%20List%20Of%20Java%20Objects.html","/posts/baeldung/2024-06-30/2024-06-30-Log4j%202%20Configuration%20Using%20a%20Properties%20File.html","/posts/baeldung/2024-06-29/2024-06-29-Increment%20Character%20in%20Java.html","/posts/baeldung/2024-06-28/2024-06-28-How%20to%20Write%20Hashmap%20to%20CSV%20File.html","/posts/baeldung/2024-06-28/2024-06-28-Wrapping%20a%20String%20After%20a%20Number%20of%20Characters%20Word%20Wise.html","/posts/baeldung/2024-06-29/2024-06-29-API%20Versioning%20in%20Micronaut.html","/posts/baeldung/2024-06-29/2024-06-29-Check%20if%20a%20String%20Is%20Strictly%20Alphanumeric%20With%20Java.html","/posts/baeldung/2024-06-29/2024-06-29-Convert%20Char%20Array%20to%20Int%20Array%20in%20Java.html","/posts/baeldung/2024-06-29/2024-06-29-Create%20an%20ArrayList%20with%20Multiple%20Object%20Types.html","/posts/baeldung/2024-06-29/2024-06-29-Finding%20the%20Square%20Root%20of%20a%20BigInteger%20in%20Java.html","/posts/baeldung/2024-06-29/2024-06-29-Unnamed%20Patterns%20and%20Variables%20in%20Java%2021.html","/posts/baeldung/2024-06-27/2024-06-27-Add%20a%20List%20as%20Query%20Parameter%20in%20Jersey.html","/posts/baeldung/2024-06-27/2024-06-27-Convert%20File%20to%20Byte%20Array%20in%20Java.html","/posts/baeldung/2024-06-27/2024-06-27-Convert%20a%20Hex%20String%20to%20an%20Integer%20in%20Java.html","/posts/baeldung/2024-06-27/2024-06-27-Convert%20a%20Stream%20into%20a%20Map%20or%20Multimap%20in%20Java.html","/posts/baeldung/2024-06-27/2024-06-27-Create%20a%20%20Mutable%20%20String%20in%20Java.html","/posts/baeldung/2024-06-27/2024-06-27-How%20to%20Write%20and%20Read%20a%20File%20with%20a%20Java%20HashMap.html","/posts/baeldung/2024-06-27/2024-06-27-Unreachable%20Statements%20in%20Java.html","/posts/baeldung/2024-06-28/2024-06-28-Capitalize%20the%20First%20Letter%20of%20Each%20Word%20in%20a%20String.html","/posts/baeldung/2024-06-28/2024-06-28-Check%20if%20a%20String%20Contains%20a%20Number%20Value%20in%20Java.html","/posts/baeldung/2024-06-28/2024-06-28-Convert%20an%20XML%20Object%20to%20a%20String%20in%20Java.html","/posts/baeldung/2024-06-28/2024-06-28-Difference%20Between%20ZipFile%20and%20ZipInputStream%20in%20Java.html","/posts/baeldung/2024-06-28/2024-06-28-How%20to%20Create%20CSV%20File%20from%20POJO%20with%20Custom%20Column%20Headers%20and%20Positions.html","/posts/baeldung/2024-06-28/2024-06-28-JNDI%20%20%20What%20Is%20java%20comp%20env%20.html","/posts/baeldung/2024-06-28/2024-06-28-Optional%20as%20a%20Record%20Parameter%20in%20Java.html","/posts/baeldung/2024-06-28/2024-06-28-Overriding%20Cucumber%20Option%20Values.html","/posts/baeldung/2024-06-26/2024-06-26-Check%20Certificate%20Name%20and%20Alias%20in%20Keystore%20File.html","/posts/baeldung/2024-06-26/2024-06-26-Check%20if%20a%20double%20Is%20an%20Integer%20in%20Java.html","/posts/baeldung/2024-06-26/2024-06-26-Convert%20Long%20Timestamp%20to%20LocalDateTime%20in%20Java.html","/posts/baeldung/2024-06-26/2024-06-26-Convert%20Positive%20Integer%20to%20Negative%20and%20Vice%20Versa%20in%20Java.html","/posts/baeldung/2024-06-26/2024-06-26-Generating%20Unique%20Positive%20long%20Using%20UUID%20in%20Java.html","/posts/baeldung/2024-06-26/2024-06-26-How%20to%20Convert%20Byte%20Array%20to%20Char%20Array.html","/posts/baeldung/2024-06-26/2024-06-26-How%20to%20Increment%20a%20Map%20Value%20in%20Java.html","/posts/baeldung/2024-06-26/2024-06-26-How%20to%20Sort%20LinkedHashMap%20by%20Values%20in%20Java.html","/posts/baeldung/2024-06-26/2024-06-26-How%20to%20Use%20a%20Custom%20Font%20in%20Java.html","/posts/baeldung/2024-06-26/2024-06-26-Limiting%20the%20Max%20Size%20of%20a%20HashMap%20in%20Java.html","/posts/baeldung/2024-06-26/2024-06-26-Methods%20in%20Java.html","/posts/baeldung/2024-06-26/2024-06-26-Passing%20JVM%20Options%20from%20Gradle%20bootRun.html","/posts/baeldung/2024-06-26/2024-06-26-Return%20First%20Non%20null%20Value%20in%20Java.html","/posts/baeldung/2024-06-27/2024-06-27-Checking%20if%20an%20Object%20s%20Type%20Is%20Enum.html","/posts/baeldung/2024-06-27/2024-06-27-Comparing%20the%20Values%20of%20Two%20Generic%20Numbers%20in%20Java.html","/posts/baeldung/2024-06-27/2024-06-27-Context%20Specific%20Deserialization%20Filters%20in%20Java%2017.html","/posts/baeldung/2024-06-27/2024-06-27-Convert%20ResultSet%20Into%20Map.html","/posts/baeldung/2024-06-27/2024-06-27-Convert%20Timestamp%20String%20to%20Long%20in%20Java.html","/posts/baeldung/2024-06-27/2024-06-27-Create%20Table%20Using%20ASCII%20in%20a%20Console%20in%20Java.html","/posts/baeldung/2024-06-27/2024-06-27-Difference%20Between%20String%20isEmpty%20%20%20and%20isBlank%20%20.html","/posts/baeldung/2024-06-27/2024-06-27-Differences%20Between%20%20%20and%20%20%20in%20Cron%20Expressions.html","/posts/baeldung/2024-06-27/2024-06-27-Executable%20Comments%20in%20Java.html","/posts/baeldung/2024-06-27/2024-06-27-HashSet%20toArray%20%20%20Method%20in%20Java.html","/posts/baeldung/2024-06-27/2024-06-27-How%20to%20Avoid%20NoSuchElementException%20in%20Stream%20API.html","/posts/baeldung/2024-06-27/2024-06-27-How%20to%20Parse%20XML%20to%20HashMap%20in%20Java.html","/posts/baeldung/2024-06-27/2024-06-27-MongoDB%20Atlas%20Search%20Using%20the%20Java%20Driver%20and%20Spring%20Data.html","/posts/baeldung/2024-06-27/2024-06-27-Representing%20Furthest%20Possible%20Date%20in%20Java.html","/posts/baeldung/2024-06-27/2024-06-27-Setting%20a%20Spring%20Bean%20to%20Null.html","/posts/baeldung/2024-06-27/2024-06-27-Sharing%20Memory%20Between%20JVMs.html","/posts/baeldung/2024-06-27/2024-06-27-Switching%20Between%20Frames%20Using%20Selenium%20WebDriver%20in%20Java.html","/posts/baeldung/2024-06-27/2024-06-27-Synchronize%20a%20Static%20Variable%20Among%20Different%20Threads.html","/posts/baeldung/2024-06-27/2024-06-27-Time%20Complexity%20of%20Java%20Collections%20Sort%20in%20Java.html","/posts/baeldung/2024-06-27/2024-06-27-Why%20Is%20sun.misc.Unsafe.park%20Actually%20Unsafe%20.html","/posts/baeldung/2024-06-27/2024-06-27-Working%20with%20Exceptions%20in%20Java%20CompletableFuture.html","/posts/baeldung/2024-06-25/2024-06-25-BigDecimal.ZERO%20vs.%20new%20BigDecimal%200%20.html","/posts/baeldung/2024-06-25/2024-06-25-Callbacks%20in%20ListenableFuture%20and%20CompletableFuture.html","/posts/baeldung/2024-06-25/2024-06-25-Comparing%20One%20String%20With%20Multiple%20Values%20in%20One%20Expression%20in%20Java.html","/posts/baeldung/2024-06-25/2024-06-25-Convert%20a%20String%20to%20a%20List%20of%20Characters%20in%20Java.html","/posts/baeldung/2024-06-25/2024-06-25-Convert%20an%20OutputStream%20to%20a%20Byte%20Array%20in%20Java.html","/posts/baeldung/2024-06-25/2024-06-25-Detect%20the%20Last%20Iteration%20in%20for%20Loops%20in%20Java.html","/posts/baeldung/2024-06-25/2024-06-25-Find%20Files%20by%20Extension%20in%20Specified%20Directory%20in%20Java.html","/posts/baeldung/2024-06-25/2024-06-25-Format%20LocalDate%20to%20ISO%208601%20With%20T%20and%20Z.html","/posts/baeldung/2024-06-25/2024-06-25-Lazy%20Field%20Initialization%20with%20Lambdas.html","/posts/baeldung/2024-06-25/2024-06-25-Reactor%20WebFlux%20vs%20Virtual%20Threads.html","/posts/baeldung/2024-06-25/2024-06-25-What%20Does%20It%20Mean%20to%20Hydrate%20an%20Object%20.html","/posts/baeldung/2024-06-26/2024-06-26-A%20Guide%20to%20Timefold%20Solver%20for%20Employee%20Scheduling.html","/posts/baeldung/2024-06-26/2024-06-26-All%20the%20Ways%20Java%20Uses%20the%20Colon%20Character.html","/posts/baeldung/2024-06-26/2024-06-26-Catch%20Common%20Mistakes%20with%20Error%20Prone%20Library%20in%20Java.html","/posts/baeldung/2024-06-26/2024-06-26-Deserializing%20JSON%20to%20Java%20Record%20using%20Gson.html","/posts/baeldung/2024-06-26/2024-06-26-Differences%20Between%20Entities%20and%20DTOs.html","/posts/baeldung/2024-06-26/2024-06-26-Get%20Index%20of%20First%20Element%20Matching%20Boolean%20Using%20Java%20Streams.html","/posts/baeldung/2024-06-26/2024-06-26-Handling%20NullPointerException%20in%20findFirst%20%20%20When%20the%20First%20Element%20Is%20Null.html","/posts/baeldung/2024-06-26/2024-06-26-How%20to%20Convert%20JsonNode%20to%20ObjectNode.html","/posts/baeldung/2024-06-26/2024-06-26-How%20to%20Effectively%20Unit%20Test%20CompletableFuture.html","/posts/baeldung/2024-06-26/2024-06-26-Inter%20Process%20Communication%20Methods%20in%20Java.html","/posts/baeldung/2024-06-26/2024-06-26-Recursively%20Sum%20the%20Integers%20in%20an%20Array.html","/posts/baeldung/2024-06-26/2024-06-26-Resolving%20Gson%20s%20%20Multiple%20JSON%20Fields%20%20Exception.html","/posts/baeldung/2024-06-26/2024-06-26-Retrieving%20Unix%20Time%20in%20Java.html","/posts/baeldung/2024-06-26/2024-06-26-Rounding%20Up%20a%20Number%20to%20Nearest%20Multiple%20of%205%20in%20Java.html","/posts/baeldung/2024-06-26/2024-06-26-Skip%20Bytes%20in%20InputStream%20in%20Java.html","/posts/baeldung/2024-06-26/2024-06-26-Static%20Final%20Variables%20in%20Java.html","/posts/baeldung/2024-06-26/2024-06-26-String%20s%20Maximum%20Length%20in%20Java.html","/posts/baeldung/2024-06-26/2024-06-26-String%20vs%20StringBuffer%20Comparison%20in%20Java.html","/posts/baeldung/2024-06-26/2024-06-26-Verify%20That%20Lambda%20Expression%20Was%20Called%20Using%20Mockito.html","/posts/baeldung/2024-06-26/2024-06-26-Working%20With%20HarperDB%20and%20Java.html","/posts/baeldung/2024-06-25/2024-06-25-Convert%20Excel%20Files%20to%20PDF%20Using%20Java.html","/posts/baeldung/2024-06-25/2024-06-25-Check%20If%20a%20Java%20StringBuilder%20Object%20Contains%20a%20Character.html","/posts/baeldung/2024-06-24/2024-06-24-Check%20if%20List%20Contains%20at%20Least%20One%20Enum.html","/posts/baeldung/2024-06-24/2024-06-24-Check%20if%20a%20Point%20Is%20Between%20Two%20Points%20Drawn%20on%20a%20Straight%20Line%20in%20Java.html","/posts/baeldung/2024-06-24/2024-06-24-Convert%20Null%20Value%20to%20a%20Default%20Value%20in%20Java.html","/posts/baeldung/2024-06-24/2024-06-24-Difference%20Between%20Xmx%20and%20MaxRAM%20JVM%20Parameters.html","/posts/baeldung/2024-06-24/2024-06-24-Difference%20Between%20a%20Future%20and%20a%20Promise%20in%20Java.html","/posts/baeldung/2024-06-24/2024-06-24-Generational%20ZGC%20in%20Java%2021.html","/posts/baeldung/2024-06-24/2024-06-24-Java%208%20Stream%20Operation%20on%20the%20Empty%20List.html","/posts/baeldung/2024-06-25/2024-06-25-Calculate%20Months%20Between%20Two%20Dates%20in%20Java.html","/posts/baeldung/2024-06-25/2024-06-25-Comparison%20of%20for%20Loops%20and%20Iterators.html","/posts/baeldung/2024-06-25/2024-06-25-Convert%20Byte%20Array%20to%20JSON%20and%20Vice%20Versa%20in%20Java.html","/posts/baeldung/2024-06-25/2024-06-25-Convert%20String%20to%20long%20or%20Long%20in%20Java.html","/posts/baeldung/2024-06-25/2024-06-25-Difference%20Between%20execute%20%20%20and%20submit%20%20%20in%20Executor%20Service.html","/posts/baeldung/2024-06-25/2024-06-25-Find%20Missing%20Number%20From%20a%20Given%20Array%20in%20Java.html","/posts/baeldung/2024-06-25/2024-06-25-How%20to%20Write%20Strings%20to%20OutputStream%20in%20Java.html","/posts/baeldung/2024-06-25/2024-06-25-Java%20System.currentTimeMillis%20%20%20Vs.%20System.nanoTime%20%20.html","/posts/baeldung/2024-06-25/2024-06-25-Java%20s%20String.length%20%20%20and%20String.getBytes%20%20.length.html","/posts/baeldung/2024-06-25/2024-06-25-Print%20a%20Double%20Value%20Without%20Scientific%20Notation%20in%20Java.html","/posts/baeldung/2024-06-25/2024-06-25-Read%20a%20File%20and%20Split%20It%20Into%20Multiple%20Files%20in%20Java.html","/posts/baeldung/2024-06-25/2024-06-25-Return%20Map%20Instead%20of%20List%20in%20Spring%20Data%20JPA.html","/posts/baeldung/2024-06-25/2024-06-25-Rotating%20a%20Java%20String%20By%20n%20Characters.html","/posts/baeldung/2024-06-25/2024-06-25-Sorting%20One%20List%20Based%20on%20Another%20List%20in%20Java.html","/posts/baeldung/2024-06-25/2024-06-25-UTF%208%20Validation%20in%20Java.html","/posts/baeldung/2024-06-24/2024-06-24-Remove%20Characters%20From%20a%20String%20That%20Are%20in%20the%20Other%20String.html","/posts/baeldung/2024-06-24/2024-06-24-Removing%20the%20Last%20Node%20in%20a%20Linked%20List.html","/posts/baeldung/2024-06-24/2024-06-24-Read%20Input%20Character%20by%20Character%20in%20Java.html","/posts/baeldung/2024-06-23/2024-06-23-Calculate%20Number%20of%20Weekdays%20Between%20Two%20Dates%20in%20Java.html","/posts/baeldung/2024-06-23/2024-06-23-Convert%20byte%20to%20int%20Type%20in%20Java.html","/posts/baeldung/2024-06-23/2024-06-23-Enable%20Java%20SSL%20Debug%20Logging.html","/posts/baeldung/2024-06-23/2024-06-23-JFR%20View%20Command%20in%20Java%2021.html","/posts/baeldung/2024-06-23/2024-06-23-Reset%20ListIterator%20to%20First%20Element%20of%20the%20List%20in%20Java.html","/posts/baeldung/2024-06-23/2024-06-23-Setting%20up%20and%20Using%20Spock%20With%20Gradle.html","/posts/baeldung/2024-06-23/2024-06-23-Simple%20Morse%20Code%20Translation%20in%20Java.html","/posts/baeldung/2024-06-23/2024-06-23-Using%20Current%20Time%20as%20Filename%20in%20Java.html","/posts/baeldung/2024-06-24/2024-06-24-Accessing%20Private%20Java%20Fields%20via%20Kotlin%20Extension%20Functions.html","/posts/baeldung/2024-06-24/2024-06-24-Call%20a%20Method%20on%20Each%20Element%20of%20a%20List%20in%20Java.html","/posts/baeldung/2024-06-24/2024-06-24-Check%20if%20a%20Float%20Value%20is%20Equivalent%20to%20an%20Integer%20Value%20in%20Java.html","/posts/baeldung/2024-06-24/2024-06-24-Convert%20Joda%20Time%20DateTime%20to%20Date%20and%20Vice%20Versa.html","/posts/baeldung/2024-06-24/2024-06-24-Converting%20BigDecimal%20to%20Integer%20in%20Java.html","/posts/baeldung/2024-06-24/2024-06-24-Converting%20Integer%20to%20BigDecimal%20in%20Java.html","/posts/baeldung/2024-06-24/2024-06-24-Create%20Kubernetes%20Operators%20with%20the%20Java%20Operator%20SDK.html","/posts/baeldung/2024-06-24/2024-06-24-Getting%20Query%20String%20Parameters%20from%20HttpServletRequest.html","/posts/baeldung/2024-06-24/2024-06-24-Introduction%20to%20Postman.html","/posts/baeldung/2024-06-24/2024-06-24-Printing%20Message%20on%20Console%20without%20Using%20main%20%20%20Method%20in%20Java.html","/posts/baeldung/2024-06-24/2024-06-24-PriorityQueue%20iterator%20%20%20Method%20in%20Java.html","/posts/baeldung/2024-06-24/2024-06-24-Replace%20Non%20Printable%20Unicode%20Characters%20in%20Java.html","/posts/baeldung/2024-06-24/2024-06-24-Solving%20the%20ParameterResolutionException%20in%20JUnit%205.html","/posts/baeldung/2024-06-24/2024-06-24-Using%20Static%20Methods%20Instead%20of%20Deprecated%20JsonParser.html","/posts/baeldung/2024-06-24/2024-06-24-What%20Is%20the%20Error%20%20%20Non%20static%20method%20cannot%20be%20referenced%20from%20a%20static%20context%20%20.html","/posts/baeldung/2024-06-23/2024-06-23-Run%20Length%20Encoding%20and%20Decoding%20in%20Java.html","/posts/baeldung/2024-06-22/2024-06-22-Calculate%20Weighted%20Mean%20in%20Java.html","/posts/baeldung/2024-06-22/2024-06-22-Convert%20Date%20to%20Unix%20Timestamp%20in%20Java.html","/posts/baeldung/2024-06-22/2024-06-22-CountDownLatch%20vs.%20Semaphore.html","/posts/baeldung/2024-06-22/2024-06-22-Creating%20a%20Custom%20URL%20Connection.html","/posts/baeldung/2024-06-22/2024-06-22-Find%20the%20Equilibrium%20Indexes%20of%20an%20Array%20in%20Java.html","/posts/baeldung/2024-06-22/2024-06-22-Instantiate%20an%20Inner%20Class%20With%20Reflection%20in%20Java.html","/posts/baeldung/2024-06-22/2024-06-22-Pagination%20With%20JDBC.html","/posts/baeldung/2024-06-22/2024-06-22-Quarkus%20and%20Virtual%20Threads.html","/posts/baeldung/2024-06-22/2024-06-22-Run%20Maven%20From%20Java%20Code.html","/posts/baeldung/2024-06-22/2024-06-22-Storing%20UUID%20as%20Base64%20String%20in%20Java.html","/posts/baeldung/2024-06-22/2024-06-22-Translating%20Space%20Characters%20in%20URLEncoder.html","/posts/baeldung/2024-06-22/2024-06-22-Understanding%20%20Raw%20type.%20References%20to%20generic%20types%20should%20be%20parameterized%20%20Error.html","/posts/baeldung/2024-06-23/2024-06-23-Access%20Job%20Parameters%20From%20ItemReader%20in%20Spring%20Batch.html","/posts/baeldung/2024-06-23/2024-06-23-Calculating%20the%20Power%20of%20Any%20Number%20in%20Java%20Without%20Using%20Math%20pow%20%20%20Method.html","/posts/baeldung/2024-06-23/2024-06-23-Convert%20Gregorian%20to%20Hijri%20Date%20in%20Java.html","/posts/baeldung/2024-06-23/2024-06-23-Convert%20Long%20to%20Date%20in%20Java.html","/posts/baeldung/2024-06-23/2024-06-23-Convert%20String%20Date%20to%20XMLGregorianCalendar%20in%20Java.html","/posts/baeldung/2024-06-23/2024-06-23-Creating%20Unicode%20Character%20From%20Its%20Code%20Point%20Hex%20String.html","/posts/baeldung/2024-06-23/2024-06-23-Difference%20Between%20%20mvn%20verify%20%20and%20%20mvn%20test%20.html","/posts/baeldung/2024-06-23/2024-06-23-Difference%20between%20ZoneOffset.UTC%20and%20ZoneId.of%20%20UTC%20%20.html","/posts/baeldung/2024-06-23/2024-06-23-Generating%20Unique%20Positive%20Long%20Using%20SecureRandom%20in%20Java.html","/posts/baeldung/2024-06-23/2024-06-23-How%20to%20Determine%20if%20a%20String%20Contains%20Invalid%20Encoded%20Characters.html","/posts/baeldung/2024-06-23/2024-06-23-Improving%20Test%20Coverage%20and%20Readability%20With%20Spock%20s%20Data%20Pipes%20and%20Tables.html","/posts/baeldung/2024-06-23/2024-06-23-Monkey%20Patching%20in%20Java.html","/posts/baeldung/2024-06-23/2024-06-23-Normalize%20a%20URL%20in%20Java.html","/posts/baeldung/2024-06-23/2024-06-23-Print%20a%20Java%202D%20Array.html","/posts/baeldung/2024-06-23/2024-06-23-Read%20and%20Write%20Files%20in%20Java%20Using%20Separate%20Threads.html","/posts/baeldung/2024-06-23/2024-06-23-Regular%20Expression%20for%20Password%20Validation%20in%20Java.html","/posts/baeldung/2024-06-23/2024-06-23-Set%20an%20Environment%20Variable%20at%20Runtime%20in%20Java.html","/posts/baeldung/2024-06-23/2024-06-23-Shutting%20Down%20on%20OutOfMemoryError%20in%20Java.html","/posts/baeldung/2024-06-23/2024-06-23-Structured%20Logging%20in%20Java.html","/posts/baeldung/2024-06-22/2024-06-22-Count%20Uppercase%20and%20Lowercase%20Letters%20in%20a%20String.html","/posts/baeldung/2024-06-21/2024-06-21-Create%20JavaType%20From%20Class%20with%20Jackson.html","/posts/baeldung/2024-06-21/2024-06-21-Get%20First%20n%20Characters%20in%20a%20String%20in%20Java.html","/posts/baeldung/2024-06-21/2024-06-21-Gson%20TypeToken%20With%20Dynamic%20List%20Item%20Type.html","/posts/baeldung/2024-06-21/2024-06-21-How%20to%20Pretty%20Print%20a%20Map%20in%20Java.html","/posts/baeldung/2024-06-21/2024-06-21-Implementing%20GraphQL%20Mutation%20Without%20Returning%20Data.html","/posts/baeldung/2024-06-21/2024-06-21-Remove%20Only%20Trailing%20Spaces%20or%20Whitespace%20From%20a%20String%20in%20Java.html","/posts/baeldung/2024-06-22/2024-06-22-A%20Guide%20to%20etcd.html","/posts/baeldung/2024-06-22/2024-06-22-Add%20Camel%20Route%20at%20Runtime%20in%20Java.html","/posts/baeldung/2024-06-22/2024-06-22-Check%20if%20String%20is%20Base64%20Encoded.html","/posts/baeldung/2024-06-22/2024-06-22-Check%20if%20Two%20Strings%20Are%20Rotations%20of%20Each%20Other.html","/posts/baeldung/2024-06-22/2024-06-22-Check%20if%20a%20String%20Is%20Equal%20to%20Its%20Mirror%20Reflection.html","/posts/baeldung/2024-06-22/2024-06-22-Collect%20Stream%20of%20entrySet%20%20%20to%20a%20LinkedHashMap.html","/posts/baeldung/2024-06-22/2024-06-22-CompletableFuture%20runAsync%20%20%20vs.%20supplyAsync%20%20%20in%20Java.html","/posts/baeldung/2024-06-22/2024-06-22-Convert%20Infix%20to%20Postfix%20Expressions%20in%20Java.html","/posts/baeldung/2024-06-22/2024-06-22-Difference%20Between%20thenApply%20%20%20and%20thenApplyAsync%20%20%20in%20CompletableFuture.html","/posts/baeldung/2024-06-22/2024-06-22-Find%20The%20Largest%20Number%20in%20a%20String.html","/posts/baeldung/2024-06-22/2024-06-22-Find%20the%20First%20Non%20repeating%20Element%20of%20a%20List.html","/posts/baeldung/2024-06-22/2024-06-22-Guide%20to%20System.in.read%20%20.html","/posts/baeldung/2024-06-22/2024-06-22-Mask%20an%20Email%20Address%20and%20Phone%20Number%20in%20Java.html","/posts/baeldung/2024-06-22/2024-06-22-Moves%20Zeros%20to%20the%20End%20of%20an%20Array%20in%20Java.html","/posts/baeldung/2024-06-22/2024-06-22-Mutable%20vs.%20Immutable%20Objects%20in%20Java.html","/posts/baeldung/2024-06-22/2024-06-22-Preventing%20Gson%20from%20Expressing%20Integers%20as%20Floats.html","/posts/baeldung/2024-06-22/2024-06-22-Solving%20Rod%20Cutting%20Problem%20in%20Java.html","/posts/baeldung/2024-06-22/2024-06-22-Understanding%20Kafka%20InstanceAlreadyExistsException%20in%20Java.html","/posts/baeldung/2024-06-22/2024-06-22-View%20Kafka%20Headers%20in%20Java.html","/posts/baeldung/2024-06-21/2024-06-21-Count%20the%20Number%20of%20Unique%20Digits%20in%20an%20Integer%20using%20Java.html","/posts/baeldung/2024-06-21/2024-06-21-Finding%20the%20Parent%20of%20a%20Node%20in%20a%20Binary%20Search%20Tree%20with%20Java.html","/posts/baeldung/2024-06-21/2024-06-21-Generate%20Juggler%20Sequence%20in%20Java.html","/posts/baeldung/2024-06-21/2024-06-21-Get%20the%20Initials%20of%20a%20Name%20in%20Java.html","/posts/baeldung/2024-06-21/2024-06-21-How%20to%20Mock%20Amazon%20S3%20for%20Integration%20Test.html","/posts/baeldung/2024-06-21/2024-06-21-Modify%20and%20Print%20List%20Items%20With%20Java%20Streams.html","/posts/baeldung/2024-06-21/2024-06-21-Serialization%20with%20FlatBuffers%20in%20Java.html","/posts/baeldung/2024-06-21/2024-06-21-Simplified%20Array%20Operations%20on%20JsonNode%20Without%20Typecasting%20in%20Jackson.html","/posts/baeldung/Archive/2024-06-20-Add%20One%20Element%20to%20an%20Immutable%20List%20in%20Java.html","/posts/baeldung/Archive/2024-06-20-Check%20if%20a%20Given%20Time%20Lies%20Between%20Two%20Times%20Regardless%20of%20Date.html","/posts/baeldung/Archive/2024-06-20-Checking%20if%20a%20Date%20Object%20Equals%20Yesterday.html","/posts/baeldung/Archive/2024-06-20-Dynamically%20Register%20Spring%20Beans%20Based%20on%20Properties.html","/posts/baeldung/Archive/2024-06-20-Flatten%20a%20Stream%20of%20Maps%20to%20a%20Single%20Map%20in%20Java.html","/posts/baeldung/Archive/2024-06-20-How%20to%20Convert%20Excel%20to%20JSON%20in%20Java.html","/posts/baeldung/Archive/2024-06-20-Invalid%20Characters%20in%20XML.html","/posts/baeldung/Archive/2024-06-20-Representation%20of%20Integers%20at%20a%20Bit%20Level%20in%20Java.html","/posts/baeldung/Archive/2024-06-20-Vigen%20re%20Cipher%20in%20Java.html","/posts/baeldung/Archive/2024-06-21-Adding%20Elements%20to%20a%20Collection%20During%20Iteration.html","/posts/baeldung/Archive/2024-06-21-Calculate%20Percentiles%20in%20Java.html","/posts/baeldung/Archive/2024-06-21-Capturing%20Method%20Arguments%20When%20Running%20Spock%20Tests.html","/posts/baeldung/Archive/2024-06-21-Check%20if%20a%20Number%20Is%20a%20Happy%20Number%20in%20Java.html","/posts/baeldung/Archive/2024-06-21-Find%20the%20Largest%20Number%20Possible%20After%20Removing%20k%20Digits%20of%20a%20Number.html","/posts/baeldung/Archive/2024-06-21-Finding%20the%20Majority%20Element%20of%20an%20Array%20in%20Java.html","/posts/baeldung/Archive/2024-06-21-Finding%20the%20Peak%20Elements%20of%20a%20List.html","/posts/baeldung/Archive/2024-06-21-How%20to%20Autowire%20a%20Spring%20Bean%20in%20a%20Servlet%20Filter.html","/posts/baeldung/Archive/2024-06-21-Obtaining%20the%20Last%20Path%20Segment%20of%20a%20URI%20in%20Java.html","/posts/baeldung/Archive/2024-06-21-Parsing%20HTML%20Table%20in%20Java%20With%20Jsoup.html","/posts/baeldung/Archive/2024-06-19-Check%20if%20an%20Element%20Is%20Present%20in%20a%20Set%20in%20Java.html","/posts/baeldung/Archive/2024-06-19-Convert%20TemporalAccessor%20to%20LocalDate.html","/posts/baeldung/Archive/2024-06-19-Get%20Last%20n%20Characters%20From%20a%20String.html","/posts/baeldung/Archive/2024-06-19-Get%20a%20Path%20to%20a%20Resource%20in%20a%20Java%20JAR%20File.html","/posts/baeldung/Archive/2024-06-19-Immutable%20vs%20Unmodifiable%20Collection%20in%20Java.html","/posts/baeldung/Archive/2024-06-19-Internet%20Address%20Resolution%20SPI%20in%20Java.html","/posts/baeldung/Archive/2024-06-19-Opening%20HTML%20File%20Using%20Java.html","/posts/baeldung/Archive/2024-06-19-Statements%20Before%20super%20%20%20in%20Java.html","/posts/baeldung/Archive/2024-06-19-The%20%20Struct%20Annotation%20Type%20in%20Hibernate%20%20%20Structured%20User%20Defined%20Types.html","/posts/baeldung/Archive/2024-06-20-Converting%20UTF%208%20to%20ISO%208859%201%20in%20Java.html","/posts/baeldung/Archive/2024-06-20-Create%20Spring%20Prototype%20Scope%20Bean%20with%20Runtime%20Arguments.html","/posts/baeldung/Archive/2024-06-20-Fix%20Ambiguous%20Method%20Call%20Error%20in%20Mockito.html","/posts/baeldung/Archive/2024-06-20-Include%20null%20Value%20in%20JSON%20Serialization.html","/posts/baeldung/Archive/2024-06-20-Java%20InputStream%20vs.%20InputStreamReader.html","/posts/baeldung/Archive/2024-06-20-Normalizing%20the%20EOL%20Character%20in%20Java.html","/posts/baeldung/Archive/2024-06-20-Reading%20a%20.gz%20File%20Line%20by%20Line%20Using%20GZIPInputStream.html","/posts/baeldung/Archive/2024-06-20-When%20to%20Use%20Setter%20Methods%20or%20Constructors%20for%20Setting%20a%20Variable%20s%20Value%20in%20Java.html","/posts/baeldung/Archive/2024-06-19-Checking%20Which%20Java%20Version%20Is%20Running%20in%20Eclipse.html","/posts/baeldung/Archive/2024-06-19-Convert%20a%20Phone%20Number%20in%20Words%20to%20Number%20with%20Java.html","/posts/baeldung/Archive/2024-06-19-How%20to%20Check%20Number%20Perfection.html","/posts/baeldung/Archive/2024-06-19-How%20to%20Scale%20a%20Bufferedimage%20in%20Java%20.html","/posts/baeldung/Archive/2024-06-19-Introduction%20to%20Light%204J.html","/posts/baeldung/Archive/Can%20%20Transactional%20and%20%20Async%20Work%20Together%20.html","/posts/baeldung/Archive/Convert%20Google%20Protocol%20Buffer%20Timestamp%20to%20LocalDate.html","/posts/baeldung/Archive/Create%20and%20Run%20Apache%20JMeter%20Test%20Scripts%20via%20Java%20Program.html","/posts/baeldung/Archive/Exploring%20Complex%20Number%20Arithmetic%20Operations%20in%20Java.html","/posts/baeldung/Archive/Get%20the%20Response%20Body%20in%20Spring%20Boot%20Filter.html","/posts/baeldung/Archive/Intro%20to%20the%20Apache%20Commons%20Compress%20Project.html","/posts/baeldung/Archive/Introduction%20to%20Brave.html","/posts/baeldung/Archive/Introduction%20to%20DuckDB.html","/posts/baeldung/Archive/Introduction%20to%20JFreeChart.html","/posts/baeldung/Archive/Java%E4%B8%AD%E5%B0%86%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E4%B8%BAOffsetDateTime.html","/posts/baeldung/Archive/Join%20Two%20Tables%20Using%20jOOQ.html","/posts/baeldung/Archive/Parallel%20Collection%20Processing%20with%20Parallel%20Collectors%20and%20Virtual%20Threads.html","/posts/baeldung/Archive/Pass%20a%20Class%20as%20a%20Parameter%20in%20Java.html","/posts/baeldung/Archive/Polymorphism%20with%20Gson.html","/posts/baeldung/Archive/PrintWriter%20write%20%20%20vs%20print%20%20%20Method%20in%20Java.html","/posts/baeldung/Archive/Set%20Matrix%20Elements%20to%20Zero%20in%20Java.html","/posts/baeldung/Archive/BigDecimal%20equals%20%20%20vs.%20compareTo%20%20.html","/posts/baeldung/Archive/Calculating%20Moving%20Averages%20in%20Java.html","/posts/baeldung/Archive/Compress%20and%20Create%20a%20Byte%20Array%20Using%20GZip.html","/posts/baeldung/Archive/Continue%20the%20Test%20Even%20After%20Assertion%20Failure%20in%20TestNG.html","/posts/baeldung/Archive/Converting%20Image%20to%20BufferedImage%20in%20Java.html","/posts/baeldung/Archive/Difference%20Between%20Casting%20to%20String%20and%20String.valueOf%20%20.html","/posts/baeldung/Archive/Download%20File%20from%20S3%20Given%20a%20URL.html","/posts/baeldung/Archive/Find%20the%20Date%20of%20Easter%20Sunday%20for%20the%20Given%20Year.html","/posts/baeldung/Archive/Find%20the%20Length%20of%20the%20Longest%20Symmetric%20Substring.html","/posts/baeldung/Archive/Finding%20the%20Redirected%20URL%20of%20a%20URL%20in%20Java.html","/posts/baeldung/Archive/Finding%20the%20nth%20Last%20Occurrence%20of%20char%20in%20String.html","/posts/baeldung/Archive/Get%202%20s%20Complement%20of%20a%20Number%20in%20Java.html","/posts/baeldung/Archive/How%20to%20Fix%20EOFException%20in%20Java.html","/posts/baeldung/Archive/How%20to%20Specify%20the%20logback.xml%20Location.html","/posts/baeldung/Archive/Implement%20the%20Builder%20Pattern%20in%20Java%208.html","/posts/baeldung/Archive/Introduction%20to%20Simple%20Java%20Mail.html","/posts/baeldung/Archive/Java%E4%B8%AD%E5%B0%86int%E8%BD%AC%E6%8D%A2%E4%B8%BA%E6%97%A0%E7%AC%A6%E5%8F%B7%E5%AD%97%E8%8A%82.html","/posts/baeldung/Archive/Print%20the%20Default%20Value%20When%20Overriding%20toString%20%20%20Method.html","/posts/baeldung/Archive/Role%20Based%20Access%20Control%20in%20Quarkus.html","/posts/baeldung/Archive/Unit%20Test%20for%20hashCode%20%20%20in%20Java.html","/posts/baeldung/Archive/Compare%20the%20Numbers%20of%20Different%20Types.html","/posts/baeldung/Archive/Convert%202D%20Array%20Into%201D%20Array.html","/posts/baeldung/Archive/Convert%20From%20int%20to%20short%20in%20Java.html","/posts/baeldung/Archive/Converting%20Float%20ArrayList%20to%20Primitive%20Array%20in%20Java.html","/posts/baeldung/Archive/Create%20HashMap%20with%20Character%20Count%20of%20a%20String%20in%20Java.html","/posts/baeldung/Archive/Difference%20Between%20Lombok%20%20AllArgsConstructor%20%20%20RequiredArgsConstructor%20and%20%20NoArgConstructor.html","/posts/baeldung/Archive/Finding%20the%20Index%20of%20the%20Smallest%20Element%20in%20an%20Array.html","/posts/baeldung/Archive/Generate%20Java%20Classes%20From%20Avro%20Schemas%20Using%20Gradle.html","/posts/baeldung/Archive/Handling%20Nulls%20in%20ArrayList.addAll%20%20.html","/posts/baeldung/Archive/How%20to%20Unit%20Test%20an%20ExecutorService%20Without%20Using%20Thread.sleep%20%20.html","/posts/baeldung/Archive/How%20to%20Use%20Pair%20With%20Java%20PriorityQueue.html","/posts/baeldung/Archive/Intro%20to%20Apache%20Commons%20Configuration%20Project.html","/posts/baeldung/Archive/Introduction%20to%20Java%2022.html","/posts/baeldung/Archive/Print%20Distinct%20Characters%20of%20a%20String%20in%20Java.html","/posts/baeldung/Archive/Remove%20All%20Characters%20Before%20a%20Specific%20Character%20in%20Java.html","/posts/baeldung/Archive/Collecting%20into%20Map%20using%20Collectors.toMap%20%20%20vs%20Collectors.groupingBy%20%20.html","/posts/baeldung/Archive/Convert%20Jackson%20JsonNode%20to%20Typed%20Collection.html","/posts/baeldung/Archive/Convert%20a%20Queue%20to%20a%20List.html","/posts/baeldung/Archive/Convert%20an%20Optional%20to%20an%20ArrayList%20in%20Java.html","/posts/baeldung/Archive/Converting%20short%20to%20byte%20%20%20in%20Java.html","/posts/baeldung/Archive/Full%20and%20Partial%20Text%20Search%20in%20MongoDB.html","/posts/baeldung/Archive/Get%20the%20Position%20of%20Key%20Value%20in%20LinkedHashMap%20Using%20Its%20Key.html","/posts/baeldung/Archive/How%20to%20Convert%20Between%20java.sql.Timestamp%20and%20ZonedDateTime%20in%20Java.html","/posts/baeldung/Archive/How%20to%20Implement%20Elvis%20Operator%20in%20Java%208.html","/posts/baeldung/Archive/How%20to%20Iterate%20a%20List%20of%20Maps%20in%20Java.html","/posts/baeldung/Archive/Introduction%20to%20SSHJ.html","/posts/baeldung/Archive/Mapping%20Enum%20to%20String%20Using%20MapStruct.html","/posts/baeldung/Archive/Perform%20Action%20Only%20if%20All%20Optionals%20Are%20Available.html","/posts/baeldung/Archive/Check%20if%20Two%20Strings%20Are%20Permutations%20of%20Each%20Other%20in%20Java.html","/posts/baeldung/Archive/Check%20if%20a%20Number%20Is%20Power%20of%202%20in%20Java.html","/posts/baeldung/Archive/Configuring%20Retry%20Policy%20for%20gRPC%20Request.html","/posts/baeldung/Archive/Convert%20InputStream%20to%20Stream%20in%20Java.html","/posts/baeldung/Archive/Difference%20Between%20Optional.of%20%20%20and%20Optional.ofNullable%20%20%20in%20Java.html","/posts/baeldung/Archive/Extract%20Text%20From%20a%20HTML%20Tag%20with%20Regex.html","/posts/baeldung/Archive/Fault%20Tolerance%20in%20Java%20Using%20Failsafe.html","/posts/baeldung/Archive/Finding%20the%20Second%20Smallest%20Integer%20in%20an%20Array%20in%20Java.html","/posts/baeldung/Archive/How%20to%20Check%20if%20Optional%20Contains%20Value%20Equal%20to%20T%20Object.html","/posts/baeldung/Archive/How%20to%20Make%20Multiple%20REST%20Calls%20in%20CompletableFuture.html","/posts/baeldung/Archive/Introduction%20to%20JavaParser.html","/posts/baeldung/Archive/Logging%20SQL%20Queries%20to%20the%20Console%20in%20Mybatis.html","/posts/baeldung/Archive/Mocking%20Protected%20Method%20in%20Java.html","/posts/baeldung/Archive/Monads%20in%20Java.html","/posts/baeldung/Archive/Supply%20Enum%20Value%20to%20an%20Annotation%20From%20a%20Constant%20in%20Java.html","/posts/baeldung/Archive/The%20Difference%20Between%20doAnswer%20%20%20and%20thenReturn%20%20%20in%20Mockito.html","/posts/baeldung/Archive/Comparison%20Between%20Flux.map()%20and%20Flux.doOnNext().html","/posts/baeldung/Archive/Convert%20Between%20CLOB%20and%20String%20in%20Java.html","/posts/baeldung/Archive/Declare%20an%20Enum%20in%20an%20Inner%20Class%20in%20Java.html","/posts/baeldung/Archive/Difference%20Between%20Iterator.forEachRemaining%20%20%20and%20Iterable.forEach%20%20.html","/posts/baeldung/Archive/Finding%20Minimum%20and%20Maximum%20in%20a%202D%20Array.html","/posts/baeldung/Archive/Finding%20the%20Next%20Higher%20Number%20With%20the%20Same%20Digits.html","/posts/baeldung/Archive/Get%20the%20Indices%20of%20an%20Array%20After%20Sorting%20in%20Java.html","/posts/baeldung/Archive/How%20to%20Convert%20XML%20to%20PDF.html","/posts/baeldung/Archive/Map%20LocalDateTime%20to%20Instant%20in%20MapStruct.html","/posts/baeldung/Archive/Merge%20Multiple%20PDF%20Files%20Into%20a%20Single%20PDF%20Using%20Java.html","/posts/baeldung/Archive/Return%20Non-null%20Elements%20From%20Java%20Map%20Operation.html","/posts/articles/gRPC%20Authentication%20in%20Java%20Using%20Application%20Layer%20Transport%20Security%20(ALTS).html","/posts/baeldung/Archive/CompletableFuture%20vs.%20Mono.html","/posts/baeldung/Archive/Convert%20Decimal%20to%20Fraction%20in%20Java.html","/posts/baeldung/Archive/Extracting%20Text%20Between%20Parentheses%20in%20Java.html","/posts/baeldung/Archive/How%20to%20Convert%20org.w3c.dom.Document%20to%20String%20in%20Java.html","/posts/baeldung/Archive/OpenAI%20API%20Client%20in%20Java.html","/posts/baeldung/Archive/Reading%20CSV%20Headers%20Into%20a%20List.html","/posts/baeldung/Archive/Replacing%20Strings%20in%20Java%20Using%20Regex_%20Back%20Reference%20vs.%20Lookaround.html","/posts/baeldung/Archive/Using%20Comparator.nullsLast()%20to%20Avoid%20NullPointerException%20When%20Sorting.html","/posts/baeldung/2024-07-24/2024-07-24-Remove%20HTML%20Tags%20Using%20Java.html","/posts/baeldung/2024-06-22/2024-06-22-Simple%20Web%20Server%20in%20Java%2018.html","/posts/baeldung/Archive/Install%20Java%20on%20macOS.html","/posts/baeldung/2024-07-01/2024-07-01-Generate%20Models%20Using%20OpenAPI%20With%20Lombok%20Annotations.html","/posts/baeldung/2024-06-28/2024-06-28-How%20to%20Document%20Generic%20Type%20Parameters%20in%20Javadoc.html","/posts/baeldung/2024-06-28/2024-06-28-How%20to%20Reuse%20Testcontainers%20in%20Java.html","/posts/baeldung/2024-06-28/2024-06-28-Implement%20Connect%204%20Game%20with%20Java.html","/posts/baeldung/Archive/Resolving%20Security%20Exception%20%20java.security.UnrecoverableKeyException%20%20Cannot%20Recover%20Key.html","/posts/baeldung/2024-06-29/2024-06-29-Rotate%20Arrays%20in%20Java.html","/posts/baeldung/Archive/2024-06-19-New%20Features%20in%20Java%2021.html","/posts/baeldung/2024-06-29/2024-06-29-Skipping%20the%20First%20Iteration%20in%20Java.html","/posts/baeldung/2024-06-30/2024-06-30-Constructing%20Java%20Objects%20From%20Only%20the%20Class%20Name.html","/posts/baeldung/2024-06-30/2024-06-30-Expand%20Columns%20with%20Apache%20POI.html","/posts/baeldung/2024-06-30/2024-06-30-Maven%20Multi%20Module%20Project%20Coverage%20With%20Jacoco.html","/posts/baeldung/2024-06-30/2024-06-30-Sequenced%20Collections%20in%20Java%2021.html","/posts/baeldung/2024-06-30/2024-06-30-What%20Is%20a%20TLAB%20or%20Thread%20Local%20Allocation%20Buffer%20in%20Java%20.html","/posts/baeldung/2024-06-30/2024-06-30-When%20to%20Call%20System.out.flush%20%20%20in%20Java%20.html","/posts/baeldung/2024-07-01/2024-07-01-Set%20a%20Parameter%20in%20an%20HttpServletRequest%20in%20Java.html","/posts/baeldung/2024-07-01/2024-07-01-Creating%20a%20Magic%20Square%20in%20Java.html","/posts/baeldung/2024-07-01/2024-07-01-Calculating%20the%20Sum%20of%20Two%20Arrays%20in%20Java.html","/posts/baeldung/2024-07-01/2024-07-01-Lock%20Header%20Rows%20With%20Apache%20POI.html","/posts/baeldung/2024-07-01/2024-07-01-bootstrap%20server%20in%20Kafka%20Configuration.html","/posts/baeldung/2024-07-03/2024-07-03-CompletableFuture%20and%20ThreadPool%20in%20Java.html","/posts/baeldung/2024-07-03/2024-07-03-Parallelize%20for%20Loop%20in%20Java.html","/posts/baeldung/2024-07-02/2024-07-02-Fail%20Maven%20Build%20if%20JUnit%20Coverage%20Falls%20Below%20Certain%20Threshold.html","/posts/baeldung/2024-07-04/2024-07-04-How%20to%20Display%20a%20Full%20HTTP%20Response%20Body%20With%20Gatling.html","/posts/baeldung/2024-07-28/2024-07-28-What%20Does%20Mono.defer%20%20%20Do%20.html","/posts/baeldung/2024-07-04/2024-07-04-Lossy%20and%20Lossless%20Image%20Compression%20Using%20Java.html","/posts/baeldung/2024-07-04/2024-07-04-Generating%20WSDL%20Stubs%20With%20Gradle.html","/posts/baeldung/2024-07-04/2024-07-04-Listing%20All%20AWS%20S3%20Objects%20in%20a%20Bucket%20Using%20Java.html","/posts/baeldung/2024-07-04/2024-07-04-Replacing%20Variables%20in%20a%20Document%20Template%20with%20Java.html","/posts/baeldung/2024-07-04/2024-07-04-Returning%20a%20Value%20After%20Finishing%20Thread%20s%20Job%20in%20Java.html","/posts/baeldung/2024-07-04/2024-07-04-Fix%20%20Command%20Line%20is%20Too%20Long%20%20in%20IntelliJ.html","/posts/baeldung/2024-07-05/2024-07-05-Generating%20Javadoc%20With%20Gradle.html","/posts/baeldung/2024-07-06/2024-07-06-Is%20CompletableFuture%20Non%20blocking%20.html","/posts/baeldung/2024-07-06/2024-07-06-Working%20with%20Virtual%20Threads%20in%20Spring%206.html","/posts/baeldung/2024-07-04/2024-07-04-Mock%20a%20URL%20Connection%20in%20Java.html","/posts/baeldung/2024-07-10/2024-07-10-Convert%20an%20ArrayList%20of%20Object%20to%20an%20ArrayList%20of%20String%20Elements.html","/posts/baeldung/2024-07-10/2024-07-10-Stream%20to%20Iterable%20in%20Java.html","/posts/baeldung/2024-07-11/2024-07-11-Reversing%20a%20Stack%20in%20Java.html","/posts/baeldung/2024-07-12/2024-07-12-Find%20the%20First%20Non%20Repeating%20Character%20in%20a%20String%20in%20Java.html","/posts/baeldung/2024-07-09/2024-07-09-Cassandra%20%20%20Object%20Mapping%20with%20DataStax%20Java%20Driver.html","/posts/baeldung/2024-06-29/2024-06-29-String%20Templates%20in%20Java%2021.html","/posts/baeldung/2024-07-15/2024-07-15-What%20Is%20%20Locked%20Ownable%20Synchronizers%20%20in%20Thread%20Dump%20.html","/posts/baeldung/2024-07-08/2024-07-08-Introduction%20to%20QuestDB.html","/posts/baeldung/2024-07-08/2024-07-08-Maven%20Reactor.html","/posts/baeldung/2024-07-08/2024-07-08-Pipeline%20Design%20Pattern%20in%20Java.html","/posts/baeldung/2024-07-09/2024-07-09-Introduction%20to%20Roaring%20Bitmap.html","/posts/baeldung/2024-07-09/2024-07-09-Jakarta%20EE%2010.html","/posts/baeldung/2024-07-10/2024-07-10-Structured%20Concurrency%20in%20Java%2019.html","/posts/baeldung/2024-07-10/2024-07-10-Compiling%20and%20Executing%20Code%20From%20a%20String%20in%20Java.html","/posts/baeldung/2024-07-10/2024-07-10-Comparing%20Two%20JAR%20Files%20in%20Java.html","/posts/baeldung/2024-07-11/2024-07-11-Errors%20and%20Exceptions%20in%20Java.html","/posts/baeldung/2024-07-11/2024-07-11-Java%20Generics%20PECS%20%20%20Producer%20Extends%20Consumer%20Super.html","/posts/baeldung/2024-07-11/2024-07-11-Using%20Watermarks%20with%20iText%20in%20Java.html","/posts/baeldung/2024-07-10/2024-07-10-Kotlin%20when%20vs.%20Java%20switch%20Statement.html","/posts/baeldung/2024-07-11/2024-07-11-Choosing%20the%20Right%20Java%20Collection.html","/posts/baeldung/2024-07-12/2024-07-12-Inserting%20an%20Object%20in%20an%20ArrayList%20at%20a%20Specific%20Position.html","/posts/baeldung/2024-07-12/2024-07-12-JUnit%20%20%20Testing%20Methods%20That%20Call%20System.exit%20%20.html","/posts/baeldung/2024-07-12/2024-07-12-The%20Factory%20Design%20Pattern%20in%20Java.html","/posts/baeldung/2024-07-18/2024-07-18-Adding%20Parameters%20to%20Java%20HttpClient%20Requests.html","/posts/baeldung/2024-07-13/2024-07-13-Implementing%20Factory%20Pattern%20With%20Generics%20in%20Java.html","/posts/baeldung/2024-07-13/2024-07-13-Gravity%20Bead%20Sort%20in%20Java.html","/posts/baeldung/2024-07-13/2024-07-13-Coupling%20in%20Java.html","/posts/baeldung/2024-07-13/2024-07-13-Channels%20and%20Connections%20in%20RabbitMQ.html","/posts/baeldung/2024-07-13/2024-07-13-Editing%20Existing%20PDF%20Files%20in%20Java.html","/posts/baeldung/2024-07-13/2024-07-13-Guide%20to%20Simple%20Binary%20Encoding.html","/posts/baeldung/2024-07-13/2024-07-13-Send%20Array%20as%20Part%20of%20x%20www%20form%20urlencoded%20Using%20Postman.html","/posts/baeldung/2024-07-14/2024-07-14-Static%20Fields%20and%20Garbage%20Collection.html","/posts/baeldung/2024-07-16/2024-07-16-How%20To%20Find%20Maven%20Dependencies.html","/posts/baeldung/2024-07-16/2024-07-16-Java%208%20Streams%20%20Multiple%20Filters%20vs.%20Complex%20Condition.html","/posts/baeldung/2024-07-17/2024-07-17-Use%20Cases%20for%20Static%20Methods%20in%20Java.html","/posts/baeldung/2024-06-27/2024-06-27-A%20Guide%20to%20OpenRewrite.html","/posts/baeldung/2024-07-21/2024-07-21-What%20Is%20an%20Apache%20Maven%20Artifact%20.html","/posts/baeldung/2024-07-17/2024-07-17-Introduction%20to%20Lightrun%20with%20Java.html","/posts/baeldung/2024-07-17/2024-07-17-Unit%20Test%20Private%20Methods%20in%20Java.html","/posts/baeldung/2024-07-18/2024-07-18-Java%20%20int%20char%20Cannot%20Be%20Dereferenced%20%20Error.html","/posts/baeldung/2024-07-23/2024-07-23-Why%20Maven%20Uses%20a%20Different%20JDK.html","/posts/baeldung/2024-07-27/2024-07-27-Default%20Values%20for%20Maven%20Properties.html","/posts/baeldung/2024-07-18/2024-07-18-Find%20Files%20That%20Match%20Wildcard%20Strings%20in%20Java.html","/posts/baeldung/2024-07-18/2024-07-18-What%20Is%20the%20JDK%20com.sun.proxy.%20Proxy%20Class%20.html","/posts/baeldung/2024-07-19/2024-07-19-Serialize%20a%20Lambda%20in%20Java.html","/posts/baeldung/2024-07-19/2024-07-19-Swap%20Two%20Variables%20in%20Java.html","/posts/baeldung/2024-07-28/2024-07-28-Converting%20Camel%20Case%20and%20Title%20Case%20to%20Words%20in%20Java.html","/posts/baeldung/2024-07-25/2024-07-25-Guide%20to%20Using%20ModelMapper.html","/posts/baeldung/2024-07-20/2024-07-20-Subtract%20Days%20from%20a%20Date%20in%20Java.html","/posts/baeldung/2024-06-28/2024-06-28-How%20to%20Mock%20Environment%20Variables%20in%20Unit%20Tests.html","/posts/baeldung/2024-07-24/2024-07-24-New%20Features%20in%20Java%2017.html","/posts/baeldung/2024-07-02/2024-07-02-How%20to%20Get%20the%20Start%20and%20End%20Dates%20of%20a%20Year%20Using%20Java.html","/posts/baeldung/2024-07-19/2024-07-19-Return%20Map%20from%20GraphQL.html","/posts/baeldung/2024-07-03/2024-07-03-Split%20a%20String%20Into%20Digit%20and%20Non%20Digit%20Substrings.html","/posts/baeldung/2024-07-20/2024-07-20-Java%20Error%20%20variable%20might%20not%20have%20been%20initialized%20.html","/posts/baeldung/2024-06-27/2024-06-27-Compare%20StringBuilder%20Objects%20in%20Java.html","/posts/baeldung/2024-06-27/2024-06-27-Finding%20the%20N%20th%20Occurrence%20of%20a%20Substring%20in%20a%20String%20in%20Java.html","/posts/baeldung/2024-06-27/2024-06-27-Modifying%20Objects%20Within%20Stream%20While%20Iterating.html","/posts/baeldung/2024-06-27/2024-06-27-Round%20the%20Date%20in%20Java.html","/posts/baeldung/2024-06-27/2024-06-27-Time%20Conversions%20Using%20TimeUnit.html","/posts/baeldung/2024-06-28/2024-06-28-Arrays%20mismatch%20%20%20Method%20in%20Java.html","/posts/baeldung/2024-06-28/2024-06-28-Check%20if%20a%20String%20Contains%20Only%20Unicode%20Letters.html","/posts/baeldung/2024-06-28/2024-06-28-Convert%20From%20List%20of%20CompletableFuture%20to%20CompletableFuture%20List.html","/posts/baeldung/2024-06-28/2024-06-28-Convert%20String%20Containing%20XML%20to%20org.w3c.dom.Document.html","/posts/baeldung/2024-06-28/2024-06-28-Difference%20Between%20%20final%20static%20%20and%20%20static%20final%20.html","/posts/baeldung/2024-06-28/2024-06-28-Drawbacks%20of%20the%20Singleton%20Design%20Pattern.html","/posts/baeldung/2024-06-28/2024-06-28-How%20To%20Manage%20Timeout%20for%20CompletableFuture.html","/posts/baeldung/2024-06-28/2024-06-28-How%20to%20Center%20Text%20Output%20in%20Java.html","/posts/baeldung/2024-06-28/2024-06-28-How%20to%20Iterate%20Over%20the%20String%20Characters%20in%20Java.html","/posts/baeldung/2024-06-28/2024-06-28-Intro%20to%20Vector%20Class%20in%20Java.html","/posts/baeldung/2024-06-28/2024-06-28-Passing%20Strings%20by%20Reference%20in%20Java.html","/posts/baeldung/2024-06-28/2024-06-28-PrintWriter%20vs.%20FileWriter%20in%20Java.html","/posts/baeldung/2024-06-28/2024-06-28-Remove%20Elements%20From%20a%20Queue%20Using%20Loop.html","/posts/baeldung/2024-06-28/2024-06-28-Retry%20Logic%20with%20CompletableFuture.html","/posts/baeldung/2024-06-28/2024-06-28-Split%20Java%20String%20Into%20Key%20Value%20Pairs.html","/posts/baeldung/2024-06-28/2024-06-28-Taking%20Every%20N%20th%20Element%20from%20Finite%20and%20Infinite%20Streams%20in%20Java.html","/posts/baeldung/2024-06-28/2024-06-28-Why%20wait%20%20%20Requires%20Synchronization%20.html","/posts/baeldung/2024-06-29/2024-06-29-Check%20if%20a%20List%20Contains%20a%20String%20Element%20While%20Ignoring%20Case.html","/posts/baeldung/2024-06-29/2024-06-29-Convert%20a%20String%20with%20Unicode%20Encoding%20to%20a%20String%20of%20Letters.html","/posts/baeldung/2024-06-29/2024-06-29-Converting%20HashMap%20Values%20to%20an%20ArrayList%20in%20Java.html","/posts/baeldung/2024-06-29/2024-06-29-Deprecate%20Finalization%20in%20Java%2018.html","/posts/baeldung/2024-06-29/2024-06-29-Difference%20Between%20Information%20Hiding%20and%20Encapsulation.html","/posts/baeldung/2024-06-29/2024-06-29-Difference%20Between%20putIfAbsent%20%20%20and%20computeIfAbsent%20%20%20in%20Java%20s%20Map.html","/posts/baeldung/2024-06-29/2024-06-29-Get%20All%20Record%20Fields%20and%20Its%20Values%20via%20Reflection.html","/posts/baeldung/2024-06-29/2024-06-29-Get%20File%20Extension%20From%20MIME%20Type%20in%20Java.html","/posts/baeldung/2024-06-29/2024-06-29-How%20to%20Convert%20Double%20to%20Float%20in%20Java.html","/posts/baeldung/2024-06-29/2024-06-29-How%20to%20Detect%20the%20Username%20Using%20Java.html","/posts/baeldung/2024-06-29/2024-06-29-How%20to%20Subscribe%20a%20Kafka%20Consumer%20to%20Multiple%20Topics.html","/posts/baeldung/2024-06-29/2024-06-29-Is%20Java%20Reflection%20Bad%20Practice%20.html","/posts/baeldung/2024-06-29/2024-06-29-Joining%20a%20List%20String%20%20in%20Java%20With%20Commas%20and%20%20and%20.html","/posts/baeldung/2024-06-29/2024-06-29-Partition%20a%20Stream%20in%20Java.html","/posts/baeldung/2024-06-29/2024-06-29-Testing%20Interface%20Contract%20in%20Java.html","/posts/baeldung/2024-06-29/2024-06-29-Truncate%20a%20Double%20to%20Two%20Decimal%20Places%20in%20Java.html","/posts/baeldung/2024-06-29/2024-06-29-Using%20the%20Apache%20Commons%20Lang%203%20for%20Comparing%20Objects%20in%20Java.html","/posts/baeldung/2024-06-30/2024-06-30-Add%20Minutes%20to%20a%20Time%20String%20in%20Java.html","/posts/baeldung/2024-06-30/2024-06-30-CATALINA%20OPTS%20vs.%20JAVA%20OPTS%20in%20Apache%20Tomcat.html","/posts/baeldung/2024-06-30/2024-06-30-Check%20if%20Letter%20Is%20Emoji%20With%20Java.html","/posts/baeldung/2024-06-30/2024-06-30-Closing%20Java%20IO%20Streams.html","/posts/baeldung/2024-06-30/2024-06-30-Create%20List%20of%20Object%20From%20Another%20Type%20Using%20Java%208.html","/posts/baeldung/2024-06-30/2024-06-30-Creating%20Stream%20of%20Regex%20Matches.html","/posts/baeldung/2024-06-30/2024-06-30-Detect%20EOF%20in%20Java.html","/posts/baeldung/2024-06-30/2024-06-30-Detect%20Security%20Vulnerabilities%20with%20Snyk.html","/posts/baeldung/2024-06-30/2024-06-30-Difference%20Between%20Hashtable%20and%20ConcurrentHashMap%20in%20Java.html","/posts/baeldung/2024-06-30/2024-06-30-Extract%20CN%20From%20X509%20Certificate%20in%20Java.html","/posts/baeldung/2024-06-30/2024-06-30-Find%20the%20Middle%20Element%20of%20an%20Array%20in%20Java.html","/posts/baeldung/2024-06-30/2024-06-30-How%20to%20Get%20Index%20of%20an%20Item%20in%20Java%20Set.html","/posts/baeldung/2024-06-30/2024-06-30-How%20to%20Mock%20Constructors%20for%20Unit%20Testing%20using%20Mockito.html","/posts/baeldung/2024-06-30/2024-06-30-How%20to%20Replace%20Deprecated%20jdbcTemplate.queryForObject%20and%20jdbcTemplate.query%20in%20Spring%20Boot%202.4.X%20and%20above.html","/posts/baeldung/2024-06-30/2024-06-30-How%20to%20Split%20an%20Integer%20Number%20Into%20Digits%20in%20Java.html","/posts/baeldung/2024-06-30/2024-06-30-How%20to%20Use%20Conditional%20Mapping%20With%20MapStruct.html","/posts/baeldung/2024-06-30/2024-06-30-Intro%20to%20Gradle%20Lint%20Plugin.html","/posts/baeldung/2024-06-30/2024-06-30-JSON%20File%20Data%20Into%20Kafka%20Topic.html","/posts/baeldung/2024-06-30/2024-06-30-Java%20Double%20vs.%20BigDecimal.html","/posts/baeldung/2024-06-30/2024-06-30-Overview%20of%20Mockito%20MockedConstruction.html","/posts/baeldung/2024-06-30/2024-06-30-Replacing%20Single%20Quote%20with%20%20%20%20in%20Java%20String.html","/posts/baeldung/2024-06-30/2024-06-30-Streams%20vs.%20Loops%20in%20Java.html","/posts/baeldung/2024-06-30/2024-06-30-Test%20Main%20Method%20with%20JUnit.html","/posts/baeldung/2024-06-30/2024-06-30-Value%20Based%20Classes%20in%20Java.html","/posts/baeldung/2024-07-01/2024-07-01-Aggregate%20Runtime%20Exceptions%20in%20Java%20Streams.html","/posts/baeldung/2024-07-01/2024-07-01-Clamp%20Function%20in%20Java.html","/posts/baeldung/2024-07-01/2024-07-01-Conversion%20From%2012%20Hour%20Time%20to%2024%20Hour%20Time%20in%20Java.html","/posts/baeldung/2024-07-01/2024-07-01-Convert%20Between%20Java%20LocalDate%20and%20Epoch.html","/posts/baeldung/2024-07-01/2024-07-01-Convert%20Epoch%20Time%20to%20LocalDate%20and%20LocalDateTime.html","/posts/baeldung/2024-07-01/2024-07-01-Convert%20List%20to%20Long%20%20%20Array%20in%20Java.html","/posts/baeldung/2024-07-01/2024-07-01-Convert%20an%20ArrayList%20of%20String%20to%20a%20String%20Array%20in%20Java.html","/posts/baeldung/2024-07-01/2024-07-01-Convert%20int%20to%20Long%20in%20Java.html","/posts/baeldung/2024-07-01/2024-07-01-Executing%20SQL%20Script%20File%20in%20Java.html","/posts/baeldung/2024-07-01/2024-07-01-Extract%20Text%20Between%20Square%20Brackets.html","/posts/baeldung/2024-07-01/2024-07-01-Format%20Multiple%20%20or%20%20Conditions%20in%20an%20If%20Statement%20in%20Java.html","/posts/baeldung/2024-07-01/2024-07-01-Get%20the%20First%20n%20Elements%20of%20a%20List%20Into%20an%20Array.html","/posts/baeldung/2024-07-01/2024-07-01-Get%20the%20Indexes%20of%20Regex%20Pattern%20Matches%20in%20Java.html","/posts/baeldung/2024-07-01/2024-07-01-HashMap%20with%20Multiple%20Values%20for%20the%20Same%20Key.html","/posts/baeldung/2024-07-01/2024-07-01-How%20to%20Check%20if%20a%20Value%20Exists%20in%20a%20JSON%20Array%20for%20a%20Particular%20Key.html","/posts/baeldung/2024-07-01/2024-07-01-Inner%20Classes%20vs.%20Subclasses%20in%20Java.html","/posts/baeldung/2024-07-01/2024-07-01-Reading%20JSON%20Documents%20as%20Maps%20and%20Comparing%20Them.html","/posts/baeldung/2024-07-01/2024-07-01-Sorting%20Java%20Map%20in%20Descending%20Order.html","/posts/baeldung/2024-07-01/2024-07-01-Stop%20Executing%20Further%20Code%20in%20Java.html","/posts/baeldung/2024-07-01/2024-07-01-Update%20an%20Existing%20Amazon%20S3%20Object%20Using%20Java.html","/posts/baeldung/2024-07-01/2024-07-01-What%20Does%20%20%20%20%20%20%20Mean%20in%20Java%20.html","/posts/baeldung/2024-07-01/2024-07-01-Why%20There%20Is%20No%20Sorted%20List%20in%20Java%20.html","/posts/baeldung/2024-07-02/2024-07-02-A%20Guide%20to%20ShardingSphere.html","/posts/baeldung/2024-07-02/2024-07-02-Check%20if%20a%20String%20Has%20All%20Unique%20Characters%20in%20Java.html","/posts/baeldung/2024-07-02/2024-07-02-CompletableFuture%20allOf%20%20.join%20%20%20vs.%20CompletableFuture.join%20%20.html","/posts/baeldung/2024-07-02/2024-07-02-Converting%20JsonNode%20Object%20to%20Map.html","/posts/baeldung/2024-07-02/2024-07-02-Converting%20Relative%20to%20Absolute%20Paths%20in%20Java.html","/posts/baeldung/2024-07-02/2024-07-02-Converting%20String%20or%20String%20Array%20to%20Map%20in%20Java.html","/posts/baeldung/2024-07-02/2024-07-02-Converting%20an%20int%20%20%20to%20HashSet%20in%20Java.html","/posts/baeldung/2024-07-02/2024-07-02-Custom%20DLL%20Load%20%20%20Fixing%20the%20%20java.lang.UnsatisfiedLinkError%20%20Error.html","/posts/baeldung/2024-07-02/2024-07-02-Difference%20Between%20Future%20%20CompletableFuture%20%20and%20Rxjava%20s%20Observable.html","/posts/baeldung/2024-07-02/2024-07-02-Difference%20between%20Gson%20%20Expose%20and%20%20SerializedName.html","/posts/baeldung/2024-07-02/2024-07-02-Guide%20to%20the%20yield%20Keyword%20in%20Java.html","/posts/baeldung/2024-07-02/2024-07-02-How%20to%20Get%20First%20Item%20From%20a%20Java%20Set.html","/posts/baeldung/2024-07-02/2024-07-02-How%20to%20Get%20Notified%20When%20a%20Task%20Completes%20in%20Java%20Executors.html","/posts/baeldung/2024-07-02/2024-07-02-Metadata%20GC%20Threshold%20in%20Java.html","/posts/baeldung/2024-07-02/2024-07-02-Performance%20Comparison%20Between%20Different%20Java%20String%20Concatenation%20Methods.html","/posts/baeldung/2024-07-02/2024-07-02-Remove%20Duplicate%20Values%20From%20HashMap%20in%20Java.html","/posts/baeldung/2024-07-02/2024-07-02-Remove%20Whitespaces%20From%20a%20JSON%20in%20Java.html","/posts/baeldung/2024-07-02/2024-07-02-Stateless%20Object%20in%20Java.html","/posts/baeldung/2024-07-02/2024-07-02-Understanding%20the%20java.net.SocketException%20Broken%20Pipe%20Error.html","/posts/baeldung/2024-07-02/2024-07-02-Unit%20Testing%20of%20System.in%20With%20JUnit.html","/posts/baeldung/2024-07-02/2024-07-02-What%20Does%20the%20Holder%20T%20%20Class%20Do%20in%20Java%20.html","/posts/baeldung/2024-07-02/2024-07-02-What%20s%20the%20Difference%20Between%20Iterator%20and%20ListIterator%20.html","/posts/baeldung/2024-07-03/2024-07-03-Check%20if%20a%20File%20Is%20Empty%20in%20Java.html","/posts/baeldung/2024-07-03/2024-07-03-Check%20if%20a%20String%20Contains%20Non%20Alphanumeric%20Characters.html","/posts/baeldung/2024-07-03/2024-07-03-Convert%20One%20Enum%20to%20Another%20Enum%20in%20Java.html","/posts/baeldung/2024-07-03/2024-07-03-Difference%20Between%20Boolean.TRUE%20and%20true%20in%20Java.html","/posts/baeldung/2024-07-03/2024-07-03-Difference%20Between%20Instant%20and%20LocalDateTime.html","/posts/baeldung/2024-07-03/2024-07-03-Does%20Java%20Read%20Integers%20in%20Little%20Endian%20or%20Big%20Endian%20.html","/posts/baeldung/2024-07-03/2024-07-03-Get%20Partition%20Count%20for%20a%20Topic%20in%20Kafka.html","/posts/baeldung/2024-07-03/2024-07-03-Getting%20Yesterday%20s%20Date%20in%20Java.html","/posts/baeldung/2024-07-03/2024-07-03-How%20to%20Deep%20Copy%20an%20ArrayList%20in%20Java.html","/posts/baeldung/2024-07-03/2024-07-03-How%20to%20Read%20Zip%20Files%20Entries%20With%20Java.html","/posts/baeldung/2024-07-03/2024-07-03-Integer.class%20vs%20Integer.TYPE%20vs%20int.class.html","/posts/baeldung/2024-07-03/2024-07-03-Introduction%20to%20JeroMQ.html","/posts/baeldung/2024-07-03/2024-07-03-JAXP%20vs%20JAXB%20%20XML%20Processing%20APIs%20Compared.html","/posts/baeldung/2024-07-03/2024-07-03-Removing%20JSON%20Elements%20With%20Jackson.html","/posts/baeldung/2024-07-03/2024-07-03-Setting%20Default%20Values%20to%20Null%20Fields%20in%20Jackson%20Mapping.html","/posts/baeldung/2024-07-03/2024-07-03-Smart%20Batching%20in%20Java.html","/posts/baeldung/2024-07-03/2024-07-03-What%20Is%20the%20Maximum%20Depth%20of%20the%20Java%20Call%20Stack%20.html","/posts/baeldung/2024-07-04/2024-07-04-%20JsonMerge%20Annotation%20in%20Jackson.html","/posts/baeldung/2024-07-04/2024-07-04-Asserting%20Equality%20on%20Two%20Classes%20Without%20an%20equals%20%20%20Method.html","/posts/baeldung/2024-07-04/2024-07-04-Check%20if%20a%20String%20Is%20All%20Uppercase%20or%20Lowercase%20in%20Java.html","/posts/baeldung/2024-07-04/2024-07-04-Converting%20Map%20String%20%20Object%20%20to%20Map%20String%20%20String%20%20in%20Java.html","/posts/baeldung/2024-07-04/2024-07-04-Converting%20Object%20To%20Map%20in%20Java.html","/posts/baeldung/2024-07-04/2024-07-04-Get%20Unique%20Values%20From%20an%20ArrayList%20in%20Java.html","/posts/baeldung/2024-07-04/2024-07-04-Gray%20Box%20Testing%20Using%20the%20OAT%20Technique.html","/posts/baeldung/2024-07-04/2024-07-04-Is%20a%20Key%20Required%20as%20Part%20of%20Sending%20Messages%20to%20Kafka%20.html","/posts/baeldung/2024-07-04/2024-07-04-Java%20IllegalStateException%20%20%20getInputStream%20%20%20has%20already%20been%20called%20for%20this%20request%20.html","/posts/baeldung/2024-07-04/2024-07-04-Mocking%20Private%20Fields%20With%20Mockito.html","/posts/baeldung/2024-07-04/2024-07-04-Read%20Data%20From%20the%20Beginning%20Using%20Kafka%20Consumer%20API.html","/posts/baeldung/2024-07-04/2024-07-04-Read%20Date%20in%20Java%20Using%20Scanner.html","/posts/baeldung/2024-07-04/2024-07-04-Sort%20Date%20Strings%20in%20Java.html","/posts/baeldung/2024-07-04/2024-07-04-The%20Difference%20Between%20findById%20and%20getById%20in%20Spring%20Data.html","/posts/baeldung/2024-07-04/2024-07-04-Throw%20Exception%20for%20Unexpected%20Input%20for%20Enum%20With%20MapStruct.html","/posts/baeldung/2024-07-05/2024-07-05-Convert%20String%20to%20Int%20Using%20Encapsulation.html","/posts/baeldung/2024-07-05/2024-07-05-Convert%20an%20OutputStream%20to%20an%20InputStream.html","/posts/baeldung/2024-07-05/2024-07-05-Creating%20Custom%20Iterator%20in%20Java.html","/posts/baeldung/2024-07-05/2024-07-05-Difference%20Between%20null%20and%20Empty%20String%20in%20Java.html","/posts/baeldung/2024-07-05/2024-07-05-Execute%20a%20Method%20Only%20Once%20in%20Java.html","/posts/baeldung/2024-07-05/2024-07-05-Get%20Last%20N%20Messages%20in%20Apache%20Kafka%20Topic.html","/posts/baeldung/2024-07-05/2024-07-05-Handle%20NoSuchElementException%20When%20Reading%20a%20File%20Through%20Scanner.html","/posts/baeldung/2024-07-05/2024-07-05-Hashing%20With%20Argon2%20in%20Java.html","/posts/baeldung/2024-07-05/2024-07-05-How%20to%20Take%20Input%20as%20String%20With%20Spaces%20in%20Java%20Using%20Scanner%20.html","/posts/baeldung/2024-07-05/2024-07-05-Object.toString%20%20%20vs%20String.valueOf%20%20.html","/posts/baeldung/2024-07-05/2024-07-05-Opening%20a%20New%20Tab%20Using%20Selenium%20WebDriver%20in%20Java.html","/posts/baeldung/2024-07-05/2024-07-05-Regular%20Expression%20%20%20z%20vs%20%20Z%20Anchors%20in%20Java.html","/posts/baeldung/2024-07-05/2024-07-05-Should%20We%20Create%20an%20Interface%20for%20Only%20One%20Implementation%20.html","/posts/baeldung/2024-07-05/2024-07-05-Working%20With%20Empty%20Stream%20in%20Java.html","/posts/baeldung/2024-07-06/2024-07-06-Add%20Custom%20Headers%20to%20a%20Kafka%20Message.html","/posts/baeldung/2024-07-06/2024-07-06-Automatically%20Create%20Schemas%20for%20H2%20In%20Memory%20Database.html","/posts/baeldung/2024-07-06/2024-07-06-Converting%20an%20AAR%20File%20to%20a%20JAR%20File.html","/posts/baeldung/2024-07-06/2024-07-06-Creating%20a%20Test%20Suite%20With%20JUnit.html","/posts/baeldung/2024-07-06/2024-07-06-Find%20the%20Longest%20Word%20in%20a%20Given%20String%20in%20Java.html","/posts/baeldung/2024-07-06/2024-07-06-Getting%20the%20Text%20That%20Follows%20After%20the%20Regex%20Match%20in%20Java.html","/posts/baeldung/2024-07-06/2024-07-06-Integer.parseInt%20scanner.nextLine%20%20%20%20and%20scanner.nextInt%20%20%20in%20Java.html","/posts/baeldung/2024-07-06/2024-07-06-JAVA%20HOME%20vs%20PATH%20Environment%20Variables.html","/posts/baeldung/2024-07-06/2024-07-06-Lombok%20EqualsAndHashCode%20Annotation.html","/posts/baeldung/2024-07-06/2024-07-06-Overriding%20hashCode%20%20%20And%20equals%20%20%20For%20Records.html","/posts/baeldung/2024-07-06/2024-07-06-Overview%20of%20NLP%20Libraries%20in%20Java.html","/posts/baeldung/2024-07-06/2024-07-06-Print%20%20%20%20Quotes%20Around%20a%20String%20in%20Java.html","/posts/baeldung/2024-07-06/2024-07-06-Self%20Injection%20With%20Spring.html","/posts/baeldung/2024-07-06/2024-07-06-URL%20Query%20Manipulation%20in%20Java.html","/posts/baeldung/2024-07-06/2024-07-06-Uploading%20File%20Using%20Selenium%20Webdriver%20in%20Java.html","/posts/baeldung/2024-07-07/2024-07-07-A%20Guide%20to%20%20Timeout%20Annotation%20in%20JUnit%205.html","/posts/baeldung/2024-07-07/2024-07-07-Buffer%20Overflows%20in%20Java.html","/posts/baeldung/2024-07-07/2024-07-07-Convert%20Boolean%20to%20String%20in%20Java.html","/posts/baeldung/2024-07-07/2024-07-07-Deserialize%20Generic%20Type%20with%20Jackson.html","/posts/baeldung/2024-07-07/2024-07-07-Differences%20Between%20Classpath%20and%20Sourcepath.html","/posts/baeldung/2024-07-07/2024-07-07-Fix%20the%20JsonMappingException%20%20Can%20not%20deserialize%20instance%20of%20java.util.ArrayList%20from%20Object%20value%20%20token%20%20JsonToken.START%20OBJECT%20%20.html","/posts/baeldung/2024-07-07/2024-07-07-Generate%20the%20Same%20UUID%20From%20a%20String%20in%20Java.html","/posts/baeldung/2024-07-07/2024-07-07-How%20to%20Determine%20Date%20of%20the%20First%20Day%20of%20the%20Week%20Using%20LocalDate%20in%20Java.html","/posts/baeldung/2024-07-07/2024-07-07-Java%20Helper%20vs.%20Utility%20Classes.html","/posts/baeldung/2024-07-07/2024-07-07-OffsetDateTime%20Serialization%20With%20Jackson.html","/posts/baeldung/2024-07-07/2024-07-07-Parsing%20Date%20Strings%20with%20Varying%20Formats.html","/posts/baeldung/2024-07-07/2024-07-07-Possible%20Root%20Causes%20for%20High%20CPU%20Usage%20in%20Java.html","/posts/baeldung/2024-07-07/2024-07-07-Retrying%20Requests%20using%20Apache%20HttpClient.html","/posts/baeldung/2024-07-07/2024-07-07-The%20Difference%20Between%20junit%20vintage%20engine%20and%20junit%20jupiter%20engine.html","/posts/baeldung/2024-07-08/2024-07-08-Convert%20a%20Number%20to%20a%20Letter%20in%20Java.html","/posts/baeldung/2024-07-08/2024-07-08-Custom%20Constructor%20in%20Java%20Records.html","/posts/baeldung/2024-07-08/2024-07-08-Difference%20Between%20Fluent%20Interface%20and%20Builder%20Pattern%20in%20Java.html","/posts/baeldung/2024-07-08/2024-07-08-Difference%20Between%20Javac%20and%20the%20Eclipse%20Compiler.html","/posts/baeldung/2024-07-08/2024-07-08-Different%20Ways%20to%20Create%20an%20Object%20in%20Java.html","/posts/baeldung/2024-07-08/2024-07-08-Download%20a%20Webpage%20in%20Java.html","/posts/baeldung/2024-07-08/2024-07-08-Implementing%20toString%20%20%20on%20enums%20in%20Java.html","/posts/baeldung/2024-07-08/2024-07-08-Moving%20Items%20Around%20in%20an%20Arraylist.html","/posts/baeldung/2024-07-08/2024-07-08-New%20CRUD%20Repository%20Interfaces%20in%20Spring%20Data%203.html","/posts/baeldung/2024-07-09/2024-07-09-Accessing%20Private%20Constructor%20in%20Java.html","/posts/baeldung/2024-07-09/2024-07-09-Check%20if%20Object%20Is%20an%20Array%20in%20Java.html","/posts/baeldung/2024-07-09/2024-07-09-Combining%20Two%20Lists%20Into%20a%20Map%20in%20Java.html","/posts/baeldung/2024-07-09/2024-07-09-Convert%20Hex%20to%20RGB%20Using%20Java.html","/posts/baeldung/2024-07-09/2024-07-09-Create%20Dynamic%20Queues%20in%20RabbitMQ.html","/posts/baeldung/2024-07-09/2024-07-09-Difference%20Between%20Class.forName%20%20%20and%20Class.forName%20%20.newInstance%20%20.html","/posts/baeldung/2024-07-09/2024-07-09-Finding%20All%20Duplicates%20in%20a%20List%20in%20Java.html","/posts/baeldung/2024-07-09/2024-07-09-Initialize%20an%20ArrayList%20with%20Zeroes%20or%20Null%20in%20Java.html","/posts/baeldung/2024-07-09/2024-07-09-Return%20Absolute%20Difference%20of%20Two%20Integers%20in%20Java.html","/posts/baeldung/2024-07-09/2024-07-09-Single%20Assert%20Call%20for%20Multiple%20Properties%20in%20Java%20Unit%20Testing.html","/posts/baeldung/2024-07-09/2024-07-09-Thread.sleep%20%20%20vs%20Awaitility.await%20%20.html","/posts/baeldung/2024-07-09/2024-07-09-Understanding%20the%20Difference%20Between%20Stream.of%20%20%20and%20IntStream.range%20%20.html","/posts/baeldung/2024-07-09/2024-07-09-Validating%20IPv4%20Address%20in%20Java.html","/posts/baeldung/2024-07-09/2024-07-09-VarArgs%20vs%20Array%20Input%20Parameters%20in%20Java.html","/posts/baeldung/2024-07-10/2024-07-10-Case%20Insensitive%20Searching%20in%20ArrayList.html","/posts/baeldung/2024-07-10/2024-07-10-Check%20If%20All%20the%20Variables%20of%20an%20Object%20Are%20Null.html","/posts/baeldung/2024-07-10/2024-07-10-Check%20if%20Command%20Line%20Arguments%20Are%20Null%20in%20Java.html","/posts/baeldung/2024-07-10/2024-07-10-Check%20if%20an%20Integer%20Value%20Is%20Null%20or%20Zero%20in%20Java.html","/posts/baeldung/2024-07-10/2024-07-10-Class%20Methods%20vs%20Instance%20Methods%20in%20Java.html","/posts/baeldung/2024-07-10/2024-07-10-Convert%20byte%20%20%20to%20MultipartFile%20in%20Java.html","/posts/baeldung/2024-07-10/2024-07-10-Converting%20a%20Number%20from%20One%20Base%20to%20Another%20in%20Java.html","/posts/baeldung/2024-07-10/2024-07-10-Converting%20a%20String%20Array%20Into%20an%20int%20Array%20in%20Java.html","/posts/baeldung/2024-07-10/2024-07-10-Java%20List%20Interface.html","/posts/baeldung/2024-07-10/2024-07-10-Lambda%20Expression%20vs.%20Anonymous%20Inner%20Class.html","/posts/baeldung/2024-07-10/2024-07-10-Monads%20in%20Java%20%20%20Optional.html","/posts/baeldung/2024-07-10/2024-07-10-Multiply%20a%20BigDecimal%20by%20an%20Integer%20in%20Java.html","/posts/baeldung/2024-07-10/2024-07-10-PrintStream%20vs%20PrintWriter%20in%20Java.html","/posts/baeldung/2024-07-10/2024-07-10-RESTful%20Microservices%20With%20RestExpress.html","/posts/baeldung/2024-07-10/2024-07-10-Storing%20Data%20Triple%20in%20a%20List%20in%20Java.html","/posts/baeldung/2024-07-10/2024-07-10-The%20JVM%20Run%20Time%20Data%20Areas.html","/posts/baeldung/2024-07-10/2024-07-10-Working%20With%20Multiple%20Repositories%20in%20Gradle.html","/posts/baeldung/2024-07-11/2024-07-11-Check%20JWT%20Expiry%20Without%20Throwing%20Exceptions.html","/posts/baeldung/2024-07-11/2024-07-11-Common%20Exceptions%20of%20Crypto%20APIs%20in%20Java.html","/posts/baeldung/2024-07-11/2024-07-11-Convert%20Anonymous%20Class%20into%20Lambda%20in%20Java.html","/posts/baeldung/2024-07-11/2024-07-11-Convert%20Between%20int%20and%20char%20in%20Java.html","/posts/baeldung/2024-07-11/2024-07-11-Extract%20Values%20using%20AssertJ%20in%20Java.html","/posts/baeldung/2024-07-11/2024-07-11-Functors%20in%20Java.html","/posts/baeldung/2024-07-11/2024-07-11-Getting%20Started%20with%20Blaze%20Persistence.html","/posts/baeldung/2024-07-11/2024-07-11-Getting%20a%20Value%20in%20JSONObject.html","/posts/baeldung/2024-07-11/2024-07-11-Guide%20to%20Java%20PriorityQueue.html","/posts/baeldung/2024-07-11/2024-07-11-Guide%20to%20Splitting%20a%20String%20by%20Whitespace%20in%20Java.html","/posts/baeldung/2024-07-11/2024-07-11-Handle%20Browser%20Tabs%20With%20Selenium.html","/posts/baeldung/2024-07-11/2024-07-11-Reading%20and%20Writing%20With%20a%20ConcurrentHashMap.html","/posts/baeldung/2024-07-11/2024-07-11-Reinitialize%20Singleton%20Bean%20in%20Spring%20Context.html","/posts/baeldung/2024-07-11/2024-07-11-Set%20the%20Date%20Format%20Using%20Apache%20POI.html","/posts/baeldung/2024-07-11/2024-07-11-Sorting%20a%20HashSet%20in%20Java.html","/posts/baeldung/2024-07-11/2024-07-11-String%20Interpolation%20in%20Java.html","/posts/baeldung/2024-07-11/2024-07-11-When%20to%20Use%20Callable%20and%20Supplier%20in%20Java.html","/posts/baeldung/2024-07-12/2024-07-12-Can%20a%20Java%20Application%20Use%20More%20Memory%20Than%20the%20Heap%20Size%20.html","/posts/baeldung/2024-07-12/2024-07-12-Convert%20String%20to%20Instant.html","/posts/baeldung/2024-07-12/2024-07-12-Convert%20java.util.Date%20to%20java.sql.Date.html","/posts/baeldung/2024-07-12/2024-07-12-Expression%20Types%20in%20Thymeleaf.html","/posts/baeldung/2024-07-12/2024-07-12-Filling%20a%20List%20With%20All%20Enum%20Values%20in%20Java.html","/posts/baeldung/2024-07-12/2024-07-12-Finding%20Max%20Date%20in%20List%20Using%20Streams.html","/posts/baeldung/2024-07-12/2024-07-12-Get%20Information%20About%20a%20PDF%20in%20Java.html","/posts/baeldung/2024-07-12/2024-07-12-Guide%20to%20Filters%20in%20MongoDB.html","/posts/baeldung/2024-07-12/2024-07-12-How%20to%20Insert%20a%20HashMap%20Into%20MongoDB%20With%20Java%20.html","/posts/baeldung/2024-07-12/2024-07-12-Jackson%20s%20Deserialization%20With%20Lombok.html","/posts/baeldung/2024-07-12/2024-07-12-Object%20Validation%20After%20Deserialization.html","/posts/baeldung/2024-07-12/2024-07-12-Slicing%20Arrays%20in%20Java.html","/posts/baeldung/2024-07-12/2024-07-12-Sort%20Collection%20of%20Objects%20by%20Multiple%20Fields%20in%20Java.html","/posts/baeldung/2024-07-12/2024-07-12-Strong%20%20Weak%20%20Soft%20%20and%20Phantom%20References%20in%20Java.html","/posts/baeldung/2024-07-12/2024-07-12-Thread%20vs.%20Single%20Thread%20Executor%20Service.html","/posts/baeldung/2024-07-12/2024-07-12-Uses%20for%20Optional%20in%20Java.html","/posts/baeldung/2024-07-12/2024-07-12-Working%20with%20Tabular%20Data%20Using%20Tablesaw.html","/posts/baeldung/2024-07-13/2024-07-13-Capitalize%20the%20First%20Letter%20of%20a%20String%20in%20Java.html","/posts/baeldung/2024-07-13/2024-07-13-Convert%20String%20to%20char%20in%20Java.html","/posts/baeldung/2024-07-13/2024-07-13-Dealing%20with%20%20java.lang.OutOfMemoryError%20%20PermGen%20space%20%20Error.html","/posts/baeldung/2024-07-13/2024-07-13-Difference%20Between%20Flux%20and%20Mono.html","/posts/baeldung/2024-07-13/2024-07-13-Difference%20Between%20Java%20Enumeration%20and%20Iterator.html","/posts/baeldung/2024-07-13/2024-07-13-Difference%20Between%20URI.create%20%20%20and%20new%20URI%20%20.html","/posts/baeldung/2024-07-13/2024-07-13-Fixing%20the%20%20java%20%20integer%20number%20too%20large%20%20Error.html","/posts/baeldung/2024-07-13/2024-07-13-How%20to%20Access%20the%20First%20Element%20of%20a%20Flux.html","/posts/baeldung/2024-07-13/2024-07-13-Infinity%20in%20Java.html","/posts/baeldung/2024-07-13/2024-07-13-Java%20Literals.html","/posts/baeldung/2024-07-13/2024-07-13-Port%20Scanning%20With%20Java.html","/posts/baeldung/2024-07-13/2024-07-13-Understanding%20java.lang.Thread.State%20%20WAITING%20%20parking%20.html","/posts/baeldung/2024-07-13/2024-07-13-Using%20Streams%20to%20Collect%20Into%20a%20TreeSet.html","/posts/baeldung/2024-07-13/2024-07-13-Validating%20URL%20in%20Java.html","/posts/baeldung/2024-07-14/2024-07-14-Convert%20a%20List%20to%20a%20Comma%20Separated%20String.html","/posts/baeldung/2024-07-14/2024-07-14-Convert%20between%20JSON%20and%20Protobuf.html","/posts/baeldung/2024-07-14/2024-07-14-Create%20Date%20From%20Unix%20Timestamp%20in%20Java.html","/posts/baeldung/2024-07-14/2024-07-14-Create%20a%20BMI%20Calculator%20in%20Java.html","/posts/baeldung/2024-07-14/2024-07-14-Creating%20Random%20Numbers%20With%20No%20Duplicates%20in%20Java.html","/posts/baeldung/2024-07-14/2024-07-14-Difference%20Between%20Class.getResource%20%20%20and%20ClassLoader.getResource%20%20.html","/posts/baeldung/2024-07-14/2024-07-14-Differences%20Between%20Paths.get%20and%20Path.of.html","/posts/baeldung/2024-07-14/2024-07-14-Generate%20the%20MD5%20Checksum%20for%20a%20File%20in%20Java.html","/posts/baeldung/2024-07-14/2024-07-14-Getting%20the%20Filename%20From%20a%20String%20Containing%20an%20Absolute%20File%20Path.html","/posts/baeldung/2024-07-14/2024-07-14-Guide%20to%20Find%20the%20Java%20.class%20Version.html","/posts/baeldung/2024-07-14/2024-07-14-Handle%20Classes%20With%20the%20Same%20Name%20in%20Java.html","/posts/baeldung/2024-07-14/2024-07-14-Java%20Program%20to%20Find%20the%20Roots%20of%20a%20Quadratic%20Equation.html","/posts/baeldung/2024-07-14/2024-07-14-Java%20Scanner%20Taking%20a%20Character%20Input.html","/posts/baeldung/2024-07-14/2024-07-14-String%20Concatenation%20in%20Java.html","/posts/baeldung/2024-07-14/2024-07-14-TriFunction%20Interface%20in%20Java.html","/posts/baeldung/2024-07-14/2024-07-14-What%20Is%20the%20null%20Type%20in%20Java%20.html","/posts/baeldung/2024-07-14/2024-07-14-Writing%20a%20List%20of%20Strings%20Into%20a%20Text%20File.html","/posts/baeldung/2024-07-15/2024-07-15-Algorithm%20to%20Identify%20and%20Validate%20a%20Credit%20Card%20Number.html","/posts/baeldung/2024-07-15/2024-07-15-Armstrong%20Numbers%20in%20Java.html","/posts/baeldung/2024-07-15/2024-07-15-Check%20if%20a%20Number%20Is%20Positive%20or%20Negative%20in%20Java.html","/posts/baeldung/2024-07-15/2024-07-15-Compare%20Characters%20in%20Java.html","/posts/baeldung/2024-07-15/2024-07-15-Difference%20Between%20Arrays.asList%20%20%20and%20List.of%20%20.html","/posts/baeldung/2024-07-15/2024-07-15-How%20to%20Parse%20an%20INI%20File%20in%20Java.html","/posts/baeldung/2024-07-15/2024-07-15-List%20All%20Factors%20of%20a%20Number%20in%20Java.html","/posts/baeldung/2024-07-15/2024-07-15-Make%20Division%20of%20Two%20Integers%20Result%20in%20a%20Float.html","/posts/baeldung/2024-07-15/2024-07-15-Reading%20JSON%20From%20a%20URL%20in%20Java.html","/posts/baeldung/2024-07-15/2024-07-15-Remove%20the%20Last%20Character%20of%20a%20Java%20StringBuilder.html","/posts/baeldung/2024-07-15/2024-07-15-Toggle%20a%20Boolean%20Variable%20in%20Java.html","/posts/baeldung/2024-07-16/2024-07-16-A%20Guide%20to%20Java%20Source%20and%20Target%20Options.html","/posts/baeldung/2024-07-16/2024-07-16-Get%20the%20Current%20Stack%20Trace%20in%20Java.html","/posts/baeldung/2024-07-16/2024-07-16-How%20to%20Check%20Whether%20an%20Integer%20Exists%20in%20a%20Range%20with%20Java.html","/posts/baeldung/2024-07-16/2024-07-16-Implementing%20a%20Map%20with%20Multiple%20Keys%20in%20Java.html","/posts/baeldung/2024-07-16/2024-07-16-Integer.toString%20%20%20vs%20String.valueOf%20%20%20in%20Java.html","/posts/baeldung/2024-07-16/2024-07-16-Named%20Placeholders%20in%20String%20Formatting.html","/posts/baeldung/2024-07-16/2024-07-16-Replace%20Element%20at%20a%20Specific%20Index%20in%20a%20Java%20ArrayList.html","/posts/baeldung/2024-07-16/2024-07-16-Scanning%20Java%20Annotations%20at%20Runtime.html","/posts/baeldung/2024-07-16/2024-07-16-Static%20vs.%20Instance%20Initializer%20Block%20in%20Java.html","/posts/baeldung/2024-07-16/2024-07-16-Volatile%20vs.%20Atomic%20Variables%20in%20Java.html","/posts/baeldung/2024-07-17/2024-07-17-Advantages%20and%20Disadvantages%20of%20Using%20Java%20Wildcard%20Imports.html","/posts/baeldung/2024-07-17/2024-07-17-Check%20if%20a%20Number%20Is%20Odd%20or%20Even%20in%20Java.html","/posts/baeldung/2024-07-17/2024-07-17-Check%20if%20at%20Least%20Two%20Out%20of%20Three%20Booleans%20Are%20True%20in%20Java.html","/posts/baeldung/2024-07-17/2024-07-17-Creating%20JAR%20Files%20Programmatically.html","/posts/baeldung/2024-07-17/2024-07-17-Difference%20Between%20Java%20SE%20EE%20ME.html","/posts/baeldung/2024-07-17/2024-07-17-Get%20the%20Full%20Path%20of%20a%20JAR%20File%20From%20a%20Class.html","/posts/baeldung/2024-07-17/2024-07-17-Guide%20to%20Creating%20Jar%20Executables%20and%20Windows%20Executables%20from%20Java.html","/posts/baeldung/2024-07-17/2024-07-17-Guide%20to%20Find%20in%20MongoDB.html","/posts/baeldung/2024-07-17/2024-07-17-How%20to%20Calculate%20%20Time%20Ago%20%20in%20Java.html","/posts/baeldung/2024-07-17/2024-07-17-How%20to%20Convert%20InputStream%20to%20Base64%20String.html","/posts/baeldung/2024-07-17/2024-07-17-How%20to%20Split%20a%20Stream%20into%20Multiple%20Streams.html","/posts/baeldung/2024-07-17/2024-07-17-How%20to%20Truncate%20a%20String%20in%20Java.html","/posts/baeldung/2024-07-17/2024-07-17-Instantiating%20Multiple%20Beans%20of%20the%20Same%20Class%20with%20Spring%20Annotations.html","/posts/baeldung/2024-07-17/2024-07-17-Is%20There%20a%20Destructor%20in%20Java%20.html","/posts/baeldung/2024-07-17/2024-07-17-Java%2014%20Record%20vs.%20Lombok.html","/posts/baeldung/2024-07-17/2024-07-17-Query%20Documents%20using%20Document%20ID%20in%20MongoDB.html","/posts/baeldung/2024-07-17/2024-07-17-UUID%20as%20Entity%20ID%20in%20MongoDB.html","/posts/baeldung/2024-07-17/2024-07-17-Using%20Dates%20in%20CRUD%20Operations%20in%20MongoDB.html","/posts/baeldung/2024-07-17/2024-07-17-Validate%20an%20XML%20File%20Against%20an%20XSD%20File.html","/posts/baeldung/2024-07-17/2024-07-17-What%20Are%20the%20Spring%20Boot%20Default%20Memory%20Settings%20.html","/posts/baeldung/2024-07-18/2024-07-18-Check%20if%20BigDecimal%20Value%20Is%20Zero.html","/posts/baeldung/2024-07-18/2024-07-18-Check%20if%20a%20Character%20Is%20a%20Vowel%20in%20Java.html","/posts/baeldung/2024-07-18/2024-07-18-Constraint%20Composition%20with%20Bean%20Validation.html","/posts/baeldung/2024-07-18/2024-07-18-Custom%20HTTP%20Header%20With%20the%20Java%20HttpClient.html","/posts/baeldung/2024-07-18/2024-07-18-Difference%20Between%20Thread%20s%20Context%20Class%20Loader%20and%20Normal%20Class%20Loader.html","/posts/baeldung/2024-07-18/2024-07-18-How%20to%20Play%20Sound%20With%20Java.html","/posts/baeldung/2024-07-18/2024-07-18-Java%20HttpClient%20Timeout.html","/posts/baeldung/2024-07-18/2024-07-18-Java%20Scanner%20useDelimiter%20with%20Examples.html","/posts/baeldung/2024-07-18/2024-07-18-Posting%20with%20Java%20HttpClient.html","/posts/baeldung/2024-07-18/2024-07-18-Reverse%20a%20Number%20in%20Java.html","/posts/baeldung/2024-07-18/2024-07-18-Setting%20Request%20Headers%20Using%20Feign.html","/posts/baeldung/2024-07-18/2024-07-18-Sorting%20Objects%20in%20a%20List%20by%20Date.html","/posts/baeldung/2024-07-19/2024-07-19-Checking%20Connection%20to%20MongoDB.html","/posts/baeldung/2024-07-19/2024-07-19-Compile%20Multiple%20Java%20Source%20Files%20Using%20the%20Command%20Line.html","/posts/baeldung/2024-07-19/2024-07-19-Convert%20Between%20boolean%20and%20int%20in%20Java.html","/posts/baeldung/2024-07-19/2024-07-19-Deduction%20Based%20Polymorphism%20in%20Jackson%202.12.html","/posts/baeldung/2024-07-19/2024-07-19-Difference%20Between%20%20%20%20and%20equals%20%20%20in%20Java.html","/posts/baeldung/2024-07-19/2024-07-19-Differences%20Between%20Iterator%20and%20Iterable%20and%20How%20to%20Use%20Them%20.html","/posts/baeldung/2024-07-19/2024-07-19-Differences%20Between%20set%20%20%20and%20lazySet%20%20%20in%20Java%20Atomic%20Variables.html","/posts/baeldung/2024-07-19/2024-07-19-Distinct%20Queries%20in%20HQL.html","/posts/baeldung/2024-07-19/2024-07-19-Exception%20Handling%20With%20Jersey.html","/posts/baeldung/2024-07-19/2024-07-19-Generate%20a%20Random%20Value%20From%20an%20Enum.html","/posts/baeldung/2024-07-19/2024-07-19-Get%20the%20ASCII%20Value%20of%20a%20Character%20in%20Java.html","/posts/baeldung/2024-07-19/2024-07-19-Get%20the%20IP%20Address%20of%20the%20Current%20Machine%20Using%20Java.html","/posts/baeldung/2024-07-19/2024-07-19-Illegal%20Character%20Compilation%20Error.html","/posts/baeldung/2024-07-19/2024-07-19-Implements%20vs.%20Extends%20in%20Java.html","/posts/baeldung/2024-07-19/2024-07-19-Java%209%20Illegal%20Reflective%20Access%20Warning.html","/posts/baeldung/2024-07-19/2024-07-19-Java%20Scanner.skip%20Method%20with%20Examples.html","/posts/baeldung/2024-07-19/2024-07-19-List%20vs.%20ArrayList%20in%20Java.html","/posts/baeldung/2024-07-20/2024-07-20-Automorphic%20Numbers%20in%20Java.html","/posts/baeldung/2024-07-20/2024-07-20-Bulk%20Update%20of%20Documents%20in%20MongoDB.html","/posts/baeldung/2024-07-20/2024-07-20-Common%20Command%20Line%20Compile%20Errors%20in%20Java.html","/posts/baeldung/2024-07-20/2024-07-20-Convert%20long%20to%20int%20Type%20in%20Java.html","/posts/baeldung/2024-07-20/2024-07-20-Difference%20Between%20POJO%20%20JavaBeans%20%20DTO%20and%20VO.html","/posts/baeldung/2024-07-20/2024-07-20-Get%20the%20Number%20of%20Rows%20in%20a%20ResultSet.html","/posts/baeldung/2024-07-20/2024-07-20-Import%20Data%20to%20MongoDB%20From%20JSON%20File%20Using%20Java.html","/posts/baeldung/2024-07-20/2024-07-20-Java%20Error%20%20bad%20operand%20types%20for%20binary%20operator%20.html","/posts/baeldung/2024-07-20/2024-07-20-Java%20Operators.html","/posts/baeldung/2024-07-20/2024-07-20-Read%20User%20Input%20Until%20a%20Condition%20Is%20Met.html","/posts/baeldung/2024-07-20/2024-07-20-The%20for%20each%20Loop%20in%20Java.html","/posts/baeldung/2024-07-21/2024-07-21-Check%20Collection%20Existence%20in%20MongoDB.html","/posts/baeldung/2024-07-21/2024-07-21-Convert%20Between%20Byte%20Array%20and%20UUID%20in%20Java.html","/posts/baeldung/2024-07-21/2024-07-21-Error%20%20%20trustAnchors%20parameter%20must%20be%20non%20empty%20.html","/posts/baeldung/2024-07-21/2024-07-21-How%20to%20use%20JNI%20s%20RegisterNatives%20%20%20method%20.html","/posts/baeldung/2024-07-21/2024-07-21-Java%20ArrayIndexOutOfBoundsException.html","/posts/baeldung/2024-07-21/2024-07-21-Make%20a%20Call%20to%20a%20GraphQL%20Service%20from%20a%20Java%20Application.html","/posts/baeldung/2024-07-21/2024-07-21-Update%20Multiple%20Fields%20in%20a%20MongoDB%20Document.html","/posts/baeldung/2024-07-22/2024-07-22-A%20Brief%20History%20of%20the%20Java%20Programming%20Language.html","/posts/baeldung/2024-07-22/2024-07-22-Computing%20an%20X509%20Certificate%20s%20Thumbprint%20in%20Java.html","/posts/baeldung/2024-07-22/2024-07-22-Find%20All%20Jars%20Containing%20Given%20Class.html","/posts/baeldung/2024-07-22/2024-07-22-Generating%20a%20Java%20String%20of%20N%20Repeated%20Characters.html","/posts/baeldung/2024-07-22/2024-07-22-Get%20Last%20Inserted%20Document%20ID%20in%20MongoDB%20With%20Java%20Driver.html","/posts/baeldung/2024-07-22/2024-07-22-Java%20Concurrent%20HashSet%20Equivalent%20to%20ConcurrentHashMap.html","/posts/baeldung/2024-07-22/2024-07-22-Lombok%20Configuration%20System.html","/posts/baeldung/2024-07-22/2024-07-22-Printing%20Thread%20Info%20in%20Log%20File%20Using%20Log4j2.html","/posts/baeldung/2024-07-22/2024-07-22-Random%20Number%20Generators%20in%20Java%2017.html","/posts/baeldung/2024-07-22/2024-07-22-Retrying%20Feign%20Calls.html","/posts/baeldung/2024-07-22/2024-07-22-SequenceInputStream%20Class%20in%20Java.html","/posts/baeldung/2024-07-22/2024-07-22-Split%20a%20String%20Every%20n%20Characters%20in%20Java.html","/posts/baeldung/2024-07-22/2024-07-22-String%20equals%20%20%20Vs%20contentEquals%20%20%20in%20Java.html","/posts/baeldung/2024-07-22/2024-07-22-What%20Is%20the%20Difference%20Between%20NIO%20and%20NIO.2%20.html","/posts/baeldung/2024-07-22/2024-07-22-Working%20with%20%20Unknown%20Source%20%20Stack%20Traces%20in%20Java.html","/posts/baeldung/2024-07-23/2024-07-23-Check%20if%20an%20Enum%20Value%20Exists%20in%20Java.html","/posts/baeldung/2024-07-23/2024-07-23-Getting%20a%20Bit%20at%20a%20Certain%20Position%20from%20Integral%20Values.html","/posts/baeldung/2024-07-23/2024-07-23-JMX%20Ports.html","/posts/baeldung/2024-07-23/2024-07-23-Java%20HashMap%20With%20Different%20Value%20Types.html","/posts/baeldung/2024-07-23/2024-07-23-Reading%20Values%20From%20Excel%20in%20Java.html","/posts/baeldung/2024-07-23/2024-07-23-Set%20the%20Name%20of%20a%20Thread%20in%20Java.html","/posts/baeldung/2024-07-23/2024-07-23-Unix%20Domain%20Socket%20in%20Java%2016.html","/posts/baeldung/2024-07-23/2024-07-23-Use%20Dot%20%20.%20%20as%20the%20Decimal%20Separator%20in%20Java.html","/posts/baeldung/2024-07-24/2024-07-24-Assert%20That%20a%20Java%20Optional%20Has%20a%20Certain%20Value.html","/posts/baeldung/2024-07-24/2024-07-24-Chaining%20Constructors%20in%20Java.html","/posts/baeldung/2024-07-24/2024-07-24-Check%20if%20the%20First%20Letter%20of%20a%20String%20Is%20Uppercase.html","/posts/baeldung/2024-07-24/2024-07-24-Constructors%20in%20Java%20Abstract%20Classes.html","/posts/baeldung/2024-07-24/2024-07-24-Deserialize%20Snake%20Case%20to%20Camel%20Case%20With%20Jackson.html","/posts/baeldung/2024-07-24/2024-07-24-Get%20all%20the%20Keys%20in%20a%20JSON%20String%20Using%20JsonNode.html","/posts/baeldung/2024-07-24/2024-07-24-Introduction%20to%20HexFormat%20in%20Java%2017.html","/posts/baeldung/2024-07-24/2024-07-24-Invoke%20a%20Static%20Method%20Using%20Java%20Reflection%20API.html","/posts/baeldung/2024-07-24/2024-07-24-LDAP%20Authentication%20Using%20Pure%20Java.html","/posts/baeldung/2024-07-24/2024-07-24-List%20All%20the%20Classes%20Loaded%20in%20the%20JVM.html","/posts/baeldung/2024-07-24/2024-07-24-Splitting%20a%20Java%20String%20by%20Multiple%20Delimiters.html","/posts/baeldung/2024-07-25/2024-07-25-Convert%20Long%20to%20String%20in%20Java.html","/posts/baeldung/2024-07-25/2024-07-25-Convert%20a%20Byte%20Array%20to%20a%20Numeric%20Representation%20in%20Java.html","/posts/baeldung/2024-07-25/2024-07-25-Convert%20an%20Object%20to%20a%20Byte%20Array%20in%20Java.html","/posts/baeldung/2024-07-25/2024-07-25-Get%20a%20Field%20s%20Annotations%20Using%20Reflection.html","/posts/baeldung/2024-07-25/2024-07-25-Get%20a%20Submap%20From%20a%20HashMap%20in%20Java.html","/posts/baeldung/2024-07-25/2024-07-25-Hibernate%20s%20%20Object%20References%20an%20Unsaved%20Transient%20Instance%20%20Error.html","/posts/baeldung/2024-07-25/2024-07-25-JUnit%204%20on%20How%20to%20Ignore%20a%20Base%20Test%20Class.html","/posts/baeldung/2024-07-25/2024-07-25-Java%20Map%20%20%20keySet%20%20%20vs.%20entrySet%20%20%20vs.%20values%20%20%20Methods.html","/posts/baeldung/2024-07-26/2024-07-26-Compare%20the%20Content%20of%20Two%20Files%20in%20Java.html","/posts/baeldung/2024-07-26/2024-07-26-Count%20Spaces%20in%20a%20Java%20String.html","/posts/baeldung/2024-07-26/2024-07-26-Deploying%20a%20Java%20War%20in%20a%20Docker%20Container.html","/posts/baeldung/2024-07-26/2024-07-26-Enabling%20Unlimited%20Strength%20Cryptography%20in%20Java.html","/posts/baeldung/2024-07-26/2024-07-26-Generate%20a%20Java%20Class%20From%20JSON.html","/posts/baeldung/2024-07-26/2024-07-26-Get%20All%20Running%20JVM%20Threads.html","/posts/baeldung/2024-07-26/2024-07-26-Handling%20Exceptions%20in%20Project%20Reactor.html","/posts/baeldung/2024-07-26/2024-07-26-Maven%20dependencyManagement%20vs.%20dependencies%20Tags.html","/posts/baeldung/2024-07-26/2024-07-26-Priority%20of%20a%20Thread%20in%20Java.html","/posts/baeldung/2024-07-27/2024-07-27-Converting%20a%20PEM%20File%20to%20Java%20KeyStore%20Format.html","/posts/baeldung/2024-07-27/2024-07-27-Find%20Whether%20an%20IP%20Address%20Is%20in%20the%20Specified%20Range%20or%20Not%20in%20Java.html","/posts/baeldung/2024-07-27/2024-07-27-Guava%20s%20Futures%20and%20ListenableFuture.html","/posts/baeldung/2024-07-27/2024-07-27-How%20to%20Create%20Password%20Protected%20Zip%20Files%20and%20Unzip%20Them%20in%20Java.html","/posts/baeldung/2024-07-27/2024-07-27-How%20to%20Implement%20LRU%20Cache%20in%20Java.html","/posts/baeldung/2024-07-27/2024-07-27-Is%20java.sql.Connection%20Thread%20Safe%20.html","/posts/baeldung/2024-07-27/2024-07-27-Java%20Annotation%20Attribute%20Value%20Restrictions.html","/posts/baeldung/2024-07-27/2024-07-27-Throwing%20Exceptions%20in%20Constructors.html","/posts/baeldung/2024-07-27/2024-07-27-Why%20Missing%20Annotations%20Don%20t%20Cause%20ClassNotFoundException.html","/posts/baeldung/2024-07-28/2024-07-28-%20Code%20too%20large%20%20Compilation%20Error%20in%20Java.html","/posts/baeldung/2024-07-28/2024-07-28-Collection.toArray%20new%20T%200%20%20%20or%20.toArray%20new%20T%20size%20%20.html","/posts/baeldung/2024-07-28/2024-07-28-Find%20the%20GC%20Algorithm%20Used%20by%20a%20JVM%20Instance.html","/posts/baeldung/2024-07-29/2024-07-29-Creating%20%20Updating%20and%20Deleting%20Resources%20with%20the%20Java%20Kubernetes%20API.html","/posts/baeldung/2024-07-29/2024-07-29-Inserting%20Null%20Into%20an%20Integer%20Column%20Using%20JDBC.html","/posts/baeldung/2024-07-29/2024-07-29-Non%20Capturing%20Regex%20Groups%20in%20Java.html","/posts/baeldung/2024-07-29/2024-07-29-Private%20Methods%20in%20Java%20Interfaces.html","/posts/baeldung/2024-07-29/2024-07-29-Secret%20Key%20and%20String%20Conversion%20in%20Java.html","/posts/baeldung/2024-07-20/2024-07-20-Compile%20All%20Java%20Classes%20in%20Directory%20Structure%20with%20javac.html","/posts/baeldung/2024-07-20/2024-07-20-Send%20a%20SOAP%20Object%20with%20Feign%20Client.html","/posts/baeldung/2024-07-20/2024-07-20-Set%20List%20of%20Objects%20in%20Swagger%20API%20Response.html","/posts/baeldung/2024-07-21/2024-07-21-Guide%20to%20ByteBuffer.html","/posts/baeldung/2024-07-21/2024-07-21-Difference%20Between%20Map%20and%20HashMap%20in%20Java.html","/posts/baeldung/2024-07-21/2024-07-21-Producer%20Consumer%20Problem%20With%20Example%20in%20Java.html","/posts/baeldung/2024-07-08/2024-07-08-Guide%20to%20Java%20Project%20Panama.html","/posts/baeldung/2024-07-22/2024-07-22-Cassandra%20Batch%20in%20Cassandra%20Query%20Language%20and%20Java.html","/posts/baeldung/2024-07-22/2024-07-22-Constructor%20Specification%20in%20Java.html","/posts/baeldung/2024-07-22/2024-07-22-Generating%20a%20Secure%20AES%20Key%20in%20Java.html","/posts/baeldung/2024-07-23/2024-07-23-Volatile%20Variables%20and%20Thread%20Safety.html","/posts/baeldung/2024-07-23/2024-07-23-Remote%20Monitoring%20with%20VisualVM%20and%20JMX.html","/posts/baeldung/2024-07-24/2024-07-24-HMAC%20in%20Java.html","/posts/baeldung/2024-07-25/2024-07-25-Add%20a%20Reference%20to%20Method%20Parameters%20in%20Javadoc.html","/posts/baeldung/2024-07-26/2024-07-26-Access%20Control%20Models.html","/posts/baeldung/2024-07-27/2024-07-27-Additional%20Source%20Directories%20in%20Maven.html","/posts/baeldung/2024-07-28/2024-07-28-The%20java.lang.NoClassDefFoundError%20in%20JUnit.html","/posts/baeldung/2024-07-27/2024-07-27-Architecture%20of%20a%20Geospatial%20Application%20with%20Java.html","/posts/baeldung/2024-07-27/2024-07-27-Creating%20a%20Kubernetes%20Admission%20Controller%20in%20Java.html","/posts/baeldung/2024-07-27/2024-07-27-Guide%20to%20Java%20BigInteger.html","/posts/baeldung/2024-07-28/2024-07-28-How%20to%20Get%20the%20Number%20of%20Threads%20in%20a%20Java%20Process.html","/posts/baeldung/2024-07-28/2024-07-28-How%20to%20Implement%20Min%20Max%20Heap%20in%20Java.html","/posts/baeldung/2024-07-29/2024-07-29-Finding%20All%20Classes%20in%20a%20Java%20Package.html","/posts/baeldung/2024-06-23/2024-06-23-Introduction%20to%20gRPC%20with%20Spring%20Boot.html","/posts/baeldung/Archive/Add%20Global%20Exception%20Interceptor%20in%20gRPC%20Server.html","/posts/baeldung/2024-07-04/2024-07-04-Using%20PostgreSQL%20as%20a%20Message%20Broker.html","/posts/articles/postgresql/%E5%9C%A8Mac%E8%AF%B4%E5%AE%89%E8%A3%85postgresql%E5%B9%B6%E4%B8%94%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8D%95%E7%8B%AC%E7%BB%99%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7%E8%B5%8B%E4%BA%88%E6%9D%83%E9%99%90.html","/posts/baeldung/2024-07-02/2024-07-02-Receiving%20PostreSQL%20Push%20Notifications%20with%20Spring%20Integration.html","/posts/baeldung/2024-07-26/2024-07-26-Connecting%20to%20a%20Specific%20Schema%20in%20JDBC.html","/posts/baeldung/2024-07-29/2024-07-29-Multipart%20Request%20Handling%20in%20Spring.html","/posts/baeldung/2024-07-23/2024-07-23-Speed%20up%20Spring%20Boot%20Startup%20Time.html","/posts/baeldung/2024-07-20/2024-07-20-Apache%20Camel%20Routes%20Testing%20in%20Spring%20Boot.html","/posts/baeldung/2024-07-21/2024-07-21-Connecting%20to%20a%20NoSQL%20Database%20with%20Spring%20Boot.html","/posts/baeldung/2024-07-19/2024-07-19-Error%20Handling%20in%20GraphQL%20With%20Spring%20Boot.html","/posts/baeldung/2024-07-18/2024-07-18-Spring%20Web%20Service%20Integration%20Tests%20with%20%20WebServiceServerTest.html","/posts/baeldung/2024-07-16/2024-07-16-Upload%20Image%20With%20Spring%20Boot%20and%20Thymeleaf.html","/posts/baeldung/2024-07-13/2024-07-13-Guide%20to%20Resilience4j%20With%20Spring%20Boot.html","/posts/baeldung/2024-07-11/2024-07-11-Spring%20Boot%20FeignClient%20vs.%20WebClient.html","/posts/baeldung/2024-07-10/2024-07-10-Spring%20Boot%20Logback%20and%20Log4j2%20Extensions.html","/posts/baeldung/2024-07-08/2024-07-08-API%20First%20Development%20with%20Spring%20Boot%20and%20OpenAPI%203.0.html","/posts/baeldung/2024-07-08/2024-07-08-Change%20Swagger%20UI%20URL%20prefix.html","/posts/baeldung/2024-07-07/2024-07-07-Integrate%20AWS%20Secrets%20Manager%20in%20Spring%20Boot.html","/posts/baeldung/2024-07-07/2024-07-07-Loading%20Multiple%20YAML%20Configuration%20Files%20in%20Spring%20Boot.html","/posts/baeldung/2024-07-07/2024-07-07-Resilience4j%20Events%20Endpoints.html","/posts/baeldung/2024-07-05/2024-07-05-Hibernate%20Natural%20IDs%20in%20Spring%20Boot.html","/posts/baeldung/2024-07-05/2024-07-05-Custom%20WebFlux%20Exceptions%20in%20Spring%20Boot%203.html","/posts/baeldung/2024-07-02/2024-07-02-Docker%20Compose%20Support%20in%20Spring%20Boot%203.html","/posts/baeldung/2024-07-03/2024-07-03-Setup%20Http%20Patch%20Request%20With%20OpenFeign.html","/posts/baeldung/2024-07-02/2024-07-02-Getting%20Started%20With%20Apache%20Pulsar%20and%20Spring%20Boot.html","/posts/baeldung/2024-06-29/2024-06-29-Validate%20Boolean%20Type%20in%20Spring%20Boot.html","/posts/baeldung/2024-06-28/2024-06-28-A%20Guide%20to%20RestClient%20in%20Spring%20Boot.html","/posts/baeldung/2024-06-26/2024-06-26-Modify%20Request%20Body%20Before%20Reaching%20Controller%20in%20Spring%20Boot.html","/posts/baeldung/2024-06-23/2024-06-23-How%20to%20Catch%20Deserialization%20Errors%20in%20Spring%20Kafka%20.html","/posts/baeldung/2024-06-21/2024-06-21-%20DataJpaTest%20and%20Repository%20Class%20in%20JUnit.html","/posts/baeldung/2024-06-22/2024-06-22-Get%20All%20Results%20at%20Once%20in%20a%20Spring%20Boot%20Paged%20Query%20Method.html","/posts/baeldung/2024-06-21/2024-06-21-Migrate%20Application%20from%20Spring%20Security%205%20to%20Spring%20Security%206%20Spring%20Boot%203.html","/posts/baeldung/Archive/2024-06-20-Dynamically%20Managing%20Kafka%20Listeners%20in%20Spring%20Boot.html","/posts/baeldung/Archive/2024-06-19-Disable%20%20Cacheable%20in%20Spring%20Boot.html","/posts/baeldung/Archive/2024-06-19-Logging%20in%20Spring%20Boot%20With%20Loki.html","/posts/baeldung/Archive/Get%20JSON%20Content%20as%20Object%20Using%20MockMVC.html","/posts/baeldung/Archive/Fix%20Spring%20Boot%20H2%20JdbcSQLSyntaxErrorException%20%20Table%20not%20found%20.html","/posts/baeldung/Archive/Monitor%20a%20Spring%20Boot%20App%20Using%20Prometheus.html","/posts/baeldung/Archive/Using%20@Autowired%20and%20@InjectMocks%20in%20Spring%20Boot%20Tests.html","/posts/baeldung/2024-07-18/2024-07-18-Starting%20Spring%20Boot%20Application%20in%20Docker%20With%20Profile.html","/posts/baeldung/2024-06-28/2024-06-28-Spring%20Boot%203.1%20s%20ConnectionDetails%20Abstraction.html","/posts/baeldung/2024-06-29/2024-06-29-Spring%20Boot%20Application%20on%20Liberica%20Runtime%20Container.html","/posts/baeldung/2024-07-19/2024-07-19-Hide%20a%20Request%20Field%20in%20Swagger%20API.html","/posts/baeldung/2024-07-01/2024-07-01-Creating%20a%20Telegram%20Bot%20with%20Spring%20Boot.html","/posts/baeldung/2024-07-01/2024-07-01-Built%20in%20Testcontainers%20Support%20in%20Spring%20Boot.html","/posts/baeldung/2024-07-03/2024-07-03-Documenting%20Spring%20Event%20Driven%20API%20Using%20AsyncAPI%20and%20Springwolf.html","/posts/baeldung/2024-07-03/2024-07-03-How%20to%20Solve%20403%20Error%20in%20Spring%20Boot%20POST%20Request.html","/posts/baeldung/2024-07-03/2024-07-03-MongoDB%20%20%20Field%20Level%20Encryption.html","/posts/baeldung/2024-07-03/2024-07-03-How%20to%20Convert%20application.properties%20to%20application.yml%20for%20Spring%20Boot.html","/posts/baeldung/2024-07-05/2024-07-05-Spring%20Boot%20Actuator%20Without%20Spring%20Boot.html","/posts/baeldung/2024-07-06/2024-07-06-Using%20OpenAI%20ChatGPT%20APIs%20in%20Spring%20Boot.html","/posts/baeldung/2024-07-08/2024-07-08-Pitfalls%20on%20Testing%20with%20Spring%20Boot.html","/posts/baeldung/2024-07-09/2024-07-09-OpenTelemetry%20Setup%20in%20Spring%20Boot%20Application.html","/posts/baeldung/2024-07-11/2024-07-11-Running%20Spring%20Boot%20Applications%20with%20the%20Embedded%20Camunda%20Engine.html","/posts/baeldung/2024-07-12/2024-07-12-Enable%20and%20Disable%20Endpoints%20at%20Runtime%20With%20Spring%20Boot.html","/posts/baeldung/2024-07-12/2024-07-12-Kong%20Ingress%20Controller%20with%20Spring%20Boot.html","/posts/baeldung/2024-07-11/2024-07-11-Kotlin%20and%20Spring%20Boot%20%20Injecting%20Configuration%20Properties%20Using%20%20Value.html","/posts/baeldung/2024-07-11/2024-07-11-Using%20Firebase%20Cloud%20Messaging%20in%20Spring%20Boot%20Applications.html","/posts/baeldung/2024-07-13/2024-07-13-Uploading%20a%20File%20and%20JSON%20Data%20in%20Postman.html","/posts/baeldung/2024-07-13/2024-07-13-TLS%20Setup%20in%20MySQL%20and%20Spring%20Boot%20Application.html","/posts/baeldung/2024-07-17/2024-07-17-Spring%20Boot%20%20%20Keycloak%20Integration%20Testing%20with%20Testcontainers.html","/posts/baeldung/2024-07-16/2024-07-16-Apply%20Default%20Global%20SecurityScheme%20in%20springdoc%20openapi.html","/posts/baeldung/2024-06-30/2024-06-30-Securing%20Spring%20Boot%203%20Applications%20With%20SSL%20Bundles.html","/posts/baeldung/2024-07-05/2024-07-05-Shared%20Secret%20Authentication%20in%20Spring%20Boot%20Application.html","/posts/baeldung/2024-07-06/2024-07-06-Spring%20Boot%20H2%20JdbcSQLSyntaxErrorException%20expected%20%20identifier%20.html","/posts/baeldung/2024-07-08/2024-07-08-Authenticating%20Users%20with%20AzureAD%20in%20Spring%20Boot.html","/posts/baeldung/2024-07-08/2024-07-08-Run%20a%20Spring%20Boot%20Application%20in%20AWS%20Lambda.html","/posts/baeldung/2024-07-10/2024-07-10-Flyway%20Out%20of%20Order%20Migrations.html","/posts/baeldung/2024-07-11/2024-07-11-A%20Guide%20to%20Spring%20CredHub.html","/posts/baeldung/2024-07-11/2024-07-11-Fixing%20the%20No%20Main%20Manifest%20Attribute%20in%20Spring%20Boot.html","/posts/baeldung/2024-07-12/2024-07-12-Persisting%20the%20Query%20Model.html","/posts/baeldung/2024-07-13/2024-07-13-Log%20Properties%20in%20a%20Spring%20Boot%20Application.html","/posts/baeldung/2024-07-16/2024-07-16-Using%20Environment%20Variables%20in%20Spring%20Boot%20s%20Properties%20Files.html","/posts/baeldung/2024-07-17/2024-07-17-Spring%20Boot%20%20%20Testing%20Redis%20With%20Testcontainers.html","/posts/baeldung/2024-07-17/2024-07-17-Spring%20Data%20JPA%20%20%20Run%20an%20App%20Without%20a%20Database.html","/posts/baeldung/2024-07-19/2024-07-19-Finding%20All%20Beans%20with%20a%20Custom%20Annotation.html","/posts/baeldung/2024-07-20/2024-07-20-Add%20Prefix%20to%20All%20Spring%20Boot%20Controllers.html","/posts/baeldung/2024-07-20/2024-07-20-Getting%20Started%20With%20GraphQL%20SPQR%20and%20Spring%20Boot.html","/posts/baeldung/2024-07-21/2024-07-21-Configure%20and%20Use%20Multiple%20DataSources%20in%20Spring%20Boot.html","/posts/baeldung/2024-07-22/2024-07-22-An%20Introduction%20to%20Domain%20Graph%20Service%20%20DGS%20%20Framework.html","/posts/baeldung/2024-07-22/2024-07-22-Get%20Current%20Trace%20ID%20in%20Spring%20Cloud%20Sleuth.html","/posts/baeldung/2024-07-23/2024-07-23-Kafka%20Streams%20With%20Spring%20Boot.html","/posts/baeldung/2024-07-23/2024-07-23-Micronaut%20vs.%20Spring%20Boot.html","/posts/baeldung/2024-07-24/2024-07-24-Overriding%20Spring%20Boot%20Managed%20Dependency%20Versions.html","/posts/baeldung/2024-07-26/2024-07-26-Change%20the%20Default%20Location%20of%20the%20Log4j2%20Configuration%20File%20in%20Spring%20Boot.html","/posts/baeldung/2024-07-29/2024-07-29-Spring%20Boot%20Error%20ApplicationContextException.html","/posts/baeldung/2024-07-20/2024-07-20-Logging%20MongoDB%20Queries%20with%20Spring%20Boot.html","/posts/baeldung/2024-07-22/2024-07-22-Remove%20Basic%20Error%20Controller%20In%20SpringFox%20Swagger%20UI.html","/posts/baeldung/2024-07-22/2024-07-22-Setting%20Example%20and%20Description%20with%20Swagger.html","/posts/baeldung/2024-07-22/2024-07-22-Failed%20to%20Load%20ApplicationContext%20for%20JUnit%20Test%20of%20Spring%20Controller.html","/posts/baeldung/2024-07-25/2024-07-25-Spring%20Boot%20vs%20Quarkus.html","/posts/baeldung/2024-07-27/2024-07-27-Writing%20Log%20Data%20to%20Syslog%20Using%20Log4j2.html","/posts/baeldung/2024-07-27/2024-07-27-Set%20JWT%20with%20Spring%20Boot%20and%20Swagger%20UI.html","/posts/baeldung/2024-07-26/2024-07-26-Run%20JUnit%20Test%20Cases%20From%20the%20Command%20Line.html","/posts/baeldung/2024-06-30/2024-06-30-Assert%20Regex%20Matches%20in%20JUnit.html","/posts/baeldung/2024-07-12/2024-07-12-SpringRunner%20vs%20MockitoJUnitRunner.html","/posts/baeldung/2024-07-22/2024-07-22-Get%20the%20Name%20of%20the%20Currently%20Executing%20Test%20in%20JUnit.html","/posts/baeldung/2024-07-25/2024-07-25-Parallel%20Test%20Execution%20for%20JUnit%205.html","/posts/baeldung/2024-06-21/2024-06-21-Custom%20Event%20Handlers%20and%20Listeners%20in%20Netty.html","/posts/baeldung/2024-07-11/2024-07-11-RxJava%20Single.just%20%20%20vs%20Single.fromCallable%20%20.html","/posts/baeldung/2024-06-26/2024-06-26-Extract%20Numbers%20From%20a%20String%20in%20Kotlin.html","/posts/baeldung/2024-06-21/2024-06-21-Railway%20Oriented%20Programming%20in%20Kotlin.html","/posts/baeldung/2024-07-05/2024-07-05-Calculate%20Percentage%20in%20Kotlin.html","/posts/baeldung/2024-07-20/2024-07-20-Iterate%20Through%20a%20List%20and%20Add%20Items%20in%20Kotlin.html","/posts/baeldung/2024-07-20/2024-07-20-Sorting%20a%20String%20Alphabetically%20in%20Kotlin.html","/posts/baeldung/2024-07-21/2024-07-21-How%20to%20Calculate%20Standard%20Deviation%20in%20Kotlin.html","/posts/baeldung/2024-07-26/2024-07-26-Custom%20Serializers%20in%20Apache%20Kafka.html","/posts/baeldung/2024-07-16/2024-07-16-Get%20the%20Number%20of%20Messages%20in%20an%20Apache%20Kafka%20Topic.html","/posts/baeldung/2024-06-21/2024-06-21-Difference%20Between%20GroupId%20and%20ConsumerId%20in%20Apache%20Kafka.html","/posts/baeldung/2024-06-29/2024-06-29-Introduction%20to%20Apache%20Kafka.html","/posts/baeldung/2024-07-18/2024-07-18-Apache%20ActiveMQ%20vs.%20Kafka.html","/posts/baeldung/2024-07-23/2024-07-23-415%20Unsupported%20MediaType%20in%20Spring%20Application.html","/posts/baeldung/2024-07-21/2024-07-21-Spring%20%20Autowired%20Field%20Null%20%20%20Common%20Causes%20and%20Solutions.html","/posts/baeldung/2024-07-16/2024-07-16-Reading%20Flux%20Into%20a%20Single%20InputStream%20Using%20Spring%20Reactive%20WebClient.html","/posts/baeldung/2024-07-15/2024-07-15-Spring%20JDBC%20Batch%20Inserts.html","/posts/baeldung/2024-07-10/2024-07-10-Encoding%20of%20URI%20Variables%20on%20RestTemplate.html","/posts/baeldung/2024-07-08/2024-07-08-Using%20Java%20Records%20with%20JPA.html","/posts/baeldung/2024-06-30/2024-06-30-Invoke%20Spring%20%20Cacheable%20from%20Another%20Method%20of%20Same%20Bean.html","/posts/baeldung/2024-06-29/2024-06-29-SpringRunner%20vs.%20SpringBootTest.html","/posts/baeldung/2024-06-27/2024-06-27-Working%20With%20MathFlux.html","/posts/baeldung/2024-06-26/2024-06-26-Setup%20Asynchronous%20Retry%20Mechanism%20in%20Spring.html","/posts/baeldung/2024-06-27/2024-06-27-Overriding%20Spring%20Beans%20in%20Integration%20Test.html","/posts/baeldung/2024-06-22/2024-06-22-How%20to%20Check%20if%20a%20Variable%20Is%20Defined%20in%20Thymeleaf.html","/posts/baeldung/2024-06-22/2024-06-22-Logging%20With%20AOP%20in%20Spring.html","/posts/baeldung/2024-06-21/2024-06-21-Document%20Query%20Parameters%20with%20Spring%20REST%20Docs.html","/posts/baeldung/Archive/2024-06-19-Disable%20%20EnableScheduling%20on%20Spring%20Tests.html","/posts/baeldung/Archive/2024-06-20-Using%20the%20%20Value%20Annotation%20in%20Kotlin.html","/posts/baeldung/Archive/Using%20Reactor%20Mono.cache%20%20%20for%20Memoization.html","/posts/baeldung/Archive/Consumer%20Processing%20of%20Kafka%20Messages%20With%20Delay.html","/posts/baeldung/2024-06-23/2024-06-23-Custom%20JSON%20Deserialization%20Using%20Spring%20WebClient.html","/posts/baeldung/Archive/2024-06-20-Querydsl%20vs.%20JPA%20Criteria.html","/posts/baeldung/2024-07-03/2024-07-03-Accessing%20Session%20Attributes%20in%20Thymeleaf.html","/posts/baeldung/2024-07-03/2024-07-03-Quick%20Guide%20to%20YugabyteDB.html","/posts/baeldung/2024-07-06/2024-07-06-Introduction%20to%20Spring%20Modulith.html","/posts/baeldung/2024-07-06/2024-07-06-A%20Guide%20to%20FlexyPool.html","/posts/baeldung/2024-07-02/2024-07-02-Pagination%20in%20Spring%20Webflux%20and%20Spring%20Data%20Reactive.html","/posts/baeldung/2024-07-08/2024-07-08-Debugging%20Spring%20Method%20Annotations%20Using%20Lightrun.html","/posts/baeldung/2024-07-18/2024-07-18-Using%20Transactions%20for%20Read%20Only%20Operations.html","/posts/baeldung/2024-07-10/2024-07-10-Implementing%20Retry%20in%20Kafka%20Consumer.html","/posts/baeldung/2024-06-30/2024-06-30-Secure%20Kubernetes%20Secrets%20with%20Vault.html","/posts/baeldung/2024-06-28/2024-06-28-%20ConditionalOnThreading%20Annotation%20Spring.html","/posts/baeldung/2024-07-09/2024-07-09-Fix%20EmptyResultDataAccessException%20When%20Using%20JdbcTemplate.html","/posts/baeldung/2024-07-09/2024-07-09-Getting%20the%20Current%20ApplicationContext%20in%20Spring.html","/posts/baeldung/2024-07-10/2024-07-10-Difference%20Between%20JPA%20and%20Spring%20Data%20JPA.html","/posts/baeldung/2024-07-13/2024-07-13-Limiting%20the%20Requests%20per%20Second%20With%20WebClient.html","/posts/baeldung/2024-07-13/2024-07-13-Setting%20Time%20To%20Live%20Value%20for%20Caching.html","/posts/baeldung/2024-07-13/2024-07-13-Using%20Groovy%20in%20Spring.html","/posts/baeldung/2024-07-15/2024-07-15-Apache%20Camel%20Conditional%20Routing.html","/posts/baeldung/2024-07-18/2024-07-18-%20RequestMapping%20Value%20in%20Properties%20File.html","/posts/baeldung/2024-07-21/2024-07-21-HttpMessageNotWritableException%20%20No%20Converter%20for%20%20class%20%20%20%20With%20Preset%20Content%20Type.html","/posts/baeldung/2024-07-21/2024-07-21-Building%20a%20Web%20App%20Using%20Fauna%20and%20Spring%20for%20Your%20First%20Web%20Agency%20Client.html","/posts/baeldung/2024-07-09/2024-07-09-Convert%20Array%20to%20Set%20and%20Vice%20Versa%20in%20Kotlin.html","/posts/baeldung/2024-07-01/2024-07-01-Amazon%20SNS%20vs.%20Amazon%20SQS.html","/posts/baeldung/2024-07-16/2024-07-16-How%20to%20Configure%20Conditional%20Dependencies%20in%20Gradle.html","/posts/baeldung/2024-07-23/2024-07-23-Remove%20Duplicate%20Dependencies%20with%20Maven.html","/posts/baeldung/2024-07-18/2024-07-18-Expose%20GraphQL%20Field%20with%20Different%20Name.html","/posts/baeldung/2024-06-25/2024-06-25-Difference%20Between%201L%20and%20%20long%20%201.html","/posts/baeldung/2024-06-23/2024-06-23-Check%20if%20Two%20Date%20Ranges%20Overlap.html","/posts/baeldung/2024-06-23/2024-06-23-Rotate%20a%20Vertex%20Around%20a%20Certain%20Point%20in%20Java.html","/posts/baeldung/2024-06-22/2024-06-22-Get%20a%20Range%20of%20Items%20from%20a%20Stream%20in%20Java.html","/posts/baeldung/2024-06-21/2024-06-21-Increase%20the%20Memory%20Size%20Limit%20on%20IntelliJ%20IDEA.html","/posts/baeldung/2024-07-25/2024-07-25-Spring%20Security%20%20%20Request%20Rejected%20Exception.html","/posts/baeldung/2024-06-24/2024-06-24-Add%20Authorities%20as%20Custom%20Claims%20in%20JWT%20Access%20Tokens%20in%20Spring%20Authorization%20Server.html","/posts/baeldung/Archive/2024-06-20-Creating%20a%20Spring%20Security%20Key%20for%20Signing%20a%20JWT%20Token.html","/posts/baeldung/Archive/2024-06-21-Spring%20Security%20AuthorizationManager.html","/posts/baeldung/2024-07-18/2024-07-18-Get%20Keycloak%20User%20ID%20in%20Spring.html","/posts/baeldung/2024-06-28/2024-06-28-HttpSecurity%20vs.%20WebSecurity%20in%20Spring%20Security.html","/posts/baeldung/2024-06-30/2024-06-30-Difference%20Between%20permitAll%20%20%20and%20anonymous%20%20%20in%20Spring%20Security.html","/posts/baeldung/2024-07-05/2024-07-05-Securing%20Spring%20Boot%20API%20With%20API%20Key%20and%20Secret.html","/posts/baeldung/2024-07-07/2024-07-07-SAML%20with%20Spring%20Boot%20and%20Spring%20Security.html","/posts/baeldung/2024-07-08/2024-07-08-Testing%20Spring%20OAuth2%20Access%20Control.html","/posts/baeldung/2024-07-11/2024-07-11-Form%20Login%20and%20Basic%20Authentication%20in%20springdoc%20openapi.html","/posts/baeldung/2024-07-12/2024-07-12-Access%20HTTPS%20REST%20Service%20Using%20Spring%20RestTemplate.html","/posts/baeldung/2024-07-12/2024-07-12-Spring%20%20EnableMethodSecurity%20Annotation.html","/posts/baeldung/2024-07-15/2024-07-15-PKCE%20Support%20for%20Secret%20Clients%20with%20Spring%20Security.html","/posts/baeldung/2024-07-16/2024-07-16-Display%20Logged%20in%20User%20s%20Information%20in%20Thymeleaf.html","/posts/baeldung/2024-07-16/2024-07-16-Spring%20Security%20%20Upgrading%20the%20Deprecated%20WebSecurityConfigurerAdapter.html","/posts/baeldung/2024-07-17/2024-07-17-Handle%20Spring%20Security%20Exceptions%20With%20%20ExceptionHandler.html","/posts/baeldung/2024-07-18/2024-07-18-Configure%20JWT%20Authentication%20for%20OpenAPI.html","/posts/baeldung/2024-07-18/2024-07-18-Disabling%20Keycloak%20Security%20in%20Spring%20Boot.html","/posts/baeldung/2024-07-19/2024-07-19-Handle%20Spring%20Security%20Exceptions.html","/posts/baeldung/2024-07-19/2024-07-19-Spring%20Security%20Authorization%20with%20OPA.html","/posts/baeldung/2024-07-20/2024-07-20-Authentication%20With%20Spring%20Security%20and%20MongoDB.html","/posts/baeldung/2024-07-21/2024-07-21-Enable%20Logging%20for%20Spring%20Security.html","/posts/baeldung/2024-07-21/2024-07-21-Spring%20Security%20%20%20Configuring%20Different%20URLs.html","/posts/baeldung/2024-07-23/2024-07-23-Content%20Security%20Policy%20with%20Spring%20Security.html","/posts/baeldung/2024-07-21/2024-07-21-Introduction%20to%20OAuth2RestTemplate.html","/posts/baeldung/2024-07-13/2024-07-13-Patterns%20for%20Iterating%20Over%20Large%20Result%20Sets%20With%20Spring%20Data%20JPA.html","/posts/baeldung/2024-07-02/2024-07-02-Scroll%20API%20in%20Spring%20Data%20JPA.html","/posts/baeldung/2024-06-25/2024-06-25-How%20to%20Get%20Last%20Record%20in%20Spring%20Data%20JPA.html","/posts/baeldung/2024-06-25/2024-06-25-%20Query%20Definitions%20With%20SpEL%20Support%20in%20Spring%20Data%20JPA.html","/posts/baeldung/2024-06-23/2024-06-23-N%201%20Problem%20in%20Hibernate%20and%20Spring%20Data%20JPA.html","/posts/baeldung/2024-06-21/2024-06-21-Skip%20Select%20Before%20Insert%20in%20Spring%20Data%20JPA.html","/posts/baeldung/2024-06-21/2024-06-21-Spring%20Data%20JPA%20Repository%20for%20Database%20View.html","/posts/baeldung/2024-06-21/2024-06-21-Query%20Hints%20in%20Spring%20Data%20JPA.html","/posts/baeldung/Archive/2024-06-21-Refresh%20and%20Fetch%20an%20Entity%20After%20Save%20in%20JPA.html","/posts/baeldung/Archive/Implement%20Update%20Or%20Insert%20in%20Spring%20Data%20JPA.html","/posts/baeldung/Archive/Solving%20Spring%20Data%20JPA%20ConverterNotFoundException_%20No%20converter%20found.html","/posts/baeldung/2024-06-22/2024-06-22-How%20To%20Use%20findBy%20%20%20With%20Multiple%20Columns%20in%20JPA.html","/posts/baeldung/2024-06-25/2024-06-25-When%20to%20Use%20the%20getReferenceById%20%20%20and%20findById%20%20%20Methods%20in%20Spring%20Data%20JPA.html","/posts/baeldung/2024-07-15/2024-07-15-Multitenancy%20With%20Spring%20Data%20JPA.html","/posts/baeldung/2024-07-03/2024-07-03-Count%20the%20Number%20of%20Rows%20in%20Spring%20Data%20JPA.html","/posts/baeldung/2024-07-04/2024-07-04-Difference%20Between%20findBy%20and%20findOneBy%20in%20Spring%20Data%20JPA.html","/posts/baeldung/2024-07-07/2024-07-07-Fix%20Spring%20Data%20JPA%20Exception%20%20No%20Property%20Found%20for%20Type.html","/posts/baeldung/2024-07-09/2024-07-09-Difference%20Between%20findBy%20and%20findAllBy%20in%20Spring%20Data%20JPA.html","/posts/baeldung/2024-07-10/2024-07-10-Differences%20Between%20Spring%20Data%20JPA%20findFirst%20%20%20and%20findTop%20%20.html","/posts/baeldung/2024-07-10/2024-07-10-NonUniqueResultException%20in%20Spring%20Data%20JPA.html","/posts/baeldung/2024-07-20/2024-07-20-BootstrapMode%20for%20JPA%20Repositories.html","/posts/baeldung/2024-06-26/2024-06-26-Merging%20Kotlin%20Flows.html","/posts/baeldung/2024-06-27/2024-06-27-Combining%20Multiple%20Kotlin%20Flows.html","/posts/baeldung/2024-06-27/2024-06-27-Sorting%20List%20with%20String%20Dates%20in%20Kotlin.html","/posts/baeldung/2024-06-25/2024-06-25-Getting%20All%20Field%20Names%20of%20a%20Class%20Using%20Kotlin%20Reflection.html","/posts/baeldung/2024-06-25/2024-06-25-Dijkstra%20s%20Algorithm%20in%20Kotlin.html","/posts/baeldung/2024-06-23/2024-06-23-Introduction%20to%20KotlinPoet.html","/posts/baeldung/2024-06-22/2024-06-22-Parse%20String%20With%20Thousands%20Separator%20in%20Kotlin.html","/posts/baeldung/Archive/2024-06-20-Difference%20Between%20eachCount%20%20%20and%20eachCountTo%20%20%20Methods%20in%20Kotlin.html","/posts/baeldung/Archive/2024-06-21-HTML%20Builder%20in%20Kotlin.html","/posts/baeldung/Archive/2024-06-20-A%20Guide%20to%20Kotlin%20Context%20Receivers.html","/posts/baeldung/Archive/2024-06-20-Avoiding%20the%20ConcurrentModificationException%20in%20Kotlin.html","/posts/baeldung/Archive/2024-06-20-Convert%20RxJava%20Single%20to%20Kotlin%20Coroutine%20Deferred.html","/posts/baeldung/Archive/2024-06-20-Getting%20a%20Kotlin%20KClass%20from%20a%20Package%20Class%20Name%20String.html","/posts/baeldung/Archive/2024-06-20-Guide%20to%20Duration%20in%20Kotlin.html","/posts/baeldung/Archive/2024-06-20-Guide%20to%20the%20HexFormat%20API.html","/posts/baeldung/Archive/2024-06-20-Iterating%20Over%20Components%20of%20Object%20in%20Kotlin.html","/posts/baeldung/Archive/2024-06-20-Parallel%20Operations%20on%20Kotlin%20Collections.html","/posts/baeldung/Archive/2024-06-20-Passing%20a%20Type%20to%20Generic%20Method%20in%20Kotlin.html","/posts/baeldung/Archive/2024-06-20-Serialize%20Enum%20Property%20to%20JSON%20in%20Kotlin.html","/posts/baeldung/Archive/2024-06-20-Use%20of%20Backticks%20in%20Kotlin.html","/posts/baeldung/Archive/2024-06-20-Variable%20Shadowing%20in%20Kotlin.html","/posts/baeldung/2024-07-14/2024-07-14-The%20Proxy%20Pattern%20in%20Kotlin.html","/posts/baeldung/2024-07-19/2024-07-19-How%20to%20Initialize%20a%20List%20of%20Lists%20in%20Kotlin.html","/posts/baeldung/2024-07-20/2024-07-20-Creating%20a%20Web%20Application%20With%20Ktor%20and%20Thymeleaf.html","/posts/baeldung/2024-07-26/2024-07-26-Is%20Kotlin%20Pass%20By%20Value%20or%20Pass%20By%20Reference%20.html","/posts/baeldung/2024-07-25/2024-07-25-Prim%20s%20Algorithm%20in%20Kotlin.html","/posts/baeldung/2024-07-07/2024-07-07-Accessing%20Methods%20Outside%20Companion%20Object%20in%20Kotlin.html","/posts/baeldung/2024-06-27/2024-06-27-Async%20Exception%20Handling%20in%20Kotlin.html","/posts/baeldung/2024-06-28/2024-06-28-Conditional%20Exception%20Throwing%20in%20Kotlin.html","/posts/baeldung/2024-06-29/2024-06-29-Checking%20if%20Two%20Objects%20Have%20the%20Same%20Class%20in%20Kotlin.html","/posts/baeldung/2024-06-29/2024-06-29-Pass%20a%20Function%20as%20Parameter%20to%20Another%20in%20Kotlin.html","/posts/baeldung/2024-06-30/2024-06-30-Convert%20Double%20to%20String%20Removing%20Scientific%20Notation.html","/posts/baeldung/2024-06-30/2024-06-30-Guide%20to%20Reading%20YAML%20Content%20in%20Kotlin.html","/posts/baeldung/2024-07-01/2024-07-01-Breadth%20First%20Search%20Algorithm%20in%20Kotlin.html","/posts/baeldung/2024-07-01/2024-07-01-The%20Composite%20Pattern%20in%20Kotlin.html","/posts/baeldung/2024-07-02/2024-07-02-Matching%20Varargs%20Using%20MockK%20in%20Kotlin.html","/posts/baeldung/2024-07-03/2024-07-03-Passing%20a%20Class%20to%20a%20Function%20in%20Kotlin.html","/posts/baeldung/2024-07-03/2024-07-03-Qualified%20this%20and%20Implicit%20this%20in%20Kotlin.html","/posts/baeldung/2024-07-03/2024-07-03-Scheduling%20Repeating%20Task%20in%20Kotlin.html","/posts/baeldung/2024-07-04/2024-07-04-Assignment%20in%20While%20Expression%20in%20Kotlin.html","/posts/baeldung/2024-07-04/2024-07-04-Cloning%20an%20Object%20in%20Kotlin.html","/posts/baeldung/2024-07-04/2024-07-04-Difference%20Between%20single%20%20%20and%20first%20%20%20in%20Kotlin%20Flows.html","/posts/baeldung/2024-07-06/2024-07-06-In%20Place%20Modification%20of%20Map%20Entry%20in%20Kotlin.html","/posts/baeldung/2024-07-06/2024-07-06-Testing%20Ktor%20Controllers.html","/posts/baeldung/2024-07-07/2024-07-07-Private%20Constructors%20in%20Kotlin.html","/posts/baeldung/2024-07-07/2024-07-07-Using%20Spy%20in%20MockK.html","/posts/baeldung/2024-07-08/2024-07-08-Check%20if%20an%20Enum%20Value%20Contains%20a%20Given%20String%20in%20Kotlin.html","/posts/baeldung/2024-07-08/2024-07-08-Convert%20a%20Collection%20Into%20an%20ArrayList%20in%20Kotlin.html","/posts/baeldung/2024-07-08/2024-07-08-Kotlin%20AES%20Encryption%20and%20Decryption.html","/posts/baeldung/2024-07-09/2024-07-09-Guide%20to%20Merging%20Two%20Maps%20in%20Kotlin.html","/posts/baeldung/2024-07-10/2024-07-10-Convert%20String%20to%20Char%20in%20Kotlin.html","/posts/baeldung/2024-07-10/2024-07-10-any%20%20%20vs.%20none%20%20%20vs.%20all%20%20%20in%20Kotlin.html","/posts/baeldung/2024-07-11/2024-07-11-Converting%20a%20List%20of%20Maps%20to%20a%20Map%20Grouped%20by%20Key%20in%20Kotlin.html","/posts/baeldung/2024-07-11/2024-07-11-The%20Implicit%20Name%20Of%20the%20Single%20Parameter%20in%20Lambda%20Expressions%20%20it.html","/posts/baeldung/2024-07-12/2024-07-12-Check%20if%20a%20Number%20Is%20Prime%20in%20Kotlin.html","/posts/baeldung/2024-07-12/2024-07-12-Determine%20Operating%20System%20in%20Kotlin.html","/posts/baeldung/2024-07-12/2024-07-12-The%20Visitor%20Pattern%20in%20Kotlin.html","/posts/baeldung/2024-07-13/2024-07-13-Counting%20Occurrences%20of%20a%20Value%20in%20a%20List%20in%20Kotlin.html","/posts/baeldung/2024-07-13/2024-07-13-Creating%20a%20Map%20from%20Two%20Arrays%20in%20Kotlin.html","/posts/baeldung/2024-07-13/2024-07-13-Difference%20Between%20Value%20and%20Emit%20in%20MutableStateFlow%20Kotlin.html","/posts/baeldung/2024-07-14/2024-07-14-Getting%20Binary%20Representation%20of%20Int%20in%20Kotlin.html","/posts/baeldung/2024-07-16/2024-07-16-Check%20if%20a%20Number%20Can%20Be%20Expressed%20as%20Sum%20of%20Two%20Prime%20Numbers%20in%20Kotlin.html","/posts/baeldung/2024-07-16/2024-07-16-Convert%20File%20to%20Byte%20Array%20in%20Kotlin.html","/posts/baeldung/2024-07-16/2024-07-16-Skip%20Null%20Values%20When%20Converting%20a%20List%20to%20a%20Map%20in%20Kotlin.html","/posts/baeldung/2024-07-17/2024-07-17-Convert%20String%20Array%20to%20Int%20Array%20in%20Kotlin.html","/posts/baeldung/2024-07-17/2024-07-17-Delete%20Files%20and%20Subdirectories%20in%20a%20Directory%20in%20Kotlin.html","/posts/baeldung/2024-07-17/2024-07-17-Difference%20Between%20collect%20%20%20and%20collectLatest%20%20%20in%20Kotlin%20Flows.html","/posts/baeldung/2024-07-18/2024-07-18-Calling%20Private%20Methods%20of%20a%20Class%20From%20Outside%20the%20Class.html","/posts/baeldung/2024-07-18/2024-07-18-How%20to%20Change%20a%20Value%20in%20a%20Mutable%20List%20in%20Kotlin.html","/posts/baeldung/2024-07-18/2024-07-18-Printing%20All%20Elements%20of%20a%20String%20Array%20in%20a%20Single%20Line%20in%20Kotlin.html","/posts/baeldung/2024-07-18/2024-07-18-Using%20Enums%20With%20when%20%20%20in%20Kotlin.html","/posts/baeldung/2024-07-19/2024-07-19-Create%20a%20Function%20That%20Works%20for%20All%20Enum%20Classes%20in%20Kotlin.html","/posts/baeldung/2024-07-19/2024-07-19-How%20to%20Remove%20Null%20and%20Empty%20Values%20from%20a%20List%20in%20Kotlin.html","/posts/baeldung/2024-07-20/2024-07-20-Underscore%20Operator%20for%20Type%20Arguments%20in%20Kotlin.html","/posts/baeldung/2024-07-21/2024-07-21-Mediator%20Pattern%20in%20Kotlin.html","/posts/baeldung/2024-07-22/2024-07-22-Comparing%20wait%20%20%20%20sleep%20%20%20%20and%20delay%20%20%20in%20Kotlin.html","/posts/baeldung/2024-07-22/2024-07-22-Data%20Objects%20in%20Kotlin.html","/posts/baeldung/2024-07-22/2024-07-22-How%20to%20Extract%20Individual%20Values%20From%20a%20JSON%20String.html","/posts/baeldung/2024-07-23/2024-07-23-Using%20return%20Inside%20a%20Lambda%20in%20Kotlin.html","/posts/baeldung/2024-07-24/2024-07-24-Iterate%20Through%20an%20Array%20in%20Reverse%20Order%20in%20Kotlin.html","/posts/baeldung/2024-07-26/2024-07-26-Convert%20an%20Array%20to%20a%20String.html","/posts/baeldung/2024-07-26/2024-07-26-Result%20Class%20in%20Kotlin.html","/posts/baeldung/2024-07-27/2024-07-27-Cyclically%20Rotate%20Array%20by%20One%20in%20Kotlin.html","/posts/baeldung/2024-07-27/2024-07-27-Util%20Classes%20in%20Kotlin.html","/posts/baeldung/2024-07-28/2024-07-28-Determine%20if%20All%20Elements%20Are%20the%20Same%20in%20a%20Kotlin%20List.html","/posts/baeldung/2024-07-28/2024-07-28-How%20to%20Convert%20Integer%20List%20to%20IntArray%20in%20Kotlin.html","/posts/baeldung/2024-07-29/2024-07-29-Kotlin%20%20.let%20%20%20vs%20if%20not%20null.html","/posts/baeldung/2024-07-29/2024-07-29-Remove%20Elements%20From%20a%20List%20While%20Iterating%20in%20Kotlin.html","/posts/baeldung/2024-07-29/2024-07-29-Defining%20Unique%20Constraints%20in%20JPA.html","/posts/baeldung/Archive/2024-06-20-%20Subselect%20Annotation%20in%20Hibernate.html","/posts/baeldung/Archive/PersistenceUnit%20vs.%20PersistenceContext.html","/posts/baeldung/Archive/Inheritance%20vs.%20Composition%20in%20JPA.html","/posts/baeldung/Archive/Save%20Child%20Objects%20Automatically%20Using%20JPA.html","/posts/baeldung/Archive/Clear%20Managed%20Entities%20in%20JPA%20Hibernate.html","/posts/baeldung/2024-07-04/2024-07-04-Need%20for%20Default%20Constructor%20in%20JPA%20Entities.html","/posts/baeldung/2024-07-21/2024-07-21-Hibernate%20s%20addScalar%20%20%20Method.html","/posts/baeldung/2024-07-04/2024-07-04-Understanding%20JPA%20Hibernate%20Associations.html","/posts/baeldung/2024-07-07/2024-07-07-Remove%20Entity%20with%20Many%20to%20Many%20Relationship%20in%20JPA.html","/posts/baeldung/2024-07-17/2024-07-17-Hibernate%20s%20%20Detached%20Entity%20Passed%20to%20Persist%20%20Error.html","/posts/baeldung/2024-07-19/2024-07-19-Hibernate%20s%20%20Not%20Null%20Property%20References%20a%20Null%20or%20Transient%20Value%20%20Error.html","/posts/baeldung/2024-07-19/2024-07-19-JPA%20and%20Hibernate%20%20%20Criteria%20vs.%20JPQL%20vs.%20HQL%20Query.html","/posts/baeldung/2024-07-22/2024-07-22-How%20to%20Access%20EntityManager%20with%20Spring%20Data.html","/posts/baeldung/2024-07-28/2024-07-28-JPA%20Entities%20and%20the%20Serializable%20Interface.html","/posts/baeldung/2024-07-29/2024-07-29-JPA%20Support%20%20%20State%20of%20the%20Tools%20Ecosystem%20in%202021.html","/posts/baeldung/2024-06-23/2024-06-23-Builder%20Pattern%20and%20Inheritance.html","/posts/baeldung/2024-06-21/2024-06-21-Testcontainers%20Desktop.html","/posts/baeldung/2024-07-02/2024-07-02-Property%20Based%20Testing%20with%20jqwik.html","/posts/baeldung/2024-07-04/2024-07-04-Cognitive%20Complexity%20and%20Its%20Effect%20on%20the%20Code.html","/posts/baeldung/2024-07-08/2024-07-08-Anemic%20vs.%20Rich%20Domain%20Objects.html","/posts/baeldung/2024-07-27/2024-07-27-Difference%20Between%20MVC%20and%20MVP%20Patterns.html","/posts/baeldung/2024-07-28/2024-07-28-Guide%20to%20the%20ModelAssert%20Library%20for%20JSON.html","/posts/baeldung/2024-07-16/2024-07-16-Testing%20Spring%20JMS.html","/posts/baeldung/Archive/2024-06-19-Multiple%20Level%20Mock%20Injection%20Into%20Mockito%20Spy%20Objects.html","/posts/baeldung/Archive/2024-06-19-How%20to%20Test%20Spring%20Application%20Events.html","/posts/baeldung/Archive/How%20to%20Test%20a%20Spring%20AOP%20Aspect.html","/posts/baeldung/2024-07-26/2024-07-26-Running%20a%20Single%20Test%20or%20Method%20With%20Maven.html","/posts/baeldung/2024-07-28/2024-07-28-Difference%20Between%20Maven%20Surefire%20and%20Failsafe%20Plugins.html","/posts/baeldung/2024-07-04/2024-07-04-Matching%20Null%20With%20Mockito.html","/posts/baeldung/2024-07-04/2024-07-04-Resolving%20Mockito%20Exception%20%20Wanted%20But%20Not%20Invoked.html","/posts/baeldung/2024-07-13/2024-07-13-assertAll%20%20%20vs%20Multiple%20Assertions%20in%20JUnit5.html","/posts/baeldung/2024-06-25/2024-06-25-Fixing%20Hibernate%20QueryException%20%20Named%20Parameter%20Not%20Bound.html","/posts/baeldung/2024-06-23/2024-06-23-List%20vs.%20Set%20in%20%20OneToMany%20JPA.html","/posts/baeldung/2024-06-22/2024-06-22-A%20Guide%20to%20the%20%20SoftDelete%20Annotation%20in%20Hibernate.html","/posts/baeldung/Archive/2024-06-19-Logging%20in%20Apache%20Camel.html","/posts/baeldung/2024-07-28/2024-07-28-Wire%20Tap%20Enterprise%20Integration%20Pattern.html","/posts/baeldung/2024-06-28/2024-06-28-Introduction%20to%20LangChain.html","/posts/baeldung/2024-06-24/2024-06-24-Introduction%20to%20Apache%20Calcite.html","/posts/baeldung/2024-07-05/2024-07-05-Converting%20a%20cURL%20Into%20Postman%20and%20Vice%20Versa.html","/posts/baeldung/2024-07-25/2024-07-25-Saving%20Date%20Values%20in%20Spring%20Data%20Cassandra.html","/posts/baeldung/2024-07-20/2024-07-20-How%20Does%20the%20Spring%20Singleton%20Bean%20Serve%20Concurrent%20Requests%20.html","/posts/baeldung/2024-06-30/2024-06-30-How%20to%20Permanently%20Enable%20Line%20Numbers%20in%20IntelliJ%20IDEA%20.html","/posts/baeldung/2024-07-17/2024-07-17-JavaScript%20Function%20Call%20with%20Thymeleaf.html","/posts/baeldung/2024-06-22/2024-06-22-Injecting%20%20Mock%20and%20%20Captor%20in%20JUnit%205%20Method%20Parameters.html","/posts/baeldung/2024-06-22/2024-06-22-Install%20OpenJDK%20on%20Windows.html","/posts/baeldung/2024-06-22/2024-06-22-Introduction%20to%20OpenGrok.html","/posts/baeldung/2024-07-22/2024-07-22-Introduction%20to%20Spring%20Cloud%20Load%20Balancer.html","/posts/baeldung/2024-07-08/2024-07-08-Configuring%20Spring%20Cloud%20FeignClient%20URL.html","/posts/baeldung/2024-06-22/2024-06-22-OAuth2%20Backend%20for%20Frontend%20With%20Spring%20Cloud%20Gateway.html","/posts/baeldung/2024-07-12/2024-07-12-Overriding%20the%20Values%20of%20Remote%20Properties%20in%20Spring%20Cloud%20Config.html","/posts/baeldung/2024-07-19/2024-07-19-Spring%20Cloud%20%20%20Disable%20Discovery%20Clients%20with%20Profiles.html","/posts/baeldung/2024-07-08/2024-07-08-Post%20form%20url%20encoded%20Data%20with%20Spring%20Cloud%20Feign.html","/posts/baeldung/2024-07-18/2024-07-18-Introduction%20to%20Spring%20Cloud%20Sidecar.html","/posts/baeldung/2024-07-21/2024-07-21-Retrieve%20Original%20Message%20From%20Feign%20ErrorDecoder.html","/posts/baeldung/2024-07-27/2024-07-27-An%20Intro%20to%20Dapr%20with%20Spring%20Cloud%20Gateway.html","/posts/baeldung/2024-07-21/2024-07-21-Customizing%20Zuul%20Exceptions.html","/posts/baeldung/2024-07-21/2024-07-21-Provide%20an%20OAuth2%20Token%20to%20a%20Feign%20Client.html","/posts/baeldung/2024-07-22/2024-07-22-Keycloak%20Integration%20%20%20OAuth2%20and%20OpenID%20with%20Swagger%20UI.html","/posts/baeldung/2024-06-28/2024-06-28-A%20Guide%20to%20Spring%206%20JdbcClient%20API.html","/posts/baeldung/2024-07-02/2024-07-02-JDBC%20vs.%20R2DBC%20vs.%20Spring%20JDBC%20vs.%20Spring%20Data%20JDBC.html","/posts/baeldung/2024-07-18/2024-07-18-Tomcat%20Warning%20%20To%20Prevent%20a%20Memory%20Leak%20%20the%20JDBC%20Driver%20Has%20Been%20Forcibly%20Unregistered%20.html","/posts/baeldung/2024-07-21/2024-07-21-JDBC%20Connection%20Status.html","/posts/baeldung/2024-07-08/2024-07-08-UUID%20vs.%20Sequential%20ID%20as%20Primary%20Key.html","/posts/baeldung/2024-07-29/2024-07-29-Difference%20Between%20Super%20%20Simplest%20%20and%20Effective%20POM.html","/posts/baeldung/2024-06-23/2024-06-23-Difference%20Between%20mvn%20install%20and%20mvn%20verify.html","/posts/baeldung/2024-06-24/2024-06-24-Maven%20Dependencies%20Failing%20With%20a%20501%20Error%20%20HTTPS%20Required%20.html","/posts/baeldung/Archive/Understanding%20Maven%20Dependency%20Graph%20or%20Tree.html","/posts/baeldung/2024-07-01/2024-07-01-How%20to%20Speed%20Up%20Maven%20Build.html","/posts/baeldung/2024-07-03/2024-07-03-Starting%20the%20Maven%20Build%20From%20the%20Point%20Where%20It%20Failed.html","/posts/baeldung/2024-07-01/2024-07-01-How%20to%20Fix%20%20Error%20in%20Opening%20Zip%20File%20%20When%20Running%20Maven.html","/posts/baeldung/2024-07-16/2024-07-16-Maven%20Snapshot%20Repository%20vs%20Release%20Repository.html","/posts/baeldung/2024-07-27/2024-07-27-Disable%20the%20Maven%20Javadoc%20Plugin.html","/posts/baeldung/2024-07-05/2024-07-05-Different%20Dependency%20Version%20Declarations%20in%20Gradle.html","/posts/baeldung/2024-07-08/2024-07-08-Exclude%20a%20Dependency%20in%20a%20Maven%20Plugin.html","/posts/baeldung/2024-07-17/2024-07-17-A%20Guide%20to%20Maven%20Encoding.html","/posts/baeldung/2024-07-19/2024-07-19-How%20to%20Disable%20a%20Maven%20Plugin%20Defined%20in%20a%20Parent%20POM.html","/posts/baeldung/2024-07-27/2024-07-27-Hosting%20a%20Maven%20Repository%20on%20GitHub.html","/posts/baeldung/2024-07-26/2024-07-26-Connect%20to%20Apache%20Kafka%20Running%20in%20Docker.html","/posts/baeldung/2024-07-12/2024-07-12-Kafka%20s%20Shift%20from%20ZooKeeper%20to%20Kraft.html","/posts/baeldung/2024-06-27/2024-06-27-Ensuring%20Message%20Ordering%20in%20Kafka%20%20Strategies%20and%20Configurations.html","/posts/baeldung/2024-06-27/2024-06-27-Manage%20Kafka%20Consumer%20Groups.html","/posts/baeldung/2024-06-25/2024-06-25-Sending%20Data%20to%20a%20Specific%20Partition%20in%20Kafka.html","/posts/baeldung/Archive/2024-06-21-Commit%20Offsets%20in%20Kafka.html","/posts/baeldung/Archive/2024-06-21-Introduction%20to%20Redpanda.html","/posts/baeldung/2024-07-13/2024-07-13-Message%20Delivery%20Semantics%20in%20Streaming%20Platforms.html","/posts/baeldung/2024-07-02/2024-07-02-Understanding%20Kafka%20Topics%20and%20Partitions.html","/posts/baeldung/2024-06-23/2024-06-23-Apply%20Bold%20Text%20Style%20for%20an%20Entire%20Row%20Using%20Apache%20POI.html","/posts/baeldung/2024-07-25/2024-07-25-Multiline%20Text%20in%20Excel%20Cell%20Using%20Apache%20POI.html","/posts/baeldung/2024-07-27/2024-07-27-Creating%20a%20Self%20Signed%20Certificate%20With%20OpenSSL.html","/posts/baeldung/2024-06-23/2024-06-23-Event%20Driven%20Microservices%20With%20Orkes%20Conductor.html","/posts/baeldung/Archive/2024-06-20-Saga%20Pattern%20in%20a%20Microservices%20Architecture.html","/posts/baeldung/2024-07-14/2024-07-14-Dispatching%20Queries%20in%20Axon%20Framework.html","/posts/baeldung/2024-06-23/2024-06-23-Event%20Externalization%20with%20Spring%20Modulith.html","/posts/baeldung/2024-07-05/2024-07-05-Encoding%20Special%20Characters%20in%20XML.html","/posts/baeldung/2024-07-05/2024-07-05-How%20to%20View%20Logs%20of%20a%20Pod%20in%20Kubernetes%20.html","/posts/baeldung/2024-07-02/2024-07-02-Get%20a%20Continuous%20Stream%20of%20Logs%20for%20Pods%20in%20Kubernetes.html","/posts/baeldung/2024-06-23/2024-06-23-How%20to%20Find%20the%20URL%20of%20a%20Service%20in%20Kubernetes.html","/posts/baeldung/2024-07-07/2024-07-07-Unidirectional%20One%20to%20Many%20and%20Cascading%20Delete%20in%20JPA.html","/posts/baeldung/Archive/Get%20Nextval%20From%20Sequence%20With%20Spring%20JPA.html","/posts/baeldung/2024-07-05/2024-07-05-Correct%20Use%20of%20flush%20%20%20in%20JPA.html","/posts/baeldung/2024-07-29/2024-07-29-How%20to%20Implement%20a%20Soft%20Delete%20with%20Spring%20JPA.html","/posts/baeldung/2024-06-23/2024-06-23-Looking%20for%20a%20Backend%20Java%20Spring%20Team%20Lead%20with%20Integration%20Experience%20%20Remote%20%20%20Part%20Time%20%20%20%20not%20open.html","/posts/baeldung/2024-06-24/2024-06-24-What%20Happens%20When%20the%20JVM%20Runs%20Out%20of%20Memory%20to%20Allocate%20During%20Runtime%20.html","/posts/baeldung/2024-06-24/2024-06-24-Creating%20Reactive%20APIs%20With%20Micronaut%20and%20MongoDB.html","/posts/baeldung/2024-07-20/2024-07-20-Push%20Operations%20in%20MongoDB.html","/posts/baeldung/2024-07-21/2024-07-21-Update%20Documents%20in%20MongoDB.html","/posts/baeldung/2024-07-20/2024-07-20-Guide%20to%20Upsert%20in%20MongoDB.html","/posts/baeldung/2024-07-20/2024-07-20-Retrieve%20a%20Value%20from%20MongoDB%20by%20Its%20Key%20Name.html","/posts/baeldung/2024-07-17/2024-07-17-Count%20Documents%20Using%20Spring%20Data%20MongoDB%20Repository.html","/posts/baeldung/2024-07-16/2024-07-16-Spring%20Data%20MongoDB%20%20%20Configure%20Connection.html","/posts/baeldung/2024-07-18/2024-07-18-Configure%20MongoDB%20Collection%20Name%20for%20a%20Class%20in%20Spring%20Data.html","/posts/baeldung/2024-07-12/2024-07-12-Generate%20Unique%20ObjectId%20in%20MongoDB.html","/posts/baeldung/2024-07-15/2024-07-15-Connect%20to%20Multiple%20Databases%20Using%20Spring%20Data%20MongoDB.html","/posts/baeldung/2024-07-17/2024-07-17-Unique%20Field%20in%20MongoDB%20Document%20in%20Spring%20Data.html","/posts/baeldung/2024-07-10/2024-07-10-Spring%20MVC%20%20%20Mapping%20the%20Root%20URL%20to%20a%20Page.html","/posts/baeldung/2024-07-14/2024-07-14-A%20Guide%20to%20Variables%20in%20Postman.html","/posts/baeldung/2024-07-16/2024-07-16-Import%20Swagger%20APIs%20into%20Postman.html","/posts/baeldung/2024-07-16/2024-07-16-Sending%20SOAP%20Request%20via%20Postman.html","/posts/baeldung/2024-07-17/2024-07-17-Difference%20Between%20form%20data%20%20x%20www%20form%20urlencoded%20and%20raw%20in%20Postman.html","/posts/baeldung/2024-07-18/2024-07-18-Sending%20CSRF%20Token%20From%20Postman%20REST%20Client.html","/posts/baeldung/2024-07-19/2024-07-19-Add%20Header%20to%20Every%20Request%20in%20Postman.html","/posts/baeldung/2024-06-24/2024-06-24-Introduction%20to%20Spring%20AI.html","/posts/baeldung/2024-06-24/2024-06-24-Introduction%20to%20Spring%20Cloud%20AWS%203.0%20%20%20SQS%20Integration.html","/posts/baeldung/2024-07-06/2024-07-06-Cancel%20an%20Ongoing%20Flux%20in%20Spring%20WebFlux.html","/posts/baeldung/2024-06-24/2024-06-24-Upload%20Multiple%20Files%20Using%20WebFlux.html","/posts/baeldung/Archive/2024-06-19-The%20Difference%20Between%20Throwing%20an%20Exception%20and%20Mono.error%20%20%20in%20Spring%20Webflux.html","/posts/baeldung/Archive/How%20to%20Intercept%20a%20Request%20and%20Add%20Headers%20in%20WebFlux.html","/posts/baeldung/Archive/Spring%20WebClient%20exchange%20%20%20vs%20retrieve%20%20.html","/posts/baeldung/2024-07-11/2024-07-11-Stream%20Large%20Byte%20%20%20to%20File%20With%20WebClient.html","/posts/baeldung/2024-07-13/2024-07-13-Comparison%20Between%20Mono%20s%20doOnNext%20%20%20and%20doOnSuccess%20%20.html","/posts/baeldung/2024-06-29/2024-06-29-How%20to%20Support%20UTF%208%20Encoding%20in%20Eclipse.html","/posts/baeldung/2024-06-26/2024-06-26-Connect%20to%20Database%20Through%20Intellij%20Data%20Sources%20and%20Drivers.html","/posts/baeldung/2024-07-14/2024-07-14-Guide%20to%20the%20Storage%20Engine%20in%20Apache%20Cassandra.html","/posts/baeldung/2024-07-09/2024-07-09-Getting%20Started%20With%20RethinkDB.html","/posts/baeldung/2024-07-19/2024-07-19-Liquibase%20vs%20Flyway.html","/posts/baeldung/2024-07-22/2024-07-22-Cassandra%20Query%20Cheat%20Sheet.html","/posts/baeldung/2024-07-23/2024-07-23-Is%20Cassandra%20a%20Column%20Oriented%20or%20Column%20Family%20Database%20.html","/posts/baeldung/2024-07-23/2024-07-23-Replication%20Strategies%20and%20Partitioning%20in%20Cassandra.html","/posts/baeldung/2024-07-24/2024-07-24-Request%20Routing%20and%20Snitches%20in%20Cassandra.html","/posts/baeldung/2024-07-25/2024-07-25-Cassandra%20Frozen%20Keyword.html","/posts/baeldung/2024-07-28/2024-07-28-Cluster%20%20Datacenters%20%20Racks%20and%20Nodes%20in%20Cassandra.html","/posts/baeldung/2024-07-21/2024-07-21-Secondary%20Indexes%20in%20Cassandra.html","/posts/baeldung/2024-07-26/2024-07-26-Cassandra%20Partition%20Key%20%20Composite%20Key%20%20and%20Clustering%20Key.html","/posts/baeldung/2024-06-28/2024-06-28-How%20to%20Set%20Up%20Environment%20Variables%20in%20IntelliJ%20IDEA.html","/posts/baeldung/2024-07-15/2024-07-15-Debugging%20an%20Application%20Running%20in%20Docker%20With%20IntelliJ%20IDEA.html","/posts/baeldung/2024-06-26/2024-06-26-Convert%20an%20XML%20File%20to%20CSV%20File.html","/posts/baeldung/2024-07-02/2024-07-02-Parameterized%20Logging%20With%20SLF4J.html","/posts/baeldung/Archive/How%20to%20Set%20JVM%20Arguments%20in%20IntelliJ%20IDEA%20.html","/posts/baeldung/Archive/Static%20Code%20Analysis%20Using%20Infer.html","/posts/baeldung/2024-07-19/2024-07-19-Gradle%20Build%20Cache%20Basics.html","/posts/baeldung/2024-07-05/2024-07-05-Difference%20Between%20implementation%20and%20compile%20in%20Gradle.html","/posts/baeldung/2024-07-12/2024-07-12-BuildScripts%20Blocks%20in%20Gradle.html","/posts/baeldung/2024-07-29/2024-07-29-Local%20JAR%20Files%20as%20Gradle%20Dependencies.html","/posts/baeldung/2024-06-26/2024-06-26-Spring%20Kafka%20Trusted%20Packages%20Feature.html","/posts/baeldung/2024-07-08/2024-07-08-Spring%20Kafka%20%20Configure%20Multiple%20Listeners%20on%20Same%20Topic.html","/posts/baeldung/2024-06-27/2024-06-27-Asserting%20Nested%20Map%20With%20JUnit.html","/posts/baeldung/2024-06-27/2024-06-27-Gradle%20Proxy%20Configuration.html","/posts/baeldung/Archive/Git%20Integration%20in%20IntelliJ%20IDEA.html","/posts/baeldung/2024-07-04/2024-07-04-Difference%20Between%20get%20%20%20and%20navigate%20%20%20in%20Selenium%20WebDriver.html","/posts/baeldung/2024-07-06/2024-07-06-Retrieve%20the%20Value%20of%20an%20HTML%20Input%20in%20Selenium%20WebDriver.html","/posts/baeldung/2024-06-29/2024-06-29-RSocket%20Interface%20in%20Spring%206.html","/posts/baeldung/Archive/2024-06-20-Implement%20Two%20Level%20Cache%20With%20Spring.html","/posts/baeldung/2024-07-24/2024-07-24-What%20Is%20OncePerRequestFilter%20.html","/posts/baeldung/2024-06-28/2024-06-28-Configuring%20the%20GlassFish%20Server%20in%20Eclipse.html","/posts/baeldung/2024-06-28/2024-06-28-How%20to%20Get%20First%20or%20Last%20Entry%20From%20a%20LinkedHashMap%20in%20Java.html","/posts/baeldung/2024-07-01/2024-07-01-Get%20Values%20and%20Keys%20as%20ArrayList%20From%20a%20HashMap.html","/posts/baeldung/2024-07-14/2024-07-14-Set%20vs%20List%20in%20Java.html","/posts/baeldung/2024-07-25/2024-07-25-Using%20Test%20Containers%20With%20Spring%20Data%20Cassandra.html","/posts/baeldung/2024-06-28/2024-06-28-Localized%20Validation%20Messages%20in%20REST.html","/posts/baeldung/2024-07-15/2024-07-15-How%20to%20Fix%20Git%20%20Refusing%20to%20Merge%20Unrelated%20Histories%20.html","/posts/baeldung/2024-06-29/2024-06-29-Trunk%20Based%20Development.html","/posts/baeldung/2024-07-14/2024-07-14-Using%20HAProxy%20as%20an%20API%20Gateway%20for%20Routing%20and%20Rate%20Limiting.html","/posts/baeldung/2024-07-24/2024-07-24-Logging%20Queries%20with%20Spring%20Data%20Cassandra.html","/posts/baeldung/2024-06-30/2024-06-30-Query%20With%20IN%20Clause%20in%20Spring%20Data%20Cassandra.html","/posts/baeldung/2024-07-15/2024-07-15-Swagger%20%20Specify%20Two%20Responses%20with%20the%20Same%20Response%20Code.html","/posts/baeldung/2024-07-15/2024-07-15-Define%20an%20Array%20of%20Varying%20Types%20in%20OpenAPI.html","/posts/baeldung/2024-07-25/2024-07-25-Format%20Swagger%20Text%20Descriptions.html","/posts/baeldung/2024-07-01/2024-07-01-How%20To%20Rename%20Files%20and%20Folders%20in%20Amazon%20S3.html","/posts/baeldung/2024-07-02/2024-07-02-Escape%20HTML%20Symbols%20in%20Java.html","/posts/baeldung/Archive/How%20to%20Compile%20Java%20to%20WASM%20%20Web%20Assembly%20.html","/posts/baeldung/2024-07-04/2024-07-04-Add%20a%20Checked%20Attribute%20to%20Input%20Conditionally%20in%20Thymeleaf.html","/posts/baeldung/2024-07-17/2024-07-17-Processing%20the%20Response%20Body%20in%20Spring%20Cloud%20Gateway.html","/posts/baeldung/2024-07-26/2024-07-26-Test%20WebSocket%20APIs%20With%20Postman.html","/posts/baeldung/Archive/Disable%20Logging%20From%20a%20Specific%20Class%20in%20Logback.html","/posts/baeldung/2024-07-28/2024-07-28-Enabling%20Logging%20for%20Apache%20HttpClient.html","/posts/baeldung/2024-07-03/2024-07-03-Introduction%20to%20Selenide.html","/posts/baeldung/2024-07-03/2024-07-03-Reading%20a%20JSP%20Variable%20From%20JavaScript.html","/posts/baeldung/2024-07-21/2024-07-21-Check%20if%20a%20User%20Is%20Logged%20in%20With%20Servlets%20and%20JSP.html","/posts/baeldung/2024-07-06/2024-07-06-StaleElementReferenceException%20in%20Selenium.html","/posts/baeldung/2024-07-11/2024-07-11-REST%20vs.%20GraphQL%20vs.%20gRPC%20%20%20Which%20API%20to%20Choose%20.html","/posts/baeldung/Archive/Code%20Coverage%20vs.%20Test%20Coverage.html","/posts/baeldung/2024-07-07/2024-07-07-Functional%20vs.%20Non%20Functional%20Testing.html","/posts/baeldung/2024-07-08/2024-07-08-Load%20Testing%20Rest%20Endpoint%20Using%20Gatling.html","/posts/baeldung/2024-07-04/2024-07-04-Run%20JMeter%20.jmx%20File%20From%20the%20Command%20Line%20and%20Configure%20the%20Report%20File.html","/posts/baeldung/2024-07-26/2024-07-26-Inserting%20Delays%20Between%20Requests%20in%20Apache%20JMeter.html","/posts/baeldung/2024-07-09/2024-07-09-How%20Do%20I%20Generate%20a%20Dashboard%20Report%20in%20JMeter%20.html","/posts/baeldung/2024-07-11/2024-07-11-Running%20Multiple%20Thread%20Groups%20in%20JMeter.html","/posts/baeldung/Archive/Add%20an%20Aggregation%20to%20an%20Elasticsearch%20Query.html","/posts/baeldung/2024-07-26/2024-07-26-Spring%20Data%20with%20ArangoDB.html","/posts/baeldung/2024-07-04/2024-07-04-What%20Is%20Elasticsearch%20.html","/posts/baeldung/2024-07-11/2024-07-11-MongoDB%20vs.%20Couchbase.html","/posts/baeldung/2024-07-05/2024-07-05-Introduction%20to%20MinIO.html","/posts/baeldung/2024-07-06/2024-07-06-Custom%20Protocol%20Mapper%20with%20Keycloak.html","/posts/baeldung/2024-07-06/2024-07-06-Encode%20Passwords%20With%20Spring%20Boot%20CLI.html","/posts/baeldung/2024-07-16/2024-07-16-%20Operation%20vs%20%20ApiResponse%20in%20Swagger.html","/posts/baeldung/2024-07-21/2024-07-21-Document%20Enum%20in%20Swagger.html","/posts/baeldung/Archive/2024-06-20-Finding%20Element%20by%20Attribute%20in%20Selenium.html","/posts/baeldung/2024-07-07/2024-07-07-Implicit%20Wait%20vs%20Explicit%20Wait%20in%20Selenium%20Webdriver.html","/posts/baeldung/2024-07-07/2024-07-07-A%20Guide%20to%20Spring%20Cloud%20Azure%20Key%20Vault.html","/posts/baeldung/2024-07-13/2024-07-13-Redis%20Sentinel%20vs%20Clustering.html","/posts/baeldung/2024-07-08/2024-07-08-How%20to%20Post%20Raw%20Body%20Data%20With%20cURL.html","/posts/baeldung/2024-07-08/2024-07-08-How%20to%20configure%20Redis%20TTL%20with%20Spring%20Data%20Redis%20.html","/posts/baeldung/2024-07-28/2024-07-28-Build%20a%20Dashboard%20With%20Cassandra%20%20Astra%20%20REST%20%20%20GraphQL%20%20%20Recording%20Status%20Updates.html","/posts/baeldung/2024-07-29/2024-07-29-Build%20a%20Dashboard%20Using%20Cassandra%20%20Astra%20%20and%20Stargate.html","/posts/baeldung/2024-07-09/2024-07-09-Guide%20to%20HTTPie%20for%20Terminal.html","/posts/baeldung/2024-07-20/2024-07-20-Basic%20Authentication%20in%20JMeter.html","/posts/baeldung/2024-07-09/2024-07-09-Memory%20Types%20in%20JVM.html","/posts/baeldung/2024-07-24/2024-07-24-Importing%20Maven%20Project%20into%20Eclipse.html","/posts/baeldung/2024-07-28/2024-07-28-Mask%20Sensitive%20Data%20in%20Logs%20With%20Logback.html","/posts/baeldung/2024-07-11/2024-07-11-Rate%20Limiting%20With%20Client%20IP%20in%20Spring%20Cloud%20Gateway.html","/posts/baeldung/2024-07-21/2024-07-21-URL%20Rewriting%20With%20Spring%20Cloud%20Gateway.html","/posts/baeldung/2024-07-22/2024-07-22-Using%20Spring%20Cloud%20Gateway%20with%20OAuth%202.0%20Patterns.html","/posts/baeldung/2024-07-25/2024-07-25-Snapshotting%20Aggregates%20in%20Axon.html","/posts/baeldung/2024-07-13/2024-07-13-How%20to%20Resolve%20Spring%20Webflux%20DataBufferLimitException.html","/posts/baeldung/2024-07-13/2024-07-13-Kotlin%20Spring%20Developer%20to%20help%20with%20brainstorming%20topics%20for%20a%20site%20%20Remote%20%20%20Part%20Time%20.html","/posts/baeldung/2024-07-16/2024-07-16-Spring%20Boot%203%20and%20Spring%20Framework%206.0%20%20%20What%20s%20New.html","/posts/baeldung/2024-07-17/2024-07-17-Spring%20Data%20Rest%20%20%20Serializing%20the%20Entity%20ID.html","/posts/baeldung/2024-07-18/2024-07-18-Building%20Native%20Images%20With%20Spring%20Native%20and%20Liberica%20Tools%20With%20a%20Speed%20Comparison.html","/posts/baeldung/2024-07-18/2024-07-18-How%20to%20Mock%20HttpServletRequest.html","/posts/baeldung/2024-07-18/2024-07-18-Joining%20Tables%20With%20Spring%20Data%20JPA%20Specifications.html","/posts/baeldung/2024-07-20/2024-07-20-SSO%20with%20Apache%20Tomcat.html","/posts/baeldung/2024-07-19/2024-07-19-Spark%20DataFrame.html","/posts/baeldung/Archive/2024-06-20-Guide%20to%20ExecutorService%20vs.%20CompletableFuture.html","/posts/baeldung/2024-07-20/2024-07-20-Acquire%20a%20Lock%20by%20a%20Key%20in%20Java.html","/posts/baeldung/2024-07-20/2024-07-20-Using%20Nginx%20as%20a%20Forward%20Proxy.html","/posts/baeldung/2024-07-22/2024-07-22-Adding%20EventHandler%20to%20JavaFX%20Button.html","/posts/baeldung/2024-07-22/2024-07-22-Hibernate%20Validator%20Annotation%20Processor%20in%20Depth.html","/posts/baeldung/2024-07-22/2024-07-22-Multiple%20Line%20Code%20Example%20in%20Javadoc%20Comment.html","/posts/baeldung/2024-07-27/2024-07-27-Looking%20for%20a%20Java%20Team%20Lead%20with%20Spring%20Experience%20%20Remote%20%20%20Part%20Time%20%20%20not%20open%20.html","/posts/baeldung/2024-07-28/2024-07-28-A%20Comparison%20Between%20JPA%20and%20JDBC.html","/posts/baeldung/2024-07-29/2024-07-29-JVM%20Parameters%20InitialRAMPercentage%20%20MinRAMPercentage%20%20and%20MaxRAMPercentage.html","/posts/baeldung/2024-07-29/2024-07-29-Observability%20in%20Distributed%20Systems.html","/posts/baeldung/Archive/2024-06-21-Intro%20to%20the%20Apache%20Commons%20CLI.html","/posts/baeldung/Archive/Java%E4%B8%AD%E4%B8%8D%E5%90%8C%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%AF%94%E8%BE%83.html","/posts/baeldung/Archive/%E6%8E%A2%E7%B4%A2Java%E4%B8%AD%E5%B0%86%E6%9E%9A%E4%B8%BE%E5%80%BC%E4%BB%8E%E5%B8%B8%E9%87%8F%E4%BC%A0%E9%80%92%E5%88%B0%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%8F%AF%E8%83%BD%E6%80%A7.html","/posts/baeldung/2024-07-29/2024-07-29-Spring%20Validation%20in%20the%20Service%20Layer.html","/posts/baeldung/2024-07-27/2024-07-27-Intro%20to%20Ktorm%20%20ORM%20Framework%20for%20Kotlin.html","/posts/baeldung/2024-07-26/2024-07-26-Fixing%20the%20%20Declared%20package%20does%20not%20match%20the%20expected%20package%20%20Error.html","/posts/baeldung/2024-07-25/2024-07-25-Using%20a%20Custom%20Class%20as%20a%20Key%20in%20a%20Java%20HashMap.html","/posts/baeldung/2024-07-23/2024-07-23-Simulate%20touch%20Command%20in%20Java.html","/posts/baeldung/2024-07-21/2024-07-21-Create%20an%20Empty%20Map%20in%20Java.html","/posts/baeldung/2024-07-21/2024-07-21-Looking%20for%20a%20Java%20Developer%20with%20Spring%20Experience%20%20Remote%20%20%20Part%20Time%20%20%20not%20open%20.html","/posts/baeldung/2024-07-21/2024-07-21-Does%20GC%20Release%20Back%20Memory%20to%20OS%20.html","/posts/baeldung/2024-07-18/2024-07-18-Get%20Domain%20Name%20From%20Given%20URL%20in%20Java.html","/posts/baeldung/2024-07-17/2024-07-17-Kotlin%20Equivalent%20of%20Java%20s%20equalsIgnoreCase%20%20.html","/posts/baeldung/2024-07-08/2024-07-08-TRUNCATE%20TABLE%20in%20Spring%20Data%20JPA.html","/posts/baeldung/2024-07-07/2024-07-07-Get%20All%20Cached%20Keys%20with%20Caffeine%20Cache%20in%20Spring%20Boot.html","/posts/baeldung/2024-07-05/2024-07-05-Configuring%20Gradle%20Tasks%20in%20Spring%20Boot%203.html","/posts/baeldung/2024-07-04/2024-07-04-Spring%20Boot%20Properties%20Prefix%20Must%20Be%20in%20Canonical%20Form.html","/posts/baeldung/2024-07-04/2024-07-04-Hex%20Representation%20of%20a%20SHA%201%20Digest%20of%20a%20String%20in%20Java.html","/posts/baeldung/2024-06-25/2024-06-25-Get%20Client%20Information%20From%20HTTP%20Request%20in%20Java.html","/posts/baeldung/2024-06-21/2024-06-21-Find%20an%20Unique%20Email%20Address%20in%20a%20List.html","/posts/baeldung/2024-06-21/2024-06-21-Iterating%20All%20Fields%20of%20a%20Data%20Class%20Without%20Reflection%20in%20Kotlin.html","/posts/baeldung/Archive/Get%20the%20First%20and%20the%20Last%20Elements%20From%20an%20Array%20in%20Java.html","/posts/articles/mongo-share.html"],Oo=La($1);Et(Oo);const Z2=n=>{const t=fa(),e=da(),s=st();return I(()=>{var l;const o=n??((l=e.value.blog)==null?void 0:l.key)??"";if(!o)return console.warn("useBlogCategory: key not found"),{path:"/",map:{}};if(!Oo.value[o])throw new Error(`useBlogCategory: key ${o} is invalid`);const p=Oo.value[o][s.value],i={path:p.path,map:{}};for(const c in p.map){const u=p.map[c];i.map[c]={path:u.path,items:[]};for(const d of u.indexes){const{path:g,meta:m}=Jn(X2[d]);i.map[c].items.push({path:g,info:m})}t.value.path===u.path&&(i.currentItems=i.map[c].items)}return i})},X1={article:{"/":{path:"/article/",indexes:[0,1411,1,1056,1593,2,1369,3,1347,4,5,6,7,8,1594,1144,1586,1595,9,1212,1425,1157,10,1596,1520,11,12,13,1162,14,15,16,17,18,19,20,1597,21,1394,22,23,1057,24,25,1163,26,27,1598,1599,1600,1058,28,29,30,1452,31,1059,32,33,34,35,1453,36,37,38,39,1454,1455,40,41,42,1060,1497,43,1601,44,1206,1061,1602,45,1164,46,1573,1370,47,1456,1165,48,49,1158,50,51,1457,1062,52,1517,1238,53,54,55,56,57,58,59,60,1063,61,1571,1572,62,63,1064,64,65,1426,1166,66,67,68,69,70,71,1150,72,1562,73,74,75,76,1065,77,78,79,80,81,82,83,1603,84,1445,1066,85,86,1067,1395,87,88,1167,1604,89,1471,90,91,92,93,94,95,1068,1069,1070,96,97,98,99,100,1071,101,102,103,104,105,106,107,108,109,110,1605,111,112,113,114,115,116,1072,1442,117,118,1606,1607,119,120,121,122,123,124,1052,125,126,1073,127,128,129,130,1074,131,132,1526,1443,1075,133,134,1494,1239,135,136,137,138,1525,139,140,141,142,143,144,1168,145,146,1508,147,148,149,150,151,152,153,1169,1518,154,1076,155,156,157,158,159,160,161,1170,1077,1406,162,163,164,165,166,1384,167,1516,168,169,170,171,172,173,174,175,176,177,178,179,1259,180,1078,181,182,1171,1503,183,1260,184,185,186,187,188,189,190,1427,191,1504,192,193,194,1428,195,1172,196,197,198,1261,199,200,201,202,203,204,205,206,207,208,209,210,211,1262,1240,212,213,214,215,216,217,1479,1493,218,219,1151,220,221,222,223,224,225,226,227,228,229,1501,230,231,232,233,234,235,1608,236,1207,1213,237,238,239,1451,240,241,242,1469,243,1450,1241,244,245,246,247,248,1263,249,1379,250,251,252,253,254,255,256,1429,257,258,259,260,261,1434,1363,262,263,1412,264,1079,265,1380,266,267,268,269,270,271,272,273,274,275,276,277,1385,278,1470,1413,279,280,281,282,1472,283,284,1208,1209,285,1381,286,287,288,289,290,1391,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,1437,1440,306,307,1444,308,1264,1050,1449,309,1242,310,311,312,313,314,315,316,1265,1393,317,1210,1080,318,1159,319,320,321,322,1152,323,1243,1244,1364,324,325,326,327,328,329,330,331,332,333,334,1081,335,1173,1392,1174,336,337,338,339,340,341,342,1609,1211,1610,1611,343,1175,344,345,346,347,1082,348,1245,349,350,351,352,353,1214,1266,1083,354,355,1580,356,1509,357,358,359,360,361,362,363,1430,364,365,366,1267,367,1590,1431,368,369,1246,1215,1053,370,371,1084,1176,372,373,374,375,1382,1085,1371,376,377,378,1348,1268,1269,1270,379,380,1554,381,1271,1272,1273,382,1274,383,384,1275,1276,385,1438,1277,1278,1177,1279,386,387,388,389,390,1372,391,1473,392,1538,393,394,395,396,1474,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,1247,422,423,424,1349,425,426,427,428,429,430,431,432,433,434,435,1086,1446,436,1373,437,438,439,440,441,442,1475,443,444,445,446,447,1087,448,449,450,451,452,1350,453,454,455,1351,1178,1051,1545,456,457,458,459,460,1531,461,462,463,464,465,1495,466,467,468,469,470,471,1414,472,473,474,475,476,477,478,479,480,481,1088,482,1248,1089,1612,483,484,1179,485,486,487,488,489,490,1496,491,1591,1592,1521,1458,492,1090,1249,493,1280,1180,494,1281,1149,495,1282,1250,1283,1284,496,497,498,1396,1511,1491,1478,1181,1352,499,1091,500,1092,501,1160,502,503,504,1389,505,506,507,508,509,1093,1527,1094,510,1415,1203,1095,511,512,513,1216,1182,514,1096,515,1183,1365,1533,1097,516,517,1547,518,1416,519,1541,1098,1099,1366,520,521,1353,522,523,1441,1549,524,1386,525,1100,526,1184,527,528,529,530,531,532,1550,1101,533,534,1185,1556,535,1186,536,1505,1285,1540,537,538,1559,1187,1558,1102,1543,539,540,1103,541,542,1462,543,544,545,1537,1544,1104,546,1105,1106,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1153,1301,1302,1303,1304,1305,1306,1307,1202,1308,1309,547,1310,548,1311,1107,1548,1312,1108,1313,1314,549,550,551,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,552,1326,1327,1328,1329,1330,1331,1154,1155,1332,1156,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1109,553,554,555,1463,556,557,558,1432,1557,559,1110,560,1480,1111,1492,1251,1522,561,1204,1464,562,1465,1397,1439,1112,563,564,1466,1417,565,1374,1375,1418,566,567,568,1467,1205,569,570,1419,1579,571,1188,572,1468,573,574,1388,575,1354,1189,576,577,578,1398,579,580,581,582,1190,583,584,585,586,587,588,1191,589,590,591,592,593,594,595,596,1512,597,1217,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,1145,624,625,626,627,628,629,630,631,1218,632,633,634,635,636,637,638,639,640,641,642,643,1113,644,645,646,647,648,649,650,651,652,653,654,655,656,657,1513,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,1407,682,683,1054,684,685,686,1433,687,688,689,690,691,692,693,1252,694,695,696,697,698,699,700,701,702,703,1534,704,705,706,707,708,1528,709,710,711,712,1253,1506,713,714,715,716,1376,717,718,719,1377,720,721,722,1355,723,724,1447,725,1498,726,1420,727,728,729,730,731,732,733,734,1219,1114,735,736,737,738,739,740,1551,741,742,743,744,745,746,747,748,1507,749,1115,1536,750,751,752,753,754,755,756,1254,757,1539,758,759,1555,760,761,762,763,1356,764,1220,765,1367,1116,766,767,768,769,770,771,1421,772,773,774,1399,1117,1502,1221,1410,775,776,777,778,779,780,1255,781,1192,1481,1193,782,1564,783,784,785,786,787,788,789,790,791,792,793,794,795,796,1194,1256,1118,797,798,799,800,1257,801,802,803,804,805,1119,806,807,808,809,810,1120,1222,811,812,813,814,815,816,1567,817,818,819,820,1476,821,822,1223,1499,823,824,825,826,827,828,1459,829,830,831,832,833,1121,834,835,1224,1146,836,837,838,839,840,1477,841,842,843,844,845,846,847,848,849,1195,1122,850,1196,851,1197,852,853,1378,854,855,856,857,858,859,860,861,862,863,864,865,866,1514,867,868,1519,869,870,871,1198,872,873,874,1460,1523,875,876,877,878,1225,879,880,881,1552,882,1226,883,884,885,886,887,888,889,1227,890,1123,891,1422,892,893,894,895,896,897,898,899,1228,1357,900,901,902,903,904,905,906,1390,1529,907,1124,1125,1574,908,1461,909,910,911,1199,1161,1575,912,913,1229,914,915,916,1230,1576,917,1400,918,919,1577,920,921,922,923,1408,924,925,926,927,928,929,930,931,932,1126,933,934,935,1231,1358,1423,936,937,1359,938,939,1482,940,1232,1581,1127,1233,941,1563,1258,942,943,944,945,946,1128,947,948,949,950,951,1582,952,1129,953,1234,954,955,1200,1409,956,957,1401,1235,1568,958,959,1130,1483,960,961,962,1131,963,1147,1360,964,965,966,967,968,969,970,971,972,973,974,1236,975,1484,976,977,1132,1133,978,1485,979,980,981,982,983,984,985,986,987,988,989,990,991,1134,1486,992,1510,1487,993,994,995,996,997,998,999,1e3,1148,1515,1135,1001,1055,1002,1003,1004,1005,1006,1007,1008,1009,1546,1402,1010,1436,1011,1012,1013,1014,1015,1016,1017,1018,1019,1587,1488,1020,1532,1021,1361,1566,1022,1448,1023,1588,1024,1025,1026,1136,1137,1201,1027,1578,1028,1029,1030,1237,1489,1535,1403,1031,1553,1032,1404,1138,1139,1584,1033,1569,1583,1034,1035,1140,1036,1405,1037,1585,1038,1039,1565,1524,1435,1387,1141,1040,1570,1041,1530,1542,1490,1368,1424,1042,1043,1142,1044,1045,1046,1362,1047,1048,1560,1383,1500,1589,1561,1049,1143]}},star:{"/":{path:"/star/",indexes:[]}},timeline:{"/":{path:"/timeline/",indexes:[0,1411,1,1056,1593,2,1369,3,1347,4,5,6,7,8,1594,1144,1586,1595,9,1212,1425,1157,10,1596,1520,11,12,13,1162,14,15,16,17,18,19,20,1597,21,1394,22,23,1057,24,25,1163,26,27,1598,1599,1600,1058,28,29,30,1452,31,1059,32,33,34,35,1453,36,37,38,39,1454,1455,40,41,42,1060,1497,43,1601,44,1206,1061,1602,45,1164,46,1573,1370,47,1456,1165,48,49,1158,50,51,1457,1062,52,1517,1238,53,54,55,56,57,58,59,60,1063,61,1571,1572,62,63,1064,64,65,1426,1166,66,67,68,69,70,71,1150,72,1562,73,74,75,76,1065,77,78,79,80,81,82,83,1603,84,1445,1066,85,86,1067,1395,87,88,1167,1604,89,1471,90,91,92,93,94,95,1068,1069,1070,96,97,98,99,100,1071,101,102,103,104,105,106,107,108,109,110,1605,111,112,113,114,115,116,1072,1442,117,118,1606,1607,119,120,121,122,123,124,1052,125,126,1073,127,128,129,130,1074,131,132,1526,1443,1075,133,134,1494,1239,135,136,137,138,1525,139,140,141,142,143,144,1168,145,146,1508,147,148,149,150,151,152,153,1169,1518,154,1076,155,156,157,158,159,160,161,1170,1077,1406,162,163,164,165,166,1384,167,1516,168,169,170,171,172,173,174,175,176,177,178,179,1259,180,1078,181,182,1171,1503,183,1260,184,185,186,187,188,189,190,1427,191,1504,192,193,194,1428,195,1172,196,197,198,1261,199,200,201,202,203,204,205,206,207,208,209,210,211,1262,1240,212,213,214,215,216,217,1479,1493,218,219,1151,220,221,222,223,224,225,226,227,228,229,1501,230,231,232,233,234,235,1608,236,1207,1213,237,238,239,1451,240,241,242,1469,243,1450,1241,244,245,246,247,248,1263,249,1379,250,251,252,253,254,255,256,1429,257,258,259,260,261,1434,1363,262,263,1412,264,1079,265,1380,266,267,268,269,270,271,272,273,274,275,276,277,1385,278,1470,1413,279,280,281,282,1472,283,284,1208,1209,285,1381,286,287,288,289,290,1391,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,1437,1440,306,307,1444,308,1264,1050,1449,309,1242,310,311,312,313,314,315,316,1265,1393,317,1210,1080,318,1159,319,320,321,322,1152,323,1243,1244,1364,324,325,326,327,328,329,330,331,332,333,334,1081,335,1173,1392,1174,336,337,338,339,340,341,342,1609,1211,1610,1611,343,1175,344,345,346,347,1082,348,1245,349,350,351,352,353,1214,1266,1083,354,355,1580,356,1509,357,358,359,360,361,362,363,1430,364,365,366,1267,367,1590,1431,368,369,1246,1215,1053,370,371,1084,1176,372,373,374,375,1382,1085,1371,376,377,378,1348,1268,1269,1270,379,380,1554,381,1271,1272,1273,382,1274,383,384,1275,1276,385,1438,1277,1278,1177,1279,386,387,388,389,390,1372,391,1473,392,1538,393,394,395,396,1474,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,1247,422,423,424,1349,425,426,427,428,429,430,431,432,433,434,435,1086,1446,436,1373,437,438,439,440,441,442,1475,443,444,445,446,447,1087,448,449,450,451,452,1350,453,454,455,1351,1178,1051,1545,456,457,458,459,460,1531,461,462,463,464,465,1495,466,467,468,469,470,471,1414,472,473,474,475,476,477,478,479,480,481,1088,482,1248,1089,1612,483,484,1179,485,486,487,488,489,490,1496,491,1591,1592,1521,1458,492,1090,1249,493,1280,1180,494,1281,1149,495,1282,1250,1283,1284,496,497,498,1396,1511,1491,1478,1181,1352,499,1091,500,1092,501,1160,502,503,504,1389,505,506,507,508,509,1093,1527,1094,510,1415,1203,1095,511,512,513,1216,1182,514,1096,515,1183,1365,1533,1097,516,517,1547,518,1416,519,1541,1098,1099,1366,520,521,1353,522,523,1441,1549,524,1386,525,1100,526,1184,527,528,529,530,531,532,1550,1101,533,534,1185,1556,535,1186,536,1505,1285,1540,537,538,1559,1187,1558,1102,1543,539,540,1103,541,542,1462,543,544,545,1537,1544,1104,546,1105,1106,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1153,1301,1302,1303,1304,1305,1306,1307,1202,1308,1309,547,1310,548,1311,1107,1548,1312,1108,1313,1314,549,550,551,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,552,1326,1327,1328,1329,1330,1331,1154,1155,1332,1156,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1109,553,554,555,1463,556,557,558,1432,1557,559,1110,560,1480,1111,1492,1251,1522,561,1204,1464,562,1465,1397,1439,1112,563,564,1466,1417,565,1374,1375,1418,566,567,568,1467,1205,569,570,1419,1579,571,1188,572,1468,573,574,1388,575,1354,1189,576,577,578,1398,579,580,581,582,1190,583,584,585,586,587,588,1191,589,590,591,592,593,594,595,596,1512,597,1217,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,1145,624,625,626,627,628,629,630,631,1218,632,633,634,635,636,637,638,639,640,641,642,643,1113,644,645,646,647,648,649,650,651,652,653,654,655,656,657,1513,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,1407,682,683,1054,684,685,686,1433,687,688,689,690,691,692,693,1252,694,695,696,697,698,699,700,701,702,703,1534,704,705,706,707,708,1528,709,710,711,712,1253,1506,713,714,715,716,1376,717,718,719,1377,720,721,722,1355,723,724,1447,725,1498,726,1420,727,728,729,730,731,732,733,734,1219,1114,735,736,737,738,739,740,1551,741,742,743,744,745,746,747,748,1507,749,1115,1536,750,751,752,753,754,755,756,1254,757,1539,758,759,1555,760,761,762,763,1356,764,1220,765,1367,1116,766,767,768,769,770,771,1421,772,773,774,1399,1117,1502,1221,1410,775,776,777,778,779,780,1255,781,1192,1481,1193,782,1564,783,784,785,786,787,788,789,790,791,792,793,794,795,796,1194,1256,1118,797,798,799,800,1257,801,802,803,804,805,1119,806,807,808,809,810,1120,1222,811,812,813,814,815,816,1567,817,818,819,820,1476,821,822,1223,1499,823,824,825,826,827,828,1459,829,830,831,832,833,1121,834,835,1224,1146,836,837,838,839,840,1477,841,842,843,844,845,846,847,848,849,1195,1122,850,1196,851,1197,852,853,1378,854,855,856,857,858,859,860,861,862,863,864,865,866,1514,867,868,1519,869,870,871,1198,872,873,874,1460,1523,875,876,877,878,1225,879,880,881,1552,882,1226,883,884,885,886,887,888,889,1227,890,1123,891,1422,892,893,894,895,896,897,898,899,1228,1357,900,901,902,903,904,905,906,1390,1529,907,1124,1125,1574,908,1461,909,910,911,1199,1161,1575,912,913,1229,914,915,916,1230,1576,917,1400,918,919,1577,920,921,922,923,1408,924,925,926,927,928,929,930,931,932,1126,933,934,935,1231,1358,1423,936,937,1359,938,939,1482,940,1232,1581,1127,1233,941,1563,1258,942,943,944,945,946,1128,947,948,949,950,951,1582,952,1129,953,1234,954,955,1200,1409,956,957,1401,1235,1568,958,959,1130,1483,960,961,962,1131,963,1147,1360,964,965,966,967,968,969,970,971,972,973,974,1236,975,1484,976,977,1132,1133,978,1485,979,980,981,982,983,984,985,986,987,988,989,990,991,1134,1486,992,1510,1487,993,994,995,996,997,998,999,1e3,1148,1515,1135,1001,1055,1002,1003,1004,1005,1006,1007,1008,1009,1546,1402,1010,1436,1011,1012,1013,1014,1015,1016,1017,1018,1019,1587,1488,1020,1532,1021,1361,1566,1022,1448,1023,1588,1024,1025,1026,1136,1137,1201,1027,1578,1028,1029,1030,1237,1489,1535,1403,1031,1553,1032,1404,1138,1139,1584,1033,1569,1583,1034,1035,1140,1036,1405,1037,1585,1038,1039,1565,1524,1435,1387,1141,1040,1570,1041,1530,1542,1490,1368,1424,1042,1043,1142,1044,1045,1046,1362,1047,1048,1560,1383,1500,1589,1561,1049,1143]}}},xo=La(X1);Et(xo);const Rs=n=>{const t=da(),e=st();return I(()=>{var i;const s=n??((i=t.value.blog)==null?void 0:i.key)??"";if(!s)return console.warn("useBlogType: key not found"),{path:"/",items:[]};if(!xo.value[s])throw new Error(`useBlogType: key ${n} is invalid`);const o=xo.value[s][e.value],p={path:o.path,items:[]};for(const l of o.indexes){const{path:c,meta:u}=Jn(X2[l]);p.items.push({path:c,info:u})}return p})},Ap=()=>r(ga,{name:"lock"},()=>r("path",{d:"M787.168 952.268H236.832c-30.395 0-55.033-24.638-55.033-55.033V429.45c0-30.395 24.638-55.034 55.033-55.034h82.55V264.35c0-106.38 86.238-192.618 192.618-192.618S704.618 157.97 704.618 264.35v110.066h82.55c30.395 0 55.033 24.639 55.033 55.034v467.785c0 30.395-24.639 55.033-55.033 55.033zM484.483 672.046v115.122h55.034V672.046c31.99-11.373 55.033-41.605 55.033-77.496 0-45.592-36.958-82.55-82.55-82.55s-82.55 36.958-82.55 82.55c0 35.89 23.042 66.123 55.033 77.496zM622.067 264.35c0-60.788-49.28-110.067-110.067-110.067s-110.067 49.28-110.067 110.067v110.066h220.135V264.35z"}));Ap.displayName="LockIcon";var Z1=[];const Y2=Symbol(""),fp=()=>{const n=ba(Y2);if(!n)throw new Error("useTimeline() is called without provider.");return n},Y1=()=>{const n=Rs("timeline"),t=I(()=>{const e=[];return n.value.items.forEach(({info:s,path:o})=>{const p=rp(s[Na.date]);if(p){const i=p.getFullYear(),l=p.getMonth()+1,c=p.getDate();(!e[0]||e[0].year!==i)&&e.unshift({year:i,items:[]}),e[0].items.push({date:`${l}/${c}`,info:s,path:o})}}),{...n.value,config:e.reverse()}});En(Y2,t)},al=Symbol(""),je=()=>{const n=ba(al);if(!n)throw new Error("useArticles() is called without provider.");return n},ah=()=>{const n=Rs("article");En(al,n)},nl=Symbol.for("categoryMap"),He=()=>{const n=ba(nl);if(!n)throw new Error("useCategoryMap() is called without provider.");return n},nh=()=>{const n=Z2("category");En(nl,n)},tl=Symbol(""),Ip=()=>{const n=ba(tl);if(!n)throw new Error("useStars() is called without provider.");return n},th=()=>{const n=Rs("star");En(tl,n)},el=Symbol.for("tagMap"),Ue=()=>{const n=ba(el);if(!n)throw new Error("useTagMap() is called without provider.");return n},eh=()=>{const n=Z2("tag");En(el,n)},sh=()=>{ah(),nh(),th(),eh(),Y1()},Ne=()=>{const n=fn(),t=pa();return I(()=>({...n.value.blog,...t.value.blog}))},oh=n=>{const t=pa();return I(()=>{const{[Na.author]:e}=n.value;return e?ke(e):e===!1?[]:ke(t.value.author,!1)})},ph=n=>{const t=He();return I(()=>c2(n.value[Na.category]).map(e=>({name:e,path:t.value.map[e].path})))},ih=n=>{const t=Ue();return I(()=>u2(n.value[Na.tag]).map(e=>({name:e,path:t.value.map[e].path})))},rh=n=>I(()=>{const{[Na.date]:t}=n.value;return rp(t)}),lh=n=>{const t=jt(n,"info"),e=Ne(),s=oh(t),o=ph(t),p=ih(t),i=rh(t),l=k2(),c=I(()=>({author:s.value,category:o.value,date:i.value,localizedDate:t.value[Na.localizedDate]??"",tag:p.value,isOriginal:t.value[Na.isOriginal]??!1,readingTime:t.value[Na.readingTime]??null,readingTimeLocale:t.value[Na.readingTime]&&l.value?E2(t.value[Na.readingTime],l.value):null,pageview:n.path})),u=I(()=>e.value.articleInfo);return{info:c,items:u}};var sl=j({name:"SocialMedias",setup(){const n=Ne(),t=Wa(),e=I(()=>xe(n.value.medias??{}).map(([s,o])=>({name:s,icon:Q1[s],url:o})));return()=>e.value.length?r("div",{class:"vp-social-medias"},e.value.map(({name:s,icon:o,url:p})=>r("a",{class:"vp-social-media",href:p,rel:"noopener noreferrer",target:"_blank","aria-label":s||"",...t.value?{}:{"data-balloon-pos":"up"},innerHTML:o}))):null}}),yp=j({name:"BloggerInfo",setup(){const n=Ne(),t=Le(),e=pa(),s=je(),o=He(),p=Ue(),i=fp(),l=At(),c=I(()=>{var m;return n.value.name??((m=ke(e.value.author)[0])==null?void 0:m.name)??t.value.title}),u=I(()=>n.value.avatar??e.value.logo),d=I(()=>e.value.blogLocales),g=I(()=>n.value.intro);return()=>{const{article:m,category:_,tag:v,timeline:A}=d.value,S=[[s.value.path,s.value.items.length,m],[o.value.path,dn(o.value.map).length,_],[p.value.path,dn(p.value.map).length,v],[i.value.path,i.value.items.length,A]];return r("div",{class:"vp-blogger-info",vocab:"https://schema.org/",typeof:"Person"},[r("div",{class:"vp-blogger",...g.value?{"aria-label":d.value.intro,"data-balloon-pos":"down",role:"link",onClick:()=>l(g.value)}:{}},[u.value?r("img",{class:"vp-blogger-avatar",src:ha(u.value),property:"image",alt:"Blogger Avatar",loading:"lazy"}):null,c.value?r("div",{class:"vp-blogger-name",property:"name"},c.value):null,n.value.description?r("div",{class:"vp-blogger-description",innerHTML:n.value.description}):null,g.value?r("meta",{property:"url",content:ha(g.value)}):null]),r("div",{class:"vp-blog-counts"},S.map(([f,y,k])=>r(Pa,{class:"vp-blog-count",to:f},()=>[r("div",{class:"count"},y),r("div",k)]))),r(sl)])}}});const Sp=()=>r(ga,{name:"category"},()=>r("path",{d:"M148.41 106.992h282.176c22.263 0 40.31 18.048 40.31 40.31V429.48c0 22.263-18.047 40.31-40.31 40.31H148.41c-22.263 0-40.311-18.047-40.311-40.31V147.302c0-22.263 18.048-40.31 40.311-40.31zM147.556 553.478H429.73c22.263 0 40.311 18.048 40.311 40.31v282.176c0 22.263-18.048 40.312-40.31 40.312H147.555c-22.263 0-40.311-18.049-40.311-40.312V593.79c0-22.263 18.048-40.311 40.31-40.311zM593.927 106.992h282.176c22.263 0 40.31 18.048 40.31 40.31V429.48c0 22.263-18.047 40.31-40.31 40.31H593.927c-22.263 0-40.311-18.047-40.311-40.31V147.302c0-22.263 18.048-40.31 40.31-40.31zM730.22 920.502H623.926c-40.925 0-74.22-33.388-74.22-74.425V623.992c0-41.038 33.387-74.424 74.425-74.424h222.085c41.038 0 74.424 33.226 74.424 74.067v114.233c0 10.244-8.304 18.548-18.547 18.548s-18.548-8.304-18.548-18.548V623.635c0-20.388-16.746-36.974-37.33-36.974H624.13c-20.585 0-37.331 16.747-37.331 37.33v222.086c0 20.585 16.654 37.331 37.126 37.331H730.22c10.243 0 18.547 8.304 18.547 18.547 0 10.244-8.304 18.547-18.547 18.547z"}));Sp.displayName="CategoryIcon";const bp=()=>r(ga,{name:"tag"},()=>r("path",{d:"M939.902 458.563L910.17 144.567c-1.507-16.272-14.465-29.13-30.737-30.737L565.438 84.098h-.402c-3.215 0-5.726 1.005-7.634 2.913l-470.39 470.39a10.004 10.004 0 000 14.164l365.423 365.424c1.909 1.908 4.42 2.913 7.132 2.913s5.223-1.005 7.132-2.913l470.39-470.39c2.01-2.11 3.014-5.023 2.813-8.036zm-240.067-72.121c-35.458 0-64.286-28.828-64.286-64.286s28.828-64.285 64.286-64.285 64.286 28.828 64.286 64.285-28.829 64.286-64.286 64.286z"}));bp.displayName="TagIcon";const Dp=()=>r(ga,{name:"timeline"},()=>r("path",{d:"M511.997 70.568c-243.797 0-441.429 197.633-441.429 441.435 0 243.797 197.632 441.429 441.43 441.429S953.431 755.8 953.431 512.002c0-243.796-197.637-441.434-441.435-441.434zm150.158 609.093-15.605 15.61c-8.621 8.615-22.596 8.615-31.215 0L472.197 552.126c-4.95-4.944-4.34-14.888-4.34-24.677V247.14c0-12.19 9.882-22.07 22.07-22.07h22.07c12.19 0 22.07 9.882 22.07 22.07v273.218l128.088 128.088c8.62 8.62 8.62 22.595 0 31.215zm0 0"}));Dp.displayName="TimelineIcon";const ol=()=>r(ga,{name:"slides"},()=>r("path",{d:"M896 170.667v426.666a85.333 85.333 0 0 1-85.333 85.334h-256v61.184l192.597 115.584-43.861 73.13-148.736-89.173v95.275h-85.334v-95.318l-148.736 89.216-43.861-73.13 192.597-115.627v-61.141h-256A85.333 85.333 0 0 1 128 597.333V170.667H85.333V85.333h853.334v85.334H896zm-682.667 0v426.666h597.334V170.667H213.333zM426.667 512h-85.334V341.333h85.334V512zm128 0h-85.334V256h85.334v256zm128 0h-85.334V384h85.334v128z"}));ol.displayName="SlideIcon";const pl=()=>r(ga,{name:"sticky"},()=>[r("path",{d:"m381.3 733.8l-161.9 118c-5.9 4.5-13.2 6.6-20.1 6.6-8.7 0-17.7-3.4-24.3-10-12.2-12.2-13.9-31.3-3.5-45.2l144.5-195.5-113.6-112.9c-11.1-11.1-13.2-28.4-5.5-42 5.5-8.7 52.1-76.4 155.5-51 1.8 0.3 3.5 0.3 5.6 0.7 4.2 0.3 9 0.7 14.2 1.7 21.9 3.5 60.8-13.9 94.5-42.7 32.3-27.5 53.1-59.4 53.1-81.6 0-5.2 0-10.8-0.3-16-0.7-20.8-2.1-52.8 21.5-76.4 28.1-28.1 72.9-30.6 103.9-5.2 0.6 0.3 1 1 1.7 1.7 16.7 16.3 187.5 187.2 189.3 188.9 14.5 14.6 22.9 34.4 22.9 55.3 0 20.8-8 40.2-22.9 54.8-23.7 23.6-56 22.6-77.1 21.6-4.9 0-10.5-0.4-15.7-0.4-20.8 0-45.8 14.6-70.5 41.3-34.3 37.5-55.5 85.8-53.8 107.7 0.7 6.9 2.1 19.1 2.4 20.8 25 101.4-42.7 147.6-50.7 152.8-13.9 8.4-31.6 6.3-42.7-4.8l-112.1-112.2z"})]);pl.displayName="StickyIcon";const Os=()=>r(ga,{name:"article"},()=>r("path",{d:"M853.333 938.667H170.667A42.667 42.667 0 0 1 128 896V128a42.667 42.667 0 0 1 42.667-42.667h682.666A42.667 42.667 0 0 1 896 128v768a42.667 42.667 0 0 1-42.667 42.667zm-42.666-85.334V170.667H213.333v682.666h597.334zM298.667 256h170.666v170.667H298.667V256zm0 256h426.666v85.333H298.667V512zm0 170.667h426.666V768H298.667v-85.333zm256-384h170.666V384H554.667v-85.333z"}));Os.displayName="ArticleIcon";const il=()=>r(ga,{name:"book"},()=>r("path",{d:"M256 853.333h426.667A85.333 85.333 0 0 0 768 768V256a85.333 85.333 0 0 0-85.333-85.333H469.333a42.667 42.667 0 0 1 0-85.334h213.334A170.667 170.667 0 0 1 853.333 256v512a170.667 170.667 0 0 1-170.666 170.667H213.333A42.667 42.667 0 0 1 170.667 896V128a42.667 42.667 0 0 1 42.666-42.667h128A42.667 42.667 0 0 1 384 128v304.256l61.653-41.088a42.667 42.667 0 0 1 47.36 0l61.654 41.045V256A42.667 42.667 0 0 1 640 256v256a42.667 42.667 0 0 1-66.347 35.499l-104.32-69.547-104.32 69.547A42.667 42.667 0 0 1 298.667 512V170.667H256v682.666z"}));il.displayName="BookIcon";const rl=()=>r(ga,{name:"link"},()=>r("path",{d:"M460.8 584.533c17.067 17.067 17.067 42.667 0 59.734-17.067 17.066-42.667 17.066-59.733 0-85.334-85.334-85.334-217.6 0-302.934L554.667 192C640 110.933 776.533 110.933 857.6 196.267c81.067 81.066 81.067 213.333 0 294.4l-68.267 64c0-34.134-4.266-68.267-17.066-102.4l21.333-21.334c51.2-46.933 55.467-128 4.267-179.2s-128-55.466-179.2-4.266c-4.267 0-4.267 4.266-4.267 4.266L465.067 401.067c-51.2 51.2-51.2 132.266-4.267 183.466m123.733-183.466C601.6 384 627.2 384 644.267 401.067c85.333 85.333 85.333 217.6 0 302.933l-153.6 149.333C405.333 934.4 268.8 934.4 187.733 849.067c-81.066-81.067-81.066-213.334 0-294.4l68.267-64c0 34.133 4.267 72.533 17.067 102.4L251.733 614.4C204.8 665.6 204.8 746.667 256 793.6c51.2 46.933 123.733 46.933 174.933 0l149.334-149.333c51.2-51.2 51.2-128 0-179.2-12.8-17.067-17.067-46.934 4.266-64z"}));rl.displayName="LinkIcon";const ll=()=>r(ga,{name:"project"},()=>r("path",{d:"M987.456 425.152H864V295.296a36.48 36.48 0 0 0-36.544-36.544h-360l-134.08-128.256A9.344 9.344 0 0 0 327.04 128H36.48A36.48 36.48 0 0 0 0 164.544v676.608a36.48 36.48 0 0 0 36.544 36.544h797.76a36.672 36.672 0 0 0 33.92-22.848L1021.44 475.52a36.48 36.48 0 0 0-33.92-50.304zM82.304 210.304h215.424l136.64 130.752h347.328v84.096H198.848A36.672 36.672 0 0 0 164.928 448L82.304 652.8V210.304zM808.32 795.456H108.544l118.08-292.608h699.904L808.32 795.52z"}));ll.displayName="ProjectIcon";const cl=()=>r(ga,{name:"friend"},()=>r("path",{d:"M860.16 213.333A268.373 268.373 0 0 0 512 186.027a267.52 267.52 0 0 0-348.16 404.48L428.8 855.893a118.613 118.613 0 0 0 166.4 0l264.96-265.386a267.52 267.52 0 0 0 0-377.174zM800 531.627l-264.96 264.96a32.427 32.427 0 0 1-46.08 0L224 530.347a183.04 183.04 0 0 1 0-256 182.187 182.187 0 0 1 256 0 42.667 42.667 0 0 0 60.587 0 182.187 182.187 0 0 1 256 0 183.04 183.04 0 0 1 3.413 256z"}));cl.displayName="FriendIcon";const Bo=()=>r(ga,{name:"slide-down"},()=>r("path",{d:"M108.775 312.23c13.553 0 27.106 3.734 39.153 11.806l375.205 250.338 363.641-252.808c32.587-21.624 76.499-12.83 98.123 19.757 21.685 32.467 12.95 76.56-19.576 98.184l-402.854 278.89c-23.733 15.901-54.694 15.962-78.547.12L69.501 442.097c-32.647-21.685-41.441-65.777-19.817-98.304 13.734-20.54 36.201-31.563 59.09-31.563Z"}));Bo.displayName="SlideDownIcon";const ul=()=>r("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",class:"empty-icon",viewBox:"0 0 1024 1024",innerHTML:'<defs><linearGradient id="f" x1="512.342" y1="2266.13" x2="512.342" y2="666.063" gradientUnits="userSpaceOnUse"><stop offset=".919" stop-color="#e6e6e6" stop-opacity="0"/><stop offset="1" stop-color="#e6e6e6"/></linearGradient><linearGradient id="g" x1="528.912" y1="774" x2="388.088" y2="612" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ccc"/><stop offset="1" stop-color="#e6e6e6" stop-opacity="0"/></linearGradient><linearGradient id="h" x1="213.219" y1="721.704" x2="251.313" y2="683.61" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#d7d7d7"/><stop offset=".485" stop-color="#fafafa"/><stop offset="1" stop-color="#fafafa"/></linearGradient><linearGradient id="i" x1="724.813" y1="821.718" x2="768.656" y2="777.876" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ccc"/><stop offset="1" stop-color="#fafafa"/></linearGradient><linearGradient id="a" x1="513.493" y1="714.594" x2="471.007" y2="544.188" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#999"/><stop offset="1" stop-color="#ccc"/></linearGradient><linearGradient id="b" x1="440.156" y1="564.031" x2="508.594" y2="495.594" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ccc"/><stop offset="1" stop-color="#f0f0f0"/></linearGradient><linearGradient id="l" x1="660.988" y1="754.156" x2="608.637" y2="544.188" xlink:href="#a"/><linearGradient id="m" x1="479.188" y1="774.219" x2="649.782" y2="603.625" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#b3b3b3"/><stop offset="1" stop-color="#e6e6e6"/></linearGradient><linearGradient id="n" x1="447.121" y1="774.219" x2="394.661" y2="563.813" xlink:href="#a"/><linearGradient id="o" x1="494" y1="597" x2="628" y2="463" xlink:href="#b"/><linearGradient id="d" x1="610.485" y1="604.938" x2="697.298" y2="518.125" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ccc"/><stop offset="1" stop-color="#fff"/></linearGradient><linearGradient id="p" x1="457.438" y1="619.25" x2="353.469" y2="619.25" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#e6e6e6" stop-opacity="0"/><stop offset="1" stop-color="#e6e6e6"/></linearGradient><linearGradient id="q" x1="542.734" y1="674.25" x2="615.672" y2="601.313" xlink:href="#b"/><linearGradient id="c" x1="627.933" y1="358.938" x2="685.192" y2="422.531" gradientUnits="userSpaceOnUse"><stop offset=".4" stop-color="#e6e6e6" stop-opacity=".4"/><stop offset=".443" stop-color="#fff"/><stop offset=".6" stop-color="#ccc"/></linearGradient><linearGradient id="r" x1="618.547" y1="422.531" x2="681.547" y2="359.531" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#e6e6e6"/><stop offset=".761" stop-color="#fff"/><stop offset="1" stop-color="#f0f0f0"/></linearGradient><linearGradient id="s" x1="625" y1="441.5" x2="697" y2="369.5" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ccc"/><stop offset=".761" stop-color="#fff"/><stop offset="1" stop-color="#f0f0f0"/></linearGradient><linearGradient id="t" x1="627.681" y1="361.438" x2="692.257" y2="433.156" xlink:href="#c"/><linearGradient id="u" x1="561.414" y1="735.438" x2="573.149" y2="688.375" xlink:href="#d"/><linearGradient id="v" x1="405" y1="485.875" x2="440" y2="450.875" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ccc"/><stop offset="1" stop-color="#fff" stop-opacity=".702"/></linearGradient><linearGradient id="w" x1="404.61" y1="486.906" x2="441.86" y2="449.656" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#ccc"/><stop offset=".495" stop-color="#ccc" stop-opacity=".702"/><stop offset=".498" stop-color="#ccc"/><stop offset="1" stop-color="#fff" stop-opacity=".302"/></linearGradient><radialGradient id="e" cx="329.297" cy="647.578" r="8.172" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="#fafafa"/><stop offset="1.2" stop-color="#e6e6e6"/></radialGradient><radialGradient id="j" cx="802.297" cy="673.578" r="8.172" xlink:href="#e"/><radialGradient id="k" cx="774.844" cy="642.75" r="5.531" xlink:href="#e"/></defs><path d="M512.33 666.07c441.828 0 800 358.18 800 800.03s-358.172 800.02-800 800.02-800-358.18-800-800.02 358.17-800.03 800-800.03z" style="fill:url(#f);fill-rule:evenodd"/><path d="m272 694 242-82 131 119-188 43z" style="fill:url(#g);fill-rule:evenodd"/><path fill="#b3b3b3" fill-rule="evenodd" d="M232.391 723.534a2.4 2.4 0 0 1 2.4 2.4v17.725a2.4 2.4 0 0 1-4.8 0v-17.725a2.4 2.4 0 0 1 2.4-2.4z"/><path d="M232.255 676.559c10.33 0 17.067 15.408 18.7 28.493 1.619 12.942-2.372 23.694-18.7 23.694-16.878 0-20.213-10.733-18.7-23.694 1.633-14.061 8.37-28.493 18.7-28.493z" style="fill:url(#h);fill-rule:evenodd"/><path fill="#b3b3b3" fill-rule="evenodd" d="M745.853 826h.938a2.4 2.4 0 0 1 2.4 2.4v22.238a2.4 2.4 0 0 1-2.4 2.4h-.938a2.4 2.4 0 0 1-2.4-2.4V828.4a2.4 2.4 0 0 1 2.4-2.4z"/><path d="M746.727 830.3c-19.438 0-23.278-9.326-21.541-20.59a34.467 34.467 0 0 1 3.289-10.369 16.628 16.628 0 0 1 0-9.112c2.889-12.327 12.059-20.911 18.356-20.911 6.56 0 15.468 9.1 18.356 20.911a14.589 14.589 0 0 1-.335 9.217 34.36 34.36 0 0 1 3.419 10.264c1.861 11.243-2.735 20.59-21.544 20.59z" style="fill:url(#i);fill-rule:evenodd"/><path fill="#ccc" fill-rule="evenodd" d="M328.841 654.562a6.571 6.571 0 0 0-5.2-5.027q-4.107-.952-.034-2.045a6.571 6.571 0 0 0 5.027-5.2q.952-4.109 2.045-.035a6.569 6.569 0 0 0 5.2 5.027q4.109.954.035 2.045a6.569 6.569 0 0 0-5.027 5.2q-.955 4.108-2.046.035z"/><path d="M328.383 653.73a6.567 6.567 0 0 0-5.2-5.027q-4.109-.954-.035-2.045a6.568 6.568 0 0 0 5.027-5.2q.954-4.107 2.046-.034a6.568 6.568 0 0 0 5.2 5.027q4.107.952.035 2.045a6.568 6.568 0 0 0-5.027 5.2q-.954 4.104-2.046.034z" style="fill:url(#e);fill-rule:evenodd"/><path fill="#ccc" fill-rule="evenodd" d="M801.841 680.562a6.571 6.571 0 0 0-5.2-5.027q-4.107-.952-.034-2.045a6.571 6.571 0 0 0 5.027-5.2q.952-4.109 2.045-.035a6.569 6.569 0 0 0 5.2 5.027q4.108.954.035 2.045a6.569 6.569 0 0 0-5.027 5.2q-.955 4.108-2.046.035z"/><path d="M801.383 679.73a6.567 6.567 0 0 0-5.2-5.027q-4.108-.954-.035-2.045a6.568 6.568 0 0 0 5.027-5.2q.954-4.107 2.046-.034a6.568 6.568 0 0 0 5.2 5.027q4.107.952.035 2.045a6.568 6.568 0 0 0-5.027 5.2q-.954 4.104-2.046.034z" style="fill:url(#j);fill-rule:evenodd"/><path d="M774.21 646.9a4.446 4.446 0 0 0-3.517-3.4q-2.778-.643-.023-1.383a4.443 4.443 0 0 0 3.4-3.517q.645-2.778 1.383-.023a4.443 4.443 0 0 0 3.517 3.4q2.778.645.023 1.383a4.446 4.446 0 0 0-3.4 3.517q-.645 2.78-1.383.023z" style="fill:url(#k);fill-rule:evenodd"/><path d="m385.6 714.6.158-150.658L598.9 544.174l-.158 150.658z" style="fill:url(#a);fill-rule:evenodd"/><path d="m385.474 564.031 214.763-19.383-36.171-49.067-215.559 17.634z" style="fill:url(#b);fill-rule:evenodd"/><path d="m598.744 694.832.156-150.658 71.975 59.319-.158 150.658z" style="fill:url(#l);fill-rule:evenodd"/><path d="m457.064 774.209.158-150.658 214.691-19.914-.158 150.663z" style="fill:url(#m);fill-rule:evenodd"/><path d="m384.566 714.459.158-150.659 72.5 59.75-.158 150.658z" style="fill:url(#n);fill-rule:evenodd"/><path d="M494 640s75.357-58.4 42-83-38.887 1.663-37 14 53.847 12.465 54-26c.2-49.979 75-125 75-125" style="fill:none;stroke-width:3px;stroke-dasharray:12 6;stroke:url(#o);fill-rule:evenodd"/><path d="m670.275 604.939-72.041-59.9 38.476-26.909 72.86 58.159z" style="fill:url(#d);fill-rule:evenodd"/><path d="m425.5 674.383-72.042-59.9 31.109-50.347 72.86 58.16z" style="fill:url(#p);fill-rule:evenodd"/><path d="m487.918 674.235 214.482-22.57-31.1-50.346-215.309 20.833z" style="fill:url(#q);fill-rule:evenodd"/><path style="fill:#fff;fill-rule:evenodd" d="m697.363 358.927-69.58 62.511-12.035 1.082z"/><path d="m697.363 358.927-69.58 62.511-12.035 1.082z" style="fill:url(#c);fill-rule:evenodd"/><path d="M615.748 422.52 604 413l92.089-53.46" style="fill:url(#r);fill-rule:evenodd"/><path d="m625 432 12 18 60-89" style="fill:url(#s);fill-rule:evenodd"/><path d="m626.98 421.335-2.471 11.828 70.918-71.735" style="fill:#fff;fill-rule:evenodd"/><path d="m626.98 421.335-2.471 11.828 70.918-71.735" style="fill:url(#t);fill-rule:evenodd"/><path d="m494.814 735.44 21.293-2.1v-6.613l-13.4 1.319v-6.965l10.977-1.08v-6.613l-10.977 1.08v-6.084l12.917-1.27v-6.525l-20.808 2.047v32.8zM521 732.863l7.054-.694v-11.241a106.361 106.361 0 0 0-1.014-11.274l.176-.017 2.645 7.586 4.453 11.553 4.32-.425 4.408-12.424 2.733-8.116.177-.018a111.811 111.811 0 0 0-1.014 11.474v11.241l7.185-.707V697l-8.552.841-5.025 14.646c-.618 1.956-1.147 4.08-1.808 6.173l-.22.022c-.617-1.968-1.146-3.987-1.808-5.818l-5.2-13.639-8.508.837v32.8zm37.213-3.661 7.891-.776v-10.889l3.835-.377c6.922-.681 12.961-4.714 12.961-12.517 0-8.111-5.951-10.082-13.181-9.371l-11.504 1.128v32.8zm7.891-17.881v-9.478l3.218-.316c3.792-.373 5.908.565 5.908 3.871 0 3.218-1.852 5.208-5.687 5.585zM594 725.682l7.891-.777v-26.274l8.905-.876v-6.524l-25.657 2.524v6.524l8.861-.871v26.274zm27.991-2.754 7.847-.772v-11.594l9.919-22.18-8.244.811-2.733 7.542c-.925 2.56-1.807 4.939-2.733 7.587l-.176.018c-.926-2.466-1.764-4.676-2.645-7.058l-2.734-7-8.375.824 9.874 20.233v11.594z" style="fill:url(#u);fill-rule:evenodd"/><path fill="#ccc" fill-rule="evenodd" d="M408.938 457.309a17.5 17.5 0 0 0 21.374 26.725 17.5 17.5 0 1 1-16.306-30.955 17.442 17.442 0 0 0-5.068 4.23z"/><circle cx="422.5" cy="468.375" r="17.5" style="fill:url(#v)"/><path fill="#ccc" fill-rule="evenodd" d="M391.76 451.5c-2.358 4.419 9.827 15.52 27.215 24.8 15.131 8.071 29.212 12.1 34.166 10.093-4.191 2.772-18.943-1.24-34.86-9.73-17.388-9.275-29.573-20.376-27.215-24.8a2.96 2.96 0 0 1 1.585-1.3 2.606 2.606 0 0 0-.891.937z"/><path d="M418.975 476.29c-17.388-9.275-29.573-20.376-27.215-24.8s18.363-.484 35.751 8.791 29.572 20.376 27.215 24.8-18.364.483-35.751-8.791zm31.634 5.732c1.824-3.42-8.789-12.642-23.7-20.6s-28.486-11.633-30.31-8.213 8.789 12.642 23.7 20.6 28.486 11.633 30.31 8.213zm-36.645-29.008-2.775 1.452.032 1.751 28.637 14.183.266-4.559z" style="fill:url(#w);fill-rule:evenodd"/><g class="people"><path style="fill:#f8cfad;fill-rule:evenodd" d="m612.131 676.5 1.362 3.532 3.255-2.324-1.361-3.532zM629.131 665.5l1.362 3.532 3.255-2.324-1.361-3.532z"/><path style="fill:#141a33;fill-rule:evenodd" d="m617.764 678.184-3.162-.078a11.028 11.028 0 0 0-1.034 3.454c-.258 2.006-1.177 5-.449 5.367 1.5 2.659 4.118-.215 4.118-.215s2.187-2.848 1.925-5.265c-.106-.973-1.181-1.869-1.398-3.263zM633.781 665.855l3.019.945a11.008 11.008 0 0 1-.137 3.6c-.4 1.981-.179 4.166-.986 4.277-2.283 2.03-3.827-1.533-3.827-1.533s-1.473-2.456-.444-4.659c.412-.88 1.718-1.385 2.375-2.63z"/><path style="fill:#f0c5a8;fill-rule:evenodd" d="M599.935 592.534s10.293 9.761 11.95 7.564 3.536-3.463-6.758-13.65z"/><path style="fill:#f8cfad;fill-rule:evenodd" d="M611.3 596.361c1.674-1.105 11.5 7.048 14.5 11.774s-12.705-4.36-14.632-6.776-1.54-3.893.132-4.998z"/><path style="fill:#f8cfad;fill-rule:evenodd" d="M621.815 607.988s1.809 2.549 2.433 1.756 2.475-1.064 2.449-1.138.1-.819 1.288-2.331-3.8-3.632-5.81-.494a2.556 2.556 0 0 0-.36 2.207z"/><path fill="#232c57" fill-rule="evenodd" d="M598 617s14.968-5.618 17 7a150.235 150.235 0 0 1 2 22s12.666 11.836 16 19c0 0-4.753-1.629-4 2 0 0-18.132-14.647-19-19s-9.148-18.716-12-31z"/><path d="M589 622s14.968-5.618 17 7a150.235 150.235 0 0 1 2 22s4.666 17.836 8 25c0 0-4.753-1.629-4 2 0 0-10.132-20.647-11-25s-9.148-18.716-12-31z" style="fill:#292966;fill-rule:evenodd"/><path style="fill:#f0c5a8;fill-rule:evenodd" d="M585.626 597.7s-10.292 9.761-11.95 7.563-3.536-3.463 6.758-13.65z"/><path style="fill:#f8cfad;fill-rule:evenodd" d="M574.259 601.529c-1.675-1.105-11.5 7.049-14.5 11.774s12.7-4.36 14.631-6.775 1.543-3.894-.131-4.999z"/><path style="fill:#f0c5a8;fill-rule:evenodd" d="M591.715 577.752s-.606 1.681 1.48 3.716-3.615 5.307-4.645 2.85-.48-2.716-.48-2.716z"/><path style="fill:#f8cfad;fill-rule:evenodd" d="M583.527 574.123c-.839 1.043.491 3.873 1.453 5.449s2.749 2.833 3.364 2.428 4.088-2.657 4-4-.228-3.4-.228-3.4 2.562-1.641 2.154-2.916-2.916-.154-2.916-.154a15.853 15.853 0 0 0-.227-2.224c-.189-.929-6.887-1.445-7.827 2.6s.558 1.805.227 2.217z"/><path fill="#232c57" fill-rule="evenodd" d="M584.227 567.758c2.1-.885 7.2-3.684 10.125.318s.842 4.385.989 5.294-1.894 5.69-1.341 6.63-3.865.8-4.657-1.179-2.844-.539-2.227-1.224-1.3-4.456-2.916-2.154a9.252 9.252 0 0 0 .309-1.38c-.115.192.259-3.257-.673-1.32s-2.1 1.037-3.069.762-1.8-1.118-1.071-1.689c.023-.016 2.436-3.172 4.531-4.058z"/><path d="M589 585c-2.584-.47-10.055.362-13 13 0 0 1.9 3.349 5 4s6 21 6 21 24.016 11.06 27-3c-.07-13.826-8-21-8-21s5.829-3.2 5-6-8.016-10.153-11-10-6 0-6 0-2.416 2.47-5 2z" style="fill:#f6bb07;fill-rule:evenodd"/><path style="fill:#f8cfad;fill-rule:evenodd" d="M563.284 612.581s-.986 2.965-1.814 2.389-2.678-.3-2.675-.374-.333-.755-1.912-1.854 2.577-4.583 5.414-2.167a2.551 2.551 0 0 1 .987 2.006z"/></g>'});ul.displayName="EmptyIcon";var ch=j({name:"ArticleItem",props:{info:{type:Object,required:!0},path:{type:String,required:!0}},slots:Object,setup(n,{slots:t}){const e=jt(n,"info"),{info:s,items:o}=lh(n);return()=>{var m,_,v;const{[za.title]:p,[Na.type]:i,[Na.isEncrypted]:l=!1,[Na.cover]:c,[Na.excerpt]:u,[Na.sticky]:d}=e.value,g=s.value;return r("div",{class:"vp-article-wrapper"},r("article",{class:"vp-article-item",vocab:"https://schema.org/",typeof:"Article"},[((m=t.cover)==null?void 0:m.call(t,{cover:c}))??(c?[r("img",{class:"vp-article-cover",src:ha(c),alt:"",loading:"lazy"}),r("meta",{property:"image",content:ha(c)})]:[]),d?r(pl):null,r(Pa,{to:n.path},()=>{var A;return((A=t.title)==null?void 0:A.call(t,{title:p,isEncrypted:l,type:i}))??r("header",{class:"vp-article-title"},[l?r(Ap):null,i===b2.slide?r(ol):null,r("span",{property:"headline"},p)])}),((_=t.excerpt)==null?void 0:_.call(t,{excerpt:u}))??(u?r("div",{class:"vp-article-excerpt",innerHTML:u}):null),r("hr",{class:"vp-article-hr"}),((v=t.info)==null?void 0:v.call(t,{info:g}))??r(z2,{info:g,...o.value?{items:o.value}:{}})]))}}}),uh=j({name:"Pagination",props:{total:{type:Number,default:10},perPage:{type:Number,default:10},current:{type:Number,default:1}},emits:["updateCurrentPage"],setup(n,{emit:t}){let e;const s=pa(),o=X(""),p=I(()=>s.value.paginationLocales),i=I(()=>Math.ceil(n.total/n.perPage)),l=I(()=>!!i.value&&i.value!==1),c=I(()=>i.value<7?!1:n.current>4),u=I(()=>i.value<7?!1:n.current<i.value-3),d=I(()=>{const{current:_}=n;let v=1,A=i.value;const S=[];i.value>=7&&(_<=4&&_<i.value-3?(v=1,A=5):_>4&&_>=i.value-3?(A=i.value,v=i.value-4):i.value>7&&(v=_-2,A=_+2));for(let f=v;f<=A;f++)S.push(f);return S}),g=_=>t("updateCurrentPage",_),m=_=>{const v=parseInt(_,10);v<=i.value&&v>0?g(v):e.pop(`<svg viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg" width="16" height="16"><path d="M64 512a448 448 0 1 0 896 0 448 448 0 1 0-896 0Z" fill="#FA5151"/><path d="m557.3 512 113.1-113.1c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L512 466.7 398.9 353.6c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L466.7 512 353.6 625.1c-12.5 12.5-12.5 32.8 0 45.3 6.2 6.2 14.4 9.4 22.6 9.4s16.4-3.1 22.6-9.4L512 557.3l113.1 113.1c6.2 6.2 14.4 9.4 22.6 9.4s16.4-3.1 22.6-9.4c12.5-12.5 12.5-32.8 0-45.3L557.3 512z" fill="#FFF"/></svg>${p.value.errorText.replace(/\$page/gu,i.value.toString())}`)};return Ea(()=>{e=new s_}),()=>r("div",{class:"vp-pagination"},l.value?r("nav",{class:"vp-pagination-list"},[r("div",{class:"vp-pagination-number "},[n.current>1?r("div",{class:"prev",role:"navigation",unselectable:"on",onClick:()=>g(n.current-1)},p.value.prev):null,c.value?[r("div",{role:"navigation",onClick:()=>g(1)},1),r("div",{class:"ellipsis"},"...")]:null,d.value.map(_=>r("div",{key:_,class:{active:n.current===_},role:"navigation",onClick:()=>g(_)},_)),u.value?[r("div",{class:"ellipsis"},"..."),r("div",{role:"navigation",onClick:()=>g(i.value)},i.value)]:null,n.current<i.value?r("div",{class:"next",role:"navigation",unselectable:"on",onClick:()=>g(n.current+1)},p.value.next):null]),r("div",{class:"vp-pagination-nav"},[r("label",{for:"navigation-text"},`${p.value.navigate}: `),r("input",{id:"navigation-text",value:o.value,onInput:({target:_})=>{o.value=_.value},onKeydown:_=>{_.key==="Enter"&&(_.preventDefault(),m(o.value))}}),r("button",{class:"vp-pagination-button",type:"button",role:"navigation",title:p.value.action,onClick:()=>m(o.value)},p.value.action)])]):[])}}),Jp=j({name:"ArticleList",props:{items:{type:Array,default:()=>[]}},setup(n){const t=Mn(),e=kt(),s=Ne(),o=X(1),p=I(()=>s.value.articlePerPage??10),i=I(()=>n.items.slice((o.value-1)*p.value,o.value*p.value)),l=async c=>{o.value=c;const u={...t.query};!(u.page===c.toString()||c===1&&!u.page)&&(c===1?delete u.page:u.page=c.toString(),await e.push({path:t.path,query:u}))};return Ea(()=>{const{page:c}=t.query;l(c?Number(c):1),ua(o,()=>{const u=document.querySelector("#article-list").getBoundingClientRect().top+window.scrollY;setTimeout(()=>{window.scrollTo(0,u)},100)})}),()=>r("div",{id:"article-list",class:"vp-article-list",role:"feed"},i.value.length?[...i.value.map(({info:c,path:u},d)=>r(sa,{appear:!0,delay:d*.04},()=>r(ch,{key:u,info:c,path:u}))),r(uh,{current:o.value,perPage:p.value,total:n.items.length,onUpdateCurrentPage:l})]:r(ul))}});console.log(ot);var dl=j({name:"CategoryList",setup(){const n=fa(),t=He();return()=>r("ul",{class:"vp-category-list"},xe(t.value.map).sort(([,e],[,s])=>s.items.length-e.items.length).map(([e,{path:s,items:o}])=>r("li",{class:["vp-category",`color${Ve(e,Number(ot.colorNumber))}`,{active:s===n.value.path}]},r(Pa,{to:s},()=>[e,r("span",{class:"count"},o.length)]))))}}),gl=j({name:"TagList",setup(){const n=da(),t=Ue(),e=s=>{var o;return s===((o=n.value.blog)==null?void 0:o.name)};return()=>r("ul",{class:"tag-list-wrapper"},xe(t.value.map).sort(([,s],[,o])=>o.items.length-s.items.length).map(([s,{path:o,items:p}])=>r("li",{class:["tag",`color${Ve(s,Number(ot.colorNumber))}`,{active:e(s)}]},r(Pa,{to:o},()=>[s,r("span",{class:"tag-num"},p.length)]))))}}),dh=j({name:"TimelineList",setup(){const n=pa(),t=fp(),e=At(),s=I(()=>n.value.blogLocales.timeline);return()=>r("div",{class:"timeline-list-wrapper"},[r("div",{class:"timeline-list-title",onClick:()=>e(t.value.path)},[r(Dp),r("span",{class:"num"},t.value.items.length),s.value]),r("hr"),r("div",{class:"timeline-content"},r("ul",{class:"timeline-list"},t.value.config.map(({year:o,items:p},i)=>r(sa,{appear:!0,delay:.08*(i+1)},()=>r("li",[r("h3",{class:"timeline-year"},o),r("ul",{class:"timeline-year-wrapper"},p.map(({date:l,info:c,path:u})=>r("li",{class:"timeline-item"},[r("span",{class:"timeline-date"},l),r(Pa,{class:"timeline-title",to:u},()=>c[za.title])])))])))))])}});const gh={article:Os,category:Sp,tag:bp,timeline:Dp};var ml=j({name:"InfoList",setup(){const n=pa(),t=je(),e=He(),s=I(()=>dn(e.value.map).length),o=Ip(),p=Ue(),i=I(()=>dn(p.value.map).length),l=At(),c=X("article"),u=I(()=>n.value.blogLocales);return()=>r("div",{class:"vp-blog-infos"},[r("div",{class:"vp-blog-type-switcher"},xe(gh).map(([d,g])=>r("button",{type:"button",class:"vp-blog-type-button",onClick:()=>{c.value=d}},r("div",{class:["icon-wrapper",{active:c.value===d}],"aria-label":u.value[d],"data-balloon-pos":"up"},r(g))))),r(sa,()=>c.value==="article"?r("div",{class:"vp-star-article-wrapper"},[r("div",{class:"title",onClick:()=>l(t.value.path)},[r(Os),r("span",{class:"num"},t.value.items.length),u.value.article]),r("hr"),o.value.items.length?r("ul",{class:"vp-star-articles"},o.value.items.map(({info:d,path:g},m)=>r(sa,{appear:!0,delay:.08*(m+1)},()=>r("li",{class:"vp-star-article"},r(Pa,{to:g},()=>d[za.title]))))):r("div",{class:"vp-star-article-empty"},u.value.empty.replace("$text",u.value.star))]):c.value==="category"?r("div",{class:"vp-category-wrapper"},[s.value?[r("div",{class:"title",onClick:()=>l(e.value.path)},[r(Sp),r("span",{class:"num"},s.value),u.value.category]),r("hr"),r(sa,{delay:.04},()=>r(dl))]:r("div",{class:"vp-category-empty"},u.value.empty.replace("$text",u.value.category))]):c.value==="tag"?r("div",{class:"vp-tag-wrapper"},[i.value?[r("div",{class:"title",onClick:()=>l(p.value.path)},[r(bp),r("span",{class:"num"},i.value),u.value.tag]),r("hr"),r(sa,{delay:.04},()=>r(gl))]:r("div",{class:"vp-tag-empty"},u.value.empty.replace("$text",u.value.tag))]):r(sa,()=>r(dh)))])}}),xs=j({name:"BlogWrapper",slots:Object,setup(n,{slots:t}){const{isMobile:e}=Me();return()=>[r(Ep),r(vp,{noSidebar:!0,noToc:!0},{default:()=>t.default(),navScreenBottom:()=>r(yp),sidebar:e.value?()=>r(ml):null})]}});const Ke=()=>r("aside",{class:"vp-blog-info-wrapper"},[r(sa,()=>r(yp)),r(sa,{delay:.04},()=>r(ml))]);Ke.displayName="InfoPanel";var mh=j({name:"BlogPage",setup(){const n=fa(),t=da(),e=He(),s=Ue();return()=>{const{key:o="",name:p=""}=t.value.blog||{},i=p?o==="category"?e.value.map[p].items:o==="tag"?s.value.map[p].items:[]:[];return r(xs,()=>r("div",{class:"vp-page vp-blog"},r("div",{class:"blog-page-wrapper"},[r("main",{id:"main-content",class:"vp-blog-main"},[r(sa,()=>o==="category"?r(dl):o==="tag"?r(gl):null),p?r(sa,{appear:!0,delay:.24},()=>r(Jp,{key:n.value.path,items:i})):null]),r(sa,{delay:.16},()=>r(Ke,{key:"blog"}))])))}}});const _h="//theme-hope-assets.vuejs.press/hero/default.jpg";var hh=j({name:"BlogHero",slots:Object,setup(n,{slots:t}){const e=da(),s=Le(),o=La(),p=I(()=>e.value.heroFullScreen??!1),i=I(()=>{const{heroText:c,heroImage:u,heroImageDark:d,heroAlt:g,heroImageStyle:m,tagline:_}=e.value;return{text:c??s.value.title??"Hello",tagline:_??"",image:u?ha(u):null,imageDark:d?ha(d):null,alt:g??c??"",imageStyle:m,isFullScreen:p.value}}),l=I(()=>{const{bgImage:c,bgImageDark:u,bgImageStyle:d}=e.value;return{image:Da(c)?ha(c):c===!1?null:_h,imageDark:Da(u)?ha(u):null,bgStyle:d,isFullScreen:p.value}});return()=>{var c,u;return e.value.hero===!1?null:r("div",{ref:o,class:["vp-blog-hero",{fullscreen:p.value,"no-bg":!l.value.image}]},[((c=t.bg)==null?void 0:c.call(t,l.value))??[l.value.image?r("div",{class:["vp-blog-mask",{light:l.value.imageDark}],style:[{background:`url(${l.value.image}) center/cover no-repeat`},l.value.bgStyle]}):null,l.value.imageDark?r("div",{class:"vp-blog-mask dark",style:[{background:`url(${l.value.imageDark}) center/cover no-repeat`},l.value.bgStyle]}):null],((u=t.info)==null?void 0:u.call(t,i.value))??[r(sa,{appear:!0,type:"group",delay:.04},()=>{const{image:d,imageDark:g,imageStyle:m,alt:_}=i.value;return[d?r("img",{key:"light",class:["vp-blog-hero-image",{light:g}],style:m,src:d,alt:_}):null,g?r("img",{key:"dark",class:"vp-blog-hero-image dark",style:m,src:g,alt:_}):null]}),r(sa,{appear:!0,delay:.08},()=>i.value.text?r("h1",{class:"vp-blog-hero-title"},i.value.text):null),r(sa,{appear:!0,delay:.12},()=>i.value.tagline?r("p",{class:"vp-blog-hero-description",innerHTML:i.value.tagline}):null)],i.value.isFullScreen?r("button",{type:"button",class:"slide-down-button",onClick:()=>{window.scrollTo({top:o.value.clientHeight,behavior:"smooth"})}},[r(Bo),r(Bo)]):null])}}});const vh=["link","article","book","project","friend"];var Eh=j({name:"ProjectPanel",components:{ArticleIcon:Os,BookIcon:il,FriendIcon:cl,LinkIcon:rl,ProjectIcon:ll},props:{items:{type:Array,required:!0}},setup(n){const t=Wa(),e=At(),s=(o="",p="icon")=>vh.includes(o)?r(cn(`${o}-icon`)):et(o)?r("img",{class:"vp-project-image",src:o,alt:p}):Be(o)?r("img",{class:"vp-project-image",src:ha(o),alt:p}):r(Ha,{icon:o});return()=>r("div",{class:"vp-project-panel"},n.items.map(({icon:o,link:p,name:i,desc:l,background:c})=>r("div",{class:["vp-project-card",{[`color${Ve(i,Number(ot.colorNumber))}`]:!t.value&&!c}],...c?{style:c}:{},onClick:()=>e(p)},[s(o,i),r("div",{class:"vp-project-name"},i),r("div",{class:"vp-project-desc"},l)])))}}),kh=j({name:"BlogHomePage",setup(){const n=je(),t=da(),e=I(()=>t.value.projects??[]);return()=>r("div",{class:"vp-page vp-blog"},[r(hh),r("div",{class:"blog-page-wrapper"},[r("main",{id:"main-content",class:"vp-blog-main"},[e.value.length?r(sa,{appear:!0,delay:.16},()=>r(Eh,{items:e.value})):null,r(sa,{appear:!0,delay:.24},()=>r(Jp,{items:n.value.items}))]),r(sa,{appear:!0,delay:.16},()=>r(Ke,{key:"blog"}))]),r(sa,{appear:!0,delay:.28},()=>r(Mt))])}});const _l=()=>r(xs,()=>r(kh));_l.displayName="BlogHome";var Ah=_l,fh=j({name:"ArticleType",setup(){const n=fa(),t=st(),e=pa(),s=je(),o=Ip(),p=I(()=>{const i=e.value.blogLocales;return[{text:i.all,path:s.value.path},{text:i.star,path:o.value.path},...Z1.map(({key:l,path:c})=>({text:i[l],path:c.replace(/^\//,t.value)}))]});return()=>r("ul",{class:"vp-article-type-wrapper"},p.value.map(i=>r("li",{class:["vp-article-type",{active:i.path===n.value.path}]},r(Pa,{to:i.path},()=>i.text))))}}),Ih=j({name:"BlogPage",setup(){const n=Rs(),t=da(),e=fa(),s=je(),o=Ip(),p=I(()=>{const{key:i="",type:l}=t.value.blog||{};return i==="star"?o.value.items:l==="type"&&i?n.value.items:s.value.items});return()=>r(xs,()=>r("div",{class:"vp-page vp-blog"},r("div",{class:"blog-page-wrapper"},[r("main",{id:"main-content",class:"vp-blog-main"},[r(sa,()=>r(fh)),r(sa,{appear:!0,delay:.24},()=>r(Jp,{key:e.value.path,items:p.value}))]),r(sa,{delay:.16},()=>r(Ke,{key:"blog"}))])))}}),yh=j({name:"TimelineItems",setup(){const n=Ne(),t=pa(),e=fp(),s=I(()=>n.value.timeline??t.value.blogLocales.timelineTitle),o=I(()=>e.value.config.map(({year:p})=>({title:p.toString(),level:2,slug:p.toString(),children:[]})));return()=>r("div",{class:"timeline-wrapper"},r("ul",{class:"timeline-content"},[r(sa,()=>r("li",{class:"motto"},s.value)),r(q2,{items:o.value}),e.value.config.map(({year:p,items:i},l)=>r(sa,{appear:!0,delay:.08*(l+1),type:"group"},()=>[r("h3",{key:"title",id:p,class:"timeline-year-title"},r("span",p)),r("li",{key:"content",class:"timeline-year-list"},[r("ul",{class:"timeline-year-wrapper"},i.map(({date:c,info:u,path:d})=>r("li",{class:"timeline-item"},[r("span",{class:"timeline-date"},c),r(Pa,{class:"timeline-title",to:d},()=>u[za.title])])))])]))]))}});const hl=()=>r(xs,()=>r("div",{class:"vp-page vp-blog"},r("div",{class:"blog-page-wrapper"},[r("main",{id:"main-content",class:"vp-blog-main"},[r(sa,{appear:!0,delay:.24},()=>r(yh))]),r(sa,{delay:.16},()=>r(Ke,{key:"blog"}))])));hl.displayName="Timeline";var Sh=hl,bh={};const It="./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""),oo=Array.from({length:64},(n,t)=>t),os=n=>Array(n).fill(-1),Nn=[...os(46),0,1,...oo.slice(54,64),...os(7),...oo.slice(2,28),...os(6),...oo.slice(28,54),...os(5)],$i=[608135816,2242054355,320440878,57701188,2752067618,698298832,137296536,3964562569,1160258022,953160567,3193202383,887688300,3232508343,3380367581,1065670069,3041331479,2450970073,2306472731],Xi=[3509652390,2564797868,805139163,3491422135,3101798381,1780907670,3128725573,4046225305,614570311,3012652279,134345442,2240740374,1667834072,1901547113,2757295779,4103290238,227898511,1921955416,1904987480,2182433518,2069144605,3260701109,2620446009,720527379,3318853667,677414384,3393288472,3101374703,2390351024,1614419982,1822297739,2954791486,3608508353,3174124327,2024746970,1432378464,3864339955,2857741204,1464375394,1676153920,1439316330,715854006,3033291828,289532110,2706671279,2087905683,3018724369,1668267050,732546397,1947742710,3462151702,2609353502,2950085171,1814351708,2050118529,680887927,999245976,1800124847,3300911131,1713906067,1641548236,4213287313,1216130144,1575780402,4018429277,3917837745,3693486850,3949271944,596196993,3549867205,258830323,2213823033,772490370,2760122372,1774776394,2652871518,566650946,4142492826,1728879713,2882767088,1783734482,3629395816,2517608232,2874225571,1861159788,326777828,3124490320,2130389656,2716951837,967770486,1724537150,2185432712,2364442137,1164943284,2105845187,998989502,3765401048,2244026483,1075463327,1455516326,1322494562,910128902,469688178,1117454909,936433444,3490320968,3675253459,1240580251,122909385,2157517691,634681816,4142456567,3825094682,3061402683,2540495037,79693498,3249098678,1084186820,1583128258,426386531,1761308591,1047286709,322548459,995290223,1845252383,2603652396,3431023940,2942221577,3202600964,3727903485,1712269319,422464435,3234572375,1170764815,3523960633,3117677531,1434042557,442511882,3600875718,1076654713,1738483198,4213154764,2393238008,3677496056,1014306527,4251020053,793779912,2902807211,842905082,4246964064,1395751752,1040244610,2656851899,3396308128,445077038,3742853595,3577915638,679411651,2892444358,2354009459,1767581616,3150600392,3791627101,3102740896,284835224,4246832056,1258075500,768725851,2589189241,3069724005,3532540348,1274779536,3789419226,2764799539,1660621633,3471099624,4011903706,913787905,3497959166,737222580,2514213453,2928710040,3937242737,1804850592,3499020752,2949064160,2386320175,2390070455,2415321851,4061277028,2290661394,2416832540,1336762016,1754252060,3520065937,3014181293,791618072,3188594551,3933548030,2332172193,3852520463,3043980520,413987798,3465142937,3030929376,4245938359,2093235073,3534596313,375366246,2157278981,2479649556,555357303,3870105701,2008414854,3344188149,4221384143,3956125452,2067696032,3594591187,2921233993,2428461,544322398,577241275,1471733935,610547355,4027169054,1432588573,1507829418,2025931657,3646575487,545086370,48609733,2200306550,1653985193,298326376,1316178497,3007786442,2064951626,458293330,2589141269,3591329599,3164325604,727753846,2179363840,146436021,1461446943,4069977195,705550613,3059967265,3887724982,4281599278,3313849956,1404054877,2845806497,146425753,1854211946,1266315497,3048417604,3681880366,3289982499,290971e4,1235738493,2632868024,2414719590,3970600049,1771706367,1449415276,3266420449,422970021,1963543593,2690192192,3826793022,1062508698,1531092325,1804592342,2583117782,2714934279,4024971509,1294809318,4028980673,1289560198,2221992742,1669523910,35572830,157838143,1052438473,1016535060,1802137761,1753167236,1386275462,3080475397,2857371447,1040679964,2145300060,2390574316,1461121720,2956646967,4031777805,4028374788,33600511,2920084762,1018524850,629373528,3691585981,3515945977,2091462646,2486323059,586499841,988145025,935516892,3367335476,2599673255,2839830854,265290510,3972581182,2759138881,3795373465,1005194799,847297441,406762289,1314163512,1332590856,1866599683,4127851711,750260880,613907577,1450815602,3165620655,3734664991,3650291728,3012275730,3704569646,1427272223,778793252,1343938022,2676280711,2052605720,1946737175,3164576444,3914038668,3967478842,3682934266,1661551462,3294938066,4011595847,840292616,3712170807,616741398,312560963,711312465,1351876610,322626781,1910503582,271666773,2175563734,1594956187,70604529,3617834859,1007753275,1495573769,4069517037,2549218298,2663038764,504708206,2263041392,3941167025,2249088522,1514023603,1998579484,1312622330,694541497,2582060303,2151582166,1382467621,776784248,2618340202,3323268794,2497899128,2784771155,503983604,4076293799,907881277,423175695,432175456,1378068232,4145222326,3954048622,3938656102,3820766613,2793130115,2977904593,26017576,3274890735,3194772133,1700274565,1756076034,4006520079,3677328699,720338349,1533947780,354530856,688349552,3973924725,1637815568,332179504,3949051286,53804574,2852348879,3044236432,1282449977,3583942155,3416972820,4006381244,1617046695,2628476075,3002303598,1686838959,431878346,2686675385,1700445008,1080580658,1009431731,832498133,3223435511,2605976345,2271191193,2516031870,1648197032,4164389018,2548247927,300782431,375919233,238389289,3353747414,2531188641,2019080857,1475708069,455242339,2609103871,448939670,3451063019,1395535956,2413381860,1841049896,1491858159,885456874,4264095073,4001119347,1565136089,3898914787,1108368660,540939232,1173283510,2745871338,3681308437,4207628240,3343053890,4016749493,1699691293,1103962373,3625875870,2256883143,3830138730,1031889488,3479347698,1535977030,4236805024,3251091107,2132092099,1774941330,1199868427,1452454533,157007616,2904115357,342012276,595725824,1480756522,206960106,497939518,591360097,863170706,2375253569,3596610801,1814182875,2094937945,3421402208,1082520231,3463918190,2785509508,435703966,3908032597,1641649973,2842273706,3305899714,1510255612,2148256476,2655287854,3276092548,4258621189,236887753,3681803219,274041037,1734335097,3815195456,3317970021,1899903192,1026095262,4050517792,356393447,2410691914,3873677099,3682840055,3913112168,2491498743,4132185628,2489919796,1091903735,1979897079,3170134830,3567386728,3557303409,857797738,1136121015,1342202287,507115054,2535736646,337727348,3213592640,1301675037,2528481711,1895095763,1721773893,3216771564,62756741,2142006736,835421444,2531993523,1442658625,3659876326,2882144922,676362277,1392781812,170690266,3921047035,1759253602,3611846912,1745797284,664899054,1329594018,3901205900,3045908486,2062866102,2865634940,3543621612,3464012697,1080764994,553557557,3656615353,3996768171,991055499,499776247,1265440854,648242737,3940784050,980351604,3713745714,1749149687,3396870395,4211799374,3640570775,1161844396,3125318951,1431517754,545492359,4268468663,3499529547,1437099964,2702547544,3433638243,2581715763,2787789398,1060185593,1593081372,2418618748,4260947970,69676912,2159744348,86519011,2512459080,3838209314,1220612927,3339683548,133810670,1090789135,1078426020,1569222167,845107691,3583754449,4072456591,1091646820,628848692,1613405280,3757631651,526609435,236106946,48312990,2942717905,3402727701,1797494240,859738849,992217954,4005476642,2243076622,3870952857,3732016268,765654824,3490871365,2511836413,1685915746,3888969200,1414112111,2273134842,3281911079,4080962846,172450625,2569994100,980381355,4109958455,2819808352,2716589560,2568741196,3681446669,3329971472,1835478071,660984891,3704678404,4045999559,3422617507,3040415634,1762651403,1719377915,3470491036,2693910283,3642056355,3138596744,1364962596,2073328063,1983633131,926494387,3423689081,2150032023,4096667949,1749200295,3328846651,309677260,2016342300,1779581495,3079819751,111262694,1274766160,443224088,298511866,1025883608,3806446537,1145181785,168956806,3641502830,3584813610,1689216846,3666258015,3200248200,1692713982,2646376535,4042768518,1618508792,1610833997,3523052358,4130873264,2001055236,3610705100,2202168115,4028541809,2961195399,1006657119,2006996926,3186142756,1430667929,3210227297,1314452623,4074634658,4101304120,2273951170,1399257539,3367210612,3027628629,1190975929,2062231137,2333990788,2221543033,2438960610,1181637006,548689776,2362791313,3372408396,3104550113,3145860560,296247880,1970579870,3078560182,3769228297,1714227617,3291629107,3898220290,166772364,1251581989,493813264,448347421,195405023,2709975567,677966185,3703036547,1463355134,2715995803,1338867538,1343315457,2802222074,2684532164,233230375,2599980071,2000651841,3277868038,1638401717,4028070440,3237316320,6314154,819756386,300326615,590932579,1405279636,3267499572,3150704214,2428286686,3959192993,3461946742,1862657033,1266418056,963775037,2089974820,2263052895,1917689273,448879540,3550394620,3981727096,150775221,3627908307,1303187396,508620638,2975983352,2726630617,1817252668,1876281319,1457606340,908771278,3720792119,3617206836,2455994898,1729034894,1080033504,976866871,3556439503,2881648439,1522871579,1555064734,1336096578,3548522304,2579274686,3574697629,3205460757,3593280638,3338716283,3079412587,564236357,2993598910,1781952180,1464380207,3163844217,3332601554,1699332808,1393555694,1183702653,3581086237,1288719814,691649499,2847557200,2895455976,3193889540,2717570544,1781354906,1676643554,2592534050,3230253752,1126444790,2770207658,2633158820,2210423226,2615765581,2414155088,3127139286,673620729,2805611233,1269405062,4015350505,3341807571,4149409754,1057255273,2012875353,2162469141,2276492801,2601117357,993977747,3918593370,2654263191,753973209,36408145,2530585658,25011837,3520020182,2088578344,530523599,2918365339,1524020338,1518925132,3760827505,3759777254,1202760957,3985898139,3906192525,674977740,4174734889,2031300136,2019492241,3983892565,4153806404,3822280332,352677332,2297720250,60907813,90501309,3286998549,1016092578,2535922412,2839152426,457141659,509813237,4120667899,652014361,1966332200,2975202805,55981186,2327461051,676427537,3255491064,2882294119,3433927263,1307055953,942726286,933058658,2468411793,3933900994,4215176142,1361170020,2001714738,2830558078,3274259782,1222529897,1679025792,2729314320,3714953764,1770335741,151462246,3013232138,1682292957,1483529935,471910574,1539241949,458788160,3436315007,1807016891,3718408830,978976581,1043663428,3165965781,1927990952,4200891579,2372276910,3208408903,3533431907,1412390302,2931980059,4132332400,1947078029,3881505623,4168226417,2941484381,1077988104,1320477388,886195818,18198404,3786409e3,2509781533,112762804,3463356488,1866414978,891333506,18488651,661792760,1628790961,3885187036,3141171499,876946877,2693282273,1372485963,791857591,2686433993,3759982718,3167212022,3472953795,2716379847,445679433,3561995674,3504004811,3574258232,54117162,3331405415,2381918588,3769707343,4154350007,1140177722,4074052095,668550556,3214352940,367459370,261225585,2610173221,4209349473,3468074219,3265815641,314222801,3066103646,3808782860,282218597,3406013506,3773591054,379116347,1285071038,846784868,2669647154,3771962079,3550491691,2305946142,453669953,1268987020,3317592352,3279303384,3744833421,2610507566,3859509063,266596637,3847019092,517658769,3462560207,3443424879,370717030,4247526661,2224018117,4143653529,4112773975,2788324899,2477274417,1456262402,2901442914,1517677493,1846949527,2295493580,3734397586,2176403920,1280348187,1908823572,3871786941,846861322,1172426758,3287448474,3383383037,1655181056,3139813346,901632758,1897031941,2986607138,3066810236,3447102507,1393639104,373351379,950779232,625454576,3124240540,4148612726,2007998917,544563296,2244738638,2330496472,2058025392,1291430526,424198748,50039436,29584100,3605783033,2429876329,2791104160,1057563949,3255363231,3075367218,3463963227,1469046755,985887462],vl=[1332899944,1700884034,1701343084,1684370003,1668446532,1869963892],Co=(n,t)=>{if(t<=0||t>n.length)throw Error(`Illegal len: ${t}`);let e=0,s,o;const p=[];for(;e<t;){if(s=n[e++]&255,p.push(It[s>>2&63]),s=(s&3)<<4,e>=t){p.push(It[s&63]);break}if(o=n[e++]&255,s|=o>>4&15,p.push(It[s&63]),s=(o&15)<<2,e>=t){p.push(It[s&63]);break}o=n[e++]&255,s|=o>>6&3,p.push(It[s&63]),p.push(It[o&63])}return p.join("")},Dh=(n,t)=>{const e=n.length;let s=0,o=0,p,i,l,c,u,d;const g=[];for(;s<e-1&&o<t&&(d=n.charCodeAt(s++),p=d<Nn.length?Nn[d]:-1,d=n.charCodeAt(s++),i=d<Nn.length?Nn[d]:-1,!(p==-1||i==-1||(u=p<<2>>>0,u|=(i&48)>>4,g.push(String.fromCharCode(u)),++o>=t||s>=e)||(d=n.charCodeAt(s++),l=d<Nn.length?Nn[d]:-1,l==-1)||(u=(i&15)<<4>>>0,u|=(l&60)>>2,g.push(String.fromCharCode(u)),++o>=t||s>=e)));)d=n.charCodeAt(s++),c=d<Nn.length?Nn[d]:-1,u=(l&3)<<6>>>0,u|=c,g.push(String.fromCharCode(u)),++o;return g.map(m=>m.charCodeAt(0))},Jh=(n,t)=>{let e=null;for(typeof n=="number"&&(e=n,n=()=>null);e!==null||(e=n())!==null;)e<128?t(e&127):e<2048?(t(e>>6&31|192),t(e&63|128)):e<65536?(t(e>>12&15|224),t(e>>6&63|128),t(e&63|128)):(t(e>>18&7|240),t(e>>12&63|128),t(e>>6&63|128),t(e&63|128)),e=null},Ph=(n,t)=>{let e,s=null;for(;(e=s!==null?s:n())!==null;){if(e>=55296&&e<=57343&&(s=n())!==null&&s>=56320&&s<=57343){t((e-55296)*1024+s-56320+65536),s=null;continue}t(e)}s!==null&&t(s)},Th=(n,t)=>{Ph(n,function(e){Jh(e,t)})},Lh=typeof process=="object"&&bh.NEXT_RUNTIME==="edge"?setTimeout:typeof setImmediate=="function"?setImmediate:typeof process=="object"&&typeof process.nextTick=="function"?process.nextTick:setTimeout,Rh=n=>{const t=[];let e=0;return Th(()=>e>=n.length?null:n.charCodeAt(e++),s=>{t.push(s)}),t},fe=(n,t,e,s)=>{let o,p=n[t],i=n[t+1];return p^=e[0],o=s[p>>>24],o+=s[256|p>>16&255],o^=s[512|p>>8&255],o+=s[768|p&255],i^=o^e[1],o=s[i>>>24],o+=s[256|i>>16&255],o^=s[512|i>>8&255],o+=s[768|i&255],p^=o^e[2],o=s[p>>>24],o+=s[256|p>>16&255],o^=s[512|p>>8&255],o+=s[768|p&255],i^=o^e[3],o=s[i>>>24],o+=s[256|i>>16&255],o^=s[512|i>>8&255],o+=s[768|i&255],p^=o^e[4],o=s[p>>>24],o+=s[256|p>>16&255],o^=s[512|p>>8&255],o+=s[768|p&255],i^=o^e[5],o=s[i>>>24],o+=s[256|i>>16&255],o^=s[512|i>>8&255],o+=s[768|i&255],p^=o^e[6],o=s[p>>>24],o+=s[256|p>>16&255],o^=s[512|p>>8&255],o+=s[768|p&255],i^=o^e[7],o=s[i>>>24],o+=s[256|i>>16&255],o^=s[512|i>>8&255],o+=s[768|i&255],p^=o^e[8],o=s[p>>>24],o+=s[256|p>>16&255],o^=s[512|p>>8&255],o+=s[768|p&255],i^=o^e[9],o=s[i>>>24],o+=s[256|i>>16&255],o^=s[512|i>>8&255],o+=s[768|i&255],p^=o^e[10],o=s[p>>>24],o+=s[256|p>>16&255],o^=s[512|p>>8&255],o+=s[768|p&255],i^=o^e[11],o=s[i>>>24],o+=s[256|i>>16&255],o^=s[512|i>>8&255],o+=s[768|i&255],p^=o^e[12],o=s[p>>>24],o+=s[256|p>>16&255],o^=s[512|p>>8&255],o+=s[768|p&255],i^=o^e[13],o=s[i>>>24],o+=s[256|i>>16&255],o^=s[512|i>>8&255],o+=s[768|i&255],p^=o^e[14],o=s[p>>>24],o+=s[256|p>>16&255],o^=s[512|p>>8&255],o+=s[768|p&255],i^=o^e[15],o=s[i>>>24],o+=s[256|i>>16&255],o^=s[512|i>>8&255],o+=s[768|i&255],p^=o^e[16],n[t]=i^e[17],n[t+1]=p,n},St=(n,t)=>{let e=0;for(let s=0;s<4;++s)e=e<<8|n[t]&255,t=(t+1)%n.length;return{key:e,offp:t}},Zi=(n,t,e)=>{const s=t.length,o=e.length;let p=0,i=[0,0],l;for(let c=0;c<s;c++)l=St(n,p),p=l.offp,t[c]=t[c]^l.key;for(let c=0;c<s;c+=2)i=fe(i,0,t,e),t[c]=i[0],t[c+1]=i[1];for(let c=0;c<o;c+=2)i=fe(i,0,t,e),e[c]=i[0],e[c+1]=i[1]},Oh=(n,t,e,s)=>{const o=e.length,p=s.length;let i=0,l=[0,0],c;for(let u=0;u<o;u++)c=St(t,i),i=c.offp,e[u]=e[u]^c.key;i=0;for(let u=0;u<o;u+=2)c=St(n,i),i=c.offp,l[0]^=c.key,c=St(n,i),i=c.offp,l[1]^=c.key,l=fe(l,0,e,s),e[u]=l[0],e[u+1]=l[1];for(let u=0;u<p;u+=2)c=St(n,i),i=c.offp,l[0]^=c.key,c=St(n,i),i=c.offp,l[1]^=c.key,l=fe(l,0,e,s),s[u]=l[0],s[u+1]=l[1]},Yi=(n,t,e,s,o)=>{const p=vl.slice(),i=p.length;if(e<4||e>31){const m=new Error(`Illegal number of rounds (4-31): ${e}`);if(s===!1)return Promise.reject(m);throw m}if(t.length!==16){const m=new Error(`Illegal salt length: ${t.length} != 16`);if(s===!1)return Promise.reject(m);throw m}e=1<<e>>>0;let l,c,u=0,d;Int32Array?(l=new Int32Array($i),c=new Int32Array(Xi)):(l=$i.slice(),c=Xi.slice()),Oh(t,n,l,c);const g=()=>{if(u<e){const m=Date.now();for(;u<e&&(u=u+1,Zi(n,l,c),Zi(t,l,c),!(Date.now()-m>100)););}else{for(u=0;u<64;u++)for(d=0;d<i>>1;d++)fe(p,d<<1,l,c);const m=[];for(u=0;u<i;u++)m.push((p[u]>>24&255)>>>0),m.push((p[u]>>16&255)>>>0),m.push((p[u]>>8&255)>>>0),m.push((p[u]&255)>>>0);return s===!1?Promise.resolve(m):m}if(s===!1)return new Promise(m=>Lh(()=>{g().then(m)}))};if(s===!1)return g();{let m;for(;;)if(typeof(m=g())<"u")return m||[]}},xh=n=>{try{let t;typeof window<"u"?t=window.crypto??window.msCrypto:t=globalThis.crypto;const e=new Uint32Array(n);return t==null||t.getRandomValues(e),Array.from(e)}catch{throw Error("WebCryptoAPI is not available")}},Bh=(n=10)=>{if(typeof n!="number")throw Error("Illegal arguments: "+typeof n);n<4?n=4:n>31&&(n=31);const t=[];return t.push("$2a$"),n<10&&t.push("0"),t.push(n.toString()),t.push("$"),t.push(Co(xh(16),16)),t.join("")};function Ch(n,t,e,s){if(typeof n!="string"||typeof t!="string"){const _=new Error("Invalid string / salt: Not a string");if(e===!1)return Promise.reject(_);throw _}let o,p;if(t.charAt(0)!=="$"||t.charAt(1)!=="2"){const _=new Error("Invalid salt version: "+t.substring(0,2));if(e===!1)return Promise.reject(_);throw _}if(t.charAt(2)==="$")o="\0",p=3;else{if(o=t.charAt(2),o!=="a"&&o!=="b"&&o!=="y"||t.charAt(3)!=="$"){const _=Error("Invalid salt revision: "+t.substring(2,4));if(e===!1)return Promise.reject(_);throw _}p=4}if(t.charAt(p+2)>"$"){const _=new Error("Missing salt rounds");if(e===!1)return Promise.reject(_);throw _}const i=parseInt(t.substring(p,p+1),10)*10,l=parseInt(t.substring(p+1,p+2),10),c=i+l,u=t.substring(p+3,p+25);n+=o>="a"?"\0":"";const d=Rh(n),g=Dh(u,16),m=_=>{const v=[];return v.push("$2"),o>="a"&&v.push(o),v.push("$"),c<10&&v.push("0"),v.push(c.toString()),v.push("$"),v.push(Co(g,g.length)),v.push(Co(_,vl.length*4-1)),v.join("")};return e===!1?Yi(d,g,c,!1).then(_=>m(_)):m(Yi(d,g,c,!0))}const wh=(n,t=10)=>{if(typeof t=="number"&&(t=Bh(t)),typeof n!="string"||typeof t!="string")throw Error("Illegal arguments: "+typeof n+", "+typeof t);return Ch(n,t,!0)},wo=(n,t)=>{if(typeof n!="string"||typeof t!="string")throw Error("Illegal arguments: "+typeof n+", "+typeof t);return t.length!==60?!1:wh(n,t.substring(0,t.length-31))===t};var El=j({name:"PasswordModal",props:{full:Boolean},emits:["verify"],setup(n,{emit:t}){const e=da(),s=pa(),o=X(""),p=X(!1),i=X(!1),l=I(()=>s.value.encryptLocales);let c=null;const u=()=>{c&&clearTimeout(c),p.value=!1,t("verify",o.value,i.value),wn().then(()=>{p.value=!0,c=setTimeout(()=>{p.value=!1},1e3)})};return()=>r("div",{class:["vp-decrypt-layer",{expand:n.full||e.value.home}]},r("div",{class:"vp-decrypt-modal"},[r("div",{class:["vp-decrypt-hint",{tried:p.value}]},p.value?l.value.errorHint:r(Ap,{"aria-label":l.value.iconLabel})),r("div",{class:"vp-decrypt-input"},[r("input",{type:"password",value:o.value,placeholder:l.value.placeholder,onInput:({target:d})=>{o.value=d.value},onKeydown:({key:d})=>{d==="Enter"&&u()}})]),r("div",{class:"vp-remember-password"},[r("input",{type:"checkbox",value:i.value,onChange:()=>i.value=!i.value}),l.value.remember]),r("button",{type:"button",class:"vp-decrypt-submit",onClick:()=>u()},"OK")]))}});const kl=()=>{const n=fn();return I(()=>n.value.encrypt||{})},ar="VUEPRESS_HOPE_GLOBAL_TOKEN",Vh=()=>{const n=kl(),t=Kt(ar,""),e=G0(ar,""),s=I(()=>{const{global:p=!1,admin:i=[]}=n.value;return p&&i.length>0}),o=I(()=>{if(s.value){if(t.value)return n.value.admin.some(p=>wo(t.value,p));if(e.value)return n.value.admin.some(p=>wo(e.value,p))}return!1});return{isEncrypted:s,isDecrypted:o,validate:(p,i=!1)=>{(i?t:e).value=p}}},po=(n="",t)=>!!n&&wo(n,t),nr="VUEPRESS_HOPE_PATH_TOKEN",Mh=()=>{const n=fa(),t=kl(),e=Kt(nr,{}),s=G0(nr,{}),o=i=>Ut(t.value.config)?dn(t.value.config).filter(l=>Vt(decodeURI(i),l)).sort((l,c)=>c.length-l.length):[],p=i=>{const l=o(i);if(l.length>0){const{config:c={}}=t.value;return{isEncrypted:!0,isDecrypted:l.some(u=>e.value[u]&&c[u].some(d=>po(e.value[u],d))||s.value[u]&&c[u].some(d=>po(s.value[u],d)))}}return{isDecrypted:!1,isEncrypted:!1}};return{status:I(()=>p(n.value.path)),getStatus:p,validate:(i,l=!1)=>{const{config:c={}}=t.value,u=o(n.value.path);for(const d of u)if(c[d].filter(g=>po(i,g))){(l?e:s).value[d]=i;break}}}};var Fh=j({name:"GlobalEncrypt",slots:Object,setup(n,{slots:t}){const{isDecrypted:e,isEncrypted:s,validate:o}=Vh(),p=Wa(),i=X(!1);return Ea(()=>{i.value=!0}),()=>r(p.value?Ls:kp,()=>s.value?i.value?e.value?t.default():r(El,{full:!0,onVerify:o}):null:t.default())}}),jh=j({name:"LocalEncrypt",slots:Object,setup(n,{slots:t}){const{status:e,validate:s}=Mh(),o=X(!1);return Ea(()=>{o.value=!0}),()=>{const{isEncrypted:p,isDecrypted:i}=e.value;return p?o.value?i?t.default():r(El,{full:!0,onVerify:s}):null:t.default()}}});Tm(n=>{const t=n.t,e=n.I!==!1,s=n.i;return e?{title:t,content:s?()=>[r(Ha,{icon:s}),t]:null,order:n.O,index:n.I}:null});const Hh=Pn({enhance:({app:n,router:t})=>{const{scrollBehavior:e}=t.options;t.options.scrollBehavior=async(...s)=>(await To.wait(),e(...s)),e1(n),n.component("HopeIcon",Ha),n.component("BloggerInfo",yp),n.component("SocialMedias",sl),n.component("GlobalEncrypt",Fh),n.component("LocalEncrypt",jh)},setup:()=>{s1(),i1(),sh()},layouts:{Layout:G1,NotFound:q1,BlogCategory:mh,BlogHome:Ah,BlogType:Ih,Timeline:Sh}}),ps=[Jg,Im,Pm,Bm,Vm,Hm,Gm,Zm,L_,K_,Hh],Uh=JSON.parse('{"base":"/","lang":"zh-CN","title":"Baeldung 中文网","description":"Baeldung 帮助开发人员探索 Java 生态系统并成为更好的工程师。 我们发布重点指南和课程，重点关注构建 Web 应用程序、Spring、Spring Security 和 RESTful API。","head":[],"locales":{}}');var $t=La(Uh),Nh=Wd,Kh=()=>{const n=hg({history:Nh(sp("/")),routes:[{name:"vuepress-route",path:"/:catchAll(.*)",components:{}}],scrollBehavior:(t,e,s)=>s||(t.hash?{el:t.hash}:{top:0})});return n.beforeResolve(async(t,e)=>{if(t.path!==e.path||e===On){const s=Jn(t.path);if(s.path!==t.path)return s.path;const o=await s.loader();t.meta={...s.meta,_pageChunk:o}}else t.path===e.path&&(t.meta=e.meta)}),n},Wh=n=>{n.component("ClientOnly",Ps),n.component("Content",T0),n.component("RouteLink",Pa)},Gh=(n,t,e)=>{const s=I(()=>t.currentRoute.value.path),o=Jr((S,f)=>({get(){return S(),t.currentRoute.value.meta._pageChunk},set(y){t.currentRoute.value.meta._pageChunk=y,f()}})),p=I(()=>lt.resolveLayouts(e)),i=I(()=>lt.resolveRouteLocale($t.value.locales,s.value)),l=I(()=>lt.resolveSiteLocaleData($t.value,i.value)),c=I(()=>o.value.comp),u=I(()=>o.value.data),d=I(()=>u.value.frontmatter),g=I(()=>lt.resolvePageHeadTitle(u.value,l.value)),m=I(()=>lt.resolvePageHead(g.value,d.value,l.value)),_=I(()=>lt.resolvePageLang(u.value,l.value)),v=I(()=>lt.resolvePageLayout(u.value,p.value)),A={layouts:p,pageData:u,pageComponent:c,pageFrontmatter:d,pageHead:m,pageHeadTitle:g,pageLang:_,pageLayout:v,redirects:fo,routeLocale:i,routePath:s,routes:he,siteData:$t,siteLocaleData:l};return n.provide(ip,A),Object.defineProperties(n.config.globalProperties,{$frontmatter:{get:()=>d.value},$head:{get:()=>m.value},$headTitle:{get:()=>g.value},$lang:{get:()=>_.value},$page:{get:()=>u.value},$routeLocale:{get:()=>i.value},$site:{get:()=>$t.value},$siteLocale:{get:()=>l.value},$withBase:{get:()=>ha}}),A},zh=()=>{const n=kg(),t=D0();let e=[];const s=()=>{n.value.forEach(i=>{const l=qh(i);l&&e.push(l)})},o=()=>{const i=[];return n.value.forEach(l=>{const c=Qh(l);c&&i.push(c)}),i},p=()=>{document.documentElement.lang=t.value;const i=o();e.forEach((l,c)=>{const u=i.findIndex(d=>l.isEqualNode(d));u===-1?(l.remove(),delete e[c]):i.splice(u,1)}),i.forEach(l=>document.head.appendChild(l)),e=[...e.filter(l=>!!l),...i]};En(yg,p),Ea(()=>{s(),ua(n,p,{immediate:!1})})},qh=([n,t,e=""])=>{const s=Object.entries(t).map(([l,c])=>Da(c)?`[${l}=${JSON.stringify(c)}]`:c===!0?`[${l}]`:"").join(""),o=`head > ${n}${s}`;return Array.from(document.querySelectorAll(o)).find(l=>l.innerText===e)||null},Qh=([n,t,e])=>{if(!Da(n))return null;const s=document.createElement(n);return Ut(t)&&Object.entries(t).forEach(([o,p])=>{Da(p)?s.setAttribute(o,p):p===!0&&s.setAttribute(o,"")}),Da(e)&&s.appendChild(document.createTextNode(e)),s},$h=ad,Xh=async()=>{var e;const n=$h({name:"Vuepress",setup(){var p;zh();for(const i of ps)(p=i.setup)==null||p.call(i);const s=ps.flatMap(({rootComponents:i=[]})=>i.map(l=>r(l))),o=Ag();return()=>[r(o.value),s]}}),t=Kh();Wh(n),Gh(n,t,ps);for(const s of ps)await((e=s.enhance)==null?void 0:e.call(s,{app:n,router:t,siteData:$t}));return n.use(t),{app:n,router:t}};Xh().then(({app:n,router:t})=>{t.isReady().then(()=>{n.mount("#app")})});export{tv as a,e0 as b,nv as c,Xh as createVueApp,s0 as d,xa as e,av as o,cn as r,Yh as t};
