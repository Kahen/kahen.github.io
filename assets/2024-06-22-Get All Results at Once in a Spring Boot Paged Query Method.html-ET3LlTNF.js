import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-DRh-WJAL.js";const e={},p=t('<hr><h1 id="在spring-boot分页查询方法中一次性获取所有结果" tabindex="-1"><a class="header-anchor" href="#在spring-boot分页查询方法中一次性获取所有结果"><span>在Spring Boot分页查询方法中一次性获取所有结果</span></a></h1><p>在Spring Boot应用程序中，我们经常需要将表格数据以每次20行或50行的块呈现给客户端。分页是返回大型数据集中一部分数据的常见做法。然而，在某些场景下，我们需要一次性获取所有结果。</p><p>在本教程中，我们首先回顾了如何在Spring Boot中使用分页来检索数据。接下来，我们将探讨如何一次性从数据库表中检索所有结果。最后，我们将深入到一个更复杂的情景，即检索具有关系的数据显示。</p><h2 id="_2-仓库-repository" tabindex="-1"><a class="header-anchor" href="#_2-仓库-repository"><span>2. 仓库（Repository）</span></a></h2><p>仓库是Spring Data接口，提供了数据访问抽象。根据我们选择的仓库子接口，抽象提供了一组预定义的数据库操作。我们不需要为标准数据库操作如选择、保存和删除编写代码。我们所需做的只是为我们的实体创建一个接口，并将其扩展到所选的仓库子接口。</p><p>在运行时，Spring Data为我们的仓库创建了一个代理实现，该代理处理我们仓库的方法调用。当我们在仓库接口上调用一个方法时，Spring Data会根据方法和参数动态生成查询。</p><p>Spring Data在仓库中定义了三个常见的子接口：</p><ul><li>CrudRepository - Spring Data提供的最基本的仓库接口。它提供了CRUD（创建、读取、更新和删除）实体操作。</li><li>PagingAndSortingRepository - 它扩展了CrudRepository接口，并增加了支持分页访问和结果排序的附加方法。</li><li>JpaRepository - 它扩展了PagingAndSortingRepository接口，并引入了JPA特定的操作，例如保存和刷新实体以及批量删除实体。</li></ul><h2 id="_3-获取分页数据" tabindex="-1"><a class="header-anchor" href="#_3-获取分页数据"><span>3. 获取分页数据</span></a></h2><p>让我们从一个简单的场景开始，使用分页从数据库获取数据。我们首先创建一个Student实体类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span>\n<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;student&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Id</span>\n    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;student_id&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;first_name&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;last_name&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>随后，我们将为从数据库检索Student实体创建一个StudentRepository。JpaRepository接口默认包含findAll(Pageable pageable)方法。因此，我们不需要定义额外的方法，假设我们只想以分页的方式检索数据而不选择字段：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```` <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以通过在StudentRepository上调用findAll(Pageable)来获取Student的第一页，每页10行。第一个参数表示当前页，从零开始索引，而第二个参数表示每页获取的记录数：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Pageable</span> pageable <span class="token operator">=</span> <span class="token class-name">PageRequest</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Page</span>`````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span>````````` studentPage <span class="token operator">=</span> studentRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>通常，我们需要返回按特定字段排序的分页结果。在这种情况下，我们在创建Pageable实例时提供一个Sort实例。这个例子显示我们将按Student中的id字段升序排序页面结果：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Sort</span> sort <span class="token operator">=</span> <span class="token class-name">Sort</span><span class="token punctuation">.</span><span class="token function">by</span><span class="token punctuation">(</span><span class="token class-name">Sort<span class="token punctuation">.</span>Direction</span><span class="token punctuation">.</span><span class="token constant">ASC</span><span class="token punctuation">,</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Pageable</span> pageable <span class="token operator">=</span> <span class="token class-name">PageRequest</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withSort</span><span class="token punctuation">(</span>sort<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Page</span>`````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span>````````` studentPage <span class="token operator">=</span> studentRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-获取所有数据" tabindex="-1"><a class="header-anchor" href="#_4-获取所有数据"><span>4. 获取所有数据</span></a></h2><p>一个常见的问题经常会出现：如果我们想一次性检索所有数据怎么办？我们需要调用findAll()来获取所有数据吗？答案是不。Pageable接口定义了一个静态方法unpaged()，它返回一个不包含分页信息的预定义Pageable实例。我们可以通过调用带有该Pageable实例的findAll(Pageable)来获取所有数据：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Page</span>`````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span>````````` studentPage <span class="token operator">=</span> studentRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token class-name">Pageable</span><span class="token punctuation">.</span><span class="token function">unpaged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果我们需要对结果进行排序，我们可以从Spring Boot 3.2开始，将Sort实例作为参数传递给unpaged()方法。例如，假设我们想按lastName字段升序排序结果：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Sort</span> sort <span class="token operator">=</span> <span class="token class-name">Sort</span><span class="token punctuation">.</span><span class="token function">by</span><span class="token punctuation">(</span><span class="token class-name">Sort<span class="token punctuation">.</span>Direction</span><span class="token punctuation">.</span><span class="token constant">ASC</span><span class="token punctuation">,</span> <span class="token string">&quot;lastName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Page</span>`````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span>````````` studentPage <span class="token operator">=</span> studentRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token class-name">Pageable</span><span class="token punctuation">.</span><span class="token function">unpaged</span><span class="token punctuation">(</span>sort<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然而，在3.2以下的版本中实现相同的功能有点棘手，因为unpaged()不接受任何参数。相反，我们必须创建一个带有最大页面大小和Sort参数的PageRequest：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Pageable</span> pageable <span class="token operator">=</span> <span class="token class-name">PageRequest</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withSort</span><span class="token punctuation">(</span>sort<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Page</span>`````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span>````````` studentPage <span class="token operator">=</span> studentRepository<span class="token punctuation">.</span><span class="token function">getStudents</span><span class="token punctuation">(</span>pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-获取具有关系的数据" tabindex="-1"><a class="header-anchor" href="#_5-获取具有关系的数据"><span>5. 获取具有关系的数据</span></a></h2><p>我们经常在对象关系映射（ORM）框架中定义实体之间的关系。使用JPA等ORM框架可以帮助开发人员快速建模实体和关系，并且无需编写SQL查询。</p><p>然而，如果我们不完全理解其工作原理，尝试从具有关系的实体中检索一系列结果可能会引起潜在问题，这可能会导致性能影响，特别是当获取所有数据时。</p><h3 id="_5-1-n-1问题" tabindex="-1"><a class="header-anchor" href="#_5-1-n-1问题"><span>5.1. N+1问题</span></a></h3><p>让我们通过一个例子来说明问题。考虑我们的Student实体有一个额外的多对一映射：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span>\n<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;student&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Id</span>\n    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;student_id&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;first_name&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;last_name&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@ManyToOne</span><span class="token punctuation">(</span>fetch <span class="token operator">=</span> <span class="token class-name">FetchType</span><span class="token punctuation">.</span><span class="token constant">LAZY</span><span class="token punctuation">)</span>\n    <span class="token annotation punctuation">@JoinColumn</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;school_id&quot;</span><span class="token punctuation">,</span> referencedColumnName <span class="token operator">=</span> <span class="token string">&quot;school_id&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token class-name">School</span> school<span class="token punctuation">;</span>\n\n    <span class="token comment">// getters and setters</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，每个Student都与一个School关联，我们定义School实体如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span>\n<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;school&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">School</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Id</span>\n    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">IDENTITY</span><span class="token punctuation">)</span>\n    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;school_id&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>\n\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n\n    <span class="token comment">// getters and setters</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们想从数据库中检索所有Student记录，并调查JPA实际发出的SQL查询数量。Hypersistence Utilities是一个数据库实用程序库，它提供了assertSelectCount()方法来识别执行的select查询数量。让我们在pom.xml文件中包含它的Maven依赖项：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`io.hypersistence`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`hypersistence-utils-hibernate-62`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`3.7.0`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们创建一个测试用例来检索所有Student记录：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenGetStudentsWithSchool_thenMultipleSelectQueriesAreExecuted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Page</span>`````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span>````````` studentPage <span class="token operator">=</span> studentRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token class-name">Pageable</span><span class="token punctuation">.</span><span class="token function">unpaged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StudentWithSchoolNameDTO</span><span class="token punctuation">&gt;</span></span>` list <span class="token operator">=</span> studentPage<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>student <span class="token operator">-&gt;</span> modelMapper<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>student<span class="token punctuation">,</span> <span class="token class-name">StudentWithSchoolNameDTO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertSelectCount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> studentPage<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在完整的应用程序中，我们不想向客户端公开我们的内部实体。我们通常会将内部实体映射到外部DTO，然后将其返回给客户端。在这个例子中，我们采用ModelMapper将Student转换为StudentWithSchoolNameDTO，它包含来自Student的所有字段和来自School的名称字段：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentWithSchoolNameDTO</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> schoolName<span class="token punctuation">;</span>\n\n    <span class="token comment">// constructor, getters and setters</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们在执行测试用例后观察Hibernate日志：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>Hibernate: <span class="token keyword">select</span> studentent0_<span class="token punctuation">.</span>student_id <span class="token keyword">as</span> student_1_1_<span class="token punctuation">,</span> studentent0_<span class="token punctuation">.</span>first_name <span class="token keyword">as</span> first_na2_1_<span class="token punctuation">,</span> studentent0_<span class="token punctuation">.</span>last_name <span class="token keyword">as</span> last_nam3_1_<span class="token punctuation">,</span> studentent0_<span class="token punctuation">.</span>school_id <span class="token keyword">as</span> school_i4_1_ <span class="token keyword">from</span> student studentent0_\nHibernate: <span class="token keyword">select</span> schoolenti0_<span class="token punctuation">.</span>school_id <span class="token keyword">as</span> school_i1_0_0_<span class="token punctuation">,</span> schoolenti0_<span class="token punctuation">.</span>name <span class="token keyword">as</span> name2_0_0_ <span class="token keyword">from</span> school schoolenti0_ <span class="token keyword">where</span> schoolenti0_<span class="token punctuation">.</span>school_id<span class="token operator">=</span>?\nHibernate: <span class="token keyword">select</span> schoolenti0_<span class="token punctuation">.</span>school_id <span class="token keyword">as</span> school_i1_0_0_<span class="token punctuation">,</span> schoolenti0_<span class="token punctuation">.</span>name <span class="token keyword">as</span> name2_0_0_ <span class="token keyword">from</span> school schoolenti0_ <span class="token keyword">where</span> schoolenti0_<span class="token punctuation">.</span>school_id<span class="token operator">=</span>?\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设我们从数据库检索了N条Student记录。JPA不是执行对Student表的单个select查询，而是对School表执行了额外的N个查询，以获取每个Student的关联记录。</p><p>这种行为出现在ModelMapper转换过程中，当它尝试读取Student实例中的school字段时。这种在对象关系映射性能中的问题被称为N+1问题。</p><p>值得一提的是，JPA并不总是在每个Student获取时对School表发出N个查询。实际数量取决于数据。JPA具有一级缓存机制，确保它不会再次从数据库中获取缓存的School实例。</p><h3 id="_5-2-避免获取关系" tabindex="-1"><a class="header-anchor" href="#_5-2-避免获取关系"><span>5.2. 避免获取关系</span></a></h3><p>当返回DTO给客户端时，并不总是需要在实体类中包含所有字段。大多数情况下，我们只需要它们的一个子集。为了避免在实体中触发与关联关系的额外查询，我们只应该提取必要的字段。</p><p>在我们的示例中，我们可以创建一个指定的DTO类，其中仅包括来自Student表的字段。如果我们不访问school字段，JPA将不会对School执行任何额外的查询：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentDTO</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span>\n\n    <span class="token comment">// constructor, getters and setters</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方法假设我们在查询的实体类上定义的关联获取fetch type设置为执行关联实体的延迟获取：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ManyToOne</span><span class="token punctuation">(</span>fetch <span class="token operator">=</span> <span class="token class-name">FetchType</span><span class="token punctuation">.</span><span class="token constant">LAZY</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@JoinColumn</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;school_id&quot;</span><span class="token punctuation">,</span> referencedColumnName <span class="token operator">=</span> <span class="token string">&quot;school_id&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">private</span> <span class="token class-name">School</span> school<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重要的是要注意，如果fetch属性设置为FetchType.EAGER，JPA将在获取Student记录后积极执行额外的查询，尽管之后没有访问该字段。</p><h3 id="_5-3-自定义查询" tabindex="-1"><a class="header-anchor" href="#_5-3-自定义查询"><span>5.3. 自定义查询</span></a></h3><p>每当DTO中需要School字段时，我们可以定义一个自定义查询，指示JPA在初始Student查询中执行fetch join，以积极地检索关联的School实体：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```` <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;SELECT stu FROM Student stu LEFT JOIN FETCH stu.school&quot;</span><span class="token punctuation">,</span>\n      countQuery <span class="token operator">=</span> <span class="token string">&quot;SELECT COUNT(stu) FROM Student stu&quot;</span><span class="token punctuation">)</span>\n    <span class="token class-name">Page</span>`````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span>````````` <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token class-name">Pageable</span> pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行相同的测试用例时，我们可以从Hibernate日志中观察到现在只有一个连接Student和School表的查询被执行：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>Hibernate: <span class="token keyword">select</span> s1_0<span class="token punctuation">.</span>student_id<span class="token punctuation">,</span>s1_0<span class="token punctuation">.</span>first_name<span class="token punctuation">,</span>s1_0<span class="token punctuation">.</span>last_name<span class="token punctuation">,</span>s2_0<span class="token punctuation">.</span>school_id<span class="token punctuation">,</span>s2_0<span class="token punctuation">.</span>name\n<span class="token keyword">from</span> student s1_0 <span class="token keyword">left</span> <span class="token keyword">join</span> school s2_0 <span class="token keyword">on</span> s2_0<span class="token punctuation">.</span>school_id<span class="token operator">=</span>s1_0<span class="token punctuation">.</span>school_id\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-4-实体图" tabindex="-1"><a class="header-anchor" href="#_5-4-实体图"><span>5.4. 实体图</span></a></h3><p>一个更整洁的解决方案是使用@EntityGraph注解。这有助于通过在单个查询中获取实体而不是为每个关联执行额外的查询来优化检索性能。JPA使用此注解指定应积极获取哪些关联实体。</p><p>让我们看一个即席实体图示例，它定义了attributePaths来指示JPA在查询Student记录时获取School关联：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```` <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@EntityGraph</span><span class="token punctuation">(</span>attributePaths <span class="token operator">=</span> <span class="token string">&quot;school&quot;</span><span class="token punctuation">)</span>\n    <span class="token class-name">Page</span>`````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span>````````` <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token class-name">Pageable</span> pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义实体图的另一种方式是在Student实体上放置@NamedEntityGraph注解：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span>\n<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;student&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@NamedEntityGraph</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;Student.school&quot;</span><span class="token punctuation">,</span> attributeNodes <span class="token operator">=</span> <span class="token annotation punctuation">@NamedAttributeNode</span><span class="token punctuation">(</span><span class="token string">&quot;school&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@ManyToOne</span><span class="token punctuation">(</span>fetch <span class="token operator">=</span> <span class="token class-name">FetchType</span><span class="token punctuation">.</span><span class="token constant">LAZY</span><span class="token punctuation">)</span>\n    <span class="token annotation punctuation">@JoinColumn</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;school_id&quot;</span><span class="token punctuation">,</span> referencedColumnName <span class="token operator">=</span> <span class="token string">&quot;school_id&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token class-name">School</span> school<span class="token punctuation">;</span>\n\n    <span class="token comment">// 其他字段，getter和setter</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>随后，我们在StudentRepository的findAll()方法上添加@EntityGraph注解，并引用我们在Student类中定义的命名实体图：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```` <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@EntityGraph</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;Student.school&quot;</span><span class="token punctuation">)</span>\n    <span class="token class-name">Page</span>`````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span>````````` <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token class-name">Pageable</span> pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行测试用例时，我们将看到JPA执行的连接查询与自定义查询方法相同：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>Hibernate: <span class="token keyword">select</span> s1_0<span class="token punctuation">.</span>student_id<span class="token punctuation">,</span>s1_0<span class="token punctuation">.</span>first_name<span class="token punctuation">,</span>s1_0<span class="token punctuation">.</span>last_name<span class="token punctuation">,</span>s2_0<span class="token punctuation">.</span>school_id<span class="token punctuation">,</span>s2_0<span class="token punctuation">.</span>name\n<span class="token keyword">from</span> student s1_0 <span class="token keyword">left</span> <span class="token keyword">join</span> school s2_0 <span class="token keyword">on</span> s2_0<span class="token punctuation">.</span>school_id<span class="token operator">=</span>s1_0<span class="token punctuation">.</span>school_id\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-结论" tabindex="-1"><a class="header-anchor" href="#_6-结论"><span>6. 结论</span></a></h2><p>在本文中，我们学习了如何在Spring Boot中对查询结果进行分页和排序，包括检索部分数据和全部数据。我们还学习了一些在Spring Boot中高效检索数据的做法，特别是处理关系时。</p><p>像往常一样，示例代码可在GitHub上找到。 OK</p>',69),o=[p];function c(l,i){return a(),s("div",null,o)}const r=n(e,[["render",c],["__file","2024-06-22-Get All Results at Once in a Spring Boot Paged Query Method.html.vue"]]),k=JSON.parse('{"path":"/posts/baeldung/2024-06-22/2024-06-22-Get%20All%20Results%20at%20Once%20in%20a%20Spring%20Boot%20Paged%20Query%20Method.html","title":"在Spring Boot分页查询方法中一次性获取所有结果","lang":"zh-CN","frontmatter":{"date":"2024-06-22T00:00:00.000Z","category":["Spring Boot","Pagination"],"tag":["Spring Data","JPA"],"head":[["meta",{"name":"keywords","content":"Spring Boot, Pagination, Spring Data, JPA"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-06-22/2024-06-22-Get%20All%20Results%20at%20Once%20in%20a%20Spring%20Boot%20Paged%20Query%20Method.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"在Spring Boot分页查询方法中一次性获取所有结果"}],["meta",{"property":"og:description","content":"在Spring Boot分页查询方法中一次性获取所有结果 在Spring Boot应用程序中，我们经常需要将表格数据以每次20行或50行的块呈现给客户端。分页是返回大型数据集中一部分数据的常见做法。然而，在某些场景下，我们需要一次性获取所有结果。 在本教程中，我们首先回顾了如何在Spring Boot中使用分页来检索数据。接下来，我们将探讨如何一次性从..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-22T15:30:23.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Spring Data"}],["meta",{"property":"article:tag","content":"JPA"}],["meta",{"property":"article:published_time","content":"2024-06-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-22T15:30:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"在Spring Boot分页查询方法中一次性获取所有结果\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-22T15:30:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"在Spring Boot分页查询方法中一次性获取所有结果 在Spring Boot应用程序中，我们经常需要将表格数据以每次20行或50行的块呈现给客户端。分页是返回大型数据集中一部分数据的常见做法。然而，在某些场景下，我们需要一次性获取所有结果。 在本教程中，我们首先回顾了如何在Spring Boot中使用分页来检索数据。接下来，我们将探讨如何一次性从..."},"headers":[{"level":2,"title":"2. 仓库（Repository）","slug":"_2-仓库-repository","link":"#_2-仓库-repository","children":[]},{"level":2,"title":"3. 获取分页数据","slug":"_3-获取分页数据","link":"#_3-获取分页数据","children":[]},{"level":2,"title":"4. 获取所有数据","slug":"_4-获取所有数据","link":"#_4-获取所有数据","children":[]},{"level":2,"title":"5. 获取具有关系的数据","slug":"_5-获取具有关系的数据","link":"#_5-获取具有关系的数据","children":[{"level":3,"title":"5.1. N+1问题","slug":"_5-1-n-1问题","link":"#_5-1-n-1问题","children":[]},{"level":3,"title":"5.2. 避免获取关系","slug":"_5-2-避免获取关系","link":"#_5-2-避免获取关系","children":[]},{"level":3,"title":"5.3. 自定义查询","slug":"_5-3-自定义查询","link":"#_5-3-自定义查询","children":[]},{"level":3,"title":"5.4. 实体图","slug":"_5-4-实体图","link":"#_5-4-实体图","children":[]}]},{"level":2,"title":"6. 结论","slug":"_6-结论","link":"#_6-结论","children":[]}],"git":{"createdTime":1719070223000,"updatedTime":1719070223000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":8.46,"words":2539},"filePathRelative":"posts/baeldung/2024-06-22/2024-06-22-Get All Results at Once in a Spring Boot Paged Query Method.md","localizedDate":"2024年6月22日","excerpt":"<hr>\\n<h1>在Spring Boot分页查询方法中一次性获取所有结果</h1>\\n<p>在Spring Boot应用程序中，我们经常需要将表格数据以每次20行或50行的块呈现给客户端。分页是返回大型数据集中一部分数据的常见做法。然而，在某些场景下，我们需要一次性获取所有结果。</p>\\n<p>在本教程中，我们首先回顾了如何在Spring Boot中使用分页来检索数据。接下来，我们将探讨如何一次性从数据库表中检索所有结果。最后，我们将深入到一个更复杂的情景，即检索具有关系的数据显示。</p>\\n<h2>2. 仓库（Repository）</h2>\\n<p>仓库是Spring Data接口，提供了数据访问抽象。根据我们选择的仓库子接口，抽象提供了一组预定义的数据库操作。我们不需要为标准数据库操作如选择、保存和删除编写代码。我们所需做的只是为我们的实体创建一个接口，并将其扩展到所选的仓库子接口。</p>","autoDesc":true}');export{r as comp,k as data};
