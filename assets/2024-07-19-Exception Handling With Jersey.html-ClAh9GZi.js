import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as e}from"./app-BTwZI-W8.js";const t={},p=e(`<h1 id="jersey中的异常处理" tabindex="-1"><a class="header-anchor" href="#jersey中的异常处理"><span>Jersey中的异常处理</span></a></h1><p>在本教程中，我们将看到使用Jersey处理异常的不同方式，Jersey是JAX-RS的一种实现。</p><p>JAX-RS为我们提供了许多处理异常的机制，我们可以选择和组合。处理REST异常是构建更好API的重要步骤。在我们的用例中，我们将构建一个购买股票的API，并看看每个步骤是如何相互影响的。</p><h2 id="_2-场景设置" tabindex="-1"><a class="header-anchor" href="#_2-场景设置"><span>2. 场景设置</span></a></h2><p>我们的最小设置包括创建一个仓库、几个bean和一些端点。它从我们的资源配置开始。在那里，我们将定义我们的起始URL和端点包：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ApplicationPath</span><span class="token punctuation">(</span><span class="token string">&quot;/exception-handling/*&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExceptionHandlingConfig</span> <span class="token keyword">extends</span> <span class="token class-name">ResourceConfig</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">ExceptionHandlingConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">packages</span><span class="token punctuation">(</span><span class="token string">&quot;com.baeldung.jersey.exceptionhandling.rest&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-1-beans" tabindex="-1"><a class="header-anchor" href="#_2-1-beans"><span>2.1. Beans</span></a></h3><p>我们只需要两个bean：<em>Stock_和_Wallet</em>，这样我们就可以保存_Stock_并购买它们。对于我们的_Stock_，我们只需要一个_price_属性来帮助验证。更重要的是，我们的_Wallet_类将具有验证方法来帮助构建我们的场景：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Wallet</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Double</span> balance <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>

    <span class="token comment">// getters and setters</span>

    <span class="token keyword">public</span> <span class="token class-name">Double</span> <span class="token function">addBalance</span><span class="token punctuation">(</span><span class="token class-name">Double</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> balance <span class="token operator">+=</span> amount<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasFunds</span><span class="token punctuation">(</span><span class="token class-name">Double</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>balance <span class="token operator">-</span> amount<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-端点" tabindex="-1"><a class="header-anchor" href="#_2-2-端点"><span>2.2. 端点</span></a></h3><p>同样，我们的API将有两个端点这些将定义标准的保存和检索我们的bean的方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Path</span><span class="token punctuation">(</span><span class="token string">&quot;/stocks&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StocksResource</span> <span class="token punctuation">{</span>
    <span class="token comment">// POST和GET方法</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Path</span><span class="token punctuation">(</span><span class="token string">&quot;/wallets&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WalletsResource</span> <span class="token punctuation">{</span>
    <span class="token comment">// POST和GET方法</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如，让我们看看_StocksResource_中的GET方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@GET</span>
<span class="token annotation punctuation">@Path</span><span class="token punctuation">(</span><span class="token string">&quot;/{ticker}&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Produces</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Response</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathParam</span><span class="token punctuation">(</span><span class="token string">&quot;ticker&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Optional</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Stock</span><span class="token punctuation">&gt;</span></span>\`\` stock <span class="token operator">=</span> stocksRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    stock<span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;ticker&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token class-name">Response</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>stock<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在我们的GET方法中，我们抛出了第一个异常。<strong>我们将在稍后处理它，这样我们就可以看到它的效果。</strong></p><h2 id="_3-抛出异常时会发生什么" tabindex="-1"><a class="header-anchor" href="#_3-抛出异常时会发生什么"><span>3. 抛出异常时会发生什么？</span></a></h2><p>当未处理的异常发生时，我们可能会暴露有关我们应用程序内部的敏感信息。如果我们尝试使用不存在的_Stock_来调用_StocksResource_中的GET方法，我们会得到一个类似的页面：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2022/04/baeldung-5157_default-exception-screen.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这个页面显示了应用程序服务器和版本，这可能有助于潜在的攻击者利用漏洞。此外，还有关于我们类名和行号的信息，这也可能有助于攻击者。<strong>最重要的是，这些信息对API用户来说大部分是无用的，并且给人留下不好的印象。</strong></p><p>为了帮助控制异常响应，JAX-RS提供了_ExceptionMapper_和_WebApplicationException_类。让我们看看它们是如何工作的。</p><h2 id="_4-使用-webapplicationexception-的自定义异常" tabindex="-1"><a class="header-anchor" href="#_4-使用-webapplicationexception-的自定义异常"><span>4. 使用_WebApplicationException_的自定义异常</span></a></h2><p>使用_WebApplicationException_，我们可以创建自定义异常。**这种特殊的_RuntimeException_让我们可以定义响应状态和实体。**我们将通过创建一个设置消息和状态的_InvalidTradeException_来开始：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InvalidTradeException</span> <span class="token keyword">extends</span> <span class="token class-name">WebApplicationException</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">InvalidTradeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">&quot;invalid trade operation&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Response<span class="token punctuation">.</span>Status</span><span class="token punctuation">.</span><span class="token constant">NOT_ACCEPTABLE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样值得一提的是，JAX-RS为常见的HTTP状态代码定义了_WebApplicationException_的子类。这些包括有用的异常，如_NotAllowedException_、_BadRequestException_等。<strong>但是，当我们想要更复杂的错误消息时，我们可以返回一个JSON响应。</strong></p><h3 id="_4-1-json异常" tabindex="-1"><a class="header-anchor" href="#_4-1-json异常"><span>4.1. JSON异常</span></a></h3><p>我们可以创建简单的Java类并将它们包含在我们的_Response_中。在我们的示例中，我们有一个_subject_属性，我们将使用它来包装上下文数据：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RestErrorResponse</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Object</span> subject<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>

    <span class="token comment">// getters and setters</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于这个异常不打算被操作，我们不会担心_subject_的类型。</p><h3 id="_4-2-将一切付诸实践" tabindex="-1"><a class="header-anchor" href="#_4-2-将一切付诸实践"><span>4.2. 将一切付诸实践</span></a></h3><p>让我们看看如何使用自定义异常，让我们定义一个购买_Stock_的方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@POST</span>
<span class="token annotation punctuation">@Path</span><span class="token punctuation">(</span><span class="token string">&quot;/{wallet}/buy/{ticker}&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Produces</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Response</span> <span class="token function">postBuyStock</span><span class="token punctuation">(</span>
  <span class="token annotation punctuation">@PathParam</span><span class="token punctuation">(</span><span class="token string">&quot;wallet&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> walletId<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathParam</span><span class="token punctuation">(</span><span class="token string">&quot;ticker&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Optional</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Stock</span><span class="token punctuation">&gt;</span></span>\`\` stock <span class="token operator">=</span> stocksRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    stock<span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token class-name">InvalidTradeException</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Optional</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Wallet</span><span class="token punctuation">&gt;</span></span>\` w <span class="token operator">=</span> walletsRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>walletId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    w<span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token class-name">InvalidTradeException</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Wallet</span> wallet <span class="token operator">=</span> w<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Double</span> price <span class="token operator">=</span> stock<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>wallet<span class="token punctuation">.</span><span class="token function">hasFunds</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">RestErrorResponse</span> response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestErrorResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        response<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>wallet<span class="token punctuation">)</span><span class="token punctuation">;</span>
        response<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">&quot;insufficient balance&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">WebApplicationException</span><span class="token punctuation">(</span><span class="token class-name">Response</span><span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token class-name">Status</span><span class="token punctuation">.</span><span class="token constant">NOT_ACCEPTABLE</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">entity</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    wallet<span class="token punctuation">.</span><span class="token function">addBalance</span><span class="token punctuation">(</span><span class="token operator">-</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>
    walletsRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>wallet<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token class-name">Response</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>wallet<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个方法中，我们使用了我们到目前为止创建的所有内容。**我们抛出一个_InvalidTradeException_用于不存在的股票或钱包。**如果资金不足，构建一个包含我们的_Wallet_的_RestErrorResponse_，并将其作为_WebApplicationException_抛出。</p><h3 id="_4-3-使用案例示例" tabindex="-1"><a class="header-anchor" href="#_4-3-使用案例示例"><span>4.3. 使用案例示例</span></a></h3><p>首先，让我们创建一个_Stock_：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token string">&#39;http://localhost:8080/jersey/exception-handling/stocks&#39;</span> <span class="token parameter variable">-H</span> <span class="token string">&#39;Content-Type: application/json&#39;</span> <span class="token parameter variable">-d</span> <span class="token string">&#39;{
    &quot;id&quot;: &quot;STOCK&quot;,
    &quot;price&quot;: 51.57
}&#39;</span>

<span class="token punctuation">{</span><span class="token string">&quot;id&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;STOCK&quot;</span>, <span class="token string">&quot;price&quot;</span><span class="token builtin class-name">:</span> <span class="token number">51.57</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后是一个_Wallet_来购买它：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token string">&#39;http://localhost:8080/jersey/exception-handling/wallets&#39;</span> <span class="token parameter variable">-H</span> <span class="token string">&#39;Content-Type: application/json&#39;</span> <span class="token parameter variable">-d</span> <span class="token string">&#39;{
    &quot;id&quot;: &quot;WALLET&quot;,
    &quot;balance&quot;: 100.0
}&#39;</span>

<span class="token punctuation">{</span><span class="token string">&quot;balance&quot;</span><span class="token builtin class-name">:</span> <span class="token number">100.0</span>, <span class="token string">&quot;id&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;WALLET&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后，我们将使用我们的_Wallet_购买_Stock_：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-X</span> POST <span class="token string">&#39;http://localhost:8080/jersey/exception-handling/wallets/WALLET/buy/STOCK&#39;</span>

<span class="token punctuation">{</span><span class="token string">&quot;balance&quot;</span><span class="token builtin class-name">:</span> <span class="token number">48.43</span>, <span class="token string">&quot;id&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;WALLET&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将在响应中得到我们的更新余额。此外，如果我们再次尝试购买，我们将得到我们详细的_RestErrorResponse_：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;message&quot;</span><span class="token operator">:</span> <span class="token string">&quot;insufficient balance&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;subject&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;balance&quot;</span><span class="token operator">:</span> <span class="token number">48.43</span><span class="token punctuation">,</span>
        <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;WALLET&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-使用-exceptionmapper-处理未处理的异常" tabindex="-1"><a class="header-anchor" href="#_5-使用-exceptionmapper-处理未处理的异常"><span>5. 使用_ExceptionMapper_处理未处理的异常</span></a></h2><p>需要澄清的是，抛出_WebApplicationException_并不足以摆脱默认错误页面。我们必须为我们的_Response_指定一个实体，对于_InvalidTradeException_来说并非如此。通常，尽管我们尽力处理所有场景，但未处理的异常仍然可能发生。因此，首先处理这些异常是一个好主意。<strong>使用_ExceptionMapper_，我们为特定类型的异常定义捕获点，并在提交之前修改_Response_：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerExceptionMapper</span> <span class="token keyword">implements</span> <span class="token class-name">ExceptionMapper</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WebApplicationException</span><span class="token punctuation">&gt;</span></span>\` <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Response</span> <span class="token function">toResponse</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> message <span class="token operator">=</span> exception<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Response</span> response <span class="token operator">=</span> exception<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Status</span> status <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getStatusInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token class-name">Response</span><span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">entity</span><span class="token punctuation">(</span>status <span class="token operator">+</span> <span class="token string">&quot;: &quot;</span> <span class="token operator">+</span> message<span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">TEXT_PLAIN</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如，我们只是将异常信息重新传递到我们的_Response_中，它将显示我们返回的确切内容。随后，我们可以通过在构建我们的_Response_之前检查状态代码来更进一步：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token constant">METHOD_NOT_ALLOWED</span><span class="token operator">:</span>
        message <span class="token operator">=</span> <span class="token string">&quot;HTTP METHOD NOT ALLOWED&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token constant">INTERNAL_SERVER_ERROR</span><span class="token operator">:</span>
        message <span class="token operator">=</span> <span class="token string">&quot;internal validation - &quot;</span> <span class="token operator">+</span> exception<span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
        message <span class="token operator">=</span> <span class="token string">&quot;[unhandled response code] &quot;</span> <span class="token operator">+</span> exception<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-1-处理特定异常" tabindex="-1"><a class="header-anchor" href="#_5-1-处理特定异常"><span>5.1. 处理特定异常</span></a></h3><p>如果有特定的_Exception_经常被抛出，我们也可以为它创建一个_ExceptionMapper_。**在我们的端点中，我们抛出一个_IllegalArgumentException_进行简单验证，所以让我们从它开始。**这次，用JSON响应：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IllegalArgumentExceptionMapper</span>
  <span class="token keyword">implements</span> <span class="token class-name">ExceptionMapper</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IllegalArgumentException</span><span class="token punctuation">&gt;</span></span>\`\` <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Response</span> <span class="token function">toResponse</span><span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Response</span><span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token class-name">Response<span class="token punctuation">.</span>Status</span><span class="token punctuation">.</span><span class="token constant">EXPECTATION_FAILED</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">entity</span><span class="token punctuation">(</span><span class="token function">build</span><span class="token punctuation">(</span>exception<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span>\`\`\`java
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IllegalArgumentExceptionMapper</span>
  <span class="token keyword">implements</span> <span class="token class-name">ExceptionMapper</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IllegalArgumentException</span><span class="token punctuation">&gt;</span></span>\`\` <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Response</span> <span class="token function">toResponse</span><span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Response</span><span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token class-name">Response<span class="token punctuation">.</span>Status</span><span class="token punctuation">.</span><span class="token constant">EXPECTATION_FAILED</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">entity</span><span class="token punctuation">(</span><span class="token function">build</span><span class="token punctuation">(</span>exception<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">RestErrorResponse</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">RestErrorResponse</span> response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestErrorResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        response<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">&quot;an illegal argument was provided: &quot;</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> response<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，每当我们的应用程序中发生未处理的_IllegalArgumentException_时，我们的_IllegalArgumentExceptionMapper_将处理它。</p><h3 id="_5-2-配置" tabindex="-1"><a class="header-anchor" href="#_5-2-配置"><span>5.2. 配置</span></a></h3><p>要激活我们的异常映射器，我们必须回到我们的Jersey资源配置并注册它们：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ExceptionHandlingConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// packages ...</span>
    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">IllegalArgumentExceptionMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">ServerExceptionMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这足以摆脱默认错误页面。**然后，根据抛出的内容，Jersey将在发生未处理的异常时使用我们的一个异常映射器。**例如，当尝试获取不存在的_Stock_时，将使用_IllegalArgumentExceptionMapper_：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token string">&#39;http://localhost:8080/jersey/exception-handling/stocks/NONEXISTENT&#39;</span>

<span class="token punctuation">{</span><span class="token string">&quot;message&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;an illegal argument was provided: ticker&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样，对于其他未处理的异常，将使用更广泛的_ServerExceptionMapper_。例如，当我们使用错误的HTTP方法时：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-X</span> POST <span class="token string">&#39;http://localhost:8080/jersey/exception-handling/stocks/STOCK&#39;</span>

Method Not Allowed: HTTP <span class="token number">405</span> Method Not Allowed
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-结论" tabindex="-1"><a class="header-anchor" href="#_6-结论"><span>6. 结论</span></a></h2><p>在本文中，我们看到了使用Jersey处理异常的多种方式。此外，为什么它很重要，以及如何配置它。之后，我们构建了一个简单的场景，我们可以应用它们。因此，我们现在拥有一个更友好和更安全的API。</p><p>如往常一样，源代码可在GitHub上获取。 OK</p>`,61),o=[p];function c(l,i){return a(),s("div",null,o)}const d=n(t,[["render",c],["__file","2024-07-19-Exception Handling With Jersey.html.vue"]]),k=JSON.parse('{"path":"/posts/baeldung/2024-07-19/2024-07-19-Exception%20Handling%20With%20Jersey.html","title":"Jersey中的异常处理","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","Jersey"],"tag":["Exception Handling","REST API"],"head":[["meta",{"name":"keywords","content":"Java, Jersey, REST API, Exception Handling"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-19/2024-07-19-Exception%20Handling%20With%20Jersey.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Jersey中的异常处理"}],["meta",{"property":"og:description","content":"Jersey中的异常处理 在本教程中，我们将看到使用Jersey处理异常的不同方式，Jersey是JAX-RS的一种实现。 JAX-RS为我们提供了许多处理异常的机制，我们可以选择和组合。处理REST异常是构建更好API的重要步骤。在我们的用例中，我们将构建一个购买股票的API，并看看每个步骤是如何相互影响的。 2. 场景设置 我们的最小设置包括创建一..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.baeldung.com/wp-content/uploads/2022/04/baeldung-5157_default-exception-screen.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-19T14:20:03.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Exception Handling"}],["meta",{"property":"article:tag","content":"REST API"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-19T14:20:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Jersey中的异常处理\\",\\"image\\":[\\"https://www.baeldung.com/wp-content/uploads/2022/04/baeldung-5157_default-exception-screen.png\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-19T14:20:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Jersey中的异常处理 在本教程中，我们将看到使用Jersey处理异常的不同方式，Jersey是JAX-RS的一种实现。 JAX-RS为我们提供了许多处理异常的机制，我们可以选择和组合。处理REST异常是构建更好API的重要步骤。在我们的用例中，我们将构建一个购买股票的API，并看看每个步骤是如何相互影响的。 2. 场景设置 我们的最小设置包括创建一..."},"headers":[{"level":2,"title":"2. 场景设置","slug":"_2-场景设置","link":"#_2-场景设置","children":[{"level":3,"title":"2.1. Beans","slug":"_2-1-beans","link":"#_2-1-beans","children":[]},{"level":3,"title":"2.2. 端点","slug":"_2-2-端点","link":"#_2-2-端点","children":[]}]},{"level":2,"title":"3. 抛出异常时会发生什么？","slug":"_3-抛出异常时会发生什么","link":"#_3-抛出异常时会发生什么","children":[]},{"level":2,"title":"4. 使用_WebApplicationException_的自定义异常","slug":"_4-使用-webapplicationexception-的自定义异常","link":"#_4-使用-webapplicationexception-的自定义异常","children":[{"level":3,"title":"4.1. JSON异常","slug":"_4-1-json异常","link":"#_4-1-json异常","children":[]},{"level":3,"title":"4.2. 将一切付诸实践","slug":"_4-2-将一切付诸实践","link":"#_4-2-将一切付诸实践","children":[]},{"level":3,"title":"4.3. 使用案例示例","slug":"_4-3-使用案例示例","link":"#_4-3-使用案例示例","children":[]}]},{"level":2,"title":"5. 使用_ExceptionMapper_处理未处理的异常","slug":"_5-使用-exceptionmapper-处理未处理的异常","link":"#_5-使用-exceptionmapper-处理未处理的异常","children":[{"level":3,"title":"5.1. 处理特定异常","slug":"_5-1-处理特定异常","link":"#_5-1-处理特定异常","children":[]},{"level":3,"title":"5.2. 配置","slug":"_5-2-配置","link":"#_5-2-配置","children":[]}]},{"level":2,"title":"6. 结论","slug":"_6-结论","link":"#_6-结论","children":[]}],"git":{"createdTime":1721398803000,"updatedTime":1721398803000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":6.25,"words":1876},"filePathRelative":"posts/baeldung/2024-07-19/2024-07-19-Exception Handling With Jersey.md","localizedDate":"2022年4月1日","excerpt":"\\n<p>在本教程中，我们将看到使用Jersey处理异常的不同方式，Jersey是JAX-RS的一种实现。</p>\\n<p>JAX-RS为我们提供了许多处理异常的机制，我们可以选择和组合。处理REST异常是构建更好API的重要步骤。在我们的用例中，我们将构建一个购买股票的API，并看看每个步骤是如何相互影响的。</p>\\n<h2>2. 场景设置</h2>\\n<p>我们的最小设置包括创建一个仓库、几个bean和一些端点。它从我们的资源配置开始。在那里，我们将定义我们的起始URL和端点包：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token annotation punctuation\\">@ApplicationPath</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"/exception-handling/*\\"</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">ExceptionHandlingConfig</span> <span class=\\"token keyword\\">extends</span> <span class=\\"token class-name\\">ResourceConfig</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">ExceptionHandlingConfig</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">packages</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"com.baeldung.jersey.exceptionhandling.rest\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{d as comp,k as data};
