import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as p}from"./app-DVf85Vw4.js";const t={},e=p('<h1 id="java中将map流展平为单个map" tabindex="-1"><a class="header-anchor" href="#java中将map流展平为单个map"><span>Java中将Map流展平为单个Map</span></a></h1><p>自Java 8推出以来，使用数据流已成为常态。这些流经常包含像Map这样的复杂结构，在进一步处理时可能会带来挑战。</p><p>在本教程中，我们将探讨如何将Map流展平为单个Map。</p><h2 id="_2-问题介绍" tabindex="-1"><a class="header-anchor" href="#_2-问题介绍"><span>2. 问题介绍</span></a></h2><p>在深入解决方案之前，让我们先澄清一下“展平Map流”的含义。本质上，我们想要将流中的Map转换为包含流中每个Map的所有键值对的单个Map。</p><p>像往常一样，一个例子可以帮助我们快速理解问题。假设我们有三个Map，存储了玩家名字和分数之间的关联：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Map</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>`````````````````` playerMap1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>``````````````````<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>\n    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;Kai&quot;</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;Liam&quot;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token class-name">Map</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>`````````````````` playerMap2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>``````````````````<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>\n    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;Eric&quot;</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;Kevin&quot;</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token class-name">Map</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>`````````````````` playerMap3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>``````````````````<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>\n    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;Saajan&quot;</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们的输入是一个包含这些Map的流。为了简单起见，我们将在本教程中使用_Stream.of(playerMap1, playerMap2, …)_来构建输入流。然而，值得注意的是<strong>流不一定有定义好的顺序</strong>。</p><p>现在，我们的目标是将包含上述三个Map的流合并为一个名字-分数Map：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Map</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>`````````````````` expectedMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>``````````````````<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>\n    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;Saajan&quot;</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;Liam&quot;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;Kai&quot;</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;Eric&quot;</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;Kevin&quot;</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>值得一提的是，<strong>由于我们正在使用HashMap对象，最终结果中的条目顺序不能保证</strong>。</p><p>此外，<strong>流中的Map可能包含重复的键和null值</strong>。稍后，我们将扩展示例以涵盖本教程中的这些场景。</p><p>接下来，让我们深入代码。</p><h2 id="_3-使用flatmap-和collectors-tomap" tabindex="-1"><a class="header-anchor" href="#_3-使用flatmap-和collectors-tomap"><span>3. 使用flatMap()和Collectors.toMap()</span></a></h2><p>合并Map的一种方法是使用flatMap()方法和toMap()收集器：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Map</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>`````````````````` mergedMap <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>playerMap1<span class="token punctuation">,</span> playerMap2<span class="token punctuation">,</span> playerMap3<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>map <span class="token operator">-&gt;</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token operator">::</span><span class="token function">getKey</span><span class="token punctuation">,</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token operator">::</span><span class="token function">getValue</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">assertEquals</span><span class="token punctuation">(</span>expectedMap<span class="token punctuation">,</span> mergedMap<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，<strong>flatMap()方法将流中的每个Map展平为其条目的流</strong>。然后，我们使用toMap()收集器将流的元素收集到一个单一的Map中。</p><p>toMap()收集器需要两个函数作为参数：一个用于提取键（Map.Entry::getKey），一个用于提取值（Map.Entry::getValue）。在这里，我们使用方法引用来表示这两个函数。这些函数应用于流中的每个条目，以构建结果Map。</p><h2 id="_4-处理重复的键" tabindex="-1"><a class="header-anchor" href="#_4-处理重复的键"><span>4. 处理重复的键</span></a></h2><p>我们已经学会了如何使用toMap()收集器将HashMap流合并为一个单一的Map。然而，<strong>如果Map流包含重复的键，这种方法将会失败</strong>。例如，如果我们向流中添加一个带有重复键“Kai”的新Map，它会抛出IllegalStateException：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Map</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>`````````````````` playerMap4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>``````````````````<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>\n    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;Kai&quot;</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token function">assertThrows</span><span class="token punctuation">(</span><span class="token class-name">IllegalStateException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>playerMap1<span class="token punctuation">,</span> playerMap2<span class="token punctuation">,</span> playerMap3<span class="token punctuation">,</span> playerMap4<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>map <span class="token operator">-&gt;</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token operator">::</span><span class="token function">getKey</span><span class="token punctuation">,</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token operator">::</span><span class="token function">getValue</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;Duplicate key Kai (attempted merging values 92 and 76)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了解决重复键的问题，<strong>我们可以将一个合并函数作为第三个参数传递给toMap()方法来处理与重复键关联的值</strong>。</p><p>我们对重复键场景的合并需求可能不同。在我们的示例中，我们希望<strong>一旦发生重复的名称，就选择更高的分数</strong>。因此，我们的目标是得到这样的Map作为结果：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Map</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>`````````````````` expectedMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>``````````````````<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>\n    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;Saajan&quot;</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;Liam&quot;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;Kai&quot;</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;- 最大值92和76</span>\n    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;Eric&quot;</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;Kevin&quot;</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，让我们看看如何实现它：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Map</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>`````````````````` mergedMap <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>playerMap1<span class="token punctuation">,</span> playerMap2<span class="token punctuation">,</span> playerMap3<span class="token punctuation">,</span> playerMap4<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>map <span class="token operator">-&gt;</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token operator">::</span><span class="token function">getKey</span><span class="token punctuation">,</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token operator">::</span><span class="token function">getValue</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">max</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">assertEquals</span><span class="token punctuation">(</span>expectedMap<span class="token punctuation">,</span> mergedMap<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如代码所示，<strong>我们使用了方法引用Integer::max作为toMap()中的合并函数</strong>。这确保了当出现重复键时，最终Map中的结果值将是与这些键关联的两个值中较大的一个。</p><h2 id="_5-处理null值" tabindex="-1"><a class="header-anchor" href="#_5-处理null值"><span>5. 处理null值</span></a></h2><p>我们已经看到Collectors.toMap()方便地将条目收集到一个单一的Map中。然而，<strong>Collectors.toMap()方法不能处理Map的值为null</strong>。我们的解决方案如果任何Map条目的值为null，就会抛出NullPointerException。</p><p>让我们添加一个新的Map来验证这一点：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Map</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>`````````````````` playerMap5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>``````````````````<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>\n    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;Kai&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;Jerry&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token function">assertThrows</span><span class="token punctuation">(</span><span class="token class-name">NullPointerException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>playerMap1<span class="token punctuation">,</span> playerMap2<span class="token punctuation">,</span> playerMap3<span class="token punctuation">,</span> playerMap4<span class="token punctuation">,</span> playerMap5<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>map <span class="token operator">-&gt;</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token operator">::</span><span class="token function">getKey</span><span class="token punctuation">,</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token operator">::</span><span class="token function">getValue</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">max</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，<strong>输入流中的Map包含重复的键和null值</strong>。这次，<strong>我们仍然希望为重复的玩家名称获得更高的分数</strong>。此外，<strong>我们将null视为最低分数</strong>。然后，我们的预期结果看起来像这样：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Map</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>`````````````````` expectedMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>``````````````````<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>\n    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;Saajan&quot;</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;Liam&quot;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;Kai&quot;</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;- 92, 76和null中的最大值</span>\n    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;Eric&quot;</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;Kevin&quot;</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;Jerry&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于<strong>Integer.max()不能处理null值</strong>，让我们创建一个null安全的获取两个可空Integer对象中较大值的方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">Integer</span> <span class="token function">maxInteger</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> int1<span class="token punctuation">,</span> <span class="token class-name">Integer</span> int2<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>int1 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> int2<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>int2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> int1<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>int1<span class="token punctuation">,</span> int2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，让我们解决这个问题。</p><h3 id="_5-1-使用flatmap-和foreach" tabindex="-1"><a class="header-anchor" href="#_5-1-使用flatmap-和foreach"><span>5.1. 使用flatMap()和forEach()</span></a></h3><p>解决这个问题的一个直接方法是<strong>首先初始化一个空Map，然后在forEach()中将所需的键值对放入其中</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Map</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>`````````````````` mergedMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>playerMap1<span class="token punctuation">,</span> playerMap2<span class="token punctuation">,</span> playerMap3<span class="token punctuation">,</span> playerMap4<span class="token punctuation">,</span> playerMap5<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>map <span class="token operator">-&gt;</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>entry <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n      <span class="token class-name">String</span> k <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token class-name">Integer</span> v <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>mergedMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          mergedMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token function">maxInteger</span><span class="token punctuation">(</span>mergedMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          mergedMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">assertEquals</span><span class="token punctuation">(</span>expectedMap<span class="token punctuation">,</span> mergedMap<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-使用groupingby-、mapping-和reducing" tabindex="-1"><a class="header-anchor" href="#_5-2-使用groupingby-、mapping-和reducing"><span>5.2. 使用groupingBy()、mapping()和reducing()</span></a></h3><p>flatMap + forEach()解决方案很直接。然而，这不是一种函数式方法，需要我们编写一些样板合并逻辑。</p><p>或者，<strong>我们可以结合groupingBy()、mapping()和reducing()收集器来以函数式方式解决这个问题</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Map</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>`````````````````` mergedMap <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>playerMap1<span class="token punctuation">,</span> playerMap2<span class="token punctuation">,</span> playerMap3<span class="token punctuation">,</span> playerMap4<span class="token punctuation">,</span> playerMap5<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>map <span class="token operator">-&gt;</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token operator">::</span><span class="token function">getKey</span><span class="token punctuation">,</span> <span class="token function">mapping</span><span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token operator">::</span><span class="token function">getValue</span><span class="token punctuation">,</span> <span class="token function">reducing</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">::</span><span class="token function">maxInteger</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">assertEquals</span><span class="token punctuation">(</span>expectedMap<span class="token punctuation">,</span> mergedMap<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如上面的代码所示，我们在collect()方法中结合了三个收集器。接下来，让我们快速了解它们是如何协同工作的：</p><ul><li><strong>groupingBy(Map.Entry::getKey, mapping(…)) –</strong> 按它们的键对Map条目进行分组，以<strong>获得键 -&gt; 条目结构，这些条目进入mapping()</strong></li><li><strong>mapping(Map.Entry::getValue, reducing(…))</strong> – 下游收集器，<strong>使用Map.Entry::getValue将每个条目映射到Integer</strong>，并将<strong>Integer值传递给另一个下游收集器reducing()</strong></li><li><strong>reducing(null, this::maxInteger)</strong> – 下游收集器，通过执行maxInteger函数对重复键的Integer值应用减少逻辑，该函数返回两个整数值中的最大值</li></ul><h2 id="_6-将java中的map列表转换为单个map" tabindex="-1"><a class="header-anchor" href="#_6-将java中的map列表转换为单个map"><span>6. 将Java中的Map列表转换为单个Map</span></a></h2><p>在Java中，有多种方法可以将Map列表转换为单个Map，每种方法都适合不同的偏好和编码风格。让我们探索两种方法：一种使用for循环，另一种使用Java Streams。</p><p><strong>虽然这些方法有效地合并了Map，但重要的是要注意它们会覆盖具有重复键的条目。</strong> 在需要保留重复键的现有值的情况下，应该考虑这种行为。</p><h3 id="_6-1-使用简单的for循环" tabindex="-1"><a class="header-anchor" href="#_6-1-使用简单的for循环"><span>6.1. 使用简单的For循环</span></a></h3><p>一个常见的方法是使用简单的for循环遍历列表中的每个Map。在每次迭代中，我们将使用putAll()方法将当前Map中的所有键值映射插入到结果的单个Map中。</p><p>下面是一个示例，展示了如何实现这种方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> ``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span>`````` <span class="token class-name">Map</span>``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span>`````` <span class="token function">mergeMapsUsingLoop</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">Map</span>``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span>``````<span class="token operator">&gt;</span> listOfMaps<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Map</span>``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span>`````` result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map</span>``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span>`````` map <span class="token operator">:</span> listOfMaps<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        result<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方法提供了对迭代和Map操作的直接控制，提高了其清晰度和易理解性。</p><h3 id="_6-2-使用java-streams" tabindex="-1"><a class="header-anchor" href="#_6-2-使用java-streams"><span>6.2. 使用Java Streams</span></a></h3><p>随着Java 8的引入及其对Streams的支持，一种更富有表现力的解决方案变得可用。使用Streams，我们可以无缝地将Map列表转换为单个Map。这个过程涉及对列表进行流处理，展平每个Map的条目，然后使用Collectors.toMap()方法将它们收集到一个单一的Map中。</p><p>下面演示了如何实现这种基于流的解决方案：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> ``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span>`````` <span class="token class-name">Map</span>``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span>`````` <span class="token function">mergeMapsUsingStream</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">Map</span>``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span>``````<span class="token operator">&gt;</span> listOfMaps<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> listOfMaps<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>map <span class="token operator">-&gt;</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token operator">::</span><span class="token function">getKey</span><span class="token punctuation">,</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token operator">::</span><span class="token function">getValue</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>利用函数式编程范式，这种基于流的方法提供了一种优雅而高效的解决方案，同时确保了可读性和可维护性。</p><h2 id="_7-结论" tabindex="-1"><a class="header-anchor" href="#_7-结论"><span>7. 结论</span></a></h2><p>在本文中，我们深入探讨了如何在Java中合并Map流，并展示了几种处理不同场景的方法，包括合并包含重复键的Map以及优雅地处理null值。</p><p>正如本文中的例子在GitHub上可用一样。</p><p>OK</p>',62),c=[e];function o(l,u){return s(),a("div",null,c)}const r=n(t,[["render",o],["__file","2024-06-20-Flatten a Stream of Maps to a Single Map in Java.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/Archive/2024-06-20-Flatten%20a%20Stream%20of%20Maps%20to%20a%20Single%20Map%20in%20Java.html","title":"Java中将Map流展平为单个Map","lang":"zh-CN","frontmatter":{"date":"2024-06-21T00:00:00.000Z","category":["Java","Stream API"],"tag":["Java 8","Stream","Map"],"head":[["meta",{"name":"keywords","content":"Java, Stream API, Map, Flatten, Java 8"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/Archive/2024-06-20-Flatten%20a%20Stream%20of%20Maps%20to%20a%20Single%20Map%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Java中将Map流展平为单个Map"}],["meta",{"property":"og:description","content":"Java中将Map流展平为单个Map 自Java 8推出以来，使用数据流已成为常态。这些流经常包含像Map这样的复杂结构，在进一步处理时可能会带来挑战。 在本教程中，我们将探讨如何将Map流展平为单个Map。 2. 问题介绍 在深入解决方案之前，让我们先澄清一下“展平Map流”的含义。本质上，我们想要将流中的Map转换为包含流中每个Map的所有键值对的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-21T09:54:56.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java 8"}],["meta",{"property":"article:tag","content":"Stream"}],["meta",{"property":"article:tag","content":"Map"}],["meta",{"property":"article:published_time","content":"2024-06-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-21T09:54:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java中将Map流展平为单个Map\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-21T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-21T09:54:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Java中将Map流展平为单个Map 自Java 8推出以来，使用数据流已成为常态。这些流经常包含像Map这样的复杂结构，在进一步处理时可能会带来挑战。 在本教程中，我们将探讨如何将Map流展平为单个Map。 2. 问题介绍 在深入解决方案之前，让我们先澄清一下“展平Map流”的含义。本质上，我们想要将流中的Map转换为包含流中每个Map的所有键值对的..."},"headers":[{"level":2,"title":"2. 问题介绍","slug":"_2-问题介绍","link":"#_2-问题介绍","children":[]},{"level":2,"title":"3. 使用flatMap()和Collectors.toMap()","slug":"_3-使用flatmap-和collectors-tomap","link":"#_3-使用flatmap-和collectors-tomap","children":[]},{"level":2,"title":"4. 处理重复的键","slug":"_4-处理重复的键","link":"#_4-处理重复的键","children":[]},{"level":2,"title":"5. 处理null值","slug":"_5-处理null值","link":"#_5-处理null值","children":[{"level":3,"title":"5.1. 使用flatMap()和forEach()","slug":"_5-1-使用flatmap-和foreach","link":"#_5-1-使用flatmap-和foreach","children":[]},{"level":3,"title":"5.2. 使用groupingBy()、mapping()和reducing()","slug":"_5-2-使用groupingby-、mapping-和reducing","link":"#_5-2-使用groupingby-、mapping-和reducing","children":[]}]},{"level":2,"title":"6. 将Java中的Map列表转换为单个Map","slug":"_6-将java中的map列表转换为单个map","link":"#_6-将java中的map列表转换为单个map","children":[{"level":3,"title":"6.1. 使用简单的For循环","slug":"_6-1-使用简单的for循环","link":"#_6-1-使用简单的for循环","children":[]},{"level":3,"title":"6.2. 使用Java Streams","slug":"_6-2-使用java-streams","link":"#_6-2-使用java-streams","children":[]}]},{"level":2,"title":"7. 结论","slug":"_7-结论","link":"#_7-结论","children":[]}],"git":{"createdTime":1718963696000,"updatedTime":1718963696000,"contributors":[{"name":"Lance Li","email":"lance.jx.li@gtomato.com","commits":1}]},"readingTime":{"minutes":7.15,"words":2146},"filePathRelative":"posts/baeldung/Archive/2024-06-20-Flatten a Stream of Maps to a Single Map in Java.md","localizedDate":"2024年6月21日","excerpt":"\\n<p>自Java 8推出以来，使用数据流已成为常态。这些流经常包含像Map这样的复杂结构，在进一步处理时可能会带来挑战。</p>\\n<p>在本教程中，我们将探讨如何将Map流展平为单个Map。</p>\\n<h2>2. 问题介绍</h2>\\n<p>在深入解决方案之前，让我们先澄清一下“展平Map流”的含义。本质上，我们想要将流中的Map转换为包含流中每个Map的所有键值对的单个Map。</p>\\n<p>像往常一样，一个例子可以帮助我们快速理解问题。假设我们有三个Map，存储了玩家名字和分数之间的关联：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token class-name\\">Map</span>``````````````````<span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Integer</span><span class=\\"token punctuation\\">&gt;</span></span>`````````````````` playerMap1 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">HashMap</span>``````````````````<span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Integer</span><span class=\\"token punctuation\\">&gt;</span></span>``````````````````<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Kai\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">92</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Liam\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">100</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">Map</span>``````````````````<span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Integer</span><span class=\\"token punctuation\\">&gt;</span></span>`````````````````` playerMap2 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">HashMap</span>``````````````````<span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Integer</span><span class=\\"token punctuation\\">&gt;</span></span>``````````````````<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Eric\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">42</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Kevin\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">77</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">Map</span>``````````````````<span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Integer</span><span class=\\"token punctuation\\">&gt;</span></span>`````````````````` playerMap3 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">HashMap</span>``````````````````<span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Integer</span><span class=\\"token punctuation\\">&gt;</span></span>``````````````````<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Saajan\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">35</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}');export{r as comp,d as data};
