import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as e}from"./app-ByqmPefB.js";const t={},p=e('<h1 id="jackson-jsonnode-转换为类型化集合-baeldung这篇文章是关于如何将jackson的原始数据类型jsonnode转换为java类型集合的。我们可以利用jsonnode本身来读取json-但将其转换为java集合可能更有益处。java集合比原始json数据提供的优势包括类型安全性、更快的处理速度以及更多类型特定的操作。" tabindex="-1"><a class="header-anchor" href="#jackson-jsonnode-转换为类型化集合-baeldung这篇文章是关于如何将jackson的原始数据类型jsonnode转换为java类型集合的。我们可以利用jsonnode本身来读取json-但将其转换为java集合可能更有益处。java集合比原始json数据提供的优势包括类型安全性、更快的处理速度以及更多类型特定的操作。"><span>Jackson JsonNode 转换为类型化集合 | Baeldung这篇文章是关于如何将Jackson的原始数据类型JsonNode转换为Java类型集合的。我们可以利用JsonNode本身来读取JSON，但将其转换为Java集合可能更有益处。Java集合比原始JSON数据提供的优势包括类型安全性、更快的处理速度以及更多类型特定的操作。</span></a></h1><h3 id="_2-示例设置" tabindex="-1"><a class="header-anchor" href="#_2-示例设置"><span>2. 示例设置</span></a></h3><p>在我们的代码示例中，我们将探索将JsonNode转换为List或Map对象的不同方法。让我们设置我们示例的基础构件。</p><h4 id="_2-1-依赖性" tabindex="-1"><a class="header-anchor" href="#_2-1-依赖性"><span>2.1. 依赖性</span></a></h4><p>首先，让我们在pom.xml文件中添加Jackson核心依赖性：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>`&lt;dependency&gt;`\n    `&lt;groupId&gt;`com.fasterxml.jackson.core`&lt;/groupId&gt;`\n    `&lt;artifactId&gt;`jackson-core`&lt;/artifactId&gt;`\n    `&lt;version&gt;`2.17.0`&lt;/version&gt;`\n`&lt;/dependency&gt;`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-json数据" tabindex="-1"><a class="header-anchor" href="#_2-2-json数据"><span>2.2. JSON数据</span></a></h4><p>接下来，让我们定义我们的用例JSON：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;persons&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n            <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">30</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n            <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">25</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;idToPerson&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;1234&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">30</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;1235&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">25</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的JSON中，我们有一个JSON数组persons和一个JSON对象idToPerson。我们将探讨将它们转换为Java集合的方法。</p><h4 id="_2-3-数据传输对象-dto" tabindex="-1"><a class="header-anchor" href="#_2-3-数据传输对象-dto"><span>2.3. 数据传输对象(DTO)</span></a></h4><p>让我们定义一个Person类，我们可以在示例中使用它：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>\n\n    <span class="token comment">// 构造函数/getter/setter</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-4-将json字符串转换为jsonnode" tabindex="-1"><a class="header-anchor" href="#_2-4-将json字符串转换为jsonnode"><span>2.4. 将JSON字符串转换为JsonNode</span></a></h4><p>如果我们想从整个JSON中读取一个对象，我们可以使用Jackson的ObjectMapper类来这样做：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">JsonNode</span> rootNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readTree</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">JsonNode</span> childNode <span class="token operator">=</span> rootNode<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;persons&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>要将整个JSON转换为JsonNode对象，我们使用readTree()方法。然后我们使用get()方法遍历JsonNode对象，该方法返回具有指定名称的嵌套对象。</p><h2 id="_3-手动转换" tabindex="-1"><a class="header-anchor" href="#_3-手动转换"><span>3. 手动转换</span></a></h2><p>在检查库方法之前，让我们看看如何手动将JsonNode转换为集合。</p><h3 id="_3-1-手动将jsonnode转换为list" tabindex="-1"><a class="header-anchor" href="#_3-1-手动将jsonnode转换为list"><span>3.1. 手动将JsonNode转换为List</span></a></h3><p>要将JsonNode转换为列表，我们可以逐个遍历它并用它创建一个List对象：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span>`````````` <span class="token function">manualJsonNodeToList</span><span class="token punctuation">(</span><span class="token class-name">JsonNode</span> personsNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">List</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span>`````````` people <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">JsonNode</span> node <span class="token operator">:</span> personsNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> node<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        people<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> people<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们使用一个循环来遍历输入节点的所有子节点。这只有在我们的输入节点是数组时才可能。</p><p>对于每个节点，我们创建一个Person对象并将其添加到列表中。我们使用get(fieldName)方法从节点中获取name和age。JsonNode提供了多种方法将返回的值转换为原始Java类型。在这里，asText()和asInt()方法分别将值转换为String和int。</p><h3 id="_3-2-手动将jsonnode转换为map" tabindex="-1"><a class="header-anchor" href="#_3-2-手动将jsonnode转换为map"><span>3.2. 手动将JsonNode转换为Map</span></a></h3><p>让我们看看地图的类似转换：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Map</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span>```` <span class="token function">manualJsonNodeToMap</span><span class="token punctuation">(</span><span class="token class-name">JsonNode</span> idToPersonsNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Map</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span>```` mapOfIdToPerson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    idToPersonsNode<span class="token punctuation">.</span><span class="token function">fields</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">forEachRemaining</span><span class="token punctuation">(</span>node <span class="token operator">-&gt;</span> mapOfIdToPerson<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> node<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> mapOfIdToPerson<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们使用fields()方法迭代地图条目。它返回一个Iterator<code>&lt;Map.Entry&lt;String, JsonNode&gt;</code>&gt;对象，我们可以进一步处理。接下来，我们读取每个条目并将其放入我们的Map中。</p><h2 id="_4-使用jackson的readvalue-和convertvalue" tabindex="-1"><a class="header-anchor" href="#_4-使用jackson的readvalue-和convertvalue"><span>4. 使用Jackson的readValue()和convertValue()</span></a></h2><p>Jackson提供了多种将JsonNode转换为Java对象的方法。让我们看看其中的两个。</p><h3 id="_4-1-使用readvalue" tabindex="-1"><a class="header-anchor" href="#_4-1-使用readvalue"><span>4.1. 使用readValue()</span></a></h3><p>readValue()方法可以使用TypeReference转换为List或Map：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span>`````````` <span class="token function">readValueJsonNodeToList</span><span class="token punctuation">(</span><span class="token class-name">JsonNode</span> personsNode<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n    <span class="token class-name">TypeReference</span><span class="token operator">&lt;</span><span class="token class-name">List</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span>``````````<span class="token operator">&gt;</span> typeReferenceList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TypeReference</span><span class="token operator">&lt;</span><span class="token class-name">List</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span>``````````<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>personsNode<span class="token punctuation">.</span><span class="token function">traverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> typeReferenceList<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token class-name">Map</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span>```` <span class="token function">readValueJsonNodeToMap</span><span class="token punctuation">(</span><span class="token class-name">JsonNode</span> idToPersonsNode<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n    <span class="token class-name">TypeReference</span><span class="token operator">&lt;</span><span class="token class-name">Map</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span>````<span class="token operator">&gt;</span> typeReferenceMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TypeReference</span><span class="token operator">&lt;</span><span class="token class-name">Map</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span>````<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>idToPersonsNode<span class="token punctuation">.</span><span class="token function">traverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> typeReferenceMap<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，我们通过传递我们需要转换到的确切类型来创建TypeReference对象。然后我们调用readValue()方法，其中JsonParser由jsonNode.traverse()提供。使用解析器，它根据我们提供的TypeReference将节点反序列化为列表或映射。</p><h3 id="_4-2-使用convertvalue" tabindex="-1"><a class="header-anchor" href="#_4-2-使用convertvalue"><span>4.2. 使用convertValue()</span></a></h3><p>同样，我们可以使用convertValue()方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span>`````````` <span class="token function">convertValueJsonNodeToList</span><span class="token punctuation">(</span><span class="token class-name">JsonNode</span> personsNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">TypeReference</span><span class="token operator">&lt;</span><span class="token class-name">List</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span>``````````<span class="token operator">&gt;</span> typeReferenceList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TypeReference</span><span class="token operator">&lt;</span><span class="token class-name">List</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span>``````````<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">convertValue</span><span class="token punctuation">(</span>personsNode<span class="token punctuation">,</span> typeReferenceList<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token class-name">Map</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span>```` <span class="token function">convertValueJsonNodeToMap</span><span class="token punctuation">(</span><span class="token class-name">JsonNode</span> idToPersonsNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">TypeReference</span><span class="token operator">&lt;</span><span class="token class-name">Map</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span>````<span class="token operator">&gt;</span> typeReferenceMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TypeReference</span><span class="token operator">&lt;</span><span class="token class-name">Map</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span>````<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">convertValue</span><span class="token punctuation">(</span>idToPersonsNode<span class="token punctuation">,</span> typeReferenceMap<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>convertValue()方法通过首先序列化输入对象，然后将其反序列化为所需类型来工作。因此，它可以更灵活地用于从一个对象转换到另一个对象。例如，我们也可以使用它进行从Java对象到JsonNode的反向比较。</p><h2 id="_5-自定义反序列化器" tabindex="-1"><a class="header-anchor" href="#_5-自定义反序列化器"><span>5. 自定义反序列化器</span></a></h2><p>我们也可以提供一个自定义的反序列化器来执行转换。让我们看看我们如何定义一个：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomPersonListDeserializer</span> <span class="token keyword">extends</span> <span class="token class-name">JsonDeserializer</span><span class="token operator">&lt;</span><span class="token class-name">List</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span>``````````<span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">List</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span>`````````` <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token class-name">JsonParser</span> p<span class="token punctuation">,</span> <span class="token class-name">DeserializationContext</span> ctxt<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token class-name">ObjectMapper</span> objectMapper <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ObjectMapper</span><span class="token punctuation">)</span> p<span class="token punctuation">.</span><span class="token function">getCodec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">List</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span>`````````` personList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">JsonNode</span> personsNode <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">readTree</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">JsonNode</span> node <span class="token operator">:</span> personsNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            personList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>objectMapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">traverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">return</span> personList<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们看看代码的一些重要部分：</p><ul><li>首先，这个类扩展了Jackson的JsonDeserializer。</li><li>然后，我们覆盖了deserialize()方法并提供了我们的实现。</li><li>在实现中，我们从JsonParser对象中获取ObjectMapper。</li><li>objectMapper.readTree()将解析器表示的整个树转换为JsonNode实例。</li><li>最后，类似于手动转换，我们通过循环遍历节点将JSON数组中的每个节点转换为Person对象。</li></ul><p>反序列化器与其他方法类似，但它可以提供关注点的分离。此外，自定义反序列化器提供了灵活性，因为我们可以很容易地在调用代码中切换反序列化器。</p><p>我们将在下一部分中看到如何使用反序列化器。</p><h2 id="_6-测试" tabindex="-1"><a class="header-anchor" href="#_6-测试"><span>6. 测试</span></a></h2><p>现在我们已经准备好了不同的方法，让我们编写一些测试来验证它们。</p><h3 id="_6-1-设置" tabindex="-1"><a class="header-anchor" href="#_6-1-设置"><span>6.1. 设置</span></a></h3><p>让我们设置我们的测试类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JsonNodeToCollectionUnitTest</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> jsonString <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;persons\\&quot;:[{\\&quot;name\\&quot;:\\&quot;John\\&quot;,\\&quot;age\\&quot;:30},{\\&quot;name\\&quot;:\\&quot;Alice\\&quot;,\\&quot;age\\&quot;:25}],\\&quot;idToPerson\\&quot;:{\\&quot;1234\\&quot;:{\\&quot;name\\&quot;:\\&quot;John\\&quot;,\\&quot;age\\&quot;:30},\\&quot;1235\\&quot;:{\\&quot;name\\&quot;:\\&quot;Alice\\&quot;,\\&quot;age\\&quot;:25}}}&quot;</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">static</span> <span class="token class-name">JsonNode</span> completeJson<span class="token punctuation">;</span>\n    <span class="token keyword">static</span> <span class="token class-name">JsonNode</span> personsNode<span class="token punctuation">;</span>\n    <span class="token keyword">static</span> <span class="token class-name">JsonNode</span> idToPersonNode<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@BeforeAll</span>\n    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JsonProcessingException</span> <span class="token punctuation">{</span>\n        completeJson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readTree</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        personsNode <span class="token operator">=</span> completeJson<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;persons&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        idToPersonNode <span class="token operator">=</span> completeJson<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;idToPerson&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们定义了一个JSON字符串，我们可以将其用作测试输入。然后，我们定义了一个setup()方法，在所有测试之前执行。它设置了我们的输入JsonNode对象。</p><h3 id="_6-2-测试转换方法" tabindex="-1"><a class="header-anchor" href="#_6-2-测试转换方法"><span>6.2. 测试转换方法</span></a></h3><p>接下来，让我们测试我们的转换方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenJsonNode_whenConvertingToList_thenFieldsAreCorrect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n\n    <span class="token class-name">List</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span>`````````` personList1 <span class="token operator">=</span> <span class="token class-name">JsonNodeConversionUtil</span><span class="token punctuation">.</span><span class="token function">manualJsonNodeToList</span><span class="token punctuation">(</span>personsNode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span>`````````` personList2 <span class="token operator">=</span> <span class="token class-name">JsonNodeConversionUtil</span><span class="token punctuation">.</span><span class="token function">readValueJsonNodeToList</span><span class="token punctuation">(</span>personsNode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span>`````````` personList3 <span class="token operator">=</span> <span class="token class-name">JsonNodeConversionUtil</span><span class="token punctuation">.</span><span class="token function">convertValueJsonNodeToList</span><span class="token punctuation">(</span>personsNode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">validateList</span><span class="token punctuation">(</span>personList1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">validateList</span><span class="token punctuation">(</span>personList2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">validateList</span><span class="token punctuation">(</span>personList3<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">validateList</span><span class="token punctuation">(</span><span class="token class-name">List</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span>`````````` personList<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> personList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">Person</span> person1 <span class="token operator">=</span> personList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> person1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> person1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">Person</span> person2 <span class="token operator">=</span> personList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span> person2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> person2</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',54),o=[p];function c(l,i){return a(),s("div",null,o)}const k=n(t,[["render",c],["__file","Convert Jackson JsonNode to Typed Collection.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/Convert%20Jackson%20JsonNode%20to%20Typed%20Collection.html","title":"Jackson JsonNode 转换为类型化集合 | Baeldung这篇文章是关于如何将Jackson的原始数据类型JsonNode转换为Java类型集合的。我们可以利用JsonNode本身来读取JSON，但将其转换为Java集合可能更有益处。Java集合比原始JSON数据提供的优势包括类型安全性、更快的处理速度以及更多类型特定的操作。","lang":"zh-CN","frontmatter":{"date":"2024-06-16T00:00:00.000Z","category":["Spring","Java"],"tag":["Jackson","JSON","Collection"],"description":"Jackson JsonNode 转换为类型化集合 | Baeldung这篇文章是关于如何将Jackson的原始数据类型JsonNode转换为Java类型集合的。我们可以利用JsonNode本身来读取JSON，但将其转换为Java集合可能更有益处。Java集合比原始JSON数据提供的优势包括类型安全性、更快的处理速度以及更多类型特定的操作。 2. 示例...","head":[["meta",{"property":"og:url","content":"https://kahen.xyz/posts/baeldung/Convert%20Jackson%20JsonNode%20to%20Typed%20Collection.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Jackson JsonNode 转换为类型化集合 | Baeldung这篇文章是关于如何将Jackson的原始数据类型JsonNode转换为Java类型集合的。我们可以利用JsonNode本身来读取JSON，但将其转换为Java集合可能更有益处。Java集合比原始JSON数据提供的优势包括类型安全性、更快的处理速度以及更多类型特定的操作。"}],["meta",{"property":"og:description","content":"Jackson JsonNode 转换为类型化集合 | Baeldung这篇文章是关于如何将Jackson的原始数据类型JsonNode转换为Java类型集合的。我们可以利用JsonNode本身来读取JSON，但将其转换为Java集合可能更有益处。Java集合比原始JSON数据提供的优势包括类型安全性、更快的处理速度以及更多类型特定的操作。 2. 示例..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-15T20:11:51.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Jackson"}],["meta",{"property":"article:tag","content":"JSON"}],["meta",{"property":"article:tag","content":"Collection"}],["meta",{"property":"article:published_time","content":"2024-06-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-15T20:11:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Jackson JsonNode 转换为类型化集合 | Baeldung这篇文章是关于如何将Jackson的原始数据类型JsonNode转换为Java类型集合的。我们可以利用JsonNode本身来读取JSON，但将其转换为Java集合可能更有益处。Java集合比原始JSON数据提供的优势包括类型安全性、更快的处理速度以及更多类型特定的操作。\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-16T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-15T20:11:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://kahen.xyz\\"}]}"]]},"headers":[{"level":3,"title":"2. 示例设置","slug":"_2-示例设置","link":"#_2-示例设置","children":[]},{"level":2,"title":"3. 手动转换","slug":"_3-手动转换","link":"#_3-手动转换","children":[{"level":3,"title":"3.1. 手动将JsonNode转换为List","slug":"_3-1-手动将jsonnode转换为list","link":"#_3-1-手动将jsonnode转换为list","children":[]},{"level":3,"title":"3.2. 手动将JsonNode转换为Map","slug":"_3-2-手动将jsonnode转换为map","link":"#_3-2-手动将jsonnode转换为map","children":[]}]},{"level":2,"title":"4. 使用Jackson的readValue()和convertValue()","slug":"_4-使用jackson的readvalue-和convertvalue","link":"#_4-使用jackson的readvalue-和convertvalue","children":[{"level":3,"title":"4.1. 使用readValue()","slug":"_4-1-使用readvalue","link":"#_4-1-使用readvalue","children":[]},{"level":3,"title":"4.2. 使用convertValue()","slug":"_4-2-使用convertvalue","link":"#_4-2-使用convertvalue","children":[]}]},{"level":2,"title":"5. 自定义反序列化器","slug":"_5-自定义反序列化器","link":"#_5-自定义反序列化器","children":[]},{"level":2,"title":"6. 测试","slug":"_6-测试","link":"#_6-测试","children":[{"level":3,"title":"6.1. 设置","slug":"_6-1-设置","link":"#_6-1-设置","children":[]},{"level":3,"title":"6.2. 测试转换方法","slug":"_6-2-测试转换方法","link":"#_6-2-测试转换方法","children":[]}]}],"git":{"createdTime":1718482311000,"updatedTime":1718482311000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":5.21,"words":1563},"filePathRelative":"posts/baeldung/Convert Jackson JsonNode to Typed Collection.md","localizedDate":"2024年6月16日","excerpt":"\\n<h3>2. 示例设置</h3>\\n<p>在我们的代码示例中，我们将探索将JsonNode转换为List或Map对象的不同方法。让我们设置我们示例的基础构件。</p>\\n<h4>2.1. 依赖性</h4>\\n<p>首先，让我们在pom.xml文件中添加Jackson核心依赖性：</p>\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code>`&lt;dependency&gt;`\\n    `&lt;groupId&gt;`com.fasterxml.jackson.core`&lt;/groupId&gt;`\\n    `&lt;artifactId&gt;`jackson-core`&lt;/artifactId&gt;`\\n    `&lt;version&gt;`2.17.0`&lt;/version&gt;`\\n`&lt;/dependency&gt;`\\n</code></pre></div>","autoDesc":true}');export{k as comp,d as data};
