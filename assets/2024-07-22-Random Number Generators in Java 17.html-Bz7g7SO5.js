import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-C5QtKXnb.js";const e={},p=t(`<h1 id="java-17中的随机数生成器-baeldung" tabindex="-1"><a class="header-anchor" href="#java-17中的随机数生成器-baeldung"><span>Java 17中的随机数生成器 | Baeldung</span></a></h1><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p>Java SE 17的发布引入了随机数生成API的更新——JEP 356。</p><p>这次API更新引入了新的接口类型，以及方便地列出、查找和实例化生成器工厂的方法。此外，现在还有一组新的随机数生成器实现可用。</p><p>在本教程中，我们将比较新的RandomGenerator API与旧的Random API。我们将查看列出所有可用的生成器工厂，并根据其名称或属性选择生成器。</p><p>我们还将探索新API的线程安全性和性能。</p><h2 id="_2-旧的random-api" tabindex="-1"><a class="header-anchor" href="#_2-旧的random-api"><span>2. 旧的Random API</span></a></h2><p>首先，让我们看看基于Random类的Java旧API进行随机数生成。</p><h3 id="_2-1-api设计" tabindex="-1"><a class="header-anchor" href="#_2-1-api设计"><span>2.1. API设计</span></a></h3><p>原始API由四个类组成，没有接口：</p><h3 id="_2-2-random" tabindex="-1"><a class="header-anchor" href="#_2-2-random"><span>2.2. Random</span></a></h3><p>最常用的随机数生成器是java.util包中的Random。</p><p>要生成一系列随机数，我们需要<strong>创建一个随机数生成器类的实例——Random</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> number <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertThat</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isPositive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isLessThan</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，默认构造函数将随机数生成器的种子设置为一个非常可能与任何其他调用不同的值。</p><h3 id="_2-3-替代方案" tabindex="-1"><a class="header-anchor" href="#_2-3-替代方案"><span>2.3. 替代方案</span></a></h3><p>除了java.util.Random，还有<strong>三种替代生成器可用于解决线程安全性和安全问题</strong>。</p><p>所有Random实例默认情况下都是线程安全的。然而，跨线程同时使用同一实例可能导致性能不佳。因此，java.util.concurrent包中的ThreadLocalRandom类是多线程系统的优选选项。</p><p>由于Random实例不是加密安全的，SecureRandom类使我们能够为安全敏感的上下文创建生成器。</p><p>最后，java.util包中的SplittableRandom类针对并行流和fork/join风格的计算进行了优化。</p><h2 id="_3-新的randomgenerator-api" tabindex="-1"><a class="header-anchor" href="#_3-新的randomgenerator-api"><span>3. 新的RandomGenerator API</span></a></h2><p>现在，让我们看看基于RandomGenerator接口的新API。</p><h3 id="_3-1-api设计" tabindex="-1"><a class="header-anchor" href="#_3-1-api设计"><span>3.1. API设计</span></a></h3><p>新API提供了一个更好的整体设计，具有<strong>新的接口类型和生成器实现</strong>：</p><p>在上图中，我们可以看到旧API类如何适应新设计。在这些类型之上，还添加了几个随机数生成器实现类：</p><ul><li>Xoroshiro组 <ul><li>Xoroshiro128PlusPlus</li></ul></li><li>Xoshiro组 <ul><li>Xoshiro256PlusPlus</li></ul></li><li>LXM组 <ul><li>L128X1024MixRandom</li><li>L128X128MixRandom</li><li>L128X256MixRandom</li><li>L32X64MixRandom</li><li>L64X1024MixRandom</li><li>L64X128MixRandom</li><li>L64X128StarStarRandom</li><li>L64X256MixRandom</li></ul></li></ul><h3 id="_3-2-改进领域" tabindex="-1"><a class="header-anchor" href="#_3-2-改进领域"><span>3.2. 改进领域</span></a></h3><p>旧API中<strong>缺少接口</strong>使得在不同生成器实现之间切换更加困难。因此，第三方提供自己的实现变得更加困难。</p><p>例如，尽管SplittableRandom的某些代码部分与Random完全相同，但它完全脱离了API的其余部分。</p><p>因此，新RandomGenerator API的主要目标是：</p><ul><li>确保不同算法之间的可交换性更容易</li><li>为基于流的编程提供更好的支持</li><li>消除现有类中的代码重复</li><li>保留旧Random API的现有行为</li></ul><h3 id="_3-3-新接口" tabindex="-1"><a class="header-anchor" href="#_3-3-新接口"><span>3.3. 新接口</span></a></h3><p>新的根接口<strong>RandomGenerator为所有现有和新的生成器提供了统一的API</strong>。</p><p>它定义了返回不同类型随机选择值的方法，以及随机选择值的流。</p><p>新API提供了四个新的专门生成器接口：</p><ul><li>SplitableGenerator 允许创建一个新的生成器作为当前生成器的后代</li><li>JumpableGenerator 允许向前跳跃一个适度数量的绘制</li><li>LeapableGenerator 允许向前跳跃一个大量的绘制</li><li>ArbitrarilyJumpableGenerator 在LeapableGenerator的基础上增加了跳跃距离</li></ul><h2 id="_4-randomgeneratorfactory" tabindex="-1"><a class="header-anchor" href="#_4-randomgeneratorfactory"><span>4. RandomGeneratorFactory</span></a></h2><p>新API中提供了一个工厂类，用于生成特定算法的多个随机数生成器。</p><h3 id="_4-1-查找所有" tabindex="-1"><a class="header-anchor" href="#_4-1-查找所有"><span>4.1. 查找所有</span></a></h3><p>RandomGeneratorFactory方法all生成一个非空流，包含所有可用的生成器工厂。</p><p>我们可以使用它来<strong>打印所有注册的生成器工厂并检查其算法属性</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">RandomGeneratorFactory</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">RandomGeneratorFactory</span><span class="token operator">::</span><span class="token function">name</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>factory <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\t%s\\t%s\\t%s&quot;</span><span class="token punctuation">,</span>
    factory<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    factory<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    factory<span class="token punctuation">.</span><span class="token function">isJumpable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    factory<span class="token punctuation">.</span><span class="token function">isSplittable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>工厂的可用性是通过定位RandomGenerator接口的实现通过服务提供者API来确定的。</p><h3 id="_4-2-按属性查找" tabindex="-1"><a class="header-anchor" href="#_4-2-按属性查找"><span>4.2. 按属性查找</span></a></h3><p>我们也可以利用all方法来<strong>按随机数生成器算法的属性查询工厂</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">RandomGeneratorFactory</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">RandomGeneratorFactory</span><span class="token operator">::</span><span class="token function">isJumpable</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">RandomGeneratorFactory</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;Error creating a generator&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，使用Stream API，我们可以找到一个满足我们要求的工厂，然后使用它来创建一个生成器。</p><h2 id="_5-randomgenerator-选择" tabindex="-1"><a class="header-anchor" href="#_5-randomgenerator-选择"><span>5. RandomGenerator 选择</span></a></h2><p>除了更新的API设计，还实现了几种新算法，未来可能会添加更多。</p><h3 id="_5-1-选择默认" tabindex="-1"><a class="header-anchor" href="#_5-1-选择默认"><span>5.1. 选择默认</span></a></h3><p>在大多数情况下，我们没有特定的生成器要求。因此，我们可以直接从RandomGenerator接口获取默认生成器。</p><p>这是Java 17中推荐的新方法，作为创建Random实例的替代：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">RandomGenerator</span> generator <span class="token operator">=</span> <span class="token class-name">RandomGenerator</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>getDefault方法当前选择L32X64MixRandom生成器。</p><p>然而，算法可能会随时间变化。因此，没有保证这个方法将来会继续返回这种算法。</p><h3 id="_5-2-选择特定" tabindex="-1"><a class="header-anchor" href="#_5-2-选择特定"><span>5.2. 选择特定</span></a></h3><p>另一方面，当我们有特定的生成器要求时，我们可以使用of方法<strong>检索特定生成器</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">RandomGenerator</span> generator <span class="token operator">=</span> <span class="token class-name">RandomGenerator</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;L128X256MixRandom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此方法需要将随机数生成器的名称作为参数传递。</p><p>如果未找到命名的算法，它将抛出IllegalArgumentException。</p><h2 id="_6-线程安全" tabindex="-1"><a class="header-anchor" href="#_6-线程安全"><span>6. 线程安全</span></a></h2><p>大多数<strong>新生成器实现不是线程安全的</strong>。然而，Random和SecureRandom仍然是。</p><p>因此，在多线程环境中，我们可以选择：</p><ul><li>共享一个线程安全生成器的实例</li><li>在新线程启动之前，从本地源拆分一个新实例</li></ul><p>我们可以使用SplittableGenerator实现第二种情况：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>\` numbers <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">synchronizedList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">RandomGenerator<span class="token punctuation">.</span>SplittableGenerator</span> sourceGenerator <span class="token operator">=</span> <span class="token class-name">RandomGeneratorFactory</span>
    <span class="token punctuation">.</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RandomGenerator<span class="token punctuation">.</span>SplittableGenerator</span><span class="token punctuation">&gt;</span></span>\`<span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;L128X256MixRandom&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

sourceGenerator<span class="token punctuation">.</span><span class="token function">splits</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>splitGenerator<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        numbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>splitGenerator<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，我们确保我们的生成器实例以一种不会产生相同数字流的方式初始化。</p><h2 id="_7-性能" tabindex="-1"><a class="header-anchor" href="#_7-性能"><span>7. 性能</span></a></h2><p>让我们为Java 17中所有可用的生成器实现运行一个简单的性能测试。</p><p>我们将在同一方法上测试生成器，生成四种不同类型的随机数：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">generateRandomNumbers</span><span class="token punctuation">(</span><span class="token class-name">RandomGenerator</span> generator<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    generator<span class="token punctuation">.</span><span class="token function">nextLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    generator<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    generator<span class="token punctuation">.</span><span class="token function">nextFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    generator<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们看看基准测试结果：</p><table><thead><tr><th>算法</th><th>模式</th><th>分数</th><th>误差</th><th>单位</th></tr></thead><tbody><tr><td>L128X1024MixRandom</td><td>avgt</td><td>95,637</td><td>±3,274</td><td>ns/op</td></tr><tr><td>L128X128MixRandom</td><td>avgt</td><td>57,899</td><td>±2,162</td><td>ns/op</td></tr><tr><td>L128X256MixRandom</td><td>avgt</td><td>66,095</td><td>±3,260</td><td>ns/op</td></tr><tr><td>L32X64MixRandom</td><td>avgt</td><td>35,717</td><td>±1,737</td><td>ns/op</td></tr><tr><td>L64X1024MixRandom</td><td>avgt</td><td>73,690</td><td>±4,967</td><td>ns/op</td></tr><tr><td>L64X128MixRandom</td><td>avgt</td><td>35,261</td><td>±1,985</td><td>ns/op</td></tr><tr><td>L64X128StarStarRandom</td><td>avgt</td><td>34,054</td><td>±0,314</td><td>ns/op</td></tr><tr><td>L64X256MixRandom</td><td>avgt</td><td>36,238</td><td>±0,090</td><td>ns/op</td></tr><tr><td>Random</td><td>avgt</td><td>111,369</td><td>±0,329</td><td>ns/op</td></tr><tr><td>SecureRandom</td><td>avgt</td><td>9,457,881</td><td>±45,574</td><td>ns/op</td></tr><tr><td>SplittableRandom</td><td>avgt</td><td>27,753</td><td>±0,526</td><td>ns/op</td></tr><tr><td>Xoroshiro128PlusPlus</td><td>avgt</td><td>31,825</td><td>±1,863</td><td>ns/op</td></tr><tr><td>Xoshiro256PlusPlus</td><td>avgt</td><td>33,327</td><td>±0,555</td><td>ns/op</td></tr></tbody></table><p>SecureRandom是最慢的生成器，但这是因为它是唯一的加密强大的生成器。 由于它们不需要是线程安全的，新的生成器实现<strong>比Random性能更好</strong>。</p><h2 id="_8-结论" tabindex="-1"><a class="header-anchor" href="#_8-结论"><span>8. 结论</span></a></h2><p>在本文中，我们探讨了Java SE 17中随机数生成API的更新。</p><p>我们了解了新旧API之间的区别，包括引入的新API设计、接口和实现。</p><p>在示例中，我们看到了如何使用RandomGeneratorFactory找到合适的生成器算法。我们还看到了如何根据其名称或属性选择算法。</p><p>最后，我们查看了旧的和新的生成器实现的线程安全性和性能。</p><p>如常，完整的源代码可在GitHub上找到。</p><p>[Baeldung logo] <img src="https://www.baeldung.com/wp-content/themes/baeldung/icon/logo.svg" alt="img" loading="lazy"> [Gravatar icon] <img src="https://secure.gravatar.com/avatar/6df1edf6b70e2fea4c35997d86b15fd5?s=50&amp;r=g" alt="img" loading="lazy"> [Gravatar icon] <img src="https://secure.gravatar.com/avatar/6c3babf3d6ea5d49c2bc4e7957870d75?s=50&amp;r=g" alt="img" loading="lazy"> [Announcement icon] <img src="https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png" alt="img" loading="lazy"></p><p>OK</p>`,82),o=[p];function c(l,i){return s(),a("div",null,o)}const u=n(e,[["render",c],["__file","2024-07-22-Random Number Generators in Java 17.html.vue"]]),m=JSON.parse('{"path":"/posts/baeldung/2024-07-22/2024-07-22-Random%20Number%20Generators%20in%20Java%2017.html","title":"Java 17中的随机数生成器 | Baeldung","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","编程"],"tag":["Java 17","随机数生成器"],"head":[["meta",{"name":"keywords","content":"Java 17, 随机数生成器, API, RandomGenerator, 线程安全, 性能"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-22/2024-07-22-Random%20Number%20Generators%20in%20Java%2017.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Java 17中的随机数生成器 | Baeldung"}],["meta",{"property":"og:description","content":"Java 17中的随机数生成器 | Baeldung 1. 概述 Java SE 17的发布引入了随机数生成API的更新——JEP 356。 这次API更新引入了新的接口类型，以及方便地列出、查找和实例化生成器工厂的方法。此外，现在还有一组新的随机数生成器实现可用。 在本教程中，我们将比较新的RandomGenerator API与旧的Random A..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.baeldung.com/wp-content/themes/baeldung/icon/logo.svg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-22T20:17:00.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java 17"}],["meta",{"property":"article:tag","content":"随机数生成器"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-22T20:17:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 17中的随机数生成器 | Baeldung\\",\\"image\\":[\\"https://www.baeldung.com/wp-content/themes/baeldung/icon/logo.svg\\",\\"https://secure.gravatar.com/avatar/6df1edf6b70e2fea4c35997d86b15fd5?s=50&r=g\\",\\"https://secure.gravatar.com/avatar/6c3babf3d6ea5d49c2bc4e7957870d75?s=50&r=g\\",\\"https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-22T20:17:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Java 17中的随机数生成器 | Baeldung 1. 概述 Java SE 17的发布引入了随机数生成API的更新——JEP 356。 这次API更新引入了新的接口类型，以及方便地列出、查找和实例化生成器工厂的方法。此外，现在还有一组新的随机数生成器实现可用。 在本教程中，我们将比较新的RandomGenerator API与旧的Random A..."},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. 旧的Random API","slug":"_2-旧的random-api","link":"#_2-旧的random-api","children":[{"level":3,"title":"2.1. API设计","slug":"_2-1-api设计","link":"#_2-1-api设计","children":[]},{"level":3,"title":"2.2. Random","slug":"_2-2-random","link":"#_2-2-random","children":[]},{"level":3,"title":"2.3. 替代方案","slug":"_2-3-替代方案","link":"#_2-3-替代方案","children":[]}]},{"level":2,"title":"3. 新的RandomGenerator API","slug":"_3-新的randomgenerator-api","link":"#_3-新的randomgenerator-api","children":[{"level":3,"title":"3.1. API设计","slug":"_3-1-api设计","link":"#_3-1-api设计","children":[]},{"level":3,"title":"3.2. 改进领域","slug":"_3-2-改进领域","link":"#_3-2-改进领域","children":[]},{"level":3,"title":"3.3. 新接口","slug":"_3-3-新接口","link":"#_3-3-新接口","children":[]}]},{"level":2,"title":"4. RandomGeneratorFactory","slug":"_4-randomgeneratorfactory","link":"#_4-randomgeneratorfactory","children":[{"level":3,"title":"4.1. 查找所有","slug":"_4-1-查找所有","link":"#_4-1-查找所有","children":[]},{"level":3,"title":"4.2. 按属性查找","slug":"_4-2-按属性查找","link":"#_4-2-按属性查找","children":[]}]},{"level":2,"title":"5. RandomGenerator 选择","slug":"_5-randomgenerator-选择","link":"#_5-randomgenerator-选择","children":[{"level":3,"title":"5.1. 选择默认","slug":"_5-1-选择默认","link":"#_5-1-选择默认","children":[]},{"level":3,"title":"5.2. 选择特定","slug":"_5-2-选择特定","link":"#_5-2-选择特定","children":[]}]},{"level":2,"title":"6. 线程安全","slug":"_6-线程安全","link":"#_6-线程安全","children":[]},{"level":2,"title":"7. 性能","slug":"_7-性能","link":"#_7-性能","children":[]},{"level":2,"title":"8. 结论","slug":"_8-结论","link":"#_8-结论","children":[]}],"git":{"createdTime":1721679420000,"updatedTime":1721679420000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":6.21,"words":1863},"filePathRelative":"posts/baeldung/2024-07-22/2024-07-22-Random Number Generators in Java 17.md","localizedDate":"2022年4月1日","excerpt":"\\n<h2>1. 概述</h2>\\n<p>Java SE 17的发布引入了随机数生成API的更新——JEP 356。</p>\\n<p>这次API更新引入了新的接口类型，以及方便地列出、查找和实例化生成器工厂的方法。此外，现在还有一组新的随机数生成器实现可用。</p>\\n<p>在本教程中，我们将比较新的RandomGenerator API与旧的Random API。我们将查看列出所有可用的生成器工厂，并根据其名称或属性选择生成器。</p>\\n<p>我们还将探索新API的线程安全性和性能。</p>\\n<h2>2. 旧的Random API</h2>\\n<p>首先，让我们看看基于Random类的Java旧API进行随机数生成。</p>","autoDesc":true}');export{u as comp,m as data};
