import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-D9qUUkNr.js";const p={},e=t(`<h1 id="java中的set与list对比" tabindex="-1"><a class="header-anchor" href="#java中的set与list对比"><span>Java中的Set与List对比</span></a></h1><p>在本教程中，我们将通过一个简单的例子讨论Java中Set和List的差异。此外，我们还将从性能和内存分配的角度比较这两种数据结构。</p><h2 id="_2-概念差异" tabindex="-1"><a class="header-anchor" href="#_2-概念差异"><span>2. 概念差异</span></a></h2><p>List和Set都是Java Collections的成员。然而，它们之间有一些重要的区别：</p><ul><li>List可以包含重复项，但Set不能。</li><li>List会保留插入顺序，但Set可能保留也可能不保留。</li><li>由于Set可能不保留顺序，因此它不允许像List那样基于索引的访问。</li></ul><p>请注意，有一些Set接口的实现确实保留了顺序，例如LinkedHashSet。</p><h2 id="_3-代码示例" tabindex="-1"><a class="header-anchor" href="#_3-代码示例"><span>3. 代码示例</span></a></h2><h3 id="_3-1-允许重复项" tabindex="-1"><a class="header-anchor" href="#_3-1-允许重复项"><span>3.1. 允许重复项</span></a></h3><p>对于List，允许添加重复项。然而，对于Set则不允许：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenList_whenDuplicates_thenAllowed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">List</span>\`\`\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\`\`\` integerList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    integerList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    integerList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    integerList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    integerList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span>integerList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenSet_whenDuplicates_thenNotAllowed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Set</span>\`\`\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\`\`\` integerSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    integerSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    integerSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    integerSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    integerSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span>integerSet<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-保持插入顺序" tabindex="-1"><a class="header-anchor" href="#_3-2-保持插入顺序"><span>3.2. 保持插入顺序</span></a></h3><p>Set是否保持顺序取决于实现。例如，HashSet不能保证保留顺序，但LinkedHashSet可以。让我们看看使用LinkedHashSet的顺序示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenSet_whenOrdering_thenMayBeAllowed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Set</span>\`\`\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\`\`\` set1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    set1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    set1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    set1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Set</span>\`\`\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\`\`\` set2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    set2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    set2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    set2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertArrayEquals</span><span class="token punctuation">(</span>set1<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> set2<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于Set不能保证保持顺序，因此它不能被索引。</p><h2 id="_4-list和set之间的性能比较" tabindex="-1"><a class="header-anchor" href="#_4-list和set之间的性能比较"><span>4. List和Set之间的性能比较</span></a></h2><p>让我们使用Java Microbench Harness (JMH)来比较List和Set数据结构的性能。首先，我们将创建两个类：ListAndSetAddBenchmark和ListAndSetContainBenchmark。然后，我们将测量List和Set数据结构的add()和contains()方法的执行时间。</p><h3 id="_4-1-jmh参数" tabindex="-1"><a class="header-anchor" href="#_4-1-jmh参数"><span>4.1. JMH参数</span></a></h3><p>我们将使用以下参数执行基准测试：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@BenchmarkMode</span><span class="token punctuation">(</span><span class="token class-name">Mode<span class="token punctuation">.</span>SingleShotTime</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Warmup</span><span class="token punctuation">(</span>iterations <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> time <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> timeUnit <span class="token operator">=</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Measurement</span><span class="token punctuation">(</span>iterations <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> time <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> timeUnit <span class="token operator">=</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListAndSetAddBenchmark</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的类中，我们指定了基准测试的模式。@BenchmarkMode(Mode.SingleShotTime)注解设置了基准测试运行的模式。在我们的例子中，模式是SingleShotTime，这意味着基准测试将运行一次并测量执行所需的时间。</p><p>@Warmup注解指定了预热阶段的迭代次数和每次迭代的运行时间。在我们的情况下，预热阶段将由三次迭代组成，每次迭代运行10毫秒。</p><p>此外，@Measurement注解指定了测量阶段的迭代次数和每次迭代的运行时间。我们的例子类显示，测量阶段将由三次迭代组成，每次迭代运行10毫秒。</p><h3 id="_4-2-add" tabindex="-1"><a class="header-anchor" href="#_4-2-add"><span>4.2. add()</span></a></h3><p>首先，让我们创建一个内部类来声明基准测试方法将使用的变量：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@State</span><span class="token punctuation">(</span><span class="token class-name">Scope<span class="token punctuation">.</span>Benchmark</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Params</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> addNumber <span class="token operator">=</span> <span class="token number">10000000</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span>\`\`\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\`\`\` arrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">Set</span>\`\`\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\`\`\` hashSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>@State注解有助于使类成为状态类。状态类保存基准测试方法用于计算的数据。</p><p>接下来，让我们测试ArrayList()的add()操作：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Benchmark</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addElementsToArrayList</span><span class="token punctuation">(</span><span class="token class-name">Params</span> param<span class="token punctuation">,</span> <span class="token class-name">Blackhole</span> blackhole<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    param<span class="token punctuation">.</span>arrayList<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> param<span class="token punctuation">.</span>addNumber<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        blackhole<span class="token punctuation">.</span><span class="token function">consume</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述方法测量向ArrayList添加元素所需的时间。@Benchmark注解表示它是一个基准测试方法。Blackhole参数用于消耗基准测试方法的结果。</p><p>此外，让我们测试向HashSet()添加元素：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Benchmark</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addElementToHashSet</span><span class="token punctuation">(</span><span class="token class-name">Params</span> param<span class="token punctuation">,</span> <span class="token class-name">Blackhole</span> blackhole<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    param<span class="token punctuation">.</span>hashSet<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> param<span class="token punctuation">.</span>addNumber<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        blackhole<span class="token punctuation">.</span><span class="token function">consume</span><span class="token punctuation">(</span>hashSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们测量向HashSet添加10000000个元素所需的时间。@Benchmark注解表示该方法是基准测试方法。当JMH遇到该方法时，它会生成代码来测量方法的性能。</p><p>最后，让我们比较测试结果：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Benchmark</span>             <span class="token class-name">Mode</span>  <span class="token class-name">Cnt</span>  <span class="token class-name">Score</span>   <span class="token class-name">Error</span>  <span class="token class-name">Units</span>
addElementToArrayList   ss   <span class="token number">15</span>  <span class="token number">0.386</span> ± <span class="token number">1.266</span>   s<span class="token operator">/</span>op
addElementToHashSet     ss   <span class="token number">15</span>  <span class="token number">0.419</span> ± <span class="token number">2.535</span>   s<span class="token operator">/</span>op
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果表明，向ArrayList添加元素比向HashSet添加元素更快。在我们需要尽可能快地向集合添加元素的场景中，ArrayList更有效。</p><h3 id="_4-3-contains" tabindex="-1"><a class="header-anchor" href="#_4-3-contains"><span>4.3. contains()</span></a></h3><p>首先，让我们定义一个内部类来填充ArrayList和HashSet：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@State</span><span class="token punctuation">(</span><span class="token class-name">Scope<span class="token punctuation">.</span>Benchmark</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Params</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;5000000&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> searchElement<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;10000000&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> collectionSize<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">List</span>\`\`\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\`\`\` arrayList<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">Set</span>\`\`\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\`\`\` hashSet<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Setup</span><span class="token punctuation">(</span><span class="token class-name">Level<span class="token punctuation">.</span>Iteration</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        arrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        hashSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> collectionSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            hashSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>@Param注解指定了基准测试的参数。在这种情况下，它定义了一个名为searchElement和collectionSize的参数，每个参数都有一个单一的值。这些参数将用于配置基准测试。</p><p>@Setup注解标记了在每次迭代之前应该执行的方法。</p><p>接下来，让我们使用ArrayList测试contains()操作：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Benchmark</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">searchElementInArrayList</span><span class="token punctuation">(</span><span class="token class-name">Params</span> param<span class="token punctuation">,</span> <span class="token class-name">Blackhole</span> blackhole<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> param<span class="token punctuation">.</span>containNumber<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        blackhole<span class="token punctuation">.</span><span class="token function">consume</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>searchElement<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>searchElementInArrayList()方法在ArrayList中搜索5000000。</p><p>最后，让我们实现HashSet中的contains()操作：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Benchmark</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">searchElementInHashSet</span><span class="token punctuation">(</span><span class="token class-name">Params</span> param<span class="token punctuation">,</span> <span class="token class-name">Blackhole</span> blackhole<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> param<span class="token punctuation">.</span>containNumber<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        blackhole<span class="token punctuation">.</span><span class="token function">consume</span><span class="token punctuation">(</span>hashSet<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>searchElement<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与searchElementInArrayList()方法一样，我们在HashSet中搜索5000000。</p><p>这是结果：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Benchmark</span>                 <span class="token class-name">Mode</span>   <span class="token class-name">Cnt</span>   <span class="token class-name">Score</span>   <span class="token class-name">Error</span>  <span class="token class-name">Units</span>
searchElementInArrayList     ss   <span class="token number">15</span>   <span class="token number">0.014</span> ± <span class="token number">0.015</span>   s<span class="token operator">/</span>op
searchElementInHashSet       ss   <span class="token number">15</span>   ≈ <span class="token number">10</span>⁻⁵          s<span class="token operator">/</span>op
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果表明，在HashSet中搜索元素比在ArrayList中搜索元素更快。这证实了在我们需要快速高效地在集合中搜索元素的场景中，HashSet更有效。</p><h2 id="_5-list和set之间的内存分配比较" tabindex="-1"><a class="header-anchor" href="#_5-list和set之间的内存分配比较"><span>5. List和Set之间的内存分配比较</span></a></h2><p>在前一节中，我们看到了不同的指标，用于衡量List和Set在时间方面的性能。让我们通过在运行基准测试时指定_gc_分析器选项“-prof gc”来测量基准方法的内存分配。</p><p>让我们修改main()方法，并为两个基准测试类配置JMH运行选项：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RunnerException</span> <span class="token punctuation">{</span>
    <span class="token class-name">Options</span> opt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OptionsBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span><span class="token class-name">ListAndSetAddBenchmark</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">forks</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">addProfiler</span><span class="token punctuation">(</span><span class="token string">&quot;gc&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">new</span> <span class="token class-name">Runner</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的方法中，我们创建了一个新的Options对象来配置JMH。首先，我们使用include()方法指定要运行的基准测试。接下来，我们使用fork()方法指定基准测试应该运行的次数。</p><p>此外，我们使用addProfiler()方法指定要使用的分析器。在这种情况下，我们使用的是gc分析器。</p><p>此配置适用于ListAndSetAddBenchmark类。我们还需要修改ListAndSetContainBenchmark的main()方法，以添加gc分析器：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RunnerException</span> <span class="token punctuation">{</span>
    <span class="token class-name">Options</span> opt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OptionsBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span><span class="token class-name">ListAndSetContainBenchmark</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">forks</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">addProfiler</span><span class="token punctuation">(</span><span class="token string">&quot;gc&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">new</span> <span class="token class-name">Runner</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是测试结果：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Benchmark</span>                                         <span class="token class-name">Mode</span>  <span class="token class-name">Cnt</span>    <span class="token class-name">Score</span>     <span class="token class-name">Error</span>    <span class="token class-name">Units</span>
addElementToArrayList<span class="token operator">:</span>·gc<span class="token punctuation">.</span>alloc<span class="token punctuation">.</span>rate                ss    <span class="token number">3</span>     <span class="token number">172.685</span> ± <span class="token number">254.719</span>  <span class="token constant">MB</span><span class="token operator">/</span>sec
addElementToHashSet<span class="token operator">:</span>·gc<span class="token punctuation">.</span>alloc<span class="token punctuation">.</span>rate                  ss    <span class="token number">3</span>     <span class="token number">504.746</span> ± <span class="token number">1323.322</span> <span class="token constant">MB</span><span class="token operator">/</span>sec
searchElementInArrayList<span class="token operator">:</span>·gc<span class="token punctuation">.</span>alloc<span class="token punctuation">.</span>rate             ss    <span class="token number">3</span>     <span class="token number">248.628</span> ± <span class="token number">395.569</span>  <span class="token constant">MB</span><span class="token operator">/</span>sec
searchElementInHashSet<span class="token operator">:</span>·gc<span class="token punctuation">.</span>alloc<span class="token punctuation">.</span>rate               ss    <span class="token number">3</span>     <span class="token number">254.192</span> ± <span class="token number">235.294</span>  <span class="token constant">MB</span><span class="token operator">/</span>sec
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果表明，在add()操作中，addElementToHashSet()的gc.alloc.rate为504.746 MB/sec，高于addElementToArrayList()的172.685 MB/sec。这表明HashSet在执行期间分配了更多的内存，相比之下ArrayList较少。</p><p>此外，结果还显示HashSet在搜索操作中的内存分配略高于ArrayList。</p><p>错误值表明结果存在一些变异性，这可能取决于JVM预热和代码优化等因素。</p><h2 id="_6-结论" tabindex="-1"><a class="header-anchor" href="#_6-结论"><span>6. 结论</span></a></h2><p>在本文中，我们了解了Java中List和Set的区别。此外，我们还看到了一个基准测试，用于比较List和Set在时间和内存分配方面的性能。根据用例，List和Set可以针对特定操作更优。</p><p>如往常一样，示例的源代码可在GitHub上获得。</p><p>OK</p>`,66),c=[e];function o(l,i){return a(),s("div",null,c)}const r=n(p,[["render",o],["__file","2024-07-14-Set vs List in Java.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-14/2024-07-14-Set%20vs%20List%20in%20Java.html","title":"Java中的Set与List对比","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java Collections","Data Structures"],"tag":["Set","List"],"head":[["meta",{"name":"keywords","content":"Java, Set, List, Collections, Data Structures"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-14/2024-07-14-Set%20vs%20List%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Java中的Set与List对比"}],["meta",{"property":"og:description","content":"Java中的Set与List对比 在本教程中，我们将通过一个简单的例子讨论Java中Set和List的差异。此外，我们还将从性能和内存分配的角度比较这两种数据结构。 2. 概念差异 List和Set都是Java Collections的成员。然而，它们之间有一些重要的区别： List可以包含重复项，但Set不能。 List会保留插入顺序，但Set可能保..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-14T04:48:47.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Set"}],["meta",{"property":"article:tag","content":"List"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-14T04:48:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java中的Set与List对比\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-14T04:48:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Java中的Set与List对比 在本教程中，我们将通过一个简单的例子讨论Java中Set和List的差异。此外，我们还将从性能和内存分配的角度比较这两种数据结构。 2. 概念差异 List和Set都是Java Collections的成员。然而，它们之间有一些重要的区别： List可以包含重复项，但Set不能。 List会保留插入顺序，但Set可能保..."},"headers":[{"level":2,"title":"2. 概念差异","slug":"_2-概念差异","link":"#_2-概念差异","children":[]},{"level":2,"title":"3. 代码示例","slug":"_3-代码示例","link":"#_3-代码示例","children":[{"level":3,"title":"3.1. 允许重复项","slug":"_3-1-允许重复项","link":"#_3-1-允许重复项","children":[]},{"level":3,"title":"3.2. 保持插入顺序","slug":"_3-2-保持插入顺序","link":"#_3-2-保持插入顺序","children":[]}]},{"level":2,"title":"4. List和Set之间的性能比较","slug":"_4-list和set之间的性能比较","link":"#_4-list和set之间的性能比较","children":[{"level":3,"title":"4.1. JMH参数","slug":"_4-1-jmh参数","link":"#_4-1-jmh参数","children":[]},{"level":3,"title":"4.2. add()","slug":"_4-2-add","link":"#_4-2-add","children":[]},{"level":3,"title":"4.3. contains()","slug":"_4-3-contains","link":"#_4-3-contains","children":[]}]},{"level":2,"title":"5. List和Set之间的内存分配比较","slug":"_5-list和set之间的内存分配比较","link":"#_5-list和set之间的内存分配比较","children":[]},{"level":2,"title":"6. 结论","slug":"_6-结论","link":"#_6-结论","children":[]}],"git":{"createdTime":1720932527000,"updatedTime":1720932527000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":5.96,"words":1787},"filePathRelative":"posts/baeldung/2024-07-14/2024-07-14-Set vs List in Java.md","localizedDate":"2022年4月1日","excerpt":"\\n<p>在本教程中，我们将通过一个简单的例子讨论Java中Set和List的差异。此外，我们还将从性能和内存分配的角度比较这两种数据结构。</p>\\n<h2>2. 概念差异</h2>\\n<p>List和Set都是Java Collections的成员。然而，它们之间有一些重要的区别：</p>\\n<ul>\\n<li>List可以包含重复项，但Set不能。</li>\\n<li>List会保留插入顺序，但Set可能保留也可能不保留。</li>\\n<li>由于Set可能不保留顺序，因此它不允许像List那样基于索引的访问。</li>\\n</ul>\\n<p>请注意，有一些Set接口的实现确实保留了顺序，例如LinkedHashSet。</p>","autoDesc":true}');export{r as comp,d as data};
