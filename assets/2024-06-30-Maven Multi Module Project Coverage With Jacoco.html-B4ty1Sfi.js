import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-Dl8jcOCm.js";const p={},e=t('<hr><h1 id="maven多模块项目使用jacoco进行代码覆盖率统计" tabindex="-1"><a class="header-anchor" href="#maven多模块项目使用jacoco进行代码覆盖率统计"><span>Maven多模块项目使用Jacoco进行代码覆盖率统计</span></a></h1><p>在这个教程中，我们将构建一个Maven多模块项目。在这个项目中，服务和控制器将位于不同的模块中。然后，我们将编写一些测试并使用Jacoco来计算代码覆盖率。</p><h2 id="_2-服务层" tabindex="-1"><a class="header-anchor" href="#_2-服务层"><span>2. 服务层</span></a></h2><p>首先，让我们创建我们多模块应用的服务层。</p><h3 id="_2-1-服务类" tabindex="-1"><a class="header-anchor" href="#_2-1-服务类"><span>2.1. 服务类</span></a></h3><p><strong>我们将创建我们的服务并添加几个方法：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>\n<span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> <span class="token function">unitTestedOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;仅单元测试&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token class-name">String</span> <span class="token function">coveredByUnitAndIntegrationTests</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;单元测试和集成测试覆盖&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token class-name">String</span> <span class="token function">coveredByIntegrationTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;仅集成测试覆盖&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token class-name">String</span> <span class="token function">notTested</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;未测试&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如它们的名字所指示的：</p><ul><li>位于同一层的单元测试将测试方法 <code>unitTestedOnly()</code></li><li>单元测试将测试 <code>coveredByUnitAndIntegrationTests()</code>。控制器模块中的集成测试也将覆盖此方法的代码</li><li>集成测试将覆盖 <code>coveredByIntegrationTest()</code>。然而，没有单元测试会测试这个方法</li><li>没有测试会覆盖方法 <code>notTested()</code></li></ul><h3 id="_2-2-单元测试" tabindex="-1"><a class="header-anchor" href="#_2-2-单元测试"><span>2.2. 单元测试</span></a></h3><p><strong>现在让我们编写相应的单元测试：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">MyServiceUnitTest</span> <span class="token punctuation">{</span>\n    <span class="token class-name">MyService</span> myService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Test</span>\n    <span class="token keyword">void</span> <span class="token function">whenUnitTestedOnly_thenCorrectText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;仅单元测试&quot;</span><span class="token punctuation">,</span> myService<span class="token punctuation">.</span><span class="token function">unitTestedOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Test</span>\n    <span class="token keyword">void</span> <span class="token function">whenTestedMethod_thenCorrectText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;单元测试和集成测试覆盖&quot;</span><span class="token punctuation">,</span> myService<span class="token punctuation">.</span><span class="token function">coveredByUnitAndIntegrationTests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些测试简单地检查方法的输出是否符合预期。</p><h3 id="_2-3-surefire插件配置" tabindex="-1"><a class="header-anchor" href="#_2-3-surefire插件配置"><span>2.3. Surefire插件配置</span></a></h3><p>**我们将使用Maven Surefire插件来运行单元测试。**让我们在服务模块的 <code>pom.xml</code> 中配置它：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>`\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>````\n        ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>````org.apache.maven.plugins````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>````\n        ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>````maven-surefire-plugin````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>````\n        ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>````3.1.2````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>````\n        ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>```\n            ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">&gt;</span></span>``\n                ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">&gt;</span></span>``**/*Test.java``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>``\n            ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">&gt;</span></span>``\n        ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>```\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>````\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-控制器层" tabindex="-1"><a class="header-anchor" href="#_3-控制器层"><span>3. 控制器层</span></a></h2><p>我们现在将在我们的多模块应用中添加一个控制器层。</p><h3 id="_3-1-控制器类" tabindex="-1"><a class="header-anchor" href="#_3-1-控制器类"><span>3.1. 控制器类</span></a></h3><p>让我们添加控制器类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>\n<span class="token keyword">class</span> <span class="token class-name">MyController</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MyService</span> myService<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">MyController</span><span class="token punctuation">(</span><span class="token class-name">MyService</span> myService<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>myService <span class="token operator">=</span> myService<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/tested&quot;</span><span class="token punctuation">)</span>\n    <span class="token class-name">String</span> <span class="token function">fullyTested</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> myService<span class="token punctuation">.</span><span class="token function">coveredByUnitAndIntegrationTests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/indirecttest&quot;</span><span class="token punctuation">)</span>\n    <span class="token class-name">String</span> <span class="token function">indirectlyTestingServiceMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> myService<span class="token punctuation">.</span><span class="token function">coveredByIntegrationTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/nottested&quot;</span><span class="token punctuation">)</span>\n    <span class="token class-name">String</span> <span class="token function">notTested</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> myService<span class="token punctuation">.</span><span class="token function">notTested</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>fullyTested()</code> 和 <code>indirectlyTestingServiceMethod()</code> 方法将通过集成测试进行测试。因此，<strong>这些测试将覆盖两个服务方法 <code>coveredByUnitAndIntegrationTests()</code> 和 <code>coveredByIntegrationTest()</code></strong>。另一方面，我们将不为 <code>notTested()</code> 编写测试。</p><h3 id="_3-2-集成测试" tabindex="-1"><a class="header-anchor" href="#_3-2-集成测试"><span>3.2. 集成测试</span></a></h3><p><strong>现在我们可以测试我们的 <code>RestController</code>：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token class-name">MyApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@AutoConfigureMockMvc</span>\n<span class="token keyword">class</span> <span class="token class-name">MyControllerIntegrationTest</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Autowired</span>\n    <span class="token keyword">private</span> <span class="token class-name">MockMvc</span> mockMvc<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Test</span>\n    <span class="token keyword">void</span> <span class="token function">whenFullyTested_ThenCorrectText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token class-name">MockMvcRequestBuilders</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/tested&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token class-name">MockMvcResultMatchers</span><span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token class-name">MockMvcResultMatchers</span><span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">&quot;单元测试和集成测试覆盖&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Test</span>\n    <span class="token keyword">void</span> <span class="token function">whenIndirectlyTestingServiceMethod_ThenCorrectText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token class-name">MockMvcRequestBuilders</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/indirecttest&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token class-name">MockMvcResultMatchers</span><span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token class-name">MockMvcResultMatchers</span><span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">&quot;仅集成测试覆盖&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这些测试中，我们启动了一个应用服务器并向其发送请求。然后，我们检查输出是否正确。</p><h3 id="_3-3-failsafe插件配置" tabindex="-1"><a class="header-anchor" href="#_3-3-failsafe插件配置"><span>3.3. Failsafe插件配置</span></a></h3><p>**我们将使用Maven Failsafe插件来运行集成测试。**最后一步是在控制器模块的 <code>pom.xml</code> 中配置它：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>````org.apache.maven.plugins````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>````maven-failsafe-plugin````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>````3.1.2````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>````\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">&gt;</span></span>```\n        ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">&gt;</span></span>```\n            ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">&gt;</span></span>```\n                ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">&gt;</span></span>````integration-test````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">&gt;</span></span>````\n                ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">&gt;</span></span>````verify````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">&gt;</span></span>````\n            ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">&gt;</span></span>```\n            ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>```\n                ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">&gt;</span></span>``\n                    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">&gt;</span></span>``**/*IntegrationTest.java``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>``\n                ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">&gt;</span></span>``\n            ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>```\n        ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">&gt;</span></span>```\n````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-通过jacoco聚合覆盖率" tabindex="-1"><a class="header-anchor" href="#_4-通过jacoco聚合覆盖率"><span>4. 通过Jacoco聚合覆盖率</span></a></h2><p>Jacoco（Java代码覆盖率）是一个用于在Java应用程序中测量测试期间代码覆盖率的工具。现在让我们计算我们的覆盖率报告。</p><h3 id="_4-1-准备jacoco代理" tabindex="-1"><a class="header-anchor" href="#_4-1-准备jacoco代理"><span>4.1. 准备Jacoco代理</span></a></h3><p>**_prepare-agent_阶段设置必要的钩子和配置，以便Jacoco在运行测试时跟踪执行的代码。**这种配置是在我们运行任何测试之前必需的。因此，我们将直接将准备步骤添加到父 <code>pom.xml</code> 中：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>````org.jacoco````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>````jacoco-maven-plugin````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>````0.8.11````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>````\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">&gt;</span></span>```\n        ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">&gt;</span></span>```\n            ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">&gt;</span></span>```\n                ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">&gt;</span></span>````prepare-agent````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">&gt;</span></span>````\n            ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">&gt;</span></span>```\n        ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">&gt;</span></span>```\n````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-收集测试结果" tabindex="-1"><a class="header-anchor" href="#_4-2-收集测试结果"><span>4.2. 收集测试结果</span></a></h3><p>为了收集测试覆盖率，我们将创建一个新的模块 <em>aggregate-report</em>。它只包含一个 <em>pom.xml</em> 并且依赖于前两个模块。</p><p>由于准备阶段，我们可以从每个模块聚合报告。<strong>这是 <em>report-aggregate</em> 目标的工作：</strong></p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>````org.jacoco````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>````jacoco-maven-plugin````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>````0.8.8````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>````\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">&gt;</span></span>```\n        ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">&gt;</span></span>```\n            `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">&gt;</span></span>`verify`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">&gt;</span></span>`\n            ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">&gt;</span></span>```\n                ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">&gt;</span></span>````report-aggregate````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">&gt;</span></span>````\n            ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">&gt;</span></span>```\n            ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>```\n                `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataFileIncludes</span><span class="token punctuation">&gt;</span></span>`\n                    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataFileInclude</span><span class="token punctuation">&gt;</span></span>`**/jacoco.exec`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataFileInclude</span><span class="token punctuation">&gt;</span></span>`\n                `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataFileIncludes</span><span class="token punctuation">&gt;</span></span>`\n                `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>outputDirectory</span><span class="token punctuation">&gt;</span></span>`${project.reporting.outputDirectory}/jacoco-aggregate`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>outputDirectory</span><span class="token punctuation">&gt;</span></span>`\n            ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>```\n        ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">&gt;</span></span>```\n````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们可以从父模块运行 <em>verify</em> 目标：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ mvn clean verify\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>构建结束时，我们可以看到Jacoco在 <em>aggregate-report</em> 子模块的 <em>target/site/jacoco-aggregate</em> 文件夹中生成了报告。</p><p>让我们打开 <em>index.html</em> 文件查看结果。</p><p>首先，我们可以导航到控制器类的报告：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2023/09/controller_coverage-300x55.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>正如预期的那样，构造函数和 <code>fullyTested()</code> 和 <code>indirectlyTestingServiceMethod()</code> 方法被测试覆盖，而 <code>notTested()</code> 没有被覆盖。</p><p>现在让我们看看服务类的报告：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2023/09/service_coverage-300x60.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这一次，让我们关注 <code>coveredByIntegrationTest()</code> 方法。我们知道，服务模块中没有测试这个方法。唯一通过这个方法代码的测试在控制器模块中。然而，Jacoco认识到有针对这个方法的测试。在这种情况下，聚合这个词具有全部的意义！</p><h2 id="_5-结论" tabindex="-1"><a class="header-anchor" href="#_5-结论"><span>5. 结论</span></a></h2><p>在本文中，我们创建了一个多模块项目，并通过Jacoco收集了测试覆盖率。</p><p>让我们回顾一下，我们需要在测试之前运行准备阶段，而聚合则在测试之后进行。要进一步了解，我们可以使用像SonarQube这样的工具来获得覆盖结果的漂亮概览。</p><p>像往常一样，代码可以在GitHub上找到。</p>',53),c=[e];function o(l,i){return a(),s("div",null,c)}const d=n(p,[["render",o],["__file","2024-06-30-Maven Multi Module Project Coverage With Jacoco.html.vue"]]),r=JSON.parse('{"path":"/posts/baeldung/2024-06-30/2024-06-30-Maven%20Multi%20Module%20Project%20Coverage%20With%20Jacoco.html","title":"Maven多模块项目使用Jacoco进行代码覆盖率统计","lang":"zh-CN","frontmatter":{"date":"2023-09-01T00:00:00.000Z","category":["Java","Maven"],"tag":["Jacoco","多模块","Maven插件"],"head":[["meta",{"name":"keywords","content":"Maven, Jacoco, 多模块项目, 代码覆盖率"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-06-30/2024-06-30-Maven%20Multi%20Module%20Project%20Coverage%20With%20Jacoco.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Maven多模块项目使用Jacoco进行代码覆盖率统计"}],["meta",{"property":"og:description","content":"Maven多模块项目使用Jacoco进行代码覆盖率统计 在这个教程中，我们将构建一个Maven多模块项目。在这个项目中，服务和控制器将位于不同的模块中。然后，我们将编写一些测试并使用Jacoco来计算代码覆盖率。 2. 服务层 首先，让我们创建我们多模块应用的服务层。 2.1. 服务类 我们将创建我们的服务并添加几个方法： 正如它们的名字所指示的： 位..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.baeldung.com/wp-content/uploads/2023/09/controller_coverage-300x55.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-30T23:30:52.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Jacoco"}],["meta",{"property":"article:tag","content":"多模块"}],["meta",{"property":"article:tag","content":"Maven插件"}],["meta",{"property":"article:published_time","content":"2023-09-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-30T23:30:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Maven多模块项目使用Jacoco进行代码覆盖率统计\\",\\"image\\":[\\"https://www.baeldung.com/wp-content/uploads/2023/09/controller_coverage-300x55.png\\",\\"https://www.baeldung.com/wp-content/uploads/2023/09/service_coverage-300x60.png\\"],\\"datePublished\\":\\"2023-09-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-30T23:30:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Maven多模块项目使用Jacoco进行代码覆盖率统计 在这个教程中，我们将构建一个Maven多模块项目。在这个项目中，服务和控制器将位于不同的模块中。然后，我们将编写一些测试并使用Jacoco来计算代码覆盖率。 2. 服务层 首先，让我们创建我们多模块应用的服务层。 2.1. 服务类 我们将创建我们的服务并添加几个方法： 正如它们的名字所指示的： 位..."},"headers":[{"level":2,"title":"2. 服务层","slug":"_2-服务层","link":"#_2-服务层","children":[{"level":3,"title":"2.1. 服务类","slug":"_2-1-服务类","link":"#_2-1-服务类","children":[]},{"level":3,"title":"2.2. 单元测试","slug":"_2-2-单元测试","link":"#_2-2-单元测试","children":[]},{"level":3,"title":"2.3. Surefire插件配置","slug":"_2-3-surefire插件配置","link":"#_2-3-surefire插件配置","children":[]}]},{"level":2,"title":"3. 控制器层","slug":"_3-控制器层","link":"#_3-控制器层","children":[{"level":3,"title":"3.1. 控制器类","slug":"_3-1-控制器类","link":"#_3-1-控制器类","children":[]},{"level":3,"title":"3.2. 集成测试","slug":"_3-2-集成测试","link":"#_3-2-集成测试","children":[]},{"level":3,"title":"3.3. Failsafe插件配置","slug":"_3-3-failsafe插件配置","link":"#_3-3-failsafe插件配置","children":[]}]},{"level":2,"title":"4. 通过Jacoco聚合覆盖率","slug":"_4-通过jacoco聚合覆盖率","link":"#_4-通过jacoco聚合覆盖率","children":[{"level":3,"title":"4.1. 准备Jacoco代理","slug":"_4-1-准备jacoco代理","link":"#_4-1-准备jacoco代理","children":[]},{"level":3,"title":"4.2. 收集测试结果","slug":"_4-2-收集测试结果","link":"#_4-2-收集测试结果","children":[]}]},{"level":2,"title":"5. 结论","slug":"_5-结论","link":"#_5-结论","children":[]}],"git":{"createdTime":1719790252000,"updatedTime":1719790252000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":4.38,"words":1313},"filePathRelative":"posts/baeldung/2024-06-30/2024-06-30-Maven Multi Module Project Coverage With Jacoco.md","localizedDate":"2023年9月1日","excerpt":"<hr>\\n<h1>Maven多模块项目使用Jacoco进行代码覆盖率统计</h1>\\n<p>在这个教程中，我们将构建一个Maven多模块项目。在这个项目中，服务和控制器将位于不同的模块中。然后，我们将编写一些测试并使用Jacoco来计算代码覆盖率。</p>\\n<h2>2. 服务层</h2>\\n<p>首先，让我们创建我们多模块应用的服务层。</p>\\n<h3>2.1. 服务类</h3>\\n<p><strong>我们将创建我们的服务并添加几个方法：</strong></p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token annotation punctuation\\">@Service</span>\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">MyService</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token class-name\\">String</span> <span class=\\"token function\\">unitTestedOnly</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token string\\">\\"仅单元测试\\"</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token class-name\\">String</span> <span class=\\"token function\\">coveredByUnitAndIntegrationTests</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token string\\">\\"单元测试和集成测试覆盖\\"</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token class-name\\">String</span> <span class=\\"token function\\">coveredByIntegrationTest</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token string\\">\\"仅集成测试覆盖\\"</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token class-name\\">String</span> <span class=\\"token function\\">notTested</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token string\\">\\"未测试\\"</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{d as comp,r as data};
