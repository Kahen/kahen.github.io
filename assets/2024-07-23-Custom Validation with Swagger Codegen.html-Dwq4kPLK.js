import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as e}from"./app-BaCIpe-N.js";const t={},p=e(`<h1 id="使用swagger-codegen进行自定义验证" tabindex="-1"><a class="header-anchor" href="#使用swagger-codegen进行自定义验证"><span>使用Swagger Codegen进行自定义验证</span></a></h1><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p>当我们使用Swagger生成验证时，我们通常使用基本规范。然而，我们可能需要添加Spring自定义验证注解。</p><p>本教程将教授如何使用这些验证生成模型和REST API，同时重点介绍OpenAPI服务器生成器，而不是约束验证器。</p><h2 id="_2-设置" tabindex="-1"><a class="header-anchor" href="#_2-设置"><span>2. 设置</span></a></h2><p>在设置中，我们将使用之前的Baeldung教程从OpenAPI 3.0.0定义生成服务器。接下来，我们将添加一些自定义验证注解以及所有所需的依赖项。</p><h2 id="_3-petstore-api-openapi定义" tabindex="-1"><a class="header-anchor" href="#_3-petstore-api-openapi定义"><span>3. PetStore API OpenAPI定义</span></a></h2><p>假设我们有PetStore API的OpenAPI定义，我们需要为REST API和描述的模型_Pet_添加自定义验证。</p><h3 id="_3-1-api模型的自定义验证" tabindex="-1"><a class="header-anchor" href="#_3-1-api模型的自定义验证"><span>3.1. API模型的自定义验证</span></a></h3><p>为了创建宠物，我们需要让Swagger使用我们的自定义验证注解来测试宠物的名字是否大写。因此，为了本教程的目的，我们将简单地称其为_Capitalized_。</p><p>因此，请观察以下示例中的_x-constraints_规范。这足以让Swagger知道我们需要生成与已知注解不同类型的注解：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">openapi</span><span class="token punctuation">:</span> 3.0.1
<span class="token key atrule">info</span><span class="token punctuation">:</span>
  <span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;1.0&quot;</span>
  <span class="token key atrule">title</span><span class="token punctuation">:</span> PetStore
<span class="token key atrule">paths</span><span class="token punctuation">:</span>
  <span class="token key atrule">/pets</span><span class="token punctuation">:</span>
    <span class="token key atrule">post</span><span class="token punctuation">:</span>
      <span class="token comment">#.. 这里描述了post</span>
<span class="token key atrule">components</span><span class="token punctuation">:</span>
  <span class="token key atrule">schemas</span><span class="token punctuation">:</span>
    <span class="token key atrule">Pet</span><span class="token punctuation">:</span>
      <span class="token key atrule">type</span><span class="token punctuation">:</span> object
      <span class="token key atrule">required</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> id
        <span class="token punctuation">-</span> name
      <span class="token key atrule">properties</span><span class="token punctuation">:</span>
        <span class="token key atrule">id</span><span class="token punctuation">:</span>
          <span class="token key atrule">type</span><span class="token punctuation">:</span> integer
          <span class="token key atrule">format</span><span class="token punctuation">:</span> int64
        <span class="token key atrule">name</span><span class="token punctuation">:</span>
          <span class="token key atrule">type</span><span class="token punctuation">:</span> string
          <span class="token key atrule">x-constraints</span><span class="token punctuation">:</span> <span class="token string">&quot;Capitalized(required = true)&quot;</span>
        <span class="token key atrule">tag</span><span class="token punctuation">:</span>
          <span class="token key atrule">type</span><span class="token punctuation">:</span> string
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-rest-api端点的自定义验证" tabindex="-1"><a class="header-anchor" href="#_3-2-rest-api端点的自定义验证"><span>3.2. REST API端点的自定义验证</span></a></h3><p>如上所述，我们将以相同的方式描述一个按名称查找所有宠物的端点。为了演示我们的目的，假设我们的系统是区分大小写的，所以我们将再次为_name_输入参数添加相同的_x-constraints_验证：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">/pets</span><span class="token punctuation">:</span>
  <span class="token comment"># post在这里定义</span>
  <span class="token key atrule">get</span><span class="token punctuation">:</span>
    <span class="token key atrule">tags</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> pet
    <span class="token key atrule">summary</span><span class="token punctuation">:</span> 按名称查找宠物
    <span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">&#39;按名称查找宠物&#39;</span>
    <span class="token key atrule">operationId</span><span class="token punctuation">:</span> findPetsByTags
    <span class="token key atrule">parameters</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> name
        <span class="token key atrule">in</span><span class="token punctuation">:</span> query
        <span class="token key atrule">schema</span><span class="token punctuation">:</span>
          <span class="token key atrule">type</span><span class="token punctuation">:</span> string
        <span class="token key atrule">description</span><span class="token punctuation">:</span> 按标签过滤
        <span class="token key atrule">required</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
        <span class="token key atrule">x-constraints</span><span class="token punctuation">:</span> <span class="token string">&quot;Capitalized(required = true)&quot;</span>
    <span class="token key atrule">responses</span><span class="token punctuation">:</span>
      <span class="token key atrule">&#39;200&#39;</span><span class="token punctuation">:</span>
        <span class="token key atrule">description</span><span class="token punctuation">:</span> 默认响应
        <span class="token key atrule">content</span><span class="token punctuation">:</span>
          <span class="token key atrule">application/json</span><span class="token punctuation">:</span>
            <span class="token key atrule">schema</span><span class="token punctuation">:</span>
              <span class="token key atrule">type</span><span class="token punctuation">:</span> array
              <span class="token key atrule">items</span><span class="token punctuation">:</span>
                <span class="token key atrule">$ref</span><span class="token punctuation">:</span> <span class="token string">&#39;#/components/schemas/Pet&#39;</span>
      <span class="token key atrule">&#39;400&#39;</span><span class="token punctuation">:</span>
        <span class="token key atrule">description</span><span class="token punctuation">:</span> 无效的标签值
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-创建-capitalized-注解" tabindex="-1"><a class="header-anchor" href="#_4-创建-capitalized-注解"><span>4. 创建_Capitalized_注解</span></a></h2><p>为了强制执行自定义验证，我们需要创建一个注解来确保功能。</p><p>首先，我们创建注解接口——@Capitalized：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Constraint</span><span class="token punctuation">(</span>validatedBy <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">Capitalized</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">PARAMETER</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Capitalized</span><span class="token punctuation">{</span>
    <span class="token class-name">String</span> <span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;Name should be capitalized.&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> <span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token comment">// 默认注解方法</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意我们为了演示目的制作了_required_方法——我们稍后会解释。</p><p>接下来，我们添加_CapitalizedValidator_，如上述@Constraint注解中提到的：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CapitalizedValidator</span> <span class="token keyword">implements</span> <span class="token class-name">ConstraintValidator</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Capitalized</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>\` <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token class-name">String</span> nameField<span class="token punctuation">,</span> <span class="token class-name">ConstraintValidatorContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 验证代码在这里</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-生成验证注解" tabindex="-1"><a class="header-anchor" href="#_5-生成验证注解"><span>5. 生成验证注解</span></a></h2><h3 id="_5-1-指定mustache模板目录" tabindex="-1"><a class="header-anchor" href="#_5-1-指定mustache模板目录"><span>5.1. 指定Mustache模板目录</span></a></h3><p>为了生成带有@Capitalized验证注解的模型，我们需要特定的Mustache模板，告诉Swagger在模型中生成它。</p><p>因此，在OpenAPI生成器插件中，在<code>&lt;configuration&gt;</code>[...]<code>&lt;/configuration&gt;</code>标签内，我们需要添加一个模板目录：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>\`
  \`\`<span class="token comment">&lt;!--...--&gt;</span>\`\`
  \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">&gt;</span></span>\`
    \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">&gt;</span></span>\`
      \`&lt;configuration
        //...
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>templateDirectory</span><span class="token punctuation">&gt;</span></span>\`
          \${project.basedir}/src/main/resources/openapi/templates
        \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>templateDirectory</span><span class="token punctuation">&gt;</span></span>\`
        //...
      \`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>\`\`
    \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">&gt;</span></span>\`
  \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">&gt;</span></span>\`
  \`\`<span class="token comment">&lt;!--...--&gt;</span>\`\`
\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-添加mustache-bean验证配置" tabindex="-1"><a class="header-anchor" href="#_5-2-添加mustache-bean验证配置"><span>5.2. 添加Mustache Bean验证配置</span></a></h3><p>在本章中，我们将配置Mustache模板以生成验证规范。为了添加更多细节，我们将修改_beanValidationCore.mustache_、_model.mustache_和_api.mustache_文件，以成功生成代码。</p><p>首先，需要修改来自_swagger-codegen_模块的_beanValidationCore.mustache_，通过添加供应商扩展规范：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>{{{ vendorExtensions.x-constraints }}}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其次，如果我们有一个带有内部属性的注解，比如@Capitalized(required = &quot;true&quot;)，那么在_beanValidationCore.mustache_文件的第二行需要指定特定的模式：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>{{#required}}@Capitalized(required=&quot;{{{pattern}}}&quot;) {{/required}}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第三，我们需要更改_model.mustache_规范以包含必要的导入。例如，我们将导入@Capitalized注解和Capitalized。导入应该在_model.mustache_的_package_标签后插入：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>{{#imports}}import {{import}}; {{/imports}} import
com.baeldung.openapi.petstore.validator.CapitalizedValidator;
import com.baeldung.openapi.petstore.validator.Capitalized;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，为了在APIs中生成注解，我们需要在_api.mustache_文件中添加@Capitalized注解的导入。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>{{#imports}}import {{import}}; {{/imports}} import
com.baeldung.openapi.petstore.validator.Capitalized;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，_api.mustache_依赖于_cookieParams.mustache_文件。因此，我们需要将其添加到_openapi/templates_目录中。</p><h2 id="_6-生成源代码" tabindex="-1"><a class="header-anchor" href="#_6-生成源代码"><span>6. 生成源代码</span></a></h2><p>最后，我们可以使用生成的代码。我们至少需要运行_mvn generate-sources_。这将生成模型：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@JsonProperty</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@JsonProperty</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token comment">// 其他参数</span>
    <span class="token annotation punctuation">@Schema</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> description <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Capitalized</span> <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> name<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">// 默认的getter和setter</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它还将生成一个API：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">default</span> <span class="token class-name">ResponseEntity</span>\`<span class="token operator">&lt;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pet</span><span class="token punctuation">&gt;</span></span>\`<span class="token operator">&gt;</span> <span class="token function">findPetsByTags</span><span class="token punctuation">(</span>
    <span class="token annotation punctuation">@Capitalized</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ApiParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;Tags to filter by&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Valid</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">// 默认生成的代码在这里</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">NOT_IMPLEMENTED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-使用-curl-进行测试" tabindex="-1"><a class="header-anchor" href="#_7-使用-curl-进行测试"><span>7. 使用_curl_进行测试</span></a></h2><p>启动应用程序后，我们将运行一些_curl_命令进行测试。</p><p>另外，请注意，违反约束会抛出_ConstraintViolationException._ 异常需要通过_@ControllerAdvice_适当处理以返回400 Bad Request状态。</p><h3 id="_7-1-测试-pet-模型验证" tabindex="-1"><a class="header-anchor" href="#_7-1-测试-pet-模型验证"><span>7.1. 测试_Pet_模型验证</span></a></h3><p>这个_Pet_模型有一个小写的_name_。因此，应用程序应该返回400 Bad Request：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-X</span> <span class="token string">&#39;POST&#39;</span> <span class="token punctuation">\\</span>
  <span class="token string">&#39;http://localhost:8080/pet&#39;</span> <span class="token punctuation">\\</span>
  <span class="token parameter variable">-H</span> <span class="token string">&#39;accept: application/json&#39;</span> <span class="token punctuation">\\</span>
  <span class="token parameter variable">-H</span> <span class="token string">&#39;Content-Type: application/json&#39;</span> <span class="token punctuation">\\</span>
  <span class="token parameter variable">-d</span> <span class="token string">&#39;{
  &quot;id&quot;: 1,
  &quot;name&quot;: &quot;rockie&quot;
}&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-2-测试查找-pet-api" tabindex="-1"><a class="header-anchor" href="#_7-2-测试查找-pet-api"><span>7.2. 测试查找_Pet_ API</span></a></h3><p>与上述相同，因为_name_是小写的，应用程序也应该返回400 Bad Request：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-I</span> http://localhost:8080/pets/name<span class="token operator">=</span><span class="token string">&quot;rockie&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_8-结论" tabindex="-1"><a class="header-anchor" href="#_8-结论"><span>8. 结论</span></a></h2><p>在本教程中，我们已经看到了如何在实现REST API服务器时，使用Spring生成自定义约束验证器。</p><p>如常，代码可以在GitHub上找到。</p>`,55),i=[p];function l(o,c){return s(),a("div",null,i)}const d=n(t,[["render",l],["__file","2024-07-23-Custom Validation with Swagger Codegen.html.vue"]]),k=JSON.parse('{"path":"/posts/baeldung/2024-07-23/2024-07-23-Custom%20Validation%20with%20Swagger%20Codegen.html","title":"使用Swagger Codegen进行自定义验证","lang":"zh-CN","frontmatter":{"date":"2024-07-24T00:00:00.000Z","category":["Java","Swagger"],"tag":["Custom Validation","Swagger Codegen"],"head":[["meta",{"name":"keywords","content":"Java, Swagger, Custom Validation, Swagger Codegen"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-23/2024-07-23-Custom%20Validation%20with%20Swagger%20Codegen.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"使用Swagger Codegen进行自定义验证"}],["meta",{"property":"og:description","content":"使用Swagger Codegen进行自定义验证 1. 概述 当我们使用Swagger生成验证时，我们通常使用基本规范。然而，我们可能需要添加Spring自定义验证注解。 本教程将教授如何使用这些验证生成模型和REST API，同时重点介绍OpenAPI服务器生成器，而不是约束验证器。 2. 设置 在设置中，我们将使用之前的Baeldung教程从Ope..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-23T17:49:15.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Custom Validation"}],["meta",{"property":"article:tag","content":"Swagger Codegen"}],["meta",{"property":"article:published_time","content":"2024-07-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-23T17:49:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用Swagger Codegen进行自定义验证\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-24T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-23T17:49:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"使用Swagger Codegen进行自定义验证 1. 概述 当我们使用Swagger生成验证时，我们通常使用基本规范。然而，我们可能需要添加Spring自定义验证注解。 本教程将教授如何使用这些验证生成模型和REST API，同时重点介绍OpenAPI服务器生成器，而不是约束验证器。 2. 设置 在设置中，我们将使用之前的Baeldung教程从Ope..."},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. 设置","slug":"_2-设置","link":"#_2-设置","children":[]},{"level":2,"title":"3. PetStore API OpenAPI定义","slug":"_3-petstore-api-openapi定义","link":"#_3-petstore-api-openapi定义","children":[{"level":3,"title":"3.1. API模型的自定义验证","slug":"_3-1-api模型的自定义验证","link":"#_3-1-api模型的自定义验证","children":[]},{"level":3,"title":"3.2. REST API端点的自定义验证","slug":"_3-2-rest-api端点的自定义验证","link":"#_3-2-rest-api端点的自定义验证","children":[]}]},{"level":2,"title":"4. 创建_Capitalized_注解","slug":"_4-创建-capitalized-注解","link":"#_4-创建-capitalized-注解","children":[]},{"level":2,"title":"5. 生成验证注解","slug":"_5-生成验证注解","link":"#_5-生成验证注解","children":[{"level":3,"title":"5.1. 指定Mustache模板目录","slug":"_5-1-指定mustache模板目录","link":"#_5-1-指定mustache模板目录","children":[]},{"level":3,"title":"5.2. 添加Mustache Bean验证配置","slug":"_5-2-添加mustache-bean验证配置","link":"#_5-2-添加mustache-bean验证配置","children":[]}]},{"level":2,"title":"6. 生成源代码","slug":"_6-生成源代码","link":"#_6-生成源代码","children":[]},{"level":2,"title":"7. 使用_curl_进行测试","slug":"_7-使用-curl-进行测试","link":"#_7-使用-curl-进行测试","children":[{"level":3,"title":"7.1. 测试_Pet_模型验证","slug":"_7-1-测试-pet-模型验证","link":"#_7-1-测试-pet-模型验证","children":[]},{"level":3,"title":"7.2. 测试查找_Pet_ API","slug":"_7-2-测试查找-pet-api","link":"#_7-2-测试查找-pet-api","children":[]}]},{"level":2,"title":"8. 结论","slug":"_8-结论","link":"#_8-结论","children":[]}],"git":{"createdTime":1721756955000,"updatedTime":1721756955000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":4.37,"words":1312},"filePathRelative":"posts/baeldung/2024-07-23/2024-07-23-Custom Validation with Swagger Codegen.md","localizedDate":"2024年7月24日","excerpt":"\\n<h2>1. 概述</h2>\\n<p>当我们使用Swagger生成验证时，我们通常使用基本规范。然而，我们可能需要添加Spring自定义验证注解。</p>\\n<p>本教程将教授如何使用这些验证生成模型和REST API，同时重点介绍OpenAPI服务器生成器，而不是约束验证器。</p>\\n<h2>2. 设置</h2>\\n<p>在设置中，我们将使用之前的Baeldung教程从OpenAPI 3.0.0定义生成服务器。接下来，我们将添加一些自定义验证注解以及所有所需的依赖项。</p>\\n<h2>3. PetStore API OpenAPI定义</h2>\\n<p>假设我们有PetStore API的OpenAPI定义，我们需要为REST API和描述的模型_Pet_添加自定义验证。</p>","autoDesc":true}');export{d as comp,k as data};
