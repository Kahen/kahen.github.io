import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-BaCIpe-N.js";const e={},p=t(`<h1 id="java-16-新特性概览" tabindex="-1"><a class="header-anchor" href="#java-16-新特性概览"><span>Java 16 新特性概览</span></a></h1><p>Java 16，于2021年3月16日发布，是继Java 15之后的短期增量发布。此版本带来了一些有趣的特性，例如记录（records）和封闭类（sealed classes）。</p><p>在本文中，我们将探索这些新特性中的一些。</p><h3 id="_2-通过代理实例调用接口的默认方法-jdk-8159746" tabindex="-1"><a class="header-anchor" href="#_2-通过代理实例调用接口的默认方法-jdk-8159746"><span>2. 通过代理实例调用接口的默认方法（JDK-8159746）</span></a></h3><p>作为接口中默认方法的增强，Java 16的发布增加了使用反射通过动态代理调用接口的默认方法的支持。</p><p>让我们通过一个简单的默认方法示例来说明：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>
    <span class="token keyword">default</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过这个增强，我们可以在该接口的代理上使用反射调用默认方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Object</span> proxy <span class="token operator">=</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span>\`<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span>prox<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">isDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">.</span><span class="token function">invokeDefault</span><span class="token punctuation">(</span>prox<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Method</span> method <span class="token operator">=</span> proxy<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertThat</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-日期时间格式化支持-jdk-8247781" tabindex="-1"><a class="header-anchor" href="#_3-日期时间格式化支持-jdk-8247781"><span>3. 日期时间格式化支持（JDK-8247781）</span></a></h3><p>DateTimeFormatter的一个新增加是时间段符号“<em>B</em>”，它提供了一种替代上下午格式的方式：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">LocalTime</span> date <span class="token operator">=</span> <span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot;15:25:08.690791&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">DateTimeFormatter</span> formatter <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">&quot;h B&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertThat</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>formatter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;3 in the afternoon&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与“3pm”这样的输出不同，我们得到的是“3 in the afternoon”。我们还可以使用“<em>B</em>”，“<em>BBBB</em>”或“<em>BBBBB</em>”DateTimeFormatter模式分别表示短、全和窄样式。</p><h3 id="_4-增加-stream-tolist-方法-jdk-8180352" tabindex="-1"><a class="header-anchor" href="#_4-增加-stream-tolist-方法-jdk-8180352"><span>4. 增加 Stream.toList 方法（JDK-8180352）</span></a></h3><p>目标是减少一些常用Stream收集器的样板代码，例如Collectors.toList和Collectors.toSet：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>\` integersAsString <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>\`\` ints <span class="token operator">=</span> integersAsString<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">parseInt</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>\`\` intsEquivalent <span class="token operator">=</span> integersAsString<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">parseInt</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们的ints示例使用了旧方法，但intsEquivalent具有相同的结果并且更加简洁。</p><h3 id="_5-vector-api孵化器-jep-338" tabindex="-1"><a class="header-anchor" href="#_5-vector-api孵化器-jep-338"><span>5. Vector API孵化器（JEP-338）</span></a></h3><p>Vector API目前处于Java 16的初始孵化阶段。这个API的想法是提供一种向量计算的方式，最终能够在支持的CPU架构上比传统的标量计算方法更优地执行。</p><p>让我们看看如何传统地乘以两个数组：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>a<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个标量计算示例，对于长度为4的数组，将在4个周期内执行。现在，让我们看看等效的基于向量的计算：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> vectorA <span class="token operator">=</span> <span class="token class-name">IntVector</span><span class="token punctuation">.</span><span class="token function">fromArray</span><span class="token punctuation">(</span><span class="token class-name">IntVector</span><span class="token punctuation">.</span><span class="token constant">SPECIES_128</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> vectorB <span class="token operator">=</span> <span class="token class-name">IntVector</span><span class="token punctuation">.</span><span class="token function">fromArray</span><span class="token punctuation">(</span><span class="token class-name">IntVector</span><span class="token punctuation">.</span><span class="token constant">SPECIES_128</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> vectorC <span class="token operator">=</span> vectorA<span class="token punctuation">.</span><span class="token function">mul</span><span class="token punctuation">(</span>vectorB<span class="token punctuation">)</span><span class="token punctuation">;</span>
vectorC<span class="token punctuation">.</span><span class="token function">intoArray</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在基向量的代码中，我们首先使用IntVector类的静态工厂方法fromArray从输入数组创建两个IntVectors。第一个参数是向量的大小，其次是数组和偏移量（这里设置为0）。最重要的是我们得到的向量大小为128位。在Java中，每个int占用4个字节。</p><p>因为我们有一个包含4个int的输入数组，它需要128位来存储。我们的单个Vector可以存储整个数组。</p><p>在某些架构上，编译器将能够优化字节码，将计算从4个周期减少到只有1个周期。这些优化将使机器学习和密码学等领域受益。</p><p>我们应该注意，由于处于孵化阶段，Vector API可能会随着新版本的发布而发生变化。</p><h3 id="_6-记录-jep-395" tabindex="-1"><a class="header-anchor" href="#_6-记录-jep-395"><span>6. 记录（JEP-395）</span></a></h3><p>记录在Java 14中引入。Java 16带来了一些增量变化。</p><p>记录类似于枚举，因为它们是类的一种受限形式。定义记录是定义不可变数据持有对象的简洁方式。</p><h4 id="_6-1-没有记录的示例" tabindex="-1"><a class="header-anchor" href="#_6-1-没有记录的示例"><span>6.1. 没有记录的示例</span></a></h4><p>首先，让我们定义一个Book类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> author<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> isbn<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token class-name">String</span> title<span class="token punctuation">,</span> <span class="token class-name">String</span> author<span class="token punctuation">,</span> <span class="token class-name">String</span> isbn<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>author <span class="token operator">=</span> author<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>isbn <span class="token operator">=</span> isbn<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> title<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> author<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getIsbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> isbn<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> author<span class="token punctuation">,</span> isbn<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Java中创建简单的数据持有类需要大量的样板代码。这可能很繁琐，并导致开发者在没有提供所有必要的方法（例如equals和hashCode）的情况下出现错误。</p><p>同样，有时开发者会跳过创建适当的不可变类的必要步骤。有时我们最终会重用一个通用类，而不是为每个不同的用例定义一个专门的类。</p><p>大多数现代IDE提供了自动生成代码的能力（例如setters、getters、构造函数等），这有助于缓解这些问题，并减少开发者编写代码的开销。然而，记录提供了一种内置机制来减少样板代码并创建相同的结果。</p><h4 id="_6-2-使用记录的示例" tabindex="-1"><a class="header-anchor" href="#_6-2-使用记录的示例"><span>6.2. 使用记录的示例</span></a></h4><p>这里是将Book重写为记录的示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">record</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token class-name">String</span> title<span class="token punctuation">,</span> <span class="token class-name">String</span> author<span class="token punctuation">,</span> <span class="token class-name">String</span> isbn<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过使用record关键字，我们将Book类减少到了两行。这使得它更易于使用且不易出错。</p><h4 id="_6-3-java-16中记录的新增加" tabindex="-1"><a class="header-anchor" href="#_6-3-java-16中记录的新增加"><span>6.3. Java 16中记录的新增加</span></a></h4><p>随着Java 16的发布，我们现在可以将记录定义为内部类的类成员。这是由于在Java 15的增量发布中错过的放宽限制，作为JEP-384的一部分：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">OuterClass</span> <span class="token punctuation">{</span>
    <span class="token keyword">class</span> <span class="token class-name">InnerClass</span> <span class="token punctuation">{</span>
        <span class="token class-name">Book</span> book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token string">&quot;Title&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;author&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;isbn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-对instanceof的模式匹配-jep-394" tabindex="-1"><a class="header-anchor" href="#_7-对instanceof的模式匹配-jep-394"><span>7. 对instanceof的模式匹配（JEP-394）</span></a></h3><p>从Java 16开始，对instanceof关键字添加了模式匹配。</p><p>之前我们可能会这样编写代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token string">&quot;TEST&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>
    <span class="token comment">// 执行一些逻辑...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而不是仅仅关注应用程序所需的逻辑，这段代码必须首先检查obj的实例，然后将对象转换为String并分配给新变量t。</p><p>随着模式匹配的引入，我们可以重写这段代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token string">&quot;TEST&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">String</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 执行一些逻辑</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们现在可以在instanceof检查中声明一个变量——在这个例子中是t。</p><h3 id="_8-封闭类-jep-397" tabindex="-1"><a class="header-anchor" href="#_8-封闭类-jep-397"><span>8. 封闭类（JEP-397）</span></a></h3><p>封闭类最初在Java 15中引入，为确定哪些子类被允许扩展或实现一个父类或接口提供了一种机制。</p><h4 id="_8-1-示例" tabindex="-1"><a class="header-anchor" href="#_8-1-示例"><span>8.1. 示例</span></a></h4><p>让我们通过定义一个接口和两个实现类来说明这一点：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">interface</span> <span class="token class-name">JungleAnimal</span> <span class="token keyword">permits</span> <span class="token class-name">Monkey</span><span class="token punctuation">,</span> <span class="token class-name">Snake</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Monkey</span> <span class="token keyword">implements</span> <span class="token class-name">JungleAnimal</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">non-sealed</span> <span class="token keyword">class</span> <span class="token class-name">Snake</span> <span class="token keyword">implements</span> <span class="token class-name">JungleAnimal</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>sealed关键字与permits关键字结合使用，以确定确切的允许实现此接口的类。在我们的例子中，这是Monkey和Snake。</p><p>封闭类的继承类必须用以下之一标记：</p><ul><li>sealed——意味着它们必须使用permits关键字定义允许哪些类从它继承。</li><li>final——阻止任何进一步的子类。</li><li>non-sealed——允许任何类能够从它继承。</li></ul><p>闭类的一个显著好处是，它们允许进行详尽的模式匹配检查，而无需为所有未覆盖的情况进行捕获。例如，使用我们定义的类，我们可以有逻辑来覆盖所有可能的JungleAnimal子类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">JungleAnimal</span> j <span class="token operator">=</span> <span class="token comment">// 一些JungleAnimal实例</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token keyword">instanceof</span> <span class="token class-name">Monkey</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 执行逻辑</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token keyword">instanceof</span> <span class="token class-name">Snake</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 执行逻辑</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们不需要else块，因为封闭类只允许Monkey和Snake这两种可能的子类型。</p><h4 id="_8-2-java-16中封闭类的新增加" tabindex="-1"><a class="header-anchor" href="#_8-2-java-16中封闭类的新增加"><span>8.2. Java 16中封闭类的新增加</span></a></h4><p>Java 16对封闭类进行了一些增加。这些是Java 16对封闭类引入的更改：</p><ul><li><p>Java语言将sealed、non-sealed和permits识别为上下文关键字（类似于abstract和extends）。 -继续翻译：</p></li><li><p>限制创建封闭类的子类的局部类的能力（类似于无法创建封闭类的匿名类）。</p></li><li><p>对封闭类及其派生类的强制转换进行更严格的检查。</p></li></ul><h3 id="_9-其他变化" tabindex="-1"><a class="header-anchor" href="#_9-其他变化"><span>9. 其他变化</span></a></h3><p>从Java 15版本中的JEP-383继续，外部链接器API提供了一种灵活的方式来访问主机机器上的本地代码。最初是针对C语言互操作性，将来可能会适应其他语言，如C++或Fortran。这个特性的目标是最终取代Java本地接口。</p><p>另一个重要变化是，JDK内部现在默认被强封装。自Java 9以来，这些一直是可访问的。然而，现在JVM需要参数<code>--illegal-access=permit</code>。这将影响所有直接使用JDK内部并忽略警告消息的库和应用程序（特别是测试时）。</p><h3 id="_10-结论" tabindex="-1"><a class="header-anchor" href="#_10-结论"><span>10. 结论</span></a></h3><p>在本文中，我们涵盖了作为增量Java 16版本一部分引入的一些特性和变化。Java 16的完整变化列表在JDK发布说明中。</p><p>像往常一样，本文中的所有代码都可以在GitHub上找到。</p><p><img src="https://www.baeldung.com/wp-content/themes/baeldung/icon/logo.svg" alt="img" loading="lazy"><img src="https://secure.gravatar.com/avatar/53ef9be768443f46703ce4b92df78ac9?s=50&amp;r=g" alt="img" loading="lazy"><img src="https://secure.gravatar.com/avatar/6c3babf3d6ea5d49c2bc4e7957870d75?s=50&amp;r=g" alt="img" loading="lazy"><img src="https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png" alt="img" loading="lazy"><img src="https://www.baeldung.com/wp-content/uploads/2016/05/baeldung-rest-post-footer-main-1.2.0.jpg" alt="img" loading="lazy"><img src="https://www.baeldung.com/wp-content/uploads/2016/05/baeldung-rest-post-footer-icn-1.0.0.png" alt="img" loading="lazy"></p><p>翻译结束。</p><p>OK。</p>`,74),o=[p];function c(l,i){return s(),a("div",null,o)}const k=n(e,[["render",c],["__file","2024-07-25-New Features in Java 16.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-25/2024-07-25-New%20Features%20in%20Java%2016.html","title":"Java 16 新特性概览","lang":"zh-CN","frontmatter":{"date":"2024-07-26T00:00:00.000Z","category":["Java","编程"],"tag":["Java 16","新特性"],"head":[["meta",{"name":"keywords","content":"Java 16, 新特性, 编程, 技术文章"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-25/2024-07-25-New%20Features%20in%20Java%2016.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Java 16 新特性概览"}],["meta",{"property":"og:description","content":"Java 16 新特性概览 Java 16，于2021年3月16日发布，是继Java 15之后的短期增量发布。此版本带来了一些有趣的特性，例如记录（records）和封闭类（sealed classes）。 在本文中，我们将探索这些新特性中的一些。 2. 通过代理实例调用接口的默认方法（JDK-8159746） 作为接口中默认方法的增强，Java 16..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.baeldung.com/wp-content/themes/baeldung/icon/logo.svg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-25T23:55:20.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java 16"}],["meta",{"property":"article:tag","content":"新特性"}],["meta",{"property":"article:published_time","content":"2024-07-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-25T23:55:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 16 新特性概览\\",\\"image\\":[\\"https://www.baeldung.com/wp-content/themes/baeldung/icon/logo.svg\\",\\"https://secure.gravatar.com/avatar/53ef9be768443f46703ce4b92df78ac9?s=50&r=g\\",\\"https://secure.gravatar.com/avatar/6c3babf3d6ea5d49c2bc4e7957870d75?s=50&r=g\\",\\"https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png\\",\\"https://www.baeldung.com/wp-content/uploads/2016/05/baeldung-rest-post-footer-main-1.2.0.jpg\\",\\"https://www.baeldung.com/wp-content/uploads/2016/05/baeldung-rest-post-footer-icn-1.0.0.png\\"],\\"datePublished\\":\\"2024-07-26T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-25T23:55:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Java 16 新特性概览 Java 16，于2021年3月16日发布，是继Java 15之后的短期增量发布。此版本带来了一些有趣的特性，例如记录（records）和封闭类（sealed classes）。 在本文中，我们将探索这些新特性中的一些。 2. 通过代理实例调用接口的默认方法（JDK-8159746） 作为接口中默认方法的增强，Java 16..."},"headers":[{"level":3,"title":"2. 通过代理实例调用接口的默认方法（JDK-8159746）","slug":"_2-通过代理实例调用接口的默认方法-jdk-8159746","link":"#_2-通过代理实例调用接口的默认方法-jdk-8159746","children":[]},{"level":3,"title":"3. 日期时间格式化支持（JDK-8247781）","slug":"_3-日期时间格式化支持-jdk-8247781","link":"#_3-日期时间格式化支持-jdk-8247781","children":[]},{"level":3,"title":"4. 增加 Stream.toList 方法（JDK-8180352）","slug":"_4-增加-stream-tolist-方法-jdk-8180352","link":"#_4-增加-stream-tolist-方法-jdk-8180352","children":[]},{"level":3,"title":"5. Vector API孵化器（JEP-338）","slug":"_5-vector-api孵化器-jep-338","link":"#_5-vector-api孵化器-jep-338","children":[]},{"level":3,"title":"6. 记录（JEP-395）","slug":"_6-记录-jep-395","link":"#_6-记录-jep-395","children":[]},{"level":3,"title":"7. 对instanceof的模式匹配（JEP-394）","slug":"_7-对instanceof的模式匹配-jep-394","link":"#_7-对instanceof的模式匹配-jep-394","children":[]},{"level":3,"title":"8. 封闭类（JEP-397）","slug":"_8-封闭类-jep-397","link":"#_8-封闭类-jep-397","children":[]},{"level":3,"title":"9. 其他变化","slug":"_9-其他变化","link":"#_9-其他变化","children":[]},{"level":3,"title":"10. 结论","slug":"_10-结论","link":"#_10-结论","children":[]}],"git":{"createdTime":1721951720000,"updatedTime":1721951720000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":7.38,"words":2213},"filePathRelative":"posts/baeldung/2024-07-25/2024-07-25-New Features in Java 16.md","localizedDate":"2024年7月26日","excerpt":"\\n<p>Java 16，于2021年3月16日发布，是继Java 15之后的短期增量发布。此版本带来了一些有趣的特性，例如记录（records）和封闭类（sealed classes）。</p>\\n<p>在本文中，我们将探索这些新特性中的一些。</p>\\n<h3>2. 通过代理实例调用接口的默认方法（JDK-8159746）</h3>\\n<p>作为接口中默认方法的增强，Java 16的发布增加了使用反射通过动态代理调用接口的默认方法的支持。</p>\\n<p>让我们通过一个简单的默认方法示例来说明：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">interface</span> <span class=\\"token class-name\\">HelloWorld</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">default</span> <span class=\\"token class-name\\">String</span> <span class=\\"token function\\">hello</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token string\\">\\"world\\"</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{k as comp,d as data};
