import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as n,a as s}from"./app-C5QtKXnb.js";const t={},r=s(`<h1 id="jvm参数-initialrampercentage、minrampercentage-和-maxrampercentage" tabindex="-1"><a class="header-anchor" href="#jvm参数-initialrampercentage、minrampercentage-和-maxrampercentage"><span>JVM参数：InitialRAMPercentage、MinRAMPercentage 和 MaxRAMPercentage</span></a></h1><p>Java应用程序以其启动缓慢和预热时间长而闻名。OpenJDK中的CRaC（协调恢复检查点）项目可以通过创建应用程序在峰值性能时的检查点，并恢复JVM实例到该点来帮助改善这些问题。</p><p>为了充分利用这一特性，BellSoft提供了高度优化的Java应用程序容器。这些容器打包了Alpaquita Linux（一个为Java和云环境优化的全功能操作系统）和Liberica JDK（基于OpenJDK的开源Java运行时）。</p><p>这些现成的镜像使我们能够轻松地将CRaC集成到Spring Boot应用程序中：</p><p><strong>使用CRaC支持提高Java应用程序性能</strong></p><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p>在本教程中，我们将讨论一些JVM参数，这些参数可以用来设置JVM的RAM百分比。</p><p>Java 8中引入的_InitialRAMPercentage_、_MinRAMPercentage_和_MaxRAMPercentage_参数有助于配置Java应用程序的堆大小。</p><p><em>InitialRAMPercentage</em> JVM参数允许我们配置Java应用程序的初始堆大小。它是物理服务器或容器总内存的百分比，以双精度值传递。</p><p>例如，如果我们为1 GB全内存的物理服务器设置-<em>XX:InitialRAMPercentage=50.0</em>，那么初始堆大小将大约是500 MB（1 GB的50%）。</p><p>首先，让我们检查JVM中_IntialRAMPercentage_的默认值：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run openjdk:8 <span class="token function">java</span> <span class="token parameter variable">-XX:+PrintFlagsFinal</span> <span class="token parameter variable">-version</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token string">&quot;InitialRAMPercentage&quot;</span>
   double InitialRAMPercentage                      <span class="token operator">=</span> <span class="token number">1.562500</span>                            <span class="token punctuation">{</span>product<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，让我们为JVM设置50%的初始堆大小：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">-m</span> 1GB openjdk:8 <span class="token function">java</span> <span class="token parameter variable">-XX:InitialRAMPercentage</span><span class="token operator">=</span><span class="token number">50.0</span> <span class="token parameter variable">-XX:+PrintFlagsFinal</span> <span class="token parameter variable">-version</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token string">&quot;InitialRAMPercentage&quot;</span>
   double InitialRAMPercentage                     :<span class="token operator">=</span> <span class="token number">50.000000</span>                           <span class="token punctuation">{</span>product<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，当我们配置-<em>Xms_选项时，JVM会忽略_InitialRAMPercentage</em>。</p><h2 id="_3-xx-minrampercentage" tabindex="-1"><a class="header-anchor" href="#_3-xx-minrampercentage"><span>3. -XX:MinRAMPercentage</span></a></h2><p>与名称不同，_MinRAMPercentage_参数允许设置在少量内存（少于200MB）下运行的JVM的最大堆大小。</p><p>首先，我们将探索_MinRAMPercentage_的默认值：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run openjdk:8 <span class="token function">java</span> <span class="token parameter variable">-XX:+PrintFlagsFinal</span> <span class="token parameter variable">-version</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token string">&quot;MinRAMPercentage&quot;</span>
   double MinRAMPercentage                      <span class="token operator">=</span> <span class="token number">50.000000</span>                            <span class="token punctuation">{</span>product<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们使用该参数为总内存为100MB的JVM设置最大堆大小：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">-m</span> 100MB openjdk:8 <span class="token function">java</span> <span class="token parameter variable">-XX:MinRAMPercentage</span><span class="token operator">=</span><span class="token number">80.0</span> <span class="token parameter variable">-XshowSettings:VM</span> <span class="token parameter variable">-version</span>

VM settings:
    Max. Heap Size <span class="token punctuation">(</span>Estimated<span class="token punctuation">)</span>: <span class="token number">77</span>.38M
    Ergonomics Machine Class: server
    Using VM: OpenJDK <span class="token number">64</span>-Bit Server VM
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样，当为小内存服务器/容器设置最大堆大小时，JVM会忽略_MaxRAMPercentage_参数：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">-m</span> 100MB openjdk:8 <span class="token function">java</span> <span class="token parameter variable">-XX:MinRAMPercentage</span><span class="token operator">=</span><span class="token number">80.0</span> <span class="token parameter variable">-XX:MaxRAMPercentage</span><span class="token operator">=</span><span class="token number">50.0</span> <span class="token parameter variable">-XshowSettings:vm</span> <span class="token parameter variable">-version</span>
VM settings:
    Max. Heap Size <span class="token punctuation">(</span>Estimated<span class="token punctuation">)</span>: <span class="token number">77</span>.38M
    Ergonomics Machine Class: server
    Using VM: OpenJDK <span class="token number">64</span>-Bit Server VM
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-xx-maxrampercentage" tabindex="-1"><a class="header-anchor" href="#_4-xx-maxrampercentage"><span>4. -XX:MaxRAMPercentage</span></a></h2><p>_MaxRAMPercentage_参数允许设置在大量内存（大于200 MB）下运行的JVM的最大堆大小。</p><p>首先，让我们探索_MaxRAMPercentage_的默认值：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run openjdk:8 <span class="token function">java</span> <span class="token parameter variable">-XX:+PrintFlagsFinal</span> <span class="token parameter variable">-version</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token string">&quot;MaxRAMPercentage&quot;</span>
   double MaxRAMPercentage                      <span class="token operator">=</span> <span class="token number">25.000000</span>                            <span class="token punctuation">{</span>product<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们可以使用该参数将500 MB总内存的JVM的最大堆大小设置为60%：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">-m</span> 500MB openjdk:8 <span class="token function">java</span> <span class="token parameter variable">-XX:MaxRAMPercentage</span><span class="token operator">=</span><span class="token number">60.0</span> <span class="token parameter variable">-XshowSettings:vm</span> <span class="token parameter variable">-version</span>
VM settings:
    Max. Heap Size <span class="token punctuation">(</span>Estimated<span class="token punctuation">)</span>: <span class="token number">290</span>.00M
    Ergonomics Machine Class: server
    Using VM: OpenJDK <span class="token number">64</span>-Bit Server VM
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样，对于大内存服务器/容器，JVM会忽略_MinRAMPercentage_参数：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">-m</span> 500MB openjdk:8 <span class="token function">java</span> <span class="token parameter variable">-XX:MaxRAMPercentage</span><span class="token operator">=</span><span class="token number">60.0</span> <span class="token parameter variable">-XX:MinRAMPercentage</span><span class="token operator">=</span><span class="token number">30.0</span> <span class="token parameter variable">-XshowSettings:vm</span> <span class="token parameter variable">-version</span>
VM settings:
    Max. Heap Size <span class="token punctuation">(</span>Estimated<span class="token punctuation">)</span>: <span class="token number">290</span>.00M
    Ergonomics Machine Class: server
    Using VM: OpenJDK <span class="token number">64</span>-Bit Server VM
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-结论" tabindex="-1"><a class="header-anchor" href="#_5-结论"><span>5. 结论</span></a></h2><p>在这篇短文中，我们讨论了JVM参数_InitialRAMPercentage_、_MinRAMPercentage_和_MaxRAMPercentage_的使用，这些参数用于设置JVM将用于堆的RAM百分比。</p><p>首先，我们检查了JVM上设置的标志的默认值。然后，我们使用JVM参数来设置初始和最大堆大小。</p>`,34),p=[r];function i(c,l){return n(),e("div",null,p)}const m=a(t,[["render",i],["__file","2024-07-29-JVM Parameters InitialRAMPercentage  MinRAMPercentage  and MaxRAMPercentage.html.vue"]]),u=JSON.parse('{"path":"/posts/baeldung/2024-07-29/2024-07-29-JVM%20Parameters%20InitialRAMPercentage%20%20MinRAMPercentage%20%20and%20MaxRAMPercentage.html","title":"JVM参数：InitialRAMPercentage、MinRAMPercentage 和 MaxRAMPercentage","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["JVM参数","Java性能优化"],"tag":["InitialRAMPercentage","MinRAMPercentage","MaxRAMPercentage"],"head":[["meta",{"name":"keywords","content":"JVM内存参数，Java应用性能，CRaC项目，BellSoft容器，Alpaquita Linux，Liberica JDK"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-29/2024-07-29-JVM%20Parameters%20InitialRAMPercentage%20%20MinRAMPercentage%20%20and%20MaxRAMPercentage.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"JVM参数：InitialRAMPercentage、MinRAMPercentage 和 MaxRAMPercentage"}],["meta",{"property":"og:description","content":"JVM参数：InitialRAMPercentage、MinRAMPercentage 和 MaxRAMPercentage Java应用程序以其启动缓慢和预热时间长而闻名。OpenJDK中的CRaC（协调恢复检查点）项目可以通过创建应用程序在峰值性能时的检查点，并恢复JVM实例到该点来帮助改善这些问题。 为了充分利用这一特性，BellSoft提供了高..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-29T19:27:30.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"InitialRAMPercentage"}],["meta",{"property":"article:tag","content":"MinRAMPercentage"}],["meta",{"property":"article:tag","content":"MaxRAMPercentage"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-29T19:27:30.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JVM参数：InitialRAMPercentage、MinRAMPercentage 和 MaxRAMPercentage\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-29T19:27:30.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"JVM参数：InitialRAMPercentage、MinRAMPercentage 和 MaxRAMPercentage Java应用程序以其启动缓慢和预热时间长而闻名。OpenJDK中的CRaC（协调恢复检查点）项目可以通过创建应用程序在峰值性能时的检查点，并恢复JVM实例到该点来帮助改善这些问题。 为了充分利用这一特性，BellSoft提供了高..."},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"3. -XX:MinRAMPercentage","slug":"_3-xx-minrampercentage","link":"#_3-xx-minrampercentage","children":[]},{"level":2,"title":"4. -XX:MaxRAMPercentage","slug":"_4-xx-maxrampercentage","link":"#_4-xx-maxrampercentage","children":[]},{"level":2,"title":"5. 结论","slug":"_5-结论","link":"#_5-结论","children":[]}],"git":{"createdTime":1722281250000,"updatedTime":1722281250000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":2.98,"words":894},"filePathRelative":"posts/baeldung/2024-07-29/2024-07-29-JVM Parameters InitialRAMPercentage  MinRAMPercentage  and MaxRAMPercentage.md","localizedDate":"2022年4月1日","excerpt":"\\n<p>Java应用程序以其启动缓慢和预热时间长而闻名。OpenJDK中的CRaC（协调恢复检查点）项目可以通过创建应用程序在峰值性能时的检查点，并恢复JVM实例到该点来帮助改善这些问题。</p>\\n<p>为了充分利用这一特性，BellSoft提供了高度优化的Java应用程序容器。这些容器打包了Alpaquita Linux（一个为Java和云环境优化的全功能操作系统）和Liberica JDK（基于OpenJDK的开源Java运行时）。</p>\\n<p>这些现成的镜像使我们能够轻松地将CRaC集成到Spring Boot应用程序中：</p>\\n<p><strong>使用CRaC支持提高Java应用程序性能</strong></p>","autoDesc":true}');export{m as comp,u as data};
