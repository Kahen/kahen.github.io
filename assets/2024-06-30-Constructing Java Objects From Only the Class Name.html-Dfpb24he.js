import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-DWhzy7sT.js";const p={},e=t(`<hr><h1 id="使用类名构建java对象" tabindex="-1"><a class="header-anchor" href="#使用类名构建java对象"><span>使用类名构建Java对象</span></a></h1><p>在本教程中，我们将探讨使用类名创建Java对象的过程。Java反射API提供了多种完成此任务的方法。然而，确定当前上下文中最合适的方法可能具有挑战性。</p><p>首先，让我们从一个简单的方法开始，并逐渐改进为更有效的解决方案。</p><h3 id="创建对象使用类名" tabindex="-1"><a class="header-anchor" href="#创建对象使用类名"><span>创建对象使用类名</span></a></h3><p>让我们想象一个汽车服务中心。该中心负责维护和修理汽车，使用工作卡来分类和管理服务请求。我们可以将其表示为类图：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2023/09/Bronze.svg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>让我们看看_MaintenanceJob_和_RepairJob_类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MaintenanceJob</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getJobType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Maintenance Job&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RepairJob</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getJobType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Repair Job&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，让我们实现_BronzeJobCard_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BronzeJobCard</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Object</span> jobType<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setJobType</span><span class="token punctuation">(</span><span class="token class-name">String</span> jobType<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span>
            <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Class</span> jobTypeClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>jobType<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>jobType <span class="token operator">=</span> jobTypeClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">startJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>jobType <span class="token keyword">instanceof</span> <span class="token class-name">RepairJob</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&quot;Start Bronze &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">RepairJob</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>jobType<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getJobType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>jobType <span class="token keyword">instanceof</span> <span class="token class-name">MaintenanceJob</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&quot;Start Bronze &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">MaintenanceJob</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>jobType<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getJobType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Bronze Job Failed&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在_BronzeJobCard_中，<strong><em>Class.forName()</em> 接受类的完全限定名以返回原始工作对象</strong>。之后，<em>startJob()</em> 使用类型转换在原始对象上获取正确的工作类型。除了这些缺点外，还有处理异常的开销。</p><p>让我们看看它的实际应用：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenBronzeJobCard_whenJobTypeRepairAndMaintenance_thenStartJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span>
  <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>

    <span class="token class-name">BronzeJobCard</span> bronzeJobCard1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BronzeJobCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    bronzeJobCard1<span class="token punctuation">.</span><span class="token function">setJobType</span><span class="token punctuation">(</span><span class="token string">&quot;com.baeldung.reflection.createobject.basic.RepairJob&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Start Bronze Repair Job&quot;</span><span class="token punctuation">,</span> bronzeJobCard1<span class="token punctuation">.</span><span class="token function">startJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">BronzeJobCard</span> bronzeJobCard2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BronzeJobCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    bronzeJobCard2<span class="token punctuation">.</span><span class="token function">setJobType</span><span class="token punctuation">(</span><span class="token string">&quot;com.baeldung.reflection.createobject.basic.MaintenanceJob&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Start Bronze Maintenance Job&quot;</span><span class="token punctuation">,</span> bronzeJobCard2<span class="token punctuation">.</span><span class="token function">startJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以，上述方法启动了两个工作，一个修理工作和一个维护工作。</p><p>几个月后，服务中心决定开始油漆工作。因此，我们创建了一个新的类_PaintJob_，但_BronzeJobCard_能否适应这个新增加的工作？让我们看看：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenBronzeJobCard_whenJobTypePaint_thenFailJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span>
  <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>

    <span class="token class-name">BronzeJobCard</span> bronzeJobCard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BronzeJobCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    bronzeJobCard<span class="token punctuation">.</span><span class="token function">setJobType</span><span class="token punctuation">(</span><span class="token string">&quot;com.baeldung.reflection.createobject.basic.PaintJob&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Bronze Job Failed&quot;</span><span class="token punctuation">,</span> bronzeJobCard<span class="token punctuation">.</span><span class="token function">startJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于使用原始对象，<em>BronzeJobCard_无法处理新的_PaintJob</em>。</p><h3 id="使用原始类对象创建对象" tabindex="-1"><a class="header-anchor" href="#使用原始类对象创建对象"><span>使用原始类对象创建对象</span></a></h3><p>在这一部分，我们将升级工作卡，使用_java.lang.Class_而不是类的名称来创建工作。首先，看看类图：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2023/09/Silver.svg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>让我们看看_SilverJobCard_与_BronzeJobCard_有何不同：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SilverJobCard</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Object</span> jobType<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setJobType</span><span class="token punctuation">(</span><span class="token class-name">Class</span> jobTypeClass<span class="token punctuation">)</span> <span class="token keyword">throws</span>
      <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>jobType <span class="token operator">=</span> jobTypeClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">startJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>jobType <span class="token keyword">instanceof</span> <span class="token class-name">RepairJob</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&quot;Start Silver &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">RepairJob</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>jobType<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getJobType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>jobType <span class="token keyword">instanceof</span> <span class="token class-name">MaintenanceJob</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&quot;Start Silver &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">MaintenanceJob</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>jobType<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getJobType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Silver Job Failed&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>它不再依赖于工作类的完全限定名来创建对象</strong>。然而，原始对象和异常的问题仍然没有改变。</p><p>如下所示，它也可以处理创建工作然后启动它们：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenSilverJobCard_whenJobTypeRepairAndMaintenance_thenStartJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span>
  <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>

    <span class="token class-name">SilverJobCard</span> silverJobCard1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SilverJobCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    silverJobCard1<span class="token punctuation">.</span><span class="token function">setJobType</span><span class="token punctuation">(</span><span class="token class-name">RepairJob</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Start Silver Repair Job&quot;</span><span class="token punctuation">,</span> silverJobCard1<span class="token punctuation">.</span><span class="token function">startJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">SilverJobCard</span> silverJobCard2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SilverJobCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    silverJobCard2<span class="token punctuation">.</span><span class="token function">setJobType</span><span class="token punctuation">(</span><span class="token class-name">MaintenanceJob</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Start Silver Maintenance Job&quot;</span><span class="token punctuation">,</span> silverJobCard2<span class="token punctuation">.</span><span class="token function">startJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是，像_BronzeJobCard_一样，<em>SilverJobCard_也无法适应新的_PaintJob</em>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenSilverJobCard_whenJobTypePaint_thenFailJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span>
  <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>

    <span class="token class-name">SilverJobCard</span> silverJobCard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SilverJobCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    silverJobCard<span class="token punctuation">.</span><span class="token function">setJobType</span><span class="token punctuation">(</span><span class="token class-name">PaintJob</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Silver Job Failed&quot;</span><span class="token punctuation">,</span> silverJobCard<span class="token punctuation">.</span><span class="token function">startJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，_setJobType()<em>方法没有限制传递任何对象除了_RepairJob_和_MaintenanceJob</em>。这可能会导致开发阶段出现错误代码。</p><h3 id="使用类对象和泛型创建对象" tabindex="-1"><a class="header-anchor" href="#使用类对象和泛型创建对象"><span>使用类对象和泛型创建对象</span></a></h3><p>之前，我们看到了原始对象如何影响代码质量。在这一部分，我们将解决这个问题。但首先，看看类图：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2023/09/Gold.svg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>这次，我们摆脱了原始对象。<em>GoldJobCard</em> 采用类型参数并利用泛型在方法</strong> <em>setJobType()</em> <strong>中。</strong> 让我们检查实现：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GoldJobCard</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>\`\`\` <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">T</span> jobType<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setJobType</span><span class="token punctuation">(</span><span class="token class-name">Class</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>\`\`\` jobTypeClass<span class="token punctuation">)</span> <span class="token keyword">throws</span>
      <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>jobType <span class="token operator">=</span> jobTypeClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">startJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Start Gold &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>jobType<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">&quot;getJobType&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>jobType<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有趣的是，<em>startJob()</em> 现在正在使用反射API在对象上调用方法。最后，我们也摆脱了类型转换的需求。让我们看看它的表现：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenGoldJobCard_whenJobTypeRepairMaintenanceAndPaint_thenStartJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span>
  <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>

    <span class="token class-name">GoldJobCard</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RepairJob</span><span class="token punctuation">&gt;</span></span>\`\` goldJobCard1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GoldJobCard</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    goldJobCard1<span class="token punctuation">.</span><span class="token function">setJobType</span><span class="token punctuation">(</span><span class="token class-name">RepairJob</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Start Gold Repair Job&quot;</span><span class="token punctuation">,</span> goldJobCard1<span class="token punctuation">.</span><span class="token function">startJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">GoldJobCard</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MaintenanceJob</span><span class="token punctuation">&gt;</span></span>\`\` goldJobCard2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GoldJobCard</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    goldJobCard2<span class="token punctuation">.</span><span class="token function">setJobType</span><span class="token punctuation">(</span><span class="token class-name">MaintenanceJob</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Start Gold Maintenance Job&quot;</span><span class="token punctuation">,</span> goldJobCard2<span class="token punctuation">.</span><span class="token function">startJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">GoldJobCard</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PaintJob</span><span class="token punctuation">&gt;</span></span>\`\` goldJobCard3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GoldJobCard</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    goldJobCard3<span class="token punctuation">.</span><span class="token function">setJobType</span><span class="token punctuation">(</span><span class="token class-name">PaintJob</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Start Gold Paint Job&quot;</span><span class="token punctuation">,</span> goldJobCard3<span class="token punctuation">.</span><span class="token function">startJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，它也可以处理_PaintJob_。</p><p>但是**，我们仍然无法在开发阶段限制传入_startJob()_方法的对象**。因此，对于没有_getJobType()<em>方法的对象，如_MaintenanceJob</em>、<em>RepairJob_和_PaintJob</em>，它将会失败。</p><h3 id="使用类型参数扩展创建对象" tabindex="-1"><a class="header-anchor" href="#使用类型参数扩展创建对象"><span>使用类型参数扩展创建对象</span></a></h3><p>是时候解决前面提出的问题了。让我们从标准的类图开始：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2023/09/Platinum-1.svg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>我们引入了_Job_接口，所有_Job_对象都必须实现</strong>。此外，_PlatinumJobCard_现在只接受_Job_对象，由_T extends Job_参数指示。</p><p>实际上，这种方法非常类似于工厂设计模式。我们可以引入一个_JobCardFactory_来处理Job对象的创建。</p><p>继续，我们现在可以看看实现：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PlatinumJobCard</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Job</span><span class="token punctuation">&gt;</span></span>\` <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">T</span> jobType<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setJobType</span><span class="token punctuation">(</span><span class="token class-name">Class</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>\`\`\` jobTypeClass<span class="token punctuation">)</span> <span class="token keyword">throws</span>
      <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>jobType <span class="token operator">=</span> jobTypeClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">startJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Start Platinum &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>jobType<span class="token punctuation">.</span><span class="token function">getJobType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
\`\`\`<span class="token operator">*</span><span class="token operator">*</span>通过引入_Job_接口，我们摆脱了<span class="token function">_startJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span>_方法中的反射<span class="token constant">API</span>和类型转换<span class="token operator">*</span><span class="token operator">*</span>。幸运的是，现在_PlatinumJobCard_能够处理未来的_Job_类型，而无需对其进行任何修改。让我们看看它的实际应用：

\`\`\`java
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenPlatinumJobCard_whenJobTypeRepairMaintenanceAndPaint_thenStartJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span>
  <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>

    <span class="token class-name">PlatinumJobCard</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RepairJob</span><span class="token punctuation">&gt;</span></span>\`\` platinumJobCard1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PlatinumJobCard</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    platinumJobCard1<span class="token punctuation">.</span><span class="token function">setJobType</span><span class="token punctuation">(</span><span class="token class-name">RepairJob</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Start Platinum Repair Job&quot;</span><span class="token punctuation">,</span> platinumJobCard1<span class="token punctuation">.</span><span class="token function">startJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">PlatinumJobCard</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MaintenanceJob</span><span class="token punctuation">&gt;</span></span>\`\` platinumJobCard2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PlatinumJobCard</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    platinumJobCard2<span class="token punctuation">.</span><span class="token function">setJobType</span><span class="token punctuation">(</span><span class="token class-name">MaintenanceJob</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Start Platinum Maintenance Job&quot;</span><span class="token punctuation">,</span> platinumJobCard2<span class="token punctuation">.</span><span class="token function">startJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">PlatinumJobCard</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PaintJob</span><span class="token punctuation">&gt;</span></span>\`\` platinumJobCard3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PlatinumJobCard</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    platinumJobCard3<span class="token punctuation">.</span><span class="token function">setJobType</span><span class="token punctuation">(</span><span class="token class-name">PaintJob</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Start Platinum Paint Job&quot;</span><span class="token punctuation">,</span> platinumJobCard3<span class="token punctuation">.</span><span class="token function">startJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="结论" tabindex="-1"><a class="header-anchor" href="#结论"><span>结论</span></a></h3><p>在本文中，我们探讨了使用类名和_Class_对象创建对象的各种方式。我们展示了相关对象如何实现一个基接口。然后，可以进一步使用它来简化对象创建过程。通过这种方法，我们不需要类型转换，同时也确保使用了_Job_接口，在开发期间强制进行类型检查。</p><p>像往常一样，本文中使用的代码可以在GitHub上找到。</p><p><a href="https://www.baeldung.com/wp-content/themes/baeldung/icon/logo.svg" target="_blank" rel="noopener noreferrer">Baeldung Logo</a><a href="https://secure.gravatar.com/avatar/dc417739e22ae675b0e1f7012bbddaa5?s=50&amp;r=g" target="_blank" rel="noopener noreferrer">Baeldung Author&#39;s Gravatar</a></p><p>OK</p>`,50),o=[e];function c(l,i){return a(),s("div",null,o)}const r=n(p,[["render",c],["__file","2024-06-30-Constructing Java Objects From Only the Class Name.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-06-30/2024-06-30-Constructing%20Java%20Objects%20From%20Only%20the%20Class%20Name.html","title":"使用类名构建Java对象","lang":"zh-CN","frontmatter":{"date":"2023-09-01T00:00:00.000Z","category":["Java","Reflection"],"tag":["Java","Reflection API","Object Creation"],"head":[["meta",{"name":"keywords","content":"Java, Reflection, Object Creation"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-06-30/2024-06-30-Constructing%20Java%20Objects%20From%20Only%20the%20Class%20Name.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"使用类名构建Java对象"}],["meta",{"property":"og:description","content":"使用类名构建Java对象 在本教程中，我们将探讨使用类名创建Java对象的过程。Java反射API提供了多种完成此任务的方法。然而，确定当前上下文中最合适的方法可能具有挑战性。 首先，让我们从一个简单的方法开始，并逐渐改进为更有效的解决方案。 创建对象使用类名 让我们想象一个汽车服务中心。该中心负责维护和修理汽车，使用工作卡来分类和管理服务请求。我们可..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.baeldung.com/wp-content/uploads/2023/09/Bronze.svg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-30T16:54:54.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Reflection API"}],["meta",{"property":"article:tag","content":"Object Creation"}],["meta",{"property":"article:published_time","content":"2023-09-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-30T16:54:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用类名构建Java对象\\",\\"image\\":[\\"https://www.baeldung.com/wp-content/uploads/2023/09/Bronze.svg\\",\\"https://www.baeldung.com/wp-content/uploads/2023/09/Silver.svg\\",\\"https://www.baeldung.com/wp-content/uploads/2023/09/Gold.svg\\",\\"https://www.baeldung.com/wp-content/uploads/2023/09/Platinum-1.svg\\"],\\"datePublished\\":\\"2023-09-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-30T16:54:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"使用类名构建Java对象 在本教程中，我们将探讨使用类名创建Java对象的过程。Java反射API提供了多种完成此任务的方法。然而，确定当前上下文中最合适的方法可能具有挑战性。 首先，让我们从一个简单的方法开始，并逐渐改进为更有效的解决方案。 创建对象使用类名 让我们想象一个汽车服务中心。该中心负责维护和修理汽车，使用工作卡来分类和管理服务请求。我们可..."},"headers":[{"level":3,"title":"创建对象使用类名","slug":"创建对象使用类名","link":"#创建对象使用类名","children":[]},{"level":3,"title":"使用原始类对象创建对象","slug":"使用原始类对象创建对象","link":"#使用原始类对象创建对象","children":[]},{"level":3,"title":"使用类对象和泛型创建对象","slug":"使用类对象和泛型创建对象","link":"#使用类对象和泛型创建对象","children":[]},{"level":3,"title":"使用类型参数扩展创建对象","slug":"使用类型参数扩展创建对象","link":"#使用类型参数扩展创建对象","children":[]},{"level":3,"title":"结论","slug":"结论","link":"#结论","children":[]}],"git":{"createdTime":1719766494000,"updatedTime":1719766494000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":4.88,"words":1464},"filePathRelative":"posts/baeldung/2024-06-30/2024-06-30-Constructing Java Objects From Only the Class Name.md","localizedDate":"2023年9月1日","excerpt":"<hr>\\n<h1>使用类名构建Java对象</h1>\\n<p>在本教程中，我们将探讨使用类名创建Java对象的过程。Java反射API提供了多种完成此任务的方法。然而，确定当前上下文中最合适的方法可能具有挑战性。</p>\\n<p>首先，让我们从一个简单的方法开始，并逐渐改进为更有效的解决方案。</p>\\n<h3>创建对象使用类名</h3>\\n<p>让我们想象一个汽车服务中心。该中心负责维护和修理汽车，使用工作卡来分类和管理服务请求。我们可以将其表示为类图：</p>\\n<figure><img src=\\"https://www.baeldung.com/wp-content/uploads/2023/09/Bronze.svg\\" alt=\\"img\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>img</figcaption></figure>","autoDesc":true}');export{r as comp,d as data};
