import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-CbPcg273.js";const e={},p=t(`<h1 id="获取当前jvm中所有运行的线程" tabindex="-1"><a class="header-anchor" href="#获取当前jvm中所有运行的线程"><span>获取当前JVM中所有运行的线程</span></a></h1><p>Java应程序以其启动缓慢和预热时间长而闻名。OpenJDK中的CRaC（检查点的协调恢复）项目可以通过<strong>创建应用程序峰值性能的检查点</strong>并恢复JVM实例到该点来帮助改善这些问题。</p><p>要充分利用这一特性，BellSoft提供了高度优化的Java应用程序容器。这些容器打包了Alpaquita Linux（一个为Java和云环境优化的全功能操作系统）和Liberica JDK（基于OpenJDK的开源Java运行时）。</p><p>这些即用型镜像使我们能够轻松地在Spring Boot应用程序中<strong>集成CRaC</strong>：</p><p><strong>使用CRaC支持提高Java应用程序性能</strong></p><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p>在本简短教程中，我们将学习如何获取当前JVM中所有运行的线程，包括不是由我们的类启动的线程。</p><h2 id="_2-使用-thread-类" tabindex="-1"><a class="header-anchor" href="#_2-使用-thread-类"><span>2. 使用_Thread_类</span></a></h2><p>_Thread_类的_getAllStackTrace()<em>方法提供了所有运行线程的堆栈跟踪。它返回一个其键是_Thread_对象的_Map</em>，因此我们可以获取键集并简单地循环遍历其元素以获取有关线程的信息。</p><p>让我们使用_printf()_方法使输出更易读：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Set</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Thread</span><span class="token punctuation">&gt;</span></span>\` threads <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">getAllStackTraces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%-15s \\t %-15s \\t %-15s \\t %s\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;State&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Priority&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;isDaemon&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span> t <span class="token operator">:</span> threads<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%-15s \\t %-15s \\t %-15d \\t %s\\n&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">isDaemon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出将如下所示：</p><div class="language-plaintext line-numbers-mode" data-ext="plaintext" data-title="plaintext"><pre class="language-plaintext"><code>Name            \\t State           \\t Priority        \\t isDaemon
main            \\t RUNNABLE        \\t 5               \\t false
Signal Dispatcher \\t RUNNABLE        \\t 9               \\t true
Finalizer       \\t WAITING         \\t 8               \\t true
Reference Handler \\t WAITING         \\t 10              \\t true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如我们所见，除了运行主程序的_thread main_之外，我们还有另外三个线程。这个结果可能因不同的Java版本而异。</p><p>让我们更多地了解这些其他线程：</p><ul><li><em>Signal Dispatcher</em>：这个线程处理操作系统发送给JVM的信号。</li><li><em>Finalizer</em>：这个线程对不再需要释放系统资源的对象执行最终化。</li><li><em>Reference Handler</em>：这个线程将不再需要的对象放入队列，由_Finalizer_线程处理。</li></ul><p>如果主程序退出，所有这些线程将被终止。</p><h2 id="_3-使用apache-commons的-threadutils-类" tabindex="-1"><a class="header-anchor" href="#_3-使用apache-commons的-threadutils-类"><span>3. 使用Apache Commons的_ThreadUtils_类</span></a></h2><p>我们还可以使用Apache Commons Lang库中的_ThreadUtils_类来实现相同的目标：</p><p>让我们将依赖项添加到我们的_pom.xml_文件中：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\`
    \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>\`org.apache.commons\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\`
    \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`commons-lang3\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`
    \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\`3.14.0\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\`
\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后简单地使用_getAllThreads()_方法获取所有运行的线程：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%-15s \\t %-15s \\t %-15s \\t %s\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;State&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Priority&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;isDaemon&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span> t <span class="token operator">:</span> <span class="token class-name">ThreadUtils</span><span class="token punctuation">.</span><span class="token function">getAllThreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%-15s \\t %-15s \\t %-15d \\t %s\\n&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">isDaemon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出与上述相同。</p><h2 id="_4-结论" tabindex="-1"><a class="header-anchor" href="#_4-结论"><span>4. 结论</span></a></h2><p>总之，我们学到了两种方法来获取当前JVM中所有运行的线程。</p>`,26),o=[p];function c(l,i){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","2024-07-26-Get All Running JVM Threads.html.vue"]]),k=JSON.parse('{"path":"/posts/baeldung/2024-07-26/2024-07-26-Get%20All%20Running%20JVM%20Threads.html","title":"获取当前JVM中所有运行的线程","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","JVM"],"tag":["CRaC","Java性能","线程管理"],"head":[["meta",{"name":"keywords","content":"Java, JVM, 线程, 性能优化, CRaC"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-26/2024-07-26-Get%20All%20Running%20JVM%20Threads.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"获取当前JVM中所有运行的线程"}],["meta",{"property":"og:description","content":"获取当前JVM中所有运行的线程 Java应程序以其启动缓慢和预热时间长而闻名。OpenJDK中的CRaC（检查点的协调恢复）项目可以通过创建应用程序峰值性能的检查点并恢复JVM实例到该点来帮助改善这些问题。 要充分利用这一特性，BellSoft提供了高度优化的Java应用程序容器。这些容器打包了Alpaquita Linux（一个为Java和云环境优化..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-26T04:54:09.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"CRaC"}],["meta",{"property":"article:tag","content":"Java性能"}],["meta",{"property":"article:tag","content":"线程管理"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-26T04:54:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"获取当前JVM中所有运行的线程\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-26T04:54:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"获取当前JVM中所有运行的线程 Java应程序以其启动缓慢和预热时间长而闻名。OpenJDK中的CRaC（检查点的协调恢复）项目可以通过创建应用程序峰值性能的检查点并恢复JVM实例到该点来帮助改善这些问题。 要充分利用这一特性，BellSoft提供了高度优化的Java应用程序容器。这些容器打包了Alpaquita Linux（一个为Java和云环境优化..."},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. 使用_Thread_类","slug":"_2-使用-thread-类","link":"#_2-使用-thread-类","children":[]},{"level":2,"title":"3. 使用Apache Commons的_ThreadUtils_类","slug":"_3-使用apache-commons的-threadutils-类","link":"#_3-使用apache-commons的-threadutils-类","children":[]},{"level":2,"title":"4. 结论","slug":"_4-结论","link":"#_4-结论","children":[]}],"git":{"createdTime":1721969649000,"updatedTime":1721969649000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":2.38,"words":714},"filePathRelative":"posts/baeldung/2024-07-26/2024-07-26-Get All Running JVM Threads.md","localizedDate":"2022年4月1日","excerpt":"\\n<p>Java应程序以其启动缓慢和预热时间长而闻名。OpenJDK中的CRaC（检查点的协调恢复）项目可以通过<strong>创建应用程序峰值性能的检查点</strong>并恢复JVM实例到该点来帮助改善这些问题。</p>\\n<p>要充分利用这一特性，BellSoft提供了高度优化的Java应用程序容器。这些容器打包了Alpaquita Linux（一个为Java和云环境优化的全功能操作系统）和Liberica JDK（基于OpenJDK的开源Java运行时）。</p>\\n<p>这些即用型镜像使我们能够轻松地在Spring Boot应用程序中<strong>集成CRaC</strong>：</p>","autoDesc":true}');export{d as comp,k as data};
