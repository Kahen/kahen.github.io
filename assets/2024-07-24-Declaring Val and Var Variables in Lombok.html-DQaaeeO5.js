import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-D0vunQyr.js";const p={},e=t('<hr><h1 id="lombok中声明val和var变量" tabindex="-1"><a class="header-anchor" href="#lombok中声明val和var变量"><span>Lombok中声明val和var变量</span></a></h1><h2 id="_1-引言" tabindex="-1"><a class="header-anchor" href="#_1-引言"><span>1. 引言</span></a></h2><p>项目Lombok帮助我们减少Java源代码中重复任务的冗余。在本教程中，我们将解释如何通过在Lombok中声明本地_val_和_var_变量来推断类型。</p><p><strong>Lombok提供了智能功能，以避免样板代码</strong>。例如，它隐藏了领域模型对象的getter和setter。Builder注解是另一个有趣的功能，它帮助正确实现Builder模式。</p><p>在以下部分中，我们将专注于<strong>Lombok定义不指定类型的局部变量的功能</strong>。我们将使用Lombok _val_和_var_类型来声明变量，并避免在源代码中添加额外的行。</p><p><em>val_是在版本0.10中引入的。使用_val_时，Lombok将变量声明为_final</em>，并在初始化后自动推断类型。因此，初始化表达式是必需的。</p><p><em>var_是在版本1.16.20中引入的。与_val_一样，它也从初始化表达式中推断类型，但有一个很大的不同，即变量不声明为_final</em>。因此，允许进一步赋值，但它们应符合声明时指定的类型。</p><h2 id="_3-在lombok中实现-val-和-var-示例" tabindex="-1"><a class="header-anchor" href="#_3-在lombok中实现-val-和-var-示例"><span>3. 在Lombok中实现_val_和_var_示例</span></a></h2><h3 id="_3-1-依赖项" tabindex="-1"><a class="header-anchor" href="#_3-1-依赖项"><span>3.1. 依赖项</span></a></h3><p>为了实现示例，我们将简单地将Lombok依赖项添加到我们的_pom.xml_中：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`org.projectlombok`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`lombok`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`1.18.30`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>`provided`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以在这里检查最新可用的版本。</p><h3 id="_3-2-val-变量声明" tabindex="-1"><a class="header-anchor" href="#_3-2-val-变量声明"><span>3.2. _val_变量声明</span></a></h3><p>首先，我们将从Lombok导入_val_类型：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>val</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其次，我们将使用_val_声明不同的局部变量。例如，我们可以从简单的_String_开始：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    val name <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Name: &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> name<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Lombok自动生成以下普通Java代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> name <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后，让我们创建一个_Integer_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    val age <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Age: &quot;</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> age<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如我们所看到的，Lombok生成了正确的类型：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Integer</span> age <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们也可以声明一个_List_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    val agenda <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>``````````<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    agenda<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;Day 1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Agenda: &quot;</span> <span class="token operator">+</span> agenda<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> agenda<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Lombok不仅推断出_List_，还推断出其中包含的类型：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>ArrayList</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">&gt;</span></span>``` agenda <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>``````````<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在，让我们创建一个_Map_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token function">mapOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    val books <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    books<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;Book 1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    books<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;Book 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Books:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span>val entry <span class="token operator">:</span> books<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;- %d. %s\\n&quot;</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> books<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次，正确的类型被推断出来：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>HashMap</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Integer</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">&gt;</span></span>`` books <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// ...</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Map<span class="token punctuation">.</span>Entry</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Integer</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">&gt;</span></span>`` entry <span class="token operator">:</span> books<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>我们可以看到Lombok将正确的类型声明为_final_</strong>。因此，如果我们尝试修改名称，构建将因_val_的最终性质而失败：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>name <span class="token operator">=</span> <span class="token string">&quot;newName&quot;</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span> cannot assign a value <span class="token keyword">to</span> <span class="token keyword">final</span> variable name\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们将运行一些测试以验证Lombok生成了正确的类型：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ValExample</span> val <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ValExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">assertThat</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">assertThat</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">assertThat</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span><span class="token function">listOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">assertThat</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span><span class="token function">mapOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token class-name">HashMap</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们可以看到控制台输出具有特定类型的对象：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Name</span><span class="token operator">:</span> name\n<span class="token class-name">Age</span><span class="token operator">:</span> <span class="token number">30</span>\n<span class="token class-name">Agenda</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token class-name">Day</span> <span class="token number">1</span><span class="token punctuation">]</span>\n<span class="token class-name">Books</span><span class="token operator">:</span>\n<span class="token operator">-</span> <span class="token number">1.</span> <span class="token class-name">Book</span> <span class="token number">1</span>\n<span class="token operator">-</span> <span class="token number">2.</span> <span class="token class-name">Book</span> <span class="token number">2</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-var-变量声明" tabindex="-1"><a class="header-anchor" href="#_3-3-var-变量声明"><span>3.3. _var_变量声明</span></a></h3><p><em>var_声明与_val_非常相似，特别是变量不是_final</em>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>var</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">;</span>\nname <span class="token operator">=</span> <span class="token string">&quot;newName&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nage <span class="token operator">=</span> <span class="token number">35</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> agenda <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>``````````<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nagenda<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;Day 1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nagenda <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>``````````<span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;Day 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> books <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nbooks<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;Book 1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nbooks<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;Book 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nbooks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nbooks<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;Book 3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nbooks<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&quot;Book 4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们看看生成的普通Java代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> agenda <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>``````````<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> books <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是因为Java 10支持_var_声明，使用初始化表达式推断局部变量的类型。然而，我们在使用它时需要考虑一些限制。</p><p>由于声明的变量不是_final_，我们可以进行进一步的赋值。然而，<strong>对象必须符合从初始化表达式中推断出的适当类型</strong>。</p><p>如果我们尝试分配一个不同的类型，我们将在编译期间得到一个错误：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>books <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>``````````<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">[</span><span class="token number">37</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">]</span> incompatible types<span class="token operator">:</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>ArrayList</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">&gt;</span></span>``` cannot be converted <span class="token keyword">to</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Integer</span><span class="token punctuation">,</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">&gt;</span></span>`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们稍微更改测试并检查新的赋值：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">VarExample</span> varExample <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VarExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">assertThat</span><span class="token punctuation">(</span>varExample<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;newName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">assertThat</span><span class="token punctuation">(</span>varExample<span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">assertThat</span><span class="token punctuation">(</span><span class="token string">&quot;Day 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isIn</span><span class="token punctuation">(</span>varExample<span class="token punctuation">.</span><span class="token function">listOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">assertThat</span><span class="token punctuation">(</span>varExample<span class="token punctuation">.</span><span class="token function">mapOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">containsValue</span><span class="token punctuation">(</span><span class="token string">&quot;Book 3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，控制台输出也与前一节不同：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Name</span><span class="token operator">:</span> newName\n<span class="token class-name">Age</span><span class="token operator">:</span> <span class="token number">35</span>\n<span class="token class-name">Agenda</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token class-name">Day</span> <span class="token number">2</span><span class="token punctuation">]</span>\n<span class="token class-name">Books</span><span class="token operator">:</span>\n<span class="token operator">-</span> <span class="token number">3.</span> <span class="token class-name">Book</span> <span class="token number">3</span>\n<span class="token operator">-</span> <span class="token number">4.</span> <span class="token class-name">Book</span> <span class="token number">4</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-复合类型" tabindex="-1"><a class="header-anchor" href="#_4-复合类型"><span>4. 复合类型</span></a></h2><p>有些情况下，我们需要使用复合类型作为初始化表达式：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>val compound <span class="token operator">=</span> isArray <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>``````````<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>``````````<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在上面的代码片段中，赋值取决于布尔值，并推断出最常见的超类。</p><p>Lombok将类型分配为_AbstractCollection_，正如普通代码所示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>AbstractCollection</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">&gt;</span></span>``` compound <span class="token operator">=</span> isArray <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>``````````<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>``````````<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在有歧义的情况下，例如与_null_值一起，推断出的类是_Object_。</p><h2 id="_5-配置键" tabindex="-1"><a class="header-anchor" href="#_5-配置键"><span>5. 配置键</span></a></h2><p>Lombok允许在整个项目中通过一个文件配置功能。因此，可以将项目的指令和设置集中在一个地方。</p><p>有时，作为我们项目开发标准的强制执行的一部分，我们可能希望限制Lombok的_var_和_val_的使用。如果有人无意中使用了它们，我们可能希望在编译期间生成警告。</p><p>对于这些情况，<strong>我们可以通过在_lombok.config_文件中包含以下内容，将任何_var_或_val_的使用标记为警告或错误</strong>：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">lombok.var.flagUsage</span> <span class="token punctuation">=</span> <span class="token value attr-value">error</span>\n<span class="token key attr-name">lombok.val.flagUsage</span> <span class="token punctuation">=</span> <span class="token value attr-value">warning</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将在整个项目中收到关于非法使用_var_的错误：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token class-name">Use</span> of <span class="token keyword">var</span> is flagged according <span class="token keyword">to</span> <span class="token namespace">lombok</span> configuration<span class="token punctuation">.</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>同样，我们将收到关于使用_val_的警告消息：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ValExample</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span> warning<span class="token operator">:</span> <span class="token class-name">Use</span> of val is flagged according <span class="token keyword">to</span> <span class="token namespace">lombok</span> configuration<span class="token punctuation">.</span>\nval age <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-结论" tabindex="-1"><a class="header-anchor" href="#_6-结论"><span>6. 结论</span></a></h2><p>在本文中，我们展示了如何使用Lombok定义不指定类型的局部变量。此外，我们学习了声明_val_和_var_变量的复杂性。</p><p>我们还演示了如何使用复合类型进行局部变量的泛型声明。</p><p>一如既往，代码可以在GitHub上找到。</p>',71),o=[e];function c(l,u){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","2024-07-24-Declaring Val and Var Variables in Lombok.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-24/2024-07-24-Declaring%20Val%20and%20Var%20Variables%20in%20Lombok.html","title":"Lombok中声明val和var变量","lang":"zh-CN","frontmatter":{"date":"2024-07-24T00:00:00.000Z","category":["Java","Lombok"],"tag":["Lombok","val","var"],"head":[["meta",{"name":"keywords","content":"Java, Lombok, val, var"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-24/2024-07-24-Declaring%20Val%20and%20Var%20Variables%20in%20Lombok.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Lombok中声明val和var变量"}],["meta",{"property":"og:description","content":"Lombok中声明val和var变量 1. 引言 项目Lombok帮助我们减少Java源代码中重复任务的冗余。在本教程中，我们将解释如何通过在Lombok中声明本地_val_和_var_变量来推断类型。 Lombok提供了智能功能，以避免样板代码。例如，它隐藏了领域模型对象的getter和setter。Builder注解是另一个有趣的功能，它帮助正确实..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-24T05:49:53.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Lombok"}],["meta",{"property":"article:tag","content":"val"}],["meta",{"property":"article:tag","content":"var"}],["meta",{"property":"article:published_time","content":"2024-07-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-24T05:49:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Lombok中声明val和var变量\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-24T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-24T05:49:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Lombok中声明val和var变量 1. 引言 项目Lombok帮助我们减少Java源代码中重复任务的冗余。在本教程中，我们将解释如何通过在Lombok中声明本地_val_和_var_变量来推断类型。 Lombok提供了智能功能，以避免样板代码。例如，它隐藏了领域模型对象的getter和setter。Builder注解是另一个有趣的功能，它帮助正确实..."},"headers":[{"level":2,"title":"1. 引言","slug":"_1-引言","link":"#_1-引言","children":[]},{"level":2,"title":"3. 在Lombok中实现_val_和_var_示例","slug":"_3-在lombok中实现-val-和-var-示例","link":"#_3-在lombok中实现-val-和-var-示例","children":[{"level":3,"title":"3.1. 依赖项","slug":"_3-1-依赖项","link":"#_3-1-依赖项","children":[]},{"level":3,"title":"3.2. _val_变量声明","slug":"_3-2-val-变量声明","link":"#_3-2-val-变量声明","children":[]},{"level":3,"title":"3.3. _var_变量声明","slug":"_3-3-var-变量声明","link":"#_3-3-var-变量声明","children":[]}]},{"level":2,"title":"4. 复合类型","slug":"_4-复合类型","link":"#_4-复合类型","children":[]},{"level":2,"title":"5. 配置键","slug":"_5-配置键","link":"#_5-配置键","children":[]},{"level":2,"title":"6. 结论","slug":"_6-结论","link":"#_6-结论","children":[]}],"git":{"createdTime":1721800193000,"updatedTime":1721800193000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":5.02,"words":1507},"filePathRelative":"posts/baeldung/2024-07-24/2024-07-24-Declaring Val and Var Variables in Lombok.md","localizedDate":"2024年7月24日","excerpt":"<hr>\\n<h1>Lombok中声明val和var变量</h1>\\n<h2>1. 引言</h2>\\n<p>项目Lombok帮助我们减少Java源代码中重复任务的冗余。在本教程中，我们将解释如何通过在Lombok中声明本地_val_和_var_变量来推断类型。</p>\\n<p><strong>Lombok提供了智能功能，以避免样板代码</strong>。例如，它隐藏了领域模型对象的getter和setter。Builder注解是另一个有趣的功能，它帮助正确实现Builder模式。</p>\\n<p>在以下部分中，我们将专注于<strong>Lombok定义不指定类型的局部变量的功能</strong>。我们将使用Lombok _val_和_var_类型来声明变量，并避免在源代码中添加额外的行。</p>","autoDesc":true}');export{r as comp,d as data};
