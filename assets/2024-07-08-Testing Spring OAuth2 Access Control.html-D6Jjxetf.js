import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-CbPcg273.js";const e={},p=t(`<h1 id="测试spring-oauth2访问控制-baeldung" tabindex="-1"><a class="header-anchor" href="#测试spring-oauth2访问控制-baeldung"><span>测试Spring OAuth2访问控制 | Baeldung</span></a></h1><p>如果您正在处理Spring Security（特别是OAuth）实现，一定要查看《学习Spring安全》课程。</p><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p>在本教程中，我们将探讨在Spring应用程序中使用模拟身份测试OAuth2安全下的访问控制规则的选项。</p><p>我们将使用_MockMvc_请求后处理器、_WebTestClient_变异器以及来自_spring-security-test_和_spring-addons_的测试注解。</p><h2 id="_2-为什么使用spring-addons" tabindex="-1"><a class="header-anchor" href="#_2-为什么使用spring-addons"><span>2. 为什么使用Spring-Addons？</span></a></h2><p>在OAuth2领域，_spring-security-test_仅提供了需要分别在_MockMvc_或_WebTestClient_请求上下文中的请求后处理器和变异器。这对于_Controller_来说可能很好，但测试具有@Service或@Repository等方法安全性（@PreAuthorize、@PostFilter等）是一个问题。</p><p><strong>使用@WithJwt或@WithOidcLogin等注解，我们可以在单元测试中模拟安全上下文，无论是在servlet还是响应式应用程序中的任何@Component。</strong> 这就是我们在某些测试中使用_spring-addons-oauth2-test_的原因：它为我们提供了Spring OAuth2 _Authentication_实现的大多数注解。</p><h2 id="_3-我们将测试什么" tabindex="-1"><a class="header-anchor" href="#_3-我们将测试什么"><span>3. 我们将测试什么？</span></a></h2><p>配套的GitHub存储库包含两个资源服务器，它们共享以下功能：</p><ul><li><strong>使用JWT解码器进行保护</strong>（而不是不透明的令牌内省）</li><li><strong>需要_ROLE_AUTHORIZED_PERSONNEL_权限才能访问/secured-route和/secured-method</strong></li><li>**如果认证缺失或无效（过期、错误的发行者等）则返回_401_，如果访问被拒绝（缺少角色）则返回_403_</li><li>使用Java配置定义访问控制（对于servlet和响应式应用程序，分别使用_requestMatcher_和_pathMatcher_）和方法安全性</li><li>使用安全上下文中的Authentication数据构建响应有效载荷</li></ul><p>为了说明servlet和响应式测试API之间的轻微差异，一个是servlet（浏览代码），第二个是响应式应用程序（浏览代码）。</p><p>在本文中，我们将重点关注在单元和集成测试中测试访问控制规则，并<strong>断言响应的HTTP状态与根据模拟用户身份的预期相匹配</strong>，或者在单元测试其他使用@PreAuthorize、@PostFilter等保护的@Component，如@Service或@Repository时抛出异常。</p><p><strong>所有测试在没有授权服务器的情况下通过</strong>，但如果我们想启动资源服务器并在测试中使用Postman等工具进行查询，则需要一个运行中的授权服务器。提供了一个Docker Compose文件，用于快速启动本地Keycloak实例：</p><ul><li>管理控制台可在：http://localhost:8080/admin/master/console/#/baeldung</li><li>管理账户是_admin / admin_</li><li>已经创建了一个_baeldung_领域，其中包含一个机密客户端（<em>baeldung_confidential / secret</em>）和两个用户（<em>authorized_和_forbidden</em>，两者的秘密都是_secret_）</li></ul><h2 id="_4-使用模拟认证的单元测试" tabindex="-1"><a class="header-anchor" href="#_4-使用模拟认证的单元测试"><span>4. 使用模拟认证的单元测试</span></a></h2><p>通过“单元测试”，我们指的是在隔离任何其他依赖项的情况下测试单个@Component（我们将模拟）。被测试的@Component可以是@WebMvcTest或@WebFluxTest中的_Controller_，或者在简单的JUnit测试中的任何其他受保护的@Service、@Repository等。</p><p><strong>_MockMvc_和_WebTestClient_忽略_Authorization_头</strong>，没有必要提供有效的访问令牌。当然，我们可以实例化或模拟任何认证实现，并在每个测试开始时手动创建安全上下文，但这太繁琐了。相反，<strong>我们将使用_spring-security-test_ _MockMvc_请求后处理器、_WebTestClient_变异器，或_spring-addons_注解来用我们选择的模拟_Authentication_实例填充测试安全上下文</strong>。</p><p>我们将使用@WithMockUser只是为了看到它构建了一个_UsernamePasswordAuthenticationToken_实例，这通常是一个问题，因为OAuth2运行时配置在安全上下文中放置了其他类型的_Authentication_：</p><ul><li>资源服务器使用JWT解码器的_JwtAuthenticationToken_</li><li>使用访问令牌内省（<em>opaqueToken</em>）的资源服务器的_BearerTokenAuthentication_</li><li>使用_oauth2Login_的客户端的_OAuth2AuthenticationToken_</li><li>如果我们决定在自定义认证转换器中返回与Spring默认的_Authentication_不同的任何_Authentication_实例。因此，技术上，OAuth2认证转换器可以返回一个_UsernamePasswordAuthenticationToken_实例，并在测试中使用@WithMockUser，但这是一个非常不自然的选择，我们这里不会使用。</li></ul><h3 id="_4-1-重要说明" tabindex="-1"><a class="header-anchor" href="#_4-1-重要说明"><span>4.1. 重要说明</span></a></h3><p>_MockMvc_预处理器和_WebTestClient_变异器不使用安全配置中定义的bean来构建测试_Authentication_实例。因此，<strong>使用_SecurityMockMvcRequestPostProcessors.jwt()_或_SecurityMockServerConfigurers.mockJwt()_定义OAuth2声明不会有任何影响，认证名称和权限。</strong> 我们必须自己使用专用方法设置名称和权限。</p><p>相比之下，spring-addons注解背后的工厂会扫描测试上下文中的认证转换器，并在找到时使用它。因此，<strong>使用@WithJwt时，重要的是将任何自定义_JwtAuthenticationConverter_作为bean公开</strong>（而不是仅仅作为安全配置中的lambda内联）：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableMethodSecurity</span>
<span class="token annotation punctuation">@EnableWebSecurity</span>
<span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConf</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token class-name">SecurityFilterChain</span> <span class="token function">filterChain</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">,</span> <span class="token class-name">Converter</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Jwt</span><span class="token punctuation">,</span> <span class="token class-name">AbstractAuthenticationToken</span><span class="token punctuation">&gt;</span></span>\` authenticationConverter<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        http<span class="token punctuation">.</span><span class="token function">oauth2ResourceServer</span><span class="token punctuation">(</span>resourceServer <span class="token operator">-&gt;</span> resourceServer<span class="token punctuation">.</span><span class="token function">jwt</span><span class="token punctuation">(</span>jwtResourceServer <span class="token operator">-&gt;</span> jwtResourceServer<span class="token punctuation">.</span><span class="token function">jwtAuthenticationConverter</span><span class="token punctuation">(</span>authenticationConverter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token class-name">JwtAuthenticationConverter</span> <span class="token function">authenticationConverter</span><span class="token punctuation">(</span><span class="token class-name">Converter</span>\`<span class="token operator">&lt;</span><span class="token class-name">Jwt</span><span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GrantedAuthority</span><span class="token punctuation">&gt;</span></span>\`<span class="token operator">&gt;</span> authoritiesConverter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token keyword">var</span> authenticationConverter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JwtAuthenticationConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        authenticationConverter<span class="token punctuation">.</span><span class="token function">setPrincipalClaimName</span><span class="token punctuation">(</span><span class="token class-name">StandardClaimNames</span><span class="token punctuation">.</span><span class="token constant">PREFERRED_USERNAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        authenticationConverter<span class="token punctuation">.</span><span class="token function">setJwtGrantedAuthoritiesConverter</span><span class="token punctuation">(</span>authoritiesConverter<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> authenticationConverter<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>值得注意的是，认证转换器被公开为_@Bean_，明确注入到安全过滤器链中。这样，@WithJwt背后的工厂就可以使用它从声明中构建_Authentication_，就像在运行时使用真实令牌一样。</p><p>还要注意，在高级情况下，如果认证转换器返回的不是_JwtAuthenticationToken_（或在资源服务器使用令牌内省的情况下是_BearerTokenAuthentication_），则只有Spring addons的测试注解会构建预期类型的_Authentication_。</p><h3 id="_4-2-测试设置" tabindex="-1"><a class="header-anchor" href="#_4-2-测试设置"><span>4.2. 测试设置</span></a></h3><p><strong>对于_Controller_单元测试，我们应该用_@WebMvcTest_装饰测试类，用于servlet应用程序，用_@WebFluxTest_用于响应式应用程序。</strong></p><p>Spring为我们自动装配了_MockMvc_或_WebTestClient_，并且由于我们正在编写控制器单元测试，我们将模拟_MessageService_。</p><p>这是一个servlet应用程序中的空_@Controller_单元测试的样子：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebMvcTest</span><span class="token punctuation">(</span>controllers <span class="token operator">=</span> <span class="token class-name">GreetingController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">GreetingControllerTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@MockBean</span>
    <span class="token class-name">MessageService</span> messageService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">MockMvc</span> mockMvc<span class="token punctuation">;</span>

    <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是一个响应式应用程序中的空_@Controller_单元测试的样子：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebFluxTest</span><span class="token punctuation">(</span>controllers <span class="token operator">=</span> <span class="token class-name">GreetingController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">GreetingControllerTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">AnonymousAuthenticationToken</span> <span class="token constant">ANONYMOUS</span> <span class="token operator">=</span>
      <span class="token keyword">new</span> <span class="token class-name">AnonymousAuthenticationToken</span><span class="token punctuation">(</span><span class="token string">&quot;anonymous&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;anonymousUser&quot;</span><span class="token punctuation">,</span>
      <span class="token class-name">AuthorityUtils</span><span class="token punctuation">.</span><span class="token function">createAuthorityList</span><span class="token punctuation">(</span><span class="token string">&quot;ROLE_ANONYMOUS&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@MockBean</span>
    <span class="token class-name">MessageService</span> messageService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">WebTestClient</span> webTestClient<span class="token punctuation">;</span>

    <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，让我们看看如何断言HTTP状态码是否符合我们之前设置的规范。</p><h3 id="_4-3-使用-mockmvc-后处理器进行单元测试" tabindex="-1"><a class="header-anchor" href="#_4-3-使用-mockmvc-后处理器进行单元测试"><span>4.3. 使用_MockMvc_后处理器进行单元测试</span></a></h3><p><strong>为了在测试安全上下文中填充_JwtAuthenticationToken_</strong>，这是JWT解码器的资源服务器的默认_Authentication_类型，<strong>我们将使用_MockMvc_请求的_jwt_后处理器：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>request<span class="token punctuation">.</span></span><span class="token class-name">SecurityMockMvcRequestPostProcessors</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>让我们看几个使用_MockMvc_的请求示例和对响应状态的断言，这取决于端点和模拟认证：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenRequestIsAnonymous_whenGetGreet_thenUnauthorized</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/greet&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token class-name">SecurityMockMvcRequestPostProcessors</span><span class="token punctuation">.</span><span class="token function">anonymous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isUnauthorized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面，我们确保匿名请求无法获得问候，并且正确返回了_401_。</p><p>现在让我们看看请求是如何根据端点的安全规则和分配给测试_JwtAuthenticationToken_的权限回答200 Ok或403 Forbidden：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenUserIsGrantedWithRoleAuthorizedPersonnel_whenGetSecuredRoute_thenOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> secret <span class="token operator">=</span> <span class="token string">&quot;Secret!&quot;</span><span class="token punctuation">;</span>
    <span class="token function">when</span><span class="token punctuation">(</span>messageService<span class="token punctuation">.</span><span class="token function">getSecret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span>secret<span class="token punctuation">)</span><span class="token punctuation">;</span>

    mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/secured-route&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token class-name">SecurityMockMvcRequestPostProcessors</span><span class="token punctuation">.</span><span class="token function">jwt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">authorities</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleGrantedAuthority</span><span class="token punctuation">(</span><span class="token string">&quot;ROLE_AUTHORIZED_PERSONNEL&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span>secret<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenUserIsNotGrantedWithRoleAuthorizedPersonnel_whenGetSecuredRoute_thenForbidden</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/secured-route&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token class-name">SecurityMockMvcRequestProcessors</span><span class="token punctuation">.</span><span class="token function">jwt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">authorities</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleGrantedAuthority</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isForbidden</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4-使用-webtestclient-变异器进行单元测试" tabindex="-1"><a class="header-anchor" href="#_4-4-使用-webtestclient-变异器进行单元测试"><span>4.4. 使用_WebTestClient_变异器进行单元测试</span></a></h3><p>在响应式资源服务器中，安全上下文中的_Authentication_类型与servlet中的相同：<em>JwtAuthenticationToken</em>。因此，我们将使用_WebTestClient_的_mockJwt_变异器：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">SecurityMockServerConfigurers</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>与_MockMvc_后处理器不同，没有匿名_WebTestClient_变异器。然而，我们可以很容易地定义一个匿名_Authentication_实例，并使用通用的_mockAuthentication_变异器：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">AnonymousAuthenticationToken</span> <span class="token constant">ANONYMOUS</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnonymousAuthenticationToken</span><span class="token punctuation">(</span>
    <span class="token string">&quot;anonymous&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;anonymousUser&quot;</span><span class="token punctuation">,</span> <span class="token class-name">AuthorityUtils</span><span class="token punctuation">.</span><span class="token function">createAuthorityList</span><span class="token punctuation">(</span><span class="token string">&quot;ROLE_ANONYMOUS&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenRequestIsAnonymous_whenGetGreet_thenUnauthorized</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    webTestClient<span class="token punctuation">.</span><span class="token function">mutateWith</span><span class="token punctuation">(</span><span class="token class-name">SecurityMockServerConfigurers</span><span class="token punctuation">.</span><span class="token function">mockAuthentication</span><span class="token punctuation">(</span><span class="token constant">ANONYMOUS</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">&quot;/greet&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">expectStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">isUnauthorized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenUserIsAuthenticated_whenGetGreet_thenOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> greeting <span class="token operator">=</span> <span class="token string">&quot;Whatever the service returns&quot;</span><span class="token punctuation">;</span>
    <span class="token function">when</span><span class="token punctuation">(</span>messageService<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>greeting<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    webTestClient<span class="token punctuation">.</span><span class="token function">mutateWith</span><span class="token punctuation">(</span><span class="token class-name">SecurityMockServerConfigurers</span><span class="token punctuation">.</span><span class="token function">mockJwt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authorities</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>
      <span class="token keyword">new</span> <span class="token class-name">SimpleGrantedAuthority</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token keyword">new</span> <span class="token class-name">SimpleGrantedAuthority</span><span class="token punctuation">(</span><span class="token string">&quot;ROLE_AUTHORIZED_PERSONNEL&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">jwt</span><span class="token punctuation">(</span>jwt <span class="token operator">-&gt;</span> jwt<span class="token punctuation">.</span><span class="token function">claim</span><span class="token punctuation">(</span><span class="token class-name">StandardClaimNames</span><span class="token punctuation">.</span><span class="token constant">PREFERRED_USERNAME</span><span class="token punctuation">,</span> <span class="token string">&quot;ch4mpy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">&quot;/greet&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">expectStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">expectBody</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span>greeting<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">verify</span><span class="token punctuation">(</span>messageService<span class="token punctuation">,</span> <span class="token function">times</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenUserIsNotGrantedWithRoleAuthorizedPersonnel_whenGetSecuredRoute_thenForbidden</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    webTestClient<span class="token punctuation">.</span><span class="token function">mutateWith</span><span class="token punctuation">(</span><span class="token function">mockJwt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authorities</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleGrantedAuthority</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">&quot;/secured-route&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">expectStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">isForbidden</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-5-使用-spring-addons-注解进行控制器单元测试" tabindex="-1"><a class="header-anchor" href="#_4-5-使用-spring-addons-注解进行控制器单元测试"><span>4.5. 使用_Spring-Addons_注解进行控制器单元测试</span></a></h3><p>我们可以在servlet和响应式应用程序中以完全相同的方式使用测试注解。</p><p>我们所需要做的就是添加对_spring-addons-oauth2-test_的依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\`
    \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>\`com.c4-soft.springaddons\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\`
    \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`spring-addons-oauth2-test\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`
    \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\`7.6.12\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\`
    \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>\`test\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>\`
\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个库带有很多注解，涵盖了以下用例：</p><ul><li>_@WithMockAuthentication_在测试基于角色的访问控制时通常足够用：它旨在接受权限作为参数，但也接受用户名和模拟_Authentication_和_Principal_的实现类型。</li><li><em>@WithJwt_用于测试具有JWT解码器的资源服务器。它依赖于认证工厂，该工厂从安全配置中选择_Converter<code>&lt;Jwt, ? extends AbstractAthenticationToken&gt;</code></em>（或响应式应用程序中的_Converter<code>&lt;Jwt, ? extends Mono&lt;? extends AbstractAuthenticationToken&gt;</code>&gt;_），以及测试类路径上的JSON有效载荷。这为您提供了对声明的完全控制，并提供了与运行时相同的JWT有效载荷相同的认证实例。</li><li><em>@WithOpaqueToken_的工作方式与</em>@WithJwt_相同，但适用于具有令牌内省的资源服务器：它依赖于选择_OpaqueTokenAuthenticationConverter_（或_ ReactiveOpaqueTokenAuthenticationConverter_）的工厂。</li><li><em>@WithOAuth2Login_和</em>@WithOidcLogin_将是我们测试OAuth2客户端登录时的选择</li></ul><p>在进行测试之前，我们将定义一些JSON文件作为测试资源。它的目的是模拟代表性用户（角色或角色）的访问令牌的JSON有效载荷（或内省响应）。我们可以使用像https://jwt.io这样的工具复制真实令牌的负载。</p><p>Ch4mpy将是我们具有_AUTHORIZED_PERSONNEL_角色的测试用户：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;iss&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://localhost:8443/realms/master&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;sub&quot;</span><span class="token operator">:</span> <span class="token string">&quot;281c4558-550c-413b-9972-2d2e5bde6b9b&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;iat&quot;</span><span class="token operator">:</span> <span class="token number">1695992542</span><span class="token punctuation">,</span>
  <span class="token property">&quot;exp&quot;</span><span class="token operator">:</span> <span class="token number">1695992642</span><span class="token punctuation">,</span>
  <span class="token property">&quot;preferred_username&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ch4mpy&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;realm_access&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;roles&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;ROLE_AUTHORIZED_PERSONNEL&quot;</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;email&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ch4mp@c4-soft.com&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;scope&quot;</span><span class="token operator">:</span> <span class="token string">&quot;openid email&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将定义第二个没有_AUTHORIZED_PERSONNEL_角色的用户：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;iss&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://localhost:8443/realms/master&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;sub&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2d2e5bde6b9b-550c-413b-9972-281c4558&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;iat&quot;</span><span class="token operator">:</span> <span class="token number">1695992551</span><span class="token punctuation">,</span>
  <span class="token property">&quot;exp&quot;</span><span class="token operator">:</span> <span class="token number">1695992651</span><span class="token punctuation">,</span>
  <span class="token property">&quot;preferred_username&quot;</span><span class="token operator">:</span> <span class="token string">&quot;tonton-pirate&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;realm_access&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;roles&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">&quot;uncle&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;skipper&quot;</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;email&quot;</span><span class="token operator">:</span> <span class="token string">&quot;tonton-pirate@c4-soft.com&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;scope&quot;</span><span class="token operator">:</span> <span class="token string">&quot;openid email&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们可以将身份模拟从测试主体中移除，改为用注解装饰测试方法。为了演示目的，我们将使用_@WithMockAuthentication_和_@WithJwt_，但实际测试中一个就足够了。我们可能选择前者当我们只需要定义权限或名称时，选择后者当我们需要控制许多声明时：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token annotation punctuation">@WithAnonymousUser</span>
<span class="token keyword">void</span> <span class="token function">givenRequestIsAnonymous_whenGetSecuredMethod_thenUnauthorized</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    api<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/secured-method&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isUnauthorized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Test</span>
<span class="token annotation punctuation">@WithMockAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ROLE_AUTHORIZED_PERSONNEL&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">givenUserIsGrantedWithRoleAuthorizedPersonnel_whenGetSecuredMethod_thenOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token keyword">var</span> secret <span class="token operator">=</span> <span class="token string">&quot;Secret!&quot;</span><span class="token punctuation">;</span>
    <span class="token function">when</span><span class="token punctuation">(</span>messageService<span class="token punctuation">.</span><span class="token function">getSecret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span>secret<span class="token punctuation">)</span><span class="token punctuation">;</span>

    api<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/secured-method&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span>secret<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Test</span>
<span class="token annotation punctuation">@WithMockAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">givenUserIsNotGrantedWithRoleAuthorizedPersonnel_whenGetSecuredMethod_thenForbidden</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    api<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/secured-method&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isForbidden</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Test</span>
<span class="token annotation punctuation">@WithJwt</span><span class="token punctuation">(</span><span class="token string">&quot;ch4mpy.json&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">givenUserIsCh4mpy_whenGetSecuredMethod_thenOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token keyword">var</span> secret <span class="token operator">=</span> <span class="token string">&quot;Secret!&quot;</span><span class="token punctuation">;</span>
    <span class="token function">when</span><span class="token punctuation">(</span>messageService<span class="token punctuation">.</span><span class="token function">getSecret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span>secret<span class="token punctuation">)</span><span class="token punctuation">;</span>

    api<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/secured-method&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span>secret<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Test</span>
<span class="token annotation punctuation">@WithJwt</span><span class="token punctuation">(</span><span class="token string">&quot;tonton-pirate.json&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">givenUserIsTontonPirate_whenGetSecuredMethod_thenForbidden</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    api<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/secured-method&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isForbidden</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注解非常适合_BDD_范式：</strong></p><ul><li>前提条件（<em>Given</em>）在文本上下文中（装饰测试的注解）</li><li>只有被测试的代码执行（<em>When</em>）和结果断言（<em>Then</em>）在测试主体中</li></ul><h3 id="_4-6-单元测试-service-或-repository-安全方法" tabindex="-1"><a class="header-anchor" href="#_4-6-单元测试-service-或-repository-安全方法"><span>4.6. 单元测试_@Service_或_@Repository_安全方法</span></a></h3><p>当测试_Controller_时，选择请求_MockMvc_后处理器（或_WebTestClient_变异器）和注解大多取决于团队偏好，但是<strong>要单元测试_MessageService::getSecret_访问控制，_spring-security-test_不再是一个选项</strong>，我们将需要_spring-addons_注解。</p><p>这是servlet应用程序中@Service的完整单元测试的JUnit设置：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@TestInstance</span><span class="token punctuation">(</span><span class="token class-name">Lifecycle</span><span class="token punctuation">.</span><span class="token constant">PER_CLASS</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">MessageService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">SecurityConf</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ImportAutoConfiguration</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationFactoriesTestConf</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">MessageServiceUnitTest</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">MessageService</span> messageService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@MockBean</span>
    <span class="token class-name">JwtDecoder</span> jwtDecoder<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">givenSecurityContextIsNotSet_whenGreet_thenThrowsAuthenticationCredentialsNotFoundException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">assertThrows</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationCredentialsNotFoundException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> messageService<span class="token punctuation">.</span><span class="token function">getSecret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token annotation punctuation">@WithAnonymousUser</span>
    <span class="token keyword">void</span> <span class="token function">givenUserIsAnonymous_whenGreet_thenThrowsAccessDeniedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">assertThrows</span><span class="token punctuation">(</span><span class="token class-name">AccessDeniedException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> messageService<span class="token punctuation">.</span><span class="token function">getSecret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token annotation punctuation">@WithJwt</span><span class="token punctuation">(</span><span class="token string">&quot;ch4mpy.json&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">void</span> <span class="token function">givenUserIsCh4mpy_whenGreet_thenReturnGreetingWithPreferredUsernameAndAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Hello ch4mpy! You are granted with [admin, ROLE_AUTHORIZED_PERSONNEL].&quot;</span><span class="token punctuation">,</span>
          messageService<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token annotation punctuation">@WithMockUser</span><span class="token punctuation">(</span>authorities <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ROLE_AUTHORIZED_PERSONNEL&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> username <span class="token operator">=</span> <span class="token string">&quot;ch4mpy&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">void</span> <span class="token function">givenSecurityContextIsPopulatedWithUsernamePasswordAuthenticationToken_whenGreet_thenThrowsClassCastException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">assertThrows</span><span class="token punctuation">(</span><span class="token class-name">ClassCastException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> messageService<span class="token punctuation">.</span><span class="token function">getSecret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,66),o=[p];function c(i,u){return a(),s("div",null,o)}const k=n(e,[["render",c],["__file","2024-07-08-Testing Spring OAuth2 Access Control.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-08/2024-07-08-Testing%20Spring%20OAuth2%20Access%20Control.html","title":"测试Spring OAuth2访问控制 | Baeldung","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Spring Security","OAuth2"],"tag":["Testing","Access Control"],"head":[["meta",{"name":"keywords","content":"Spring Security, OAuth2, Testing, Access Control"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-08/2024-07-08-Testing%20Spring%20OAuth2%20Access%20Control.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"测试Spring OAuth2访问控制 | Baeldung"}],["meta",{"property":"og:description","content":"测试Spring OAuth2访问控制 | Baeldung 如果您正在处理Spring Security（特别是OAuth）实现，一定要查看《学习Spring安全》课程。 1. 概述 在本教程中，我们将探讨在Spring应用程序中使用模拟身份测试OAuth2安全下的访问控制规则的选项。 我们将使用_MockMvc_请求后处理器、_WebTestCli..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-08T10:01:20.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Testing"}],["meta",{"property":"article:tag","content":"Access Control"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-08T10:01:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"测试Spring OAuth2访问控制 | Baeldung\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-08T10:01:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"测试Spring OAuth2访问控制 | Baeldung 如果您正在处理Spring Security（特别是OAuth）实现，一定要查看《学习Spring安全》课程。 1. 概述 在本教程中，我们将探讨在Spring应用程序中使用模拟身份测试OAuth2安全下的访问控制规则的选项。 我们将使用_MockMvc_请求后处理器、_WebTestCli..."},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. 为什么使用Spring-Addons？","slug":"_2-为什么使用spring-addons","link":"#_2-为什么使用spring-addons","children":[]},{"level":2,"title":"3. 我们将测试什么？","slug":"_3-我们将测试什么","link":"#_3-我们将测试什么","children":[]},{"level":2,"title":"4. 使用模拟认证的单元测试","slug":"_4-使用模拟认证的单元测试","link":"#_4-使用模拟认证的单元测试","children":[{"level":3,"title":"4.1. 重要说明","slug":"_4-1-重要说明","link":"#_4-1-重要说明","children":[]},{"level":3,"title":"4.2. 测试设置","slug":"_4-2-测试设置","link":"#_4-2-测试设置","children":[]},{"level":3,"title":"4.3. 使用_MockMvc_后处理器进行单元测试","slug":"_4-3-使用-mockmvc-后处理器进行单元测试","link":"#_4-3-使用-mockmvc-后处理器进行单元测试","children":[]},{"level":3,"title":"4.4. 使用_WebTestClient_变异器进行单元测试","slug":"_4-4-使用-webtestclient-变异器进行单元测试","link":"#_4-4-使用-webtestclient-变异器进行单元测试","children":[]},{"level":3,"title":"4.5. 使用_Spring-Addons_注解进行控制器单元测试","slug":"_4-5-使用-spring-addons-注解进行控制器单元测试","link":"#_4-5-使用-spring-addons-注解进行控制器单元测试","children":[]},{"level":3,"title":"4.6. 单元测试_@Service_或_@Repository_安全方法","slug":"_4-6-单元测试-service-或-repository-安全方法","link":"#_4-6-单元测试-service-或-repository-安全方法","children":[]}]}],"git":{"createdTime":1720432880000,"updatedTime":1720432880000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":9.56,"words":2869},"filePathRelative":"posts/baeldung/2024-07-08/2024-07-08-Testing Spring OAuth2 Access Control.md","localizedDate":"2022年4月1日","excerpt":"\\n<p>如果您正在处理Spring Security（特别是OAuth）实现，一定要查看《学习Spring安全》课程。</p>\\n<h2>1. 概述</h2>\\n<p>在本教程中，我们将探讨在Spring应用程序中使用模拟身份测试OAuth2安全下的访问控制规则的选项。</p>\\n<p>我们将使用_MockMvc_请求后处理器、_WebTestClient_变异器以及来自_spring-security-test_和_spring-addons_的测试注解。</p>\\n<h2>2. 为什么使用Spring-Addons？</h2>\\n<p>在OAuth2领域，_spring-security-test_仅提供了需要分别在_MockMvc_或_WebTestClient_请求上下文中的请求后处理器和变异器。这对于_Controller_来说可能很好，但测试具有@Service或@Repository等方法安全性（@PreAuthorize、@PostFilter等）是一个问题。</p>","autoDesc":true}');export{k as comp,d as data};
