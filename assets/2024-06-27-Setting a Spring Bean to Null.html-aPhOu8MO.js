import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-Dl8jcOCm.js";const e={},p=t(`<h1 id="在spring中设置bean为null的多种方式" tabindex="-1"><a class="header-anchor" href="#在spring中设置bean为null的多种方式"><span>在Spring中设置Bean为Null的多种方式</span></a></h1><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p>在本教程中，我们将学习如何在Spring上下文中将Bean设置为null。这在某些情况下可能会很有用，例如在测试时我们不想提供模拟对象。此外，在使用一些可选特性时，我们可能想要避免创建实现并传递null。</p><p>此外，这种方法可以创建占位符，如果我们想将选择所需实现的决定推迟到Bean生命周期之外。最后，这种技术可能是在废弃过程中的第一步，涉及从上下文中移除特定的Bean。</p><h2 id="_2-组件设置" tabindex="-1"><a class="header-anchor" href="#_2-组件设置"><span>2. 组件设置</span></a></h2><p>存在几种方法可以将Bean设置为null，这取决于上下文的配置方式。我们将考虑XML、注解和Java配置。我们将使用两个类进行简单的设置：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainComponent</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">SubComponent</span> subComponent<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">MainComponent</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">SubComponent</span> subComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>subComponent <span class="token operator">=</span> subComponent<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">SubComponent</span> <span class="token function">getSubComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> subComponent<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSubComponent</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">SubComponent</span> subComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>subComponent <span class="token operator">=</span> subComponent<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将展示如何在Spring上下文中将SubComponent设置为null：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubComponent</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-使用xml配置中的占位符" tabindex="-1"><a class="header-anchor" href="#_3-使用xml配置中的占位符"><span>3. 使用XML配置中的占位符</span></a></h2><p>在XML配置中，我们可以使用一个特殊的占位符来标识null值：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">&gt;</span></span>\`\`\`
    \`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.baeldung.nullablebean.MainComponent<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mainComponent<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\`\`\`
        \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span><span class="token punctuation">&gt;</span></span>\`
            \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>null</span><span class="token punctuation">/&gt;</span></span>\`
        \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">&gt;</span></span>\`
    \`\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>\`\`\`\`
\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>\`\`\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此配置将提供以下结果：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenNullableXMLContextWhenCreatingMainComponentThenSubComponentIsNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ClassPathXmlApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>
      <span class="token string">&quot;nullable-application-context.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">MainComponent</span> bean <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">MainComponent</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertNull</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getSubComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-使用xml配置中的spel" tabindex="-1"><a class="header-anchor" href="#_4-使用xml配置中的spel"><span>4. 使用XML配置中的SpEL</span></a></h2><p>我们可以使用XML中的SpEL实现类似的结果。与之前的配置相比，将会有几个不同之处：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">&gt;</span></span>\`\`\`
    \`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.baeldung.nullablebean.MainComponent<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mainComponent<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\`\`\`
        \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#{null}<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\`
    \`\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>\`\`\`\`
\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>\`\`\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与上一个测试类似，我们可以确定SubComponent是null：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenNullableSpELXMLContextWhenCreatingMainComponentThenSubComponentIsNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ClassPathXmlApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>
      <span class="token string">&quot;nullable-spel-application-context.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">MainComponent</span> bean <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">MainComponent</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertNull</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getSubComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-使用xml配置中的spel和属性" tabindex="-1"><a class="header-anchor" href="#_5-使用xml配置中的spel和属性"><span>5. 使用XML配置中的SpEL和属性</span></a></h2><p>改进之前解决方案的一种方法是将Bean名称存储在属性文件中。这样，我们就可以在需要时传递null值，而无需更改配置：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>nullableBean = null
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>XML配置将使用PropertyPlaceholderConfigurer来读取属性：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">&gt;</span></span>\`\`\`
    \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>propertyConfigurer<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.beans.factory.config.PropertyPlaceholderConfigurer<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\`
        \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>location<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>classpath:nullable.properties<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\`
    \`\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>\`\`\`\`
    \`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.baeldung.nullablebean.MainComponent<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mainComponent<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\`\`\`
        \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#{ \${nullableBean} }<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\`
    \`\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>\`\`\`\`
    \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.baeldung.nullablebean.SubComponent<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>subComponent<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\`
\`\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>\`\`\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然而，我们应该在SpEL表达式内部使用属性占位符，以便正确读取值。结果，我们将初始化SubComponent为null：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenNullableSpELXMLContextWithNullablePropertiesWhenCreatingMainComponentThenSubComponentIsNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ClassPathXmlApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>
      <span class="token string">&quot;nullable-configurable-spel-application-context.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">MainComponent</span> bean <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">MainComponent</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertNull</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getSubComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要提供实现，我们只需要更改属性即可：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>nullableBean = subComponent
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_6-java配置中的null-supplier" tabindex="-1"><a class="header-anchor" href="#_6-java配置中的null-supplier"><span>6. Java配置中的Null Supplier</span></a></h2><p>直接从带有@Bean注解的方法返回null是不可能的。这就是为什么我们需要以某种方式包装它。我们可以使用Supplier来实现这一点：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">Supplier</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SubComponent</span><span class="token punctuation">&gt;</span></span>\`\` <span class="token function">subComponentSupplier</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从技术上讲，我们可以使用任何类来包装null值，但使用Supplier更为符合习惯。在null的情况下，我们不关心Supplier可能被调用多次。然而，如果我们想要为常规Bean实现类似的解决方案，我们必须确保如果需要单例，Supplier提供了相同的实例。</p><p>这个解决方案也将提供正确的行为：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenNullableSupplierContextWhenCreatingMainComponentThenSubComponentIsNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">AnnotationConfigApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>
      <span class="token class-name">NullableSupplierConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">MainComponent</span> bean <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">MainComponent</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertNull</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getSubComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，简单地从@Bean返回null可能会造成问题：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">SubComponent</span> <span class="token function">subComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这种情况下，上下文将因UnsatisfiedDependencyException失败：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenNullableContextWhenCreatingMainComponentThenSubComponentIsNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertThrows</span><span class="token punctuation">(</span><span class="token class-name">UnsatisfiedDependencyException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>
      <span class="token class-name">NullableConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-使用optional" tabindex="-1"><a class="header-anchor" href="#_7-使用optional"><span>7. 使用Optional</span></a></h2><p>当使用Optional时，Spring会自动识别Bean可以从上下文中缺失并传递null，而无需任何额外配置：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">MainComponent</span> <span class="token function">mainComponent</span><span class="token punctuation">(</span><span class="token class-name">Optional</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SubComponent</span><span class="token punctuation">&gt;</span></span>\`\` optionalSubComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MainComponent</span><span class="token punctuation">(</span>optionalSubComponent<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果Spring在上下文中找不到SubComponent，它将传递一个空的Optional：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenOptionableContextWhenCreatingMainComponentThenSubComponentIsNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">AnnotationConfigApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>
      <span class="token class-name">OptionableConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">MainComponent</span> bean <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">MainComponent</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertNull</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getSubComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-非必需的自动装配" tabindex="-1"><a class="header-anchor" href="#_8-非必需的自动装配"><span>8. 非必需的自动装配</span></a></h2><p>将null作为Bean的值的另一种方法是将其声明为非必需的。然而，这种方法仅适用于非构造函数注入：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NonRequiredMainComponent</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">NonRequiredSubComponent</span> subComponent<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">NonRequiredSubComponent</span> <span class="token function">getSubComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> subComponent<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSubComponent</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">NonRequiredSubComponent</span> subComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>subComponent <span class="token operator">=</span> subComponent<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个依赖项对于组件的正常运行不是必需的：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenNonRequiredContextWhenCreatingMainComponentThenSubComponentIsNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">AnnotationConfigApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>
      <span class="token class-name">NonRequiredConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">NonRequiredMainComponent</span> bean <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">NonRequiredMainComponent</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertNull</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getSubComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-使用-nullable" tabindex="-1"><a class="header-anchor" href="#_9-使用-nullable"><span>9. 使用@Nullable</span></a></h2><p>此外，我们可以使用@Nullable注解来标识我们期望Bean可能是null。Spring和Jakarta的注解都可以为此工作：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NullableMainComponent</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">NullableSubComponent</span> subComponent<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">NullableMainComponent</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">NullableSubComponent</span> subComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>subComponent <span class="token operator">=</span> subComponent<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">NullableSubComponent</span> <span class="token function">getSubComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> subComponent<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSubComponent</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">NullableSubComponent</span> subComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>subComponent <span class="token operator">=</span> subComponent<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们不需要将NullableSubComponent标识为Spring组件：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NullableSubComponent</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Spring上下文将根据@Nullable注解将其设置为null：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenContextWhenCreatingNullableMainComponentThenSubComponentIsNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">AnnotationConfigApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>
      <span class="token class-name">NullableJavaConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">NullableMainComponent</span> bean <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">NullableMainComponent</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertNull</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getSubComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10-结论" tabindex="-1"><a class="header-anchor" href="#_10-结论"><span>10. 结论</span></a></h2><p>在Spring上下文中使用null不是最常见的做法，但有时可能是合理的。然而，将Bean设置为null的过程可能不是很直观。</p><p>在本文中，我们学习了多种解决这个问题的方法。</p><p>如往常一样，文章的代码可以在GitHub上找到。 OK</p>`,59),o=[p];function l(c,i){return s(),a("div",null,o)}const d=n(e,[["render",l],["__file","2024-06-27-Setting a Spring Bean to Null.html.vue"]]),r=JSON.parse('{"path":"/posts/baeldung/2024-06-27/2024-06-27-Setting%20a%20Spring%20Bean%20to%20Null.html","title":"在Spring中设置Bean为Null的多种方式","lang":"zh-CN","frontmatter":{"date":"2024-06-27T00:00:00.000Z","category":["Spring","Java"],"tag":["Spring Framework","Bean Configuration"],"head":[["meta",{"name":"keywords","content":"Spring, Java, Bean, Null, Configuration"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-06-27/2024-06-27-Setting%20a%20Spring%20Bean%20to%20Null.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"在Spring中设置Bean为Null的多种方式"}],["meta",{"property":"og:description","content":"在Spring中设置Bean为Null的多种方式 1. 概述 在本教程中，我们将学习如何在Spring上下文中将Bean设置为null。这在某些情况下可能会很有用，例如在测试时我们不想提供模拟对象。此外，在使用一些可选特性时，我们可能想要避免创建实现并传递null。 此外，这种方法可以创建占位符，如果我们想将选择所需实现的决定推迟到Bean生命周期之外..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-27T02:53:57.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Spring Framework"}],["meta",{"property":"article:tag","content":"Bean Configuration"}],["meta",{"property":"article:published_time","content":"2024-06-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-27T02:53:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"在Spring中设置Bean为Null的多种方式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-27T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-27T02:53:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"在Spring中设置Bean为Null的多种方式 1. 概述 在本教程中，我们将学习如何在Spring上下文中将Bean设置为null。这在某些情况下可能会很有用，例如在测试时我们不想提供模拟对象。此外，在使用一些可选特性时，我们可能想要避免创建实现并传递null。 此外，这种方法可以创建占位符，如果我们想将选择所需实现的决定推迟到Bean生命周期之外..."},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. 组件设置","slug":"_2-组件设置","link":"#_2-组件设置","children":[]},{"level":2,"title":"3. 使用XML配置中的占位符","slug":"_3-使用xml配置中的占位符","link":"#_3-使用xml配置中的占位符","children":[]},{"level":2,"title":"4. 使用XML配置中的SpEL","slug":"_4-使用xml配置中的spel","link":"#_4-使用xml配置中的spel","children":[]},{"level":2,"title":"5. 使用XML配置中的SpEL和属性","slug":"_5-使用xml配置中的spel和属性","link":"#_5-使用xml配置中的spel和属性","children":[]},{"level":2,"title":"6. Java配置中的Null Supplier","slug":"_6-java配置中的null-supplier","link":"#_6-java配置中的null-supplier","children":[]},{"level":2,"title":"7. 使用Optional","slug":"_7-使用optional","link":"#_7-使用optional","children":[]},{"level":2,"title":"8. 非必需的自动装配","slug":"_8-非必需的自动装配","link":"#_8-非必需的自动装配","children":[]},{"level":2,"title":"9. 使用@Nullable","slug":"_9-使用-nullable","link":"#_9-使用-nullable","children":[]},{"level":2,"title":"10. 结论","slug":"_10-结论","link":"#_10-结论","children":[]}],"git":{"createdTime":1719456837000,"updatedTime":1719456837000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":4.26,"words":1279},"filePathRelative":"posts/baeldung/2024-06-27/2024-06-27-Setting a Spring Bean to Null.md","localizedDate":"2024年6月27日","excerpt":"\\n<h2>1. 概述</h2>\\n<p>在本教程中，我们将学习如何在Spring上下文中将Bean设置为null。这在某些情况下可能会很有用，例如在测试时我们不想提供模拟对象。此外，在使用一些可选特性时，我们可能想要避免创建实现并传递null。</p>\\n<p>此外，这种方法可以创建占位符，如果我们想将选择所需实现的决定推迟到Bean生命周期之外。最后，这种技术可能是在废弃过程中的第一步，涉及从上下文中移除特定的Bean。</p>\\n<h2>2. 组件设置</h2>\\n<p>存在几种方法可以将Bean设置为null，这取决于上下文的配置方式。我们将考虑XML、注解和Java配置。我们将使用两个类进行简单的设置：</p>","autoDesc":true}');export{d as comp,r as data};
