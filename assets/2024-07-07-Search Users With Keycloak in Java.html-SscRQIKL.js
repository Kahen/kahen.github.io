import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-0nXvcScy.js";const e={},p=t(`<h1 id="keycloak-在-java-中搜索用户" tabindex="-1"><a class="header-anchor" href="#keycloak-在-java-中搜索用户"><span>Keycloak 在 Java 中搜索用户</span></a></h1><p>Keycloak 是一个第三方的身份和访问管理解决方案，可以帮助我们将认证和授权集成到我们的应用程序中。</p><p>在本教程中，我们将看到一些在 Keycloak 中搜索用户的例子。</p><h2 id="_2-keycloak-配置" tabindex="-1"><a class="header-anchor" href="#_2-keycloak-配置"><span>2. Keycloak 配置</span></a></h2><p>首先，我们需要配置 Keycloak。让我们创建一个名为 <em>baeldung</em> 的初始管理员用户，密码为 <em>secretPassword</em>。其次，我们需要一个领域来工作。让我们使用当我们启动 Keycloak 时已经存在的 <em>master</em> 领域。</p><p>最后，我们需要一个客户端，我们可以从我们的 Spring Boot 应用程序中使用。对于这个例子，让我们使用默认创建的 <em>admin-cli</em> 客户端。</p><p>我们需要一些用户在领域中，这样我们之后才能搜索他们。让我们创建一个用户名为 “<em>user1</em>”，电子邮件为 “<em>user1@test.com</em>”，名称为 “<em>First User</em>” 的用户。现在，我们可以重复这个模式几次，总共拥有 10 个用户。</p><h2 id="_3-keycloak-管理客户端" tabindex="-1"><a class="header-anchor" href="#_3-keycloak-管理客户端"><span>3. Keycloak 管理客户端</span></a></h2><p>Keycloak 提供了一个 REST API，可以用来访问管理控制台 UI 上提供的所有功能。我们可以使用任何我们想要的客户端，但是 <strong>Keycloak 提供了一个 Java 客户端</strong>，这使得它变得更加容易。在我们的第一个例子中，<strong>我们将从 Spring Boot 应用程序中使用这个 Java 客户端</strong>。</p><p>首先，让我们将 <em>keycloak-admin-client</em> 依赖项添加到我们的 <em>pom.xml</em>：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\`
    \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>\`org.keycloak\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\`
    \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`keycloak-admin-client\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`
    \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\`21.0.1\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\`
\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>确保 <strong>客户端的版本与服务器的版本相匹配</strong>。版本不匹配可能无法正常工作。</p><p>现在，让我们 <strong>在我们的应用程序中配置客户端</strong>。为此，我们需要创建一个 <em>Keycloak</em> bean：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token class-name">Keycloak</span> <span class="token function">keycloak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">KeycloakBuilder</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">serverUrl</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost:8080&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">realm</span><span class="token punctuation">(</span><span class="token string">&quot;master&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">clientId</span><span class="token punctuation">(</span><span class="token string">&quot;admin-cli&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">grantType</span><span class="token punctuation">(</span><span class="token class-name">OAuth2Constants</span><span class="token punctuation">.</span><span class="token constant">PASSWORD</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">username</span><span class="token punctuation">(</span><span class="token string">&quot;baeldung&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">&quot;secretPassword&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个构建器中，我们配置了服务器 URL，设置了前面提到的领域和客户端名称，并提供了正确的凭据。</p><p>让我们创建一个服务，将使用这个 bean 来访问我们的 Keycloak 服务器：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdminClientService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">Keycloak</span> keycloak<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@PostConstruct</span>
    <span class="token keyword">void</span> <span class="token function">searchUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在此之后，让我们启动我们的应用程序。现在我们可以开始搜索用户了。</p><h3 id="_3-1-按用户名搜索" tabindex="-1"><a class="header-anchor" href="#_3-1-按用户名搜索"><span>3.1. 按用户名搜索</span></a></h3><p>Java 客户端提供了一个非常方便的方式来 <strong>按用户名搜索用户</strong>。首先，我们需要引用我们想要使用的领域，然后访问用户并使用 <strong><em>searchByUsername()</em> 方法</strong>。让我们创建一个搜索用户并记录结果的方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">REALM_NAME</span> <span class="token operator">=</span> <span class="token string">&quot;master&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">searchByUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token keyword">boolean</span> exact<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Searching by username: {} (exact {})&quot;</span><span class="token punctuation">,</span> username<span class="token punctuation">,</span> exact<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span>\`\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserRepresentation</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\`\` users <span class="token operator">=</span> keycloak<span class="token punctuation">.</span><span class="token function">realm</span><span class="token punctuation">(</span><span class="token constant">REALM_NAME</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">users</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">searchByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> exact<span class="token punctuation">)</span><span class="token punctuation">;</span>

    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Users found by username {}&quot;</span><span class="token punctuation">,</span> users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>user <span class="token operator">-&gt;</span> user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们可以使用不同的参数从我们的 <em>searchUsers()</em> 方法中使用它：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">searchUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">searchByUsername</span><span class="token punctuation">(</span><span class="token string">&quot;user1&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">searchByUsername</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">searchByUsername</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一次搜索寻找 “<em>user1</em>” 用户名的精确匹配。第二次不需要精确匹配，所以它返回所有包含单词 “<em>user</em>” 的用户名的用户。第三次类似，寻找包含数字 “1” 的用户名。由于我们有 10 个用户名从 <em>user1</em> 到 <em>user10</em>，日志包含以下结果：</p><div class="language-plaintext line-numbers-mode" data-ext="plaintext" data-title="plaintext"><pre class="language-plaintext"><code>12:20:22.295 [main] INFO c.b.k.adminclient.AdminClientService - Searching users in Keycloak 21.0.1
12:20:22.296 [main] INFO c.b.k.adminclient.AdminClientService - Searching by username: user1 (exact true)
12:20:22.341 [main] INFO c.b.k.adminclient.AdminClientService - Users found by username [user1]
12:20:22.341 [main] INFO c.b.k.adminclient.AdminClientService - Searching by username: user (exact false)
12:20:22.357 [main] INFO c.b.k.adminclient.AdminClientService - Users found by username [user1, user10, user2, user3, user4, user5, user6, user7, user8, user9]
12:20:22.357 [main] INFO c.b.k.adminclient.AdminClientService - Searching by username: 1 (exact false)
12:20:22.369 [main] INFO c.b.k.adminclient.AdminClientService - Users found by username [user1, user10]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-按电子邮件搜索" tabindex="-1"><a class="header-anchor" href="#_3-2-按电子邮件搜索"><span>3.2. 按电子邮件搜索</span></a></h3><p>正如我们之前看到的，基于用户名进行过滤非常简单。<strong>幸运的是，使用电子邮件地址作为过滤器与此非常相似</strong>。让我们使用接受电子邮件地址和 <em>boolean</em> 参数进行精确匹配的 <em>searchByEmail()</em> 方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">searchByEmail</span><span class="token punctuation">(</span><span class="token class-name">String</span> email<span class="token punctuation">,</span> <span class="token keyword">boolean</span> exact<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Searching by email: {} (exact {})&quot;</span><span class="token punctuation">,</span> email<span class="token punctuation">,</span> exact<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">List</span>\`\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserRepresentation</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\`\` users <span class="token operator">=</span> keycloak<span class="token punctuation">.</span><span class="token function">realm</span><span class="token punctuation">(</span><span class="token constant">REALM_NAME</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">users</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">searchByEmail</span><span class="token punctuation">(</span>email<span class="token punctuation">,</span> exact<span class="token punctuation">)</span><span class="token punctuation">;</span>

    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Users found by email {}&quot;</span><span class="token punctuation">,</span> users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>user <span class="token operator">-&gt;</span> user<span class="token punctuation">.</span><span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们用 “<em>user2@test.com</em>” 地址进行测试，并寻找一个精确匹配。这次只有一个结果：</p><div class="language-plaintext line-numbers-mode" data-ext="plaintext" data-title="plaintext"><pre class="language-plaintext"><code>12:24:16.130 [main] INFO c.b.k.adminclient.AdminClientService - Searching by email: user2@test.com (exact true)
12:24:16.141 [main] INFO c.b.k.adminclient.AdminClientService - Users found by email [user2@test.com]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-按自定义属性搜索" tabindex="-1"><a class="header-anchor" href="#_3-3-按自定义属性搜索"><span>3.3. 按自定义属性搜索</span></a></h3><p>在 Keycloak 中，<strong>用户也可以拥有自定义属性</strong>，不仅仅是简单的用户名和电子邮件。让我们为 <em>user1</em> 添加一个名为 <em>DOB</em>（出生日期）的自定义属性，值为 “2000-01-05”。</p><p>现在，我们可以使用管理客户端的 <em>searchByAttributes()</em> 方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">searchByAttributes</span><span class="token punctuation">(</span><span class="token class-name">String</span> query<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Searching by attributes: {}&quot;</span><span class="token punctuation">,</span> query<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">List</span>\`\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserRepresentation</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\`\` users <span class="token operator">=</span> keycloak<span class="token punctuation">.</span><span class="token function">realm</span><span class="token punctuation">(</span><span class="token constant">REALM_NAME</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">users</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">searchByAttributes</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>

    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Users found by attributes {}&quot;</span><span class="token punctuation">,</span> users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>user <span class="token operator">-&gt;</span> user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们使用 “<em>DOB:2000-01-05</em>” 查询列出具有匹配属性的用户：</p><div class="language-plaintext line-numbers-mode" data-ext="plaintext" data-title="plaintext"><pre class="language-plaintext"><code>13:19:51.091 [main] INFO c.b.k.adminclient.AdminClientService - Searching by attributes: DOB:2000-01-05
13:19:51.103 [main] INFO c.b.k.adminclient.AdminClientService - Users found by attributes [user1 {DOB=[2000-01-05]}]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-按组搜索" tabindex="-1"><a class="header-anchor" href="#_3-4-按组搜索"><span>3.4. 按组搜索</span></a></h3><p><strong>用户也可以属于一个组，我们也可以按此进行过滤</strong>。让我们创建一个名为 “<em>Test Group</em>” 的组，并向其中添加一些成员。现在，我们可以使用管理客户端获取这个组的成员：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">searchByGroup</span><span class="token punctuation">(</span><span class="token class-name">String</span> groupId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Searching by group: {}&quot;</span><span class="token punctuation">,</span> groupId<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">List</span>\`\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserRepresentation</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\`\` users <span class="token operator">=</span> keycloak<span class="token punctuation">.</span><span class="token function">realm</span><span class="token punctuation">(</span><span class="token constant">REALM_NAME</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">groups</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>groupId<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">members</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Users found by group {}&quot;</span><span class="token punctuation">,</span> users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>user <span class="token operator">-&gt;</span> user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然而，重要的是要注意，我们在这里使用了组 ID 而不是名称。这样，<strong>我们可以列出 Keycloak 组的成员</strong>：</p><div class="language-plaintext line-numbers-mode" data-ext="plaintext" data-title="plaintext"><pre class="language-plaintext"><code>14:35:09.275 [main] INFO c.b.k.adminclient.AdminClientService - Searching by group: c67643fb-514e-488a-a4b4-5c0bdf2e7477
14:35:09.290 [main] INFO c.b.k.adminclient.AdminClientService - Users found by group [user1, user2, user3, user4, user5]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-5-按角色搜索" tabindex="-1"><a class="header-anchor" href="#_3-5-按角色搜索"><span>3.5. 按角色搜索</span></a></h3><p>按角色搜索与前一种方法非常相似，因为我们可以根据特定角色列出用户，就像我们列出组成员一样。为此，我们需要给一些用户分配角色。让我们创建一个名为 “<em>user</em>” 的角色，并将其分配给 “user1”。现在，我们可以实施搜索功能：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">searchByRole</span><span class="token punctuation">(</span><span class="token class-name">String</span> roleName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Searching by role: {}&quot;</span><span class="token punctuation">,</span> roleName<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">List</span>\`\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserRepresentation</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\`\` users <span class="token operator">=</span> keycloak<span class="token punctuation">.</span><span class="token function">realm</span><span class="token punctuation">(</span><span class="token constant">REALM_NAME</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>roleName<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">getUserMembers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Users found by role {}&quot;</span><span class="token punctuation">,</span> users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>user <span class="token operator">-&gt;</span> user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们来看看哪些用户拥有这个角色：</p><div class="language-plaintext line-numbers-mode" data-ext="plaintext" data-title="plaintext"><pre class="language-plaintext"><code>12:03:23.788 [main] INFO c.b.k.adminclient.AdminClientService - Searching by role: user
12:03:23.802 [main] INFO c.b.k.adminclient.AdminClientService - Users found by role [user1]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-自定义-rest-端点" tabindex="-1"><a class="header-anchor" href="#_4-自定义-rest-端点"><span>4. 自定义 REST 端点</span></a></h2><p>正如我们所看到的，Keycloak 默认提供了有用的搜索功能，但在某些情况下，我们可能需要不同或更复杂的功能。但这也有一个解决方案。<strong>我们可以通过向 Keycloak 添加新的 API 端点来实现我们自己的自定义功能</strong>。</p><p>假设我们想要找到属于特定组并具有特定角色的用户。例如，我们可以找到所有在 “<em>software development department</em>” 组中具有 “<em>project manager</em>” 角色的用户。</p><p><strong>首先，我们需要一个从 Keycloak 的 <em>RealmResourceProvider</em> 扩展的新类</strong>。让我们在这里实现我们的自定义功能：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KeycloakUserApiProvider</span> <span class="token keyword">implements</span> <span class="token class-name">RealmResourceProvider</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">KeycloakSession</span> session<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">KeycloakUserApiProvider</span><span class="token punctuation">(</span><span class="token class-name">KeycloakSession</span> session<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>session <span class="token operator">=</span> session<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@GET</span>
    <span class="token annotation punctuation">@Produces</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Stream</span>\`\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserRepresentation</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\`\` <span class="token function">searchUsersByGroupAndRoleName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@QueryParam</span><span class="token punctuation">(</span><span class="token string">&quot;groupName&quot;</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@NotNull</span> <span class="token class-name">String</span> groupName<span class="token punctuation">,</span> <span class="token annotation punctuation">@QueryParam</span><span class="token punctuation">(</span><span class="token string">&quot;roleName&quot;</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@NotBlank</span> <span class="token class-name">String</span> roleName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">RealmModel</span> realm <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Optional</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GroupModel</span><span class="token punctuation">&gt;</span></span>\` groupByName <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">groups</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">getGroupsStream</span><span class="token punctuation">(</span>realm<span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>group <span class="token operator">-&gt;</span> group<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>groupName<span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">GroupModel</span> group <span class="token operator">=</span> groupByName<span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">NotFoundException</span><span class="token punctuation">(</span><span class="token string">&quot;Group not found with name &quot;</span> <span class="token operator">+</span> groupName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> session<span class="token punctuation">.</span><span class="token function">users</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">getGroupMembersStream</span><span class="token punctuation">(</span>realm<span class="token punctuation">,</span> group<span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>user <span class="token operator">-&gt;</span> user<span class="token punctuation">.</span><span class="token function">getRealmRoleMappingsStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>role <span class="token operator">-&gt;</span> role<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>roleName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>user <span class="token operator">-&gt;</span> <span class="token class-name">ModelToRepresentation</span><span class="token punctuation">.</span><span class="token function">toBriefRepresentation</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>之后，我们需要通过配置一个 <em>RealmResourceProviderFactory</em> 来告诉 Keycloak 使用这个类</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KeycloakUserApiProviderFactory</span> <span class="token keyword">implements</span> <span class="token class-name">RealmResourceProviderFactory</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">ID</span> <span class="token operator">=</span> <span class="token string">&quot;users-by-group-and-role-name&quot;</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">RealmResourceProvider</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">KeycloakSession</span> session<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">KeycloakUserApiProvider</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Scope</span> config<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postInit</span><span class="token punctuation">(</span><span class="token class-name">KeycloakSessionFactory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">ID</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>最后，我们需要通过在 <em>META-INF</em> 文件夹中创建一个文件来注册这个类</strong>。这个文件中应该只有一行，包含我们类的限定名称。让我们创建 <strong><em>src/main/resources/META-INF/services/org.keycloak.services.resource.RealmResourceProviderFactory</em></strong> 文件，使其包含我们类的名称：</p><div class="language-plaintext line-numbers-mode" data-ext="plaintext" data-title="plaintext"><pre class="language-plaintext"><code>com.baeldung.keycloak.customendpoint.KeycloakUserApiProviderFactory
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>让我们构建项目并将 jar 复制到 Keycloak 的 <em>providers</em> 文件夹中，并运行 <em>build</em> 命令以更新服务器的提供者注册表：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>kc build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们得到以下输出，意味着 <strong>我们的自定义提供者被识别并注册了</strong>：</p><div class="language-plaintext line-numbers-mode" data-ext="plaintext" data-title="plaintext"><pre class="language-plaintext"><code>Updating the configuration and installing your custom providers, if any. Please wait.

Server configuration updated and persisted. Run the following command to review the configuration:
kc.bat show-config
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>让我们再次启动 Keycloak 实例并访问我们的自定义 API 端点</strong> 在 <em>http://localhost:8080/realms/master/users-by-group-and-role-name?groupName=Test%20Group&amp;roleName=user</em>。</p><p>这个 API 端点成功返回满足两个条件的用户，这意味着它属于 “<em>Test Group</em>” 并具有角色 “<em>user</em>”：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2c59a20f-df38-4d14-8ff9-067ea30f7937&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;createdTimestamp&quot;</span><span class="token operator">:</span> <span class="token number">1678099525313</span><span class="token punctuation">,</span>
        <span class="token property">&quot;username&quot;</span><span class="token operator">:</span> <span class="token string">&quot;user1&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;enabled&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token property">&quot;emailVerified&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token property">&quot;firstName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;First&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;lastName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;User&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;email&quot;</span><span class="token operator">:</span> <span class="token string">&quot;user1@test.com&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-结论" tabindex="-1"><a class="header-anchor" href="#_5-结论"><span>5. 结论</span></a></h2><p>在本文中，我们使用 Keycloak 管理客户端将我们的 Spring Boot 应用程序与 Keycloak 集成，以管理用户。这提供了一种访问现有功能的便捷方式。然后，我们创建了一个自定义 REST 端点来扩展 Keycloak，使我们能够实现任何必要的自定义逻辑。</p><p>如往常一样，这些示例的源代码可以在 GitHub 上找到。</p><p><a href="https://www.baeldung.com/" target="_blank" rel="noopener noreferrer"><img src="https://www.baeldung.com/wp-content/themes/baeldung/icon/logo.svg" alt="Baeldung Logo" loading="lazy"></a><a href="https://www.baeldung.com/" target="_blank" rel="noopener noreferrer"><img src="https://secure.gravatar.com/avatar/ca13303288f480d70285ec29b5c7e03c?s=50&amp;r=g" alt="Gravatar Image" loading="lazy"></a><a href="https://www.baeldung.com/" target="_blank" rel="noopener noreferrer"><img src="https://secure.gravatar.com/avatar/e10d6ff4ff6d95fd255cc95a5ab28c0e?s=50&amp;r=g" alt="Gravatar Image" loading="lazy"></a><a href="https://www.baeldung.com/" target="_blank" rel="noopener noreferrer"><img src="https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png" alt="Announcement Icon" loading="lazy"></a><a href="https://www.baeldung.com/" target="_blank" rel="noopener noreferrer"><img src="https://www.baeldung.com/wp-content/uploads/2016/05/baeldung-security-post-footer-main-1.2.0.jpg" alt="Baeldung Security Post Footer" loading="lazy"></a><a href="https://www.baeldung.com/" target="_blank" rel="noopener noreferrer"><img src="https://www.baeldung.com/wp-content/uploads/2016/05/baeldung-security-lightbox-icn-1.0.0-1.png" alt="Baeldung Security Lightbox Icon" loading="lazy"></a></p><p>OK</p>`,67),o=[p];function c(l,i){return a(),s("div",null,o)}const k=n(e,[["render",c],["__file","2024-07-07-Search Users With Keycloak in Java.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-07/2024-07-07-Search%20Users%20With%20Keycloak%20in%20Java.html","title":"Keycloak 在 Java 中搜索用户","lang":"zh-CN","frontmatter":{"date":"2024-07-08T00:00:00.000Z","category":["Java","Keycloak"],"tag":["Keycloak","用户搜索"],"head":[["meta",{"name":"keywords","content":"Keycloak, 用户搜索, Java集成, 身份认证, 访问管理"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-07/2024-07-07-Search%20Users%20With%20Keycloak%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Keycloak 在 Java 中搜索用户"}],["meta",{"property":"og:description","content":"Keycloak 在 Java 中搜索用户 Keycloak 是一个第三方的身份和访问管理解决方案，可以帮助我们将认证和授权集成到我们的应用程序中。 在本教程中，我们将看到一些在 Keycloak 中搜索用户的例子。 2. Keycloak 配置 首先，我们需要配置 Keycloak。让我们创建一个名为 baeldung 的初始管理员用户，密码为 se..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.baeldung.com/wp-content/themes/baeldung/icon/logo.svg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-07T19:00:34.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Keycloak"}],["meta",{"property":"article:tag","content":"用户搜索"}],["meta",{"property":"article:published_time","content":"2024-07-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-07T19:00:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Keycloak 在 Java 中搜索用户\\",\\"image\\":[\\"https://www.baeldung.com/wp-content/themes/baeldung/icon/logo.svg\\",\\"https://secure.gravatar.com/avatar/ca13303288f480d70285ec29b5c7e03c?s=50&r=g\\",\\"https://secure.gravatar.com/avatar/e10d6ff4ff6d95fd255cc95a5ab28c0e?s=50&r=g\\",\\"https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png\\",\\"https://www.baeldung.com/wp-content/uploads/2016/05/baeldung-security-post-footer-main-1.2.0.jpg\\",\\"https://www.baeldung.com/wp-content/uploads/2016/05/baeldung-security-lightbox-icn-1.0.0-1.png\\"],\\"datePublished\\":\\"2024-07-08T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-07T19:00:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Keycloak 在 Java 中搜索用户 Keycloak 是一个第三方的身份和访问管理解决方案，可以帮助我们将认证和授权集成到我们的应用程序中。 在本教程中，我们将看到一些在 Keycloak 中搜索用户的例子。 2. Keycloak 配置 首先，我们需要配置 Keycloak。让我们创建一个名为 baeldung 的初始管理员用户，密码为 se..."},"headers":[{"level":2,"title":"2. Keycloak 配置","slug":"_2-keycloak-配置","link":"#_2-keycloak-配置","children":[]},{"level":2,"title":"3. Keycloak 管理客户端","slug":"_3-keycloak-管理客户端","link":"#_3-keycloak-管理客户端","children":[{"level":3,"title":"3.1. 按用户名搜索","slug":"_3-1-按用户名搜索","link":"#_3-1-按用户名搜索","children":[]},{"level":3,"title":"3.2. 按电子邮件搜索","slug":"_3-2-按电子邮件搜索","link":"#_3-2-按电子邮件搜索","children":[]},{"level":3,"title":"3.3. 按自定义属性搜索","slug":"_3-3-按自定义属性搜索","link":"#_3-3-按自定义属性搜索","children":[]},{"level":3,"title":"3.4. 按组搜索","slug":"_3-4-按组搜索","link":"#_3-4-按组搜索","children":[]},{"level":3,"title":"3.5. 按角色搜索","slug":"_3-5-按角色搜索","link":"#_3-5-按角色搜索","children":[]}]},{"level":2,"title":"4. 自定义 REST 端点","slug":"_4-自定义-rest-端点","link":"#_4-自定义-rest-端点","children":[]},{"level":2,"title":"5. 结论","slug":"_5-结论","link":"#_5-结论","children":[]}],"git":{"createdTime":1720378834000,"updatedTime":1720378834000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":7.9,"words":2371},"filePathRelative":"posts/baeldung/2024-07-07/2024-07-07-Search Users With Keycloak in Java.md","localizedDate":"2024年7月8日","excerpt":"\\n<p>Keycloak 是一个第三方的身份和访问管理解决方案，可以帮助我们将认证和授权集成到我们的应用程序中。</p>\\n<p>在本教程中，我们将看到一些在 Keycloak 中搜索用户的例子。</p>\\n<h2>2. Keycloak 配置</h2>\\n<p>首先，我们需要配置 Keycloak。让我们创建一个名为 <em>baeldung</em> 的初始管理员用户，密码为 <em>secretPassword</em>。其次，我们需要一个领域来工作。让我们使用当我们启动 Keycloak 时已经存在的 <em>master</em> 领域。</p>\\n<p>最后，我们需要一个客户端，我们可以从我们的 Spring Boot 应用程序中使用。对于这个例子，让我们使用默认创建的 <em>admin-cli</em> 客户端。</p>","autoDesc":true}');export{k as comp,d as data};
