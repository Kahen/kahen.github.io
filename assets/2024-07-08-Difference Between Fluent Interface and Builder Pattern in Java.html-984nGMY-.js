import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-BaCIpe-N.js";const p={},e=t('<h1 id="fluent-interface与builder模式在java中的区别" tabindex="-1"><a class="header-anchor" href="#fluent-interface与builder模式在java中的区别"><span>Fluent Interface与Builder模式在Java中的区别</span></a></h1><p>在本教程中，我们将讨论Fluent Interface设计模式，并将其与Builder模式进行比较。在探索Fluent Interface模式时，我们会意识到Builder只是其中一种可能的实现方式。从这里开始，我们可以深入探讨设计Fluent API的最佳实践，包括不可变性和接口分离原则等考虑因素。</p><p><strong>Fluent Interface是一种面向对象的API设计，它允许我们以一种可读和直观的方式链式调用方法。</strong> 要实现它，我们需要声明返回同一类对象的方法。结果，我们将能够将多个方法调用链式起来。这种模式经常用于构建DSL（领域特定语言）。</p><p>例如，Java8的_Stream API_使用了Fluent Interface模式，并允许用户以一种非常声明性的方式操作数据流。让我们看一个简单的例子，观察每一步之后，都会返回一个新的_Stream_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Stream</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>` numbers <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">Stream</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>` processedNumbers <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>nr <span class="token operator">-&gt;</span> nr <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>nr <span class="token operator">-&gt;</span> <span class="token string">&quot;#&quot;</span> <span class="token operator">+</span> nr<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span>nr <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">String</span> result <span class="token operator">=</span> processedNumbers<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">&quot;, &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如我们所注意到的，首先我们需要创建实现Fluent API模式的对象，在我们的例子中，这是通过静态方法_Stream.of()<em>实现的。之后，我们通过其公共API进行操作，我们可以注意到每个方法都返回同一个类。我们以一个返回不同类型结束链式调用的方法结束。在我们的例子中，这是一个返回_String_的_Collector</em>。</p><h3 id="建造者设计模式" tabindex="-1"><a class="header-anchor" href="#建造者设计模式"><span>建造者设计模式</span></a></h3><p><strong>建造者模式是一种创建型设计模，它将复杂对象的构建与其表示分离。</strong> _Builder_类实现了Fluent Interface模式，并允许逐步创建对象。</p><p>让我们看看建造者模式的一个简单用法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">User<span class="token punctuation">.</span>Builder</span> userBuilder <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nuserBuilder <span class="token operator">=</span> userBuilder\n  <span class="token punctuation">.</span><span class="token function">firstName</span><span class="token punctuation">(</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">lastName</span><span class="token punctuation">(</span><span class="token string">&quot;Doe&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">email</span><span class="token punctuation">(</span><span class="token string">&quot;jd@gmail.com&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">username</span><span class="token punctuation">(</span><span class="token string">&quot;jd_2000&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token number">1234L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">User</span> user <span class="token operator">=</span> userBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们应该能够识别出前面例子中讨论的所有步骤。Fluent Interface设计模式是通过_User.Builder_类实现的，该类是通过_User.builder()_方法创建的。之后，我们链式调用多个方法，指定_User_的各个属性，每个步骤都返回相同的类型：<em>User.Builder</em>。最后，我们通过_build()<em>方调用来退出Fluent Interface，该方法实例化并返回_User</em>。<strong>因此，我们可以肯定地说，建造者模式是Fluent API模式的唯一可能实现。</strong></p><h3 id="不可变性" tabindex="-1"><a class="header-anchor" href="#不可变性"><span>不可变性</span></a></h3><p><strong>如果我们想用Fluent Interface创建一个对象，我们需要考虑不可变性方面。</strong> 上一节中的_User.Builder_不是一个不可变对象，它正在改变其内部状态，总是返回同一个实例——它自己：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Builder</span> <span class="token function">firstName</span><span class="token punctuation">(</span><span class="token class-name">String</span> firstName<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> firstName<span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">Builder</span> <span class="token function">lastName</span><span class="token punctuation">(</span><span class="token class-name">String</span> lastName<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 其他方法</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">,</span> email<span class="token punctuation">,</span> username<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另一方面，只要它们具有相同的类型，每次返回一个新实例也是可能的。让我们创建一个用于生成HTML的具有Fluent API的类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HtmlDocument</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">HtmlDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">HtmlDocument</span><span class="token punctuation">(</span><span class="token class-name">String</span> html<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> html<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;```&lt;html&gt;```%s```&lt;/html&gt;```&quot;</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">HtmlDocument</span> <span class="token function">header</span><span class="token punctuation">(</span><span class="token class-name">String</span> header<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HtmlDocument</span><span class="token punctuation">(</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%s ``&lt;h1&gt;``%s``&lt;/h1&gt;``&quot;</span><span class="token punctuation">,</span> content<span class="token punctuation">,</span> header<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">HtmlDocument</span> <span class="token function">paragraph</span><span class="token punctuation">(</span><span class="token class-name">String</span> paragraph<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HtmlDocument</span><span class="token punctuation">(</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%s ```&lt;p&gt;```%s```&lt;/p&gt;```&quot;</span><span class="token punctuation">,</span> content<span class="token punctuation">,</span> paragraph<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">HtmlDocument</span> <span class="token function">horizontalLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HtmlDocument</span><span class="token punctuation">(</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%s ``&lt;hr&gt;``&quot;</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">HtmlDocument</span> <span class="token function">orderedList</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> listItems <span class="token operator">=</span> <span class="token function">stream</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>el <span class="token operator">-&gt;</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;`````&lt;li&gt;`````%s`````&lt;/li&gt;`````&quot;</span><span class="token punctuation">,</span> el<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HtmlDocument</span><span class="token punctuation">(</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%s ``&lt;ol&gt;``%s``&lt;/ol&gt;``&quot;</span><span class="token punctuation">,</span> content<span class="token punctuation">,</span> listItems<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这种情况下，我们将通过直接调用构造函数来获得我们的Fluent类实例。大多数方法都返回一个_HtmlDocument_并符合模式。我们可以使用_html()<em>方法来结束链式调用并获得结果_String</em>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">HtmlDocument</span> document <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HtmlDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&quot;Principles of O.O.P.&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">paragraph</span><span class="token punctuation">(</span><span class="token string">&quot;OOP in Java.&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">horizontalLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">paragraph</span><span class="token punctuation">(</span><span class="token string">&quot;The main pillars of OOP are:&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">orderedList</span><span class="token punctuation">(</span><span class="token string">&quot;Encapsulation&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Inheritance&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Abstraction&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Polymorphism&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> html <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">assertThat</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualToIgnoringWhitespace</span><span class="token punctuation">(</span>\n  <span class="token string">&quot;```&lt;html&gt;```&quot;</span>\n  <span class="token operator">+</span>  <span class="token string">&quot;``&lt;h1&gt;``Principles of O.O.P.``&lt;/h1&gt;``&quot;</span>\n  <span class="token operator">+</span>  <span class="token string">&quot;```&lt;p&gt;```OOP in Java.```&lt;/p&gt;```&quot;</span>\n  <span class="token operator">+</span>  <span class="token string">&quot;``&lt;hr&gt;``&quot;</span>\n  <span class="token operator">+</span>  <span class="token string">&quot;```&lt;p&gt;```The main pillars of OOP are:```&lt;/p&gt;```&quot;</span>\n  <span class="token operator">+</span>  <span class="token string">&quot;``&lt;ol&gt;``&quot;</span>\n  <span class="token operator">+</span>     <span class="token string">&quot;`````&lt;li&gt;`````Encapsulation`````&lt;/li&gt;`````&quot;</span>\n  <span class="token operator">+</span>     <span class="token string">&quot;`````&lt;li&gt;`````Inheritance`````&lt;/li&gt;`````&quot;</span>\n  <span class="token operator">+</span>     <span class="token string">&quot;`````&lt;li&gt;`````Abstraction`````&lt;/li&gt;`````&quot;</span>\n  <span class="token operator">+</span>     <span class="token string">&quot;`````&lt;li&gt;`````Polymorphism`````&lt;/li&gt;`````&quot;</span>\n  <span class="token operator">+</span>  <span class="token string">&quot;``&lt;/ol&gt;``&quot;</span>\n  <span class="token operator">+</span> <span class="token string">&quot;```&lt;/html&gt;```&quot;</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，由于_HtmlDocument_是不可变的，链中的每个方法调用将导致一个新的实例。换句话说，如果我们向文档添加一个段落，那么带标题的文档将变成一个不同的对象：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">HtmlDocument</span> document <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HtmlDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&quot;Principles of O.O.P.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">HtmlDocument</span> updatedDocument <span class="token operator">=</span> document\n  <span class="token punctuation">.</span><span class="token function">paragraph</span><span class="token punctuation">(</span><span class="token string">&quot;OOP in Java.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">assertThat</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isNotEqualTo</span><span class="token punctuation">(</span>updatedDocument<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="接口分离原则" tabindex="-1"><a class="header-anchor" href="#接口分离原则"><span>接口分离原则</span></a></h3><p><strong>接口分离原则，即SOLID中的“I”，教导我们避免使用大型接口。要完全遵守此原则，我们的API客户端不应依赖于它从未使用过的任何方法。</strong></p><p>当我们构建Fluent接口时，我们必须注意我们的API的公共方法数量。我们可能会被诱惑添加越来越多的方法，结果是一个巨大的对象。例如，_Stream API_有40多个公共方法。让我们看看我们的Fluent _HtmlDocument_的公共API如何演变。为了保持前一个例子，我们将在这一部分创建一个新的类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LargeHtmlDocument</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span>\n    <span class="token comment">// 构造函数</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;```&lt;html&gt;```%s```&lt;/html&gt;```&quot;</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token class-name">LargeHtmlDocument</span> <span class="token function">header</span><span class="token punctuation">(</span><span class="token class-name">String</span> header<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token class-name">LargeHtmlDocument</span> <span class="token function">headerTwo</span><span class="token punctuation">(</span><span class="token class-name">String</span> header<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token class-name">LargeHtmlDocument</span> <span class="token function">headerThree</span><span class="token punctuation">(</span><span class="token class-name">String</span> header<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token class-name">LargeHtmlDocument</span> <span class="token function">headerFour</span><span class="token punctuation">(</span><span class="token class-name">String</span> header<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">LargeHtmlDocument</span> <span class="token function">unorderedList</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token class-name">LargeHtmlDocument</span> <span class="token function">orderedList</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">LargeHtmlDocument</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token class-name">Object</span> content<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token class-name">LargeHtmlDocument</span> <span class="token function">span</span><span class="token punctuation">(</span><span class="token class-name">Object</span> content<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token class-name">LargeHtmlDocument</span> <span class="token function">paragraph</span><span class="token punctuation">(</span><span class="token class-name">String</span> paragraph<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token class-name">LargeHtmlDocument</span> <span class="token function">horizontalLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>\n    <span class="token comment">// 其他方法</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有许多方法可以保持接口更小。其中之一是将方法分组，并通过小的、内聚的对象组成_HtmlDocument_。例如，我们可以将我们的API限制为三个方法：<em>head(), body(),</em> 和 <em>footer()</em>，并使用对象组合来创建文档。注意这些小对象本身也暴露了一个Fluent API。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> html <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LargeHtmlDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">head</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HtmlHeader</span><span class="token punctuation">(</span><span class="token class-name">Type</span><span class="token punctuation">.</span><span class="token constant">PRIMARY</span><span class="token punctuation">,</span> <span class="token string">&quot;title&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HtmlDiv</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HtmlSpan</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">paragraph</span><span class="token punctuation">(</span><span class="token string">&quot;learning OOP from John Doe&quot;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HorizontalLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">paragraph</span><span class="token punctuation">(</span><span class="token string">&quot;The pillars of OOP:&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HtmlList</span><span class="token punctuation">(</span><span class="token constant">ORDERED</span><span class="token punctuation">,</span> <span class="token string">&quot;Encapsulation&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Inheritance&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Abstraction&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Polymorphism&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">footer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HtmlDiv</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">paragraph</span><span class="token punctuation">(</span><span class="token string">&quot;trademark John Doe&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="结论" tabindex="-1"><a class="header-anchor" href="#结论"><span>结论</span></a></h3><p>在这篇文章中，我们学习了Fluent API设计。我们探讨了建造者模式只是Fluent Interface模式的一种实现方式。然后，我们更深入地探讨了Fluent API，并讨论了不可变性问题。最后，我们解决了大型接口问题，并学习了如何分割我们的API以符合接口分离原则。</p><p>本文使用的全部代码可以在GitHub上找到。</p>',29),c=[e];function o(l,u){return a(),s("div",null,c)}const k=n(p,[["render",o],["__file","2024-07-08-Difference Between Fluent Interface and Builder Pattern in Java.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-08/2024-07-08-Difference%20Between%20Fluent%20Interface%20and%20Builder%20Pattern%20in%20Java.html","title":"Fluent Interface与Builder模式在Java中的区别","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","设计模式"],"tag":["Fluent Interface","Builder Pattern"],"head":[["meta",{"name":"keywords","content":"Java, Fluent Interface, Builder Pattern, 设计模式"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-08/2024-07-08-Difference%20Between%20Fluent%20Interface%20and%20Builder%20Pattern%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Fluent Interface与Builder模式在Java中的区别"}],["meta",{"property":"og:description","content":"Fluent Interface与Builder模式在Java中的区别 在本教程中，我们将讨论Fluent Interface设计模式，并将其与Builder模式进行比较。在探索Fluent Interface模式时，我们会意识到Builder只是其中一种可能的实现方式。从这里开始，我们可以深入探讨设计Fluent API的最佳实践，包括不可变性和接口..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-08T06:44:57.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Fluent Interface"}],["meta",{"property":"article:tag","content":"Builder Pattern"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-08T06:44:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Fluent Interface与Builder模式在Java中的区别\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-08T06:44:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Fluent Interface与Builder模式在Java中的区别 在本教程中，我们将讨论Fluent Interface设计模式，并将其与Builder模式进行比较。在探索Fluent Interface模式时，我们会意识到Builder只是其中一种可能的实现方式。从这里开始，我们可以深入探讨设计Fluent API的最佳实践，包括不可变性和接口..."},"headers":[{"level":3,"title":"建造者设计模式","slug":"建造者设计模式","link":"#建造者设计模式","children":[]},{"level":3,"title":"不可变性","slug":"不可变性","link":"#不可变性","children":[]},{"level":3,"title":"接口分离原则","slug":"接口分离原则","link":"#接口分离原则","children":[]},{"level":3,"title":"结论","slug":"结论","link":"#结论","children":[]}],"git":{"createdTime":1720421097000,"updatedTime":1720421097000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":5.48,"words":1645},"filePathRelative":"posts/baeldung/2024-07-08/2024-07-08-Difference Between Fluent Interface and Builder Pattern in Java.md","localizedDate":"2022年4月1日","excerpt":"\\n<p>在本教程中，我们将讨论Fluent Interface设计模式，并将其与Builder模式进行比较。在探索Fluent Interface模式时，我们会意识到Builder只是其中一种可能的实现方式。从这里开始，我们可以深入探讨设计Fluent API的最佳实践，包括不可变性和接口分离原则等考虑因素。</p>\\n<p><strong>Fluent Interface是一种面向对象的API设计，它允许我们以一种可读和直观的方式链式调用方法。</strong> 要实现它，我们需要声明返回同一类对象的方法。结果，我们将能够将多个方法调用链式起来。这种模式经常用于构建DSL（领域特定语言）。</p>","autoDesc":true}');export{k as comp,d as data};
