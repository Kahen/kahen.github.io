import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-BaCIpe-N.js";const e={},p=t('<h1 id="在java中指定目录查找特定扩展名的文件" tabindex="-1"><a class="header-anchor" href="#在java中指定目录查找特定扩展名的文件"><span>在Java中指定目录查找特定扩展名的文件</span></a></h1><h2 id="_1-引言" tabindex="-1"><a class="header-anchor" href="#_1-引言"><span>1. 引言</span></a></h2><p>在本快速教程中，我们将看到使用核心Java和外部库来搜索目录（包括子目录）中匹配特定扩展名的文件的一些替代方案。我们将从简单的数组和列表到流和其他更新的方法。</p><h2 id="_2-设置我们的过滤器" tabindex="-1"><a class="header-anchor" href="#_2-设置我们的过滤器"><span>2. 设置我们的过滤器</span></a></h2><p><strong>由于我们需要按扩展名过滤文件，让我们从简单的_Predicate_实现开始。</strong> 我们需要一点输入清理，以确保我们匹配大多数用例，比如接受以点开头或不以点开头的扩展名：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MatchExtensionPredicate</span> <span class="token keyword">implements</span> <span class="token class-name">Predicate</span>```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Path</span><span class="token punctuation">&gt;</span></span>``````````` <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> extension<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">MatchExtensionPredicate</span><span class="token punctuation">(</span><span class="token class-name">String</span> extension<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>extension<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            extension <span class="token operator">=</span> <span class="token string">&quot;.&quot;</span> <span class="token operator">+</span> extension<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>extension <span class="token operator">=</span> extension<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Path</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>path <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> path<span class="token punctuation">.</span><span class="token function">getFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span>extension<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们首先编写构造函数，如果扩展名不包含点，则在其前面添加点。然后，我们将其转换为小写。这样，当我们将其与其他文件进行比较时，我们可以确保它们具有相同的情况。<strong>最后，我们通过获取_Path_的文件名并将其转换为小写来实现_test()_。最重要的是，我们检查它是否以我们正在寻找的扩展名结尾。</strong></p><h2 id="_3-使用-files-listfiles-遍历目录" tabindex="-1"><a class="header-anchor" href="#_3-使用-files-listfiles-遍历目录"><span>3. 使用_Files.listFiles()_遍历目录</span></a></h2><p>我们的第一个示例将使用自Java诞生以来就存在的方法：<em>Files.listFiles()</em>。让我们首先实例化一个_List_来存储我们的结果，并列出目录中的所有文件：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">File</span><span class="token punctuation">&gt;</span></span>``` <span class="token function">find</span><span class="token punctuation">(</span><span class="token class-name">File</span> startPath<span class="token punctuation">,</span> <span class="token class-name">String</span> extension<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">List</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">File</span><span class="token punctuation">&gt;</span></span>``` matches <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> startPath<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>files <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n       <span class="token keyword">return</span> matches<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>listFiles()_本身不递归操作，所以对于每个项目，如果我们确定它是一个目录，我们开始递归：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">MatchExtensionPredicate</span> filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MatchExtensionPredicate</span><span class="token punctuation">(</span>extension<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        matches<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> extension<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>filter<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">toPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        matches<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">return</span> matches<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们还实例化了我们的_filter_，并且只有在当前文件通过我们的_test()<em>实现时，我们才将其添加到我们的列表中。<strong>最终，我们将拥有所有匹配我们过滤器的结果。</strong> 请注意，这可能导致目录树太深时的_StackOverflowError</em>，以及目录包含太多文件时的_OutOfMemoryError_。我们将在后面看到性能更好的选项。</p><h2 id="_4-从java-7开始使用-files-walkfiletree-遍历目录" tabindex="-1"><a class="header-anchor" href="#_4-从java-7开始使用-files-walkfiletree-遍历目录"><span>4. 从Java 7开始使用_Files.walkFileTree()_遍历目录</span></a></h2><p>从Java 7开始，我们有了NIO2 API。它包括许多实用程序，如_Files_类和使用_Path_类处理文件的新方法。<strong>使用_walkFileTree()_允许我们毫不费力地递归遍历目录。</strong> 这个方法只需要一个起始_Path_和一个_FileVisitor_实现：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span>```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Path</span><span class="token punctuation">&gt;</span></span>``````````` <span class="token function">find</span><span class="token punctuation">(</span><span class="token class-name">Path</span> startPath<span class="token punctuation">,</span> <span class="token class-name">String</span> extension<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n    <span class="token class-name">List</span>```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Path</span><span class="token punctuation">&gt;</span></span>``````````` matches <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">walkFileTree</span><span class="token punctuation">(</span>startPath<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SimpleFileVisitor</span>```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Path</span><span class="token punctuation">&gt;</span></span>```````````<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n        <span class="token annotation punctuation">@Override</span>\n        <span class="token keyword">public</span> <span class="token class-name">FileVisitResult</span> <span class="token function">visitFile</span><span class="token punctuation">(</span><span class="token class-name">Path</span> file<span class="token punctuation">,</span> <span class="token class-name">BasicFileAttributes</span> attributes<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MatchExtensionPredicate</span><span class="token punctuation">(</span>extension<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                matches<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">return</span> <span class="token class-name">FileVisitResult</span><span class="token punctuation">.</span><span class="token constant">CONTINUE</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token annotation punctuation">@Override</span>\n        <span class="token keyword">public</span> <span class="token class-name">FileVisitResult</span> <span class="token function">visitFileFailed</span><span class="token punctuation">(</span><span class="token class-name">Path</span> file<span class="token punctuation">,</span> <span class="token class-name">IOException</span> exc<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token class-name">FileVisitResult</span><span class="token punctuation">.</span><span class="token constant">CONTINUE</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> matches<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>FileVisitor_包含几个事件的回调：进入目录前，离开目录后，访问文件时，以及这次访问失败时。**但是，使用_SimpleFileVisitor</em>，我们只需要实现我们感兴趣的回调。** 在这种情况下，它是使用_visitFile()_访问文件。所以，对于访问的每个文件，我们用我们的_Predicate_测试它，并将匹配的文件添加到列表中。</p><p>同时，我们实现了_visitFileFailed()<em>以始终返回_FileVisitResult.CONTINUE</em>。<strong>这样，即使发生异常——比如访问被拒绝——我们也可以继续搜索文件。</strong></p><h2 id="_5-从java-8开始使用-files-walk-进行流式处理" tabindex="-1"><a class="header-anchor" href="#_5-从java-8开始使用-files-walk-进行流式处理"><span>5. 从Java 8开始使用_Files.walk()_进行流式处理</span></a></h2><p>Java 8包括了一种更简单的遍历目录的方式，它与_Stream_ API集成。这是我们的使用_Files.walk()_的方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Stream</span>```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Path</span><span class="token punctuation">&gt;</span></span>``````````` <span class="token function">find</span><span class="token punctuation">(</span><span class="token class-name">Path</span> startPath<span class="token punctuation">,</span> <span class="token class-name">String</span> extension<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span>startPath<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MatchExtensionPredicate</span><span class="token punctuation">(</span>extension<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>不幸的是，这在抛出第一个异常时就会中断，目前还没有办法处理这个。</strong> 所以，让我们尝试一种不同的方法。我们将首先实现一个包含Consumer<code>&lt;Path&gt;</code>的_FileVisitor_。<strong>这次，我们将使用这个_Consumer_来处理我们的文件匹配，而不是将它们累积在一个_List_中：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleFileConsumerVisitor</span> <span class="token keyword">extends</span> <span class="token class-name">SimpleFileVisitor</span>```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Path</span><span class="token punctuation">&gt;</span></span>``````````` <span class="token punctuation">{</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Predicate</span>```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Path</span><span class="token punctuation">&gt;</span></span>``````````` filter<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Consumer</span>```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Path</span><span class="token punctuation">&gt;</span></span>``````````` consumer<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">SimpleFileConsumerVisitor</span><span class="token punctuation">(</span><span class="token class-name">MatchExtensionPredicate</span> filter<span class="token punctuation">,</span> <span class="token class-name">Consumer</span>```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Path</span><span class="token punctuation">&gt;</span></span>``````````` consumer<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>filter <span class="token operator">=</span> filter<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>consumer <span class="token operator">=</span> consumer<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">FileVisitResult</span> <span class="token function">visitFile</span><span class="token punctuation">(</span><span class="token class-name">Path</span> file<span class="token punctuation">,</span> <span class="token class-name">BasicFileAttributes</span> attributes<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>filter<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            consumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> <span class="token class-name">FileVisitResult</span><span class="token punctuation">.</span><span class="token constant">CONTINUE</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">FileVisitResult</span> <span class="token function">visitFileFailed</span><span class="token punctuation">(</span><span class="token class-name">Path</span> file<span class="token punctuation">,</span> <span class="token class-name">IOException</span> exc<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token class-name">FileVisitResult</span><span class="token punctuation">.</span><span class="token constant">CONTINUE</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，让我们修改我们的_find()_方法来使用它：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token class-name">Path</span> startPath<span class="token punctuation">,</span> <span class="token class-name">String</span> extension<span class="token punctuation">,</span> <span class="token class-name">Consumer</span>```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Path</span><span class="token punctuation">&gt;</span></span>``````````` consumer<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n    <span class="token class-name">MatchExtensionPredicate</span> filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MatchExtensionPredicate</span><span class="token punctuation">(</span>extension<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">walkFileTree</span><span class="token punctuation">(</span>startPath<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SimpleFileConsumerVisitor</span><span class="token punctuation">(</span>filter<span class="token punctuation">,</span> consumer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，我们不得不回到_Files.walkFileTree()_来使用我们的_FileVisitor_实现。</p><h2 id="_6-使用apache-commons-io的-fileutils-iteratefiles" tabindex="-1"><a class="header-anchor" href="#_6-使用apache-commons-io的-fileutils-iteratefiles"><span>6. 使用Apache Commons IO的_FileUtils.iterateFiles()_</span></a></h2><p>另一个有用的选项是Apache Commons IO的_FileUtils.iterateFiles()<em>，它返回一个_Iterator</em>。让我们包括它的依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`commons-io`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`commons-io`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`2.15.1`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>有了它的依赖，我们也可以像使用我们的_MatchExtensionPredicate_一样使用_WildcardFileFilter_：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Iterator</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">File</span><span class="token punctuation">&gt;</span></span>``` <span class="token function">find</span><span class="token punctuation">(</span><span class="token class-name">Path</span> startPath<span class="token punctuation">,</span> <span class="token class-name">String</span> extension<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>extension<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        extension <span class="token operator">=</span> <span class="token string">&quot;.&quot;</span> <span class="token operator">+</span> extension<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">iterateFiles</span><span class="token punctuation">(</span>\n      startPath<span class="token punctuation">.</span><span class="token function">toFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token class-name">WildcardFileFilter</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setWildcards</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span> <span class="token operator">+</span> extension<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token class-name">TrueFileFilter</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们的方法首先确保扩展名在预期的格式中。检查是否需要添加点使我们的方法可以工作，如果我们传递“.extension”或只是“extension”。</p><p>像其他方法一样，它只需要一个起始目录。但是，由于这是一个较旧的API，它需要一个_File_而不是_Path_。<strong>最后一个参数是一个可选的目录过滤器。但是，如果没有指定，它将忽略子目录。</strong> 所以，我们包括一个_TrueFileFilter.INSTANCE_以确保访问整个目录树。</p><h2 id="_7-结论" tabindex="-1"><a class="header-anchor" href="#_7-结论"><span>7. 结论</span></a></h2><p>在本文中，我们探讨了基于指定扩展名在目录及其子目录中搜索文件的各种方法。我们首先设置了一个灵活的扩展名匹配_Predicate_。然后，我们涵盖了从传统的_Files.listFiles()_和_Files.walkFileTree()<em>方法到Java 8中引入的更现代的替代方案，如_Files.walk()</em>。此外，我们还探索了使用Apache Commons IO的_FileUtils.iterateFiles()_的不同视角。</p><p>正如往常一样，源代码可在GitHub上找到。</p>',36),c=[p];function o(l,i){return a(),s("div",null,c)}const r=n(e,[["render",o],["__file","2024-06-25-Find Files by Extension in Specified Directory in Java.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-06-25/2024-06-25-Find%20Files%20by%20Extension%20in%20Specified%20Directory%20in%20Java.html","title":"在Java中指定目录查找特定扩展名的文件","lang":"zh-CN","frontmatter":{"date":"2024-06-26T00:00:00.000Z","category":["Java","文件处理"],"tag":["Java","文件搜索","文件遍历"],"head":[["meta",{"name":"keywords","content":"Java, 文件搜索, 目录遍历, 文件扩展名匹配"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-06-25/2024-06-25-Find%20Files%20by%20Extension%20in%20Specified%20Directory%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"在Java中指定目录查找特定扩展名的文件"}],["meta",{"property":"og:description","content":"在Java中指定目录查找特定扩展名的文件 1. 引言 在本快速教程中，我们将看到使用核心Java和外部库来搜索目录（包括子目录）中匹配特定扩展名的文件的一些替代方案。我们将从简单的数组和列表到流和其他更新的方法。 2. 设置我们的过滤器 由于我们需要按扩展名过滤文件，让我们从简单的_Predicate_实现开始。 我们需要一点输入清理，以确保我们匹配大..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-25T18:35:12.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"文件搜索"}],["meta",{"property":"article:tag","content":"文件遍历"}],["meta",{"property":"article:published_time","content":"2024-06-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-25T18:35:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"在Java中指定目录查找特定扩展名的文件\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-26T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-25T18:35:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"在Java中指定目录查找特定扩展名的文件 1. 引言 在本快速教程中，我们将看到使用核心Java和外部库来搜索目录（包括子目录）中匹配特定扩展名的文件的一些替代方案。我们将从简单的数组和列表到流和其他更新的方法。 2. 设置我们的过滤器 由于我们需要按扩展名过滤文件，让我们从简单的_Predicate_实现开始。 我们需要一点输入清理，以确保我们匹配大..."},"headers":[{"level":2,"title":"1. 引言","slug":"_1-引言","link":"#_1-引言","children":[]},{"level":2,"title":"2. 设置我们的过滤器","slug":"_2-设置我们的过滤器","link":"#_2-设置我们的过滤器","children":[]},{"level":2,"title":"3. 使用_Files.listFiles()_遍历目录","slug":"_3-使用-files-listfiles-遍历目录","link":"#_3-使用-files-listfiles-遍历目录","children":[]},{"level":2,"title":"4. 从Java 7开始使用_Files.walkFileTree()_遍历目录","slug":"_4-从java-7开始使用-files-walkfiletree-遍历目录","link":"#_4-从java-7开始使用-files-walkfiletree-遍历目录","children":[]},{"level":2,"title":"5. 从Java 8开始使用_Files.walk()_进行流式处理","slug":"_5-从java-8开始使用-files-walk-进行流式处理","link":"#_5-从java-8开始使用-files-walk-进行流式处理","children":[]},{"level":2,"title":"6. 使用Apache Commons IO的_FileUtils.iterateFiles()_","slug":"_6-使用apache-commons-io的-fileutils-iteratefiles","link":"#_6-使用apache-commons-io的-fileutils-iteratefiles","children":[]},{"level":2,"title":"7. 结论","slug":"_7-结论","link":"#_7-结论","children":[]}],"git":{"createdTime":1719340512000,"updatedTime":1719340512000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":5.14,"words":1543},"filePathRelative":"posts/baeldung/2024-06-25/2024-06-25-Find Files by Extension in Specified Directory in Java.md","localizedDate":"2024年6月26日","excerpt":"\\n<h2>1. 引言</h2>\\n<p>在本快速教程中，我们将看到使用核心Java和外部库来搜索目录（包括子目录）中匹配特定扩展名的文件的一些替代方案。我们将从简单的数组和列表到流和其他更新的方法。</p>\\n<h2>2. 设置我们的过滤器</h2>\\n<p><strong>由于我们需要按扩展名过滤文件，让我们从简单的_Predicate_实现开始。</strong> 我们需要一点输入清理，以确保我们匹配大多数用例，比如接受以点开头或不以点开头的扩展名：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">MatchExtensionPredicate</span> <span class=\\"token keyword\\">implements</span> <span class=\\"token class-name\\">Predicate</span>```````````<span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Path</span><span class=\\"token punctuation\\">&gt;</span></span>``````````` <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">final</span> <span class=\\"token class-name\\">String</span> extension<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">MatchExtensionPredicate</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> extension<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>extension<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">startsWith</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\".\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            extension <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\".\\"</span> <span class=\\"token operator\\">+</span> extension<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>extension <span class=\\"token operator\\">=</span> extension<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toLowerCase</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token annotation punctuation\\">@Override</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">boolean</span> <span class=\\"token function\\">test</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Path</span> path<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>path <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">return</span> path<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getFileName</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n          <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toString</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n          <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toLowerCase</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n          <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">endsWith</span><span class=\\"token punctuation\\">(</span>extension<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{r as comp,d as data};
