import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-wW4FEqQZ.js";const p={},o=t(`<h1 id="java中将十进制转换为分数" tabindex="-1"><a class="header-anchor" href="#java中将十进制转换为分数"><span>Java中将十进制转换为分数</span></a></h1><ol><li>引言</li></ol><p>分数是表示数字的另一种方式，由分子和分母组成。例如，分数3/5可以被看作是“5分之3”，表示的值与十进制数0.6相同。在本教程中，我们将探讨在Java中将十进制数字转换为分数的不同方法。</p><ol start="2"><li>使用乘以10的幂</li></ol><p>将十进制转换为分数的一种简单方法是将十进制乘以10的幂，然后使用结果的分子和分母作为分数。</p><p>以下是这种方法的代码片段：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> <span class="token function">convertDecimalToFractionUsingMultiplyingWithPowerOf10</span><span class="token punctuation">(</span><span class="token keyword">double</span> decimal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> decimalStr <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>decimal<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> decimalPlaces <span class="token operator">=</span> decimalStr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> decimalStr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">long</span> denominator <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> decimalPlaces<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> numerator <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>decimal <span class="token operator">*</span> denominator<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> numerator <span class="token operator">+</span> <span class="token string">&quot;/&quot;</span> <span class="token operator">+</span> denominator<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，我们通过查找小数点在字符串中的位置并从小字符串的长度中减去它来计算小数位数。然后我们通过将10提高到小数位数的幂来计算分母。</p><p>接下来，我们将原始的十进制数乘以分母以确定分子。该方法通过将分子和分母用斜杠(/)分隔符连接起来，返回分数的字符串表示。</p><p>让我们使用_assertEquals()_验证我们的解决方案：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;5/10&quot;</span><span class="token punctuation">,</span> <span class="token function">convertDecimalToFractionUsingMultiplyingWithPowerOf10</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;1/10&quot;</span><span class="token punctuation">,</span> <span class="token function">convertDecimalToFractionUsingMultiplyingWithPowerOf10</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;6/10&quot;</span><span class="token punctuation">,</span> <span class="token function">convertDecimalToFractionUsingMultiplyingWithPowerOf10</span><span class="token punctuation">(</span><span class="token number">0.6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;85/100&quot;</span><span class="token punctuation">,</span> <span class="token function">convertDecimalToFractionUsingMultiplyingWithPowerOf10</span><span class="token punctuation">(</span><span class="token number">0.85</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;125/100&quot;</span><span class="token punctuation">,</span> <span class="token function">convertDecimalToFractionUsingMultiplyingWithPowerOf10</span><span class="token punctuation">(</span><span class="token number">1.25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;1333333333/1000000000&quot;</span><span class="token punctuation">,</span> <span class="token function">convertDecimalToFractionUsingMultiplyingWithPowerOf10</span><span class="token punctuation">(</span><span class="token number">1.333333333</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方法简单且易于实现，但它有一些限制。简单的转换可能不会产生最简化形式的分数。例如，使用这种方法转换0.5将得到5/10，这可以简化为1/2。</p><ol start="3"><li>使用最大公约数(GCD)</li></ol><p>将十进制转换为分数的一种更健壮的方式是使用最大公约数(GCD)来简化分数。GCD是能够同时整除分子和分母而不留下余数的最大数字。</p><p>首先，我们创建一个_gcd()_方法，使用欧几里得算法计算两个整数_a_和_b_的最大公约数：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">long</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">long</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> a<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在方法内部，我们检查：</p><ul><li>如果_b_为0，则GCD是_a_。</li><li>否则，通过递归地找到_b_和_a_除以_b_的余数的GCD来计算GCD。</li></ul><p>接下来，我们创建一个方法来应用_gcd()_方法简化分数：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> <span class="token function">convertDecimalToFractionUsingGCD</span><span class="token punctuation">(</span><span class="token keyword">double</span> decimal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> decimalStr <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>decimal<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> decimalPlaces <span class="token operator">=</span> decimalStr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> decimalStr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> denominator <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> decimalPlaces<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> numerator <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>decimal <span class="token operator">*</span> denominator<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">long</span> gcd <span class="token operator">=</span> <span class="token function">gcd</span><span class="token punctuation">(</span>numerator<span class="token punctuation">,</span> denominator<span class="token punctuation">)</span><span class="token punctuation">;</span>
    numerator <span class="token operator">/=</span> gcd<span class="token punctuation">;</span>
    denominator <span class="token operator">/=</span> gcd<span class="token punctuation">;</span>

    <span class="token keyword">return</span> numerator <span class="token operator">+</span> <span class="token string">&quot;/&quot;</span> <span class="token operator">+</span> denominator<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与之前的方法类似，我们计算小数位数以确定分母。然后通过将原始的十进制数乘以分母来确定分子。</p><p>然后我们应用_gcd()_方法来计算分子和分母的GCD。之后，我们通过将分子和分母都除以GCD来简化分数。这确保了分数处于其最简形式。</p><p>最后，该方法通过将分子和分母用斜杠(/)分隔符连接起来，返回简化后的分数作为字符串：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;1/2&quot;</span><span class="token punctuation">,</span> <span class="token function">convertDecimalToFractionUsingGCD</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;1/10&quot;</span><span class="token punctuation">,</span> <span class="token function">convertDecimalToFractionUsingGCD</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;3/5&quot;</span><span class="token punctuation">,</span> <span class="token function">convertDecimalToFractionUsingGCD</span><span class="token punctuation">(</span><span class="token number">0.6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;17/20&quot;</span><span class="token punctuation">,</span> <span class="token function">convertDecimalToFractionUsingGCD</span><span class="token punctuation">(</span><span class="token number">0.85</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;5/4&quot;</span><span class="token punctuation">,</span> <span class="token function">convertDecimalToFractionUsingGCD</span><span class="token punctuation">(</span><span class="token number">1.25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;4/3&quot;</span><span class="token punctuation">,</span> <span class="token function">convertDecimalToFractionUsingGCD</span><span class="token punctuation">(</span><span class="token number">1.333333333</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然这种方法在寻找GCD方面是高效的，但对于非常大的数字来说，它可能会变得计算上很昂贵。这是因为每次递归调用都涉及计算取模操作(%)，这可能对大输入来说很慢。</p><ol start="4"><li>使用Apache Commons Math</li></ol><p>最后，我们也可以像Apache Commons Math这样的库来将十进制转换为分数。在这种情况下，我们利用Apache Commons Math中的_Fraction_类将十进制转换为分数：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> <span class="token function">convertDecimalToFractionUsingApacheCommonsMath</span><span class="token punctuation">(</span><span class="token keyword">double</span> decimal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Fraction</span> fraction <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fraction</span><span class="token punctuation">(</span>decimal<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> fraction<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要将十进制转换为分数，我们通过将十进制值传递给其构造函数来创建一个_Fraction_对象。一旦我们有了表示十进制值的_Fraction_对象，我们可以调用其_toString()_方法来获取分数的字符串表示。</p><p>_toString()_方法以“分子/分母”的形式返回分数：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;1 / 2&quot;</span><span class="token punctuation">,</span> <span class="token function">convertDecimalToFractionUsingApacheCommonsMath</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;1 / 10&quot;</span><span class="token punctuation">,</span> <span class="token function">convertDecimalToFractionUsingApacheCommonsMath</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;3 / 5&quot;</span><span class="token punctuation">,</span> <span class="token function">convertDecimalToFractionUsingApacheCommonsMath</span><span class="token punctuation">(</span><span class="token number">0.6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;17 / 20&quot;</span><span class="token punctuation">,</span> <span class="token function">convertDecimalToFractionUsingApacheCommonsMath</span><span class="token punctuation">(</span><span class="token number">0.85</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;5 / 4&quot;</span><span class="token punctuation">,</span> <span class="token function">convertDecimalToFractionUsingApacheCommonsMath</span><span class="token punctuation">(</span><span class="token number">1.25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;4 / 3&quot;</span><span class="token punctuation">,</span> <span class="token function">convertDecimalToFractionUsingApacheCommonsMath</span><span class="token punctuation">(</span><span class="token number">1.333333333</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>处理循环小数</li></ol><p>我们可能会观察到，将十进制值1.333333333应用于前两种方法和Apache Commons Math库的结果不同。这是因为它们以不同的方式处理循环小数。</p><p>循环小数是在小数点后无限重复的数字序列。例如，十进制数1.333333333在小数点后有一个无限重复的数字3序列。</p><p>要将循环小数转换为分数，我们首先确定在小数点后无限重复的数字序列：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> <span class="token function">extractRepeatingDecimal</span><span class="token punctuation">(</span><span class="token class-name">String</span> fractionalPart<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> length <span class="token operator">=</span> fractionalPart<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i \\<span class="token operator">&lt;=</span> length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> sub <span class="token operator">=</span> fractionalPart<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> repeating <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">+</span> i \\<span class="token operator">&lt;=</span> length<span class="token punctuation">;</span> j <span class="token operator">+=</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fractionalPart<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> j <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                repeating <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>repeating<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> sub<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们增强_convertDecimalToFractionUsingGCD()_以处理循环小数：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> <span class="token function">convertDecimalToFractionUsingGCDRepeating</span><span class="token punctuation">(</span><span class="token keyword">double</span> decimal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> decimalStr <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>decimal<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> indexOfDot <span class="token operator">=</span> decimalStr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> afterDot <span class="token operator">=</span> decimalStr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>indexOfDot <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> repeatingNumber <span class="token operator">=</span> <span class="token function">extractRepeatingDecimal</span><span class="token punctuation">(</span>afterDot<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>repeatingNumber <span class="token operator">==</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">convertDecimalToFractionUsingGCD</span><span class="token punctuation">(</span>decimal<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">//...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一旦检测到循环小数，我们继续通过确定几个关键属性：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> n <span class="token operator">=</span> repeatingNumber<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> repeatingValue <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>repeatingNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> integerPart <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>decimalStr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> indexOfDot<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> denominator <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> numerator <span class="token operator">=</span> repeatingValue <span class="token operator">+</span> <span class="token punctuation">(</span>integerPart <span class="token operator">*</span> denominator<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><em>n</em>: 循环序列中的数字长度。</li><li><em>repeatingValue</em>: 循环数字的数值。</li><li><em>integerPart</em>: 从小数点前的十进制中提取的整数部分</li><li><em>denominator</em>: <strong>分母是通过将10提高到_n_的幂并减去1得出的</strong></li><li>分子：通过将_repeatingValue_与_integerPart_和分母的乘积相加来计算分子。</li></ul><p>接下来，我们可以应用_gcd()_方法来计算分子和分母的GCD：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> gcd <span class="token operator">=</span> <span class="token function">gcd</span><span class="token punctuation">(</span>numerator<span class="token punctuation">,</span> denominator<span class="token punctuation">)</span><span class="token punctuation">;</span>
numerator <span class="token operator">/=</span> gcd<span class="token punctuation">;</span>
denominator <span class="token operator">/=</span> gcd<span class="token punctuation">;</span>
<span class="token keyword">return</span> numerator <span class="token operator">+</span> <span class="token string">&quot;/&quot;</span> <span class="token operator">+</span> denominator<span class="token punctuation">;</span>
\`\`\`现在，让我们验证我们处理循环小数的解决方案：

\`\`\`java
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;1/2&quot;</span><span class="token punctuation">,</span> <span class="token function">convertDecimalToFractionUsingGCDRepeating</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;17/20&quot;</span><span class="token punctuation">,</span> <span class="token function">convertDecimalToFractionUsingGCDRepeating</span><span class="token punctuation">(</span><span class="token number">0.85</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;5/4&quot;</span><span class="token punctuation">,</span> <span class="token function">convertDecimalToFractionUsingGCDRepeating</span><span class="token punctuation">(</span><span class="token number">1.25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;4/3&quot;</span><span class="token punctuation">,</span> <span class="token function">convertDecimalToFractionUsingGCDRepeating</span><span class="token punctuation">(</span><span class="token number">1.333333333</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;7/9&quot;</span><span class="token punctuation">,</span> <span class="token function">convertDecimalToFractionUsingGCDRepeating</span><span class="token punctuation">(</span><span class="token number">0.777777</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于测试案例_1.333333333_，我们确定循环数字_repeatingValue_是_3_。<strong>这意味着数字“<em>3</em>”在小数点后无限重复。</strong> 循环序列的长度是1，这表明循环模式由单一位的重复组成。</p><p><strong>接下来，我们通过将10提高到_n_的幂并减去1来确定分母，这将是</strong> <em>10^1 – 1 = 9</em>。分子通过将_repeatingValue_加到_integerPart_与分母的乘积上计算得出，这将是_3 + (1 * 9) = 12_。</p><p>到这一步为止，分数将是_12/9_。<strong>在我们应用_gcd()<em>方法简化分数后，我们得到了结果_4/3</em>。</strong></p><p>另外，需要注意的是，这种增强可能不适用于包含循环和非循环部分的十进制数，例如0.1123123123。</p><h2 id="_6-结论" tabindex="-1"><a class="header-anchor" href="#_6-结论"><span>6. 结论</span></a></h2><p>在本文中，我们探讨了几种将十进制转换为分数的方法。对于大多数情况，使用GCD方法在简单性和确保分数简化之间提供了良好的平衡。</p><p>如往常一样，示例的源代码可在GitHub上找到。 OK</p>`,50),e=[o];function c(l,i){return s(),a("div",null,e)}const k=n(p,[["render",c],["__file","Convert Decimal to Fraction in Java.html.vue"]]),d=JSON.parse(`{"path":"/posts/baeldung/Archive/Convert%20Decimal%20to%20Fraction%20in%20Java.html","title":"Java中将十进制转换为分数","lang":"zh-CN","frontmatter":{"date":"2024-06-13T00:00:00.000Z","category":["Java","编程"],"tag":["十进制转分数","Java"],"description":"Java中将十进制转换为分数 引言 分数是表示数字的另一种方式，由分子和分母组成。例如，分数3/5可以被看作是“5分之3”，表示的值与十进制数0.6相同。在本教程中，我们将探讨在Java中将十进制数字转换为分数的不同方法。 使用乘以10的幂 将十进制转换为分数的一种简单方法是将十进制乘以10的幂，然后使用结果的分子和分母作为分数。 以下是这种方法的代码...","head":[["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/Archive/Convert%20Decimal%20to%20Fraction%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Java中将十进制转换为分数"}],["meta",{"property":"og:description","content":"Java中将十进制转换为分数 引言 分数是表示数字的另一种方式，由分子和分母组成。例如，分数3/5可以被看作是“5分之3”，表示的值与十进制数0.6相同。在本教程中，我们将探讨在Java中将十进制数字转换为分数的不同方法。 使用乘以10的幂 将十进制转换为分数的一种简单方法是将十进制乘以10的幂，然后使用结果的分子和分母作为分数。 以下是这种方法的代码..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-21T09:54:56.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"十进制转分数"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2024-06-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-21T09:54:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java中将十进制转换为分数\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-13T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-21T09:54:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]]},"headers":[{"level":2,"title":"6. 结论","slug":"_6-结论","link":"#_6-结论","children":[]}],"git":{"createdTime":1718963696000,"updatedTime":1718963696000,"contributors":[{"name":"Lance Li","email":"lance.jx.li@gtomato.com","commits":1}]},"readingTime":{"minutes":5.86,"words":1757},"filePathRelative":"posts/baeldung/Archive/Convert Decimal to Fraction in Java.md","localizedDate":"2024年6月13日","excerpt":"\\n<ol>\\n<li>引言</li>\\n</ol>\\n<p>分数是表示数字的另一种方式，由分子和分母组成。例如，分数3/5可以被看作是“5分之3”，表示的值与十进制数0.6相同。在本教程中，我们将探讨在Java中将十进制数字转换为分数的不同方法。</p>\\n<ol start=\\"2\\">\\n<li>使用乘以10的幂</li>\\n</ol>\\n<p>将十进制转换为分数的一种简单方法是将十进制乘以10的幂，然后使用结果的分子和分母作为分数。</p>\\n<p>以下是这种方法的代码片段：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token class-name\\">String</span> <span class=\\"token function\\">convertDecimalToFractionUsingMultiplyingWithPowerOf10</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">double</span> decimal<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token class-name\\">String</span> decimalStr <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">valueOf</span><span class=\\"token punctuation\\">(</span>decimal<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">int</span> decimalPlaces <span class=\\"token operator\\">=</span> decimalStr<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">length</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span> decimalStr<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">indexOf</span><span class=\\"token punctuation\\">(</span><span class=\\"token char\\">'.'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">long</span> denominator <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">long</span><span class=\\"token punctuation\\">)</span> <span class=\\"token class-name\\">Math</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">pow</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">10</span><span class=\\"token punctuation\\">,</span> decimalPlaces<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">long</span> numerator <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">long</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">(</span>decimal <span class=\\"token operator\\">*</span> denominator<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">return</span> numerator <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"/\\"</span> <span class=\\"token operator\\">+</span> denominator<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}`);export{k as comp,d as data};
