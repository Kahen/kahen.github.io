import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-BTwZI-W8.js";const e={},o=t(`<hr><h1 id="将数组转换为字符串-baeldung-关于-kotlin-将数组转换为字符串-baeldung-关于-kotlin" tabindex="-1"><a class="header-anchor" href="#将数组转换为字符串-baeldung-关于-kotlin-将数组转换为字符串-baeldung-关于-kotlin"><span>将数组转换为字符串 | Baeldung 关于 Kotlin## 将数组转换为字符串 | Baeldung 关于 Kotlin</span></a></h1><p>在本教程中，我们将讨论如何在 Kotlin 中将数组内容转换为字符串。首先，我们将探索四种不同的方法来实现这一点。然后，我们将根据它们的简洁性、不可变性和简单性进行比较。</p><p>我们将从内置方法 <code>contentToString()</code> 开始，该方法内部使用 Java 的静态方法 <code>Arrays.toString()</code>。之后，我们将学习如何使用 <code>reduce()</code> 和 <code>fold()</code> 聚合元素。最后，我们将通过在简单的 for 循环中连接元素来实现相同的功能。</p><h3 id="_2-contenttostring" tabindex="-1"><a class="header-anchor" href="#_2-contenttostring"><span>2. <code>contentToString()</code></span></a></h3><p><strong><code>contentToString()</code> 方法是将数组内容转换为字符串的直接方式。</strong> 此方法返回一个包含数组中所有元素的字符串，元素之间用逗号分隔：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> stringArray<span class="token operator">:</span> Array\`\`<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span>\`\` <span class="token operator">=</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;java&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;kotlin&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;scala&quot;</span></span><span class="token punctuation">)</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;[java, kotlin, scala]&quot;</span></span><span class="token punctuation">,</span> stringArray<span class="token punctuation">.</span><span class="token function">contentToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，如果我们在非字符串元素的数组上调用 <code>contentToString()</code>，将首先调用 <code>toString()</code> 方法：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> intArray<span class="token operator">:</span> IntArray <span class="token operator">=</span> <span class="token function">intArrayOf</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;[9, 8, 7, 6]&quot;</span></span><span class="token punctuation">,</span> intArray<span class="token punctuation">.</span><span class="token function">contentToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这是一种快速将内容转换为字符串的便捷方式，对于日志记录和调试非常有用。然而，我们将无法控制结果字符串的结构。例如，如果我们想要去掉外围的方括号或使用不同的分隔符，我们将需要调用其他方法，如 <code>replace()</code>。</p><h3 id="_3-reduce" tabindex="-1"><a class="header-anchor" href="#_3-reduce"><span>3. <code>reduce()</code></span></a></h3><p><strong><code>reduce()</code> 方法提供了更多的灵活性，允许我们完全控制结果字符串的结构。</strong> 例如，我们可以使用它来去掉外围的方括号，并将元素用分号而不是逗号连接：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> stringArray<span class="token operator">:</span> Array\`\`<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span>\`\` <span class="token operator">=</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;java&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;kotlin&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;scala&quot;</span></span><span class="token punctuation">)</span>

<span class="token keyword">val</span> result <span class="token operator">=</span> stringArray<span class="token punctuation">.</span><span class="token function">reduce</span> <span class="token punctuation">{</span> result<span class="token punctuation">,</span> nr <span class="token operator">-&gt;</span> <span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">result</span></span><span class="token string">; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">nr</span></span><span class="token string">&quot;</span></span> <span class="token punctuation">}</span>

<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;java; kotlin; scala&quot;</span></span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>reduce()</code> 方法将多个元素聚合成一个类型的结果元素。因此，如果我们不是从一个字符串数组开始，我们将需要手动 <code>map()</code> 元素到它们的字符串等价物：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> intArray<span class="token operator">:</span> IntArray <span class="token operator">=</span> <span class="token function">intArrayOf</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>

<span class="token keyword">val</span> result <span class="token operator">=</span> intArray
  <span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
  <span class="token punctuation">.</span><span class="token function">reduce</span> <span class="token punctuation">{</span> result<span class="token punctuation">,</span> nr <span class="token operator">-&gt;</span> <span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">result</span></span><span class="token string">; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">nr</span></span><span class="token string">&quot;</span></span> <span class="token punctuation">}</span>

<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;9; 8; 7; 6&quot;</span></span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如我们所注意到的，这种方法让我们完全控制最终结果的结构。首先，我们可以自定义 <code>map()</code> 方法来定义每个元素作为字符串的显示方式。然后，我们可以指定这些元素应该如何通过 <code>reduce()</code> 连接在一起。</p><h3 id="_4-fold" tabindex="-1"><a class="header-anchor" href="#_4-fold"><span>4. <code>fold()</code></span></a></h3><p><strong>我们还可以使用 <code>fold()</code> 方法来实现这一点，它的功能类似于 <code>reduce()</code>，但提供了修改聚合类型的额外灵活性。</strong> 这使我们能够完全跳过 <code>map()</code> 步骤，并在我们的场景中提供一个默认值，例如空字符串。</p><p>然而，我们传递给 <code>fold()</code> 方法的空字符串将用作中间结果变量的初始值。因此，我们需要添加一个 if 语句，以避免在字符串开头添加额外的分号：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> intArray<span class="token operator">:</span> IntArray <span class="token operator">=</span> <span class="token function">intArrayOf</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>

<span class="token keyword">val</span> result <span class="token operator">=</span> intArray<span class="token punctuation">.</span><span class="token function">fold</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> result<span class="token punctuation">,</span> nr <span class="token operator">-&gt;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">nr</span></span><span class="token string">&quot;</span></span> <span class="token keyword">else</span> <span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">result</span></span><span class="token string">; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">nr</span></span><span class="token string">&quot;</span></span>
<span class="token punctuation">}</span>

<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;9; 8; 7; 6&quot;</span></span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-for-循环" tabindex="-1"><a class="header-anchor" href="#_5-for-循环"><span>5. <code>for</code> 循环</span></a></h3><p><strong>最后，我们可以使用一个简单的 <code>for</code> 循环和一个字符串变量，我们不断地向其中追加元素。</strong> 让我们从初始化这个字符串为数组的第一个元素开始，然后当我们迭代集合时更新它：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> intArray<span class="token operator">:</span> IntArray <span class="token operator">=</span> <span class="token function">intArrayOf</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>

<span class="token keyword">var</span> result <span class="token operator">=</span> intArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span> until intArray<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    result <span class="token operator">+=</span> <span class="token string-literal singleline"><span class="token string">&quot;; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">intArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span>
<span class="token punctuation">}</span>

<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;9; 8; 7; 6&quot;</span></span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-结论" tabindex="-1"><a class="header-anchor" href="#_6-结论"><span>6. 结论</span></a></h3><p>在本教程中，我们探索了将数组内容转换为字符串的四种不同方式。我们首先研究了内置方法 <code>contentToString()</code>。之后，我们探索了从函数式编程继承的方法，如 <code>reduce()</code> 和 <code>fold()</code>。最后，我们讨论了使用简单的 <code>for</code> 循环和一个非最终字符串变量的不那么声明性的解决方案。</p><p>如常，示例的源代码可在 GitHub 上获取。</p><p>OK</p>`,27),p=[o];function l(i,c){return a(),s("div",null,p)}const d=n(e,[["render",l],["__file","2024-07-26-Convert an Array to a String.html.vue"]]),k=JSON.parse('{"path":"/posts/baeldung/2024-07-26/2024-07-26-Convert%20an%20Array%20to%20a%20String.html","title":"将数组转换为字符串 | Baeldung 关于 Kotlin## 将数组转换为字符串 | Baeldung 关于 Kotlin","lang":"zh-CN","frontmatter":{"date":"2022-11-01T00:00:00.000Z","category":["Kotlin"],"tag":["Array","String","Conversion"],"head":[["meta",{"name":"keywords","content":"Kotlin, Array, String, Conversion"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-26/2024-07-26-Convert%20an%20Array%20to%20a%20String.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"将数组转换为字符串 | Baeldung 关于 Kotlin## 将数组转换为字符串 | Baeldung 关于 Kotlin"}],["meta",{"property":"og:description","content":"将数组转换为字符串 | Baeldung 关于 Kotlin## 将数组转换为字符串 | Baeldung 关于 Kotlin 在本教程中，我们将讨论如何在 Kotlin 中将数组内容转换为字符串。首先，我们将探索四种不同的方法来实现这一点。然后，我们将根据它们的简洁性、不可变性和简单性进行比较。 我们将从内置方法 contentToString() ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-26T12:56:16.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Array"}],["meta",{"property":"article:tag","content":"String"}],["meta",{"property":"article:tag","content":"Conversion"}],["meta",{"property":"article:published_time","content":"2022-11-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-26T12:56:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"将数组转换为字符串 | Baeldung 关于 Kotlin## 将数组转换为字符串 | Baeldung 关于 Kotlin\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-11-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-26T12:56:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"将数组转换为字符串 | Baeldung 关于 Kotlin## 将数组转换为字符串 | Baeldung 关于 Kotlin 在本教程中，我们将讨论如何在 Kotlin 中将数组内容转换为字符串。首先，我们将探索四种不同的方法来实现这一点。然后，我们将根据它们的简洁性、不可变性和简单性进行比较。 我们将从内置方法 contentToString() ..."},"headers":[{"level":3,"title":"2. contentToString()","slug":"_2-contenttostring","link":"#_2-contenttostring","children":[]},{"level":3,"title":"3. reduce()","slug":"_3-reduce","link":"#_3-reduce","children":[]},{"level":3,"title":"4. fold()","slug":"_4-fold","link":"#_4-fold","children":[]},{"level":3,"title":"5. for 循环","slug":"_5-for-循环","link":"#_5-for-循环","children":[]},{"level":3,"title":"6. 结论","slug":"_6-结论","link":"#_6-结论","children":[]}],"git":{"createdTime":1721998576000,"updatedTime":1721998576000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":3.37,"words":1010},"filePathRelative":"posts/baeldung/2024-07-26/2024-07-26-Convert an Array to a String.md","localizedDate":"2022年11月1日","excerpt":"<hr>\\n<h1>将数组转换为字符串 | Baeldung 关于 Kotlin## 将数组转换为字符串 | Baeldung 关于 Kotlin</h1>\\n<p>在本教程中，我们将讨论如何在 Kotlin 中将数组内容转换为字符串。首先，我们将探索四种不同的方法来实现这一点。然后，我们将根据它们的简洁性、不可变性和简单性进行比较。</p>\\n<p>我们将从内置方法 <code>contentToString()</code> 开始，该方法内部使用 Java 的静态方法 <code>Arrays.toString()</code>。之后，我们将学习如何使用 <code>reduce()</code> 和 <code>fold()</code> 聚合元素。最后，我们将通过在简单的 for 循环中连接元素来实现相同的功能。</p>","autoDesc":true}');export{d as comp,k as data};
