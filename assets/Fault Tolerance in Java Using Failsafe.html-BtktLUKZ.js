import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-BwYTipZw.js";const p={},e=t('<h1 id="java中使用failsafe实现容错" tabindex="-1"><a class="header-anchor" href="#java中使用failsafe实现容错"><span>Java中使用Failsafe实现容错</span></a></h1><p>在这篇文章中，我们将探索Failsafe库，并看到如何将其集成到我们的代码中，使其对故障情况更加有弹性。</p><h2 id="_2-什么是容错" tabindex="-1"><a class="header-anchor" href="#_2-什么是容错"><span>2. 什么是容错？</span></a></h2><p>无论我们多么精心构建应用程序，总会有出错的方式。通常，这些是我们无法控制的——例如，调用一个不可用的远程服务。因此，我们必须构建能够容忍这些故障并为用户提供最佳体验的应用程序。</p><p>我们可以根据不同的情况以许多不同的方式对这些故障做出反应。例如，如果我们正在调用一个我们知道会有间歇性中断的远程服务，我们可以重试并希望调用能够成功。或者我们可以尝试调用提供相同功能的另一个服务。</p><p>还有方法可以结构化我们的代码以避免这些情况。例如，限制对同一远程服务的并发调用数量将减少其负载。</p><h2 id="_3-依赖关系" tabindex="-1"><a class="header-anchor" href="#_3-依赖关系"><span>3. 依赖关系</span></a></h2><p>在我们使用Failsafe之前，我们需要在构建中包含最新版本，目前是3.3.2。</p><p>如果我们使用Maven，我们可以在_pom.xml_中包含它：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`dev.failsafe`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`failsafe`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`3.3.2`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者如果我们使用Gradle，我们可以在_build.gradle_中包含它：</p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code><span class="token function">implementation</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;dev.failsafe:failsafe:3.3.2&quot;</span></span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时，我们已经准备好在应用程序中使用它了。</p><h2 id="_4-使用failsafe执行操作" tabindex="-1"><a class="header-anchor" href="#_4-使用failsafe执行操作"><span>4. 使用Failsafe执行操作</span></a></h2><p>Failsafe使用策略的概念。每个策略决定它是否认为操作是失败的，以及它将如何对此做出反应。</p><h3 id="_4-1-确定失败" tabindex="-1"><a class="header-anchor" href="#_4-1-确定失败"><span>4.1. 确定失败</span></a></h3><p>默认情况下，策略会认为如果操作抛出任何_异常_，则为失败。然而，<strong>我们可以配置策略仅处理我们感兴趣的确切异常集</strong>，无论是通过类型还是通过提供检查它们的lambda：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>policy\n  <span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">IOException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">handleIf</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> e <span class="token keyword">instanceof</span> <span class="token class-name">IOException</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>我们还可以将特定操作结果配置为失败</strong>，无论是作为确切值还是通过提供lambda来检查它：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>policy\n  <span class="token punctuation">.</span><span class="token function">handleResult</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">handleResultIf</span><span class="token punctuation">(</span>result <span class="token operator">-&gt;</span> result `<span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，策略始终将所有异常视为失败。如果我们添加了异常处理，这将替换这种行为，但<strong>添加对特定结果的处理将是策略异常处理的补充</strong>。此外，我们所有的handle检查都是累加的——我们可以添加尽可能多的检查，如果任何检查通过，策略将认为操作失败。</p><h3 id="_4-2-组合策略" tabindex="-1"><a class="header-anchor" href="#_4-2-组合策略"><span>4.2. 组合策略</span></a></h3><p><strong>一旦我们有了策略，我们可以从中构建一个执行器。这是我们执行功能并获取结果的方式——无论是我们操作的实际结果还是由我们的策略修改的结果。</strong> 我们可以通过将所有策略传递到_Failsafe.with()_中，或者我们可以使用_compose()_方法来扩展它：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Failsafe</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span>defaultFallback<span class="token punctuation">,</span> npeFallback<span class="token punctuation">,</span> ioFallback<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">compose</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">compose</span><span class="token punctuation">(</span>retry<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以按任何顺序添加任意多的策略。策略始终按照它们添加的顺序执行，每个策略都包装下一个策略。所，上面的代码将是：</p><p>每个策略都将适当地对它所包装的策略或操作的异常或返回值做出反应。这允许我们根据需要采取行动。例如，上述代码将超时应用于所有重试。我们也可以将其交换，以便将超时应用于每个单独的重试尝试。</p><h3 id="_4-3-执行操作" tabindex="-1"><a class="header-anchor" href="#_4-3-执行操作"><span>4.3. 执行操作</span></a></h3><p>一旦我们组合了策略，Failsafe将返回一个_FailsafeExecutor_实例给我们。<strong>然后，这个实例有一组方法，我们可以使用它们来执行我们的操作，具体取决于我们想要执行什么以及我们希望如何返回结果。</strong></p><p>执行操作最直接的方式是_T_ <em>get<code>&lt;T&gt;(CheckedSupplier&lt;T&gt;</code>)</em> 和 <em>void</em> <em>run(CheckedRunnable)</em>。_CheckedSupplier_和_CheckedRunnable_都是功能接口，这意味着如果需要，我们可以使用lambda或方法引用来调用这些方法。</p><p>这两种方法的区别在于_get()<em>将返回操作的结果，而_run()<em>将返回_void</em>——并且操作也必须返回_void</em>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Failsafe</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span>policy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">runSomething</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token class-name">Failsafe</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span>policy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">doSomething</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，我们还有各种方法可以异步运行我们的操作，返回结果的_CompletableFuture_。然而，这些不在本文的讨论范围内。</p><h2 id="_5-failsafe策略" tabindex="-1"><a class="header-anchor" href="#_5-failsafe策略"><span>5. Failsafe策略</span></a></h2><p><strong>现在我们知道如何构建_FailsafeExecutor_来执行我们的操作，我们需要构建使用它的策略。Failsafe提供了几种标准策略。</strong> 每个策略都使用构建器模式来简化构建过程。</p><h3 id="_5-1-回退策略" tabindex="-1"><a class="header-anchor" href="#_5-1-回退策略"><span>5.1. 回退策略</span></a></h3><p><strong>我们可以使用的最简单策略是_Fallback_。这个策略将允许我们在链式操作失败时提供一个新的结果。</strong></p><p>使用这种方法最简单的方式是简单地返回一个静态值：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Fallback</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>`` policy <span class="token operator">=</span> <span class="token class-name">Fallback</span><span class="token punctuation">.</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>``<span class="token function">builder</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在这种情况下，如果我们的操作由于任何原因失败，我们的策略将返回一个固定的值“0”。</p><p>此外，我们可以使用_CheckedRunnable_或_CheckedSupplier_来生成我们的替代值。根据我们的需求，这可能像在返回一个固定值之前写入日志消息一样简单，或者像运行一个完全不同的执行路径一样复杂：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Fallback</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Result</span><span class="token punctuation">&gt;</span></span>```` backupService <span class="token operator">=</span> <span class="token class-name">Fallback</span><span class="token punctuation">.</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Result</span><span class="token punctuation">&gt;</span></span>````<span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">callBackupService</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">Result</span> result <span class="token operator">=</span> <span class="token class-name">Failsafe</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span>backupService<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">callPrimaryService</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这种情况下，我们将执行_callPrimaryService()_。如果这失败了，我们将自动执行_callBackupService()_并尝试用这种方式获得结果。</p><p>最后，我们可以使用_Fallback.ofException()_在任何失败的情况下抛出一个特定的异常。这允许我们将任何配置的失败原因归结为一个预期的异常，然后我们可以按需处理：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Fallback</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Result</span><span class="token punctuation">&gt;</span></span>```` throwOnFailure <span class="token operator">=</span> <span class="token class-name">Fallback</span><span class="token punctuation">.</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Result</span><span class="token punctuation">&gt;</span></span>````<span class="token function">ofException</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">OperationFailedException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-2-重试策略" tabindex="-1"><a class="header-anchor" href="#_5-2-重试策略"><span>5.2. 重试策略</span></a></h3><p><strong>_Fallback_策略允许我们在操作失败时给出一个替代结果。而_Retry_策略允许我们简单地再次尝试原始操作。</strong></p><p>没有配置的情况下，这个策略将调用操作最多三次，并在成功时返回结果，或者如果我们从未获得成功，则抛出_FailsafeException_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">RetryPolicy</span>``````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>`````````````````````````````````` retryPolicy <span class="token operator">=</span> <span class="token class-name">RetryPolicy</span><span class="token punctuation">.</span>``````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>``````````````````````````````````<span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这已经非常有用，因为这意味着如果我们有一个偶尔出错的操作，我们可以重试几次然后再放弃。</p><p>然而，我们可以进一步配置这种行为。我们能做的第一件事是使用_withMaxAttempts()_调用来调整它将重试的次数：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">RetryPolicy</span>``````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>`````````````````````````````````` retryPolicy <span class="token operator">=</span> <span class="token class-name">RetryPolicy</span><span class="token punctuation">.</span>``````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>``````````````````````````````````<span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">withMaxAttempts</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，它将执行操作最多五次而不是默认的三次。</p><p>我们还可以配置它在每次尝试之间等待固定的时间量。这在短时故障（如网络闪烁）不会立即自行修复的情况下非常有用：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">RetryPolicy</span>``````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>`````````````````````````````````` retryPolicy <span class="token operator">=</span> <span class="token class-name">RetryPolicy</span><span class="token punctuation">.</span>``````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>``````````````````````````````````<span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">withDelay</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们还可以为此使用更复杂的变体。例如，_withBackoff()_将允许我们配置递增的延迟：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">RetryPolicy</span>``````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>`````````````````````````````````` retryPolicy <span class="token operator">=</span> <span class="token class-name">RetryPolicy</span><span class="token punctuation">.</span>``````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>``````````````````````````````````<span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">withMaxAttempts</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">withBackoff</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这将在第一次失败后延迟100毫秒在第20次失败后延迟2000毫秒，并在中间失败时逐渐增加延迟。</p><h3 id="_5-3-超时策略" tabindex="-1"><a class="header-anchor" href="#_5-3-超时策略"><span>5.3. 超时策略</span></a></h3><p><strong>Fallback和Retry策略帮助我们从操作中获得成功的结果，而Timeout策略则相反。我们可以使用它来强制失败，如果我们调用的操作花费的时间比我们希望的要长。</strong> 这在我们需要在操作花费太长时间时失败时非常有价值。</p><p>当我们构建我们的_Timeout_时，我们需要提供操作将失败的目标持续时间：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Timeout</span>``````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>`````````````````````````````````` timeout <span class="token operator">=</span> <span class="token class-name">Timeout</span><span class="token punctuation">.</span>``````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>``````````````````````````````````<span class="token function">builder</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>默认情况下，这将运行操作直到完成，然后如果它花费的时间超过了我们提供的持续时间就失败。</p><p>或者，我们可以配置它在超时到达时中断操作而不是运行到完成。这在我们需要快速响应而不是仅仅因为太慢而失败时非常有用：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Timeout</span>``````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>`````````````````````````````````` timeout <span class="token operator">=</span> <span class="token class-name">Timeout</span><span class="token punctuation">.</span>``````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>``````````````````````````````````<span class="token function">builder</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">withInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以将_Timeout_策略与_Retry_策略组合使用。如果我们在重试之外组合超时，那么超时周期将跨越所有重试：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Timeout</span>``````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>`````````````````````````````````` timeoutPolicy <span class="token operator">=</span> <span class="token class-name">Timeout</span><span class="token punctuation">.</span>``````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>``````````````````````````````````<span class="token function">builder</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">withInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">RetryPolicy</span>``````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>`````````````````````````````````` retryPolicy <span class="token operator">=</span> <span class="token class-name">RetryPolicy</span><span class="token punctuation">.</span>``````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>``````````````````````````````````<span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">withMaxAttempts</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">withBackoff</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">Failsafe</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span>timeoutPolicy<span class="token punctuation">,</span> retryPolicy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">perform</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这将尝试我们的操作最多20次，每次尝试之间有递增的延迟，但如果整个尝试超过10秒执行，将放弃。</p><p>相反，我们可以将超时组合在重试内部，以便每个单独的尝试都有超时配置：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Timeout</span>``````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>`````````````````````````````````` timeoutPolicy <span class="token operator">=</span> <span class="token class-name">Timeout</span><span class="token punctuation">.</span>``````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>``````````````````````````````````<span class="token function">builder</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">withInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">RetryPolicy</span>``````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>`````````````````````````````````` retryPolicy <span class="token operator">=</span> <span class="token class-name">RetryPolicy</span><span class="token punctuation">.</span>``````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>``````````````````````````````````<span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">withMaxAttempts</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">Failsafe</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span>retryPolicy<span class="token punctuation">,</span> timeoutPolicy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">perform</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这将尝试操作五次，并且每次尝试如果超过500毫秒将被取消。</p><h3 id="_5-4-舱壁策略" tabindex="-1"><a class="header-anchor" href="#_5-4-舱壁策略"><span>5.4. 舱壁策略</span></a></h3><p>到目前为止，我们看到的所有策略都是关于控制我们的应用程序如何对故障做出反应的。然而，还有一些策略我们可以使用来减少故障发生的机会。</p><p><strong>舱壁策略存在是为了限制同时执行操作的次数。这可以减少外部服务的负载，因此有助于降低它们失败的机会。</strong></p><p>当我们构建一个_Bulkhead_时，我们需要配置它支持的最大并发执行数量：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Bulkhead</span>``````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>`````````````````````````````````` bulkhead <span class="token operator">=</span> <span class="token class-name">Bulkhead</span><span class="token punctuation">.</span>``````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>``````````````````````````````````<span class="token function">builder</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>默认情况下，当舱壁已经达到容量时，将立即失败任何操作。</p><p>我们还可以配置舱壁在新操作进来时等待，如果容量开放，它将执行等待的任务：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Bulkhead</span>``````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>`````````````````````````````````` bulkhead <span class="token operator">=</span> <span class="token class-name">Bulkhead</span><span class="token punctuation">.</span>``````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>``````````````````````````````````<span class="token function">builder</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">withMaxWaitTime</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>任务将被允许通过舱壁，一旦容量可用，就按它们执行的顺序执行。任何等待时间超过此配置等待时间的任务将在等待时间到期时立即失败。然而，排在它们后面的其他任务可能随后会成功执行。</p><h3 id="_5-5-速率限制器策略" tabindex="-1"><a class="header-anchor" href="#_5-5-速率限制器策略"><span>5.5. 速率限制器策略</span></a></h3><p><strong>与舱壁类似，速率限制器有助于限制可以发生的操作执行次数。然而，与舱壁不同，舱壁只跟踪当前正在执行的操作数量，速率限制器限制了在给定时期内的操作数量。</strong></p><p>Failsafe为我们提供了两种速率限制器——突发型和平滑型。</p><p>突发型速率限制器使用固定时间窗口，并允许在此窗口内执行最大数量的操作：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">RateLimiter</span>``````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>`````````````````````````````````` rateLimiter <span class="token operator">=</span> <span class="token class-name">RateLimiter</span><span class="token punctuation">.</span>``````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>``````````````````````````````````<span class="token function">burstyBuilder</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">withMaxWaitTime</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这种情况下，我们每秒可以执行100个操作。我们已经配置了一个等待时间，操作可以阻塞直到它们被执行或失败。这些被称为突发型，因为在窗口结束时计数突然回到零，所以我们突然允许执行再次开始。</p><p>特别是，有了我们的等待时间，所有阻塞等待时间的执行将在速率限制器窗口结束时突然能够执行。</p><p>平滑型速率限制器则通过时间窗口分散执行：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">RateLimiter</span>``````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>`````````````````````````````````` rateLimiter <span class="token operator">=</span> <span class="token class-name">RateLimiter</span><span class="token punctuation">.</span>``````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>``````````````````````````````````<span class="token function">smoothBuilder</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">withMaxWaitTime</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这看起来与之前非常相似。然而，在这种情况下，执行将在窗口内平滑分布。这意味着不是在一秒钟内允许100次执行，而是每1/100秒允许一次执行。任何比这更快的执行将触及我们的等待时间，否则将失败。</p><h3 id="_5-6-断路器策略" tabindex="-1"><a class="header-anchor" href="#_5-6-断路器策略"><span>5.6. 断路器策略</span></a></h3><p><strong>与其他大多数策略不同，我们可以使用断路器让我们的应用程序在操作被认为已经失败时快速失败。</strong> 例如，如果我们正在调用远程服务并知道它没有响应，那么尝试是没有意义的——我们可以立即失败，而不必先花费时间和资源。</p><p><strong>断路器在三态系统中工作。</strong> 默认状态是Closed，这意味着所有操作都像断路器不存在一样被尝试。然而，如果这些操作中的足够多失败，断路器将移动到Open。</p><p>Open状态意味着没有操作被尝试，所有调用将立即失败。断路器将保持这种状态一段时间，然后移动到Half-Open。</p><p>Half-Open状态意味着操作被尝试，但我们有一个不同的失败阈值来确定我们是移动到Closed还是Open。</p><p>例如：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">CircuitBreaker</span>``````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>`````````````````````````````````` circuitBreaker <span class="token operator">=</span> <span class="token class-name">CircuitBreaker</span><span class="token punctuation">.</span>``````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>``````````````````````````````````<span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">withFailureThreshold</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">withDelay</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">withSuccessThreshold</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个设置将在我们在过去10个请求中有7个失败时从Closed移动到Open，在500毫秒后从Open移动到Half-Open，如果我们在过去10个请求中有4个成功，则从Half-Open移动到Closed，或者如果我们在过去5个请求中有2个失败，则回到Open。</p><p>我们还可以配置我们的失败阈值基于时间。例如，让我们在过去30秒内有五个失败时打开电路：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">CircuitBreaker</span>``````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>`````````````````````````````````` circuitBreaker <span class="token operator">=</span> <span class="token class-name">CircuitBreaker</span><span class="token punctuation">.</span>``````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>``````````````````````````````````<span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">withFailureThreshold</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们还可以将其配置为请求的百分比而不是固定数量。例如，让我们在任何5分钟期间有20%的失败率并且至少有100个请求时打开电路：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">CircuitBreaker</span>``````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>`````````````````````````````````` circuitBreaker <span class="token operator">=</span> <span class="token class-name">CircuitBreaker</span><span class="token punctuation">.</span>``````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>``````````````````````````````````<span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">withFailureRateThreshold</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMinutes</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样做允许我们更快地适应负载。如果我们的负载非常低，我们可能根本不想检查失败，但如果我们的负载非常高，失败的机会增加，所以我们希望只有在超过我们的阈值时才做出反应。</p><h2 id="_6-总结" tabindex="-1"><a class="header-anchor" href="#_6-总结"><span>6. 总结</span></a></h2><p>在这篇文章中，我们对Failsafe进行了广泛的介绍。这个库可以做更多，所以为什么不试试看看呢？</p><p>所有的例子都可以在GitHub上找到。 OK</p>',105),c=[e];function o(l,i){return s(),a("div",null,c)}const r=n(p,[["render",o],["__file","Fault Tolerance in Java Using Failsafe.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/Archive/Fault%20Tolerance%20in%20Java%20Using%20Failsafe.html","title":"Java中使用Failsafe实现容错","lang":"zh-CN","frontmatter":{"date":"2024-06-15T00:00:00.000Z","category":["Java"],"tag":["Failsafe","容错"],"description":"Java中使用Failsafe实现容错 在这篇文章中，我们将探索Failsafe库，并看到如何将其集成到我们的代码中，使其对故障情况更加有弹性。 2. 什么是容错？ 无论我们多么精心构建应用程序，总会有出错的方式。通常，这些是我们无法控制的——例如，调用一个不可用的远程服务。因此，我们必须构建能够容忍这些故障并为用户提供最佳体验的应用程序。 我们可以根...","head":[["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/Archive/Fault%20Tolerance%20in%20Java%20Using%20Failsafe.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Java中使用Failsafe实现容错"}],["meta",{"property":"og:description","content":"Java中使用Failsafe实现容错 在这篇文章中，我们将探索Failsafe库，并看到如何将其集成到我们的代码中，使其对故障情况更加有弹性。 2. 什么是容错？ 无论我们多么精心构建应用程序，总会有出错的方式。通常，这些是我们无法控制的——例如，调用一个不可用的远程服务。因此，我们必须构建能够容忍这些故障并为用户提供最佳体验的应用程序。 我们可以根..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-21T09:54:56.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Failsafe"}],["meta",{"property":"article:tag","content":"容错"}],["meta",{"property":"article:published_time","content":"2024-06-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-21T09:54:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java中使用Failsafe实现容错\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-15T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-21T09:54:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]]},"headers":[{"level":2,"title":"2. 什么是容错？","slug":"_2-什么是容错","link":"#_2-什么是容错","children":[]},{"level":2,"title":"3. 依赖关系","slug":"_3-依赖关系","link":"#_3-依赖关系","children":[]},{"level":2,"title":"4. 使用Failsafe执行操作","slug":"_4-使用failsafe执行操作","link":"#_4-使用failsafe执行操作","children":[{"level":3,"title":"4.1. 确定失败","slug":"_4-1-确定失败","link":"#_4-1-确定失败","children":[]},{"level":3,"title":"4.2. 组合策略","slug":"_4-2-组合策略","link":"#_4-2-组合策略","children":[]},{"level":3,"title":"4.3. 执行操作","slug":"_4-3-执行操作","link":"#_4-3-执行操作","children":[]}]},{"level":2,"title":"5. Failsafe策略","slug":"_5-failsafe策略","link":"#_5-failsafe策略","children":[{"level":3,"title":"5.1. 回退策略","slug":"_5-1-回退策略","link":"#_5-1-回退策略","children":[]},{"level":3,"title":"5.2. 重试策略","slug":"_5-2-重试策略","link":"#_5-2-重试策略","children":[]},{"level":3,"title":"5.3. 超时策略","slug":"_5-3-超时策略","link":"#_5-3-超时策略","children":[]},{"level":3,"title":"5.4. 舱壁策略","slug":"_5-4-舱壁策略","link":"#_5-4-舱壁策略","children":[]},{"level":3,"title":"5.5. 速率限制器策略","slug":"_5-5-速率限制器策略","link":"#_5-5-速率限制器策略","children":[]},{"level":3,"title":"5.6. 断路器策略","slug":"_5-6-断路器策略","link":"#_5-6-断路器策略","children":[]}]},{"level":2,"title":"6. 总结","slug":"_6-总结","link":"#_6-总结","children":[]}],"git":{"createdTime":1718963696000,"updatedTime":1718963696000,"contributors":[{"name":"Lance Li","email":"lance.jx.li@gtomato.com","commits":1}]},"readingTime":{"minutes":11.93,"words":3578},"filePathRelative":"posts/baeldung/Archive/Fault Tolerance in Java Using Failsafe.md","localizedDate":"2024年6月15日","excerpt":"\\n<p>在这篇文章中，我们将探索Failsafe库，并看到如何将其集成到我们的代码中，使其对故障情况更加有弹性。</p>\\n<h2>2. 什么是容错？</h2>\\n<p>无论我们多么精心构建应用程序，总会有出错的方式。通常，这些是我们无法控制的——例如，调用一个不可用的远程服务。因此，我们必须构建能够容忍这些故障并为用户提供最佳体验的应用程序。</p>\\n<p>我们可以根据不同的情况以许多不同的方式对这些故障做出反应。例如，如果我们正在调用一个我们知道会有间歇性中断的远程服务，我们可以重试并希望调用能够成功。或者我们可以尝试调用提供相同功能的另一个服务。</p>\\n<p>还有方法可以结构化我们的代码以避免这些情况。例如，限制对同一远程服务的并发调用数量将减少其负载。</p>","autoDesc":true}');export{r as comp,d as data};
