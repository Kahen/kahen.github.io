import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-CbPcg273.js";const p={},e=t('<h1 id="如何对xml文件进行xsd验证" tabindex="-1"><a class="header-anchor" href="#如何对xml文件进行xsd验证"><span>如何对XML文件进行XSD验证</span></a></h1><p>在本教程中，我们将演示如何对XML文件进行XSD文件验证。</p><h2 id="_2-xml和两个xsd文件的定义" tabindex="-1"><a class="header-anchor" href="#_2-xml和两个xsd文件的定义"><span>2. XML和两个XSD文件的定义</span></a></h2><p>考虑以下XML文件_baeldung.xml_，其中包含一个名称和一个地址，地址本身由邮政编码和城市组成：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>```<span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>```\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>individual</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>`Baeldung`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>address</span><span class="token punctuation">&gt;</span></span>`\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>zip</span><span class="token punctuation">&gt;</span></span>`00001`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>zip</span><span class="token punctuation">&gt;</span></span>`\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>city</span><span class="token punctuation">&gt;</span></span>`New York`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>city</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>address</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>individual</span><span class="token punctuation">&gt;</span></span>`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>_baeldung.xml_的内容完全符合_person.xsd_文件的描述：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>```<span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>```\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xs:</span>schema</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xs</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xs:</span>element</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>individual<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>``\n        ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xs:</span>complexType</span><span class="token punctuation">&gt;</span></span>````\n            ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xs:</span>sequence</span><span class="token punctuation">&gt;</span></span>````\n                `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xs:</span>element</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xs:string<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>`\n                ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xs:</span>element</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>address<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>``\n                    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xs:</span>complexType</span><span class="token punctuation">&gt;</span></span>````\n                        ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xs:</span>sequence</span><span class="token punctuation">&gt;</span></span>````\n                            ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xs:</span>element</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>zip<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xs:positiveInteger<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>``\n                            ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xs:</span>element</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>city<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xs:string<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>``\n                        ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xs:</span>sequence</span><span class="token punctuation">&gt;</span></span>````\n                    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xs:</span>complexType</span><span class="token punctuation">&gt;</span></span>````\n                `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xs:</span>element</span><span class="token punctuation">&gt;</span></span>`````\n            ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xs:</span>sequence</span><span class="token punctuation">&gt;</span></span>````\n        ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xs:</span>complexType</span><span class="token punctuation">&gt;</span></span>````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xs:</span>element</span><span class="token punctuation">&gt;</span></span>`````\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xs:</span>schema</span><span class="token punctuation">&gt;</span></span>``\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然而，我们的XML文件不符合以下XSD文件_full-person.xsd_：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>```<span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>```\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xs:</span>schema</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xs</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xs:</span>element</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>individual<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>``\n        ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xs:</span>complexType</span><span class="token punctuation">&gt;</span></span>````\n            ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xs:</span>sequence</span><span class="token punctuation">&gt;</span></span>````\n                `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xs:</span>element</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>`\n                    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xs:</span>simpleType</span><span class="token punctuation">&gt;</span></span>`\n                        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xs:</span>restriction</span> <span class="token attr-name">base</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xs:string<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>`\n                            `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xs:</span>maxLength</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>5<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>`\n                        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xs:</span>restriction</span><span class="token punctuation">&gt;</span></span>`\n                    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xs:</span>simpleType</span><span class="token punctuation">&gt;</span></span>`\n                `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xs:</span>element</span><span class="token punctuation">&gt;</span></span>`````\n                ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xs:</span>element</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>address<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>``\n                    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xs:</span>complexType</span><span class="token punctuation">&gt;</span></span>````\n                        ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xs:</span>sequence</span><span class="token punctuation">&gt;</span></span>````\n                            ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xs:</span>element</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>zip<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xs:positiveInteger<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>``\n                            ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xs:</span>element</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>city<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xs:string<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>``\n                            `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xs:</span>element</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>street<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xs:string<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>`\n                        ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xs:</span>sequence</span><span class="token punctuation">&gt;</span></span>````\n                    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xs:</span>complexType</span><span class="token punctuation">&gt;</span></span>````\n                `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xs:</span>element</span><span class="token punctuation">&gt;</span></span>`````\n            ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xs:</span>sequence</span><span class="token punctuation">&gt;</span></span>````\n        ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xs:</span>complexType</span><span class="token punctuation">&gt;</span></span>````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xs:</span>element</span><span class="token punctuation">&gt;</span></span>`````\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xs:</span>schema</span><span class="token punctuation">&gt;</span></span>``\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>存在两个问题：</p><ul><li>名称属性限制为最多5个字符</li><li>地址期望有一个街道属性</li></ul><p>让我们看看如何使用Java来获取这些信息。</p><h2 id="_3-对xml文件进行xsd验证" tabindex="-1"><a class="header-anchor" href="#_3-对xml文件进行xsd验证"><span>3. 对XML文件进行XSD验证</span></a></h2><p><strong>_javax.xml.validation_包定义了一个API，用于验证XML文档。</strong></p><p>首先，我们将准备一个能够读取遵循XML Schema 1.0规范的文件的_SchemaFactory_。然后，我们将使用这个_SchemaFactory_来创建对应于我们的XSD文件的_Schema_。一个_Schema_代表一组约束。</p><p>最后，我们将从_Schema_中检索_Validator_。一个_Validator_是一个处理器，它检查XML文档是否符合_Schema_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">Validator</span> <span class="token function">initValidator</span><span class="token punctuation">(</span><span class="token class-name">String</span> xsdPath<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SAXException</span> <span class="token punctuation">{</span>\n    <span class="token class-name">SchemaFactory</span> factory <span class="token operator">=</span> <span class="token class-name">SchemaFactory</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">XMLConstants</span><span class="token punctuation">.</span><span class="token constant">W3C_XML_SCHEMA_NS_URI</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Source</span> schemaFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StreamSource</span><span class="token punctuation">(</span><span class="token function">getFile</span><span class="token punctuation">(</span>xsdPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Schema</span> schema <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newSchema</span><span class="token punctuation">(</span>schemaFile<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> schema<span class="token punctuation">.</span><span class="token function">newValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这段代码中，<em>getFile_方法允许我们将XSD读入一个_File</em>。在我们的示例中，我们将文件放在资源目录下，所以这个方法读取：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">File</span> <span class="token function">getFile</span><span class="token punctuation">(</span><span class="token class-name">String</span> location<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，当我们创建_Schema_时，如果XSD文件无效，可能会抛出_SAXException_。</p><p><strong>现在我们可以使用_Validator_来验证XML文件是否符合XSD描述。</strong> <em>validate_方法需要我们将_File_转换为_StreamSource</em>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">SAXException</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Validator</span> validator <span class="token operator">=</span> <span class="token function">initValidator</span><span class="token punctuation">(</span>xsdPath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        validator<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StreamSource</span><span class="token punctuation">(</span><span class="token function">getFile</span><span class="token punctuation">(</span>xmlPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SAXException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果解析过程中出现错误，<em>validate_方法会抛出_SAXException</em>。这表明XML文件不符合XSD规范。</p><p><em>validate_方法也可能在读取文件时抛出_IOException</em>。</p><p>现在我们可以将代码包装在一个_XmlValidator_类中，并检查_baeldung.xml_是否符合_person.xsd_的描述，但不符合_full-person.xsd_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenValidXML_WhenIsValid_ThenTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">SAXException</span> <span class="token punctuation">{</span>\n    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">XmlValidator</span><span class="token punctuation">(</span><span class="token string">&quot;person.xsd&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;baeldung.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenInvalidXML_WhenIsValid_ThenFalse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">SAXException</span> <span class="token punctuation">{</span>\n    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">XmlValidator</span><span class="token punctuation">(</span><span class="token string">&quot;full-person.xsd&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;baeldung.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-列出所有验证错误" tabindex="-1"><a class="header-anchor" href="#_4-列出所有验证错误"><span>4. 列出所有验证错误</span></a></h2><p>_validate_方法的基本行为是在解析抛出_SAXException_时立即退出。</p><p>现在我们想要收集所有验证错误，我们需要改变这种行为。为此，<strong>我们必须定义我们自己的_ErrorHandler_</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XmlErrorHandler</span> <span class="token keyword">implements</span> <span class="token class-name">ErrorHandler</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">private</span> <span class="token class-name">List</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SAXParseException</span><span class="token punctuation">&gt;</span></span>``` exceptions<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">XmlErrorHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>exceptions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">List</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SAXParseException</span><span class="token punctuation">&gt;</span></span>``` <span class="token function">getExceptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> exceptions<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">warning</span><span class="token punctuation">(</span><span class="token class-name">SAXParseException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        exceptions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>exception<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">SAXParseException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        exceptions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>exception<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fatalError</span><span class="token punctuation">(</span><span class="token class-name">SAXParseException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        exceptions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>exception<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们可以告诉_Validator_使用这个特定的_ErrorHandler_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">List</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SAXParseException</span><span class="token punctuation">&gt;</span></span>``` <span class="token function">listParsingExceptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">SAXException</span> <span class="token punctuation">{</span>\n    <span class="token class-name">XmlErrorHandler</span> xsdErrorHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XmlErrorHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Validator</span> validator <span class="token operator">=</span> <span class="token function">initValidator</span><span class="token punctuation">(</span>xsdPath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    validator<span class="token punctuation">.</span><span class="token function">setErrorHandler</span><span class="token punctuation">(</span>xsdErrorHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        validator<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StreamSource</span><span class="token punctuation">(</span><span class="token function">getFile</span><span class="token punctuation">(</span>xmlPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SAXParseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// ...</span>\n    <span class="token punctuation">}</span>\n    xsdErrorHandler<span class="token punctuation">.</span><span class="token function">getExceptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span>\n        <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;Line number: %s, Column number: %s. %s&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getLineNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getColumnNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> xsdErrorHandler<span class="token punctuation">.</span><span class="token function">getExceptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于_baeldung.xml_满足_person.xsd_的要求，在这种情况下没有列出错误。然而，在调用_full-person.xsd_时，我们将打印以下错误消息：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>XmlValidator - Line number: 3, Column number: 26. cvc-maxLength-valid: Value &#39;Baeldung&#39; with length = &#39;8&#39; is not facet-valid with respect to maxLength &#39;5&#39; for type &#39;#AnonType_nameindividual&#39;.\nXmlValidator - Line number: 3, Column number: 26. cvc-type.3.1.3: The value &#39;Baeldung&#39; of element &#39;name&#39; is not valid.\nXmlValidator - Line number: 7, Column number: 15. cvc-complex-type.2.4.b: The content of element &#39;address&#39; is not complete. One of &#39;{street}&#39; is expected.\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在第1节中提到的所有错误都通过程序找到了。</p><h2 id="_5-结论" tabindex="-1"><a class="header-anchor" href="#_5-结论"><span>5. 结论</span></a></h2><p>在本文中，我们看到了如何对XML文件进行XSD验证，并且我们还可以列出所有验证错误。</p><p>如常，代码可在GitHub上获得。</p>',38),c=[e];function o(l,i){return a(),s("div",null,c)}const r=n(p,[["render",o],["__file","2024-07-17-Validate an XML File Against an XSD File.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-17/2024-07-17-Validate%20an%20XML%20File%20Against%20an%20XSD%20File.html","title":"如何对XML文件进行XSD验证","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","XML"],"tag":["XML","XSD","Java"],"head":[["meta",{"name":"keywords","content":"XML, XSD, Java, 验证"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-17/2024-07-17-Validate%20an%20XML%20File%20Against%20an%20XSD%20File.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"如何对XML文件进行XSD验证"}],["meta",{"property":"og:description","content":"如何对XML文件进行XSD验证 在本教程中，我们将演示如何对XML文件进行XSD文件验证。 2. XML和两个XSD文件的定义 考虑以下XML文件_baeldung.xml_，其中包含一个名称和一个地址，地址本身由邮政编码和城市组成： _baeldung.xml_的内容完全符合_person.xsd_文件的描述： 然而，我们的XML文件不符合以下XSD..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-17T03:33:34.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"XML"}],["meta",{"property":"article:tag","content":"XSD"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-17T03:33:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"如何对XML文件进行XSD验证\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-17T03:33:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"如何对XML文件进行XSD验证 在本教程中，我们将演示如何对XML文件进行XSD文件验证。 2. XML和两个XSD文件的定义 考虑以下XML文件_baeldung.xml_，其中包含一个名称和一个地址，地址本身由邮政编码和城市组成： _baeldung.xml_的内容完全符合_person.xsd_文件的描述： 然而，我们的XML文件不符合以下XSD..."},"headers":[{"level":2,"title":"2. XML和两个XSD文件的定义","slug":"_2-xml和两个xsd文件的定义","link":"#_2-xml和两个xsd文件的定义","children":[]},{"level":2,"title":"3. 对XML文件进行XSD验证","slug":"_3-对xml文件进行xsd验证","link":"#_3-对xml文件进行xsd验证","children":[]},{"level":2,"title":"4. 列出所有验证错误","slug":"_4-列出所有验证错误","link":"#_4-列出所有验证错误","children":[]},{"level":2,"title":"5. 结论","slug":"_5-结论","link":"#_5-结论","children":[]}],"git":{"createdTime":1721187214000,"updatedTime":1721187214000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":3.67,"words":1100},"filePathRelative":"posts/baeldung/2024-07-17/2024-07-17-Validate an XML File Against an XSD File.md","localizedDate":"2022年4月1日","excerpt":"\\n<p>在本教程中，我们将演示如何对XML文件进行XSD文件验证。</p>\\n<h2>2. XML和两个XSD文件的定义</h2>\\n<p>考虑以下XML文件_baeldung.xml_，其中包含一个名称和一个地址，地址本身由邮政编码和城市组成：</p>\\n<div class=\\"language-xml\\" data-ext=\\"xml\\" data-title=\\"xml\\"><pre class=\\"language-xml\\"><code>```<span class=\\"token prolog\\">&lt;?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?&gt;</span>```\\n`<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>individual</span><span class=\\"token punctuation\\">&gt;</span></span>`\\n    `<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>name</span><span class=\\"token punctuation\\">&gt;</span></span>`Baeldung`<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>name</span><span class=\\"token punctuation\\">&gt;</span></span>`\\n    `<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>address</span><span class=\\"token punctuation\\">&gt;</span></span>`\\n        `<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>zip</span><span class=\\"token punctuation\\">&gt;</span></span>`00001`<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>zip</span><span class=\\"token punctuation\\">&gt;</span></span>`\\n        `<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>city</span><span class=\\"token punctuation\\">&gt;</span></span>`New York`<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>city</span><span class=\\"token punctuation\\">&gt;</span></span>`\\n    `<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>address</span><span class=\\"token punctuation\\">&gt;</span></span>`\\n`<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>individual</span><span class=\\"token punctuation\\">&gt;</span></span>`\\n</code></pre></div>","autoDesc":true}');export{r as comp,d as data};
