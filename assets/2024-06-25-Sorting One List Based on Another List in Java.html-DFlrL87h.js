import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-CTxWUlow.js";const p={},o=t('<h1 id="java中根据另一个列表排序列表的多种方法" tabindex="-1"><a class="header-anchor" href="#java中根据另一个列表排序列表的多种方法"><span>Java中根据另一个列表排序列表的多种方法</span></a></h1><p>在Java中，根据另一个列表的顺序对列表进行排序是一项常见任务，存在多种方法可以实现这一点。</p><p>在本教程中，我们将看到Java中根据另一个列表对列表进行排序的不同方法。</p><h2 id="_2-示例" tabindex="-1"><a class="header-anchor" href="#_2-示例"><span>2. 示例</span></a></h2><p>假设我们有一个产品列表<code>productList</code>和另一个列表<code>shoppingCart</code>，后者代表用户的购物车。<code>shoppingCart</code>包含各种产品ID，我们需要按照它们在购物车中出现的顺序显示产品：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span>````````````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````````````````````````````````````` productList <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;Burger&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Coke&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Fries&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Pizza&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">List</span>````````````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````````````````````````````````````` shoppingCart <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;Pizza&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Burger&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Fries&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Coke&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，<code>productList</code>是具有实际顺序的列表，而<code>shoppingCart</code>是需要根据<code>productList</code>进行排序的列表。排序后的顺序应该是：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Pizza\nBurger\nFries\nCoke\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-使用-for-循环迭代-list" tabindex="-1"><a class="header-anchor" href="#_3-使用-for-循环迭代-list"><span>3. 使用_for_循环迭代_List_</span></a></h2><p>我们可以使用标准的_for_循环根据另一个列表对列表进行排序。在这种方法中，我们创建一个新的列表，该列表将按排序顺序返回元素。循环遍历_listWithOrder_表，并将_listToSort_中的元素按照_listWithOrder_中指定的顺序添加到_sortedList_。结果是根据_listWithOrder_列表中元素的顺序进行排序的_sortedList_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span>````````````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````````````````````````````````````` <span class="token function">sortUsingForLoop</span><span class="token punctuation">(</span><span class="token class-name">List</span>````````````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````````````````````````````````````` listToSort<span class="token punctuation">,</span> <span class="token class-name">List</span>````````````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````````````````````````````````````` listWithOrder<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">List</span>````````````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````````````````````````````````````` sortedList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> element <span class="token operator">:</span> listWithOrder<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>listToSort<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            sortedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> sortedList<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们测试这种方法来排序上述示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenTwoList_whenUsingForLoop_thenSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">List</span>````````````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````````````````````````````````````` listWithOrder <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;Burger&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Coke&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Fries&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Pizza&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span>````````````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````````````````````````````````````` listToSort <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;Pizza&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Burger&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Fries&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Coke&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">sortUsingForLoop</span><span class="token punctuation">(</span>listToSort<span class="token punctuation">,</span> listWithOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span>````````````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````````````````````````````````````` expectedSortedList <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;Burger&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Coke&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Fries&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Pizza&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span>expectedSortedList<span class="token punctuation">,</span> listWithOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-使用-comparator-接口" tabindex="-1"><a class="header-anchor" href="#_4-使用-comparator-接口"><span>4. 使用_Comparator_接口</span></a></h2><p>在这种方法中，我们利用Java的_Comparator_接口的灵活性来创建自定义比较器。比较器将基于参考列表或具有实际顺序的列表中元素的索引。让我们看看它如何允许我们对列表进行排序：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">sortUsingComparator</span><span class="token punctuation">(</span><span class="token class-name">List</span>````````````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````````````````````````````````````` listToSort<span class="token punctuation">,</span> <span class="token class-name">List</span>````````````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````````````````````````````````````` listWithOrder<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    listToSort<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparingInt</span><span class="token punctuation">(</span>listWithOrder<span class="token operator">::</span><span class="token function">indexOf</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>_Comparator.comparingInt(listWithOrder::indexOf)_结构允许我们根据_listWithOrder_中元素的出现顺序对_listToSort_列表进行排序。</p><p>让我们使用这种方法来排序上述讨论的示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenTwoList_whenUsingComparator_thenSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">List</span>````````````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````````````````````````````````````` listWithOrder <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;Burger&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Coke&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Fries&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Pizza&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span>````````````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````````````````````````````````````` listToSort <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;Pizza&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Burger&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Fries&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Coke&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">sortUsingComparator</span><span class="token punctuation">(</span>listToSort<span class="token punctuation">,</span> listWithOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span>````````````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````````````````````````````````````` expectedSortedList <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;Burger&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Coke&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Fries&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Pizza&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span>expectedSortedList<span class="token punctuation">,</span> listToSort<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是一个简洁易读的解决方案，避免了额外数据结构的需求，并提供了一种清晰直接的方法。<strong>然而，需要注意的是，对于大型列表，性能可能会下降，因为_indexOf()_操作具有线性时间复杂度。</strong></p><h2 id="_5-使用stream-api" tabindex="-1"><a class="header-anchor" href="#_5-使用stream-api"><span>5. 使用Stream API</span></a></h2><p>我们还可以使用基于Stream API的方法来根据另一个列表对列表进行排序。首先，我们将通过_Collectors.toMap()_收集器在_listWithOrder_中创建元素及其索引之间的映射。之后，使用_Comparator.comparingInt()_方法使用结果映射对_listToSort_进行排序：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">sortUsingStreamAPI</span><span class="token punctuation">(</span><span class="token class-name">List</span>````````````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````````````````````````````````````` listToSort<span class="token punctuation">,</span> <span class="token class-name">List</span>````````````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````````````````````````````````````` listWithOrder<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Map</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>`` indicesMap <span class="token operator">=</span> listWithOrder<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> e<span class="token punctuation">,</span> listWithOrder<span class="token operator">::</span><span class="token function">indexOf</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    listToSort<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparingInt</span><span class="token punctuation">(</span>indicesMap<span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们测试这种方法来排序上述示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenTwoList_whenUsingStreamAPI_thenSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">List</span>````````````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````````````````````````````````````` listWithOrder <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;Burger&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Coke&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Fries&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Pizza&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span>````````````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````````````````````````````````````` listToSort <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;Pizza&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Burger&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Fries&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Coke&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">sortUsingCustomComparator</span><span class="token punctuation">(</span>listToSort<span class="token punctuation">,</span> listWithOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span>````````````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````````````````````````````````````` expectedSortedList <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;Burger&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Coke&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Fries&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Pizza&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span>expectedSortedList<span class="token punctuation">,</span> listToSort<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Stream API方法提供了一个干净且现代的解决方案。<strong>然而，对于大型列表，需要注意潜在的开销，因为创建映射涉及遍历整个列表。</strong></p><h2 id="_6-使用-map" tabindex="-1"><a class="header-anchor" href="#_6-使用-map"><span>6. 使用_Map_</span></a></h2><p>在这种方法中，我们利用Java的_Map_的强大功能，在参考列表_listWithOrder_和它们对应的索引之间创建直接映射。映射中的键值对由_listWithOrder_中的元素作为键和它们的索引作为值组成：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">sortUsingMap</span><span class="token punctuation">(</span><span class="token class-name">List</span>````````````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````````````````````````````````````` listToSort<span class="token punctuation">,</span> <span class="token class-name">List</span>````````````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````````````````````````````````````` listWithOrder<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Map</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>`` orderedIndicesMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> listWithOrder<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        orderedIndicesMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>listWithOrder<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    listToSort<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparingInt</span><span class="token punctuation">(</span>orderedIndicesMap<span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们测试这种方法来排序上述示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenTwoList_whenUsingMap_thenSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">List</span>````````````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````````````````````````````````````` listWithOrder <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;Burger&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Coke&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Fries&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Pizza&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span>````````````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````````````````````````````````````` listToSort <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;Pizza&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Burger&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Fries&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Coke&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">sortUsingMap</span><span class="token punctuation">(</span>listToSort<span class="token punctuation">,</span> listWithOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span>````````````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````````````````````````````````````` expectedSortedList <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;Burger&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Coke&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Fries&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Pizza&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span>expectedSortedList<span class="token punctuation">,</span> listToSort<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用_Map_为我们提供了一个优势，特别是在涉及大型列表、重复查找或性能敏感应用程序的场景中，它比_indexOf()_方法更优。</p><h2 id="_7-使用guava的-ordering-explicit" tabindex="-1"><a class="header-anchor" href="#_7-使用guava的-ordering-explicit"><span>7. 使用Guava的_Ordering.explicit()_</span></a></h2><p>Guava是一个广泛使用的Java库，它提供了一个方便的方法，根据另一个列表的元素顺序对列表进行排序。首先，让我们通过在我们的_pom.xml_文件中添加这个依赖项：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>``com.google.guava``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>``guava``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>``33.0.0-jre``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Guava的_explicit()_方法允许我们根据特定顺序创建比较器。_Ordering_类是不可变的，因此结果将是一个新排序的列表，原始列表，即_listToSort，_将保持不变。</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span>````````````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````````````````````````````````````` <span class="token function">sortUsingGuava</span><span class="token punctuation">(</span><span class="token class-name">List</span>````````````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````````````````````````````````````` listToSort<span class="token punctuation">,</span> <span class="token class-name">List</span>````````````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````````````````````````````````````` listWithOrder<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Ordering</span>````````````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````````````````````````````````````` explicitOrdering <span class="token operator">=</span> <span class="token class-name">Ordering</span><span class="token punctuation">.</span><span class="token function">explicit</span><span class="token punctuation">(</span>listWithOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span>````````````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````````````````````````````````````` sortedList <span class="token operator">=</span> explicitOrdering<span class="token punctuation">.</span><span class="token function">sortedCopy</span><span class="token punctuation">(</span>listToSort<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> sortedList<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，_sortedCopy()_方法负责创建一个排序列表。让我们测试这种方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenTwoList_whenUsingGuavaExplicit_thenSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">List</span>````````````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````````````````````````````````````` listWithOrder <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;Burger&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Coke&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Fries&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Pizza&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span>````````````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````````````````````````````````````` listToSort <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;Pizza&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Burger&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Fries&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Coke&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">sortUsingGuava</span><span class="token punctuation">(</span>listToSort<span class="token punctuation">,</span> listWithOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span>````````````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````````````````````````````````````` expectedSortedList <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;Burger&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Coke&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Fries&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Pizza&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span>expectedSortedList<span class="token punctuation">,</span> listWithOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-使用vavr" tabindex="-1"><a class="header-anchor" href="#_8-使用vavr"><span>8. 使用Vavr</span></a></h2><p>Vavr是一个**Java 8+的函数库，提供不可变数据类型和函数控制结构。**为了使用Vavr，我们首先需要添加这个依赖项：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>``io.vavr``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>``vavr``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>``0.10.4``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Vavr提供了一个_sortBy()<em>方法，可以用来根据另一个列表中指定的顺序对列表进行排序，即_listToSort</em>。结果将存储在新的列表_sortedList_中，原始_listToSort_列表将保持不变。让我们看看使用Vavr的一个示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span>````````````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````````````````````````````````````` <span class="token function">sortUsingVavr</span><span class="token punctuation">(</span><span class="token class-name">List</span>````````````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````````````````````````````````````` listToSort<span class="token punctuation">,</span> <span class="token class-name">List</span>````````````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````````````````````````````````````` listWithOrder<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name"><span class="token namespace">io<span class="token punctuation">.</span>vavr<span class="token punctuation">.</span>collection<span class="token punctuation">.</span></span>List</span>````````````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````````````````````````````````````` listWithOrderedElements <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">io<span class="token punctuation">.</span>vavr<span class="token punctuation">.</span>collection<span class="token punctuation">.</span></span>List</span><span class="token punctuation">.</span><span class="token function">ofAll</span><span class="token punctuation">(</span>listWithOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name"><span class="token namespace">io<span class="token punctuation">.</span>vavr<span class="token punctuation">.</span>collection<span class="token punctuation">.</span></span>List</span>````````````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````````````````````````````````````` listToSortElements <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">io<span class="token punctuation">.</span>vavr<span class="token punctuation">.</span>collection<span class="token punctuation">.</span></span>List</span><span class="token punctuation">.</span><span class="token function">ofAll</span><span class="token punctuation">(</span>listToSort<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name"><span class="token namespace">io<span class="token punctuation">.</span>vavr<span class="token punctuation">.</span>collection<span class="token punctuation">.</span></span>List</span>````````````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````````````````````````````````````` sortedList <span class="token operator">=</span> listToSortElements<span class="token punctuation">.</span><span class="token function">sortBy</span><span class="token punctuation">(</span>listWithOrderedElements<span class="token operator">::</span><span class="token function">indexOf</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> sortedList<span class="token punctuation">.</span><span class="token function">asJava</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们测试这种方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenTwoList_whenUsingVavr_thenSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">List</span>````````````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````````````````````````````````````` listWithOrder <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;Burger&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Coke&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Fries&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Pizza&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span>````````````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````````````````````````````````````` listToSort <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;Pizza&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Burger&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Fries&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Coke&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">sortUsingVavr</span><span class="token punctuation">(</span>listToSort<span class="token punctuation">,</span> listWithOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span>````````````````````````````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````````````````````````````````````` expectedSortedList <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;Burger&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Coke&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Fries&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Pizza&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span>expectedSortedList<span class="token punctuation">,</span> listWithOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-结论" tabindex="-1"><a class="header-anchor" href="#_9-结论"><span>9. 结论</span></a></h2><p>在本教程中，我们探索了根据另一个列表中元素的顺序对列表进行排序的各种方法。选择适当的方法取决于特定用例，基于解决方案的简单性和性能。</p><p>如常，源代码可在GitHub上获得。 OK</p>',49),e=[o];function c(i,l){return a(),s("div",null,e)}const k=n(p,[["render",c],["__file","2024-06-25-Sorting One List Based on Another List in Java.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-06-25/2024-06-25-Sorting%20One%20List%20Based%20on%20Another%20List%20in%20Java.html","title":"Java中根据另一个列表排序列表的多种方法","lang":"zh-CN","frontmatter":{"date":"2024-06-25T00:00:00.000Z","category":["Java","编程技巧"],"tag":["Java","列表排序"],"head":[["meta",{"name":"keywords","content":"Java, 列表排序, 编程技巧"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-06-25/2024-06-25-Sorting%20One%20List%20Based%20on%20Another%20List%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Java中根据另一个列表排序列表的多种方法"}],["meta",{"property":"og:description","content":"Java中根据另一个列表排序列表的多种方法 在Java中，根据另一个列表的顺序对列表进行排序是一项常见任务，存在多种方法可以实现这一点。 在本教程中，我们将看到Java中根据另一个列表对列表进行排序的不同方法。 2. 示例 假设我们有一个产品列表productList和另一个列表shoppingCart，后者代表用户的购物车。shoppingCart包..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-25T10:34:05.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"列表排序"}],["meta",{"property":"article:published_time","content":"2024-06-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-25T10:34:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java中根据另一个列表排序列表的多种方法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-25T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-25T10:34:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Java中根据另一个列表排序列表的多种方法 在Java中，根据另一个列表的顺序对列表进行排序是一项常见任务，存在多种方法可以实现这一点。 在本教程中，我们将看到Java中根据另一个列表对列表进行排序的不同方法。 2. 示例 假设我们有一个产品列表productList和另一个列表shoppingCart，后者代表用户的购物车。shoppingCart包..."},"headers":[{"level":2,"title":"2. 示例","slug":"_2-示例","link":"#_2-示例","children":[]},{"level":2,"title":"3. 使用_for_循环迭代_List_","slug":"_3-使用-for-循环迭代-list","link":"#_3-使用-for-循环迭代-list","children":[]},{"level":2,"title":"4. 使用_Comparator_接口","slug":"_4-使用-comparator-接口","link":"#_4-使用-comparator-接口","children":[]},{"level":2,"title":"5. 使用Stream API","slug":"_5-使用stream-api","link":"#_5-使用stream-api","children":[]},{"level":2,"title":"6. 使用_Map_","slug":"_6-使用-map","link":"#_6-使用-map","children":[]},{"level":2,"title":"7. 使用Guava的_Ordering.explicit()_","slug":"_7-使用guava的-ordering-explicit","link":"#_7-使用guava的-ordering-explicit","children":[]},{"level":2,"title":"8. 使用Vavr","slug":"_8-使用vavr","link":"#_8-使用vavr","children":[]},{"level":2,"title":"9. 结论","slug":"_9-结论","link":"#_9-结论","children":[]}],"git":{"createdTime":1719311645000,"updatedTime":1719311645000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":5.28,"words":1585},"filePathRelative":"posts/baeldung/2024-06-25/2024-06-25-Sorting One List Based on Another List in Java.md","localizedDate":"2024年6月25日","excerpt":"\\n<p>在Java中，根据另一个列表的顺序对列表进行排序是一项常见任务，存在多种方法可以实现这一点。</p>\\n<p>在本教程中，我们将看到Java中根据另一个列表对列表进行排序的不同方法。</p>\\n<h2>2. 示例</h2>\\n<p>假设我们有一个产品列表<code>productList</code>和另一个列表<code>shoppingCart</code>，后者代表用户的购物车。<code>shoppingCart</code>包含各种产品ID，我们需要按照它们在购物车中出现的顺序显示产品：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token class-name\\">List</span>````````````````````````````````````````<span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">&gt;</span></span>```````````````````````````````````````` productList <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Arrays</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">asList</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Burger\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"Coke\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"Fries\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"Pizza\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">List</span>````````````````````````````````````````<span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">&gt;</span></span>```````````````````````````````````````` shoppingCart <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Arrays</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">asList</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Pizza\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"Burger\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"Fries\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"Coke\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}');export{k as comp,d as data};
