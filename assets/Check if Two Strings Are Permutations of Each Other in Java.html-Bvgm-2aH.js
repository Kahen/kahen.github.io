import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-BwYTipZw.js";const p={},o=t(`<h1 id="java中检查两个字符串是否为彼此的排列" tabindex="-1"><a class="header-anchor" href="#java中检查两个字符串是否为彼此的排列"><span>Java中检查两个字符串是否为彼此的排列</span></a></h1><p>排列或变位词是通过重新排列不同单词或短语的字母形成的单词或短语。换句话说，<strong>排列包含与另一个字符串相同的字符，但字符的排列顺序可以变化</strong>。</p><p>在本教程中，我们将检查字符串是否是另一个字符串的排列或变位词的解决方案。</p><h3 id="_2-1-排列" tabindex="-1"><a class="header-anchor" href="#_2-1-排列"><span>2.1. 排列</span></a></h3><p>让我们看看单词 &quot;CAT&quot; 的排列：</p><p>显然，有六种排列（包括 &quot;CAT&quot; 本身）。我们可以计算 <em>n!</em>（字符串长度 <em>n</em> 的阶乘）。</p><h3 id="_2-2-如何解决问题" tabindex="-1"><a class="header-anchor" href="#_2-2-如何解决问题"><span>2.2. 如何解决问题</span></a></h3><p>正如我们所看到的，一个字符串有许多可能的排列。我们可能会想到创建一个算法，循环遍历所有的字符串排列，以检查是否有一个与我们比较的字符串相等。</p><p>这种方法有效，但我们必须首先创建所有可能的排列，这可能代价昂贵，特别是对于长字符串。</p><p><strong>然而，我们注意到无论排列如何，它都包含与原始字符串相同的字符。例如，&quot;CAT&quot; 和 &quot;TAC&quot; 有相同的字符 <em>[A,C,T]</em>，即使顺序不同。</strong></p><p>因此，我们可以将字符串的字符存储在数据结构中，然后找到一种比较它们的方法。</p><p>值得注意的是，如果两个字符串的长度不同，我们可以立即说它们不是排列。</p><h2 id="_3-排序" tabindex="-1"><a class="header-anchor" href="#_3-排序"><span>3. 排序</span></a></h2><p>解决这个问题最直接的方法是排序和比较两个字符串。</p><p>让我们看看算法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">boolean</span> <span class="token function">isPermutationWithSorting</span><span class="token punctuation">(</span><span class="token class-name">String</span> s1<span class="token punctuation">,</span> <span class="token class-name">String</span> s2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s1CharArray <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s2CharArray <span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>s1CharArray<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>s2CharArray<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s1CharArray<span class="token punctuation">,</span> s2CharArray<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>值得注意的是，字符串是一个原始字符的数组。因此，我们将对两个字符串的字符数组进行排序，并使用 <em>equals()</em> 方法进行比较。</p><p>让我们看看算法复杂度：</p><ul><li>时间复杂度：排序的 <em>O(n log n)</em></li><li>空间复杂度：排序的 <em>O(n)</em> 辅助空间</li></ul><p>现在，让我们看看一些测试，我们检查一个简单单词和一个句子的排列：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenTwoStringsArePermutation_whenSortingCharsArray_thenPermutation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token function">isPermutationWithSorting</span><span class="token punctuation">(</span><span class="token string">&quot;baeldung&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;luaebngd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token function">isPermutationWithSorting</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;world hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们也测试一下字符不匹配和不同字符串长度的否定案例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenTwoStringsAreNotPermutation_whenSortingCharsArray_thenNotPermutation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token function">isPermutationWithSorting</span><span class="token punctuation">(</span><span class="token string">&quot;baeldung&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;luaebgd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token function">isPermutationWithSorting</span><span class="token punctuation">(</span><span class="token string">&quot;baeldung&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;luaebngq&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-计数频率" tabindex="-1"><a class="header-anchor" href="#_4-计数频率"><span>4. 计数频率</span></a></h2><p>如果我们考虑我们的单词是有限的字符，我们可以使用它们在相同维度的数组中的频率。我们可以考虑到我们的字母表中的26个字母，或者更一般地，考虑到扩展的ASCII编码，在我们的数组中最多256个位置。</p><h3 id="_4-1-两个计数器" tabindex="-1"><a class="header-anchor" href="#_4-1-两个计数器"><span>4.1. 两个计数器</span></a></h3><p>我们可以使用两个计数器，每个单词一个：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">boolean</span> <span class="token function">isPermutationWithTwoCounters</span><span class="token punctuation">(</span><span class="token class-name">String</span> s1<span class="token punctuation">,</span> <span class="token class-name">String</span> s2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> counter1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> counter2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i \`<span class="token operator">&lt;</span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        counter1<span class="token punctuation">[</span>s1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        counter2<span class="token punctuation">[</span>s2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>counter1<span class="token punctuation">,</span> counter2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在每个计数器中保存频率后，我们可以检查计数器是否相等。</p><p>让我们看看算法复杂度：</p><ul><li>时间复杂度：访问计数器的 <em>O(n)</em></li><li>空间复杂度：计数器的 <em>O(1)</em> 常量大小</li></ul><p>接下来，让我们看看一些正例和负例测试用例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenTwoStringsArePermutation_whenTwoCountersCharsFrequencies_thenPermutation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token function">isPermutationWithTwoCounters</span><span class="token punctuation">(</span><span class="token string">&quot;baeldung&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;luaebngd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token function">isPermutationWithTwoCounters</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;world hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenTwoStringsAreNotPermutation_whenTwoCountersCharsFrequencies_thenNotPermutation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token function">isPermutationWithTwoCounters</span><span class="token punctuation">(</span><span class="token string">&quot;baeldung&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;luaebgd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token function">isPermutationWithTwoCounters</span><span class="token punctuation">(</span><span class="token string">&quot;baeldung&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;luaebngq&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-一个计数器" tabindex="-1"><a class="header-anchor" href="#_4-2-一个计数器"><span>4.2. 一个计数器</span></a></h3><p>我们可以更聪明一点，只使用一个计数器：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">boolean</span> <span class="token function">isPermutationWithOneCounter</span><span class="token punctuation">(</span><span class="token class-name">String</span> s1<span class="token punctuation">,</span> <span class="token class-name">String</span> s2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> counter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        counter<span class="token punctuation">[</span>s1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
        counter<span class="token punctuation">[</span>s2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> count <span class="token operator">:</span> counter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在同一个循环中添加和删除频率，只使用一个计数器。因此，我们最后需要检查所有频率是否等于零。</p><p>让我们看看算法复杂度：</p><ul><li>时间复杂度：访问计数器的 <em>O(n)</em></li><li>空间复杂度：计数器的 <em>O(1)</em> 常量大小</li></ul><p>让我们再次看看一些测试：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenTwoStringsArePermutation_whenOneCounterCharsFrequencies_thenPermutation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token function">isPermutationWithOneCounter</span><span class="token punctuation">(</span><span class="token string">&quot;baeldung&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;luaebngd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token function">isPermutationWithOneCounter</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;world hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenTwoStringsAreNotPermutation_whenOneCounterCharsFrequencies_thenNotPermutation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token function">isPermutationWithOneCounter</span><span class="token punctuation">(</span><span class="token string">&quot;baeldung&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;luaebgd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token function">isPermutationWithOneCounter</span><span class="token punctuation">(</span><span class="token string">&quot;baeldung&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;luaebngq&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-使用-hashmap" tabindex="-1"><a class="header-anchor" href="#_4-3-使用-hashmap"><span>4.3. 使用 HashMap</span></a></h3><p>我们可以使用一个映射而不是一个数组来计算频率。想法是一样的，但是使用映射允许我们存储更多的字符。<strong>这有助于处理Unicode，包括例如东欧、非洲、亚洲或表情符号字符</strong>。</p><p>让我们看看算法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">boolean</span> <span class="token function">isPermutationWithMap</span><span class="token punctuation">(</span><span class="token class-name">String</span> s1<span class="token punctuation">,</span> <span class="token class-name">String</span> s2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>\` charsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i \`<span class="token operator">&lt;</span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        charsMap<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>charsMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> charsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        charsMap<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一旦我们知道了一个字符串字符的频率，我们可以检查另一个字符串是否包含所有所需的匹配项。</p><p>值得注意的是，在使用映射时，我们不会像前面的示例那样按位置比较数组。因此，我们已经知道如果映射中的键不存在或者频率值不对应。</p><p>让我们看看算法复杂度：</p><ul><li>时间复杂度：在常数时间内访问映射的 <em>O(n)</em></li><li>空间复杂度：根据我们存储在映射中的字符数量 <em>O(m)</em>，取决于字符串的复杂性</li></ul><p>对于测试，这次我们也可以添加非ASCII字符：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenTwoStringsArePermutation_whenCountCharsFrequenciesWithMap_thenPermutation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token function">isPermutationWithMap</span><span class="token punctuation">(</span><span class="token string">&quot;baelduňg&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;luaebňgd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token function">isPermutationWithMap</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;world hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于否定案例，为了获得100%的测试覆盖率，我们必须考虑映射不包含键或者存在值不匹配的情况：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenTwoStringsAreNotPermutation_whenCountCharsFrequenciesWithMap_thenNotPermutation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token function">isPermutationWithMap</span><span class="token punctuation">(</span><span class="token string">&quot;baelduňg&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;luaebgd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token function">isPermutationWithMap</span><span class="token punctuation">(</span><span class="token string">&quot;baeldung&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;luaebngq&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token function">isPermutationWithMap</span><span class="token punctuation">(</span><span class="token string">&quot;baeldung&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;luaebngg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-包含排列的字符串" tabindex="-1"><a class="header-anchor" href="#_5-包含排列的字符串"><span>5. 包含排列的字符串</span></a></h2><p>如果我们想检查一个字符串是否包含另一个字符串作为排列怎么办？例如，我们可以看到字符串 &quot;acab&quot; 包含 &quot;ba&quot; 作为排列；&quot;ab&quot; 是 &quot;ba&quot; 的排列，并且从第三个字符开始包含在 &quot;acab&quot; 中。</p><p>我们可以遍历前面讨论的所有排列，但那不会很高效。计数频率也不会起作用。例如，检查 &quot;cb&quot; 是否是 &quot;acab&quot; 的排列包含会导致误报。</p><p><strong>然而，我们仍然可以使用计数器作为起点，然后使用滑动窗口技术来检查排列。</strong></p><p>我们对每个字符串使用频率计数器。我们首先向潜在排列的计数器中添加。然后，我们循环遍历第二个字符串的字符，并遵循以下模式：</p><ul><li>向新考虑的窗口中添加一个新的后续字符</li><li>当超过窗口长度时，移除一个前面的字符</li></ul><p>窗口具有潜在排列字符串的长度。让我们在图表中描绘这个：</p><p>让我们看看算法。<em>s2</em> 是我们想要检查包含的字符串。此外，我们将情况简化为字母表的26个字符，以简化：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">boolean</span> <span class="token function">isPermutationInclusion</span><span class="token punctuation">(</span><span class="token class-name">String</span> s1<span class="token punctuation">,</span> <span class="token class-name">String</span> s2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> ns1 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ns2 <span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ns1 <span class="token operator">&lt;</span> ns2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s1Count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s2Count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> ch <span class="token operator">:</span> s2<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        s2Count<span class="token punctuation">[</span>ch <span class="token operator">-</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ns1<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        s1Count<span class="token punctuation">[</span>s1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span>\`<span class="token operator">=</span> ns2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            s1Count<span class="token punctuation">[</span>s1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> ns2<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s1Count<span class="token punctuation">,</span> s2Count<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们看看最后的循环，我们应用滑动窗口。<strong>我们向频率计数器中添加。然而，当窗口超过排列长度时，我们移除一个字符的发生次数。</strong></p><p>值得注意的是，如果字符串具有相同的长度，我们就陷入了我们之前看到的变位词案例。</p><p>让我们看看算法复杂度。设 <em>l1</em> 和 <em>l2</em> 分别是字符串 <em>s1</em> 和 <em>s2</em> 的长度：</p><ul><li>时间复杂度：根据字符串之间的差异和字符的范围，为 <em>O(l1 + 26*(l2 - l1))</em></li><li>空间复杂度：用于跟踪频率的常量空间 <em>O(1)</em></li></ul><p>让我们看看一些正例测试用例，我们检查完全匹配或排列：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenTwoStrings_whenIncludePermutation_thenPermutation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token function">isPermutationInclusion</span><span class="token punctuation">(</span><span class="token string">&quot;baeldung&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ea&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token function">isPermutationInclusion</span><span class="token punctuation">(</span><span class="token string">&quot;baeldung&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ae&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们看看一些否定测试用例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenTwoStrings_whenNotIncludePermutation_thenNotPermutation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token function">isPermutationInclusion</span><span class="token punctuation">(</span><span class="token string">&quot;baeldung&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;au&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token function">isPermutationInclusion</span><span class="token punctuation">(</span><span class="token string">&quot;baeldung&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;baeldunga&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-结论" tabindex="-1"><a class="header-anchor" href="#_6-结论"><span>6. 结论</span></a></h2><p>在本文中，我们看到了检查一个字符串是否是另一个字符串排列的一些算法。对字符串字符进行排序和比较是一个直接的解决方案。更有趣的是，我们可以通过在计数器中存储字符频率并比较它们来实现线性复杂度。我们也可以使用映射而不是频率数组来获得相同的结果。最后，我们还看到了使用滑动窗口来检查一个字符串是否包含另一个字符串排列的问题变体。</p><p>正如往常一样，本文中介绍的代码可以在 GitHub 上找到。</p><p>评论在文章发布后30天内开放。对于超过此日期的任何问题，请使用网站上的联系表单。</p><p>OK</p>`,75),e=[o];function c(u,i){return a(),s("div",null,e)}const r=n(p,[["render",c],["__file","Check if Two Strings Are Permutations of Each Other in Java.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/Archive/Check%20if%20Two%20Strings%20Are%20Permutations%20of%20Each%20Other%20in%20Java.html","title":"Java中检查两个字符串是否为彼此的排列","lang":"zh-CN","frontmatter":{"date":"2024-06-15T00:00:00.000Z","category":["Java","Algorithms"],"tag":["String","Permutation","Anagram"],"description":"Java中检查两个字符串是否为彼此的排列 排列或变位词是通过重新排列不同单词或短语的字母形成的单词或短语。换句话说，排列包含与另一个字符串相同的字符，但字符的排列顺序可以变化。 在本教程中，我们将检查字符串是否是另一个字符串的排列或变位词的解决方案。 2.1. 排列 让我们看看单词 \\"CAT\\" 的排列： 显然，有六种排列（包括 \\"CAT\\" 本身）。我们...","head":[["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/Archive/Check%20if%20Two%20Strings%20Are%20Permutations%20of%20Each%20Other%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Java中检查两个字符串是否为彼此的排列"}],["meta",{"property":"og:description","content":"Java中检查两个字符串是否为彼此的排列 排列或变位词是通过重新排列不同单词或短语的字母形成的单词或短语。换句话说，排列包含与另一个字符串相同的字符，但字符的排列顺序可以变化。 在本教程中，我们将检查字符串是否是另一个字符串的排列或变位词的解决方案。 2.1. 排列 让我们看看单词 \\"CAT\\" 的排列： 显然，有六种排列（包括 \\"CAT\\" 本身）。我们..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-21T09:54:56.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"String"}],["meta",{"property":"article:tag","content":"Permutation"}],["meta",{"property":"article:tag","content":"Anagram"}],["meta",{"property":"article:published_time","content":"2024-06-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-21T09:54:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java中检查两个字符串是否为彼此的排列\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-15T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-21T09:54:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]]},"headers":[{"level":3,"title":"2.1. 排列","slug":"_2-1-排列","link":"#_2-1-排列","children":[]},{"level":3,"title":"2.2. 如何解决问题","slug":"_2-2-如何解决问题","link":"#_2-2-如何解决问题","children":[]},{"level":2,"title":"3. 排序","slug":"_3-排序","link":"#_3-排序","children":[]},{"level":2,"title":"4. 计数频率","slug":"_4-计数频率","link":"#_4-计数频率","children":[{"level":3,"title":"4.1. 两个计数器","slug":"_4-1-两个计数器","link":"#_4-1-两个计数器","children":[]},{"level":3,"title":"4.2. 一个计数器","slug":"_4-2-一个计数器","link":"#_4-2-一个计数器","children":[]},{"level":3,"title":"4.3. 使用 HashMap","slug":"_4-3-使用-hashmap","link":"#_4-3-使用-hashmap","children":[]}]},{"level":2,"title":"5. 包含排列的字符串","slug":"_5-包含排列的字符串","link":"#_5-包含排列的字符串","children":[]},{"level":2,"title":"6. 结论","slug":"_6-结论","link":"#_6-结论","children":[]}],"git":{"createdTime":1718963696000,"updatedTime":1718963696000,"contributors":[{"name":"Lance Li","email":"lance.jx.li@gtomato.com","commits":1}]},"readingTime":{"minutes":7.57,"words":2271},"filePathRelative":"posts/baeldung/Archive/Check if Two Strings Are Permutations of Each Other in Java.md","localizedDate":"2024年6月15日","excerpt":"\\n<p>排列或变位词是通过重新排列不同单词或短语的字母形成的单词或短语。换句话说，<strong>排列包含与另一个字符串相同的字符，但字符的排列顺序可以变化</strong>。</p>\\n<p>在本教程中，我们将检查字符串是否是另一个字符串的排列或变位词的解决方案。</p>\\n<h3>2.1. 排列</h3>\\n<p>让我们看看单词 \\"CAT\\" 的排列：</p>\\n<p>显然，有六种排列（包括 \\"CAT\\" 本身）。我们可以计算 <em>n!</em>（字符串长度 <em>n</em> 的阶乘）。</p>\\n<h3>2.2. 如何解决问题</h3>\\n<p>正如我们所看到的，一个字符串有许多可能的排列。我们可能会想到创建一个算法，循环遍历所有的字符串排列，以检查是否有一个与我们比较的字符串相等。</p>","autoDesc":true}');export{r as comp,d as data};
