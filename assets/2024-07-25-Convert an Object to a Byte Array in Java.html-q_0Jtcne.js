import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,o as s,a as e}from"./app-0nXvcScy.js";const t={},p=e(`<h1 id="java中对象与字节数组的转换" tabindex="-1"><a class="header-anchor" href="#java中对象与字节数组的转换"><span>Java中对象与字节数组的转换</span></a></h1><p>在这篇简短的教程中，我们将学习如何<strong>将Java对象转换为字节数组以及反向转换</strong>。</p><h2 id="_2-使用纯java" tabindex="-1"><a class="header-anchor" href="#_2-使用纯java"><span>2. 使用纯Java</span></a></h2><p>例如，假设我们有一个_User_类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;User{name=&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;}&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// getters and setters</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以使用_ByteArrayOutputStream_和_ObjectOutputStream_对象将对象序列化为字节数组。</p><p>让我们不要忘记使用try-with-resources，这样我们就不必担心关闭流：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;Josh&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">ByteArrayOutputStream</span> bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>bos<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们将使用_ByteArrayInputStream_和_ObjectInputStream_将接收到的字节数组反序列化为对象，最后将其转换为_User_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">ByteArrayInputStream</span> bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>bis<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">User</span> deserializedUser <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>deserializedUser<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，我们的_User_类必须实现_Serializable_接口。否则，上述代码将抛出_NotSerializableException_。</p><h2 id="_3-使用apache-commons-lang" tabindex="-1"><a class="header-anchor" href="#_3-使用apache-commons-lang"><span>3. 使用Apache Commons Lang</span></a></h2><p>我们可以使用Apache Commons Lang库中的_SerializationUtils_类来实现相同的目标。</p><p>这个类有一个名为_serialize()_的方法，用于将对象序列化为字节数组：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token class-name">SerializationUtils</span><span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以及一个_deserialize()_方法将字节数组反序列化为对象：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">User</span> deserializedUser <span class="token operator">=</span> <span class="token class-name">SerializationUtils</span><span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>上述方法的参数类型为_Serializable._</strong> 因此，我们的_User_类仍然需要实现_Serializable_接口，就像我们在纯Java示例中所做的那样。</p><h2 id="_4-使用spring-framework的-serializationutils-类" tabindex="-1"><a class="header-anchor" href="#_4-使用spring-framework的-serializationutils-类"><span>4. 使用Spring Framework的_SerializationUtils_类</span></a></h2><p>最后，如果我们的项目已经在使用Spring Framework，我们可以使用_org.springframework.util_包中的_SerializationUtils_类。方法名称与Apache Commons Lang库中的相同。</p><p>首先，我们可以将_User_对象序列化为字节数组：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token class-name">SerializationUtils</span><span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后我们可以将结果反序列化回_User_对象：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">User</span> deserializedUser <span class="token operator">=</span> <span class="token class-name">SerializationUtils</span><span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>像往常一样，我们的_User_类必须实现_Serializable_接口</strong>，否则在运行上述代码时我们将得到一个_NotSerializableException_。</p><h2 id="_5-结论" tabindex="-1"><a class="header-anchor" href="#_5-结论"><span>5. 结论</span></a></h2><p>总结来说，我们学习了三种不同的方法来<strong>将Java对象转换为字节数组以及反向转换</strong>。所有这些方法都需要输入对象实现_Serializable_接口来完成任务。</p>`,27),o=[p];function c(i,l){return s(),n("div",null,o)}const d=a(t,[["render",c],["__file","2024-07-25-Convert an Object to a Byte Array in Java.html.vue"]]),k=JSON.parse('{"path":"/posts/baeldung/2024-07-25/2024-07-25-Convert%20an%20Object%20to%20a%20Byte%20Array%20in%20Java.html","title":"Java中对象与字节数组的转换","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","Serialization"],"tag":["Java","Object to byte array","Serialization"],"head":[["meta",{"name":"keywords","content":"Java, Serialization, Object to byte array"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-25/2024-07-25-Convert%20an%20Object%20to%20a%20Byte%20Array%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Java中对象与字节数组的转换"}],["meta",{"property":"og:description","content":"Java中对象与字节数组的转换 在这篇简短的教程中，我们将学习如何将Java对象转换为字节数组以及反向转换。 2. 使用纯Java 例如，假设我们有一个_User_类： 我们可以使用_ByteArrayOutputStream_和_ObjectOutputStream_对象将对象序列化为字节数组。 让我们不要忘记使用try-with-resources..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-25T02:42:11.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Object to byte array"}],["meta",{"property":"article:tag","content":"Serialization"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-25T02:42:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java中对象与字节数组的转换\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-25T02:42:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Java中对象与字节数组的转换 在这篇简短的教程中，我们将学习如何将Java对象转换为字节数组以及反向转换。 2. 使用纯Java 例如，假设我们有一个_User_类： 我们可以使用_ByteArrayOutputStream_和_ObjectOutputStream_对象将对象序列化为字节数组。 让我们不要忘记使用try-with-resources..."},"headers":[{"level":2,"title":"2. 使用纯Java","slug":"_2-使用纯java","link":"#_2-使用纯java","children":[]},{"level":2,"title":"3. 使用Apache Commons Lang","slug":"_3-使用apache-commons-lang","link":"#_3-使用apache-commons-lang","children":[]},{"level":2,"title":"4. 使用Spring Framework的_SerializationUtils_类","slug":"_4-使用spring-framework的-serializationutils-类","link":"#_4-使用spring-framework的-serializationutils-类","children":[]},{"level":2,"title":"5. 结论","slug":"_5-结论","link":"#_5-结论","children":[]}],"git":{"createdTime":1721875331000,"updatedTime":1721875331000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":1.88,"words":563},"filePathRelative":"posts/baeldung/2024-07-25/2024-07-25-Convert an Object to a Byte Array in Java.md","localizedDate":"2022年4月1日","excerpt":"\\n<p>在这篇简短的教程中，我们将学习如何<strong>将Java对象转换为字节数组以及反向转换</strong>。</p>\\n<h2>2. 使用纯Java</h2>\\n<p>例如，假设我们有一个_User_类：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">User</span> <span class=\\"token keyword\\">implements</span> <span class=\\"token class-name\\">Serializable</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">String</span> name<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token annotation punctuation\\">@Override</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">String</span> <span class=\\"token function\\">toString</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token string\\">\\"User{name=\\"</span> <span class=\\"token operator\\">+</span> name <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"}\\"</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token comment\\">// getters and setters</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{d as comp,k as data};
