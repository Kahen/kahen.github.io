import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as t,a as l}from"./app-DFhKiB50.js";const n={},i=l(`<h1 id="gradle中添加本地jar文件作为依赖" tabindex="-1"><a class="header-anchor" href="#gradle中添加本地jar文件作为依赖"><span>Gradle中添加本地JAR文件作为依赖</span></a></h1><p>在本教程中，我们将重点介绍如何将本地JAR文件添加到我们的Gradle依赖中。</p><h2 id="_2-本地jar文件" tabindex="-1"><a class="header-anchor" href="#_2-本地jar文件"><span>2. 本地JAR文件</span></a></h2><p>在我们开始解释将本地JAR文件添加到Gradle之前，有必要提及，不推荐手动添加那些在公共仓库中可用的依赖。构建系统如Gradle存在的一个重要原因就是自动处理这类事情。在Gradle之前，我们通常需要下载JAR文件并将其放在_libs_文件夹中。现在，Gradle为我们自动处理了这些。</p><p>然而，对于特殊目的，如自定义JAR文件，Gradle仍然支持这一过程。</p><h2 id="_3-平铺目录" tabindex="-1"><a class="header-anchor" href="#_3-平铺目录"><span>3. 平铺目录</span></a></h2><p>如果我们想使用一个平铺的文件系统目录作为我们的仓库，我们需要在我们的_build.gradle_文件中添加以下内容：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>repositories {
    flatDir {
        dirs &#39;lib1&#39;, &#39;lib2&#39;
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这使得Gradle在_lib1_和_lib2_中查找依赖。一旦我们设置了平铺目录，我们就可以从_lib1_或_lib2_文件夹中使用我们的本地JAR文件：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>dependencies { implementation name: &#39;sample-jar-0.8.7&#39; }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_4-文件集合" tabindex="-1"><a class="header-anchor" href="#_4-文件集合"><span>4. 文件集合</span></a></h2><p>平铺目录的一个替代方法是直接指定文件，而不是使用_flatdir:_</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>implementation files(&#39;libs/a.jar&#39;, &#39;libs/b.jar&#39;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_5-文件树" tabindex="-1"><a class="header-anchor" href="#_5-文件树"><span>5. 文件树</span></a></h2><p>我们可以告诉Gradle在某个目录中查找所有JAR文件，而不必指定名称。这在某些情况下很有用，比如我们不能或不想将某些文件放在仓库中。但我们必须小心，因为这可能会添加不想要的依赖：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>implementation fileTree(dir: &#39;libs&#39;, include: &#39;*.jar&#39;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_6-使用intellij" tabindex="-1"><a class="header-anchor" href="#_6-使用intellij"><span>6. 使用IntelliJ</span></a></h2><p>还有另一种使用本地jar文件的方法。首先，我们进入_Project Structure_：</p><p>然后我们点击列表顶部的加号按钮并选择Java：</p><p>然后一个对话框会要求我们定位JAR文件。选择后，我们可以点击OK，我们的项目就可以访问存档中的方法和类。</p><h2 id="_7-结论" tabindex="-1"><a class="header-anchor" href="#_7-结论"><span>7. 结论</span></a></h2><p>在本文中，我们查看了在Gradle项目中使用不在标准仓库中托管的JAR文件的各种方法。</p>`,22),r=[i];function d(s,c){return t(),a("div",null,r)}const h=e(n,[["render",d],["__file","2024-07-29-Local JAR Files as Gradle Dependencies.html.vue"]]),m=JSON.parse('{"path":"/posts/baeldung/2024-07-29/2024-07-29-Local%20JAR%20Files%20as%20Gradle%20Dependencies.html","title":"Gradle中添加本地JAR文件作为依赖","lang":"zh-CN","frontmatter":{"date":"2021-06-01T00:00:00.000Z","category":["Gradle","Dependencies"],"tag":["JAR Files","Local Dependencies"],"head":[["meta",{"name":"keywords","content":"Gradle, JAR Files, Dependencies, Local JAR"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-29/2024-07-29-Local%20JAR%20Files%20as%20Gradle%20Dependencies.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Gradle中添加本地JAR文件作为依赖"}],["meta",{"property":"og:description","content":"Gradle中添加本地JAR文件作为依赖 在本教程中，我们将重点介绍如何将本地JAR文件添加到我们的Gradle依赖中。 2. 本地JAR文件 在我们开始解释将本地JAR文件添加到Gradle之前，有必要提及，不推荐手动添加那些在公共仓库中可用的依赖。构建系统如Gradle存在的一个重要原因就是自动处理这类事情。在Gradle之前，我们通常需要下载JA..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-29T05:04:07.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"JAR Files"}],["meta",{"property":"article:tag","content":"Local Dependencies"}],["meta",{"property":"article:published_time","content":"2021-06-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-29T05:04:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Gradle中添加本地JAR文件作为依赖\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-06-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-29T05:04:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Gradle中添加本地JAR文件作为依赖 在本教程中，我们将重点介绍如何将本地JAR文件添加到我们的Gradle依赖中。 2. 本地JAR文件 在我们开始解释将本地JAR文件添加到Gradle之前，有必要提及，不推荐手动添加那些在公共仓库中可用的依赖。构建系统如Gradle存在的一个重要原因就是自动处理这类事情。在Gradle之前，我们通常需要下载JA..."},"headers":[{"level":2,"title":"2. 本地JAR文件","slug":"_2-本地jar文件","link":"#_2-本地jar文件","children":[]},{"level":2,"title":"3. 平铺目录","slug":"_3-平铺目录","link":"#_3-平铺目录","children":[]},{"level":2,"title":"4. 文件集合","slug":"_4-文件集合","link":"#_4-文件集合","children":[]},{"level":2,"title":"5. 文件树","slug":"_5-文件树","link":"#_5-文件树","children":[]},{"level":2,"title":"6. 使用IntelliJ","slug":"_6-使用intellij","link":"#_6-使用intellij","children":[]},{"level":2,"title":"7. 结论","slug":"_7-结论","link":"#_7-结论","children":[]}],"git":{"createdTime":1722229447000,"updatedTime":1722229447000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":1.86,"words":558},"filePathRelative":"posts/baeldung/2024-07-29/2024-07-29-Local JAR Files as Gradle Dependencies.md","localizedDate":"2021年6月1日","excerpt":"\\n<p>在本教程中，我们将重点介绍如何将本地JAR文件添加到我们的Gradle依赖中。</p>\\n<h2>2. 本地JAR文件</h2>\\n<p>在我们开始解释将本地JAR文件添加到Gradle之前，有必要提及，不推荐手动添加那些在公共仓库中可用的依赖。构建系统如Gradle存在的一个重要原因就是自动处理这类事情。在Gradle之前，我们通常需要下载JAR文件并将其放在_libs_文件夹中。现在，Gradle为我们自动处理了这些。</p>\\n<p>然而，对于特殊目的，如自定义JAR文件，Gradle仍然支持这一过程。</p>\\n<h2>3. 平铺目录</h2>\\n<p>如果我们想使用一个平铺的文件系统目录作为我们的仓库，我们需要在我们的_build.gradle_文件中添加以下内容：</p>","autoDesc":true}');export{h as comp,m as data};
