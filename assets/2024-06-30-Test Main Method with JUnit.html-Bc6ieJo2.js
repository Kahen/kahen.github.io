import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-C5QtKXnb.js";const p={},e=t('<hr><h1 id="使用junit测试main方法" tabindex="-1"><a class="header-anchor" href="#使用junit测试main方法"><span>使用JUnit测试main方法</span></a></h1><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p>main()方法是每个Java应用程序的起始点，根据应用程序的类型，它的外观可能会有所不同。在常规的Web应用程序中，main()方法将负责启动上下文，但在某些控制台应用程序中，我们将业务逻辑放入其中。</p><p>测试main()方法相当复杂，因为我们有一个只接受字符串参数且不返回任何内容的静态方法。</p><p>在本文中，我们将重点讨论如何测试main方法，特别是关注命令行参数和输入流。</p><h2 id="_2-maven依赖" tabindex="-1"><a class="header-anchor" href="#_2-maven依赖"><span>2. Maven依赖</span></a></h2><p>对于本教程，我们需要几个测试库（Junit和Mockito）以及Apache Commons CLI来处理参数：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```commons-cli```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```commons-cli```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```1.6.0```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```org.junit.jupiter```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```junit-jupiter-api```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```5.10.0```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>``test``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>``\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```org.mockito```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```mockito-core```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```5.5.0```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>``test``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>``\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以在Maven中央仓库中找到JUnit、Mockito和Apache Commons CLI的最新版本。</p><h2 id="_3-设置场景" tabindex="-1"><a class="header-anchor" href="#_3-设置场景"><span>3. 设置场景</span></a></h2><p>为了说明main()方法的测试，让我们定义一个实际场景。想象我们被要求开发一个简单的应用程序，旨在计算提供的数字之和。它应该能够读取输入，无论是从控制台交互式地读取还是从文件中读取，这取决于提供的参数。程序输入包括一系列数字。</p><p>根据我们的场景，程序应该根据用户定义的参数动态适应其行为，导致执行不同的工作流程。</p><h3 id="_3-1-使用apache-commons-cli定义程序参数" tabindex="-1"><a class="header-anchor" href="#_3-1-使用apache-commons-cli定义程序参数"><span>3.1. 使用Apache Commons CLI定义程序参数</span></a></h3><p>我们需要为描述的场景定义两个基本参数：“i”和“f”。“i”选项指定输入源，有两个可能的值（FILE和CONSOLE）。同时，“f”选项允许我们指定要读取的文件名，它仅在“i”选项被指定为FILE时有效。</p><p>为了简化我们与这些参数的交互，我们可以依赖Apache Commons CLI库。这个工具不仅验证参数，还促进值的解析。以下是使用Apache的Option构建器定义“i”选项的示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Option</span> inputTypeOption <span class="token operator">=</span> <span class="token class-name">Option</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token string">&quot;i&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">longOpt</span><span class="token punctuation">(</span><span class="token string">&quot;input&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">required</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">desc</span><span class="token punctuation">(</span><span class="token string">&quot;The input type&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token class-name">InputType</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">hasArg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一旦我们定义了我们的选项，Apache Commons CLI将帮助解析输入参数，以分支业务逻辑的工作流程：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Options</span> options <span class="token operator">=</span> <span class="token function">getOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">CommandLineParser</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">CommandLine</span> commandLine <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span>commandLine<span class="token punctuation">.</span><span class="token function">hasOption</span><span class="token punctuation">(</span><span class="token string">&quot;i&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;Option i is present. The value is: &quot;</span> <span class="token operator">+</span> commandLine<span class="token punctuation">.</span><span class="token function">getOptionValue</span><span class="token punctuation">(</span><span class="token string">&quot;i&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> optionValue <span class="token operator">=</span> commandLine<span class="token punctuation">.</span><span class="token function">getOptionValue</span><span class="token punctuation">(</span><span class="token string">&quot;i&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">InputType</span> inputType <span class="token operator">=</span> <span class="token class-name">InputType</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>optionValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">String</span> fileName <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>commandLine<span class="token punctuation">.</span><span class="token function">hasOption</span><span class="token punctuation">(</span><span class="token string">&quot;f&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        fileName <span class="token operator">=</span> commandLine<span class="token punctuation">.</span><span class="token function">getOptionValue</span><span class="token punctuation">(</span><span class="token string">&quot;f&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token class-name">String</span> inputString <span class="token operator">=</span> inputReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>inputType<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> calculatedSum <span class="token operator">=</span> calculator<span class="token punctuation">.</span><span class="token function">calculateSum</span><span class="token punctuation">(</span>inputString<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了保持清晰和简单，我们将责任划分为不同的类。_InputType_枚举封装了可能的输入参数值。_InputReader_类根据_InputType_检索输入字符串，_Calculator_根据解析的字符串计算总和。</p><p>有了这样的分离，我们可以保持一个简单的主类，如下所示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Bootstrapper</span> bootstrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bootstrapper</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    bootstrapper<span class="token punctuation">.</span><span class="token function">processRequest</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-如何测试main方法" tabindex="-1"><a class="header-anchor" href="#_4-如何测试main方法"><span>4. 如何测试Main方法</span></a></h2><p>main()方法的签名和行为与我们在应用程序中使用的常规方法不同。<strong>因此，我们需要结合多种特定于测试静态方法、void方法、输入流和参数的测试策略。</strong></p><p>我们将在以下段落中介绍每个概念，但首先让我们看看main()方法的业务逻辑可能是如何构建的。</p><p>当我们在开发一个新应用程序，并且我们可以完全控制其架构时，那么main()方法不应该有任何复杂的逻辑，而只是初始化所需的工作流程。有了这样的架构，我们可以对每个工作流程部分（<em>Bootstrapper</em>、_InputReader_和_Calculator_可以单独测试）进行适当的单元测试。</p><p>另一方面，当涉及到有历史的旧应用程序时，事情可能会变得有点棘手。特别是当以前的开发人员直接在主类的静态上下文中放置了很多业务逻辑时。遗留代码并不总是可以更改的，我们应该使用已经编写的内容。</p><h3 id="_4-1-如何测试静态方法" tabindex="-1"><a class="header-anchor" href="#_4-1-如何测试静态方法"><span>4.1. 如何测试静态方法</span></a></h3><p>在过去，使用Mockito处理静态上下文相当具有挑战性，通常需要使用像PowerMockito这样的库。然而，在Mockito的最新版本中，这个限制已经被克服。**随着3.4.0版本中Mockito.mockStatic的引入，我们现在可以轻松地模拟和验证静态方法，而不需要额外的库。**这个增强功能简化了涉及静态方法的测试场景，使我们的测试过程更加流畅和高效。</p><p>使用_MockedStatic_我们可以执行与常规Mock相同的操作：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">MockedStatic</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SimpleMain</span><span class="token punctuation">&gt;</span></span>` mockedStatic <span class="token operator">=</span> <span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">mockStatic</span><span class="token punctuation">(</span><span class="token class-name">StaticMain</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    mockedStatic<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">StaticMain</span><span class="token punctuation">.</span><span class="token function">calculateSum</span><span class="token punctuation">(</span>stringArgumentCaptor<span class="token punctuation">.</span><span class="token function">capture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    mockedStatic<span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">StaticMain</span><span class="token punctuation">.</span><span class="token function">calculateSum</span><span class="token punctuation">(</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了强制_MockedStatic_作为Spy工作，我们需要添加一个配置参数：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">MockedStatic</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StaticMain</span><span class="token punctuation">&gt;</span></span>` mockedStatic <span class="token operator">=</span> <span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">mockStatic</span><span class="token punctuation">(</span><span class="token class-name">StaticMain</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token constant">CALLS_REAL_METHODS</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>一旦我们根据需要配置了_MockedStatic_，我们就可以彻底测试静态方法。</p><h3 id="_4-2-如何测试void方法" tabindex="-1"><a class="header-anchor" href="#_4-2-如何测试void方法"><span>4.2. 如何测试Void方法</span></a></h3><p>遵循功能开发方法，方法应该符合几个要求。它们应该是独立的，不应该修改传入的参数，并应该返回处理结果。</p><p>有了这样的行为，我们可以根据返回结果的验证轻松编写单元测试。<strong>然而，测试void方法则不同，重点转移到了方法执行引起的副作用和状态变化上。</strong></p><h3 id="_4-3-如何测试程序参数" tabindex="-1"><a class="header-anchor" href="#_4-3-如何测试程序参数"><span>4.3. 如何测试程序参数</span></a></h3><p>我们可以像调用任何其他标准Java方法一样，从测试类中调用main()方法。为了评估它与不同参数集的行为，我们只需要在调用期间提供这些参数。</p><p>考虑到前一段中定义的_Options_，我们可以用短参数_i_调用我们的main()：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arguments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">&quot;-i&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;CONSOLE&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token class-name">SimpleMain</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>同样，我们可以用_i_参数的长形式调用main方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arguments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">&quot;--input&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;CONSOLE&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token class-name">SimpleMain</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4-如何测试数据输入流" tabindex="-1"><a class="header-anchor" href="#_4-4-如何测试数据输入流"><span>4.4. 如何测试数据输入流</span></a></h3><p>通常，从控制台读取是使用_System.in_构建的：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">readFromConsole</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Enter values for calculation: \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>_System.in_是主机环境指定的“标准”输入流，通常对应于键盘输入。我们不能在测试中提供键盘输入，但我们可以更改由_System.in_引用的流类型：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">InputStream</span> fips <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;1 2 3&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setIn</span><span class="token punctuation">(</span>fips<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们更改了默认输入类型，以便应用程序将从_ByteArrayInputStream_读取，而不会一直等待用户输入。</p><p>我们可以在测试中使用任何其他类型的_InputStream_，例如，我们可以从文件中读取：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">InputStream</span> fips <span class="token operator">=</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;test-input.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setIn</span><span class="token punctuation">(</span>fips<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，采用相同的方法，我们可以替换输出流以验证程序写入的内容：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ByteArrayOutputStream</span> byteArrayOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">PrintStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setOut</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>采用这种方法，我们将看不到控制台输出，因为_System.out_将把所有数据发送到_ByteArrayOutputStream_而不是控制台。</p><h2 id="_5-完整的测试示例" tabindex="-1"><a class="header-anchor" href="#_5-完整的测试示例"><span>5. 完整的测试示例</span></a></h2><p>让我们结合前几段收集的所有知识来编写一个完整的测试。我们将执行以下步骤：</p><ol><li>将我们的主类作为spy进行模拟</li><li>将输入参数定义为_String_数组</li><li>替换_System.in_中的默认流</li><li>验证程序在静态上下文中调用了所有必需的方法，或者程序将必要的结果写入控制台。</li><li>将_System.in_和_System.out_流替换回原始状态，以便流替换不会影响其他测试</li></ol><p>在这个例子中，我们有一个测试_StaticMain_类的测试，其中所有逻辑都放在静态上下文中。我们用_ByteArrayInputStream_替换了_System.in_，并基于_verify()_构建了我们的验证：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenArgumentasConsoleInput_WhenReadFromSubstitutedByteArrayInputStream_ThenSuccessfullyCalculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arguments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">&quot;-i&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;CONSOLE&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">MockedStatic</span> mockedStatic <span class="token operator">=</span> <span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">mockStatic</span><span class="token punctuation">(</span><span class="token class-name">StaticMain</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token constant">CALLS_REAL_METHODS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token class-name">InputStream</span> fips <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;1 2 3&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n        <span class="token class-name">InputStream</span> original <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">;</span>\n\n        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setIn</span><span class="token punctuation">(</span>fips<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">ArgumentCaptor</span> stringArgumentCaptor <span class="token operator">=</span> <span class="token class-name">ArgumentCaptor</span><span class="token punctuation">.</span><span class="token function">forClass</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">StaticMain</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        mockedStatic<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">StaticMain</span><span class="token punctuation">.</span><span class="token function">calculateSum</span><span class="token punctuation">(</span>stringArgumentCaptor<span class="token punctuation">.</span><span class="token function">capture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setIn</span><span class="token punctuation">(</span>original<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 我们可以为_SimpleMain_类使用稍微不同的策略，因为这里我们通过其他类分发了所有业务逻辑。</span>\n\n<span class="token comment">// 在这种情况下，我们甚至不需要模拟_SimpleMain_类，因为里面没有其他方法。我们用文件流替换_System.in_，并基于传播到_ByteArrayOutputStream_的控制台输出构建我们的验证：</span>\n\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenArgumentAsConsoleInput_WhenReadFromSubstitutedFileStream_ThenSuccessfullyCalculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arguments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">&quot;-i&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;CONSOLE&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">InputStream</span> fips <span class="token operator">=</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;test-input.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">ByteArrayOutputStream</span> byteArrayOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">PrintStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>byteArrayOutputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setIn</span><span class="token punctuation">(</span>fips<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setOut</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">SimpleMain</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">String</span> consoleOutput <span class="token operator">=</span> byteArrayOutputStream<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">defaultCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertTrue</span><span class="token punctuation">(</span>consoleOutput<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;Calculated sum: 10&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    fips<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n## <span class="token number">6.</span> 结论\n\n在本文中，我们探讨了几种main方法设计及其相应的测试方法。我们涵盖了静态和<span class="token keyword">void</span>方法的测试，处理参数和更改默认系统流。\n\n完整的示例可以在<span class="token class-name">GitHub</span>上找到。\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>OK</p>',60),c=[e];function o(i,l){return s(),a("div",null,c)}const r=n(p,[["render",o],["__file","2024-06-30-Test Main Method with JUnit.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-06-30/2024-06-30-Test%20Main%20Method%20with%20JUnit.html","title":"使用JUnit测试main方法","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","JUnit"],"tag":["JUnit","Testing","main method"],"head":[["meta",{"name":"keywords","content":"JUnit, Testing, main method, Java"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-06-30/2024-06-30-Test%20Main%20Method%20with%20JUnit.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"使用JUnit测试main方法"}],["meta",{"property":"og:description","content":"使用JUnit测试main方法 1. 概述 main()方法是每个Java应用程序的起始点，根据应用程序的类型，它的外观可能会有所不同。在常规的Web应用程序中，main()方法将负责启动上下文，但在某些控制台应用程序中，我们将业务逻辑放入其中。 测试main()方法相当复杂，因为我们有一个只接受字符串参数且不返回任何内容的静态方法。 在本文中，我们将..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-30T14:33:18.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"JUnit"}],["meta",{"property":"article:tag","content":"Testing"}],["meta",{"property":"article:tag","content":"main method"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-30T14:33:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用JUnit测试main方法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-30T14:33:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"使用JUnit测试main方法 1. 概述 main()方法是每个Java应用程序的起始点，根据应用程序的类型，它的外观可能会有所不同。在常规的Web应用程序中，main()方法将负责启动上下文，但在某些控制台应用程序中，我们将业务逻辑放入其中。 测试main()方法相当复杂，因为我们有一个只接受字符串参数且不返回任何内容的静态方法。 在本文中，我们将..."},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. Maven依赖","slug":"_2-maven依赖","link":"#_2-maven依赖","children":[]},{"level":2,"title":"3. 设置场景","slug":"_3-设置场景","link":"#_3-设置场景","children":[{"level":3,"title":"3.1. 使用Apache Commons CLI定义程序参数","slug":"_3-1-使用apache-commons-cli定义程序参数","link":"#_3-1-使用apache-commons-cli定义程序参数","children":[]}]},{"level":2,"title":"4. 如何测试Main方法","slug":"_4-如何测试main方法","link":"#_4-如何测试main方法","children":[{"level":3,"title":"4.1. 如何测试静态方法","slug":"_4-1-如何测试静态方法","link":"#_4-1-如何测试静态方法","children":[]},{"level":3,"title":"4.2. 如何测试Void方法","slug":"_4-2-如何测试void方法","link":"#_4-2-如何测试void方法","children":[]},{"level":3,"title":"4.3. 如何测试程序参数","slug":"_4-3-如何测试程序参数","link":"#_4-3-如何测试程序参数","children":[]},{"level":3,"title":"4.4. 如何测试数据输入流","slug":"_4-4-如何测试数据输入流","link":"#_4-4-如何测试数据输入流","children":[]}]},{"level":2,"title":"5. 完整的测试示例","slug":"_5-完整的测试示例","link":"#_5-完整的测试示例","children":[]}],"git":{"createdTime":1719757998000,"updatedTime":1719757998000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":7.42,"words":2227},"filePathRelative":"posts/baeldung/2024-06-30/2024-06-30-Test Main Method with JUnit.md","localizedDate":"2022年4月1日","excerpt":"<hr>\\n<h1>使用JUnit测试main方法</h1>\\n<h2>1. 概述</h2>\\n<p>main()方法是每个Java应用程序的起始点，根据应用程序的类型，它的外观可能会有所不同。在常规的Web应用程序中，main()方法将负责启动上下文，但在某些控制台应用程序中，我们将业务逻辑放入其中。</p>\\n<p>测试main()方法相当复杂，因为我们有一个只接受字符串参数且不返回任何内容的静态方法。</p>\\n<p>在本文中，我们将重点讨论如何测试main方法，特别是关注命令行参数和输入流。</p>\\n<h2>2. Maven依赖</h2>\\n<p>对于本教程，我们需要几个测试库（Junit和Mockito）以及Apache Commons CLI来处理参数：</p>","autoDesc":true}');export{r as comp,d as data};
