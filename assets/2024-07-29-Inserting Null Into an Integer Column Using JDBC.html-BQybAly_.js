import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-D9qUUkNr.js";const e={},p=t(`<h1 id="使用jdbc向整数列插入空值" tabindex="-1"><a class="header-anchor" href="#使用jdbc向整数列插入空值"><span>使用JDBC向整数列插入空值</span></a></h1><p>在本文中，我们将探讨如何使用纯JDBC在数据库中存储空值。我们将首先描述使用空值的原因，然后提供几个代码示例。</p><h2 id="_2-使用空值" tabindex="-1"><a class="header-anchor" href="#_2-使用空值"><span>2. 使用空值</span></a></h2><p>空值是一个超越所有编程语言的关键字。它表示一个特殊值。<strong>普遍的看法是空值没有值或代表无</strong>。在数据库列中存储一个空值意味着在硬盘上保留了空间。如果适当的值变得可用，我们可以将其存储在那个空间中。</p><p><strong>另一种看法是空值等于零或一个空字符串</strong>。在特定上下文中，零或空字符串可能具有含义，例如，仓库中的零项。我们还可以执行如求和或连接等操作。但是，这些操作在处理空值时没有意义。</p><p>使用空值来表示我们数据中的特殊情况有许多优点。其中之一的优点是大多数数据库引擎会从内部函数如求和或平均值中排除空值。另一方面，当空值在我们的代码中时，我们可以编程特殊的操作来减轻缺失值。</p><p>将空值带到表格中也会带来一些缺点。当编写处理包含空值数据的代码时，我们必须以不同的方式处理这些数据。这可能导致代码难看、杂乱和错误。此外，空值在数据库中可能具有可变长度。存储在整数和字节列中的空值将具有不同的长度。</p><h2 id="_3-实现" tabindex="-1"><a class="header-anchor" href="#_3-实现"><span>3. 实现</span></a></h2><p>对于我们的示例，我们将使用一个简单的Maven模块，使用H2内存数据库。不需要其他依赖项。</p><p>首先，让我们创建一个名为_Person_的POJO类。这个类将有四个字段。用作我们数据库的主键的_Id_，以及是字符串的_name_和_lastName_，以及表示为_Integer_的_age_。<strong>_Age_不是必需字段，可以是空值：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
    <span class="token comment">//getters and setters</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了创建一个反映这个Java类的数据库表，我们将使用以下SQL查询：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> Person <span class="token punctuation">(</span>id <span class="token keyword">INTEGER</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span> name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lastName <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span> age <span class="token keyword">INTEGER</span><span class="token punctuation">,</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>所有这些都处理完毕后，现在我们可以专注于我们的主要目标。要将空值设置到_Integer_列中，有两种在_PreparedStatement_接口中定义的方法。</p><h3 id="_3-1-使用-setnull-方法" tabindex="-1"><a class="header-anchor" href="#_3-1-使用-setnull-方法"><span>3.1. 使用_setNull_方法</span></a></h3><p>使用_setNull_方法，<strong>我们在执行SQL查询之前总是确保我们的字段值是空的</strong>。这为我们的代码提供了更多的灵活性。</p><p>使用列索引，我们还<strong>必须向_PreparedStatement_实例提供有关底层列类型的信息</strong>。在我们的情况下，这是_java.sql.Types.INTEGER_。</p><p>这种方法仅适用于空值。对于其他任何情况，我们必须使用_PreparedStatement_实例的适当方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenNewPerson_whenSetNullIsUsed_thenNewRecordIsCreated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
    <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Doe&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">PreparedStatement</span> preparedStatement <span class="token operator">=</span> <span class="token class-name">DBConfig</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token constant">SQL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        preparedStatement<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> person<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> person<span class="token punctuation">.</span><span class="token function">getLastName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            preparedStatement<span class="token punctuation">.</span><span class="token function">setNull</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token class-name">Types</span><span class="token punctuation">.</span><span class="token constant">INTEGER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            preparedStatement<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> person<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> noOfRows <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">assertThat</span><span class="token punctuation">(</span>noOfRows<span class="token punctuation">,</span> <span class="token function">equalTo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们不检查_getAge_方法是否返回空值并使用空值调用_setInt_方法，我们将得到一个_NullPointerException_。</p><h3 id="_3-2-使用-setobject-方法" tabindex="-1"><a class="header-anchor" href="#_3-2-使用-setobject-方法"><span>3.2. 使用_setObject_方法</span></a></h3><p>_setObject_方法为我们处理代码中的缺失数据提供了较少的灵活性。我们可以传递我们拥有的数据，<strong>底层结构将映射Java _Object_类型到SQL类型</strong>。</p><p>请注意，并非所有数据库都允许在不指定SQL类型的情况下传递空值。例如，JDBC驱动程序不能从空值中推断SQL类型。</p><p>为了安全起见使用这种方法，最好向_setObject_方法传递一个SQL类型：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenNewPerson_whenSetObjectIsUsed_thenNewRecordIsCreated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
    <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Doe&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">PreparedStatement</span> preparedStatement <span class="token operator">=</span> <span class="token class-name">DBConfig</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token constant">SQL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        preparedStatement<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> person<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> person<span class="token punctuation">.</span><span class="token function">getLastName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        preparedStatement<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> person<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Types</span><span class="token punctuation">.</span><span class="token constant">INTEGER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> noOfRows <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">assertThat</span><span class="token punctuation">(</span>noOfRows<span class="token punctuation">,</span> <span class="token function">equalTo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-结论" tabindex="-1"><a class="header-anchor" href="#_4-结论"><span>4. 结论</span></a></h2><p>在本教程中，我们解释了数据库中空值的一些基本用法。然后我们提供了示例，展示了如何使用纯JDBC在_Integer_列中存储空值。</p><p>如常，所有代码都可以在GitHub上找到。</p>`,28),o=[p];function c(l,u){return a(),s("div",null,o)}const k=n(e,[["render",c],["__file","2024-07-29-Inserting Null Into an Integer Column Using JDBC.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-29/2024-07-29-Inserting%20Null%20Into%20an%20Integer%20Column%20Using%20JDBC.html","title":"使用JDBC向整数列插入空值","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","JDBC"],"head":[["meta",{"name":"keywords","content":"JDBC, null, database, Java"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-29/2024-07-29-Inserting%20Null%20Into%20an%20Integer%20Column%20Using%20JDBC.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"使用JDBC向整数列插入空值"}],["meta",{"property":"og:description","content":"使用JDBC向整数列插入空值 在本文中，我们将探讨如何使用纯JDBC在数据库中存储空值。我们将首先描述使用空值的原因，然后提供几个代码示例。 2. 使用空值 空值是一个超越所有编程语言的关键字。它表示一个特殊值。普遍的看法是空值没有值或代表无。在数据库列中存储一个空值意味着在硬盘上保留了空间。如果适当的值变得可用，我们可以将其存储在那个空间中。 另一种..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-29T06:05:04.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-29T06:05:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用JDBC向整数列插入空值\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-29T06:05:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"使用JDBC向整数列插入空值 在本文中，我们将探讨如何使用纯JDBC在数据库中存储空值。我们将首先描述使用空值的原因，然后提供几个代码示例。 2. 使用空值 空值是一个超越所有编程语言的关键字。它表示一个特殊值。普遍的看法是空值没有值或代表无。在数据库列中存储一个空值意味着在硬盘上保留了空间。如果适当的值变得可用，我们可以将其存储在那个空间中。 另一种..."},"headers":[{"level":2,"title":"2. 使用空值","slug":"_2-使用空值","link":"#_2-使用空值","children":[]},{"level":2,"title":"3. 实现","slug":"_3-实现","link":"#_3-实现","children":[{"level":3,"title":"3.1. 使用_setNull_方法","slug":"_3-1-使用-setnull-方法","link":"#_3-1-使用-setnull-方法","children":[]},{"level":3,"title":"3.2. 使用_setObject_方法","slug":"_3-2-使用-setobject-方法","link":"#_3-2-使用-setobject-方法","children":[]}]},{"level":2,"title":"4. 结论","slug":"_4-结论","link":"#_4-结论","children":[]}],"git":{"createdTime":1722233104000,"updatedTime":1722233104000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":3.64,"words":1091},"filePathRelative":"posts/baeldung/2024-07-29/2024-07-29-Inserting Null Into an Integer Column Using JDBC.md","localizedDate":"2022年4月1日","excerpt":"\\n<p>在本文中，我们将探讨如何使用纯JDBC在数据库中存储空值。我们将首先描述使用空值的原因，然后提供几个代码示例。</p>\\n<h2>2. 使用空值</h2>\\n<p>空值是一个超越所有编程语言的关键字。它表示一个特殊值。<strong>普遍的看法是空值没有值或代表无</strong>。在数据库列中存储一个空值意味着在硬盘上保留了空间。如果适当的值变得可用，我们可以将其存储在那个空间中。</p>\\n<p><strong>另一种看法是空值等于零或一个空字符串</strong>。在特定上下文中，零或空字符串可能具有含义，例如，仓库中的零项。我们还可以执行如求和或连接等操作。但是，这些操作在处理空值时没有意义。</p>","autoDesc":true}');export{k as comp,d as data};
