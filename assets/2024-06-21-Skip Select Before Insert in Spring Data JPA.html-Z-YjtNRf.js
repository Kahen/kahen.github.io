import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as e}from"./app-DhDDm-kk.js";const t={},p=e('<hr><h1 id="spring-data-jpa-中跳过插入前的-select-查询" tabindex="-1"><a class="header-anchor" href="#spring-data-jpa-中跳过插入前的-select-查询"><span>Spring Data JPA 中跳过插入前的 SELECT 查询</span></a></h1><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p>在使用 Spring Data JPA Repository 保存实体时，我们可能会在日志中遇到额外的 <em>SELECT</em> 查询。这可能会导致由于大量额外调用而引起的性能问题。</p><p><strong>在本教程中，我们将探讨一些跳过日志中 <em>SELECT</em> 的方法并提高性能。</strong></p><h2 id="_2-配置" tabindex="-1"><a class="header-anchor" href="#_2-配置"><span>2. 配置</span></a></h2><p>在深入研究 Spring Data JPA 并进行测试之前，我们需要采取一些准备步骤。</p><h3 id="_2-1-依赖项" tabindex="-1"><a class="header-anchor" href="#_2-1-依赖项"><span>2.1. 依赖项</span></a></h3><p>为了创建我们的测试仓库，我们将使用 Spring Data JPA 依赖项：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>````org.springframework.boot````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>````spring-boot-starter-data-jpa````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>````\n````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将使用 H2 数据库作为测试数据库。让我们添加它的依赖项：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>````com.h2database````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>````h2````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>````\n````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在我们的集成测试中，我们将使用测试 Spring 上下文。让我们添加 spring-boot-starter-test 依赖项：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>````org.springframework.boot````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>````spring-boot-starter-test````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>````\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>`test`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>`\n````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-配置" tabindex="-1"><a class="header-anchor" href="#_2-2-配置"><span>2.2. 配置</span></a></h3><p>以下是我们将在示例中使用的 JPA 配置：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.jpa.hibernate.dialect</span><span class="token punctuation">=</span><span class="token value attr-value">org.hibernate.dialect.H2Dialect</span>\n<span class="token key attr-name">spring.jpa.hibernate.ddl-auto</span><span class="token punctuation">=</span><span class="token value attr-value">create-drop</span>\n<span class="token key attr-name">spring.jpa.hibernate.show_sql</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>\n<span class="token key attr-name">spring.jpa.hibernate.hbm2ddl.auto</span><span class="token punctuation">=</span><span class="token value attr-value">create-drop</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据此配置，我们将让 Hibernate 生成模式，并将所有 SQL 查询记录到日志中。</p><h2 id="_3-select-查询的原因" tabindex="-1"><a class="header-anchor" href="#_3-select-查询的原因"><span>3. SELECT 查询的原因</span></a></h2><p><strong>让我们看看为什么我们在实现简单的仓库时会有这样的额外 <em>SELECT</em> 查询。</strong></p><p>首先，让我们创建一个实体：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Task</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Id</span>\n    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> description<span class="token punctuation">;</span>\n\n    <span class="token comment">//getters and setters</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，让我们为这个实体创建一个仓库：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Repository</span>\n<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TaskRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Task</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>````` <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，让我们保存一个新 <em>Task</em> 并指定 ID：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>\n<span class="token keyword">private</span> <span class="token class-name">TaskRepository</span> taskRepository<span class="token punctuation">;</span>\n\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenRepository_whenSaveNewTaskWithPopulatedId_thenExtraSelectIsExpected</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Task</span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    task<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    taskRepository<span class="token punctuation">.</span><span class="token function">saveAndFlush</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们调用 <em>saveAndFlush()</em> —— <em>save()</em> 方法的行为将与我们的仓库相同 —— 内部我们使用以下代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> `<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>` <span class="token class-name">S</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">S</span> entity<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isNew</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        entityManager<span class="token punctuation">.</span><span class="token function">persist</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> entity<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> entityManager<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，如果我们的实体被认为是新的，我们将调用实体管理器的 <em>merge()</em> 方法。在 <em>merge()</em> 中，JPA 检查我们的实体是否存在于缓存和持久性上下文中。由于我们的对象是新的，它将找不到。最后，它尝试从数据源加载实体。</p><p>这就是我们在日志中遇到 <em>SELECT</em> 查询的地方。由于我们没有数据库中的这样一个项目，我们在那之后调用了 <em>INSERT</em> 查询：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>Hibernate: <span class="token keyword">select</span> task0_<span class="token punctuation">.</span>id <span class="token keyword">as</span> id1_1_0_<span class="token punctuation">,</span> task0_<span class="token punctuation">.</span>description <span class="token keyword">as</span> descript2_1_0_ <span class="token keyword">from</span> task task0_ <span class="token keyword">where</span> task0_<span class="token punctuation">.</span>id<span class="token operator">=</span>?\nHibernate: <span class="token keyword">insert</span> <span class="token keyword">into</span> task <span class="token punctuation">(</span>id<span class="token punctuation">,</span> description<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token keyword">default</span><span class="token punctuation">,</span> ?<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <em>isNew()</em> 方法实现中我们可以找到以下代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isNew</span><span class="token punctuation">(</span><span class="token class-name">T</span> entity<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">ID</span> id <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> id <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>如果我们在应用程序端指定了 ID，我们的实体将被视为新的。在这种情况下，将向数据库发送额外的 <em>SELECT</em> 查询。</strong></p><h2 id="_4-使用-generatedvalue" tabindex="-1"><a class="header-anchor" href="#_4-使用-generatedvalue"><span>4. 使用 <em>@GeneratedValue</em></span></a></h2><p><strong>一种可能的解决方案是在应用程序端不指定 ID。</strong> 我们可以使用 <em>@GeneratedValue</em> 注解，并指定将用于在数据库端生成 ID 的策略。</p><p>让我们为我们的 <em>TaskWithGeneratedId</em> ID 指定生成策略：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskWithGeneratedId</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Id</span>\n    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">IDENTITY</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们现在不设置 ID 来保存 <em>TaskWithGeneratedId</em> 实体的一个实例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>\n<span class="token keyword">private</span> <span class="token class-name">TaskWithGeneratedIdRepository</span> taskWithGeneratedIdRepository<span class="token punctuation">;</span>\n\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenRepository_whenSaveNewTaskWithGeneratedId_thenNoExtraSelectIsExpected</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">TaskWithGeneratedId</span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskWithGeneratedId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">TaskWithGeneratedId</span> saved <span class="token operator">=</span> taskWithGeneratedIdRepository<span class="token punctuation">.</span><span class="token function">saveAndFlush</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertNotNull</span><span class="token punctuation">(</span>saved<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如我们在日志中看到的，没有 <em>SELECT</em> 查询，并且为实体生成了新的 ID。</p><h2 id="_5-实现-persistable" tabindex="-1"><a class="header-anchor" href="#_5-实现-persistable"><span>5. 实现 <em>Persistable</em></span></a></h2><p><strong>我们拥有的另一个选择是在实体中实现 <em>Persistable</em> 接口：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersistableTask</span> <span class="token keyword">implements</span> <span class="token class-name">Persistable</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>` <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Id</span>\n    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Transient</span>\n    <span class="token keyword">private</span> <span class="token keyword">boolean</span> isNew <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> id<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> isNew<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">//getters and setters</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里我们添加了一个新的字段 <em>isNew</em> 并将其注解为 <em>@Transient</em> 以避免在基础中创建列。使用重写的 <em>isNew()</em> 方法，即使我们指定了 ID，也可以将我们的实体视为新的。</p><p>现在，在内部，JPA 使用另一种逻辑来考虑实体是否是新的：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JpaPersistableEntityInformation</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isNew</span><span class="token punctuation">(</span><span class="token class-name">T</span> entity<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> entity<span class="token punctuation">.</span><span class="token function">isNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们使用 <em>PersistableTaskRepository</em> 保存我们的 <em>PersistableTask</em>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>\n<span class="token keyword">private</span> <span class="token class-name">PersistableTaskRepository</span> persistableTaskRepository<span class="token punctuation">;</span>\n\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenRepository_whenSaveNewPersistableTask_thenNoExtraSelectIsExpected</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">PersistableTask</span> persistableTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PersistableTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    persistableTask<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    persistableTask<span class="token punctuation">.</span><span class="token function">setNew</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">PersistableTask</span> saved <span class="token operator">=</span> persistableTaskRepository<span class="token punctuation">.</span><span class="token function">saveAndFlush</span><span class="token punctuation">(</span>persistableTask<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> saved<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如我们所见，我们只有 <em>INSERT</em> 日志消息，并且实体包含了我们指定的 ID。</p><p>如果我们尝试保存几个具有相同 ID 的新实体，我们会遇到异常：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenRepository_whenSaveNewPersistableTasksWithSameId_thenExceptionIsExpected</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">PersistableTask</span> persistableTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PersistableTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    persistableTask<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    persistableTask<span class="token punctuation">.</span><span class="token function">setNew</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    persistableTaskRepository<span class="token punctuation">.</span><span class="token function">saveAndFlush</span><span class="token punctuation">(</span>persistableTask<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">PersistableTask</span> duplicateTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PersistableTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    duplicateTask<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    duplicateTask<span class="token punctuation">.</span><span class="token function">setNew</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">assertThrows</span><span class="token punctuation">(</span><span class="token class-name">DataIntegrityViolationException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>\n        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> persistableTaskRepository<span class="token punctuation">.</span><span class="token function">saveAndFlush</span><span class="token punctuation">(</span>duplicateTask<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>所以，如果我们承担生成 ID 的责任，我们还应该确保它们的唯一性。</strong></p><h2 id="_6-直接使用-persist-方法" tabindex="-1"><a class="header-anchor" href="#_6-直接使用-persist-方法"><span>6. 直接使用 <em>persist()</em> 方法</span></a></h2><p>正如我们在前面的示例中看到的，我们所做的所有操作都导致了调用 <em>persist()</em> 方法。<strong>我们还可以直接调用这个方法创建我们仓库的扩展。</strong></p><p>让我们创建一个带有 <em>persist()</em> 方法的接口：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TaskRepositoryExtension</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Task</span> <span class="token function">persistAndFlush</span><span class="token punctuation">(</span><span class="token class-name">Task</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，让我们制作这个接口的实现 bean：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskRepositoryExtensionImpl</span> <span class="token keyword">implements</span> <span class="token class-name">TaskRepositoryExtension</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@PersistenceContext</span>\n    <span class="token keyword">private</span> <span class="token class-name">EntityManager</span> entityManager<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">Task</span> <span class="token function">persistAndFlush</span><span class="token punctuation">(</span><span class="token class-name">Task</span> task<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        entityManager<span class="token punctuation">.</span><span class="token function">persist</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        entityManager<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> task<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们使用新接口扩展我们的 <em>TaskRepository</em>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Repository</span>\n<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TaskRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Task</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>`````<span class="token punctuation">,</span> <span class="token class-name">TaskRepositoryExtension</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们调用我们的自定义 <em>persistAndFlush()</em> 方法来保存 <em>Task</em> 实例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenRepository_whenPersistNewTaskUsingCustomPersistMethod_thenNoExtraSelectIsExpected</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Task</span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    task<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Task</span> saved <span class="token operator">=</span> taskRepository<span class="token punctuation">.</span><span class="token function">persistAndFlush</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> saved<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到日志消息中有 <em>INSERT</em> 调用，没有额外的 <em>SELECT</em> 调用。</p><h2 id="_7-使用-hypersistence-utils-中的-basejparepository" tabindex="-1"><a class="header-anchor" href="#_7-使用-hypersistence-utils-中的-basejparepository"><span>7. 使用 Hypersistence Utils 中的 <em>BaseJpaRepository</em></span></a></h2><p><strong>上一节中的想法已经在 Hypersistence Utils 项目中实现</strong>。该项目为我们提供了 <em>BaseJpaRepository</em>，其中我们有 <em>persistAndFlush()</em> 方法的实现以及其批量模拟。</p><p>要使用它，我们必须指定额外的依赖项。我们应该根据我们的 Hibernate 版本选择正确的 Maven 构件：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>````io.hypersistence````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>````hypersistence-utils-hibernate-55````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>````\n````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们实现另一个仓库，它既扩展了 HypersistenceUtils 的 <em>BaseJpaRepository</em> 也扩展了 Spring Data JPA 的 <em>JpaRepository</em>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Repository</span>\n<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TaskJpaRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Task</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>`````<span class="token punctuation">,</span> <span class="token class-name">BaseJpaRepository</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Task</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>````` <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，我们还必须使用 <em>@EnableJpaRepositories</em> 注解启用 <em>BaseJpaRepository</em> 的实现：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableJpaRepositories</span><span class="token punctuation">(</span>\n    repositoryBaseClass <span class="token operator">=</span> <span class="token class-name">BaseJpaRepositoryImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span>\n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，让我们使用我们的新仓库保存 <em>Task</em>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>\n<span class="token keyword">private</span> <span class="token class-name">TaskJpaRepository</span> taskJpaRepository<span class="token punctuation">;</span>\n\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenRepository_whenPersistNewTaskUsingPersist_thenNoExtraSelectIsExpected</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Task</span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    task<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Task</span> saved <span class="token operator">=</span> taskJpaRepository<span class="token punctuation">.</span><span class="token function">persistAndFlush</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> saved<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们成功保存了 <em>Task</em>，并且日志中没有 <em>SELECT</em> 查询。</p><p><strong>就像在我们指定应用程序端 ID 的所有示例中一样，可能会有唯一性约束违规：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenRepository_whenPersistTaskWithTheSameId_thenExceptionIsExpected</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Task</span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    task<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    taskJpaRepository<span class="token punctuation">.</span><span class="token function">persistAndFlush</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">Task</span> secondTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    secondTask<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">assertThrows</span><span class="token punctuation">(</span><span class="token class-name">DataIntegrityViolationException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>\n        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span>  taskJpaRepository<span class="token punctuation">.</span><span class="token function">persistAndFlush</span><span class="token punctuation">(</span>secondTask<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-使用带有-query-注解的方法" tabindex="-1"><a class="header-anchor" href="#_8-使用带有-query-注解的方法"><span>8. 使用带有 <em>@Query</em> 注解的方法</span></a></h2><p><strong>我们还可以通过直接修改原生查询来避免额外的调用</strong>。让我们在 <em>TaskRepository</em> 中指定这样一个方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Repository</span>\n<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TaskRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Task</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>````` <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Modifying</span>\n    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;insert into task(id, description) values(:#{#task.id}, :#{#task.description})&quot;</span><span class="token punctuation">,</span>\n      nativeQuery <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>\n    <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;task&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Task</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个方法直接调用 <em>INSERT</em> 查询，避免了与持久性上下文的工作。ID 将从方法参数中发送的 <em>Task</em> 对象中获取。</p><p>现在让我们使用这个方法保存我们的 <em>Task</em>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenRepository_whenPersistNewTaskUsingNativeQuery_thenNoExtraSelectIsExpected</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Task</span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    task<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    taskRepository<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">assertTrue</span><span class="token punctuation">(</span>taskRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实体使用 ID 成功保存，没有额外的 <em>SELECT</em> 查询之前的 <em>INSERT</em>。 <strong>我们应该考虑，通过使用这种方法我们避免了 JPA 上下文和 Hibernate 缓存。</strong></p><h2 id="_9-结论" tabindex="-1"><a class="header-anchor" href="#_9-结论"><span>9. 结论</span></a></h2><p>在使用 Spring Data JPA 实现应用程序端 ID 生成时，我们可能会在日志中遇到额外的 <em>SELECT</em> 查询，导致性能下降。在本文中，我们讨论了解决这个问题的各种策略。</p><p>在某些情况下，将此逻辑移动到数据库端或根据我们的需求微调持久性逻辑是有意义的。在做出决定之前，我们应该考虑每种策略的利弊和潜在问题。</p><p>像往常一样，完整的源代码可以在 GitHub 上找到。</p><p>OK</p>',89),o=[p];function c(i,l){return a(),s("div",null,o)}const d=n(t,[["render",c],["__file","2024-06-21-Skip Select Before Insert in Spring Data JPA.html.vue"]]),k=JSON.parse('{"path":"/posts/baeldung/2024-06-21/2024-06-21-Skip%20Select%20Before%20Insert%20in%20Spring%20Data%20JPA.html","title":"Spring Data JPA 中跳过插入前的 SELECT 查询","lang":"zh-CN","frontmatter":{"date":"2024-06-22T00:00:00.000Z","category":["Spring Data JPA","JPA"],"tag":["Hibernate","Performance"],"head":[["meta",{"name":"keywords","content":"Spring Data JPA, JPA, Hibernate, Performance"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-06-21/2024-06-21-Skip%20Select%20Before%20Insert%20in%20Spring%20Data%20JPA.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Spring Data JPA 中跳过插入前的 SELECT 查询"}],["meta",{"property":"og:description","content":"Spring Data JPA 中跳过插入前的 SELECT 查询 1. 概述 在使用 Spring Data JPA Repository 保存实体时，我们可能会在日志中遇到额外的 SELECT 查询。这可能会导致由于大量额外调用而引起的性能问题。 在本教程中，我们将探讨一些跳过日志中 SELECT 的方法并提高性能。 2. 配置 在深入研究 Spr..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-21T18:35:43.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Hibernate"}],["meta",{"property":"article:tag","content":"Performance"}],["meta",{"property":"article:published_time","content":"2024-06-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-21T18:35:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring Data JPA 中跳过插入前的 SELECT 查询\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-21T18:35:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Spring Data JPA 中跳过插入前的 SELECT 查询 1. 概述 在使用 Spring Data JPA Repository 保存实体时，我们可能会在日志中遇到额外的 SELECT 查询。这可能会导致由于大量额外调用而引起的性能问题。 在本教程中，我们将探讨一些跳过日志中 SELECT 的方法并提高性能。 2. 配置 在深入研究 Spr..."},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. 配置","slug":"_2-配置","link":"#_2-配置","children":[{"level":3,"title":"2.1. 依赖项","slug":"_2-1-依赖项","link":"#_2-1-依赖项","children":[]},{"level":3,"title":"2.2. 配置","slug":"_2-2-配置","link":"#_2-2-配置","children":[]}]},{"level":2,"title":"3. SELECT 查询的原因","slug":"_3-select-查询的原因","link":"#_3-select-查询的原因","children":[]},{"level":2,"title":"4. 使用 @GeneratedValue","slug":"_4-使用-generatedvalue","link":"#_4-使用-generatedvalue","children":[]},{"level":2,"title":"5. 实现 Persistable","slug":"_5-实现-persistable","link":"#_5-实现-persistable","children":[]},{"level":2,"title":"6. 直接使用 persist() 方法","slug":"_6-直接使用-persist-方法","link":"#_6-直接使用-persist-方法","children":[]},{"level":2,"title":"7. 使用 Hypersistence Utils 中的 BaseJpaRepository","slug":"_7-使用-hypersistence-utils-中的-basejparepository","link":"#_7-使用-hypersistence-utils-中的-basejparepository","children":[]},{"level":2,"title":"8. 使用带有 @Query 注解的方法","slug":"_8-使用带有-query-注解的方法","link":"#_8-使用带有-query-注解的方法","children":[]},{"level":2,"title":"9. 结论","slug":"_9-结论","link":"#_9-结论","children":[]}],"git":{"createdTime":1718994943000,"updatedTime":1718994943000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":6.62,"words":1986},"filePathRelative":"posts/baeldung/2024-06-21/2024-06-21-Skip Select Before Insert in Spring Data JPA.md","localizedDate":"2024年6月22日","excerpt":"<hr>\\n<h1>Spring Data JPA 中跳过插入前的 SELECT 查询</h1>\\n<h2>1. 概述</h2>\\n<p>在使用 Spring Data JPA Repository 保存实体时，我们可能会在日志中遇到额外的 <em>SELECT</em> 查询。这可能会导致由于大量额外调用而引起的性能问题。</p>\\n<p><strong>在本教程中，我们将探讨一些跳过日志中 <em>SELECT</em> 的方法并提高性能。</strong></p>\\n<h2>2. 配置</h2>\\n<p>在深入研究 Spring Data JPA 并进行测试之前，我们需要采取一些准备步骤。</p>\\n","autoDesc":true}');export{d as comp,k as data};
