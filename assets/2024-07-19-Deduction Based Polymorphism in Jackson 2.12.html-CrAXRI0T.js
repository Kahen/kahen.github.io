import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-DpDzgwdT.js";const e={},p=t(`<h1 id="jackson-2-12中的基于推断的多态性" tabindex="-1"><a class="header-anchor" href="#jackson-2-12中的基于推断的多态性"><span>Jackson 2.12中的基于推断的多态性</span></a></h1><p>在本教程中，<strong>我们将探讨如何使用Jackson库中的基于推断的多态性特性。</strong></p><p>假设我们有如下所示的类结构： <img src="https://www.baeldung.com/wp-content/uploads/2022/04/CharacterDiagram-1-300x208.png" alt="img" loading="lazy"></p><p>首先，<em>NamedCharacter</em> 和 <em>ImperialSpy</em> 类实现了 <em>Character</em> 接口。其次，<em>King</em> 和 <em>Knight</em> 类实现了 <em>NamedCharacter</em> 类。最后，我们有一个 <em>ControlledCharacter</em> 类，其中包含对玩家控制的角色的引用。</p><p>我们希望能够解析JSON对象到Java对象，而无需修改接收到的JSON的结构。</p><p>让我们来看一下类的实现。注意，对于基接口，<strong>我们将使用Jackson注解来声明我们想要使用的推断方式。同时，我们还需要添加 <em>@JsonSubTypes</em> 注解来声明我们想要推断的类。</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@JsonTypeInfo</span><span class="token punctuation">(</span>use <span class="token operator">=</span> <span class="token class-name">Id</span><span class="token punctuation">.</span><span class="token constant">NAME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@JsonSubTypes</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token annotation punctuation">@Type</span><span class="token punctuation">(</span><span class="token class-name">ImperialSpy</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token annotation punctuation">@Type</span><span class="token punctuation">(</span><span class="token class-name">King</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token annotation punctuation">@Type</span><span class="token punctuation">(</span><span class="token class-name">Knight</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Character</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，我们也可以在接口 <em>Character</em> 和 <em>King</em> 和 <em>Knight</em> 类之间有一个中间类。因此，Jackson也将知道如何在这种情况下推断多态性：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NamedCharacter</span> <span class="token keyword">implements</span> <span class="token class-name">Character</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token comment">// 标准的setter和getter</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们将实现Character接口的子类。我们已经在之前的代码示例中声明了这些子类作为子类型。因此，实现不依赖于Jackson库：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImperialSpy</span> <span class="token keyword">implements</span> <span class="token class-name">Character</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">King</span> <span class="token keyword">extends</span> <span class="token class-name">NamedCharacter</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> land<span class="token punctuation">;</span>

    <span class="token comment">// 标准的setter和getter</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Knight</span> <span class="token keyword">extends</span> <span class="token class-name">NamedCharacter</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> weapon<span class="token punctuation">;</span>

    <span class="token comment">// 标准的setter和getter</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们想要映射的JSON示例如下：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Old King Allant&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;land&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Boletaria&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，如果我们尝试读取上述JSON结构，Jackson将抛出一个运行时异常，消息为 <em>Could not resolve subtype of [simple type, class com.baeldung.jackson.deductionbasedpolymorphism.Character]: missing type id property ‘@type’:</em></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenAKingWithoutType_whenMapping_thenExpectAnError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> kingJson <span class="token operator">=</span> <span class="token function">formatJson</span><span class="token punctuation">(</span><span class="token string">&quot;{&#39;name&#39;: &#39;Old King Allant&#39;, &#39;land&#39;:&#39;Boletaria&#39;}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertThrows</span><span class="token punctuation">(</span><span class="token class-name">InvalidTypeIdException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> objectMapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>kingJson<span class="token punctuation">,</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，<em>formatJson</em> 工具方法帮助我们通过将单引号转换为双引号（因为JSON需要）来简化测试中的代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">formatJson</span><span class="token punctuation">(</span><span class="token class-name">String</span> input<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> input<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;\\\\\\&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，为了能够多态地推断我们角色的类型，我们必须修改JSON结构，并显式添加对象的类型。因此，我们将必须将多态行为与我们的JSON结构耦合：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;@type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;King&quot;</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Old King Allant&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;land&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Boletaria&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenAKing_whenMapping_thenExpectAKingType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> kingJson <span class="token operator">=</span> <span class="token function">formatJson</span><span class="token punctuation">(</span><span class="token string">&quot;{&#39;name&#39;: &#39;Old King Allant&#39;, &#39;land&#39;:&#39;Boletaria&#39;, &#39;@type&#39;:&#39;King&#39;}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Character</span> character <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>kingJson<span class="token punctuation">,</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertTrue</span><span class="token punctuation">(</span>character <span class="token keyword">instanceof</span> <span class="token class-name">King</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertSame</span><span class="token punctuation">(</span>character<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">King</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">King</span> king <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">King</span><span class="token punctuation">)</span> character<span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Boletaria&quot;</span><span class="token punctuation">,</span> king<span class="token punctuation">.</span><span class="token function">getLand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-基于推断的多态性" tabindex="-1"><a class="header-anchor" href="#_3-基于推断的多态性"><span>3. 基于推断的多态性</span></a></h2><p>**要激活基于推断的多态性，我们唯一需要做的改变是使用 <em>@JsonTypeInfo(use = Id.DEDUCTION):</em></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@JsonTypeInfo</span><span class="token punctuation">(</span>use <span class="token operator">=</span> <span class="token class-name">Id</span><span class="token punctuation">.</span><span class="token constant">DEDUCTION</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@JsonSubTypes</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token annotation punctuation">@Type</span><span class="token punctuation">(</span><span class="token class-name">ImperialSpy</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token annotation punctuation">@Type</span><span class="token punctuation">(</span><span class="token class-name">King</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token annotation punctuation">@Type</span><span class="token punctuation">(</span><span class="token class-name">Knight</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Character</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-简单推断" tabindex="-1"><a class="header-anchor" href="#_4-简单推断"><span>4. 简单推断</span></a></h2><p>让我们探索如何以多态的方式读取JSON。我们想要读取的对象如下：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Ostrava, of Boletaria&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;weapon&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Rune Sword&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，我们将在 <em>Character</em> 对象中读取值。然后，我们将测试 <em>Jackson</em> 是否正确推断了JSON的类型：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenAKnight_whenMapping_thenExpectAKnightType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> knightJson <span class="token operator">=</span> <span class="token function">formatJson</span><span class="token punctuation">(</span><span class="token string">&quot;{&#39;name&#39;:&#39;Ostrava, of Boletaria&#39;, &#39;weapon&#39;:&#39;Rune Sword&#39;}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Character</span> character <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>knightJson<span class="token punctuation">,</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">assertTrue</span><span class="token punctuation">(</span>character <span class="token keyword">instanceof</span> <span class="token class-name">Knight</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertSame</span><span class="token punctuation">(</span>character<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Knight</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Knight</span> king <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Knight</span><span class="token punctuation">)</span> character<span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Ostrava, of Boletaria&quot;</span><span class="token punctuation">,</span> king<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Rune Sword&quot;</span><span class="token punctuation">,</span> king<span class="token punctuation">.</span><span class="token function">getWeapon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，如果JSON是一个空对象，Jackson将将其解释为 <em>ImperialSpy</em>，这是一个没有属性的类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenAnEmptyObject_whenMapping_thenExpectAnImperialSpy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> imperialSpyJson <span class="token operator">=</span> <span class="token string">&quot;{}&quot;</span><span class="token punctuation">;</span>

    <span class="token class-name">Character</span> character <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>imperialSpyJson<span class="token punctuation">,</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">assertTrue</span><span class="token punctuation">(</span>character <span class="token keyword">instanceof</span> <span class="token class-name">ImperialSpy</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样，<strong>一个null JSON对象也将被Jackson推断为null对象：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenANullObject_whenMapping_thenExpectANullObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">Character</span> character <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span><span class="token string">&quot;null&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">assertNull</span><span class="token punctuation">(</span>character<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-不区分大小写的推断" tabindex="-1"><a class="header-anchor" href="#_5-不区分大小写的推断"><span>5. 不区分大小写的推断</span></a></h2><p><strong>即使属性的大小写不匹配，Jackson也可以推断多态性。</strong> 首先，我们将使用 <em>ACCEPT_CASE_INSENSITIVE_PROPERTIES</em> 启用的实例化对象映射器：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ObjectMapper</span> objectMapper <span class="token operator">=</span> <span class="token class-name">JsonMapper</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">MapperFeature</span><span class="token punctuation">.</span><span class="token constant">ACCEPT_CASE_INSENSITIVE_PROPERTIES</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后，使用实例化的 <em>objectMapper，</em> 我们可以测试多态性是否正确推断：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;NaMe&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Ostrava, of Boletaria&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;WeaPON&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Rune Sword&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenACaseInsensitiveKnight_whenMapping_thenExpectKnight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> knightJson <span class="token operator">=</span> <span class="token function">formatJson</span><span class="token punctuation">(</span><span class="token string">&quot;{&#39;NaMe&#39;:&#39;Ostrava, of Boletaria&#39;, &#39;WeaPON&#39;:&#39;Rune Sword&#39;}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Character</span> character <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>knightJson<span class="token punctuation">,</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">assertTrue</span><span class="token punctuation">(</span>character <span class="token keyword">instanceof</span> <span class="token class-name">Knight</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertSame</span><span class="token punctuation">(</span>character<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Knight</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Knight</span> knight <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Knight</span><span class="token punctuation">)</span> character<span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Ostrava, of Boletaria&quot;</span><span class="token punctuation">,</span> knight<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Rune Sword&quot;</span><span class="token punctuation">,</span> knight<span class="token punctuation">.</span><span class="token function">getWeapon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-包含推断" tabindex="-1"><a class="header-anchor" href="#_6-包含推断"><span>6. 包含推断</span></a></h2><p><strong>我们也可以推断包含在其他对象中的对象的多态性。</strong> 我们将使用 <em>ControlledCharacter</em> 类定义来演示以下JSON的映射：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;character&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Ostrava, of Boletaria&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;weapon&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Rune Sword&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenAKnightControlledCharacter_whenMapping_thenExpectAControlledCharacterWithKnight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> controlledCharacterJson <span class="token operator">=</span> <span class="token function">formatJson</span><span class="token punctuation">(</span><span class="token string">&quot;{&#39;character&#39;: {&#39;name&#39;: &#39;Ostrava, of Boletaria&#39;, &#39;weapon&#39;: &#39;Rune Sword&#39;}}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">ControlledCharacter</span> controlledCharacter <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>controlledCharacterJson<span class="token punctuation">,</span> <span class="token class-name">ControlledCharacter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Character</span> character <span class="token operator">=</span> controlledCharacter<span class="token punctuation">.</span><span class="token function">getCharacter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">assertTrue</span><span class="token punctuation">(</span>character <span class="token keyword">instanceof</span> <span class="token class-name">Knight</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertSame</span><span class="token punctuation">(</span>character<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Knight</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Knight</span> knight <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Knight</span><span class="token punctuation">)</span> character<span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Ostrava, of Boletaria&quot;</span><span class="token punctuation">,</span> knight<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Rune Sword&quot;</span><span class="token punctuation">,</span> knight<span class="token punctuation">.</span><span class="token function">getWeapon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-结论" tabindex="-1"><a class="header-anchor" href="#_7-结论"><span>7. 结论</span></a></h2><p>在本教程中，<strong>我们探讨了如何使用Jackson库进行基于推断的多态性。</strong></p><p>文章的源代码可以在GitHub上找到。</p>`,47),o=[p];function c(l,i){return s(),a("div",null,o)}const k=n(e,[["render",c],["__file","2024-07-19-Deduction Based Polymorphism in Jackson 2.12.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-19/2024-07-19-Deduction%20Based%20Polymorphism%20in%20Jackson%202.12.html","title":"Jackson 2.12中的基于推断的多态性","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","Jackson"],"tag":["Polymorphism","JSON"],"head":[["meta",{"name":"keywords","content":"Jackson, Polymorphism, JSON, Deduction"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-19/2024-07-19-Deduction%20Based%20Polymorphism%20in%20Jackson%202.12.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Jackson 2.12中的基于推断的多态性"}],["meta",{"property":"og:description","content":"Jackson 2.12中的基于推断的多态性 在本教程中，我们将探讨如何使用Jackson库中的基于推断的多态性特性。 假设我们有如下所示的类结构： img 首先，NamedCharacter 和 ImperialSpy 类实现了 Character 接口。其次，King 和 Knight 类实现了 NamedCharacter 类。最后，我们有一个 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.baeldung.com/wp-content/uploads/2022/04/CharacterDiagram-1-300x208.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-19T18:12:03.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Polymorphism"}],["meta",{"property":"article:tag","content":"JSON"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-19T18:12:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Jackson 2.12中的基于推断的多态性\\",\\"image\\":[\\"https://www.baeldung.com/wp-content/uploads/2022/04/CharacterDiagram-1-300x208.png\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-19T18:12:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Jackson 2.12中的基于推断的多态性 在本教程中，我们将探讨如何使用Jackson库中的基于推断的多态性特性。 假设我们有如下所示的类结构： img 首先，NamedCharacter 和 ImperialSpy 类实现了 Character 接口。其次，King 和 Knight 类实现了 NamedCharacter 类。最后，我们有一个 ..."},"headers":[{"level":2,"title":"3. 基于推断的多态性","slug":"_3-基于推断的多态性","link":"#_3-基于推断的多态性","children":[]},{"level":2,"title":"4. 简单推断","slug":"_4-简单推断","link":"#_4-简单推断","children":[]},{"level":2,"title":"5. 不区分大小写的推断","slug":"_5-不区分大小写的推断","link":"#_5-不区分大小写的推断","children":[]},{"level":2,"title":"6. 包含推断","slug":"_6-包含推断","link":"#_6-包含推断","children":[]},{"level":2,"title":"7. 结论","slug":"_7-结论","link":"#_7-结论","children":[]}],"git":{"createdTime":1721412723000,"updatedTime":1721412723000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":3.73,"words":1120},"filePathRelative":"posts/baeldung/2024-07-19/2024-07-19-Deduction Based Polymorphism in Jackson 2.12.md","localizedDate":"2022年4月1日","excerpt":"\\n<p>在本教程中，<strong>我们将探讨如何使用Jackson库中的基于推断的多态性特性。</strong></p>\\n<p>假设我们有如下所示的类结构：\\n<img src=\\"https://www.baeldung.com/wp-content/uploads/2022/04/CharacterDiagram-1-300x208.png\\" alt=\\"img\\" loading=\\"lazy\\"></p>\\n<p>首先，<em>NamedCharacter</em> 和 <em>ImperialSpy</em> 类实现了 <em>Character</em> 接口。其次，<em>King</em> 和 <em>Knight</em> 类实现了 <em>NamedCharacter</em> 类。最后，我们有一个 <em>ControlledCharacter</em> 类，其中包含对玩家控制的角色的引用。</p>","autoDesc":true}');export{k as comp,d as data};
