import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as p,a,b as n,d as s}from"./app-0nXvcScy.js";const o={},c=a(`<h1 id="使用restexpress构建restful微服务" tabindex="-1"><a class="header-anchor" href="#使用restexpress构建restful微服务"><span>使用RestExpress构建RESTful微服务</span></a></h1><p>现代软件架构常常是破碎的。缓慢的交付导致错失机会，由于架构复杂性，创新停滞不前，而且工程资源异常昂贵。</p><p>Orkes是领先的工作流编排平台，旨在使团队能够转变他们开发、连接和部署应用程序、微服务、AI代理等的方式。</p><p>通过Orkes Cloud管理的Orkes Conductor，开发人员可以专注于构建关键任务应用程序，而不必担心基础设施维护以满足目标，简单来说，就是更快地将新产品推向市场并降低总拥有成本。</p><p><strong>立即尝试Orkes Conductor的14天免费试用</strong>。</p><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p>在本教程中，我们将学习如何使用RestExpress构建RESTful微服务。</p><p>RestExpress是一个开源的Java框架，它使我们能够快速轻松地构建RESTful微服务。它基于Netty框架，旨在减少样板代码并加快RESTful微服务的开发。</p><p>此外，它使用插件架构，允许我们为我们的微服务添加功能。它支持插件以实现常见功能，如缓存、安全和持久性。</p><h2 id="_2-restexpress原型" tabindex="-1"><a class="header-anchor" href="#_2-restexpress原型"><span>2. RestExpress原型</span></a></h2><p>RestExpress原型是一个支持项目，提供一组Maven原型用于创建RestExpress项目。</p><p>截至撰写本文时，有三种原型可用：</p><ol><li><strong>最小化</strong> - 包含创建RESTful项目所需的最少代码。它包含主类、属性文件和示例API。</li><li><strong>mongodb</strong> - 创建具有MongoDB支持的RESTful项目。除了最小化原型之外，它还包括MongoDB层。</li><li><strong>cassandra</strong> - 类似于mongodb原型，向最小化原型添加了Cassandra层。</li></ol><p>每个原型都附带一组插件，以为我们的微服务添加功能：</p><ul><li>CacheControlPlugin - 增加对Cache-Control头的支持</li><li>CORSPlugin - 增加对CORS的支持</li><li>MetricsPlugin - 增加对度量标准的支持</li><li>SwaggerPlugin - 增加对Swagger的支持</li><li>HyperExpressPlugin - 增加对HATEOAS的支持</li></ul><p>默认情况下，只有MetricsPlugin启用，并使用Dropwizard Metrics。我们可以通过添加对他们的实现之一的依赖来<strong>启用其他插件</strong>。我们可能还需要添加属性来配置和启用某些插件。</p><p>在下一节中，我们将探讨如何使用_mongodb_原型创建项目。然后，我们将学习应用程序的配置，然后我们将查看生成的代码的某些方面。</p><h3 id="_2-1-使用原型创建项目" tabindex="-1"><a class="header-anchor" href="#_2-1-使用原型创建项目"><span>2.1. 使用原型创建项目</span></a></h3><p>让我们使用_mongodb_原型创建一个项目。</p><p>在终端上，让我们导航到我们想要创建项目的目录。我们将使用_mvn archetype:generate_命令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ mvn archetype:generate <span class="token parameter variable">-DarchetypeGroupId</span><span class="token operator">=</span>com.strategicgains.archetype <span class="token parameter variable">-DarchetypeArtifactId</span><span class="token operator">=</span>restexpress-mongodb <span class="token parameter variable">-DarchetypeVersion</span><span class="token operator">=</span><span class="token number">1.18</span> <span class="token parameter variable">-DgroupId</span><span class="token operator">=</span>com.baeldung <span class="token parameter variable">-DartifactId</span><span class="token operator">=</span>rest-express <span class="token parameter variable">-Dversion</span><span class="token operator">=</span><span class="token number">1.0</span>-SNAPSHOT
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将创建一个带有一些示例代码和配置的项目：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2023/01/rest-express-project-structure-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>原型自动为我们创建了几个组件。它使用默认配置创建了一个服务器。这些<strong>配置在_environment.properties_文件中</strong>。</p><p>在_objectid_和_uuid_包中有<strong>两组CRUD API</strong>。每个包都包括一个实体、一个控制器、一个服务和一个存储库类。</p><p>_Configuration, Server, Main,_和_Routes_类在启动期间帮助配置服务器。</p><p>我们将在接下来的部分中探讨这些生成的类。</p><h2 id="_3-生成的代码" tabindex="-1"><a class="header-anchor" href="#_3-生成的代码"><span>3. 生成的代码</span></a></h2><p>让我们探索生成的代码。我们将重点关注主类、API方法和数据库层。这将让我们了解如何使用RestExpress创建一个简单的CRUD应用程序。</p><h3 id="_3-1-主类" tabindex="-1"><a class="header-anchor" href="#_3-1-主类"><span>3.1. 主类</span></a></h3><p>主类是我们应用程序的入口点。它<strong>负责启动服务器和配置应用程序</strong>。</p><p>让我们看看_Main_类的_main()_方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">Configuration</span> config <span class="token operator">=</span> <span class="token class-name">Environment</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> <span class="token class-name">Configuration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Server</span> server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Server</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
    server<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">awaitShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们详细了解代码：</p><ul><li><strong>_Environment.load()_方法</strong>从_environment.properties_文件中<strong>加载配置</strong>并创建一个_Configuration_对象。</li><li>_Server_类负责启动服务器。它需要一个_Configuration_对象来设置服务器。我们将在接下来的部分中查看_Configuration_和_Server_类。</li><li>_start()_方法启动服务器，_awaitShutdown()_方法等待服务器关闭。</li></ul><h3 id="_3-2-读取属性" tabindex="-1"><a class="header-anchor" href="#_3-2-读取属性"><span>3.2. 读取属性</span></a></h3><p>_environment.properties_文件包含我们应用程序的配置。为了读取属性，_Configuration_类是自动创建的。</p><p>让我们看看_Configuration_类的不同部分。</p><p>_Configuration_类扩展了_Environment_类。这允许我们<strong>从环境中读取属性</strong>。它重写了_Environment_类的_fillValues()_方法以实现此目的：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">fillValues</span><span class="token punctuation">(</span><span class="token class-name">Properties</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>port <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token constant">PORT_PROPERTY</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">RestExpress</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_PORT</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>baseUrl <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token constant">BASE_URL_PROPERTY</span><span class="token punctuation">,</span> <span class="token string">&quot;http://localhost:&quot;</span> <span class="token operator">+</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>executorThreadPoolSize <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token constant">EXECUTOR_THREAD_POOL_SIZE</span><span class="token punctuation">,</span> <span class="token constant">DEFAULT_EXECUTOR_THREAD_POOL_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>metricsSettings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MetricsConfig</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">MongoConfig</span> mongo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MongoConfig</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">initialize</span><span class="token punctuation">(</span>mongo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码从环境中读取端口、基础URL和执行器线程池大小，并设置这些值到字段。它还创建了一个_MetricsConfig_对象和一个_MongoConfig_对象。</p><p>我们将在下一节中查看_initialize()_方法。</p><h3 id="_3-3-初始化控制器和存储库" tabindex="-1"><a class="header-anchor" href="#_3-3-初始化控制器和存储库"><span>3.3. 初始化控制器和存储库</span></a></h3><p>_initialize()_方法负责初始化控制器和存储库：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token class-name">MongoConfig</span> mongo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">SampleUuidEntityRepository</span> samplesUuidRepository <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SampleUuidEntityRepository</span><span class="token punctuation">(</span>mongo<span class="token punctuation">.</span><span class="token function">getClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mongo<span class="token punctuation">.</span><span class="token function">getDbName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">SampleUuidEntityService</span> sampleUuidService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SampleUuidEntityService</span><span class="token punctuation">(</span>samplesUuidRepository<span class="token punctuation">)</span><span class="token punctuation">;</span>
    sampleUuidController <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SampleUuidEntityController</span><span class="token punctuation">(</span>sampleUuidService<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">SampleOidEntityRepository</span> samplesOidRepository <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SampleOidEntityRepository</span><span class="token punctuation">(</span>mongo<span class="token punctuation">.</span><span class="token function">getClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mongo<span class="token punctuation">.</span><span class="token function">getDbName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">SampleOidEntityService</span> sampleOidService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SampleOidEntityService</span><span class="token punctuation">(</span>samplesOidRepository<span class="token punctuation">)</span><span class="token punctuation">;</span>
    sampleOidController <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SampleOidEntityController</span><span class="token punctuation">(</span>sampleOidService<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码<strong>使用Mongo客户端和数据库名称创建了一个_SampleUuidEntityRepository_对象</strong>。然后<strong>使用存储库创建了一个_SampleUuidEntityService_对象</strong>。最后，<strong>使用服务创建了一个_SampleUuidEntityController_对象</strong>。</p><p>对于_SampleOidEntityController_，重复相同的过程。这样，API和数据库层就被初始化了。</p><p>_Configuration_类负责创建我们在服务器启动时想要配置的任何对象。我们可以在_initialize()_方法中添加任何其他初始化代码。</p><p>同样，<strong>我们可以向_environment.properties_文件添加更多属性，并在_fillValues()_方法中读取它们</strong>。</p><p>我们也可以扩展_Configuration_类以实现我们自己的实现。在这种情况下，我们需要更新_Main_类以使用我们的实现而不是_Configuration_类。</p><h2 id="_4-restexpress-api" tabindex="-1"><a class="header-anchor" href="#_4-restexpress-api"><span>4. RestExpress API</span></a></h2><p>在上一节中，我们看到了_Configuration_类如何初始化控制器。让我们看看_SampleUuidEntityController_类，以了解如何创建API方法。</p><p>**示例控制器包含_create()_、<em>read()</em>、<em>readAll()</em>、_update()_和_delete()_方法的工作代码。**每个方法内部都调用服务类的相应方法，然后是存储库类。</p><p>接下来，让我们看几个方法来了解它们的工作原理。</p><h3 id="_4-1-创建" tabindex="-1"><a class="header-anchor" href="#_4-1-创建"><span>4.1. 创建</span></a></h3><p>让我们看看_create()_方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">SampleOidEntity</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Request</span> request<span class="token punctuation">,</span> <span class="token class-name">Response</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">SampleOidEntity</span> entity <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getBodyAs</span><span class="token punctuation">(</span><span class="token class-name">SampleOidEntity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;Resource details not provided&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">SampleOidEntity</span> saved <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 构建创建的响应...</span>
    response<span class="token punctuation">.</span><span class="token function">setResponseCreated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 包括位置头...</span>
    <span class="token class-name">String</span> locationPattern <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getNamedUrl</span><span class="token punctuation">(</span><span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">,</span> <span class="token class-name">Constants<span class="token punctuation">.</span>Routes</span><span class="token punctuation">.</span><span class="token constant">SINGLE_OID_SAMPLE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    response<span class="token punctuation">.</span><span class="token function">addLocationHeader</span><span class="token punctuation">(</span><span class="token constant">LOCATION_BUILDER</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>locationPattern<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DefaultTokenResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 返回新创建的资源...</span>
    <span class="token keyword">return</span> saved<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码：</p><ul><li>读取请求体并将其转换为_SampleOidEntity_对象</li><li>调用服务类的_create()_方法并传递实体对象</li><li>将响应代码设置为_201 – 已创建_</li><li>向响应添加位置头</li><li>返回新创建的实体</li></ul><p>如果我们查看服务类，我们会看到它执行验证并调用存储库类的_create()_方法。</p><p>_SampleOidEntityRepository_类扩展了_MongodbEntityRepository_类，后者内部使用Mongo Java驱动程序执行数据库操作：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SampleOidEntityRepository</span> <span class="token keyword">extends</span> <span class="token class-name">MongodbEntityRepository</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SampleOidEntity</span><span class="token punctuation">&gt;</span></span>\` <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">SampleOidEntityRepository</span><span class="token punctuation">(</span><span class="token class-name">MongoClient</span> mongo<span class="token punctuation">,</span> <span class="token class-name">String</span> dbName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>mongo<span class="token punctuation">,</span> dbName<span class="token punctuation">,</span> <span class="token class-name">SampleOidEntity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-读取" tabindex="-1"><a class="header-anchor" href="#_4-2-读取"><span>4.2. 读取</span></a></h3><p>现在，让我们看看_read_方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">SampleOidEntity</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">Request</span> request<span class="token punctuation">,</span> <span class="token class-name">Response</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> id <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token class-name">Constants<span class="token punctuation">.</span>Url</span><span class="token punctuation">.</span><span class="token constant">SAMPLE_ID</span><span class="token punctuation">,</span> <span class="token string">&quot;No resource ID supplied&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">SampleOidEntity</span> entity <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">Identifiers</span><span class="token punctuation">.</span><span class="token constant">MONGOID</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> entity<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该方法从请求头解析ID，并调用服务类的_read()_方法。服务类随后调用存储库类的_read()_方法。存储库类从数据库检索并返回实体。</p><h2 id="_5-服务器和路由" tabindex="-1"><a class="header-anchor" href="#_5-服务器和路由"><span>5. 服务器和路由</span></a></h2><p>最后，让我们看看_Server_类。<strong>_Server_类引导应用程序。它定义了路由和路由的控制器。它还使用度量和其他插件配置服务器。</strong></p><h3 id="_5-1-创建服务器" tabindex="-1"><a class="header-anchor" href="#_5-1-创建服务器"><span>5.1. 创建服务器</span></a></h3><p>让我们看看_Server_类的构造函数：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Server</span><span class="token punctuation">(</span><span class="token class-name">Configuration</span> config<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>config <span class="token operator">=</span> config<span class="token punctuation">;</span>
    <span class="token class-name">RestExpress</span><span class="token punctuation">.</span><span class="token function">setDefaultSerializationProvider</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SerializationProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Identifiers</span><span class="token punctuation">.</span><span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">useShortUUID</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestExpress</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token constant">SERVICE_NAME</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">setBaseUrl</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getBaseUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">setExecutorThreadCount</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getExecutorThreadPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">addMessageObserver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleConsoleLogMessageObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Routes</span><span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span>server<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Relationships</span><span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">configurePlugins</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span>server<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">mapExceptions</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构造函数执行几个步骤：</p><ul><li>它<strong>创建一个_RestExpress_对象，并设置名称、基础URL、执行器线程池大小和控制台日志的消息观察者</strong>。RestExpress<strong>内部创建一个Netty服务器</strong>。当我们在_Main_类的_start()_方法中调用时，此服务器将启动。</li><li>它调用_Routes.define()_方法来定义路由。我们将在下一节中查看_Routes_类。</li><li>它为我们的实体定义关系，根据提供的属性配置插件，并将某些内部异常映射到应用程序已处理的异常。</li></ul><h3 id="_5-2-路由" tabindex="-1"><a class="header-anchor" href="#_5-2-路由"><span>5.2. 路由</span></a></h3><p>_Routes.define()_方法定义了路由和每个路由调用的控制器方法。</p><p>让我们看看_SampleOidEntityController_的路由：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">define</span><span class="token punctuation">(</span><span class="token class-name">Configuration</span> config<span class="token punctuation">,</span> <span class="token class-name">RestExpress</span> server<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 其他路由为了简洁省略了...</span>

    server<span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">&quot;/samples/oid/{uuid}.{format}&quot;</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span><span class="token function">getSampleOidEntityController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">,</span> <span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token constant">PUT</span><span class="token punctuation">,</span> <span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token constant">DELETE</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token class-name">Constants<span class="token punctuation">.</span>Routes</span><span class="token punctuation">.</span><span class="token constant">SINGLE_OID_SAMPLE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    server<span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">&quot;/samples/oid.{format}&quot;</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span><span class="token function">getSampleOidEntityController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token string">&quot;readAll&quot;</span><span class="token punctuation">,</span> <span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token constant">POST</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token class-name">Constants<span class="token punctuation">.</span>Routes</span><span class="token punctuation">.</span><span class="token constant">SAMPLE_OID_COLLECTION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,77),l=n("p",null,[s("让我们详细看看第一个路由定义。"),n("em",{uuid:""},[s("uri()"),n("em",null,"方法将模式"),s("/samples/oid/{uuid}.{format}"),n("em",null,"映射到_SampleOidEntityController"),s("。")]),n("em",{format:""},"和"),s("_是URL的路径参数。")],-1),i=a(`<p><strong><em>GET</em>、<em>PUT_和_DELETE_方法分别映射到控制器的_read()</em>、_update()_和_delete()_方法。这是Netty服务器的默认行为。</strong></p><p>为路由分配了一个名称以便于按名称检索路由。<strong>如果需要，可以使用_server.getRouteUrlsByName()_方法检索路由。</strong></p><p>上述模式适用于_read()_、_update()<em>和_delete()</em>，因为它们都需要一个ID。对于_create()<em>和_readAll()</em>，我们需要使用一个不需要ID的不同模式。</p><p>让我们看看第二个路由定义。模式_/samples/oid.{format}<em>映射到_SampleOidEntityController</em>。</p><p><strong>_action()_方法用于将方法名称映射到HTTP方法</strong>。在这种情况下，_readAll()_方法映射到_GET_方法。</p><p>_POST_方法在模式上是允许的，并默认映射到控制器的_create()_方法。和以前一样，为路由分配了一个名称。</p><p>需要注意的一个重点是，<strong>如果我们在控制器中定义了更多的方法或更改了标准方法的名称，我们将需要使用_action()_方法将它们映射到它们各自的HTTP方法。</strong></p><p>我们需要定义的任何其他URL模式都必须添加到_Routes.define()_方法中。</p><h2 id="_6-运行应用程序" tabindex="-1"><a class="header-anchor" href="#_6-运行应用程序"><span>6. 运行应用程序</span></a></h2><p>让我们运行应用程序并对实体执行一些操作。我们将使用_curl_命令来执行操作。</p><p>让我们通过运行_Main_类来启动应用程序。<strong>应用程序在端口_8081_上启动。</strong></p><p>默认情况下，_SampleOidEntity_除了ID和时间戳外没有任何字段。让我们向实体添加一个名为_name_的字段：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SampleOidEntity</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractMongodbEntity</span> <span class="token keyword">implements</span> <span class="token class-name">Linkable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token comment">// 构造函数，getter和setter</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-1-测试api" tabindex="-1"><a class="header-anchor" href="#_6-1-测试api"><span>6.1. 测试API</span></a></h3><p>让我们通过运行一个_curl_命令来创建一个新的实体：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-X</span> POST <span class="token parameter variable">-H</span> <span class="token string">&quot;Content-Type: application/json&quot;</span> <span class="token parameter variable">-d</span> <span class="token string">&quot;{<span class="token entity" title="\\&quot;">\\&quot;</span>name<span class="token entity" title="\\&quot;">\\&quot;</span>:<span class="token entity" title="\\&quot;">\\&quot;</span>test<span class="token entity" title="\\&quot;">\\&quot;</span>}&quot;</span> http://localhost:8081/samples/oid.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这应该会返回带有ID的新创建的实体：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;_links&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;self&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;href&quot;</span><span class="token operator">:</span> <span class="token string">&quot;http://localhost:8081/samples/oid/63a5d983ef1e572664c148fd&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;up&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;href&quot;</span><span class="token operator">:</span> <span class="token string">&quot;http://localhost:8081/samples/oid&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;63a5d983ef1e572664c148fd&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;createdAt&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2022-12-23T16:38:27.733Z&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;updatedAt&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2022-12-23T16:38:27.733Z&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，让我们尝试使用上面返回的_id_读取创建的实体：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-X</span> GET http://localhost:8081/samples/oid/63a5d983ef1e572664c148fd.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这应该会返回与之前相同的实体。</p><h2 id="_7-结论" tabindex="-1"><a class="header-anchor" href="#_7-结论"><span>7. 结论</span></a></h2><p>在本文中，我们探讨了如何使用RestExpress创建REST API。</p><p>我们使用RestExpress _mongodb_原型创建了一个项目。然后，我们查看了项目结构和生成的类。最后，我们运行了应用程序并执行了一些操作来测试API。</p><p>本文中使用的所有代码示例都可以在GitHub上找到。</p><p>OK</p>`,26),u=[c,l,i];function r(d,k){return p(),e("div",null,u)}const _=t(o,[["render",r],["__file","2024-07-10-RESTful Microservices With RestExpress.html.vue"]]),g=JSON.parse('{"path":"/posts/baeldung/2024-07-10/2024-07-10-RESTful%20Microservices%20With%20RestExpress.html","title":"使用RestExpress构建RESTful微服务","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","RESTful Microservices"],"tag":["RestExpress","Microservices"],"head":[["meta",{"name":"keywords","content":"Java, RESTful Microservices, RestExpress, Microservices"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-10/2024-07-10-RESTful%20Microservices%20With%20RestExpress.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"使用RestExpress构建RESTful微服务"}],["meta",{"property":"og:description","content":"使用RestExpress构建RESTful微服务 现代软件架构常常是破碎的。缓慢的交付导致错失机会，由于架构复杂性，创新停滞不前，而且工程资源异常昂贵。 Orkes是领先的工作流编排平台，旨在使团队能够转变他们开发、连接和部署应用程序、微服务、AI代理等的方式。 通过Orkes Cloud管理的Orkes Conductor，开发人员可以专注于构建关..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.baeldung.com/wp-content/uploads/2023/01/rest-express-project-structure-1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-10T18:48:17.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"RestExpress"}],["meta",{"property":"article:tag","content":"Microservices"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-10T18:48:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用RestExpress构建RESTful微服务\\",\\"image\\":[\\"https://www.baeldung.com/wp-content/uploads/2023/01/rest-express-project-structure-1.png\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-10T18:48:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"使用RestExpress构建RESTful微服务 现代软件架构常常是破碎的。缓慢的交付导致错失机会，由于架构复杂性，创新停滞不前，而且工程资源异常昂贵。 Orkes是领先的工作流编排平台，旨在使团队能够转变他们开发、连接和部署应用程序、微服务、AI代理等的方式。 通过Orkes Cloud管理的Orkes Conductor，开发人员可以专注于构建关..."},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. RestExpress原型","slug":"_2-restexpress原型","link":"#_2-restexpress原型","children":[{"level":3,"title":"2.1. 使用原型创建项目","slug":"_2-1-使用原型创建项目","link":"#_2-1-使用原型创建项目","children":[]}]},{"level":2,"title":"3. 生成的代码","slug":"_3-生成的代码","link":"#_3-生成的代码","children":[{"level":3,"title":"3.1. 主类","slug":"_3-1-主类","link":"#_3-1-主类","children":[]},{"level":3,"title":"3.2. 读取属性","slug":"_3-2-读取属性","link":"#_3-2-读取属性","children":[]},{"level":3,"title":"3.3. 初始化控制器和存储库","slug":"_3-3-初始化控制器和存储库","link":"#_3-3-初始化控制器和存储库","children":[]}]},{"level":2,"title":"4. RestExpress API","slug":"_4-restexpress-api","link":"#_4-restexpress-api","children":[{"level":3,"title":"4.1. 创建","slug":"_4-1-创建","link":"#_4-1-创建","children":[]},{"level":3,"title":"4.2. 读取","slug":"_4-2-读取","link":"#_4-2-读取","children":[]}]},{"level":2,"title":"5. 服务器和路由","slug":"_5-服务器和路由","link":"#_5-服务器和路由","children":[{"level":3,"title":"5.1. 创建服务器","slug":"_5-1-创建服务器","link":"#_5-1-创建服务器","children":[]},{"level":3,"title":"5.2. 路由","slug":"_5-2-路由","link":"#_5-2-路由","children":[]}]},{"level":2,"title":"6. 运行应用程序","slug":"_6-运行应用程序","link":"#_6-运行应用程序","children":[{"level":3,"title":"6.1. 测试API","slug":"_6-1-测试api","link":"#_6-1-测试api","children":[]}]},{"level":2,"title":"7. 结论","slug":"_7-结论","link":"#_7-结论","children":[]}],"git":{"createdTime":1720637297000,"updatedTime":1720637297000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":9.72,"words":2916},"filePathRelative":"posts/baeldung/2024-07-10/2024-07-10-RESTful Microservices With RestExpress.md","localizedDate":"2022年4月1日","excerpt":"\\n<p>现代软件架构常常是破碎的。缓慢的交付导致错失机会，由于架构复杂性，创新停滞不前，而且工程资源异常昂贵。</p>\\n<p>Orkes是领先的工作流编排平台，旨在使团队能够转变他们开发、连接和部署应用程序、微服务、AI代理等的方式。</p>\\n<p>通过Orkes Cloud管理的Orkes Conductor，开发人员可以专注于构建关键任务应用程序，而不必担心基础设施维护以满足目标，简单来说，就是更快地将新产品推向市场并降低总拥有成本。</p>\\n<p><strong>立即尝试Orkes Conductor的14天免费试用</strong>。</p>\\n<h2>1. 概述</h2>\\n<p>在本教程中，我们将学习如何使用RestExpress构建RESTful微服务。</p>","autoDesc":true}');export{_ as comp,g as data};
