import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-WDhPMSWc.js";const e={},p=t(`<h1 id="如何在java中转换java-sql-timestamp和zoneddatetime" tabindex="-1"><a class="header-anchor" href="#如何在java中转换java-sql-timestamp和zoneddatetime"><span>如何在Java中转换java.sql.Timestamp和ZonedDateTime</span></a></h1><p>处理Java中的时间戳是一项常见任务，它使我们能够更有效地操作和显示日期和时间信息，特别是在我们处理数据库或全球应用程序时。用于处理时间戳和时区的两个基本类是java.sql.Timestamp和ZonedDateTime。</p><p>在本教程中，我们将探讨在java.sql.Timestamp和ZonedDateTime之间进行转换的多种方法。</p><h3 id="_2-1-使用instant类" tabindex="-1"><a class="header-anchor" href="#_2-1-使用instant类"><span>2.1. 使用Instant类</span></a></h3><p>Instant类可以被看作是UTC时区中的一个单一时刻。如果我们将时间想象成一条线，Instant就代表线上的一个点。</p><p>在内部，Instant类只是计算相对于1970年1月1日标准Unix纪元时间00:00:00的秒数和纳秒数。这个时间点由0秒和0纳秒表示，其他一切都是从这个时间点的偏移量。</p><p>相对于这个特定时间点存储数和纳秒数允许类存储负和正的偏移量。换句话说，Instant类可以表示纪元时间之前和之后的时间。</p><p>让我们看看如何使用Instant类将时间戳转换为ZonedDateTime：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ZonedDateTime</span> <span class="token function">convertToZonedDateTimeUsingInstant</span><span class="token punctuation">(</span><span class="token class-name">Timestamp</span> timestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Instant</span> instant <span class="token operator">=</span> timestamp<span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> instant<span class="token punctuation">.</span><span class="token function">atZone</span><span class="token punctuation">(</span><span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述方法中，我们使用Timestamp类的toInstant()方法将提供的时间戳转换为Instant，这代表UTC时间线上的一个时刻。然后，我们使用Instant对象上的atZone()方法将其与特定时区关联。我们使用通过ZoneId.systemDefault()获得的系统默认时区。</p><p>让我们使用系统的默认时区（全局时区）测试这个方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenTimestamp_whenUsingInstant_thenConvertToZonedDateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Timestamp</span> timestamp <span class="token operator">=</span> <span class="token class-name">Timestamp</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">&quot;2024-04-17 12:30:00&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ZonedDateTime</span> actualResult <span class="token operator">=</span> <span class="token class-name">TimestampAndZonedDateTimeConversion</span><span class="token punctuation">.</span><span class="token function">convertToZonedDateTimeUsingInstant</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ZonedDateTime</span> expectedResult <span class="token operator">=</span> <span class="token class-name">ZonedDateTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2024</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>expectedResult<span class="token punctuation">.</span><span class="token function">toLocalDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> actualResult<span class="token punctuation">.</span><span class="token function">toLocalDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>expectedResult<span class="token punctuation">.</span><span class="token function">toLocalTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> actualResult<span class="token punctuation">.</span><span class="token function">toLocalTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-使用calendar类" tabindex="-1"><a class="header-anchor" href="#_2-2-使用calendar类"><span>2.2. 使用Calendar类</span></a></h3><p>另一种解决方案是使用来自旧Date API的Calendar类。这个类提供了setTimeInMillis(long value)方法，我们可以使用它将时间设置为给定的long值：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ZonedDateTime</span> <span class="token function">convertToZonedDateTimeUsingCalendar</span><span class="token punctuation">(</span><span class="token class-name">Timestamp</span> timestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Calendar</span> calendar <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    calendar<span class="token punctuation">.</span><span class="token function">setTimeInMillis</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> calendar<span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">atZone</span><span class="token punctuation">(</span><span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述方法中，我们使用Calendar.getInstance()方法初始化Calendar实例。Calendar实例的时间设置为与Timestamp对象相同。之后，我们使用Calendar对象上的toInstant()方法获得一个Instant。然后，我们再次使用Instant对象上的atZone()方法将其与特定时区关联。我们使用通过ZoneId.systemDefault()获得的系统默认时区。</p><p>让我们看看以下的测试代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenTimestamp_whenUsingCalendar_thenConvertToZonedDateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Timestamp</span> timestamp <span class="token operator">=</span> <span class="token class-name">Timestamp</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">&quot;2024-04-17 12:30:00&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ZonedDateTime</span> actualResult <span class="token operator">=</span> <span class="token class-name">TimestampAndZonedDateTimeConversion</span><span class="token punctuation">.</span><span class="token function">convertToZonedDateTimeUsingCalendar</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ZonedDateTime</span> expectedResult <span class="token operator">=</span> <span class="token class-name">ZonedDateTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2024</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>expectedResult<span class="token punctuation">.</span><span class="token function">toLocalDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> actualResult<span class="token punctuation">.</span><span class="token function">toLocalDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>expectedResult<span class="token punctuation">.</span><span class="token function">toLocalTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> actualResult<span class="token punctuation">.</span><span class="token function">toLocalTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-使用localdatetime类" tabindex="-1"><a class="header-anchor" href="#_2-3-使用localdatetime类"><span>2.3. 使用LocalDateTime类</span></a></h3><p>java.time包在Java 8中引入，提供了一个现代的日期和时间API。LocalDateTime是该包中的一个类，可以存储和操作不同时区的日期和时间。让我们看看这种方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ZonedDateTime</span> <span class="token function">convertToZonedDateTimeUsingLocalDateTime</span><span class="token punctuation">(</span><span class="token class-name">Timestamp</span> timestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">LocalDateTime</span> localDateTime <span class="token operator">=</span> timestamp<span class="token punctuation">.</span><span class="token function">toLocalDateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> localDateTime<span class="token punctuation">.</span><span class="token function">atZone</span><span class="token punctuation">(</span><span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Timestamp类的toLocalDateTime()方法将Timestamp转换为LocalDateTime，它表示没有时区信息的日期和时间。</p><p>让我们测试这种方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenTimestamp_whenUsingLocalDateTime_thenConvertToZonedDateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Timestamp</span> timestamp <span class="token operator">=</span> <span class="token class-name">Timestamp</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">&quot;2024-04-17 12:30:00&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ZonedDateTime</span> actualResult <span class="token operator">=</span> <span class="token class-name">TimestampAndZonedDateTimeConversion</span><span class="token punctuation">.</span><span class="token function">convertToZonedDateTimeUsingLocalDateTime</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ZonedDateTime</span> expectedResult <span class="token operator">=</span> <span class="token class-name">ZonedDateTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2024</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>expectedResult<span class="token punctuation">.</span><span class="token function">toLocalDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> actualResult<span class="token punctuation">.</span><span class="token function">toLocalDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>expectedResult<span class="token punctuation">.</span><span class="token function">toLocalTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> actualResult<span class="token punctuation">.</span><span class="token function">toLocalTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-使用joda-time类" tabindex="-1"><a class="header-anchor" href="#_2-4-使用joda-time类"><span>2.4. 使用Joda-Time类</span></a></h3><p>Joda-Time是一个非常流行的Java日期和时间操作库。它提供了比标准DateTime类更直观和灵活的API。</p><p>要包含Joda-Time库的功能，我们需要从Maven Central添加以下依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\`
    \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>\`joda-time\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\`
    \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`joda-time\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`
    \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\`2.12.7\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\`
\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们看看如何使用Joda-Time类实现这种转换：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ZonedDateTime</span> <span class="token function">convertToZonedDateTimeUsingJodaTime</span><span class="token punctuation">(</span><span class="token class-name">Timestamp</span> timestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">DateTime</span> dateTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateTime</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> dateTime<span class="token punctuation">.</span><span class="token function">toGregorianCalendar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toZonedDateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这种方法中，我们首先检索自纪元（1970-01-01T00:00:00Z）以来的毫秒数。然后，我们使用默认时区创建一个新的DateTime对象，从获得的毫秒值。</p><p>接下来，我们将DateTime对象转换为GregorianCalendar，然后使用Joda-Time库的方法将GregorianCalendar转换为ZonedDateTime。</p><p>现在，让我们运行我们的测试：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenTimestamp_whenUsingJodaTime_thenConvertToZonedDateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Timestamp</span> timestamp <span class="token operator">=</span> <span class="token class-name">Timestamp</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">&quot;2024-04-17 12:30:00&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ZonedDateTime</span> actualResult <span class="token operator">=</span> <span class="token class-name">TimestampAndZonedDateTimeConversion</span><span class="token punctuation">.</span><span class="token function">convertToZonedDateTimeUsingJodaTime</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ZonedDateTime</span> expectedResult <span class="token operator">=</span> <span class="token class-name">ZonedDateTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2024</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>expectedResult<span class="token punctuation">.</span><span class="token function">toLocalDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> actualResult<span class="token punctuation">.</span><span class="token function">toLocalDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>expectedResult<span class="token punctuation">.</span><span class="token function">toLocalTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> actualResult<span class="token punctuation">.</span><span class="token function">toLocalTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-将zoneddatetime转换为java-sql-timestamp" tabindex="-1"><a class="header-anchor" href="#_3-将zoneddatetime转换为java-sql-timestamp"><span>3. 将ZonedDateTime转换为java.sql.Timestamp</span></a></h2><p>现在，我们将探讨将ZonedDateTime转换为java.sql.Timestamp的多种方法：</p><h3 id="_3-1-使用instant类" tabindex="-1"><a class="header-anchor" href="#_3-1-使用instant类"><span>3.1. 使用Instant类</span></a></h3><p>让我们看看如何使用Instant类将ZonedDateTime转换为java.sql.Timestamp：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Timestamp</span> <span class="token function">convertToTimeStampUsingInstant</span><span class="token punctuation">(</span><span class="token class-name">ZonedDateTime</span> zonedDateTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Instant</span> instant <span class="token operator">=</span> zonedDateTime<span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">Timestamp</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>instant<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述方法中，我们首先使用toInstant()方法将提供的ZonedDateTime对象转换为Instant。然后，我们使用Timestamp类的from()方法通过传递获得的Instant作为参数来创建一个Timestamp对象。</p><p>现在，让我们测试这种方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenZonedDateTime_whenUsingInstant_thenConvertToTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ZonedDateTime</span> zonedDateTime <span class="token operator">=</span> <span class="token class-name">ZonedDateTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2024</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Timestamp</span> actualResult <span class="token operator">=</span> <span class="token class-name">TimestampAndZonedDateTimeConversion</span><span class="token punctuation">.</span><span class="token function">convertToTimeStampUsingInstant</span><span class="token punctuation">(</span>zonedDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Timestamp</span> expectedResult <span class="token operator">=</span> <span class="token class-name">Timestamp</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">&quot;2024-04-17 12:30:00&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>expectedResult<span class="token punctuation">,</span> actualResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-使用localdatetime类" tabindex="-1"><a class="header-anchor" href="#_3-2-使用localdatetime类"><span>3.2. 使用LocalDateTime类</span></a></h3><p>让我们使用LocalDateTime类将ZonedDateTime转换为java.sql.Timestamp：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Timestamp</span> <span class="token function">convertToTimeStampUsingLocalDateTime</span><span class="token punctuation">(</span><span class="token class-name">ZonedDateTime</span> zonedDateTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">LocalDateTime</span> localDateTime <span class="token operator">=</span> zonedDateTime<span class="token punctuation">.</span><span class="token function">toLocalDateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">Timestamp</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述方法中，我们使用toLocalDateTime()方法将提供的ZonedDateTime对象转换为LocalDateTime对象。LocalDateTime表示没有时区的日期和时间。然后，我们通过传递LocalDateTime对象作为参数，使用Timestamp类的valueOf()方法创建并返回一个Timestamp对象。</p><p>现在，让我们运行我们的测试：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenZonedDateTime_whenUsingLocalDateTime_thenConvertToTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ZonedDateTime</span> zonedDateTime <span class="token operator">=</span> <span class="token class-name">ZonedDateTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2024</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Timestamp</span> actualResult <span class="token operator">=</span> <span class="token class-name">TimestampAndZonedDateTimeConversion</span><span class="token punctuation">.</span><span class="token function">convertToTimeStampUsingLocalDateTime</span><span class="token punctuation">(</span>zonedDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Timestamp</span> expectedResult <span class="token operator">=</span> <span class="token class-name">Timestamp</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">&quot;2024-04-17 12:30:00&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>expectedResult<span class="token punctuation">,</span> actualResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-使用joda-time类" tabindex="-1"><a class="header-anchor" href="#_3-3-使用joda-time类"><span>3.3. 使用Joda-Time类</span></a></h3><p>让我们看看如何使用Joda-Time类实现这种转换：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Timestamp</span> <span class="token function">convertToTimestampUsingJodaTime</span><span class="token punctuation">(</span><span class="token class-name">ZonedDateTime</span> zonedDateTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">DateTime</span> dateTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateTime</span><span class="token punctuation">(</span>zonedDateTime<span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEpochMilli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Timestamp</span><span class="token punctuation">(</span>dateTime<span class="token punctuation">.</span><span class="token function">getMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">--</span><span class="token operator">-</span>
date<span class="token operator">:</span> <span class="token number">2024</span><span class="token operator">-</span><span class="token number">06</span><span class="token operator">-</span><span class="token number">16</span>
category<span class="token operator">:</span>
  <span class="token operator">-</span> <span class="token class-name">Java</span>
  <span class="token operator">-</span> 编程
tag<span class="token operator">:</span>
  <span class="token operator">-</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Timestamp</span>
  <span class="token operator">-</span> <span class="token class-name">ZonedDateTime</span>
<span class="token operator">--</span><span class="token operator">-</span>
# 如何在<span class="token class-name">Java</span>中转换<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Timestamp</span>和<span class="token class-name">ZonedDateTime</span>

## <span class="token number">4.</span> 结论
在这个快速教程中，我们学习了如何在<span class="token class-name">Java</span>中转换<span class="token class-name">ZonedDateTime</span>和<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Timestamp</span>类。

正如往常一样，本文中使用的所有代码都可以在<span class="token class-name">GitHub</span>上找到。

文章发布后<span class="token number">30</span>天内开放评论。对于超过此日期的任何问题，请使用网站上的联系表单。

<span class="token constant">OK</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,51),o=[p];function c(l,i){return s(),a("div",null,o)}const m=n(e,[["render",c],["__file","How to Convert Between java.sql.Timestamp and ZonedDateTime in Java.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/Archive/How%20to%20Convert%20Between%20java.sql.Timestamp%20and%20ZonedDateTime%20in%20Java.html","title":"如何在Java中转换java.sql.Timestamp和ZonedDateTime","lang":"zh-CN","frontmatter":{"date":"2024-06-16T00:00:00.000Z","category":["Java","编程"],"tag":["java.sql.Timestamp","ZonedDateTime"],"description":"如何在Java中转换java.sql.Timestamp和ZonedDateTime 处理Java中的时间戳是一项常见任务，它使我们能够更有效地操作和显示日期和时间信息，特别是在我们处理数据库或全球应用程序时。用于处理时间戳和时区的两个基本类是java.sql.Timestamp和ZonedDateTime。 在本教程中，我们将探讨在java.sql....","head":[["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/Archive/How%20to%20Convert%20Between%20java.sql.Timestamp%20and%20ZonedDateTime%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"如何在Java中转换java.sql.Timestamp和ZonedDateTime"}],["meta",{"property":"og:description","content":"如何在Java中转换java.sql.Timestamp和ZonedDateTime 处理Java中的时间戳是一项常见任务，它使我们能够更有效地操作和显示日期和时间信息，特别是在我们处理数据库或全球应用程序时。用于处理时间戳和时区的两个基本类是java.sql.Timestamp和ZonedDateTime。 在本教程中，我们将探讨在java.sql...."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-21T09:54:56.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"java.sql.Timestamp"}],["meta",{"property":"article:tag","content":"ZonedDateTime"}],["meta",{"property":"article:published_time","content":"2024-06-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-21T09:54:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"如何在Java中转换java.sql.Timestamp和ZonedDateTime\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-16T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-21T09:54:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]]},"headers":[{"level":3,"title":"2.1. 使用Instant类","slug":"_2-1-使用instant类","link":"#_2-1-使用instant类","children":[]},{"level":3,"title":"2.2. 使用Calendar类","slug":"_2-2-使用calendar类","link":"#_2-2-使用calendar类","children":[]},{"level":3,"title":"2.3. 使用LocalDateTime类","slug":"_2-3-使用localdatetime类","link":"#_2-3-使用localdatetime类","children":[]},{"level":3,"title":"2.4. 使用Joda-Time类","slug":"_2-4-使用joda-time类","link":"#_2-4-使用joda-time类","children":[]},{"level":2,"title":"3. 将ZonedDateTime转换为java.sql.Timestamp","slug":"_3-将zoneddatetime转换为java-sql-timestamp","link":"#_3-将zoneddatetime转换为java-sql-timestamp","children":[{"level":3,"title":"3.1. 使用Instant类","slug":"_3-1-使用instant类","link":"#_3-1-使用instant类","children":[]},{"level":3,"title":"3.2. 使用LocalDateTime类","slug":"_3-2-使用localdatetime类","link":"#_3-2-使用localdatetime类","children":[]},{"level":3,"title":"3.3. 使用Joda-Time类","slug":"_3-3-使用joda-time类","link":"#_3-3-使用joda-time类","children":[]}]}],"git":{"createdTime":1718963696000,"updatedTime":1718963696000,"contributors":[{"name":"Lance Li","email":"lance.jx.li@gtomato.com","commits":1}]},"readingTime":{"minutes":4.95,"words":1484},"filePathRelative":"posts/baeldung/Archive/How to Convert Between java.sql.Timestamp and ZonedDateTime in Java.md","localizedDate":"2024年6月16日","excerpt":"\\n<p>处理Java中的时间戳是一项常见任务，它使我们能够更有效地操作和显示日期和时间信息，特别是在我们处理数据库或全球应用程序时。用于处理时间戳和时区的两个基本类是java.sql.Timestamp和ZonedDateTime。</p>\\n<p>在本教程中，我们将探讨在java.sql.Timestamp和ZonedDateTime之间进行转换的多种方法。</p>\\n<h3>2.1. 使用Instant类</h3>\\n<p>Instant类可以被看作是UTC时区中的一个单一时刻。如果我们将时间想象成一条线，Instant就代表线上的一个点。</p>\\n<p>在内部，Instant类只是计算相对于1970年1月1日标准Unix纪元时间00:00:00的秒数和纳秒数。这个时间点由0秒和0纳秒表示，其他一切都是从这个时间点的偏移量。</p>","autoDesc":true}');export{m as comp,d as data};
