import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-DFhKiB50.js";const p={},e=t('<h1 id="将json文件数据导入mongodb的java实现-baeldung" tabindex="-1"><a class="header-anchor" href="#将json文件数据导入mongodb的java实现-baeldung"><span>将JSON文件数据导入MongoDB的Java实现 | Baeldung</span></a></h1><h2 id="_1-引言" tabindex="-1"><a class="header-anchor" href="#_1-引言"><span>1. 引言</span></a></h2><p>在本教程中，我们将学习如何从文件中读取JSON数据并使用Spring Boot将它们导入MongoDB。**这在许多情况下都非常有用：恢复数据、批量插入新数据或插入默认值。**MongoDB内部使用JSON来构建其文档结构，因此很自然地，我们将使用JSON来存储可导入的文件。作为纯文本，这种策略还具有易于压缩的优势。</p><p>此外，我们将学习在必要时如何验证输入文件与我们的自定义类型是否匹配。<strong>最后，我们将公开一个API，以便我们可以在web应用程序运行时使用它。</strong></p><h2 id="_2-依赖项" tabindex="-1"><a class="header-anchor" href="#_2-依赖项"><span>2. 依赖项</span></a></h2><p>让我们将这些Spring Boot依赖项添加到我们的_pom.xml_中：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>``org.springframework.boot``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>``spring-boot-starter-web``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>``org.springframework.boot``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>``spring-boot-starter-data-mongodb``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们还需要一个运行中的MongoDB实例，这需要一个正确配置的_application.properties_文件。</p><h2 id="_3-导入json字符串" tabindex="-1"><a class="header-anchor" href="#_3-导入json字符串"><span>3. 导入JSON字符串</span></a></h2><p>**将JSON导入MongoDB的最简单方法是首先将其转换为“<em>org.bson.Document</em>”对象。**这个类表示一个无特定类型的通用MongoDB文档。因此，我们不必担心为可能导入的所有类型的对象创建存储库。</p><p>我们的策略是将JSON（来自文件、资源或字符串）转换为_Document_，并使用_MongoTemplate_保存它们。<strong>批量操作通常表现更好，因为与逐个插入每个对象相比，减少了往返次数。</strong></p><p>最重要的是，我们将考虑输入每个换行符只有一个JSON对象。这样，我们可以很容易地分隔我们的对象。我们将这些功能封装到我们将创建的两个类中：<em>ImportUtils_和_ImportJsonService</em>。让我们从我们的服务类开始：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImportJsonService</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Autowired</span>\n    <span class="token keyword">private</span> <span class="token class-name">MongoTemplate</span> mongo<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，让我们添加一个将JSON行解析为文档的方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">List</span>````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span>```````` <span class="token function">generateMongoDocs</span><span class="token punctuation">(</span><span class="token class-name">List</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````````` lines<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">List</span>````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span>```````` docs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> json <span class="token operator">:</span> lines<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        docs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Document</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> docs<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们添加一个将_Document_对象列表插入到所需_集合_中的方法。同样，如果批量操作部分失败，我们可以通过检查异常的_原因_来返回插入的文档数量：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">insertInto</span><span class="token punctuation">(</span><span class="token class-name">String</span> collection<span class="token punctuation">,</span> <span class="token class-name">List</span>````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span>```````` mongoDocs<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Collection</span>````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span>```````` inserts <span class="token operator">=</span> mongo<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>mongoDocs<span class="token punctuation">,</span> collection<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> inserts<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">DataIntegrityViolationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">MongoBulkWriteException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">MongoBulkWriteException</span><span class="token punctuation">)</span> e<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n              <span class="token punctuation">.</span><span class="token function">getWriteResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n              <span class="token punctuation">.</span><span class="token function">getInsertedCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，让我们结合这些方法。这个方法接受输入并返回一个字符串，显示读取的行数与成功插入的行数：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">importTo</span><span class="token punctuation">(</span><span class="token class-name">String</span> collection<span class="token punctuation">,</span> <span class="token class-name">List</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````````` jsonLines<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">List</span>````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span>```````` mongoDocs <span class="token operator">=</span> <span class="token function">generateMongoDocs</span><span class="token punctuation">(</span>jsonLines<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> inserts <span class="token operator">=</span> <span class="token function">insertInto</span><span class="token punctuation">(</span>collection<span class="token punctuation">,</span> mongoDocs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> inserts <span class="token operator">+</span> <span class="token string">&quot;/&quot;</span> <span class="token operator">+</span> jsonLines<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-使用案例" tabindex="-1"><a class="header-anchor" href="#_4-使用案例"><span>4. 使用案例</span></a></h2><p>现在我们已经准备好处理输入，我们可以构建一些使用案例。让我们创建_ImportUtils_类来帮助我们。**这个类将负责将输入转换为JSON行。**它将只包含静态方法。让我们从一个用于读取简单_String_的方法开始：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````````` <span class="token function">lines</span><span class="token punctuation">(</span><span class="token class-name">String</span> json<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;[\\r\\n]+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>split<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于我们使用换行符作为分隔符，正则表达式非常适合将字符串拆分为多行。这个正则表达式处理Unix和Windows行结尾。接下来，一个将File转换为字符串列表的方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````````` <span class="token function">lines</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAllLines</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">toPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样，我们完成一个将类路径资源转换为列表的方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````````` <span class="token function">linesFromResource</span><span class="token punctuation">(</span><span class="token class-name">String</span> resource<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Resource</span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Path</span> path <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAllLines</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-1-在启动期间通过cli导入文件" tabindex="-1"><a class="header-anchor" href="#_4-1-在启动期间通过cli导入文件"><span>4.1. 在启动期间通过CLI导入文件</span></a></h3><p>在我们的第一个使用案例中，我们将实现通过应用程序参数导入文件的功能。我们将利用Spring Boot的_ApplicationRunner_接口在启动时执行此操作。<strong>例如，我们可以读取命令行参数来定义要导入的文件：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootJsonConvertFileApplication</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationRunner</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">RESOURCE_PREFIX</span> <span class="token operator">=</span> <span class="token string">&quot;classpath:&quot;</span><span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Autowired</span>\n    <span class="token keyword">private</span> <span class="token class-name">ImportJsonService</span> importService<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SpringBootPersistenceApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ApplicationArguments</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">containsOption</span><span class="token punctuation">(</span><span class="token string">&quot;import&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">String</span> collection <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">getOptionValues</span><span class="token punctuation">(</span><span class="token string">&quot;collection&quot;</span><span class="token punctuation">)</span>\n              <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token class-name">List</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````````` sources <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">getOptionValues</span><span class="token punctuation">(</span><span class="token string">&quot;import&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> source <span class="token operator">:</span> sources<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token class-name">List</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````````` jsonLines <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token constant">RESOURCE_PREFIX</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token class-name">String</span> resource <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token constant">RESOURCE_PREFIX</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    jsonLines <span class="token operator">=</span> <span class="token class-name">ImportUtils</span><span class="token punctuation">.</span><span class="token function">linesFromResource</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                    jsonLines <span class="token operator">=</span> <span class="token class-name">ImportUtils</span><span class="token punctuation">.</span><span class="token function">lines</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n\n                <span class="token class-name">String</span> result <span class="token operator">=</span> importService<span class="token punctuation">.</span><span class="token function">importTo</span><span class="token punctuation">(</span>collection<span class="token punctuation">,</span> jsonLines<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>source <span class="token operator">+</span> <span class="token string">&quot; - result: &quot;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用_getOptionValues()_我们可以处理一个或多个文件。**这些文件可以来自我们的类路径或文件系统。**我们使用_RESOURCE_PREFIX_来区分它们。每个以“<em>classpath:</em>”开头的参数将从资源文件夹而不是文件系统读取。之后，它们将全部导入到所需的_collection_中。</p><p>让我们通过在_src/main/resources/data.json.log_下创建一个文件来开始使用我们的应用程序：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;Book A&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;genre&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Comedy&quot;</span><span class="token punctuation">}</span>\n<span class="token punctuation">{</span><span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;Book B&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;genre&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Thriller&quot;</span><span class="token punctuation">}</span>\n<span class="token punctuation">{</span><span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;Book C&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;genre&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Drama&quot;</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构建后，我们可以使用以下示例来运行它（为了可读性添加了换行）。在我们的示例中，将导入两个文件，一个来自类路径，一个来自文件系统：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">java</span> <span class="token parameter variable">-cp</span> target/spring-boot-persistence-mongodb/WEB-INF/lib/*:target/spring-boot-persistence-mongodb/WEB-INF/classes <span class="token punctuation">\\</span>\n  <span class="token parameter variable">-Djdk.tls.client.protocols</span><span class="token operator">=</span>TLSv1.2 <span class="token punctuation">\\</span>\n  com.baeldung.SpringBootPersistenceApplication <span class="token punctuation">\\</span>\n  <span class="token parameter variable">--import</span><span class="token operator">=</span>classpath:data.json.log <span class="token punctuation">\\</span>\n  <span class="token parameter variable">--import</span><span class="token operator">=</span>/tmp/data.json <span class="token punctuation">\\</span>\n  <span class="token parameter variable">--collection</span><span class="token operator">=</span>books\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-通过http-post上传json文件" tabindex="-1"><a class="header-anchor" href="#_4-2-通过http-post上传json文件"><span>4.2. 通过HTTP POST上传JSON文件</span></a></h3><p>此外，如果我们创建一个REST Controller，我们将拥有一个上传和导入JSON文件的端点。为此，我们需要一个_MultipartFile_参数：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>\n<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/import-json&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImportJsonController</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Autowired</span>\n    <span class="token keyword">private</span> <span class="token class-name">ImportJsonService</span> service<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/file/{collection}&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">postJsonFile</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestPart</span><span class="token punctuation">(</span><span class="token string">&quot;parts&quot;</span><span class="token punctuation">)</span> <span class="token class-name">MultipartFile</span> jsonStringsFile<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> collection<span class="token punctuation">)</span>  <span class="token punctuation">{</span>\n        <span class="token class-name">List</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````````` jsonLines <span class="token operator">=</span> <span class="token class-name">ImportUtils</span><span class="token punctuation">.</span><span class="token function">lines</span><span class="token punctuation">(</span>jsonStringsFile<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> service<span class="token punctuation">.</span><span class="token function">importTo</span><span class="token punctuation">(</span>collection<span class="token punctuation">,</span> jsonLines<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们可以使用POST来导入文件，其中“<em>/tmp/data.json</em>”指的是一个存在的文件：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-X</span> POST http://localhost:8082/import-json/file/books <span class="token parameter variable">-F</span> <span class="token string">&quot;parts=@/tmp/books.json&quot;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-3-将json映射到特定的java类型" tabindex="-1"><a class="header-anchor" href="#_4-3-将json映射到特定的java类型"><span>4.3. 将JSON映射到特定的Java类型</span></a></h3><p>我们一直在使用未绑定到任何类型的JSON，这是使用MongoDB的一个优势。**现在我们想要验证我们的输入。**在这种情况下，让我们通过在服务中进行以下更改来添加一个_ObjectMapper_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> ``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>`` <span class="token class-name">List</span>````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span>```````` <span class="token function">generateMongoDocs</span><span class="token punctuation">(</span><span class="token class-name">List</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````````` lines<span class="token punctuation">,</span> <span class="token class-name">Class</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>`` type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">List</span>````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span>```````` docs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> json <span class="token operator">:</span> lines<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            mapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        docs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Document</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> docs<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，如果指定了_type_参数，我们的_mapper_将尝试将我们的JSON字符串解析为该类型。**并且，默认配置将在存在任何未知属性时抛出异常。**这是我们用于MongoDB存储库的简单Bean定义：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Document</span><span class="token punctuation">(</span><span class="token string">&quot;books&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Id</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> genre<span class="token punctuation">;</span>\n    <span class="token comment">// getters and setters</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，为了使用我们改进的文档生成器版本，让我们也更改这个方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">importTo</span><span class="token punctuation">(</span><span class="token class-name">Class</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span>` type<span class="token punctuation">,</span> <span class="token class-name">List</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````````` jsonLines<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">List</span>````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span>```````` mongoDocs <span class="token operator">=</span> <span class="token function">generateMongoDocs</span><span class="token punctuation">(</span>jsonLines<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> collection <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>core<span class="token punctuation">.</span>mapping<span class="token punctuation">.</span></span>Document</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> inserts <span class="token operator">=</span> <span class="token function">insertInto</span><span class="token punctuation">(</span>collection<span class="token punctuation">,</span> mongoDocs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> inserts <span class="token operator">+</span> <span class="token string">&quot;/&quot;</span> <span class="token operator">+</span> jsonLines<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们不是传递集合的名称，而是传递一个_Class_。我们假设它具有我们在_Book_中使用的_Document_注释，因此它可以检索集合名称。然而，由于注释和_Document_类具有相同的名称，我们必须指定整个包。</p><h2 id="_5-结论" tabindex="-1"><a class="header-anchor" href="#_5-结论"><span>5. 结论</span></a></h2><p>在本文中，我们经历了从文件、资源或简单字符串中拆分JSON输入并将它们导入MongoDB的过程。我们将此功能集中到一个服务类和一个实用程序类中，以便我们可以在任何地方重用它。<strong>我们的使用案例包括CLI和REST选项，以及如何使用它们的示例命令。</strong></p><p>如往常一样，源代码可在GitHub上获取。</p>',50),o=[e];function c(l,i){return a(),s("div",null,o)}const k=n(p,[["render",c],["__file","2024-07-20-Import Data to MongoDB From JSON File Using Java.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-20/2024-07-20-Import%20Data%20to%20MongoDB%20From%20JSON%20File%20Using%20Java.html","title":"将JSON文件数据导入MongoDB的Java实现 | Baeldung","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","MongoDB"],"tag":["Spring Boot","JSON","数据导入"],"head":[["meta",{"name":"keywords","content":"Java, MongoDB, Spring Boot, JSON, 数据导入"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-20/2024-07-20-Import%20Data%20to%20MongoDB%20From%20JSON%20File%20Using%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"将JSON文件数据导入MongoDB的Java实现 | Baeldung"}],["meta",{"property":"og:description","content":"将JSON文件数据导入MongoDB的Java实现 | Baeldung 1. 引言 在本教程中，我们将学习如何从文件中读取JSON数据并使用Spring Boot将它们导入MongoDB。**这在许多情况下都非常有用：恢复数据、批量插入新数据或插入默认值。**MongoDB内部使用JSON来构建其文档结构，因此很自然地，我们将使用JSON来存储可导入..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-20T15:13:57.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Spring Boot"}],["meta",{"property":"article:tag","content":"JSON"}],["meta",{"property":"article:tag","content":"数据导入"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-20T15:13:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"将JSON文件数据导入MongoDB的Java实现 | Baeldung\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-20T15:13:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"将JSON文件数据导入MongoDB的Java实现 | Baeldung 1. 引言 在本教程中，我们将学习如何从文件中读取JSON数据并使用Spring Boot将它们导入MongoDB。**这在许多情况下都非常有用：恢复数据、批量插入新数据或插入默认值。**MongoDB内部使用JSON来构建其文档结构，因此很自然地，我们将使用JSON来存储可导入..."},"headers":[{"level":2,"title":"1. 引言","slug":"_1-引言","link":"#_1-引言","children":[]},{"level":2,"title":"2. 依赖项","slug":"_2-依赖项","link":"#_2-依赖项","children":[]},{"level":2,"title":"3. 导入JSON字符串","slug":"_3-导入json字符串","link":"#_3-导入json字符串","children":[]},{"level":2,"title":"4. 使用案例","slug":"_4-使用案例","link":"#_4-使用案例","children":[{"level":3,"title":"4.1. 在启动期间通过CLI导入文件","slug":"_4-1-在启动期间通过cli导入文件","link":"#_4-1-在启动期间通过cli导入文件","children":[]},{"level":3,"title":"4.2. 通过HTTP POST上传JSON文件","slug":"_4-2-通过http-post上传json文件","link":"#_4-2-通过http-post上传json文件","children":[]},{"level":3,"title":"4.3. 将JSON映射到特定的Java类型","slug":"_4-3-将json映射到特定的java类型","link":"#_4-3-将json映射到特定的java类型","children":[]}]},{"level":2,"title":"5. 结论","slug":"_5-结论","link":"#_5-结论","children":[]}],"git":{"createdTime":1721488437000,"updatedTime":1721488437000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":6.28,"words":1884},"filePathRelative":"posts/baeldung/2024-07-20/2024-07-20-Import Data to MongoDB From JSON File Using Java.md","localizedDate":"2022年4月1日","excerpt":"\\n<h2>1. 引言</h2>\\n<p>在本教程中，我们将学习如何从文件中读取JSON数据并使用Spring Boot将它们导入MongoDB。**这在许多情况下都非常有用：恢复数据、批量插入新数据或插入默认值。**MongoDB内部使用JSON来构建其文档结构，因此很自然地，我们将使用JSON来存储可导入的文件。作为纯文本，这种策略还具有易于压缩的优势。</p>\\n<p>此外，我们将学习在必要时如何验证输入文件与我们的自定义类型是否匹配。<strong>最后，我们将公开一个API，以便我们可以在web应用程序运行时使用它。</strong></p>\\n<h2>2. 依赖项</h2>\\n<p>让我们将这些Spring Boot依赖项添加到我们的_pom.xml_中：</p>","autoDesc":true}');export{k as comp,d as data};
