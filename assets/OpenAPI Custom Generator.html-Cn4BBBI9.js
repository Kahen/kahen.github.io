import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,o as i,a as t}from"./app-2_fw5B-Z.js";const a={},l=t('<h1 id="openapi-自定义生成器-baeldung" tabindex="-1"><a class="header-anchor" href="#openapi-自定义生成器-baeldung"><span>OpenAPI 自定义生成器 | Baeldung</span></a></h1><h2 id="_1-引言" tabindex="-1"><a class="header-anchor" href="#_1-引言"><span>1. 引言</span></a></h2><p>在本教程中，我们将继续探索 OpenAPI Generator 的自定义选项。这次，我们将展示创建一个新生成器所需的步骤，该生成器为基于 Apache Camel 的应用程序创建 REST 生产者路由。</p><h2 id="_2-为什么要创建一个新的生成器" tabindex="-1"><a class="header-anchor" href="#_2-为什么要创建一个新的生成器"><span>2. 为什么要创建一个新的生成器？</span></a></h2><p>在之前的教程中，我们已经展示了如何自定义现有生成器的模板以适应特定的用例。</p><p><strong>然而，有时我们将面临无法使用任何现有生成器的情况</strong>。例如，当我们需要针对新的语言或 REST 框架时就是这种情况。</p><p>作为一个具体的例子，当前版本的 OpenAPI Generator 对 Apache Camel 的集成框架仅支持生成消费者路由。在 Camel 的术语中，这些路由接收 REST 请求，然后将其发送到调解逻辑。</p><p>现在，如果我们想从路由中调用 REST API，我们通常会使用 Camel 的 REST 组件。以下是使用 DSL 的调用示例：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>from(GET_QUOTE)\n  .id(GET_QUOTE_ROUTE_ID)\n  .to(&quot;rest:get:/quotes/{symbol}?outType=com.baeldung.tutorials.openapi.quotes.api.model.QuoteResponse&quot;);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到，这段代码的某些方面将从自动生成中受益：</p><ul><li>从 API 定义中派生端点参数</li><li>指定输入和输出类型</li><li>响应有效载荷验证</li><li>跨项目的一致路由和 ID 命名</li></ul><p><strong>此外，使用代码生成来解决这些横切关注点确保了，随着被调用 API 随时间的演变，生成的代码将始终与合同保持同步</strong>。</p><h2 id="_3-创建-openapi-生成器项目" tabindex="-1"><a class="header-anchor" href="#_3-创建-openapi-生成器项目"><span>3. 创建 OpenAPI 生成器项目</span></a></h2><p><strong>从 OpenAPI 的角度来看，自定义生成器只是一个实现 <em>CodegenConfig</em> 接口的常规 Java 类</strong>。让我们通过引入所需的依赖项来开始我们的项目：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>``&lt;dependency&gt;``\n    ```&lt;groupId&gt;```org.openapitools```&lt;/groupId&gt;```\n    ```&lt;artifactId&gt;```openapi-generator```&lt;/artifactId&gt;```\n    ```&lt;version&gt;```7.5.0```&lt;/version&gt;```\n    `&lt;scope&gt;`provided`&lt;/scope&gt;`\n``&lt;/dependency&gt;``\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个依赖项的最新版本可在 Maven Central 上获得。</p><p>在运行时，生成器的核心逻辑使用 JRE 的标准服务机制来查找和注册所有可用的实现。<strong>这意味着我们必须在 <em>META-INF/services</em> 下创建一个文件，其中包含我们的 <em>CodegenConfig</em> 实现的完全限定名称</strong>。在使用标准 Maven 项目布局时，此文件位于 <em>src/main/resources</em> 文件夹下。</p><p>OpenAPI 生成器工具还支持基于 Maven 的自定义生成器项目的生成。以下是我们如何使用几个 shell 命令来引导项目的方法：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>mkdir -p target wget -O target/openapi-generator-cli.jar https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/7.5.0/openapi-generator-cli-7.5.0.jar\njava -jar target/openapi-generator-cli.jar meta -o . -n java-camel-client -p com.baeldung.openapi.generators.camelclient\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-实现生成器" tabindex="-1"><a class="header-anchor" href="#_4-实现生成器"><span>4. 实现生成器</span></a></h2><p>如上所述，我们的生成器必须实现 <em>CodegenConfig</em> 接口。然而，如果我们仔细观察，可能会感到有点害怕。毕竟，它有惊人的 155 个方法！</p><p>幸运的是，核心逻辑已经提供了我们可以扩展的 <em>DefaultCodegen</em> 类。<strong>这大大简化了我们的任务，因为我们所要做的就是覆盖几个方法就可以得到一个工作正常的生成器</strong>。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>public class JavaCamelClientGenerator extends DefaultCodegen {\n    // 根据需要覆盖方法\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-1-生成器元数据" tabindex="-1"><a class="header-anchor" href="#_4-1-生成器元数据"><span>4.1. 生成器元数据</span></a></h3><p>我们应该实现的第一批方法包括 <em>getName()</em> 和 <em>getTag()</em>。第一个应该返回用户将用于告知集成插件或 CLI 工具他们想要使用我们的生成器的友好名称。<strong>一个常见的约定是使用由目标语言、REST 库/框架和类型 - <em>client</em> 或 <em>server</em> 组成的三部分标识符</strong>：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>public String getName() {\n    return &quot;java-camel-client&quot;;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至于 <em>getTag()</em> 方法，我们应该返回一个与我们生成的代码类型相匹配的 <em>CodegenType</em> 枚举值，对我们来说，是 <em>CLIENT</em>：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>public CodegenType getTag() {\n    return CodegenType.CLIENT;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-帮助说明" tabindex="-1"><a class="header-anchor" href="#_4-2-帮助说明"><span>4.2. 帮助说明</span></a></h3><p><strong>从可用性的角度来看，一个重要的方面是为我们的生成器的目的和选项提供给最终用户有用的信息</strong>。我们应该使用 <em>getHelp()</em> 方法返回这些信息。</p><p>在这里，我们只是返回其目的的简要描述，但完整的实现将添加额外的细节，并理想地，提供在线文档的链接：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>public String getHelp() {\n    return &quot;生成调用 API 操作的 Camel 生产者路由。&quot;;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-目标文件夹" tabindex="-1"><a class="header-anchor" href="#_4-3-目标文件夹"><span>4.3. 目标文件夹</span></a></h3><p>给定一个 API 定义，生成器将输出几个工件：</p><ul><li>API 实现（客户端或服务器）</li><li>API 测试</li><li>API 文档</li><li>模型</li><li>模型测试</li><li>模型文档</li></ul><p><strong>对于每种工件类型，都有一个相应的方法返回生成路径将要去的路径</strong>。让我们看看这两种方法的实现：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>@Override\npublic String modelFileFolder() {\n    return outputFolder() + File.separator + sourceFolder +\n      File.separator + modelPackage().replace(&#39;.&#39;, File.separatorChar);\n}\n\n@Override\npublic String apiFileFolder() {\n    return outputFolder() + File.separator + sourceFolder +\n      File.separator + apiPackage().replace(&#39;.&#39;, File.separatorChar);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这两种情况下，我们使用继承的 <em>outputFolder()</em> 方法作为起点，然后附加 <em>sourceFolder</em> - 稍后将更多地讨论此字段 - 以及转换为路径的目标包。</p><p><strong>在运行时，这些部分的值将来自通过命令行选项或可用集成（Maven、Gradle 等）传递给工具的配置选项</strong>。</p><h3 id="_4-4-模板位置" tabindex="-1"><a class="header-anchor" href="#_4-4-模板位置"><span>4.4. 模板位置</span></a></h3><p>正如我们在模板定制教程中看到的，每个生成器使用一组模板来生成目标工件。<strong>对于内置生成器，我们可以替换模板，但我们不能重命名或添加新的模板</strong>。</p><p>另一方面，自定义生成器没有这个限制。在构造时，我们可以使用 <em>xxxTemplateFiles()</em> 方法注册任意多的模板。</p><p>每个这些 <em>xxxTemplateFIles()</em> 方法返回一个可修改的映射，我们可以向其中添加我们的模板。每个映射条目都有模板名称作为其键和生成文件扩展名作为其值。</p><p>对于我们的 Camel 生成器，这是生产者模板注册的样子：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>public JavaCamelClientGenerator() {\n    super();\n    // ...其他配置省略\n    apiTemplateFiles().put(&quot;camel-producer.mustache&quot;,&quot;.java&quot;);\n    // ...其他配置省略\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码注册了一个名为 <em>camel-producer.mustache</em> 的模板，它将被用于输入文档中定义的每个 API。<strong>生成的文件将根据 API 的名称命名，并加上给定的扩展名（在本例中为 &quot;.java&quot;）</strong>。</p><p>注意，没有要求扩展名以点字符开头。我们可以使用这个事实为给定的 API 生成多个文件。</p><p>我们还必须使用 <em>setTemplateDir()</em> 配置模板的基本位置。一个好的约定是使用生成器的名称，这避免了与任何内置生成器的冲突：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>setTemplateDir(&quot;java-camel-client&quot;);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-5-配置选项" tabindex="-1"><a class="header-anchor" href="#_4-5-配置选项"><span>4.5. 配置选项</span></a></h3><p><strong>大多数生成器支持和/或需要用户提供的值，这些值将以这样或那样的方式影响代码生成</strong>。我们必须在构造时使用 <em>cliOptions()</em> 来注册我们将支持的选项，以访问由 <em>CliOption</em> 对象组成的可修改列表。</p><p>在我们的例子中，我们将只添加两个选项：一个用于设置生成类的目的地 Java 包，另一个用于相对于输出路径的源目录。两者都将有合理的默认值，因此用户不必指定它们：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>public JavaCamelClientGenerator() {\n    // ...其他配置省略\n    cliOptions().add(\n      new CliOption(CodegenConstants.API_PACKAGE,CodegenConstants.API_PACKAGE_DESC)\n        .defaultValue(apiPackage));\n    cliOptions().add(\n      new CliOption(CodegenConstants.SOURCE_FOLDER, CodegenConstants.SOURCE_FOLDER_DESC)\n        .defaultValue(sourceFolder));\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用 <em>CodegenConstants</em> 来指定选项名称和描述。<strong>尽可能使用这些常量而不是使用我们自己的选项名称</strong>。这使用户更容易在具有类似功能的生成器之间切换，并促进了对他们的一致体验。</p><h3 id="_4-6-处理配置选项" tabindex="-1"><a class="header-anchor" href="#_4-6-处理配置选项"><span>4.6. 处理配置选项</span></a></h3><p>生成器核心在开始实际生成之前调用 <em>processOpts()</em>，因此我们有机会在模板处理之前设置任何所需的状态。</p><p><strong>在这里，我们将使用此方法来捕获 <em>sourceFolder</em> 配置选项的实际值</strong>。这将由目标文件夹方法用来评估不同生成文件的最终目的地：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>public void processOpts() {\n    super.processOpts();\n\n    if (additionalProperties().containsKey(CodegenConstants.SOURCE_FOLDER)) {\n        sourceFolder = ((String) additionalProperties().get(CodegenConstants.SOURCE_FOLDER));\n        // ...源文件夹验证省略\n    }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在此方法中，我们使用 <em>additionalProperties()</em> 检索用户和/或预配置属性的映射。这也是在实际生成开始之前，我需要澄清一点：由于网页内容较长，我将分两部分来完成翻译。下面是第一部分的翻译，接下来我将继续翻译剩余的部分。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>@Override\npublic void processOpts() {\n    super.processOpts();\n\n    if (additionalProperties().containsKey(CodegenConstants.SOURCE_FOLDER)) {\n        sourceFolder = ((String) additionalProperties().get(CodegenConstants.SOURCE_FOLDER));\n        // ...源文件夹验证省略\n    }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个方法中，我们使用 <code>additionalProperties()</code> 来检索用户和/或预配置属性的映射。这也是在实际生成开始前验证所提供选项是否有效的最后机会。</p><p>截至撰写本文时，如果在这一点上通知不一致性的唯一方法是抛出 <code>RuntimeException()</code>，通常是一个 <code>IllegalArgumentException()</code>。<strong>这种方法的缺点是用户会得到错误消息以及非常糟糕的堆栈跟踪，这不是最好的体验</strong>。</p><h3 id="_4-7-附加文件" tabindex="-1"><a class="header-anchor" href="#_4-7-附加文件"><span>4.7. 附加文件</span></a></h3><p><strong>尽管在我们的例子中不需要，但值得注意的是，我们也可以生成与 API 和模型没有直接关系的文件</strong>。例如，我们可以生成 <code>pom.xml</code>、<code>README</code>、<code>.gitignore</code> 文件，或我们想要的任何其他文件。</p><p>对于每个附加文件，我们必须在构造时向 <code>additionalFiles()</code> 方法返回的列表中添加一个 <code>SupportingFile</code> 实例。一个 <code>SupportingFile</code> 实例是一个包含以下内容的元组：</p><ul><li>模板名称</li><li>相对于指定输出文件夹的目标文件夹</li><li>输出文件名称</li></ul><p>以下是我们如何注册一个模板以在输出文件夹的根目录生成 <code>README</code> 文件的方式：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>public JavaCamelClientGenerator() {\n    // ...其他配置省略\n    supportingFiles().add(new SupportingFile(&quot;readme.mustache&quot;,&quot;&quot;,&quot;README.txt&quot;));\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-8-模板助手" tabindex="-1"><a class="header-anchor" href="#_4-8-模板助手"><span>4.8. 模板助手</span></a></h3><p><strong>默认模板引擎 Mustache 在渲染之前操作数据方面，按设计非常有限</strong>。例如，该语言本身没有字符串操作功能，如分割、替换等。</p><p>如果我们的模板逻辑需要它们，我们必须使用助手类，也称为 lambdas。助手必须实现 <code>Mustache.Lambda</code> 并通过在我们的生成器类中实现 <code>addMustacheLambdas()</code> 来注册：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>protected ImmutableMap.Builder``&lt;String, Mustache.Lambda&gt;`` addMustacheLambdas() {\n    ImmutableMap.Builder``&lt;String, Mustache.Lambda&gt;`` builder = super.addMustacheLambdas();\n    return builder\n      .put(&quot;javaconstant&quot;, new JavaConstantLambda())\n      .put(&quot;path&quot;, new PathLambda());\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，我们首先调用基类实现，以便我们可以重用其他可用的 lambdas。这返回了一个 <code>ImmutableMap.Builder</code> 实例，我们可以向其中添加我们的助手。键是我们将在模板中调用 lambda 的名称，值是所需类型的 lambda 实例。</p><p>一旦注册，我们就可以在模板中使用上下文中可用的 <code>lambda</code> 映射来使用它们：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>{{#lambda.javaconstant}}...任何有效的 mustache 内容...{{/lambda.javaconstant}}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们的 Camel 模板需要两个助手：一个用于从方法的 <code>operationId</code> 派生合适的 Java 常量名称，另一个用于从 URL 中提取路径。让我们看看后者：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>public class PathLambda implements Mustache.Lambda {\n    @Override\n    public void execute(Template.Fragment fragment, Writer writer) throws IOException {\n        String maybeUri = fragment.execute();\n        try {\n            URI uri = new URI(maybeUri);\n            if (uri.getPath() != null) {\n                writer.write(uri.getPath());\n            } else {\n                writer.write(&quot;/&quot;);\n            }\n        } catch (URISyntaxException e) {\n            // 不是 URI。保持原样\n            writer.write(maybeUri);\n        }\n    }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>execute()</code> 方法有两个参数。第一个是 <code>Template.Fragment</code>，它允许我们使用 <code>execute()</code> 访问模板传递给 lambda 的任何表达式的值。一旦我们有了实际的内容，我们应用我们的逻辑来提取 URI 的路径部分。</p><p>最后，我们使用作为第二个参数传递的 <code>Writer</code>，将结果发送到处理流程。</p><p>通常，这是生成器项目中最需要努力的部分。然而，我们可以以另一种语言/框架的现有模板为起点。</p><p>此外，由于我们之前已经介绍过这个话题，我们在这里不会详细介绍。我们将假设生成的代码将是 Spring Boot 应用程序的一部分，因此我们不会生成一个完整的项目。相反，我们将只为每个 API 生成一个扩展 <code>RouteBuilder</code> 的 <code>@Component</code> 类。</p><p>对于每个操作，我们将添加一个用户可以调用的 &quot;direct&quot; 路由。每个路由使用 DSL 定义一个从相应操作创建的 rest 目的地。</p><p>虽然结果模板远非生产级别，但可以通过添加错误处理、重试策略等功能进一步增强。</p><h2 id="_5-单元测试" tabindex="-1"><a class="header-anchor" href="#_5-单元测试"><span>5. 单元测试</span></a></h2><p>对于基本测试，我们可以使用 <code>CodegenConfigurator</code> 在常规单元测试中验证我们生成器的基本功能：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>public void whenLaunchCodeGenerator_thenSuccess() throws Exception {\n    Map`&lt;String, Object&gt;` opts = new HashMap&lt;&gt;();\n    opts.put(CodegenConstants.SOURCE_FOLDER, &quot;src/generated&quot;);\n    opts.put(CodegenConstants.API_PACKAGE,&quot;test.api&quot;);\n\n    CodegenConfigurator configurator = new CodegenConfigurator()\n      .setGeneratorName(&quot;java-camel-client&quot;)\n      .setInputSpec(&quot;petstore.yaml&quot;)\n      .setAdditionalProperties(opts)\n      .setOutputDir(&quot;target/out/java-camel-client&quot;);\n\n    ClientOptInput clientOptInput = configurator.toClientOptInput();\n    DefaultGenerator generator = new DefaultGenerator();\n    generator.opts(clientOptInput)\n      .generate();\n\n    File f = new File(&quot;target/out/java-camel-client/src/generated/test/api/PetApi.java&quot;);\n    assertTrue(f.exists());\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个测试模拟了使用示例 API 定义和标准选项的典型执行。然后它验证它是否在预期位置产生了一个文件：在我们的案例中，是一个以 API 的标签命名的单个 Java 文件。</p><h2 id="_6-集成测试" tabindex="-1"><a class="header-anchor" href="#_6-集成测试"><span>6. 集成测试</span></a></h2><p><strong>尽管有用，单元测试并不解决生成代码本身的功能</strong>。例如，即使文件看起来不错并且可以编译，它在运行时可能不会正确行为。</p><p>为了确保这一点，我们需要一个更复杂的测试设置，其中生成器的输出与所需的库、模拟等一起编译和运行。</p><p><strong>一个更简单的方法是使用一个专用项目来使用我们的自定义生成器</strong>。在我们的例子中，示例项目是一个基于 Maven 的 Spring Boot/Camel 项目，我们向其中添加了 OpenAPI Generator 插件：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>`&lt;plugins&gt;`\n    `&lt;plugin&gt;`\n        ```&lt;groupId&gt;```org.openapitools```&lt;/groupId&gt;```\n        ```&lt;artifactId&gt;```openapi-generator-maven-plugin```&lt;/artifactId&gt;```\n        ```&lt;version&gt;```${openapi-generator.version}```&lt;/version&gt;```\n        ``&lt;configuration&gt;``\n            `&lt;skipValidateSpec&gt;`true`&lt;/skipValidateSpec&gt;`\n            `&lt;inputSpec&gt;`${project.basedir}/src/main/resources/api/quotes.yaml`&lt;/inputSpec&gt;`\n        ``&lt;/configuration&gt;``\n        `&lt;executions&gt;`\n            `&lt;execution&gt;`\n                `&lt;id&gt;`generate-camel-client`&lt;/id&gt;`\n                `&lt;goals&gt;`\n                    `&lt;goal&gt;`generate`&lt;/goal&gt;`\n                `&lt;/goals&gt;`\n                ``&lt;configuration&gt;``\n                    `&lt;generatorName&gt;`java-camel-client`&lt;/generatorName&gt;`\n                    `&lt;generateModels&gt;`false`&lt;/generateModels&gt;`\n                    `&lt;configOptions&gt;`\n                        `&lt;apiPackage&gt;`com.baeldung.tutorials.openapi.quotes.client`&lt;/apiPackage&gt;`\n                        `&lt;modelPackage&gt;`com.baeldung.tutorials.openapi.quotes.api.model`&lt;/modelPackage&gt;`\n                    `&lt;/configOptions&gt;`\n                ``&lt;/configuration&gt;``\n            `&lt;/execution&gt;`\n            ...其他执行省略\n        `&lt;/executions&gt;`\n        `&lt;dependencies&gt;`\n            ``&lt;dependency&gt;``\n                ```&lt;groupId&gt;```com.baeldung```&lt;/groupId&gt;```\n                ```&lt;artifactId&gt;```openapi-custom-generator```&lt;/artifactId&gt;```\n                ```&lt;version&gt;```0.0.1-SNAPSHOT```&lt;/version&gt;```\n            ``&lt;/dependency&gt;``\n        `&lt;/dependencies&gt;`\n    `&lt;/plugin&gt;`\n    ...其他插件省略\n`&lt;/plugins&gt;`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意我们如何将我们的自定义生成器工件作为插件依赖项添加。这允许我们为 <em>generatorName</em> 配置参数指定 java-camel-client</strong>。</p><p>另外，由于我们的生成器不支持模型生成，在完整的 <em>pom.xml</em> 中我们添加了插件的第二个执行，使用现成的 Java 生成器。</p><p>现在，我们可以使用任何测试框架来验证生成的代码是否按预期工作。使用 Camel 的测试支持类，这是一个典型的测试的样子：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>@SpringBootTest\nclass ApplicationUnitTest {\n    @Autowired\n    private FluentProducerTemplate producer;\n\n    @Autowired\n    private CamelContext camel;\n\n    @Test\n    void whenInvokeGeneratedRoute_thenSuccess() throws Exception {\n        AdviceWith.adviceWith(camel, QuotesApi.GET_QUOTE_ROUTE_ID, in -&gt; {\n            in.mockEndpointsAndSkip(&quot;rest:*&quot;);\n        });\n\n        Exchange exg = producer.to(QuotesApi.GET_QUOTE)\n          .withHeader(&quot;symbol&quot;, &quot;BAEL&quot;)\n          .send();\n        assertNotNull(exg);\n    }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-结论" tabindex="-1"><a class="header-anchor" href="#_7-结论"><span>7. 结论</span></a></h2><p>在本教程中，我们展示了创建 OpenAPI 生成器工具的自定义生成器所需的步骤。我们还展示了如何使用测试项目在现实场景中验证生成的代码。</p><p>像往常一样，所有代码都可以在 GitHub 上找到。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>\n我将继续翻译剩余的部分。请稍等片刻。</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>',100),d=[l];function s(r,o){return i(),n("div",null,d)}const p=e(a,[["render",s],["__file","OpenAPI Custom Generator.html.vue"]]),v=JSON.parse('{"path":"/posts/baeldung/OpenAPI%20Custom%20Generator.html","title":"OpenAPI 自定义生成器 | Baeldung","lang":"zh-CN","frontmatter":{"date":"2024-06-16T00:00:00.000Z","category":["Java","OpenAPI"],"tag":["OpenAPI Generator","Apache Camel"],"description":"OpenAPI 自定义生成器 | Baeldung 1. 引言 在本教程中，我们将继续探索 OpenAPI Generator 的自定义选项。这次，我们将展示创建一个新生成器所需的步骤，该生成器为基于 Apache Camel 的应用程序创建 REST 生产者路由。 2. 为什么要创建一个新的生成器？ 在之前的教程中，我们已经展示了如何自定义现有生成器...","head":[["meta",{"property":"og:url","content":"https://kahen.xyz/posts/baeldung/OpenAPI%20Custom%20Generator.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文站"}],["meta",{"property":"og:title","content":"OpenAPI 自定义生成器 | Baeldung"}],["meta",{"property":"og:description","content":"OpenAPI 自定义生成器 | Baeldung 1. 引言 在本教程中，我们将继续探索 OpenAPI Generator 的自定义选项。这次，我们将展示创建一个新生成器所需的步骤，该生成器为基于 Apache Camel 的应用程序创建 REST 生产者路由。 2. 为什么要创建一个新的生成器？ 在之前的教程中，我们已经展示了如何自定义现有生成器..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-16T04:15:14.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"OpenAPI Generator"}],["meta",{"property":"article:tag","content":"Apache Camel"}],["meta",{"property":"article:published_time","content":"2024-06-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-16T04:15:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"OpenAPI 自定义生成器 | Baeldung\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-16T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-16T04:15:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://kahen.xyz\\"}]}"]]},"headers":[{"level":2,"title":"1. 引言","slug":"_1-引言","link":"#_1-引言","children":[]},{"level":2,"title":"2. 为什么要创建一个新的生成器？","slug":"_2-为什么要创建一个新的生成器","link":"#_2-为什么要创建一个新的生成器","children":[]},{"level":2,"title":"3. 创建 OpenAPI 生成器项目","slug":"_3-创建-openapi-生成器项目","link":"#_3-创建-openapi-生成器项目","children":[]},{"level":2,"title":"4. 实现生成器","slug":"_4-实现生成器","link":"#_4-实现生成器","children":[{"level":3,"title":"4.1. 生成器元数据","slug":"_4-1-生成器元数据","link":"#_4-1-生成器元数据","children":[]},{"level":3,"title":"4.2. 帮助说明","slug":"_4-2-帮助说明","link":"#_4-2-帮助说明","children":[]},{"level":3,"title":"4.3. 目标文件夹","slug":"_4-3-目标文件夹","link":"#_4-3-目标文件夹","children":[]},{"level":3,"title":"4.4. 模板位置","slug":"_4-4-模板位置","link":"#_4-4-模板位置","children":[]},{"level":3,"title":"4.5. 配置选项","slug":"_4-5-配置选项","link":"#_4-5-配置选项","children":[]},{"level":3,"title":"4.6. 处理配置选项","slug":"_4-6-处理配置选项","link":"#_4-6-处理配置选项","children":[]},{"level":3,"title":"4.7. 附加文件","slug":"_4-7-附加文件","link":"#_4-7-附加文件","children":[]},{"level":3,"title":"4.8. 模板助手","slug":"_4-8-模板助手","link":"#_4-8-模板助手","children":[]}]},{"level":2,"title":"5. 单元测试","slug":"_5-单元测试","link":"#_5-单元测试","children":[]},{"level":2,"title":"6. 集成测试","slug":"_6-集成测试","link":"#_6-集成测试","children":[]},{"level":2,"title":"7. 结论","slug":"_7-结论","link":"#_7-结论","children":[]}],"git":{"createdTime":1718511314000,"updatedTime":1718511314000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":12.44,"words":3732},"filePathRelative":"posts/baeldung/OpenAPI Custom Generator.md","localizedDate":"2024年6月16日","excerpt":"\\n<h2>1. 引言</h2>\\n<p>在本教程中，我们将继续探索 OpenAPI Generator 的自定义选项。这次，我们将展示创建一个新生成器所需的步骤，该生成器为基于 Apache Camel 的应用程序创建 REST 生产者路由。</p>\\n<h2>2. 为什么要创建一个新的生成器？</h2>\\n<p>在之前的教程中，我们已经展示了如何自定义现有生成器的模板以适应特定的用例。</p>\\n<p><strong>然而，有时我们将面临无法使用任何现有生成器的情况</strong>。例如，当我们需要针对新的语言或 REST 框架时就是这种情况。</p>\\n<p>作为一个具体的例子，当前版本的 OpenAPI Generator 对 Apache Camel 的集成框架仅支持生成消费者路由。在 Camel 的术语中，这些路由接收 REST 请求，然后将其发送到调解逻辑。</p>","autoDesc":true}');export{p as comp,v as data};
