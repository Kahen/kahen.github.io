import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-DE4beumH.js";const e={},p=t('<h1 id="使用java-operator-sdk创建kubernetes-operators-baeldung" tabindex="-1"><a class="header-anchor" href="#使用java-operator-sdk创建kubernetes-operators-baeldung"><span>使用Java Operator SDK创建Kubernetes Operators | Baeldung</span></a></h1><h2 id="_1-引言" tabindex="-1"><a class="header-anchor" href="#_1-引言"><span>1. 引言</span></a></h2><p>在本教程中，我们将介绍Kubernetes Operators的概念以及如何使用Java Operator SDK来实现它们。为了说明这一点，我们将实现一个Operators，它简化了在集群中部署OWASP的Dependency-Track应用程序实例的任务。</p><h2 id="_2-kubernetes-operators是什么" tabindex="-1"><a class="header-anchor" href="#_2-kubernetes-operators是什么"><span>2. Kubernetes Operators是什么？</span></a></h2><p>在Kubernetes术语中，<strong>Operators是一个通常部署在集群中的软件组件，它管理一组资源的生命周期</strong>。它扩展了原生控制器集合，例如副本集和作业控制器，以管理复杂或相互关联的组件作为一个单一管理单元。</p><p>让我们看看Operators的一些常见用例：</p><ul><li>在集群中部署应用程序时执行最佳实践</li><li>跟踪并从意外删除/更改应用程序使用的资源中恢复</li><li>自动化与应用程序相关的日常维护任务，例如定期备份和清理</li><li>自动化集群外资源配置——例如，存储桶和证书</li><li>改善应用程序开发人员与Kubernetes的交互体验</li><li>通过允许用户仅管理应用程序级别的资源而不是低级别的资源（如Pods和部署）来提高整体安全性</li><li>将应用程序特定的资源（即自定义资源定义）公开为Kubernetes资源</li></ul><p>最后一个用例非常有趣。它允许解决方案提供商利用围绕常规Kubernetes资源的现有实践来管理应用程序特定的资源。<strong>主要好处是任何采用此应用程序的人都可以利用现有的基础设施即代码工具</strong>。</p><p>为了让我们了解可用的不同类型的Operators，我们可以查看OperatorHub.io网站。在那里，我们会找到用于流行的数据库、API管理器、开发工具等的Operators。</p><h2 id="_3-operators和crds" tabindex="-1"><a class="header-anchor" href="#_3-operators和crds"><span>3. Operators和CRDs</span></a></h2><p><strong>自定义资源定义，简称CRDs，是Kubernetes的扩展机制，允许我们在集群中存储结构化数据</strong>。就像这个平台上几乎所有的东西一样，CRD定义本身也是一个资源。</p><p>这个元定义描述了给定CRD实例的范围（基于命名空间或全局）和用于验证CRD实例的模式。一旦注册，用户可以像创建原生实例一样创建CRD实例。集群管理员还可以将CRDs作为角色定义的一部分，从而只授予授权用户和应用程序访问权限。</p><p><strong>现在，注册CRD本身并不意味着Kubernetes将以任何方式使用它</strong>。就Kubernetes而言，CRD实例只是其内部数据库中的一个条目。由于没有任何标准的Kubernetes原生控制器知道如何处理它，所以什么也不会发生。</p><p>这就是Operators的控制器部分发挥作用的地方。<strong>一旦部署，它将监视与相应自定义资源相关的事件并相应地做出响应</strong>。</p><p>在这里，《行动》部分是重要的。术语受到控制理论的启发，可以总结在以下图表中：</p><h2 id="_4-实现operators" tabindex="-1"><a class="header-anchor" href="#_4-实现operators"><span>4. 实现Operators</span></a></h2><p>让我们回顾一下创建Operators需要完成的主要任务：</p><ul><li>定义我们通过Operators管理的目标资源模型</li><li>创建一个CRD，捕获部署这些资源所需的参数</li><li>创建一个控制器，监视与注册CRD相关的集群事件</li></ul><p><strong>对于本教程，我们将为OWASP旗舰项目Dependency-Track实现一个Operators</strong>。这个应用程序允许用户跟踪组织中使用的库中的漏洞，从而允许软件安全专业人员评估并解决发现的任何问题。</p><p>Dependency-Track的Docker分发由两个组件组成：API和前端服务，每个组件都有自己的镜像。在将它们部署到Kubernetes集群时，通常的做法是将每个组件包装在Deployment中以管理运行这些镜像的Pods。</p><p>然而，这还不是全部。我们还需要一些额外的资源来完成解决方案：</p><ul><li>作为每个Deployment前面的负载均衡器的服务</li><li>一个Ingress，将应用程序暴露给外部世界</li><li>一个持久卷声明，用于存储从公共源下载的漏洞定义</li><li>ConfigMap和Secret资源，分别存储通用和敏感参数</li></ul><p>此外，我们还需要正确设置存活/就绪探针、资源限制和其他普通用户不应关心的细节。</p><p>让我们看看如何使用Operators简化这项任务。</p><h2 id="_5-定义模型" tabindex="-1"><a class="header-anchor" href="#_5-定义模型"><span>5. 定义模型</span></a></h2><p>我们的Operators将专注于运行Dependency-Track系统所需的最小资源集。<strong>幸运的是，提供的镜像具有合理的默认值，所以我们只需要一个信息：用于访问应用程序的外部URL</strong>。</p><p>现在暂时不考虑数据库和存储设置，但一旦我们掌握了基础知识，添加这些功能就很简单了。</p><p>然而，我们将留出一些自定义的空间。特别是，允许用户覆盖用于部署的镜像和版本是方便的，因为它们在不断发展。</p><p>让我们看看一个Dependency-Track安装图，显示了其所有组件：</p><p>所需的模型参数是：</p><ul><li>在Kubernetes命名空间中创建资源</li><li>用于安装的名称，并用于派生每个组件名称</li><li>用于Ingress资源的主机名</li><li>可选的额外注释添加到Ingress。我们需要这些，因为一些云提供商（例如AWS）需要它们才能正常工作。</li></ul><h2 id="_6-控制器项目设置" tabindex="-1"><a class="header-anchor" href="#_6-控制器项目设置"><span>6. 控制器项目设置</span></a></h2><p><strong>下一步将是手动定义CRD模式，但由于我们使用Java Operator SDK，这将被处理</strong>。相反，让我们转到控制器项目本身。</p><p>我们将从一个标准的Spring Boot 3 WebFlux应用程序开始，并添加所需的依赖项：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`````\n    ``````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>``````io.javaoperatorsdk``````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>``````\n    ``````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>``````operator-framework-spring-boot-starter``````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>``````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`````5.4.0`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`````\n`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`````\n\n`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`````\n    ``````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>``````io.javaoperatorsdk``````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>``````\n    ``````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>``````operator-framework-spring-boot-starter-test``````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>``````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`````5.4.0`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`````\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>``test``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>``\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>`\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>`\n            ``````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>``````org.apache.logging.log4j``````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>``````\n            ``````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>``````log4j-slf4j2-impl``````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>``````\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>`\n`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`````\n\n`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`````\n    ``````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>``````io.fabric8``````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>``````\n    ``````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>``````crd-generator-apt``````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>``````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`````6.9.2`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`````\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>``provided``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>``\n`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`````\n\n`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`````\n    ``````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>``````org.bouncycastle``````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>``````\n    ``````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>``````bcprov-jdk18on``````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>``````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`````1.77`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`````\n`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`````\n\n`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`````\n    ``````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>``````org.bouncycastle``````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>``````\n    ``````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>``````bcpkix-jdk18on``````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>``````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`````1.77`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`````\n`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些依赖项的最新版本可在Maven Central上找到：</p><ul><li><em>operator-framework-spring-boot-starter</em></li><li><em>operator-framework-spring-boot-starter-test</em></li><li><em>crd-generator-apt</em></li><li><em>bcprov-jdk18on</em></li><li><em>bcpkix-jdk18on</em></li></ul><p>前两个分别用于实现和测试Operators。_crd-generator-apt_是注解处理器，它从注解类生成CRD定义。最后，bouncycastle库需要支持现代加密标准。</p><p>注意添加到测试启动器的排除。我们移除了_log4j_依赖，因为它与_logback_冲突。</p><h2 id="_7-实现主要资源" tabindex="-1"><a class="header-anchor" href="#_7-实现主要资源"><span>7. 实现主要资源</span></a></h2><p><strong>一个主要资源类表示用户将部署到集群中的CRD</strong>。它使用_@Group_和_@Version_注解进行标识，以便CRD注解处理器可以在编译时生成适当的CRD定义：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Group</span><span class="token punctuation">(</span><span class="token string">&quot;com.baeldung&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@Version</span><span class="token punctuation">(</span><span class="token string">&quot;v1&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptrackResource</span> <span class="token keyword">extends</span> <span class="token class-name">CustomResource</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DeptrackSpec</span><span class="token punctuation">,</span> <span class="token class-name">DeptrackStatus</span><span class="token punctuation">&gt;</span></span>` <span class="token keyword">implements</span> <span class="token class-name">Namespaced</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@JsonIgnore</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getFrontendServiceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> <span class="token class-name">DeptrackFrontendServiceResource</span><span class="token punctuation">.</span><span class="token constant">COMPONENT</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@JsonIgnore</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getApiServerServiceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> <span class="token class-name">DeptrackApiServerServiceResource</span><span class="token punctuation">.</span><span class="token constant">COMPONENT</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们利用SDK的类_CustomResource_来实现我们的_DeptrackResource_。除了基类，我们还使用了_Namespaced_，这是一个标记接口，它告知注解处理器我们的CRD实例将部署到Kubernetes命名空间。</p><p>我们在类中添加了两个辅助方法，稍后我们将使用它们来派生前端和API服务的名称。在这种情况下，我们需要_@JsonIgnore_注解，以避免在将CRD实例序列化/反序列化到Kubernetes API调用时出现问题。</p><h2 id="_8-规范和状态类" tabindex="-1"><a class="header-anchor" href="#_8-规范和状态类"><span>8. 规范和状态类</span></a></h2><p>_CustomResource_类需要两个模板参数：</p><ul><li>一个规范类，包含我们的模型支持的参数</li><li>一个状态类，包含有关我们系统动态状态的信息</li></ul><p>在我们的情况下，只有几个参数，所以这个规范相当简单：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptrackSpec</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> apiServerImage <span class="token operator">=</span> <span class="token string">&quot;dependencytrack/apiserver&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> apiServerVersion <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">private</span> <span class="token class-name">String</span> frontendImage <span class="token operator">=</span> <span class="token string">&quot;dependencytrack/frontend&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> frontendVersion <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">private</span> <span class="token class-name">String</span> ingressHostname<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">Map</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`` ingressAnnotations<span class="token punctuation">;</span>\n\n    <span class="token comment">// ... getters/setters omitted</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至于状态类，我们将只扩展_ObservedGenerationAwareStatus_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptrackStatus</span> <span class="token keyword">extends</span> <span class="token class-name">ObservedGenerationAwareStatus</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用这种方法，SDK将在每次更新时自动增加_observedGeneration_status field</strong>. 这是一种常见的做法，控制器使用它来跟踪资源的更改。</p><h2 id="_9-reconciler" tabindex="-1"><a class="header-anchor" href="#_9-reconciler"><span>9. Reconciler</span></a></h2><p>接下来，我们需要创建一个_Resonciler_类，负责管理Dependency-Track系统的整体状态。我们的类必须实现这个接口，它以资源类作为参数：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ControllerConfiguration</span><span class="token punctuation">(</span>dependents <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Dependent</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token class-name">DeptrackApiServerDeploymentResource</span><span class="token punctuation">.</span><span class="token constant">COMPONENT</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">DeptrackApiServerDeploymentResource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token annotation punctuation">@Dependent</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token class-name">DeptrackFrontendDeploymentResource</span><span class="token punctuation">.</span><span class="token constant">COMPONENT</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">DeptrackFrontendDeploymentResource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token annotation punctuation">@Dependent</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token class-name">DeptrackApiServerServiceResource</span><span class="token punctuation">.</span><span class="token constant">COMPONENT</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">DeptrackApiServerServiceResource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token annotation punctuation">@Dependent</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token class-name">DeptrackFrontendServiceResource</span><span class="token punctuation">.</span><span class="token constant">COMPONENT</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">DeptrackFrontendServiceResource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token annotation punctuation">@Dependent</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">DeptrackIngressResource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@Component</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptrackOperatorReconciler</span> <span class="token keyword">implements</span> <span class="token class-name">Reconciler</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DeptrackResource</span><span class="token punctuation">&gt;</span></span>```` <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">UpdateControl</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DeptrackResource</span><span class="token punctuation">&gt;</span></span>```` <span class="token function">reconcile</span><span class="token punctuation">(</span><span class="token class-name">DeptrackResource</span> resource<span class="token punctuation">,</span> <span class="token class-name">Context</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DeptrackResource</span><span class="token punctuation">&gt;</span></span>```` context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token class-name">UpdateControl</span><span class="token punctuation">.</span><span class="token function">noUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的关键点是_@ControllerConfiguration_注解。它的_dependents_属性列出了将与主要资源的生命周期相关联的各个资源。</p><p>对于部署和服务，我们除了资源的_type_外还需要指定一个_name_属性，以区分它们。至于Ingress，由于每个部署的Dependency-Track资源只有一个，所以不需要名称。</p><p>注意我们还添加了_@Component_注解。我们需要这个注解，以便Operators的自动配置逻辑检测到调和器并将其添加到其内部注册表中。</p><h2 id="_10-依赖资源类" tabindex="-1"><a class="header-anchor" href="#_10-依赖资源类"><span>10. 依赖资源类</span></a></h2><p>对于我们想要在CRD部署的结果中在集群中创建的每个资源，我们需要实现一个_KubernetesDependentResource_类。<strong>这些类必须用_@KubernetesDependent_注解，并负责管理这些资源的生命周期以响应主要资源的更改</strong>。</p><p>SDK提供了_CRUDKubernetesDependentResource_实用类，大大简化了这项任务。我们只需要重写_desired()_方法，它返回依赖资源的期望状态描述：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@KubernetesDependent</span><span class="token punctuation">(</span>resourceDiscriminator <span class="token operator">=</span> <span class="token class-name">DeptrackApiServerDeploymentResource<span class="token punctuation">.</span>Discriminator</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptrackApiServerDeploymentResource</span> <span class="token keyword">extends</span> <span class="token class-name">CRUDKubernetesDependentResource</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Deployment</span><span class="token punctuation">,</span> <span class="token class-name">DeptrackResource</span><span class="token punctuation">&gt;</span></span>`` <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">COMPONENT</span> <span class="token operator">=</span> <span class="token string">&quot;api-server&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">Deployment</span> template<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">DeptrackApiServerDeploymentResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token class-name">Deployment</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>template <span class="token operator">=</span> <span class="token class-name">BuilderHelper</span><span class="token punctuation">.</span><span class="token function">loadTemplate</span><span class="token punctuation">(</span><span class="token class-name">Deployment</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;templates/api-server-deployment.yaml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">protected</span> <span class="token class-name">Deployment</span> <span class="token function">desired</span><span class="token punctuation">(</span><span class="token class-name">DeptrackResource</span> primary<span class="token punctuation">,</span> <span class="token class-name">Context</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DeptrackResource</span><span class="token punctuation">&gt;</span></span>```` context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">ObjectMeta</span> meta <span class="token operator">=</span> <span class="token function">fromPrimary</span><span class="token punctuation">(</span>primary<span class="token punctuation">,</span> <span class="token constant">COMPONENT</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DeploymentBuilder</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">withMetadata</span><span class="token punctuation">(</span>meta<span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">withSpec</span><span class="token punctuation">(</span><span class="token function">buildSpec</span><span class="token punctuation">(</span>primary<span class="token punctuation">,</span> meta<span class="token punctuation">)</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">private</span> <span class="token class-name">DeploymentSpec</span> <span class="token function">buildSpec</span><span class="token punctuation">(</span><span class="token class-name">DeptrackResource</span> primary<span class="token punctuation">,</span> <span class="token class-name">ObjectMeta</span> primaryMeta<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DeploymentSpecBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">withSelector</span><span class="token punctuation">(</span><span class="token function">buildSelector</span><span class="token punctuation">(</span>primaryMeta<span class="token punctuation">.</span><span class="token function">getLabels</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">withReplicas</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">withTemplate</span><span class="token punctuation">(</span><span class="token function">buildPodTemplate</span><span class="token punctuation">(</span>primary<span class="token punctuation">,</span>primaryMeta<span class="token punctuation">)</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">private</span> <span class="token class-name">LabelSelector</span> <span class="token function">buildSelector</span><span class="token punctuation">(</span><span class="token class-name">Map</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`` labels<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LabelSelectorBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">addToMatchLabels</span><span class="token punctuation">(</span>labels<span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">private</span> <span class="token class-name">PodTemplateSpec</span> <span class="token function">buildPodTemplate</span><span class="token punctuation">(</span><span class="token class-name">DeptrackResource</span> primary<span class="token punctuation">,</span> <span class="token class-name">ObjectMeta</span> primaryMeta<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PodTemplateSpecBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">withMetadata</span><span class="token punctuation">(</span>primaryMeta<span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">withSpec</span><span class="token punctuation">(</span><span class="token function">buildPodSpec</span><span class="token punctuation">(</span>primary<span class="token punctuation">)</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">private</span> <span class="token class-name">PodSpec</span> <span class="token function">buildPodSpec</span><span class="token punctuation">(</span><span class="token class-name">DeptrackResource</span> primary<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> imageVersion <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>primary<span class="token punctuation">.</span><span class="token function">getSpec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getApiServerVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span>\n          <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> primary<span class="token punctuation">.</span><span class="token function">getSpec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getApiServerVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n        <span class="token class-name">String</span> imageName <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>primary<span class="token punctuation">.</span><span class="token function">getSpec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getApiServerImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span>\n          primary<span class="token punctuation">.</span><span class="token function">getSpec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getApiServerImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_API_SERVER_IMAGE</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PodSpecBuilder</span><span class="token punctuation">(</span>template<span class="token punctuation">.</span><span class="token function">getSpec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSpec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">editContainer</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">withImage</span><span class="token punctuation">(</span>imageName <span class="token operator">+</span> imageVersion<span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这种情况下，我们使用可用的构建器类创建_Deployment_。数据本身部分来自传递给方法的主要资源的元数据，部分来自初始化时读取的模板。<strong>这种方法允许我们使用已经经过实战考验的现有部署作为模板，只修改真正需要的部分。</strong></p><p>最后，我们需要指定一个_Discriminator_类，Operators引擎使用它在处理来自同一种类的多个来源的事件时定位正确的资源类。在这里，我们将使用框架中提供的基于_ResourceIDMatcherDiscriminator_实用类的实现：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Discriminator</span> <span class="token keyword">extends</span> <span class="token class-name">ResourceIDMatcherDiscriminator</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Deployment</span><span class="token punctuation">,</span> <span class="token class-name">DeptrackResource</span><span class="token punctuation">&gt;</span></span>`` <span class="token punctuation">{</span>\n     <span class="token keyword">public</span> <span class="token class-name">Discriminator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n         <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token constant">COMPONENT</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">ResourceID</span><span class="token punctuation">(</span>\n           p<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> <span class="token constant">COMPONENT</span><span class="token punctuation">,</span>\n           p<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n     <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实用类需要一个事件源名称和一个映射函数。后者接受一个主要资源实例，并返回相关组件的资源标识符（命名空间+名称）。</p><p>由于所有资源类共享相同的基本结构，我们在这里不会重复它们。相反，我们建议查看源代码，了解每个资源是如何构建的。</p><h2 id="_11-本地测试" tabindex="-1"><a class="header-anchor" href="#_11-本地测试"><span>11. 本地测试</span></a></h2><p>由于控制器只是一个常规的Spring应用程序，我们可以使用常规的测试框架为我们的应用程序创建单元和集成测试。</p><p><strong>Java Operator SDK还提供了一个方便的模拟Kubernetes实现，有助于进行简单的测试用例</strong>。要在测试类中使用这个模拟实现，我们使用_@EnableMockOperator_与标准的_@SpringBootTest_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>\n<span class="token annotation punctuation">@EnableMockOperator</span><span class="token punctuation">(</span>crdPaths <span class="token operator">=</span> <span class="token string">&quot;classpath:META-INF/fabric8/deptrackresources.com.baeldung-v1.yml&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">ApplicationUnitTest</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Autowired</span>\n    <span class="token class-name">KubernetesClient</span> client<span class="token punctuation">;</span>\n    <span class="token annotation punctuation">@Test</span>\n    <span class="token keyword">void</span> <span class="token function">whenContextLoaded_thenCrdRegistered</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">assertThat</span><span class="token punctuation">(</span>\n          client\n            <span class="token punctuation">.</span><span class="token function">apiextensions</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">v1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">customResourceDefinitions</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">withName</span><span class="token punctuation">(</span><span class="token string">&quot;deptrackresources.com.baeldung&quot;</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>_crdPath_属性包含注解处理器创建CRD定义YAML文件的位置。<strong>在测试初始化期间，模拟Kubernetes服务将自动注册它，我们可以创建一个CRD实例并检查是否正确创建了预期的资源。</strong></p><p>SDK的测试基础设施还配置了一个_Kubernetes_客户端，我们可以用它来模拟部署并检查是否正确创建了预期的资源。注意，<strong>不需要一个工作的Kubernetes集群</strong>！</p><h2 id="_12-打包和部署" tabindex="-1"><a class="header-anchor" href="#_12-打包和部署"><span>12. 打包和部署</span></a></h2><p>要打包我们的控制器项目，我们可以使用_Dockerfile_，或者更好的是使用Spring Boot的_build-image_目标。<strong>我们推荐后者，因为它确保了镜像遵循有关安全和层组织的最佳实践</strong>。</p><p>一旦我们将镜像发布到本地或远程注册表，我们必须创建一个YAML清单来将控制器部署到现有集群中。</p><p>这个清单包含了管理控制器的部署本身以及支持资源：</p><ul><li>CRD定义</li><li>控制器将“生活”的命名空间</li><li>列出控制器使用的所有API的集群角色</li><li>服务帐户</li><li>将角色链接到帐户的集群角色绑定</li></ul><p>最终的清单可在GitHub仓库中找到。</p><h2 id="_13-crd部署测试" tabindex="-1"><a class="header-anchor" href="#_13-crd部署测试"><span>13. CRD部署测试</span></a></h2><p><strong>为了完成我们的教程，让我们创建一个简单的Dependency-Track CRD清单并部署它</strong>。我们将使用专用的命名空间（“test”）并将其暴露出来。</p><p>对于我们的测试，我们使用的是监听IP地址172.31.42.16的本地Kubernetes，因此我们将使用_deptrack.172.31.42.16.nip.io_作为主机名。<strong>NIP.IO是一个DNS服务，它解析任何形式为_*.1.2.3.4.nip.io_的主机名到IP地址_1.2.3.4，所以我们不需要设置任何DNS条目。</strong></p><p>让我们看看部署清单：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> com.baeldung/v1\n<span class="token key atrule">kind</span><span class="token punctuation">:</span> DeptrackResource\n<span class="token key atrule">metadata</span><span class="token punctuation">:</span>\n  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> test\n  <span class="token key atrule">name</span><span class="token punctuation">:</span> deptrack1\n  <span class="token key atrule">labels</span><span class="token punctuation">:</span>\n    <span class="token key atrule">project</span><span class="token punctuation">:</span> tutorials\n  <span class="token key atrule">annotations</span><span class="token punctuation">:</span>\n    <span class="token key atrule">author</span><span class="token punctuation">:</span> Baeldung\n\n<span class="token key atrule">spec</span><span class="token punctuation">:</span>\n  <span class="token key atrule">ingressHostname</span><span class="token punctuation">:</span> deptrack.172.31.42.16.nip.io\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，让我们使用_kubectl_部署它：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ kubectl apply <span class="token parameter variable">-f</span> k8s/test-resource.yaml\ndeptrackresource.com.baeldung/deptrack1 created\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以得到控制器日志，看看它对CRD的创建做出了反应，并创建了依赖资源：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ kubectl get <span class="token parameter variable">--namespace</span> <span class="token builtin class-name">test</span> deployments\nNAME                   READY   UP-TO-DATE   AVAILABLE   AGE\ndeptrack1-api-server   <span class="token number">0</span>/1     <span class="token number">1</span>            <span class="token number">0</span>           62s\ndeptrack1-frontend     <span class="token number">1</span>/1     <span class="token number">1</span>            <span class="token number">1</span>           62s\n\n$ kubectl get <span class="token parameter variable">--namespace</span> <span class="token builtin class-name">test</span> services\nNAME TYPE CLUSTER-IP EXTERNAL-IP PORT<span class="token punctuation">(</span>S<span class="token punctuation">)</span> AGE\ndeptrack1-frontend-service ClusterIP <span class="token number">10.43</span>.122.76 <span class="token variable"><span class="token variable">`</span><span class="token operator">&lt;</span>none<span class="token operator">&gt;</span><span class="token variable">`</span></span> <span class="token number">8080</span>/TCP 2m17s\n\n$ kubectl get <span class="token parameter variable">--namespace</span> <span class="token builtin class-name">test</span> ingresses\nNAME CLASS HOSTS ADDRESS PORTS AGE\ndeptrack1-ingress traefik deptrack.172.31.42.16.nip.io <span class="token number">172.31</span>.42.16 <span class="token number">80</span> 2m5</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',88),o=[p];function c(l,i){return a(),s("div",null,o)}const k=n(e,[["render",c],["__file","2024-06-24-Create Kubernetes Operators with the Java Operator SDK.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-06-24/2024-06-24-Create%20Kubernetes%20Operators%20with%20the%20Java%20Operator%20SDK.html","title":"使用Java Operator SDK创建Kubernetes Operators | Baeldung","lang":"zh-CN","frontmatter":{"date":"2024-06-24T00:00:00.000Z","category":["Kubernetes","Java"],"tag":["Kubernetes Operator","Java Operator SDK"],"head":[["meta",{"name":"keywords","content":"Kubernetes, Java, Operator, SDK, Baeldung"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-06-24/2024-06-24-Create%20Kubernetes%20Operators%20with%20the%20Java%20Operator%20SDK.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"使用Java Operator SDK创建Kubernetes Operators | Baeldung"}],["meta",{"property":"og:description","content":"使用Java Operator SDK创建Kubernetes Operators | Baeldung 1. 引言 在本教程中，我们将介绍Kubernetes Operators的概念以及如何使用Java Operator SDK来实现它们。为了说明这一点，我们将实现一个Operators，它简化了在集群中部署OWASP的Dependency-Tra..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-24T13:52:52.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Kubernetes Operator"}],["meta",{"property":"article:tag","content":"Java Operator SDK"}],["meta",{"property":"article:published_time","content":"2024-06-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-24T13:52:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用Java Operator SDK创建Kubernetes Operators | Baeldung\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-24T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-24T13:52:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"使用Java Operator SDK创建Kubernetes Operators | Baeldung 1. 引言 在本教程中，我们将介绍Kubernetes Operators的概念以及如何使用Java Operator SDK来实现它们。为了说明这一点，我们将实现一个Operators，它简化了在集群中部署OWASP的Dependency-Tra..."},"headers":[{"level":2,"title":"1. 引言","slug":"_1-引言","link":"#_1-引言","children":[]},{"level":2,"title":"2. Kubernetes Operators是什么？","slug":"_2-kubernetes-operators是什么","link":"#_2-kubernetes-operators是什么","children":[]},{"level":2,"title":"3. Operators和CRDs","slug":"_3-operators和crds","link":"#_3-operators和crds","children":[]},{"level":2,"title":"4. 实现Operators","slug":"_4-实现operators","link":"#_4-实现operators","children":[]},{"level":2,"title":"5. 定义模型","slug":"_5-定义模型","link":"#_5-定义模型","children":[]},{"level":2,"title":"6. 控制器项目设置","slug":"_6-控制器项目设置","link":"#_6-控制器项目设置","children":[]},{"level":2,"title":"7. 实现主要资源","slug":"_7-实现主要资源","link":"#_7-实现主要资源","children":[]},{"level":2,"title":"8. 规范和状态类","slug":"_8-规范和状态类","link":"#_8-规范和状态类","children":[]},{"level":2,"title":"9. Reconciler","slug":"_9-reconciler","link":"#_9-reconciler","children":[]},{"level":2,"title":"10. 依赖资源类","slug":"_10-依赖资源类","link":"#_10-依赖资源类","children":[]},{"level":2,"title":"11. 本地测试","slug":"_11-本地测试","link":"#_11-本地测试","children":[]},{"level":2,"title":"12. 打包和部署","slug":"_12-打包和部署","link":"#_12-打包和部署","children":[]},{"level":2,"title":"13. CRD部署测试","slug":"_13-crd部署测试","link":"#_13-crd部署测试","children":[]}],"git":{"createdTime":1719237172000,"updatedTime":1719237172000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":11.96,"words":3587},"filePathRelative":"posts/baeldung/2024-06-24/2024-06-24-Create Kubernetes Operators with the Java Operator SDK.md","localizedDate":"2024年6月24日","excerpt":"\\n<h2>1. 引言</h2>\\n<p>在本教程中，我们将介绍Kubernetes Operators的概念以及如何使用Java Operator SDK来实现它们。为了说明这一点，我们将实现一个Operators，它简化了在集群中部署OWASP的Dependency-Track应用程序实例的任务。</p>\\n<h2>2. Kubernetes Operators是什么？</h2>\\n<p>在Kubernetes术语中，<strong>Operators是一个通常部署在集群中的软件组件，它管理一组资源的生命周期</strong>。它扩展了原生控制器集合，例如副本集和作业控制器，以管理复杂或相互关联的组件作为一个单一管理单元。</p>","autoDesc":true}');export{k as comp,d as data};
