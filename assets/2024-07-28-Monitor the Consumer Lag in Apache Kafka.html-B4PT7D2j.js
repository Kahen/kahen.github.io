import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-BTwZI-W8.js";const p={},e=t('<hr><h1 id="监控apache-kafka中的消费者滞后" tabindex="-1"><a class="header-anchor" href="#监控apache-kafka中的消费者滞后"><span>监控Apache Kafka中的消费者滞后</span></a></h1><p>Kafka消费者组滞后是任何基于Kafka的事件驱动系统的关键性能指标。</p><p>在本教程中，我们将构建一个分析应用程序来监控Kafka消费者滞后。</p><p>消费者滞后简单地说是消费者最后提交的偏移量与生产者在日志中的结束偏移量之间的差值。换句话说，消费者滞后度量了在任何生产者-消费者系统中生产和消费消息之间的延迟。</p><p>在本节中，让我们了解如何确定偏移量值。</p><h3 id="_2-1-kafka-adminclient" tabindex="-1"><a class="header-anchor" href="#_2-1-kafka-adminclient"><span>2.1. Kafka AdminClient</span></a></h3><p><strong>为了检查消费者组的偏移量值</strong>，<strong>我们需要管理Kafka客户端</strong>。因此，让我们在_LagAnalyzerService_类中编写一个方法来创建_AdminClient_类的实例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">AdminClient</span> <span class="token function">getAdminClient</span><span class="token punctuation">(</span><span class="token class-name">String</span> bootstrapServerConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Properties</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    config<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">AdminClientConfig</span><span class="token punctuation">.</span><span class="token constant">BOOTSTRAP_SERVERS_CONFIG</span><span class="token punctuation">,</span> bootstrapServerConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token class-name">AdminClient</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们必须注意使用_@Value_注解从属性文件中检索引导服务器列表。同样，我们将使用此注解获取其他值，如_groupId和topicName_。</p><h3 id="_2-2-消费者组偏移量" tabindex="-1"><a class="header-anchor" href="#_2-2-消费者组偏移量"><span>2.2. 消费者组偏移量</span></a></h3><p>首先，我们可以<strong>使用_AdminClient_类的_listConsumerGroupOffsets()_方法获取特定消费者组ID的偏移信息</strong>。</p><p>接下来，我们主要关注偏移值，因此我们可以调用_partitionsToOffsetAndMetadata()_方法获取TopicPartition与_OffsetAndMetadata_值的映射：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">Map</span>``````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TopicPartition</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span>`````````````` <span class="token function">getConsumerGrpOffsets</span><span class="token punctuation">(</span><span class="token class-name">String</span> groupId<span class="token punctuation">)</span>\n  <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>\n    <span class="token class-name">ListConsumerGroupOffsetsResult</span> info <span class="token operator">=</span> adminClient<span class="token punctuation">.</span><span class="token function">listConsumerGroupOffsets</span><span class="token punctuation">(</span>groupId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Map</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TopicPartition</span><span class="token punctuation">,</span> <span class="token class-name">OffsetAndMetadata</span><span class="token punctuation">&gt;</span></span>`` topicPartitionOffsetAndMetadataMap <span class="token operator">=</span> info<span class="token punctuation">.</span><span class="token function">partitionsToOffsetAndMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">Map</span>``````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TopicPartition</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span>`````````````` groupOffset <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TopicPartition</span><span class="token punctuation">,</span> <span class="token class-name">OffsetAndMetadata</span><span class="token punctuation">&gt;</span></span>`` entry <span class="token operator">:</span> topicPartitionOffsetAndMetadataMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">TopicPartition</span> key <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">OffsetAndMetadata</span> metadata <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        groupOffset<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TopicPartition</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metadata<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> groupOffset<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们可以注意到对_topicPartitionOffsetAndMetadataMap_的迭代，以限制我们获取的结果仅为每个主题和分区的偏移值。</p><h3 id="_2-3-生产者偏移量" tabindex="-1"><a class="header-anchor" href="#_2-3-生产者偏移量"><span>2.3. 生产者偏移量</span></a></h3><p>找到消费者组滞后的唯一事情是获取结束偏移值的方法。为此，我们可以使用_KafkaConsumer_类的_endOffsets()_方法。</p><p>让我们首先在_LagAnalyzerService_类中创建_KafkaConsumer_类的实例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">KafkaConsumer</span>```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>``````````` <span class="token function">getKafkaConsumer</span><span class="token punctuation">(</span><span class="token class-name">String</span> bootstrapServerConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span><span class="token constant">BOOTSTRAP_SERVERS_CONFIG</span><span class="token punctuation">,</span> bootstrapServerConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span><span class="token constant">KEY_DESERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">StringDeserializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span><span class="token constant">VALUE_DESERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">StringDeserializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">KafkaConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，让我们聚合所有相关的TopicPartition值，这些值需要计算滞后，以便将其作为参数提供给_endOffsets()_方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">Map</span>``````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TopicPartition</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span>`````````````` <span class="token function">getProducerOffsets</span><span class="token punctuation">(</span><span class="token class-name">Map</span>``````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TopicPartition</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span>`````````````` consumerGrpOffset<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">List</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TopicPartition</span><span class="token punctuation">&gt;</span></span>` topicPartitions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span>``````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TopicPartition</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span>`````````````` entry <span class="token operator">:</span> consumerGrpOffset<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">TopicPartition</span> key <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        topicPartitions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TopicPartition</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> kafkaConsumer<span class="token punctuation">.</span><span class="token function">endOffsets</span><span class="token punctuation">(</span>topicPartitions<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，让我们编写一个方法，使用消费者偏移量和生产者的_endoffsets_来生成每个_TopicPartition_的滞后：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">Map</span>``````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TopicPartition</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span>`````````````` <span class="token function">computeLags</span><span class="token punctuation">(</span>\n  <span class="token class-name">Map</span>``````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TopicPartition</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span>`````````````` consumerGrpOffsets<span class="token punctuation">,</span>\n  <span class="token class-name">Map</span>``````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TopicPartition</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span>`````````````` producerOffsets<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Map</span>``````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TopicPartition</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span>`````````````` lags <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span>``````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TopicPartition</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span>`````````````` entry <span class="token operator">:</span> consumerGrpOffsets<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Long</span> producerOffset <span class="token operator">=</span> producerOffsets<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Long</span> consumerOffset <span class="token operator">=</span> consumerGrpOffsets<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">long</span> lag <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>producerOffset <span class="token operator">-</span> consumerOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        lags<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lag<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> lags<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-滞后分析器" tabindex="-1"><a class="header-anchor" href="#_3-滞后分析器"><span>3. 滞后分析器</span></a></h2><p>现在，让我们通过在_LagAnalyzerService_类中编写_analyzeLag()_方法来协调滞后分析：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">analyzeLag</span><span class="token punctuation">(</span><span class="token class-name">String</span> groupId<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Map</span>``````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TopicPartition</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span>`````````````` consumerGrpOffsets <span class="token operator">=</span> <span class="token function">getConsumerGrpOffsets</span><span class="token punctuation">(</span>groupId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Map</span>``````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TopicPartition</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span>`````````````` producerOffsets <span class="token operator">=</span> <span class="token function">getProducerOffsets</span><span class="token punctuation">(</span>consumerGrpOffsets<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Map</span>``````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TopicPartition</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span>`````````````` lags <span class="token operator">=</span> <span class="token function">computeLags</span><span class="token punctuation">(</span>consumerGrpOffsets<span class="token punctuation">,</span> producerOffsets<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span>``````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TopicPartition</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span>`````````````` lagEntry <span class="token operator">:</span> lags<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> topic <span class="token operator">=</span> lagEntry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> partition <span class="token operator">=</span> lagEntry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Long</span> lag <span class="token operator">=</span> lagEntry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Time={} | Lag for topic = {}, partition = {}, groupId = {} is {}&quot;</span><span class="token punctuation">,</span>\n          <span class="token class-name">MonitoringUtil</span><span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          topic<span class="token punctuation">,</span>\n          partition<span class="token punctuation">,</span>\n          lag<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然而，当涉及到监控滞后指标时，我们需要滞后的<strong>几乎实时值</strong>，以便我们可以采取任何管理行动以恢复系统性能。</p><p>实现这一点的一个直接方法是通过<strong>定期的时间间隔轮询滞后值</strong>。因此，让我们创建一个_LiveLagAnalyzerService_服务，该服务将调用_LagAnalyzerService_的_analyzeLag()_方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedDelay <span class="token operator">=</span> <span class="token number">5000L</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">liveLagAnalysis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>\n    lagAnalyzerService<span class="token punctuation">.</span><span class="token function">analyzeLag</span><span class="token punctuation">(</span>groupId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了我们的目的，我们使用_@Scheduled_注解将轮询频率设置为_5秒_。然而，对于实时监控，我们可能需要通过JMX使其可访问。</p><h2 id="_4-模拟" tabindex="-1"><a class="header-anchor" href="#_4-模拟"><span>4. 模拟</span></a></h2><p>在本节中，我们将<strong>模拟Kafka生产者和消费者以进行本地Kafka设置</strong>，这样我们就可以看到_LagAnalyzer_在不依赖外部Kafka生产者和消费者的情况下的运行情况。</p><h3 id="_4-1-模拟模式" tabindex="-1"><a class="header-anchor" href="#_4-1-模拟模式"><span>4.1. 模拟模式</span></a></h3><p>由于<strong>模拟模式仅用于演示目的</strong>，我们应该有一种机制，在我们需要为真实场景运行Lag Analyzer应用程序时可以关闭它。</p><p>我们可以在_application.properties_资源文件中将其作为可配置属性：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">monitor.producer.simulate</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>\n<span class="token key attr-name">monitor.consumer.simulate</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将这些属性插入到Kafka生产者和消费者中，并控制它们的行为。</p><p>此外，让我们定义生产者_startTime_、_endTime_和一个辅助方法_time()_以在监控期间获取当前时间：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Date</span> startTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Date</span> endTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>startTime<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">30</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">DateTimeFormatter</span> dtf <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy/MM/dd HH:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">LocalDateTime</span> now <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> date <span class="token operator">=</span> dtf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> date<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-生产者-消费者配置" tabindex="-1"><a class="header-anchor" href="#_4-2-生产者-消费者配置"><span>4.2. 生产者-消费者配置</span></a></h3><p>我们需要定义一些核心配置值以实例化我们的Kafka消费者和生产者模拟器的实例。</p><p>首先，让我们在_KafkaConsumerConfig_类中定义消费者模拟器的配置：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">ConsumerFactory</span>```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>``````````` <span class="token function">consumerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Map</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>``` props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span><span class="token constant">BOOTSTRAP_SERVERS_CONFIG</span><span class="token punctuation">,</span> bootstrapAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span><span class="token constant">KEY_DESERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">StringDeserializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span><span class="token constant">VALUE_DESERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">StringDeserializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span><span class="token constant">AUTO_COMMIT_INTERVAL_MS_CONFIG</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span><span class="token constant">GROUP_ID_CONFIG</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>groupId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultKafkaConsumerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">ConcurrentKafkaListenerContainerFactory</span>```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>``````````` <span class="token function">kafkaListenerContainerFactory</span><span class="token punctuation">(</span>\n  <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;consumerFactory&quot;</span><span class="token punctuation">)</span> <span class="token class-name">ConsumerFactory</span>```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>``````````` consumerFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">ConcurrentKafkaListenerContainerFactory</span>```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>``````````` listenerContainerFactory <span class="token operator">=</span>\n      <span class="token keyword">new</span> <span class="token class-name">ConcurrentKafkaListenerContainerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    listenerContainerFactory<span class="token punctuation">.</span><span class="token function">setConsumerFactory</span><span class="token punctuation">(</span>consumerFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> listenerContainerFactory<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们可以在_KafkaProducerConfig_类中定义生产者模拟器的配置：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">ProducerFactory</span>```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>``````````` <span class="token function">producerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Map</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>``` configProps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    configProps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">BOOTSTRAP_SERVERS_CONFIG</span><span class="token punctuation">,</span> bootstrapAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    configProps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">KEY_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">StringSerializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    configProps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">VALUE_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">StringSerializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultKafkaProducerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>configProps<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">KafkaTemplate</span>```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>``````````` <span class="token function">kafkaTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>```java\n<span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">KafkaTemplate</span>```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>``````````` <span class="token function">kafkaTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">KafkaTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token function">producerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进一步地，让我们使用_@KafkaListener_注解来指定目标监听器，当然，这只在_monitor.consumer.simulate_设置为_true_时启用：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>\n  topics <span class="token operator">=</span> <span class="token string">&quot;${monitor.topic.name}&quot;</span><span class="token punctuation">,</span>\n  containerFactory <span class="token operator">=</span> <span class="token string">&quot;kafkaListenerContainerFactory&quot;</span><span class="token punctuation">,</span>\n  autoStartup <span class="token operator">=</span> <span class="token string">&quot;${monitor.consumer.simulate}&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上所述，我们增加了10毫秒的睡眠时间，以创建人工消费者滞后。</p><p>最后，让我们编写一个_sendMessage()_方法来模拟生产者：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedDelay <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">,</span> initialDelay <span class="token operator">=</span> <span class="token number">5L</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>enabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>endTime<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">&quot;msg-&quot;</span> <span class="token operator">+</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">SendResult</span>```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>``````````` result <span class="token operator">=</span> kafkaTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>topicName<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以注意到，生产者将以每毫秒1条消息的速率生成消息。此外，它将在模拟开始后30秒的_endTime_停止生成消息。</p><h3 id="_4-3-实时监控" tabindex="-1"><a class="header-anchor" href="#_4-3-实时监控"><span>4.3. 实时监控</span></a></h3><p>现在，让我们运行我们的_LagAnalyzerApplication_的主方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">LagAnalyzerApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将在每30秒后看到每个主题分区的当前滞后：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Time=2021/06/06 11:07:24 | Lag for topic = baeldungTopic, partition = 0, groupId =baeldungGrp is 93\nTime=2021/06/06 11:07:29 | Lag for topic = baeldungTopic, partition = 0, groupId =baeldungGrp is 290\nTime=2021/06/06 11:07:34 | Lag for topic = baeldungTopic, partition = 0, groupId =baeldungGrp is 776\nTime=2021/06/06 11:07:39 | Lag for topic = baeldungTopic, partition = 0, groupId =baeldungGrp is 1159\nTime=2021/06/06 11:07:44 | Lag for topic = baeldungTopic, partition = 0, groupId =baeldungGrp is 1559\nTime=2021/06/06 11:07:49 | Lag for topic = baeldungTopic, partition = 0, groupId =baeldungGrp is 2015\nTime=2021/06/06 11:07:54 | Lag for topic = baeldungTopic, partition = 0, groupId =baeldungGrp is 1231\nTime=2021/06/06 11:07:59 | Lag for topic = baeldungTopic, partition = 0, groupId =baeldungGrp is 731\nTime=2021/06/06 11:08:04 | Lag for topic = baeldungTopic, partition = 0, groupId =baeldungGrp is 231\nTime=2021/06/06 11:08:09 | Lag for topic = baeldungTopic, partition = 0, groupId =baeldungGrp is 0\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上所述，生产者生成消息的速率为每毫秒1条消息，这高于消费者消费消息的速率。因此，<strong>在前30秒内，滞后将开始累积，之后生产者停止生产，因此滞后将逐渐减少到0</strong>。</p><h2 id="_5-通过actuator端点监控消费者滞后" tabindex="-1"><a class="header-anchor" href="#_5-通过actuator端点监控消费者滞后"><span>5. 通过Actuator端点监控消费者滞后</span></a></h2><p>对于具有Kafka消费者的Spring Boot应用程序，我们可以使用Micrometer获取消费者滞后指标，并通过actuator端点公开它们。让我们看看如何做到这一点。</p><h3 id="_5-1-启用actuator端点" tabindex="-1"><a class="header-anchor" href="#_5-1-启用actuator端点"><span>5.1. 启用Actuator端点</span></a></h3><p>首先，我们需要在项目的_pom.xml_文件中添加_spring-boot-starter-actuator_依赖项：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>``org.springframework.boot``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>``spring-boot-starter-actuator``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>``3.2.2.``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，让我们通过配置_application.properties_文件<strong>启用_/actuator_端点</strong>：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">management.endpoints.web.base-path</span><span class="token punctuation">=</span><span class="token value attr-value">/actuator</span>\n<span class="token key attr-name">management.endpoints.web.exposure.include</span><span class="token punctuation">=</span><span class="token value attr-value">*</span>\n<span class="token key attr-name">management.endpoint.health.show-details</span><span class="token punctuation">=</span><span class="token value attr-value">always</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，让我们还设置应用程序的端口为不同于_8080_：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">8081</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们必须注意，Zookeeper进程在端口_8080_上运行一个控制台。因此，如果我们在本地机器上运行Zookeeper，我们必须使用不同的端口为我们的Spring Boot应用程序。</p><h3 id="_5-2-使用micrometer配置指标" tabindex="-1"><a class="header-anchor" href="#_5-2-使用micrometer配置指标"><span>5.2. 使用Micrometer配置指标</span></a></h3><p>我们可以使用Micrometer库获取Kafka消费者指标。在本节中，<strong>我们将为Prometheus监控系统公开消费者指标</strong>。</p><p>首先，我们必须在项目的_pom.xml_文件中添加_micrometer-registry-prometheus_依赖项：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>``io.micrometer``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>``micrometer-registry-prometheus``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>``1.12.2``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，让我们为我们的应用程序启用JMX和_/actuator/prometheus_端点：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">management.endpoint.prometheus.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>\n<span class="token key attr-name">spring.jmx.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">false</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>继续，让我们将_MeterRegistry_类的实例作为成员添加到_KafkaConsumerConfig_类中：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>\n<span class="token keyword">private</span> <span class="token class-name">MeterRegistry</span> meterRegistry<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们准备<strong>将_MicrometerConsumerListener_添加到_consumerFactory_ bean中</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">ConsumerFactory</span>```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>``````````` <span class="token function">consumerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Map</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>``` props <span class="token operator">=</span> <span class="token function">getConsumerConfig</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>groupId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">DefaultKafkaConsumerFactory</span>```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>``````````` consumerFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultKafkaConsumerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    consumerFactory<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MicrometerConsumerListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>meterRegistry<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> consumerFactory<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>就是这样！我们准备好运行应用程序并监控Kafka消费者指标。</p><h3 id="_5-3-监控消费者滞后指标" tabindex="-1"><a class="header-anchor" href="#_5-3-监控消费者滞后指标"><span>5.3. 监控消费者滞后指标</span></a></h3><p>我们可以启动应用程序并访问_/actuator/prometheus_端点，以查看_kafka_consumer_*_指标。在其他指标中，<strong>_kafka_consumer_fetch_manager_records_lag_指标显示当前的滞后信息</strong>：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>kafka_consumer_fetch_manager_records_lag{client_id=&quot;consumer-baeldungGrp-2&quot;,kafka_version=&quot;3.3.1&quot;,partition=&quot;0&quot;,spring_id=&quot;consumerFactory.consumer-baeldungGrp-2&quot;,topic=&quot;baeldung&quot;,} 21447.0\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>进一步地，让我们编写一个脚本来定期获取滞后并以几乎实时的方式显示当前滞后：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token keyword">while</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token keyword">do</span>\n<span class="token function">curl</span> <span class="token parameter variable">--silent</span> <span class="token parameter variable">-XGET</span> http://localhost:8081/actuator/prometheus <span class="token operator">|</span> <span class="token punctuation">\\</span>\n<span class="token function">awk</span> <span class="token string">&#39;/kafka_consumer_fetch_manager_records_lag{/{print &quot;Current lag is:&quot;,$2}&#39;</span><span class="token punctuation">;</span>\n<span class="token function">sleep</span> <span class="token number">5</span><span class="token punctuation">;</span>\n<span class="token keyword">done</span>\nCurrent lag is: <span class="token number">11375.0</span>\nCurrent lag is: <span class="token number">10875.0</span>\nCurrent lag is: <span class="token number">10375.0</span>\nCurrent lag is: <span class="token number">9875.0</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>太好了！我们已成功集成了Kafka消费者指标，并通过actuator端点公开了它们。</p><h2 id="_6-结论" tabindex="-1"><a class="header-anchor" href="#_6-结论"><span>6. 结论</span></a></h2><p>在本教程中，我们开发了如何查找Kafka主题上消费者滞后的理解。此外，我们利用这些知识创建了一个**_LagAnalyzer_应用程序，几乎实时显示滞后**。</p><p>如常，教程的完整源代码可在GitHub上获取。 OK</p>',87),o=[e];function c(l,i){return a(),s("div",null,o)}const k=n(p,[["render",c],["__file","2024-07-28-Monitor the Consumer Lag in Apache Kafka.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-28/2024-07-28-Monitor%20the%20Consumer%20Lag%20in%20Apache%20Kafka.html","title":"监控Apache Kafka中的消费者滞后","lang":"zh-CN","frontmatter":{"date":"2024-07-28T00:00:00.000Z","category":["Java","Kafka"],"tag":["Consumer Lag","Monitoring"],"head":[["meta",{"name":"keywords","content":"Kafka, Consumer Lag, Monitoring, Java"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-28/2024-07-28-Monitor%20the%20Consumer%20Lag%20in%20Apache%20Kafka.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"监控Apache Kafka中的消费者滞后"}],["meta",{"property":"og:description","content":"监控Apache Kafka中的消费者滞后 Kafka消费者组滞后是任何基于Kafka的事件驱动系统的关键性能指标。 在本教程中，我们将构建一个分析应用程序来监控Kafka消费者滞后。 消费者滞后简单地说是消费者最后提交的偏移量与生产者在日志中的结束偏移量之间的差值。换句话说，消费者滞后度量了在任何生产者-消费者系统中生产和消费消息之间的延迟。 在本节..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-28T13:03:55.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Consumer Lag"}],["meta",{"property":"article:tag","content":"Monitoring"}],["meta",{"property":"article:published_time","content":"2024-07-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-28T13:03:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"监控Apache Kafka中的消费者滞后\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-28T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-28T13:03:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"监控Apache Kafka中的消费者滞后 Kafka消费者组滞后是任何基于Kafka的事件驱动系统的关键性能指标。 在本教程中，我们将构建一个分析应用程序来监控Kafka消费者滞后。 消费者滞后简单地说是消费者最后提交的偏移量与生产者在日志中的结束偏移量之间的差值。换句话说，消费者滞后度量了在任何生产者-消费者系统中生产和消费消息之间的延迟。 在本节..."},"headers":[{"level":3,"title":"2.1. Kafka AdminClient","slug":"_2-1-kafka-adminclient","link":"#_2-1-kafka-adminclient","children":[]},{"level":3,"title":"2.2. 消费者组偏移量","slug":"_2-2-消费者组偏移量","link":"#_2-2-消费者组偏移量","children":[]},{"level":3,"title":"2.3. 生产者偏移量","slug":"_2-3-生产者偏移量","link":"#_2-3-生产者偏移量","children":[]},{"level":2,"title":"3. 滞后分析器","slug":"_3-滞后分析器","link":"#_3-滞后分析器","children":[]},{"level":2,"title":"4. 模拟","slug":"_4-模拟","link":"#_4-模拟","children":[{"level":3,"title":"4.1. 模拟模式","slug":"_4-1-模拟模式","link":"#_4-1-模拟模式","children":[]},{"level":3,"title":"4.2. 生产者-消费者配置","slug":"_4-2-生产者-消费者配置","link":"#_4-2-生产者-消费者配置","children":[]},{"level":3,"title":"4.3. 实时监控","slug":"_4-3-实时监控","link":"#_4-3-实时监控","children":[]}]},{"level":2,"title":"5. 通过Actuator端点监控消费者滞后","slug":"_5-通过actuator端点监控消费者滞后","link":"#_5-通过actuator端点监控消费者滞后","children":[{"level":3,"title":"5.1. 启用Actuator端点","slug":"_5-1-启用actuator端点","link":"#_5-1-启用actuator端点","children":[]},{"level":3,"title":"5.2. 使用Micrometer配置指标","slug":"_5-2-使用micrometer配置指标","link":"#_5-2-使用micrometer配置指标","children":[]},{"level":3,"title":"5.3. 监控消费者滞后指标","slug":"_5-3-监控消费者滞后指标","link":"#_5-3-监控消费者滞后指标","children":[]}]},{"level":2,"title":"6. 结论","slug":"_6-结论","link":"#_6-结论","children":[]}],"git":{"createdTime":1722171835000,"updatedTime":1722171835000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":8.14,"words":2441},"filePathRelative":"posts/baeldung/2024-07-28/2024-07-28-Monitor the Consumer Lag in Apache Kafka.md","localizedDate":"2024年7月28日","excerpt":"<hr>\\n<h1>监控Apache Kafka中的消费者滞后</h1>\\n<p>Kafka消费者组滞后是任何基于Kafka的事件驱动系统的关键性能指标。</p>\\n<p>在本教程中，我们将构建一个分析应用程序来监控Kafka消费者滞后。</p>\\n<p>消费者滞后简单地说是消费者最后提交的偏移量与生产者在日志中的结束偏移量之间的差值。换句话说，消费者滞后度量了在任何生产者-消费者系统中生产和消费消息之间的延迟。</p>\\n<p>在本节中，让我们了解如何确定偏移量值。</p>\\n<h3>2.1. Kafka AdminClient</h3>\\n<p><strong>为了检查消费者组的偏移量值</strong>，<strong>我们需要管理Kafka客户端</strong>。因此，让我们在_LagAnalyzerService_类中编写一个方法来创建_AdminClient_类的实例：</p>","autoDesc":true}');export{k as comp,d as data};
