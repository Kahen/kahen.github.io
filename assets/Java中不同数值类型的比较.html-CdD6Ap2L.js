import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-WNF7848i.js";const p={},e=t(`<h1 id="java中不同数值类型的比较" tabindex="-1"><a class="header-anchor" href="#java中不同数值类型的比较"><span>Java中不同数值类型的比较</span></a></h1><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p>有时，我们需要比较数字，忽略它们的类或类型。<strong>这在格式不统一，数字可能在不同上下文中使用时特别有用。</strong></p><p>在本教程中，我们将学习如何比较原始类型和不同类别的数字，例如_Integers_、<em>Longs_和_Floats</em>。我们还将检查如何将浮点数与整数进行比较。</p><h2 id="_2-比较不同类别" tabindex="-1"><a class="header-anchor" href="#_2-比较不同类别"><span>2. 比较不同类别</span></a></h2><p>让我们检查Java如何比较不同的原始类型、包装类和数字类型。<strong>为了澄清，在本文的上下文中，我们将把“类型”称为浮点数和整数，而不是类或原始类型。</strong></p><h3 id="_2-1-比较整数原始类型" tabindex="-1"><a class="header-anchor" href="#_2-1-比较整数原始类型"><span>2.1. 比较整数原始类型</span></a></h3><p>在Java中，我们有几种原始类型来表示整数。<strong>为了简单起见，我们将只讨论_int_、<em>long_和_double</em>。</strong> 如果我们要检查一个数字是否等于另一个数字，使用原始类型时我们可以没有问题地这样做：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ValueSource</span><span class="token punctuation">(</span>strings <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;5&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ParameterizedTest</span>
<span class="token keyword">void</span> <span class="token function">givenSameNumbersButDifferentPrimitives_WhenCheckEquality_ThenTheyEqual</span><span class="token punctuation">(</span><span class="token class-name">String</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> integerNumber <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> longNumber <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span>longNumber<span class="token punctuation">,</span> integerNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时，这种方法在处理溢出时表现不佳。<strong>技术上，在本例中，它将清楚地识别出这些数字不相等：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ValueSource</span><span class="token punctuation">(</span>strings <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;5&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ParameterizedTest</span>
<span class="token keyword">void</span> <span class="token function">givenSameNumbersButDifferentPrimitivesWithIntegerOverflow_WhenCheckEquality_ThenTheyNotEqual</span><span class="token punctuation">(</span><span class="token class-name">String</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> integerNumber <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> longNumber <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">+</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertNotEquals</span><span class="token punctuation">(</span>longNumber<span class="token punctuation">,</span> integerNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>然而，如果两个值都发生溢出，可能会导致不正确的结果。</strong> 尽管我们很难自食其果，但通过某些操作仍然可能发生：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenSameNumbersButDifferentPrimitivesWithLongOverflow_WhenCheckEquality_ThenTheyEqual</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> longValue <span class="token operator">=</span> <span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token constant">ONE</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token constant">TWO</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> integerValue <span class="token operator">=</span> <span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token constant">ONE</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertThat</span><span class="token punctuation">(</span>longValue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span>integerValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>这个测试会认为数字相等，尽管一个数字是另一个的两倍。</strong> 如果我们不希望数字溢出，这种方法可能对小数字有用。</p><h3 id="_2-2-比较整数和浮点原始类型" tabindex="-1"><a class="header-anchor" href="#_2-2-比较整数和浮点原始类型"><span>2.2. 比较整数和浮点原始类型</span></a></h3><p>在使用原始类型比较整数和浮点数时，我们有类似的情况：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ValueSource</span><span class="token punctuation">(</span>strings <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;5&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ParameterizedTest</span>
<span class="token keyword">void</span> <span class="token function">givenSameNumbersButDifferentPrimitivesTypes_WhenCheckEquality_ThenTheyEqual</span><span class="token punctuation">(</span><span class="token class-name">String</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> integerNumber <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> doubleNumber <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span>doubleNumber<span class="token punctuation">,</span> integerNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>这是因为整数将被提升为双精度或单精度浮点数。</strong> 这就是为什么即使数字之间有很小的差异，等式操作也会按预期行为：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ValueSource</span><span class="token punctuation">(</span>strings <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;5&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ParameterizedTest</span>
<span class="token keyword">void</span> <span class="token function">givenDifferentNumbersButDifferentPrimitivesTypes_WhenCheckEquality_ThenTheyNotEqual</span><span class="token punctuation">(</span><span class="token class-name">String</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> integerNumber <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> doubleNumber <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.0000000000001</span><span class="token punctuation">;</span>
    <span class="token function">assertNotEquals</span><span class="token punctuation">(</span>doubleNumber<span class="token punctuation">,</span> integerNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>然而，我们仍然存在精度和溢出的问题。</strong> 因此，即使在比较相同类型的数字时，我们也不能完全确定结果的正确性：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenSameNumbersButDifferentPrimitivesWithDoubleOverflow_WhenCheckEquality_ThenTheyEqual</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">double</span> firstDoubleValue <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> secondDoubleValue <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span>firstDoubleValue<span class="token punctuation">,</span> secondDoubleValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>想象一下，如果我们需要使用两种不同的百分比表示法比较分数。在第一种情况下，我们使用浮点数，其中1代表100%。在第二种情况下，我们使用整数来识别百分比：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenSameNumbersWithDoubleRoundingErrors_WhenCheckEquality_ThenTheyNotEqual</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">double</span> doubleValue <span class="token operator">=</span> <span class="token number">0.3</span> <span class="token operator">/</span> <span class="token number">0.1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> integerValue <span class="token operator">=</span> <span class="token number">30</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token function">assertNotEquals</span><span class="token punctuation">(</span>doubleValue<span class="token punctuation">,</span> integerValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>因此，我们不能依赖原始类型的比较，特别是如果我们使用涉及浮点数计算。</strong></p><h2 id="_3-比较包装类" tabindex="-1"><a class="header-anchor" href="#_3-比较包装类"><span>3. 比较包装类</span></a></h2><p>在使用包装类时，我们会得到与比较原始类型不同的结果：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ValueSource</span><span class="token punctuation">(</span>strings <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;5&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ParameterizedTest</span>
<span class="token keyword">void</span> <span class="token function">givenSameNumbersButWrapperTypes_WhenCheckEquality_ThenTheyNotEqual</span><span class="token punctuation">(</span><span class="token class-name">String</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Float</span> floatNumber <span class="token operator">=</span> <span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Integer</span> integerNumber <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertNotEquals</span><span class="token punctuation">(</span>floatNumber<span class="token punctuation">,</span> integerNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>尽管Float和Integer数字是从相同的数值表示创建的，但它们不相等。</strong> 然而，问题可能是我们比较的是不同类型的数字：浮点数和整数。让我们检查Integer和Long的行为：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ValueSource</span><span class="token punctuation">(</span>strings <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;5&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ParameterizedTest</span>
<span class="token keyword">void</span> <span class="token function">givenSameNumbersButDifferentWrappers_WhenCheckEquality_ThenTheyNotEqual</span><span class="token punctuation">(</span><span class="token class-name">String</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Integer</span> integerNumber <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Long</span> longNumber <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertNotEquals</span><span class="token punctuation">(</span>longNumber<span class="token punctuation">,</span> integerNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>奇怪的是，我们得到了相同的结果。<strong>这里的主要问题是我们试图在Number层次结构中比较不同类型的类。</strong> 在大多数情况下，《equals()_方法的第一步是检查类型是否相同。例如，Long_具有以下实现：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Long</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> value <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">)</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>这是为了避免任何传递性问题，通常是一个很好的规则要遵循。</strong> 然而，它并没有解决比较具有不同表示的两个数字的问题。</p><h2 id="_4-bigdecimal" tabindex="-1"><a class="header-anchor" href="#_4-bigdecimal"><span>4. BigDecimal</span></a></h2><p>在比较整数与浮点数时，我们可以采取与前面案例相同的方法：将数字转换为最精确的表示形式并进行比较。_BigDecimal_类非常适合这个用途。</p><p>我们将考虑两种情况，具有相同小数位数的数字和具有不同小数位数的数字：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token class-name">Stream</span>\\<span class="token operator">&lt;</span><span class="token class-name">Arguments</span>\\<span class="token operator">&gt;</span> <span class="token function">numbersWithDifferentScaleProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>
      <span class="token class-name">Arguments</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;0.0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Arguments</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1.0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token class-name">Arguments</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2.0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Arguments</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3.0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token class-name">Arguments</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;4.0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Arguments</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;5&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;5.0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token class-name">Arguments</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;6&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;6.0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Arguments</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;7&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;7.0&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">static</span> <span class="token class-name">Stream</span>\\<span class="token operator">&lt;</span><span class="token class-name">Arguments</span>\\<span class="token operator">&gt;</span> <span class="token function">numbersWithSameScaleProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>
      <span class="token class-name">Arguments</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Arguments</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token class-name">Arguments</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Arguments</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token class-name">Arguments</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Arguments</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;5&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token class-name">Arguments</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;6&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;6&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Arguments</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;7&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;7&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们不会检查不同的数字，因为这是一个微不足道的案例。同样，我们也不会看到比较规则严重依赖于领域逻辑的案例。</p><p>让我们首先检查具有相同小数位数的数字：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@MethodSource</span><span class="token punctuation">(</span><span class="token string">&quot;numbersWithSameScaleProvider&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ParameterizedTest</span>
<span class="token keyword">void</span> <span class="token function">givenBigDecimalsWithSameScale_WhenCheckEquality_ThenTheyEqual</span><span class="token punctuation">(</span><span class="token class-name">String</span> firstNumber<span class="token punctuation">,</span> <span class="token class-name">String</span> secondNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">BigDecimal</span> firstBigDecimal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>firstNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BigDecimal</span> secondBigDecimal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>secondNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">assertEquals</span><span class="token punctuation">(</span>firstBigDecimal<span class="token punctuation">,</span> secondBigDecimal<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>BigDecimal的行为符合预期。</strong> 现在让我们检查具有不同小数位数的数字：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@MethodSource</span><span class="token punctuation">(</span><span class="token string">&quot;numbersWithDifferentScaleProvider&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ParameterizedTest</span>
<span class="token keyword">void</span> <span class="token function">givenBigDecimalsWithDifferentScale_WhenCheckEquality_ThenTheyNotEqual</span><span class="token punctuation">(</span><span class="token class-name">String</span> firstNumber<span class="token punctuation">,</span> <span class="token class-name">String</span> secondNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">BigDecimal</span> firstBigDecimal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>firstNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BigDecimal</span> secondBigDecimal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>secondNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">assertNotEquals</span><span class="token punctuation">(</span>firstBigDecimal<span class="token punctuation">,</span> secondBigDecimal<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>BigDecimal将数字1和1.0视为不同。</strong> 原因是BigDecimal中的_equals()_方法在比较时使用小数位数。即使数字仅在末尾的零上有所不同，它们也会被认为是不相等的。</p><p><strong>然而，BigDecimal API中的另一个方法为我们的情况提供了所需的逻辑：_compareTo()_方法。</strong> 它不考虑尾随零，并且非常适合比较数字：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@MethodSource</span><span class="token punctuation">(</span><span class="token string">&quot;numbersWithDifferentScaleProvider&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ParameterizedTest</span>
<span class="token keyword">void</span> <span class="token function">givenBigDecimalsWithDifferentScale_WhenCompare_ThenTheyEqual</span><span class="token punctuation">(</span><span class="token class-name">String</span> firstNumber<span class="token punctuation">,</span> <span class="token class-name">String</span> secondNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">BigDecimal</span> firstBigDecimal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>firstNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BigDecimal</span> secondBigDecimal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>secondNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> firstBigDecimal<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>secondBigDecimal<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>因此，虽然BigDecimal是一个好的，也是最合理的选择来解决这个问题，但在比较数字和使用BigDecimal时，我们应该考虑_equals()_和_compareTo()_方法的怪癖。</strong></p><h2 id="_5-assertj" tabindex="-1"><a class="header-anchor" href="#_5-assertj"><span>5. AssertJ</span></a></h2><p>如果我们使用AssertJ库，我们可以简化断言代码并使其更易于阅读：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@MethodSource</span><span class="token punctuation">(</span><span class="token string">&quot;numbersWithDifferentScaleProvider&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ParameterizedTest</span>
<span class="token keyword">void</span> <span class="token function">givenBigDecimalsWithDifferentScale_WhenCompareWithAssertJ_ThenTheyEqual</span><span class="token punctuation">(</span><span class="token class-name">String</span> firstNumber<span class="token punctuation">,</span> <span class="token class-name">String</span> secondNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">BigDecimal</span> firstBigDecimal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>firstNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BigDecimal</span> secondBigDecimal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>secondNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">assertThat</span><span class="token punctuation">(</span>firstBigDecimal<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualByComparingTo</span><span class="token punctuation">(</span>secondBigDecimal<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，如果需要，我们可以提供一个比较器来进行更复杂的逻辑。</p><h2 id="_6-结论" tabindex="-1"><a class="header-anchor" href="#_6-结论"><span>6. 结论</span></a></h2><p>通常，我们需要按照数字的原样进行比较，忽略类型和类。默认情况下，Java可以处理一些值，但总的来说，直接比较原始类型是容易出错的，比较包装器也不会按预期工作。</p><p>_BigDecimal_是解决这个问题的一个很好的解决方案。然而，它在_equals()_和_hashCode()_方法上有一个非直观的行为。因此，在比较数字和使用BigDecimal时，我们应该考虑这一点。</p><p>如往常一样，本文的所有代码都可以在GitHub上找到。</p>`,53),o=[e];function c(u,l){return a(),s("div",null,o)}const k=n(p,[["render",c],["__file","Java中不同数值类型的比较.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/Archive/Java%E4%B8%AD%E4%B8%8D%E5%90%8C%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%AF%94%E8%BE%83.html","title":"Java中不同数值类型的比较","lang":"zh-CN","frontmatter":{"date":"2024-05-15T00:00:00.000Z","category":["Java编程","数据类型比较"],"tag":["Java","BigDecimal","数据比较"],"description":"Java中不同数值类型的比较 1. 概述 有时，我们需要比较数字，忽略它们的类或类型。这在格式不统一，数字可能在不同上下文中使用时特别有用。 在本教程中，我们将学习如何比较原始类型和不同类别的数字，例如_Integers_、Longs_和_Floats。我们还将检查如何将浮点数与整数进行比较。 2. 比较不同类别 让我们检查Java如何比较不同的原始类...","head":[["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/Archive/Java%E4%B8%AD%E4%B8%8D%E5%90%8C%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%AF%94%E8%BE%83.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Java中不同数值类型的比较"}],["meta",{"property":"og:description","content":"Java中不同数值类型的比较 1. 概述 有时，我们需要比较数字，忽略它们的类或类型。这在格式不统一，数字可能在不同上下文中使用时特别有用。 在本教程中，我们将学习如何比较原始类型和不同类别的数字，例如_Integers_、Longs_和_Floats。我们还将检查如何将浮点数与整数进行比较。 2. 比较不同类别 让我们检查Java如何比较不同的原始类..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-21T09:54:56.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"BigDecimal"}],["meta",{"property":"article:tag","content":"数据比较"}],["meta",{"property":"article:published_time","content":"2024-05-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-21T09:54:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java中不同数值类型的比较\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-15T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-21T09:54:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]]},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. 比较不同类别","slug":"_2-比较不同类别","link":"#_2-比较不同类别","children":[{"level":3,"title":"2.1. 比较整数原始类型","slug":"_2-1-比较整数原始类型","link":"#_2-1-比较整数原始类型","children":[]},{"level":3,"title":"2.2. 比较整数和浮点原始类型","slug":"_2-2-比较整数和浮点原始类型","link":"#_2-2-比较整数和浮点原始类型","children":[]}]},{"level":2,"title":"3. 比较包装类","slug":"_3-比较包装类","link":"#_3-比较包装类","children":[]},{"level":2,"title":"4. BigDecimal","slug":"_4-bigdecimal","link":"#_4-bigdecimal","children":[]},{"level":2,"title":"5. AssertJ","slug":"_5-assertj","link":"#_5-assertj","children":[]},{"level":2,"title":"6. 结论","slug":"_6-结论","link":"#_6-结论","children":[]}],"git":{"createdTime":1718963696000,"updatedTime":1718963696000,"contributors":[{"name":"Lance Li","email":"lance.jx.li@gtomato.com","commits":1}]},"readingTime":{"minutes":5.92,"words":1777},"filePathRelative":"posts/baeldung/Archive/Java中不同数值类型的比较.md","localizedDate":"2024年5月15日","excerpt":"\\n<h2>1. 概述</h2>\\n<p>有时，我们需要比较数字，忽略它们的类或类型。<strong>这在格式不统一，数字可能在不同上下文中使用时特别有用。</strong></p>\\n<p>在本教程中，我们将学习如何比较原始类型和不同类别的数字，例如_Integers_、<em>Longs_和_Floats</em>。我们还将检查如何将浮点数与整数进行比较。</p>\\n<h2>2. 比较不同类别</h2>\\n<p>让我们检查Java如何比较不同的原始类型、包装类和数字类型。<strong>为了澄清，在本文的上下文中，我们将把“类型”称为浮点数和整数，而不是类或原始类型。</strong></p>\\n<h3>2.1. 比较整数原始类型</h3>","autoDesc":true}');export{k as comp,d as data};
