import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-BaCIpe-N.js";const e={},p=t('<hr><h1 id="ratpack-与反应式流-api" tabindex="-1"><a class="header-anchor" href="#ratpack-与反应式流-api"><span>Ratpack 与反应式流 API</span></a></h1><h2 id="_1-引言" tabindex="-1"><a class="header-anchor" href="#_1-引言"><span>1. 引言</span></a></h2><p>Ratpack 是一个基于 Netty 引擎构建的框架，它允许我们快速构建 HTTP 应用程序。我们之前的文章已经介绍了它的基本用法。<strong>这次，我们将展示如何使用其流 API 实现反应式应用程序</strong>。</p><h2 id="_2-反应式流的快速回顾" tabindex="-1"><a class="header-anchor" href="#_2-反应式流的快速回顾"><span>2. 反应式流的快速回顾</span></a></h2><p>在深入实际实现之前，让我们首先回顾一下构成反应式应用程序的基本属性。根据原始作者的说法，这类应用程序必须具备以下属性：</p><ul><li>响应式</li><li>弹性</li><li>消息驱动</li></ul><p>那么，反应式流是如何帮助我们实现这些属性的呢？在这种情况下，<strong>消息驱动</strong>并不一定意味着使用消息中间件。实际上，真正需要解决这一点的是<strong>异步请求处理和支持非阻塞背压</strong>。</p><p>Ratpack 的反应式支持使用 JVM 的反应式流 API 标准作为其实现的基础。<strong>因此，它允许与其他兼容的框架如 Project Reactor 和 RxJava 进行互操作</strong>。</p><h2 id="_3-使用-ratpack-的-streams-类" tabindex="-1"><a class="header-anchor" href="#_3-使用-ratpack-的-streams-类"><span>3. 使用 Ratpack 的 <em>Streams</em> 类</span></a></h2><p><strong>Ratpack 的 <em>Streams</em> 类提供了几个实用方法来创建 <em>Publisher</em> 实例，然后我们可以使用它们来创建数据处理管道。</strong></p><p>一个很好的起点是 <em>publish()</em> 方法，我们可以使用它从任何 <em>Iterable</em> 创建一个 <em>Publisher</em>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Publisher</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>````` pub <span class="token operator">=</span> <span class="token class-name">Streams</span><span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello again&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">LoggingSubscriber</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>````` sub <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoggingSubscriber</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\npub<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span>\nsub<span class="token punctuation">.</span><span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，<em>LoggingSubscriber</em> 是 <em>Subscriber</em> 接口的一个测试实现，它只是记录 Publisher 发出的每一对象。它还包括一个辅助方法 <em>block()</em>，正如其名称所示，它会阻塞调用者，直到发布者发出其所有对象或产生错误。</p><p>运行测试用例，我们将看到预期的事件序列：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>onSubscribe<span class="token operator">:</span> sub<span class="token operator">=</span><span class="token number">7311908</span>\nonNext<span class="token operator">:</span> sub<span class="token operator">=</span><span class="token number">7311908</span><span class="token punctuation">,</span> value<span class="token operator">=</span>hello\nonNext<span class="token operator">:</span> sub<span class="token operator">=</span><span class="token number">7311908</span><span class="token punctuation">,</span> value<span class="token operator">=</span>hello again\nonComplete<span class="token operator">:</span> sub<span class="token operator">=</span><span class="token number">7311908</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另一个有用的方法是 <em>yield()</em>。它有一个单一的 <em>Function</em> 参数，该参数接收一个 <em>YieldRequest</em> 对象，并返回要发出的下一个对象：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenYield_thenSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n    <span class="token class-name">Publisher</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>````` pub <span class="token operator">=</span> <span class="token class-name">Streams</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> t<span class="token punctuation">.</span><span class="token function">getRequestNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">5</span> <span class="token operator">?</span> <span class="token string">&quot;hello&quot;</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">LoggingSubscriber</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>````` sub <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoggingSubscriber</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    pub<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    sub<span class="token punctuation">.</span><span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> sub<span class="token punctuation">.</span><span class="token function">getReceived</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>YieldRequest</em> 参数允许我们使用其 <em>getRequestNum()</em> 方法，基于迄今为止发出的对象数量来实现逻辑。在我们的示例中，我们使用这些信息来定义结束条件，通过返回一个 <em>null</em> 值来发出信号。</p><p>现在，让我们看看如何为周期性事件创建一个 <em>Publisher</em>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenPeriodic_thenSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">ScheduledExecutorService</span> executor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Publisher</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>````` pub <span class="token operator">=</span> <span class="token class-name">Streams</span><span class="token punctuation">.</span><span class="token function">periodically</span><span class="token punctuation">(</span>executor<span class="token punctuation">,</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> t <span class="token operator">&lt;</span> <span class="token number">5</span> <span class="token operator">?</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;hello %d&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">LoggingSubscriber</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>````` sub <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoggingSubscriber</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    pub<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    sub<span class="token punctuation">.</span><span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> sub<span class="token punctuation">.</span><span class="token function">getReceived</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回的发布者使用 <em>ScheduledExecutorService</em> 定期调用生产者函数，直到它返回一个 <em>null</em> 值。生产者函数接收一个整数值，该值对应于已经发出的对象数量，我们使用它来终止流。</p><h2 id="_4-使用-transformablepublisher" tabindex="-1"><a class="header-anchor" href="#_4-使用-transformablepublisher"><span>4. 使用 <em>TransformablePublisher</em></span></a></h2><p>仔细看看 <em>Streams’</em> 方法，我们可以看到它们通常返回一个 <em>TransformablePublisher</em>。这个接口扩展了 <em>Publisher</em>，并提供了几个实用方法，就像我们在 Project Reactor 的 <em>Flux</em> 和 <em>Mono</em> 中找到的那样，<strong>使它更容易从单独的步骤创建复杂的处理管道</strong>。</p><p>例如，让我们使用 <em>map</em> 方法将整数序列转换为字符串：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenMap_thenSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token class-name">TransformablePublisher</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>````` pub <span class="token operator">=</span> <span class="token class-name">Streams</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span> t <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> t<span class="token punctuation">.</span><span class="token function">getRequestNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> `<span class="token operator">&lt;</span> <span class="token number">5</span> <span class="token operator">?</span> t<span class="token punctuation">.</span><span class="token function">getRequestNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>v <span class="token operator">-&gt;</span>` <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;item %d&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">ExecResult</span><span class="token operator">&lt;</span><span class="token class-name">List</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````<span class="token operator">&gt;</span> result <span class="token operator">=</span> <span class="token class-name">ExecHarness</span><span class="token punctuation">.</span><span class="token function">yieldSingle</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> pub<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token string">&quot;should succeed&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;should have 5 items&quot;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，实际执行发生在由测试工具类 <em>ExecHarness</em> 管理的线程池中。由于 <em>yieldSingle()</em> 期望一个 <em>Promise</em>，我们使用 <em>toList()</em> 来适配我们的发布者。这个方法收集订阅者产生的所有结果并将它们存储在一个 <em>List</em> 中。</p><p>正如文档中所述，我们在使用这种方法时必须小心。将其应用于无界发布者可以迅速使 JVM 内存不足！<strong>为了避免这种情况，我们应该主要将其限制在单元测试中使用</strong>。</p><p>除了 <em>map()</em>，《TransformablePublisher》还有几个有用的操作符：</p><ul><li><em>filter()</em>：根据 <em>Predicate</em> 过滤上游对象</li><li><em>take()</em>：从上游 <em>Publisher</em> 发出仅前 <em>n</em> 个对象</li><li><em>wiretap()</em>：添加一个观察点，我们可以在数据和事件流经管道时进行检查</li><li><em>reduce()</em>：将上游对象减少为一个单一值</li><li><em>transform()</em>：在流中注入一个常规 <em>Publisher</em></li></ul><h2 id="_5-使用-buffer-处理不合规的-publisher" tabindex="-1"><a class="header-anchor" href="#_5-使用-buffer-处理不合规的-publisher"><span>5. 使用 <em>buffer()</em> 处理不合规的 <em>Publisher</em></span></a></h2><p><strong>在某些情况下，我们必须处理一个向其订阅者发送比请求更多项目的 <em>Publisher</em>。</strong> Ratpack 的 Streams 提供了一个 <em>buffer()</em> 方法，它将这些额外的项目保存在内存中，直到订阅者消费它们。</p><p>为了说明这是如何工作的，让我们创建一个简单的不合规 <em>Publisher</em>，它忽略了请求的项目数量。相反，它将始终至少产生比请求多 5 个项目：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">NonCompliantPublisher</span> <span class="token keyword">implements</span> <span class="token class-name">Publisher</span>````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>```````` <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token class-name">Subscriber</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>``` subscriber<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;subscribe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        subscriber<span class="token punctuation">.</span><span class="token function">onSubscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NonCompliantSubscription</span><span class="token punctuation">(</span>subscriber<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">NonCompliantSubscription</span> <span class="token keyword">implements</span> <span class="token class-name">Subscription</span> <span class="token punctuation">{</span>\n        <span class="token keyword">private</span> <span class="token class-name">Subscriber</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>``` subscriber<span class="token punctuation">;</span>\n        <span class="token keyword">private</span> <span class="token keyword">int</span> recurseLevel <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">public</span> <span class="token class-name">NonCompliantSubscription</span><span class="token punctuation">(</span><span class="token class-name">Subscriber</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>``` subscriber<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>subscriber <span class="token operator">=</span> subscriber<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token annotation punctuation">@Override</span>\n        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token keyword">long</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;request: n={}&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>recurseLevel <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n               <span class="token keyword">return</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            recurseLevel<span class="token operator">++</span><span class="token punctuation">;</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                subscriber<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            subscriber<span class="token punctuation">.</span><span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token annotation punctuation">@Override</span>\n        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，让我们使用我们的 <em>LoggingSubscriber</em> 测试这个发布者。我们将使用 <em>take()</em> 操作符，这样它只会接收第一个项目：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenNonCompliantPublisherWithoutBuffer_thenSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token class-name">TransformablePublisher</span>````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>```````` pub <span class="token operator">=</span> <span class="token class-name">Streams</span><span class="token punctuation">.</span><span class="token function">transformable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NonCompliantPublisher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">wiretap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoggingAction</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">LoggingSubscriber</span>````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>```````` sub <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoggingSubscriber</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    pub<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    sub<span class="token punctuation">.</span><span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>运行这个测试，我们可以看到尽管收到了 <em>cancel()</em> 请求，我们的不合规发布者仍然继续产生新项目：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">RatpackStreamsUnitTest</span> <span class="token operator">-</span> <span class="token operator">:</span> event<span class="token operator">=</span><span class="token class-name">StreamEvent</span><span class="token punctuation">[</span><span class="token class-name">DataEvent</span><span class="token punctuation">{</span>subscriptionId<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">]</span>\n<span class="token class-name">LoggingSubscriber</span> <span class="token operator">-</span> onNext<span class="token operator">:</span> sub<span class="token operator">=</span><span class="token number">583189145</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token number">0</span>\n<span class="token class-name">RatpackStreamsUnitTest</span> <span class="token operator">-</span> <span class="token operator">:</span> event<span class="token operator">=</span><span class="token class-name">StreamEvent</span><span class="token punctuation">[</span><span class="token class-name">RequestEvent</span><span class="token punctuation">{</span>requestAmount<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> subscriptionId<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">]</span>\n<span class="token class-name">NonCompliantPublisher</span> <span class="token operator">-</span> request<span class="token operator">:</span> n<span class="token operator">=</span><span class="token number">1</span>\n<span class="token class-name">RatpackStreamsUnitTest</span> <span class="token operator">-</span> <span class="token operator">:</span> event<span class="token operator">=</span><span class="token class-name">StreamEvent</span><span class="token punctuation">[</span><span class="token class-name">CancelEvent</span><span class="token punctuation">{</span>subscriptionId<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">]</span>\n<span class="token class-name">LoggingSubscriber</span> <span class="token operator">-</span> onComplete<span class="token operator">:</span> sub<span class="token operator">=</span><span class="token number">583189145</span>\n<span class="token class-name">RatpackStreamsUnitTest</span> <span class="token operator">-</span> <span class="token operator">:</span> event<span class="token operator">=</span><span class="token class-name">StreamEvent</span><span class="token punctuation">[</span><span class="token class-name">DataEvent</span><span class="token punctuation">{</span>subscriptionId<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">]</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> more expurious data event\n<span class="token class-name">RatpackStreamsUnitTest</span> <span class="token operator">-</span> <span class="token operator">:</span> event<span class="token operator">=</span><span class="token class-name">StreamEvent</span><span class="token punctuation">[</span><span class="token class-name">CompletionEvent</span><span class="token punctuation">{</span>subscriptionId<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">]</span>\n<span class="token class-name">LoggingSubscriber</span> <span class="token operator">-</span> onComplete<span class="token operator">:</span> sub<span class="token operator">=</span><span class="token number">583189145</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，让我们在这个流中添加一个 <em>buffer()</em> 步骤。我们将添加两个 <em>wiretap</em> 步骤来记录事件，这样它的效果就更加明显：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenNonCompliantPublisherWithBuffer_thenSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token class-name">TransformablePublisher</span>````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>```````` pub <span class="token operator">=</span> <span class="token class-name">Streams</span><span class="token punctuation">.</span><span class="token function">transformable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NonCompliantPublisher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">wiretap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoggingAction</span><span class="token punctuation">(</span><span class="token string">&quot;before buffer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">wiretap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoggingAction</span><span class="token punctuation">(</span><span class="token string">&quot;after buffer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">LoggingSubscriber</span>````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>```````` sub <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoggingSubscriber</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    pub<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    sub<span class="token punctuation">.</span><span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这次，运行这段代码会产生不同的日志序列：</p><p>LoggingSubscriber - onSubscribe: sub=675852144 RatpackStreamsUnitTest - after buffer: event=StreamEvent[RequestEvent{requestAmount=1, subscriptionId=0}] NonCompliantPublisher - subscribe RatpackStreamsUnitTest - before buffer: event=StreamEvent[RequestEvent{requestAmount=1, subscriptionId=0}] NonCompliantPublisher - request: n=1 RatpackStreamsUnitTest - before buffer: event=StreamEvent[DataEvent{subscriptionId=0, data=0}] ... 更多数据事件 RatpackStreamsUnitTest - before buffer: event=StreamEvent[CompletionEvent{subscriptionId=0}] RatpackStreamsUnitTest - after buffer: event=StreamEvent[DataEvent{subscriptionId=0, data=0}] LoggingSubscriber - onNext: sub=675852144, value=0 RatpackStreamsUnitTest - after buffer: event=StreamEvent[RequestEvent{requestAmount=1, subscriptionId=0}] RatpackStreamsUnitTest - after buffer: event=StreamEvent[CancelEvent{subscriptionId=0}] RatpackStreamsUnitTest - before buffer: event=StreamEvent[CancelEvent{subscriptionId=0}] LoggingSubscriber - onComplete: sub=67585214</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>\n&quot;before buffer&quot; 消息显示，我们的不合规发布者在第一次调用 _request_ 之后能够发送所有值。**然而，下游值仍然一个接一个地发送，尊重 _LoggingSubscriber_ 请求的数量。\n\n## 6. 使用 _batch()_ 处理慢速订阅者\n\n另一个可能降低应用程序吞吐量的场景是，下游订阅者请求数据的量很小。我们的 _LoggingSubscriber_ 是一个很好的例子：它一次只请求一个项目。\n\n**在现实世界的应用中，这可能会导致大量的上下文切换，这将损害整体性能。** 一个更好的方法是一次请求更多的项目。_batch()_ 方法允许上游发布者使用更有效的请求大小，同时允许下游订阅者使用较小的请求大小。\n\n让我们看看这在实践中是如何工作的。像以前一样，我们将从一个没有 _batch_ 的流开始：\n\n```java\n@Test\npublic void whenCompliantPublisherWithoutBatch_thenSuccess() throws Exception {\n    TransformablePublisher````````&lt;Integer&gt;```````` pub = Streams.transformable(new CompliantPublisher(10))\n      .wiretap(new LoggingAction(&quot;&quot;));\n\n    LoggingSubscriber````````&lt;Integer&gt;```````` sub = new LoggingSubscriber&lt;&gt;();\n    pub.subscribe(sub);\n    sub.block();\n}\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，<em>CompliantPublisher</em> 只是一个测试 <em>Publisher</em>，它产生整数直到但不包括传递给构造函数的值。让我们运行它来看看非批量行为：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">CompliantPublisher</span> <span class="token operator">-</span> subscribe\n<span class="token class-name">LoggingSubscriber</span> <span class="token operator">-</span> onSubscribe<span class="token operator">:</span> sub<span class="token operator">=</span><span class="token operator">-</span><span class="token number">779393331</span>\n<span class="token class-name">RatpackStreamsUnitTest</span> <span class="token operator">-</span> <span class="token operator">:</span> event<span class="token operator">=</span><span class="token class-name">StreamEvent</span><span class="token punctuation">[</span><span class="token class-name">RequestEvent</span><span class="token punctuation">{</span>requestAmount<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> subscriptionId<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">]</span>\n<span class="token class-name">CompliantPublisher</span> <span class="token operator">-</span> request<span class="token operator">:</span> requested<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> available<span class="token operator">=</span><span class="token number">10</span>\n<span class="token class-name">RatpackStreamsUnitTest</span> <span class="token operator">-</span> <span class="token operator">:</span> event<span class="token operator">=</span><span class="token class-name">StreamEvent</span><span class="token punctuation">[</span><span class="token class-name">DataEvent</span><span class="token punctuation">{</span>subscriptionId<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">]</span>\n<span class="token class-name">LoggingSubscriber</span> <span class="token operator">-</span> onNext<span class="token operator">:</span> sub<span class="token operator">=</span><span class="token operator">-</span><span class="token number">779393331</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token number">0</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 更多数据事件省略\n<span class="token class-name">CompliantPublisher</span> <span class="token operator">-</span> request<span class="token operator">:</span> requested<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> available<span class="token operator">=</span><span class="token number">1</span>\n<span class="token class-name">RatpackStreamsUnitTest</span> <span class="token operator">-</span> <span class="token operator">:</span> event<span class="token operator">=</span><span class="token class-name">StreamEvent</span><span class="token punctuation">[</span><span class="token class-name">CompletionEvent</span><span class="token punctuation">{</span>subscriptionId<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">]</span>\n<span class="token class-name">LoggingSubscriber</span> <span class="token operator">-</span> onComplete<span class="token operator">:</span> sub<span class="token operator">=</span><span class="token operator">-</span><span class="token number">779393331</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出显示生产者一次发出一个值。</strong> 现在，让我们在我们的管道中添加 <em>batch()</em> 步骤，这样上游发布者每次产生多达五个项目：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenCompliantPublisherWithBatch_thenSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n\n    <span class="token class-name">TransformablePublisher</span>````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>```````` pub <span class="token operator">=</span> <span class="token class-name">Streams</span><span class="token punctuation">.</span><span class="token function">transformable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CompliantPublisher</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">wiretap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoggingAction</span><span class="token punctuation">(</span><span class="token string">&quot;before batch&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">batch</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">Action</span><span class="token punctuation">.</span><span class="token function">noop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">wiretap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoggingAction</span><span class="token punctuation">(</span><span class="token string">&quot;after batch&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">LoggingSubscriber</span>````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>```````` sub <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoggingSubscriber</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    pub<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    sub<span class="token punctuation">.</span><span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>batch()</em> 方法接受两个参数：每个 <em>request()</em> 调用请求的项目数量，以及一个处理丢弃项目的 <em>Action</em>，即请求但未消费的项目。这种情况可能会发生，如果有错误或下游订阅者调用了 <em>cancel()</em>。让我们看看结果的执行日志：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">LoggingSubscriber</span> <span class="token operator">-</span> onSubscribe<span class="token operator">:</span> sub<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1936924690</span>\n<span class="token class-name">RatpackStreamsUnitTest</span> <span class="token operator">-</span> after batch<span class="token operator">:</span> event<span class="token operator">=</span><span class="token class-name">StreamEvent</span><span class="token punctuation">[</span><span class="token class-name">RequestEvent</span><span class="token punctuation">{</span>requestAmount<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> subscriptionId<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">]</span>\n<span class="token class-name">CompliantPublisher</span> <span class="token operator">-</span> subscribe\n<span class="token class-name">RatpackStreamsUnitTest</span> <span class="token operator">-</span> before batch<span class="token operator">:</span> event<span class="token operator">=</span><span class="token class-name">StreamEvent</span><span class="token punctuation">[</span><span class="token class-name">RequestEvent</span><span class="token punctuation">{</span>requestAmount<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> subscriptionId<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">]</span>\n<span class="token class-name">CompliantPublisher</span> <span class="token operator">-</span> request<span class="token operator">:</span> requested<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> available<span class="token operator">=</span><span class="token number">10</span>\n<span class="token class-name">RatpackStreamsUnitTest</span> <span class="token operator">-</span> before batch<span class="token operator">:</span> event<span class="token operator">=</span><span class="token class-name">StreamEvent</span><span class="token punctuation">[</span><span class="token class-name">DataEvent</span><span class="token punctuation">{</span>subscriptionId<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">]</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 第一批数据事件省略\n<span class="token class-name">RatpackStreamsUnitTest</span> <span class="token operator">-</span> before batch<span class="token operator">:</span> event<span class="token operator">=</span><span class="token class-name">StreamEvent</span><span class="token punctuation">[</span><span class="token class-name">RequestEvent</span><span class="token punctuation">{</span>requestAmount<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> subscriptionId<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">]</span>\n<span class="token class-name">CompliantPublisher</span> <span class="token operator">-</span> request<span class="token operator">:</span> requested<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> available<span class="token operator">=</span><span class="token number">6</span>\n<span class="token class-name">RatpackStreamsUnitTest</span> <span class="token operator">-</span> before batch<span class="token operator">:</span> event<span class="token operator">=</span><span class="token class-name">StreamEvent</span><span class="token punctuation">[</span><span class="token class-name">DataEvent</span><span class="token punctuation">{</span>subscriptionId<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">]</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 第二批数据事件省略\n<span class="token class-name">RatpackStreamsUnitTest</span> <span class="token operator">-</span> before batch<span class="token operator">:</span> event<span class="token operator">=</span><span class="token class-name">StreamEvent</span><span class="token punctuation">[</span><span class="token class-name">RequestEvent</span><span class="token punctuation">{</span>requestAmount<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> subscriptionId<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">]</span>\n<span class="token class-name">CompliantPublisher</span> <span class="token operator">-</span> request<span class="token operator">:</span> requested<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> available<span class="token operator">=</span><span class="token number">1</span>\n<span class="token class-name">RatpackStreamsUnitTest</span> <span class="token operator">-</span> before batch<span class="token operator">:</span> event<span class="token operator">=</span><span class="token class-name">StreamEvent</span><span class="token punctuation">[</span><span class="token class-name">CompletionEvent</span><span class="token punctuation">{</span>subscriptionId<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">]</span>\n<span class="token class-name">RatpackStreamsUnitTest</span> <span class="token operator">-</span> after batch<span class="token operator">:</span> event<span class="token operator">=</span><span class="token class-name">StreamEvent</span><span class="token punctuation">[</span><span class="token class-name">DataEvent</span><span class="token punctuation">{</span>subscriptionId<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">]</span>\n<span class="token class-name">LoggingSubscriber</span> <span class="token operator">-</span> onNext<span class="token operator">:</span> sub<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1936924690</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token number">0</span>\n<span class="token class-name">RatpackStreamsUnitTest</span> <span class="token operator">-</span> after batch<span class="token operator">:</span> event<span class="token operator">=</span><span class="token class-name">StreamEvent</span><span class="token punctuation">[</span><span class="token class-name">RequestEvent</span><span class="token punctuation">{</span>requestAmount<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> subscriptionId<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">]</span>\n<span class="token class-name">RatpackStreamsUnitTest</span> <span class="token operator">-</span> after batch<span class="token operator">:</span> event<span class="token operator">=</span><span class="token class-name">StreamEvent</span><span class="token punctuation">[</span><span class="token class-name">DataEvent</span><span class="token punctuation">{</span>subscriptionId<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">]</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 下游数据事件省略\n<span class="token class-name">LoggingSubscriber</span> <span class="token operator">-</span> onComplete<span class="token operator">:</span> sub<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1936924690</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>我们可以看到现在发布者每次请求五个项目。</strong> 注意，在这种测试场景中，即使在记录订阅者得到第一项之前，我们也看到了对生产者的 <em>两个</em> 请求。原因是，在这种测试场景中，我们有单线程执行，所以 <em>batch</em>() 继续缓冲项目，直到它得到 <em>onComplete()</em> 信号。</p><h2 id="_7-在-web-应用程序中使用-streams" tabindex="-1"><a class="header-anchor" href="#_7-在-web-应用程序中使用-streams"><span>7. 在 Web 应用程序中使用 Streams</span></a></h2><p>Ratpack 支持将反应式流与其异步 Web 框架结合使用。</p><h3 id="_7-1-接收数据流" tabindex="-1"><a class="header-anchor" href="#_7-1-接收数据流"><span>7.1. 接收数据流</span></a></h3><p>对于传入数据，通过处理程序的 <em>Context</em> 可用的 <em>Request</em> 对象提供的 <em>getBodyStream()</em> 方法返回一个 <em>ByteBuf</em> 对象的 <em>TransformablePublisher</em>。</p><p>从这个发布者，我们可以构建我们的处理管道：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">Action</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Chain</span><span class="token punctuation">&gt;</span></span>`` <span class="token function">uploadFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">return</span> chain <span class="token operator">-&gt;</span>\n        chain<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;upload&quot;</span><span class="token punctuation">,</span> ctx <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n            <span class="token class-name">TransformablePublisher</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">ByteBuf</span><span class="token punctuation">&gt;</span></span>` pub <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBodyStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            pub<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Subscriber</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ByteBuf</span><span class="token punctuation">&gt;</span></span>`<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">private</span> <span class="token class-name">Subscription</span> sub<span class="token punctuation">;</span>\n                <span class="token annotation punctuation">@Override</span>\n                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSubscribe</span><span class="token punctuation">(</span><span class="token class-name">Subscription</span> sub<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">this</span><span class="token punctuation">.</span>sub <span class="token operator">=</span> sub<span class="token punctuation">;</span>\n                    sub<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n\n                <span class="token annotation punctuation">@Override</span>\n                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span><span class="token class-name">ByteBuf</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n                        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 对接收到的数据进行有用的操作\n                        sub<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n                        <span class="token comment">// 切勿忘记释放！</span>\n                        t<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span>\n\n                <span class="token annotation punctuation">@Override</span>\n                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    ctx<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n\n                <span class="token annotation punctuation">@Override</span>\n                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    ctx<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">202</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在实现订阅者时需要注意几个细节。首先，我们必须确保在某个时候调用 <em>ByteBuf</em> 的 <em>release()</em> 方法。<strong>不这样做将导致内存泄漏</strong>。其次，任何异步处理必须只使用 Ratpack 的原语。这些包括 <em>Promise</em>、<em>Blocking</em> 等类似的结构。</p><h3 id="_7-2-发送数据流" tabindex="-1"><a class="header-anchor" href="#_7-2-发送数据流"><span>7.2. 发送数据流</span></a></h3><p>发送数据流最直接的方式是使用 <em>Response.sendStream()</em>。这个方法接受一个 <em>ByteBuf</em> 发布者参数，并将数据发送给客户端，根据需要应用背压以避免溢出它：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">Action</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Chain</span><span class="token punctuation">&gt;</span></span>`` <span class="token function">download</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> chain <span class="token operator">-&gt;</span>\n        chain<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;download&quot;</span><span class="token punctuation">,</span> ctx <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n            ctx<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RandomBytesPublisher</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>尽管它很简单，但使用这种方法有一个缺点：<strong>它不会自己设置任何头部，包括 <em>Content-Length</em>，这可能是客户端的问题：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-v</span> <span class="token parameter variable">--output</span> data.bin http://localhost:5050/download\n<span class="token punctuation">..</span>. 省略请求消息\n<span class="token operator">&lt;</span> HTTP/1.1 <span class="token number">200</span> OK\n<span class="token operator">&lt;</span> transfer-encoding: chunked\n<span class="token punctuation">..</span>. 省略下载进度消息\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>或者，更好的方法是使用 handle 的 <em>Context</em> <em>render()</em> 方法，传递一个 <em>ResponseChunks</em> 对象</strong>。在这种情况下，响应将使用 &quot;chunked&quot; 传输编码方法。创建 <em>ResponseChunks</em> 实例最直接的方式是通过此类中可用的静态方法之一：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">Action</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Chain</span><span class="token punctuation">&gt;</span></span>`` <span class="token function">downloadChunks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> chain <span class="token operator">-&gt;</span>\n        chain<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;downloadChunks&quot;</span><span class="token punctuation">,</span> ctx <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n            ctx<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token class-name">ResponseChunks</span><span class="token punctuation">.</span><span class="token function">bufferChunks</span><span class="token punctuation">(</span><span class="token string">&quot;application/octetstream&quot;</span><span class="token punctuation">,</span>\n              <span class="token keyword">new</span> <span class="token class-name">RandomBytesPublisher</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了这个改变，响应现在</p>',65),o=[p];function c(l,u){return a(),s("div",null,o)}const k=n(e,[["render",c],["__file","2024-07-25-Reactive Streams API with Ratpack.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-25/2024-07-25-Reactive%20Streams%20API%20with%20Ratpack.html","title":"Ratpack 与反应式流 API","lang":"zh-CN","frontmatter":{"date":"2024-07-25T00:00:00.000Z","category":["Java","Ratpack"],"tag":["Reactive Streams","Ratpack"],"head":[["meta",{"name":"keywords","content":"Ratpack, Reactive Streams, Java"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-25/2024-07-25-Reactive%20Streams%20API%20with%20Ratpack.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Ratpack 与反应式流 API"}],["meta",{"property":"og:description","content":"Ratpack 与反应式流 API 1. 引言 Ratpack 是一个基于 Netty 引擎构建的框架，它允许我们快速构建 HTTP 应用程序。我们之前的文章已经介绍了它的基本用法。这次，我们将展示如何使用其流 API 实现反应式应用程序。 2. 反应式流的快速回顾 在深入实际实现之前，让我们首先回顾一下构成反应式应用程序的基本属性。根据原始作者的说法..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-25T09:56:00.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Reactive Streams"}],["meta",{"property":"article:tag","content":"Ratpack"}],["meta",{"property":"article:published_time","content":"2024-07-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-25T09:56:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Ratpack 与反应式流 API\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-25T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-25T09:56:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Ratpack 与反应式流 API 1. 引言 Ratpack 是一个基于 Netty 引擎构建的框架，它允许我们快速构建 HTTP 应用程序。我们之前的文章已经介绍了它的基本用法。这次，我们将展示如何使用其流 API 实现反应式应用程序。 2. 反应式流的快速回顾 在深入实际实现之前，让我们首先回顾一下构成反应式应用程序的基本属性。根据原始作者的说法..."},"headers":[{"level":2,"title":"1. 引言","slug":"_1-引言","link":"#_1-引言","children":[]},{"level":2,"title":"2. 反应式流的快速回顾","slug":"_2-反应式流的快速回顾","link":"#_2-反应式流的快速回顾","children":[]},{"level":2,"title":"3. 使用 Ratpack 的 Streams 类","slug":"_3-使用-ratpack-的-streams-类","link":"#_3-使用-ratpack-的-streams-类","children":[]},{"level":2,"title":"4. 使用 TransformablePublisher","slug":"_4-使用-transformablepublisher","link":"#_4-使用-transformablepublisher","children":[]},{"level":2,"title":"5. 使用 buffer() 处理不合规的 Publisher","slug":"_5-使用-buffer-处理不合规的-publisher","link":"#_5-使用-buffer-处理不合规的-publisher","children":[]},{"level":2,"title":"7. 在 Web 应用程序中使用 Streams","slug":"_7-在-web-应用程序中使用-streams","link":"#_7-在-web-应用程序中使用-streams","children":[{"level":3,"title":"7.1. 接收数据流","slug":"_7-1-接收数据流","link":"#_7-1-接收数据流","children":[]},{"level":3,"title":"7.2. 发送数据流","slug":"_7-2-发送数据流","link":"#_7-2-发送数据流","children":[]}]}],"git":{"createdTime":1721901360000,"updatedTime":1721901360000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":9.95,"words":2984},"filePathRelative":"posts/baeldung/2024-07-25/2024-07-25-Reactive Streams API with Ratpack.md","localizedDate":"2024年7月25日","excerpt":"<hr>\\n<h1>Ratpack 与反应式流 API</h1>\\n<h2>1. 引言</h2>\\n<p>Ratpack 是一个基于 Netty 引擎构建的框架，它允许我们快速构建 HTTP 应用程序。我们之前的文章已经介绍了它的基本用法。<strong>这次，我们将展示如何使用其流 API 实现反应式应用程序</strong>。</p>\\n<h2>2. 反应式流的快速回顾</h2>\\n<p>在深入实际实现之前，让我们首先回顾一下构成反应式应用程序的基本属性。根据原始作者的说法，这类应用程序必须具备以下属性：</p>\\n<ul>\\n<li>响应式</li>\\n<li>弹性</li>\\n<li>消息驱动</li>\\n</ul>","autoDesc":true}');export{k as comp,d as data};
