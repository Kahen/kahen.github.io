import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-CM1q4_9A.js";const p={},e=t('<h1 id="java中自动生成json-schema的程序化方法" tabindex="-1"><a class="header-anchor" href="#java中自动生成json-schema的程序化方法"><span>Java中自动生成JSON Schema的程序化方法</span></a></h1><p>在本教程中，我们将使用Java JSON Schema Generator库从Java创建JSON Schema。</p><p>首先，我们将看到如何生成简单和递归的JSON Schema。接下来，我们将查看可用的不同模式配置。然后，我们将从库的一些模块中逐步派生出JSON Schema：Jackson和Jakarta验证。最后，我们将设置一个Maven插件，以便在Maven <em>generate</em> 目标下拥有JSON Schema。</p><h2 id="_2-设置" tabindex="-1"><a class="header-anchor" href="#_2-设置"><span>2. 设置</span></a></h2><p>让我们为我们的项目设置必要的依赖项。</p><h3 id="_2-1-核心依赖项" tabindex="-1"><a class="header-anchor" href="#_2-1-核心依赖项"><span>2.1. 核心依赖项</span></a></h3><p>首先，让我们安装_jsonschema-generator_：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`````com.github.victools`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````jsonschema-generator`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`````4.31.1`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`````\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它包含用于模式生成和配置的主要API。</p><h3 id="_2-2-模块" tabindex="-1"><a class="header-anchor" href="#_2-2-模块"><span>2.2. 模块</span></a></h3><p>接下来，我们将安装三个模块，以从类注解生成JSON Schema属性。让我们先添加_jsonschema-module-jackson_：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`````com.github.victools`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````jsonschema-module-jackson`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`````4.31.1`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`````\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个模块从Jackson注解派生JSON Schema属性。</p><p>继续，我们将安装_jsonschema-module-jakarta-validation_以从Jakarta验证注解获取模式：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`````com.github.victools`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````jsonschema-module-jakarta-validation`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`````4.31.1`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`````\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-maven插件" tabindex="-1"><a class="header-anchor" href="#_2-3-maven插件"><span>2.3. Maven插件</span></a></h3><p>最后，让我们添加_jsonschema-maven-plugin_：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>``\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`````com.github.victools`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````jsonschema-maven-plugin`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`````4.31.1`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`````\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">&gt;</span></span>``\n        ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">&gt;</span></span>``\n            ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">&gt;</span></span>``\n                ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">&gt;</span></span>``generate``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">&gt;</span></span>``\n            ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">&gt;</span></span>``\n        ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>``\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>稍后，我们将定义 <em>configuration</em> 条目。它采用用于生成模式的类，模式配置以及要使用的模块。</p><p><strong>请注意，自Java JSON Schema Generator版本4.7以来，强烈建议模块和插件使用与核心依赖项相同的版本。</strong></p><h2 id="_3-基础" tabindex="-1"><a class="header-anchor" href="#_3-基础"><span>3. 基础</span></a></h2><p>在本节中，我们将通过创建简单和递归模式来探索jsonschema-generator的构建块。</p><h3 id="_3-1-简单模式" tabindex="-1"><a class="header-anchor" href="#_3-1-简单模式"><span>3.1. 简单模式</span></a></h3><p>让我们定义一个_Article_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Article</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">UUID</span> id<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">Date</span> createdAt<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">Area</span> area<span class="token punctuation">;</span>\n    <span class="token comment">// 省略getter和setter</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将从_Article_类生成一个模式：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">SchemaGeneratorConfigBuilder</span> configBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SchemaGeneratorConfigBuilder</span><span class="token punctuation">(</span><span class="token class-name">SchemaVersion</span><span class="token punctuation">.</span><span class="token constant">DRAFT_2020_12</span><span class="token punctuation">,</span> <span class="token class-name">OptionPreset</span><span class="token punctuation">.</span><span class="token constant">PLAIN_JSON</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">SchemaGeneratorConfig</span> config <span class="token operator">=</span> configBuilder<span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token class-name">Option</span><span class="token punctuation">.</span><span class="token constant">EXTRA_OPEN_API_FORMAT_VALUES</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">without</span><span class="token punctuation">(</span><span class="token class-name">Option</span><span class="token punctuation">.</span><span class="token constant">FLATTENED_ENUMS_FROM_TOSTRING</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">SchemaGenerator</span> generator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SchemaGenerator</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">JsonNode</span> jsonSchema <span class="token operator">=</span> generator<span class="token punctuation">.</span><span class="token function">generateSchema</span><span class="token punctuation">(</span><span class="token class-name">Article</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们针对的是_DRAFT_2020-12_，这是目前最新的JSON Schema草案。如果未指定，则将使用_DRAFT-7_规范生成模式。</p><p><em>PLAIN_JSON</em> <em>OptionPreset</em> 包含许多默认配置，用于使用每个非静态类字段进行模式生成。其他可用的预设是_JAVA_OBJECT_和_FULL_DOCUMENTATION_。第一个包括模式中的公共字段和方法，而第二个包括所有字段和公共方法。<strong>如果未指定，预设默认为</strong> _<strong>FULL_DOCUMENTATION</strong>。</p><p>生成的模式遵循_DRAFT_2020-12_结构：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;$schema&quot;</span><span class="token operator">:</span><span class="token string">&quot;https://json-schema.org/draft/2020-12/schema&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;object&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;properties&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>\n        <span class="token property">&quot;area&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>\n            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;enum&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span>\n                <span class="token string">&quot;JAVA&quot;</span><span class="token punctuation">,</span>\n                <span class="token string">&quot;KOTLIN&quot;</span><span class="token punctuation">,</span>\n                <span class="token string">&quot;SCALA&quot;</span><span class="token punctuation">,</span>\n                <span class="token string">&quot;LINUX&quot;</span>\n            <span class="token punctuation">]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;content&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>\n            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;string&quot;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;createdAt&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>\n            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;format&quot;</span><span class="token operator">:</span><span class="token string">&quot;date-time&quot;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;id&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>\n            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;format&quot;</span><span class="token operator">:</span><span class="token string">&quot;uuid&quot;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;title&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>\n            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;string&quot;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里需要注意几件事情。首先，Java <em>Date</em> 和 <em>UUID</em> 在模式中是字符串。<strong>幸运的是，由于生成器选项 <em>EXTRA_OPEN_API_FORMAT_VALUES</em>，它们的真实类型在 <em>field</em> 格式中被指定了。</strong> 它为特殊的JSON Schema字符串添加了额外的信息。</p><p><strong>最后，Java枚举通过调用它们的 <em>name()</em> 方法来表示。</strong></p><h3 id="_3-2-递归模式" tabindex="-1"><a class="header-anchor" href="#_3-2-递归模式"><span>3.2. 递归模式</span></a></h3><p>让我们有一个_Author_类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Author</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">UUID</span> id<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> role<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">List</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AuthoredArticle</span><span class="token punctuation">&gt;</span></span>` articles<span class="token punctuation">;</span>\n    <span class="token comment">// 省略getter和setter</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个_作者_有一系列_AuthoredArticle_。相反，一个_AuthoredArticle_有一个_作者_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthoredArticle</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">Author</span> author<span class="token punctuation">;</span>\n    <span class="token comment">// 省略getter和setter</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>保持前一节的所有配置，_AuthoredArticle_类的模式是一个递归模式。</p><p>有趣的是，_author_属性的 <em>articles</em> 字段引用了正在生成的实际模式：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;author&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>\n        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;object&quot;</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;properties&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>\n            <span class="token property">&quot;articles&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>\n                <span class="token property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;array&quot;</span><span class="token punctuation">,</span>\n                <span class="token property">&quot;items&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>\n                    <span class="token property">&quot;$ref&quot;</span><span class="token operator">:</span><span class="token string">&quot;#&quot;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>这种循环引用是规范所允许的。但是，<em>$ref</em> 不能指向另一个 <em>$ref</em>。</strong></p><h2 id="_4-配置" tabindex="-1"><a class="header-anchor" href="#_4-配置"><span>4. 配置</span></a></h2><p>在上一节中，我们使用了一些内置的预设。现在，我们将看看如何实现细粒度的配置。</p><p>首先，我们将使用单独的配置来自定义生成的模式属性。然后，我们将窥探高级配置。</p><h3 id="_4-1-单独配置" tabindex="-1"><a class="header-anchor" href="#_4-1-单独配置"><span>4.1. 单独配置</span></a></h3><p>让我们为我们的_Author_类配置模式字段：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>configBuilder<span class="token punctuation">.</span><span class="token function">forFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">withRequiredCheck</span><span class="token punctuation">(</span>field <span class="token operator">-&gt;</span> field<span class="token punctuation">.</span><span class="token function">getAnnotationConsideringFieldAndGetter</span><span class="token punctuation">(</span><span class="token class-name">Nullable</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">withArrayUniqueItemsResolver</span><span class="token punctuation">(</span>scope <span class="token operator">-&gt;</span> scope<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getErasedType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成的模式将不是可空的属性标记为必需。它还将_articles_属性制作成唯一数组：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;$schema&quot;</span><span class="token operator">:</span><span class="token string">&quot;https://json-schema.org/draft/2020-12/schema&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;object&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;properties&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>\n        <span class="token property">&quot;articles&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>\n            <span class="token property">&quot;uniqueItems&quot;</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;array&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;items&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>\n                <span class="token property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;object&quot;</span><span class="token punctuation">,</span>\n                <span class="token property">&quot;properties&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>\n                    <span class="token property">&quot;area&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>\n                        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span>\n                        <span class="token property">&quot;enum&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span>\n                            <span class="token string">&quot;JAVA&quot;</span><span class="token punctuation">,</span>\n                            <span class="token string">&quot;KOTLIN&quot;</span><span class="token punctuation">,</span>\n                            <span class="token string">&quot;SCALA&quot;</span><span class="token punctuation">,</span>\n                            <span class="token string">&quot;LINUX&quot;</span>\n                        <span class="token punctuation">]</span>\n                    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                    <span class="token property">&quot;author&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>\n                        <span class="token property">&quot;$ref&quot;</span><span class="token operator">:</span><span class="token string">&quot;#&quot;</span>\n                    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                    <span class="token property">&quot;content&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>\n                        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;string&quot;</span>\n                    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                    <span class="token property">&quot;createdAt&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>\n                        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span>\n                        <span class="token property">&quot;format&quot;</span><span class="token operator">:</span><span class="token string">&quot;date-time&quot;</span><span class="token punctuation">,</span>\n                        <span class="token property">&quot;default&quot;</span><span class="token operator">:</span><span class="token number">1690565063847</span>\n                    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                    <span class="token property">&quot;id&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>\n                        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span>\n                        <span class="token property">&quot;format&quot;</span><span class="token operator">:</span><span class="token string">&quot;uuid&quot;</span>\n                    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                    <span class="token property">&quot;title&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>\n                        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;string&quot;</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token property">&quot;required&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span>\n                    <span class="token string">&quot;area&quot;</span><span class="token punctuation">,</span>\n                    <span class="token string">&quot;author&quot;</span><span class="token punctuation">,</span>\n                    <span class="token string">&quot;content&quot;</span><span class="token punctuation">,</span>\n                    <span class="token string">&quot;createdAt&quot;</span><span class="token punctuation">,</span>\n                    <span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span>\n                    <span class="token string">&quot;title&quot;</span>\n                <span class="token punctuation">]</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;default&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span>\n\n            <span class="token punctuation">]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;id&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>\n            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;format&quot;</span><span class="token operator">:</span><span class="token string">&quot;uuid&quot;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>\n            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;string&quot;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;role&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>\n            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;string&quot;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;required&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span>\n        <span class="token string">&quot;articles&quot;</span><span class="token punctuation">,</span>\n        <span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span>\n        <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span>\n        <span class="token string">&quot;role&quot;</span>\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的模式还为_createdAt_和_articles_属性设置了默认值。这是由于我们对类型的配置：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>configBuilder<span class="token punctuation">.</span><span class="token function">forTypesInGeneral</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">withArrayUniqueItemsResolver</span><span class="token punctuation">(</span>scope <span class="token operator">-&gt;</span> scope<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getErasedType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">withDefaultResolver</span><span class="token punctuation">(</span>scope <span class="token operator">-&gt;</span> scope<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getErasedType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">?</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token constant">EMPTY_LIST</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">withDefaultResolver</span><span class="token punctuation">(</span>scope <span class="token operator">-&gt;</span> scope<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getErasedType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Date</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">?</span> <span class="token class-name">Date</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>_ArrayUniqueItemsResolver_确保如果数组是从_List_类型生成的，则将其标记为唯一。</p><p>就像我们已经配置了字段和类型一样，我们也能够配置方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>configBuilder<span class="token punctuation">.</span><span class="token function">forMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">withRequiredCheck</span><span class="token punctuation">(</span>method <span class="token operator">-&gt;</span> method<span class="token punctuation">.</span><span class="token function">getAnnotationConsideringFieldAndGetter</span><span class="token punctuation">(</span><span class="token class-name">NotNull</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们标记为必需的字段被注解为_@NotNull_。如果该注解在它们的getter上，它们也是必需的。</p><p><strong>此外，对于每种配置，返回_null_不会在模式中设置字段。</strong></p><h3 id="_4-2-高级配置" tabindex="-1"><a class="header-anchor" href="#_4-2-高级配置"><span>4.2. 高级配置</span></a></h3><p>在本节中，我们将使用我们的_AdvancedArticle_类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdvancedArticle</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">UUID</span> id<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span>\n    <span class="token annotation punctuation">@AllowedTypes</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">Timestamp</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Date</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token class-name">Object</span> createdAt<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">Area</span> area<span class="token punctuation">;</span>\n    <span class="token comment">// 省略getter和setter</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>高级配置是自定义JSON Schema生成的终极手段。当我们需要一些不是由单独配置提供的属性时，它特别有用：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>configBuilder<span class="token punctuation">.</span><span class="token function">forFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">withInstanceAttributeOverride</span><span class="token punctuation">(</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> field<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> node<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;readOnly&quot;</span><span class="token punctuation">,</span> field<span class="token punctuation">.</span><span class="token function">getDeclaredType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInstanceOf</span><span class="token punctuation">(</span><span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们为每个属性添加了一个_readOnly_属性。它默认为_false_，除了_UUID_类：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;id&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>\n        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;format&quot;</span><span class="token operator">:</span><span class="token string">&quot;uuid&quot;</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;readOnly&quot;</span><span class="token operator">:</span><span class="token boolean">true</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;title&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>\n        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;readOnly&quot;</span><span class="token operator">:</span><span class="token boolean">false</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另一个有趣的配置是能够在给定字段中指定允许的类型。在我们的_AdvancedArticle_类中，_createdAt_属性接受_Date_和_Timestamp_类型：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>configBuilder<span class="token punctuation">.</span><span class="token function">forFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">withTargetTypeOverridesResolver</span><span class="token punctuation">(</span>field <span class="token operator">-&gt;</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getAnnotationConsideringFieldAndGetterIfSupported</span><span class="token punctuation">(</span><span class="token class-name">AllowedTypes</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">AllowedTypes</span><span class="token operator">::</span><span class="token function">value</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Stream</span><span class="token operator">::</span><span class="token function">of</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>stream <span class="token operator">-&gt;</span> stream<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>subtype <span class="token operator">-&gt;</span> field<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>subtype<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>stream <span class="token operator">-&gt;</span> stream<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在幕后，<em>TargetTypeOverride_类处理每个注解为</em>@AllowedTypes_的字段。然后，它将这些类型添加到结果中的_createdAt_属性：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;createdAt&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>\n        <span class="token property">&quot;anyOf&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span>\n            <span class="token punctuation">{</span>\n                <span class="token property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;object&quot;</span><span class="token punctuation">,</span>\n                <span class="token property">&quot;properties&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>\n                    <span class="token property">&quot;nanos&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>\n                        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;integer&quot;</span><span class="token punctuation">,</span>\n                        <span class="token property">&quot;format&quot;</span><span class="token operator">:</span><span class="token string">&quot;int32&quot;</span><span class="token punctuation">,</span>\n                        <span class="token property">&quot;readOnly&quot;</span><span class="token operator">:</span><span class="token boolean">false</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                <span class="token property">&quot;readOnly&quot;</span><span class="token operator">:</span><span class="token boolean">false</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">{</span>\n                <span class="token property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span>\n                <span class="token property">&quot;format&quot;</span><span class="token operator">:</span><span class="token string">&quot;date-time&quot;</span><span class="token punctuation">,</span>\n                <span class="token property">&quot;readOnly&quot;</span><span class="token operator">:</span><span class="token boolean">false</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如我们所看到的，由_anyOf_属性指定的联合类型。</p><p>**让我们记住，配置的可能性是无限的。**我们甚至可以添加自定义类型定义或自定义属性定义。选择哪个级别的自定义以满足我们的需求取决于我们。</p><h2 id="_5-模块" tabindex="-1"><a class="header-anchor" href="#_5-模块"><span>5. 模块</span></a></h2><p>Java JSON Schema Generator允许我们将配置分组为模块。**我们可以通过实现_Module_接口来创建我们自己的模块。**在接下来的几节中，我们将看看如何使用一些内置模块。我们将探索Jackson和Jakarta验证模块。</p><h3 id="_5-1-jackson" tabindex="-1"><a class="header-anchor" href="#_5-1-jackson"><span>5.1. Jackson</span></a></h3><p>Jackson模块处理Jackson注解以创建JSON Schema配置。让我们考虑我们的_Person_类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n    \n    <span class="token annotation punctuation">@JsonProperty</span><span class="token punctuation">(</span>access <span class="token operator">=</span> <span class="token class-name">JsonProperty<span class="token punctuation">.</span>Access</span><span class="token punctuation">.</span><span class="token constant">READ_ONLY</span><span class="token punctuation">)</span>\n    <span class="token class-name">UUID</span> id<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@JsonProperty</span><span class="token punctuation">(</span>access <span class="token operator">=</span> <span class="token class-name">JsonProperty<span class="token punctuation">.</span>Access</span><span class="token punctuation">.</span><span class="token constant">READ_WRITE</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>\n    <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@JsonProperty</span><span class="token punctuation">(</span>access <span class="token operator">=</span> <span class="token class-name">JsonProperty<span class="token punctuation">.</span>Access</span><span class="token punctuation">.</span><span class="token constant">READ_WRITE</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>\n    <span class="token class-name">String</span> surname<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@JsonProperty</span><span class="token punctuation">(</span>access <span class="token operator">=</span> <span class="token class-name">JsonProperty<span class="token punctuation">.</span>Access</span><span class="token punctuation">.</span><span class="token constant">READ_WRITE</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>\n    <span class="token class-name">Address</span> address<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@JsonIgnore</span>\n    <span class="token class-name">String</span> fullName<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@JsonProperty</span><span class="token punctuation">(</span>access <span class="token operator">=</span> <span class="token class-name">JsonProperty<span class="token punctuation">.</span>Access</span><span class="token punctuation">.</span><span class="token constant">READ_ONLY</span><span class="token punctuation">)</span>\n    <span class="token class-name">Date</span> createdAt<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@JsonProperty</span><span class="token punctuation">(</span>access <span class="token operator">=</span> <span class="token class-name">JsonProperty<span class="token punctuation">.</span>Access</span><span class="token punctuation">.</span><span class="token constant">READ_WRITE</span><span class="token punctuation">)</span>\n    <span class="token class-name">List</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span>`` friends<span class="token punctuation">;</span>\n    <span class="token comment">// 省略getter和setter</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们将_JacksonModule_添加到我们的_SchemaGeneratorConfigBuilder_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">JacksonModule</span> <span class="token keyword">module</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JacksonModule</span><span class="token punctuation">(</span><span class="token constant">RESPECT_JSONPROPERTY_REQUIRED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">SchemaGeneratorConfigBuilder</span> configBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SchemaGeneratorConfigBuilder</span><span class="token punctuation">(</span><span class="token constant">DRAFT_2020_12</span><span class="token punctuation">,</span> <span class="token constant">PLAIN_JSON</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token keyword">module</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token constant">EXTRA_OPEN_API_FORMAT_VALUES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">SchemaGenerator</span> generator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SchemaGenerator</span><span class="token punctuation">(</span>configBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">JsonNode</span> jsonSchema <span class="token operator">=</span> generator<span class="token punctuation">.</span><span class="token function">generateSchema</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该模块接受某些选项以进行进一步的自定义。<em>RESPECT_JSONPROPERTY_REQUIRED_选项指示模块在生成模式中的_readOnly_字段时考虑_JsonProperty.Access</em>。</p><p>生成的模式已经正确设置了_required_和_readOnly_字段：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;object&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;properties&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>\n        <span class="token property">&quot;createdAt&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>\n            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;format&quot;</span><span class="token operator">:</span><span class="token string">&quot;date-time&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;readOnly&quot;</span><span class="token operator">:</span><span class="token boolean">true</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;friends&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>\n            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;array&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;items&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>\n                <span class="token property">&quot;$ref&quot;</span><span class="token operator">:</span><span class="token string">&quot;#&quot;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;id&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>\n            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;format&quot;</span><span class="token operator">:</span><span class="token string">&quot;uuid&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;readOnly&quot;</span><span class="token operator">:</span><span class="token boolean">true</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;required&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span>\n        <span class="token string">&quot;address&quot;</span><span class="token punctuation">,</span>\n        <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span>\n        <span class="token string">&quot;surname&quot;</span>\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>未注解的属性和用_@JsonIgnore_注解的属性被忽略。</strong> _Address_类的嵌套字段和_friends_属性的递归模式被正确引用。</p><h3 id="_5-2-jakarta-validation" tabindex="-1"><a class="header-anchor" href="#_5-2-jakarta-validation"><span>5.2. Jakarta Validation</span></a></h3><p>Jakarta Validation模块从_jakarta.validation.constraints_注解生成模式配置。让我们装饰我们的_Person_类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n    \n    <span class="token annotation punctuation">@NotNull</span>\n    <span class="token class-name">UUID</span> id<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@NotNull</span>\n    <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@NotNull</span>\n    <span class="token annotation punctuation">@Email</span>\n    <span class="token annotation punctuation">@Pattern</span><span class="token punctuation">(</span>regexp <span class="token operator">=</span> <span class="token string">&quot;\\\\b[A-Za-z0-9._%+-]+@baeldung.com\\\\b&quot;</span><span class="token punctuation">)</span>\n    <span class="token class-name">String</span> email<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@NotNull</span>\n    <span class="token class-name">String</span> surname<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@NotNull</span>\n    <span class="token class-name">Address</span> address<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Null</span>\n    <span class="token class-name">String</span> fullName<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@NotNull</span>\n    <span class="token class-name">Date</span> createdAt<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>max <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span>\n    <span class="token class-name">List</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span>`` friends<span class="token punctuation">;</span>\n    <span class="token comment">// 省略getter和setter</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，让我们配置_JakartaValidationModule_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">JakartaValidationModule</span> <span class="token keyword">module</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JakartaValidationModule</span><span class="token punctuation">(</span><span class="token constant">NOT_NULLABLE_FIELD_IS_REQUIRED</span><span class="token punctuation">,</span> <span class="token constant">INCLUDE_PATTERN_EXPRESSIONS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">SchemaGeneratorConfigBuilder</span> configBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SchemaGeneratorConfigBuilder</span><span class="token punctuation">(</span><span class="token constant">DRAFT_2020_12</span><span class="token punctuation">,</span> <span class="token constant">PLAIN_JSON</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token keyword">module</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">SchemaGenerator</span> generator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SchemaGenerator</span><span class="token punctuation">(</span>configBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">JsonNode</span> jsonSchema <span class="token operator">=</span> generator<span class="token punctuation">.</span><span class="token function">generateSchema</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>该模块可以选择性地通过其_forValidationGroups()_方法接收验证组。</strong></p><p><em>NOT_NULLABLE_FIELD_IS_REQUIRED_选项使注解为</em>@NotNull_的字段成为必需。由于_INCLUDE_PATTERN_EXPRESSIONS_，生成的模式包括所有用_@Pattern_注解的属性的模式字段：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;object&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;properties&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>\n        <span class="token property">&quot;createdAt&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>\n            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;string&quot;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;email&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>\n            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;format&quot;</span><span class="token operator">:</span><span class="token string">&quot;email&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;pattern&quot;</span><span class="token operator">:</span><span class="token string">&quot;\\\\b[A-Za-z0-9._%+-]+@baeldung.com\\\\b&quot;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;friends&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>\n            <span class="token property">&quot;maxItems&quot;</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span><span class="token string">&quot;array&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;items&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>\n                <span class="token property">&quot;$ref&quot;</span><span class="token operator">:</span><span class="token string">&quot;#&quot;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;fullName&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>\n            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span>\n                <span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span>\n                <span class="token string">&quot;null&quot;</span>\n            <span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;required&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span>\n        <span class="token string">&quot;createdAt&quot;</span><span class="token punctuation">,</span>\n        <span class="token string">&quot;email&quot;</span><span class="token punctuation">,</span>\n        <span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span>\n        <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span>\n        <span class="token string">&quot;surname&quot;</span>\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们注意到，由于_Person_类中用_@Email_注解，_email_属性有一个_format_字段。同样，_friends_属性的_maxItems_字段被正确设置。</p><h2 id="_6-maven插件" tabindex="-1"><a class="header-anchor" href="#_6-maven插件"><span>6. Maven插件</span></a></h2><p>Java JSON Schema Generator有一个Maven插件，可以从我们的构建过程中生成模式。让我们配置插件：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>``\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`````com.github.victools`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````jsonschema-maven-plugin`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`````4.31.1`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`````\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">&gt;</span></span>``\n        ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">&gt;</span></span>``\n            ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">&gt;</span></span>``\n                ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">&gt;</span></span>``generate``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">&gt;</span></span>``\n            ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">&gt;</span></span>``\n        ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">&gt;</span></span>``\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>`\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packageNames</span><span class="token punctuation">&gt;</span></span>`\n            `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packageName</span><span class="token punctuation">&gt;</span></span>`com.baeldung.jsonschemageneration.plugin`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packageName</span><span class="token punctuation">&gt;</span></span>`\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packageNames</span><span class="token punctuation">&gt;</span></span>`\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>classNames</span><span class="token punctuation">&gt;</span></span>`\n            `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>className</span><span class="token punctuation">&gt;</span></span>`com.baeldung.jsonschemageneration.plugin.Person`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>className</span><span class="token punctuation">&gt;</span></span>`\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>classNames</span><span class="token punctuation">&gt;</span></span>`\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>schemaVersion</span><span class="token punctuation">&gt;</span></span>`DRAFT_2020_12`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>schemaVersion</span><span class="token punctuation">&gt;</span></span>`\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>schemaFilePath</span><span class="token punctuation">&gt;</span></span>`src/main/resources/schemas`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>schemaFilePath</span><span class="token punctuation">&gt;</span></span>`\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>schemaFileName</span><span class="token punctuation">&gt;</span></span>`{1}/{0}.json`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>schemaFileName</span><span class="token punctuation">&gt;</span></span>`\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>failIfNoClassesMatch</span><span class="token punctuation">&gt;</span></span>`true`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>failIfNoClassesMatch</span><span class="token punctuation">&gt;</span></span>`\n        ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>options</span><span class="token punctuation">&gt;</span></span>```\n            `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>preset</span><span class="token punctuation">&gt;</span></span>`PLAIN_JSON`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>preset</span><span class="token punctuation">&gt;</span></span>`\n            `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">&gt;</span></span>`\n                `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>`````DEFINITIONS_FOR_ALL_OBJECTS`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>`````\n                `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>`````FORBIDDEN_ADDITIONAL_PROPERTIES_BY_DEFAULT`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>`````\n            `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">&gt;</span></span>`\n            `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>disabled</span><span class="token punctuation">&gt;</span></span>`SCHEMA_VERSION_INDICATOR`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>disabled</span><span class="token punctuation">&gt;</span></span>`\n        ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>options</span><span class="token punctuation">&gt;</span></span>```\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">&gt;</span></span>`\n            ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>``\n                ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>``Jackson``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>``\n                ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>options</span><span class="token punctuation">&gt;</span></span>```\n                    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>`````RESPECT_JSONPROPERTY_REQUIRED`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>`````\n                ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>options</span><span class="token punctuation">&gt;</span></span>```\n            ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>``\n            ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>``\n                ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>``JakartaValidation``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>``\n                ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>options</span><span class="token punctuation">&gt;</span></span>```\n                    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>`````NOT_NULLABLE_FIELD_IS_REQUIRED`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>`````\n                    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>`````INCLUDE_PATTERN_EXPRESSIONS`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>`````\n                ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>options</span><span class="token punctuation">&gt;</span></span>```\n            ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>``\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>`\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>``\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将根据位于_com.baeldung.jsonschemageneration.plugin_包中的_Person_类生成一个模式。我们仍然可以定义要使用的模块，并向它们传递一些选项。**然而，插件不允许为自定义模块配置</p>',94),o=[e];function c(l,i){return a(),s("div",null,o)}const k=n(p,[["render",c],["__file","2024-07-01-Programmatic Generation of JSON Schemas in Java.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-01/2024-07-01-Programmatic%20Generation%20of%20JSON%20Schemas%20in%20Java.html","title":"Java中自动生成JSON Schema的程序化方法","lang":"zh-CN","frontmatter":{"date":"2024-07-01T00:00:00.000Z","category":["Java","JSON Schema"],"tag":["Java","JSON Schema","自动生成"],"head":[["meta",{"name":"keywords","content":"Java, JSON Schema, 自动生成, Maven插件"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-01/2024-07-01-Programmatic%20Generation%20of%20JSON%20Schemas%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Java中自动生成JSON Schema的程序化方法"}],["meta",{"property":"og:description","content":"Java中自动生成JSON Schema的程序化方法 在本教程中，我们将使用Java JSON Schema Generator库从Java创建JSON Schema。 首先，我们将看到如何生成简单和递归的JSON Schema。接下来，我们将查看可用的不同模式配置。然后，我们将从库的一些模块中逐步派生出JSON Schema：Jackson和Jaka..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-01T13:36:26.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"JSON Schema"}],["meta",{"property":"article:tag","content":"自动生成"}],["meta",{"property":"article:published_time","content":"2024-07-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-01T13:36:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java中自动生成JSON Schema的程序化方法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-01T13:36:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Java中自动生成JSON Schema的程序化方法 在本教程中，我们将使用Java JSON Schema Generator库从Java创建JSON Schema。 首先，我们将看到如何生成简单和递归的JSON Schema。接下来，我们将查看可用的不同模式配置。然后，我们将从库的一些模块中逐步派生出JSON Schema：Jackson和Jaka..."},"headers":[{"level":2,"title":"2. 设置","slug":"_2-设置","link":"#_2-设置","children":[{"level":3,"title":"2.1. 核心依赖项","slug":"_2-1-核心依赖项","link":"#_2-1-核心依赖项","children":[]},{"level":3,"title":"2.2. 模块","slug":"_2-2-模块","link":"#_2-2-模块","children":[]},{"level":3,"title":"2.3. Maven插件","slug":"_2-3-maven插件","link":"#_2-3-maven插件","children":[]}]},{"level":2,"title":"3. 基础","slug":"_3-基础","link":"#_3-基础","children":[{"level":3,"title":"3.1. 简单模式","slug":"_3-1-简单模式","link":"#_3-1-简单模式","children":[]},{"level":3,"title":"3.2. 递归模式","slug":"_3-2-递归模式","link":"#_3-2-递归模式","children":[]}]},{"level":2,"title":"4. 配置","slug":"_4-配置","link":"#_4-配置","children":[{"level":3,"title":"4.1. 单独配置","slug":"_4-1-单独配置","link":"#_4-1-单独配置","children":[]},{"level":3,"title":"4.2. 高级配置","slug":"_4-2-高级配置","link":"#_4-2-高级配置","children":[]}]},{"level":2,"title":"5. 模块","slug":"_5-模块","link":"#_5-模块","children":[{"level":3,"title":"5.1. Jackson","slug":"_5-1-jackson","link":"#_5-1-jackson","children":[]},{"level":3,"title":"5.2. Jakarta Validation","slug":"_5-2-jakarta-validation","link":"#_5-2-jakarta-validation","children":[]}]},{"level":2,"title":"6. Maven插件","slug":"_6-maven插件","link":"#_6-maven插件","children":[]}],"git":{"createdTime":1719840986000,"updatedTime":1719840986000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":7.94,"words":2382},"filePathRelative":"posts/baeldung/2024-07-01/2024-07-01-Programmatic Generation of JSON Schemas in Java.md","localizedDate":"2024年7月1日","excerpt":"\\n<p>在本教程中，我们将使用Java JSON Schema Generator库从Java创建JSON Schema。</p>\\n<p>首先，我们将看到如何生成简单和递归的JSON Schema。接下来，我们将查看可用的不同模式配置。然后，我们将从库的一些模块中逐步派生出JSON Schema：Jackson和Jakarta验证。最后，我们将设置一个Maven插件，以便在Maven <em>generate</em> 目标下拥有JSON Schema。</p>\\n<h2>2. 设置</h2>\\n<p>让我们为我们的项目设置必要的依赖项。</p>\\n<h3>2.1. 核心依赖项</h3>\\n<p>首先，让我们安装_jsonschema-generator_：</p>","autoDesc":true}');export{k as comp,d as data};
