import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-BwYTipZw.js";const p={},e=t('<h1 id="使用java检查ip地址是否在指定范围内" tabindex="-1"><a class="header-anchor" href="#使用java检查ip地址是否在指定范围内"><span>使用Java检查IP地址是否在指定范围内</span></a></h1><p>在本教程中，我们将讨论如何使用Java确定一个IP地址是否在给定的范围内。在本文中，我们假定所有给定的IP地址都是有效的IPv4（互联网协议版本4）和IPv6（互联网协议版本6）地址。</p><h2 id="_2-问题介绍" tabindex="-1"><a class="header-anchor" href="#_2-问题介绍"><span>2. 问题介绍</span></a></h2><p>给定一个输入IP地址以及作为范围的另外两个IP地址（起始和结束）。我们应该能够确定输入的IP地址是否在给定的范围内。</p><p>例如：</p><ul><li><p>输入 = 192.220.3.0, 范围在 192.210.0.0 和 192.255.0.0 之间</p><p>输出 = true</p></li><li><p>输入 = 192.200.0.0, 范围在 192.210.0.0 和 192.255.0.0 之间</p><p>输出 = false</p></li></ul><p>现在，让我们看看使用不同的Java库来检查给定的IP地址是否在范围内的不同方法。</p><h2 id="_3-ipaddress库" tabindex="-1"><a class="header-anchor" href="#_3-ipaddress库"><span>3. IPAddress库</span></a></h2><p>由Sean C Foley编写的IPAddress库支持处理IPv4和IPv6地址的广泛用例。<strong>需要注意的是，这个库至少需要Java 8才能工作。</strong></p><p>设置这个库很简单。我们需要在我们的pom.xml中添加ipaddress依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```com.github.seancfoley```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```ipaddress```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```5.3.3```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它提供了以下Java类来解决我们的问题：</p><ul><li><strong>IPAddress</strong>，用于将IP地址作为Java实例保存</li><li><strong>IPAddressString</strong>，用于从给定的IP字符串构建IPAddress实例</li><li><strong>IPAddressSeqRange</strong>，用于表示任意范围的IP地址</li></ul><p>现在，让我们看看使用上述类通过代码来确定IP地址是否在给定范围内：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">checkIPIsInGivenRange</span><span class="token punctuation">(</span><span class="token class-name">String</span> inputIP<span class="token punctuation">,</span> <span class="token class-name">String</span> rangeStartIP<span class="token punctuation">,</span> <span class="token class-name">String</span> rangeEndIP<span class="token punctuation">)</span>\n  <span class="token keyword">throws</span> <span class="token class-name">AddressStringException</span> <span class="token punctuation">{</span>\n    <span class="token class-name">IPAddress</span> startIPAddress <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IPAddressString</span><span class="token punctuation">(</span>rangeStartIP<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">IPAddress</span> endIPAddress <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IPAddressString</span><span class="token punctuation">(</span>rangeEndIP<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">IPAddressSeqRange</span> ipRange <span class="token operator">=</span> startIPAddress<span class="token punctuation">.</span><span class="token function">toSequentialRange</span><span class="token punctuation">(</span>endIPAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">IPAddress</span> inputIPAddress <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IPAddressString</span><span class="token punctuation">(</span>inputIP<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> ipRange<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>inputIPAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码适用于IPv4和IPv6地址。<strong>IPAddressString</strong> 参数化构造函数接受一个IP字符串来构建<strong>IPAddress</strong>实例。<strong>IPAddressString</strong>实例可以通过以下两种方法之一转换为<strong>IPAddress</strong>：</p><ul><li>**toAddress()*/</li><li><strong>getAddress()</strong></li></ul><p><strong>getAddress()<strong>方法假定给定的IP是有效的，但</strong>toAddress()<strong>方法在验证输入一次后抛出</strong>AddressStringException</strong>，如果输入无效。<strong>IPAddress</strong>类提供了一个<strong>toSequentialRange</strong>方法，使用开始和结束IP范围构建<strong>IPAddressSeqRange</strong>实例。</p><p>让我们考虑几个单元测试用例，它们使用IPv4和IPv6地址调用<strong>checkIPIsInGivenRange</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenIPv4Addresses_whenIsInRange_thenReturnsTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token class-name">IPWithGivenRangeCheck</span><span class="token punctuation">.</span><span class="token function">checkIPIsInGivenRange</span><span class="token punctuation">(</span><span class="token string">&quot;192.220.3.0&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;192.210.0.0&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;192.255.0.0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenIPv4Addresses_whenIsNotInRange_thenReturnsFalse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token class-name">IPWithGivenRangeCheck</span><span class="token punctuation">.</span><span class="token function">checkIPIsInGivenRange</span><span class="token punctuation">(</span><span class="token string">&quot;192.200.0.0&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;192.210.0.0&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;192.255.0.0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenIPv6Addresses_whenIsInRange_thenReturnsTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token class-name">IPWithGivenRangeCheck</span><span class="token punctuation">.</span><span class="token function">checkIPIsInGivenRange</span><span class="token punctuation">(</span>\n      <span class="token string">&quot;2001:db8:85a3::8a03:a:b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2001:db8:85a3::8a00:ff:ffff&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2001:db8:85a3::8a2e:370:7334&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenIPv6Addresses_whenIsNotInRange_thenReturnsFalse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token class-name">IPWithGivenRangeCheck</span><span class="token punctuation">.</span><span class="token function">checkIPIsInGivenRange</span><span class="token punctuation">(</span>\n      <span class="token string">&quot;2002:db8:85a3::8a03:a:b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2001:db8:85a3::8a00:ff:ffff&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2001:db8:85a3::8a2e:370:7334&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-commons-ip-math" tabindex="-1"><a class="header-anchor" href="#_4-commons-ip-math"><span>4. Commons IP Math</span></a></h2><p>**Commons IP Math库提供了用于表示IPv4和IPv6地址及范围的类。**它提供了用于处理最常见操作的API，此外，它还提供了比较器和其他实用工具，用于处理IP范围。</p><p>我们需要将commons-ip-math依赖项添加到我们的pom.xml中：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```com.github.jgonian```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```commons-ip-math```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```1.32```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-1-对于ipv4" tabindex="-1"><a class="header-anchor" href="#_4-1-对于ipv4"><span>4.1. 对于IPv4</span></a></h3><p>该库提供了<strong>Ipv4</strong>和<strong>Ipv4Range</strong>类，分别用于保存单个IP地址和地址范围的实例。现在，让我们看看使用上述类的代码示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">checkIPv4IsInRange</span><span class="token punctuation">(</span><span class="token class-name">String</span> inputIP<span class="token punctuation">,</span> <span class="token class-name">String</span> rangeStartIP<span class="token punctuation">,</span> <span class="token class-name">String</span> rangeEndIP<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Ipv4</span> startIPAddress <span class="token operator">=</span> <span class="token class-name">Ipv4</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>rangeStartIP<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Ipv4</span> endIPAddress <span class="token operator">=</span> <span class="token class-name">Ipv4</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>rangeEndIP<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Ipv4Range</span> ipRange <span class="token operator">=</span> <span class="token class-name">Ipv4Range</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>startIPAddress<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>endIPAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Ipv4</span> inputIPAddress <span class="token operator">=</span> <span class="token class-name">Ipv4</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>inputIP<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> ipRange<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>inputIPAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Ipv4</strong>类提供了一个静态方法<strong>of()</strong>，它接受IP字符串来构建一个<strong>Ipv4</strong>实例。<strong>Ipv4Range</strong>类使用构建者设计模式来创建其实例，使用**from()<strong>和</strong>to()<strong>方法来指定范围。此外，它提供了</strong>contains()**函数来检查IP地址是否在指定的范围内。</p><p>现在让我们对我们的函数运行一些测试：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenIPv4Addresses_whenIsInRange_thenReturnsTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token class-name">IPWithGivenRangeCheck</span><span class="token punctuation">.</span><span class="token function">checkIPv4IsInRange</span><span class="token punctuation">(</span><span class="token string">&quot;192.220.3.0&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;192.210.0.0&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;192.255.0.0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenIPv4Addresses_whenIsNotInRange_thenReturnsFalse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token class-name">IPWithGivenRangeCheck</span><span class="token punctuation">.</span><span class="token function">checkIPv4IsInRange</span><span class="token punctuation">(</span><span class="token string">&quot;192.200.0.0&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;192.210.0.0&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;192.255.0.0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-对于ipv6" tabindex="-1"><a class="header-anchor" href="#_4-2-对于ipv6"><span>4.2. 对于IPv6</span></a></h3><p>对于IP版本6，库提供了相同的类和函数，只是版本号从4变为6。版本6的类是<strong>Ipv6</strong>和<strong>Ipv6Range</strong>。</p><p>让我们通过使用上述类来查看IP版本6的代码示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">checkIPv6IsInRange</span><span class="token punctuation">(</span><span class="token class-name">String</span> inputIP<span class="token punctuation">,</span> <span class="token class-name">String</span> rangeStartIP<span class="token punctuation">,</span> <span class="token class-name">String</span> rangeEndIP<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Ipv6</span> startIPAddress <span class="token operator">=</span> <span class="token class-name">Ipv6</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>rangeStartIP<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Ipv6</span> endIPAddress <span class="token operator">=</span> <span class="token class-name">Ipv6</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>rangeEndIP<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Ipv6Range</span> ipRange <span class="token operator">=</span> <span class="token class-name">Ipv6Range</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>startIPAddress<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>endIPAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Ipv6</span> inputIPAddress <span class="token operator">=</span> <span class="token class-name">Ipv6</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>inputIP<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> ipRange<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>inputIPAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在让我们运行单元测试来检查我们的代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenIPv6Addresses_whenIsInRange_thenReturnsTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token class-name">IPWithGivenRangeCheck</span><span class="token punctuation">.</span><span class="token function">checkIPv6IsInRange</span><span class="token punctuation">(</span>\n      <span class="token string">&quot;2001:db8:85a3::8a03:a:b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2001:db8:85a3::8a00:ff:ffff&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2001:db8:85a3::8a2e:370:7334&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenIPv6Addresses_whenIsNotInRange_thenReturnsFalse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token class-name">IPWithGivenRangeCheck</span><span class="token punctuation">.</span><span class="token function">checkIPv6IsInRange</span><span class="token punctuation">(</span>\n      <span class="token string">&quot;2002:db8:85a3::8a03:a:b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2001:db8:85a3::8a00:ff:ffff&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2001:db8:85a3::8a2e:370:7334&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-使用java的-inetaddress-类进行ipv4检查" tabindex="-1"><a class="header-anchor" href="#_5-使用java的-inetaddress-类进行ipv4检查"><span>5. 使用Java的_InetAddress_类进行IPv4检查</span></a></h2><p>**IPv4地址是四个1字节值的序列。因此，它可以被转换为一个32位整数。**我们可以检查它是否在给定的范围内。</p><p>Java的<strong>InetAddress</strong>类表示一个IP地址，并提供方法来获取任何给定主机名的IP。一个<strong>InetAddress</strong>实例表示具有相应主机名的IP地址。</p><p>以下是将IPv4地址转换为长整数的Java代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>```java\n<span class="token keyword">long</span> <span class="token function">ipToLongInt</span><span class="token punctuation">(</span><span class="token class-name">InetAddress</span> ipAddress<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">long</span> resultIP <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ipAddressOctets <span class="token operator">=</span> ipAddress<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">byte</span> octet <span class="token operator">:</span> ipAddressOctets<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        resultIP `<span class="token operator">&lt;&lt;=</span> <span class="token number">8</span><span class="token punctuation">;</span>\n        resultIP <span class="token operator">|=</span> octet <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> resultIP<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用上述方法，让我们检查IP是否在范围内：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">checkIPv4IsInRangeByConvertingToInt</span><span class="token punctuation">(</span><span class="token class-name">String</span> inputIP<span class="token punctuation">,</span> <span class="token class-name">String</span> rangeStartIP<span class="token punctuation">,</span> <span class="token class-name">String</span> rangeEndIP<span class="token punctuation">)</span>\n  <span class="token keyword">throws</span> <span class="token class-name">UnknownHostException</span> <span class="token punctuation">{</span>\n    <span class="token keyword">long</span> startIPAddress <span class="token operator">=</span> <span class="token function">ipToLongInt</span><span class="token punctuation">(</span><span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span>rangeStartIP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">long</span> endIPAddress <span class="token operator">=</span> <span class="token function">ipToLongInt</span><span class="token punctuation">(</span><span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span>rangeEndIP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">long</span> inputIPAddress <span class="token operator">=</span> <span class="token function">ipToLongInt</span><span class="token punctuation">(</span><span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span>inputIP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>inputIPAddress <span class="token operator">&gt;</span>`<span class="token operator">=</span> startIPAddress <span class="token operator">&amp;&amp;</span> inputIPAddress <span class="token operator">&lt;=</span> endIPAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>InetAddress</strong>类中的<strong>getByName()<strong>方法接受域名或IP地址作为输入，并在无效时抛出</strong>UnknownHostException</strong>。让我们通过运行单元测试来检查我们的代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenIPv4Addresses_whenIsInRange_thenReturnsTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token class-name">IPWithGivenRangeCheck</span><span class="token punctuation">.</span><span class="token function">checkIPv4IsInRangeByConvertingToInt</span><span class="token punctuation">(</span><span class="token string">&quot;192.220.3.0&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;192.210.0.0&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;192.255.0.0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenIPv4Addresses_whenIsNotInRange_thenReturnsFalse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token class-name">IPWithGivenRangeCheck</span><span class="token punctuation">.</span><span class="token function">checkIPv4IsInRangeByConvertingToInt</span><span class="token punctuation">(</span><span class="token string">&quot;192.200.0.0&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;192.210.0.0&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;192.255.0.0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将IP地址转换为整数的上述逻辑也适用于IPv6，但它是一个128位整数。Java语言在原始数据类型中支持的最大值为64位（长整数）。如果我们要用上述逻辑处理版本6，我们需要使用两个长整数或BigInteger类进行计算。但这将是一个繁琐的过程，并且涉及复杂的计算。</p><h2 id="_6-java-ipv6库" tabindex="-1"><a class="header-anchor" href="#_6-java-ipv6库"><span>6. Java IPv6库</span></a></h2><p>Java IPv6库特别为Java中的IPv6支持而编写，并执行相关的操作。<strong>该库内部使用两个长整数来存储IPv6地址。并且它至少需要Java 6才能工作。</strong></p><p>我们需要将java-ipv6依赖项添加到我们的pom.xml中：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```com.googlecode.java-ipv6```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```java-ipv6```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```0.17```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该库提供了各种类来操作IPv6地址。以下是两个帮助我们解决问题的类：</p><ul><li><strong>IPv6Address</strong>，用于将IPv6表达为Java实例</li><li><strong>IPv6AddressRange</strong>，用于表示一系列连续的IPv6地址范围</li></ul><p>让我们看看使用上述类来检查IP是否在给定范围内的代码片段：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">checkIPv6IsInRangeByIPv6library</span><span class="token punctuation">(</span><span class="token class-name">String</span> inputIP<span class="token punctuation">,</span> <span class="token class-name">String</span> rangeStartIP<span class="token punctuation">,</span> <span class="token class-name">String</span> rangeEndIP<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">IPv6Address</span> startIPAddress <span class="token operator">=</span> <span class="token class-name">IPv6Address</span><span class="token punctuation">.</span><span class="token function">fromString</span><span class="token punctuation">(</span>rangeStartIP<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">IPv6Address</span> endIPAddress <span class="token operator">=</span> <span class="token class-name">IPv6Address</span><span class="token punctuation">.</span><span class="token function">fromString</span><span class="token punctuation">(</span>rangeEndIP<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">IPv6AddressRange</span> ipRange <span class="token operator">=</span> <span class="token class-name">IPv6AddressRange</span><span class="token punctuation">.</span><span class="token function">fromFirstAndLast</span><span class="token punctuation">(</span>startIPAddress<span class="token punctuation">,</span> endIPAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">IPv6Address</span> inputIPAddress <span class="token operator">=</span> <span class="token class-name">IPv6Address</span><span class="token punctuation">.</span><span class="token function">fromString</span><span class="token punctuation">(</span>inputIP<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> ipRange<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>inputIPAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>IPv6Address</strong>类提供了各种静态函数来构建其实例：</p><ul><li><strong>fromString</strong></li><li><strong>fromInetAddress</strong></li><li><strong>fromBigInteger</strong></li><li><strong>fromByteArray</strong></li><li><strong>fromLongs</strong></li></ul><p>以上所有方法都是自解释的，这有助于我们创建一个<strong>IPv6Address</strong>实例。<strong>IPv6AddressRange</strong>有一个名为<strong>fromFirstAndLast()<strong>的方法，它接受两个IP地址作为输入。此外，它提供了一个</strong>contains()<strong>方法，该方法接受一个</strong>IPv6Address</strong>作为参数，并确定它是否在指定的范围内。</p><p>通过调用我们定义的上述方法，让我们在测试中传递一些样本输入：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenIPv6Addresses_whenIsInRange_thenReturnsTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token class-name">IPWithGivenRangeCheck</span><span class="token punctuation">.</span><span class="token function">checkIPv6IsInRangeByIPv6library</span><span class="token punctuation">(</span>\n      <span class="token string">&quot;fe80::226:2dff:fefa:dcba&quot;</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;fe80::226:2dff:fefa:cd1f&quot;</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;fe80::226:2dff:fefa:ffff&quot;</span>\n    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenIPv6Addresses_whenIsNotInRange_thenReturnsFalse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token class-name">IPWithGivenRangeCheck</span><span class="token punctuation">.</span><span class="token function">checkIPv6IsInRangeByIPv6library</span><span class="token punctuation">(</span>\n      <span class="token string">&quot;2002:db8:85a3::8a03:a:b&quot;</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;2001:db8:85a3::8a00:ff:ffff&quot;</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;2001:db8:85a3::8a2e:370:7334&quot;</span>\n    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-结论" tabindex="-1"><a class="header-anchor" href="#_7-结论"><span>7. 结论</span></a></h2><p>在本文中，我们检查了如何确定给定的IP地址（v4和v6）是否在指定的范围内。通过各种库的帮助，我们分析了在没有复杂逻辑和计算的情况下检查IP地址存在性的方法。</p><p>和往常一样，本文的代码片段可以在GitHub上找到。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div>',63),o=[e];function c(i,l){return a(),s("div",null,o)}const r=n(p,[["render",c],["__file","2024-07-27-Find Whether an IP Address Is in the Specified Range or Not in Java.html.vue"]]),k=JSON.parse('{"path":"/posts/baeldung/2024-07-27/2024-07-27-Find%20Whether%20an%20IP%20Address%20Is%20in%20the%20Specified%20Range%20or%20Not%20in%20Java.html","title":"使用Java检查IP地址是否在指定范围内","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","Networking"],"tag":["IP Address","Range Checking"],"head":[["meta",{"name":"keywords","content":"Java, IP Address, Range Checking, IPv4, IPv6"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-27/2024-07-27-Find%20Whether%20an%20IP%20Address%20Is%20in%20the%20Specified%20Range%20or%20Not%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"使用Java检查IP地址是否在指定范围内"}],["meta",{"property":"og:description","content":"使用Java检查IP地址是否在指定范围内 在本教程中，我们将讨论如何使用Java确定一个IP地址是否在给定的范围内。在本文中，我们假定所有给定的IP地址都是有效的IPv4（互联网协议版本4）和IPv6（互联网协议版本6）地址。 2. 问题介绍 给定一个输入IP地址以及作为范围的另外两个IP地址（起始和结束）。我们应该能够确定输入的IP地址是否在给定的范..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-27T13:43:27.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"IP Address"}],["meta",{"property":"article:tag","content":"Range Checking"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-27T13:43:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用Java检查IP地址是否在指定范围内\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-27T13:43:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"使用Java检查IP地址是否在指定范围内 在本教程中，我们将讨论如何使用Java确定一个IP地址是否在给定的范围内。在本文中，我们假定所有给定的IP地址都是有效的IPv4（互联网协议版本4）和IPv6（互联网协议版本6）地址。 2. 问题介绍 给定一个输入IP地址以及作为范围的另外两个IP地址（起始和结束）。我们应该能够确定输入的IP地址是否在给定的范..."},"headers":[{"level":2,"title":"2. 问题介绍","slug":"_2-问题介绍","link":"#_2-问题介绍","children":[]},{"level":2,"title":"3. IPAddress库","slug":"_3-ipaddress库","link":"#_3-ipaddress库","children":[]},{"level":2,"title":"4. Commons IP Math","slug":"_4-commons-ip-math","link":"#_4-commons-ip-math","children":[{"level":3,"title":"4.1. 对于IPv4","slug":"_4-1-对于ipv4","link":"#_4-1-对于ipv4","children":[]},{"level":3,"title":"4.2. 对于IPv6","slug":"_4-2-对于ipv6","link":"#_4-2-对于ipv6","children":[]}]},{"level":2,"title":"5. 使用Java的_InetAddress_类进行IPv4检查","slug":"_5-使用java的-inetaddress-类进行ipv4检查","link":"#_5-使用java的-inetaddress-类进行ipv4检查","children":[]},{"level":2,"title":"6. Java IPv6库","slug":"_6-java-ipv6库","link":"#_6-java-ipv6库","children":[]},{"level":2,"title":"7. 结论","slug":"_7-结论","link":"#_7-结论","children":[]}],"git":{"createdTime":1722087807000,"updatedTime":1722087807000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":6.5,"words":1950},"filePathRelative":"posts/baeldung/2024-07-27/2024-07-27-Find Whether an IP Address Is in the Specified Range or Not in Java.md","localizedDate":"2022年4月1日","excerpt":"\\n<p>在本教程中，我们将讨论如何使用Java确定一个IP地址是否在给定的范围内。在本文中，我们假定所有给定的IP地址都是有效的IPv4（互联网协议版本4）和IPv6（互联网协议版本6）地址。</p>\\n<h2>2. 问题介绍</h2>\\n<p>给定一个输入IP地址以及作为范围的另外两个IP地址（起始和结束）。我们应该能够确定输入的IP地址是否在给定的范围内。</p>\\n<p>例如：</p>\\n<ul>\\n<li>\\n<p>输入 = 192.220.3.0, 范围在 192.210.0.0 和 192.255.0.0 之间</p>\\n<p>输出 = true</p>\\n</li>\\n<li>\\n<p>输入 = 192.200.0.0, 范围在 192.210.0.0 和 192.255.0.0 之间</p>\\n<p>输出 = false</p>\\n</li>\\n</ul>","autoDesc":true}');export{r as comp,k as data};
