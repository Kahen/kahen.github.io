import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-D9qUUkNr.js";const p={},e=t('<hr><h1 id="在同一个bean中调用-cacheable方法" tabindex="-1"><a class="header-anchor" href="#在同一个bean中调用-cacheable方法"><span>在同一个Bean中调用@Cacheable方法</span></a></h1><p>Spring提供了一种基于注解的方法来启用Spring管理Bean的缓存。基于AOP技术，通过在方法上添加@Cacheable注解，可以很容易地使方法可缓存。然而，当从同一个类内部调用时，缓存将被忽略。</p><p>在本教程中，我们将解释为什么会发生这种情况以及如何解决它。</p><h2 id="_2-重现问题" tabindex="-1"><a class="header-anchor" href="#_2-重现问题"><span>2. 重现问题</span></a></h2><p>首先，我们创建一个启用了缓存的Spring Boot应用程序。在本文中，我们创建了一个带有@Cacheable注解的square方法的MathService：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>\n<span class="token annotation punctuation">@CacheConfig</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">&quot;square&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MathService</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> counter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span>allEntries <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">AtomicInteger</span> <span class="token function">resetCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        counter<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> counter<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token string">&quot;#n&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token keyword">double</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        counter<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> n <span class="token operator">*</span> n<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其次，我们在MathService中创建了一个sumOfSquareOf2方法，它两次调用square方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">sumOfSquareOf2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">square</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">square</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第三，我们为sumOfSquareOf2方法创建了一个测试，以检查square方法被调用了多少次：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">MathServiceIntegrationTest</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Resource</span>\n    <span class="token keyword">private</span> <span class="token class-name">MathService</span> mathService<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Test</span>\n    <span class="token keyword">void</span> <span class="token function">givenCacheableMethod_whenInvokingByInternalCall_thenCacheIsNotTriggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">AtomicInteger</span> counter <span class="token operator">=</span> mathService<span class="token punctuation">.</span><span class="token function">resetCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token function">assertThat</span><span class="token punctuation">(</span>mathService<span class="token punctuation">.</span><span class="token function">sumOfSquareOf2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">assertThat</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于同一个类的调用不会触发缓存，计数器的数字等于2，这表明方法square带参数2被调用了两次，缓存被忽略了。这不是我们期望的，所以我们需要确定这种行为的原因。</p><h2 id="_3-分析问题" tabindex="-1"><a class="header-anchor" href="#_3-分析问题"><span>3. 分析问题</span></a></h2><p>@Cacheable方法的缓存行为由Spring AOP支持。如果我们使用IDE调试这段代码，我们会找到一些线索。MathServiceIntegrationTest中的mathService变量指向MathService$$EnhancerBySpringCGLIB$$5cdf8ec8的一个实例，而MathService中的this指向MathService的一个实例。</p><p><strong>MathService$$EnhancerBySpringCGLIB$$5cdf8ec8是由Spring生成的代理类。它拦截对MathService的@Cacheable方法的所有请求，并用缓存的值响应。</strong></p><p>另一方面，<strong>MathService本身没有缓存能力，所以同一个类内的内部调用不会得到缓存的值</strong>。</p><p>现在我们已经理解了机制，让我们寻找解决这个问题的方法。显然，最简单的方法是将@Cacheable方法移动到另一个Bean。但是，如果我们出于某种原因必须将方法保持在同一个Bean中，我们有三种可能的解决方案：</p><ul><li>自我注入</li><li>编译时编织</li><li>加载时编织</li></ul><p>我们在介绍AspectJ的文章中详细介绍了面向切面编程（AOP）和不同的编织方法。编织是在我们将要使用切面的源代码编译成.class文件时插入代码的一种方式。它包括编译时编织、编译后编织和AspectJ中的加载时编织。由于编译后编织用于编织第三方库，这不是我们的情况，我们只关注编译时编织和加载时编织。</p><h2 id="_4-解决方案1-自我注入" tabindex="-1"><a class="header-anchor" href="#_4-解决方案1-自我注入"><span>4. 解决方案1：自我注入</span></a></h2><p>自我注入是绕过Spring AOP限制的常用解决方案。**它允许我们获取对Spring增强Bean的引用，并通过该Bean调用方法。**在我们的案例中，我们可以将mathService Bean自动装配到一个名为self的成员变量中，并使用self而不是使用this引用来调用square方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>\n<span class="token annotation punctuation">@CacheConfig</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">&quot;square&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span>proxyMode <span class="token operator">=</span> <span class="token class-name">ScopedProxyMode</span><span class="token punctuation">.</span><span class="token constant">TARGET_CLASS</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MathService</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Autowired</span>\n    <span class="token keyword">private</span> <span class="token class-name">MathService</span> self<span class="token punctuation">;</span>\n\n    <span class="token comment">// 其他代码</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">sumOfSquareOf3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> self<span class="token punctuation">.</span><span class="token function">square</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> self<span class="token punctuation">.</span><span class="token function">square</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>@Scope注解有助于创建并注入self的存根代理，因为循环引用。它稍后将被填充为相同的MathService实例。测试显示square方法只执行了一次：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenCacheableMethod_whenInvokingByExternalCall_thenCacheIsTriggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">AtomicInteger</span> counter <span class="token operator">=</span> mathService<span class="token punctuation">.</span><span class="token function">resetCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">assertThat</span><span class="token punctuation">(</span>mathService<span class="token punctuation">.</span><span class="token function">sumOfSquareOf3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertThat</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-解决方案2-编译时编织" tabindex="-1"><a class="header-anchor" href="#_5-解决方案2-编译时编织"><span>5. 解决方案2：编译时编织</span></a></h2><p>编译时编织中的编织过程，顾名思义，发生在编译时。它是<strong>最简单的编织方法</strong>。当我们既有切面的源代码，又有我们使用切面的代码时，AspectJ编译器将从源代码编译并产生一个编织的类文件作为输出。</p><p>在Maven项目中，我们可以使用Mojo的AspectJ Maven插件使用AspectJ编译器将AspectJ切面编织到我们的类中。对于@Cacheable注解，切面的源代码由spring-aspects库提供，因此我们需要将其作为Maven依赖项和AspectJ Maven插件的切面库添加。</p><p>启用编译时编织有三个步骤。首先，让我们通过在任何配置类上添加@EnableCaching注解以AspectJ模式启用缓存：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableCaching</span><span class="token punctuation">(</span>mode <span class="token operator">=</span> <span class="token class-name">AdviceMode</span><span class="token punctuation">.</span><span class="token constant">ASPECTJ</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其次，我们需要添加spring-aspects依赖项：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`````org.springframework`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````spring-aspects`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第三，让我们为编译目标定义aspectj-maven-plugin：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>``\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`````org.codehaus.mojo`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````aspectj-maven-plugin`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>``${aspectj-plugin.version}``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>``\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">&gt;</span></span>`${java.version}`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">&gt;</span></span>`\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">&gt;</span></span>`${java.version}`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">&gt;</span></span>`\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>complianceLevel</span><span class="token punctuation">&gt;</span></span>`${java.version}`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>complianceLevel</span><span class="token punctuation">&gt;</span></span>`\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Xlint</span><span class="token punctuation">&gt;</span></span>`ignore`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Xlint</span><span class="token punctuation">&gt;</span></span>`\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoding</span><span class="token punctuation">&gt;</span></span>`UTF-8`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoding</span><span class="token punctuation">&gt;</span></span>`\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aspectLibraries</span><span class="token punctuation">&gt;</span></span>`\n            `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aspectLibrary</span><span class="token punctuation">&gt;</span></span>`\n                `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`````org.springframework`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`````\n                `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````spring-aspects`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````\n            `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aspectLibrary</span><span class="token punctuation">&gt;</span></span>`\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aspectLibraries</span><span class="token punctuation">&gt;</span></span>`\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>``\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">&gt;</span></span>`\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">&gt;</span></span>`\n            `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">&gt;</span></span>`\n                `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">&gt;</span></span>`compile`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">&gt;</span></span>`\n            `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">&gt;</span></span>`\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">&gt;</span></span>`\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>``\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面显示的AspectJ Maven插件将在我们执行mvn clean compile时编织切面。使用编译时编织，我们不需要更改代码，square方法将只执行一次：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenCacheableMethod_whenInvokingByInternalCall_thenCacheIsTriggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">AtomicInteger</span> counter <span class="token operator">=</span> mathService<span class="token punctuation">.</span><span class="token function">resetCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">assertThat</span><span class="token punctuation">(</span>mathService<span class="token punctuation">.</span><span class="token function">sumOfSquareOf2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertThat</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-解决方案3-加载时编织" tabindex="-1"><a class="header-anchor" href="#_6-解决方案3-加载时编织"><span>6. 解决方案3：加载时编织</span></a></h2><p>加载时编织是在类加载器加载类文件并将类定义到JVM时延迟进行的二进制编织。可以使用AspectJ代理介入类加载过程，并在它们在VM中定义之前编织任何类型。</p><p>启用加载时编织也有三个步骤。首先，通过在任何配置类上添加两个注解来启用AspectJ模式和加载时编织器：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableCaching</span><span class="token punctuation">(</span>mode <span class="token operator">=</span> <span class="token class-name">AdviceMode</span><span class="token punctuation">.</span><span class="token constant">ASPECTJ</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@EnableLoadTimeWeaving</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>其次，让我们添加spring-aspects依赖项：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`````org.springframework`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````spring-aspects`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们指定JVM的javaagent选项_-javaagent:path/to/aspectjweaver.jar_或使用Maven插件配置javaagent：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>`\n        ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>``\n            `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`````org.apache.maven.plugins`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`````\n            `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````maven-surefire-plugin`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````\n            ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>``${maven-surefire-plugin.version}``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>``\n            ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>``\n                `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>argLine</span><span class="token punctuation">&gt;</span></span>`\n                    --add-opens java.base/java.lang=ALL-UNNAMED\n                    --add-opens java.base/java.util=ALL-UNNAMED\n                    -javaagent:&quot;${\n```settings.localRepository}/org/aspectj/aspectjweaver/${aspectjweaver.version}/aspectjweaver-${aspectjweaver.version}.jar\n                    -javaagent:&quot;${\nsettings.localRepository}/org/springframework/spring-instrument/${spring.version}/spring-instrument-${spring.version}.jar\n                `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>argLine</span><span class="token punctuation">&gt;</span></span>`\n                `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>useSystemClassLoader</span><span class="token punctuation">&gt;</span></span>`true`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>useSystemClassLoader</span><span class="token punctuation">&gt;</span></span>`\n                `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>forkMode</span><span class="token punctuation">&gt;</span></span>`always`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>forkMode</span><span class="token punctuation">&gt;</span></span>`\n                `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">&gt;</span></span>`\n                    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">&gt;</span></span>`com.baeldung.selfinvocation.LoadTimeWeavingIntegrationTest`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>`\n                `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">&gt;</span></span>`\n            ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>``\n        ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>``\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>加载时编织的测试_givenCacheableMethod_whenInvokingByInternalCall_thenCacheIsTriggered_也将通过。</p><h2 id="_7-结论" tabindex="-1"><a class="header-anchor" href="#_7-结论"><span>7. 结论</span></a></h2><p>在本文中，我们解释了为什么当从同一个Bean调用@Cacheable方法时缓存不生效。然后，我们分享了自我注入和两种编织解决方案来解决这个问题。像往常一样，本文的源代码可在GitHub上找到。</p><p>OK</p>',47),c=[e];function o(l,i){return s(),a("div",null,c)}const r=n(p,[["render",o],["__file","2024-06-30-Invoke Spring  Cacheable from Another Method of Same Bean.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-06-30/2024-06-30-Invoke%20Spring%20%20Cacheable%20from%20Another%20Method%20of%20Same%20Bean.html","title":"在同一个Bean中调用@Cacheable方法","lang":"zh-CN","frontmatter":{"date":"2024-06-30T00:00:00.000Z","category":["Spring","Cache"],"tag":["Spring","Cacheable","AOP"],"head":[["meta",{"name":"keywords","content":"Spring, Cache, Cacheable, AOP, Spring Boot, Java"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-06-30/2024-06-30-Invoke%20Spring%20%20Cacheable%20from%20Another%20Method%20of%20Same%20Bean.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"在同一个Bean中调用@Cacheable方法"}],["meta",{"property":"og:description","content":"在同一个Bean中调用@Cacheable方法 Spring提供了一种基于注解的方法来启用Spring管理Bean的缓存。基于AOP技术，通过在方法上添加@Cacheable注解，可以很容易地使方法可缓存。然而，当从同一个类内部调用时，缓存将被忽略。 在本教程中，我们将解释为什么会发生这种情况以及如何解决它。 2. 重现问题 首先，我们创建一个启用了缓..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-30T09:53:49.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:tag","content":"Cacheable"}],["meta",{"property":"article:tag","content":"AOP"}],["meta",{"property":"article:published_time","content":"2024-06-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-30T09:53:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"在同一个Bean中调用@Cacheable方法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-30T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-30T09:53:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"在同一个Bean中调用@Cacheable方法 Spring提供了一种基于注解的方法来启用Spring管理Bean的缓存。基于AOP技术，通过在方法上添加@Cacheable注解，可以很容易地使方法可缓存。然而，当从同一个类内部调用时，缓存将被忽略。 在本教程中，我们将解释为什么会发生这种情况以及如何解决它。 2. 重现问题 首先，我们创建一个启用了缓..."},"headers":[{"level":2,"title":"2. 重现问题","slug":"_2-重现问题","link":"#_2-重现问题","children":[]},{"level":2,"title":"3. 分析问题","slug":"_3-分析问题","link":"#_3-分析问题","children":[]},{"level":2,"title":"4. 解决方案1：自我注入","slug":"_4-解决方案1-自我注入","link":"#_4-解决方案1-自我注入","children":[]},{"level":2,"title":"5. 解决方案2：编译时编织","slug":"_5-解决方案2-编译时编织","link":"#_5-解决方案2-编译时编织","children":[]},{"level":2,"title":"6. 解决方案3：加载时编织","slug":"_6-解决方案3-加载时编织","link":"#_6-解决方案3-加载时编织","children":[]},{"level":2,"title":"7. 结论","slug":"_7-结论","link":"#_7-结论","children":[]}],"git":{"createdTime":1719741229000,"updatedTime":1719741229000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":5.33,"words":1600},"filePathRelative":"posts/baeldung/2024-06-30/2024-06-30-Invoke Spring  Cacheable from Another Method of Same Bean.md","localizedDate":"2024年6月30日","excerpt":"<hr>\\n<h1>在同一个Bean中调用@Cacheable方法</h1>\\n<p>Spring提供了一种基于注解的方法来启用Spring管理Bean的缓存。基于AOP技术，通过在方法上添加@Cacheable注解，可以很容易地使方法可缓存。然而，当从同一个类内部调用时，缓存将被忽略。</p>\\n<p>在本教程中，我们将解释为什么会发生这种情况以及如何解决它。</p>\\n<h2>2. 重现问题</h2>\\n<p>首先，我们创建一个启用了缓存的Spring Boot应用程序。在本文中，我们创建了一个带有@Cacheable注解的square方法的MathService：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token annotation punctuation\\">@Service</span>\\n<span class=\\"token annotation punctuation\\">@CacheConfig</span><span class=\\"token punctuation\\">(</span>cacheNames <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"square\\"</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">MathService</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">final</span> <span class=\\"token class-name\\">AtomicInteger</span> counter <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">AtomicInteger</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token annotation punctuation\\">@CacheEvict</span><span class=\\"token punctuation\\">(</span>allEntries <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">AtomicInteger</span> <span class=\\"token function\\">resetCounter</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        counter<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">set</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> counter<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token annotation punctuation\\">@Cacheable</span><span class=\\"token punctuation\\">(</span>key <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"#n\\"</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">double</span> <span class=\\"token function\\">square</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">double</span> n<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        counter<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">incrementAndGet</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> n <span class=\\"token operator\\">*</span> n<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{r as comp,d as data};
