import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,o as s,a as e}from"./app-C5QtKXnb.js";const t={},p=e('<h1 id="javadoc注释中多行代码示例的格式" tabindex="-1"><a class="header-anchor" href="#javadoc注释中多行代码示例的格式"><span>Javadoc注释中多行代码示例的格式</span></a></h1><p>在本教程中，我们将探索不同的方式来格式化Javadoc注释。我们将<strong>专注于分析在文档注释中编写的代码片段的格式</strong>。</p><h2 id="_2-引言" tabindex="-1"><a class="header-anchor" href="#_2-引言"><span>2. 引言</span></a></h2><p>Javadoc是一个用于为Java类生成文档的工具。它<strong>处理Java源文件中指定的文档注释，并生成相应的HTML页面</strong>。</p><p>请参阅我们的文章以了解更多关于Javadoc文档的信息。</p><p>我们可以将代码片段作为Java类文档注释的一部分。我们希望在生成的HTML页面上查看具有正确缩进和字符的代码片段。</p><p>让我们尝试将Java代码片段作为我们的注释的一部分添加：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**\n * 这是展示Javadocs中代码片段格式默认行为的一个示例\n *\n */</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相应的HTML页面： <img src="https://www.baeldung.com/wp-content/uploads/2021/12/Javadoc-Default.png" alt="img" loading="lazy"></p><p><strong>默认情况下，在Javadoc注释中不保留换行和空格</strong>。这导致不当的缩进，特别是在多行代码片段的情况下。</p><p>让我们找到一种方法来保持注释中正确的缩进。</p><h3 id="_3-1-使用-pre-标签" tabindex="-1"><a class="header-anchor" href="#_3-1-使用-pre-标签"><span>3.1. 使用<code>&lt;pre&gt;</code>标签</span></a></h3><p>HTML提供了<code>&lt;pre&gt;</code>标签来表示预格式化的文本。<strong>它保留了所包含文本的空格和换行</strong>，从而保留了代码片段所需的缩进：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**\n * 这是展示在Javadocs中使用HTML pre标签进行代码片段格式的示例\n *\n * ``````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java">``````````</span></span>\n * <span class="token line"><span class="token code language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span></span>\n *     <span class="token line"><span class="token code language-java"><span class="token class-name">List</span>````````````</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Integer</span><span class="token punctuation">&gt;</span></span><span class="token code language-java">```````````` nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>\n * <span class="token line"><span class="token code language-java"><span class="token punctuation">}</span></span></span>\n * <span class="token line"><span class="token code language-java">````````</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span>````````\n *\n */</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相应的HTML页面： <img src="https://www.baeldung.com/wp-content/uploads/2021/12/Javadoc-PRE.png" alt="img" loading="lazy"></p><p>在这里，我们成功地保留了我们代码片段所需的空格和换行。然而，我们现在遇到了一个不同的问题：我们无法看到作为代码片段一部分输入的<strong>泛型</strong>。</p><p>由于注释被解析为HTML页面，<strong>代码片段的部分可能会被误解为HTML标签</strong>，就像上面例子中的<code>&lt;Integer&gt;</code>。</p><p>让我们探索保持注释中嵌入的HTML字符正确格式的方法。</p><h3 id="_3-2-使用html字符实体" tabindex="-1"><a class="header-anchor" href="#_3-2-使用html字符实体"><span>3.2. 使用HTML字符实体</span></a></h3><p>如果我们的代码片段包含HTML保留字符，如&#39;<code>&lt;&#39;、&#39;&gt;</code>&#39;或&#39;&amp;&#39;，这些在解析注释时可能会被解释为HTML字符。为了保留这些字符，<strong>我们可以使用字符实体</strong>来代替所需的字符。</p><p>例如，我们可以使用<code>&amp;lt;</code>来表示&#39;&lt;&#39;字符：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**\n * 这是展示在Javadocs中使用HTML字符实体进行代码片段格式的示例\n *\n * ``````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java">``````````</span></span>\n * <span class="token line"><span class="token code language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span></span>\n *     <span class="token line"><span class="token code language-java"><span class="token class-name">List</span></span><span class="token entity named-entity" title="&lt;">&amp;lt;</span><span class="token code language-java"><span class="token class-name">Integer</span></span><span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token code language-java"> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span></span><span class="token entity named-entity" title="&lt;">&amp;lt;</span><span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token code language-java"><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>\n * <span class="token line"><span class="token code language-java"><span class="token punctuation">}</span></span></span>\n * <span class="token line"><span class="token code language-java">````````</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span>````````\n *\n */</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相应的HTML页面： <img src="https://www.baeldung.com/wp-content/uploads/2021/12/Javadoc-CharacterEntities.png" alt="img" loading="lazy"></p><h3 id="_3-3-使用-code标签" tabindex="-1"><a class="header-anchor" href="#_3-3-使用-code标签"><span>3.3. 使用<code>@code</code>标签</span></a></h3><p>Javadoc提供了一个<code>@code</code>标签，它<strong>将括号内嵌入的注释视为源代码而不是HTML字符</strong>。这使我们能够直接使用HTML保留字符，而不需要使用字符实体来转义它们：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**\n * 这是展示在Javadocs中使用javadoc代码标签进行代码片段格式的示例\n *\n * ``````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span>``````````\n *\n * public class Application()<span class="token punctuation">{</span>\n *     <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">List</span>````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>```````````` nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span>````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>````````````<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token punctuation">}</span>\n * <span class="token punctuation">}</span>\n *\n * ````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span>````````\n *\n */</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相应的HTML页面： <img src="https://www.baeldung.com/wp-content/uploads/2021/12/Javadoc-Code-Tag.png" alt="img" loading="lazy"></p><p>请注意，<strong><code>@code</code>标签并不解决我们注释中涉及的缩进问题</strong>。为此，我们需要额外使用<code>&lt;pre&gt;</code>标签。</p><p>正如我们上面看到的，<strong>Javadoc使用&#39;@&#39;字符来识别标签</strong>。如果我们的代码片段中有&#39;@&#39;作为一部分，它将被Javadoc误解，导致注释渲染不正确。</p><p>让我们通过一个例子来看看：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**\n * 这是展示在Javadocs中使用注释时遇到的问题的示例\n *\n * ``````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span>``````````\n *\n * public class Application()<span class="token punctuation">{</span>\n *            @Getter\n *     <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">List</span>````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>```````````` nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span>````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>````````````<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token punctuation">}</span>\n * <span class="token punctuation">}</span>\n *\n * ````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span>````````\n *\n */</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相应的HTML页面： <img src="https://www.baeldung.com/wp-content/uploads/2021/12/Javadoc-Annotation-Issue.png" alt="img" loading="lazy"></p><p>正如我们所看到的，Javadoc将<code>@Getter</code>处理为一个标签，注释没有正确渲染。我们可以<strong>将注释（或使用&#39;@&#39;字符的代码）嵌入Javadoc提供的<code>@code</code>标签</strong>中：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**\n * 这是展示在Javadocs中使用javadoc代码标签处理&#39;@&#39;字符的示例\n *\n * ``````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span>``````````\n *\n * public class Application()<span class="token punctuation">{</span>\n *     <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token annotation punctuation">@Getter</span></span></span><span class="token punctuation">}</span>\n *     <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">List</span>````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>```````````` nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span>````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>````````````<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token punctuation">}</span>\n * <span class="token punctuation">}</span>\n *\n * ````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span>````````\n *\n */</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相应的HTML页面： <img src="https://www.baeldung.com/wp-content/uploads/2021/12/Javadoc-Annotations-Code-Tag.png" alt="img" loading="lazy"></p><h3 id="_3-4-使用-literal标签" tabindex="-1"><a class="header-anchor" href="#_3-4-使用-literal标签"><span>3.4. 使用<code>@literal</code>标签</span></a></h3><p>我们也可以通过使用<code>@literal</code>标签来实现<strong>类似的行为</strong>。<code>@code</code>标签和<code>@literal</code>标签的唯一区别在于**<code>@code</code>标签将封闭的文本格式化为代码字体**：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**\n * 这是展示javadoc字面量和代码标签之间差异的示例\n *\n * `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>`\n *\n * <span class="token punctuation">{</span><span class="token keyword">@literal</span> @Getter<span class="token punctuation">}</span>\n * <span class="token punctuation">{</span><span class="token keyword">@literal</span> List````````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Integer</span><span class="token punctuation">&gt;</span></span>```````````` nums = new ArrayList````````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Integer</span><span class="token punctuation">&gt;</span></span>````````````(); <span class="token punctuation">}</span>\n *\n * `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>`\n * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token annotation punctuation">@Getter</span></span></span><span class="token punctuation">}</span>\n * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">List</span>````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>```````````` nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span>````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>````````````<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span> <span class="token punctuation">}</span>\n * `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>`\n *\n */</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相应的HTML页面：</p><p>因此，我们在HTML页面上正确地渲染了代码片段。</p><h3 id="_3-5-格式化jquery代码片段" tabindex="-1"><a class="header-anchor" href="#_3-5-格式化jquery代码片段"><span>3.5. 格式化jQuery代码片段</span></a></h3><p>这里，我们以Java代码片段为例。相同的功能也适用于其他任何语言。</p><p>让我们将一个简单的jQuery代码片段作为文档注释包括进来：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**\n * 这是展示嵌入文档注释中的jQuery代码片段的示例\n * ``````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span>``````````\n * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">`<span class="token generics"><span class="token punctuation">&lt;</span>script<span class="token punctuation">&gt;</span></span>`</span></span><span class="token punctuation">}</span>\n * $(document).ready(function()<span class="token punctuation">{</span>\n *     console.log(&quot;Hello World!);\n * <span class="token punctuation">}</span>)\n * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">`<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>`</span></span><span class="token punctuation">}</span>\n * ````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span>````````\n *\n */</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相应的HTML页面：</p><h3 id="_3-6-格式化html代码片段" tabindex="-1"><a class="header-anchor" href="#_3-6-格式化html代码片段"><span>3.6. 格式化HTML代码片段</span></a></h3><p>到目前为止，我们已经意识到，一方面，Javadoc使我们能够使用HTML标签来格式化我们的注释，而另一方面，当我们想要在没有标记的情况下使用HTML字符时，它也可能导致问题。</p><p>例如，我们可能想要在我们的注释中插入HTML代码片段。</p><p>让我们将HTML代码片段作为我们文档注释的一部分插入，并看看它的行为如何：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**\n * 这是展示嵌入文档注释中的HTML代码片段的示例\n * ``````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java">``````````</span></span>\n * <span class="token line"><span class="token code language-java">``</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token code language-java">``</span></span>\n * <span class="token line"><span class="token code language-java">``</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token code language-java">``</span></span>\n * <span class="token line"><span class="token code language-java">``</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token code language-java">``<span class="token class-name">Hello</span> <span class="token class-name">World</span><span class="token operator">!</span>``</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token code language-java">``</span></span>\n * <span class="token line"><span class="token code language-java">``</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token code language-java">``</span></span>\n * <span class="token line"><span class="token code language-java">``</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span class="token code language-java">``</span></span>\n * <span class="token line"><span class="token code language-java">````````</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span>````````\n *\n */</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相应的HTML页面：</p><p>在这里，我们可以看到，嵌入注释中的代码片段已经被<strong>解析为带有HTML标记的HTML页面</strong>。我们可以使用上面讨论的**<code>@code</code>标签<strong>来</strong>解决问题**：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**\n * 这是展示嵌入文档注释中的HTML代码片段的示例\n * ``````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span>``````````<span class="token punctuation">{</span><span class="token keyword">@code</span>\n <span class="token code-section">* <span class="token code language-java">``<span class="token generics"><span class="token punctuation">&lt;</span>html<span class="token punctuation">&gt;</span></span>``</span>\n * <span class="token code language-java">``<span class="token generics"><span class="token punctuation">&lt;</span>body<span class="token punctuation">&gt;</span></span>``</span>\n * <span class="token code language-java">``<span class="token generics"><span class="token punctuation">&lt;</span>h1<span class="token punctuation">&gt;</span></span>``<span class="token class-name">Hello</span> <span class="token class-name">World</span><span class="token operator">!</span>``<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>``</span>\n * <span class="token code language-java">``<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span>``</span>\n * <span class="token code language-java">``<span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span>``</span>\n *</span> <span class="token punctuation">}</span>````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span>````````\n *\n */</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相应的HTML页面：</p><h2 id="_4-结论" tabindex="-1"><a class="header-anchor" href="#_4-结论"><span>4. 结论</span></a></h2><p>我们已经探索了不同的方式来格式化Javadoc注释。<strong>我们可以根据我们的要求选择格式化选项来生成格式良好的文档</strong>。</p><p>我们可以使用HTML标签来增强Javadoc注释的格式，并且在适当的时候也可以转义它们。</p>',57),c=[p];function l(o,i){return s(),n("div",null,c)}const r=a(t,[["render",l],["__file","2024-07-22-Multiple Line Code Example in Javadoc Comment.html.vue"]]),v=JSON.parse('{"path":"/posts/baeldung/2024-07-22/2024-07-22-Multiple%20Line%20Code%20Example%20in%20Javadoc%20Comment.html","title":"Javadoc注释中多行代码示例的格式","lang":"zh-CN","frontmatter":{"date":"2021-12-01T00:00:00.000Z","category":["Javadoc","多行代码示例"],"tag":["Java","文档","代码格式"],"head":[["meta",{"name":"keywords","content":"Javadoc, 多行代码, HTML, 格式, 文档生成"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-22/2024-07-22-Multiple%20Line%20Code%20Example%20in%20Javadoc%20Comment.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Javadoc注释中多行代码示例的格式"}],["meta",{"property":"og:description","content":"Javadoc注释中多行代码示例的格式 在本教程中，我们将探索不同的方式来格式化Javadoc注释。我们将专注于分析在文档注释中编写的代码片段的格式。 2. 引言 Javadoc是一个用于为Java类生成文档的工具。它处理Java源文件中指定的文档注释，并生成相应的HTML页面。 请参阅我们的文章以了解更多关于Javadoc文档的信息。 我们可以将代码..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.baeldung.com/wp-content/uploads/2021/12/Javadoc-Default.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-23T00:25:49.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"文档"}],["meta",{"property":"article:tag","content":"代码格式"}],["meta",{"property":"article:published_time","content":"2021-12-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-23T00:25:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Javadoc注释中多行代码示例的格式\\",\\"image\\":[\\"https://www.baeldung.com/wp-content/uploads/2021/12/Javadoc-Default.png\\",\\"https://www.baeldung.com/wp-content/uploads/2021/12/Javadoc-PRE.png\\",\\"https://www.baeldung.com/wp-content/uploads/2021/12/Javadoc-CharacterEntities.png\\",\\"https://www.baeldung.com/wp-content/uploads/2021/12/Javadoc-Code-Tag.png\\",\\"https://www.baeldung.com/wp-content/uploads/2021/12/Javadoc-Annotation-Issue.png\\",\\"https://www.baeldung.com/wp-content/uploads/2021/12/Javadoc-Annotations-Code-Tag.png\\"],\\"datePublished\\":\\"2021-12-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-23T00:25:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Javadoc注释中多行代码示例的格式 在本教程中，我们将探索不同的方式来格式化Javadoc注释。我们将专注于分析在文档注释中编写的代码片段的格式。 2. 引言 Javadoc是一个用于为Java类生成文档的工具。它处理Java源文件中指定的文档注释，并生成相应的HTML页面。 请参阅我们的文章以了解更多关于Javadoc文档的信息。 我们可以将代码..."},"headers":[{"level":2,"title":"2. 引言","slug":"_2-引言","link":"#_2-引言","children":[{"level":3,"title":"3.1. 使用<pre>标签","slug":"_3-1-使用-pre-标签","link":"#_3-1-使用-pre-标签","children":[]},{"level":3,"title":"3.2. 使用HTML字符实体","slug":"_3-2-使用html字符实体","link":"#_3-2-使用html字符实体","children":[]},{"level":3,"title":"3.3. 使用@code标签","slug":"_3-3-使用-code标签","link":"#_3-3-使用-code标签","children":[]},{"level":3,"title":"3.4. 使用@literal标签","slug":"_3-4-使用-literal标签","link":"#_3-4-使用-literal标签","children":[]},{"level":3,"title":"3.5. 格式化jQuery代码片段","slug":"_3-5-格式化jquery代码片段","link":"#_3-5-格式化jquery代码片段","children":[]},{"level":3,"title":"3.6. 格式化HTML代码片段","slug":"_3-6-格式化html代码片段","link":"#_3-6-格式化html代码片段","children":[]}]},{"level":2,"title":"4. 结论","slug":"_4-结论","link":"#_4-结论","children":[]}],"git":{"createdTime":1721694349000,"updatedTime":1721694349000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":5.43,"words":1629},"filePathRelative":"posts/baeldung/2024-07-22/2024-07-22-Multiple Line Code Example in Javadoc Comment.md","localizedDate":"2021年12月1日","excerpt":"\\n<p>在本教程中，我们将探索不同的方式来格式化Javadoc注释。我们将<strong>专注于分析在文档注释中编写的代码片段的格式</strong>。</p>\\n<h2>2. 引言</h2>\\n<p>Javadoc是一个用于为Java类生成文档的工具。它<strong>处理Java源文件中指定的文档注释，并生成相应的HTML页面</strong>。</p>\\n<p>请参阅我们的文章以了解更多关于Javadoc文档的信息。</p>\\n<p>我们可以将代码片段作为Java类文档注释的一部分。我们希望在生成的HTML页面上查看具有正确缩进和字符的代码片段。</p>\\n<p>让我们尝试将Java代码片段作为我们的注释的一部分添加：</p>","autoDesc":true}');export{r as comp,v as data};
