import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-DP78wUIH.js";const e={},p=t(`<h1 id="使用spring-data-jpa统计行数" tabindex="-1"><a class="header-anchor" href="#使用spring-data-jpa统计行数"><span>使用Spring Data JPA统计行数</span></a></h1><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p>Spring Data JPA 实现为 Jakarta Persistence API 提供了仓库支持，用于管理持久性，以及对象关系映射和函数。</p><p>在本教程中，我们将探索使用 JPA 统计表中行数的不同方法。</p><h2 id="_2-实体类" tabindex="-1"><a class="header-anchor" href="#_2-实体类"><span>2. 实体类</span></a></h2><p>以我们的示例来说，我们将使用具有与 <em>Permission</em> 实体一对一关系的 <em>Account</em> 实体：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span>
<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;ACCOUNTS&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Id</span>
    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy<span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">SEQUENCE</span><span class="token punctuation">,</span> generator <span class="token operator">=</span> <span class="token string">&quot;accounts_seq&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@SequenceGenerator</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;accounts_seq&quot;</span><span class="token punctuation">,</span> sequenceName <span class="token operator">=</span> <span class="token string">&quot;accounts_seq&quot;</span><span class="token punctuation">,</span> allocationSize <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;user_id&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> userId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Timestamp</span> createdOn<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Timestamp</span> lastLogin<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@OneToOne</span>
    <span class="token annotation punctuation">@JoinColumn</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;permissions_id&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Permission</span> permission<span class="token punctuation">;</span>

    <span class="token comment">// getters , setters</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>Permission</em> 属于账户实体：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span>
<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;PERMISSIONS&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Permission</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Id</span>
    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy<span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">SEQUENCE</span><span class="token punctuation">,</span> generator <span class="token operator">=</span> <span class="token string">&quot;permissions_id_sq&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@SequenceGenerator</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;permissions_id_sq&quot;</span><span class="token punctuation">,</span> sequenceName <span class="token operator">=</span> <span class="token string">&quot;permissions_id_sq&quot;</span><span class="token punctuation">,</span> allocationSize <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> type<span class="token punctuation">;</span>

    <span class="token comment">// getters , setters</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-使用-jpa-仓库" tabindex="-1"><a class="header-anchor" href="#_3-使用-jpa-仓库"><span>3. 使用 JPA 仓库</span></a></h2><p>Spring Data JPA 提供了一个可以扩展的仓库接口，<strong>提供了开箱即用的查询方法和派生查询方法，例如 <em>findAll()</em>, <em>findBy()</em>, <em>save(),</em> <em>saveAndFlush()</em>, <em>count()</em>, <em>countBy()</em>, <em>delete()</em>, 和 <em>deleteAll()</em>。</strong></p><p>我们将定义 <em>AccountRepository</em> 接口，它扩展了 <em>JpaRepository</em> 接口，这样我们就可以使用 <em>count</em> 方法了。</p><p>如果我们需要基于一个或多个条件进行计数，例如 <em>countByFirstname()</em>, <em>countByPermission()</em>, 或 <em>countByPermissionAndCredtedOnGreaterThan()</em>，我们只需要在 <em>AccountRepository</em> 接口中提供方法名称，然后查询派生将负责定义适当的 SQL：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Account</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>\` <span class="token punctuation">{</span>
    <span class="token keyword">long</span> <span class="token function">countByUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> <span class="token function">countByPermission</span><span class="token punctuation">(</span><span class="token class-name">Permission</span> permission<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> <span class="token function">countByPermissionAndCreatedOnGreaterThan</span><span class="token punctuation">(</span><span class="token class-name">Permission</span> permission<span class="token punctuation">,</span> <span class="token class-name">Timestamp</span> ts<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在下面的例子中，我们将在逻辑类中使用 <em>AccountRepository</em> 来执行计数操作。</p><h3 id="_3-1-统计表中的所有行" tabindex="-1"><a class="header-anchor" href="#_3-1-统计表中的所有行"><span><strong>3.1. 统计表中的所有行</strong></span></a></h3><p>我们将定义一个逻辑类，其中我们注入了 <em>AccountRepository</em>。对于简单的行 <em>count()</em> 操作，我们可以使用 <em>accountRepository.count()</em>，我们将得到结果：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountStatsLogic</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">AccountRepository</span> accountRepository<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getAccountCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> accountRepository<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-根据单个条件统计结果行" tabindex="-1"><a class="header-anchor" href="#_3-2-根据单个条件统计结果行"><span>3.2. 根据单个条件统计结果行</span></a></h3><p>正如我们上面定义的，<em>AccountRepository</em> 包含了方法名 <em>countByPermission</em> 和 <em>countByUsername</em>，因此 Spring Data JPA 查询派生将为这些方法派生查询。</p><p>我们可以在逻辑类中使用这些方法进行条件计数，我们将得到结果：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountStatsLogic</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">AccountRepository</span> accountRepository<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">PermissionRepository</span> permissionRepository<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getAccountCountByUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token string">&quot;user2&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> accountRepository<span class="token punctuation">.</span><span class="token function">countByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getAccountCountByPermission</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Permission</span> permission <span class="token operator">=</span> permissionRepository<span class="token punctuation">.</span><span class="token function">findByType</span><span class="token punctuation">(</span><span class="token string">&quot;reader&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> accountRepository<span class="token punctuation">.</span><span class="token function">countByPermission</span><span class="token punctuation">(</span>permission<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-根据多个条件统计结果行" tabindex="-1"><a class="header-anchor" href="#_3-3-根据多个条件统计结果行"><span><strong>3.3. 根据多个条件统计结果行</strong></span></a></h3><p>我们也可以在我们的查询派生中包括多个条件，比如下面的示例，我们包括了 <em>Permission</em> 和 <em>CreatedOnGreaterThan</em>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountStatsLogic</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">AccountRepository</span> accountRepository<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">PermissionRepository</span> permissionRepository<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getAccountCountByPermissionAndCreatedOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Permission</span> permission <span class="token operator">=</span> permissionRepository<span class="token punctuation">.</span><span class="token function">findByType</span><span class="token punctuation">(</span><span class="token string">&quot;reader&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Date</span> parsedDate <span class="token operator">=</span> <span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> accountRepository<span class="token punctuation">.</span><span class="token function">countByPermissionAndCreatedOnGreaterThan</span><span class="token punctuation">(</span>permission<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Timestamp</span><span class="token punctuation">(</span>parsedDate<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-使用-criteriaquery" tabindex="-1"><a class="header-anchor" href="#_4-使用-criteriaquery"><span>4. 使用 CriteriaQuery</span></a></h2><p>JPA 中统计行数的另一种方法是使用 <em>CriteriaQuery</em> 接口。<strong>这个接口允许我们以面向对象的方式编写查询，这样我们就可以跳过编写原始 SQL 查询的知识。</strong></p><p>它要求我们构建一个 <em>CriteriaBuilder</em> 对象，然后帮助我们构建 <em>CriteriaQuery</em> <strong>_。</strong> 一旦 <em>CriteriaQuery</em> 准备好，我们就可以使用 <em>entityManager</em> 的 <em>createQuery</em> 方法执行查询并获取结果。</p><h3 id="_4-1-统计所有行" tabindex="-1"><a class="header-anchor" href="#_4-1-统计所有行"><span><strong>4.1. 统计所有行</strong></span></a></h3><p>现在，当我们使用 <em>CriteriaQuery</em> 构建查询时，我们可以定义一个选择查询来计数：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getAccountsUsingCQ</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建标准构建器和查询</span>
    <span class="token class-name">CriteriaBuilder</span> builder <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">getCriteriaBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">CriteriaQuery</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span>\`\`\` criteriaQuery <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Root</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Account</span><span class="token punctuation">&gt;</span></span>\`\`\` accountRoot <span class="token operator">=</span> criteriaQuery<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name">Account</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 选择查询</span>
    criteriaQuery<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>accountRoot<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

     <span class="token comment">// 执行并获取结果</span>
    <span class="token keyword">return</span> entityManager<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>criteriaQuery<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSingleResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-根据单个条件统计结果行" tabindex="-1"><a class="header-anchor" href="#_4-2-根据单个条件统计结果行"><span><strong>4.2. 根据单个条件统计结果行</strong></span></a></h3><p>我们也可以扩展选择查询以包括 <em>where</em> 条件来过滤我们的查询。我们可以向我们的构建器实例添加一个 <em>Predicate</em> 并将其传递到 <em>where</em> 子句：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getAccountsByPermissionUsingCQ</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span> <span class="token punctuation">{</span>
    <span class="token class-name">CriteriaBuilder</span> builder <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">getCriteriaBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">CriteriaQuery</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span>\`\`\` criteriaQuery <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Root</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Account</span><span class="token punctuation">&gt;</span></span>\`\`\` accountRoot <span class="token operator">=</span> criteriaQuery<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name">Account</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">List</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Predicate</span><span class="token punctuation">&gt;</span></span>\`\` predicateList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将进入 where 子句的谓词列表</span>
    predicateList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>accountRoot<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;permission&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> permissionRepository<span class="token punctuation">.</span><span class="token function">findByType</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    criteriaQuery
      <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>accountRoot<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>predicateList<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Predicate</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> entityManager<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>criteriaQuery<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSingleResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-根据多个条件统计结果行" tabindex="-1"><a class="header-anchor" href="#_4-3-根据多个条件统计结果行"><span><strong>4.3. 根据多个条件统计结果行</strong></span></a></h3><p>在我们的谓词中，我们可以为过滤我们的查询添加多个条件。构建器实例提供了条件方法，例如 <em>equal()</em> 和 <em>greaterThan</em> <em>()</em>，以支持查询中的条件：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getAccountsByPermissionAndCreateOnUsingCQ</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span> <span class="token punctuation">{</span>
    <span class="token class-name">CriteriaBuilder</span> builder <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">getCriteriaBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">CriteriaQuery</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span>\`\`\` criteriaQuery <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Root</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Account</span><span class="token punctuation">&gt;</span></span>\`\`\` accountRoot <span class="token operator">=</span> criteriaQuery<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name">Account</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">List</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Predicate</span><span class="token punctuation">&gt;</span></span>\`\` predicateList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    predicateList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>accountRoot<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;permission&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> permissionRepository<span class="token punctuation">.</span><span class="token function">findByType</span><span class="token punctuation">(</span><span class="token string">&quot;reader&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    predicateList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">greaterThan</span><span class="token punctuation">(</span>accountRoot<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;createdOn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Timestamp</span><span class="token punctuation">(</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    criteriaQuery
      <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>accountRoot<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>predicateList<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Predicate</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> entityManager<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>criteriaQuery<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSingleResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-使用-jpql-查询" tabindex="-1"><a class="header-anchor" href="#_5-使用-jpql-查询"><span>5. 使用 JPQL 查询</span></a></h2><p>执行计数的另一种方法是使用 JPQL。<strong>JPQL 查询针对实体工作，而不是直接针对数据库，这或多或少看起来像 SQL 查询。</strong> 我们总是可以编写一个 JPQL 查询来在 JPA 中计数行。</p><h3 id="_5-1-统计所有行" tabindex="-1"><a class="header-anchor" href="#_5-1-统计所有行"><span><strong>5.1. 统计所有行</strong></span></a></h3><p><em>entityManager</em> 提供了一个 <em>createQuery()</em> 方法，它接受 JPQL 查询作为参数，并对数据库执行该查询：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getAccountsUsingJPQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span> <span class="token punctuation">{</span>
    <span class="token class-name">Query</span> query <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT COUNT(*) FROM Account a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> query<span class="token punctuation">.</span><span class="token function">getSingleResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-根据单个条件统计结果行" tabindex="-1"><a class="header-anchor" href="#_5-2-根据单个条件统计结果行"><span><strong>5.2. 根据单个条件统计结果行</strong></span></a></h3><p>在 JPQL 查询中，我们可以包括 <em>WHERE</em> 条件，就像我们在原始 SQL 中做的那样，来过滤查询并计数返回的行：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getAccountsByPermissionUsingJPQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span> <span class="token punctuation">{</span>
    <span class="token class-name">Query</span> query <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT COUNT(*) FROM Account a WHERE a.permission = ?1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    query<span class="token punctuation">.</span><span class="token function">setParameter</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> permissionRepository<span class="token punctuation">.</span><span class="token function">findByType</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> query<span class="token punctuation">.</span><span class="token function">getSingleResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3-根据多个条件统计结果行" tabindex="-1"><a class="header-anchor" href="#_5-3-根据多个条件统计结果行"><span>5.3. 根据多个条件统计结果行</span></a></h3><p>在 JPQL 查询中，我们可以在 <em>WHERE</em> 子句中包括多个条件，就像我们在原始 SQL 中做的那样，来过滤查询并计数返回的行：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getAccountsByPermissionAndCreatedOnUsingJPQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span> <span class="token punctuation">{</span>
    <span class="token class-name">Query</span> query <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>&quot;<span class="token class-name">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span>\`\`\`java
<span class="token constant">FROM</span> <span class="token class-name">Account</span> a <span class="token constant">WHERE</span> a<span class="token punctuation">.</span>permission <span class="token operator">=</span> <span class="token operator">?</span><span class="token number">1</span> and a<span class="token punctuation">.</span>createdOn <span class="token operator">&gt;</span> <span class="token operator">?</span><span class="token number">2</span>&quot;<span class="token punctuation">)</span><span class="token punctuation">;</span>
    query<span class="token punctuation">.</span><span class="token function">setParameter</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> permissionRepository<span class="token punctuation">.</span><span class="token function">findByType</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    query<span class="token punctuation">.</span><span class="token function">setParameter</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Timestamp</span><span class="token punctuation">(</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> query<span class="token punctuation">.</span><span class="token function">getSingleResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-结论" tabindex="-1"><a class="header-anchor" href="#_6-结论"><span>6. 结论</span></a></h2><p>在本文中，我们学习了在 JPA 中统计行数的不同方法。规范，如 <em>CriteriaBuilder</em> 和 Spring Data JPA 查询派生，帮助我们轻松编写具有不同条件的计数查询。</p><p>尽管 <em>CriteriaQuery</em> 和 Spring Data JPA 查询派生帮助我们构建不需要原始 SQL 知识的查询，但在某些用例中，我们可能想要使用 JPQL 编写原始 SQL。</p><p>如常，示例代码可在 GitHub 上找到。</p><p><a href="https://www.baeldung.com/wp-content/themes/baeldung/icon/logo.svg" target="_blank" rel="noopener noreferrer">Baeldung Logo</a><a href="https://secure.gravatar.com/avatar/d82fbabc9027e80cdaaff7c0646c9bf0?s=50&amp;r=g" target="_blank" rel="noopener noreferrer">Gravatar Logo</a><a href="https://www.baeldung.com/wp-content/uploads/custom_avatars/viniok-150x150.jpg" target="_blank" rel="noopener noreferrer">Viniok Avatar</a><a href="https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png" target="_blank" rel="noopener noreferrer">Announcement Icon</a><a href="https://www.baeldung.com/wp-content/uploads/2016/05/baeldung-persistence-post-footer-main-1.2.0.jpg" target="_blank" rel="noopener noreferrer">Persistence Post Footer Main</a><a href="https://www.baeldung.com/wp-content/uploads/2016/05/baeldung-persistence-post-footer-icn-1.0.0.png" target="_blank" rel="noopener noreferrer">Persistence Post Footer Icn</a></p><p>OK</p>`,54),o=[p];function c(i,l){return a(),s("div",null,o)}const k=n(e,[["render",c],["__file","2024-07-03-Count the Number of Rows in Spring Data JPA.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-03/2024-07-03-Count%20the%20Number%20of%20Rows%20in%20Spring%20Data%20JPA.html","title":"使用Spring Data JPA统计行数","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Spring Data JPA","JPA"],"tag":["row count","JPA Repository","CriteriaQuery","JPQL"],"head":[["meta",{"name":"keywords","content":"Spring Data JPA, row count, CriteriaQuery, JPQL"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-03/2024-07-03-Count%20the%20Number%20of%20Rows%20in%20Spring%20Data%20JPA.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"使用Spring Data JPA统计行数"}],["meta",{"property":"og:description","content":"使用Spring Data JPA统计行数 1. 概述 Spring Data JPA 实现为 Jakarta Persistence API 提供了仓库支持，用于管理持久性，以及对象关系映射和函数。 在本教程中，我们将探索使用 JPA 统计表中行数的不同方法。 2. 实体类 以我们的示例来说，我们将使用具有与 Permission 实体一对一关系的 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-03T09:34:55.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"row count"}],["meta",{"property":"article:tag","content":"JPA Repository"}],["meta",{"property":"article:tag","content":"CriteriaQuery"}],["meta",{"property":"article:tag","content":"JPQL"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-03T09:34:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用Spring Data JPA统计行数\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-03T09:34:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"使用Spring Data JPA统计行数 1. 概述 Spring Data JPA 实现为 Jakarta Persistence API 提供了仓库支持，用于管理持久性，以及对象关系映射和函数。 在本教程中，我们将探索使用 JPA 统计表中行数的不同方法。 2. 实体类 以我们的示例来说，我们将使用具有与 Permission 实体一对一关系的 ..."},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. 实体类","slug":"_2-实体类","link":"#_2-实体类","children":[]},{"level":2,"title":"3. 使用 JPA 仓库","slug":"_3-使用-jpa-仓库","link":"#_3-使用-jpa-仓库","children":[{"level":3,"title":"3.1. 统计表中的所有行","slug":"_3-1-统计表中的所有行","link":"#_3-1-统计表中的所有行","children":[]},{"level":3,"title":"3.2. 根据单个条件统计结果行","slug":"_3-2-根据单个条件统计结果行","link":"#_3-2-根据单个条件统计结果行","children":[]},{"level":3,"title":"3.3. 根据多个条件统计结果行","slug":"_3-3-根据多个条件统计结果行","link":"#_3-3-根据多个条件统计结果行","children":[]}]},{"level":2,"title":"4. 使用 CriteriaQuery","slug":"_4-使用-criteriaquery","link":"#_4-使用-criteriaquery","children":[{"level":3,"title":"4.1. 统计所有行","slug":"_4-1-统计所有行","link":"#_4-1-统计所有行","children":[]},{"level":3,"title":"4.2. 根据单个条件统计结果行","slug":"_4-2-根据单个条件统计结果行","link":"#_4-2-根据单个条件统计结果行","children":[]},{"level":3,"title":"4.3. 根据多个条件统计结果行","slug":"_4-3-根据多个条件统计结果行","link":"#_4-3-根据多个条件统计结果行","children":[]}]},{"level":2,"title":"5. 使用 JPQL 查询","slug":"_5-使用-jpql-查询","link":"#_5-使用-jpql-查询","children":[{"level":3,"title":"5.1. 统计所有行","slug":"_5-1-统计所有行","link":"#_5-1-统计所有行","children":[]},{"level":3,"title":"5.2. 根据单个条件统计结果行","slug":"_5-2-根据单个条件统计结果行","link":"#_5-2-根据单个条件统计结果行","children":[]},{"level":3,"title":"5.3. 根据多个条件统计结果行","slug":"_5-3-根据多个条件统计结果行","link":"#_5-3-根据多个条件统计结果行","children":[]}]},{"level":2,"title":"6. 结论","slug":"_6-结论","link":"#_6-结论","children":[]}],"git":{"createdTime":1719999295000,"updatedTime":1719999295000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":5.19,"words":1556},"filePathRelative":"posts/baeldung/2024-07-03/2024-07-03-Count the Number of Rows in Spring Data JPA.md","localizedDate":"2022年4月1日","excerpt":"\\n<h2>1. 概述</h2>\\n<p>Spring Data JPA 实现为 Jakarta Persistence API 提供了仓库支持，用于管理持久性，以及对象关系映射和函数。</p>\\n<p>在本教程中，我们将探索使用 JPA 统计表中行数的不同方法。</p>\\n<h2>2. 实体类</h2>\\n<p>以我们的示例来说，我们将使用具有与 <em>Permission</em> 实体一对一关系的 <em>Account</em> 实体：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token annotation punctuation\\">@Entity</span>\\n<span class=\\"token annotation punctuation\\">@Table</span><span class=\\"token punctuation\\">(</span>name<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"ACCOUNTS\\"</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Account</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token annotation punctuation\\">@Id</span>\\n    <span class=\\"token annotation punctuation\\">@GeneratedValue</span><span class=\\"token punctuation\\">(</span>strategy<span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">GenerationType</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">SEQUENCE</span><span class=\\"token punctuation\\">,</span> generator <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"accounts_seq\\"</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token annotation punctuation\\">@SequenceGenerator</span><span class=\\"token punctuation\\">(</span>name <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"accounts_seq\\"</span><span class=\\"token punctuation\\">,</span> sequenceName <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"accounts_seq\\"</span><span class=\\"token punctuation\\">,</span> allocationSize <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token annotation punctuation\\">@Column</span><span class=\\"token punctuation\\">(</span>name <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"user_id\\"</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">int</span> userId<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">String</span> username<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">String</span> password<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">String</span> email<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">Timestamp</span> createdOn<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">Timestamp</span> lastLogin<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token annotation punctuation\\">@OneToOne</span>\\n    <span class=\\"token annotation punctuation\\">@JoinColumn</span><span class=\\"token punctuation\\">(</span>name <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"permissions_id\\"</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">Permission</span> permission<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// getters , setters</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{k as comp,d as data};
