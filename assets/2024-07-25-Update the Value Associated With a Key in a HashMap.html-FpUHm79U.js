import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-DWhzy7sT.js";const p={},e=t(`<h1 id="在hashmap中更新与给定键关联的值" tabindex="-1"><a class="header-anchor" href="#在hashmap中更新与给定键关联的值"><span>在HashMap中更新与给定键关联的值</span></a></h1><p>这篇文章将介绍在Java的HashMap中更新与给定键关联的值的不同方法。首先，我们将查看Java 8之前可用的一些常见解决方案。然后，我们将查看Java 8及以上版本中可用的一些额外解决方案。</p><h2 id="_2-初始化我们的示例hashmap" tabindex="-1"><a class="header-anchor" href="#_2-初始化我们的示例hashmap"><span>2. 初始化我们的示例HashMap</span></a></h2><p>为了展示如何在HashMap中更新值，我们首先需要创建并填充一个。因此，我们将创建一个以水果为键，它们的价格为值的映射：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Map</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span>\` priceMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
priceMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token number">2.45</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
priceMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;grapes&quot;</span><span class="token punctuation">,</span> <span class="token number">1.22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将在整个示例中使用这个HashMap。现在，我们已经准备好熟悉更新HashMap键关联值的方法了。</p><h2 id="_3-java-8之前" tabindex="-1"><a class="header-anchor" href="#_3-java-8之前"><span>3. Java 8之前</span></a></h2><p>让我们从Java 8之前可用的方法开始。</p><h3 id="_3-1-put方法" tabindex="-1"><a class="header-anchor" href="#_3-1-put方法"><span>3.1. put方法</span></a></h3><p>put方法可以更新值或添加新条目。如果使用已存在的键，则put方法将更新关联的值。否则，它将添加一个新的(key, value)对。</p><p>让我们通过两个快速示例来测试这个方法的行为：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenFruitMap_whenPuttingAList_thenHashMapUpdatesAndInsertsValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Double</span> newValue <span class="token operator">=</span> <span class="token number">2.11</span><span class="token punctuation">;</span>
    fruitMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    fruitMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;orange&quot;</span><span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span> fruitMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>fruitMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">&quot;orange&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span> fruitMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;orange&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>键apple已经在映射中。因此，第一个断言将会通过。</p><p>由于orange在映射中不存在，put方法将添加它。因此，其他两个断言也将通过。</p><h3 id="_3-2-containskey和put方法的组合" tabindex="-1"><a class="header-anchor" href="#_3-2-containskey和put方法的组合"><span>3.2. containsKey和put方法的组合</span></a></h3><p>containsKey和put方法的组合是另一种在HashMap中更新键的值的方法。这个选项检查映射是否已经包含一个键。如果是这样，我们可以使用put方法更新值。否则，我们可以向映射中添加一个条目或什么都不做。</p><p>在我们的例子中，我们将通过一个简单的测试来检查这种方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenFruitMap_whenKeyExists_thenValuesUpdated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">double</span> newValue <span class="token operator">=</span> <span class="token number">2.31</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fruitMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        fruitMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">,</span> fruitMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于apple在映射中，containsKey方法将返回true。因此，将执行对put方法的调用，并将更新值。</p><h2 id="_4-java-8及以上" tabindex="-1"><a class="header-anchor" href="#_4-java-8及以上"><span>4. Java 8及以上</span></a></h2><p>从Java 8开始，许多新方法可用于简化在HashMap中更新键的值的过程。让我们来了解它们。</p><h3 id="_4-1-replace方法" tabindex="-1"><a class="header-anchor" href="#_4-1-replace方法"><span>4.1. replace方法</span></a></h3><p>自版本8以来，Map接口中有两个重载的replace方法。让我们看看方法签名：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> oldValue<span class="token punctuation">,</span> <span class="token class-name">V</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>第一个replace方法只接受一个键和一个新值。它还返回旧值。</p><p>让我们看看这个方法是如何工作的：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenFruitMap_whenReplacingOldValue_thenNewValueSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">double</span> newPrice <span class="token operator">=</span> <span class="token number">3.22</span><span class="token punctuation">;</span>
    <span class="token class-name">Double</span> applePrice <span class="token operator">=</span> fruitMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Double</span> oldValue <span class="token operator">=</span> fruitMap<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> newPrice<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertNotNull</span><span class="token punctuation">(</span>oldValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>oldValue<span class="token punctuation">,</span> applePrice<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>newPrice<span class="token punctuation">)</span><span class="token punctuation">,</span> fruitMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>键apple的值将使用replace方法更新为新价格。因此，第二个和第三个断言将会通过。</p><p>然而，第一个断言很有趣。如果我们的HashMap中没有apple这个键怎么办？如果我们尝试更新一个不存在的键的值，将返回null。考虑到这一点，另一个问题出现了：如果有一个键的值为null怎么办？我们无法知道从replace方法返回的值确实是提供键的值，还是我们尝试更新了一个不存在的键的值。</p><p>为了避免误解，我们可以使用第二个replace方法。它接受三个参数：</p><ul><li>一个键</li><li>与键关联的当前值</li><li>要与键关联的新值</li></ul><p>它将在一个条件下更新键的值到一个新值：如果第二个参数是当前值，键的值将更新为一个新值。该方法返回true表示成功更新。否则，返回false。</p><p>让我们实现一些测试来检查第二个replace方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenFruitMap_whenReplacingWithRealOldValue_thenNewValueSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">double</span> newPrice <span class="token operator">=</span> <span class="token number">3.22</span><span class="token punctuation">;</span>
    <span class="token class-name">Double</span> applePrice <span class="token operator">=</span> fruitMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">boolean</span> isUpdated <span class="token operator">=</span> fruitMap<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> applePrice<span class="token punctuation">,</span> newPrice<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>isUpdated<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenFruitMap_whenReplacingWithWrongOldValue_thenNewValueNotSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">double</span> newPrice <span class="token operator">=</span> <span class="token number">3.22</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> isUpdated <span class="token operator">=</span> fruitMap<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> newPrice<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertFalse</span><span class="token punctuation">(</span>isUpdated<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于第一个测试使用当前键的值调用replace方法，该值将被替换。</p><p>另一方面，第二个测试没有使用当前值调用。因此，返回false。</p><h3 id="_4-2-getordefault和put方法的组合" tabindex="-1"><a class="header-anchor" href="#_4-2-getordefault和put方法的组合"><span>4.2. getOrDefault和put方法的组合</span></a></h3><p>如果我们没有为提供的键设置条目，getOrDefault方法是一个完美的选择。在这种情况下，我们为不存在的键设置默认值。然后，该条目被添加到映射中。</p><p>这种方法可以让我们轻松避免NullPointerException。</p><p>让我们尝试使用一个原本不在映射中的键来使用这种组合：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenFruitMap_whenGetOrDefaultUsedWithPut_thenNewEntriesAdded</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    fruitMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;plum&quot;</span><span class="token punctuation">,</span> fruitMap<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span><span class="token string">&quot;plum&quot;</span><span class="token punctuation">,</span> <span class="token number">2.41</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>fruitMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">&quot;plum&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">2.41</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fruitMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;plum&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于没有这样的键，getOrDefault方法将返回默认值。然后，put方法将添加一个新的(key, value)对。因此，所有的断言都会通过。</p><h3 id="_4-3-putifabsent方法" tabindex="-1"><a class="header-anchor" href="#_4-3-putifabsent方法"><span>4.3. putIfAbsent方法</span></a></h3><p>putIfAbsent方法与前面的getOrDefault和put方法的组合相同。</p><p>如果HashMap中没有提供键的对，putIfAbsent方法将添加该对。但是，如果有这样的对，putIfAbsent方法不会更改映射。</p><p>但有一个例外：如果现有的对有一个null值，那么这个对将被更新为一个新值。</p><p>让我们实现putIfAbsent方法的测试。我们将用两个示例来测试它的行为：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenFruitMap_whenPutIfAbsentUsed_thenNewEntriesAdded</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">double</span> newValue <span class="token operator">=</span> <span class="token number">1.78</span><span class="token punctuation">;</span>
    fruitMap<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    fruitMap<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span><span class="token string">&quot;pear&quot;</span><span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>fruitMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">&quot;pear&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertNotEquals</span><span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">,</span> fruitMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">,</span> fruitMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;pear&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>键apple在映射中。putIfAbsent方法不会更改它的当前值。</p><p>同时，键pear不在映射中。因此，它将被添加。</p><h3 id="_4-4-compute方法" tabindex="-1"><a class="header-anchor" href="#_4-4-compute方法"><span>4.4. compute方法</span></a></h3><p>compute方法根据作为第二个参数提供的BiFunction更新键的值。如果映射中不存在该键，我们可以预期一个NullPointerException。</p><p>让我们通过一个简单的测试来检查这个方法的行为：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenFruitMap_whenComputeUsed_thenValueUpdated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">double</span> oldPrice <span class="token operator">=</span> fruitMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BiFunction</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span>\` powFunction <span class="token operator">=</span> <span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    fruitMap<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> powFunction<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>
      <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>oldPrice<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fruitMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertThrows</span><span class="token punctuation">(</span>
      <span class="token class-name">NullPointerException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> fruitMap<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token string">&quot;blueberry&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> powFunction<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如预期的那样，由于键apple存在，映射中的值将被更新。另一方面，没有键blueberry，所以最后一个断言中的compute方法的第二个调用将导致一个NullPointerException。</p><h3 id="_4-5-computeifabsent方法" tabindex="-1"><a class="header-anchor" href="#_4-5-computeifabsent方法"><span>4.5. computeIfAbsent方法</span></a></h3><p>前面的方法是如果HashMap中没有特定键的对就会抛出异常。computeIfAbsent方法将通过添加一个(key, value)对来更新映射，如果它不存在的话。</p><p>让我们测试这个方法的行为：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenFruitMap_whenComputeIfAbsentUsed_thenNewEntriesAdded</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    fruitMap<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span><span class="token string">&quot;lemon&quot;</span><span class="token punctuation">,</span> k <span class="token operator">-&gt;</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>fruitMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">&quot;lemon&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">&quot;lemon&quot;</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fruitMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;lemon&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>键lemon不在映射中。因此，computeIfAbsent方法将添加一个条目。</p><h3 id="_4-6-compute" tabindex="-1"><a class="header-anchor" href="#_4-6-compute"><span>4.6. compute</span></a></h3>`,61),o=[e];function c(u,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","2024-07-25-Update the Value Associated With a Key in a HashMap.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-25/2024-07-25-Update%20the%20Value%20Associated%20With%20a%20Key%20in%20a%20HashMap.html","title":"在HashMap中更新与给定键关联的值","lang":"zh-CN","frontmatter":{"date":"2024-07-25T00:00:00.000Z","category":["Java","HashMap"],"tag":["Java 8","更新键值"],"head":[["meta",{"name":"keywords","content":"Java, HashMap, 更新值, 键值对"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-25/2024-07-25-Update%20the%20Value%20Associated%20With%20a%20Key%20in%20a%20HashMap.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"在HashMap中更新与给定键关联的值"}],["meta",{"property":"og:description","content":"在HashMap中更新与给定键关联的值 这篇文章将介绍在Java的HashMap中更新与给定键关联的值的不同方法。首先，我们将查看Java 8之前可用的一些常见解决方案。然后，我们将查看Java 8及以上版本中可用的一些额外解决方案。 2. 初始化我们的示例HashMap 为了展示如何在HashMap中更新值，我们首先需要创建并填充一个。因此，我们将创..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-25T11:53:25.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java 8"}],["meta",{"property":"article:tag","content":"更新键值"}],["meta",{"property":"article:published_time","content":"2024-07-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-25T11:53:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"在HashMap中更新与给定键关联的值\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-25T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-25T11:53:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"在HashMap中更新与给定键关联的值 这篇文章将介绍在Java的HashMap中更新与给定键关联的值的不同方法。首先，我们将查看Java 8之前可用的一些常见解决方案。然后，我们将查看Java 8及以上版本中可用的一些额外解决方案。 2. 初始化我们的示例HashMap 为了展示如何在HashMap中更新值，我们首先需要创建并填充一个。因此，我们将创..."},"headers":[{"level":2,"title":"2. 初始化我们的示例HashMap","slug":"_2-初始化我们的示例hashmap","link":"#_2-初始化我们的示例hashmap","children":[]},{"level":2,"title":"3. Java 8之前","slug":"_3-java-8之前","link":"#_3-java-8之前","children":[{"level":3,"title":"3.1. put方法","slug":"_3-1-put方法","link":"#_3-1-put方法","children":[]},{"level":3,"title":"3.2. containsKey和put方法的组合","slug":"_3-2-containskey和put方法的组合","link":"#_3-2-containskey和put方法的组合","children":[]}]},{"level":2,"title":"4. Java 8及以上","slug":"_4-java-8及以上","link":"#_4-java-8及以上","children":[{"level":3,"title":"4.1. replace方法","slug":"_4-1-replace方法","link":"#_4-1-replace方法","children":[]},{"level":3,"title":"4.2. getOrDefault和put方法的组合","slug":"_4-2-getordefault和put方法的组合","link":"#_4-2-getordefault和put方法的组合","children":[]},{"level":3,"title":"4.3. putIfAbsent方法","slug":"_4-3-putifabsent方法","link":"#_4-3-putifabsent方法","children":[]},{"level":3,"title":"4.4. compute方法","slug":"_4-4-compute方法","link":"#_4-4-compute方法","children":[]},{"level":3,"title":"4.5. computeIfAbsent方法","slug":"_4-5-computeifabsent方法","link":"#_4-5-computeifabsent方法","children":[]},{"level":3,"title":"4.6. compute","slug":"_4-6-compute","link":"#_4-6-compute","children":[]}]}],"git":{"createdTime":1721908405000,"updatedTime":1721908405000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":5.55,"words":1664},"filePathRelative":"posts/baeldung/2024-07-25/2024-07-25-Update the Value Associated With a Key in a HashMap.md","localizedDate":"2024年7月25日","excerpt":"\\n<p>这篇文章将介绍在Java的HashMap中更新与给定键关联的值的不同方法。首先，我们将查看Java 8之前可用的一些常见解决方案。然后，我们将查看Java 8及以上版本中可用的一些额外解决方案。</p>\\n<h2>2. 初始化我们的示例HashMap</h2>\\n<p>为了展示如何在HashMap中更新值，我们首先需要创建并填充一个。因此，我们将创建一个以水果为键，它们的价格为值的映射：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token class-name\\">Map</span>`<span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Double</span><span class=\\"token punctuation\\">&gt;</span></span>` priceMap <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">HashMap</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\npriceMap<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"apple\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2.45</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\npriceMap<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"grapes\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1.22</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}');export{r as comp,d as data};
