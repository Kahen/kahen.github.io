import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-D9qUUkNr.js";const e={},o=t(`<h1 id="lombok-配置系统" tabindex="-1"><a class="header-anchor" href="#lombok-配置系统"><span>Lombok 配置系统</span></a></h1><p>在本教程中，我们将讨论 Lombok 的配置参数。我们将介绍许多不同的选项以及如何正确设置我们的配置。</p><h2 id="_2-配置概述" tabindex="-1"><a class="header-anchor" href="#_2-配置概述"><span>2. 配置概述</span></a></h2><p>Lombok 是一个库，它帮助我们消除了 Java 应用程序中几乎所有的标准样板代码。我们将测试许多属性和配置。第一件事是添加 Lombok 依赖项：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\`
    \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>\`org.projectlombok\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\`
    \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`lombok\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`
    \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\`1.18.30\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\`
    \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>\`provided\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>\`
\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Lombok 的配置系统为我们提供了许多有价值的设置，这些设置通常在项目的所有组件中都是相同的。然而，它还允许我们更改或自定义 Lombok 的行为，有时甚至定义了所有可用功能中哪些可以使用或不能使用。例如，我们可以告诉 Lombok，如果使用任何实验性功能，则显示警告或错误。</p><h3 id="要开始定义或自定义-lombok-的行为-我们必须创建一个名为-lombok-config-的文件。这个文件可以放在项目的根目录、源代码或任何包中。一旦创建-所有子目录中的源文件都将继承在该文件中定义的配置。可以有多个配置文件。例如-我们可以在根目录中定义一个包含通用属性的配置文件-并在给定包中创建另一个定义其他属性的配置文件。" tabindex="-1"><a class="header-anchor" href="#要开始定义或自定义-lombok-的行为-我们必须创建一个名为-lombok-config-的文件。这个文件可以放在项目的根目录、源代码或任何包中。一旦创建-所有子目录中的源文件都将继承在该文件中定义的配置。可以有多个配置文件。例如-我们可以在根目录中定义一个包含通用属性的配置文件-并在给定包中创建另一个定义其他属性的配置文件。"><span>要开始定义或自定义 Lombok 的行为，我们必须创建一个名为 <code>lombok.config</code> 的文件。这个文件可以放在项目的根目录、源代码或任何包中。一旦创建，所有子目录中的源文件都将继承在该文件中定义的配置。可以有多个配置文件。例如，我们可以在根目录中定义一个包含通用属性的配置文件，并在给定包中创建另一个定义其他属性的配置文件。</span></a></h3><p>新的配置将影响给定包中的所有类以及所有子包。此外，在多个定义相同属性的情况下，最接近类或成员的定义优先。</p><h2 id="_3-基本配置" tabindex="-1"><a class="header-anchor" href="#_3-基本配置"><span>3. 基本配置</span></a></h2><p>首先值得一提的是，有太多的功能属性需要讨论。因此，我们只看到最常见的一些。要检查可用选项，请访问 Lombok 页面，下载 jar，并在终端中运行以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">java</span> <span class="token parameter variable">-jar</span> lombok.jar config <span class="token parameter variable">-g</span> <span class="token parameter variable">--verbose</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>作为结果，我们将看到所有属性及其可能值的完整列表，以及简短的描述，解释其目标。</p><p>现在，让我们看看一个典型的 <code>lombok.config</code> 文件：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">config.stopBubbling</span> <span class="token punctuation">=</span> <span class="token value attr-value">true</span>
<span class="token key attr-name">lombok.anyconstructor.addconstructorproperties</span> <span class="token punctuation">=</span> <span class="token value attr-value">false</span>
<span class="token key attr-name">lombok.addLombokGeneratedAnnotation</span> <span class="token punctuation">=</span> <span class="token value attr-value">true</span>
<span class="token key attr-name">lombok.experimental.flagUsage</span> <span class="token punctuation">=</span> <span class="token value attr-value">WARNING</span>

<span class="token comment"># ... 更多属性</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>文件中使用的属性仅供示例。我们将在后面讨论它们。但在这里，我们可以观察 Lombok 属性的格式及其定义。</p><h3 id="让我们从-config-stopbubbling-属性开始——这个选项告诉配置系统不要在父目录中搜索配置文件。将此属性添加到工作区或项目的根目录是一个好习惯。默认情况下-它的值为-false。" tabindex="-1"><a class="header-anchor" href="#让我们从-config-stopbubbling-属性开始——这个选项告诉配置系统不要在父目录中搜索配置文件。将此属性添加到工作区或项目的根目录是一个好习惯。默认情况下-它的值为-false。"><span>让我们从 <code>config.stopBubbling</code> 属性开始——这个选项告诉配置系统不要在父目录中搜索配置文件。将此属性添加到工作区或项目的根目录是一个好习惯。默认情况下，它的值为 <code>false</code>。</span></a></h3><h2 id="_4-主要属性" tabindex="-1"><a class="header-anchor" href="#_4-主要属性"><span>4. 主要属性</span></a></h2><h3 id="_4-1-全局配置键" tabindex="-1"><a class="header-anchor" href="#_4-1-全局配置键"><span>4.1. 全局配置键</span></a></h3><p><strong>全局配置键是可能影响配置系统本身的许多配置</strong>。接下来，我们将看到一些这样的键的例子。</p><p>我们将讨论的第一个键是 <code>lombok.anyConstructor.addConstructorProperties</code>。它为所有带参数的构造函数添加了 <code>@java.beans.ConstructorProperties</code> 注解。通常，使用构造函数反射的框架需要这个注解来映射属性并知道构造函数中参数的正确顺序。以下是 Lombok 版本中的代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token annotation punctuation">@Getter</span>
<span class="token annotation punctuation">@Setter</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> balance<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> accountHolder<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里是生成的代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> balance<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> accountHolder<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@ConstructorProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;balance&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;accountHolder&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Generated</span>
    <span class="token keyword">public</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token keyword">double</span> balance<span class="token punctuation">,</span> <span class="token class-name">String</span> accountHolder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> balance<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>accountHolder <span class="token operator">=</span> accountHolder<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Generated</span>
    <span class="token keyword">public</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token comment">// 默认生成的 getter 和 setter</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码片段中，我们可以看到生成的类包含了 <code>@ConstructorProperties</code> 注解。</p><p>接下来，我们有 <code>lombok.addLombokGeneratedAnnotation</code>。如果为 <code>true</code>，Lombok 将使用 <code>@lombok.Generated</code> 标记所有生成的方法。当从包扫描或代码覆盖工具中移除 Lombok 生成的方法时，这非常有用。</p><p>另一个有用的键是 <code>lombok.addNullAnnotations</code>。这个属性支持许多内置选项，如 javax (JSR305)、eclipse、JetBrains、NetBeans、Android 等。也可以使用我们自己定义的注解，如 <code>CUSTOM:com.example.NonNull:example.Nullable</code>。Lombok 会在合适的时候添加 <code>nullable</code> 或 <code>NotNull</code> 注解。</p><p>最后，我们有 <code>lombok.addSuppressWarnings</code>，如果为 <code>false</code>，Lombok 将停止添加注解 <code>@SuppressWarnings(&quot;all&quot;)</code>，这是当前的默认行为。如果我们在生成的代码上使用静态分析器，这很有用。</p><h3 id="_4-2-其他配置键" tabindex="-1"><a class="header-anchor" href="#_4-2-其他配置键"><span>4.2. 其他配置键</span></a></h3><p>作为第一个特定于特性的键 <code>lombok.accessors.chain</code>，如果为 <code>true</code>，将改变 setter 方法的行为。这些方法将返回 <code>this</code> 而不是 <code>void</code>，允许调用链式操作，如下所示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">should_initialize_account</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Account</span> myAccount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">setBalance</span><span class="token punctuation">(</span><span class="token number">2000.00</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">setAccountHolder</span><span class="token punctuation">(</span><span class="token string">&quot;John Snow&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2000.00</span><span class="token punctuation">,</span> myAccount<span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;John Snow&quot;</span><span class="token punctuation">,</span> myAccount<span class="token punctuation">.</span><span class="token function">getAccountHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类似于前面的，<code>lombok.accessors.fluent</code> 使 Lombok 移除访问器方法中的 <code>set</code> 和 <code>get</code> 前缀，只使用属性名称来命名它们。</p><p><code>lombok.log.fieldName</code> 键在用户配置时更改生成的日志字段的名称。默认情况下，<code>lombok.log.fieldName</code> 键使用 <code>log</code> 来命名字段，但在我们的示例中，我们将其更改为 <code>domainLog</code>：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token comment"># 日志名称自定义</span>
<span class="token key attr-name">lombok.log.fieldName</span> <span class="token punctuation">=</span> <span class="token value attr-value">domainLog</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们可以在操作中看到它：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token annotation punctuation">@Getter</span>
<span class="token annotation punctuation">@Setter</span>
<span class="token annotation punctuation">@Log</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>

    <span class="token comment">// 与之前定义的相同</span>

   <span class="token keyword">public</span> <span class="token class-name">Account</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token keyword">double</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">-</span> <span class="token function">abs</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            domainLog<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Level</span><span class="token punctuation">.</span><span class="token constant">INFO</span><span class="token punctuation">,</span> <span class="token string">&quot;Transaction denied for account holder: %s&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>accountHolder<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;Not enough balance, you have %.2f&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>balance<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">-=</span> <span class="token function">abs</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来是 <code>lombok.(featureName).flagUsage</code>。这组属性有 <code>warning</code>、<code>error</code> 和 <code>allow</code> 作为可能的值。我们可以使用它们来控制项目中允许使用哪些 Lombok 特性。例如，可以使用单词 <code>experimental</code> 和值 <code>warning</code>，在日志中输出一条消息，如果使用任何实验性特性：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token operator">/</span>home<span class="token operator">/</span>dev<span class="token operator">/</span>repository<span class="token operator">/</span>git<span class="token operator">/</span>tutorials<span class="token operator">/</span>lombok<span class="token operator">/</span>src<span class="token operator">/</span>main<span class="token operator">/</span>java<span class="token operator">/</span>com<span class="token operator">/</span>baeldung<span class="token operator">/</span>lombok<span class="token operator">/</span>configexamples<span class="token operator">/</span><span class="token class-name">TransactionLog</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">9</span><span class="token operator">:</span>
 warning<span class="token operator">:</span> <span class="token class-name">Use</span> of any lombok<span class="token punctuation">.</span>experimental feature is flagged according <span class="token keyword">to</span> <span class="token namespace">lombok</span> configuration<span class="token punctuation">.</span>
<span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;op&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-特殊配置键" tabindex="-1"><a class="header-anchor" href="#_4-3-特殊配置键"><span>4.3. 特殊配置键</span></a></h3><p>有些键不是常见的键值属性，如 <code>lombok.copyableAnnotations</code>。这个属性与其他属性不同，因为它表示一个完全限定的注解类型的列表。当向字段添加这些注解时，Lombok 会将这些注解复制到与该字段相关的构造函数、getter 和 setter 中。<strong>这个特性的典型用例是 Spring 中的 bean 定义，其中经常需要将注解 <code>@Qualifier</code> 和 <code>@Value</code> 复制到构造函数参数中</strong>。其他框架也利用了这个特性。</p><p>要将注解添加到列表中，用户必须使用以下表达式：<code>lombok.copyableAnnotations += com.test.MyAnnotation</code>。该库使用这种机制来传播前面提到的可空注解：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@Getter</span>
<span class="token annotation punctuation">@Setter</span>
<span class="token annotation punctuation">@Log</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@NonNull</span>
    <span class="token keyword">private</span> <span class="token class-name">Double</span> balance <span class="token operator">=</span> <span class="token number">0.</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@NonNull</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> accountHolder <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">// 其他方法</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，由 Lombok 生成的代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Generated</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> domainLog <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">Account</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@NonNull</span>
    <span class="token keyword">private</span> <span class="token class-name">Double</span> balance <span class="token operator">=</span> <span class="token number">0.0D</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@NonNull</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> accountHolder <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@ConstructorProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;balance&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;accountHolder&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Generated</span>
    <span class="token keyword">public</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Double</span> balance<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> <span class="token class-name">String</span> accountHolder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>balance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">&quot;balance is marked non-null but is null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>accountHolder <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">&quot;accountHolder is marked non-null but is null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> balance<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>accountHolder <span class="token operator">=</span> accountHolder<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@NonNull</span>
    <span class="token annotation punctuation">@Generated</span>
    <span class="token keyword">public</span> <span class="token class-name">Double</span> <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>balance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@NonNull</span>
    <span class="token annotation punctuation">@Generated</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getAccountHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>accountHolder<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 类的其余成员...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们有一个 \`</p>`,44),p=[o];function c(l,i){return s(),a("div",null,p)}const d=n(e,[["render",c],["__file","2024-07-22-Lombok Configuration System.html.vue"]]),k=JSON.parse('{"path":"/posts/baeldung/2024-07-22/2024-07-22-Lombok%20Configuration%20System.html","title":"Lombok 配置系统","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","Lombok"],"tag":["Lombok","配置"],"head":[["meta",{"name":"keywords","content":"Lombok, 配置, Java"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-22/2024-07-22-Lombok%20Configuration%20System.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Lombok 配置系统"}],["meta",{"property":"og:description","content":"Lombok 配置系统 在本教程中，我们将讨论 Lombok 的配置参数。我们将介绍许多不同的选项以及如何正确设置我们的配置。 2. 配置概述 Lombok 是一个库，它帮助我们消除了 Java 应用程序中几乎所有的标准样板代码。我们将测试许多属性和配置。第一件事是添加 Lombok 依赖项： Lombok 的配置系统为我们提供了许多有价值的设置，这些..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-22T21:16:46.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Lombok"}],["meta",{"property":"article:tag","content":"配置"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-22T21:16:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Lombok 配置系统\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-22T21:16:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Lombok 配置系统 在本教程中，我们将讨论 Lombok 的配置参数。我们将介绍许多不同的选项以及如何正确设置我们的配置。 2. 配置概述 Lombok 是一个库，它帮助我们消除了 Java 应用程序中几乎所有的标准样板代码。我们将测试许多属性和配置。第一件事是添加 Lombok 依赖项： Lombok 的配置系统为我们提供了许多有价值的设置，这些..."},"headers":[{"level":2,"title":"2. 配置概述","slug":"_2-配置概述","link":"#_2-配置概述","children":[{"level":3,"title":"要开始定义或自定义 Lombok 的行为，我们必须创建一个名为 lombok.config 的文件。这个文件可以放在项目的根目录、源代码或任何包中。一旦创建，所有子目录中的源文件都将继承在该文件中定义的配置。可以有多个配置文件。例如，我们可以在根目录中定义一个包含通用属性的配置文件，并在给定包中创建另一个定义其他属性的配置文件。","slug":"要开始定义或自定义-lombok-的行为-我们必须创建一个名为-lombok-config-的文件。这个文件可以放在项目的根目录、源代码或任何包中。一旦创建-所有子目录中的源文件都将继承在该文件中定义的配置。可以有多个配置文件。例如-我们可以在根目录中定义一个包含通用属性的配置文件-并在给定包中创建另一个定义其他属性的配置文件。","link":"#要开始定义或自定义-lombok-的行为-我们必须创建一个名为-lombok-config-的文件。这个文件可以放在项目的根目录、源代码或任何包中。一旦创建-所有子目录中的源文件都将继承在该文件中定义的配置。可以有多个配置文件。例如-我们可以在根目录中定义一个包含通用属性的配置文件-并在给定包中创建另一个定义其他属性的配置文件。","children":[]}]},{"level":2,"title":"3. 基本配置","slug":"_3-基本配置","link":"#_3-基本配置","children":[{"level":3,"title":"让我们从 config.stopBubbling 属性开始——这个选项告诉配置系统不要在父目录中搜索配置文件。将此属性添加到工作区或项目的根目录是一个好习惯。默认情况下，它的值为 false。","slug":"让我们从-config-stopbubbling-属性开始——这个选项告诉配置系统不要在父目录中搜索配置文件。将此属性添加到工作区或项目的根目录是一个好习惯。默认情况下-它的值为-false。","link":"#让我们从-config-stopbubbling-属性开始——这个选项告诉配置系统不要在父目录中搜索配置文件。将此属性添加到工作区或项目的根目录是一个好习惯。默认情况下-它的值为-false。","children":[]}]},{"level":2,"title":"4. 主要属性","slug":"_4-主要属性","link":"#_4-主要属性","children":[{"level":3,"title":"4.1. 全局配置键","slug":"_4-1-全局配置键","link":"#_4-1-全局配置键","children":[]},{"level":3,"title":"4.2. 其他配置键","slug":"_4-2-其他配置键","link":"#_4-2-其他配置键","children":[]},{"level":3,"title":"4.3. 特殊配置键","slug":"_4-3-特殊配置键","link":"#_4-3-特殊配置键","children":[]}]}],"git":{"createdTime":1721683006000,"updatedTime":1721683006000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":5.64,"words":1692},"filePathRelative":"posts/baeldung/2024-07-22/2024-07-22-Lombok Configuration System.md","localizedDate":"2022年4月1日","excerpt":"\\n<p>在本教程中，我们将讨论 Lombok 的配置参数。我们将介绍许多不同的选项以及如何正确设置我们的配置。</p>\\n<h2>2. 配置概述</h2>\\n<p>Lombok 是一个库，它帮助我们消除了 Java 应用程序中几乎所有的标准样板代码。我们将测试许多属性和配置。第一件事是添加 Lombok 依赖项：</p>\\n<div class=\\"language-xml\\" data-ext=\\"xml\\" data-title=\\"xml\\"><pre class=\\"language-xml\\"><code>`<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>dependency</span><span class=\\"token punctuation\\">&gt;</span></span>`\\n    `<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>groupId</span><span class=\\"token punctuation\\">&gt;</span></span>`org.projectlombok`<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>groupId</span><span class=\\"token punctuation\\">&gt;</span></span>`\\n    `<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>artifactId</span><span class=\\"token punctuation\\">&gt;</span></span>`lombok`<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>artifactId</span><span class=\\"token punctuation\\">&gt;</span></span>`\\n    `<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>version</span><span class=\\"token punctuation\\">&gt;</span></span>`1.18.30`<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>version</span><span class=\\"token punctuation\\">&gt;</span></span>`\\n    `<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>scope</span><span class=\\"token punctuation\\">&gt;</span></span>`provided`<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>scope</span><span class=\\"token punctuation\\">&gt;</span></span>`\\n`<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>dependency</span><span class=\\"token punctuation\\">&gt;</span></span>`\\n</code></pre></div>","autoDesc":true}');export{d as comp,k as data};
