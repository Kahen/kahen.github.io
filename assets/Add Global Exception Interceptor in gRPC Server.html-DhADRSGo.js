import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as e}from"./app-tmY21j6_.js";const t={},p=e('<h1 id="在grpc服务器中添加全局异常拦截器" tabindex="-1"><a class="header-anchor" href="#在grpc服务器中添加全局异常拦截器"><span>在gRPC服务器中添加全局异常拦截器</span></a></h1><p>在本教程中，我们将探讨gRPC服务器应用程序中拦截器的作用，以处理全局异常。</p><p>拦截器可以在请求到达RPC方法之前进行验证或操作。因此，它们对于处理应用程序的常见问题非常有用，例如日志记录、安全性、缓存、审计、身份验证和授权等。</p><p>应用程序也可以使用拦截器作为全局异常处理器。</p><p>主要地，拦截器可以帮助处理两种类型的异常：</p><ul><li>处理从无法处理它们的方法中逃逸的未知运行时异常</li><li>处理从任何其他下游拦截器中逃逸的异常</li></ul><p>拦截器可以帮助以集中的方式创建一个处理异常的框架。这样，应用程序就可以有一个一致的标准和强大的方法来处理异常。</p><p>它们可以以各种方式处理异常：</p><ul><li>记录或持久化异常，用于审计或报告目的</li><li>创建支持票据</li><li>在将错误响应发送回客户端之前修改或丰富错误响应</li></ul><h3 id="_3-高级设计全局异常处理器" tabindex="-1"><a class="header-anchor" href="#_3-高级设计全局异常处理器"><span>3. 高级设计全局异常处理器</span></a></h3><p>拦截器可以将传入的请求转发到目标RPC服务。然而，当目标RPC方法抛出异常时，它可以捕获它，然后适当地处理它。</p><p>让我们假设有一个订单处理微服务。我们将使用拦截器开发一个全局异常处理器，以捕获从微服务中的RPC方法逃逸的异常。此外，拦截器还捕获从任何下游拦截器逃逸的异常。然后，它调用票据服务在票务系统中提出票据。最后，将响应发送回客户端。</p><p>让我们看看当RPC端点失败时请求的遍历路径：</p><p>同样，让我们看看当日志拦截器失败时请求的遍历路径：</p><p>首先，我们将在protobuf文件_order_processing.proto_中定义订单处理服务的基类：</p><div class="language-protobuf line-numbers-mode" data-ext="protobuf" data-title="protobuf"><pre class="language-protobuf"><code><span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">&quot;proto3&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">package</span> orderprocessing<span class="token punctuation">;</span>\n\n<span class="token keyword">option</span> java_multiple_files <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token keyword">option</span> java_package <span class="token operator">=</span> <span class="token string">&quot;com.baeldung.grpc.orderprocessing&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">message</span> <span class="token class-name">OrderRequest</span> <span class="token punctuation">{</span>\n  <span class="token builtin">string</span> product <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token builtin">int32</span> quantity <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n  <span class="token builtin">float</span> price <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">message</span> <span class="token class-name">OrderResponse</span> <span class="token punctuation">{</span>\n  <span class="token builtin">string</span> response <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token builtin">string</span> orderID <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n  <span class="token builtin">string</span> error <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">service</span> <span class="token class-name">OrderProcessor</span> <span class="token punctuation">{</span>\n  <span class="token keyword">rpc</span> <span class="token function">createOrder</span><span class="token punctuation">(</span><span class="token class-name">OrderRequest</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token class-name">OrderResponse</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>_order_processing.proto_文件定义了_OrderProcessor_带有远程方法_createOrder()<em>和两个DTOs_OrderRequest_和_OrderResponse</em>。</p><p>让我们看看在接下来的部分中我们将实现的主要类：</p><p>稍后，我们可以使用_order_processing.proto_文件生成支持Java源代码，以实现_OrderProcessorImpl_和_GlobalExeptionInterceptor_。Maven插件生成了类_OrderRequest_、<em>OrderResponse_和_OrderProcessorGrpc</em>。</p><p>我们将在实现部分讨论这些类中的每一个。</p><h3 id="_4-实现" tabindex="-1"><a class="header-anchor" href="#_4-实现"><span>4. 实现</span></a></h3><p>我们将实现一个可以处理所有类型异常的拦截器。异常可能是由于某些失败逻辑显式引发的，也可能是由于某些未预见的错误引发的。</p><h3 id="_4-1-实现全局异常处理器" tabindex="-1"><a class="header-anchor" href="#_4-1-实现全局异常处理器"><span>4.1. 实现全局异常处理器</span></a></h3><p>在gRPC应用程序中，拦截器必须实现_ServerInterceptor_接口的_interceptCall()_方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">ServerInterceptor</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> ````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ReqT</span><span class="token punctuation">,</span> <span class="token class-name">RespT</span><span class="token punctuation">&gt;</span></span>```````````` <span class="token class-name">ServerCall<span class="token punctuation">.</span>Listener</span>```````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ReqT</span><span class="token punctuation">&gt;</span></span>``````` <span class="token function">interceptCall</span><span class="token punctuation">(</span><span class="token class-name">ServerCall</span>````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ReqT</span><span class="token punctuation">,</span> <span class="token class-name">RespT</span><span class="token punctuation">&gt;</span></span>```````````` serverCall<span class="token punctuation">,</span> <span class="token class-name">Metadata</span> headers<span class="token punctuation">,</span>\n        <span class="token class-name">ServerCallHandler</span>````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ReqT</span><span class="token punctuation">,</span> <span class="token class-name">RespT</span><span class="token punctuation">&gt;</span></span>```````````` next<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">ServerCall<span class="token punctuation">.</span>Listener</span>```````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ReqT</span><span class="token punctuation">&gt;</span></span>``````` delegate <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            delegate <span class="token operator">=</span> next<span class="token punctuation">.</span><span class="token function">startCall</span><span class="token punctuation">(</span>serverCall<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token function">handleInterceptorException</span><span class="token punctuation">(</span>ex<span class="token punctuation">,</span> serverCall<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ForwardingServerCallListener<span class="token punctuation">.</span>SimpleForwardingServerCallListener</span>```````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ReqT</span><span class="token punctuation">&gt;</span></span>```````<span class="token punctuation">(</span>delegate<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token annotation punctuation">@Override</span>\n            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onHalfClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">try</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onHalfClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token function">handleEndpointException</span><span class="token punctuation">(</span>ex<span class="token punctuation">,</span> serverCall<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">static</span> ````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ReqT</span><span class="token punctuation">,</span> <span class="token class-name">RespT</span><span class="token punctuation">&gt;</span></span>```````````` <span class="token keyword">void</span> <span class="token function">handleEndpointException</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">,</span> <span class="token class-name">ServerCall</span>````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ReqT</span><span class="token punctuation">,</span> <span class="token class-name">RespT</span><span class="token punctuation">&gt;</span></span>```````````` serverCall<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> ticket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TicketService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createTicket</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        serverCall<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token class-name">Status</span><span class="token punctuation">.</span><span class="token constant">INTERNAL</span>\n            <span class="token punctuation">.</span><span class="token function">withCause</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">withDescription</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;, Ticket raised:&quot;</span> <span class="token operator">+</span> ticket<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Metadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">private</span> ````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ReqT</span><span class="token punctuation">,</span> <span class="token class-name">RespT</span><span class="token punctuation">&gt;</span></span>```````````` <span class="token class-name">ServerCall<span class="token punctuation">.</span>Listener</span>```````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ReqT</span><span class="token punctuation">&gt;</span></span>``````` <span class="token function">handleInterceptorException</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">,</span> <span class="token class-name">ServerCall</span>````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ReqT</span><span class="token punctuation">,</span> <span class="token class-name">RespT</span><span class="token punctuation">&gt;</span></span>```````````` serverCall<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> ticket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TicketService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createTicket</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        serverCall<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token class-name">Status</span><span class="token punctuation">.</span><span class="token constant">INTERNAL</span>\n            <span class="token punctuation">.</span><span class="token function">withCause</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">withDescription</span><span class="token punctuation">(</span><span class="token string">&quot;An exception occurred in a **subsequent** interceptor:&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;, Ticket raised:&quot;</span> <span class="token operator">+</span> ticket<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Metadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ServerCall<span class="token punctuation">.</span>Listener</span>```````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ReqT</span><span class="token punctuation">&gt;</span></span>```````<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// no-op</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>_interceptCall()_方法有三个输入参数：</p><ul><li><em>ServerCall</em>：帮助接收响应消息</li><li><em>Metadata</em>：保存传入请求的元数据</li><li><em>ServerCallHandler</em>：帮助将传入的服务器调用分派到拦截器链中的下一个处理器</li></ul><p>该方法有两个_try_–_catch_块。第一个处理从任何后续下游拦截器抛出的未捕获异常。在catch块中，我们调用_handleInterceptorException()_方法为异常创建一个票据。最后，它返回一个_ServerCall.Listener_对象，这是一个回调方法。</p><p>同样，第二个_try_–_catch_块处理从RPC端点抛出的未捕获异常。_interceptCall()<em>方法返回_ServerCall.Listener</em>，它作为传入RPC消息的回调。具体来说，它返回一个_ForwardingServerCallListener_的实例。_SimpleForwardingServerCallListener_是_ServerCall.Listener_的子类。</p><p>为了处理从下游方法抛出的异常，我们重写了_ForwardingServerCallListener_类中的_onHalfClose()_方法。<em>SimpleForwardingServerCallListener</em>。它在客户端完成发送消息后被调用。</p><p>在这个方法中，_super.onHalfClose()<em>将请求转发到_OrderProcessorImpl_类中的RPC端点_createOrder()</em>。如果在端点中有未捕获的异常，我们捕获异常，然后调用_handleEndpointException()_来创建一个票据。最后，我们调用_serverCall_对象上的_close()_方法来关闭服务器调用，并将响应发送回客户端。</p><h3 id="_4-2-注册全局异常处理器" tabindex="-1"><a class="header-anchor" href="#_4-2-注册全局异常处理器"><span>4.2. 注册全局异常处理器</span></a></h3><p>我们在启动期间创建_io.grpc.Server_对象时注册拦截器：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderProcessingServer</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Server</span> server <span class="token operator">=</span> <span class="token class-name">ServerBuilder</span><span class="token punctuation">.</span><span class="token function">forPort</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">addService</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OrderProcessorImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LogInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GlobalExceptionInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        server<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        server<span class="token punctuation">.</span><span class="token function">awaitTermination</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将_GlobalExceptionInterceptor_对象传递给_io.grpc.ServerBuilder_类的_intercept()<em>方法。这确保了对_OrderProcessorImpl_服务的任何RPC调用都会通过_GlobalExceptionInterceptor</em>。同样，我们调用_addService()_方法来注册_OrderProcessorImpl_服务。最后，我们在_Server_对象上调用_start()_方法来启动服务器应用程序。</p><h3 id="_4-3-处理来自端点的未捕获异常" tabindex="-1"><a class="header-anchor" href="#_4-3-处理来自端点的未捕获异常"><span>4.3. 处理来自端点的未捕获异常</span></a></h3><p>为了演示异常处理器，让我们首先看看_OrderProcessorImpl_类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderProcessorImpl</span> <span class="token keyword">extends</span> <span class="token class-name">OrderProcessorGrpc<span class="token punctuation">.</span>OrderProcessorImplBase</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createOrder</span><span class="token punctuation">(</span><span class="token class-name">OrderRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">StreamObserver</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderResponse</span><span class="token punctuation">&gt;</span></span>` responseObserver<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">validateOrder</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n             <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StatusRuntimeException</span><span class="token punctuation">(</span><span class="token class-name">Status</span><span class="token punctuation">.</span><span class="token constant">FAILED_PRECONDITION</span><span class="token punctuation">.</span><span class="token function">withDescription</span><span class="token punctuation">(</span><span class="token string">&quot;Order Validation failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token class-name">OrderResponse</span> orderResponse <span class="token operator">=</span> <span class="token function">processOrder</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            responseObserver<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>orderResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            responseObserver<span class="token punctuation">.</span><span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> <span class="token function">validateOrder</span><span class="token punctuation">(</span><span class="token class-name">OrderRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> tax <span class="token operator">=</span> <span class="token number">100</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">private</span> <span class="token class-name">OrderResponse</span> <span class="token function">processOrder</span><span class="token punctuation">(</span><span class="token class-name">OrderRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token class-name">OrderResponse</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">setOrderID</span><span class="token punctuation">(</span><span class="token string">&quot;ORD-5566&quot;</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">setResponse</span><span class="token punctuation">(</span><span class="token string">&quot;Order placed successfully&quot;</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>_RPC方法_createOrder()_首先验证订单，然后通过调用_processOrder()_方法来处理它。在_validateOrder()_方法中，我们故意通过除以零来强制运行时异常。</p><p>现在，让我们运行服务并看看它如何处理异常：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">whenRuntimeExceptionInRPCEndpoint_thenHandleException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">OrderRequest</span> orderRequest <span class="token operator">=</span> <span class="token class-name">OrderRequest</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">setProduct</span><span class="token punctuation">(</span><span class="token string">&quot;PRD-7788&quot;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">setQuantity</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        <span class="token class-name">OrderResponse</span> response <span class="token operator">=</span> orderProcessorBlockingStub<span class="token punctuation">.</span><span class="token function">createOrder</span><span class="token punctuation">(</span>orderRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">StatusRuntimeException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">assertTrue</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;Ticket raised:TKT&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们创建_OrderRequest_对象，然后将其传递给客户端存根中的_createOrder()_方法。正如预期的那样，服务抛出了异常。当我们检查异常中的描述时，我们发现票据信息嵌入在其中。因此，它表明_GlobalExceptionInterceptor_完成了它的工作。</p><p>这对于流式传输的情况也同样有效。</p><h3 id="_4-4-处理来自拦截器的未捕获异常" tabindex="-1"><a class="header-anchor" href="#_4-4-处理来自拦截器的未捕获异常"><span>4.4. 处理来自拦截器的未捕获异常</span></a></h3><p>让我们假设有一个在_GlobalExceptionInterceptor_之后被继续翻译：</p><p>调用的第二个拦截器。LogInterceptor_记录所有传入的请求以供审计。让我们看看它：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">ServerInterceptor</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> ````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ReqT</span><span class="token punctuation">,</span> <span class="token class-name">RespT</span><span class="token punctuation">&gt;</span></span>```````````` <span class="token class-name">ServerCall<span class="token punctuation">.</span>Listener</span>```````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ReqT</span><span class="token punctuation">&gt;</span></span>``````` <span class="token function">interceptCall</span><span class="token punctuation">(</span><span class="token class-name">ServerCall</span>````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ReqT</span><span class="token punctuation">,</span> <span class="token class-name">RespT</span><span class="token punctuation">&gt;</span></span>```````````` serverCall<span class="token punctuation">,</span> <span class="token class-name">Metadata</span> metadata<span class="token punctuation">,</span>\n        <span class="token class-name">ServerCallHandler</span>````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ReqT</span><span class="token punctuation">,</span> <span class="token class-name">RespT</span><span class="token punctuation">&gt;</span></span>```````````` next<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">logMessage</span><span class="token punctuation">(</span>serverCall<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">ServerCall<span class="token punctuation">.</span>Listener</span>```````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ReqT</span><span class="token punctuation">&gt;</span></span>``````` delegate <span class="token operator">=</span> next<span class="token punctuation">.</span><span class="token function">startCall</span><span class="token punctuation">(</span>serverCall<span class="token punctuation">,</span> metadata<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> delegate<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">private</span> ````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ReqT</span><span class="token punctuation">,</span> <span class="token class-name">RespT</span><span class="token punctuation">&gt;</span></span>```````````` <span class="token keyword">void</span> <span class="token function">logMessage</span><span class="token punctuation">(</span><span class="token class-name">ServerCall</span>````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ReqT</span><span class="token punctuation">,</span> <span class="token class-name">RespT</span><span class="token punctuation">&gt;</span></span>```````````` call<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">100</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在_LogInterceptor_中，_interceptCall()_方法调用_logMessage()_在将请求转发到RPC端点之前记录消息。_logMessage()_方法故意执行除以零以引发运行时异常，以演示_GlobalExceptionInterceptor_的能力。</p><p>让我们运行服务并看看它如何处理从_LogInterceptor_抛出的异常：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">whenRuntimeExceptionInLogInterceptor_thenHandleException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">OrderRequest</span> orderRequest <span class="token operator">=</span> <span class="token class-name">OrderRequest</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">setProduct</span><span class="token punctuation">(</span><span class="token string">&quot;PRD-7788&quot;</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">setQuantity</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        <span class="token class-name">OrderResponse</span> response <span class="token operator">=</span> orderProcessorBlockingStub<span class="token punctuation">.</span><span class="token function">createOrder</span><span class="token punctuation">(</span>orderRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">StatusRuntimeException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">assertTrue</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;An exception occurred in a **subsequent** interceptor:, Ticket raised:TKT&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;order processing over&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，我们在客户端存根上调用_createOrder()_方法。这次，<em>GlobalExceptionInterceptor_在第一个_try</em>–_catch_块中捕获了从_LogInterceptor_逃逸的异常。随后，客户端接收到的异常中包含了描述中的票据信息。</p><h2 id="_5-结论" tabindex="-1"><a class="header-anchor" href="#_5-结论"><span>5. 结论</span></a></h2><p>在本文中，我们探讨了gRPC框架中拦截器作为全局异常处理器的角色。它们是处理异常的常见问题的优秀工具，如日志记录、创建票据、丰富错误响应等。</p><h2 id="本文中使用的所有代码都可以在github上找到。" tabindex="-1"><a class="header-anchor" href="#本文中使用的所有代码都可以在github上找到。"><span>本文中使用的所有代码都可以在GitHub上找到。</span></a></h2><p>date: 2024-06-15 category:</p><ul><li>gRPC</li><li>异常处理 tag:</li><li>gRPC</li><li>拦截器</li><li>异常拦截器</li></ul><hr><h1 id="在grpc服务器中添加全局异常拦截器-1" tabindex="-1"><a class="header-anchor" href="#在grpc服务器中添加全局异常拦截器-1"><span>在gRPC服务器中添加全局异常拦截器</span></a></h1><p>OK</p>',59),c=[p];function o(l,i){return a(),s("div",null,c)}const k=n(t,[["render",o],["__file","Add Global Exception Interceptor in gRPC Server.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/Add%20Global%20Exception%20Interceptor%20in%20gRPC%20Server.html","title":"在gRPC服务器中添加全局异常拦截器","lang":"zh-CN","frontmatter":{"date":"2024-06-15T00:00:00.000Z","category":["gRPC","异常处理"],"tag":["gRPC","拦截器","异常拦截器"],"description":"在gRPC服务器中添加全局异常拦截器 在本教程中，我们将探讨gRPC服务器应用程序中拦截器的作用，以处理全局异常。 拦截器可以在请求到达RPC方法之前进行验证或操作。因此，它们对于处理应用程序的常见问题非常有用，例如日志记录、安全性、缓存、审计、身份验证和授权等。 应用程序也可以使用拦截器作为全局异常处理器。 主要地，拦截器可以帮助处理两种类型的异常：...","head":[["meta",{"property":"og:url","content":"https://kahen.xyz/posts/baeldung/Add%20Global%20Exception%20Interceptor%20in%20gRPC%20Server.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文站"}],["meta",{"property":"og:title","content":"在gRPC服务器中添加全局异常拦截器"}],["meta",{"property":"og:description","content":"在gRPC服务器中添加全局异常拦截器 在本教程中，我们将探讨gRPC服务器应用程序中拦截器的作用，以处理全局异常。 拦截器可以在请求到达RPC方法之前进行验证或操作。因此，它们对于处理应用程序的常见问题非常有用，例如日志记录、安全性、缓存、审计、身份验证和授权等。 应用程序也可以使用拦截器作为全局异常处理器。 主要地，拦截器可以帮助处理两种类型的异常：..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-14T18:16:11.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"gRPC"}],["meta",{"property":"article:tag","content":"拦截器"}],["meta",{"property":"article:tag","content":"异常拦截器"}],["meta",{"property":"article:published_time","content":"2024-06-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-14T18:16:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"在gRPC服务器中添加全局异常拦截器\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-15T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-14T18:16:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://kahen.xyz\\"}]}"]]},"headers":[{"level":3,"title":"3. 高级设计全局异常处理器","slug":"_3-高级设计全局异常处理器","link":"#_3-高级设计全局异常处理器","children":[]},{"level":3,"title":"4. 实现","slug":"_4-实现","link":"#_4-实现","children":[]},{"level":3,"title":"4.1. 实现全局异常处理器","slug":"_4-1-实现全局异常处理器","link":"#_4-1-实现全局异常处理器","children":[]},{"level":3,"title":"4.2. 注册全局异常处理器","slug":"_4-2-注册全局异常处理器","link":"#_4-2-注册全局异常处理器","children":[]},{"level":3,"title":"4.3. 处理来自端点的未捕获异常","slug":"_4-3-处理来自端点的未捕获异常","link":"#_4-3-处理来自端点的未捕获异常","children":[]},{"level":3,"title":"4.4. 处理来自拦截器的未捕获异常","slug":"_4-4-处理来自拦截器的未捕获异常","link":"#_4-4-处理来自拦截器的未捕获异常","children":[]},{"level":2,"title":"5. 结论","slug":"_5-结论","link":"#_5-结论","children":[]},{"level":2,"title":"本文中使用的所有代码都可以在GitHub上找到。","slug":"本文中使用的所有代码都可以在github上找到。","link":"#本文中使用的所有代码都可以在github上找到。","children":[]}],"git":{"createdTime":1718388971000,"updatedTime":1718388971000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":6.77,"words":2032},"filePathRelative":"posts/baeldung/Add Global Exception Interceptor in gRPC Server.md","localizedDate":"2024年6月15日","excerpt":"\\n<p>在本教程中，我们将探讨gRPC服务器应用程序中拦截器的作用，以处理全局异常。</p>\\n<p>拦截器可以在请求到达RPC方法之前进行验证或操作。因此，它们对于处理应用程序的常见问题非常有用，例如日志记录、安全性、缓存、审计、身份验证和授权等。</p>\\n<p>应用程序也可以使用拦截器作为全局异常处理器。</p>\\n<p>主要地，拦截器可以帮助处理两种类型的异常：</p>\\n<ul>\\n<li>处理从无法处理它们的方法中逃逸的未知运行时异常</li>\\n<li>处理从任何其他下游拦截器中逃逸的异常</li>\\n</ul>\\n<p>拦截器可以帮助以集中的方式创建一个处理异常的框架。这样，应用程序就可以有一个一致的标准和强大的方法来处理异常。</p>","autoDesc":true}');export{k as comp,d as data};
