import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as n,a as s}from"./app-Bx_7oN2A.js";const t={},i=s(`<hr><h1 id="java命令行编译常见错误" tabindex="-1"><a class="header-anchor" href="#java命令行编译常见错误"><span>Java命令行编译常见错误</span></a></h1><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p>在命令行编译Java程序时，任何预期的命令行选项或参数不匹配都会导致错误。</p><p>在本教程中，我们将首先调查“如果显式请求注解处理，则只接受类名”错误。然后，我们将查看一些其他常见的编译错误。</p><h2 id="_2-错误示例" tabindex="-1"><a class="header-anchor" href="#_2-错误示例"><span>2. 错误示例</span></a></h2><p>假设我们有以下类_DemoClass_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>baeldung</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoClass</span> <span class="token punctuation">{</span>
    <span class="token comment">// 字段和方法</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，让们尝试使用_javac_命令编译_DemoClass_：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>javac DemoClass
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上述命令将返回一个错误：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>error: Class names, &#39;DemoClass&#39;, are only accepted if annotation processing is explicitly requested
1 error
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>错误似乎与注解处理有关，这有点难以理解，因为_DemoClass_没有任何与注解处理相关的代码。实际的错误原因是**_DemoClass_不是注解处理源文件**。</p><p>注解处理源文件是一种在编译时生成额外源代码的<strong>便捷技术</strong>。与标准Java源文件不同，编译这些源文件时不需要提供_.java_文件扩展名。</p><h2 id="_3-解决问题" tabindex="-1"><a class="header-anchor" href="#_3-解决问题"><span>3. 解决问题</span></a></h2><p>让我们再次使用正确的文件名扩展名_.java_编译_DemoClass_：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>javac DemoClass.java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>正如预期的那样，我们将源文件编译成_DemoClass.class_文件。</p><h2 id="_4-额外的技巧和窍门" tabindex="-1"><a class="header-anchor" href="#_4-额外的技巧和窍门"><span>4. 额外的技巧和窍门</span></a></h2><p>虽然我们知道正确的编译方式时很容易修复，但在编译或运行应用程序时，我们仍可能遇到类似的困难。</p><h3 id="_4-1-使用错误的文件扩展名" tabindex="-1"><a class="header-anchor" href="#_4-1-使用错误的文件扩展名"><span>4.1. 使用错误的文件扩展名</span></a></h3><p>现在让我们尝试使用以下命令编译源文件，其中有一个拼写错误——“_.JAVA”_全部大写：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>javac DemoClass.JAVA
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样做将产生我们之前看到的相同错误消息：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>error: Class names, &#39;DemoClass.JAVA&#39;, are only accepted if annotation processing is explicitly requested
1 error
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-主类错误" tabindex="-1"><a class="header-anchor" href="#_4-2-主类错误"><span>4.2. 主类错误</span></a></h3><p>假设我们有一个带有_main_方法的_DemoApplication_类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoApplication</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;This is a DemoApplication&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在让我们使用_java_命令执行应用程序：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">java</span> DemoApplication.class
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果是_ClassNotFoundException_：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Error: Could not find or load main class DemoApplication.Class
Caused by: java.lang.ClassNotFoundException: DemoApplication.Class
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>现在让我们尝试不带任何文件扩展名运行应用程序——甚至不包括_.class_或_.java_：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">java</span> DemoApplication
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们应该在控制台上看到输出：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>This is a DemoApplication
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_5-结论" tabindex="-1"><a class="header-anchor" href="#_5-结论"><span>5. 结论</span></a></h2><p>在本文中，我们学习了不正确使用或省略_.java_文件扩展名在命令行编译类时会导致错误。此外，我们还看到了一些与不正确使用命令行参数相关的其他错误，这些错误涉及编译和运行独立应用程序。</p>`,38),l=[i];function o(p,c){return n(),e("div",null,l)}const m=a(t,[["render",o],["__file","2024-07-20-Common Command Line Compile Errors in Java.html.vue"]]),u=JSON.parse('{"path":"/posts/baeldung/2024-07-20/2024-07-20-Common%20Command%20Line%20Compile%20Errors%20in%20Java.html","title":"Java命令行编译常见错误","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","Command Line"],"tag":["Java","Compile Errors"],"head":[["meta",{"name":"keywords","content":"Java, Command Line, Compile Errors"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-20/2024-07-20-Common%20Command%20Line%20Compile%20Errors%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Java命令行编译常见错误"}],["meta",{"property":"og:description","content":"Java命令行编译常见错误 1. 概述 在命令行编译Java程序时，任何预期的命令行选项或参数不匹配都会导致错误。 在本教程中，我们将首先调查“如果显式请求注解处理，则只接受类名”错误。然后，我们将查看一些其他常见的编译错误。 2. 错误示例 假设我们有以下类_DemoClass_： 现在，让们尝试使用_javac_命令编译_DemoClass_： 上..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-20T04:19:50.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Compile Errors"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-20T04:19:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java命令行编译常见错误\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-20T04:19:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Java命令行编译常见错误 1. 概述 在命令行编译Java程序时，任何预期的命令行选项或参数不匹配都会导致错误。 在本教程中，我们将首先调查“如果显式请求注解处理，则只接受类名”错误。然后，我们将查看一些其他常见的编译错误。 2. 错误示例 假设我们有以下类_DemoClass_： 现在，让们尝试使用_javac_命令编译_DemoClass_： 上..."},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. 错误示例","slug":"_2-错误示例","link":"#_2-错误示例","children":[]},{"level":2,"title":"3. 解决问题","slug":"_3-解决问题","link":"#_3-解决问题","children":[]},{"level":2,"title":"4. 额外的技巧和窍门","slug":"_4-额外的技巧和窍门","link":"#_4-额外的技巧和窍门","children":[{"level":3,"title":"4.1. 使用错误的文件扩展名","slug":"_4-1-使用错误的文件扩展名","link":"#_4-1-使用错误的文件扩展名","children":[]},{"level":3,"title":"4.2. 主类错误","slug":"_4-2-主类错误","link":"#_4-2-主类错误","children":[]}]},{"level":2,"title":"5. 结论","slug":"_5-结论","link":"#_5-结论","children":[]}],"git":{"createdTime":1721449190000,"updatedTime":1721449190000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":2.25,"words":676},"filePathRelative":"posts/baeldung/2024-07-20/2024-07-20-Common Command Line Compile Errors in Java.md","localizedDate":"2022年4月1日","excerpt":"<hr>\\n<h1>Java命令行编译常见错误</h1>\\n<h2>1. 概述</h2>\\n<p>在命令行编译Java程序时，任何预期的命令行选项或参数不匹配都会导致错误。</p>\\n<p>在本教程中，我们将首先调查“如果显式请求注解处理，则只接受类名”错误。然后，我们将查看一些其他常见的编译错误。</p>\\n<h2>2. 错误示例</h2>\\n<p>假设我们有以下类_DemoClass_：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">package</span> <span class=\\"token namespace\\">com<span class=\\"token punctuation\\">.</span>baeldung</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">DemoClass</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 字段和方法</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{m as comp,u as data};
