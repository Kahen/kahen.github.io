import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as p}from"./app-0nXvcScy.js";const t={},e=p(`<h1 id="使用modelmapper的指南" tabindex="-1"><a class="header-anchor" href="#使用modelmapper的指南"><span>使用ModelMapper的指南</span></a></h1><ol><li>概述</li></ol><p>在之前的教程中，我们看到了如何使用ModelMapper映射列表。</p><p>在本教程中，我们将展示<strong>如何在ModelMapper中将数据映射到结构不同的对象之间。</strong></p><p>尽管ModelMapper的默认转换在典型情况下工作得很好，但我们将主要关注如何匹配使用默认配置无法处理的对象。</p><p>因此，这次我们将专注于属性映射和配置更改。</p><ol start="2"><li>Maven依赖</li></ol><p>要开始使用ModelMapper库，我们将依赖项添加到我们的_pom.xml_:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>\`&lt;dependency&gt;\`
    \`&lt;groupId&gt;\`org.modelmapper\`&lt;/groupId&gt;\`
    \`&lt;artifactId&gt;\`modelmapper\`&lt;/artifactId&gt;\`
    \`&lt;version&gt;\`3.2.0\`&lt;/version&gt;\`
\`&lt;/dependency&gt;\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>默认配置</li></ol><p>当源对象和目标对象彼此相似时，ModelMapper提供了一个即插即用的解决方案。</p><p>让我们来看看_Game_和_GameDTO_，分别是我们的领域对象和相应的数据传输对象：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> timestamp<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Player</span> creator<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Player</span><span class="token punctuation">&gt;</span></span>\` players <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">GameSettings</span> settings<span class="token punctuation">;</span>

    <span class="token comment">// 构造函数，getter和setter</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GameDTO</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token comment">// 构造函数，getter和setter</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>_GameDTO_只包含两个字段，但字段类型和名称与源对象完全匹配。</p><p>在这种情况下，ModelMapper无需额外配置即可处理转换：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@BeforeEach</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenMapGameWithExactMatch_thenConvertsToDTO</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 当提供相似的源对象时</span>
    <span class="token class-name">Game</span> game <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Game</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;Game 1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">GameDTO</span> gameDTO <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mapper<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>game<span class="token punctuation">,</span> <span class="token class-name">GameDTO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 然后默认映射</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span>game<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> gameDTO<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span>game<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> gameDTO<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>ModelMapper中的属性映射是什么？</li></ol><p>在我们的项目中，大多数时间我们需要自定义我们的DTOs。当然，这将导致不同的字段、层次结构以及它们之间的不规则映射。有时，我们还需要为单个源对象准备多个DTO，反之亦然。</p><p>因此，<strong>属性映射为我们提供了一种强大的方式，以扩展我们的映射逻辑。</strong></p><p>让我们通过添加一个新字段_creationTime_来自定义_GameDTO_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GameDTO</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> creationTime<span class="token punctuation">;</span>

    <span class="token comment">// 构造函数，getter和setter</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将_Game_的_timestamp_字段映射到_GameDTO_的_creationTime_字段。注意，这次<strong>源字段名称与目标字段名称不同。</strong></p><p>要定义属性映射，我们将使用ModelMapper的_TypeMap_。</p><p>那么，让我们创建一个_TypeMap_对象，并通过其_addMapping_方法添加属性映射：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenMapGameWithBasicPropertyMapping_thenConvertsToDTO</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 设置</span>
    <span class="token class-name">TypeMap</span>\`\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Game</span><span class="token punctuation">,</span> <span class="token class-name">GameDTO</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\`\` propertyMapper <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mapper<span class="token punctuation">.</span><span class="token function">createTypeMap</span><span class="token punctuation">(</span><span class="token class-name">Game</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">GameDTO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    propertyMapper<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token class-name">Game</span><span class="token operator">::</span><span class="token function">getTimestamp</span><span class="token punctuation">,</span> <span class="token class-name">GameDTO</span><span class="token operator">::</span><span class="token function">setCreationTime</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 当字段名称不同时</span>
    <span class="token class-name">Game</span> game <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Game</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;Game 1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    game<span class="token punctuation">.</span><span class="token function">setTimestamp</span><span class="token punctuation">(</span><span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEpochSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">GameDTO</span> gameDTO <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mapper<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>game<span class="token punctuation">,</span> <span class="token class-name">GameDTO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 然后通过属性映射器映射</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span>game<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> gameDTO<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span>game<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> gameDTO<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span>game<span class="token punctuation">.</span><span class="token function">getTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> gameDTO<span class="token punctuation">.</span><span class="token function">getCreationTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-1-深度映射" tabindex="-1"><a class="header-anchor" href="#_4-1-深度映射"><span>4.1. 深度映射</span></a></h3><p>还有不同的映射方式。例如，<strong>ModelMapper可以映射层次结构 - 不同级别的字段可以深度映射。</strong></p><p>让我们在_GameDTO_中定义一个名为_creator_的_String_字段。</p><p>然而，_Game_域上的源_creator_字段不是一个简单类型，而是一个对象 - <em>Player</em>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token comment">// 构造函数，getter和setter</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">private</span> <span class="token class-name">Player</span> creator<span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GameDTO</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> creator<span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以，我们不会传输整个_Player_对象的数据，而只是_name_字段到_GameDTO_。</p><p><strong>为了定义深度映射，我们使用_TypeMap_的_addMappings_方法并添加一个_ExpressionMap_</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenMapGameWithDeepMapping_thenConvertsToDTO</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 设置</span>
    <span class="token class-name">TypeMap</span>\`\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Game</span><span class="token punctuation">,</span> <span class="token class-name">GameDTO</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\`\` propertyMapper <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mapper<span class="token punctuation">.</span><span class="token function">createTypeMap</span><span class="token punctuation">(</span><span class="token class-name">Game</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">GameDTO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 添加深度映射，将源的Player对象展平为目标的单个字段</span>
    propertyMapper<span class="token punctuation">.</span><span class="token function">addMappings</span><span class="token punctuation">(</span>
      mapper <span class="token operator">-&gt;</span> mapper<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>src <span class="token operator">-&gt;</span> src<span class="token punctuation">.</span><span class="token function">getCreator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">GameDTO</span><span class="token operator">::</span><span class="token function">setCreator</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 当映射不同层次结构时</span>
    <span class="token class-name">Game</span> game <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Game</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;Game 1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    game<span class="token punctuation">.</span><span class="token function">setCreator</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">GameDTO</span> gameDTO <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mapper<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>game<span class="token punctuation">,</span> <span class="token class-name">GameDTO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 然后</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span>game<span class="token punctuation">.</span><span class="token function">getCreator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> gameDTO<span class="token punctuation">.</span><span class="token function">getCreator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-跳过属性" tabindex="-1"><a class="header-anchor" href="#_4-2-跳过属性"><span>4.2. 跳过属性</span></a></h3><p>有时，我们不想在DTOs中暴露所有数据。无论是为了使DTOs更轻量级还是隐藏一些敏感数据，这些原因都可能导致我们在传输到DTOs时排除某些字段。</p><p>幸运的是，<strong>ModelMapper通过跳过支持属性排除。</strong></p><p>让我们使用_skip_方法排除_id_字段的传输：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenMapGameWithSkipIdProperty_thenConvertsToDTO</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 设置</span>
    <span class="token class-name">TypeMap</span>\`\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Game</span><span class="token punctuation">,</span> <span class="token class-name">GameDTO</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\`\` propertyMapper <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mapper<span class="token punctuation">.</span><span class="token function">createTypeMap</span><span class="token punctuation">(</span><span class="token class-name">Game</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">GameDTO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    propertyMapper<span class="token punctuation">.</span><span class="token function">addMappings</span><span class="token punctuation">(</span>mapper <span class="token operator">-&gt;</span> mapper<span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token class-name">GameDTO</span><span class="token operator">::</span><span class="token function">setId</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 当id被跳过时</span>
    <span class="token class-name">Game</span> game <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Game</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;Game 1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">GameDTO</span> gameDTO <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mapper<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>game<span class="token punctuation">,</span> <span class="token class-name">GameDTO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 然后目标id是null</span>
    <span class="token function">assertNull</span><span class="token punctuation">(</span>gameDTO<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span>game<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> gameDTO<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，_GameDTO_的_id_字段被跳过并没有设置。</p><h3 id="_4-3-converter" tabindex="-1"><a class="header-anchor" href="#_4-3-converter"><span>4.3. <em>Converter</em></span></a></h3><p>ModelMapper的另一个功能是_Converter_。<strong>我们可以为特定的源到目标映射自定义转换。</strong></p><p>假设我们在_Game_域中有一集合_Player_s。让我们将_Player_s的数量传输到_GameDTO_。</p><p>作为第一步，我们在_GameDTO_中定义一个整型字段，<em>totalPlayers</em>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GameDTO</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> totalPlayers<span class="token punctuation">;</span>

    <span class="token comment">// 构造函数，getter和setter</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相应地，我们创建_collectionToSize_ <em>Converter</em>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Converter</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Collection</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>\`\` collectionToSize <span class="token operator">=</span> c <span class="token operator">-&gt;</span> c<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后，我们在添加_ExpressionMap_时通过_using_方法注册我们的_Converter_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>propertyMapper<span class="token punctuation">.</span><span class="token function">addMappings</span><span class="token punctuation">(</span>
  mapper <span class="token operator">-&gt;</span> mapper<span class="token punctuation">.</span><span class="token function">using</span><span class="token punctuation">(</span>collectionToSize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Game</span><span class="token operator">::</span><span class="token function">getPlayers</span><span class="token punctuation">,</span> <span class="token class-name">GameDTO</span><span class="token operator">::</span><span class="token function">setTotalPlayers</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果，我们映射_Game_的_getPlayers().size()_到_GameDTO_的_totalPlayers_字段：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenMapGameWithCustomConverter_thenConvertsToDTO</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 设置</span>
    <span class="token class-name">TypeMap</span>\`\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Game</span><span class="token punctuation">,</span> <span class="token class-name">GameDTO</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\`\` propertyMapper <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mapper<span class="token punctuation">.</span><span class="token function">createTypeMap</span><span class="token punctuation">(</span><span class="token class-name">Game</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">GameDTO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Converter</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Collection</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>\`\` collectionToSize <span class="token operator">=</span> c <span class="token operator">-&gt;</span> c<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    propertyMapper<span class="token punctuation">.</span><span class="token function">addMappings</span><span class="token punctuation">(</span>
      mapper <span class="token operator">-&gt;</span> mapper<span class="token punctuation">.</span><span class="token function">using</span><span class="token punctuation">(</span>collectionToSize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Game</span><span class="token operator">::</span><span class="token function">getPlayers</span><span class="token punctuation">,</span> <span class="token class-name">GameDTO</span><span class="token operator">::</span><span class="token function">setTotalPlayers</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 当提供集合到大小转换器时</span>
    <span class="token class-name">Game</span> game <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Game</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    game<span class="token punctuation">.</span><span class="token function">addPlayer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    game<span class="token punctuation">.</span><span class="token function">addPlayer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token number">2L</span><span class="token punctuation">,</span> <span class="token string">&quot;Bob&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">GameDTO</span> gameDTO <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mapper<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>game<span class="token punctuation">,</span> <span class="token class-name">GameDTO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 然后它将大小映射到自定义字段</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> gameDTO<span class="token punctuation">.</span><span class="token function">getTotalPlayers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4-provider" tabindex="-1"><a class="header-anchor" href="#_4-4-provider"><span>4.4. <em>Provider</em></span></a></h3><p>在另一个用例中，有时我们需要为目标对象提供一个实例，而不是让ModalMapper初始化它。这就是_Provider_派上用场的地方。</p><p>相应地，<strong>ModelMapper的_Provider_是自定义目标对象实例化的内置方式。</strong></p><p>让我们做一个转换，不是_Game_到DTO，而是_Game_到_Game_这次。</p><p>原则上，我们有一个持久化的_Game_域，我们从它的存储库中获取它。</p><p>之后，我们通过将另一个_Game_对象合并到其中来更新_Game_实例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenUsingProvider_thenMergesGameInstances</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 设置</span>
    <span class="token class-name">TypeMap</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Game</span><span class="token punctuation">,</span> <span class="token class-name">Game</span><span class="token punctuation">&gt;</span></span>\`\`\` propertyMapper <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mapper<span class="token punctuation">.</span><span class="token function">createTypeMap</span><span class="token punctuation">(</span><span class="token class-name">Game</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Game</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 从存储库中获取Game实例的提供者</span>
    <span class="token class-name">Provider</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Game</span><span class="token punctuation">&gt;</span></span>\` gameProvider <span class="token operator">=</span> p <span class="token operator">-&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>gameRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    propertyMapper<span class="token punctuation">.</span><span class="token function">setProvider</span><span class="token punctuation">(</span>gameProvider<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 当给定更新状态时</span>
<span class="token class-name">Game</span> update <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Game</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;Game Updated!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
update<span class="token punctuation">.</span><span class="token function">setCreator</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Game</span> updatedGame <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mapper<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>update<span class="token punctuation">,</span> <span class="token class-name">Game</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 然后它在提供的实例上合并更新</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> updatedGame<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Game Updated!&quot;</span><span class="token punctuation">,</span> updatedGame<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> updatedGame<span class="token punctuation">.</span><span class="token function">getCreator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

### <span class="token number">4.5</span><span class="token punctuation">.</span> 条件映射

<span class="token operator">*</span><span class="token operator">*</span><span class="token class-name">ModelMapper</span>还支持条件映射。<span class="token operator">*</span><span class="token operator">*</span> 我们可以使用的一种内置条件方法是_Conditions<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span>_。

让我们在源_Game_对象的_id_字段为_null_时跳过它：

\`\`\`java
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenUsingConditionalIsNull_thenMergesGameInstancesWithoutOverridingId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 设置</span>
    <span class="token class-name">TypeMap</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Game</span><span class="token punctuation">,</span> <span class="token class-name">Game</span><span class="token punctuation">&gt;</span></span>\`\`\` propertyMapper <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mapper<span class="token punctuation">.</span><span class="token function">createTypeMap</span><span class="token punctuation">(</span><span class="token class-name">Game</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Game</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    propertyMapper<span class="token punctuation">.</span><span class="token function">setProvider</span><span class="token punctuation">(</span>p <span class="token operator">-&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>gameRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token number">2L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    propertyMapper<span class="token punctuation">.</span><span class="token function">addMappings</span><span class="token punctuation">(</span>mapper <span class="token operator">-&gt;</span> mapper<span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span><span class="token class-name">Conditions</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token class-name">Game</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span> <span class="token class-name">Game</span><span class="token operator">::</span><span class="token function">setId</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 当游戏没有id</span>
    <span class="token class-name">Game</span> update <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Game</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;Not Persisted Game!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Game</span> updatedGame <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mapper<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>update<span class="token punctuation">,</span> <span class="token class-name">Game</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 然后目标游戏id不会被覆盖</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2L</span><span class="token punctuation">,</span> updatedGame<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Not Persisted Game!&quot;</span><span class="token punctuation">,</span> updatedGame<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，通过使用_isNull_条件结合_skip_方法，我们保护了目标_id_不被_null_值覆盖。</p><p>此外，<strong>我们还可以定义自定义_Condition_s。</strong></p><p>让我们定义一个条件来检查_Game_的_timestamp_字段是否有值：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Condition</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span>\`\`\` hasTimestamp <span class="token operator">=</span> ctx <span class="token operator">-&gt;</span> ctx<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> ctx<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来，我们使用_when_方法在属性映射器中使用它：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">TypeMap</span>\`\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Game</span><span class="token punctuation">,</span> <span class="token class-name">GameDTO</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\`\` propertyMapper <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mapper<span class="token punctuation">.</span><span class="token function">createTypeMap</span><span class="token punctuation">(</span><span class="token class-name">Game</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">GameDTO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Condition</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span>\`\`\` hasTimestamp <span class="token operator">=</span> ctx <span class="token operator">-&gt;</span> ctx<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> ctx<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
propertyMapper<span class="token punctuation">.</span><span class="token function">addMappings</span><span class="token punctuation">(</span>
  mapper <span class="token operator">-&gt;</span> mapper<span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span>hasTimestamp<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Game</span><span class="token operator">::</span><span class="token function">getTimestamp</span><span class="token punctuation">,</span> <span class="token class-name">GameDTO</span><span class="token operator">::</span><span class="token function">setCreationTime</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，ModelMapper只有在_timestamp_有大于零的值时才会更新_GameDTO_的_creationTime_字段：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenUsingCustomConditional_thenConvertsDTOSkipsZeroTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 设置</span>
    <span class="token class-name">TypeMap</span>\`\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Game</span><span class="token punctuation">,</span> <span class="token class-name">GameDTO</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\`\` propertyMapper <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mapper<span class="token punctuation">.</span><span class="token function">createTypeMap</span><span class="token punctuation">(</span><span class="token class-name">Game</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">GameDTO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Condition</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span>\`\`\` hasTimestamp <span class="token operator">=</span> ctx <span class="token operator">-&gt;</span> ctx<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> ctx<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
    propertyMapper<span class="token punctuation">.</span><span class="token function">addMappings</span><span class="token punctuation">(</span>
      mapper <span class="token operator">-&gt;</span> mapper<span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span>hasTimestamp<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Game</span><span class="token operator">::</span><span class="token function">getTimestamp</span><span class="token punctuation">,</span> <span class="token class-name">GameDTO</span><span class="token operator">::</span><span class="token function">setCreationTime</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 当游戏的timestamp为零</span>
    <span class="token class-name">Game</span> game <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Game</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;Game 1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    game<span class="token punctuation">.</span><span class="token function">setTimestamp</span><span class="token punctuation">(</span><span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">GameDTO</span> gameDTO <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mapper<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>game<span class="token punctuation">,</span> <span class="token class-name">GameDTO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 然后时间戳字段不会被映射</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span>game<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> gameDTO<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span>game<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> gameDTO<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertNotEquals</span><span class="token punctuation">(</span><span class="token number">0L</span><span class="token punctuation">,</span> gameDTO<span class="token punctuation">.</span><span class="token function">getCreationTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 当游戏的timestamp大于零</span>
    game<span class="token punctuation">.</span><span class="token function">setTimestamp</span><span class="token punctuation">(</span><span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEpochSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    gameDTO <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mapper<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>game<span class="token punctuation">,</span> <span class="token class-name">GameDTO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 然后时间戳字段被映射</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span>game<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> gameDTO<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span>game<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> gameDTO<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span>game<span class="token punctuation">.</span><span class="token function">getTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> gameDTO<span class="token punctuation">.</span><span class="token function">getCreationTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-替代映射方式" tabindex="-1"><a class="header-anchor" href="#_5-替代映射方式"><span>5. 替代映射方式</span></a></h2><p>属性映射在大多数情况下都是一个好方法，因为它允许我们进行明确的定义并清晰地看到映射流程。</p><p>然而，对于一些对象，特别是当它们具有不同的属性层次结构时，<strong>我们可以使用匹配策略_LOOSE_而不是_TypeMap_。</strong></p><h3 id="_5-1-匹配策略-loose" tabindex="-1"><a class="header-anchor" href="#_5-1-匹配策略-loose"><span>5.1. 匹配策略_LOOSE_</span></a></h3><p>为了展示松散匹配的好处，让我们在_GameDTO_中添加两个更多的属性：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GameDTO</span> <span class="token punctuation">{</span>
    <span class="token comment">//...</span>
    <span class="token keyword">private</span> <span class="token class-name">GameMode</span> mode<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> maxPlayers<span class="token punctuation">;</span>

    <span class="token comment">// 构造函数，getter和setter</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意_mode_和_maxPlayers_对应于_Game_源类中的_GameSettings_的属性：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GameSettings</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">GameMode</span> mode<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> maxPlayers<span class="token punctuation">;</span>

    <span class="token comment">// 构造函数，getter和setter</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，<strong>我们可以进行双向映射</strong>，既可以从_Game_到_GameDTO_，也可以反过来<strong>而无需定义任何_TypeMap_</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenUsingLooseMappingStrategy_thenConvertsToDomainAndDTO</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 设置</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>mapper<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMatchingStrategy</span><span class="token punctuation">(</span><span class="token class-name">MatchingStrategies</span><span class="token punctuation">.</span><span class="token constant">LOOSE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 当dto具有GameSetting的扁平字段时</span>
    <span class="token class-name">GameDTO</span> gameDTO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GameDTO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    gameDTO<span class="token punctuation">.</span><span class="token function">setMode</span><span class="token punctuation">(</span><span class="token class-name">GameMode</span><span class="token punctuation">.</span><span class="token constant">TURBO</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    gameDTO<span class="token punctuation">.</span><span class="token function">setMaxPlayers</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Game</span> game <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mapper<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>gameDTO<span class="token punctuation">,</span> <span class="token class-name">Game</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 然后它在没有属性映射器的情况下转换为内部对象</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span>gameDTO<span class="token punctuation">.</span><span class="token function">getMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> game<span class="token punctuation">.</span><span class="token function">getSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span>gameDTO<span class="token punctuation">.</span><span class="token function">getMaxPlayers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> game<span class="token punctuation">.</span><span class="token function">getSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMaxPlayers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 当GameSetting的字段名称匹配时</span>
    game <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Game</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    game<span class="token punctuation">.</span><span class="token function">setSettings</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GameSettings</span><span class="token punctuation">(</span><span class="token class-name">GameMode</span><span class="token punctuation">.</span><span class="token constant">NORMAL</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    gameDTO <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mapper<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>game<span class="token punctuation">,</span> <span class="token class-name">GameDTO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 然后它在dto上展平字段</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span>game<span class="token punctuation">.</span><span class="token function">getSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> gameDTO<span class="token punctuation">.</span><span class="token function">getMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span>game<span class="token punctuation">.</span><span class="token function">getSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMaxPlayers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> gameDTO<span class="token punctuation">.</span><span class="token function">getMaxPlayers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-自动跳过空属性" tabindex="-1"><a class="header-anchor" href="#_5-2-自动跳过空属性"><span>5.2. 自动跳过空属性</span></a></h3><p>此外，ModelMapper还有一些全局配置可能会有所帮助。其中之一是_setSkipNullEnabled_设置。</p><p>所以，<strong>我们可以自动跳过源属性（如果它们是_null_）而无需编写任何条件映射</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenConfigurationSkipNullEnabled_thenConvertsToDTO</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 设置</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>mapper<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSkipNullEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">TypeMap</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Game</span><span class="token punctuation">,</span> <span class="token class-name">Game</span><span class="token punctuation">&gt;</span></span>\`\`\` propertyMap <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mapper<span class="token punctuation">.</span><span class="token function">createTypeMap</span><span class="token punctuation">(</span><span class="token class-name">Game</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Game</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    propertyMap<span class="token punctuation">.</span><span class="token function">setProvider</span><span class="token punctuation">(</span>p <span class="token operator">-&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>gameRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token number">2L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 当游戏没有id</span>
    <span class="token class-name">Game</span> update <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Game</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;Not Persisted Game!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Game</span> updatedGame <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mapper<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>update<span class="token punctuation">,</span> <span class="token class-name">Game</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 然后目标游戏id不会被覆盖</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2L</span><span class="token punctuation">,</span> updatedGame<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Not Persisted Game!&quot;</span><span class="token punctuation">,</span> updatedGame<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3-循环引用对象" tabindex="-1"><a class="header-anchor" href="#_5-3-循环引用对象"><span>5.3. 循环引用对象</span></a></h3><p>有时，我们需要处理引用自身的对象。</p><p>通常，这会导致循环依赖并引起著名的_StackOverflowError_：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>org.modelmapper.MappingException: ModelMapper mapping errors:

1) Error mapping com.bealdung.domain.Game to com.bealdung.dto.GameDTO

1 error
    ...
Caused by: java.lang.StackOverflowError
    ...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以，另一个配置，<em>setPreferNestedProperties</em>，将在此情况下帮助我们：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenConfigurationPreferNestedPropertiesDisabled_thenConvertsCircularReferencedToDTO</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 设置</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>mapper<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPreferNestedProperties</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 当游戏有循环引用：Game -&gt; Player -&gt; Game</span>
    <span class="token class-name">Game</span> game <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Game</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;Game 1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Player</span> player <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    player<span class="token punctuation">.</span><span class="token function">setCurrentGame</span><span class="token punctuation">(</span>game<span class="token punctuation">)</span><span class="token punctuation">;</span>
    game<span class="token punctuation">.</span><span class="token function">setCreator</span><span class="token punctuation">(</span>player<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">GameDTO</span> gameDTO <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mapper<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>game<span class="token punctuation">,</span> <span class="token class-name">GameDTO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 然后它在没有任何异常的情况下解析</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span>game<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> gameDTO<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span>game<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> gameDTO<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，当我们将_false_传递给_setPreferNestedProperties_时，映射工作没有任何异常。</p><h2 id="_6-结论" tabindex="-1"><a class="header-anchor" href="#_6-结论"><span>6. 结论</span></a></h2><p>在本文中，我们解释了如何使用ModelMapper中的属性映射器自定义类到类的映射。</p><p>我们还看到了一些详细的替代配置示例。</p><p>像往常一样，所有示例的源代码都可以在GitHub上找到。</p><p><a href="kimi://action?name=cheer-on-kimi">给Kimi加油</a></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>
OK</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,92),o=[e];function c(l,i){return a(),s("div",null,o)}const r=n(t,[["render",c],["__file","2024-07-25-Guide to Using ModelMapper.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-25/2024-07-25-Guide%20to%20Using%20ModelMapper.html","title":"使用ModelMapper的指南","lang":"zh-CN","frontmatter":{"date":"2022-04-21T00:00:00.000Z","category":["Java","ModelMapper"],"tag":["ModelMapper","Java"],"head":[["meta",{"name":"keywords","content":"ModelMapper, Java, 映射, DTO, 对象映射"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-25/2024-07-25-Guide%20to%20Using%20ModelMapper.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"使用ModelMapper的指南"}],["meta",{"property":"og:description","content":"使用ModelMapper的指南 概述 在之前的教程中，我们看到了如何使用ModelMapper映射列表。 在本教程中，我们将展示如何在ModelMapper中将数据映射到结构不同的对象之间。 尽管ModelMapper的默认转换在典型情况下工作得很好，但我们将主要关注如何匹配使用默认配置无法处理的对象。 因此，这次我们将专注于属性映射和配置更改。 M..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-25T13:32:46.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"ModelMapper"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2022-04-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-25T13:32:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用ModelMapper的指南\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-21T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-25T13:32:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"使用ModelMapper的指南 概述 在之前的教程中，我们看到了如何使用ModelMapper映射列表。 在本教程中，我们将展示如何在ModelMapper中将数据映射到结构不同的对象之间。 尽管ModelMapper的默认转换在典型情况下工作得很好，但我们将主要关注如何匹配使用默认配置无法处理的对象。 因此，这次我们将专注于属性映射和配置更改。 M..."},"headers":[{"level":3,"title":"4.1. 深度映射","slug":"_4-1-深度映射","link":"#_4-1-深度映射","children":[]},{"level":3,"title":"4.2. 跳过属性","slug":"_4-2-跳过属性","link":"#_4-2-跳过属性","children":[]},{"level":3,"title":"4.3. Converter","slug":"_4-3-converter","link":"#_4-3-converter","children":[]},{"level":3,"title":"4.4. Provider","slug":"_4-4-provider","link":"#_4-4-provider","children":[]},{"level":2,"title":"5. 替代映射方式","slug":"_5-替代映射方式","link":"#_5-替代映射方式","children":[{"level":3,"title":"5.1. 匹配策略_LOOSE_","slug":"_5-1-匹配策略-loose","link":"#_5-1-匹配策略-loose","children":[]},{"level":3,"title":"5.2. 自动跳过空属性","slug":"_5-2-自动跳过空属性","link":"#_5-2-自动跳过空属性","children":[]},{"level":3,"title":"5.3. 循环引用对象","slug":"_5-3-循环引用对象","link":"#_5-3-循环引用对象","children":[]}]},{"level":2,"title":"6. 结论","slug":"_6-结论","link":"#_6-结论","children":[]}],"git":{"createdTime":1721914366000,"updatedTime":1721914366000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":8.71,"words":2614},"filePathRelative":"posts/baeldung/2024-07-25/2024-07-25-Guide to Using ModelMapper.md","localizedDate":"2022年4月21日","excerpt":"\\n<ol>\\n<li>概述</li>\\n</ol>\\n<p>在之前的教程中，我们看到了如何使用ModelMapper映射列表。</p>\\n<p>在本教程中，我们将展示<strong>如何在ModelMapper中将数据映射到结构不同的对象之间。</strong></p>\\n<p>尽管ModelMapper的默认转换在典型情况下工作得很好，但我们将主要关注如何匹配使用默认配置无法处理的对象。</p>\\n<p>因此，这次我们将专注于属性映射和配置更改。</p>\\n<ol start=\\"2\\">\\n<li>Maven依赖</li>\\n</ol>\\n<p>要开始使用ModelMapper库，我们将依赖项添加到我们的_pom.xml_:</p>","autoDesc":true}');export{r as comp,d as data};
