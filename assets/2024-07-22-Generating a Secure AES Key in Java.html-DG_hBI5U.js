import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as e}from"./app-BaCIpe-N.js";const t={},p=e(`<h1 id="在java中生成安全的aes密钥" tabindex="-1"><a class="header-anchor" href="#在java中生成安全的aes密钥"><span>在Java中生成安全的AES密钥</span></a></h1><p>在这篇文章中，我们将深入探讨AES或一般密码算法中密钥的目的。我们将回顾生成密钥时需要记住的最佳实践，并最终探讨生成密钥的各种方法，并根据指南对它们进行权衡。</p><p>高级加密标准（AES）是数据加密标准（DES）的后继者，由国家标准与技术研究院（NIST）在2001年发布。它被归类为对称块密码算法。</p><p>对称密码算法使用相同的密钥进行加密和解密。块密码意味着它处理128位的输入明文块：</p><h3 id="_2-1-aes变体" tabindex="-1"><a class="header-anchor" href="#_2-1-aes变体"><span>2.1 AES变体</span></a></h3><p>**基于密钥大小，AES支持三种变体：AES-128（128位）、AES-192（192位）和AES-256（256位）。**增加密钥大小会增加加密的强度，因为更大的密钥大小意味着可能的密钥数量更多。因此，在算法执行期间要执行的轮数也会增加，从而增加了所需的计算量：</p><table><thead><tr><th>密钥大小</th><th>块大小</th><th>轮数</th></tr></thead><tbody><tr><td>128</td><td>128</td><td>10</td></tr><tr><td>192</td><td>128</td><td>12</td></tr><tr><td>256</td><td>128</td><td>14</td></tr></tbody></table><h3 id="_2-2-aes有多安全" tabindex="-1"><a class="header-anchor" href="#_2-2-aes有多安全"><span>2.2 AES有多安全？</span></a></h3><p>AES算法是公开信息——密钥是秘密，必须知道它才能成功解密。因此，归结为破解AES密钥。</p><p>让我们看看暴力破解方法在猜测密钥方面的表现。</p><p><strong>AES-128密钥是128位，这意味着有</strong> <strong>2^128个可能的值</strong>。要搜索这个数量级，需要花费巨大且不可行的时间和金钱。因此，AES实际上无法通过暴力破解方法破解。</p><p>有一些非暴力破解方法，但这些只能将可能的密钥查找空间减少几个比特。</p><p>所有这些都意味着，<strong>如果对密钥一无所知，AES实际上是不可能被破解的</strong>。</p><h2 id="_3-好密钥的属性" tabindex="-1"><a class="header-anchor" href="#_3-好密钥的属性"><span>3. 好密钥的属性</span></a></h2><p>现在，让我们看看生成AES密钥时需要遵循的一些重要指南。</p><h3 id="_3-1-密钥大小" tabindex="-1"><a class="header-anchor" href="#_3-1-密钥大小"><span>3.1 密钥大小</span></a></h3><p>由于AES支持三种密钥大小，我们应该为用例选择正确的密钥大小。AES-128是商业应用中最常见的选择。它在安全性和速度之间提供了平衡。国家政府通常使用AES-192和AES-256以获得最大安全性。如果我们想要额外的安全级别，可以使用AES-256。</p><p>量子计算机可能会威胁到减少大密钥空间所需的计算量。因此，拥有AES-256密钥将更具未来性，尽管到目前为止，它们还没有对任何商业应用的威胁者构成威胁。</p><h3 id="_3-2-熵" tabindex="-1"><a class="header-anchor" href="#_3-2-熵"><span>3.2 熵</span></a></h3><p>熵指的是密钥中的随机性。如果生成的密钥不够随机，并且与时间依赖、机器依赖或字典中的单词等有某种相关性，那么它就会变得脆弱。攻击者将能够缩小密钥搜索空间，削弱AES的强度。因此，<strong>密钥必须是真正随机的</strong>。</p><h2 id="_4-生成aes密钥" tabindex="-1"><a class="header-anchor" href="#_4-生成aes密钥"><span>4. 生成AES密钥</span></a></h2><p>现在，我们有了生成AES密钥的指南，让我们看看生成它们的方法。</p><p>对于所有代码片段，我们定义我们的密码算法为：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">CIPHER</span> <span class="token operator">=</span> <span class="token string">&quot;AES&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-1-随机" tabindex="-1"><a class="header-anchor" href="#_4-1-随机"><span>4.1 随机</span></a></h3><p>让我们使用Java中的_Random_类来生成密钥：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Key</span> <span class="token function">getRandomKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> cipher<span class="token punctuation">,</span> <span class="token keyword">int</span> keySize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> randomKeyBytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>keySize <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    random<span class="token punctuation">.</span><span class="token function">nextBytes</span><span class="token punctuation">(</span>randomKeyBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SecretKeySpec</span><span class="token punctuation">(</span>randomKeyBytes<span class="token punctuation">,</span> cipher<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们创建一个所需密钥大小的字节数组，并用来自_random.nextBytes()<em>的随机字节填充它。然后使用随机字节数组创建_SecretKeySpec</em>。</p><p>Java _Random_类是一个<strong>伪随机数生成器</strong>（PRNG），也称为<strong>确定性随机数生成器</strong>（DRNG）。这意味着它不是真正的随机。基于其种子，PRNG中的随机数序列可以完全确定。Java不推荐将_Random_用于加密应用程序。</p><p>话虽如此，<strong>永远不要使用_Random_生成密钥</strong>。</p><h3 id="_4-2-安全随机" tabindex="-1"><a class="header-anchor" href="#_4-2-安全随机"><span>4.2 安全随机</span></a></h3><p>我们现在将使用Java中的_SecureRandom_类来生成密钥：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Key</span> <span class="token function">getSecureRandomKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> cipher<span class="token punctuation">,</span> <span class="token keyword">int</span> keySize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> secureRandomKeyBytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>keySize <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name">SecureRandom</span> secureRandom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecureRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    secureRandom<span class="token punctuation">.</span><span class="token function">nextBytes</span><span class="token punctuation">(</span>secureRandomKeyBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SecretKeySpec</span><span class="token punctuation">(</span>secureRandomKeyBytes<span class="token punctuation">,</span> cipher<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与前一个示例类似，我们实例化一个所需密钥大小的字节数组。现在，我们不是使用_Random_，而是使用_SecureRandom_为我们的字节数组生成随机字节。<em>SecureRandom_被Java推荐用于生成加密应用程序的随机数。它至少符合_FIPS 140-2，密码模块的安全要求</em>。</p><p>显然，在Java中，<strong>_SecureRandom_是获取随机性的事实上的标准</strong>。但这是否是生成密钥的最佳方式？让我们继续探讨下一个方法。</p><h3 id="_4-3-密钥生成器" tabindex="-1"><a class="header-anchor" href="#_4-3-密钥生成器"><span>4.3 密钥生成器</span></a></h3><p>接下来，让我们使用_密钥生成器_类生成密钥：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Key</span> <span class="token function">getKeyFromKeyGenerator</span><span class="token punctuation">(</span><span class="token class-name">String</span> cipher<span class="token punctuation">,</span> <span class="token keyword">int</span> keySize<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span> <span class="token punctuation">{</span>
    <span class="token class-name">KeyGenerator</span> keyGenerator <span class="token operator">=</span> <span class="token class-name">KeyGenerator</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>cipher<span class="token punctuation">)</span><span class="token punctuation">;</span>
    keyGenerator<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>keySize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> keyGenerator<span class="token punctuation">.</span><span class="token function">generateKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们为我们要使用的密码算法获取一个_密钥生成器_实例。然后，我们使用所需的_keySize_初始化_keyGenerator_对象。最后，我们调用_generateKey_方法来生成我们的密钥。那么，它与_Random_和_SecureRandom_方法有什么不同呢？</p><p><strong>有两个关键的区别值得强调。</strong></p><p>首先，_Random_或_SecureRandom_方法无法告诉我们是否生成了符合密码算法规范的正确大小的密钥。只有在我们进行加密时，如果密钥大小不受支持，我们才会遇到异常。</p><p>使用无效的_keySize_与_SecureRandom_一起，在初始化加密密码算法时会抛出异常：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">encrypt</span><span class="token punctuation">(</span>plainText<span class="token punctuation">,</span> <span class="token function">getSecureRandomKey</span><span class="token punctuation">(</span><span class="token constant">CIPHER</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span>InvalidKeyException</span><span class="token operator">:</span> <span class="token class-name">Invalid</span> <span class="token constant">AES</span> key length<span class="token operator">:</span> <span class="token number">13</span> bytes
  at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>provider<span class="token punctuation">.</span></span>AESCrypt</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">AESCrypt</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">90</span><span class="token punctuation">)</span>
  at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>provider<span class="token punctuation">.</span></span>GaloisCounterMode</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">GaloisCounterMode</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">321</span><span class="token punctuation">)</span>
  at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>provider<span class="token punctuation">.</span></span>CipherCore</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">CipherCore</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">592</span><span class="token punctuation">)</span>
  at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>provider<span class="token punctuation">.</span></span>CipherCore</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">CipherCore</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">470</span><span class="token punctuation">)</span>
  at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>provider<span class="token punctuation">.</span></span>AESCipher</span><span class="token punctuation">.</span><span class="token function">engineInit</span><span class="token punctuation">(</span><span class="token class-name">AESCipher</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">322</span><span class="token punctuation">)</span>
  at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span></span>Cipher</span><span class="token punctuation">.</span><span class="token function">implInit</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">867</span><span class="token punctuation">)</span>
  at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span></span>Cipher</span><span class="token punctuation">.</span><span class="token function">chooseProvider</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">929</span><span class="token punctuation">)</span>
  at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span></span>Cipher</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1299</span><span class="token punctuation">)</span>
  at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span></span>Cipher</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1236</span><span class="token punctuation">)</span>
  at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>baeldung<span class="token punctuation">.</span>secretkey<span class="token punctuation">.</span></span>Main</span><span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token class-name">Main</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">59</span><span class="token punctuation">)</span>
  at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>baeldung<span class="token punctuation">.</span>secretkey<span class="token punctuation">.</span></span>Main</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">Main</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">51</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另一方面，使用_密钥生成器_在密钥生成过程中就会失败，允许我们更适当地处理它：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">encrypt</span><span class="token punctuation">(</span>plainText<span class="token punctuation">,</span> <span class="token function">getKeyFromKeyGenerator</span><span class="token punctuation">(</span><span class="token constant">CIPHER</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span>InvalidParameterException</span><span class="token operator">:</span> <span class="token class-name">Wrong</span> keysize<span class="token operator">:</span> must be equal <span class="token keyword">to</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">192</span> or <span class="token number">256</span>
  at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>provider<span class="token punctuation">.</span></span>AESKeyGenerator</span><span class="token punctuation">.</span><span class="token function">engineInit</span><span class="token punctuation">(</span><span class="token class-name">AESKeyGenerator</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">93</span><span class="token punctuation">)</span>
  at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span></span>KeyGenerator</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">KeyGenerator</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">539</span><span class="token punctuation">)</span>
  at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span></span>KeyGenerator</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">KeyGenerator</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">516</span><span class="token punctuation">)</span>
  at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>baeldung<span class="token punctuation">.</span>secretkey<span class="token punctuation">.</span></span>Main</span><span class="token punctuation">.</span><span class="token function">getKeyFromKeyGenerator</span><span class="token punctuation">(</span><span class="token class-name">Main</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">89</span><span class="token punctuation">)</span>
  at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>baeldung<span class="token punctuation">.</span>secretkey<span class="token punctuation">.</span></span>Main</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">Main</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">58</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另一个关键区别是默认使用_SecureRandom_。_密钥生成器_类是Java的加密包_javax.crypto_的一部分，它确保了使用_SecureRandom_来实现随机性。我们可以看到_密钥生成器_类中的_init_方法的定义：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> keysize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">init</span><span class="token punctuation">(</span>keysize<span class="token punctuation">,</span> <span class="token class-name">JCAUtil</span><span class="token punctuation">.</span><span class="token function">getSecureRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，使用_密钥生成器_作为一种实践，确保我们永远不会使用_随机_类对象来生成密钥。</p><h3 id="_4-4-基于密码的密钥" tabindex="-1"><a class="header-anchor" href="#_4-4-基于密码的密钥"><span>4.4 基于密码的密钥</span></a></h3><p>到目前为止，我们一直在从不那么人性化的字节数组中生成密钥。基于密码的密钥（PBK）为我们提供了基于人类可读密码生成_SecretKey_的能力：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Key</span> <span class="token function">getPasswordBasedKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> cipher<span class="token punctuation">,</span> <span class="token keyword">int</span> keySize<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> password<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeySpecException</span> <span class="token punctuation">{</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> salt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name">SecureRandom</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecureRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    random<span class="token punctuation">.</span><span class="token function">nextBytes</span><span class="token punctuation">(</span>salt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">PBEKeySpec</span> pbeKeySpec <span class="token operator">=</span> <span class="token function">newKeySpec</span><span class="token punctuation">(</span>pbeKeySpec<span class="token punctuation">,</span> salt<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> keySize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">SecretKey</span> pbeKey <span class="token operator">=</span> <span class="token class-name">SecretKeyFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;PBKDF2WithHmacSHA256&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">generateSecret</span><span class="token punctuation">(</span>pbeKeySpec<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SecretKeySpec</span><span class="token punctuation">(</span>pbeKey<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cipher<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在这里进行了很多操作。让我们分解一下。</p><p>**我们从人类可读的密码开始。**这是一个秘密，必须受到保护。必须遵循密码指南，例如最小长度为8个字符，使用特殊字符，结合大小写字母、数字等。此外，OWASP指南建议检查是否已经暴露的密码。</p><p>用户友好的密码没有足够的熵。因此，<strong>我们添加了额外的随机生成字节称为 <em>salt</em> 使其更难以猜测。</strong> 最小盐长度应为128位。我们使用_SecureRandom_生成我们的盐。盐不是秘密，以明文形式存储。我们应该为每个密码生成盐，而不是全局使用相同的盐。这将保护免受彩虹表攻击，彩虹表攻击使用预先计算的哈希表查找以破解密码。</p><p>迭代次数是秘密生成算法应用转换函数的次数。它应该尽可能大。推荐的最小迭代次数为1,000。更高的迭代次数增加了攻击者在执行所有可能密码的暴力检查时的复杂性。</p><p>密钥大小与我们之前讨论的相同，可以是AES的128、192或256。</p><p>我们将上述四个元素包装到一个_PBEKeySpec_对象中。接下来，使用_SecretKeyFactory_，我们得到一个_PBKDF2WithHmacSHA256_算法的实例来生成密钥。</p><p>最后，使用_PBEKeySpec_调用_generateSecret_，我们根据人类可读的密码生成一个_SecretKey_。</p><h2 id="结论" tabindex="-1"><a class="header-anchor" href="#结论"><span>结论</span></a></h2><p>生成密钥有两个主要基础。它可以是随机密钥或基于人类可读密码的密钥。我们讨论了生成随机密钥的三种方法。其中，_KeyGenerator_提供真正的随机性，并提供检查和平衡。因此，<strong>_KeyGenerator_是更好的选择</strong>。</p><p>对于基于人类可读密码的密钥，我们可以使用_SecretKeyFactory_以及使用_SecureRandom_生成的盐和高迭代次数。</p><p>如常，完整的代码可在GitHub上获得。</p><p>OK</p>`,65),o=[p];function c(l,i){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","2024-07-22-Generating a Secure AES Key in Java.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-22/2024-07-22-Generating%20a%20Secure%20AES%20Key%20in%20Java.html","title":"在Java中生成安全的AES密钥","lang":"zh-CN","frontmatter":{"date":"2022-01-01T00:00:00.000Z","category":["Java","Security"],"tag":["AES","Key Generation","Encryption"],"head":[["meta",{"name":"keywords","content":"Java, AES, Key Generation, Encryption, Security"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-22/2024-07-22-Generating%20a%20Secure%20AES%20Key%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"在Java中生成安全的AES密钥"}],["meta",{"property":"og:description","content":"在Java中生成安全的AES密钥 在这篇文章中，我们将深入探讨AES或一般密码算法中密钥的目的。我们将回顾生成密钥时需要记住的最佳实践，并最终探讨生成密钥的各种方法，并根据指南对它们进行权衡。 高级加密标准（AES）是数据加密标准（DES）的后继者，由国家标准与技术研究院（NIST）在2001年发布。它被归类为对称块密码算法。 对称密码算法使用相同的密..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-22T12:43:38.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"AES"}],["meta",{"property":"article:tag","content":"Key Generation"}],["meta",{"property":"article:tag","content":"Encryption"}],["meta",{"property":"article:published_time","content":"2022-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-22T12:43:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"在Java中生成安全的AES密钥\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-01-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-22T12:43:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"在Java中生成安全的AES密钥 在这篇文章中，我们将深入探讨AES或一般密码算法中密钥的目的。我们将回顾生成密钥时需要记住的最佳实践，并最终探讨生成密钥的各种方法，并根据指南对它们进行权衡。 高级加密标准（AES）是数据加密标准（DES）的后继者，由国家标准与技术研究院（NIST）在2001年发布。它被归类为对称块密码算法。 对称密码算法使用相同的密..."},"headers":[{"level":3,"title":"2.1 AES变体","slug":"_2-1-aes变体","link":"#_2-1-aes变体","children":[]},{"level":3,"title":"2.2 AES有多安全？","slug":"_2-2-aes有多安全","link":"#_2-2-aes有多安全","children":[]},{"level":2,"title":"3. 好密钥的属性","slug":"_3-好密钥的属性","link":"#_3-好密钥的属性","children":[{"level":3,"title":"3.1 密钥大小","slug":"_3-1-密钥大小","link":"#_3-1-密钥大小","children":[]},{"level":3,"title":"3.2 熵","slug":"_3-2-熵","link":"#_3-2-熵","children":[]}]},{"level":2,"title":"4. 生成AES密钥","slug":"_4-生成aes密钥","link":"#_4-生成aes密钥","children":[{"level":3,"title":"4.1 随机","slug":"_4-1-随机","link":"#_4-1-随机","children":[]},{"level":3,"title":"4.2 安全随机","slug":"_4-2-安全随机","link":"#_4-2-安全随机","children":[]},{"level":3,"title":"4.3 密钥生成器","slug":"_4-3-密钥生成器","link":"#_4-3-密钥生成器","children":[]},{"level":3,"title":"4.4 基于密码的密钥","slug":"_4-4-基于密码的密钥","link":"#_4-4-基于密码的密钥","children":[]}]},{"level":2,"title":"结论","slug":"结论","link":"#结论","children":[]}],"git":{"createdTime":1721652218000,"updatedTime":1721652218000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":7.58,"words":2274},"filePathRelative":"posts/baeldung/2024-07-22/2024-07-22-Generating a Secure AES Key in Java.md","localizedDate":"2022年1月1日","excerpt":"\\n<p>在这篇文章中，我们将深入探讨AES或一般密码算法中密钥的目的。我们将回顾生成密钥时需要记住的最佳实践，并最终探讨生成密钥的各种方法，并根据指南对它们进行权衡。</p>\\n<p>高级加密标准（AES）是数据加密标准（DES）的后继者，由国家标准与技术研究院（NIST）在2001年发布。它被归类为对称块密码算法。</p>\\n<p>对称密码算法使用相同的密钥进行加密和解密。块密码意味着它处理128位的输入明文块：</p>\\n<h3>2.1 AES变体</h3>\\n<p>**基于密钥大小，AES支持三种变体：AES-128（128位）、AES-192（192位）和AES-256（256位）。**增加密钥大小会增加加密的强度，因为更大的密钥大小意味着可能的密钥数量更多。因此，在算法执行期间要执行的轮数也会增加，从而增加了所需的计算量：</p>","autoDesc":true}');export{k as comp,d as data};
