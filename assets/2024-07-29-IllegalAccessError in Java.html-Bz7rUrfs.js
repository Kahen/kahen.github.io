import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as n,a as e}from"./app-C5QtKXnb.js";const t={},l=e(`<h1 id="java中的illegalaccesserror" tabindex="-1"><a class="header-anchor" href="#java中的illegalaccesserror"><span>Java中的IllegalAccessError</span></a></h1><ol><li>概述</li></ol><p>在这个快速教程中，我们将讨论java.lang.IllegalAccessError。</p><p>我们将检查何时抛出此错误以及如何避免它。</p><ol start="2"><li>IllegalAccessError简介</li></ol><p>当应用程序尝试访问无法访问的字段或调用方法时，会抛出IllegalAccessError。</p><p>编译器会捕获此类非法调用，但我们仍然可能在运行时遇到IllegalAccessError。</p><p>首先，让我们观察一下IllegalAccessError的类层次结构：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>java.lang.Object
  |_java.lang.Throwable
    |_java.lang.Error
      |_java.lang.LinkageError
        |_java.lang.IncompatibleClassChangeError
          |_java.lang.IllegalAccessError
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它的父类是IncompatibleClassChangeError。因此，此错误的原因是一个或多个类定义中的不兼容更改。</p><p>简单来说，<strong>运行时的类版本与编译时的不同。</strong></p><ol start="3"><li>此错误可能如何发生？</li></ol><p>让我们通过一个简单的程序来理解：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Class1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;SUCCESS&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Class2</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Class1</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Class1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        c1<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在运行时，上述代码在Class1中调用方法bar()。到目前为止，一切正常。</p><p>现在，让我们将bar()的访问修饰符更新为private并独立编译它。</p><p>接下来，用新编译的版本替换Class1的先前定义（.class文件），然后重新运行程序：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>java.lang.IllegalAccessError:
  class Class2 tried to access private method Class1.bar()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上述异常是自解释的。Class1中的方法bar()现在是private。显然，访问它是非法的。</p><ol start="4"><li>IllegalAccessError在行动中</li></ol><h3 id="_4-1-库更新" tabindex="-1"><a class="header-anchor" href="#_4-1-库更新"><span>4.1. 库更新</span></a></h3><p>考虑一个在编译时使用库的应用程序，并且该库在运行时也在类路径中可用。</p><p>库的所有者将一个公开可用的方法更新为private，重新构建它，但忘记通知其他方此更改。</p><p>此外，在执行过程中，当应用程序调用此方法（假设为public访问）时，它遇到了IllegalAccessError。</p><h3 id="_4-2-接口默认方法" tabindex="-1"><a class="header-anchor" href="#_4-2-接口默认方法"><span>4.2. 接口默认方法</span></a></h3><p>接口中默认方法的误用是此错误的另一个原因。</p><p>考虑以下接口和类定义：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">Baeldung</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">foobar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;This is a default method.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Super</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">foobar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Super class method foobar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，让我们扩展Super并实现Baeldung：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">MySubClass</span> <span class="token keyword">extends</span> <span class="token class-name">Super</span> <span class="token keyword">implements</span> <span class="token class-name">Baeldung</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后，让我们通过实例化MySubClass来调用foobar()：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">new</span> <span class="token class-name">MySubClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foobar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Super中的方法foobar()是private，而Baeldung中是default。因此，在MySubClass的层次结构中它是可访问的。</p><p>因此，编译器不会抱怨，但在运行时，我们会得到一个错误：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>java.lang.IllegalAccessError:
  class IllegalAccessErrorExample tried to access private method &#39;void Super.foobar()&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在执行过程中，<strong>超类方法声明总是优先于接口默认方法。</strong></p><p>技术上，应该调用Super中的foobar，但它是private。毫无疑问，将抛出IllegalAccessError。</p><ol start="5"><li>如何避免它？</li></ol><p>确切地说，如果我们遇到IllegalAccessError，我们首先应该查找与访问修饰符相关的类定义中的更改。</p><p>其次，我们应该验证接口默认方法是否被覆盖为private访问修饰符。</p><p>使类级别方法公开将奏效。</p><ol start="6"><li>结论</li></ol><p>总之，编译器将解决大多数非法方法调用。如果我们仍然遇到IllegalAccesError，我们需要查看类定义的更改。</p><p>示例的源代码可在GitHub上获得。</p><p><img src="https://www.baeldung.com/wp-content/themes/baeldung/icon/logo.svg" alt="img" loading="lazy"><img src="https://secure.gravatar.com/avatar/dc417739e22ae675b0e1f7012bbddaa5?s=50&amp;r=g" alt="img" loading="lazy"><img src="https://secure.gravatar.com/avatar/db9b6e888453bec33b0a1b1522bae628?s=50&amp;r=g" alt="img" loading="lazy"><img src="https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png" alt="img" loading="lazy"><img src="https://www.baeldung.com/wp-content/uploads/2016/05/baeldung-rest-post-footer-main-1.2.0.jpg" alt="img" loading="lazy"><img src="https://www.baeldung.com/wp-content/uploads/2016/05/baeldung-rest-post-footer-icn-1.0.0.png" alt="img" loading="lazy"></p><p>OK</p>`,46),p=[l];function c(o,r){return n(),s("div",null,p)}const d=a(t,[["render",c],["__file","2024-07-29-IllegalAccessError in Java.html.vue"]]),g=JSON.parse('{"path":"/posts/baeldung/2024-07-29/2024-07-29-IllegalAccessError%20in%20Java.html","title":"Java中的IllegalAccessError","lang":"zh-CN","frontmatter":{"date":"2024-07-30T00:00:00.000Z","category":["Java","Error Handling"],"tag":["IllegalAccessError","Java Exception"],"head":[["meta",{"name":"keywords","content":"Java, Error, IllegalAccessError, Runtime Exception"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-29/2024-07-29-IllegalAccessError%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Java中的IllegalAccessError"}],["meta",{"property":"og:description","content":"Java中的IllegalAccessError 概述 在这个快速教程中，我们将讨论java.lang.IllegalAccessError。 我们将检查何时抛出此错误以及如何避免它。 IllegalAccessError简介 当应用程序尝试访问无法访问的字段或调用方法时，会抛出IllegalAccessError。 编译器会捕获此类非法调用，但我们仍..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.baeldung.com/wp-content/themes/baeldung/icon/logo.svg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-29T17:10:50.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"IllegalAccessError"}],["meta",{"property":"article:tag","content":"Java Exception"}],["meta",{"property":"article:published_time","content":"2024-07-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-29T17:10:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java中的IllegalAccessError\\",\\"image\\":[\\"https://www.baeldung.com/wp-content/themes/baeldung/icon/logo.svg\\",\\"https://secure.gravatar.com/avatar/dc417739e22ae675b0e1f7012bbddaa5?s=50&r=g\\",\\"https://secure.gravatar.com/avatar/db9b6e888453bec33b0a1b1522bae628?s=50&r=g\\",\\"https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png\\",\\"https://www.baeldung.com/wp-content/uploads/2016/05/baeldung-rest-post-footer-main-1.2.0.jpg\\",\\"https://www.baeldung.com/wp-content/uploads/2016/05/baeldung-rest-post-footer-icn-1.0.0.png\\"],\\"datePublished\\":\\"2024-07-30T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-29T17:10:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Java中的IllegalAccessError 概述 在这个快速教程中，我们将讨论java.lang.IllegalAccessError。 我们将检查何时抛出此错误以及如何避免它。 IllegalAccessError简介 当应用程序尝试访问无法访问的字段或调用方法时，会抛出IllegalAccessError。 编译器会捕获此类非法调用，但我们仍..."},"headers":[{"level":3,"title":"4.1. 库更新","slug":"_4-1-库更新","link":"#_4-1-库更新","children":[]},{"level":3,"title":"4.2. 接口默认方法","slug":"_4-2-接口默认方法","link":"#_4-2-接口默认方法","children":[]}],"git":{"createdTime":1722273050000,"updatedTime":1722273050000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":2.78,"words":833},"filePathRelative":"posts/baeldung/2024-07-29/2024-07-29-IllegalAccessError in Java.md","localizedDate":"2024年7月30日","excerpt":"\\n<ol>\\n<li>概述</li>\\n</ol>\\n<p>在这个快速教程中，我们将讨论java.lang.IllegalAccessError。</p>\\n<p>我们将检查何时抛出此错误以及如何避免它。</p>\\n<ol start=\\"2\\">\\n<li>IllegalAccessError简介</li>\\n</ol>\\n<p>当应用程序尝试访问无法访问的字段或调用方法时，会抛出IllegalAccessError。</p>\\n<p>编译器会捕获此类非法调用，但我们仍然可能在运行时遇到IllegalAccessError。</p>\\n<p>首先，让我们观察一下IllegalAccessError的类层次结构：</p>","autoDesc":true}');export{d as comp,g as data};
