import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-0nXvcScy.js";const p={},e=t('<h1 id="mockk-在-kotlin-中匹配可变参数的使用" tabindex="-1"><a class="header-anchor" href="#mockk-在-kotlin-中匹配可变参数的使用"><span>MockK 在 Kotlin 中匹配可变参数的使用</span></a></h1><p>MockK 是一个功能强大的 Kotlin 测试模拟库。当涉及到使用可变参数（varargs）的函数时，MockK 提供了优雅的解决方案。</p><p>在本教程中，我们将学习如何使用 MockK 来模拟带有 vararg 参数的函数。</p><h2 id="_2-mockk-对-varargs-的支持" tabindex="-1"><a class="header-anchor" href="#_2-mockk-对-varargs-的支持"><span>2. MockK 对 Varargs 的支持</span></a></h2><p>首先，我们创建一个带有 vararg 参数的基本函数。这将使我们能够演示如何模拟一个函数并有效地匹配 vararg 参数：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> MyClass <span class="token punctuation">{</span>\n    <span class="token keyword">fun</span> <span class="token function">joinBySpace</span><span class="token punctuation">(</span><span class="token keyword">vararg</span> strings<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> strings<span class="token punctuation">.</span><span class="token function">joinToString</span><span class="token punctuation">(</span>separator <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot; &quot;</span></span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>joinBySpace() 函数非常简单。顾名思义，它使用空格作为分隔符连接任意数量的 String 值：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">joinBySpace</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;a&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;b&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;c&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;d&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;e&quot;</span></span><span class="token punctuation">)</span>\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;a b c d e&quot;</span></span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>从 1.9.1 版本开始，MockK 引入了强大的 vararg 匹配器</strong>，提供了灵活的参数匹配功能。<strong>我们将深入探讨三个关键匹配器：anyVararg()，varargAll() 和 varargAny()。</strong></p><p>首先，让我们为我们的 MyClass 初始化一个模拟对象：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> mockkObj <span class="token operator">=</span> mockk<span class="token function">`&lt;MyClass&gt;`</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>我们将在整个教程中使用 mockkObj 对象来模拟 joinBySpace()。</strong></p><p>当使用 anyVararg()，varargAll() 或 varargAny() 来匹配 vararg 参数时，我们遵循一致的模式：<strong><em>FunctionToStub(optional prefix elements, *VarargMatcherFun(), optional suffix elements)</em></strong>，其中 VarargMatcherFun() 表示匹配器函数，如 anyVararg()，varargAll() 等。</p><p>让我们看一个例子：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code>every <span class="token punctuation">{</span> mockkObj<span class="token punctuation">.</span><span class="token function">joinBySpace</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;a&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;b&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;c&quot;</span></span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token function">anyVararg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;x&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;y&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;z&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token operator">..</span><span class="token punctuation">.</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 MockK 的 vararg 匹配中，前缀和后缀元素都是可选的。但是，如果提供了它们，它们将有助于参数匹配检查。<strong>VarargMatcherFun() 匹配前缀和后缀元素之间的元素。</strong></p><p>需要注意的是，<strong>所有内置的 vararg 匹配器都是返回数组的函数</strong>。因此，<strong>我们使用展开运算符 (*) 确保它们作为 vararg 参数正确传递。</strong></p><p>接下来，让我们更仔细地检查 anyVararg()，varargAll() 和 varargAny() 匹配器。</p><h2 id="_3-anyvararg-匹配器" tabindex="-1"><a class="header-anchor" href="#_3-anyvararg-匹配器"><span>3. anyVararg() 匹配器</span></a></h2><p>anyVararg() 函数<strong>不需要任何参数</strong>。它的用途是**匹配 vararg 中的任何数量的元素，这些元素可以是任何值。**一个例子可以清楚地展示它的工作原理：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code>every <span class="token punctuation">{</span> mockkObj<span class="token punctuation">.</span><span class="token function">joinBySpace</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;a&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;b&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;c&quot;</span></span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token function">anyVararg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;x&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;y&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;z&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span> returns <span class="token string-literal singleline"><span class="token string">&quot;Wow, Kotlin rocks!&quot;</span></span>\n\n<span class="token keyword">val</span> result <span class="token operator">=</span> mockkObj<span class="token punctuation">.</span><span class="token function">joinBySpace</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;a&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;b&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;c&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;Baeldung&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;is&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;cool&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;x&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;y&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;z&quot;</span></span><span class="token punctuation">)</span>\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Wow, Kotlin rocks!&quot;</span></span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>\n\n<span class="token keyword">val</span> result2 <span class="token operator">=</span> mockkObj<span class="token punctuation">.</span><span class="token function">joinBySpace</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;a&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;b&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;c&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;x&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;y&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;z&quot;</span></span><span class="token punctuation">)</span>\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Wow, Kotlin rocks!&quot;</span></span><span class="token punctuation">,</span> result2<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-varargall-匹配器" tabindex="-1"><a class="header-anchor" href="#_4-varargall-匹配器"><span>4. varargAll() 匹配器</span></a></h2><p>使用 varargAll()，<strong>我们可以指定一个 lambda 来建立一个条件，即所有 vararg 元素（不包括前缀和后缀）必须满足</strong>。lambda 接受一个 vararg 元素作为输入并返回一个 Boolean。</p><p>接下来，让我们看一个例子：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code>every <span class="token punctuation">{</span> mockkObj<span class="token punctuation">.</span><span class="token function">joinBySpace</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;a&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;b&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;c&quot;</span></span><span class="token punctuation">,</span> <span class="token operator">*</span>varargAll <span class="token punctuation">{</span> it<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;d&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;z&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span> returns <span class="token string-literal singleline"><span class="token string">&quot;Wow, Kotlin rocks!&quot;</span></span>\n\n<span class="token keyword">val</span> result <span class="token operator">=</span> mockkObj<span class="token punctuation">.</span><span class="token function">joinBySpace</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;a&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;b&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;c&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;d1&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;d2&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;d-whatever&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;z&quot;</span></span><span class="token punctuation">)</span>\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Wow, Kotlin rocks!&quot;</span></span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，使用 varargAll() 定义的匹配规则<strong>确保它所覆盖的所有元素都以字母‘d’开头</strong>。如果任何元素偏离了这个规则，lambda 返回 false。因此，我们的存根将不会被调用：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code>assertThrows```````<span class="token operator">&lt;</span>MockKException<span class="token operator">&gt;</span>``````` <span class="token punctuation">{</span>\n    mockkObj<span class="token punctuation">.</span><span class="token function">joinBySpace</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;a&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;b&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;c&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;d1&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;Baeldung&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;z&quot;</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">also</span> <span class="token punctuation">{</span> exception <span class="token operator">-&gt;</span>\n    <span class="token function">assertTrue</span><span class="token punctuation">(</span>exception<span class="token punctuation">.</span>message<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;no answer found&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，值 “Baeldung” 不以 ‘b’ 开头。因此，这个调用不匹配我们之前定义的存根。</p><p>此外，<strong>如果 varargAll() 没有包含任何元素，模拟函数仍然可以正常工作</strong>：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> result2 <span class="token operator">=</span> mockkObj<span class="token punctuation">.</span><span class="token function">joinBySpace</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;a&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;b&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;c&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;z&quot;</span></span><span class="token punctuation">)</span>\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Wow, Kotlin rocks!&quot;</span></span><span class="token punctuation">,</span> result2<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-varargany-匹配器" tabindex="-1"><a class="header-anchor" href="#_5-varargany-匹配器"><span>5. varargAny() 匹配器</span></a></h2><p>varargAny() 函数的工作方式与 varargAll() 类似，但有一个不同的要求：<strong>它要求至少有一个元素满足 lambda 中指定的条件。</strong></p><p>接下来，让我们在之前的例子中应用 varargAny()：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code>every <span class="token punctuation">{</span> mockkObj<span class="token punctuation">.</span><span class="token function">joinBySpace</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;a&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;b&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;c&quot;</span></span><span class="token punctuation">,</span> <span class="token operator">*</span>varargAny <span class="token punctuation">{</span> it<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;d&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;z&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span> returns <span class="token string-literal singleline"><span class="token string">&quot;Wow, Kotlin rocks!&quot;</span></span>\n\n<span class="token keyword">val</span> result <span class="token operator">=</span> mockkObj<span class="token punctuation">.</span><span class="token function">joinBySpace</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;a&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;b&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;c&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;d1&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;d2&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;d-whatever&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;z&quot;</span></span><span class="token punctuation">)</span>\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Wow, Kotlin rocks!&quot;</span></span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>\n\n<span class="token keyword">val</span> result2 <span class="token operator">=</span> mockkObj<span class="token punctuation">.</span><span class="token function">joinBySpace</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;a&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;b&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;c&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;d1&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;Baeldung&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;z&quot;</span></span><span class="token punctuation">)</span>\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Wow, Kotlin rocks!&quot;</span></span><span class="token punctuation">,</span> result2<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这次，尽管 “Baeldung” 不以 ‘b’ 开头，但 “d1” 使 varargAny() 返回 true。因此，我们的存根匹配并被调用。</p><p>然而，<strong>如果 varargAny() 没有覆盖任何元素，我们的存根将不匹配</strong>：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code>assertThrows```````<span class="token operator">&lt;</span>MockKException<span class="token operator">&gt;</span>``````` <span class="token punctuation">{</span>\n    mockkObj<span class="token punctuation">.</span><span class="token function">joinBySpace</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;a&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;b&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;c&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;z&quot;</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">also</span> <span class="token punctuation">{</span> exception <span class="token operator">-&gt;</span>\n    <span class="token function">assertTrue</span><span class="token punctuation">(</span>exception<span class="token punctuation">.</span>message<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;no answer found&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-mockkvarargscope-的-nargs-和-position" tabindex="-1"><a class="header-anchor" href="#_6-mockkvarargscope-的-nargs-和-position"><span>6. MockKVarargScope 的 nArgs 和 position</span></a></h2><p>我们已经讨论了 varargAny() 和 varargAll() 在类似上下文中的工作方式。它们都依赖于一个 lambda 来评估相应的元素是否满足某些条件。现在，让我们深入了解它们的函数定义：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">inline</span> <span class="token keyword">fun</span> ``<span class="token operator">&lt;</span><span class="token keyword">reified</span> T <span class="token operator">:</span> Any<span class="token operator">&gt;</span>`` <span class="token function">varargAll</span><span class="token punctuation">(</span><span class="token keyword">noinline</span> matcher<span class="token operator">:</span> MockKVarargScope<span class="token punctuation">.</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Boolean<span class="token punctuation">)</span>\n\n<span class="token keyword">inline</span> <span class="token keyword">fun</span> ``<span class="token operator">&lt;</span><span class="token keyword">reified</span> T <span class="token operator">:</span> Any<span class="token operator">&gt;</span>`` <span class="token function">varargAny</span><span class="token punctuation">(</span><span class="token keyword">noinline</span> matcher<span class="token operator">:</span> MockKVarargScope<span class="token punctuation">.</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Boolean<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如我们所看到的，matcher 参数不仅仅是 (T) -&gt; Boolean，而是 MockKVarargScope.(T) -&gt; Boolean。这意味着 <strong>lambda 也作为 MockKVarargScope 类的扩展函数，使其能够使用 MockKVarargScope 提供的属性</strong>。</p><p>接下来，让我们看看 MockKVarargScope 类的定义：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">MockKVarargScope</span><span class="token punctuation">(</span><span class="token keyword">val</span> position<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token keyword">val</span> nArgs<span class="token operator">:</span> Int<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>MockKVarargScope 类定义了两个属性：</p><ul><li>position – 表示当前元素在 vararg 参数中的索引（从零开始）</li><li>nArgs – 表示 vararg 参数中的总元素数量</li></ul><p>需要强调的是，<strong>position 和 nArgs 属性都包括前缀和后缀中的所有元素</strong>。</p><p>接下来，让我们看看如何在 varargAll() 和 varargAny() 中使用这些属性。</p><h3 id="_6-1-nargs-属性" tabindex="-1"><a class="header-anchor" href="#_6-1-nargs-属性"><span>6.1. nArgs 属性</span></a></h3><p><strong>我们可以直接在 lambda 表达式中使用 nArgs 属性来执行有关 vararg 参数大小的检查。</strong></p><p>接下来，让我们以 varargAll() 为例来展示它如何工作：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code>every <span class="token punctuation">{</span> mockkObj<span class="token punctuation">.</span><span class="token function">joinBySpace</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;a&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;b&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;c&quot;</span></span><span class="token punctuation">,</span> <span class="token operator">*</span>varargAll <span class="token punctuation">{</span> nArgs <span class="token operator">&gt;</span> <span class="token number">6</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;z&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span> returns <span class="token string-literal singleline"><span class="token string">&quot;Wow, Kotlin rocks!&quot;</span></span>\n\n<span class="token keyword">val</span> result <span class="token operator">=</span> mockkObj<span class="token punctuation">.</span><span class="token function">joinBySpace</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;a&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;b&quot;</span></span>c<span class="token string-literal singleline"><span class="token string">&quot;, &quot;</span></span>Baeldung<span class="token string-literal singleline"><span class="token string">&quot;, &quot;</span></span><span class="token keyword">is</span><span class="token string-literal singleline"><span class="token string">&quot;, &quot;</span></span>cool<span class="token string-literal singleline"><span class="token string">&quot;, &quot;</span></span>z&quot;<span class="token punctuation">)</span>\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Wow, Kotlin rocks!&quot;</span></span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如代码所示，我们为 joinBySpace() 创建了一个存根。此外，它检查 vararg 参数是否至少包含七个元素，如果是，则返回预定义的值。</p><p>否则，存根将不会被调用：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code>assertThrows```````<span class="token operator">&lt;</span>MockKException<span class="token operator">&gt;</span>``````` <span class="token punctuation">{</span>\n    mockkObj<span class="token punctuation">.</span><span class="token function">joinBySpace</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;a&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;b&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;c&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;Baeldung&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;z&quot;</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">also</span> <span class="token punctuation">{</span> exception <span class="token operator">-&gt;</span>\n    <span class="token function">assertTrue</span><span class="token punctuation">(</span>exception<span class="token punctuation">.</span>message<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;no answer found&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于 nArgs 表示 vararg 参数中的元素计数，<strong>varargAll { nArgs &gt; 6 } 和 varargAny { nArgs &gt; 6 } 没有区别</strong>：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code>every <span class="token punctuation">{</span> mockkObj<span class="token punctuation">.</span><span class="token function">joinBySpace</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;a&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;b&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;c&quot;</span></span><span class="token punctuation">,</span> <span class="token operator">*</span>varargAny <span class="token punctuation">{</span> nArgs <span class="token operator">&gt;</span> <span class="token number">6</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;z&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span> returns <span class="token string-literal singleline"><span class="token string">&quot;Wow, Kotlin rocks!&quot;</span></span>\n\n<span class="token keyword">val</span> result <span class="token operator">=</span> mockkObj<span class="token punctuation">.</span><span class="token function">joinBySpace</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;a&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;b&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;c&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;Baeldung&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;is&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;cool&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;z&quot;</span></span><span class="token punctuation">)</span>\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Wow, Kotlin rocks!&quot;</span></span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>\n\nassertThrows```````<span class="token operator">&lt;</span>MockKException<span class="token operator">&gt;</span>``````` <span class="token punctuation">{</span>\n    mockkObj<span class="token punctuation">.</span><span class="token function">joinBySpace</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;a&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;b&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;c&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;Baeldung&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;z&quot;</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">also</span> <span class="token punctuation">{</span> exception <span class="token operator">-&gt;</span>\n    <span class="token function">assertTrue</span><span class="token punctuation">(</span>exception<span class="token punctuation">.</span>message<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;no answer found&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2-position-属性" tabindex="-1"><a class="header-anchor" href="#_6-2-position-属性"><span>6.2. position 属性</span></a></h3><p>同样地，<strong>position 属性允许我们在传递给 varargAll() 和 varargAny() 的 lambda 中进行基于元素索引的检查</strong>。</p><p>再次以 varargAll() 为例来演示如何在 lambda 中使用 position：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code>every <span class="token punctuation">{</span>\n    mockkObj<span class="token punctuation">.</span><span class="token function">joinBySpace</span><span class="token punctuation">(</span>\n        <span class="token string-literal singleline"><span class="token string">&quot;a&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;b&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;c&quot;</span></span><span class="token punctuation">,</span> <span class="token operator">*</span>varargAll <span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> it <span class="token operator">==</span> <span class="token string-literal singleline"><span class="token string">&quot;E&quot;</span></span> <span class="token keyword">else</span> it <span class="token operator">==</span> <span class="token string-literal singleline"><span class="token string">&quot;O&quot;</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;z&quot;</span></span>\n    <span class="token punctuation">)</span>\n<span class="token punctuation">}</span> returns <span class="token string-literal singleline"><span class="token string">&quot;Wow, Kotlin rocks!&quot;</span></span>\n\n<span class="token keyword">val</span> result <span class="token operator">=</span> mockkObj<span class="token punctuation">.</span><span class="token function">joinBySpace</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;a&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;b&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;c&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;O&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;E&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;O&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;E&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;z&quot;</span></span><span class="token punctuation">)</span>\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Wow, Kotlin rocks!&quot;</span></span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们指定了 <strong>varargAll() 所覆盖的元素，如果它们的位置是偶数，则元素应该是 “E”。否则，需要一个 “O” 元素。</strong></p><p>由于我们使用了 varargAll() 匹配器，<strong>任何违反指定规则的元素都会导致不匹配的条件</strong>：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code>assertThrows```````<span class="token operator">&lt;</span>MockKException<span class="token operator">&gt;</span>``````` <span class="token punctuation">{</span>\n    mockkObj<span class="token punctuation">.</span><span class="token function">joinBySpace</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;a&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;b&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;c&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;Baeldung&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;z&quot;</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">also</span> <span class="token punctuation">{</span> exception <span class="token operator">-&gt;</span>\n    <span class="token function">assertTrue</span><span class="token punctuation">(</span>exception<span class="token punctuation">.</span>message<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;no answer found&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\nassertThrows```````<span class="token operator">&lt;</span>MockKException<span class="token operator">&gt;</span>``````` <span class="token punctuation">{</span>\n    mockkObj<span class="token punctuation">.</span><span class="token function">joinBySpace</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;a&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;b&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;c&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;O&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;Baeldung&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;is&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;cool&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;z&quot;</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">also</span> <span class="token punctuation">{</span> exception <span class="token operator">-&gt;</span>\n    <span class="token function">assertTrue</span><span class="token punctuation">(</span>exception<span class="token punctuation">.</span>message<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;no answer found&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然而，如果我们将上面的例子中的 varargAll() 替换为 varargAny() 匹配器，<strong>varargAny() 匹配器只要至少有一个元素符合 position 规则就认为它是匹配的</strong>：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code>every <span class="token punctuation">{</span>\n    mockkObj<span class="token punctuation">.</span><span class="token function">joinBySpace</span><span class="token punctuation">(</span>\n        <span class="token string-literal singleline"><span class="token string">&quot;a&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;b&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;c&quot;</span></span><span class="token punctuation">,</span> <span class="token operator">*</span>varargAny <span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> it <span class="token operator">==</span> <span class="token string-literal singleline"><span class="token string">&quot;E&quot;</span></span> <span class="token keyword">else</span> it <span class="token operator">==</span> <span class="token string-literal singleline"><span class="token string">&quot;O&quot;</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;z&quot;</span></span>\n    <span class="token punctuation">)</span>\n<span class="token punctuation">}</span> returns <span class="token string-literal singleline"><span class="token string">&quot;Wow, Kotlin rocks!&quot;</span></span>\n\nassertThrows```````<span class="token operator">&lt;</span>MockKException<span class="token operator">&gt;</span>``````` <span class="token punctuation">{</span>\n    mockkObj<span class="token punctuation">.</span><span class="token function">joinBySpace</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;a&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;b&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;c&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;Baeldung&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;z&quot;</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">also</span> <span class="token punctuation">{</span> exception <span class="token operator">-&gt;</span>\n    <span class="token function">assertTrue</span><span class="token punctuation">(</span>exception<span class="token punctuation">.</span>message<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;no answer found&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">val</span> result <span class="token operator">=</span> mockkObj<span class="token punctuation">.</span><span class="token function">joinBySpace</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;a&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;b&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;c&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;O&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;Baeldung&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;is&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;cool&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;z&quot;</span></span><span class="token punctuation">)</span>\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Wow, Kotlin rocks!&quot;</span></span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-结论" tabindex="-1"><a class="header-anchor" href="#_7-结论"><span>7. 结论</span></a></h2><p>在本文中，我们深入探讨了如何使用 MockK 的 anyVararg()，varargAll() 和 varargAny() 匹配器来为模拟对象中的函数创建存根。此外，我们还展示了示例，说明如何在 varargAll() 和 varargAny() 中使用 MockKVarargScope 的属性。</p><p>如常，示例的完整源代码可在 GitHub 上获得。</p><p><a href="https://www.baeldung.com/kotlin/wp-content/themes/baeldung/icon/logo.svg" target="_blank" rel="noopener noreferrer">Baeldung Kotlin Logo</a><a href="https://www.baeldung.com/wp-content/uploads/sites/5/2022/11/kotlin_sublogo.png" target="_blank" rel="noopener noreferrer">Kotlin Sublogo</a><a href="https://secure.gravatar.com/avatar/c6c28b2e0205c9b87004ebaade245ff1?s=50&amp;r=g" target="_blank" rel="noopener noreferrer">Gravatar Image</a><a href="https://www.baeldung.com/kotlin/wp-content/themes/baeldung/icon/whiteleaf.svg" target="_blank" rel="noopener noreferrer">Baeldung Whiteleaf Icon</a></p><p>OK</p>',70),o=[e];function l(i,c){return a(),s("div",null,o)}const k=n(p,[["render",l],["__file","2024-07-02-Matching Varargs Using MockK in Kotlin.html.vue"]]),g=JSON.parse('{"path":"/posts/baeldung/2024-07-02/2024-07-02-Matching%20Varargs%20Using%20MockK%20in%20Kotlin.html","title":"MockK 在 Kotlin 中匹配可变参数的使用","lang":"zh-CN","frontmatter":{"date":"2022-11-01T00:00:00.000Z","category":["Kotlin","MockK"],"tag":["MockK","varargs"],"head":[["meta",{"name":"keywords","content":"Kotlin, MockK, varargs, 测试, 模拟"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-02/2024-07-02-Matching%20Varargs%20Using%20MockK%20in%20Kotlin.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"MockK 在 Kotlin 中匹配可变参数的使用"}],["meta",{"property":"og:description","content":"MockK 在 Kotlin 中匹配可变参数的使用 MockK 是一个功能强大的 Kotlin 测试模拟库。当涉及到使用可变参数（varargs）的函数时，MockK 提供了优雅的解决方案。 在本教程中，我们将学习如何使用 MockK 来模拟带有 vararg 参数的函数。 2. MockK 对 Varargs 的支持 首先，我们创建一个带有 vara..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-02T16:55:56.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"MockK"}],["meta",{"property":"article:tag","content":"varargs"}],["meta",{"property":"article:published_time","content":"2022-11-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-02T16:55:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MockK 在 Kotlin 中匹配可变参数的使用\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-11-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-02T16:55:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"MockK 在 Kotlin 中匹配可变参数的使用 MockK 是一个功能强大的 Kotlin 测试模拟库。当涉及到使用可变参数（varargs）的函数时，MockK 提供了优雅的解决方案。 在本教程中，我们将学习如何使用 MockK 来模拟带有 vararg 参数的函数。 2. MockK 对 Varargs 的支持 首先，我们创建一个带有 vara..."},"headers":[{"level":2,"title":"2. MockK 对 Varargs 的支持","slug":"_2-mockk-对-varargs-的支持","link":"#_2-mockk-对-varargs-的支持","children":[]},{"level":2,"title":"3. anyVararg() 匹配器","slug":"_3-anyvararg-匹配器","link":"#_3-anyvararg-匹配器","children":[]},{"level":2,"title":"4. varargAll() 匹配器","slug":"_4-varargall-匹配器","link":"#_4-varargall-匹配器","children":[]},{"level":2,"title":"5. varargAny() 匹配器","slug":"_5-varargany-匹配器","link":"#_5-varargany-匹配器","children":[]},{"level":2,"title":"6. MockKVarargScope 的 nArgs 和 position","slug":"_6-mockkvarargscope-的-nargs-和-position","link":"#_6-mockkvarargscope-的-nargs-和-position","children":[{"level":3,"title":"6.1. nArgs 属性","slug":"_6-1-nargs-属性","link":"#_6-1-nargs-属性","children":[]},{"level":3,"title":"6.2. position 属性","slug":"_6-2-position-属性","link":"#_6-2-position-属性","children":[]}]},{"level":2,"title":"7. 结论","slug":"_7-结论","link":"#_7-结论","children":[]}],"git":{"createdTime":1719939356000,"updatedTime":1719939356000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":6.34,"words":1902},"filePathRelative":"posts/baeldung/2024-07-02/2024-07-02-Matching Varargs Using MockK in Kotlin.md","localizedDate":"2022年11月1日","excerpt":"\\n<p>MockK 是一个功能强大的 Kotlin 测试模拟库。当涉及到使用可变参数（varargs）的函数时，MockK 提供了优雅的解决方案。</p>\\n<p>在本教程中，我们将学习如何使用 MockK 来模拟带有 vararg 参数的函数。</p>\\n<h2>2. MockK 对 Varargs 的支持</h2>\\n<p>首先，我们创建一个带有 vararg 参数的基本函数。这将使我们能够演示如何模拟一个函数并有效地匹配 vararg 参数：</p>\\n<div class=\\"language-kotlin\\" data-ext=\\"kt\\" data-title=\\"kt\\"><pre class=\\"language-kotlin\\"><code><span class=\\"token keyword\\">class</span> MyClass <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">fun</span> <span class=\\"token function\\">joinBySpace</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">vararg</span> strings<span class=\\"token operator\\">:</span> String<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> String <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> strings<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">joinToString</span><span class=\\"token punctuation\\">(</span>separator <span class=\\"token operator\\">=</span> <span class=\\"token string-literal singleline\\"><span class=\\"token string\\">\\" \\"</span></span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{k as comp,g as data};
