import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-D2YUBYe-.js";const p={},o=t('<hr><h1 id="java中使用jsoup解析html表格" tabindex="-1"><a class="header-anchor" href="#java中使用jsoup解析html表格"><span>Java中使用Jsoup解析HTML表格</span></a></h1><p>Jsoup是一个开源库，用于抓取HTML页面。它提供了一个API，使用DOM API方法进行数据解析、提取和操作。</p><p>在本文中，我们将看到如何使用Jsoup解析HTML表格。<strong>我们将检索和更新HTML表格中的数据，并且，使用Jsoup向表格中添加和删除行。</strong></p><h3 id="_2-依赖性" tabindex="-1"><a class="header-anchor" href="#_2-依赖性"><span>2. 依赖性</span></a></h3><p>要使用Jsoup库，请将以下依赖项添加到项目中：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`org.jsoup`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`jsoup`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`1.17.2`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以在Maven中央仓库中找到Jsoup库的最新版本。</p><h3 id="_3-表格结构" tabindex="-1"><a class="header-anchor" href="#_3-表格结构"><span>3. 表格结构</span></a></h3><p>为了通过jsoup解析HTML表格，我们将使用一个示例HTML结构。完整的HTML结构可以在文章末尾提到的GitHub存储库中找到。这里，我们展示了一个只有两行数据的表格，以示例说明：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">&gt;</span></span>`\n        ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>``\n            ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>````Name````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>````\n            ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>````Maths````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>````\n            ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>````English````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>````\n            ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>````Science````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>````\n        ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>``\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">&gt;</span></span>`\n        ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>``\n            ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>````Student 1````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>````\n            ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>````90````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>````\n            ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>````85````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>````\n            ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>````92````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>````\n        ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>``\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span>`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如我们所见，我们解析的表格有一个带有_thead_标签的标题行，后面是_tbody_标签中的数据行。我们假设HTML文档中的表格将采用上述格式。</p><p>首先，为了从解析后的文档中选择一个HTML表格，我们可以使用以下代码片段：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Element</span> table <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&quot;table&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Elements</span> rows <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&quot;tr&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Elements</span> first <span class="token operator">=</span> rows<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&quot;th,td&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如我们所见，表格元素是从文档中选择的，然后，为了获取行元素，_tr_是从表格元素中选择的。由于表格中有多个行，我们选择了第一行中的_th_或_td_元素。使用这些函数，我们可以编写以下函数来解析表格数据。</p><p>这里，我们假设表格中没有使用_colspan_或_rowspan_元素，并且第一行存在带有标题_th_标签。</p><p>以下是解析表格的代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">List</span>```<span class="token operator">&lt;</span><span class="token class-name">Map</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>````<span class="token operator">&gt;</span> <span class="token function">parseTable</span><span class="token punctuation">(</span><span class="token class-name">Document</span> doc<span class="token punctuation">,</span> <span class="token keyword">int</span> tableOrder<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Element</span> table <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&quot;table&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>tableOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Element</span> tbody <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&quot;tbody&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Elements</span> dataRows <span class="token operator">=</span> tbody<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&quot;tr&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Elements</span> headerRow <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&quot;tr&quot;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&quot;th,td&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">List</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`` headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>``<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Element</span> header <span class="token operator">:</span> headerRow<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        headers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token class-name">List</span>```<span class="token operator">&lt;</span><span class="token class-name">Map</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>````<span class="token operator">&gt;</span> parsedDataRows <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span>```<span class="token operator">&lt;</span><span class="token class-name">Map</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>````<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> row `<span class="token operator">&lt;</span> dataRows<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> row<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Elements</span> colVals <span class="token operator">=</span> dataRows<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&quot;th,td&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">int</span> colCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token class-name">Map</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`` dataRow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Element</span> colVal <span class="token operator">:</span> colVals<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            dataRow<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>colCount<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">,</span> colVal<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        parsedDataRows<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dataRow<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> parsedDataRows<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个函数中，参数_doc_是从文件加载的HTML文档，<em>tableOrder_是文档中的第n个表格元素。**我们使用_List```&lt;Map`&lt;String, String&gt;````&gt;<em>来存储表格中_tbody_元素下的_dataRows_列表。**列表中的每个元素是一个_Map</em>，代表一个_dataRow</em>。这个_Map_存储列名称作为键，该列的行值作为映射值。使用列表的_Maps_可以方便地访问检索到的数据。</p><p><strong>列表索引表示行号，我们可以通过其映射键获取特定的单元格数据。</strong></p><p>我们可以使用以下测试用例来验证_table_数据是否正确检索：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenDocumentTableParsed_thenTableDataReturned</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">JsoupTableParser</span> jsoParser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsoupTableParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Document</span> doc <span class="token operator">=</span> jsoParser<span class="token punctuation">.</span><span class="token function">loadFromFile</span><span class="token punctuation">(</span><span class="token string">&quot;Students.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span>```<span class="token operator">&lt;</span><span class="token class-name">Map</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>````<span class="token operator">&gt;</span> tableData <span class="token operator">=</span> jsoParser<span class="token punctuation">.</span><span class="token function">parseTable</span><span class="token punctuation">(</span>doc<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;90&quot;</span><span class="token punctuation">,</span> tableData<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;Maths&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从JUnit测试用例中，我们可以确认，因为我们已经解析了所有表格单元格的文本，并将它们存储在_ArrayList_的_HashMap_对象中，列表中的每个元素代表表格中的一个数据行。<strong>行由一个_HashMap_表示，其中键是列标题，单元格文本是值。使用这种结构，我们可以轻松地访问表格数据。</strong></p><h3 id="_5-更新解析表格的元素" tabindex="-1"><a class="header-anchor" href="#_5-更新解析表格的元素"><span>5. 更新解析表格的元素</span></a></h3><p>在解析时插入或更新元素，我们可以使用以下代码对从行中检索到的_td_元素进行操作：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>colVals<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>colCount<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>updateValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>colVals<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>colCount<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>updateValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>更新解析表格中的值的函数如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateTableData</span><span class="token punctuation">(</span><span class="token class-name">Document</span> doc<span class="token punctuation">,</span> <span class="token keyword">int</span> tableOrder<span class="token punctuation">,</span> <span class="token class-name">String</span> updateValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Element</span> table <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&quot;table&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>tableOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Element</span> tbody <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&quot;tbody&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Elements</span> dataRows <span class="token operator">=</span> tbody<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&quot;tr&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> row <span class="token operator">&lt;</span> dataRows<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> row<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Elements</span> colVals <span class="token operator">=</span> dataRows<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&quot;th,td&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> colCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> colCount <span class="token operator">&lt;</span> colVals<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> colCount<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            colVals<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>colCount<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>updateValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的函数中，我们从表格的_tbody_元素中获取数据行。该函数遍历表格的每个单元格，并将它的值设置为参数值，<em>updatedValue</em>。它将所有单元格的值更新为相同的值，以演示可以使用Jsoup更新单元格值。我们可以通过指定数据行的行和列索引来更新特定单元格的值。</p><p>下面的测试验证了更新函数：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenTableUpdated_thenUpdatedDataReturned</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">JsoupTableParser</span> jsoParser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsoupTableParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Document</span> doc <span class="token operator">=</span> jsoParser<span class="token punctuation">.</span><span class="token function">loadFromFile</span><span class="token punctuation">(</span><span class="token string">&quot;Students.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    jsoParser<span class="token punctuation">.</span><span class="token function">updateTableData</span><span class="token punctuation">(</span>doc<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;50&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span>```<span class="token operator">&lt;</span><span class="token class-name">Map</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>````<span class="token operator">&gt;</span> tableData <span class="token operator">=</span> jsoParser<span class="token punctuation">.</span><span class="token function">parseTable</span><span class="token punctuation">(</span>doc<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;50&quot;</span><span class="token punctuation">,</span> tableData<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;Maths&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JUnit测试用例确认了_updateTableData_操作将所有_table_单元格值更新为50。这里我们正在验证第三行数据的Maths列的数据。</p><p>同样，我们可以为表格的特定单元格设置所需的值。</p><h3 id="_6-向表格添加行" tabindex="-1"><a class="header-anchor" href="#_6-向表格添加行"><span>6. 向表格添加行</span></a></h3><p>我们可以使用以下函数向表格添加一行：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addRowToTable</span><span class="token punctuation">(</span><span class="token class-name">Document</span> doc<span class="token punctuation">,</span> <span class="token keyword">int</span> tableOrder<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Element</span> table <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&quot;table&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>tableOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Element</span> tbody <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&quot;tbody&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">Elements</span> rows <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&quot;tr&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Elements</span> headerCols <span class="token operator">=</span> rows<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&quot;th,td&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> numCols <span class="token operator">=</span> headerCols<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">Elements</span> colVals <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Elements</span><span class="token punctuation">(</span>numCols<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> colCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> colCount <span class="token operator">&lt;</span> numCols<span class="token punctuation">;</span> colCount<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Element</span> colVal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Element</span><span class="token punctuation">(</span><span class="token string">&quot;td&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        colVal<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&quot;11&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        colVals<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>colVal<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token class-name">Elements</span> dataRows <span class="token operator">=</span> tbody<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&quot;tr&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Element</span> newDataRow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Element</span><span class="token punctuation">(</span><span class="token string">&quot;tr&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    newDataRow<span class="token punctuation">.</span><span class="token function">appendChildren</span><span class="token punctuation">(</span>colVals<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    dataRows<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>newDataRow<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    tbody<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>dataRows<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的函数中，我们从表格的_thead_行获取列数，以及从表格的_tbody_元素获取数据行。在将新行添加到_dataRows_列表后，我们使用_dataRows_更新_tbody_的HTML内容。</p><p>我们可以使用以下测试用例来验证行的添加：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenTableRowAdded_thenRowCountIncreased</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">JsoupTableParser</span> jsoParser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsoupTableParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Document</span> doc <span class="token operator">=</span> jsoParser<span class="token punctuation">.</span><span class="token function">loadFromFile</span><span class="token punctuation">(</span><span class="token string">&quot;Students.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span>```<span class="token operator">&lt;</span><span class="token class-name">Map</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>````<span class="token operator">&gt;</span> tableData <span class="token operator">=</span> jsoParser<span class="token punctuation">.</span><span class="token function">parseTable</span><span class="token punctuation">(</span>doc<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> countBeforeAdd <span class="token operator">=</span> tableData<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    jsoParser<span class="token punctuation">.</span><span class="token function">addRowToTable</span><span class="token punctuation">(</span>doc<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    tableData <span class="token operator">=</span> jsoParser<span class="token punctuation">.</span><span class="token function">parseTable</span><span class="token punctuation">(</span>doc<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span>countBeforeAdd <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> tableData<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以从JUnit测试用例中确认，_table_上的_addRowToTable_操作通过1增加了表格的行数。此操作在列表的末尾添加了新行。</p><p><strong>同样，我们可以通过在添加时指定索引，将行添加到任何位置。</strong></p>',43),e=[o];function c(l,u){return a(),s("div",null,e)}const r=n(p,[["render",c],["__file","2024-06-21-Parsing HTML Table in Java With Jsoup.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/Archive/2024-06-21-Parsing%20HTML%20Table%20in%20Java%20With%20Jsoup.html","title":"Java中使用Jsoup解析HTML表格","lang":"zh-CN","frontmatter":{"date":"2024-06-21T00:00:00.000Z","category":["Java","Jsoup"],"tag":["HTML","网页抓取"],"head":[["meta",{"name":"keywords","content":"Jsoup, HTML表格解析, Java, 数据提取"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/Archive/2024-06-21-Parsing%20HTML%20Table%20in%20Java%20With%20Jsoup.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Java中使用Jsoup解析HTML表格"}],["meta",{"property":"og:description","content":"Java中使用Jsoup解析HTML表格 Jsoup是一个开源库，用于抓取HTML页面。它提供了一个API，使用DOM API方法进行数据解析、提取和操作。 在本文中，我们将看到如何使用Jsoup解析HTML表格。我们将检索和更新HTML表格中的数据，并且，使用Jsoup向表格中添加和删除行。 2. 依赖性 要使用Jsoup库，请将以下依赖项添加到项目..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-21T09:54:56.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"HTML"}],["meta",{"property":"article:tag","content":"网页抓取"}],["meta",{"property":"article:published_time","content":"2024-06-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-21T09:54:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java中使用Jsoup解析HTML表格\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-21T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-21T09:54:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Java中使用Jsoup解析HTML表格 Jsoup是一个开源库，用于抓取HTML页面。它提供了一个API，使用DOM API方法进行数据解析、提取和操作。 在本文中，我们将看到如何使用Jsoup解析HTML表格。我们将检索和更新HTML表格中的数据，并且，使用Jsoup向表格中添加和删除行。 2. 依赖性 要使用Jsoup库，请将以下依赖项添加到项目..."},"headers":[{"level":3,"title":"2. 依赖性","slug":"_2-依赖性","link":"#_2-依赖性","children":[]},{"level":3,"title":"3. 表格结构","slug":"_3-表格结构","link":"#_3-表格结构","children":[]},{"level":3,"title":"5. 更新解析表格的元素","slug":"_5-更新解析表格的元素","link":"#_5-更新解析表格的元素","children":[]},{"level":3,"title":"6. 向表格添加行","slug":"_6-向表格添加行","link":"#_6-向表格添加行","children":[]}],"git":{"createdTime":1718963696000,"updatedTime":1718963696000,"contributors":[{"name":"Lance Li","email":"lance.jx.li@gtomato.com","commits":1}]},"readingTime":{"minutes":5.04,"words":1511},"filePathRelative":"posts/baeldung/Archive/2024-06-21-Parsing HTML Table in Java With Jsoup.md","localizedDate":"2024年6月21日","excerpt":"<hr>\\n<h1>Java中使用Jsoup解析HTML表格</h1>\\n<p>Jsoup是一个开源库，用于抓取HTML页面。它提供了一个API，使用DOM API方法进行数据解析、提取和操作。</p>\\n<p>在本文中，我们将看到如何使用Jsoup解析HTML表格。<strong>我们将检索和更新HTML表格中的数据，并且，使用Jsoup向表格中添加和删除行。</strong></p>\\n<h3>2. 依赖性</h3>\\n<p>要使用Jsoup库，请将以下依赖项添加到项目中：</p>\\n<div class=\\"language-xml\\" data-ext=\\"xml\\" data-title=\\"xml\\"><pre class=\\"language-xml\\"><code>`<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>dependency</span><span class=\\"token punctuation\\">&gt;</span></span>`\\n    `<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>groupId</span><span class=\\"token punctuation\\">&gt;</span></span>`org.jsoup`<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>groupId</span><span class=\\"token punctuation\\">&gt;</span></span>`\\n    `<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>artifactId</span><span class=\\"token punctuation\\">&gt;</span></span>`jsoup`<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>artifactId</span><span class=\\"token punctuation\\">&gt;</span></span>`\\n    `<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>version</span><span class=\\"token punctuation\\">&gt;</span></span>`1.17.2`<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>version</span><span class=\\"token punctuation\\">&gt;</span></span>`\\n`<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>dependency</span><span class=\\"token punctuation\\">&gt;</span></span>`\\n</code></pre></div>","autoDesc":true}');export{r as comp,d as data};
