import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-CseMoHkL.js";const e={},p=t(`<h1 id="在spring-cloud-sleuth中获取当前跟踪id" tabindex="-1"><a class="header-anchor" href="#在spring-cloud-sleuth中获取当前跟踪id"><span>在Spring Cloud Sleuth中获取当前跟踪ID</span></a></h1><p>在本文中，我们将探讨Spring Cloud Sleuth，并看看如何在Spring Boot中使用它进行跟踪。它为我们的日志添加了有用的额外信息，并通过为它们添加唯一标识符来使调试操作变得更容易。在Sleuth术语中，这些操作被称为跟踪。它们可以由几个步骤组成，称为跨度。</p><p>例如，一个跟踪可以是一个查询我们应用程序数据的GET请求。当我们的应用程序处理请求时，它可以被分解为更小的步骤：用户授权、执行数据库查询、转换响应。这些步骤中的每一个都是属于同一跟踪的唯一跨度。</p><p>在某些情况下，我们可能想要获取当前跟踪或跨度的ID。例如，我们可以在发生事件时将这些发送给开发团队。然后他们可以使用这个来调试和解决问题。</p><h2 id="_2-应用程序设置" tabindex="-1"><a class="header-anchor" href="#_2-应用程序设置"><span>2. 应用程序设置</span></a></h2><p>首先，我们通过创建一个Spring Boot项目并添加spring-cloud-starter-sleuth依赖项来开始：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>\`&lt;dependency&gt;\`
    \`&lt;groupId&gt;\`org.springframework.cloud\`&lt;/groupId&gt;\`
    \`&lt;artifactId&gt;\`spring-cloud-starter-sleuth\`&lt;/artifactId&gt;\`
    \`&lt;version&gt;\`3.1.0\`&lt;/version&gt;\`
\`&lt;/dependency&gt;\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个启动依赖项与Spring Boot集成得很好，并提供了开始使用Spring Cloud Sleuth所需的必要配置。</p><p>但是，我们可以采取一个额外的步骤。让我们在application.properties文件中设置我们应用程序的名称，这样我们就可以在日志中看到它以及跟踪和跨度ID：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>spring.application.name=Baeldung Sleuth Tutorial
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在我们需要一个应用程序的入口点。让我们创建一个REST控制器，带有一个GET端点：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SleuthTraceIdController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/traceid&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSleuthTraceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Hello from Sleuth&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们访问我们的API端点http://localhost:8080/traceid。我们应该在响应中看到“Hello from Sleuth”。</p><h2 id="_3-日志记录" tabindex="-1"><a class="header-anchor" href="#_3-日志记录"><span>3. 日志记录</span></a></h2><p>让我们在_getSleuthTraceId_方法中添加一个日志语句。首先，我们需要一个类的_Logger_。然后我们可以记录消息：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">SleuthTraceIdController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/traceid&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSleuthTraceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Hello with Sleuth&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;Hello from Sleuth&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们再次调用我们的API端点，并检查日志。我们应该找到类似于这样的内容：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>INFO [Baeldung Sleuth Tutorial,e48f140a63bb9fbb,e48f140a63bb9fbb] 9208 --- [nio-8080-exec-1] c.b.s.traceid.SleuthTraceIdController : Hello with Sleuth
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意，应用程序名称在括号内开始。这些括号是由Sleuth添加的。它们表示应用程序名称、跟踪ID和跨度ID。</p><h2 id="_4-当前跟踪和跨度" tabindex="-1"><a class="header-anchor" href="#_4-当前跟踪和跨度"><span>4. 当前跟踪和跨度</span></a></h2><p>我们可以使用上述示例来调试应用程序中的问题，但可能很难确定是什么引起的以及要跟踪哪个跟踪。这就是为什么我们要以编程方式获取当前跟踪，然后我们可以使用它进行任何进一步的调查。</p><p>在我们的实现中，我们将简化这个用例，我们只会将跟踪ID记录到控制台。</p><p>首先，我们需要获取一个_Tracer_对象的实例。让我们将其注入到我们的控制器中并获取当前跨度：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">Tracer</span> tracer<span class="token punctuation">;</span>

<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/traceid&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSleuthTraceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Hello with Sleuth&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Span</span> span <span class="token operator">=</span> tracer<span class="token punctuation">.</span><span class="token function">currentSpan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;Hello from Sleuth&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，如果目前没有活动的跨度，<em>currentSpan_方法可能会返回null。因此，我们必须执行额外的检查，以查看我们是否可以继续使用这个_Span_对象而不会遇到_NullPointerException</em>。让我们实现这个检查并将当前跟踪和跨度ID记录到日志中：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Span</span> span <span class="token operator">=</span> tracer<span class="token punctuation">.</span><span class="token function">currentSpan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>span <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Trace ID {}&quot;</span><span class="token punctuation">,</span> span<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">traceIdString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Span ID {}&quot;</span><span class="token punctuation">,</span> span<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">spanIdString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们运行应用程序，并在访问我们的API端点时查找这些消息。它们应该包含与Sleuth添加的括号中相同的ID。</p><h2 id="_5-作为十进制数字的跟踪和跨度id" tabindex="-1"><a class="header-anchor" href="#_5-作为十进制数字的跟踪和跨度id"><span>5. 作为十进制数字的跟踪和跨度ID</span></a></h2><p>还有另一种方式使用_spanId_方法而不是_spanIdString_来获取跨度ID。</p><p>它们之间的差别在于后者返回值的十六进制表示，而前者返回十进制数字。让我们在实际操作中比较它们并将十进制值也记录下来：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Span</span> span <span class="token operator">=</span> tracer<span class="token punctuation">.</span><span class="token function">currentSpan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>span <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Span ID hex {}&quot;</span><span class="token punctuation">,</span> span<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">spanIdString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Span ID decimal {}&quot;</span><span class="token punctuation">,</span> span<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">spanId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这两个值表示相同的数字，输出应该看起来类似于这样：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>INFO [Baeldung Sleuth Tutorial,0de46b6fcbc8da83,0de46b6fcbc8da83] 8648 --- [nio-8080-exec-3] c.b.s.traceid.SleuthTraceIdController    : Span ID hex 0de46b6fcbc8da83
INFO [Baeldung Sleuth Tutorial,0de46b6fcbc8da83,0de46b6fcbc8da83] 8648 --- [nio-8080-exec-3] c.b.s.traceid.SleuthTraceIdController    : Span ID decimal 1001043145087572611
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>同样，这也适用于跟踪ID。<strong>而不是_traceIdString_，我们可以使用_traceId_方法。_traceIdString_返回十六进制值，而_traceId_返回十进制值：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Trace ID hex {}&quot;</span><span class="token punctuation">,</span> span<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">traceIdString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Trace ID decimal {}&quot;</span><span class="token punctuation">,</span> span<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">traceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>输出与之前的非常相似。它首先包含十六进制的跟踪ID，然后是十进制：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>INFO [Baeldung Sleuth Tutorial,34ec0b8ac9d65e91,34ec0b8ac9d65e91] 7384 --- [nio-8080-exec-1] c.b.s.traceid.SleuthTraceIdController    : Trace ID hex 34ec0b8ac9d65e91
INFO [Baeldung Sleuth Tutorial,34ec0b8ac9d65e91,34ec0b8ac9d65e91] 7384 --- [nio-8080-exec-1] c.b.s.traceid.SleuthTraceIdController    : Trace ID decimal 3813435675195629201
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-结论" tabindex="-1"><a class="header-anchor" href="#_6-结论"><span>6. 结论</span></a></h2><p>在本文中，我们讨论了Spring Cloud Sleuth如何帮助调试和跟踪Spring Boot中的事件。首先，我们使用_Tracer_对象引用当前跨度和_TraceContext_。之后，我们能够获取当前跟踪和跨度的ID。此外，我们还看到了不同方法以不同的数字系统返回ID。</p><p>如常，这些示例的源代码以在GitHub上找到。</p>`,40),o=[p];function c(l,i){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","2024-07-22-Get Current Trace ID in Spring Cloud Sleuth.html.vue"]]),k=JSON.parse('{"path":"/posts/baeldung/2024-07-22/2024-07-22-Get%20Current%20Trace%20ID%20in%20Spring%20Cloud%20Sleuth.html","title":"在Spring Cloud Sleuth中获取当前跟踪ID","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Spring Cloud Sleuth","Spring Boot"],"tag":["Trace ID","Spring Cloud","Logging"],"head":[["meta",{"name":"keywords","content":"Spring Cloud Sleuth, Trace ID, Spring Boot, Logging"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-22/2024-07-22-Get%20Current%20Trace%20ID%20in%20Spring%20Cloud%20Sleuth.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"在Spring Cloud Sleuth中获取当前跟踪ID"}],["meta",{"property":"og:description","content":"在Spring Cloud Sleuth中获取当前跟踪ID 在本文中，我们将探讨Spring Cloud Sleuth，并看看如何在Spring Boot中使用它进行跟踪。它为我们的日志添加了有用的额外信息，并通过为它们添加唯一标识符来使调试操作变得更容易。在Sleuth术语中，这些操作被称为跟踪。它们可以由几个步骤组成，称为跨度。 例如，一个跟踪可以..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-22T03:46:09.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Trace ID"}],["meta",{"property":"article:tag","content":"Spring Cloud"}],["meta",{"property":"article:tag","content":"Logging"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-22T03:46:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"在Spring Cloud Sleuth中获取当前跟踪ID\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-22T03:46:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"在Spring Cloud Sleuth中获取当前跟踪ID 在本文中，我们将探讨Spring Cloud Sleuth，并看看如何在Spring Boot中使用它进行跟踪。它为我们的日志添加了有用的额外信息，并通过为它们添加唯一标识符来使调试操作变得更容易。在Sleuth术语中，这些操作被称为跟踪。它们可以由几个步骤组成，称为跨度。 例如，一个跟踪可以..."},"headers":[{"level":2,"title":"2. 应用程序设置","slug":"_2-应用程序设置","link":"#_2-应用程序设置","children":[]},{"level":2,"title":"3. 日志记录","slug":"_3-日志记录","link":"#_3-日志记录","children":[]},{"level":2,"title":"4. 当前跟踪和跨度","slug":"_4-当前跟踪和跨度","link":"#_4-当前跟踪和跨度","children":[]},{"level":2,"title":"5. 作为十进制数字的跟踪和跨度ID","slug":"_5-作为十进制数字的跟踪和跨度id","link":"#_5-作为十进制数字的跟踪和跨度id","children":[]},{"level":2,"title":"6. 结论","slug":"_6-结论","link":"#_6-结论","children":[]}],"git":{"createdTime":1721619969000,"updatedTime":1721619969000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":4.54,"words":1362},"filePathRelative":"posts/baeldung/2024-07-22/2024-07-22-Get Current Trace ID in Spring Cloud Sleuth.md","localizedDate":"2022年4月1日","excerpt":"\\n<p>在本文中，我们将探讨Spring Cloud Sleuth，并看看如何在Spring Boot中使用它进行跟踪。它为我们的日志添加了有用的额外信息，并通过为它们添加唯一标识符来使调试操作变得更容易。在Sleuth术语中，这些操作被称为跟踪。它们可以由几个步骤组成，称为跨度。</p>\\n<p>例如，一个跟踪可以是一个查询我们应用程序数据的GET请求。当我们的应用程序处理请求时，它可以被分解为更小的步骤：用户授权、执行数据库查询、转换响应。这些步骤中的每一个都是属于同一跟踪的唯一跨度。</p>\\n<p>在某些情况下，我们可能想要获取当前跟踪或跨度的ID。例如，我们可以在发生事件时将这些发送给开发团队。然后他们可以使用这个来调试和解决问题。</p>","autoDesc":true}');export{d as comp,k as data};
