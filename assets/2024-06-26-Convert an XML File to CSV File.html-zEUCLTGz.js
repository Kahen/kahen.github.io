import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-DMZJIPds.js";const p={},e=t('<h1 id="将-xml-文件转换为-csv-文件-baeldung" tabindex="-1"><a class="header-anchor" href="#将-xml-文件转换为-csv-文件-baeldung"><span>将 XML 文件转换为 CSV 文件 | Baeldung</span></a></h1><p>在本文中，我们将探索使用 Java 将 XML 文件转换为 CSV 格式的多种方法。</p><p>XML（可扩展标记语言）和 CSV（逗号分隔值）都是数据交换的流行选择。<strong>虽然 XML 是一个强大的选项，允许对复杂数据集进行结构化、分层的方法，但 CSV 更直接，主要设计用于表格数据。</strong></p><p>有时，我们可能需要将 XML 转换为 CSV，以使数据导入或分析更加容易。</p><h2 id="_2-xml-数据布局介绍" tabindex="-1"><a class="header-anchor" href="#_2-xml-数据布局介绍"><span><strong>2. XML 数据布局介绍</strong></span></a></h2><p>设想我们经营着一群书店，我们将库存数据存储在类似于下面示例的 XML 格式中：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>``<span class="token prolog">&lt;?xml version=&quot;1.0&quot;?&gt;</span>``\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Bookstores</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Bookstore</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>S001<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>`\n        ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Books</span><span class="token punctuation">&gt;</span></span>``\n            `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Book</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>B001<span class="token punctuation">&quot;</span></span> <span class="token attr-name">category</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Fiction<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>`\n                ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Title</span><span class="token punctuation">&gt;</span></span>```Death and the Penguin```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Title</span><span class="token punctuation">&gt;</span></span>```\n                `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Author</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>A001<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>`Andrey Kurkov```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Author</span><span class="token punctuation">&gt;</span></span>```\n                ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Price</span><span class="token punctuation">&gt;</span></span>```10.99```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Price</span><span class="token punctuation">&gt;</span></span>```\n            ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Book</span><span class="token punctuation">&gt;</span></span>```\n            `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Book</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>B002<span class="token punctuation">&quot;</span></span> <span class="token attr-name">category</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Poetry<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>`\n                ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Title</span><span class="token punctuation">&gt;</span></span>```Kobzar```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Title</span><span class="token punctuation">&gt;</span></span>```\n                `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Author</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>A002<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>`Taras Shevchenko```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Author</span><span class="token punctuation">&gt;</span></span>```\n                ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Price</span><span class="token punctuation">&gt;</span></span>```8.50```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Price</span><span class="token punctuation">&gt;</span></span>```\n            ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Book</span><span class="token punctuation">&gt;</span></span>```\n        ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Books</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Bookstore</span><span class="token punctuation">&gt;</span></span>``\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Bookstore</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>S002<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>`\n        ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Books</span><span class="token punctuation">&gt;</span></span>``\n            `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Book</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>B003<span class="token punctuation">&quot;</span></span> <span class="token attr-name">category</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Novel<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>`\n                ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Title</span><span class="token punctuation">&gt;</span></span>```Voroshilovgrad```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Title</span><span class="token punctuation">&gt;</span></span>```\n                `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Author</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>A003<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>`Serhiy Zhadan```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Author</span><span class="token punctuation">&gt;</span></span>```\n                ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Price</span><span class="token punctuation">&gt;</span></span>```12.99```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Price</span><span class="token punctuation">&gt;</span></span>```\n            ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Book</span><span class="token punctuation">&gt;</span></span>```\n        ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Books</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Bookstore</span><span class="token punctuation">&gt;</span></span>``\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Bookstores</span><span class="token punctuation">&gt;</span></span>`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此 XML 将属性 &#39;id&#39; 和 &#39;category&#39; 以及文本元素 &#39;Title&#39;、&#39;Author&#39; 和 &#39;Price&#39; 整齐地组织在一个层次结构中。确保结构良好的 XML 简化了转换过程，使其更加直接和无误。</p><p>我们的目标是将这些数据转换为 CSV 格式，以便在表格形式中更容易处理。例如，让我们看看我们的 XML 数据中的书店如何在 CSV 格式中表示：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>bookstore_id,book_id,category,title,author_id,author_name,price\nS001,B001,Fiction,Death and the Penguin,A001,Andrey Kurkov,10.99\nS001,B002,Poetry,Kobzar,A002,Taras Shevchenko,8.50\nS002,B003,Novel,Voroshilovgrad,A003,Serhiy Zhadan,12.99\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们将讨论实现这种转换的方法。</p><h2 id="_3-使用-xslt-转换" tabindex="-1"><a class="header-anchor" href="#_3-使用-xslt-转换"><span><strong>3. 使用 XSLT 转换</strong></span></a></h2><h3 id="_3-1-xslt-介绍" tabindex="-1"><a class="header-anchor" href="#_3-1-xslt-介绍"><span>3.1. XSLT 介绍</span></a></h3><p><strong>XSLT（可扩展样式表语言转换）是一个将 XML 文件转换为 HTML、纯文本甚至 CSV 等其他格式的工具。</strong></p><p>它通过遵循在特殊样式表中设置的规则来操作，通常是一个 XSL 文件。当我们的目标是将 XML 转换为 CSV 以便于使用时，这变得特别有用。</p><h3 id="_3-2-xslt-转换过程" tabindex="-1"><a class="header-anchor" href="#_3-2-xslt-转换过程"><span>3.2. XSLT 转换过程</span></a></h3><p>要开始，我们需要创建一个 XSLT 样式表，该样式表使用 XPath 导航 XML 树结构，并指定如何将 XML 元素转换为 CSV 行和列。</p><p>下面是一个这样的 XSLT 文件示例：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>``<span class="token prolog">&lt;?xml version=&quot;1.0&quot;?&gt;</span>``\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsl:</span>stylesheet</span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1.0<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsl</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/1999/XSL/Transform<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsl:</span>output</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">omit-xml-declaration</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>yes<span class="token punctuation">&quot;</span></span> <span class="token attr-name">indent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>no<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsl:</span>template</span> <span class="token attr-name">match</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>`\n        ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsl:</span>text</span><span class="token punctuation">&gt;</span></span>````bookstore_id,book_id,category,title,author_id,author_name,price````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xsl:</span>text</span><span class="token punctuation">&gt;</span></span>````\n        ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsl:</span>text</span><span class="token punctuation">&gt;</span></span>````<span class="token entity" title="\n">&amp;#xA;</span>````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xsl:</span>text</span><span class="token punctuation">&gt;</span></span>````\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsl:</span>for-each</span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>//Bookstore<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>`\n            `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsl:</span>variable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bookstore_id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@id<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>`\n            `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsl:</span>for-each</span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./Books/Book<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>`\n                `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsl:</span>variable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>book_id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@id<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>`\n                `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsl:</span>variable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>category<span class="token punctuation">&quot;</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@category<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>`\n                `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsl:</span>variable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>title<span class="token punctuation">&quot;</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Title<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>`\n                `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsl:</span>variable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>author_id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Author/@id<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>`\n                `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsl:</span>variable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>author_name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Author<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>`\n                `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsl:</span>variable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>price<span class="token punctuation">&quot;</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Price<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>`\n                `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsl:</span>value-of</span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>concat($bookstore_id, &#39;,&#39;, $book_id, &#39;,&#39;, $category, &#39;,&#39;, $title, &#39;,&#39;, $author_id, &#39;,&#39;, $author_name, &#39;,&#39;, $price)<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>`\n                ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">xsl:</span>text</span><span class="token punctuation">&gt;</span></span>````<span class="token entity" title="\n">&amp;#xA;</span>````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xsl:</span>text</span><span class="token punctuation">&gt;</span></span>````\n            ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xsl:</span>for-each</span><span class="token punctuation">&gt;</span></span>``\n        ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xsl:</span>for-each</span><span class="token punctuation">&gt;</span></span>``\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xsl:</span>template</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">xsl:</span>stylesheet</span><span class="token punctuation">&gt;</span></span>`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个样式表首先匹配根元素，然后检查每个 &#39;Bookstore&#39; 节点，收集它的属性和子元素。比如书的 <em>id</em>、<em>category</em> 等，到变量中。然后使用这些变量构建 CSV 文件的每一行。CSV 将有列用于书店 ID、书籍 ID、类别、标题、作者 ID、作者名称和价格。</p><p><em>`<a href="xsl:template">xsl:template</a><code>_ 设置转换规则。它使用 _\\</code>&lt;xsl:template match=&quot;/&quot;&gt;`</em> 定位 XML 根，并定义 CSV 标题。</p><p>指令 `&lt;xsl:for-each select=&quot;//Bookstore&quot;&gt;<code> 处理每个 &#39;Bookstore&#39; 节点并捕获其属性。另一个内部指令，\\</code>&lt;xsl:for-each select=&quot;./Books/Book&quot;&gt;`，处理当前 &#39;Bookstore&#39; 中的每个 &#39;Book&#39;。</p><p><em>concat()</em> 函数将这些值组合成 CSV 行。</p><p><em>````<a href="xsl:text">xsl:text</a><code>&amp;#xA;</code>&lt;/xsl:text&gt;````</em> 添加换行符（LF），对应十六进制表示中的 ASCII 值 0xA。</p><p>以下是我们如何使用基于 Java 的 XSLT 处理器的示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">convertXml2CsvXslt</span><span class="token punctuation">(</span><span class="token class-name">String</span> xslPath<span class="token punctuation">,</span> <span class="token class-name">String</span> xmlPath<span class="token punctuation">,</span> <span class="token class-name">String</span> csvPath<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">TransformerException</span> <span class="token punctuation">{</span>\n    <span class="token class-name">StreamSource</span> styleSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StreamSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>xslPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Transformer</span> transformer <span class="token operator">=</span> <span class="token class-name">TransformerFactory</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">newTransformer</span><span class="token punctuation">(</span>styleSource<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Source</span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StreamSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>xmlPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Result</span> outputTarget <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StreamResult</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>csvPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    transformer<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> outputTarget<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用 <em>TransformerFactory</em> 编译我们的 XSLT 样式表。然后，我们创建一个 <em>Transformer</em> 对象，它负责将这个样式表应用到我们的 XML 数据上，将其转换为 CSV 文件。一旦代码成功运行，指定目录中将出现一个新文件。</p><p>使用 XSLT 进行 XML 到 CSV 转换非常方便和灵活，为大多数用例提供了标准化和强大的方法，但它需要将整个 XML 文件加载到内存中。这可能是一个缺点，对于大文件。虽然它非常适合中等大小的数据集，如果我们有一个更大的数据集，您可能需要考虑使用 StAX，我们将在接下来讨论。</p><h2 id="_4-使用-stax" tabindex="-1"><a class="header-anchor" href="#_4-使用-stax"><span><strong>4. 使用 StAX</strong></span></a></h2><h3 id="_4-1-stax-介绍" tabindex="-1"><a class="header-anchor" href="#_4-1-stax-介绍"><span>4.1. StAX 介绍</span></a></h3><p>StAX（Streaming API for XML）旨在以更节省内存的方式读取和写入 XML 文件。它允许我们即时处理 XML 文档，非常适合处理大文件。</p><p>使用 StAX 进行转换涉及三个主要步骤。</p><ul><li>初始化 StAX 解析器</li><li>读取 XML 元素</li><li>写入 CSV</li></ul><h3 id="_4-2-stax-转换过程" tabindex="-1"><a class="header-anchor" href="#_4-2-stax-转换过程"><span>4.2. StAX 转换过程</span></a></h3><p>这里是一个完整的示例，封装在一个名为 <em>convertXml2CsvStax()</em> 的方法中：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">convertXml2CsvStax</span><span class="token punctuation">(</span><span class="token class-name">String</span> xmlFilePath<span class="token punctuation">,</span> <span class="token class-name">String</span> csvFilePath<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">TransformerException</span> <span class="token punctuation">{</span>\n    <span class="token class-name">XMLInputFactory</span> inputFactory <span class="token operator">=</span> <span class="token class-name">XMLInputFactory</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">newInputStream</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>xmlFilePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">BufferedWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>csvFilePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;bookstore_id,book_id,category,title,author_id,author_name,price\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">XMLStreamReader</span> reader <span class="token operator">=</span> inputFactory<span class="token punctuation">.</span><span class="token function">createXMLStreamReader</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">String</span> currentElement<span class="token punctuation">;</span>\n        <span class="token class-name">StringBuilder</span> csvRow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">StringBuilder</span> bookstoreInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">while</span> <span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">int</span> eventType <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token keyword">switch</span> <span class="token punctuation">(</span>eventType<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">case</span> <span class="token class-name">XMLStreamConstants</span><span class="token punctuation">.</span><span class="token constant">START_ELEMENT</span><span class="token operator">:</span>\n                    currentElement <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">getLocalName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;Bookstore&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>currentElement<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        bookstoreInfo<span class="token punctuation">.</span><span class="token function">setLength</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        bookstoreInfo<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">getAttributeValue</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                          <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span>\n                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;Book&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>currentElement<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        csvRow<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>bookstoreInfo<span class="token punctuation">)</span>\n                          <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">getAttributeValue</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                          <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span>\n                          <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">getAttributeValue</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;category&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                          <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span>\n                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;Author&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>currentElement<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        csvRow<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">getAttributeValue</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                          <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span>\n                    <span class="token keyword">break</span><span class="token punctuation">;</span>\n\n                <span class="token keyword">case</span> <span class="token class-name">XMLStreamConstants</span><span class="token punctuation">.</span><span class="token constant">CHARACTERS</span><span class="token operator">:</span>\n如果翻译没有结束请继续，结束了请回复<span class="token constant">OK</span>。\n\n在这种情况下，我将继续翻译剩余的部分：\n\n```java\n                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>reader<span class="token punctuation">.</span><span class="token function">isWhiteSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        csvRow<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span>\n                    <span class="token keyword">break</span><span class="token punctuation">;</span>\n\n                <span class="token keyword">case</span> <span class="token class-name">XMLStreamConstants</span><span class="token punctuation">.</span><span class="token constant">END_ELEMENT</span><span class="token operator">:</span>\n                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;Book&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">getLocalName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        csvRow<span class="token punctuation">.</span><span class="token function">setLength</span><span class="token punctuation">(</span>csvRow<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        csvRow<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>csvRow<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        csvRow<span class="token punctuation">.</span><span class="token function">setLength</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span>\n                    <span class="token keyword">break</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，我们通过创建 <em>XMLInputFactory</em> 的实例来初始化 StAX 解析器。然后使用这个工厂对象生成一个 <em>XMLStreamReader</em>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">XMLInputFactory</span> inputFactory <span class="token operator">=</span> <span class="token class-name">XMLInputFactory</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>xmlFilePath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">XMLStreamReader</span> reader <span class="token operator">=</span> inputFactory<span class="token punctuation">.</span><span class="token function">createXMLStreamReader</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>我们使用 <em>XMLStreamReader</em> 遍历 XML 文件，并根据事件类型，如 <em>START_ELEMENT, CHARACTERS</em> 和 <em>END_ELEMENT</em>，构建我们的 CSV 行。</strong></p><p>当我们读取 XML 数据时，我们构建 CSV 行，并使用 <em>BufferedWriter</em> 将它们写入输出文件。</p><p>**简而言之，StAX 提供了一个内存效率高的解决方案，非常适合处理大型或实时 XML 文件。**虽然它可能需要更多的手动工作，并且缺乏 XSLT 的一些转换特性，但在资源利用是关注点的特定场景中，它表现出色。有了提供的基础知识和示例，我们现在准备好在特定条件适用时使用 StAX 来满足我们的 XML 到 CSV 转换需求。</p><h2 id="_5-其他方法" tabindex="-1"><a class="header-anchor" href="#_5-其他方法"><span><strong>5. 其他方法</strong></span></a></h2><p>我们主要关注了 XSLT 和 StAX 作为 XML 到 CSV 转换的方法。<strong>然而，还存在其他选项，如 DOM（文档对象模型）解析器、SAX（简单 API for XML）解析器和 Apache Commons CSV。</strong></p><p>不过，有一些因素需要考虑。DOM 解析器非常适合将整个 XML 文件加载到内存中，让您可以自由地遍历和操作 XML 树。另一方面，当您需要将 XML 数据转换为 CSV 格式时，它们会让您的工作更加艰难。</p><p>当涉及到 SAX 解析器时，它们更节省内存，但对于复杂的操作可能会带来挑战。它们的事件驱动特性要求您手动管理状态，并且它们不提供在 XML 文档中向前或向后看的选项，这使得某些转换变得复杂。</p><p>Apache Commons CSV 在写入 CSV 文件时表现出色，但期望您自己处理 XML 解析部分。</p><p><strong>总结来说，虽然每种替代方案都有自己的优势，但对于这个例子，XSLT 和 StAX 为大多数 XML 到 CSV 转换任务提供了更平衡的解决方案。</strong></p><h2 id="_6-最佳实践" tabindex="-1"><a class="header-anchor" href="#_6-最佳实践"><span><strong>6. 最佳实践</strong></span></a></h2><p><strong>要将 XML 转换为 CSV，需要考虑几个因素，如数据完整性、性能和错误处理。</strong> 根据其模式验证 XML 对于确认数据结构至关重要。此外，正确地将 XML 元素映射到 CSV 列是一个基本步骤。</p><p>对于大文件，使用像 StAX 这样的流技术在内存效率方面可能是有利的。另外，考虑将大文件拆分成更小的批次以便于处理。</p><p><strong>重要的是要提到，本文提供的代码示例可能没有处理 XML 数据中发现的特殊字符，包括但不限于逗号、换行符和双引号。</strong> 例如，字段值中的逗号可能与 CSV 中用于分隔字段的逗号发生冲突。同样，换行符可能会破坏文件的逻辑结构。</p><p>解决这些问题可能很复杂，并且根据特定项目要求而有所不同。为了解决逗号问题，您可以在结果 CSV 文件中用双引号括起字段。也就是说，为了使本文中的代码示例易于理解，这些特殊情况没有被解决。因此，应该考虑到这一点以实现更准确的转换。</p><h2 id="_7-结论" tabindex="-1"><a class="header-anchor" href="#_7-结论"><span><strong>7. 结论</strong></span></a></h2><p>在本文中，我们探讨了将 XML 转换为 CSV 的各种方法，特别深入研究了 XSLT 和 StAX 方法。无论选择哪种方法，拥有适合 CSV 的良好 XML 结构、实施数据验证以及知道要处理哪些特殊字符对于顺利和成功的转换至关重要。这些示例的代码可在 GitHub 上找到。</p><p>OK</p>',55),o=[e];function c(l,u){return a(),s("div",null,o)}const r=n(p,[["render",c],["__file","2024-06-26-Convert an XML File to CSV File.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-06-26/2024-06-26-Convert%20an%20XML%20File%20to%20CSV%20File.html","title":"将 XML 文件转换为 CSV 文件 | Baeldung","lang":"zh-CN","frontmatter":{"date":"2024-06-26T00:00:00.000Z","category":["XML","CSV"],"tag":["Java","数据转换"],"head":[["meta",{"name":"keywords","content":"XML转CSV, Java, 数据交换格式"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-06-26/2024-06-26-Convert%20an%20XML%20File%20to%20CSV%20File.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"将 XML 文件转换为 CSV 文件 | Baeldung"}],["meta",{"property":"og:description","content":"将 XML 文件转换为 CSV 文件 | Baeldung 在本文中，我们将探索使用 Java 将 XML 文件转换为 CSV 格式的多种方法。 XML（可扩展标记语言）和 CSV（逗号分隔值）都是数据交换的流行选择。虽然 XML 是一个强大的选项，允许对复杂数据集进行结构化、分层的方法，但 CSV 更直接，主要设计用于表格数据。 有时，我们可能需要将..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-26T14:52:52.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"数据转换"}],["meta",{"property":"article:published_time","content":"2024-06-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-26T14:52:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"将 XML 文件转换为 CSV 文件 | Baeldung\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-26T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-26T14:52:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"将 XML 文件转换为 CSV 文件 | Baeldung 在本文中，我们将探索使用 Java 将 XML 文件转换为 CSV 格式的多种方法。 XML（可扩展标记语言）和 CSV（逗号分隔值）都是数据交换的流行选择。虽然 XML 是一个强大的选项，允许对复杂数据集进行结构化、分层的方法，但 CSV 更直接，主要设计用于表格数据。 有时，我们可能需要将..."},"headers":[{"level":2,"title":"2. XML 数据布局介绍","slug":"_2-xml-数据布局介绍","link":"#_2-xml-数据布局介绍","children":[]},{"level":2,"title":"3. 使用 XSLT 转换","slug":"_3-使用-xslt-转换","link":"#_3-使用-xslt-转换","children":[{"level":3,"title":"3.1. XSLT 介绍","slug":"_3-1-xslt-介绍","link":"#_3-1-xslt-介绍","children":[]},{"level":3,"title":"3.2. XSLT 转换过程","slug":"_3-2-xslt-转换过程","link":"#_3-2-xslt-转换过程","children":[]}]},{"level":2,"title":"4. 使用 StAX","slug":"_4-使用-stax","link":"#_4-使用-stax","children":[{"level":3,"title":"4.1. StAX 介绍","slug":"_4-1-stax-介绍","link":"#_4-1-stax-介绍","children":[]},{"level":3,"title":"4.2. StAX 转换过程","slug":"_4-2-stax-转换过程","link":"#_4-2-stax-转换过程","children":[]}]},{"level":2,"title":"5. 其他方法","slug":"_5-其他方法","link":"#_5-其他方法","children":[]},{"level":2,"title":"6. 最佳实践","slug":"_6-最佳实践","link":"#_6-最佳实践","children":[]},{"level":2,"title":"7. 结论","slug":"_7-结论","link":"#_7-结论","children":[]}],"git":{"createdTime":1719413572000,"updatedTime":1719413572000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":7.96,"words":2387},"filePathRelative":"posts/baeldung/2024-06-26/2024-06-26-Convert an XML File to CSV File.md","localizedDate":"2024年6月26日","excerpt":"\\n<p>在本文中，我们将探索使用 Java 将 XML 文件转换为 CSV 格式的多种方法。</p>\\n<p>XML（可扩展标记语言）和 CSV（逗号分隔值）都是数据交换的流行选择。<strong>虽然 XML 是一个强大的选项，允许对复杂数据集进行结构化、分层的方法，但 CSV 更直接，主要设计用于表格数据。</strong></p>\\n<p>有时，我们可能需要将 XML 转换为 CSV，以使数据导入或分析更加容易。</p>\\n<h2><strong>2. XML 数据布局介绍</strong></h2>\\n<p>设想我们经营着一群书店，我们将库存数据存储在类似于下面示例的 XML 格式中：</p>","autoDesc":true}');export{r as comp,d as data};
