import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-DP78wUIH.js";const e={},p=t(`<h1 id="使用spring-webclient自定义json反序列化" tabindex="-1"><a class="header-anchor" href="#使用spring-webclient自定义json反序列化"><span>使用Spring WebClient自定义JSON反序列化</span></a></h1><p>在本文中，我们将探讨自定义反序列化的需求以及如何使用Spring WebClient实现它。</p><h2 id="_2-为什么我们需要自定义反序列化" tabindex="-1"><a class="header-anchor" href="#_2-为什么我们需要自定义反序列化"><span>2. 为什么我们需要自定义反序列化？</span></a></h2><p>Spring WebFlux模块中的Spring WebClient通过_Encoder_和_Decoder_组件处理序列化和反序列化。<em>Encoder_和_Decoder_作为接口存在，代表读取和写入内容的合同。默认情况下，spring-core模块提供了_byte</em>[]、<em>ByteBuffer</em>、<em>DataBuffer</em>、_Resource_和_String_编码器和解码器实现。</p><p>Jackson是一个库，使用_ObjectMapper_提供辅助实用程序，将Java对象序列化为JSON，并将JSON字符串反序列化为Java对象。_ObjectMapper_包含可以打开/关闭的内置配置，使用反序列化特性。</p><p><strong>当Jackson库提供的默认行为不能满足我们的特定需求时，自定义反序列化过程变得必要。</strong> 为了在序列化/反序列化期间修改行为，ObjectMapper提供了我们可以设置的一系列配置。因此，我们必须将此自定义_ObjectMapper_注册到Spring WebClient中，以便在序列化和反序列化中使用。</p><h2 id="_3-如何自定义object-mappers" tabindex="-1"><a class="header-anchor" href="#_3-如何自定义object-mappers"><span>3. 如何自定义Object Mappers？</span></a></h2><p><strong>自定义_ObjectMapper_可以与_WebClient_在全局应用程序级别链接，也可以与特定请求关联。</strong></p><p>让我们探索一个提供客户订单详情的_GET_端点的简单API。在本文中，我们将考虑一些订单响应中的属性，这些属性需要为我们应用程序的特定功能进行自定义反序列化。</p><p>让我们看看_OrderResponse_模型：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;orderId&quot;</span><span class="token operator">:</span> <span class="token string">&quot;a1b2c3d4-e5f6-4a5b-8c9d-0123456789ab&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;address&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;123 Main St&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;Apt 456&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;Cityville&quot;</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;orderNotes&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;Special request: Handle with care&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;Gift wrapping required&quot;</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;orderDateTime&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2024-01-20T12:34:56&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述客户响应的一些反序列化规则将是：</p><ul><li>如果客户订单响应包含未知属性，我们应使反序列化失败。我们将在_ObjectMapper_中将_FAIL_ON_UNKNOWN_PROPERTIES_属性设置为_true_。</li><li>我们还将为反序列化目的向映射器添加_JavaTimeModule_，因为_OrderDateTime_是一个_LocalDateTime_对象。</li></ul><h2 id="_4-使用全局配置自定义反序列化" tabindex="-1"><a class="header-anchor" href="#_4-使用全局配置自定义反序列化"><span>4. 使用全局配置自定义反序列化</span></a></h2><p>要使用全局配置进行反序列化，我们需要注册自定义_ObjectMapper_ bean：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">ObjectMapper</span> <span class="token function">objectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">DeserializationFeature</span><span class="token punctuation">.</span><span class="token constant">FAIL_ON_UNKNOWN_PROPERTIES</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">registerModule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JavaTimeModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>一旦注册了这个_ObjectMapper_ bean，它将自动与_CodecCustomizer_关联以自定义应用程序_WebClient_相关的编码器和解码器。</strong> 因此，它确保应用程序级别的任何请求或响应都相应地进行序列化和反序列化。</p><p>让我们定义一个带有调用外部服务以检索订单详情的_GET_端点的控制器：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;v1/order/{id}&quot;</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON_VALUE</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Mono</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderResponse</span><span class="token punctuation">&gt;</span></span>\`\` <span class="token function">searchOrderV1</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> externalServiceV1<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">bodyToMono</span><span class="token punctuation">(</span><span class="token class-name">OrderResponse</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>检索订单详情的外部服务将使用_WebClient.Builder_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ExternalServiceV1</span><span class="token punctuation">(</span><span class="token class-name">WebClient<span class="token punctuation">.</span>Builder</span> webclientBuilder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>webclientBuilder <span class="token operator">=</span> webclientBuilder<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token class-name">WebClient<span class="token punctuation">.</span>ResponseSpec</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> webclientBuilder<span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost:8090/&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">&quot;external/order/&quot;</span> <span class="token operator">+</span> id<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">retrieve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Spring reactive自动使用自定义_ObjectMapper_解析检索到的JSON响应。</p><p>让我们添加一个简单的测试，使用_MockWebServer_模拟外部服务响应，并包含额外的属性，这应该会导致请求失败：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenMockedExternalResponse_whenSearchByIdV1_thenOrderResponseShouldFailBecauseOfUnknownProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    mockExternalService<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MockResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/json; charset=utf-8&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">&quot;&quot;&quot;
        {
          &quot;orderId&quot;: &quot;a1b2c3d4-e5f6-4a5b-8c9d-0123456789ab&quot;,
          &quot;orderDateTime&quot;: &quot;2024-01-20T12:34:56&quot;,
          &quot;address&quot;: [
            &quot;123 Main St&quot;,
            &quot;Apt 456&quot;,
            &quot;Cityville&quot;
          ],
          &quot;orderNotes&quot;: [
            &quot;Special request: Handle with care&quot;,
            &quot;Gift wrapping required&quot;
          ],
          &quot;customerName&quot;: &quot;John Doe&quot;,
          &quot;totalAmount&quot;: 99.99,
          &quot;paymentMethod&quot;: &quot;Credit Card&quot;
        }
        &quot;&quot;&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">setResponseCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">OK</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    webTestClient<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">&quot;v1/order/1&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">expectStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">is5xxServerError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>外部服务的响应包含额外的属性（<em>customerName</em>、<em>totalAmount</em>、<em>paymentMethod</em>），这导致测试失败。</p><h2 id="_5-使用webclient-exchange-strategies-config自定义反序列化" tabindex="-1"><a class="header-anchor" href="#_5-使用webclient-exchange-strategies-config自定义反序列化"><span>5. 使用WebClient Exchange Strategies Config自定义反序列化</span></a></h2><p><strong>在某些情况下，我们可能只想为特定请求配置一个_ObjectMapper_，那么我们需要将映射器与_ExchangeStrategies_注册。</strong></p><p>让我们假设上述示例中接收到的日期格式不同，并包括偏移量。</p><p>我们将添加一个_CustomDeserializer_，它将解析接收到的_OffsetDateTime_并将其转换为模型_LocalDateTime_在UTC_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomDeserializer</span> <span class="token keyword">extends</span> <span class="token class-name">LocalDateTimeDeserializer</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">LocalDateTime</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token class-name">JsonParser</span> jsonParser<span class="token punctuation">,</span> <span class="token class-name">DeserializationContext</span> ctxt<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">OffsetDateTime</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonParser<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">atZoneSameInstant</span><span class="token punctuation">(</span><span class="token class-name">ZoneOffset</span><span class="token punctuation">.</span><span class="token constant">UTC</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">toLocalDateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span>jsonParser<span class="token punctuation">,</span> ctxt<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在新的ExternalServiceV2实现中，让我们声明一个新的_ObjectMapper_，它与上述_CustomDeserializer_链接，并使用_ExchangeStrategies_注册一个新的_WebClient_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">WebClient<span class="token punctuation">.</span>ResponseSpec</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token class-name">ObjectMapper</span> objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerModule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addDeserializer</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CustomDeserializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">WebClient</span> webClient <span class="token operator">=</span> <span class="token class-name">WebClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost:8090/&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">exchangeStrategies</span><span class="token punctuation">(</span><span class="token class-name">ExchangeStrategies</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">codecs</span><span class="token punctuation">(</span>clientDefaultCodecsConfigurer <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        clientDefaultCodecsConfigurer<span class="token punctuation">.</span><span class="token function">defaultCodecs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">jackson2JsonEncoder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Jackson2JsonEncoder</span><span class="token punctuation">(</span>objectMapper<span class="token punctuation">,</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        clientDefaultCodecsConfigurer<span class="token punctuation">.</span><span class="token function">defaultCodecs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">jackson2JsonDecoder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Jackson2JsonDecoder</span><span class="token punctuation">(</span>objectMapper<span class="token punctuation">,</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> webClient<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">&quot;external/order/&quot;</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">retrieve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们已经将这个_ObjectMapper_专门链接到特定的API请求，它不会应用于应用程序中的任何其他请求。接下来，让我们添加一个_GET /v2_端点，它将使用上述findById实现以及特定的_ObjectMapper_调用外部服务：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;v2/order/{id}&quot;</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON_VALUE</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">Mono</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderResponse</span><span class="token punctuation">&gt;</span></span>\`\` <span class="token function">searchOrderV2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> externalServiceV2<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">bodyToMono</span><span class="token punctuation">(</span><span class="token class-name">OrderResponse</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们将添加一个快速测试，我们传递一个带有偏移的模拟_orderDateTime_，并验证它是否使用_CustomDeserializer_将其转换为UTC：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenMockedExternalResponse_whenSearchByIdV2_thenOrderResponseShouldBeReceivedSuccessfully</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    mockExternalService<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MockResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/json; charset=utf-8&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">&quot;&quot;&quot;
      {
        &quot;orderId&quot;: &quot;a1b2c3d4-e5f6-4a5b-8c9d-0123456789ab&quot;,
        &quot;orderDateTime&quot;: &quot;2024-01-20T14:34:56+01:00&quot;,
        &quot;address&quot;: [
          &quot;123 Main St&quot;,
          &quot;Apt 456&quot;,
          &quot;Cityville&quot;
        ],
        &quot;orderNotes&quot;: [
          &quot;Special request: Handle with care&quot;,
          &quot;Gift wrapping required&quot;
        ]
      }
      &quot;&quot;&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">setResponseCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">OK</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">OrderResponse</span> orderResponse <span class="token operator">=</span> webTestClient<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">&quot;v2/order/1&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">expectStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">expectBody</span><span class="token punctuation">(</span><span class="token class-name">OrderResponse</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">returnResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">getResponseBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">fromString</span><span class="token punctuation">(</span><span class="token string">&quot;a1b2c3d4-e5f6-4a5b-8c9d-0123456789ab&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> orderResponse<span class="token punctuation">.</span><span class="token function">getOrderId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2024</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">)</span>\`\`\`java
      <span class="token punctuation">)</span><span class="token punctuation">,</span> orderResponse<span class="token punctuation">.</span><span class="token function">getOrderDateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertThat</span><span class="token punctuation">(</span>orderResponse<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasSize</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertThat</span><span class="token punctuation">(</span>orderResponse<span class="token punctuation">.</span><span class="token function">getOrderNotes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasSize</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个测试调用了<code>/v2</code>端点，它使用带有<code>CustomDeserializer</code>的特定<code>ObjectMapper</code>来解析从外部服务接收到的订单详情响应。</p><h2 id="_6-结论" tabindex="-1"><a class="header-anchor" href="#_6-结论"><span>6. 结论</span></a></h2><p>在本文中，我们探讨了自定义反序列化的需求以及不同的实现方式。我们首先看了为整个应用程序注册映射器，以及为特定请求注册映射器。我们还可以使用相同的配置来实现自定义序列化器。</p><h2 id="如往常一样-示例的源代码可以在github上找到。" tabindex="-1"><a class="header-anchor" href="#如往常一样-示例的源代码可以在github上找到。"><span>如往常一样，示例的源代码可以在GitHub上找到。</span></a></h2><p>OK</p>`,41),o=[p];function c(i,u){return a(),s("div",null,o)}const d=n(e,[["render",c],["__file","2024-06-23-Custom JSON Deserialization Using Spring WebClient.html.vue"]]),k=JSON.parse('{"path":"/posts/baeldung/2024-06-23/2024-06-23-Custom%20JSON%20Deserialization%20Using%20Spring%20WebClient.html","title":"使用Spring WebClient自定义JSON反序列化","lang":"zh-CN","frontmatter":{"date":"2024-01-20T00:00:00.000Z","category":["Spring","WebFlux"],"tag":["Spring WebClient","JSON","Custom Deserialization"],"head":[["meta",{"name":"keywords","content":"Spring WebClient, JSON, Custom Deserialization, Tutorial"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-06-23/2024-06-23-Custom%20JSON%20Deserialization%20Using%20Spring%20WebClient.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"使用Spring WebClient自定义JSON反序列化"}],["meta",{"property":"og:description","content":"使用Spring WebClient自定义JSON反序列化 在本文中，我们将探讨自定义反序列化的需求以及如何使用Spring WebClient实现它。 2. 为什么我们需要自定义反序列化？ Spring WebFlux模块中的Spring WebClient通过_Encoder_和_Decoder_组件处理序列化和反序列化。Encoder_和_Dec..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-23T05:50:37.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Spring WebClient"}],["meta",{"property":"article:tag","content":"JSON"}],["meta",{"property":"article:tag","content":"Custom Deserialization"}],["meta",{"property":"article:published_time","content":"2024-01-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-23T05:50:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用Spring WebClient自定义JSON反序列化\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-23T05:50:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"使用Spring WebClient自定义JSON反序列化 在本文中，我们将探讨自定义反序列化的需求以及如何使用Spring WebClient实现它。 2. 为什么我们需要自定义反序列化？ Spring WebFlux模块中的Spring WebClient通过_Encoder_和_Decoder_组件处理序列化和反序列化。Encoder_和_Dec..."},"headers":[{"level":2,"title":"2. 为什么我们需要自定义反序列化？","slug":"_2-为什么我们需要自定义反序列化","link":"#_2-为什么我们需要自定义反序列化","children":[]},{"level":2,"title":"3. 如何自定义Object Mappers？","slug":"_3-如何自定义object-mappers","link":"#_3-如何自定义object-mappers","children":[]},{"level":2,"title":"4. 使用全局配置自定义反序列化","slug":"_4-使用全局配置自定义反序列化","link":"#_4-使用全局配置自定义反序列化","children":[]},{"level":2,"title":"5. 使用WebClient Exchange Strategies Config自定义反序列化","slug":"_5-使用webclient-exchange-strategies-config自定义反序列化","link":"#_5-使用webclient-exchange-strategies-config自定义反序列化","children":[]},{"level":2,"title":"6. 结论","slug":"_6-结论","link":"#_6-结论","children":[]},{"level":2,"title":"如往常一样，示例的源代码可以在GitHub上找到。","slug":"如往常一样-示例的源代码可以在github上找到。","link":"#如往常一样-示例的源代码可以在github上找到。","children":[]}],"git":{"createdTime":1719121837000,"updatedTime":1719121837000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":4.91,"words":1472},"filePathRelative":"posts/baeldung/2024-06-23/2024-06-23-Custom JSON Deserialization Using Spring WebClient.md","localizedDate":"2024年1月20日","excerpt":"\\n<p>在本文中，我们将探讨自定义反序列化的需求以及如何使用Spring WebClient实现它。</p>\\n<h2>2. 为什么我们需要自定义反序列化？</h2>\\n<p>Spring WebFlux模块中的Spring WebClient通过_Encoder_和_Decoder_组件处理序列化和反序列化。<em>Encoder_和_Decoder_作为接口存在，代表读取和写入内容的合同。默认情况下，spring-core模块提供了_byte</em>[]、<em>ByteBuffer</em>、<em>DataBuffer</em>、_Resource_和_String_编码器和解码器实现。</p>","autoDesc":true}');export{d as comp,k as data};
