import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-BwYTipZw.js";const e={},p=t('<h1 id="java中的trifunction接口-baeldung" tabindex="-1"><a class="header-anchor" href="#java中的trifunction接口-baeldung"><span>Java中的TriFunction接口 | Baeldung</span></a></h1><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p>在本文中，我们将定义一个_TriFunction_ <em>FunctionalInterface</em>，它表示一个接受三个参数并计算结果的函数。稍后，我们还将看到一个使用Vavr库内置_Function3_的例子。</p><h2 id="_2-创建我们自己的-trifunction-接口" tabindex="-1"><a class="header-anchor" href="#_2-创建我们自己的-trifunction-接口"><span>2. 创建我们自己的_TriFunction_接口</span></a></h2><p>自Java 8版本以来，Java定义了_BiFunction FunctionalInterface_。它代表一个接受两个参数并计算结果的函数。为了允许函数组合，它还提供了一个_andThen()_方法，该方法将另一个_Function_应用于_BiFunction_的结果。</p><p><strong>类似地，我们将定义我们的_TriFunction_接口，并给它_andThen()_方法：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@FunctionalInterface</span>\n<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TriFunction</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">U</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span>` <span class="token punctuation">{</span>\n    <span class="token class-name">R</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">,</span> <span class="token class-name">U</span> u<span class="token punctuation">,</span> <span class="token class-name">V</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">default</span> `<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">&gt;</span></span>` <span class="token class-name">TriFunction</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">U</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token class-name">K</span><span class="token punctuation">&gt;</span></span>` <span class="token function">andThen</span><span class="token punctuation">(</span><span class="token class-name">Function</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">K</span><span class="token punctuation">&gt;</span></span>` after<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>after<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">,</span> <span class="token class-name">U</span> u<span class="token punctuation">,</span> <span class="token class-name">V</span> v<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> after<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token function">apply</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们看看如何使用这个接口。我们将定义一个函数，它接受三个_Integers_，将前两个操作数相乘，然后加上最后一个操作数：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token class-name">TriFunction</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>```` multiplyThenAdd <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> x <span class="token operator">*</span> y <span class="token operator">+</span> z<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>请注意，只有在前两个操作数的乘积低于_Integer_最大值时，此方法的结果才会准确。</p><p>作为一个例子，我们可以使用_andThen()<em>方法来定义一个_TriFunction</em>，它：</p><ul><li>首先，对参数应用_multiplyThenAdd()_</li><li>然后，应用一个_Function_，计算一个_Integer_除以10的欧几里得除法的商到前一步的结果</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token class-name">TriFunction</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>```` multiplyThenAddThenDivideByTen <span class="token operator">=</span> multiplyThenAdd<span class="token punctuation">.</span><span class="token function">andThen</span><span class="token punctuation">(</span>x <span class="token operator">-&gt;</span> x <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在我们可以编写一些快速测试来检查我们的_TriFunction_s是否按预期工作：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">whenMultiplyThenAdd_ThenReturnsCorrectResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> multiplyThenAdd<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">whenMultiplyThenAddThenDivideByTen_ThenReturnsCorrectResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> multiplyThenAddThenDivideByTen<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，<em>TriFunction_的操作数可以是各种类型。例如，我们可以定义一个_TriFunction</em>，根据一个_Boolean_条件将一个_Integer_转换为_String_或返回另一个给定的_String_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token class-name">TriFunction</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>` convertIntegerOrReturnStringDependingOnCondition <span class="token operator">=</span> <span class="token punctuation">(</span>myInt<span class="token punctuation">,</span> myStr<span class="token punctuation">,</span> myBool<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">TRUE</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>myBool<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> myInt <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> myInt<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> myStr<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-使用vavr的-function3" tabindex="-1"><a class="header-anchor" href="#_3-使用vavr的-function3"><span>3. 使用Vavr的_Function3_</span></a></h2><p><strong>Vavr库已经定义了一个_Function3_接口，它具有我们想要的行为。</strong> 首先，让我们将Vavr依赖项添加到我们的项目中：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`io.vavr`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`vavr`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`0.10.4`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们可以重新定义_multiplyThenAdd()_和_multiplyThenAddThenDivideByTen()_方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token class-name">Function3</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>```` multiplyThenAdd <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> x <span class="token operator">*</span> y <span class="token operator">+</span> z<span class="token punctuation">;</span>\n\n<span class="token keyword">static</span> <span class="token class-name">Function3</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>```` multiplyThenAddThenDivideByTen <span class="token operator">=</span> multiplyThenAdd<span class="token punctuation">.</span><span class="token function">andThen</span><span class="token punctuation">(</span>x <span class="token operator">-&gt;</span> x <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们需要定义最多8个参数的函数，使用Vavr是一个不错的选择。确实，<em>Function4</em>, <em>Function5</em>,… _Function8_已经在库中定义了。</p><h2 id="_4-结论" tabindex="-1"><a class="header-anchor" href="#_4-结论"><span>4. 结论</span></a></h2><p>在本教程中，我们实现了自己的接受3个参数的_FunctionInterface_。我们还强调了Vavr库包含了这种函数的实现。</p><p>如常，代码可在GitHub上找到。</p>',26),c=[p];function o(l,i){return s(),a("div",null,c)}const k=n(e,[["render",o],["__file","2024-07-14-TriFunction Interface in Java.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-14/2024-07-14-TriFunction%20Interface%20in%20Java.html","title":"Java中的TriFunction接口 | Baeldung","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","Functional Programming"],"tag":["TriFunction","FunctionalInterface","Java 8"],"head":[["meta",{"name":"keywords","content":"Java TriFunction, FunctionalInterface, Java 8"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-14/2024-07-14-TriFunction%20Interface%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Java中的TriFunction接口 | Baeldung"}],["meta",{"property":"og:description","content":"Java中的TriFunction接口 | Baeldung 1. 概述 在本文中，我们将定义一个_TriFunction_ FunctionalInterface，它表示一个接受三个参数并计算结果的函数。稍后，我们还将看到一个使用Vavr库内置_Function3_的例子。 2. 创建我们自己的_TriFunction_接口 自Java 8版本以来，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-14T11:40:41.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"TriFunction"}],["meta",{"property":"article:tag","content":"FunctionalInterface"}],["meta",{"property":"article:tag","content":"Java 8"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-14T11:40:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java中的TriFunction接口 | Baeldung\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-14T11:40:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Java中的TriFunction接口 | Baeldung 1. 概述 在本文中，我们将定义一个_TriFunction_ FunctionalInterface，它表示一个接受三个参数并计算结果的函数。稍后，我们还将看到一个使用Vavr库内置_Function3_的例子。 2. 创建我们自己的_TriFunction_接口 自Java 8版本以来，..."},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. 创建我们自己的_TriFunction_接口","slug":"_2-创建我们自己的-trifunction-接口","link":"#_2-创建我们自己的-trifunction-接口","children":[]},{"level":2,"title":"3. 使用Vavr的_Function3_","slug":"_3-使用vavr的-function3","link":"#_3-使用vavr的-function3","children":[]},{"level":2,"title":"4. 结论","slug":"_4-结论","link":"#_4-结论","children":[]}],"git":{"createdTime":1720957241000,"updatedTime":1720957241000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":2.37,"words":711},"filePathRelative":"posts/baeldung/2024-07-14/2024-07-14-TriFunction Interface in Java.md","localizedDate":"2022年4月1日","excerpt":"\\n<h2>1. 概述</h2>\\n<p>在本文中，我们将定义一个_TriFunction_ <em>FunctionalInterface</em>，它表示一个接受三个参数并计算结果的函数。稍后，我们还将看到一个使用Vavr库内置_Function3_的例子。</p>\\n<h2>2. 创建我们自己的_TriFunction_接口</h2>\\n<p>自Java 8版本以来，Java定义了_BiFunction FunctionalInterface_。它代表一个接受两个参数并计算结果的函数。为了允许函数组合，它还提供了一个_andThen()_方法，该方法将另一个_Function_应用于_BiFunction_的结果。</p>","autoDesc":true}');export{k as comp,d as data};
