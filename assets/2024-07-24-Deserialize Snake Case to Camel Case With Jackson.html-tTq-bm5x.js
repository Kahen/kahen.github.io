import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,o as s,a as t}from"./app-DFhKiB50.js";const e={},p=t(`<hr><h1 id="使用jackson将蛇形命名法json反序列化为驼峰命名法字段" tabindex="-1"><a class="header-anchor" href="#使用jackson将蛇形命名法json反序列化为驼峰命名法字段"><span>使用Jackson将蛇形命名法JSON反序列化为驼峰命名法字段</span></a></h1><p>字段名在JSON对象中可以有多种格式。当我们想要将这些加载到我们的POJOs中时，我们可能会遇到一个问题，即我们Java代码中的属性名与JSON中的命名约定不匹配。</p><p>在这个简短的教程中，我们将看到如何使用<strong>Jackson</strong>将蛇形命名法JSON反序列化为驼峰命名法字段。</p><h2 id="_2-安装jackson" tabindex="-1"><a class="header-anchor" href="#_2-安装jackson"><span>2. 安装Jackson</span></a></h2><p>让我们从向我们的_pom.xml_文件中添加Jackson依赖开始：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\`
    \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>\`com.fasterxml.jackson.core\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\`
    \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`jackson-databind\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`
    \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\`2.13\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\`
\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-使用默认值进行反序列化" tabindex="-1"><a class="header-anchor" href="#_3-使用默认值进行反序列化"><span>3. 使用默认值进行反序列化</span></a></h2><p>让我们考虑一个示例_User_类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span>

    <span class="token comment">// 标准的getter和setter</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们尝试加载这个使用蛇形命名法标准（由下划线分隔的小写名称）的JSON：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;first_name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Jackie&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;last_name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Chan&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，我们需要使用_ObjectMapper_来反序列化这个JSON：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ObjectMapper</span> objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">User</span> user <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然而，当我们尝试这样做时，我们会得到一个错误：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>exc<span class="token punctuation">.</span></span>UnrecognizedPropertyException</span><span class="token operator">:</span> <span class="token class-name">Unrecognized</span> field <span class="token string">&quot;first_name&quot;</span> <span class="token punctuation">(</span><span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>baeldung<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>snakecase<span class="token punctuation">.</span></span>User</span><span class="token punctuation">)</span><span class="token punctuation">,</span> not marked as ignorable <span class="token punctuation">(</span><span class="token number">2</span> known properties<span class="token operator">:</span> <span class="token string">&quot;lastName&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;firstName&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>不幸的是，Jackson无法完全匹配JSON中的名称与_User_中的字段名。</p><p>接下来，我们将学习三种解决这个问题的方法。</p><h2 id="_4-使用-jsonproperty-注解" tabindex="-1"><a class="header-anchor" href="#_4-使用-jsonproperty-注解"><span>4. 使用_@JsonProperty_注解</span></a></h2><p>我们可以在我们的类字段上使用_@JsonProperty_注解，将字段映射为我们JSON中的确切名称：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserWithPropertyNames</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@JsonProperty</span><span class="token punctuation">(</span><span class="token string">&quot;first_name&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@JsonProperty</span><span class="token punctuation">(</span><span class="token string">&quot;last_name&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span>

    <span class="token comment">// 标准的getter和setter</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们可以将我们的JSON反序列化为_UserWithPropertyNames_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ObjectMapper</span> objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">UserWithPropertyNames</span> user <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">,</span> <span class="token class-name">UserWithPropertyNames</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Jackie&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getFirstName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Chan&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getLastName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-使用-jsonnaming-注解" tabindex="-1"><a class="header-anchor" href="#_5-使用-jsonnaming-注解"><span>5. 使用_@JsonNaming_注解</span></a></h2><p>接下来，我们可以使用_@JsonNaming_注解在类上，并<strong>所有字段都将使用蛇形命名法进行反序列化</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@JsonNaming</span><span class="token punctuation">(</span><span class="token class-name">PropertyNamingStrategy<span class="token punctuation">.</span>SnakeCaseStrategy</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserWithSnakeStrategy</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span>

    <span class="token comment">// 标准的getter和setter</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后再次反序列化我们的JSON：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ObjectMapper</span> objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">UserWithSnakeStrategy</span> user <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">,</span> <span class="token class-name">UserWithSnakeStrategy</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Jackie&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getFirstName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Chan&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getLastName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-配置-objectmapper" tabindex="-1"><a class="header-anchor" href="#_6-配置-objectmapper"><span>6. 配置_ObjectMapper_</span></a></h2><p>最后，我们可以使用_ObjectMapper_上的_setPropertyNamingStrategy_方法来配置它，以用于所有序列化：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ObjectMapper</span> objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">setPropertyNamingStrategy</span><span class="token punctuation">(</span><span class="token class-name">PropertyNamingStrategy</span><span class="token punctuation">.</span><span class="token constant">SNAKE_CASE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">User</span> user <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Jackie&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getFirstName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Chan&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getLastName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如我们所看到的，我们现在可以将我们的JSON反序列化到原始的_User_对象中，即使_User_类没有任何注解。</p><p>我们应该注意到还有其他的命名约定（例如kebab case），上述解决方案也适用于它们。</p><h2 id="_7-结论" tabindex="-1"><a class="header-anchor" href="#_7-结论"><span>7. 结论</span></a></h2><p>在这篇文章中，我们看到了使用Jackson将蛇形命名法JSON反序列化为驼峰命名法字段的不同方法。</p><p>首先，我们明确命名了字段。然后我们在POJO本身上设置了命名策略。</p><p>最后，我们向_ObjectMapper_添加了全局配置。</p><p>如常，本文的示例代码可以在GitHub上找到。</p>`,38),o=[p];function c(l,i){return s(),n("div",null,o)}const k=a(e,[["render",c],["__file","2024-07-24-Deserialize Snake Case to Camel Case With Jackson.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-24/2024-07-24-Deserialize%20Snake%20Case%20to%20Camel%20Case%20With%20Jackson.html","title":"使用Jackson将蛇形命名法JSON反序列化为驼峰命名法字段","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","Jackson"],"tag":["JSON","Deserialization"],"head":[["meta",{"name":"keywords","content":"Jackson, JSON, Deserialization, Camel Case, Snake Case"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-24/2024-07-24-Deserialize%20Snake%20Case%20to%20Camel%20Case%20With%20Jackson.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"使用Jackson将蛇形命名法JSON反序列化为驼峰命名法字段"}],["meta",{"property":"og:description","content":"使用Jackson将蛇形命名法JSON反序列化为驼峰命名法字段 字段名在JSON对象中可以有多种格式。当我们想要将这些加载到我们的POJOs中时，我们可能会遇到一个问题，即我们Java代码中的属性名与JSON中的命名约定不匹配。 在这个简短的教程中，我们将看到如何使用Jackson将蛇形命名法JSON反序列化为驼峰命名法字段。 2. 安装Jackson..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-24T20:51:06.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"JSON"}],["meta",{"property":"article:tag","content":"Deserialization"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-24T20:51:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用Jackson将蛇形命名法JSON反序列化为驼峰命名法字段\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-24T20:51:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"使用Jackson将蛇形命名法JSON反序列化为驼峰命名法字段 字段名在JSON对象中可以有多种格式。当我们想要将这些加载到我们的POJOs中时，我们可能会遇到一个问题，即我们Java代码中的属性名与JSON中的命名约定不匹配。 在这个简短的教程中，我们将看到如何使用Jackson将蛇形命名法JSON反序列化为驼峰命名法字段。 2. 安装Jackson..."},"headers":[{"level":2,"title":"2. 安装Jackson","slug":"_2-安装jackson","link":"#_2-安装jackson","children":[]},{"level":2,"title":"3. 使用默认值进行反序列化","slug":"_3-使用默认值进行反序列化","link":"#_3-使用默认值进行反序列化","children":[]},{"level":2,"title":"4. 使用_@JsonProperty_注解","slug":"_4-使用-jsonproperty-注解","link":"#_4-使用-jsonproperty-注解","children":[]},{"level":2,"title":"5. 使用_@JsonNaming_注解","slug":"_5-使用-jsonnaming-注解","link":"#_5-使用-jsonnaming-注解","children":[]},{"level":2,"title":"6. 配置_ObjectMapper_","slug":"_6-配置-objectmapper","link":"#_6-配置-objectmapper","children":[]},{"level":2,"title":"7. 结论","slug":"_7-结论","link":"#_7-结论","children":[]}],"git":{"createdTime":1721854266000,"updatedTime":1721854266000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":2.54,"words":762},"filePathRelative":"posts/baeldung/2024-07-24/2024-07-24-Deserialize Snake Case to Camel Case With Jackson.md","localizedDate":"2022年4月1日","excerpt":"<hr>\\n<h1>使用Jackson将蛇形命名法JSON反序列化为驼峰命名法字段</h1>\\n<p>字段名在JSON对象中可以有多种格式。当我们想要将这些加载到我们的POJOs中时，我们可能会遇到一个问题，即我们Java代码中的属性名与JSON中的命名约定不匹配。</p>\\n<p>在这个简短的教程中，我们将看到如何使用<strong>Jackson</strong>将蛇形命名法JSON反序列化为驼峰命名法字段。</p>\\n<h2>2. 安装Jackson</h2>\\n<p>让我们从向我们的_pom.xml_文件中添加Jackson依赖开始：</p>\\n<div class=\\"language-xml\\" data-ext=\\"xml\\" data-title=\\"xml\\"><pre class=\\"language-xml\\"><code>`<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>dependency</span><span class=\\"token punctuation\\">&gt;</span></span>`\\n    `<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>groupId</span><span class=\\"token punctuation\\">&gt;</span></span>`com.fasterxml.jackson.core`<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>groupId</span><span class=\\"token punctuation\\">&gt;</span></span>`\\n    `<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>artifactId</span><span class=\\"token punctuation\\">&gt;</span></span>`jackson-databind`<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>artifactId</span><span class=\\"token punctuation\\">&gt;</span></span>`\\n    `<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>version</span><span class=\\"token punctuation\\">&gt;</span></span>`2.13`<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>version</span><span class=\\"token punctuation\\">&gt;</span></span>`\\n`<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>dependency</span><span class=\\"token punctuation\\">&gt;</span></span>`\\n</code></pre></div>","autoDesc":true}');export{k as comp,d as data};
