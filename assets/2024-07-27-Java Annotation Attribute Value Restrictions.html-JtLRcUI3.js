import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-DFhKiB50.js";const e={},p=t(`<hr><h1 id="java-注解属性值限制" tabindex="-1"><a class="header-anchor" href="#java-注解属性值限制"><span>Java 注解属性值限制</span></a></h1><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p>如今，很难想象没有注解的 Java，注解是 Java 语言中的强大工具。</p><p>Java 提供了一组内置注解。此外，还有许多来自不同库的注解。我们甚至可以定义和处理我们自己的注解。我们可以调整这些注解的属性值，但这些属性值有限制。特别是，<strong>注解属性值必须是常量表达式</strong>。</p><p>在本教程中，我们将学习这种限制的一些原因，并深入 JVM 内部以更好地解释它。我们还将查看一些涉及注解属性值的问题和解决方案的示例。</p><h2 id="_2-java-注解属性的内部机制" tabindex="-1"><a class="header-anchor" href="#_2-java-注解属性的内部机制"><span>2. Java 注解属性的内部机制</span></a></h2><p>让我们考虑 Java 类文件如何存储注解属性。Java 有一个特殊的结构称为 <em>element_value</em>。这个结构存储一个特定的注解属性。</p><p><em>element_value</em> 结构可以存储四种不同类型的值：</p><ul><li>常量池中的常量</li><li>类字面量</li><li>嵌套注解</li><li>数组值</li></ul><p>因此，注解属性中的常量是编译时常量。否则，编译器不会知道应该将什么值放入常量池并用作注解属性。</p><p>Java 规范定义了产生常量表达式的运算。如果我们将这些运算应用于编译时常量，我们将得到编译时常量。</p><p>假设我们有一个名为 <em>@Marker</em> 的注解，它有一个属性 <em>value</em>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Marker</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如，这段代码可以无错误地编译：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Marker</span><span class="token punctuation">(</span><span class="token class-name">Example</span><span class="token punctuation">.</span><span class="token constant">ATTRIBUTE_FOO</span> <span class="token operator">+</span> <span class="token class-name">Example</span><span class="token punctuation">.</span><span class="token constant">ATTRIBUTE_BAR</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">ATTRIBUTE_FOO</span> <span class="token operator">=</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">ATTRIBUTE_BAR</span> <span class="token operator">=</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们将注解属性定义为两个字符串的连接。连接运算符产生个常量表达式。</p><h2 id="_3-使用静态初始化器" tabindex="-1"><a class="header-anchor" href="#_3-使用静态初始化器"><span>3. 使用静态初始化器</span></a></h2><p>让我们考虑在 <em>static</em> 块中初始化的常量：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Marker</span><span class="token punctuation">(</span><span class="token class-name">Example</span><span class="token punctuation">.</span><span class="token constant">ATTRIBUTE_FOO</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">ATTRIBUTES</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Bar&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">ATTRIBUTE_FOO</span><span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token constant">ATTRIBUTE_FOO</span> <span class="token operator">=</span> <span class="token constant">ATTRIBUTES</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它在 <em>static</em> 块中初始化字段，并尝试将该字段用作注解属性。<strong>这种方法会导致编译错误。</strong></p><p>首先，变量 <em>ATTRIBUTE_FOO</em> 具有 <em>static</em> 和 <em>final</em> 修饰符，但编译器不能计算该字段。应用程序在运行时计算它。</p><p>其次，<strong>注解属性必须在 JVM 加载类之前具有确切的值</strong>。然而，当 <em>static</em> 初始化器运行时，类已经被加载了。因此，这种限制是有意义的。</p><p>同样的错误也出现在字段初始化中。这段代码由于同样的原因是错误的：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Marker</span><span class="token punctuation">(</span><span class="token class-name">Example</span><span class="token punctuation">.</span><span class="token constant">ATTRIBUTE_FOO</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">ATTRIBUTES</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Bar&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">ATTRIBUTE_FOO</span> <span class="token operator">=</span> <span class="token constant">ATTRIBUTES</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JVM 如何初始化 <em>ATTRIBUTE_FOO</em>？数组访问运算符 <em>ATTRIBUTES[0]</em> 在类初始化器中运行。因此，<em>ATTRIBUTE_FOO</em> 是一个运行时常量。它不是在编译时定义的。</p><h2 id="_4-数组常量作为注解属性" tabindex="-1"><a class="header-anchor" href="#_4-数组常量作为注解属性"><span>4. 数组常量作为注解属性</span></a></h2><p>让我们考虑一个数组注解属性：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Marker</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码将不会编译：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Marker</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">Example</span><span class="token punctuation">.</span><span class="token constant">ATTRIBUTES</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">ATTRIBUTES</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，尽管 <em>final</em> 修饰符保护了引用不被更改，<strong>我们仍然可以修改数组元素</strong>。</p><p>其次，<strong>数组字面量不能是运行时常量。JVM 在静态初始化器中设置每个元素</strong> —— 我们之前描述过的限制。</p><p>最后，类文件存储该数组的每个元素的值。因此，编译器计算属性数组的每个元素，并且它发生在编译时。</p><p>因此，我们只能每次指定数组属性：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Marker</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们仍然可以使用常量作为数组属性的基本元素。</p><h2 id="_5-标记接口中的注解-为什么不工作" tabindex="-1"><a class="header-anchor" href="#_5-标记接口中的注解-为什么不工作"><span>5. 标记接口中的注解：为什么不工作？</span></a></h2><p>如果一个注解属性是一个数组，我们必须每次都重复它。但我们希望避免这种复制粘贴。我们为什么不让我们的注解 <em>@Inherited</em>？我们可以将我们的注解添加到一个标记接口：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Marker</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MarkerInterface</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们可以让需要这个注解的类实现它：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token keyword">implements</span> <span class="token class-name">MarkerInterface</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>这种方法不会工作</strong>。代码可以无错误地编译。然而，<strong>Java 不支持从接口继承注解</strong>，即使注解本身具有 <em>@Inherited</em> 注解。因此，实现标记接口的类不会继承注解。</p><p><strong>原因是多重继承的问题</strong>。的确，如果多个接口具有相同的注解，Java 无法选择一个。</p><p>因此，我们不能通过标记接口避免这种复制粘贴。</p><h2 id="_6-数组元素作为注解属性" tabindex="-1"><a class="header-anchor" href="#_6-数组元素作为注解属性"><span>6. 数组元素作为注解属性</span></a></h2><p>假设我们有一个数组常量，我们使用这个常量作为注解属性：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Marker</span><span class="token punctuation">(</span><span class="token class-name">Example</span><span class="token punctuation">.</span><span class="token constant">ATTRIBUTES</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">ATTRIBUTES</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;Foo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Bar&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码不会编译。注解参数必须是编译时常量。但是，正如我们之前考虑的，<strong>数组不是编译时常量</strong>。</p><p>此外，<strong>数组访问表达式不是常量表达式</strong>。</p><p>如果我们有一个 <em>List</em> 而不是数组会怎样？方法调用不属于常量表达式。因此，使用 <em>List</em> 类的 <em>get</em> 方法会导致同样的错误。</p><p>相反，我们应该明确引用一个常量：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Marker</span><span class="token punctuation">(</span><span class="token class-name">Example</span><span class="token punctuation">.</span><span class="token constant">ATTRIBUTE_FOO</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">ATTRIBUTE_FOO</span> <span class="token operator">=</span> <span class="token string">&quot;Foo&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">ATTRIBUTES</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token constant">ATTRIBUTE_FOO</span><span class="token punctuation">,</span> <span class="token string">&quot;Bar&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，我们在字符串常量中指定注解属性值，Java 编译器可以明确地找到属性值。</p><h2 id="_7-结论" tabindex="-1"><a class="header-anchor" href="#_7-结论"><span>7. 结论</span></a></h2><p>在本文中，我们查看了注解参数的限制。我们考虑了一些注解属性的问题示例。我们还讨论了这些限制的 JVM 内部机制。</p><p>在所有示例中，我们使用了相同的类来存储常量和注解。然而，所有这些限制也适用于常量来自另一个类的情况。</p>`,57),o=[p];function c(l,i){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","2024-07-27-Java Annotation Attribute Value Restrictions.html.vue"]]),k=JSON.parse('{"path":"/posts/baeldung/2024-07-27/2024-07-27-Java%20Annotation%20Attribute%20Value%20Restrictions.html","title":"Java 注解属性值限制","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","Annotations"],"tag":["Java Annotation","Attribute Value Restrictions"],"head":[["meta",{"name":"keywords","content":"Java Annotation Attribute Value Restrictions"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-27/2024-07-27-Java%20Annotation%20Attribute%20Value%20Restrictions.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Java 注解属性值限制"}],["meta",{"property":"og:description","content":"Java 注解属性值限制 1. 概述 如今，很难想象没有注解的 Java，注解是 Java 语言中的强大工具。 Java 提供了一组内置注解。此外，还有许多来自不同库的注解。我们甚至可以定义和处理我们自己的注解。我们可以调整这些注解的属性值，但这些属性值有限制。特别是，注解属性值必须是常量表达式。 在本教程中，我们将学习这种限制的一些原因，并深入 JV..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-27T04:58:21.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java Annotation"}],["meta",{"property":"article:tag","content":"Attribute Value Restrictions"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-27T04:58:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 注解属性值限制\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-27T04:58:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Java 注解属性值限制 1. 概述 如今，很难想象没有注解的 Java，注解是 Java 语言中的强大工具。 Java 提供了一组内置注解。此外，还有许多来自不同库的注解。我们甚至可以定义和处理我们自己的注解。我们可以调整这些注解的属性值，但这些属性值有限制。特别是，注解属性值必须是常量表达式。 在本教程中，我们将学习这种限制的一些原因，并深入 JV..."},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. Java 注解属性的内部机制","slug":"_2-java-注解属性的内部机制","link":"#_2-java-注解属性的内部机制","children":[]},{"level":2,"title":"3. 使用静态初始化器","slug":"_3-使用静态初始化器","link":"#_3-使用静态初始化器","children":[]},{"level":2,"title":"4. 数组常量作为注解属性","slug":"_4-数组常量作为注解属性","link":"#_4-数组常量作为注解属性","children":[]},{"level":2,"title":"5. 标记接口中的注解：为什么不工作？","slug":"_5-标记接口中的注解-为什么不工作","link":"#_5-标记接口中的注解-为什么不工作","children":[]},{"level":2,"title":"6. 数组元素作为注解属性","slug":"_6-数组元素作为注解属性","link":"#_6-数组元素作为注解属性","children":[]},{"level":2,"title":"7. 结论","slug":"_7-结论","link":"#_7-结论","children":[]}],"git":{"createdTime":1722056301000,"updatedTime":1722056301000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":4.95,"words":1486},"filePathRelative":"posts/baeldung/2024-07-27/2024-07-27-Java Annotation Attribute Value Restrictions.md","localizedDate":"2022年4月1日","excerpt":"<hr>\\n<h1>Java 注解属性值限制</h1>\\n<h2>1. 概述</h2>\\n<p>如今，很难想象没有注解的 Java，注解是 Java 语言中的强大工具。</p>\\n<p>Java 提供了一组内置注解。此外，还有许多来自不同库的注解。我们甚至可以定义和处理我们自己的注解。我们可以调整这些注解的属性值，但这些属性值有限制。特别是，<strong>注解属性值必须是常量表达式</strong>。</p>\\n<p>在本教程中，我们将学习这种限制的一些原因，并深入 JVM 内部以更好地解释它。我们还将查看一些涉及注解属性值的问题和解决方案的示例。</p>\\n<h2>2. Java 注解属性的内部机制</h2>","autoDesc":true}');export{d as comp,k as data};
