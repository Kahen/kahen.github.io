import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,o as t,a as s}from"./app-C5QtKXnb.js";const e={},p=s(`<h1 id="使用apache-poi设置日期格式-baeldung" tabindex="-1"><a class="header-anchor" href="#使用apache-poi设置日期格式-baeldung"><span>使用Apache POI设置日期格式 | Baeldung</span></a></h1><h2 id="_1-引言" tabindex="-1"><a class="header-anchor" href="#_1-引言"><span><strong>1. 引言</strong></span></a></h2><p>在使用Apache POI处理日期时，我们希望确保它们被正确格式化。</p><p>幸运的是，使用Apache POI设置日期格式非常简单。在本教程中，我们将展示如何使用Apache POI为日期定义自定义_DataFormat_作为_CellStyle_，并如何使用现有的_DataFormats_。</p><h2 id="_2-起点" tabindex="-1"><a class="header-anchor" href="#_2-起点"><span><strong>2. 起点</strong></span></a></h2><p>我们的起点将是一个新的_XSSFWorkbook_，一个_XSSFCell_，以及一个已经创建的_CellStyle_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">XSSFWorkbook</span> wb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XSSFWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">CellStyle</span> cellStyle <span class="token operator">=</span> wb<span class="token punctuation">.</span><span class="token function">createCellStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
wb<span class="token punctuation">.</span><span class="token function">createSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">XSSFSheet</span> sheet <span class="token operator">=</span> wb<span class="token punctuation">.</span><span class="token function">getSheetAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">XSSFCell</span> dateCell <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">createRow</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
dateCell<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为我们还没有设置我们想要的_DataFormat_，我们的_Date_将被转换为数字，并将显示为：</p><blockquote><p>44898,9262857176</p></blockquote><p>这种表示方式对我们人类来说阅读性很差。因此，接下来我们将看看如何通过格式化来创建更好的可视化效果。</p><h2 id="_2-创建自定义-dataformat" tabindex="-1"><a class="header-anchor" href="#_2-创建自定义-dataformat"><span><strong>2. 创建自定义_DataFormat_</strong></span></a></h2><p>首先，我们需要创建一个新的_CreationHelper_。使用_CreationHelper_，我们可以创建一个新的_DataFormat_，并指定特定的_Format_。这个_DataFormat_在内部存储，并通过一个short引用。我们必须将其添加到_CellStyle_本身，并将_CellStyle_应用到_Cell_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">CreationHelper</span> createHelper <span class="token operator">=</span> wb<span class="token punctuation">.</span><span class="token function">getCreationHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">short</span> format <span class="token operator">=</span> createHelper<span class="token punctuation">.</span><span class="token function">createDataFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFormat</span><span class="token punctuation">(</span><span class="token string">&quot;m.d.yy h:mm&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cellStyle<span class="token punctuation">.</span><span class="token function">setDataFormat</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span>
dateCell<span class="token punctuation">.</span><span class="token function">setCellStyle</span><span class="token punctuation">(</span>cellStyle<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设置好这个自定义_CellStyle_后，我们的日期将被格式化为：</p><div class="language-plaintext line-numbers-mode" data-ext="plaintext" data-title="plaintext"><pre class="language-plaintext"><code>02.12.2022 21:30
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然而，如果我们创建一个新的自定义_DataFormat_，我们应该始终记住Excel工作簿支持的最大cell样式数量为65,000。因此，<strong>我们应该始终重用现有的cell样式</strong>，并尽可能将它们应用到多个单元格。</p><h2 id="_3-使用默认-dataformat" tabindex="-1"><a class="header-anchor" href="#_3-使用默认-dataformat"><span><strong>3. 使用默认_DataFormat_</strong></span></a></h2><p>正如我们所学的，Apache POI使用shorts来链接不同的_DataFormats._ Excel已经有很多<strong>内置_DataFormats_，我们可以通过直接调用它们的short来使用</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>cellStyle<span class="token punctuation">.</span><span class="token function">setDataFormat</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
dateCell<span class="token punctuation">.</span><span class="token function">setCellStyle</span><span class="token punctuation">(</span>cellStyle<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>之后，我们可以使用以下代码行获取_DataFormat_的_String_表示形式：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>cellStyle<span class="token punctuation">.</span><span class="token function">getDataFormatString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在我们的示例中，我们将得到以下结果：</p><div class="language-plaintext line-numbers-mode" data-ext="plaintext" data-title="plaintext"><pre class="language-plaintext"><code>m/d/yy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最常见的_DataFormats_是：</p><table><thead><tr><th>Short Value</th><th>格式</th></tr></thead><tbody><tr><td>14</td><td>m/d/yy</td></tr><tr><td>15</td><td>d-mmm-yy</td></tr><tr><td>16</td><td>d-mmm</td></tr><tr><td>17</td><td>mmm-yy</td></tr><tr><td>18</td><td>h:mm AM/PM</td></tr><tr><td>19</td><td>h:mm:ss AM/PM</td></tr><tr><td>20</td><td>h:mm</td></tr><tr><td>21</td><td>h:mm:ss</td></tr><tr><td>22</td><td>m/d/yy h:mm</td></tr></tbody></table><p>如果这些数据格式符合我们的需求，我们应该始终使用其中之一，因为Excel将它们显示为它们的格式之一，而不是自定义格式。这也将<strong>触发Excel使用本地化的格式可视化</strong>。</p><h2 id="_4-结论" tabindex="-1"><a class="header-anchor" href="#_4-结论"><span><strong>4. 结论</strong></span></a></h2><p>正如我们所看到的，使用Apache POI设置日期格式既快速又简单，但也是以人类可读的方式可视化日期所必需的。下次我们在电子表格中处理日期时，我们应该尝试使用它。</p><p>完整的示例可以在GitHub上找到。</p>`,29),o=[p];function l(c,i){return t(),n("div",null,o)}const d=a(e,[["render",l],["__file","2024-07-11-Set the Date Format Using Apache POI.html.vue"]]),k=JSON.parse('{"path":"/posts/baeldung/2024-07-11/2024-07-11-Set%20the%20Date%20Format%20Using%20Apache%20POI.html","title":"使用Apache POI设置日期格式 | Baeldung","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","Apache POI"],"tag":["Date Format","Excel"],"head":[["meta",{"name":"keywords","content":"Apache POI, Date Format, Excel, Java"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-11/2024-07-11-Set%20the%20Date%20Format%20Using%20Apache%20POI.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"使用Apache POI设置日期格式 | Baeldung"}],["meta",{"property":"og:description","content":"使用Apache POI设置日期格式 | Baeldung 1. 引言 在使用Apache POI处理日期时，我们希望确保它们被正确格式化。 幸运的是，使用Apache POI设置日期格式非常简单。在本教程中，我们将展示如何使用Apache POI为日期定义自定义_DataFormat_作为_CellStyle_，并如何使用现有的_DataFormat..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-11T14:02:40.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Date Format"}],["meta",{"property":"article:tag","content":"Excel"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-11T14:02:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用Apache POI设置日期格式 | Baeldung\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-11T14:02:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"使用Apache POI设置日期格式 | Baeldung 1. 引言 在使用Apache POI处理日期时，我们希望确保它们被正确格式化。 幸运的是，使用Apache POI设置日期格式非常简单。在本教程中，我们将展示如何使用Apache POI为日期定义自定义_DataFormat_作为_CellStyle_，并如何使用现有的_DataFormat..."},"headers":[{"level":2,"title":"1. 引言","slug":"_1-引言","link":"#_1-引言","children":[]},{"level":2,"title":"2. 起点","slug":"_2-起点","link":"#_2-起点","children":[]},{"level":2,"title":"2. 创建自定义_DataFormat_","slug":"_2-创建自定义-dataformat","link":"#_2-创建自定义-dataformat","children":[]},{"level":2,"title":"3. 使用默认_DataFormat_","slug":"_3-使用默认-dataformat","link":"#_3-使用默认-dataformat","children":[]},{"level":2,"title":"4. 结论","slug":"_4-结论","link":"#_4-结论","children":[]}],"git":{"createdTime":1720706560000,"updatedTime":1720706560000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":2.42,"words":725},"filePathRelative":"posts/baeldung/2024-07-11/2024-07-11-Set the Date Format Using Apache POI.md","localizedDate":"2022年4月1日","excerpt":"\\n<h2><strong>1. 引言</strong></h2>\\n<p>在使用Apache POI处理日期时，我们希望确保它们被正确格式化。</p>\\n<p>幸运的是，使用Apache POI设置日期格式非常简单。在本教程中，我们将展示如何使用Apache POI为日期定义自定义_DataFormat_作为_CellStyle_，并如何使用现有的_DataFormats_。</p>\\n<h2><strong>2. 起点</strong></h2>\\n<p>我们的起点将是一个新的_XSSFWorkbook_，一个_XSSFCell_，以及一个已经创建的_CellStyle_：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token class-name\\">XSSFWorkbook</span> wb <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">XSSFWorkbook</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">CellStyle</span> cellStyle <span class=\\"token operator\\">=</span> wb<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">createCellStyle</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nwb<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">createSheet</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">XSSFSheet</span> sheet <span class=\\"token operator\\">=</span> wb<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getSheetAt</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">XSSFCell</span> dateCell <span class=\\"token operator\\">=</span> sheet<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">createRow</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">createCell</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\ndateCell<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setCellValue</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Date</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}');export{d as comp,k as data};
