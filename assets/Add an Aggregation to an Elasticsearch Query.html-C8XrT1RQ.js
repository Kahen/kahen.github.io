import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-GsymVfWD.js";const p={},e=t(`<h1 id="elasticsearch查询中添加聚合" tabindex="-1"><a class="header-anchor" href="#elasticsearch查询中添加聚合"><span>Elasticsearch查询中添加聚合</span></a></h1><p>Elasticsearch是一个适用于需要灵活过滤的场景的搜索和分析引擎。<strong>有时，我们需要检索请求的数据及其聚合信息。</strong> 在本教程中，我们将探讨如何做到这一点。</p><h2 id="_2-elasticsearch搜索与聚合" tabindex="-1"><a class="header-anchor" href="#_2-elasticsearch搜索与聚合"><span>2. Elasticsearch搜索与聚合</span></a></h2><p>让我们从探索Elasticsearch的聚合功能开始。</p><p>一旦我们在本地主机上运行了Elasticsearch实例，<strong>让我们创建一个名为_store-items_的索引，并在其中添加一些文档</strong>：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code>POST http<span class="token operator">:</span><span class="token comment">//localhost:9200/store-items/_doc</span>
<span class="token punctuation">{</span>
    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Multimedia&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;PC Monitor&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;price&quot;</span><span class="token operator">:</span> <span class="token number">1000</span>
<span class="token punctuation">}</span>
...
POST http<span class="token operator">:</span><span class="token comment">//localhost:9200/store-items/_doc</span>
<span class="token punctuation">{</span>
    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Pets&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Dog Toy&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;price&quot;</span><span class="token operator">:</span> <span class="token number">10</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，让我们在不应用任何过滤器的情况下查询它：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code>GET http<span class="token operator">:</span><span class="token comment">//localhost:9200/store-items/_search</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在让我们看看响应：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    ...
    <span class="token property">&quot;hits&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;total&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
            <span class="token property">&quot;relation&quot;</span><span class="token operator">:</span> <span class="token string">&quot;eq&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token property">&quot;max_score&quot;</span><span class="token operator">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span>
        <span class="token property">&quot;hits&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token punctuation">{</span>
                <span class="token property">&quot;_index&quot;</span><span class="token operator">:</span> <span class="token string">&quot;store-items&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;_type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;_doc&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;_id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;J49VVI8B6ADL84Kpbm8A&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;_score&quot;</span><span class="token operator">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span>
                <span class="token property">&quot;_source&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                    <span class="token property">&quot;_class&quot;</span><span class="token operator">:</span> <span class="token string">&quot;com.baeldung.model.StoreItem&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Multimedia&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;PC Monitor&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;price&quot;</span><span class="token operator">:</span> <span class="token number">1000</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token property">&quot;_index&quot;</span><span class="token operator">:</span> <span class="token string">&quot;store-items&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;_type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;_doc&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;_id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;KI9VVI8B6ADL84Kpbm8A&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;_score&quot;</span><span class="token operator">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span>
                <span class="token property">&quot;_source&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Pets&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Dog Toy&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;price&quot;</span><span class="token operator">:</span> <span class="token number">10</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
    ...
        <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在响应中有一些与商店商品相关的文档。每个文档对应一种特定的商店商品类型。</p><p>接下来，假设我们想知道每种类型有多少商品。<strong>让我们将聚合部分添加到请求体中，然后再次搜索索引</strong>：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code>GET http<span class="token operator">:</span><span class="token comment">//localhost:9200/store-items/_search</span>
<span class="token punctuation">{</span>
    <span class="token property">&quot;aggs&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;type_aggregation&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;terms&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token property">&quot;field&quot;</span><span class="token operator">:</span> <span class="token string">&quot;type&quot;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们添加了名为_type_aggregation_的聚合，它使用了_terms_聚合。</p><p><strong>正如我们在响应中看到的，有一个新的_aggregations_部分，我们可以找到每种类型的文档数量信息</strong>：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    ...
    <span class="token property">&quot;aggregations&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;type_aggregation&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;doc_count_error_upper_bound&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token property">&quot;sum_other_doc_count&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token property">&quot;buckets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token punctuation">{</span>
                    <span class="token property">&quot;key&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Multimedia&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;doc_count&quot;</span><span class="token operator">:</span> <span class="token number">2</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token punctuation">{</span>
                    <span class="token property">&quot;key&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Pets&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;doc_count&quot;</span><span class="token operator">:</span> <span class="token number">2</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token punctuation">{</span>
                    <span class="token property">&quot;key&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Home tech&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;doc_count&quot;</span><span class="token operator">:</span> <span class="token number">1</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-spring-data-elasticsearch-搜索与聚合" tabindex="-1"><a class="header-anchor" href="#_3-spring-data-elasticsearch-搜索与聚合"><span>3. Spring Data Elasticsearch 搜索与聚合</span></a></h2><p>让我们使用Spring Data Elasticsearch实现上一节的功能。让我们从添加依赖开始：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\`
    \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>\`org.springframework.data\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\`
    \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`spring-data-elasticsearch\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`
\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下一步，<strong>我们提供一个Elasticsearch配置类</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableElasticsearchRepositories</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">&quot;com.baeldung.spring.data.es.aggregation.repository&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">&quot;com.baeldung.spring.data.es.aggregation&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ElasticSearchConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">RestClient</span> <span class="token function">elasticsearchRestClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">RestClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token class-name">HttpHost</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;localhost:9200&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">setHttpClientConfigCallback</span><span class="token punctuation">(</span>httpClientBuilder <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
              httpClientBuilder<span class="token punctuation">.</span><span class="token function">addInterceptorLast</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">HttpResponseInterceptor</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>response<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token operator">-&gt;</span>
                  response<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">&quot;X-Elastic-Product&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Elasticsearch&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token keyword">return</span> httpClientBuilder<span class="token punctuation">;</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ElasticsearchClient</span> <span class="token function">elasticsearchClient</span><span class="token punctuation">(</span><span class="token class-name">RestClient</span> restClient<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">ElasticsearchClients</span><span class="token punctuation">.</span><span class="token function">createImperative</span><span class="token punctuation">(</span>restClient<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;elasticsearchOperations&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;elasticsearchTemplate&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ElasticsearchOperations</span> <span class="token function">elasticsearchOperations</span><span class="token punctuation">(</span>
        <span class="token class-name">ElasticsearchClient</span> elasticsearchClient<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">ElasticsearchTemplate</span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ElasticsearchTemplate</span><span class="token punctuation">(</span>elasticsearchClient<span class="token punctuation">)</span><span class="token punctuation">;</span>
        template<span class="token punctuation">.</span><span class="token function">setRefreshPolicy</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> template<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们指定了一个低级别的Elasticsearch REST客户端及其包装的bean实现_ElasticsearchOperations_接口。现在，让我们创建一个_StoreItem_实体：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Document</span><span class="token punctuation">(</span>indexName <span class="token operator">=</span> <span class="token string">&quot;store-items&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StoreItem</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Id</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">Keyword</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> type<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">Keyword</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">Keyword</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> price<span class="token punctuation">;</span>

    <span class="token comment">//getters and setters</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用了与上一节相同的_store-items_索引。<strong>由于我们不能使用Spring Data存储库的内置能力来检索聚合，我们将需要创建一个存储库扩展</strong>。<strong>让我们创建一个扩展接口</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StoreItemRepositoryExtension</span> <span class="token punctuation">{</span>
    <span class="token class-name">SearchPage</span>\`\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StoreItem</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\`\` <span class="token function">findAllWithAggregations</span><span class="token punctuation">(</span><span class="token class-name">Pageable</span> pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们有findAllWithAggregations()方法，它使用_Pageable_接口的实现，并返回一个带有我们项目的_SearchPage_。接下来，让我们创建这个接口的实现：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StoreItemRepositoryExtensionImpl</span> <span class="token keyword">implements</span> <span class="token class-name">StoreItemRepositoryExtension</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">ElasticsearchOperations</span> elasticsearchOperations<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">SearchPage</span>\`\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StoreItem</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\`\` <span class="token function">findAllWithAggregations</span><span class="token punctuation">(</span><span class="token class-name">Pageable</span> pageable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Query</span> query <span class="token operator">=</span> <span class="token class-name">NativeQuery</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">withAggregation</span><span class="token punctuation">(</span><span class="token string">&quot;type_aggregation&quot;</span><span class="token punctuation">,</span>
            <span class="token class-name">Aggregation</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>b <span class="token operator">-&gt;</span> b<span class="token punctuation">.</span><span class="token function">terms</span><span class="token punctuation">(</span>t <span class="token operator">-&gt;</span> t<span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">&quot;type&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SearchHits</span>\`\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StoreItem</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\`\` response <span class="token operator">=</span> elasticsearchOperations<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token class-name">StoreItem</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">SearchHitSupport</span><span class="token punctuation">.</span><span class="token function">searchPageFor</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>我们构建了原生查询，包含了聚合部分。</strong> 按照上一节的模式，我们使用_type_aggregation_作为聚合名称。然后，我们使用_terms_聚合类型来计算响应中指定字段的文档数量。</p><p>最后，让我们创建一个Spring Data存储库，我们将扩展_ElasticsearchRepository_来支持通用的Spring Data功能，并扩展_StoreItemRepositoryExtension_来包含我们的自定义方法实现：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Repository</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StoreItemRepository</span> <span class="token keyword">extends</span> <span class="token class-name">ElasticsearchRepository</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StoreItem</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>\`<span class="token punctuation">,</span>
  <span class="token class-name">StoreItemRepositoryExtension</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后，让我们为我们的聚合功能创建一个测试：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token class-name">ElasticSearchConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ElasticSearchAggregationManualTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">List</span>\`\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StoreItem</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\`\` <span class="token constant">EXPECTED_ITEMS</span> <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>
      <span class="token keyword">new</span> <span class="token class-name">StoreItem</span><span class="token punctuation">(</span><span class="token string">&quot;Multimedia&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;PC Monitor&quot;</span><span class="token punctuation">,</span> <span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token keyword">new</span> <span class="token class-name">StoreItem</span><span class="token punctuation">(</span><span class="token string">&quot;Multimedia&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Headphones&quot;</span><span class="token punctuation">,</span> <span class="token number">200L</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token keyword">new</span> <span class="token class-name">StoreItem</span><span class="token punctuation">(</span><span class="token string">&quot;Home tech&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Barbecue Grill&quot;</span><span class="token punctuation">,</span> <span class="token number">2000L</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token keyword">new</span> <span class="token class-name">StoreItem</span><span class="token punctuation">(</span><span class="token string">&quot;Pets&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Dog Toy&quot;</span><span class="token punctuation">,</span> <span class="token number">10L</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token keyword">new</span> <span class="token class-name">StoreItem</span><span class="token punctuation">(</span><span class="token string">&quot;Pets&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Cat shampoo&quot;</span><span class="token punctuation">,</span> <span class="token number">5L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token annotation punctuation">@BeforeEach</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        repository<span class="token punctuation">.</span><span class="token function">saveAll</span><span class="token punctuation">(</span><span class="token constant">EXPECTED_ITEMS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenFullTitle_whenRunMatchQuery_thenDocIsFound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">SearchHits</span>\`\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StoreItem</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\`\` searchHits <span class="token operator">=</span> repository<span class="token punctuation">.</span><span class="token function">findAllWithAggregations</span><span class="token punctuation">(</span><span class="token class-name">Pageable</span><span class="token punctuation">.</span><span class="token function">ofSize</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">getSearchHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span>\`\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StoreItem</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\`\` data <span class="token operator">=</span> searchHits<span class="token punctuation">.</span><span class="token function">getSearchHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">SearchHit</span><span class="token operator">::</span><span class="token function">getContent</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertThat</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">containsAll</span><span class="token punctuation">(</span><span class="token constant">EXPECTED_ITEMS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Map</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span>\` aggregatedData <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ElasticsearchAggregations</span><span class="token punctuation">)</span> searchHits
      <span class="token punctuation">.</span><span class="token function">getAggregations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;type_aggregation&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">aggregation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">getAggregate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">sterms</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">buckets</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>bucket <span class="token operator">-&gt;</span> bucket<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">stringValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">MultiBucketBase</span><span class="token operator">::</span><span class="token function">docCount</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertThat</span><span class="token punctuation">(</span>aggregatedData<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">containsExactlyInAnyOrderEntriesOf</span><span class="token punctuation">(</span>
      <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;Multimedia&quot;</span><span class="token punctuation">,</span> <span class="token number">2L</span><span class="token punctuation">,</span> <span class="token string">&quot;Home tech&quot;</span><span class="token punctuation">,</span> <span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;Pets&quot;</span><span class="token punctuation">,</span> <span class="token number">2L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如我们在响应中看到的，我们检索了搜索命中，我们可以从中提取确切的查询结果。<strong>此外，我们检索了聚合数据，其中包含我们搜索结果的所有预期聚合。</strong></p><h2 id="_4-结论" tabindex="-1"><a class="header-anchor" href="#_4-结论"><span>4. 结论</span></a></h2><p>在本文中，我们探讨了如何将Elasticsearch聚合功能集成到Spring Data存储库中。我们使用了_terms_聚合来实现这一点。然而，还有许多其他type of aggregations available that we can employ to cover a wide range of aggregation functionality.</p><h2 id="as-usual-the-full-source-code-can-be-found-over-on-github" tabindex="-1"><a class="header-anchor" href="#as-usual-the-full-source-code-can-be-found-over-on-github"><span>As usual, the full source code can be found over on GitHub.</span></a></h2><h1 id="结论" tabindex="-1"><a class="header-anchor" href="#结论"><span>结论</span></a></h1><p>在本文中，我们探讨了如何将Elasticsearch聚合功能集成到Spring Data存储库中。我们使用了_terms_聚合来实现这一点。然而，还有许多其他类型的聚合可供我们使用，以满足广泛的聚合功能需求。</p><h2 id="像往常一样-完整的源代码可以在github上找到。" tabindex="-1"><a class="header-anchor" href="#像往常一样-完整的源代码可以在github上找到。"><span>像往常一样，完整的源代码可以在GitHub上找到。</span></a></h2><p>OK</p>`,40),o=[e];function c(l,i){return a(),s("div",null,o)}const k=n(p,[["render",c],["__file","Add an Aggregation to an Elasticsearch Query.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/Add%20an%20Aggregation%20to%20an%20Elasticsearch%20Query.html","title":"Elasticsearch查询中添加聚合","lang":"zh-CN","frontmatter":{"date":"2024-06-15T00:00:00.000Z","category":["Elasticsearch","Spring Data"],"tag":["Elasticsearch","Aggregation","Query","Spring Data","Tutorial"],"description":"Elasticsearch查询中添加聚合 Elasticsearch是一个适用于需要灵活过滤的场景的搜索和分析引擎。有时，我们需要检索请求的数据及其聚合信息。 在本教程中，我们将探讨如何做到这一点。 2. Elasticsearch搜索与聚合 让我们从探索Elasticsearch的聚合功能开始。 一旦我们在本地主机上运行了Elasticsearch实...","head":[["meta",{"property":"og:url","content":"https://kahen.xyz/posts/baeldung/Add%20an%20Aggregation%20to%20an%20Elasticsearch%20Query.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文站"}],["meta",{"property":"og:title","content":"Elasticsearch查询中添加聚合"}],["meta",{"property":"og:description","content":"Elasticsearch查询中添加聚合 Elasticsearch是一个适用于需要灵活过滤的场景的搜索和分析引擎。有时，我们需要检索请求的数据及其聚合信息。 在本教程中，我们将探讨如何做到这一点。 2. Elasticsearch搜索与聚合 让我们从探索Elasticsearch的聚合功能开始。 一旦我们在本地主机上运行了Elasticsearch实..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-15T02:28:58.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Elasticsearch"}],["meta",{"property":"article:tag","content":"Aggregation"}],["meta",{"property":"article:tag","content":"Query"}],["meta",{"property":"article:tag","content":"Spring Data"}],["meta",{"property":"article:tag","content":"Tutorial"}],["meta",{"property":"article:published_time","content":"2024-06-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-15T02:28:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Elasticsearch查询中添加聚合\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-15T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-15T02:28:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://kahen.xyz\\"}]}"]]},"headers":[{"level":2,"title":"2. Elasticsearch搜索与聚合","slug":"_2-elasticsearch搜索与聚合","link":"#_2-elasticsearch搜索与聚合","children":[]},{"level":2,"title":"3. Spring Data Elasticsearch 搜索与聚合","slug":"_3-spring-data-elasticsearch-搜索与聚合","link":"#_3-spring-data-elasticsearch-搜索与聚合","children":[]},{"level":2,"title":"4. 结论","slug":"_4-结论","link":"#_4-结论","children":[]},{"level":2,"title":"As usual, the full source code can be found over on GitHub.","slug":"as-usual-the-full-source-code-can-be-found-over-on-github","link":"#as-usual-the-full-source-code-can-be-found-over-on-github","children":[]},{"level":2,"title":"像往常一样，完整的源代码可以在GitHub上找到。","slug":"像往常一样-完整的源代码可以在github上找到。","link":"#像往常一样-完整的源代码可以在github上找到。","children":[]}],"git":{"createdTime":1718418538000,"updatedTime":1718418538000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":4.18,"words":1254},"filePathRelative":"posts/baeldung/Add an Aggregation to an Elasticsearch Query.md","localizedDate":"2024年6月15日","excerpt":"\\n<p>Elasticsearch是一个适用于需要灵活过滤的场景的搜索和分析引擎。<strong>有时，我们需要检索请求的数据及其聚合信息。</strong> 在本教程中，我们将探讨如何做到这一点。</p>\\n<h2>2. Elasticsearch搜索与聚合</h2>\\n<p>让我们从探索Elasticsearch的聚合功能开始。</p>\\n<p>一旦我们在本地主机上运行了Elasticsearch实例，<strong>让我们创建一个名为_store-items_的索引，并在其中添加一些文档</strong>：</p>\\n<div class=\\"language-json\\" data-ext=\\"json\\" data-title=\\"json\\"><pre class=\\"language-json\\"><code>POST http<span class=\\"token operator\\">:</span><span class=\\"token comment\\">//localhost:9200/store-items/_doc</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token property\\">\\"type\\"</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"Multimedia\\"</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token property\\">\\"name\\"</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"PC Monitor\\"</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token property\\">\\"price\\"</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">1000</span>\\n<span class=\\"token punctuation\\">}</span>\\n...\\nPOST http<span class=\\"token operator\\">:</span><span class=\\"token comment\\">//localhost:9200/store-items/_doc</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token property\\">\\"type\\"</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"Pets\\"</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token property\\">\\"name\\"</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"Dog Toy\\"</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token property\\">\\"price\\"</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">10</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{k as comp,d as data};
