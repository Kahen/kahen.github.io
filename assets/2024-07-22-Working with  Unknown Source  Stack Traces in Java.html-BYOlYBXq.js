import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-D9qUUkNr.js";const e={},p=t('<hr><h1 id="java中处理未知来源堆栈跟踪" tabindex="-1"><a class="header-anchor" href="#java中处理未知来源堆栈跟踪"><span>Java中处理未知来源堆栈跟踪</span></a></h1><p>在这篇短文中，我们将探讨为什么我们的Java异常堆栈跟踪中可能会出现未知来源，以及如何修复它。</p><h2 id="_2-类调试信息" tabindex="-1"><a class="header-anchor" href="#_2-类调试信息"><span>2. 类调试信息</span></a></h2><p>Java类文件包含可选的调试信息以便于调试。我们可以在编译时选择是否以及添加哪些调试信息到类文件中。这将决定在运行时可用的调试信息。</p><p>让我们查看Java编译器的帮助文档，看看可用的各种选项：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>javac -help\n\n用法：javac `&lt;选项&gt;` `&lt;源文件&gt;`\n其中可能的选项包括：\n  -g                         生成所有调试信息\n  -g:none                    不生成调试信息\n  -g:{lines,vars,source}     只生成部分调试信息\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java编译器的默认行为是向类文件中添加行和源信息，这等同于<code>-g:lines,source</code>。</p><h3 id="_2-1-使用调试选项编译" tabindex="-1"><a class="header-anchor" href="#_2-1-使用调试选项编译"><span>2.1. 使用调试选项编译</span></a></h3><p>让我们看看当我们使用上述选项编译Java类时会发生什么。我们有一个<code>Main</code>类，它故意生成一个<code>StringIndexOutOfBoundsException</code>。</p><p>根据使用的编译机制，我们需要相应地指定编译选项。这里，我们将使用Maven及其编译器插件来自定义编译选项：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>``org.apache.maven.plugins``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>``maven-compiler-plugin``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>``3.12.1``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>``\n        ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>compilerArgs</span><span class="token punctuation">&gt;</span></span>``\n            ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span><span class="token punctuation">&gt;</span></span>``-g:none``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>arg</span><span class="token punctuation">&gt;</span></span>``\n        ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>compilerArgs</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>``\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将<code>-g</code>设置为<code>none</code>，这意味着我们的编译类将不生成调试信息。运行我们的有缺陷的<code>Main</code>类生成的堆栈跟踪显示未知来源，而不是异常发生的位置的行号。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Exception</span> in thread <span class="token string">&quot;main&quot;</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>StringIndexOutOfBoundsException</span><span class="token operator">:</span> begin <span class="token number">0</span><span class="token punctuation">,</span> end <span class="token number">10</span><span class="token punctuation">,</span> length <span class="token number">5</span>\n  at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">.</span><span class="token function">checkBoundsBeginEnd</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">3751</span><span class="token punctuation">)</span>\n  at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1907</span><span class="token punctuation">)</span>\n  at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>baeldung<span class="token punctuation">.</span>unknownsourcestacktrace<span class="token punctuation">.</span></span>Main</span><span class="token punctuation">.</span><span class="token function">getShortenedName</span><span class="token punctuation">(</span><span class="token class-name">Unknown</span> <span class="token class-name">Source</span><span class="token punctuation">)</span>\n  at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>baeldung<span class="token punctuation">.</span>unknownsourcestacktrace<span class="token punctuation">.</span></span>Main</span><span class="token punctuation">.</span><span class="token function">getGreetingMessage</span><span class="token punctuation">(</span><span class="token class-name">Unknown</span> <span class="token class-name">Source</span><span class="token punctuation">)</span>\n  at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>baeldung<span class="token punctuation">.</span>unknownsourcestacktrace<span class="token punctuation">.</span></span>Main</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">Unknown</span> <span class="token class-name">Source</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们看看生成的类文件包含什么。我们将使用Java类文件反汇编器<code>javap</code>来做这件事：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>javap <span class="token parameter variable">-l</span> <span class="token parameter variable">-p</span> Main.class\n\npublic class com.baeldung.unknownsourcestacktrace.Main <span class="token punctuation">{</span>\n    private static final org.slf4j.Logger logger<span class="token punctuation">;</span>\n    private static final int SHORT_NAME_LIMIT<span class="token punctuation">;</span>\n    public com.baeldung.unknownsourcestacktrace.Main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    public static void main<span class="token punctuation">(</span>java.lang.String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    private static java.lang.String getGreetingMessage<span class="token punctuation">(</span>java.lang.String<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    private static java.lang.String getShortenedName<span class="token punctuation">(</span>java.lang.String<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    static <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们可能很难知道我们应该期待哪些调试信息，所以让我们改变编译选项，看看会发生什么。</p><h3 id="_2-3-修复" tabindex="-1"><a class="header-anchor" href="#_2-3-修复"><span>2.3. 修复</span></a></h3><p>现在让我们将编译选项更改为<code>-g:lines,vars,source</code>，这将把<code>LineNumberTable</code>、<code>LocalVariableTable</code>和<code>Source</code>信息放入我们的类文件中。这等同于只使用<code>-g</code>，它将所有调试信息放入：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>``org.apache.maven.plugins``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>``maven-compiler-plugin``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>``3.12.1``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>``\n        ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>compilerArgs</span><span class="token punctuation">&gt;</span></span>``\n            ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span><span class="token punctuation">&gt;</span></span>``-g``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>arg</span><span class="token punctuation">&gt;</span></span>``\n        ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>compilerArgs</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>``\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次运行我们的<code>Main</code>类，现在产生的堆栈跟踪显示了我们的行号信息：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Exception</span> in thread <span class="token string">&quot;main&quot;</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>StringIndexOutOfBoundsException</span><span class="token operator">:</span> begin <span class="token number">0</span><span class="token punctuation">,</span> end <span class="token number">10</span><span class="token punctuation">,</span> length <span class="token number">5</span>\n  at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">.</span><span class="token function">checkBoundsBeginEnd</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">3751</span><span class="token punctuation">)</span>\n  at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1907</span><span class="token punctuation">)</span>\n  at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>baeldung<span class="token punctuation">.</span>unknownsourcestacktrace<span class="token punctuation">.</span></span>Main</span><span class="token punctuation">.</span><span class="token function">getShortenedName</span><span class="token punctuation">(</span><span class="token class-name">Main</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">23</span><span class="token punctuation">)</span>\n  at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>baeldung<span class="token punctuation">.</span>unknownsourcestacktrace<span class="token punctuation">.</span></span>Main</span><span class="token punctuation">.</span><span class="token function">getGreetingMessage</span><span class="token punctuation">(</span><span class="token class-name">Main</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">19</span><span class="token punctuation">)</span>\n  at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>baeldung<span class="token punctuation">.</span>unknownsourcestacktrace<span class="token punctuation">.</span></span>Main</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">Main</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">15</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>太好了，我们在堆栈跟踪中看到了行号信息。让我们看看我们的类文件有什么变化：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>javap <span class="token operator">-</span>l <span class="token operator">-</span>p <span class="token class-name">Main</span>\n\n<span class="token class-name">Compiled</span> from <span class="token string">&quot;Main.java&quot;</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>baeldung<span class="token punctuation">.</span>unknownsourcestacktrace<span class="token punctuation">.</span></span>Main</span> <span class="token punctuation">{</span>\n  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span>Logger</span> logger<span class="token punctuation">;</span>\n\n  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">SHORT_NAME_LIMIT</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>baeldung<span class="token punctuation">.</span>unknownsourcestacktrace<span class="token punctuation">.</span></span>Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">LineNumberTable</span><span class="token operator">:</span>\n      line <span class="token number">7</span><span class="token operator">:</span> <span class="token number">0</span>\n    <span class="token class-name">LocalVariableTable</span><span class="token operator">:</span>\n      <span class="token class-name">Start</span>  <span class="token class-name">Length</span>  <span class="token class-name">Slot</span>  <span class="token class-name">Name</span>   <span class="token class-name">Signature</span>\n          <span class="token number">0</span>       <span class="token number">5</span>     <span class="token number">0</span>  <span class="token keyword">this</span>   <span class="token class-name">Lcom</span><span class="token operator">/</span>baeldung<span class="token operator">/</span>unknownsourcestacktrace<span class="token operator">/</span><span class="token class-name">Main</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">LineNumberTable</span><span class="token operator">:</span>\n      line <span class="token number">12</span><span class="token operator">:</span> <span class="token number">0</span>\n      line <span class="token number">13</span><span class="token operator">:</span> <span class="token number">8</span>\n      line <span class="token number">15</span><span class="token operator">:</span> <span class="token number">14</span>\n      line <span class="token number">16</span><span class="token operator">:</span> <span class="token number">29</span>\n    <span class="token class-name">LocalVariableTable</span><span class="token operator">:</span>\n      <span class="token class-name">Start</span>  <span class="token class-name">Length</span>  <span class="token class-name">Slot</span>  <span class="token class-name">Name</span>   <span class="token class-name">Signature</span>\n          <span class="token number">0</span>      <span class="token number">30</span>     <span class="token number">0</span>  args   <span class="token punctuation">[</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span>\n          <span class="token number">8</span>      <span class="token number">22</span>     <span class="token number">1</span>  user   <span class="token class-name">Lcom</span><span class="token operator">/</span>baeldung<span class="token operator">/</span>unknownsourcestacktrace<span class="token operator">/</span>dto<span class="token operator">/</span><span class="token class-name">User</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> <span class="token function">getGreetingMessage</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">LineNumberTable</span><span class="token operator">:</span>\n      line <span class="token number">19</span><span class="token operator">:</span> <span class="token number">0</span>\n    <span class="token class-name">LocalVariableTable</span><span class="token operator">:</span>\n      <span class="token class-name">Start</span>  <span class="token class-name">Length</span>  <span class="token class-name">Slot</span>  <span class="token class-name">Name</span>   <span class="token class-name">Signature</span>\n          <span class="token number">0</span>      <span class="token number">28</span>     <span class="token number">0</span>  name   <span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> <span class="token function">getShortenedName</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">LineNumberTable</span><span class="token operator">:</span>\n      line <span class="token number">23</span><span class="token operator">:</span> <span class="token number">0</span>\n    <span class="token class-name">LocalVariableTable</span><span class="token operator">:</span>\n      <span class="token class-name">Start</span>  <span class="token class-name">Length</span>  <span class="token class-name">Slot</span>  <span class="token class-name">Name</span>   <span class="token class-name">Signature</span>\n          <span class="token number">0</span>       <span class="token number">8</span>     <span class="token number">0</span>  name   <span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">static</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token class-name">LineNumberTable</span><span class="token operator">:</span>\n      line <span class="token number">8</span><span class="token operator">:</span> <span class="token number">0</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们的类文件现在包含三个关键信息：</p><ol><li><strong>Source</strong>，顶部标题指示<code>.class</code>文件生成自哪个<code>.java</code>文件。在堆栈跟踪的上下文中，它提供了异常发生的类名。</li><li><strong>LineNumberTable</strong>将JVM实际运行的代码中的行号映射到我们源代码文件中的行号。在堆栈跟踪的上下文中，它提供了异常发生的行号。我们还需要这个来使用调试器中的断点。</li><li><strong>LocalVariableTable</strong>包含获取局部变量值的详细信息。调试器可能使用它来读取局部变量的值。在堆栈跟踪的上下文中，这并不重要。</li></ol><h2 id="_3-结论" tabindex="-1"><a class="header-anchor" href="#_3-结论"><span>3. 结论</span></a></h2><p>我们现在熟悉了Java编译器生成的调试信息。如何操作它们，<code>-g</code>编译器选项。我们看到了如何使用Maven编译器插件来做到这一点。</p><p>所以，如果我们在堆栈跟踪中发现未知来源，我们可以调查我们的类文件以检查是否可用调试信息。然后，我们可以根据我们的构建工具选择正确的编译选项来解决这个问题。</p><p>如往常一样，完整的代码和Maven配置可以在GitHub上找到。</p>',30),c=[p];function o(l,i){return s(),a("div",null,c)}const k=n(e,[["render",o],["__file","2024-07-22-Working with  Unknown Source  Stack Traces in Java.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-22/2024-07-22-Working%20with%20%20Unknown%20Source%20%20Stack%20Traces%20in%20Java.html","title":"Java中处理未知来源堆栈跟踪","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","Debugging"],"tag":["Java","Stack Trace","Debugging"],"head":[["meta",{"name":"keywords","content":"Java, Debugging, Stack Trace"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-22/2024-07-22-Working%20with%20%20Unknown%20Source%20%20Stack%20Traces%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Java中处理未知来源堆栈跟踪"}],["meta",{"property":"og:description","content":"Java中处理未知来源堆栈跟踪 在这篇短文中，我们将探讨为什么我们的Java异常堆栈跟踪中可能会出现未知来源，以及如何修复它。 2. 类调试信息 Java类文件包含可选的调试信息以便于调试。我们可以在编译时选择是否以及添加哪些调试信息到类文件中。这将决定在运行时可用的调试信息。 让我们查看Java编译器的帮助文档，看看可用的各种选项： Java编译器的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-22T23:16:02.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Stack Trace"}],["meta",{"property":"article:tag","content":"Debugging"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-22T23:16:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java中处理未知来源堆栈跟踪\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-22T23:16:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Java中处理未知来源堆栈跟踪 在这篇短文中，我们将探讨为什么我们的Java异常堆栈跟踪中可能会出现未知来源，以及如何修复它。 2. 类调试信息 Java类文件包含可选的调试信息以便于调试。我们可以在编译时选择是否以及添加哪些调试信息到类文件中。这将决定在运行时可用的调试信息。 让我们查看Java编译器的帮助文档，看看可用的各种选项： Java编译器的..."},"headers":[{"level":2,"title":"2. 类调试信息","slug":"_2-类调试信息","link":"#_2-类调试信息","children":[{"level":3,"title":"2.1. 使用调试选项编译","slug":"_2-1-使用调试选项编译","link":"#_2-1-使用调试选项编译","children":[]},{"level":3,"title":"2.3. 修复","slug":"_2-3-修复","link":"#_2-3-修复","children":[]}]},{"level":2,"title":"3. 结论","slug":"_3-结论","link":"#_3-结论","children":[]}],"git":{"createdTime":1721690162000,"updatedTime":1721690162000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":3.9,"words":1169},"filePathRelative":"posts/baeldung/2024-07-22/2024-07-22-Working with  Unknown Source  Stack Traces in Java.md","localizedDate":"2022年4月1日","excerpt":"<hr>\\n<h1>Java中处理未知来源堆栈跟踪</h1>\\n<p>在这篇短文中，我们将探讨为什么我们的Java异常堆栈跟踪中可能会出现未知来源，以及如何修复它。</p>\\n<h2>2. 类调试信息</h2>\\n<p>Java类文件包含可选的调试信息以便于调试。我们可以在编译时选择是否以及添加哪些调试信息到类文件中。这将决定在运行时可用的调试信息。</p>\\n<p>让我们查看Java编译器的帮助文档，看看可用的各种选项：</p>\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code>javac -help\\n\\n用法：javac `&lt;选项&gt;` `&lt;源文件&gt;`\\n其中可能的选项包括：\\n  -g                         生成所有调试信息\\n  -g:none                    不生成调试信息\\n  -g:{lines,vars,source}     只生成部分调试信息\\n</code></pre></div>","autoDesc":true}');export{k as comp,d as data};
