import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as e}from"./app-CseMoHkL.js";const t={},p=e(`<hr><h1 id="使用spring注解实例化同一类的多个bean" tabindex="-1"><a class="header-anchor" href="#使用spring注解实例化同一类的多个bean"><span>使用Spring注解实例化同一类的多个Bean</span></a></h1><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p>Spring IoC容器创建和管理Spring Bean，这些Bean是我们应用程序的核心。创建一个Bean的实例与从普通的Java类创建对象是相同的。然而，生成同一类的多个Bean可能会有些挑战。</p><p>在本教程中，我们将学习如何使用Spring框架中的注解来创建同一类的多个Bean。</p><h2 id="_2-使用java配置" tabindex="-1"><a class="header-anchor" href="#_2-使用java配置"><span>2. 使用Java配置</span></a></h2><p><strong>这是使用注解创建同一类多个Bean的最简单和最容易的方法。</strong> 在这种方法中，我们将使用基于Java的配置类来配置同一类的多个Bean。</p><p>让我们考虑一个简单的例子。我们有一个_Person_类，它有两个类成员，<em>firstName_和_lastName</em>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> firstName<span class="token punctuation">,</span> <span class="token class-name">String</span> secondName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> firstName<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> secondName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Person [firstName=&quot;</span> <span class="token operator">+</span> firstName <span class="token operator">+</span> <span class="token string">&quot;, secondName=&quot;</span> <span class="token operator">+</span> lastName <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们将构建一个名为_PersonConfig_的配置类，并在其内部定义_Person_类的多个Bean：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Person</span> <span class="token function">personOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;Harold&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Finch&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Person</span> <span class="token function">personTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Reese&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在这里，</strong> <strong><em>@Bean</em> 注解实例化了两个Bean，其ID与方法名称相同，并将它们注册到_BeanFactory_（Spring容器）接口中。</strong> 接下来，我们可以初始化Spring容器，并从Spring容器中请求任何Bean。这种策略还使得实现依赖注入变得简单。我们可以直接将一个Bean，比如_personOne_，通过自动装配注入到同一类型的另一个Bean中，比如_personTwo_。</p><p><strong>这种方法的局限性在于我们需要使用_new_关键字手动实例化Bean，这是典型的基于Java的配置风格。</strong> <strong>因此，如果同一类的Bean数量增加，我们需要先注册它们，然后在配置类中创建Bean。</strong> 这使得它更是一种Java特定的方法，而不是Spring特定的方法。</p><h2 id="_3-使用-component-注解" tabindex="-1"><a class="header-anchor" href="#_3-使用-component-注解"><span>3. 使用_@Component_注解</span></a></h2><p>在这种方法中，我们将使用_@Component_注解来创建多个从_Person_类继承属性的Bean。首先，我们将创建多个子类，即_PersonOne_和_PersonTwo_，它们扩展了_Person_超类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonOne</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">PersonOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">&quot;Harold&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Finch&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonTwo</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">PersonTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Reese&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，在_PersonConfig_文件中，我们将使用_@ComponentScan_注解来启用整个包的组件扫描。<strong>这使得Spring容器能够自动创建任何带有_@Component_注解的类的Bean：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">&quot;com.baeldung.multibeaninstantiation.solution2&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonConfig</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们可以直接从Spring容器中使用_PersonOne_或_PersonTwo_ Bean。在其他地方，我们可以使用_Person_类Bean。<strong>这种方法的问题是它不创建同一类的多个实例。相反，它创建了从超类继承属性的类的Bean。</strong></p><p>因此，我们只能在继承类没有定义任何额外属性的情况下使用这种解决方案。<strong>此外，</strong> <strong>使用继承增加了代码的整体复杂性。</strong></p><h2 id="_4-使用-beanfactorypostprocessor" tabindex="-1"><a class="header-anchor" href="#_4-使用-beanfactorypostprocessor"><span>4. 使用_BeanFactoryPostProcessor_</span></a></h2><p><strong>第三种也是最后一种方法利用自定义实现的_BeanFactoryPostProcessor_接口来创建同一类的多个Bean实例。</strong></p><p>这可以通过以下步骤实现：</p><ul><li>创建一个自定义Bean类，并使用_FactoryBean_接口进行配置</li><li>使用_BeanFactoryPostProcessor_接口实例化同一类型的多个Bean</li></ul><h3 id="_4-1-自定义bean实现" tabindex="-1"><a class="header-anchor" href="#_4-1-自定义bean实现"><span>4.1. 自定义Bean实现</span></a></h3><p>为了更好地理解这种方法，我们将进一步扩展同一个例子。假设有一个_Human_类，它依赖于多个_Person_类的实例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Human</span> <span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Person</span> personOne<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Person</span> personTwo<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>personOne<span class="token punctuation">,</span> <span class="token string">&quot;Harold is alive!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>personTwo<span class="token punctuation">,</span> <span class="token string">&quot;John is alive!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* Setter注入 */</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPersonOne</span><span class="token punctuation">(</span><span class="token class-name">Person</span> personOne<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>personOne <span class="token operator">=</span> personOne<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>personOne<span class="token punctuation">.</span><span class="token function">setFirstName</span><span class="token punctuation">(</span><span class="token string">&quot;Harold&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>personOne<span class="token punctuation">.</span><span class="token function">setSecondName</span><span class="token punctuation">(</span><span class="token string">&quot;Finch&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPersonTwo</span><span class="token punctuation">(</span><span class="token class-name">Person</span> personTwo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>personTwo <span class="token operator">=</span> personTwo<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>personTwo<span class="token punctuation">.</span><span class="token function">setFirstName</span><span class="token punctuation">(</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>personTwo<span class="token punctuation">.</span><span class="token function">setSecondName</span><span class="token punctuation">(</span><span class="token string">&quot;Reese&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>_InitializingBean_接口调用_afterPropertiesSet()_方法来检查_BeanFactory_是否设置了所有Bean属性，并满足了其他依赖关系。</strong> 此外，我们使用setter注入初始化了两个_Person_类Bean，<em>personOne_和_personTwo</em>。接下来，我们将创建一个实现_FactoryBean_接口的_Person_类。</p><p><strong>_FactoryBean_充当IoC容器中创建其他Bean的工厂。</strong> 这个接口的目的是创建实现它的Bean的更多实例。在我们的例子中，它生成_Person_类的实例，并自动进行配置：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;personOne, personTwo&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">FactoryBean</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>\` <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> secondName<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 初始化代码（可选）</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Class</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span>\` <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// getter和setter的代码</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>这里需要注意的第二件重要事情是使用_@Qualifier_注解，其中包含类级别上多个_Person_类型的名称或Bean ID。</strong> 在这种情况下，使用类级别上的_@Qualifier_是有原因的，我们将在接下来看到。</p><h3 id="_4-2-自定义-beanfactory-实现" tabindex="-1"><a class="header-anchor" href="#_4-2-自定义-beanfactory-实现"><span>4.2. 自定义_BeanFactory_实现</span></a></h3><p>现在我们将使用自定义实现的_BeanFactoryPostProcessor_接口。</p><p><strong>任何实现_BeanFactoryPostProcessor_的类都会在任何Spring Bean创建之前执行。</strong> 这允许我们配置和操作Bean生命周期。</p><p><strong><em>BeanFactoryPostProcessor_扫描所有带有</em>@Qualifier_注解的类。</strong> <strong>此外，它从该注解中提取名称（Bean ID），并手动创建该类类型的实例，名称为指定的名称：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonFactoryPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">BeanFactoryPostProcessor</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Map</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>\`\` map <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeansWithAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Qualifier</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>\`\` entry <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">createInstances</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">createInstances</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">Object</span> bean<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Qualifier</span> qualifier <span class="token operator">=</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Qualifier</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> name <span class="token operator">:</span> <span class="token function">extractNames</span><span class="token punctuation">(</span>qualifier<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Object</span> newBean <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            beanFactory<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> newBean<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">extractNames</span><span class="token punctuation">(</span><span class="token class-name">Qualifier</span> qualifier<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> qualifier<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在这里，</strong> <strong>自定义_BeanFactoryPostProcessor_实现在Spring容器初始化后被调用一次。</strong></p><p>接下来，为了简单起见，我们将使用Java配置类来初始化自定义以及_BeanFactory_实现：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">PersonFactoryPostProcessor</span> <span class="token class-name">PersonFactoryPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PersonFactoryPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Person</span> <span class="token function">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Human</span> <span class="token function">human</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Human</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>这种方法的局限性在于其复杂性。此外，不鼓励使用，因为它不是在典型的Spring应用程序中配置Bean的自然方式。</strong> 尽管有局限性，这种方法更具有Spring特性，并实现了使用注解实例化类似类型的多个Bean的目的。</p><h2 id="_5-结论" tabindex="-1"><a class="header-anchor" href="#_5-结论"><span>5. 结论</span></a></h2><p>在本文中，我们通过三种不同的方法学习了如何使用Spring注解实例化同一类的多个Bean。前两种方法是简单的Java特定方式来实例化多个Spring Bean。第三种方法有点棘手且复杂，但它实现了使用注解创建Bean的目的。</p><p>一如既往，示例的源代码可在GitHub上获得。</p>`,44),o=[p];function c(i,l){return a(),s("div",null,o)}const k=n(t,[["render",c],["__file","2024-07-17-Instantiating Multiple Beans of the Same Class with Spring Annotations.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-17/2024-07-17-Instantiating%20Multiple%20Beans%20of%20the%20Same%20Class%20with%20Spring%20Annotations.html","title":"使用Spring注解实例化同一类的多个Bean","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Spring Framework","Java"],"tag":["Spring","Beans","Java Configuration"],"head":[["meta",{"name":"keywords","content":"Spring, Beans, Java Configuration"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-17/2024-07-17-Instantiating%20Multiple%20Beans%20of%20the%20Same%20Class%20with%20Spring%20Annotations.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"使用Spring注解实例化同一类的多个Bean"}],["meta",{"property":"og:description","content":"使用Spring注解实例化同一类的多个Bean 1. 概述 Spring IoC容器创建和管理Spring Bean，这些Bean是我们应用程序的核心。创建一个Bean的实例与从普通的Java类创建对象是相同的。然而，生成同一类的多个Bean可能会有些挑战。 在本教程中，我们将学习如何使用Spring框架中的注解来创建同一类的多个Bean。 2. 使用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-17T09:30:54.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:tag","content":"Beans"}],["meta",{"property":"article:tag","content":"Java Configuration"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-17T09:30:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用Spring注解实例化同一类的多个Bean\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-17T09:30:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"使用Spring注解实例化同一类的多个Bean 1. 概述 Spring IoC容器创建和管理Spring Bean，这些Bean是我们应用程序的核心。创建一个Bean的实例与从普通的Java类创建对象是相同的。然而，生成同一类的多个Bean可能会有些挑战。 在本教程中，我们将学习如何使用Spring框架中的注解来创建同一类的多个Bean。 2. 使用..."},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. 使用Java配置","slug":"_2-使用java配置","link":"#_2-使用java配置","children":[]},{"level":2,"title":"3. 使用_@Component_注解","slug":"_3-使用-component-注解","link":"#_3-使用-component-注解","children":[]},{"level":2,"title":"4. 使用_BeanFactoryPostProcessor_","slug":"_4-使用-beanfactorypostprocessor","link":"#_4-使用-beanfactorypostprocessor","children":[{"level":3,"title":"4.1. 自定义Bean实现","slug":"_4-1-自定义bean实现","link":"#_4-1-自定义bean实现","children":[]},{"level":3,"title":"4.2. 自定义_BeanFactory_实现","slug":"_4-2-自定义-beanfactory-实现","link":"#_4-2-自定义-beanfactory-实现","children":[]}]},{"level":2,"title":"5. 结论","slug":"_5-结论","link":"#_5-结论","children":[]}],"git":{"createdTime":1721208654000,"updatedTime":1721208654000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":5.48,"words":1643},"filePathRelative":"posts/baeldung/2024-07-17/2024-07-17-Instantiating Multiple Beans of the Same Class with Spring Annotations.md","localizedDate":"2022年4月1日","excerpt":"<hr>\\n<h1>使用Spring注解实例化同一类的多个Bean</h1>\\n<h2>1. 概述</h2>\\n<p>Spring IoC容器创建和管理Spring Bean，这些Bean是我们应用程序的核心。创建一个Bean的实例与从普通的Java类创建对象是相同的。然而，生成同一类的多个Bean可能会有些挑战。</p>\\n<p>在本教程中，我们将学习如何使用Spring框架中的注解来创建同一类的多个Bean。</p>\\n<h2>2. 使用Java配置</h2>\\n<p><strong>这是使用注解创建同一类多个Bean的最简单和最容易的方法。</strong> 在这种方法中，我们将使用基于Java的配置类来配置同一类的多个Bean。</p>","autoDesc":true}');export{k as comp,d as data};
