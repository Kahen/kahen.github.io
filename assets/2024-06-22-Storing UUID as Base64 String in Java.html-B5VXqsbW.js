import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-C7BF_WGE.js";const e={},p=t(`<h1 id="在java中将uuid存储为base64字符串" tabindex="-1"><a class="header-anchor" href="#在java中将uuid存储为base64字符串"><span>在Java中将UUID存储为Base64字符串</span></a></h1><p>使用Base64编码的字符串是存储通用唯一识别码（UUID）的广泛采用方法。与标准的UUID字符串表示相比，这提供了更紧凑的结果。在本文中，我们将探讨将UUID编码为Base64字符串的不同方法。</p><h2 id="_2-使用-byte-和-base64-encoder-进行编码" tabindex="-1"><a class="header-anchor" href="#_2-使用-byte-和-base64-encoder-进行编码"><span>2. 使用_byte[]_和_Base64.Encoder_进行编码</span></a></h2><p>我们将从使用_byte[]_和_Base64.Encoder_的最直接方法开始编码。</p><h3 id="_2-1-编码" tabindex="-1"><a class="header-anchor" href="#_2-1-编码"><span>2.1. 编码</span></a></h3><p>我们将从我们的UUID位创建一个字节数组。为此，我们将取UUID的最高有效位和最低有效位，并将它们分别放在数组的0-7和8-15位置：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">convertToByteArray</span><span class="token punctuation">(</span><span class="token class-name">UUID</span> uuid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">long</span> mostSignificantBits <span class="token operator">=</span> uuid<span class="token punctuation">.</span><span class="token function">getMostSignificantBits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fillByteArray</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> result<span class="token punctuation">,</span> mostSignificantBits<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">long</span> leastSignificantBits <span class="token operator">=</span> uuid<span class="token punctuation">.</span><span class="token function">getLeastSignificantBits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fillByteArray</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> result<span class="token punctuation">,</span> leastSignificantBits<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在填充方法中，我们将位移动到数组中，将它们转换为字节，并在每次迭代中左移8位：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">fillByteArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result<span class="token punctuation">,</span> <span class="token keyword">long</span> bits<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i \`<span class="token operator">&lt;</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> shift <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">;</span>
        result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">255L</span> <span class="token operator">&amp;</span> bits <span class="token operator">&gt;</span>\`<span class="token operator">&gt;</span> shift<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们将使用JDK中的_Base64.Encoder_将字节数组编码成字符串：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">UUID</span> originalUUID <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">fromString</span><span class="token punctuation">(</span><span class="token string">&quot;cc5f93f7-8cf1-4a51-83c6-e740313a0c6c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenEncodedString_whenDecodingUsingBase64Decoder_thenGiveExpectedUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> expectedEncodedString <span class="token operator">=</span> <span class="token string">&quot;UUrxjPeTX8xsDDoxQOfGgw==&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> uuidBytes <span class="token operator">=</span> <span class="token function">convertToByteArray</span><span class="token punctuation">(</span>originalUUID<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> encodedUUID <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>uuidBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span>expectedEncodedString<span class="token punctuation">,</span> encodedUUID<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如我们所见，得到的值正是我们所期望的。</p><h3 id="_2-2-解码" tabindex="-1"><a class="header-anchor" href="#_2-2-解码"><span>2.2. 解码</span></a></h3><p>要从Base64编码的字符串解码UUID，我们可以按以下方式执行相反的操作：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenEncodedString_whenDecodingUsingBase64Decoder_thenGiveExpectedUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> expectedEncodedString <span class="token operator">=</span> <span class="token string">&quot;UUrxjPeTX8xsDDoxQOfGgw==&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> decodedBytes <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>expectedEncodedString<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">UUID</span> uuid <span class="token operator">=</span> <span class="token function">convertToUUID</span><span class="token punctuation">(</span>decodedBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，我们使用_Base64.Decoder_从编码字符串中获取字节数组，并调用我们的转换方法，从这个数组创建UUID：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">UUID</span> <span class="token function">convertToUUID</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> src<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> mostSignificantBits <span class="token operator">=</span> <span class="token function">convertBytesToLong</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> leastSignificantBits <span class="token operator">=</span> <span class="token function">convertBytesToLong</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UUID</span><span class="token punctuation">(</span>mostSignificantBits<span class="token punctuation">,</span> leastSignificantBits<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将数组的部分转换为最高和最低有效位的长整型表示，并使用它们创建UUID。</p><p>转换方法如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">long</span> <span class="token function">convertBytesToLong</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> uuidBytes<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i \`<span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> shift <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> bits <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">255L</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>uuidBytes<span class="token punctuation">[</span>i <span class="token operator">+</span> start<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> shift<span class="token punctuation">;</span>
        <span class="token keyword">long</span> mask <span class="token operator">=</span> <span class="token number">255L</span> <span class="token operator">&lt;&lt;</span> shift<span class="token punctuation">;</span>
        result <span class="token operator">=</span> result <span class="token operator">&amp;</span> <span class="token operator">~</span>mask <span class="token operator">|</span> bits<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个方法中，我们遍历字节数组，将每个字节转换为位，并将它们移动到我们的结果中。</p><p>正如我们所见，解码的最终结果将与我们用于编码的原始UUID匹配。</p><h2 id="_3-使用-bytebuffer-和-base64-geturlencoder-进行编码" tabindex="-1"><a class="header-anchor" href="#_3-使用-bytebuffer-和-base64-geturlencoder-进行编码"><span>3. 使用_ByteBuffer_和_Base64.getUrlEncoder()_进行编码</span></a></h2><p>使用JDK的标准功能，我们可以简化上面的代码。</p><h3 id="_3-1-编码" tabindex="-1"><a class="header-anchor" href="#_3-1-编码"><span>3.1. 编码</span></a></h3><p>使用_ByteBuffer_，我们可以在几行代码中将UUID转换为字节数组：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ByteBuffer</span> byteBuffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
byteBuffer<span class="token punctuation">.</span><span class="token function">putLong</span><span class="token punctuation">(</span>originalUUID<span class="token punctuation">.</span><span class="token function">getMostSignificantBits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
byteBuffer<span class="token punctuation">.</span><span class="token function">putLong</span><span class="token punctuation">(</span>originalUUID<span class="token punctuation">.</span><span class="token function">getLeastSignificantBits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们创建了一个缓冲区，包装了一个字节数组，并将UUID的最高和最低有效位放入其中。</p><p>为了编码目的，这次我们将使用_Base64.getUrlEncoder()_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> encodedUUID <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getUrlEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>byteBuffer<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果，我们在4行代码中创建了一个Base64编码的UUID：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenUUID_whenEncodingUsingByteBufferAndBase64UrlEncoder_thenGiveExpectedEncodedString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> expectedEncodedString <span class="token operator">=</span> <span class="token string">&quot;zF-T94zxSlGDxudAMToMbA==&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">ByteBuffer</span> byteBuffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    byteBuffer<span class="token punctuation">.</span><span class="token function">putLong</span><span class="token punctuation">(</span>originalUUID<span class="token punctuation">.</span><span class="token function">getMostSignificantBits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    byteBuffer<span class="token punctuation">.</span><span class="token function">putLong</span><span class="token punctuation">(</span>originalUUID<span class="token punctuation">.</span><span class="token function">getLeastSignificantBits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> encodedUUID <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getUrlEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>byteBuffer<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span>expectedEncodedString<span class="token punctuation">,</span> encodedUUID<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-解码" tabindex="-1"><a class="header-anchor" href="#_3-2-解码"><span>3.2. 解码</span></a></h3><p>我们可以使用_ByteBuffer_和_Base64.UrlDecoder()_执行相反的操作：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenEncodedString_whenDecodingUsingByteBufferAndBase64UrlDecoder_thenGiveExpectedUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> expectedEncodedString <span class="token operator">=</span> <span class="token string">&quot;zF-T94zxSlGDxudAMToMbA==&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> decodedBytes <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getUrlDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>expectedEncodedString<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ByteBuffer</span> byteBuffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>decodedBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> mostSignificantBits <span class="token operator">=</span> byteBuffer<span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> leastSignificantBits <span class="token operator">=</span> byteBuffer<span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">UUID</span> uuid <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UUID</span><span class="token punctuation">(</span>mostSignificantBits<span class="token punctuation">,</span> leastSignificantBits<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span>originalUUID<span class="token punctuation">,</span> uuid<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如我们所见，我们成功地从编码字符串中解码了预期的UUID。</p><h2 id="_4-缩短编码uuid的长度" tabindex="-1"><a class="header-anchor" href="#_4-缩短编码uuid的长度"><span>4. 缩短编码UUID的长度</span></a></h2><p>正如我们在前几节中看到的，Base64默认包含结尾的“==”。为了节省更多的字节，我们可以修剪这个结尾。</p><p>为此，我们可以配置我们的编码器不添加填充：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> encodedUUID <span class="token operator">=</span>
  <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getUrlEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withoutPadding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>byteBuffer<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">assertEquals</span><span class="token punctuation">(</span>expectedEncodedString<span class="token punctuation">,</span> encodedUUID<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果，我们可以看到没有额外字符的编码字符串。<strong>我们不需要更改我们的解码器，因为它将以相同的方式处理编码字符串的两种变体</strong>。</p><h2 id="_5-使用apache-commons中的转换工具和编解码工具进行编码" tabindex="-1"><a class="header-anchor" href="#_5-使用apache-commons中的转换工具和编解码工具进行编码"><span>5. 使用Apache Commons中的转换工具和编解码工具进行编码</span></a></h2><p>在这一部分，我们将使用Apache Commons转换工具中的_uuidToByteArray_来制作UUID字节数组。此外，我们将使用Apache Commons Base64工具中的_encodeBase64URLSafeString_。</p><h3 id="_5-1-依赖项" tabindex="-1"><a class="header-anchor" href="#_5-1-依赖项"><span>5.1. 依赖项</span></a></h3><p>为了演示这种编码方法，我们将使用Apache Commons Lang库。让我们将它的依赖项添加到我们的_pom.xml_中：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\`\`
    \`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`org.apache.commons\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`
    \`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`commons-lang3\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`
    \`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\`\`3.14.0\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\`\`
\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\`\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将使用的另一个依赖项是_commons-codec_：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\`
    \`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`commons-codec\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`
    \`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`commons-codec\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`
    \`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\`\`1.16.0\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\`\`
\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\`\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-编码" tabindex="-1"><a class="header-anchor" href="#_5-2-编码"><span>5.2. 编码</span></a></h3><p>我们只需两行代码即可对UUID进行编码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenUUID_whenEncodingUsingApacheUtils_thenGiveExpectedEncodedString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> expectedEncodedString <span class="token operator">=</span> <span class="token string">&quot;UUrxjPeTX8xsDDoxQOfGgw&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token class-name">Conversion</span><span class="token punctuation">.</span><span class="token function">uuidToByteArray</span><span class="token punctuation">(</span>originalUUID<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> encodedUUID <span class="token operator">=</span> <span class="token function">encodeBase64URLSafeString</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span>expectedEncodedString<span class="token punctuation">,</span> encodedUUID<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如我们所见，结果已经是修剪过的，不包含待处理的结尾。</p><h3 id="_5-3-解码" tabindex="-1"><a class="header-anchor" href="#_5-3-解码"><span>5.3. 解码</span></a></h3><p>我们将通过调用_Apache Commons_的_Base64.decodeBase64()_和_Conversion.byteArrayToUuid()_来执行反向操作：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenEncodedString_whenDecodingUsingApacheUtils_thenGiveExpectedUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> expectedEncodedString <span class="token operator">=</span> <span class="token string">&quot;UUrxjPeTX8xsDDoxQOfGgw&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> decodedBytes <span class="token operator">=</span> <span class="token function">decodeBase64</span><span class="token punctuation">(</span>expectedEncodedString<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">UUID</span> uuid <span class="token operator">=</span> <span class="token class-name">Conversion</span><span class="token punctuation">.</span><span class="token function">byteArrayToUuid</span><span class="token punctuation">(</span>decodedBytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span>originalUUID<span class="token punctuation">,</span> uuid<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们成功地获得了原始UUID。</p><h2 id="_6-结论" tabindex="-1"><a class="header-anchor" href="#_6-结论"><span>6. 结论</span></a></h2><p>UUID是一种广泛使用的数据类型，编码它的一种方法是使用Base64。在本文中，我们探讨了几种将UUID编码为Base64的方法。</p><p>如常，完整的源代码可以在GitHub上找到。</p>`,59),o=[p];function c(i,l){return a(),s("div",null,o)}const k=n(e,[["render",c],["__file","2024-06-22-Storing UUID as Base64 String in Java.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-06-22/2024-06-22-Storing%20UUID%20as%20Base64%20String%20in%20Java.html","title":"在Java中将UUID存储为Base64字符串","lang":"zh-CN","frontmatter":{"date":"2024-06-23T00:00:00.000Z","category":["Java","UUID"],"tag":["Base64","Encoding"],"head":[["meta",{"name":"keywords","content":"Java, UUID, Base64, Encoding"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-06-22/2024-06-22-Storing%20UUID%20as%20Base64%20String%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"在Java中将UUID存储为Base64字符串"}],["meta",{"property":"og:description","content":"在Java中将UUID存储为Base64字符串 使用Base64编码的字符串是存储通用唯一识别码（UUID）的广泛采用方法。与标准的UUID字符串表示相比，这提供了更紧凑的结果。在本文中，我们将探讨将UUID编码为Base64字符串的不同方法。 2. 使用_byte[]_和_Base64.Encoder_进行编码 我们将从使用_byte[]_和_Bas..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-22T22:31:17.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Base64"}],["meta",{"property":"article:tag","content":"Encoding"}],["meta",{"property":"article:published_time","content":"2024-06-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-22T22:31:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"在Java中将UUID存储为Base64字符串\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-23T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-22T22:31:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"在Java中将UUID存储为Base64字符串 使用Base64编码的字符串是存储通用唯一识别码（UUID）的广泛采用方法。与标准的UUID字符串表示相比，这提供了更紧凑的结果。在本文中，我们将探讨将UUID编码为Base64字符串的不同方法。 2. 使用_byte[]_和_Base64.Encoder_进行编码 我们将从使用_byte[]_和_Bas..."},"headers":[{"level":2,"title":"2. 使用_byte[]_和_Base64.Encoder_进行编码","slug":"_2-使用-byte-和-base64-encoder-进行编码","link":"#_2-使用-byte-和-base64-encoder-进行编码","children":[{"level":3,"title":"2.1. 编码","slug":"_2-1-编码","link":"#_2-1-编码","children":[]},{"level":3,"title":"2.2. 解码","slug":"_2-2-解码","link":"#_2-2-解码","children":[]}]},{"level":2,"title":"3. 使用_ByteBuffer_和_Base64.getUrlEncoder()_进行编码","slug":"_3-使用-bytebuffer-和-base64-geturlencoder-进行编码","link":"#_3-使用-bytebuffer-和-base64-geturlencoder-进行编码","children":[{"level":3,"title":"3.1. 编码","slug":"_3-1-编码","link":"#_3-1-编码","children":[]},{"level":3,"title":"3.2. 解码","slug":"_3-2-解码","link":"#_3-2-解码","children":[]}]},{"level":2,"title":"4. 缩短编码UUID的长度","slug":"_4-缩短编码uuid的长度","link":"#_4-缩短编码uuid的长度","children":[]},{"level":2,"title":"5. 使用Apache Commons中的转换工具和编解码工具进行编码","slug":"_5-使用apache-commons中的转换工具和编解码工具进行编码","link":"#_5-使用apache-commons中的转换工具和编解码工具进行编码","children":[{"level":3,"title":"5.1. 依赖项","slug":"_5-1-依赖项","link":"#_5-1-依赖项","children":[]},{"level":3,"title":"5.2. 编码","slug":"_5-2-编码","link":"#_5-2-编码","children":[]},{"level":3,"title":"5.3. 解码","slug":"_5-3-解码","link":"#_5-3-解码","children":[]}]},{"level":2,"title":"6. 结论","slug":"_6-结论","link":"#_6-结论","children":[]}],"git":{"createdTime":1719095477000,"updatedTime":1719095477000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":4.35,"words":1305},"filePathRelative":"posts/baeldung/2024-06-22/2024-06-22-Storing UUID as Base64 String in Java.md","localizedDate":"2024年6月23日","excerpt":"\\n<p>使用Base64编码的字符串是存储通用唯一识别码（UUID）的广泛采用方法。与标准的UUID字符串表示相比，这提供了更紧凑的结果。在本文中，我们将探讨将UUID编码为Base64字符串的不同方法。</p>\\n<h2>2. 使用_byte[]_和_Base64.Encoder_进行编码</h2>\\n<p>我们将从使用_byte[]_和_Base64.Encoder_的最直接方法开始编码。</p>\\n<h3>2.1. 编码</h3>\\n<p>我们将从我们的UUID位创建一个字节数组。为此，我们将取UUID的最高有效位和最低有效位，并将它们分别放在数组的0-7和8-15位置：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">byte</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token function\\">convertToByteArray</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">UUID</span> uuid<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">byte</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> result <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token keyword\\">byte</span><span class=\\"token punctuation\\">[</span><span class=\\"token number\\">16</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">long</span> mostSignificantBits <span class=\\"token operator\\">=</span> uuid<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getMostSignificantBits</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">fillByteArray</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">8</span><span class=\\"token punctuation\\">,</span> result<span class=\\"token punctuation\\">,</span> mostSignificantBits<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">long</span> leastSignificantBits <span class=\\"token operator\\">=</span> uuid<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getLeastSignificantBits</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">fillByteArray</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">8</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">16</span><span class=\\"token punctuation\\">,</span> result<span class=\\"token punctuation\\">,</span> leastSignificantBits<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">return</span> result<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{k as comp,d as data};
