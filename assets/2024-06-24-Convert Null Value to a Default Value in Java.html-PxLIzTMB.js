import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-DMZJIPds.js";const e={},p=t(`<h1 id="java中将空值转换为默认值" tabindex="-1"><a class="header-anchor" href="#java中将空值转换为默认值"><span>Java中将空值转换为默认值</span></a></h1><p>在1965年，托尼·霍尔（Tony Hoare）引入了空引用的概念。从那时起，无数小时被用于阅读日志并尝试找到NullPointerExceptions的来源。这种异常如此普遍，以至于我们通常称之为NPE。</p><p>在本教程中，我们将学习如何缓解这个问题。我们将回顾几种简化将null转换为默认值的技术。</p><h2 id="_2-简单的if语句" tabindex="-1"><a class="header-anchor" href="#_2-简单的if语句"><span>2. 简单的if语句</span></a></h2><p>处理转换的最简单方法是使用if语句。它们是基本的语言结构，并且由于对不同经验和水平的开发人员都很清晰，因此具有优势。这种方法最好的地方在于它很冗长，这同时也是最坏的地方：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ParameterizedTest</span>
<span class="token annotation punctuation">@ArgumentsSource</span><span class="token punctuation">(</span><span class="token class-name">ObjectsProvider</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">givenIfWhenNotNullThenReturnsDefault</span><span class="token punctuation">(</span><span class="token class-name">String</span> givenValue<span class="token punctuation">,</span> <span class="token class-name">String</span> defaultValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> actual <span class="token operator">=</span> defaultValue<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>givenValue <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        actual <span class="token operator">=</span> givenValue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">assertDefaultConversion</span><span class="token punctuation">(</span>givenValue<span class="token punctuation">,</span> defaultValue<span class="token punctuation">,</span> actual<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为我们完全控制逻辑，我们可以轻松地更改、提取和重用它。此外，如果我们想要，我们可以使它变得懒惰：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ParameterizedTest</span>
<span class="token annotation punctuation">@ArgumentsSource</span><span class="token punctuation">(</span><span class="token class-name">ObjectsSupplierProvider</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">givenIfWhenNotNullThenReturnsDefault</span><span class="token punctuation">(</span><span class="token class-name">String</span> givenValue<span class="token punctuation">,</span> <span class="token class-name">String</span> expected<span class="token punctuation">,</span> <span class="token class-name">Supplier</span>\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\` expensiveSupplier<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> actual<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>givenValue <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        actual <span class="token operator">=</span> givenValue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        actual <span class="token operator">=</span> expensiveSupplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">assertDefaultConversion</span><span class="token punctuation">(</span>givenValue<span class="token punctuation">,</span> expected<span class="token punctuation">,</span> actual<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果操作相当简单，我们可以使用三元运算符使它们更加内联。Elvis运算符没有进入Java，但我们仍然可以改进代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ParameterizedTest</span>
<span class="token annotation punctuation">@ArgumentsSource</span><span class="token punctuation">(</span><span class="token class-name">ObjectsProvider</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">givenTernaryWhenNotNullThenReturnsDefault</span><span class="token punctuation">(</span><span class="token class-name">String</span> givenValue<span class="token punctuation">,</span> <span class="token class-name">String</span> defaultValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> actual <span class="token operator">=</span> givenValue <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> givenValue <span class="token operator">:</span> defaultValue<span class="token punctuation">;</span>
    <span class="token function">assertDefaultConversion</span><span class="token punctuation">(</span>givenValue<span class="token punctuation">,</span> defaultValue<span class="token punctuation">,</span> actual<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它还允许懒惰的方法，因为只有所需的表达式被评估：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ParameterizedTest</span>
<span class="token annotation punctuation">@ArgumentsSource</span><span class="token punctuation">(</span><span class="token class-name">ObjectsSupplierProvider</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">givenLazyTernaryWhenNotNullThenReturnsDefault</span><span class="token punctuation">(</span><span class="token class-name">String</span> givenValue<span class="token punctuation">,</span> <span class="token class-name">String</span> expected<span class="token punctuation">,</span> <span class="token class-name">Supplier</span>\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\` expensiveSupplier<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> actual <span class="token operator">=</span> givenValue <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> givenValue <span class="token operator">:</span> expensiveSupplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertDefaultConversion</span><span class="token punctuation">(</span>givenValue<span class="token punctuation">,</span> expected<span class="token punctuation">,</span> actual<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以将这个逻辑提取到一个具有良好名称的单独方法中，使我们的代码更易读。然而，Java和一些外部库已经做到了这一点。</p><h2 id="_3-java-objects" tabindex="-1"><a class="header-anchor" href="#_3-java-objects"><span>3. Java Objects</span></a></h2><p>Java 9为我们提供了两个实用方法：Objects.requireNonNullElse和Objects.requireNonNullElseGet。这些方法的实现类似于我们回顾过的。总的来说，它们提供了更好的API并使代码自我解释：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ParameterizedTest</span>
<span class="token annotation punctuation">@ArgumentsSource</span><span class="token punctuation">(</span><span class="token class-name">ObjectsProvider</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">givenObjectsWhenNotNullThenReturnsDefault</span><span class="token punctuation">(</span><span class="token class-name">String</span> givenValue<span class="token punctuation">,</span> <span class="token class-name">String</span> defaultValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> actual <span class="token operator">=</span> <span class="token function">requireNonNullElse</span><span class="token punctuation">(</span>givenValue<span class="token punctuation">,</span> defaultValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertDefaultConversion</span><span class="token punctuation">(</span>givenValue<span class="token punctuation">,</span> defaultValue<span class="token punctuation">,</span> actual<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>静态导入可以帮助我们去除Objects类名以减少噪音。懒惰版本的看起来像这样：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ParameterizedTest</span>
<span class="token annotation punctuation">@ArgumentsSource</span><span class="token punctuation">(</span><span class="token class-name">ObjectsSupplierProvider</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">givenLazyObjectsWhenNotNullThenReturnsDefault</span><span class="token punctuation">(</span><span class="token class-name">String</span> givenValue<span class="token punctuation">,</span> <span class="token class-name">String</span> expected<span class="token punctuation">,</span> <span class="token class-name">Supplier</span>\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\` expensiveSupplier<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> actual <span class="token operator">=</span> <span class="token function">requireNonNullElseGet</span><span class="token punctuation">(</span>givenValue<span class="token punctuation">,</span> expensiveSupplier<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertDefaultConversion</span><span class="token punctuation">(</span>givenValue<span class="token punctuation">,</span> expected<span class="token punctuation">,</span> actual<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然而，这个API仅从Java 9开始可用。同时，Java 8也提供了一些方便的工具来实现类似的结果。</p><h2 id="_4-java-optional-t" tabindex="-1"><a class="header-anchor" href="#_4-java-optional-t"><span>4. Java Optional<code>&lt;T&gt;</code></span></a></h2><p>Optional<code>&lt;T&gt;</code>类背后的主要思想是解决null检查和NullPointerExceptions的问题。我们可以在文档中识别可空API，但更好的解决方案是在代码中明确显示。从某个方法中获取Optional<code>&lt;T&gt;</code>清楚地告诉我们值可能是null。此外，IDE可以使用静态分析进行通知和高亮显示。</p><p>显式null检查不是这个类的目标。然而，我们可以使用它来包装我们想要检查的值，并对其进行一些操作：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ParameterizedTest</span>
<span class="token annotation punctuation">@ArgumentsSource</span><span class="token punctuation">(</span><span class="token class-name">ObjectsProvider</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">givenOptionalWhenNotNullThenReturnsDefault</span><span class="token punctuation">(</span><span class="token class-name">String</span> givenValue<span class="token punctuation">,</span> <span class="token class-name">String</span> defaultValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> actual <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>givenValue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>defaultValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertDefaultConversion</span><span class="token punctuation">(</span>givenValue<span class="token punctuation">,</span> defaultValue<span class="token punctuation">,</span> actual<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>懒惰版本看起来非常相似：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ParameterizedTest</span>
<span class="token annotation punctuation">@ArgumentsSource</span><span class="token punctuation">(</span><span class="token class-name">ObjectsSupplierProvider</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">givenLazyOptionalWhenNotNullThenReturnsDefault</span><span class="token punctuation">(</span><span class="token class-name">String</span> givenValue<span class="token punctuation">,</span> <span class="token class-name">String</span> expected<span class="token punctuation">,</span> <span class="token class-name">Supplier</span>\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\` expensiveSupplier<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> actual <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>givenValue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span>expensiveSupplier<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertDefaultConversion</span><span class="token punctuation">(</span>givenValue<span class="token punctuation">,</span> expected<span class="token punctuation">,</span> actual<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为null检查创建一个单独的包装对象可能是值得怀疑的。同时，它可能对于在没有链式null检查的情况下遍历数据对象很有用：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">Delivery</span> <span class="token function">calculateDeliveryForPerson</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token function">getPersonById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>person <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> person<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> person<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getZipCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ZipCode</span> zipCode <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getZipCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> code <span class="token operator">=</span> zipCode<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">calculateDeliveryForZipCode</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token class-name">Delivery</span><span class="token punctuation">.</span><span class="token function">defaultDelivery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以使用Optional.map(Function<code>&lt;T, U&gt;</code>)做同样的事情：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Delivery</span> <span class="token function">calculateDeliveryForPerson</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token function">getPersonById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getAddress</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Address</span><span class="token operator">::</span><span class="token function">getZipCode</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">ZipCode</span><span class="token operator">::</span><span class="token function">getCode</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">calculateDeliveryForZipCode</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token class-name">Delivery</span><span class="token punctuation">.</span><span class="token function">defaultDelivery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>及早将对象包装在Optional<code>&lt;T&gt;</code>中可以减少我们稍后必须进行的检查。</p><h2 id="_5-guava库" tabindex="-1"><a class="header-anchor" href="#_5-guava库"><span>5. Guava库</span></a></h2><p>如果所有先前的方法都不适合，例如在使用Java的早期版本时，我们可以导入Guava来获得类似的功能。让我们首先添加依赖项：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\`\`
    \`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`com.google.guava\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`
    \`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`guava\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`
    \`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\`\`33.0.0-jre\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\`\`
\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\`\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它反映了Java的功能，并没有添加任何明确有用的功能。要获取提供的值如果为null，则可以使用MoreObjects：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ParameterizedTest</span>
<span class="token annotation punctuation">@ArgumentsSource</span><span class="token punctuation">(</span><span class="token class-name">ObjectsProvider</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">givenGuavaWhenNotNullThenReturnsDefault</span><span class="token punctuation">(</span><span class="token class-name">String</span> givenValue<span class="token punctuation">,</span> <span class="token class-name">String</span> defaultValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> actual <span class="token operator">=</span> <span class="token class-name">MoreObjects</span><span class="token punctuation">.</span><span class="token function">firstNonNull</span><span class="token punctuation">(</span>givenValue<span class="token punctuation">,</span> defaultValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertDefaultConversion</span><span class="token punctuation">(</span>givenValue<span class="token punctuation">,</span> defaultValue<span class="token punctuation">,</span> actual<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>MoreObjects取代了Guava的Objects实用程序类，该类已被弃用并计划删除。但是，它不允许延迟提供默认值。此外，它提供了一个与Java同名的Optional<code>&lt;T&gt;</code>类，但位于不同的包中：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ParameterizedTest</span>
<span class="token annotation punctuation">@ArgumentsSource</span><span class="token punctuation">(</span><span class="token class-name">ObjectsProvider</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">givenGuavaOptionalWhenNotNullThenReturnsDefault</span><span class="token punctuation">(</span><span class="token class-name">String</span> givenValue<span class="token punctuation">,</span> <span class="token class-name">String</span> defaultValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> actual <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>base<span class="token punctuation">.</span></span>Optional</span><span class="token punctuation">.</span><span class="token function">fromNullable</span><span class="token punctuation">(</span>givenValue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>defaultValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertDefaultConversion</span><span class="token punctuation">(</span>givenValue<span class="token punctuation">,</span> defaultValue<span class="token punctuation">,</span> actual<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们也可以使用这个类来实现一系列修改：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">Delivery</span> <span class="token function">calculateDeliveryForPerson</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">fromNullable</span><span class="token punctuation">(</span><span class="token function">getPersonById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getAddress</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">Address</span><span class="token operator">::</span><span class="token function">getZipCode</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">ZipCode</span><span class="token operator">::</span><span class="token function">getCode</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">calculateDeliveryForZipCode</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token class-name">Delivery</span><span class="token punctuation">.</span><span class="token function">defaultDelivery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>transform方法不允许返回null的函数。因此，我们必须确保管道中的任何方法都不返回null。总的来说，如果Java特性不可用，Guava是Java特性的一个很好的替代品，但它提供的功能比Java Optional<code>&lt;T&gt;</code>少。</p><h2 id="_6-apache-commons" tabindex="-1"><a class="header-anchor" href="#_6-apache-commons"><span>6. Apache Commons</span></a></h2><p>另一个可以用来简化我们的null检查的库是Apache Commons。让我们添加依赖项：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\`\`
    \`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`org.apache.commons\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\`\`
    \`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`commons-lang3\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`\`
    \`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\`\`3.14.0\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\`\`
\`\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\`\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然而，它只提供了一些简单的方法，用于从几个参数中获取第一个非null值：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ParameterizedTest</span>
<span class="token annotation punctuation">@ArgumentsSource</span><span class="token punctuation">(</span><span class="token class-name">ObjectsProvider</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">givenApacheWhenNotNullThenReturnsDefault</span><span class="token punctuation">(</span><span class="token class-name">String</span> givenValue<span class="token punctuation">,</span> <span class="token class-name">String</span> defaultValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> actual <span class="token operator">=</span> <span class="token class-name">ObjectUtils</span><span class="token punctuation">.</span><span class="token function">firstNonNull</span><span class="token punctuation">(</span>givenValue<span class="token punctuation">,</span> defaultValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertDefaultConversion</span><span class="token punctuation">(</span>givenValue<span class="token punctuation">,</span> defaultValue<span class="token punctuation">,</span> actual<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>懒惰版本的API有点不方便，因为它需要Supplier<code>&lt;T&gt;</code>，所以我们必须包装一个值，如果我们已经有一个：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ParameterizedTest</span>
<span class="token annotation punctuation">@ArgumentsSource</span><span class="token punctuation">(</span><span class="token class-name">ObjectsSupplierProvider</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">givenLazyApacheWhenNotNullThenReturnsDefault</span><span class="token punctuation">(</span><span class="token class-name">String</span> givenValue<span class="token punctuation">,</span> <span class="token class-name">String</span> expected<span class="token punctuation">,</span> <span class="token class-name">Supplier</span>\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\` expensiveSupplier<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> actual <span class="token operator">=</span> <span class="token class-name">ObjectUtils</span><span class="token punctuation">.</span><span class="token function">getFirstNonNull</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> givenValue<span class="token punctuation">,</span> expensiveSupplier<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertDefaultConversion</span><span class="token punctuation">(</span>givenValue<span class="token punctuation">,</span> expected<span class="token punctuation">,</span> actual<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总的来说，如果由于某种原因我们无法访问Java特性，这也是一个很好的替代品。</p><h2 id="_7-结论" tabindex="-1"><a class="header-anchor" href="#_7-结论"><span>7. 结论</span></a></h2><p>NullPointerException是开发人员面临的最常见异常。有几种方便的方式来确保null安全性。Java API和外部库提供了许多技术。</p>`,50),o=[p];function c(l,u){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","2024-06-24-Convert Null Value to a Default Value in Java.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-06-24/2024-06-24-Convert%20Null%20Value%20to%20a%20Default%20Value%20in%20Java.html","title":"Java中将空值转换为默认值","lang":"zh-CN","frontmatter":{"date":"2024-06-25T00:00:00.000Z","category":["Java","Programming"],"head":[["meta",{"name":"keywords","content":"Java, null, default value, NullPointerException, programming"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-06-24/2024-06-24-Convert%20Null%20Value%20to%20a%20Default%20Value%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Java中将空值转换为默认值"}],["meta",{"property":"og:description","content":"Java中将空值转换为默认值 在1965年，托尼·霍尔（Tony Hoare）引入了空引用的概念。从那时起，无数小时被用于阅读日志并尝试找到NullPointerExceptions的来源。这种异常如此普遍，以至于我们通常称之为NPE。 在本教程中，我们将学习如何缓解这个问题。我们将回顾几种简化将null转换为默认值的技术。 2. 简单的if语句 处理..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-24T19:51:52.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:published_time","content":"2024-06-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-24T19:51:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java中将空值转换为默认值\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-25T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-24T19:51:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Java中将空值转换为默认值 在1965年，托尼·霍尔（Tony Hoare）引入了空引用的概念。从那时起，无数小时被用于阅读日志并尝试找到NullPointerExceptions的来源。这种异常如此普遍，以至于我们通常称之为NPE。 在本教程中，我们将学习如何缓解这个问题。我们将回顾几种简化将null转换为默认值的技术。 2. 简单的if语句 处理..."},"headers":[{"level":2,"title":"2. 简单的if语句","slug":"_2-简单的if语句","link":"#_2-简单的if语句","children":[]},{"level":2,"title":"3. Java Objects","slug":"_3-java-objects","link":"#_3-java-objects","children":[]},{"level":2,"title":"4. Java Optional<T>","slug":"_4-java-optional-t","link":"#_4-java-optional-t","children":[]},{"level":2,"title":"5. Guava库","slug":"_5-guava库","link":"#_5-guava库","children":[]},{"level":2,"title":"6. Apache Commons","slug":"_6-apache-commons","link":"#_6-apache-commons","children":[]},{"level":2,"title":"7. 结论","slug":"_7-结论","link":"#_7-结论","children":[]}],"git":{"createdTime":1719258712000,"updatedTime":1719258712000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":5.09,"words":1527},"filePathRelative":"posts/baeldung/2024-06-24/2024-06-24-Convert Null Value to a Default Value in Java.md","localizedDate":"2024年6月25日","excerpt":"\\n<p>在1965年，托尼·霍尔（Tony Hoare）引入了空引用的概念。从那时起，无数小时被用于阅读日志并尝试找到NullPointerExceptions的来源。这种异常如此普遍，以至于我们通常称之为NPE。</p>\\n<p>在本教程中，我们将学习如何缓解这个问题。我们将回顾几种简化将null转换为默认值的技术。</p>\\n<h2>2. 简单的if语句</h2>\\n<p>处理转换的最简单方法是使用if语句。它们是基本的语言结构，并且由于对不同经验和水平的开发人员都很清晰，因此具有优势。这种方法最好的地方在于它很冗长，这同时也是最坏的地方：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token annotation punctuation\\">@ParameterizedTest</span>\\n<span class=\\"token annotation punctuation\\">@ArgumentsSource</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">ObjectsProvider</span><span class=\\"token punctuation\\">.</span><span class=\\"token keyword\\">class</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">givenIfWhenNotNullThenReturnsDefault</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> givenValue<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">String</span> defaultValue<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token class-name\\">String</span> actual <span class=\\"token operator\\">=</span> defaultValue<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>givenValue <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        actual <span class=\\"token operator\\">=</span> givenValue<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token function\\">assertDefaultConversion</span><span class=\\"token punctuation\\">(</span>givenValue<span class=\\"token punctuation\\">,</span> defaultValue<span class=\\"token punctuation\\">,</span> actual<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{r as comp,d as data};
