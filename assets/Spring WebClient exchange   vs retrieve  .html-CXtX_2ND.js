import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-DywXOwq8.js";const e={},p=t('<h1 id="spring-webclient的retrieve-与exchange-方法比较" tabindex="-1"><a class="header-anchor" href="#spring-webclient的retrieve-与exchange-方法比较"><span>Spring WebClient的retrieve()与exchange()方法比较</span></a></h1><p><em>WebClient</em> 是一个简化执行 HTTP 请求过程的接口。与 <em>RestTemplate</em> 不同，它是一个响应式且非阻塞的客户端，可以消费和操作 HTTP 响应。尽管它设计为非阻塞，但也可以在阻塞场景中使用。</p><p>在本教程中，我们将深入探讨 <em>WebClient</em> 接口的关键方法，包括 <em>retrieve()</em>、<em>exchangeToMono()</em> 和 <em>exchangeToFlux()</em>。我们还将探讨这些方法之间的差异和相似之处，并查看示例以展示不同的用例。此外，我们将使用 JSONPlaceholder API 获取用户数据。</p><h3 id="示例设置" tabindex="-1"><a class="header-anchor" href="#示例设置"><span>示例设置</span></a></h3><p>首先，让我们启动一个 Spring Boot 应用程序，并将 <em>spring-boot-starter-webflux</em> 依赖项添加到 <em>pom.xml</em>：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`org.springframework.boot`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`spring-boot-starter-webflux`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`3.2.4`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>此依赖项提供了 <em>WebClient</em> 接口，使我们能够执行 HTTP 请求</strong>。</p><p>让我们也看一下对 <em>https://jsonplaceholder.typicode.com/users/1</em> 的请求的示例 GET 响应：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Leanne Graham&quot;</span><span class="token punctuation">,</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，让我们创建一个名为 <em>User</em> 的 POJO 类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n\n   <span class="token comment">// 标准构造函数，getter 和 setter</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>来自 JSONPlaceholder API 的 JSON 响应将被反序列化并映射到 <em>User</em> 类的一个实例。</p><p>最后，让我们使用基本 URL 创建一个 <em>WebClient</em> 实例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">WebClient</span> client <span class="token operator">=</span> <span class="token class-name">WebClient</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;https://jsonplaceholder.typicode.com/users&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在这里，我们为 HTTP 请求定义了基本 URL。</p><h3 id="exchange-方法" tabindex="-1"><a class="header-anchor" href="#exchange-方法"><span><em>exchange()</em> 方法</span></a></h3><p><strong><em>exchange()</em> 方法直接返回 <em>ClientResponse</em>，从而提供对 HTTP 状态码、头部和响应体的访问</strong>。简单来说，<em>ClientResponse</em> 代表了 <em>WebClient</em> 返回的 HTTP 响应。</p><p><strong>但是，这个方法自 Spring 版本 5.3 起已被弃用，并已被 <em>exchangeToMono()</em> 或 <em>exchangeToFlux()</em> 方法取代，这取决于我们发出的内容</strong>。这两种方法允许我们根据响应状态对响应进行解码。</p><h3 id="_3-1-发出-mono" tabindex="-1"><a class="header-anchor" href="#_3-1-发出-mono"><span>3.1. 发出 <em>Mono</em></span></a></h3><p>让我们看一个使用 <em>exchangeToMono()</em> 发出 <em>Mono</em> 的示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user/exchange-mono/{id}&quot;</span><span class="token punctuation">)</span>\n<span class="token class-name">Mono</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span>`````````` <span class="token function">retrieveUsersWithExchangeAndError</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">&quot;/{id}&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">exchangeToMono</span><span class="token punctuation">(</span>res <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">statusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is2xxSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">bodyToMono</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">statusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is4xxClientError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;客户端错误：无法获取用户&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">statusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is5xxServerError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;服务器错误：无法获取用户&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n              <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">createError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，我们根据 HTTP 状态码检索用户并解码响应。</p><h3 id="_3-2-发出-flux" tabindex="-1"><a class="header-anchor" href="#_3-2-发出-flux"><span>3.2. 发出 <em>Flux</em></span></a></h3><p>此外，让我们使用 <em>exchangeToFlux()</em> 获取一系列用户：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user-exchange-flux&quot;</span><span class="token punctuation">)</span>\n<span class="token class-name">Flux</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span>`````````` <span class="token function">retrieveUsersWithExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n     <span class="token punctuation">.</span><span class="token function">exchangeToFlux</span><span class="token punctuation">(</span>res <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n         <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">statusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is2xxSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n             <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">bodyToFlux</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n             <span class="token keyword">return</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;获取用户时出错&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n         <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们使用 <em>exchangeToFlux()</em> 方法将响应体映射到 <em>User</em> 对象的 <em>Flux</em> 并返回自定义错误消息，如果请求失败。</p><h3 id="_3-3-直接检索响应体" tabindex="-1"><a class="header-anchor" href="#_3-3-直接检索响应体"><span>3.3. 直接检索响应体</span></a></h3><p>值得注意的是，<em>exchangeToMono()</em> 或 <em>exchangeToFlux()</em> 可以在不指定响应状态码的情况下使用：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user-exchange&quot;</span><span class="token punctuation">)</span>\n<span class="token class-name">Flux</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span>`````````` <span class="token function">retrieveAllUserWithExchange</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exchangeToFlux</span><span class="token punctuation">(</span>res <span class="token operator">-&gt;</span> res<span class="token punctuation">.</span><span class="token function">bodyToFlux</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">onErrorResume</span><span class="token punctuation">(</span><span class="token class-name">Flux</span><span class="token operator">::</span><span class="token function">error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们没有指定状态码就检索了用户。</p><h3 id="_3-4-改变响应体" tabindex="-1"><a class="header-anchor" href="#_3-4-改变响应体"><span>3.4. 改变响应体</span></a></h3><p>此外，让我们看一个改变响应体的示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user/exchange-alter/{id}&quot;</span><span class="token punctuation">)</span>\n<span class="token class-name">Mono</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span>`````````` <span class="token function">retrieveOneUserWithExchange</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">&quot;/{id}&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">exchangeToMono</span><span class="token punctuation">(</span>res <span class="token operator">-&gt;</span> res<span class="token punctuation">.</span><span class="token function">bodyToMono</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>user <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n          user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token keyword">return</span> user<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，我们将响应体映射到 POJO 类后，通过给 <em>id</em> 添加 <em>100</em> 并将 <em>name</em> 大写来改变响应体。</p><p>值得注意的是，我们也可以使用 <em>retrieve()</em> 方法改变响应体。</p><p>我们还可以提取响应头：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user/exchange-header/{id}&quot;</span><span class="token punctuation">)</span>\n<span class="token class-name">Mono</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span>`````````` <span class="token function">retrieveUsersWithExchangeAndHeader</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">&quot;/{id}&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">exchangeToMono</span><span class="token punctuation">(</span>res <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">statusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is2xxSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;状态码: &quot;</span> <span class="token operator">+</span> res<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asHttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;内容类型&quot;</span> <span class="token operator">+</span> res<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">bodyToMono</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">statusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is4xxClientError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;客户端错误：无法获取用户&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">statusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is5xxServerError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;服务器错误：无法获取用户&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">createError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们将 HTTP 头部和内容类型记录到控制台。与需要返回 <em>ResponseEntity</em> 以访问头部和响应代码的 <em>retrieve()</em> 方法不同，<em>exchangeToMono()</em> 直接返回 <em>ClientResponse</em> 因此可以直接访问。</p><h3 id="_4-retrieve-方法" tabindex="-1"><a class="header-anchor" href="#_4-retrieve-方法"><span>4. <em>retrieve()</em> 方法</span></a></h3><p><strong><em>retrieve()</em> 方法简化了从 HTTP 请求中提取响应体的过程</strong>。它返回 <em>ResponseSpec</em>，允许我们指定如何处理响应体，而无需访问完整的 <em>ClientResponse</em>。</p><p><em>ClientResponse</em> 包括响应代码、头部和体。因此，<em>ResponseSpec</em> 包括响应体，但不包括响应代码和头部。</p><h3 id="_4-1-发出-mono" tabindex="-1"><a class="header-anchor" href="#_4-1-发出-mono"><span>4.1. 发出 <em>Mono</em></span></a></h3><p>这是一个检索 HTTP 响应体的示例代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user/{id}&quot;</span><span class="token punctuation">)</span>\n<span class="token class-name">Mono</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span>`````````` <span class="token function">retrieveOneUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">&quot;/{id}&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">retrieve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">bodyToMono</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">onErrorResume</span><span class="token punctuation">(</span><span class="token class-name">Mono</span><span class="token operator">::</span><span class="token function">error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，我们通过向 <em>/users</em> 端点发出具有特定 <em>id</em> 的 HTTP 调用，从基本 URL 检索 JSON。然后，我们将响应体映射到 <em>User</em> 对象。</p><h3 id="_4-2-发出-flux" tabindex="-1"><a class="header-anchor" href="#_4-2-发出-flux"><span>4.2. 发出 <em>Flux</em></span></a></h3><p>此外，让我们看一个对 <em>/users</em> 端点发出 GET 请求的示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/users&quot;</span><span class="token punctuation">)</span>\n<span class="token class-name">Flux</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span>`````````` <span class="token function">retrieveAllUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">retrieve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">bodyToFlux</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">onResumeError</span><span class="token punctuation">(</span><span class="token class-name">Flux</span><span class="token operator">::</span><span class="token function">error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，当它将 HTTP 响应映射到 POJO 类时，该方法发出 <em>User</em> 对象的 <em>Flux</em>。</p><h3 id="_4-3-返回-responseentity" tabindex="-1"><a class="header-anchor" href="#_4-3-返回-responseentity"><span>4.3. 返回 <em>ResponseEntity</em></span></a></h3><p>如果我们打算使用 <em>retrieve()</em> 方法访问响应状态和头部，我们可以返回 <em>ResponseEntity</em>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user-id/{id}&quot;</span><span class="token punctuation">)</span>\n<span class="token class-name">Mono</span><span class="token operator">&lt;</span><span class="token class-name">ResponseEntity</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span>``````````<span class="token operator">&gt;</span> <span class="token function">retrieveOneUserWithResponseEntity</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">&quot;/{id}&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">retrieve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">toEntity</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">onErrorResume</span><span class="token punctuation">(</span><span class="token class-name">Mono</span><span class="token operator">::</span><span class="token function">error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <em>toEntity()</em> 方法获得的响应包含 HTTP 头部、状态码和响应体。</p><h3 id="_4-4-使用-onstatus-处理器自定义错误" tabindex="-1"><a class="header-anchor" href="#_4-4-使用-onstatus-处理器自定义错误"><span>4.4. 使用 <em>onStatus()</em> 处理器自定义错误</span></a></h3><p><strong>此外，当出现 400 或 500 HTTP 错误时，它默认返回 <em>WebClientResponseException</em> 错误</strong>。但是，我们可以使用 <em>onStatus()</em> 处理器自定义异常以给出自定义错误响应：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user-status/{id}&quot;</span><span class="token punctuation">)</span>\n<span class="token class-name">Mono</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span>`````````` <span class="token function">retrieveOneUserAndHandleErrorBasedOnStatus</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">&quot;/{id}&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">retrieve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">onStatus</span><span class="token punctuation">(</span><span class="token class-name">HttpStatusCode</span><span class="token operator">::</span><span class="token function">is4xxClientError</span><span class="token punctuation">,</span>\n        response <span class="token operator">-&gt;</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;客户端错误：无法获取用户&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">onStatus</span><span class="token punctuation">(</span><span class="token class-name">HttpStatusCode</span><span class="token operator">::</span><span class="token function">is5xxServerError</span><span class="token punctuation">,</span>\n        response <span class="token operator">-&gt;</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;服务器错误：无法获取用户&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">bodyToMono</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n在这里，我们检查 <span class="token constant">HTTP</span> 状态码，并使用 <span class="token function">_onStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>_ 处理器定义自定义错误响应。\n\n## <span class="token number">5.</span> 性能比较\n\n接下来，让我们编写一个性能测试来比较使用 <span class="token class-name">Java</span> <span class="token class-name">Microbench</span> <span class="token class-name">Harness</span> <span class="token punctuation">(</span><span class="token constant">JMH</span><span class="token punctuation">)</span> 的 <span class="token function">_retrieve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>_ 和 <span class="token function">_exchangeToFlux</span><span class="token punctuation">(</span><span class="token punctuation">)</span>_ 的执行时间。\n\n首先，让我们创建一个名为 _RetrieveAndExchangeBenchmarkTest_ 的类：\n\n```java\n<span class="token annotation punctuation">@State</span><span class="token punctuation">(</span><span class="token class-name">Scope<span class="token punctuation">.</span>Benchmark</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@BenchmarkMode</span><span class="token punctuation">(</span><span class="token class-name">Mode<span class="token punctuation">.</span>AverageTime</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@Warmup</span><span class="token punctuation">(</span>iterations <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> time <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> timeUnit <span class="token operator">=</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MICROSECONDS</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@Measurement</span><span class="token punctuation">(</span>iterations <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> time <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> timeUnit <span class="token operator">=</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MICROSECONDS</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RetrieveAndExchangeBenchmarkTest</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">private</span> <span class="token class-name">WebClient</span> client<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Setup</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>client <span class="token operator">=</span> <span class="token class-name">WebClient</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;https://jsonplaceholder.typicode.com/users&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们将基准模式设置为 <em>AverageTime</em>，这意味着它测量测试执行的平均时间。我们还定义了迭代次数和每次迭代的运行时间。</p><p>接下来，我们创建一个 <em>WebClient</em> 的实例，并使用 <em>@Setup</em> 注解使其在每个基准测试之前运行。</p><p>让我们编写一个使用 <em>retrieve()</em> 方法检索一系列用户的基准测试方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Benchmark</span>\n<span class="token class-name">Flux</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span>`````````` <span class="token function">retrieveManyUserUsingRetrieveMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">retrieve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">bodyToFlux</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">onErrorResume</span><span class="token punctuation">(</span><span class="token class-name">Flux</span><span class="token operator">::</span><span class="token function">error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，让我们定义一个使用 <em>exchangeToFlux()</em> 方法发出 <em>User</em> 对象的 <em>Flux</em> 的方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Benchmark</span>\n<span class="token class-name">Flux</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span>`````````` <span class="token function">retrieveManyUserUsingExchangeToFlux</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">exchangeToFlux</span><span class="token punctuation">(</span>res <span class="token operator">-&gt;</span> res<span class="token punctuation">.</span><span class="token function">bodyToFlux</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">onErrorResume</span><span class="token punctuation">(</span><span class="token class-name">Flux</span><span class="token operator">::</span><span class="token function">error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是基准测试结果：</p><div class="language-plaintext line-numbers-mode" data-ext="plaintext" data-title="plaintext"><pre class="language-plaintext"><code>Benchmark                             Mode  Cnt   Score    Error  Units\nretrieveManyUserUsingExchangeToFlux   avgt   15  ≈ 10⁻⁴            s/op\nretrieveManyUserUsingRetrieveMethod   avgt   15  ≈ 10⁻³            s/op\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两种方法都表现出高效的性能。然而，当检索一系列用户时，<em>exchangeToFlux()</em> 比 <em>retrieve()</em> 方法略快。</p><h2 id="_6-关键差异和相似之处" tabindex="-1"><a class="header-anchor" href="#_6-关键差异和相似之处"><span>6. 关键差异和相似之处</span></a></h2><p><em>retrieve()</em> 和 <em>exchangeToMono()</em> 或 <em>exchangeToFlux()</em> 都可以用来进行 HTTP 请求并提取 HTTP 响应。</p><p><em>retrieve()</em> 方法只允许我们消费 HTTP 正文并发出 <em>Mono</em> 或 <em>Flux</em>，因为它返回 <em>ResponseSpec</em>。然而，如果我们想要访问状态码和头部，我们可以使用带有 <em>ResponseEntity</em> 的 <em>retrieve()</em> 方法。此外，它允许我们使用 <em>onStatus()</em> 处理器根据 HTTP 状态码报告错误。</p><p>与 <em>retrieve()</em> 方法不同，<em>exchangeToMono()</em> 和 <em>exchangeToFlux()</em> 允许我们消费 HTTP 响应并直接访问头部和响应代码，因为它们返回 <em>ClientResponse</em>。此外，它们提供了更多的错误处理控制，因为我们可以根据 HTTP 状态码对响应进行解码。</p><p>值得注意的是，如果意图仅消费响应体，建议使用 <em>retrieve()</em> 方法。</p><p>然而，如果我们需要对响应有更多的控制，<em>exchangeToMono()</em> 或 <em>exchangeToFlux()</em> 可能是更好的选择。</p><h2 id="_7-结论" tabindex="-1"><a class="header-anchor" href="#_7-结论"><span>7. 结论</span></a></h2><p>在本文中，我们学习了如何使用 <em>retrieve()</em>、<em>exchangeToMono()</em> 和 <em>exchangeToFlux()</em> 方法来处理 HTTP 响应，并将响应进一步映射到 POJO 类。此外，我们比较了 <em>retrieve()</em> 和 <em>exchangeToFlux()</em> 方法之间的性能。</p><p><em>retrieve()</em> 方法适用于我们只需要消费响应体，不需要访问状态码或头部的场景。它通过返回 <em>ResponseSpec</em> 简化了处理过程，提供了一种直接处理响应体的简单方式。</p><p>如常，示例的完整源代码可在 GitHub 上获得。</p><p>文章发布后 30 天内开放评论。对于此日期之后的任何问题，请使用网站上的联系表单。</p><p>OK</p>',77),o=[p];function c(i,l){return a(),s("div",null,o)}const k=n(e,[["render",c],["__file","Spring WebClient exchange   vs retrieve  .html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/Archive/Spring%20WebClient%20exchange%20%20%20vs%20retrieve%20%20.html","title":"Spring WebClient的retrieve()与exchange()方法比较","lang":"zh-CN","frontmatter":{"date":"2024-06-17T00:00:00.000Z","category":["Spring WebFlux","WebClient"],"tag":["Spring Boot","Web Client","Reactive Programming"],"description":"Spring WebClient的retrieve()与exchange()方法比较 WebClient 是一个简化执行 HTTP 请求过程的接口。与 RestTemplate 不同，它是一个响应式且非阻塞的客户端，可以消费和操作 HTTP 响应。尽管它设计为非阻塞，但也可以在阻塞场景中使用。 在本教程中，我们将深入探讨 WebClient 接口的关键...","head":[["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/Archive/Spring%20WebClient%20exchange%20%20%20vs%20retrieve%20%20.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Spring WebClient的retrieve()与exchange()方法比较"}],["meta",{"property":"og:description","content":"Spring WebClient的retrieve()与exchange()方法比较 WebClient 是一个简化执行 HTTP 请求过程的接口。与 RestTemplate 不同，它是一个响应式且非阻塞的客户端，可以消费和操作 HTTP 响应。尽管它设计为非阻塞，但也可以在阻塞场景中使用。 在本教程中，我们将深入探讨 WebClient 接口的关键..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-21T09:54:56.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Spring Boot"}],["meta",{"property":"article:tag","content":"Web Client"}],["meta",{"property":"article:tag","content":"Reactive Programming"}],["meta",{"property":"article:published_time","content":"2024-06-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-21T09:54:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring WebClient的retrieve()与exchange()方法比较\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-17T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-21T09:54:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]]},"headers":[{"level":3,"title":"示例设置","slug":"示例设置","link":"#示例设置","children":[]},{"level":3,"title":"exchange() 方法","slug":"exchange-方法","link":"#exchange-方法","children":[]},{"level":3,"title":"3.1. 发出 Mono","slug":"_3-1-发出-mono","link":"#_3-1-发出-mono","children":[]},{"level":3,"title":"3.2. 发出 Flux","slug":"_3-2-发出-flux","link":"#_3-2-发出-flux","children":[]},{"level":3,"title":"3.3. 直接检索响应体","slug":"_3-3-直接检索响应体","link":"#_3-3-直接检索响应体","children":[]},{"level":3,"title":"3.4. 改变响应体","slug":"_3-4-改变响应体","link":"#_3-4-改变响应体","children":[]},{"level":3,"title":"4. retrieve() 方法","slug":"_4-retrieve-方法","link":"#_4-retrieve-方法","children":[]},{"level":3,"title":"4.1. 发出 Mono","slug":"_4-1-发出-mono","link":"#_4-1-发出-mono","children":[]},{"level":3,"title":"4.2. 发出 Flux","slug":"_4-2-发出-flux","link":"#_4-2-发出-flux","children":[]},{"level":3,"title":"4.3. 返回 ResponseEntity","slug":"_4-3-返回-responseentity","link":"#_4-3-返回-responseentity","children":[]},{"level":3,"title":"4.4. 使用 onStatus() 处理器自定义错误","slug":"_4-4-使用-onstatus-处理器自定义错误","link":"#_4-4-使用-onstatus-处理器自定义错误","children":[]},{"level":2,"title":"6. 关键差异和相似之处","slug":"_6-关键差异和相似之处","link":"#_6-关键差异和相似之处","children":[]},{"level":2,"title":"7. 结论","slug":"_7-结论","link":"#_7-结论","children":[]}],"git":{"createdTime":1718963696000,"updatedTime":1718963696000,"contributors":[{"name":"Lance Li","email":"lance.jx.li@gtomato.com","commits":1}]},"readingTime":{"minutes":7.26,"words":2178},"filePathRelative":"posts/baeldung/Archive/Spring WebClient exchange   vs retrieve  .md","localizedDate":"2024年6月17日","excerpt":"\\n<p><em>WebClient</em> 是一个简化执行 HTTP 请求过程的接口。与 <em>RestTemplate</em> 不同，它是一个响应式且非阻塞的客户端，可以消费和操作 HTTP 响应。尽管它设计为非阻塞，但也可以在阻塞场景中使用。</p>\\n<p>在本教程中，我们将深入探讨 <em>WebClient</em> 接口的关键方法，包括 <em>retrieve()</em>、<em>exchangeToMono()</em> 和 <em>exchangeToFlux()</em>。我们还将探讨这些方法之间的差异和相似之处，并查看示例以展示不同的用例。此外，我们将使用 JSONPlaceholder API 获取用户数据。</p>","autoDesc":true}');export{k as comp,d as data};
