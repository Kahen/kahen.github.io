import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as a,a as n}from"./app-BTwZI-W8.js";const i={},l=n(`<h1 id="在apache-jmeter中在请求之间插入延迟-baeldung" tabindex="-1"><a class="header-anchor" href="#在apache-jmeter中在请求之间插入延迟-baeldung"><span>在Apache JMeter中在请求之间插入延迟 | Baeldung</span></a></h1><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p>当我们使用Apache JMeter进行测试时，我们可能希望在请求之间添加延迟，以更好地模拟用户行为。</p><p>在本教程中，我们将创建一个简单的测试计划。我们将查看用于调整生成的工作负载的可用参数，并配置计时器以添加延迟。</p><h2 id="_2-使用案例" tabindex="-1"><a class="header-anchor" href="#_2-使用案例"><span>2. 使用案例</span></a></h2><p>有时我们可能希望在请求之间添加延迟：</p><ul><li>避免因在给定时间内发送太多请求而产生的错误</li><li>模拟具有自然间隔的实际用户操作</li><li>调整每分钟的请求数量，以更精细地控制工作负载配置</li></ul><h2 id="_3-使用延迟" tabindex="-1"><a class="header-anchor" href="#_3-使用延迟"><span>3. 使用延迟</span></a></h2><p>首先，我们需要定义负载配置文件。这里我们有多种目标：</p><ul><li>查看系统在增长的工作负载下的行为，以找到性能极限</li><li>检查应用程序在高峰负载后如何恢复</li></ul><p>Apache JMeter有以下两种选项来模拟这些用例：</p><ul><li>线程组 - 并行用户的数量</li><li>计时器 - 每个用户的请求之间的延迟</li></ul><h2 id="_4-测试计划" tabindex="-1"><a class="header-anchor" href="#_4-测试计划"><span>4. 测试计划</span></a></h2><h3 id="_4-1-基本计划" tabindex="-1"><a class="header-anchor" href="#_4-1-基本计划"><span>4.1. 基本计划</span></a></h3><p>让我们创建一个包含一个线程组的基本测试计划。我们将设置并行请求的数量、启动期间和执行测试的次数。我们应该注意到，<strong>在JMeter术语中，一个线程意味着一个并发用户。</strong></p><figure><img src="https://www.baeldung.com/wp-content/uploads/2021/08/thread-group.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>我们可以使用<strong>启动期间</strong>来创建工作负载的增加。这里我们需要设置从1个线程开始达到定义的_线程数量_的时间段。</p><p>要创建更复杂的负载配置文件，我们还可以指定线程的生命周期。此设置意味着两件事：</p><ul><li><strong>启动延迟</strong> - JMeter等待启动线程的时间</li><li><strong>持续时间</strong> - 它运行的时间长度</li></ul><p>_循环计数_也是一个有用的设置，用于指定指定HTTP请求的重复次数。</p><h3 id="_4-2-添加请求" tabindex="-1"><a class="header-anchor" href="#_4-2-添加请求"><span>4.2. 添加请求</span></a></h3><p>接下来，我们将添加两个HTTP请求。我们将使用在线REST API <em>https://gorest.co.in/</em> 来测试我们的脚本。HTTP请求设置在用户界面中配置：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2021/08/http-request-settings.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>我们还将添加两个断言，只是为了检查请求返回了一些数据。</p><p>我们需要检查我们的测试是否没有错误地工作。为此，让我们添加_查看结果树_元素，然后运行我们的测试计划。</p><p>运行第一个请求的结果显示在_查看结果树_面板中。</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2021/08/run-results-1-e1621249469601.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>让我们看看第二个请求的_采样器结果_输出。这里，_样本开始_是 <em>2021-05-17 15:00:40</em>，与第一个请求的时间相同。这意味着默认情况下，我们请求之间没有任何延迟。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Thread Name:Thread Group 1-1
Sample Start:2021-05-17 15:00:40 SAMT
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>考虑到这一点，让我们看看我们如何增加请求之间的间隔。</p><h2 id="_5-添加计时器" tabindex="-1"><a class="header-anchor" href="#_5-添加计时器"><span>5. 添加计时器</span></a></h2><h3 id="_5-1-恒定计时器" tabindex="-1"><a class="header-anchor" href="#_5-1-恒定计时器"><span>5.1. 恒定计时器</span></a></h3><p>要添加计时器元素，我们需要右键单击_线程组_元素并选择_添加，计时器，恒定计时器_。</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2021/08/Adding-timer-e1621250184753.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>在这里，我们向线程组添加了一个_恒定计时器_，并设置了_线程延迟_为三秒。这个计时器在每个请求之间添加了延迟。</p><p>现在让我们重新运行我们的测试计划并检查_查看结果树_。我们应该看到请求是在我们在计时器元素中设置的延迟下运行的。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Thread Name:Thread Group 1-1
Sample Start:2021-05-17 15:18:17 SAMT
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到下一个HTTP请求是在第一个请求之后三秒钟运行的。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Thread Name:Thread Group 1-1
Sample Start:2021-05-17 15:18:20 SAMT
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-恒定计时器的替代方案" tabindex="-1"><a class="header-anchor" href="#_5-2-恒定计时器的替代方案"><span>5.2. 恒定计时器的替代方案</span></a></h3><p>作为_恒定计时器_的替代方案，我们可以使用_均匀随机计时器_。这种类型的计时器可以像恒定计时器一样添加。</p><p>在下拉菜单中，它就在_恒定计时器_之后。</p><p>从计时器名称中我们可以看到，当我们希望延迟在某个指定范围内变化时，应该使用它。让我们将这个计时器添加到我们的样本中，并看看它是如何工作的：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2021/08/uniform-timer.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>_恒定延迟偏移量_为每个延迟添加了一个永久部分。_随机延迟最大值_帮助我们定义一个将添加到恒定延迟偏移量的额外随机部分。这些设置允许我们提供随机因素，而不会使延迟变得太小。</p><p>让我们运行这个测试并查看_查看结果树_元素：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2021/08/uniform-timer-results.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>如果我们仔细查看样本开始点，我们将看到根据定义的计时器参数添加了随机延迟。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Thread Name:Thread Group 1-1
Sample Start:2021-07-15 09:43:45 SAMT

Thread Name:Thread Group 1-1
Sample Start:2021-07-15 09:43:49 SAMT

Thread Name:Thread Group 1-1
Sample Start:2021-07-15 09:43:55 SAMT
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们看了很多计时器选项，尽管还有其他计时器配置可用。</p><h2 id="_6-结论" tabindex="-1"><a class="header-anchor" href="#_6-结论"><span>6. 结论</span></a></h2><p>在本教程中，我们已经看到如何在Apache JMeter中在两个请求之间插入自定义延迟，并使用线程组设置为创建的工作负载模型增加更多的灵活性。</p>`,52),r=[l];function p(s,d){return a(),t("div",null,r)}const h=e(i,[["render",p],["__file","2024-07-26-Inserting Delays Between Requests in Apache JMeter.html.vue"]]),g=JSON.parse('{"path":"/posts/baeldung/2024-07-26/2024-07-26-Inserting%20Delays%20Between%20Requests%20in%20Apache%20JMeter.html","title":"在Apache JMeter中在请求之间插入延迟 | Baeldung","lang":"zh-CN","frontmatter":{"date":"2021-08-04T00:00:00.000Z","category":["Apache JMeter","性能测试"],"tag":["JMeter","延迟","测试计划"],"head":[["meta",{"name":"keywords","content":"JMeter, 延迟, 测试计划, 性能测试"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-26/2024-07-26-Inserting%20Delays%20Between%20Requests%20in%20Apache%20JMeter.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"在Apache JMeter中在请求之间插入延迟 | Baeldung"}],["meta",{"property":"og:description","content":"在Apache JMeter中在请求之间插入延迟 | Baeldung 1. 概述 当我们使用Apache JMeter进行测试时，我们可能希望在请求之间添加延迟，以更好地模拟用户行为。 在本教程中，我们将创建一个简单的测试计划。我们将查看用于调整生成的工作负载的可用参数，并配置计时器以添加延迟。 2. 使用案例 有时我们可能希望在请求之间添加延迟： ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.baeldung.com/wp-content/uploads/2021/08/thread-group.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-27T00:22:52.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"JMeter"}],["meta",{"property":"article:tag","content":"延迟"}],["meta",{"property":"article:tag","content":"测试计划"}],["meta",{"property":"article:published_time","content":"2021-08-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-27T00:22:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"在Apache JMeter中在请求之间插入延迟 | Baeldung\\",\\"image\\":[\\"https://www.baeldung.com/wp-content/uploads/2021/08/thread-group.png\\",\\"https://www.baeldung.com/wp-content/uploads/2021/08/http-request-settings.png\\",\\"https://www.baeldung.com/wp-content/uploads/2021/08/run-results-1-e1621249469601.png\\",\\"https://www.baeldung.com/wp-content/uploads/2021/08/Adding-timer-e1621250184753.png\\",\\"https://www.baeldung.com/wp-content/uploads/2021/08/uniform-timer.png\\",\\"https://www.baeldung.com/wp-content/uploads/2021/08/uniform-timer-results.png\\"],\\"datePublished\\":\\"2021-08-04T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-27T00:22:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"在Apache JMeter中在请求之间插入延迟 | Baeldung 1. 概述 当我们使用Apache JMeter进行测试时，我们可能希望在请求之间添加延迟，以更好地模拟用户行为。 在本教程中，我们将创建一个简单的测试计划。我们将查看用于调整生成的工作负载的可用参数，并配置计时器以添加延迟。 2. 使用案例 有时我们可能希望在请求之间添加延迟： ..."},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. 使用案例","slug":"_2-使用案例","link":"#_2-使用案例","children":[]},{"level":2,"title":"3. 使用延迟","slug":"_3-使用延迟","link":"#_3-使用延迟","children":[]},{"level":2,"title":"4. 测试计划","slug":"_4-测试计划","link":"#_4-测试计划","children":[{"level":3,"title":"4.1. 基本计划","slug":"_4-1-基本计划","link":"#_4-1-基本计划","children":[]},{"level":3,"title":"4.2. 添加请求","slug":"_4-2-添加请求","link":"#_4-2-添加请求","children":[]}]},{"level":2,"title":"5. 添加计时器","slug":"_5-添加计时器","link":"#_5-添加计时器","children":[{"level":3,"title":"5.1. 恒定计时器","slug":"_5-1-恒定计时器","link":"#_5-1-恒定计时器","children":[]},{"level":3,"title":"5.2. 恒定计时器的替代方案","slug":"_5-2-恒定计时器的替代方案","link":"#_5-2-恒定计时器的替代方案","children":[]}]},{"level":2,"title":"6. 结论","slug":"_6-结论","link":"#_6-结论","children":[]}],"git":{"createdTime":1722039772000,"updatedTime":1722039772000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":4.87,"words":1460},"filePathRelative":"posts/baeldung/2024-07-26/2024-07-26-Inserting Delays Between Requests in Apache JMeter.md","localizedDate":"2021年8月4日","excerpt":"\\n<h2>1. 概述</h2>\\n<p>当我们使用Apache JMeter进行测试时，我们可能希望在请求之间添加延迟，以更好地模拟用户行为。</p>\\n<p>在本教程中，我们将创建一个简单的测试计划。我们将查看用于调整生成的工作负载的可用参数，并配置计时器以添加延迟。</p>\\n<h2>2. 使用案例</h2>\\n<p>有时我们可能希望在请求之间添加延迟：</p>\\n<ul>\\n<li>避免因在给定时间内发送太多请求而产生的错误</li>\\n<li>模拟具有自然间隔的实际用户操作</li>\\n<li>调整每分钟的请求数量，以更精细地控制工作负载配置</li>\\n</ul>\\n<h2>3. 使用延迟</h2>\\n<p>首先，我们需要定义负载配置文件。这里我们有多种目标：</p>","autoDesc":true}');export{h as comp,g as data};
