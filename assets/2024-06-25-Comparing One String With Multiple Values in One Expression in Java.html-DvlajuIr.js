import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-CopElM2B.js";const p={},e=t(`<hr><h1 id="在java中使用单一表达式比较一个字符串与多个值" tabindex="-1"><a class="header-anchor" href="#在java中使用单一表达式比较一个字符串与多个值"><span>在Java中使用单一表达式比较一个字符串与多个值</span></a></h1><p>在本教程中，我们将讨论使用单一表达式在一组字符串中查找一个字符串的各种方法。</p><p>假设我们有一个水果&quot;Apple&quot;和一组水果&quot;Mango&quot;、&quot;Papaya&quot;、&quot;Apple&quot;、&quot;Pineapple&quot;等。现在我们将探索各种方法，以查看字符串&quot;Apple&quot;是否在这些水果组中。</p><h3 id="_2-问题介绍" tabindex="-1"><a class="header-anchor" href="#_2-问题介绍"><span>2. 问题介绍</span></a></h3><p>在我们进入涵盖单一表达式解决方案的下一节之前，让我们看看使用_if_条件的实现方式：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">boolean</span> <span class="token function">compareWithMultipleStringsUsingIf</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">String</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是一种非常基本的实现，也许是所有实现中最受欢迎的。我们遍历字符串数组，并在字符串str与strs中的任何一个元素匹配时返回true。</p><p>让我们看看这个方法是如何工作的：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenStrings_whenCompareWithMultipleStringsUsingIf_thenSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> presentString <span class="token operator">=</span> <span class="token string">&quot;Apple&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> notPresentString <span class="token operator">=</span> <span class="token string">&quot;Avocado&quot;</span><span class="token punctuation">;</span>

    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token function">compareWithMultipleStringsUsingIf</span><span class="token punctuation">(</span>presentString<span class="token punctuation">,</span> <span class="token string">&quot;Mango&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Papaya&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Pineapple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token function">compareWithMultipleStringsUsingIf</span><span class="token punctuation">(</span>notPresentString<span class="token punctuation">,</span> <span class="token string">&quot;Mango&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Papaya&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Pineapple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们正在查找如&quot;Apple&quot;和&quot;Avocado&quot;这样的字符串是否存在于一组水果中。但这涉及到多行代码。因此，让我们看看接下来的部分，了解涉及单一表达式的解决方案。</p><h3 id="_3-使用set匹配" tabindex="-1"><a class="header-anchor" href="#_3-使用set匹配"><span>3. 使用Set匹配</span></a></h3><p>java.util.Set具有contains()方法，用于检查集合中是否存在元素。因此，我们将在我们的用例中使用java.util.Set进行单一表达式：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">boolean</span> <span class="token function">compareWithMultipleStringsUsingSet</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">String</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Set</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用单一表达式，我们初始化了一个Set，然后使用contains()方法来查看str是否存在于Set中</strong>。然而，我们不能使用Set实现单一表达式的不区分大小写的匹配方法。</p><p>让我们测试一下compareWithMultipleStringsUsingSet()方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenStrings_whenCompareWithMultipleStringsUsingSet_thenSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> presentString <span class="token operator">=</span> <span class="token string">&quot;Apple&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> notPresentString <span class="token operator">=</span> <span class="token string">&quot;Avocado&quot;</span><span class="token punctuation">;</span>

    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token function">compareWithMultipleStringsUsingSet</span><span class="token punctuation">(</span>presentString<span class="token punctuation">,</span> <span class="token string">&quot;Mango&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Papaya&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Pineapple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token function">compareWithMultipleStringsUsingSet</span><span class="token punctuation">(</span>notPresentString<span class="token punctuation">,</span> <span class="token string">&quot;Mango&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Papaya&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Pineapple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>就像之前一样，我们首先传递&quot;Apple&quot;给方法，它返回true，当我们传递&quot;Avocado&quot;时，它返回false。因此，这个方法运作得很好。</p><h3 id="_4-使用list匹配" tabindex="-1"><a class="header-anchor" href="#_4-使用list匹配"><span>4. 使用List匹配</span></a></h3><p><strong>与Set类似，List也有contains()方法</strong>。因此让我们看看使用List的实现：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">boolean</span> <span class="token function">compareWithMultipleStringsUsingList</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">String</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>没有太大的区别，我们用List替换了Set。</p><p>让我们也看看它的实际应用：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenStrings_whenCompareWithMultipleStringsUsingList_thenSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> presentString <span class="token operator">=</span> <span class="token string">&quot;Apple&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> notPresentString <span class="token operator">=</span> <span class="token string">&quot;Avocado&quot;</span><span class="token punctuation">;</span>

    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token function">compareWithMultipleStringsUsingList</span><span class="token punctuation">(</span>presentString<span class="token punctuation">,</span> <span class="token string">&quot;Mango&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Papaya&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Pineapple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token function">compareWithMultipleStringsUsingList</span><span class="token punctuation">(</span>notPresentString<span class="token punctuation">,</span> <span class="token string">&quot;Mango&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Papaya&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Pineapple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>contains()方法按预期工作，返回正确的结果。</p><h3 id="_5-使用stream匹配" tabindex="-1"><a class="header-anchor" href="#_5-使用stream匹配"><span>5. 使用Stream匹配</span></a></h3><p><strong>Stream API鼓励使用声明性语句，因此它可以帮助我们实现单一表达式方法</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">boolean</span> <span class="token function">compareWithMultipleStringsUsingStream</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">String</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>str<span class="token operator">::</span><span class="token function">equals</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在单一表达式中，我们将字符串数组转换为Stream，然后使用anyMatch()方法。anyMatch()方法是Stream管道中的一个终端操作。Stream中的每个元素都与字符串str进行比较。然而，anyMatch()方法返回第一个匹配项。</p><p>让我们看看这个方法的实际应用：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenStrings_whenCompareWithMultipleStringsUsingStream_thenSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> presentString <span class="token operator">=</span> <span class="token string">&quot;Apple&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> notPresentString <span class="token operator">=</span> <span class="token string">&quot;Avocado&quot;</span><span class="token punctuation">;</span>

    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token function">compareWithMultipleStringsUsingStream</span><span class="token punctuation">(</span>presentString<span class="token punctuation">,</span> <span class="token string">&quot;Mango&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Papaya&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Pineapple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token function">compareWithMultipleStringsUsingStream</span><span class="token punctuation">(</span>notPresentString<span class="token punctuation">,</span> <span class="token string">&quot;Mango&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Papaya&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Pineapple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该方法按预期工作，当&quot;Apple&quot;和&quot;Avocado&quot;作为第一个参数时，分别返回true和false。</p><p>让我们看看使用Stream的不区分大小写的版本：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">boolean</span> <span class="token function">compareCaseInsensitiveWithMultipleStringsUsingStream</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">String</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>str<span class="token operator">::</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与早期版本不同，我们必须将equalsIgnoreCase()方法作为anyMatch()的谓词调用。</p><p>我们现在可以看看这个方法的实际应用：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenStrings_whenCompareCaseInsensitiveWithMultipleStringsUsingStream_thenSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> presentString <span class="token operator">=</span> <span class="token string">&quot;APPLE&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> notPresentString <span class="token operator">=</span> <span class="token string">&quot;AVOCADO&quot;</span><span class="token punctuation">;</span>

    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token function">compareCaseInsensitiveWithMultipleStringsUsingStream</span><span class="token punctuation">(</span>presentString<span class="token punctuation">,</span> <span class="token string">&quot;Mango&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Papaya&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Pineapple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token function">compareCaseInsensitiveWithMultipleStringsUsingStream</span><span class="token punctuation">(</span>notPresentString<span class="token punctuation">,</span> <span class="token string">&quot;Mango&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Papaya&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Pineapple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这次它可以在&quot;Mango&quot;、&quot;Papaya&quot;、&quot;Pineapple&quot;和&quot;Apple&quot;中找到&quot;APPLE&quot;。</p><h3 id="_6-使用stringutils匹配" tabindex="-1"><a class="header-anchor" href="#_6-使用stringutils匹配"><span>6. 使用StringUtils匹配</span></a></h3><p>在我们使用commons-lang3库中的StringUtils类之前，让我们首先用Maven依赖更新pom.xml：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\`
    \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>\`org.apache.commons\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\`
    \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`commons-lang3\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\`
    \`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\`3.13.0\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\`
\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，让我们使用StringUtils类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">boolean</span> <span class="token function">compareWithMultipleStringsUsingStringUtils</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">String</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">equalsAny</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> strs<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>StringUtils中的equalsAny()方法帮助我们用单一表达式实现我们的用例</strong>。</p><p>让我们看看这个方法的实际应用：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenStrings_whenCompareWithMultipleStringsUsingStringUtils_thenSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> presentString <span class="token operator">=</span> <span class="token string">&quot;Apple&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> notPresentString <span class="token operator">=</span> <span class="token string">&quot;Avocado&quot;</span><span class="token punctuation">;</span>

    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token function">compareWithMultipleStringsUsingStringUtils</span><span class="token punctuation">(</span>presentString<span class="token punctuation">,</span> <span class="token string">&quot;Mango&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Papaya&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Pineapple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token function">compareWithMultipleStringsUsingStringUtils</span><span class="token punctuation">(</span>notPresentString<span class="token punctuation">,</span> <span class="token string">&quot;Mango&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Papaya&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Pineapple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这也按预期工作，当&quot;Apple&quot;和&quot;Mango&quot;分别作为方法的参数时，返回true和false。</p><p>让我们也看看方法的不区分大小写版本：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">boolean</span> <span class="token function">compareCaseInsensitiveWithMultipleStringsUsingStringUtils</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">String</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">equalsAnyIgnoreCase</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> strs<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>我们使用了StringUtils的equalsAnyIgnoreCase()方法，而不是equalsAny()方法</strong>。</p><p>让我们看看这个方法是如何工作的：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenStrings_whenCompareCaseInsensitiveWithMultipleStringsUsingStringUtils_thenSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> presentString <span class="token operator">=</span> <span class="token string">&quot;APPLE&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> notPresentString <span class="token operator">=</span> <span class="token string">&quot;AVOCADO&quot;</span><span class="token punctuation">;</span>

    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token function">compareCaseInsensitiveWithMultipleStringsUsingStringUtils</span><span class="token punctuation">(</span>presentString<span class="token punctuation">,</span> <span class="token string">&quot;Mango&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Papaya&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Pineapple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token function">compareCaseInsensitiveWithMultipleStringsUsingStringUtils</span><span class="token punctuation">(</span>notPresentString<span class="token punctuation">,</span> <span class="token string">&quot;Mango&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Papaya&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Pineapple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们成功地在水果组中找到了字符串&quot;APPLE&quot;。</p><h3 id="_7-使用arrayutils匹配" tabindex="-1"><a class="header-anchor" href="#_7-使用arrayutils匹配"><span>7. 使用ArrayUtils匹配</span></a></h3><p>此外，我们将看到commons-lang库中的另一个类ArrayUtils：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">boolean</span> <span class="token function">compareWithMultipleStringsUsingArrayUtils</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">String</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">ArrayUtils</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>strs<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>ArrayUtils是一个实用工具类，用于检查一个元素是否存在于对象数组中</strong>。因此，我们利用它来帮助我们实现涉及字符串的用例。不幸的是，ArrayUtils没有提供任何方法以不区分大小写的方式查找字符串对象。因此我们不能为此实现单一表达式。</p><p>让我们看看compareWithAnyUsingArrayUtils()方法是如何工作的：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenStrings_whenCompareWithMultipleStringsUsingArrayUtils_thenSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> presentString <span class="token operator">=</span> <span class="token string">&quot;Apple&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> notPresentString <span class="token operator">=</span> <span class="token string">&quot;Avocado&quot;</span><span class="token punctuation">;</span>

    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token function">compareWithMultipleStringsUsingArrayUtils</span><span class="token punctuation">(</span>\`\`\`java
<span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token function">compareWithMultipleStringsUsingArrayUtils</span><span class="token punctuation">(</span>presentString<span class="token punctuation">,</span> <span class="token string">&quot;Mango&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Papaya&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Pineapple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token function">compareWithMultipleStringsUsingArrayUtils</span><span class="token punctuation">(</span>notPresentString<span class="token punctuation">,</span> <span class="token string">&quot;Mango&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Papaya&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Pineapple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>毫不意外，它也工作得很好。</p><h3 id="_8-使用正则表达式匹配" tabindex="-1"><a class="header-anchor" href="#_8-使用正则表达式匹配"><span>8. 使用正则表达式匹配</span></a></h3><p>正则表达式有助于查找模式，因此我们将在我们的用例中使用它：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">boolean</span> <span class="token function">compareWithMultipleStringsUsingRegularExpression</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">String</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;|&quot;</span><span class="token punctuation">,</span> strs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>String.join()方法创建了一个由竖线分隔的字符串列表，例如Mango|Papaya|Pineapple|Apple，用作正则表达式模式。在单一表达式中，我们使用字符串数组创建了正则表达式模式，然后使用matches()方法检查字符串str是否具有该模式。</p><p>是时候看看这个方法的实际应用了：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenStrings_whenCompareWithMultipleStringsUsingRegularExpression_thenSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> presentString <span class="token operator">=</span> <span class="token string">&quot;Apple&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> notPresentString <span class="token operator">=</span> <span class="token string">&quot;Avocado&quot;</span><span class="token punctuation">;</span>

    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token function">compareWithMultipleStringsUsingRegularExpression</span><span class="token punctuation">(</span>presentString<span class="token punctuation">,</span> <span class="token string">&quot;Mango&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Papaya&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Pineapple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token function">compareWithMultipleStringsUsingRegularExpression</span><span class="token punctuation">(</span>notPresentString<span class="token punctuation">,</span> <span class="token string">&quot;Mango&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Papaya&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Pineapple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该方法对参数&quot;Mango&quot;返回true，对&quot;Avocado&quot;返回false。因此，我们可以说它也是有效的。<strong>然而，正则表达式总是性能密集型的，所以最好避免使用它们</strong>。</p><p>现在，让我们看看不区分大小写的实现：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">boolean</span> <span class="token function">compareCaseInsensitiveWithMultipleStringsUsingRegularExpression</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">String</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">&quot;(?i)&quot;</span> <span class="token operator">+</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;|&quot;</span><span class="token punctuation">,</span> strs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们只需要通过在正则表达式前面加上(?i)来修改正则表达式，以进行不区分大小写的模式匹配。</p><p>让我们看看这个方法的实际应用：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenStrings_whenCompareCaseInsensitiveUsingRegularExpression_thenSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> presentString <span class="token operator">=</span> <span class="token string">&quot;APPLE&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> notPresentString <span class="token operator">=</span> <span class="token string">&quot;AVOCADO&quot;</span><span class="token punctuation">;</span>

    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token function">compareCaseInsensitiveWithMultipleStringsUsingRegularExpression</span><span class="token punctuation">(</span>presentString<span class="token punctuation">,</span> <span class="token string">&quot;Mango&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Papaya&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Pineapple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token function">compareCaseInsensitiveWithMultipleStringsUsingRegularExpression</span><span class="token punctuation">(</span>notPresentString<span class="token punctuation">,</span> <span class="token string">&quot;Mango&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Papaya&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Pineapple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过使用这个方法，我们现在可以在提供的水果组中找到&quot;APPLE&quot;。</p><h3 id="_9-基准测试" tabindex="-1"><a class="header-anchor" href="#_9-基准测试"><span>9. 基准测试</span></a></h3><p>让我们使用Java Microbenchmark Harness (JMH)计算每种单一表达式方法的平均执行时间。</p><p>让我们看看为执行基准测试配置的类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@State</span><span class="token punctuation">(</span><span class="token class-name">Scope<span class="token punctuation">.</span>Benchmark</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@BenchmarkMode</span><span class="token punctuation">(</span><span class="token class-name">Mode<span class="token punctuation">.</span>AverageTime</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Warmup</span><span class="token punctuation">(</span>iterations <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Measurement</span><span class="token punctuation">(</span>iterations <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@OutputTimeUnit</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">NANOSECONDS</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Fork</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompareAnyBenchmark</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> groupOfFruits <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;Apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Mango&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Dragon Fruit&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Water Melon&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Avocado&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Guava&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Orange&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> fruit <span class="token operator">=</span> <span class="token string">&quot;Apple&quot;</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Benchmark</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">compareWithMultipleStringsUsingStringUtils</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">equalsAny</span><span class="token punctuation">(</span>fruit<span class="token punctuation">,</span> groupOfFruits<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Benchmark</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">compareCaseInsensitiveWithMultipleStringsUsingStringUtils</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">equalsAnyIgnoreCase</span><span class="token punctuation">(</span>fruit<span class="token punctuation">,</span> groupOfFruits<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//其他基准测试方法...</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">Options</span> options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OptionsBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span><span class="token class-name">CompareAnyBenchmark</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">threads</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">shouldFailOnError</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">shouldDoGC</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">jvmArgs</span><span class="token punctuation">(</span><span class="token string">&quot;-server&quot;</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Runner</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类级别的注解设置了基准测试，以测量每种方法执行的平均时间，以纳秒为单位，运行五次。最后，main()方法是运行基准测试的。</p><p>现在，让我们看看到目前为止我们讨论的每种方法的平均执行时间：</p><table><thead><tr><th><strong>方法名称</strong></th><th><strong>平均时间</strong></th><th><strong>误差(±)</strong></th><th><strong>单位</strong></th></tr></thead><tbody><tr><td>compareWithMultipleStringsUsingArrayUtils()</td><td>1.150</td><td>0.031</td><td>ns/op</td></tr><tr><td>compareWithMultipleStringsUsingRegularExpression()</td><td>1175.809</td><td>177.940</td><td>ns/op</td></tr><tr><td>compareWithMultipleStringsUsingSet()</td><td>96.961</td><td>11.943</td><td>ns/op</td></tr><tr><td>compareWithMultipleStringsUsingList()</td><td>28.718</td><td>1.612</td><td>ns/op</td></tr><tr><td>compareWithMultipleStringsUsingStream()</td><td>47.266</td><td>3.968</td><td>ns/op</td></tr><tr><td>compareWithMultipleStringsUsingStringUtils</td><td>1.507</td><td>0.040</td><td>ns/op</td></tr><tr><td>compareCaseInsensitiveWithMultipleStringsUsingRegularExpression()</td><td>1803.497</td><td>645.104</td><td>ns/op</td></tr><tr><td>compareCaseInsensitiveWithMultipleStringsUsingStream()</td><td>63.079</td><td>56.509</td><td>ns/op</td></tr><tr><td>compareCaseInsensitiveWithMultipleStringsUsingStringUtils()</td><td>1.521</td><td>0.077</td><td>ns/op</td></tr></tbody></table><p>使用正则表达式的compareCaseInsensitiveWithMultipleStringsUsingRegularExpression()和compareWithMultipleStringsUsingRegularExpression()方法需要最长的执行时间。另一方面，compareWithMultipleStringsUsingArrayUtils()和compareWithMultipleStringsUsingStringUtils()方法需要的执行时间最少。</p><p><strong>不考虑任何外部库，compareWithMultipleStringsUsingStream()和compareCaseInsensitiveWithMultipleStringsUsingStream()方法具有最佳得分</strong>。此外，对于不区分大小写的搜索，性能变化也不大。</p><h3 id="_10-结论" tabindex="-1"><a class="header-anchor" href="#_10-结论"><span>10. 结论</span></a></h3><p>在本文中，我们探讨了在一组字符串中查找一个字符串存在的各种方法。使用java.util.Set、java.util.List、java.util.Stream和正则表达式，我们没有使用JDK之外的任何外部库。因此，建议使用它们而不是像commons-lang这样的外部库。此外，List实现是JDK库中的最佳选择。</p><p>像往常一样，代码示例可以在GitHub上找到。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>
OK</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,86),o=[e];function i(c,l){return a(),s("div",null,o)}const k=n(p,[["render",i],["__file","2024-06-25-Comparing One String With Multiple Values in One Expression in Java.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-06-25/2024-06-25-Comparing%20One%20String%20With%20Multiple%20Values%20in%20One%20Expression%20in%20Java.html","title":"在Java中使用单一表达式比较一个字符串与多个值","lang":"zh-CN","frontmatter":{"date":"2024-06-26T00:00:00.000Z","category":["Java","Programming"],"tag":["Java","String Comparison","Set","List","Stream"],"head":[["meta",{"name":"keywords","content":"Java, String Comparison, Set, List, Stream, Performance Benchmark"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-06-25/2024-06-25-Comparing%20One%20String%20With%20Multiple%20Values%20in%20One%20Expression%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"在Java中使用单一表达式比较一个字符串与多个值"}],["meta",{"property":"og:description","content":"在Java中使用单一表达式比较一个字符串与多个值 在本教程中，我们将讨论使用单一表达式在一组字符串中查找一个字符串的各种方法。 假设我们有一个水果\\"Apple\\"和一组水果\\"Mango\\"、\\"Papaya\\"、\\"Apple\\"、\\"Pineapple\\"等。现在我们将探索各种方法，以查看字符串\\"Apple\\"是否在这些水果组中。 2. 问题介绍 在我们进入涵盖单一表..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-25T16:36:26.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"String Comparison"}],["meta",{"property":"article:tag","content":"Set"}],["meta",{"property":"article:tag","content":"List"}],["meta",{"property":"article:tag","content":"Stream"}],["meta",{"property":"article:published_time","content":"2024-06-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-25T16:36:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"在Java中使用单一表达式比较一个字符串与多个值\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-26T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-25T16:36:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"在Java中使用单一表达式比较一个字符串与多个值 在本教程中，我们将讨论使用单一表达式在一组字符串中查找一个字符串的各种方法。 假设我们有一个水果\\"Apple\\"和一组水果\\"Mango\\"、\\"Papaya\\"、\\"Apple\\"、\\"Pineapple\\"等。现在我们将探索各种方法，以查看字符串\\"Apple\\"是否在这些水果组中。 2. 问题介绍 在我们进入涵盖单一表..."},"headers":[{"level":3,"title":"2. 问题介绍","slug":"_2-问题介绍","link":"#_2-问题介绍","children":[]},{"level":3,"title":"3. 使用Set匹配","slug":"_3-使用set匹配","link":"#_3-使用set匹配","children":[]},{"level":3,"title":"4. 使用List匹配","slug":"_4-使用list匹配","link":"#_4-使用list匹配","children":[]},{"level":3,"title":"5. 使用Stream匹配","slug":"_5-使用stream匹配","link":"#_5-使用stream匹配","children":[]},{"level":3,"title":"6. 使用StringUtils匹配","slug":"_6-使用stringutils匹配","link":"#_6-使用stringutils匹配","children":[]},{"level":3,"title":"7. 使用ArrayUtils匹配","slug":"_7-使用arrayutils匹配","link":"#_7-使用arrayutils匹配","children":[]},{"level":3,"title":"8. 使用正则表达式匹配","slug":"_8-使用正则表达式匹配","link":"#_8-使用正则表达式匹配","children":[]},{"level":3,"title":"9. 基准测试","slug":"_9-基准测试","link":"#_9-基准测试","children":[]},{"level":3,"title":"10. 结论","slug":"_10-结论","link":"#_10-结论","children":[]}],"git":{"createdTime":1719333386000,"updatedTime":1719333386000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":7.3,"words":2191},"filePathRelative":"posts/baeldung/2024-06-25/2024-06-25-Comparing One String With Multiple Values in One Expression in Java.md","localizedDate":"2024年6月26日","excerpt":"<hr>\\n<h1>在Java中使用单一表达式比较一个字符串与多个值</h1>\\n<p>在本教程中，我们将讨论使用单一表达式在一组字符串中查找一个字符串的各种方法。</p>\\n<p>假设我们有一个水果\\"Apple\\"和一组水果\\"Mango\\"、\\"Papaya\\"、\\"Apple\\"、\\"Pineapple\\"等。现在我们将探索各种方法，以查看字符串\\"Apple\\"是否在这些水果组中。</p>\\n<h3>2. 问题介绍</h3>\\n<p>在我们进入涵盖单一表达式解决方案的下一节之前，让我们看看使用_if_条件的实现方式：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">boolean</span> <span class=\\"token function\\">compareWithMultipleStringsUsingIf</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> str<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">String</span> <span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span> strs<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">for</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> s <span class=\\"token operator\\">:</span> strs<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>str<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">equals</span><span class=\\"token punctuation\\">(</span>s<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{k as comp,d as data};
