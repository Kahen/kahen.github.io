import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-D9qUUkNr.js";const e={},p=t('<h1 id="使用postgresql作为消息代理" tabindex="-1"><a class="header-anchor" href="#使用postgresql作为消息代理"><span>使用PostgreSQL作为消息代理</span></a></h1><p>在本教程中，我们将学习如何使用PostgreSQL的_LISTEN/NOTIFY_命令来实现一个简单的消息代理机制。</p><h2 id="_2-postgresql的-listen-notify-机制简介" tabindex="-1"><a class="header-anchor" href="#_2-postgresql的-listen-notify-机制简介"><span>2. PostgreSQL的_LISTEN/NOTIFY_机制简介</span></a></h2><p>简单来说，这些命令允许连接的客户端通过常规的PostgreSQL连接交换消息。客户端使用_NOTIFY_命令向一个_channel_发送通知，还可以附带一个可选的字符串有效载荷。</p><p>_channel_可以是任何有效的SQL标识符，它在传统的消息系统中像主题一样工作。这意味着有效载荷将被发送到该特定_channel_的所有活动监听者。如果没有附带有效载荷，监听者将只收到一个空的通知。</p><p>要开始接收通知，客户端使用_LISTEN_命令，它以_channel_名称作为其唯一参数。此命令立即返回，允许客户端使用相同的连接继续执行其他任务。</p><p>通知机制有一些重要属性：</p><ul><li>_Channel_名称在数据库内是唯一的</li><li>客户端无需特殊授权即可使用_LISTEN/NOTIFY_</li><li>如果在事务中使用_NOTIFY_，只有在事务成功完成时客户端才会收到通知</li></ul><p>此外，如果在同一事务中向同一个_channel_发送多个具有相同有效载荷的_NOTIFY_命令，客户端将只收到一个通知。</p><h2 id="_3-使用postgresql作为消息代理的理由" tabindex="-1"><a class="header-anchor" href="#_3-使用postgresql作为消息代理的理由"><span>3. 使用PostgreSQL作为消息代理的理由</span></a></h2><p>考虑到PostgreSQL通知的特性，我们可能会想知道何时使用它而不是像RabbitMQ这样的完整消息代理是一个可行的选择。像往常一样，有一些权衡。一般来说，选择后者意味着：</p><ul><li>更多复杂性——消息代理是另一个必须监控、升级等的组件</li><li>处理分布式事务带来的故障模式</li></ul><p>通知机制不受这些问题的影响：</p><ul><li>假设我们使用PostgreSQL作为主数据库，该功能已经就绪</li><li>没有分布式事务</li></ul><p>当然，也有限制：</p><ul><li>这是一个专有机制，需要永久采用PostgreSQL（或者至少直到进行重大重构）</li><li>没有对持久订阅者的直接支持。在客户端开始监听消息之前发送的通知将丢失</li></ul><p>即使有这些限制，这个机制也有一些潜在的应用：</p><ul><li>在“模块化单体”风格应用程序中的通知总线</li><li>分布式缓存失效</li><li>使用普通数据库表作为队列的轻量级消息代理</li><li>事件源架构</li></ul><h2 id="_4-在spring-boot应用程序中使用-listen-notify" tabindex="-1"><a class="header-anchor" href="#_4-在spring-boot应用程序中使用-listen-notify"><span>4. 在Spring Boot应用程序中使用_LISTEN/NOTIFY_</span></a></h2><p>现在我们已经对_LISTEN/NOTIFY_机制有了基本的了解，让我们继续构建一个使用它的简单Spring Boot测试应用程序。我们将创建一个简单的API，允许我们提交买卖订单。有效载荷包括我们愿意购买或出售的证券符号、价格和数量。我们还将添加一个API，允许我们根据其标识符查询订单。</p><p>到目前为止，没有什么特别的。但这里有一个问题：<strong>我们希望在将订单插入数据库后立即开始从缓存中提供订单查询服务</strong>。当然，我们可以实现缓存写入，但在需要扩展服务的分布式场景中，我们也需要一个分布式缓存。</p><p>这就是通知机制派上用场的地方：<strong>我们将在每次插入时发送一个_NOTIFY_，客户端将使用_LISTEN_将订单预加载到它们各自的本地缓存中</strong>。</p><h3 id="_4-1-项目依赖" tabindex="-1"><a class="header-anchor" href="#_4-1-项目依赖"><span>4.1. 项目依赖</span></a></h3><p>我们的示例应用程序需要一个WebMVC SpringBoot应用程序的标准依赖集，以及PostgreSQL驱动程序：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```org.springframework.boot```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```spring-boot-starter-web```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```2.7.12```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```org.springframework.boot```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```spring-boot-starter-data-jdbc```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```2.7.12```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```org.postgresql```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```postgresql```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```42.6.0```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>spring-boot-starter-web</em>、spring-boot-starter-data-jdbc和postgresql的最新版本可在Maven Central上找到。</p><h3 id="_4-2-通知服务" tabindex="-1"><a class="header-anchor" href="#_4-2-通知服务"><span>4.2. 通知服务</span></a></h3><p>由于通知机制特定于PostgreSQL，我们将在单个类中封装其一般行为：<em>NotifierService</em>。这样做可以避免这些细节泄露到应用程序的其他部分。这也简化了单元测试，因为我们可以用模拟版本替换此服务来实现不同的场景。</p><p>_NotifierService_有两个职责。首先，它提供了一个发送订单相关通知的门面：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotifierService</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">ORDERS_CHANNEL</span> <span class="token operator">=</span> <span class="token string">&quot;orders&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">JdbcTemplate</span> tpl<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Transactional</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyOrderCreated</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        tpl<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">&quot;NOTIFY &quot;</span> <span class="token operator">+</span> <span class="token constant">ORDERS_CHANNEL</span> <span class="token operator">+</span> <span class="token string">&quot;, &#39;&quot;</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n   <span class="token comment">// ... 其他方法省略</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其次，它有一个用于_Runnable_实例的工厂方法，应用程序使用这些实例来接收通知。这个工厂接受一个_Consumer_<code>&lt;_PGNotification_&gt;</code>对象，它有方法来检索与通知相关联的_channel_和_payload_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Runnable</span> <span class="token function">createNotificationHandler</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PGNotification</span><span class="token punctuation">&gt;</span></span>`` consumer<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n        tpl<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> c<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n            c<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">&quot;LISTEN &quot;</span> <span class="token operator">+</span> <span class="token constant">ORDERS_CHANNEL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">PGConnection</span> pgconn <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token class-name">PGConnection</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token class-name">PGNotification</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nts <span class="token operator">=</span> pgconn<span class="token punctuation">.</span><span class="token function">getNotifications</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span> nts <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> nts<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">continue</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n                <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token class-name">PGNotification</span> nt <span class="token operator">:</span> nts<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    consumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>nt<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们选择传递原始_PGNotification_以简化。在现实世界的场景中，我们通常会处理多个领域实体，我们可以使用泛型或类似技术扩展这个类以避免代码重复。</p><p>关于创建的_Runnable_的一些说明：</p><ul><li>数据库相关的逻辑使用提供的_JdbcTemplate_的_execute()_方法。这确保了适当的连接处理/清理并简化了错误处理</li><li>回调一直运行，直到当前线程被中断或某些运行时错误导致它返回</li></ul><p>注意使用_PGConnection_而不标准的JDBC_Connection_。我们需要这个来直接访问_getNotifications()_方法，该方法返回一个或多个排队的通知。</p><p>_getNotifications()_有两个变体。当不带参数调用时，它会轮询任何待处理的通知并返回它们。如果没有，它返回null。第二个变体接受一个整数，对应于等待通知的最大时间，直到返回null。最后，如果我们将0（零）作为超时值传递，_getNotifications()_将阻塞直到新的通知到达。</p><p>在应用程序初始化期间，我们使用一个_Configuration类_中的_CommandLineRunner_ bean，它将启动一个新的_Thread实际上开始接收通知_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListenerConfiguration</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Bean</span>\n    <span class="token class-name">CommandLineRunner</span> <span class="token function">startListener</span><span class="token punctuation">(</span><span class="token class-name">NotifierService</span> notifier<span class="token punctuation">,</span> <span class="token class-name">NotificationHandler</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n            <span class="token class-name">Runnable</span> listener <span class="token operator">=</span> notifier<span class="token punctuation">.</span><span class="token function">createNotificationHandler</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>listener<span class="token punctuation">,</span> <span class="token string">&quot;order-listener&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-连接处理" tabindex="-1"><a class="header-anchor" href="#_4-3-连接处理"><span>4.3. 连接处理</span></a></h3><p><strong>虽然技术上是可能的，但使用相同的连接处理通知和常规查询并不方便</strong>。人们将不得不在控制流中分散调用_getNotification()_，导致代码难以阅读和维护。</p><p>相反，标准做法是运行一个或多个专用线程来处理通知。每个线程都有自己的连接，这些连接将一直保持打开状态。<strong>这可能会在由Hikari或DBCP等池创建的连接中引起问题</strong>。</p><p>为了避免这些问题，我们的示例创建了一个专用的_DriverDataSource_，我们反过来使用它来创建_NotifierService_所需的_JdbcTemplate_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotifierConfiguration</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Bean</span>\n    <span class="token class-name">NotifierService</span> <span class="token function">notifier</span><span class="token punctuation">(</span><span class="token class-name">DataSourceProperties</span> props<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n        <span class="token class-name">DriverDataSource</span> ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DriverDataSource</span><span class="token punctuation">(</span>\n          props<span class="token punctuation">.</span><span class="token function">determineUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          props<span class="token punctuation">.</span><span class="token function">determineDriverClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          props<span class="token punctuation">.</span><span class="token function">determineUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          props<span class="token punctuation">.</span><span class="token function">determinePassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">JdbcTemplate</span> tpl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span>ds<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NotifierService</span><span class="token punctuation">(</span>tpl<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意我们共享了用于创建主Spring管理_DataSource_的相同连接属性。<strong>然而，我们没有将这个专用_DataSource_作为bean公开，这将禁用Spring Boot的自动配置功能。</strong></p><h3 id="_4-4-通知处理程序" tabindex="-1"><a class="header-anchor" href="#_4-4-通知处理程序"><span>4.4. 通知处理程序</span></a></h3><p>缓存逻辑的最后一部分是_NotificationHandler_类，它实现了_Consumer_<code>&lt;_Notification_&gt;</code>接口。这个类的作用是处理单个通知，并将配置的_Cache_填充_Order_实例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotificationHandler</span> <span class="token keyword">implements</span> <span class="token class-name">Consumer</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PGNotification</span><span class="token punctuation">&gt;</span></span>`` <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">OrdersService</span> orders<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">PGNotification</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Optional</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Order</span><span class="token punctuation">&gt;</span></span>``` order <span class="token operator">=</span> orders<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// ... 日志消息省略</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现使用_getName()_和_getParameter()_从通知中检索_channel_名称和订单标识符。在这里，我们可以假设通知总是预期的。这不是出于懒惰，而是源于_NotifierService_构造这个处理程序将被调用的_Runnable_的方式。</p><p>实际的逻辑很直接：我们使用OrderRepository_从数据库中获取_Order_并将其添加到缓存中：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrdersService</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">OrdersRepository</span> repo<span class="token punctuation">;</span>\n    <span class="token comment">// ... 其他私有字段省略</span>\n\n    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>readOnly <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">Optional</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Order</span><span class="token punctuation">&gt;</span></span>``` <span class="token function">findById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Optional</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Order</span><span class="token punctuation">&gt;</span></span>``` o <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>ordersCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token class-name">Order</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>o<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;findById: cache hit, id={}&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> o<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;findById: cache miss, id={}&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        o <span class="token operator">=</span> repo<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> o<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        ordersCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> o<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> o<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-测试" tabindex="-1"><a class="header-anchor" href="#_5-测试"><span>5. 测试</span></a></h2><p><strong>要看到通知机制的实际运行，最好的方法是启动两个或更多的测试应用程序实例，每个实例配置在不同的端口上</strong>。我们还需要一个工作的PostgreSQL实例，这两个实例都将连接到它。请参阅_application.properties_文件，并使用您的PostgreSQL实例连接详细信息进行修改。</p><p>接下来，为了启动我们的测试环境，我们将打开两个shell，并使用Maven运行应用程序。项目的_pom.xml_包含一个额外的配置文件，<em>instance1</em>，它将在不同的端口上启动应用程序：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 第一个shell:</span>\n$ mvn spring-boot:run\n<span class="token punctuation">..</span>. 许多消息（省略）\n<span class="token punctuation">[</span> restartedMain<span class="token punctuation">]</span> o.s.b.w.embedded.tomcat.TomcatWebServer <span class="token builtin class-name">:</span> Tomcat started on port<span class="token punctuation">(</span>s<span class="token punctuation">)</span>: <span class="token number">8080</span> <span class="token punctuation">(</span>http<span class="token punctuation">)</span> with context path <span class="token string">&#39;&#39;</span>\n<span class="token punctuation">[</span> restartedMain<span class="token punctuation">]</span> c.b.messaging.postgresql.Application <span class="token builtin class-name">:</span> Started Application <span class="token keyword">in</span> <span class="token number">2.615</span> seconds <span class="token punctuation">(</span>JVM running <span class="token keyword">for</span> <span class="token number">2.944</span><span class="token punctuation">)</span>\n<span class="token punctuation">[</span> restartedMain<span class="token punctuation">]</span> c.b.m.p.config.ListenerConfiguration <span class="token builtin class-name">:</span> Starting order listener thread<span class="token punctuation">..</span>.\n<span class="token punctuation">[</span> order-listener<span class="token punctuation">]</span> c.b.m.p.service.NotifierService <span class="token builtin class-name">:</span> notificationHandler: sending LISTEN command<span class="token punctuation">..</span>.\n\n<span class="token comment"># 第二个shell</span>\n<span class="token punctuation">..</span>. 许多息（省略）\n<span class="token punctuation">[</span> restartedMain<span class="token punctuation">]</span> o.s.b.w.embedded.tomcat.TomcatWebServer <span class="token builtin class-name">:</span> Tomcat started on port<span class="token punctuation">(</span>s<span class="token punctuation">)</span>: <span class="token number">8081</span> <span class="token punctuation">(</span>http<span class="token punctuation">)</span> with context path <span class="token string">&#39;&#39;</span>\n<span class="token punctuation">[</span> restartedMain<span class="token punctuation">]</span> c.b.messaging.postgresql.Application <span class="token builtin class-name">:</span> Started Application <span class="token keyword">in</span> <span class="token number">1.984</span> seconds <span class="token punctuation">(</span>JVM running <span class="token keyword">for</span> <span class="token number">2.274</span><span class="token punctuation">)</span>\n<span class="token punctuation">[</span> restartedMain<span class="token punctuation">]</span> c.b.m.p.config.ListenerConfiguration <span class="token builtin class-name">:</span> Starting order listener thread<span class="token punctuation">..</span>.\n<span class="token punctuation">[</span> order-listener<span class="token punctuation">]</span> c.b.m.p.service.NotifierService <span class="token builtin class-name">:</span> notificationHandler: sending LISTEN command<span class="token punctuation">..</span>.\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>过一段时间后，我们应该在每一个上看到一个日志消息，告诉我们应用程序已准备好接收请求。现在，让我们使用_curl_在另一个shell上创建我们的第一个_Order_：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">--location</span> <span class="token string">&#39;http://localhost:8080/orders/buy&#39;</span> <span class="token punctuation">\\</span>\n<span class="token parameter variable">--form</span> <span class="token string">&#39;symbol=&quot;BAEL&quot;&#39;</span> <span class="token punctuation">\\</span>\n<span class="token parameter variable">--form</span> <span class="token string">&#39;price=&quot;13.34&quot;&#39;</span> <span class="token punctuation">\\</span>\n<span class="token parameter variable">--form</span> <span class="token string">&#39;quantity=&quot;500&quot;&#39;</span>\n<span class="token punctuation">{</span><span class="token string">&quot;id&quot;</span>:30,<span class="token string">&quot;symbol&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;BAEL&quot;</span>,<span class="token string">&quot;orderType&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;BUY&quot;</span>,<span class="token string">&quot;price&quot;</span>:13.34,<span class="token string">&quot;quantity&quot;</span>:500<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行在端口8080上的应用程序实例将打印一些消息。<strong>我们还将在8081实例日志中看到它收到了一个通知</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span> order-listener<span class="token punctuation">]</span> c.b.m.p.service.NotificationHandler <span class="token builtin class-name">:</span> Notification received: <span class="token assign-left variable">pid</span><span class="token operator">=</span><span class="token number">5141</span>, <span class="token assign-left variable">name</span><span class="token operator">=</span>orders, <span class="token assign-left variable">param</span><span class="token operator">=</span><span class="token number">30</span>\n<span class="token punctuation">[</span> order-listener<span class="token punctuation">]</span> c.b.m.postgresql.service.OrdersService <span class="token builtin class-name">:</span> findById: cache miss, <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token number">30</span>\n<span class="token punctuation">[</span> order-listener<span class="token punctuation">]</span> c.b.m.p.service.NotificationHandler <span class="token builtin class-name">:</span> order details: Order<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">30</span>, <span class="token assign-left variable">symbol</span><span class="token operator">=</span>BAEL, <span class="token assign-left variable">orderType</span><span class="token operator">=</span>BUY, <span class="token assign-left variable">price</span><span class="token operator">=</span><span class="token number">13.34</span>, <span class="token assign-left variable">quantity</span><span class="token operator">=</span><span class="token number">500.00</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这证明了机制按预期工作。</p><p>最后，我们可以再次使用_curl_在_instance1_上查询创建的Order：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">curl</span> http://localhost:8081/orders/30\n<span class="token punctuation">{</span><span class="token string">&quot;id&quot;</span>:30,<span class="token string">&quot;symbol&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;BAEL&quot;</span>,<span class="token string">&quot;orderType&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;BUY&quot;</span>,<span class="token string">&quot;price&quot;</span>:13.34,<span class="token string">&quot;quantity&quot;</span>:500.00<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>正如预期的那样，我们得到了_Order_的详细信息。<strong>此外，应用程序日志还显示这些信息来自缓存</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>nio-8081-exec-1<span class="token punctuation">]</span> c.b.m.postgresql.service.OrdersService <span class="token builtin class-name">:</span> findById: cache hit, <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token number">30</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_6-结论" tabindex="-1"><a class="header-anchor" href="#_6-结论"><span>6. 结论</span></a></h2><p>在本文中，我们介绍了PostgreSQL的_NOTIFY/LISTEN_机制以及如何使用它来实现一个无需额外组件的轻量级消息代理。</p><p>像往常一样，所有代码都可以在GitHub上找到。</p><p>[文章结束]</p><p>OK</p>',69),o=[p];function c(i,l){return a(),s("div",null,o)}const k=n(e,[["render",c],["__file","2024-07-04-Using PostgreSQL as a Message Broker.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-04/2024-07-04-Using%20PostgreSQL%20as%20a%20Message%20Broker.html","title":"使用PostgreSQL作为消息代理","lang":"zh-CN","frontmatter":{"date":"2024-07-04T00:00:00.000Z","category":["Spring","PostgreSQL"],"tag":["LISTEN/NOTIFY","消息代理","Spring Boot"],"head":[["meta",{"name":"keywords","content":"PostgreSQL, Spring Boot, 消息代理, LISTEN/NOTIFY"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-04/2024-07-04-Using%20PostgreSQL%20as%20a%20Message%20Broker.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"使用PostgreSQL作为消息代理"}],["meta",{"property":"og:description","content":"使用PostgreSQL作为消息代理 在本教程中，我们将学习如何使用PostgreSQL的_LISTEN/NOTIFY_命令来实现一个简单的消息代理机制。 2. PostgreSQL的_LISTEN/NOTIFY_机制简介 简单来说，这些命令允许连接的客户端通过常规的PostgreSQL连接交换消息。客户端使用_NOTIFY_命令向一个_channel..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-04T15:35:52.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"LISTEN/NOTIFY"}],["meta",{"property":"article:tag","content":"消息代理"}],["meta",{"property":"article:tag","content":"Spring Boot"}],["meta",{"property":"article:published_time","content":"2024-07-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-04T15:35:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用PostgreSQL作为消息代理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-04T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-04T15:35:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"使用PostgreSQL作为消息代理 在本教程中，我们将学习如何使用PostgreSQL的_LISTEN/NOTIFY_命令来实现一个简单的消息代理机制。 2. PostgreSQL的_LISTEN/NOTIFY_机制简介 简单来说，这些命令允许连接的客户端通过常规的PostgreSQL连接交换消息。客户端使用_NOTIFY_命令向一个_channel..."},"headers":[{"level":2,"title":"2. PostgreSQL的_LISTEN/NOTIFY_机制简介","slug":"_2-postgresql的-listen-notify-机制简介","link":"#_2-postgresql的-listen-notify-机制简介","children":[]},{"level":2,"title":"3. 使用PostgreSQL作为消息代理的理由","slug":"_3-使用postgresql作为消息代理的理由","link":"#_3-使用postgresql作为消息代理的理由","children":[]},{"level":2,"title":"4. 在Spring Boot应用程序中使用_LISTEN/NOTIFY_","slug":"_4-在spring-boot应用程序中使用-listen-notify","link":"#_4-在spring-boot应用程序中使用-listen-notify","children":[{"level":3,"title":"4.1. 项目依赖","slug":"_4-1-项目依赖","link":"#_4-1-项目依赖","children":[]},{"level":3,"title":"4.2. 通知服务","slug":"_4-2-通知服务","link":"#_4-2-通知服务","children":[]},{"level":3,"title":"4.3. 连接处理","slug":"_4-3-连接处理","link":"#_4-3-连接处理","children":[]},{"level":3,"title":"4.4. 通知处理程序","slug":"_4-4-通知处理程序","link":"#_4-4-通知处理程序","children":[]}]},{"level":2,"title":"5. 测试","slug":"_5-测试","link":"#_5-测试","children":[]},{"level":2,"title":"6. 结论","slug":"_6-结论","link":"#_6-结论","children":[]}],"git":{"createdTime":1720107352000,"updatedTime":1720107352000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":9.01,"words":2704},"filePathRelative":"posts/baeldung/2024-07-04/2024-07-04-Using PostgreSQL as a Message Broker.md","localizedDate":"2024年7月4日","excerpt":"\\n<p>在本教程中，我们将学习如何使用PostgreSQL的_LISTEN/NOTIFY_命令来实现一个简单的消息代理机制。</p>\\n<h2>2. PostgreSQL的_LISTEN/NOTIFY_机制简介</h2>\\n<p>简单来说，这些命令允许连接的客户端通过常规的PostgreSQL连接交换消息。客户端使用_NOTIFY_命令向一个_channel_发送通知，还可以附带一个可选的字符串有效载荷。</p>\\n<p>_channel_可以是任何有效的SQL标识符，它在传统的消息系统中像主题一样工作。这意味着有效载荷将被发送到该特定_channel_的所有活动监听者。如果没有附带有效载荷，监听者将只收到一个空的通知。</p>","autoDesc":true}');export{k as comp,d as data};
