import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,o as e,a as s}from"./app-DWhzy7sT.js";const t={},p=s(`<h1 id="jpa与jdbc的比较" tabindex="-1"><a class="header-anchor" href="#jpa与jdbc的比较"><span>JPA与JDBC的比较</span></a></h1><p>在本教程中，我们将探讨Java数据库连接（JDBC）API和Java持久化API（JPA）之间的差异。</p><h2 id="_2-jdbc是什么" tabindex="-1"><a class="header-anchor" href="#_2-jdbc是什么"><span>2. JDBC是什么</span></a></h2><p>JDBC是Java应用程序与数据库通信的编程级接口。应用程序使用此API与JDBC管理器通信。这是我们的应用程序代码用来与数据库通信的通用API。在API之外，是供应商提供的符合JDBC标准的数据库驱动程序。</p><h2 id="_3-jpa是什么" tabindex="-1"><a class="header-anchor" href="#_3-jpa是什么"><span>3. JPA是什么</span></a></h2><p>JPA是允许我们将Java对象绑定到关系数据库记录的Java标准。<strong>它是对象关系映射（ORM）的一种可能方法</strong>，允许开发人员使用Java对象在关系数据库中检索、存储、更新和删除数据。JPA规范有几种实现可用。</p><h2 id="_4-jpa与jdbc" tabindex="-1"><a class="header-anchor" href="#_4-jpa与jdbc"><span>4. JPA与JDBC</span></a></h2><p><strong>在决定如何与后端数据库系统通信时，软件架构师面临重大的技术挑战</strong>。JPA和JDBC之间的辩论通常是决定因素，因为这两种数据库技术在处理持久数据方面采取了非常不同的方法。让我们分析它们之间的主要区别。</p><h3 id="_4-1-数据库交互" tabindex="-1"><a class="header-anchor" href="#_4-1-数据库交互"><span>4.1. 数据库交互</span></a></h3><p>JDBC允许我们编写SQL命令从关系数据库中读取数据并更新数据。<strong>与JDBC不同，JPA允许开发人员使用面向对象的语义构建数据库驱动的Java程序</strong>。JPA注解描述了给定的Java类及其变量如何映射到数据库中的给定表及其列。</p><p>让我们看看如何将_Employee_类映射到_employee_数据库表：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span>
<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;employee&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;employee_name&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> employeeName<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后JPA框架处理所有耗时且容易出错的编码工作，以在面向对象的Java代码和后端数据库之间进行转换。</p><h3 id="_4-2-管理关联" tabindex="-1"><a class="header-anchor" href="#_4-2-管理关联"><span>4.2. 管理关联</span></a></h3><p>在JDBC中，当我们需要在查询中将数据库表与关联时，我们需要编写完整的SQL查询，而<strong>使用JPA时，我们只需使用注解来创建一对一、一对多、多对一和多对多的关联</strong>。</p><p>假设我们的_employee_表与_communication_表有一对多的关系：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span>
<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;employee&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@OneToMany</span><span class="token punctuation">(</span>mappedBy <span class="token operator">=</span> <span class="token string">&quot;employee&quot;</span><span class="token punctuation">,</span> fetch <span class="token operator">=</span> <span class="token class-name">FetchType</span><span class="token punctuation">.</span><span class="token constant">EAGER</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@OrderBy</span><span class="token punctuation">(</span><span class="token string">&quot;firstName asc&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Set</span> communications<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个关系的拥有者是_Communication_，所以我们在_Employee_中使用_mappedBy_属性使其成为双向关系。</p><h3 id="_4-3-数据库依赖性" tabindex="-1"><a class="header-anchor" href="#_4-3-数据库依赖性"><span>4.3. 数据库依赖性</span></a></h3><p>JDBC是数据库依赖的，这意味着必须为不同的数据库编写不同的脚本。另一方面，<strong>JPA是不依赖于数据库的，意味着相同的代码可以在多种数据库中使用，几乎不需要（或不需要）修改</strong>。</p><h3 id="_4-4-异常处理" tabindex="-1"><a class="header-anchor" href="#_4-4-异常处理"><span>4.4. 异常处理</span></a></h3><p>因为JDBC抛出受检异常，如_SQLException_，我们必须在_try-catch_块中编写它。<strong>另一方面，JPA框架只使用未受检异常，如Hibernate</strong>。因此，我们不需要在每个使用它们的地方捕获或声明它们。</p><h3 id="_4-5-性能" tabindex="-1"><a class="header-anchor" href="#_4-5-性能"><span>4.5. 性能</span></a></h3><p>JPA和JDBC之间的差异本质上是谁在编写代码：JPA框架或本地开发人员。无论如何，我们都得处理对象关系阻抗不匹配问题。</p><p>公平地说，当我们不正确编写SQL查询时，JDBC的性能可能会非常缓慢。在决定这两种技术时，性能不应该是争议点。专业开发人员完全有能力生产出无论使用哪种技术都能同样运行良好的Java应用程序。</p><h3 id="_4-6-jdbc依赖性" tabindex="-1"><a class="header-anchor" href="#_4-6-jdbc依赖性"><span>4.6. JDBC依赖性</span></a></h3><p>基于JPA的应用程序在底层仍然使用JDBC。因此，当我们使用JPA时，我们的代码实际上正在使用JDBC API进行所有数据库交互。换句话说，<strong>JPA作为抽象层，隐藏了开发人员的低级JDBC调用，使数据库编程大大简化</strong>。</p><h3 id="_4-7-事务管理" tabindex="-1"><a class="header-anchor" href="#_4-7-事务管理"><span>4.7. 事务管理</span></a></h3><p>在JDBC中，事务管理是通过使用提交和回滚显式处理的。另一方面，<strong>JPA中隐式提供了事务管理</strong>。</p><h2 id="_5-优点和缺点" tabindex="-1"><a class="header-anchor" href="#_5-优点和缺点"><span>5. 优点和缺点</span></a></h2><p><strong>JDBC相对于JPA的最明显好处是它更容易理解</strong>。另一方面，如果开发人员不理解JPA框架或数据库设计的内部工作，他们将无法编写出好的代码。</p><p>此外，许多开发人员认为JPA更适合更复杂的应用程序。但是，如果应用程序将使用一个简单的数据库，我们不计划将其迁移到不同的数据库供应商，JDBC被认为是更好的选择。</p><p>对于开发人员来说，JPA相对于JDBC的主要优势是他们可以使用面向对象的原则和最佳实践来编写Java应用程序，而不必担心数据库语义。因此，<strong>开发可以更快地完成，特别是当软件开发人员缺乏对SQL和关系数据库的扎实理解时</strong>。</p><p>另外，因为一个经过充分测试和健壮的框架正在处理数据库和Java应用程序之间的交互，所以当我们使用JPA时，我们应该会看到数据库映射层的错误减少。</p><h2 id="_6-结论" tabindex="-1"><a class="header-anchor" href="#_6-结论"><span>6. 结论</span></a></h2><p>在这个快速教程中，我们探讨了JPA和JDBC之间的主要区别。</p><p>虽然JPA带来了许多优势，但如果JPA不适合我们当前的应用程序要求，我们还有许多其他高质量的替代方案可供使用。</p>`,37),o=[p];function l(i,c){return e(),n("div",null,o)}const J=a(t,[["render",l],["__file","2024-07-28-A Comparison Between JPA and JDBC.html.vue"]]),u=JSON.parse('{"path":"/posts/baeldung/2024-07-28/2024-07-28-A%20Comparison%20Between%20JPA%20and%20JDBC.html","title":"JPA与JDBC的比较","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java Persistence API","Java Database Connectivity"],"tag":["JPA","JDBC"],"head":[["meta",{"name":"keywords","content":"JPA, JDBC, ORM, 数据库, Java"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-28/2024-07-28-A%20Comparison%20Between%20JPA%20and%20JDBC.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"JPA与JDBC的比较"}],["meta",{"property":"og:description","content":"JPA与JDBC的比较 在本教程中，我们将探讨Java数据库连接（JDBC）API和Java持久化API（JPA）之间的差异。 2. JDBC是什么 JDBC是Java应用程序与数据库通信的编程级接口。应用程序使用此API与JDBC管理器通信。这是我们的应用程序代码用来与数据库通信的通用API。在API之外，是供应商提供的符合JDBC标准的数据库驱动程..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-28T18:04:18.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"JPA"}],["meta",{"property":"article:tag","content":"JDBC"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-28T18:04:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JPA与JDBC的比较\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-28T18:04:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"JPA与JDBC的比较 在本教程中，我们将探讨Java数据库连接（JDBC）API和Java持久化API（JPA）之间的差异。 2. JDBC是什么 JDBC是Java应用程序与数据库通信的编程级接口。应用程序使用此API与JDBC管理器通信。这是我们的应用程序代码用来与数据库通信的通用API。在API之外，是供应商提供的符合JDBC标准的数据库驱动程..."},"headers":[{"level":2,"title":"2. JDBC是什么","slug":"_2-jdbc是什么","link":"#_2-jdbc是什么","children":[]},{"level":2,"title":"3. JPA是什么","slug":"_3-jpa是什么","link":"#_3-jpa是什么","children":[]},{"level":2,"title":"4. JPA与JDBC","slug":"_4-jpa与jdbc","link":"#_4-jpa与jdbc","children":[{"level":3,"title":"4.1. 数据库交互","slug":"_4-1-数据库交互","link":"#_4-1-数据库交互","children":[]},{"level":3,"title":"4.2. 管理关联","slug":"_4-2-管理关联","link":"#_4-2-管理关联","children":[]},{"level":3,"title":"4.3. 数据库依赖性","slug":"_4-3-数据库依赖性","link":"#_4-3-数据库依赖性","children":[]},{"level":3,"title":"4.4. 异常处理","slug":"_4-4-异常处理","link":"#_4-4-异常处理","children":[]},{"level":3,"title":"4.5. 性能","slug":"_4-5-性能","link":"#_4-5-性能","children":[]},{"level":3,"title":"4.6. JDBC依赖性","slug":"_4-6-jdbc依赖性","link":"#_4-6-jdbc依赖性","children":[]},{"level":3,"title":"4.7. 事务管理","slug":"_4-7-事务管理","link":"#_4-7-事务管理","children":[]}]},{"level":2,"title":"5. 优点和缺点","slug":"_5-优点和缺点","link":"#_5-优点和缺点","children":[]},{"level":2,"title":"6. 结论","slug":"_6-结论","link":"#_6-结论","children":[]}],"git":{"createdTime":1722189858000,"updatedTime":1722189858000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":4.68,"words":1404},"filePathRelative":"posts/baeldung/2024-07-28/2024-07-28-A Comparison Between JPA and JDBC.md","localizedDate":"2022年4月1日","excerpt":"\\n<p>在本教程中，我们将探讨Java数据库连接（JDBC）API和Java持久化API（JPA）之间的差异。</p>\\n<h2>2. JDBC是什么</h2>\\n<p>JDBC是Java应用程序与数据库通信的编程级接口。应用程序使用此API与JDBC管理器通信。这是我们的应用程序代码用来与数据库通信的通用API。在API之外，是供应商提供的符合JDBC标准的数据库驱动程序。</p>\\n<h2>3. JPA是什么</h2>\\n<p>JPA是允许我们将Java对象绑定到关系数据库记录的Java标准。<strong>它是对象关系映射（ORM）的一种可能方法</strong>，允许开发人员使用Java对象在关系数据库中检索、存储、更新和删除数据。JPA规范有几种实现可用。</p>","autoDesc":true}');export{J as comp,u as data};
