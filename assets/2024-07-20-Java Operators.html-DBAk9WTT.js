import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as e}from"./app-Bx_7oN2A.js";const p={},t=e(`<h1 id="java运算符-baeldung" tabindex="-1"><a class="header-anchor" href="#java运算符-baeldung"><span>Java运算符 | Baeldung</span></a></h1><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p>运算符是任何编程语言的基本构建块。我们使用运算符对值和变量执行操作。</p><p>Java提供了许多组运算符。它们根据功能进行分类。</p><p>在本教程中，我们将遍历所有Java运算符，以理解它们的功能以及如何使用它们。</p><h2 id="_2-算术运算符" tabindex="-1"><a class="header-anchor" href="#_2-算术运算符"><span>2. 算术运算符</span></a></h2><p>我们使用算术运算符执行简单的数学运算。我们应该注意，算术运算符仅适用于原始数字类型及其包装类型，例如int和Integer。</p><p>接下来，让我们看看算术运算符组中的运算符。</p><h3 id="_2-1-加法运算符" tabindex="-1"><a class="header-anchor" href="#_2-1-加法运算符"><span>2.1. 加法运算符</span></a></h3><p>加法运算符(+)允许我们添加两个值或连接两个字符串：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> ten <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> youAndMe <span class="token operator">=</span> <span class="token string">&quot;You &quot;</span> <span class="token operator">+</span> <span class="token string">&quot;and&quot;</span> <span class="token operator">+</span> <span class="token string">&quot; Me&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-减法运算符" tabindex="-1"><a class="header-anchor" href="#_2-2-减法运算符"><span>2.2. 减法运算符</span></a></h3><p>通常，我们使用减法运算符(-)从一个值中减去另一个值：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> five <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> negative80 <span class="token operator">=</span> <span class="token number">20</span> <span class="token operator">-</span> <span class="token number">100</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-乘法运算符" tabindex="-1"><a class="header-anchor" href="#_2-3-乘法运算符"><span>2.3. 乘法运算符</span></a></h3><p>乘法运算符(*)用于乘以两个值或变量：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> hundred <span class="token operator">=</span> <span class="token number">20</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> fifteen <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-除法运算符" tabindex="-1"><a class="header-anchor" href="#_2-4-除法运算符"><span>2.4. 除法运算符</span></a></h3><p>除法运算符(/)允许我们将左手边的值除以右手边的值：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> four <span class="token operator">=</span> <span class="token number">20</span> <span class="token operator">/</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> seven <span class="token operator">=</span> <span class="token number">15</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们对两个整数值（byte、short、int和long）使用除法运算符时，我们应该注意到<strong>结果仅是商值。余数不包括在内</strong>。</p><p>正如上面的例子所示，如果我们计算15 / 2，商是7，余数是1。因此，我们有15 / 2 = 7。</p><h3 id="_2-5-模运算符" tabindex="-1"><a class="header-anchor" href="#_2-5-模运算符"><span>2.5. 模运算符</span></a></h3><p>我们可以使用除法运算符获得商。然而，如果我们只想要除法计算的<strong>余数</strong>，我们可以使用模运算符(%)：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> one <span class="token operator">=</span> <span class="token number">15</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> zero <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">%</span> <span class="token number">5</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-一元运算符" tabindex="-1"><a class="header-anchor" href="#_3-一元运算符"><span>3. 一元运算符</span></a></h2><p>顾名思义，一元运算符只需要一个单一的操作数。例如，我们通常使用一元运算符来递增、递减或否定一个变量或值。</p><p>现在，让我们看看Java中一元运算符的细节。</p><h3 id="_3-1-一元加运算符" tabindex="-1"><a class="header-anchor" href="#_3-1-一元加运算符"><span>3.1. 一元加运算符</span></a></h3><p>一元加运算符(+)表示正值。如果数字是正的，我们可以省略‘+’运算符：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> five <span class="token operator">=</span> <span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 与：int five = 5相同</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-2-一元减运算符" tabindex="-1"><a class="header-anchor" href="#_3-2-一元减运算符"><span>3.2. 一元减运算符</span></a></h3><p>与一元加运算符相反，一元减运算符(-)否定一个值或表达式：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> negativeFive <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> eighty <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">20</span> <span class="token operator">-</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-逻辑补运算符" tabindex="-1"><a class="header-anchor" href="#_3-3-逻辑补运算符"><span>3.3. 逻辑补运算符</span></a></h3><p>逻辑补运算符(!)也称为“非”运算符。我们可以用它来反转布尔变量或值的值：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">boolean</span> aTrue <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> bFalse <span class="token operator">=</span> <span class="token operator">!</span>aTrue<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-递增运算符" tabindex="-1"><a class="header-anchor" href="#_3-4-递增运算符"><span>3.4. 递增运算符</span></a></h3><p>递增运算符(++)允许我们将变量的值增加1：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
number<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// number = 6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-5-递减运算符" tabindex="-1"><a class="header-anchor" href="#_3-5-递减运算符"><span>3.5. 递减运算符</span></a></h3><p>递减运算符(--)与递增运算符相反。它将变量的值减少1：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
number<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">// number = 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们应该记住，<strong>递增和递减运算符只能用于变量</strong>。例如，“int a = 5; a++;”是正确的。然而，表达式“5++”将不会被编译。</p><h2 id="_4-关系运算符" tabindex="-1"><a class="header-anchor" href="#_4-关系运算符"><span>4. 关系运算符</span></a></h2><p>关系运算符也可以称为“比较运算符”。基本上，我们使用这些运算符来比较两个值或变量。</p><h3 id="_4-1-等于运算符" tabindex="-1"><a class="header-anchor" href="#_4-1-等于运算符"><span>4.1. 等于运算符</span></a></h3><p>我们使用等于运算符(==)比较两边的值。如果它们相等，操作返回true：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> number1 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> number2 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> theyAreEqual <span class="token operator">=</span> number1 <span class="token operator">==</span> number2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>等于运算符非常简单明了。另一方面，Object类提供了equals()方法。由于Object类是所有Java类的超类，所有Java对象都可以使用equals()方法相互比较。</p><p>当我们想要比较两个对象时——例如，当我们比较Long对象或比较Strings时——<strong>我们应该明智地选择equals()方法和等于运算符的比较方法</strong>。</p><h3 id="_4-2-不等于运算符" tabindex="-1"><a class="header-anchor" href="#_4-2-不等于运算符"><span>4.2. 不等于运算符</span></a></h3><p>不等于运算符(!=)与‘==’运算符相反。如果两边的值不相等，操作返回true：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> number1 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> number2 <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> notEqual <span class="token operator">=</span> number1 <span class="token operator">!=</span> number2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-大于运算符" tabindex="-1"><a class="header-anchor" href="#_4-3-大于运算符"><span>4.3. 大于运算符</span></a></h3><p>当我们使用大于运算符(&gt;)比较两个值时，如果左手边的值大于右手边的值，它返回true：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> number1 <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> number2 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> greater <span class="token operator">=</span> number1 <span class="token operator">&gt;</span> number2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4-大于等于运算符" tabindex="-1"><a class="header-anchor" href="#_4-4-大于等于运算符"><span>4.4. 大于等于运算符</span></a></h3><p>大于等于运算符(&gt;=)比较两边的值，并在左手边的操作数大于或等于右手边的操作数时返回true：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> number1 <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> number2 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> greaterThanOrEqualTo <span class="token operator">=</span> number1 <span class="token operator">&gt;=</span> number2<span class="token punctuation">;</span>
number1 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
greaterThanOrEqualTo <span class="token operator">=</span> number1 <span class="token operator">&gt;=</span> number2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-5-小于运算符" tabindex="-1"><a class="header-anchor" href="#_4-5-小于运算符"><span>4.5. 小于运算符</span></a></h3><p>小于运算符(\`&lt;)比较两边的两个值，并在左手边的值小于右手边的值时返回true：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> number1 <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> number2 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> lessThan <span class="token operator">=</span> number1 <span class="token operator">&lt;</span> number2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-6-小于等于运算符" tabindex="-1"><a class="header-anchor" href="#_4-6-小于等于运算符"><span>4.6. 小于等于运算符</span></a></h3><p>同样，小于等于运算符(&lt;=)比较两边的值，并在左手边的操作数小于或等于右手边的操作数时返回true：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> number1 <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> number2 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> lessThanOrEqualTo <span class="token operator">=</span> number1 <span class="token operator">&lt;=</span> number2<span class="token punctuation">;</span>
number1 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
lessThanOrEqualTo <span class="token operator">=</span> number1 <span class="token operator">&lt;=</span> number2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-逻辑运算符" tabindex="-1"><a class="header-anchor" href="#_5-逻辑运算符"><span>5. 逻辑运算符</span></a></h2><p>Java中有<strong>两个逻辑运算符：逻辑与和或运算符</strong>。基本上，它们的功能与数字电子学中的与门和或门非常相似。</p><p>通常，我们使用逻辑运算符与两个操作数，它们是变量或可以被评估为布尔值的表达式。</p><p>接下来，让我们更仔细地看看它们。</p><h3 id="_5-1-逻辑与运算符" tabindex="-1"><a class="header-anchor" href="#_5-1-逻辑与运算符"><span>5.1. 逻辑与运算符</span></a></h3><p>逻辑与运算符(&amp;&amp;)仅当两个操作数都是true时返回true：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> number1 <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> number2 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> resultTrue <span class="token operator">=</span> <span class="token punctuation">(</span>number1 <span class="token operator">&gt;</span>\` <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>number1 <span class="token operator">&gt;</span> number2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-逻辑或运算符" tabindex="-1"><a class="header-anchor" href="#_5-2-逻辑或运算符"><span>5.2. 逻辑或运算符</span></a></h3><p>与‘&amp;&amp;’运算符不同，逻辑或运算符(||)如果至少有一个操作数是true就返回true：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> number1 <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> number2 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> resultTrue <span class="token operator">=</span> <span class="token punctuation">(</span>number1 <span class="token operator">&gt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>number1 <span class="token operator">&gt;</span> number2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>**我们应该注意到逻辑或运算符具有短路效果：**一旦一个操作数被评估为true，它就返回true，而不会评估剩余的操作数。</p><h2 id="_6-三元运算符" tabindex="-1"><a class="header-anchor" href="#_6-三元运算符"><span>6. 三元运算符</span></a></h2><p>三元运算符是if-then-else语句的简写形式。它之所以被称为三元，是因为它有三个操作数。首先，让我们看看标准if-then-else语句的语法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span> condition <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    expression1
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    expression2
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以将上面的if-then-else语句转换为使用三元运算符的紧凑版本：</p><p>让我们看看它的语法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>condition <span class="token operator">?</span> expression1 <span class="token operator">:</span> expression2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来，让我们通过一个简单的例子来理解三元运算符的工作原理：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> greaterThan50 <span class="token operator">=</span> number <span class="token operator">&gt;</span> <span class="token number">50</span> <span class="token operator">?</span> <span class="token string">&quot;The number is greater than 50&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;The number is NOT greater than 50&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-位运算符和位移运算符" tabindex="-1"><a class="header-anchor" href="#_7-位运算符和位移运算符"><span>7. 位运算符和位移运算符</span></a></h2><p>由于文章“Java位运算符”涵盖了位运算符和位移运算符的详细信息，我们将在本教程中简要总结这些运算符。</p><h3 id="_7-1-位与运算符" tabindex="-1"><a class="header-anchor" href="#_7-1-位与运算符"><span>7.1. 位与运算符</span></a></h3><p>位与运算符(&amp;)返回输入值的逐位与结果：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> number1 <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> number2 <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> twelve <span class="token operator">=</span> number1 <span class="token operator">&amp;</span> number2<span class="token punctuation">;</span> <span class="token comment">// 00001100 &amp; 00001110 = 00001100 = 12</span>
\`\`\`

### <span class="token number">7.2</span><span class="token punctuation">.</span> 位或运算符

位或运算符<span class="token punctuation">(</span><span class="token operator">|</span><span class="token punctuation">)</span>返回输入值的逐位或结果：

\`\`\`java
<span class="token keyword">int</span> number1 <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> number2 <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> fourteen <span class="token operator">=</span> number1 <span class="token operator">|</span> number2<span class="token punctuation">;</span> <span class="token comment">// 00001100 | 00001110 = 00001110 = 14</span>
\`\`\`

### <span class="token number">7.3</span><span class="token punctuation">.</span> 位异或运算符

位异或运算符<span class="token punctuation">(</span><span class="token operator">^</span><span class="token punctuation">)</span>返回输入值的逐位异或结果：

\`\`\`java
<span class="token keyword">int</span> number1 <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> number2 <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> two <span class="token operator">=</span> number1 <span class="token operator">^</span> number2<span class="token punctuation">;</span> <span class="token comment">// 00001100 ^ 00001110 = 00000010 = 2</span>
\`\`\`

### <span class="token number">7.4</span><span class="token punctuation">.</span> 位补运算符

位补运算符<span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">)</span>是一个一元运算符。它返回值的补码表示，即反转输入值的所有位：

\`\`\`java
<span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> negative13 <span class="token operator">=</span> <span class="token operator">~</span>number<span class="token punctuation">;</span> <span class="token comment">// ~00001100 = 11110011 = -13</span>
\`\`\`

### <span class="token number">7.5</span><span class="token punctuation">.</span> 左移位运算符

位移运算符将位向左或向右移动给定次数。

左移位运算符<span class="token punctuation">(</span>\`<span class="token operator">&lt;&lt;</span><span class="token punctuation">)</span>将位向左移动由右手边操作数定义的次数。左移后，右侧的空位用<span class="token number">0</span>填充。

接下来，让我们将数字<span class="token number">12</span>左移两次：

\`\`\`java
<span class="token keyword">int</span> fourtyeight <span class="token operator">=</span> <span class="token number">12</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 00001100 &lt;&lt; 2 = 00110000 = 48</span>
\`\`\`

<span class="token operator">*</span><span class="token operator">*</span>_n <span class="token operator">&lt;&lt;</span> x_ 与将数字_n_ 乘以_2的x次方具有相同效果。<span class="token operator">*</span><span class="token operator">*</span>

### <span class="token number">7.6</span><span class="token punctuation">.</span> 有符号右移位运算符

有符号右移位运算符<span class="token punctuation">(</span><span class="token operator">&gt;</span>\`<span class="token operator">&gt;</span><span class="token punctuation">)</span>将位向右移动由右手边操作数定义的次数，并将<span class="token number">0</span>填充到由于移动而留下的空位。

我们应该注意到<span class="token operator">*</span><span class="token operator">*</span>位移后的最左边位置取决于符号扩展<span class="token operator">*</span><span class="token operator">*</span>。

接下来，让我们对数字<span class="token number">12</span>和<span class="token operator">-</span><span class="token number">12</span>进行“有符号右移”两次，看看差异：

\`\`\`java
<span class="token keyword">int</span> three <span class="token operator">=</span> <span class="token number">12</span> <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 00001100 &gt;&gt; 2 = 00000011 = 3</span>
<span class="token keyword">int</span> negativeThree <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">12</span> <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 11110100 &gt;&gt; 2 = 11111101 = -3</span>
\`\`\`

正如上面的第二个例子所示，如果数字是负数，每次位移后的最左边位置将由符号扩展设置。

<span class="token operator">*</span><span class="token operator">*</span>_n <span class="token operator">&gt;&gt;</span> x_ 与将数字_n_ 除以_2的x次方具有相同效果。<span class="token operator">*</span><span class="token operator">*</span>

### <span class="token number">7.7</span><span class="token punctuation">.</span> 无符号右移位运算符

无符号右移位运算符<span class="token punctuation">(</span><span class="token operator">&gt;&gt;&gt;</span><span class="token punctuation">)</span>的工作原理与‘<span class="token operator">&gt;&gt;</span>’运算符类似。唯一的区别是，在位移后，<span class="token operator">*</span><span class="token operator">*</span>最左边的位被设置为<span class="token number">0</span><span class="token operator">*</span><span class="token operator">*</span>。

接下来，让我们对数字<span class="token number">12</span>和<span class="token operator">-</span><span class="token number">12</span>进行无符号右移两次，看看差异：

\`\`\`java
<span class="token keyword">int</span> three <span class="token operator">=</span> <span class="token number">12</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 00001100 &gt;&gt;&gt; 2 = 00000011 = 3</span>
<span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">12</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 结果 = 1073741821 (11111111111111111111111111110100 &gt;&gt;&gt; 2 = 00111111111111111111111111111101)</span>
\`\`\`

正如我们在上面第二个例子中看到的，<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">&gt;&gt;&gt;</span>运算符无论数字是正数还是负数，都会用<span class="token number">0</span>填充左侧的空位。<span class="token operator">*</span><span class="token operator">*</span>

## <span class="token number">8.</span> _instanceof_ 运算符

有时，当我们有一个对象时，我们想测试它是否是给定类型实例。_instanceof_运算符可以帮助我们做到这一点：

\`\`\`java
<span class="token keyword">boolean</span> resultTrue <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">;</span>
\`\`\`

## <span class="token number">9.</span> 赋值运算符

我们使用赋值运算符为变量赋值。接下来，让我们看看<span class="token class-name">Java</span>中可以使用的赋值运算符。

### <span class="token number">9.1</span><span class="token punctuation">.</span> 简单赋值运算符

简单赋值运算符<span class="token punctuation">(</span><span class="token operator">=</span><span class="token punctuation">)</span>是<span class="token class-name">Java</span>中一个简单但重要的运算符。实际上，我们在前面的示例中多次使用了它。它将右侧的值赋给左侧的操作数：

\`\`\`java
<span class="token keyword">int</span> seven <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
\`\`\`

### <span class="token number">9.2</span><span class="token punctuation">.</span> 复合赋值

我们已经学习了算术运算符。<span class="token operator">*</span><span class="token operator">*</span>我们可以将算术运算符与简单赋值运算符结合，创建复合赋值。<span class="token operator">*</span><span class="token operator">*</span>

例如，我们可以以复合方式编写“_a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">5_</span>”：“_a <span class="token operator">+=</span> <span class="token number">5_</span>”。

最后，让我们通过示例遍历<span class="token class-name">Java</span>中支持的所有复合赋值：

\`\`\`java
<span class="token comment">// 假设所有变量(a,b,c,d,e)的初始值为10</span>
a <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// a = 14, 与 a = a + 4 相同</span>
b <span class="token operator">-=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// b = 6, 与 b = b - 4 相同</span>
c <span class="token operator">*=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// c = 40, 与 c = c * 4 相同</span>
d <span class="token operator">/=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// d = 2, 与 d = d / 4 相同</span>
e <span class="token operator">%=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// e = 2, 与 e = e % 4 相同</span>
\`\`\`

## <span class="token number">10.</span> 结论

<span class="token class-name">Java</span>为不同的功能提供了许多组运算符。在本文中，我们已经遍历了<span class="token class-name">Java</span>中的运算符。

<span class="token operator">!</span><span class="token punctuation">[</span>img<span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>baeldung<span class="token punctuation">.</span>com<span class="token operator">/</span>wp<span class="token operator">-</span>content<span class="token operator">/</span>themes<span class="token operator">/</span>baeldung<span class="token operator">/</span>icon<span class="token operator">/</span>logo<span class="token punctuation">.</span>svg<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">[</span>img<span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>secure<span class="token punctuation">.</span>gravatar<span class="token punctuation">.</span>com<span class="token operator">/</span>avatar<span class="token operator">/</span>c6c28b2e0205c9b87004ebaade245ff1<span class="token operator">?</span>s<span class="token operator">=</span><span class="token number">50</span><span class="token operator">&amp;</span>r<span class="token operator">=</span>g<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">[</span>img<span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>baeldung<span class="token punctuation">.</span>com<span class="token operator">/</span>wp<span class="token operator">-</span>content<span class="token operator">/</span>uploads<span class="token operator">/</span>custom_avatars<span class="token operator">/</span><span class="token class-name">Eric</span><span class="token operator">-</span><span class="token class-name">Martin</span><span class="token operator">-</span><span class="token number">150</span>x150<span class="token punctuation">.</span>jpg<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">[</span>img<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">/</span>wp<span class="token operator">-</span>content<span class="token operator">/</span>uploads<span class="token operator">/</span><span class="token number">2022</span><span class="token operator">/</span><span class="token number">04</span><span class="token operator">/</span>announcement<span class="token operator">-</span>icon<span class="token punctuation">.</span>png<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">[</span>img<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">/</span>wp<span class="token operator">-</span>content<span class="token operator">/</span>uploads<span class="token operator">/</span><span class="token number">2016</span><span class="token operator">/</span><span class="token number">05</span><span class="token operator">/</span>baeldung<span class="token operator">-</span>rest<span class="token operator">-</span>post<span class="token operator">-</span>footer<span class="token operator">-</span>main<span class="token operator">-</span><span class="token number">1.2</span><span class="token number">.0</span><span class="token punctuation">.</span>jpg<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">[</span>img<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">/</span>wp<span class="token operator">-</span>content<span class="token operator">/</span>uploads<span class="token operator">/</span><span class="token number">2016</span><span class="token operator">/</span><span class="token number">05</span><span class="token operator">/</span>baeldung<span class="token operator">-</span>rest<span class="token operator">-</span>post<span class="token operator">-</span>footer<span class="token operator">-</span>icn<span class="token operator">-</span><span class="token number">1.0</span><span class="token number">.0</span><span class="token punctuation">.</span>png<span class="token punctuation">)</span>

<span class="token constant">OK</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,90),o=[t];function l(r,c){return s(),a("div",null,o)}const d=n(p,[["render",l],["__file","2024-07-20-Java Operators.html.vue"]]),k=JSON.parse('{"path":"/posts/baeldung/2024-07-20/2024-07-20-Java%20Operators.html","title":"Java运算符 | Baeldung","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","Operators"],"tag":["Java Operators","Tutorial"],"head":[["meta",{"name":"keywords","content":"Java Operators, Tutorial, Baeldung"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-20/2024-07-20-Java%20Operators.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Java运算符 | Baeldung"}],["meta",{"property":"og:description","content":"Java运算符 | Baeldung 1. 概述 运算符是任何编程语言的基本构建块。我们使用运算符对值和变量执行操作。 Java提供了许多组运算符。它们根据功能进行分类。 在本教程中，我们将遍历所有Java运算符，以理解它们的功能以及如何使用它们。 2. 算术运算符 我们使用算术运算符执行简单的数学运算。我们应该注意，算术运算符仅适用于原始数字类型及其..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.baeldung.com/wp-content/themes/baeldung/icon/logo.svg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-20T13:46:22.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java Operators"}],["meta",{"property":"article:tag","content":"Tutorial"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-20T13:46:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java运算符 | Baeldung\\",\\"image\\":[\\"https://www.baeldung.com/wp-content/themes/baeldung/icon/logo.svg\\",\\"https://secure.gravatar.com/avatar/c6c28b2e0205c9b87004ebaade245ff1?s=50&r=g\\",\\"https://www.baeldung.com/wp-content/uploads/custom_avatars/Eric-Martin-150x150.jpg\\",\\"https://www.kahen.xyz/wp-content/uploads/2022/04/announcement-icon.png\\",\\"https://www.kahen.xyz/wp-content/uploads/2016/05/baeldung-rest-post-footer-main-1.2.0.jpg\\",\\"https://www.kahen.xyz/wp-content/uploads/2016/05/baeldung-rest-post-footer-icn-1.0.0.png\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-20T13:46:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Java运算符 | Baeldung 1. 概述 运算符是任何编程语言的基本构建块。我们使用运算符对值和变量执行操作。 Java提供了许多组运算符。它们根据功能进行分类。 在本教程中，我们将遍历所有Java运算符，以理解它们的功能以及如何使用它们。 2. 算术运算符 我们使用算术运算符执行简单的数学运算。我们应该注意，算术运算符仅适用于原始数字类型及其..."},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. 算术运算符","slug":"_2-算术运算符","link":"#_2-算术运算符","children":[{"level":3,"title":"2.1. 加法运算符","slug":"_2-1-加法运算符","link":"#_2-1-加法运算符","children":[]},{"level":3,"title":"2.2. 减法运算符","slug":"_2-2-减法运算符","link":"#_2-2-减法运算符","children":[]},{"level":3,"title":"2.3. 乘法运算符","slug":"_2-3-乘法运算符","link":"#_2-3-乘法运算符","children":[]},{"level":3,"title":"2.4. 除法运算符","slug":"_2-4-除法运算符","link":"#_2-4-除法运算符","children":[]},{"level":3,"title":"2.5. 模运算符","slug":"_2-5-模运算符","link":"#_2-5-模运算符","children":[]}]},{"level":2,"title":"3. 一元运算符","slug":"_3-一元运算符","link":"#_3-一元运算符","children":[{"level":3,"title":"3.1. 一元加运算符","slug":"_3-1-一元加运算符","link":"#_3-1-一元加运算符","children":[]},{"level":3,"title":"3.2. 一元减运算符","slug":"_3-2-一元减运算符","link":"#_3-2-一元减运算符","children":[]},{"level":3,"title":"3.3. 逻辑补运算符","slug":"_3-3-逻辑补运算符","link":"#_3-3-逻辑补运算符","children":[]},{"level":3,"title":"3.4. 递增运算符","slug":"_3-4-递增运算符","link":"#_3-4-递增运算符","children":[]},{"level":3,"title":"3.5. 递减运算符","slug":"_3-5-递减运算符","link":"#_3-5-递减运算符","children":[]}]},{"level":2,"title":"4. 关系运算符","slug":"_4-关系运算符","link":"#_4-关系运算符","children":[{"level":3,"title":"4.1. 等于运算符","slug":"_4-1-等于运算符","link":"#_4-1-等于运算符","children":[]},{"level":3,"title":"4.2. 不等于运算符","slug":"_4-2-不等于运算符","link":"#_4-2-不等于运算符","children":[]},{"level":3,"title":"4.3. 大于运算符","slug":"_4-3-大于运算符","link":"#_4-3-大于运算符","children":[]},{"level":3,"title":"4.4. 大于等于运算符","slug":"_4-4-大于等于运算符","link":"#_4-4-大于等于运算符","children":[]},{"level":3,"title":"4.5. 小于运算符","slug":"_4-5-小于运算符","link":"#_4-5-小于运算符","children":[]},{"level":3,"title":"4.6. 小于等于运算符","slug":"_4-6-小于等于运算符","link":"#_4-6-小于等于运算符","children":[]}]},{"level":2,"title":"5. 逻辑运算符","slug":"_5-逻辑运算符","link":"#_5-逻辑运算符","children":[{"level":3,"title":"5.1. 逻辑与运算符","slug":"_5-1-逻辑与运算符","link":"#_5-1-逻辑与运算符","children":[]},{"level":3,"title":"5.2. 逻辑或运算符","slug":"_5-2-逻辑或运算符","link":"#_5-2-逻辑或运算符","children":[]}]},{"level":2,"title":"6. 三元运算符","slug":"_6-三元运算符","link":"#_6-三元运算符","children":[]},{"level":2,"title":"7. 位运算符和位移运算符","slug":"_7-位运算符和位移运算符","link":"#_7-位运算符和位移运算符","children":[{"level":3,"title":"7.1. 位与运算符","slug":"_7-1-位与运算符","link":"#_7-1-位与运算符","children":[]}]}],"git":{"createdTime":1721483182000,"updatedTime":1721483182000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":8.81,"words":2644},"filePathRelative":"posts/baeldung/2024-07-20/2024-07-20-Java Operators.md","localizedDate":"2022年4月1日","excerpt":"\\n<h2>1. 概述</h2>\\n<p>运算符是任何编程语言的基本构建块。我们使用运算符对值和变量执行操作。</p>\\n<p>Java提供了许多组运算符。它们根据功能进行分类。</p>\\n<p>在本教程中，我们将遍历所有Java运算符，以理解它们的功能以及如何使用它们。</p>\\n<h2>2. 算术运算符</h2>\\n<p>我们使用算术运算符执行简单的数学运算。我们应该注意，算术运算符仅适用于原始数字类型及其包装类型，例如int和Integer。</p>\\n<p>接下来，让我们看看算术运算符组中的运算符。</p>\\n<h3>2.1. 加法运算符</h3>\\n<p>加法运算符(+)允许我们添加两个值或连接两个字符串：</p>","autoDesc":true}');export{d as comp,k as data};
