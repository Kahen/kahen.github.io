import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as e}from"./app-Bx_7oN2A.js";const t={},i=e(`<h1 id="在kotlin中检查数字是否为质数" tabindex="-1"><a class="header-anchor" href="#在kotlin中检查数字是否为质数"><span>在Kotlin中检查数字是否为质数</span></a></h1><p>质数是一个除了1和它自身外没有其他除数的数字。非质数称为合数。此外，1既不被视为质数也不被视为合数。还有，负数也不被视为质数。</p><p>本教程将探讨在Kotlin中检查数字是否为质数的多种方法。</p><h2 id="_2-使用迭代" tabindex="-1"><a class="header-anchor" href="#_2-使用迭代"><span>2. 使用迭代</span></a></h2><p>我们可以使用for循环来检查数字是否有任何除数。**利用一个数字的因子之一必须小于或等于它的平方根这一属性，我们只迭代到数字的平方根。**这样，我们可以通过减少迭代次数来提高算法的效率。</p><p>让我们看看实现：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>fun isPrimeUsingIteration(num: Int): Boolean {
    if (num &lt; 2) return false
    val sqrt = sqrt(num.toDouble()).toInt()
    for (i in 2..sqrt) {
        if (num % i == 0) {
            return false        }
    }
    return true
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用一个范围来生成输入数字平方根之前的潜在因子。如果输入小于2，我们直接返回false，因为它不能是质数。</p><h2 id="_3-使用函数式编程范式" tabindex="-1"><a class="header-anchor" href="#_3-使用函数式编程范式"><span>3. 使用函数式编程范式</span></a></h2><p>我们可以利用Kotlin提供的函数式编程特性来重写迭代方法：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>fun isPrimeUsingFunctionalProgram(num: Int): Boolean {
    if (num &lt; 2) return false
    val sqrt = sqrt(num.toDouble()).toInt()
    return (2..sqrt).none { num % it == 0 }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这种方法中，<strong>我们利用范围上的_none()_方法来检查是否有任何元素是输入数字的因子</strong>。一旦它发现指定范围内有一个数字是输入的因子，这个方法会立即返回false。如果没有因子，则返回true。</p><h2 id="_4-使用biginteger" tabindex="-1"><a class="header-anchor" href="#_4-使用biginteger"><span>4. 使用BigInteger</span></a></h2><p>先前检查质数的方法对于较小的数字工作得很好。随着输入数字的增大，算法的效率降低。幸运的是，像Miller-Rabin测试这样的更有效算法更适合大数字。</p><p>Java中的_BigInteger_类已经实现了使用Miller-Rabin算法的质数检查。让我们看看使用_BigInteger_的实现：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>fun isPrimeBigInt(num: Int): Boolean {
    if (num &lt; 2) return false
    return num.toBigInteger().isProbablePrime(100)
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，<strong>我们使用_BigInteger_上的_isProbablePrime()_方法来检查数字是否为质数</strong>。它接受一个确定性值，该值由算法用来确定所需的迭代次数。另外，需要注意的是，使用非常高的确定性值会导致性能下降。</p><h2 id="_5-结论" tabindex="-1"><a class="header-anchor" href="#_5-结论"><span>5. 结论</span></a></h2><p>本文探讨了检查数字是否为质数的不同方法。除了自定义检查外，我们还看了Java标准库中更有效的实现方式。</p><p>和往常一样，本文中使用的示例代码可以在GitHub上找到。--- date: 2022-11-01 category:</p><ul><li>Kotlin</li><li>Programming tag:</li><li>prime number</li><li>algorithm</li><li>BigInteger head:</li><li><ul><li>meta</li><li>name: keywords content: Kotlin, prime number check, algorithm, BigInteger, programming</li></ul></li></ul><hr><h1 id="在kotlin中检查数字是否为质数-1" tabindex="-1"><a class="header-anchor" href="#在kotlin中检查数字是否为质数-1"><span>在Kotlin中检查数字是否为质数</span></a></h1><p>质数是一个除了1和它自身外没有其他除数的数字。非质数称为合数。此外，1既不被视为质数也不被视为合数。还有，负数也不被视为质数。</p><p>本教程将探讨在Kotlin中检查数字是否为质数的多种方法。</p><h2 id="_2-使用迭代-1" tabindex="-1"><a class="header-anchor" href="#_2-使用迭代-1"><span>2. 使用迭代</span></a></h2><p>我们可以使用for循环来检查数字是否有任何除数。**利用一个数字的因子之一必须小于或等于它的平方根这一属性，我们只迭代到数字的平方根。**这样，我们可以通过减少迭代次数来提高算法的效率。</p><p>让我们看看实现：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">isPrimeUsingIteration</span><span class="token punctuation">(</span>num<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token keyword">val</span> sqrt <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">2</span><span class="token operator">..</span>sqrt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用一个范围来生成输入数字平方根之前的潜在因子。如果输入小于2，我们直接返回false，因为它不能是质数。</p><h2 id="_3-使用函数式编程范式-1" tabindex="-1"><a class="header-anchor" href="#_3-使用函数式编程范式-1"><span>3. 使用函数式编程范式</span></a></h2><p>我们可以利用Kotlin提供的函数式编程特性来重写迭代方法：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">isPrimeUsingFunctionalProgram</span><span class="token punctuation">(</span>num<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token keyword">val</span> sqrt <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">..</span>sqrt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">none</span> <span class="token punctuation">{</span> num <span class="token operator">%</span> it <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这种方法中，<strong>我们利用范围上的<code>none()</code>方法来检查是否有任何元素是输入数字的因子</strong>。一旦它发现指定范围内有一个数字是输入的因子，这个方法会立即返回false。如果没有因子，则返回true。</p><h2 id="_4-使用biginteger-1" tabindex="-1"><a class="header-anchor" href="#_4-使用biginteger-1"><span>4. 使用BigInteger</span></a></h2><p>先前检查质数的方法对于较小的数字工作得很好。随着输入数字的增大，算法的效率降低。幸运的是，像Miller-Rabin测试这样的更有效算法更适合大数字。</p><p>Java中的<code>BigInteger</code>类已经实现了使用Miller-Rabin算法的质数检查。让我们看看使用<code>BigInteger</code>的实现：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">isPrimeBigInt</span><span class="token punctuation">(</span>num<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token keyword">return</span> num<span class="token punctuation">.</span><span class="token function">toBigInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isProbablePrime</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，<strong>我们使用<code>BigInteger</code>上的<code>isProbablePrime()</code>方法来检查数字是否为质数</strong>。它接受一个确定性值，该值由算法用来确定所需的迭代次数。另外，需要注意的是，使用非常高的确定性值会导致性能下降。</p><h2 id="_5-结论-1" tabindex="-1"><a class="header-anchor" href="#_5-结论-1"><span>5. 结论</span></a></h2><p>本文探讨了检查数字是否为质数的不同方法。除了自定义检查外，我们还看了Java标准库中更有效的实现方式。</p><p>和往常一样，本文中使用的示例代码可以在GitHub上找到。</p><p>OK</p>`,43),o=[i];function l(p,r){return s(),a("div",null,o)}const d=n(t,[["render",l],["__file","2024-07-12-Check if a Number Is Prime in Kotlin.html.vue"]]),m=JSON.parse('{"path":"/posts/baeldung/2024-07-12/2024-07-12-Check%20if%20a%20Number%20Is%20Prime%20in%20Kotlin.html","title":"在Kotlin中检查数字是否为质数","lang":"zh-CN","frontmatter":{"date":"2022-11-01T00:00:00.000Z","category":["Kotlin","Programming"],"tag":["prime number","algorithm","BigInteger"],"head":[["meta",{"name":"keywords","content":"Kotlin, prime number check, algorithm, BigInteger, programming"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-12/2024-07-12-Check%20if%20a%20Number%20Is%20Prime%20in%20Kotlin.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"在Kotlin中检查数字是否为质数"}],["meta",{"property":"og:description","content":"在Kotlin中检查数字是否为质数 质数是一个除了1和它自身外没有其他除数的数字。非质数称为合数。此外，1既不被视为质数也不被视为合数。还有，负数也不被视为质数。 本教程将探讨在Kotlin中检查数字是否为质数的多种方法。 2. 使用迭代 我们可以使用for循环来检查数字是否有任何除数。**利用一个数字的因子之一必须小于或等于它的平方根这一属性，我们只..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-12T11:03:41.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"prime number"}],["meta",{"property":"article:tag","content":"algorithm"}],["meta",{"property":"article:tag","content":"BigInteger"}],["meta",{"property":"article:published_time","content":"2022-11-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-12T11:03:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"在Kotlin中检查数字是否为质数\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-11-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-12T11:03:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"在Kotlin中检查数字是否为质数 质数是一个除了1和它自身外没有其他除数的数字。非质数称为合数。此外，1既不被视为质数也不被视为合数。还有，负数也不被视为质数。 本教程将探讨在Kotlin中检查数字是否为质数的多种方法。 2. 使用迭代 我们可以使用for循环来检查数字是否有任何除数。**利用一个数字的因子之一必须小于或等于它的平方根这一属性，我们只..."},"headers":[{"level":2,"title":"2. 使用迭代","slug":"_2-使用迭代","link":"#_2-使用迭代","children":[]},{"level":2,"title":"3. 使用函数式编程范式","slug":"_3-使用函数式编程范式","link":"#_3-使用函数式编程范式","children":[]},{"level":2,"title":"4. 使用BigInteger","slug":"_4-使用biginteger","link":"#_4-使用biginteger","children":[]},{"level":2,"title":"5. 结论","slug":"_5-结论","link":"#_5-结论","children":[]},{"level":2,"title":"2. 使用迭代","slug":"_2-使用迭代-1","link":"#_2-使用迭代-1","children":[]},{"level":2,"title":"3. 使用函数式编程范式","slug":"_3-使用函数式编程范式-1","link":"#_3-使用函数式编程范式-1","children":[]},{"level":2,"title":"4. 使用BigInteger","slug":"_4-使用biginteger-1","link":"#_4-使用biginteger-1","children":[]},{"level":2,"title":"5. 结论","slug":"_5-结论-1","link":"#_5-结论-1","children":[]}],"git":{"createdTime":1720782221000,"updatedTime":1720782221000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":4.47,"words":1342},"filePathRelative":"posts/baeldung/2024-07-12/2024-07-12-Check if a Number Is Prime in Kotlin.md","localizedDate":"2022年11月1日","excerpt":"\\n<p>质数是一个除了1和它自身外没有其他除数的数字。非质数称为合数。此外，1既不被视为质数也不被视为合数。还有，负数也不被视为质数。</p>\\n<p>本教程将探讨在Kotlin中检查数字是否为质数的多种方法。</p>\\n<h2>2. 使用迭代</h2>\\n<p>我们可以使用for循环来检查数字是否有任何除数。**利用一个数字的因子之一必须小于或等于它的平方根这一属性，我们只迭代到数字的平方根。**这样，我们可以通过减少迭代次数来提高算法的效率。</p>\\n<p>让我们看看实现：</p>\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code>fun isPrimeUsingIteration(num: Int): Boolean {\\n    if (num &lt; 2) return false\\n    val sqrt = sqrt(num.toDouble()).toInt()\\n    for (i in 2..sqrt) {\\n        if (num % i == 0) {\\n            return false        }\\n    }\\n    return true\\n}\\n</code></pre></div>","autoDesc":true}');export{d as comp,m as data};
