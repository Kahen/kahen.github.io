import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-DYgT5Xsy.js";const p={},e=t('<h1 id="通过java程序创建并运行apache-jmeter测试脚本" tabindex="-1"><a class="header-anchor" href="#通过java程序创建并运行apache-jmeter测试脚本"><span>通过Java程序创建并运行Apache JMeter测试脚本</span></a></h1><p>Apache JMeter是一个开源的基于Java的应用程序，旨在分析和衡量Web应用程序的性能。它允许测试人员模拟对服务器、网络或对象的重负载，以分析不同负载下的总体性能。JMeter提供了一个易于使用的GUI，用于定义、执行和查看各种负载测试的报告。</p><p>尽管JMeter提供了一个用户友好的GUI来创建和执行测试脚本，但在某些情况下，利用Java编程进行自动化可能更有益，特别是在持续集成和部署流程中。</p><p>在本教程中，我们将探讨如何使用Java以编程方式创建和执行Apache JMeter测试脚本，并提供一个实际示例来说明所涉及的步骤。</p><h2 id="_2-设置环境" tabindex="-1"><a class="header-anchor" href="#_2-设置环境"><span>2. <strong>设置环境</strong></span></a></h2><p>在我们开始编码之前，让我们确保所需的环境已经设置好。要安装JMeter，我们可以从JMeter网站下载。JMeter与Java 8或更高版本兼容。或者，在macOS上，我们可以使用Homebrew使用以下命令安装JMeter：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>brew <span class="token function">install</span> jmeter\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们还需要配置我们的Java项目以包含JMeter属性。对于Maven项目，在_pom.xml_文件中添加以下依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>``org.apache.jmeter``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>``ApacheJMeter_core``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>``5.6.3``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>``org.apache.jmeter``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>``ApacheJMeter_http``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>``5.6.3``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>``\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些依赖项包括Apache JMeter的核心功能和HTTP组件。它们为在JMeter测试计划中创建和运行JMeter测试计划、发送HTTP请求以及处理HTTP响应提供了必要的类和实用工具。</p><h2 id="_3-创建测试脚本和环境变量文件" tabindex="-1"><a class="header-anchor" href="#_3-创建测试脚本和环境变量文件"><span>3. 创建测试脚本和环境变量文件</span></a></h2><p>我们将生成一个简单的测试脚本，以模拟对指定URL或应用程序的HTTP GET请求。此脚本的主要目的是对指定的目标应用程序执行负载测试，本例中为_https://www.google.com_。</p><p>它将通过发送多个并发请求来模拟对提供的URL的真正负载，使我们能够评估应用程序在不同负载级别下的性能。在下面的脚本中，我们首先检查_JMETER_HOME_环境变量以定位JMeter安装目录。</p><p>验证后，我们初始化JMeter引擎_StandardJMeterEngine_并创建测试计划_TestPlan_。以下是实现此目的的Java代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenJMeterScript_whenUsingCode_thenExecuteViaJavaProgram</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> jmeterHome <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">&quot;JMETER_HOME&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>jmeterHome <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;JMETER_HOME environment variable is not set.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token class-name">String</span> file <span class="token operator">=</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span><span class="token class-name">JMeterLiveTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">&quot;jmeter.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">JMeterUtils</span><span class="token punctuation">.</span><span class="token function">setJMeterHome</span><span class="token punctuation">(</span>jmeterHome<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">JMeterUtils</span><span class="token punctuation">.</span><span class="token function">loadJMeterProperties</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">JMeterUtils</span><span class="token punctuation">.</span><span class="token function">initLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">StandardJMeterEngine</span> jmeter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandardJMeterEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">HTTPSamplerProxy</span> httpSampler <span class="token operator">=</span> <span class="token function">getHttpSamplerProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">LoopController</span> loopController <span class="token operator">=</span> <span class="token function">getLoopController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">ThreadGroup</span> threadGroup <span class="token operator">=</span> <span class="token function">getThreadGroup</span><span class="token punctuation">(</span>loopController<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">TestPlan</span> testPlan <span class="token operator">=</span> <span class="token function">getTestPlan</span><span class="token punctuation">(</span>threadGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">HashTree</span> testPlanTree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">HashTree</span> threadGroupHashTree <span class="token operator">=</span> testPlanTree<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>testPlan<span class="token punctuation">,</span> threadGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    threadGroupHashTree<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>httpSampler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">SaveService</span><span class="token punctuation">.</span><span class="token function">saveTree</span><span class="token punctuation">(</span>testPlanTree<span class="token punctuation">,</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">newOutputStream</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;script.jmx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Summariser</span> summer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> summariserName <span class="token operator">=</span> <span class="token class-name">JMeterUtils</span><span class="token punctuation">.</span><span class="token function">getPropDefault</span><span class="token punctuation">(</span><span class="token string">&quot;summariser.name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;summary&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>summariserName<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        summer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Summariser</span><span class="token punctuation">(</span>summariserName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token class-name">String</span> logFile <span class="token operator">=</span> <span class="token string">&quot;output-logs.jtl&quot;</span><span class="token punctuation">;</span>\n    <span class="token class-name">ResultCollector</span> logger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultCollector</span><span class="token punctuation">(</span>summer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    logger<span class="token punctuation">.</span><span class="token function">setFilename</span><span class="token punctuation">(</span>logFile<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    testPlanTree<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>testPlanTree<span class="token punctuation">.</span><span class="token function">getArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> logger<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    jmeter<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>testPlanTree<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    jmeter<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Test completed. See output-logs.jtl file for results&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;JMeter .jmx script is available at script.jmx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在下面的_getLoopController()_方法中，循环控制器规定了迭代或循环的次数。在这种情况下，我们将循环控制器配置为只执行一次测试计划：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">LoopController</span> <span class="token function">getLoopController</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">LoopController</span> loopController <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoopController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    loopController<span class="token punctuation">.</span><span class="token function">setLoops</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    loopController<span class="token punctuation">.</span><span class="token function">setFirst</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    loopController<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token class-name">TestElement</span><span class="token punctuation">.</span><span class="token constant">TEST_CLASS</span><span class="token punctuation">,</span> <span class="token class-name">LoopController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    loopController<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token class-name">TestElement</span><span class="token punctuation">.</span><span class="token constant">GUI_CLASS</span><span class="token punctuation">,</span> <span class="token class-name">LoopControlPanel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    loopController<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> loopController<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>_getThreadGroup()_方法定义了一个名为“Sample Thread Group”的线程组，指定了要模拟的虚拟用户/线程的数量和启动期间。此组中的每个线程代表一个虚拟用户向目标URL发出请求。“Sample Thread Group”包含10个线程（虚拟用户），并在5秒的间隔内逐渐启动：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ThreadGroup</span> <span class="token function">getThreadGroup</span><span class="token punctuation">(</span><span class="token class-name">LoopController</span> loopController<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">ThreadGroup</span> threadGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    threadGroup<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;Sample Thread Group&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    threadGroup<span class="token punctuation">.</span><span class="token function">setNumThreads</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    threadGroup<span class="token punctuation">.</span><span class="token function">setRampUp</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    threadGroup<span class="token punctuation">.</span><span class="token function">setSamplerController</span><span class="token punctuation">(</span>loopController<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    threadGroup<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token class-name">TestElement</span><span class="token punctuation">.</span><span class="token constant">TEST_CLASS</span><span class="token punctuation">,</span> <span class="token class-name">ThreadGroup</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    threadGroup<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token class-name">TestElement</span><span class="token punctuation">.</span><span class="token constant">GUI_CLASS</span><span class="token punctuation">,</span> <span class="token class-name">ThreadGroupGui</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> threadGroup<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，在_getHttpSamplerProxy()<em>方法中，我们创建了一个HTTP采样器_HTTPSamplerProxy</em>，以向目标URL（https://www.google.com）发送HTTP GET请求。我们使用域、路径和请求方法配置了采样器：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">HTTPSamplerProxy</span> <span class="token function">getHttpSamplerProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">HTTPSamplerProxy</span> httpSampler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HTTPSamplerProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    httpSampler<span class="token punctuation">.</span><span class="token function">setDomain</span><span class="token punctuation">(</span><span class="token string">&quot;www.google.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    httpSampler<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    httpSampler<span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    httpSampler<span class="token punctuation">.</span><span class="token function">setMethod</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    httpSampler<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token class-name">TestElement</span><span class="token punctuation">.</span><span class="token constant">TEST_CLASS</span><span class="token punctuation">,</span> <span class="token class-name">HTTPSamplerProxy</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    httpSampler<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token class-name">TestElement</span><span class="token punctuation">.</span><span class="token constant">GUI_CLASS</span><span class="token punctuation">,</span> <span class="token class-name">HttpTestSampleGui</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> httpSampler<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们通过将线程组和HTTP采样器添加到_HashTree_来构建测试计划：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">TestPlan</span> <span class="token function">getTestPlan</span><span class="token punctuation">(</span><span class="token class-name">ThreadGroup</span> threadGroup<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">TestPlan</span> testPlan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestPlan</span><span class="token punctuation">(</span><span class="token string">&quot;Sample Test Plan&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    testPlan<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token class-name">TestElement</span><span class="token punctuation">.</span><span class="token constant">TEST_CLASS</span><span class="token punctuation">,</span> <span class="token class-name">TestPlan</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    testPlan<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token class-name">TestElement</span><span class="token punctuation">.</span><span class="token constant">GUI_CLASS</span><span class="token punctuation">,</span> <span class="token class-name">TestPlanGui</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    testPlan<span class="token punctuation">.</span><span class="token function">addThreadGroup</span><span class="token punctuation">(</span>threadGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> testPlan<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们使用测试计划树配置JMeter引擎，并调用run方法执行测试。</p><p><strong>此脚本概述了一个负载配置文件，模拟了10个并发用户在5秒内逐渐启动。每个用户向目标URL发起一个单一的HTTP GET请求。负载保持一致，因为没有额外的配置用于多次迭代。</strong></p><p>_jmeter.properties_文件用作Apache JMeter使用的配置文件，用于定义测试执行的各种设置和参数。在此文件中，下面的属性指定了在完成测试执行后保存测试结果的格式：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">jmeter.save.saveservice.output_format</span><span class="token punctuation">=</span><span class="token value attr-value">xml</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_4-理解输出文件" tabindex="-1"><a class="header-anchor" href="#_4-理解输出文件"><span>4. 理解输出文件</span></a></h2><p>我们将测试计划保存为与JMeter GUI兼容的.jmx文件格式的_script.jmx_。此外，我们配置了一个_Summarizer_来收集和总结测试结果。此外，还建立了一个结果收集器，将结果存储在名为_output-logs.jtl_的.jtl文件中。</p><h3 id="_4-1-理解-jtl-文件" tabindex="-1"><a class="header-anchor" href="#_4-1-理解-jtl-文件"><span>4.1. 理解 .jtl 文件</span></a></h3><p>_output-logs.jtl_文件的内容如下：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>``<span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>``\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>testResults</span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1.2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>httpSample</span> <span class="token attr-name">t</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>354<span class="token punctuation">&quot;</span></span> <span class="token attr-name">it</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">lt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>340<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ct</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>37<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ts</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1711874302012<span class="token punctuation">&quot;</span></span> <span class="token attr-name">s</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token attr-name">lb</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">rc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>200<span class="token punctuation">&quot;</span></span> <span class="token attr-name">rm</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>OK<span class="token punctuation">&quot;</span></span> <span class="token attr-name">tn</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Sample Thread Group 1-1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">by</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>22388<span class="token punctuation">&quot;</span></span> <span class="token attr-name">sby</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>111<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ng</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">na</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>`\n        ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.net.URL</span><span class="token punctuation">&gt;</span></span>````http://www.google.com/````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.net.URL</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>httpSample</span><span class="token punctuation">&gt;</span></span>````\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>httpSample</span> <span class="token attr-name">t</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>351<span class="token punctuation">&quot;</span></span> <span class="token attr-name">it</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">lt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>317<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ct</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>21<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ts</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1711874302466<span class="token punctuation">&quot;</span></span> <span class="token attr-name">s</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token attr-name">lb</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">rc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>200<span class="token punctuation">&quot;</span></span> <span class="token attr-name">rm</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>OK<span class="token punctuation">&quot;</span></span> <span class="token attr-name">tn</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Sample Thread Group 1-2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">by</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>22343<span class="token punctuation">&quot;</span></span> <span class="token attr-name">sby</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>111<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ng</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">na</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>`\n        ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.net.URL</span><span class="token punctuation">&gt;</span></span>````http://www.google.com/````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.net.URL</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>httpSample</span><span class="token punctuation">&gt;</span></span>````\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>httpSample</span> <span class="token attr-name">t</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>410<span class="token punctuation">&quot;</span></span> <span class="token attr-name">it</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">lt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>366<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ct</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>14<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ts</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1711874303024<span class="token punctuation">&quot;</span></span> <span class="token attr-name">s</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token attr-name">lb</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">rc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>200<span class="token punctuation">&quot;</span></span> <span class="token attr-name">rm</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>OK<span class="token punctuation">&quot;</span></span> <span class="token attr-name">tn</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>SampleThread Group 1-3<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">by</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>22398<span class="token punctuation">&quot;</span></span> <span class="token attr-name">sby</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>111<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ng</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">na</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>`\n        ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.net.URL</span><span class="token punctuation">&gt;</span></span>````http://www.google.com/````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.net.URL</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>httpSample</span><span class="token punctuation">&gt;</span></span>````\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>httpSample</span> <span class="token attr-name">t</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>363<span class="token punctuation">&quot;</span></span> <span class="token attr-name">it</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">lt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>344<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ct</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>19<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ts</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1711874303483<span class="token punctuation">&quot;</span></span> <span class="token attr-name">s</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token attr-name">lb</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">rc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>200<span class="token punctuation">&quot;</span></span> <span class="token attr-name">rm</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>OK<span class="token punctuation">&quot;</span></span> <span class="token attr-name">tn</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Sample Thread Group 1-4<span class="token punctuation">&quot;</span></span> <span class="token attr-name">dt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">by</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>22367<span class="token punctuation">&quot;</span></span> <span class="token attr-name">sby</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>111<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ng</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">na</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>`\n        ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.net.URL</span><span class="token punctuation">&gt;</span></span>````http://www.google.com/````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.net.URL</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>httpSample</span><span class="token punctuation">&gt;</span></span>````\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>testResults</span><span class="token punctuation">&gt;</span></span>`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出包含<code>&lt;httpSample&gt;</code>元素，表示测试期间发出的HTTP请求，并包含与该请求相关的各种属性和元数据。让我们分解这些属性：</p><ul><li><code>t</code> - 样本执行所需的总时间，以毫秒为单位</li><li><code>it</code> - 空闲时间，即等待响应的时间</li><li><code>lt</code> - 延迟，即请求到达服务器并返回的时间，不包括空闲时间</li><li><code>ct</code> - 连接时间，即与服务器建立连接所需的时间</li><li><code>ts</code> - 执行样本的时间戳，以毫秒表示，自纪元以来</li><li><code>s</code> - 表示样本是否成功（true）或失败（false）</li><li><code>lb</code> - 与样本关联的标签，通常是采样器名称</li><li><code>rc</code> - 服务器返回的HTTP响应代码</li><li><code>rm</code> - 与响应代码相关联的响应消息</li><li><code>tn</code> - 执行样本的线程名称</li><li><code>dt</code> - 样本返回的数据类型（例如，文本、二进制）</li><li><code>by</code> - 响应体中接收到的字节数</li><li><code>sby</code> - 请求中发送的字节数</li><li><code>ng/na</code> - 线程组/所有线程组中的活动线程数</li></ul><p>这些数据对于分析测试下的系统性能、识别瓶颈和优化应用程序性能至关重要。</p><h3 id="_4-2-理解-jmx-文件" tabindex="-1"><a class="header-anchor" href="#_4-2-理解-jmx-文件"><span>4.2. 理解 .jmx 文件</span></a></h3><p>.jmx文件以XML格式表示JMeter测试计划配置。_script.jmx_文件的内容如下：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>``<span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>``\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jmeterTestPlan</span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1.2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">properties</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>5.0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">jmeter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>5.4.1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>`\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>org.apache.jorphan.collections.HashTree</span><span class="token punctuation">&gt;</span></span>```\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TestPlan</span> <span class="token attr-name">guiclass</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>TestPlanGui<span class="token punctuation">&quot;</span></span> <span class="token attr-name">testclass</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>TestPlan<span class="token punctuation">&quot;</span></span> <span class="token attr-name">testname</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Sample Test Plan<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>`\n        ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>org.apache.jorphan.collections.HashTree</span><span class="token punctuation">&gt;</span></span>```\n            `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ThreadGroup</span> <span class="token attr-name">guiclass</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ThreadGroupGui<span class="token punctuation">&quot;</span></span> <span class="token attr-name">testclass</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ThreadGroup<span class="token punctuation">&quot;</span></span> <span class="token attr-name">testname</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Sample Thread Group<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>`\n                `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intProp</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ThreadGroup.num_threads<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>`10````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intProp</span><span class="token punctuation">&gt;</span></span>````\n                `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intProp</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ThreadGroup.ramp_time<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>`5````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intProp</span><span class="token punctuation">&gt;</span></span>````\n                `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>elementProp</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ThreadGroup.main_controller<span class="token punctuation">&quot;</span></span> <span class="token attr-name">elementType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>LoopController<span class="token punctuation">&quot;</span></span> <span class="token attr-name">guiclass</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>LoopControlPanel<span class="token punctuation">&quot;</span></span> <span class="token attr-name">testclass</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>LoopController<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>`\n                    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>boolProp</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>LoopController.continue_forever<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>`false`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>boolProp</span><span class="token punctuation">&gt;</span></span>`\n                    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intProp</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>LoopController.loops<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>`1````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intProp</span><span class="token punctuation">&gt;</span></span>````\n                ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>elementProp</span><span class="token punctuation">&gt;</span></span>``\n            `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ThreadGroup</span><span class="token punctuation">&gt;</span></span>`\n            ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>org.apache.jorphan.collections.HashTree</span><span class="token punctuation">&gt;</span></span>```\n                `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>HTTPSamplerProxy</span> <span class="token attr-name">guiclass</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>HttpTestSampleGui<span class="token punctuation">&quot;</span></span> <span class="token attr-name">testclass</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>HTTPSamplerProxy<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>`\n                    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>elementProp</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>HTTPsampler.Arguments<span class="token punctuation">&quot;</span></span> <span class="token attr-name">elementType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Arguments<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>`\n                        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collectionProp</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Arguments.arguments<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>`\n                    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>elementProp</span><span class="token punctuation">&gt;</span></span>``\n                    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>stringProp</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>HTTPSampler.domain<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>`www.google.com```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>stringProp</span><span class="token punctuation">&gt;</span></span>```\n                    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intProp</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>HTTPSampler.port<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>`80````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intProp</span><span class="token punctuation">&gt;</span></span>````\n                    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>stringProp</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>HTTPSampler.path<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>`/```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>stringProp</span><span class="token punctuation">&gt;</span></span>```\n                    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>stringProp</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>HTTPSampler.method<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>`GET```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>stringProp</span><span class="token punctuation">&gt;</span></span>```\n                `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>HTTPSamplerProxy</span><span class="token punctuation">&gt;</span></span>`\n                `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>org.apache.jorphan.collections.HashTree</span><span class="token punctuation">/&gt;</span></span>`\n            ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>org.apache.jorphan.collections.HashTree</span><span class="token punctuation">&gt;</span></span>```\n        ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>org.apache.jorphan.collections.HashTree</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>org.apache.jorphan.collections.HashTree</span><span class="token punctuation">&gt;</span></span>```\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jmeterTestPlan</span><span class="token punctuation">&gt;</span></span>`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试计划在<code>&lt;jmeterTestPlan&gt;</code>元素内定义。测试计划内，<code>&lt;ThreadGroup&gt;</code>元素描述了将执行测试场景的虚拟用户或线程组。这包括线程数量和启动时间等细节。</p><p>线程组由控制器协调，例如<code>&lt;LoopController&gt;</code>元素，它管理执行流程，确定循环次数以及是否应无限期地继续执行。</p><p>要发送的实际HTTP请求由<code>&lt;HTTPSampleProxy&gt;</code>元素表示，每个元素都详细说明了域、端口、路径和HTTP方法等信息。这些元素共同构成了在JMeter框架内协调性能测试的全面蓝图。它使得模拟用户与Web服务器的交互以及随后分析服务器响应成为可能。</p><h2 id="_5-结论" tabindex="-1"><a class="header-anchor" href="#_5-结论"><span>5. 结论</span></a></h2><p>在本文中，我们展示了如何使用JMeter Java API以编程方式创建和执行Apache JMeter测试脚本。使用这种方法，开发人员可以自动化性能测试，并将其无缝集成到他们的开发工作流程中。</p><p>它有助于高效地测试Web应用程序，帮助在开发周期的早期识别和解决性能瓶颈。</p><p>如常，本文的源代码可以在GitHub上找到。</p><p>评论在文章发布后30天内开放。对于此日期之后的任何问题，请使用网站上的联系表单。</p><p>OK</p>',47),o=[e];function c(l,u){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","Create and Run Apache JMeter Test Scripts via Java Program.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/Archive/Create%20and%20Run%20Apache%20JMeter%20Test%20Scripts%20via%20Java%20Program.html","title":"通过Java程序创建并运行Apache JMeter测试脚本","lang":"zh-CN","frontmatter":{"date":"2024-06-19T00:00:00.000Z","category":["Java","JMeter"],"tag":["性能测试","自动化测试"],"head":[["meta",{"name":"keywords","content":"JMeter, Java, 性能测试, 自动化测试"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/Archive/Create%20and%20Run%20Apache%20JMeter%20Test%20Scripts%20via%20Java%20Program.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"通过Java程序创建并运行Apache JMeter测试脚本"}],["meta",{"property":"og:description","content":"通过Java程序创建并运行Apache JMeter测试脚本 Apache JMeter是一个开源的基于Java的应用程序，旨在分析和衡量Web应用程序的性能。它允许测试人员模拟对服务器、网络或对象的重负载，以分析不同负载下的总体性能。JMeter提供了一个易于使用的GUI，用于定义、执行和查看各种负载测试的报告。 尽管JMeter提供了一个用户友好的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-21T09:54:56.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"性能测试"}],["meta",{"property":"article:tag","content":"自动化测试"}],["meta",{"property":"article:published_time","content":"2024-06-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-21T09:54:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"通过Java程序创建并运行Apache JMeter测试脚本\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-19T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-21T09:54:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"通过Java程序创建并运行Apache JMeter测试脚本 Apache JMeter是一个开源的基于Java的应用程序，旨在分析和衡量Web应用程序的性能。它允许测试人员模拟对服务器、网络或对象的重负载，以分析不同负载下的总体性能。JMeter提供了一个易于使用的GUI，用于定义、执行和查看各种负载测试的报告。 尽管JMeter提供了一个用户友好的..."},"headers":[{"level":2,"title":"2. 设置环境","slug":"_2-设置环境","link":"#_2-设置环境","children":[]},{"level":2,"title":"3. 创建测试脚本和环境变量文件","slug":"_3-创建测试脚本和环境变量文件","link":"#_3-创建测试脚本和环境变量文件","children":[]},{"level":2,"title":"4. 理解输出文件","slug":"_4-理解输出文件","link":"#_4-理解输出文件","children":[{"level":3,"title":"4.1. 理解 .jtl 文件","slug":"_4-1-理解-jtl-文件","link":"#_4-1-理解-jtl-文件","children":[]},{"level":3,"title":"4.2. 理解 .jmx 文件","slug":"_4-2-理解-jmx-文件","link":"#_4-2-理解-jmx-文件","children":[]}]},{"level":2,"title":"5. 结论","slug":"_5-结论","link":"#_5-结论","children":[]}],"git":{"createdTime":1718963696000,"updatedTime":1718963696000,"contributors":[{"name":"Lance Li","email":"lance.jx.li@gtomato.com","commits":1}]},"readingTime":{"minutes":7.54,"words":2261},"filePathRelative":"posts/baeldung/Archive/Create and Run Apache JMeter Test Scripts via Java Program.md","localizedDate":"2024年6月19日","excerpt":"\\n<p>Apache JMeter是一个开源的基于Java的应用程序，旨在分析和衡量Web应用程序的性能。它允许测试人员模拟对服务器、网络或对象的重负载，以分析不同负载下的总体性能。JMeter提供了一个易于使用的GUI，用于定义、执行和查看各种负载测试的报告。</p>\\n<p>尽管JMeter提供了一个用户友好的GUI来创建和执行测试脚本，但在某些情况下，利用Java编程进行自动化可能更有益，特别是在持续集成和部署流程中。</p>\\n<p>在本教程中，我们将探讨如何使用Java以编程方式创建和执行Apache JMeter测试脚本，并提供一个实际示例来说明所涉及的步骤。</p>\\n<h2>2. <strong>设置环境</strong></h2>","autoDesc":true}');export{r as comp,d as data};
