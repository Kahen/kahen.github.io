import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as i,a}from"./app-CseMoHkL.js";const n={},l=a(`<h1 id="使用auth0-java库管理jwt" tabindex="-1"><a class="header-anchor" href="#使用auth0-java库管理jwt"><span>使用Auth0 Java库管理JWT</span></a></h1><h2 id="_1-引言" tabindex="-1"><a class="header-anchor" href="#_1-引言"><span>1. 引言</span></a></h2><p>JWT（JSON Web Token）是一种标准，定义了一种紧凑且安全的方式，在两个参与方之间传输数据以及签名。JWT中的负载是一个JSON对象，它声明了一些声明。由于这些声明是数字签名的，因此可以被验证者轻松验证和信任。<strong>JWT可以使用密钥或公钥/私钥对进行签名。</strong></p><p>在本教程中，我们将学习如何使用Auth0 JWT Java库创建和解码JWT。</p><h2 id="_2-jwt的结构" tabindex="-1"><a class="header-anchor" href="#_2-jwt的结构"><span>2. JWT的结构</span></a></h2><p>JWT基本上由三部分组成：</p><ul><li>头部</li><li>负载</li><li>签名</li></ul><p>这些部分各自代表一个Base64编码的字符串，由点（&#39;.&#39;）作为分隔符连接。</p><p>JWT头部通常由两部分组成：令牌类型，即&quot;JWT&quot;，以及用于签名JWT的签名算法。</p><p>Auth0 Java JWT库提供了各种算法实现来签名JWT，如HMAC、RSA和ECDSA。</p><p>让我们看看一个JWT头部的示例：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>{
  &quot;alg&quot;: &quot;HS256&quot;,
  &quot;typ&quot;: &quot;JWT&quot;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述头部对象随后被Base64编码，形成JWT的第一部分。</p><h3 id="_2-2-jwt负载" tabindex="-1"><a class="header-anchor" href="#_2-2-jwt负载"><span>2.2 JWT负载</span></a></h3><p>JWT负载包含一组声明。声明基本上是关于实体的一些陈述以及一些附加数据。</p><p>有三种类型的声明：</p><ul><li>注册的 – 这是一组有用的预定义声明，推荐使用但不是强制性的。这些声明名称只有三个字符长，以保持JWT紧凑。一些注册声明包括_iss_（发行者）、<em>exp</em>（过期时间）和_sub_（主题）等。</li><li>公共的 – 这些可以由使用JWT的人任意定义。</li><li>私有的 – 我们可以使用这些声明来创建自定义声明。</li></ul><p>让我们看看一个JWT负载的示例：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>{
  &quot;sub&quot;: &quot;Baeldung Details&quot;,
  &quot;nbf&quot;: 1669463994,
  &quot;iss&quot;: &quot;Baeldung&quot;,
  &quot;exp&quot;: 1669463998,
  &quot;userId&quot;: &quot;1234&quot;,
  &quot;iat&quot;: 1669463993,
  &quot;jti&quot;: &quot;b44bd6c6-f128-4415-8458-6d8b4bc98e4a&quot;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们可以看到负载包含了一个私有声明_userId_，表示登录用户ID。此外，我们还可以找到一些有用的受限声明，它们定义了关于JWT的额外细节。</p><p>JWT负载随后被Base64编码，形成JWT的第二部分。</p><h3 id="_2-3-jwt签名" tabindex="-1"><a class="header-anchor" href="#_2-3-jwt签名"><span>2.3 JWT签名</span></a></h3><p>最后，<strong>JWT签名是在我们使用签名算法和密钥对编码的头部和编码的负载进行签名时生成的</strong>。然后可以使用签名来验证JWT中的数据是否有效。</p><p>需要注意的是，<strong>任何拥有JWT的人都能够轻松解码并查看其内容</strong>。签名令牌可以验证其中包含的声明的完整性。如果令牌使用公钥/私钥对签名，签名还证明只有持有私钥的一方才是签名者。</p><p>最后，将所有三部分结合起来，我们得到了JWT：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJCYWVsZHVuZyBEZXRhaWxzIiwibmJmIjoxNjY5NDYzOTk0LCJpc3MiOiJCYWVsZHVuZyIsImV4cCI6MTY2OTQ2Mzk5OCwidXNlcklkIjoiMTIzNCIsImlhdCI6MTY2OTQ2Mzk5MywianRpIjoiYjQ0YmQ2YzYtZjEyOC00NDE1LTg0NTgtNmQ4YjRiYzk4ZTRhIn0.14jm1FVPXFDJCUBARDTQkUErMmUTqdt5uMTGW6hDuV0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来，让我们看看如何使用Auth0 Java JWT库创建和管理JWT。</p><h2 id="_3-使用auth0" tabindex="-1"><a class="header-anchor" href="#_3-使用auth0"><span>3. 使用Auth0</span></a></h2><p>Auth0提供了一个易于使用的Java库，用于创建和管理JWT。</p><h3 id="_3-1-依赖项" tabindex="-1"><a class="header-anchor" href="#_3-1-依赖项"><span>3.1. 依赖项</span></a></h3><p>要开始使用，我们将Auth0 Java JWT库的Maven依赖项添加到我们的项目_pom.xml_文件中：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>\`&lt;dependency&gt;\`
    \`&lt;groupId&gt;\`com.auth0\`&lt;/groupId&gt;\`
    \`&lt;artifactId&gt;\`java-jwt\`&lt;/artifactId&gt;\`
    \`&lt;version&gt;\`4.2.1\`&lt;/version&gt;\`
\`&lt;/dependency&gt;\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-配置算法和验证器" tabindex="-1"><a class="header-anchor" href="#_3-2-配置算法和验证器"><span>3.2. 配置算法和验证器</span></a></h3><p>我们首先创建一个_Algorithm_类的实例。在本教程中，我们将使用HMAC256算法来签名我们的JWT：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Algorithm algorithm = Algorithm.HMAC256(&quot;baeldung&quot;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在这里，我们使用密钥初始化了一个_Algorithm_的实例。我们将在创建和验证令牌时使用这个实例。</p><p>进一步，让我们初始化一个我们将用于验证创建的令牌的_JWTVerifier_实例：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>JWTVerifier verifier = JWT.require(algorithm)
  .withIssuer(&quot;Baeldung&quot;)
  .build();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>要初始化验证器，我们使用_JWT.require(Algorithm)_方法</strong>。这个方法返回一个_Verification_的实例，然后我们可以使用它来构建一个_JWTVerifier_的实例。</p><p>现在我们准备好创建我们的JWT了。</p><h3 id="_3-3-创建jwt" tabindex="-1"><a class="header-anchor" href="#_3-3-创建jwt"><span>3.3. 创建JWT</span></a></h3><p><strong>要创建JWT，我们使用_JWT.create()_方法</strong>。该方法返回一个_JWTCreator.Builder_类的实例。我们将使用这个_Builder_类通过使用_Algorithm_实例签名声明来构建JWT令牌：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>String jwtToken = JWT.create()
  .withIssuer(&quot;Baeldung&quot;)
  .withSubject(&quot;Baeldung Details&quot;)
  .withClaim(&quot;userId&quot;, &quot;1234&quot;)
  .withIssuedAt(new Date())
  .withExpiresAt(new Date(System.currentTimeMillis() + 5000L))
  .withJWTId(UUID.randomUUID()
    .toString())
  .withNotBefore(new Date(System.currentTimeMillis() + 1000L))
  .sign(algorithm);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码片段返回一个JWT：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJCYWVsZHVuZyBEZXRhaWxzIiwibmJmIjoxNjY5NDYzOTk0LCJpc3MiOiJCYWVsZHVuZyIsImV4cCI6MTY2OTQ2Mzk5OCwidXNlcklkIjoiMTIzNCIsImlhdCI6MTY2OTQ2Mzk5MywianRpIjoiYjQ0YmQ2YzYtZjEyOC00NDE1LTg0NTgtNmQ4YjRiYzk4ZTRhIn0.14jm1FVPXFDJCUBARDTQkUErMmUTqdt5uMTGW6hDuV0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>让我们讨论一下上面使用的_JWTCreator.Builder_类方法来设置一些声明：</p><ul><li><em>withIssuer()</em> – 标识创建并签名令牌的一方</li><li><em>withSubject()</em> – 标识JWT的主题</li><li><em>withIssuedAt()</em> – 标识JWT创建的时间；我们可以使用它来确定JWT的年龄</li><li><em>withExpiresAt()</em> – 标识JWT的过期时间</li><li><em>withJWTId()</em> – JWT的唯一标识符</li><li><em>withNotBefore()</em> – 标识JWT不应在该时间之前被接受处理的时间</li><li><em>withClaim()</em> – 用于设置任何自定义声明</li></ul><h3 id="_3-4-验证jwt" tabindex="-1"><a class="header-anchor" href="#_3-4-验证jwt"><span>3.4. 验证JWT</span></a></h3><p>进一步地，<strong>要验证JWT，我们使用我们之前初始化的_JWTVerifier_的_JWTVerifier.verify(String)_方法</strong>。如果JWT有效，该方法解析JWT并返回一个_DecodedJWT_的实例。</p><p><em>DecodedJWT_实例提供了我们可以使用的各种便捷方法来获取JWT中包含的声明。如果JWT无效，该方法将抛出一个_JWTVerificationException</em>。</p><p>让我们解码我们之前创建的JWT：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>try {
    DecodedJWT decodedJWT = verifier.verify(jwtToken);
} catch (JWTVerificationException e) {
    System.out.println(e.getMessage());
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一旦我们获得了_DecodedJWT_实例，我们可以使用它的各种getter方法来获取声明。</p><p>例如，要获取自定义声明，我们使用_DecodedJWT.getClaim(String)_方法。这个方法返回一个_Claim_的实例：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Claim claim = decodedJWT.getClaim(&quot;userId&quot;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在这里，我们获取了我们之前在创建JWT时设置的自定义声明_userId_。我们现在可以通过</p>`,56),d=[l];function s(r,u){return i(),t("div",null,d)}const p=e(n,[["render",s],["__file","2024-07-11-Managing JWT With Auth0 java jwt.html.vue"]]),h=JSON.parse('{"path":"/posts/baeldung/2024-07-11/2024-07-11-Managing%20JWT%20With%20Auth0%20java%20jwt.html","title":"使用Auth0 Java库管理JWT","lang":"zh-CN","frontmatter":{"date":"2024-07-11T00:00:00.000Z","category":["Java","Security"],"tag":["Auth0","JWT"],"head":[["meta",{"name":"keywords","content":"Java, JWT, Auth0, Security, Tutorial"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-11/2024-07-11-Managing%20JWT%20With%20Auth0%20java%20jwt.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"使用Auth0 Java库管理JWT"}],["meta",{"property":"og:description","content":"使用Auth0 Java库管理JWT 1. 引言 JWT（JSON Web Token）是一种标准，定义了一种紧凑且安全的方式，在两个参与方之间传输数据以及签名。JWT中的负载是一个JSON对象，它声明了一些声明。由于这些声明是数字签名的，因此可以被验证者轻松验证和信任。JWT可以使用密钥或公钥/私钥对进行签名。 在本教程中，我们将学习如何使用Auth..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-11T14:43:04.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Auth0"}],["meta",{"property":"article:tag","content":"JWT"}],["meta",{"property":"article:published_time","content":"2024-07-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-11T14:43:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用Auth0 Java库管理JWT\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-11T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-11T14:43:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"使用Auth0 Java库管理JWT 1. 引言 JWT（JSON Web Token）是一种标准，定义了一种紧凑且安全的方式，在两个参与方之间传输数据以及签名。JWT中的负载是一个JSON对象，它声明了一些声明。由于这些声明是数字签名的，因此可以被验证者轻松验证和信任。JWT可以使用密钥或公钥/私钥对进行签名。 在本教程中，我们将学习如何使用Auth..."},"headers":[{"level":2,"title":"1. 引言","slug":"_1-引言","link":"#_1-引言","children":[]},{"level":2,"title":"2. JWT的结构","slug":"_2-jwt的结构","link":"#_2-jwt的结构","children":[{"level":3,"title":"2.2 JWT负载","slug":"_2-2-jwt负载","link":"#_2-2-jwt负载","children":[]},{"level":3,"title":"2.3 JWT签名","slug":"_2-3-jwt签名","link":"#_2-3-jwt签名","children":[]}]},{"level":2,"title":"3. 使用Auth0","slug":"_3-使用auth0","link":"#_3-使用auth0","children":[{"level":3,"title":"3.1. 依赖项","slug":"_3-1-依赖项","link":"#_3-1-依赖项","children":[]},{"level":3,"title":"3.2. 配置算法和验证器","slug":"_3-2-配置算法和验证器","link":"#_3-2-配置算法和验证器","children":[]},{"level":3,"title":"3.3. 创建JWT","slug":"_3-3-创建jwt","link":"#_3-3-创建jwt","children":[]},{"level":3,"title":"3.4. 验证JWT","slug":"_3-4-验证jwt","link":"#_3-4-验证jwt","children":[]}]}],"git":{"createdTime":1720708984000,"updatedTime":1720708984000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":4.7,"words":1409},"filePathRelative":"posts/baeldung/2024-07-11/2024-07-11-Managing JWT With Auth0 java jwt.md","localizedDate":"2024年7月11日","excerpt":"\\n<h2>1. 引言</h2>\\n<p>JWT（JSON Web Token）是一种标准，定义了一种紧凑且安全的方式，在两个参与方之间传输数据以及签名。JWT中的负载是一个JSON对象，它声明了一些声明。由于这些声明是数字签名的，因此可以被验证者轻松验证和信任。<strong>JWT可以使用密钥或公钥/私钥对进行签名。</strong></p>\\n<p>在本教程中，我们将学习如何使用Auth0 JWT Java库创建和解码JWT。</p>\\n<h2>2. JWT的结构</h2>\\n<p>JWT基本上由三部分组成：</p>\\n<ul>\\n<li>头部</li>\\n<li>负载</li>\\n<li>签名</li>\\n</ul>","autoDesc":true}');export{p as comp,h as data};
