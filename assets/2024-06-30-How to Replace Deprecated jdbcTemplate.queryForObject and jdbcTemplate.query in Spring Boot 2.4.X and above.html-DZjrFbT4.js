import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-D9qUUkNr.js";const e={},p=t('<h1 id="如何在spring-boot-2-4-x及以上版本中替换已弃用的jdbctemplate-queryforobject和jdbctemplate-query方法-baeldung" tabindex="-1"><a class="header-anchor" href="#如何在spring-boot-2-4-x及以上版本中替换已弃用的jdbctemplate-queryforobject和jdbctemplate-query方法-baeldung"><span>如何在Spring Boot 2.4.X及以上版本中替换已弃用的jdbcTemplate.queryForObject和jdbcTemplate.query方法 | Baeldung</span></a></h1><p>在这个教程中，我们将讨论JdbcTemplate中已弃用的queryForObject()和query()方法及其首选替代方法。已弃用的方法接受在对象数组中传递的参数，而新方法则使用Varargs来传递参数。这种方法更直观，因为Varargs专门设计用于高效地向方法传递可变数量的参数。</p><p>在我们的教程中，我们将通过在内存中的H2数据库上运行查询来解释所有方法。</p><h3 id="_2-数据库设置" tabindex="-1"><a class="header-anchor" href="#_2-数据库设置"><span>2. 数据库设置</span></a></h3><p>在我们讨论问题方法之前，让我们首先检查一下我们将在所有示例中使用的学生表：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> student <span class="token punctuation">(</span>\n  student_id <span class="token keyword">INT</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>\n  student_name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  age <span class="token keyword">INT</span><span class="token punctuation">,</span>\n  grade <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  gender <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  state <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">-- 学生 1</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token punctuation">(</span>student_name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> grade<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;John Smith&#39;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;Male&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;California&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">-- 学生 2</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token punctuation">(</span>student_name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> grade<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;Emily Johnson&#39;</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;Female&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;New York&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">-- 更多插入语句...</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-已弃用的query-方法" tabindex="-1"><a class="header-anchor" href="#_3-已弃用的query-方法"><span>3. 已弃用的query()方法</span></a></h3><p>在JdbcTemplate中，有三个使用不同功能接口从查询结果中收集或处理行的query()方法变体。这些接口是ResultSetExtractor、RowCallbackHandler和RowMapper。</p><p>让我们看看每一个以及它们的建议替代品。</p><h4 id="_3-1-使用rowmapper的query-方法" tabindex="-1"><a class="header-anchor" href="#_3-1-使用rowmapper的query-方法"><span>3.1. 使用RowMapper的query()方法</span></a></h4><p>JdbcTemplate类中的query()方法返回一个列表，表示由数据库查询返回的行。让我们从一个示例开始，我们将查询学生表以获取特定年龄和性别的学生：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">List</span>````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span>```````````` <span class="token function">getStudentsOfAgeAndGender</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> gender<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;select student_id, student_name, age, gender, grade from student where age= ? and gender = ?&quot;</span><span class="token punctuation">;</span>\n  <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> <span class="token punctuation">{</span>age<span class="token punctuation">,</span> gender<span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StudentRowMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的方法中，args变量的类型是Object[]，用于存储查询参数。即使只有一个查询参数，也需要添加到数组中，这是不方便的。</p><p>假设我们需要额外的过滤条件来获取特定年级的学生。然后，我们必须为它编写一个新方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">List</span>````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span>```````````` <span class="token function">getStudentsOfAgeGenderAndGrade</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> gender<span class="token punctuation">,</span> <span class="token class-name">Integer</span> grade<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;select student_id, student_name, age, gender, grade from student where age= ? and gender = ? and grade = ?&quot;</span><span class="token punctuation">;</span>\n  <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> <span class="token punctuation">{</span>age<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> grade<span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StudentRowMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，为了实现这一点，我们修改了sql和args变量。但是，我们能否消除涉及args变量的样板代码呢？让我们在下面的方法中进一步探讨：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">List</span>````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span>```````````` <span class="token function">getStudentsOfAgeGenderAndGrade</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> gender<span class="token punctuation">,</span> <span class="token class-name">String</span> grade<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;select student_id, student_name, age, gender, grade from student where age= ? and gender = ? and grade = ?&quot;</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StudentRowMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> age<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> grade<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>jdbcTemplate.query的Varargs变体正是我们想要的。</p><p>让我们看看已弃用和替代方法的实际应用：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenDeprecatedMethodQuery_whenArgsAgeAndGender_thenReturnStudents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token class-name">List</span>````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span>```````````` students <span class="token operator">=</span> studentDaoWithDeprecatedJdbcTemplateMethods<span class="token punctuation">.</span><span class="token function">getStudentsOfAgeGenderAndGrade</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&quot;Female&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token operator">:</span> students<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Student Name: &quot;</span> <span class="token operator">+</span> student<span class="token punctuation">.</span><span class="token function">getStudentName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; Student gender: &quot;</span> <span class="token operator">+</span> student<span class="token punctuation">.</span><span class="token function">getStudentGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> students<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenPreferredMethodQuery_whenArgsAgeAndGender_thenReturnStudents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token class-name">List</span>````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span>```````````` students <span class="token operator">=</span> studentDaoWithPreferredJdbcTemplateMethods<span class="token punctuation">.</span><span class="token function">getStudentsOfAgeGenderAndGrade</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&quot;Female&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token operator">:</span> students<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Student Name: &quot;</span> <span class="token operator">+</span> student<span class="token punctuation">.</span><span class="token function">getStudentName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; Student gender: &quot;</span> <span class="token operator">+</span> student<span class="token punctuation">.</span><span class="token function">getStudentGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> students<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如我们在上面看到的，两个测试方法调用了Dao类StudentDaoWithDeprecatedJdbcTemplateMethods和StudentDaoWithPreferredJdbcTemplateMethods中的getStudentsOfAgeAndGender()。以下是两种方法的输出：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Student Name: Olivia Garcia Student gender: Female Student grade: 2\nStudent Name: Ava Davis Student gender: Female Student grade: 2\nStudent Name: Olivia Johnson Student gender: Female Student grade: 2\nStudent Name: Isabella Davis Student gender: Female Student grade: 2\nStudent Name: Sophia Hernandez Student gender: Female Student grade: 2\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>毫无疑问，Varargs版本实现了预期的目的。</p><p><strong>在接下来的部分中，我们将主要讨论已弃用和首选方法的使用</strong>。Varargs版本的益处与本节中讨论的相同。因此，我们不会重复。</p><p>现在，让我们继续讨论下一个使用ResultSetExtractor接口的已弃用版本。接口中的extractData()方法被调用一次，以便在处理后将所有行返回到数据结构中。在这个例子中，我们创建了一个StudentResultExtractor：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentResultExtractor</span> <span class="token keyword">implements</span> <span class="token class-name">ResultSetExtractor</span><span class="token operator">&lt;</span><span class="token class-name">List</span>````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span>````````````<span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n  <span class="token annotation punctuation">@Override</span>\n  <span class="token keyword">public</span> <span class="token class-name">List</span>````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span>```````````` <span class="token function">extractData</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>\n    <span class="token class-name">List</span>````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span>```````````` students <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span>````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span>````````````<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      student<span class="token punctuation">.</span><span class="token function">setStudentId</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">&quot;student_id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      student<span class="token punctuation">.</span><span class="token function">setStudentName</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;student_name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      student<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      student<span class="token punctuation">.</span><span class="token function">setStudentGender</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;gender&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      student<span class="token punctuation">.</span><span class="token function">setGrade</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">&quot;grade&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      student<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;state&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> students<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它返回一个Student的列表。</p><p>让我们看看使用数组对象传递查询参数的查询方法，以及上面提到的StudentResultExtractor：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">List</span>````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span>```````````` <span class="token function">getStudentsOfGradeAndState</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> grade<span class="token punctuation">,</span> <span class="token class-name">String</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;select student_id, student_name, age, gender, grade, state from student where grade = ? and state = ?&quot;</span><span class="token punctuation">;</span>\n  <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> <span class="token punctuation">{</span>grade<span class="token punctuation">,</span> state<span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StudentResultExtractor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述方法查询学生表，检索特定年级和特定州的学生。</p><p>与前一节类似，我们将使用query方法的Varargs版本实现相同的功能：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">List</span>````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span>```````````` <span class="token function">getStudentsOfGradeAndState</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> grade<span class="token punctuation">,</span> <span class="token class-name">String</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;select student_id, student_name, age, gender, grade, state from student where grade = ? and state = ?&quot;</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StudentResultExtractor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> grade<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们在单独的测试函数中调用上述两种方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenDeprecatedMethodQuery_whenArgsGradeAndState_thenReturnStudents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token class-name">List</span>````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span>```````````` students <span class="token operator">=</span> studentDaoWithDeprecatedJdbcTemplateMethods<span class="token punctuation">.</span><span class="token function">getStudentsOfGradeAndState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;New York&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token operator">:</span> students<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Student Name: &quot;</span> <span class="token operator">+</span> student<span class="token punctuation">.</span><span class="token function">getStudentName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token operator">+</span> <span class="token string">&quot; Student grade: &quot;</span> <span class="token operator">+</span> student<span class="token punctuation">.</span><span class="token function">getStudentGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token operator">+</span> <span class="token string">&quot; Student State: &quot;</span> <span class="token operator">+</span> student<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> students<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenPreferredMethodQuery_whenArgsGradeAndState_thenReturnStudents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token class-name">List</span>````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span>```````````` students <span class="token operator">=</span> studentDaoWithPreferredJdbcTemplateMethods<span class="token punctuation">.</span><span class="token function">getStudentsOfGradeAndState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;New York&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token operator">:</span> students<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Student Name: &quot;</span> <span class="token operator">+</span> student<span class="token punctuation">.</span><span class="token function">getStudentName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token operator">+</span> <span class="token string">&quot; Student grade: &quot;</span> <span class="token operator">+</span> student<span class="token punctuation">.</span><span class="token function">getStudentGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token operator">+</span> <span class="token string">&quot; Student State: &quot;</span> <span class="token operator">+</span> student<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> students<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如预期的那样，两个测试给出了相同的输出：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Student Name: Ethan Rodriguez Student grade: Male Student State: New York\nStudent Name: Benjamin Brown Student grade: Male Student State: New York\nStudent Name: Matthew Martinez Student grade: Male Student State: New York\nStudent Name: Christopher Lee Student grade: Male Student State: New York\nStudent Name: Liam Johnson Student grade: Male Student State: New York\nStudent Name: Mason Smith Student grade: Male Student State: New York\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-3-使用rowcallbackhandler的query-方法" tabindex="-1"><a class="header-anchor" href="#_3-3-使用rowcallbackhandler的query-方法"><span>3.3. 使用RowCallbackHandler的query()方法</span></a></h4><p>最后，在本节中，我们将讨论使用RowCallbackHandler接口的版本。在这个例子中，我们将使用RowCountCallbackHandler，它是RowCallbackHandler的一个子类。</p><p>让我们首先看看已弃用的版本：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getCountOfStudentsInAGradeFromAState</span><span class="token punctuation">(</span><span class="token class-name">String</span> grade<span class="token punctuation">,</span> <span class="token class-name">String</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token class-name">String</span> sql <span class="token operator">=</span> &quot;select student_id<span class="token punctuation">,</span> student_name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> grade<span class="token punctuation">,</span> state from student where grade <span class="token operator">=</span>```java\n  <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> <span class="token punctuation">{</span>grade<span class="token punctuation">,</span> state<span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token class-name">RowCountCallbackHandler</span> countCallbackHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RowCountCallbackHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  jdbcTemplate<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> args<span class="token punctuation">,</span> countCallbackHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> countCallbackHandler<span class="token punctuation">.</span><span class="token function">getRowCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该方法，正如其名，获取在给定年级和特定州学习的学生总数。</p><p>下面是使用首选版本的query方法的方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getCountOfStudentsInAGradeFromAState</span><span class="token punctuation">(</span><span class="token class-name">String</span> grade<span class="token punctuation">,</span> <span class="token class-name">String</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;select student_id, student_name, age, gender, grade, state from student where grade = ? and state = ?&quot;</span><span class="token punctuation">;</span>\n\n  <span class="token class-name">RowCountCallbackHandler</span> countCallbackHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RowCountCallbackHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  jdbcTemplate<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> countCallbackHandler<span class="token punctuation">,</span> grade<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> countCallbackHandler<span class="token punctuation">.</span><span class="token function">getRowCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们看看这些方法如何被调用：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenDeprecatedMethodQuery_whenArgsGradeAndState_thenReturnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token class-name">Integer</span> count <span class="token operator">=</span> studentDaoWithDeprecatedJdbcTemplateMethods<span class="token punctuation">.</span><span class="token function">getCountOfStudentsInAGradeFromAState</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;New York&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Total students of grade 1 from New York:&quot;</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenPreferredMethodQuery_whenArgsGradeAndState_thenReturnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token class-name">Integer</span> count <span class="token operator">=</span> studentDaoWithPreferredJdbcTemplateMethods<span class="token punctuation">.</span><span class="token function">getCountOfStudentsInAGradeFromAState</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;New York&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Total students of grade 1 from New York:&quot;</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如下面所示，它们产生了相同的结果：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Total students of grade 1 from New York: 6\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-1-使用rowmapper的queryforobject-方法" tabindex="-1"><a class="header-anchor" href="#_4-1-使用rowmapper的queryforobject-方法"><span>4.1. 使用RowMapper的queryForObject()方法</span></a></h3><p>与query()方法不同，queryForObject()旨在处理数据库查询结果中的单行。让我们首先检查以下使用已弃用的queryForObject()版本的方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">getStudentOfStudentIDAndGrade</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> studentID<span class="token punctuation">,</span> <span class="token class-name">Integer</span> grade<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;select student_id, student_name, age, gender, grade from student where student_id = ? and grade = ?&quot;</span><span class="token punctuation">;</span>\n  <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> <span class="token punctuation">{</span>studentID<span class="token punctuation">,</span> grade<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StudentRowMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述方法返回具有特定学生ID和年级的学生。但就像已弃用的query()方法一样，它也需要为查询参数声明一个Object[]类型的变量。</p><p>由于上述方法促进了样板代码，让我们看看一种更干净的方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">getStudentOfStudentIDAndGrade</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> studentID<span class="token punctuation">,</span> <span class="token class-name">Integer</span> grade<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;select student_id, student_name, age, gender, grade from student where student_id = ? and grade = ?&quot;</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StudentRowMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> studentID<span class="token punctuation">,</span> grade<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然而，在这里，没有必要声明一个Object[]类型的变量。queryForObject()的Varargs变体直接将studentID和grade参数作为最后参数。</p><p>现在，让我们看看这些方法是如何使用的：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenDeprecatedMethodQueryForObject_whenArgsStudentIDAndGrade_thenReturnStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token class-name">Student</span> student <span class="token operator">=</span> studentDaoWithDeprecatedJdbcTemplateMethods<span class="token punctuation">.</span><span class="token function">getStudentOfStudentIDAndGrade</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span><span class="token function">getGrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span><span class="token function">getStudentId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Student ID: &quot;</span> <span class="token operator">+</span> student<span class="token punctuation">.</span><span class="token function">getStudentId</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token operator">+</span> <span class="token string">&quot; Student Name: &quot;</span> <span class="token operator">+</span> student<span class="token punctuation">.</span><span class="token function">getStudentName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; Student grade: &quot;</span> <span class="token operator">+</span> student<span class="token punctuation">.</span><span class="token function">getGrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenPreferredMethodQueryForObject_whenArgsStudentIDAndGrade_thenReturnStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token class-name">Student</span> student <span class="token operator">=</span> studentDaoWithPreferredJdbcTemplateMethods<span class="token punctuation">.</span><span class="token function">getStudentOfStudentIDAndGrade</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span><span class="token function">getGrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span><span class="token function">getStudentId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Student ID: &quot;</span> <span class="token operator">+</span> student<span class="token punctuation">.</span><span class="token function">getStudentId</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token operator">+</span> <span class="token string">&quot; Student Name: &quot;</span> <span class="token operator">+</span> student<span class="token punctuation">.</span><span class="token function">getStudentName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; Student grade: &quot;</span> <span class="token operator">+</span> student<span class="token punctuation">.</span><span class="token function">getGrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如预期的那样，两种方法给出了相同的输出：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Student ID: 4 Student Name: Sophia Martinez Student grade: 1\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-2-使用class-t-的queryforobject" tabindex="-1"><a class="header-anchor" href="#_4-2-使用class-t-的queryforobject"><span>4.2. 使用Class<code>&lt;T&gt;</code>的queryForObject()</span></a></h3><p>让我们首先看看使用已弃用的方法queryForObject(String sql, Object[] args, Class<code>&lt;T&gt;</code> requiredType)的示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getCountOfGenderInAGrade</span><span class="token punctuation">(</span><span class="token class-name">String</span> gender<span class="token punctuation">,</span> <span class="token class-name">Integer</span> grade<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;select count(1) as total from student where gender = ? and grade = ?&quot;</span><span class="token punctuation">;</span>\n  <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> <span class="token punctuation">{</span>gender<span class="token punctuation">,</span> grade<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述方法返回在给定年级中特定性别的学生总数。</p><p>让我们看看使用首选方法queryForObject(String sql, Class<code>&lt;T&gt;</code> requiredType, Object... args)的方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getCountOfGenderInAGrade</span><span class="token punctuation">(</span><span class="token class-name">String</span> gender<span class="token punctuation">,</span> <span class="token class-name">Integer</span> grade<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;select count(1) as total from student where gender = ? and grade = ?&quot;</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> gender<span class="token punctuation">,</span> grade<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>像往常一样，在上述方法中，我们能够摆脱Object[]类型的args变量。</p><p>现在，让我们通过以下方法展示getCountOfGenderInAGrade()的实际应用：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenPreferredMethodQueryForObject_whenArgsGenderAndGrade_thenReturnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token class-name">Integer</span> count <span class="token operator">=</span> studentDaoWithPreferredJdbcTemplateMethods<span class="token punctuation">.</span><span class="token function">getCountOfGenderInAGrade</span><span class="token punctuation">(</span><span class="token string">&quot;Female&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Total number of Female Students: &quot;</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenDeprecatedMethodQueryForObject_whenArgsGenderAndGrade_thenReturnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token class-name">Integer</span> count <span class="token operator">=</span> studentDaoWithPreferredJdbcTemplateMethods<span class="token punctuation">.</span><span class="token function">getCountOfGenderInAGrade</span><span class="token punctuation">(</span><span class="token string">&quot;Female&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Total number of Female Students: &quot;</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，如下所示，替换方法成功地获得了类似的结果：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Total number of Female Students: 6\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_5-结论" tabindex="-1"><a class="header-anchor" href="#_5-结论"><span>5. 结论</span></a></h2><p>在这个教程中，我们探讨了JdbcTemplate类中query()和queryForObject()方法的已弃用变体的首选替代品。通过示例，我们解释了使用Varargs作为参数的新方法。我们还看到了它如何帮助消除将参数放入对象数组的样板代码。</p><p>像往常一样，示例可以在GitHub上找到。</p><p>OK</p>',73),o=[p];function c(u,l){return a(),s("div",null,o)}const d=n(e,[["render",c],["__file","2024-06-30-How to Replace Deprecated jdbcTemplate.queryForObject and jdbcTemplate.query in Spring Boot 2.4.X and above.html.vue"]]),k=JSON.parse(`{"path":"/posts/baeldung/2024-06-30/2024-06-30-How%20to%20Replace%20Deprecated%20jdbcTemplate.queryForObject%20and%20jdbcTemplate.query%20in%20Spring%20Boot%202.4.X%20and%20above.html","title":"如何在Spring Boot 2.4.X及以上版本中替换已弃用的jdbcTemplate.queryForObject和jdbcTemplate.query方法 | Baeldung","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Spring Boot","Java"],"tag":["Spring","JDBC","Deprecated Methods"],"head":[["meta",{"name":"keywords","content":"Spring Boot, Java, JdbcTemplate, Deprecated Methods, Varargs"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-06-30/2024-06-30-How%20to%20Replace%20Deprecated%20jdbcTemplate.queryForObject%20and%20jdbcTemplate.query%20in%20Spring%20Boot%202.4.X%20and%20above.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"如何在Spring Boot 2.4.X及以上版本中替换已弃用的jdbcTemplate.queryForObject和jdbcTemplate.query方法 | Baeldung"}],["meta",{"property":"og:description","content":"如何在Spring Boot 2.4.X及以上版本中替换已弃用的jdbcTemplate.queryForObject和jdbcTemplate.query方法 | Baeldung 在这个教程中，我们将讨论JdbcTemplate中已弃用的queryForObject()和query()方法及其首选替代方法。已弃用的方法接受在对象数组中传递的参数，而..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-30T08:34:42.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:tag","content":"JDBC"}],["meta",{"property":"article:tag","content":"Deprecated Methods"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-30T08:34:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"如何在Spring Boot 2.4.X及以上版本中替换已弃用的jdbcTemplate.queryForObject和jdbcTemplate.query方法 | Baeldung\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-30T08:34:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"如何在Spring Boot 2.4.X及以上版本中替换已弃用的jdbcTemplate.queryForObject和jdbcTemplate.query方法 | Baeldung 在这个教程中，我们将讨论JdbcTemplate中已弃用的queryForObject()和query()方法及其首选替代方法。已弃用的方法接受在对象数组中传递的参数，而..."},"headers":[{"level":3,"title":"2. 数据库设置","slug":"_2-数据库设置","link":"#_2-数据库设置","children":[]},{"level":3,"title":"3. 已弃用的query()方法","slug":"_3-已弃用的query-方法","link":"#_3-已弃用的query-方法","children":[]},{"level":3,"title":"4.1. 使用RowMapper的queryForObject()方法","slug":"_4-1-使用rowmapper的queryforobject-方法","link":"#_4-1-使用rowmapper的queryforobject-方法","children":[]},{"level":3,"title":"4.2. 使用Class<T>的queryForObject()","slug":"_4-2-使用class-t-的queryforobject","link":"#_4-2-使用class-t-的queryforobject","children":[]},{"level":2,"title":"5. 结论","slug":"_5-结论","link":"#_5-结论","children":[]}],"git":{"createdTime":1719736482000,"updatedTime":1719736482000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":7.49,"words":2248},"filePathRelative":"posts/baeldung/2024-06-30/2024-06-30-How to Replace Deprecated jdbcTemplate.queryForObject and jdbcTemplate.query in Spring Boot 2.4.X and above.md","localizedDate":"2022年4月1日","excerpt":"\\n<p>在这个教程中，我们将讨论JdbcTemplate中已弃用的queryForObject()和query()方法及其首选替代方法。已弃用的方法接受在对象数组中传递的参数，而新方法则使用Varargs来传递参数。这种方法更直观，因为Varargs专门设计用于高效地向方法传递可变数量的参数。</p>\\n<p>在我们的教程中，我们将通过在内存中的H2数据库上运行查询来解释所有方法。</p>\\n<h3>2. 数据库设置</h3>\\n<p>在我们讨论问题方法之前，让我们首先检查一下我们将在所有示例中使用的学生表：</p>\\n<div class=\\"language-sql\\" data-ext=\\"sql\\" data-title=\\"sql\\"><pre class=\\"language-sql\\"><code><span class=\\"token keyword\\">CREATE</span> <span class=\\"token keyword\\">TABLE</span> student <span class=\\"token punctuation\\">(</span>\\n  student_id <span class=\\"token keyword\\">INT</span> <span class=\\"token keyword\\">AUTO_INCREMENT</span> <span class=\\"token keyword\\">PRIMARY</span> <span class=\\"token keyword\\">KEY</span><span class=\\"token punctuation\\">,</span>\\n  student_name <span class=\\"token keyword\\">VARCHAR</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">255</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">NOT</span> <span class=\\"token boolean\\">NULL</span><span class=\\"token punctuation\\">,</span>\\n  age <span class=\\"token keyword\\">INT</span><span class=\\"token punctuation\\">,</span>\\n  grade <span class=\\"token keyword\\">INT</span> <span class=\\"token operator\\">NOT</span> <span class=\\"token boolean\\">NULL</span><span class=\\"token punctuation\\">,</span>\\n  gender <span class=\\"token keyword\\">VARCHAR</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">10</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">NOT</span> <span class=\\"token boolean\\">NULL</span><span class=\\"token punctuation\\">,</span>\\n  state <span class=\\"token keyword\\">VARCHAR</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">100</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">NOT</span> <span class=\\"token boolean\\">NULL</span>\\n<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">-- 学生 1</span>\\n<span class=\\"token keyword\\">INSERT</span> <span class=\\"token keyword\\">INTO</span> student <span class=\\"token punctuation\\">(</span>student_name<span class=\\"token punctuation\\">,</span> age<span class=\\"token punctuation\\">,</span> grade<span class=\\"token punctuation\\">,</span> gender<span class=\\"token punctuation\\">,</span> state<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">VALUES</span> <span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'John Smith'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">18</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'Male'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'California'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">-- 学生 2</span>\\n<span class=\\"token keyword\\">INSERT</span> <span class=\\"token keyword\\">INTO</span> student <span class=\\"token punctuation\\">(</span>student_name<span class=\\"token punctuation\\">,</span> age<span class=\\"token punctuation\\">,</span> grade<span class=\\"token punctuation\\">,</span> gender<span class=\\"token punctuation\\">,</span> state<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">VALUES</span> <span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'Emily Johnson'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">17</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'Female'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'New York'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">-- 更多插入语句...</span>\\n</code></pre></div>","autoDesc":true}`);export{d as comp,k as data};
