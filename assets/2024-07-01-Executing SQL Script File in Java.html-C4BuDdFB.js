import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-DWhzy7sT.js";const p={},e=t(`<h1 id="如何从java运行sql脚本" tabindex="-1"><a class="header-anchor" href="#如何从java运行sql脚本"><span>如何从Java运行SQL脚本</span></a></h1><p>在本教程中，我们将讨论如何从Java运行SQL脚本。作为其中的一部分，我们将探索两个库：MyBatis和Spring JDBC。MyBatis提供了ScriptRunner类，而Spring JDBC提供了ScriptUtils，可以直接从磁盘读取SQL脚本文件并在目标数据库上运行它们。</p><p>我们还将实现一个自定义的数据库实用工具，用于从文件中读取SQL语句，然后批量执行它们。</p><p>为了保持简单并使代码能够迅速运行，让我们使用广泛使用的内存中H2嵌入式数据库进行测试。让我们看看它们都在行动。</p><h2 id="使用mybatis-scriptrunner执行sql脚本" tabindex="-1"><a class="header-anchor" href="#使用mybatis-scriptrunner执行sql脚本"><span>使用MyBatis ScriptRunner执行SQL脚本</span></a></h2><p>首先，让我们通过在pom.xml中包含以下内容来添加mybatis的Maven依赖项：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>\`\`&lt;dependency&gt;\`\`
    \`\`&lt;groupId&gt;\`\`org.mybatis\`\`&lt;/groupId&gt;\`\`
    \`\`&lt;artifactId&gt;\`\`mybatis\`\`&lt;/artifactId&gt;\`\`
    \`\`&lt;version&gt;\`\`3.5.7\`\`&lt;/version&gt;\`\`
\`\`&lt;/dependency&gt;\`\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，让我们来看看MyBatisScriptUtility类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisScriptUtility</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">runScript</span><span class="token punctuation">(</span>
      <span class="token class-name">String</span> path<span class="token punctuation">,</span>
      <span class="token class-name">Connection</span> connection
    <span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
      <span class="token class-name">ScriptRunner</span> scriptRunner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScriptRunner</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>
      scriptRunner<span class="token punctuation">.</span><span class="token function">setSendFullScript</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      scriptRunner<span class="token punctuation">.</span><span class="token function">setStopOnError</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      scriptRunner<span class="token punctuation">.</span><span class="token function">runScript</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>FileReader</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如上面的代码所示，ScriptRunner提供了逐行执行脚本以及一次性执行完整脚本的选项。</p><p>在执行SQL文件之前，让我们看看它：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 如果不存在，则创建employees表</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> employees <span class="token punctuation">(</span>
    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>
    first_name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    last_name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    department <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    salary <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 插入员工记录</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> employees <span class="token punctuation">(</span>id<span class="token punctuation">,</span> first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> department<span class="token punctuation">,</span> salary<span class="token punctuation">)</span>
<span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Doe&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;HR&#39;</span><span class="token punctuation">,</span> <span class="token number">50000.00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> employees <span class="token punctuation">(</span>id<span class="token punctuation">,</span> first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> department<span class="token punctuation">,</span> salary<span class="token punctuation">)</span>
<span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;Jane&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Smith&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;IT&#39;</span><span class="token punctuation">,</span> <span class="token number">60000.00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 更多SQL语句....</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如我们所看到的，上述文件包含了块注释、单行注释、空白行、创建表语句和插入语句的混合。这使我们能够测试本文讨论的库的解析能力。</p><p>执行整个脚本文件的实现是直接的。为此，<strong>整个文件从磁盘读取并作为字符串参数传递给方法java.sql.Statement.execute()</strong>。因此，我们更倾向于逐行运行它：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenConnectionObject_whenSQLFile_thenExecute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">&quot;employee.sql&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">MyBatisScriptUtility</span><span class="token punctuation">.</span><span class="token function">runScript</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> connection<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Statement</span> statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT COUNT(1) FROM employees&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> count <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;插入的记录数量不正确&quot;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，我们使用了一个SQL文件，该文件创建了一个_employees_表，然后向其中插入了20条记录。</p><p>更好奇的读者也可以查看ScriptRunner的源代码。</p><h2 id="使用spring-jdbc-scriptutils执行sql脚本" tabindex="-1"><a class="header-anchor" href="#使用spring-jdbc-scriptutils执行sql脚本"><span>使用Spring JDBC ScriptUtils执行SQL脚本</span></a></h2><p>继续，是时候检查ScriptUtils类了。让我们首先处理Maven依赖项：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>\`\`&lt;dependency&gt;\`\`
    \`\`&lt;groupId&gt;\`\`org.springframework\`\`&lt;/groupId&gt;\`\`
    \`\`&lt;artifactId&gt;\`\`spring-jdbc\`\`&lt;/artifactId&gt;\`\`
    \`\`&lt;version&gt;\`\`5.3.29\`\`&lt;/version&gt;\`\`
\`\`&lt;/dependency&gt;\`\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在此之后，让我们看看SpringScriptUtility类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringScriptUtility</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">runScript</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">,</span> <span class="token class-name">Connection</span> connection<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">boolean</span> continueOrError <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> ignoreFailedDrops <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> commentPrefix <span class="token operator">=</span> <span class="token string">&quot;--&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> separator <span class="token operator">=</span> <span class="token string">&quot;;&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> blockCommentStartDelimiter <span class="token operator">=</span> <span class="token string">&quot;/*&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> blockCommentEndDelimiter <span class="token operator">=</span> <span class="token string">&quot;*/&quot;</span><span class="token punctuation">;</span>

        <span class="token class-name">ScriptUtils</span><span class="token punctuation">.</span><span class="token function">executeSqlScript</span><span class="token punctuation">(</span>
          connection<span class="token punctuation">,</span>
          <span class="token keyword">new</span> <span class="token class-name">EncodedResource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PathResource</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          continueOrError<span class="token punctuation">,</span>
          ignoreFailedDrops<span class="token punctuation">,</span>
          commentPrefix<span class="token punctuation">,</span>
          separator<span class="token punctuation">,</span>
          blockCommentStartDelimiter<span class="token punctuation">,</span>
          blockCommentEndDelimiter
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如我们在上面看到的，ScriptUtils提供了多种读取SQL文件的选项。因此，它支持使用不同分隔符进行注释识别的多种数据库引擎，超出了典型的“--”，“/<em>”和“</em>/”。此外，还有两个更多的参数continueOnError和ignoreFailedDrops，它们的目的不言自明。</p><p>与MyBatis库不同，ScriptUtils没有提供运行完整脚本的选项，而是更倾向于逐个运行SQL语句。这可以通过查看其源代码来确认。</p><p>让我们看看执行情况：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenConnectionObject_whenSQLFile_thenExecute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">&quot;employee.sql&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">SpringScriptUtility</span><span class="token punctuation">.</span><span class="token function">runScript</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> connection<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Statement</span> statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT COUNT(1) FROM employees&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> count <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;插入的记录数量不正确&quot;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述方法中，我们只是使用_path_和_connection_对象调用了_SpringScriptUtility.runScript()_。</p><h2 id="使用jdbc批量执行sql语句" tabindex="-1"><a class="header-anchor" href="#使用jdbc批量执行sql语句"><span>使用JDBC批量执行SQL语句</span></a></h2><p>到目前为止，我们已经看到这两个库都相当支持执行SQL文件。但是，它们都没有提供批量运行SQL语句的选项。这是执行大型SQL文件的重要功能。</p><p>因此，让我们想出一个自己的SqlScriptBatchExecutor：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">executeBatchedSQL</span><span class="token punctuation">(</span><span class="token class-name">String</span> scriptFilePath<span class="token punctuation">,</span> <span class="token class-name">Connection</span> connection<span class="token punctuation">,</span> <span class="token keyword">int</span> batchSize<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span>\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>\`\`\`\` sqlStatements <span class="token operator">=</span> <span class="token function">parseSQLScript</span><span class="token punctuation">(</span>scriptFilePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">executeSQLBatches</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> sqlStatements<span class="token punctuation">,</span> batchSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述实现可以总结为两行：<strong>_parseSQLScript()_方法从文件中获取SQL语句，而_executeSQLBatches()_则按批次执行它们</strong>。</p><p>让我们看看_parseSQLScript()_方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token class-name">List</span>\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>\`\`\`\` <span class="token function">parseSQLScript</span><span class="token punctuation">(</span><span class="token class-name">String</span> scriptFilePath<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span>\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>\`\`\`\` sqlStatements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>scriptFilePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">StringBuilder</span> currentStatement <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> line<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Matcher</span> commentMatcher <span class="token operator">=</span> <span class="token constant">COMMENT_PATTERN</span><span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>
            line <span class="token operator">=</span> commentMatcher<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            line <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            currentStatement<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            <span class="token keyword">if</span> <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&quot;;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                sqlStatements<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>currentStatement<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>currentStatement<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                currentStatement<span class="token punctuation">.</span><span class="token function">setLength</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">throw</span> e<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> sqlStatements<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用_COMMENT_PATTERN = Pattern.compile(&quot;–.<em>|/[\\</em>(.|[\\r\\n])*?*/&quot;)_来识别注释和空白行，然后从SQL文件中删除它们。像MyBatis一样，我们也只支持默认的注释分隔符。</p><p>现在，让我们看看_executeSQLBatches()_方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">executeSQLBatches</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> connection<span class="token punctuation">,</span> <span class="token class-name">List</span>\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>\`\`\`\` sqlStatements<span class="token punctuation">,</span> <span class="token keyword">int</span> batchSize<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">Statement</span> statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> sql <span class="token operator">:</span> sqlStatements<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        statement<span class="token punctuation">.</span><span class="token function">addBatch</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
        count<span class="token operator">++</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">%</span> batchSize <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Executing batch&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            statement<span class="token punctuation">.</span><span class="token function">executeBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            statement<span class="token punctuation">.</span><span class="token function">clearBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">%</span> batchSize <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        statement<span class="token punctuation">.</span><span class="token function">executeBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    connnection<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述方法获取SQL语句列表，遍历它，然后在批量大小增长到参数_batchSize_的值时执行它。</p><p>让我们看看自定义程序的运行情况：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenConnectionObject_whenSQLFile_thenExecute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>
      <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">&quot;employee.sql&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">SqlScriptBatchExecutor</span><span class="token punctuation">.</span><span class="token function">executeBatchedSQL</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> connection<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Statement</span> statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT COUNT(1) FROM employees&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> count <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;插入的记录数量不正确&quot;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它分两批执行SQL语句，每批10条语句。值得注意的是，批量大小是参数化的，可以根据文件中的SQL语句数量进行调整。</p><h2 id="结论" tabindex="-1"><a class="header-anchor" href="#结论"><span>结论</span></a></h2><p>在本文中，我们了解了MyBatis和Spring JDBC提供的数据库实用工具来执行SQL文件。我们发现Spring JDBC在解析SQL文件方面更加灵活。此外，我们开发了一个自定义实用工具，支持SQL语句的批量执行。</p><p>像往常一样，本教程的代码可以在GitHub上找到。</p>`,44),c=[e];function o(i,l){return a(),s("div",null,c)}const r=n(p,[["render",o],["__file","2024-07-01-Executing SQL Script File in Java.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-01/2024-07-01-Executing%20SQL%20Script%20File%20in%20Java.html","title":"如何从Java运行SQL脚本","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","SQL"],"tag":["MyBatis","Spring JDBC"],"head":[["meta",{"name":"keywords","content":"Java, SQL, ScriptRunner, ScriptUtils, JDBC, 批处理"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-01/2024-07-01-Executing%20SQL%20Script%20File%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"如何从Java运行SQL脚本"}],["meta",{"property":"og:description","content":"如何从Java运行SQL脚本 在本教程中，我们将讨论如何从Java运行SQL脚本。作为其中的一部分，我们将探索两个库：MyBatis和Spring JDBC。MyBatis提供了ScriptRunner类，而Spring JDBC提供了ScriptUtils，可以直接从磁盘读取SQL脚本文件并在目标数据库上运行它们。 我们还将实现一个自定义的数据库实用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-01T15:33:10.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"MyBatis"}],["meta",{"property":"article:tag","content":"Spring JDBC"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-01T15:33:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"如何从Java运行SQL脚本\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-01T15:33:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"如何从Java运行SQL脚本 在本教程中，我们将讨论如何从Java运行SQL脚本。作为其中的一部分，我们将探索两个库：MyBatis和Spring JDBC。MyBatis提供了ScriptRunner类，而Spring JDBC提供了ScriptUtils，可以直接从磁盘读取SQL脚本文件并在目标数据库上运行它们。 我们还将实现一个自定义的数据库实用..."},"headers":[{"level":2,"title":"使用MyBatis ScriptRunner执行SQL脚本","slug":"使用mybatis-scriptrunner执行sql脚本","link":"#使用mybatis-scriptrunner执行sql脚本","children":[]},{"level":2,"title":"使用Spring JDBC ScriptUtils执行SQL脚本","slug":"使用spring-jdbc-scriptutils执行sql脚本","link":"#使用spring-jdbc-scriptutils执行sql脚本","children":[]},{"level":2,"title":"使用JDBC批量执行SQL语句","slug":"使用jdbc批量执行sql语句","link":"#使用jdbc批量执行sql语句","children":[]},{"level":2,"title":"结论","slug":"结论","link":"#结论","children":[]}],"git":{"createdTime":1719847990000,"updatedTime":1719847990000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":4.89,"words":1468},"filePathRelative":"posts/baeldung/2024-07-01/2024-07-01-Executing SQL Script File in Java.md","localizedDate":"2022年4月1日","excerpt":"\\n<p>在本教程中，我们将讨论如何从Java运行SQL脚本。作为其中的一部分，我们将探索两个库：MyBatis和Spring JDBC。MyBatis提供了ScriptRunner类，而Spring JDBC提供了ScriptUtils，可以直接从磁盘读取SQL脚本文件并在目标数据库上运行它们。</p>\\n<p>我们还将实现一个自定义的数据库实用工具，用于从文件中读取SQL语句，然后批量执行它们。</p>\\n<p>为了保持简单并使代码能够迅速运行，让我们使用广泛使用的内存中H2嵌入式数据库进行测试。让我们看看它们都在行动。</p>\\n<h2>使用MyBatis ScriptRunner执行SQL脚本</h2>","autoDesc":true}');export{r as comp,d as data};
