import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-CseMoHkL.js";const e={},p=t('<h1 id="jakarta-ee-mvc-eclipse-krazo-简介" tabindex="-1"><a class="header-anchor" href="#jakarta-ee-mvc-eclipse-krazo-简介"><span>Jakarta EE MVC / Eclipse Krazo 简介</span></a></h1><p>模型-视图-控制器（MVC）是一种流行的设计模式，用于构建Web应用程序。多年来，它已成为构建现代基于Web的应用程序的事实上的设计原则。</p><p>在本教程中，我们将学习如何使用Jakarta EE MVC 2.0构建带有网页和REST API的Web应用程序。</p><h2 id="_2-jsr-371" tabindex="-1"><a class="header-anchor" href="#_2-jsr-371"><span>2. JSR-371</span></a></h2><p><strong>Jakarta MVC 2.0（前称JSR 371 MVC 1.0）是基于Jakarta RESTful Web Services或JAX-RS（前称Java API for RESTful web services）的基于动作的Web框架。</strong> JSR-371通过额外的注解补充了JAX-RS，使构建Web应用程序更加方便。</p><p>JSR-371或Jakarta MVC标准化了我们在Java中开发Web应用程序的方式。此外，主要目标是利用现有的CDI（Contexts和Dependency Injections）和Bean Validation，并支持JSP和Facelets作为视图技术。</p><p>目前，Jakarta MVC 2.1规范的工作正在进行中，可能会随着Jakarta EE 10的发布而发布。</p><h2 id="_3-jsr-371注解" tabindex="-1"><a class="header-anchor" href="#_3-jsr-371注解"><span>3. JSR-371注解</span></a></h2><p>JSR-371定义了一些除了JAX-RS注解之外的注解。<strong>所有这些注解都是_jakarta.mvc._包的一部分。</strong></p><h3 id="_3-1-jakarta-mvc-controller" tabindex="-1"><a class="header-anchor" href="#_3-1-jakarta-mvc-controller"><span>3.1. <em>jakarta.mvc.Controller</em></span></a></h3><p><em>@Controller_注解将资源标记为MVC控制器。当用于类时，类中的所有资源方法都变成控制器。类似地，将此注解用于资源方法会使得该方法成为控制器。通常，如果我们想要在同一个类中定义MVC控制器和REST API，对方法定义</em>@Controller_会很有帮助。</p><p>例如，让我们定义一个控制器：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Path</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@GET</span>\n    <span class="token annotation punctuation">@Produces</span><span class="token punctuation">(</span><span class="token string">&quot;text/html&quot;</span><span class="token punctuation">)</span>\n    <span class="token annotation punctuation">@Controller</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">showUserForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;user.jsp&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token annotation punctuation">@GET</span>\n    <span class="token annotation punctuation">@Produces</span><span class="token punctuation">(</span><span class="token string">&quot;application/json&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUserDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">getUserDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个类有一个_@Controller_来渲染用户表单（<em>showUserForm</em>）和一个返回用户详细信息JSON的REST API（<em>getUserDetails</em>）。</p><h3 id="_3-2-jakarta-mvc-view" tabindex="-1"><a class="header-anchor" href="#_3-2-jakarta-mvc-view"><span>3.2. <em>jakarta.mvc.View</em></span></a></h3><p>像_@Controller_一样，我们可以将_@View_注解标记在资源类或资源方法上。通常，返回_void_的资源方法应该有_@View_。带有_@View_的类表示类中控制器的默认视图，类型为_void_。</p><p>例如，让我们定义一个带有_@View_的控制器：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Controller</span>\n<span class="token annotation punctuation">@Path</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@View</span><span class="token punctuation">(</span><span class="token string">&quot;defaultModal.jsp&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@GET</span>\n    <span class="token annotation punctuation">@Path</span><span class="token punctuation">(</span><span class="token string">&quot;void&quot;</span><span class="token punctuation">)</span>\n    <span class="token annotation punctuation">@View</span><span class="token punctuation">(</span><span class="token string">&quot;userForm.jsp&quot;</span><span class="token punctuation">)</span>\n    <span class="token annotation punctuation">@Produces</span><span class="token punctuation">(</span><span class="token string">&quot;text/html&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">getInitFormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@GET</span>\n    <span class="token annotation punctuation">@Path</span><span class="token punctuation">(</span><span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span>\n    <span class="token annotation punctuation">@Produces</span><span class="token punctuation">(</span><span class="token string">&quot;text/html&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showModal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">getModalData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，资源类和资源方法都有_@View_注解。控制器_showForm_渲染视图_userForm.jsp_。类似地，<em>showModal_控制器渲染在资源类上定义的_defaultModal.jsp</em>。</p><h3 id="_3-3-jakarta-mvc-binding-mvcbinding" tabindex="-1"><a class="header-anchor" href="#_3-3-jakarta-mvc-binding-mvcbinding"><span>3.3. <em>jakarta.mvc.binding.MvcBinding</em></span></a></h3><p>Jakarta RESTful Webservices会拒绝具有绑定和验证错误的请求。对于与Web页面交互的用户来说，可能不适用类似的设置。幸运的是，即使在发生绑定和验证错误时，Jakarta MVC也会调用控制器。通常，用户应该清楚地了解数据绑定错误。</p><p>控制器注入一个_BindingResult_以向用户呈现易于理解的验证和绑定错误消息。例如，让我们定义一个带有_@MvcBinding_的控制器：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Controller</span>\n<span class="token annotation punctuation">@Path</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@MvcBinding</span>\n    <span class="token annotation punctuation">@FormParam</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span>\n    <span class="token annotation punctuation">@Min</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>\n    <span class="token annotation punctuation">@Inject</span>\n    <span class="token keyword">private</span> <span class="token class-name">BindingResult</span> bindingResult<span class="token punctuation">;</span>\n    <span class="token annotation punctuation">@Inject</span>\n    <span class="token keyword">private</span> <span class="token class-name">Models</span> models<span class="token punctuation">;</span>\n    <span class="token annotation punctuation">@POST</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">processForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>bindingResult<span class="token punctuation">.</span><span class="token function">isFailed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            models<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;errors&quot;</span><span class="token punctuation">,</span> bindingResult<span class="token punctuation">.</span><span class="token function">getAllMessages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> <span class="token string">&quot;user.jsp&quot;</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，如果用户输入的年龄小于18岁，用户将被送回带有绑定错误的同一页面。使用表达式语言（EL）的_user.jsp_页面可以检索请求属性_errors_并在页面上显示它们。</p><h3 id="_3-4-jakarta-mvc-redirectscoped" tabindex="-1"><a class="header-anchor" href="#_3-4-jakarta-mvc-redirectscoped"><span>3.4. <em>jakarta.mvc.RedirectScoped</em></span></a></h3><p>考虑一个表单，用户填写并提交数据（HTTP POST）。服务器处理数据，并将用户重定向到成功页面（HTTP GET）。这种模式被广泛称为PRG（Post-Redirect-Get）模式。在我们希望在POST和GET之间保留数据的情况下，有几种场景。在这些场景中，模型/bean的作用域超出了单个请求。</p><p>当一个bean被注解为_@RedirectScoped_时，bean的状态超出了单个请求。然而，在POST、重定向和GET完成后，状态被销毁。用_@RedirectScoped_标记的bean在POST、重定向和GET完成后被销毁。</p><p>例如，假设bean_User_有注解_@RedirectScoped_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RedirectScoped</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token comment">// getters and setters</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，将此bean注入控制器：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Controller</span>\n<span class="token annotation punctuation">@Path</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Inject</span>\n    <span class="token keyword">private</span> <span class="token class-name">User</span> user<span class="token punctuation">;</span>\n    <span class="token annotation punctuation">@POST</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;John Doe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;redirect:/submit&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token annotation punctuation">@GET</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;success.jsp&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，bean_User_可用于POST以及随后的重定向和GET。因此，_success.jsp_可以使用EL访问bean的_name_属性。</p><h3 id="_3-5-jakarta-mvc-uriref" tabindex="-1"><a class="header-anchor" href="#_3-5-jakarta-mvc-uriref"><span>3.5. <em>jakarta.mvc.UriRef</em></span></a></h3><p>我们只能对资源方法使用_@UriRef_注解。_@UriRef_使我们能够为资源方法提供名称。我们可以使用这些名称在视图中调用我们的控制器，而不是控制器路径URI。</p><p>假设有一个用户表单，有一个_href_：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/app/user<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>`Clich Here``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>``\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>点击_Clich Here_将调用映射到_GET /app/user_的控制器。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@GET</span>\n<span class="token annotation punctuation">@UriRef</span><span class="token punctuation">(</span><span class="token string">&quot;user-details&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUserDetails</span><span class="token punctuation">(</span><span class="token class-name">String</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    userService<span class="token punctuation">.</span><span class="token function">getUserDetails</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们用_user-details_命名了我们的控制器。现在，我们可以在视图中引用这个名字，而不是URI：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>${mvc.uri(&#39;user-details&#39;)}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>`Click Here``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>``\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-6-jakarta-mvc-security-csrfprotected" tabindex="-1"><a class="header-anchor" href="#_3-6-jakarta-mvc-security-csrfprotected"><span>3.6. <em>jakarta.mvc.security.CsrfProtected</em></span></a></h3><p>这个注解强制要求在调用资源方法时需要CSRF验证。如果CSRF令牌无效，客户端将收到_ForbiddenException_（HTTP 403）异常。只有资源方法才能有这个注解。</p><p>考虑一个控制器：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@POST</span>\n<span class="token annotation punctuation">@Path</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@CsrfProtected</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">saveUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    service<span class="token punctuation">.</span><span class="token function">saveUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>鉴于控制器有_@CsrfProtected_注解，只有在请求包含有效的CSRF令牌时，请求才能到达控制器。</p><h1 id="_4-构建mvc应用程序" tabindex="-1"><a class="header-anchor" href="#_4-构建mvc应用程序"><span>4. 构建MVC应用程序</span></a></h1><p>接下来，让我们使用REST API和控制器构建一个Web应用程序。最后，让我们将我们的Web应用程序部署在最新版本的Eclipse Glassfish上。</p><h3 id="_4-1-生成项目" tabindex="-1"><a class="header-anchor" href="#_4-1-生成项目"><span>4.1. 生成项目</span></a></h3><p>首先，让我们使用Maven _archetype:generate_生成Jakarta MVC 2.0项目：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>mvn archetype:generate <span class="token punctuation">\\</span>\n  <span class="token parameter variable">-DarchetypeGroupId</span><span class="token operator">=</span>org.eclipse.krazo <span class="token punctuation">\\</span>\n  <span class="token parameter variable">-DarchetypeArtifactId</span><span class="token operator">=</span>krazo-jakartaee9-archetype <span class="token punctuation">\\</span>\n  <span class="token parameter variable">-DarchetypeVersion</span><span class="token operator">=</span><span class="token number">2.0</span>.0 <span class="token parameter variable">-DgroupId</span><span class="token operator">=</span>com.baeldung <span class="token punctuation">\\</span>\n  <span class="token parameter variable">-DartifactId</span><span class="token operator">=</span>krazo <span class="token parameter variable">-DkrazoImpl</span><span class="token operator">=</span>jersey\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述archetype生成了一个带有所需工件的maven项目，类似于： <img src="https://www.baeldung.com/wp-content/uploads/2022/03/1.png" alt="img" loading="lazy"></p><p>此外，生成的_pom.xml_包含_jakarta.platform, jakarta.mvc_和_org.eclipse.krazo_依赖项：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```jakarta.platform```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```jakarta.jakartaee-web-api```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```9.1.0```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>`provided`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>`\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```jakarta.mvc```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```jakarta.mvc-api```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```2.0.0```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```org.eclipse.krazo```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```krazo-jersey```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```2.0.0```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-controllers" tabindex="-1"><a class="header-anchor" href="#_4-2-controllers"><span>4.2_Controllers_</span></a></h3><p>接下来，让我们定义控制器来显示表单、保存用户详细信息以及获取用户详细信息的API。但首先，让我们定义我们的应用程序路径：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ApplicationPath</span><span class="token punctuation">(</span><span class="token string">&quot;/app&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserApplication</span> <span class="token keyword">extends</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>应用程序路径被定义为_/app_。接下来，让我们定义我们的控制器，将用户转发到用户详细信息表单：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Path</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@GET</span>\n    <span class="token annotation punctuation">@Controller</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">showForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;user.jsp&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，在_WEB-INF/views_下我们可以创建视图_user.jsp_，并构建和部署应用程序：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>mvn clean <span class="token function">install</span> glassfish:deploy\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个Glassfish Maven插件构建、部署并在端口8080上运行。部署成功后，我们可以打开浏览器并访问URL：</p><p><em>http://localhost:8080/mvc-2.0/app/users</em>：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2022/03/form-1-1024x304.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>接下来，让我们定义一个处理表单提交动作的HTTP POST：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@POST</span>\n<span class="token annotation punctuation">@Controller</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">saveUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Valid</span> <span class="token annotation punctuation">@BeanParam</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;redirect:users/success&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，当用户点击_创建_按钮时，控制器处理POST请求并将用户重定向到成功页面：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2022/03/success-1024x133.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>让我们利用Jakarta验证、CDI和_@MvcBinding_提供表单验证：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Named</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@MvcBinding</span>\n    <span class="token annotation punctuation">@Null</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@MvcBinding</span>\n    <span class="token annotation punctuation">@NotNull</span>\n    <span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">&quot;名称不能为空&quot;</span><span class="token punctuation">)</span>\n    <span class="token annotation punctuation">@FormParam</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token comment">// 其他带有getter和setter的验证</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一旦我们有了表单验证，让我们检查绑定错误。如果有绑定错误，我们必须向用户展示验证消息。为此，让我们注入_BindingResult_来处理无效的表单参数。让我们更新我们的_saveUser_方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Inject</span>\n<span class="token keyword">private</span> <span class="token class-name">BindingResult</span> bindingResult<span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">saveUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Valid</span> <span class="token annotation punctuation">@BeanParam</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>bindingResult<span class="token punctuation">.</span><span class="token function">isFailed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        models<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;errors&quot;</span><span class="token punctuation">,</span> bindingResult<span class="token punctuation">.</span><span class="token function">getAllErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;user.jsp&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;redirect:users/success&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了验证，如果用户没有提交必填参数，我们将显示验证错误：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2022/03/validations-1024x402.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>接下来，让我们通过使用_@CsrfProtected_保护我们的POST方法免受CSRF攻击。给_saveUser_方法添加_@CsrfProtected_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@POST</span>\n<span class="token annotation punctuation">@Controller</span>\n<span class="token annotation punctuation">@CsrfProtected</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">saveUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Valid</span> <span class="token annotation punctuation">@BeanParam</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，让我们尝试点击_创建_按钮：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2022/03/403-1024x154.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>当控制器受到CSRF攻击的保护时，客户端在每次请求时都应该传递CSRF令牌。所以，让我们在_user.jsp_中添加一个隐藏字段，在每次请求时添加CSRF令牌：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hidden<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>${mvc.csrf.name}<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>${mvc.csrf.token}<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>同样，让我们现在开发一个REST API：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@GET</span>\n<span class="token annotation punctuation">@Produces</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">List</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span>` <span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> users<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个HTTP GET API返回用户列表。</p><h1 id="_5-结论" tabindex="-1"><a class="header-anchor" href="#_5-结论"><span>5. 结论</span></a></h1><p>在本文中，我们学习了Jakarta MVC 2.0以及如何使用Eclipse Krazo开发Web应用程序和REST API。我们已经看到了MVC 2.0如何标准化我们在Java中构建基于MVC的Web应用程序的方式。</p><p>如往常一样，完整的源代码可在GitHub上找到。</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2022/03/form-1-1024x304.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>OK</p>',87),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","2024-07-20-Introduction to Jakarta EE MVC   Eclipse Krazo.html.vue"]]),k=JSON.parse('{"path":"/posts/baeldung/2024-07-20/2024-07-20-Introduction%20to%20Jakarta%20EE%20MVC%20%20%20Eclipse%20Krazo.html","title":"Jakarta EE MVC / Eclipse Krazo 简介","lang":"zh-CN","frontmatter":{"date":"2024-07-21T00:00:00.000Z","category":["Java","Web开发"],"tag":["Jakarta EE MVC","Eclipse Krazo"],"head":[["meta",{"name":"keywords","content":"Java, Jakarta EE MVC, Eclipse Krazo, Web开发"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-20/2024-07-20-Introduction%20to%20Jakarta%20EE%20MVC%20%20%20Eclipse%20Krazo.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Jakarta EE MVC / Eclipse Krazo 简介"}],["meta",{"property":"og:description","content":"Jakarta EE MVC / Eclipse Krazo 简介 模型-视图-控制器（MVC）是一种流行的设计模式，用于构建Web应用程序。多年来，它已成为构建现代基于Web的应用程序的事实上的设计原则。 在本教程中，我们将学习如何使用Jakarta EE MVC 2.0构建带有网页和REST API的Web应用程序。 2. JSR-371 Jaka..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.baeldung.com/wp-content/uploads/2022/03/1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-20T21:39:04.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Jakarta EE MVC"}],["meta",{"property":"article:tag","content":"Eclipse Krazo"}],["meta",{"property":"article:published_time","content":"2024-07-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-20T21:39:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Jakarta EE MVC / Eclipse Krazo 简介\\",\\"image\\":[\\"https://www.baeldung.com/wp-content/uploads/2022/03/1.png\\",\\"https://www.baeldung.com/wp-content/uploads/2022/03/form-1-1024x304.png\\",\\"https://www.baeldung.com/wp-content/uploads/2022/03/success-1024x133.png\\",\\"https://www.baeldung.com/wp-content/uploads/2022/03/validations-1024x402.png\\",\\"https://www.baeldung.com/wp-content/uploads/2022/03/403-1024x154.png\\",\\"https://www.baeldung.com/wp-content/uploads/2022/03/form-1-1024x304.png\\"],\\"datePublished\\":\\"2024-07-21T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-20T21:39:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Jakarta EE MVC / Eclipse Krazo 简介 模型-视图-控制器（MVC）是一种流行的设计模式，用于构建Web应用程序。多年来，它已成为构建现代基于Web的应用程序的事实上的设计原则。 在本教程中，我们将学习如何使用Jakarta EE MVC 2.0构建带有网页和REST API的Web应用程序。 2. JSR-371 Jaka..."},"headers":[{"level":2,"title":"2. JSR-371","slug":"_2-jsr-371","link":"#_2-jsr-371","children":[]},{"level":2,"title":"3. JSR-371注解","slug":"_3-jsr-371注解","link":"#_3-jsr-371注解","children":[{"level":3,"title":"3.1. jakarta.mvc.Controller","slug":"_3-1-jakarta-mvc-controller","link":"#_3-1-jakarta-mvc-controller","children":[]},{"level":3,"title":"3.2. jakarta.mvc.View","slug":"_3-2-jakarta-mvc-view","link":"#_3-2-jakarta-mvc-view","children":[]},{"level":3,"title":"3.3. jakarta.mvc.binding.MvcBinding","slug":"_3-3-jakarta-mvc-binding-mvcbinding","link":"#_3-3-jakarta-mvc-binding-mvcbinding","children":[]},{"level":3,"title":"3.4. jakarta.mvc.RedirectScoped","slug":"_3-4-jakarta-mvc-redirectscoped","link":"#_3-4-jakarta-mvc-redirectscoped","children":[]},{"level":3,"title":"3.5. jakarta.mvc.UriRef","slug":"_3-5-jakarta-mvc-uriref","link":"#_3-5-jakarta-mvc-uriref","children":[]},{"level":3,"title":"3.6. jakarta.mvc.security.CsrfProtected","slug":"_3-6-jakarta-mvc-security-csrfprotected","link":"#_3-6-jakarta-mvc-security-csrfprotected","children":[]},{"level":3,"title":"4.1. 生成项目","slug":"_4-1-生成项目","link":"#_4-1-生成项目","children":[]},{"level":3,"title":"4.2_Controllers_","slug":"_4-2-controllers","link":"#_4-2-controllers","children":[]}]}],"git":{"createdTime":1721511544000,"updatedTime":1721511544000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":7.44,"words":2232},"filePathRelative":"posts/baeldung/2024-07-20/2024-07-20-Introduction to Jakarta EE MVC   Eclipse Krazo.md","localizedDate":"2024年7月21日","excerpt":"\\n<p>模型-视图-控制器（MVC）是一种流行的设计模式，用于构建Web应用程序。多年来，它已成为构建现代基于Web的应用程序的事实上的设计原则。</p>\\n<p>在本教程中，我们将学习如何使用Jakarta EE MVC 2.0构建带有网页和REST API的Web应用程序。</p>\\n<h2>2. JSR-371</h2>\\n<p><strong>Jakarta MVC 2.0（前称JSR 371 MVC 1.0）是基于Jakarta RESTful Web Services或JAX-RS（前称Java API for RESTful web services）的基于动作的Web框架。</strong> JSR-371通过额外的注解补充了JAX-RS，使构建Web应用程序更加方便。</p>","autoDesc":true}');export{d as comp,k as data};
