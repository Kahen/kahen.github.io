import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-DWhzy7sT.js";const p={},o=t('<hr><h1 id="使用graphql-spqr和spring-boot入门" tabindex="-1"><a class="header-anchor" href="#使用graphql-spqr和spring-boot入门"><span>使用GraphQL SPQR和Spring Boot入门</span></a></h1><p>GraphQL是一种用于Web API的查询和操作语言。SPQR是一个起源于使GraphQL工作更加无缝的库之一。</p><p>在本教程中，我们将学习GraphQL SPQR的基础知识，并在简单的Spring Boot项目中看到它的实际应用。</p><h2 id="_2-什么是graphql-spqr" tabindex="-1"><a class="header-anchor" href="#_2-什么是graphql-spqr"><span>2. 什么是GraphQL SPQR？</span></a></h2><p>GraphQL是由Facebook创建的著名查询语言。它的核心是模式——在这些文件中我们定义自定义类型和函数。</p><p>在传统方法中，如果我们想在我们的项目中添加GraphQL，我们需要遵循两个步骤。首先，我们需要向项目中添加GraphQL模式文件。其次，我们需要编写相应的Java POJO，代表模式中的每种类型。<strong>这意味着我们将在两个地方维护相同的信息：在模式文件和Java类中。</strong> 这种方法容易出错，需要更多的项目维护工作。</p><p>GraphQL模式发布者和查询解析器，简称<strong>SPQR</strong>，应运而生，以减少上述问题——它简单地从注解的Java类生成GraphQL模式。</p><h2 id="_3-在spring-boot中引入graphql-spqr" tabindex="-1"><a class="header-anchor" href="#_3-在spring-boot中引入graphql-spqr"><span>3. 在Spring Boot中引入GraphQL SPQR</span></a></h2><p>要看到SPQR在行动，我们将设置一个简单的服务。我们将使用GraphQL Spring Boot Starter和GraphQL SPQR。</p><h3 id="_3-1-设置" tabindex="-1"><a class="header-anchor" href="#_3-1-设置"><span>3.1. 设置</span></a></h3><p>让我们从向我们的POM添加SPQR和Spring Boot的依赖开始：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>````org.springframework.boot````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>````spring-boot-starter-web````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>````\n````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>````org.springframework.boot````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>````spring-boot-starter-test````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>````\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>``test``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>``\n````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>````org.springframework.boot````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>````spring-boot-starter-webflux````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>````\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>``test``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>``\n````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>````io.leangen.graphql````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>````spqr````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>````\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`0.12.4`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`\n````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-编写模型-book-类" tabindex="-1"><a class="header-anchor" href="#_3-2-编写模型-book-类"><span>3.2. 编写模型_Book_类</span></a></h3><p>现在我们已经添加了必要的依赖，让我们创建一个简单的_Book_类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> author<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上所示，它不包含任何SPQR注解。<strong>如我们不拥有源代码但希望从这个库中受益，这可能非常有用。</strong></p><h3 id="_3-3-编写bookservice" tabindex="-1"><a class="header-anchor" href="#_3-3-编写bookservice"><span>3.3. 编写BookService</span></a></h3><p>为了管理书籍集合，让我们创建一个_IBookService_接口：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IBookService</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Book</span> <span class="token function">getBookWithTitle</span><span class="token punctuation">(</span><span class="token class-name">String</span> title<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">List</span>``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span>`````` <span class="token function">getAllBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">Book</span> <span class="token function">addBook</span><span class="token punctuation">(</span><span class="token class-name">Book</span> book<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">Book</span> <span class="token function">updateBook</span><span class="token punctuation">(</span><span class="token class-name">Book</span> book<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">boolean</span> <span class="token function">deleteBook</span><span class="token punctuation">(</span><span class="token class-name">Book</span> book<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们将为我们的接口提供实现：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookService</span> <span class="token keyword">implements</span> <span class="token class-name">IBookService</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Set</span>``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span>`````` <span class="token constant">BOOKS_DATA</span> <span class="token operator">=</span> <span class="token function">initializeData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">Book</span> <span class="token function">getBookWithTitle</span><span class="token punctuation">(</span><span class="token class-name">String</span> title<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token constant">BOOKS_DATA</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>book <span class="token operator">-&gt;</span> book<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">List</span>``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span>`````` <span class="token function">getAllBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token constant">BOOKS_DATA</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">Book</span> <span class="token function">addBook</span><span class="token punctuation">(</span><span class="token class-name">Book</span> book<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token constant">BOOKS_DATA</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> book<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">Book</span> <span class="token function">updateBook</span><span class="token punctuation">(</span><span class="token class-name">Book</span> book<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token constant">BOOKS_DATA</span><span class="token punctuation">.</span><span class="token function">removeIf</span><span class="token punctuation">(</span>b <span class="token operator">-&gt;</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token constant">BOOKS_DATA</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> book<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">deleteBook</span><span class="token punctuation">(</span><span class="token class-name">Book</span> book<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token constant">BOOKS_DATA</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Set</span>``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span>`````` <span class="token function">initializeData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Book</span> book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;J. R. R. Tolkien&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;The Lord of the Rings&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Set</span>``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span>`````` books <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        books<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> books<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-使用graphql-spqr公开服务" tabindex="-1"><a class="header-anchor" href="#_3-4-使用graphql-spqr公开服务"><span>3.4. 使用graphql-spqr公开服务</span></a></h3><p>剩下的唯一事情是创建一个解析器，它将公开GraphQL的变更和查询。<strong>为此，我们将使用两个重要的SPQR注解——<em>@GraphQLMutation_和</em>@GraphQLQuery_：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookResolver</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Autowired</span>\n    <span class="token class-name">IBookService</span> bookService<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@GraphQLQuery</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;getBookWithTitle&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">Book</span> <span class="token function">getBookWithTitle</span><span class="token punctuation">(</span><span class="token annotation punctuation">@GraphQLArgument</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;title&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> title<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> bookService<span class="token punctuation">.</span><span class="token function">getBookWithTitle</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@GraphQLQuery</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;getAllBooks&quot;</span><span class="token punctuation">,</span> description <span class="token operator">=</span> <span class="token string">&quot;Get all books&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">List</span>``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span>`````` <span class="token function">getAllBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> bookService<span class="token punctuation">.</span><span class="token function">getAllBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@GraphQLMutation</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;addBook&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">Book</span> <span class="token function">addBook</span><span class="token punctuation">(</span><span class="token annotation punctuation">@GraphQLArgument</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;newBook&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Book</span> book<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> bookService<span class="token punctuation">.</span><span class="token function">addBook</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@GraphQLMutation</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;updateBook&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">Book</span> <span class="token function">updateBook</span><span class="token punctuation">(</span><span class="token annotation punctuation">@GraphQLArgument</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;modifiedBook&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Book</span> book<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> bookService<span class="token punctuation">.</span><span class="token function">updateBook</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@GraphQLMutation</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;deleteBook&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteBook</span><span class="token punctuation">(</span><span class="token annotation punctuation">@GraphQLArgument</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;book&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Book</span> book<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        bookService<span class="token punctuation">.</span><span class="token function">deleteBook</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们不想在每个方法中写_@GraphQLArgument_，并且对GraphQL参数命名为输入参数的名称感到满意，我们可以在编译代码时使用_-parameters_参数。</p><h3 id="_3-5-rest-controller" tabindex="-1"><a class="header-anchor" href="#_3-5-rest-controller"><span>3.5. Rest Controller</span></a></h3><p>最后，我们将定义一个Spring <em>@RestController.</em> <strong>为了使用SPQR公开服务，我们将配置_GraphQLSchema_和_GraphQL_对象：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GraphqlController</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">GraphQL</span> graphQL<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Autowired</span>\n    <span class="token keyword">public</span> <span class="token class-name">GraphqlController</span><span class="token punctuation">(</span><span class="token class-name">BookResolver</span> bookResolver<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">GraphQLSchema</span> schema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GraphQLSchemaGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">withBasePackages</span><span class="token punctuation">(</span><span class="token string">&quot;com.baeldung&quot;</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">withOperationsFromSingleton</span><span class="token punctuation">(</span>bookResolver<span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>graphQL <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GraphQL<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span>schema<span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重要的是要注意，<strong>我们必须将我们的_BookResolver_注册为单例。</strong></p><p>我们与SPQR的旅程的最后一个任务是创建一个_/graphql_端点。它将作为我们服务的单一接触点，并将执行请求的查询和变更：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/graphql&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">Map</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>` <span class="token function">execute</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Map</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>` request<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> raw<span class="token punctuation">)</span>\n        <span class="token keyword">throws</span> <span class="token class-name">GraphQLException</span> <span class="token punctuation">{</span>\n    <span class="token class-name">ExecutionResult</span> result <span class="token operator">=</span> graphQL<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;query&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-6-结果" tabindex="-1"><a class="header-anchor" href="#_3-6-结果"><span>3.6. 结果</span></a></h3><p>我们可以通过检查_/graphql_端点来检查结果。例如，让我们通过执行以下cURL命令检索所有_Book_记录：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-g</span> <span class="token punctuation">\\</span>\n  <span class="token parameter variable">-X</span> POST <span class="token punctuation">\\</span>\n  <span class="token parameter variable">-H</span> <span class="token string">&quot;Content-Type: application/json&quot;</span> <span class="token punctuation">\\</span>\n  <span class="token parameter variable">-d</span> <span class="token string">&#39;{&quot;query&quot;:&quot;{getAllBooks {id author title }}&quot;}&#39;</span> <span class="token punctuation">\\</span>\n  http://localhost:8080/graphql\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-7-测试" tabindex="-1"><a class="header-anchor" href="#_3-7-测试"><span>3.7. 测试</span></a></h3><p>一旦我们完成了配置，我们可以测试我们的项目。我们将使用_@SpringBootTest_来测试我们的新端点并验证响应。让我们定义JUnit测试并自动装配所需的_WebTestClient_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>webEnvironment <span class="token operator">=</span> <span class="token constant">RANDOM_PORT</span><span class="token punctuation">,</span> classes <span class="token operator">=</span> <span class="token class-name">SpqrApp</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">SpqrAppIntegrationTest</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">GRAPHQL_PATH</span> <span class="token operator">=</span> <span class="token string">&quot;/graphql&quot;</span><span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Autowired</span>\n    <span class="token keyword">private</span> <span class="token class-name">WebTestClient</span> webTestClient<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Test</span>\n    <span class="token keyword">void</span> <span class="token function">whenGetAllBooks_thenValidResponseReturned</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> getAllBooksQuery <span class="token operator">=</span> <span class="token string">&quot;{getAllBooks{ id title author }}&quot;</span><span class="token punctuation">;</span>\n\n        webTestClient<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token constant">GRAPHQL_PATH</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token function">toJSON</span><span class="token punctuation">(</span>getAllBooksQuery<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">expectStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">expectBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">jsonPath</span><span class="token punctuation">(</span><span class="token string">&quot;$.getAllBooks&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Test</span>\n    <span class="token keyword">void</span> <span class="token function">whenAddBook_thenValidResponseReturned</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> addBookMutation <span class="token operator">=</span> <span class="token string">&quot;mutation { addBook(newBook: {id: 123, author: \\&quot;J. K. Rowling\\&quot;, &quot;</span>\n                <span class="token operator">+</span> <span class="token string">&quot;title: \\&quot;Harry Potter and Philosopher&#39;s Stone\\&quot;}) { id author title } }&quot;</span><span class="token punctuation">;</span>\n\n        webTestClient<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token constant">GRAPHQL_PATH</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token function">toJSON</span><span class="token punctuation">(</span>addBookMutation<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">expectStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">expectBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">jsonPath</span><span class="token punctuation">(</span><span class="token string">&quot;$.addBook.id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">jsonPath</span><span class="token punctuation">(</span><span class="token string">&quot;$.addBook.title&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;Harry Potter and Philosopher&#39;s Stone&quot;</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">jsonPath</span><span class="token punctuation">(</span><span class="token string">&quot;$.addBook.author&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;J. K. Rowling&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token class-name">String</span> query<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;query&quot;</span><span class="token punctuation">,</span> query<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JSONException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-使用graphql-spqr-spring-boot-starter" tabindex="-1"><a class="header-anchor" href="#_4-使用graphql-spqr-spring-boot-starter"><span>4. 使用GraphQL SPQR Spring Boot Starter</span></a></h2><p>SPQR团队创建了一个Spring Boot启动器，使使用它变得更加容易。让我们来检查</p>',40),e=[o];function c(l,i){return a(),s("div",null,e)}const r=n(p,[["render",c],["__file","2024-07-20-Getting Started With GraphQL SPQR and Spring Boot.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-20/2024-07-20-Getting%20Started%20With%20GraphQL%20SPQR%20and%20Spring%20Boot.html","title":"使用GraphQL SPQR和Spring Boot入门","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Spring Boot","GraphQL"],"tag":["GraphQL","SPQR","Spring Boot"],"head":[["meta",{"name":"keywords","content":"GraphQL, Spring Boot, SPQR, web API, 教程"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-20/2024-07-20-Getting%20Started%20With%20GraphQL%20SPQR%20and%20Spring%20Boot.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"使用GraphQL SPQR和Spring Boot入门"}],["meta",{"property":"og:description","content":"使用GraphQL SPQR和Spring Boot入门 GraphQL是一种用于Web API的查询和操作语言。SPQR是一个起源于使GraphQL工作更加无缝的库之一。 在本教程中，我们将学习GraphQL SPQR的基础知识，并在简单的Spring Boot项目中看到它的实际应用。 2. 什么是GraphQL SPQR？ GraphQL是由Fac..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-20T09:37:21.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"GraphQL"}],["meta",{"property":"article:tag","content":"SPQR"}],["meta",{"property":"article:tag","content":"Spring Boot"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-20T09:37:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用GraphQL SPQR和Spring Boot入门\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-20T09:37:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"使用GraphQL SPQR和Spring Boot入门 GraphQL是一种用于Web API的查询和操作语言。SPQR是一个起源于使GraphQL工作更加无缝的库之一。 在本教程中，我们将学习GraphQL SPQR的基础知识，并在简单的Spring Boot项目中看到它的实际应用。 2. 什么是GraphQL SPQR？ GraphQL是由Fac..."},"headers":[{"level":2,"title":"2. 什么是GraphQL SPQR？","slug":"_2-什么是graphql-spqr","link":"#_2-什么是graphql-spqr","children":[]},{"level":2,"title":"3. 在Spring Boot中引入GraphQL SPQR","slug":"_3-在spring-boot中引入graphql-spqr","link":"#_3-在spring-boot中引入graphql-spqr","children":[{"level":3,"title":"3.1. 设置","slug":"_3-1-设置","link":"#_3-1-设置","children":[]},{"level":3,"title":"3.2. 编写模型_Book_类","slug":"_3-2-编写模型-book-类","link":"#_3-2-编写模型-book-类","children":[]},{"level":3,"title":"3.3. 编写BookService","slug":"_3-3-编写bookservice","link":"#_3-3-编写bookservice","children":[]},{"level":3,"title":"3.4. 使用graphql-spqr公开服务","slug":"_3-4-使用graphql-spqr公开服务","link":"#_3-4-使用graphql-spqr公开服务","children":[]},{"level":3,"title":"3.5. Rest Controller","slug":"_3-5-rest-controller","link":"#_3-5-rest-controller","children":[]},{"level":3,"title":"3.6. 结果","slug":"_3-6-结果","link":"#_3-6-结果","children":[]},{"level":3,"title":"3.7. 测试","slug":"_3-7-测试","link":"#_3-7-测试","children":[]}]},{"level":2,"title":"4. 使用GraphQL SPQR Spring Boot Starter","slug":"_4-使用graphql-spqr-spring-boot-starter","link":"#_4-使用graphql-spqr-spring-boot-starter","children":[]}],"git":{"createdTime":1721468241000,"updatedTime":1721468241000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":4.26,"words":1279},"filePathRelative":"posts/baeldung/2024-07-20/2024-07-20-Getting Started With GraphQL SPQR and Spring Boot.md","localizedDate":"2022年4月1日","excerpt":"<hr>\\n<h1>使用GraphQL SPQR和Spring Boot入门</h1>\\n<p>GraphQL是一种用于Web API的查询和操作语言。SPQR是一个起源于使GraphQL工作更加无缝的库之一。</p>\\n<p>在本教程中，我们将学习GraphQL SPQR的基础知识，并在简单的Spring Boot项目中看到它的实际应用。</p>\\n<h2>2. 什么是GraphQL SPQR？</h2>\\n<p>GraphQL是由Facebook创建的著名查询语言。它的核心是模式——在这些文件中我们定义自定义类型和函数。</p>\\n<p>在传统方法中，如果我们想在我们的项目中添加GraphQL，我们需要遵循两个步骤。首先，我们需要向项目中添加GraphQL模式文件。其次，我们需要编写相应的Java POJO，代表模式中的每种类型。<strong>这意味着我们将在两个地方维护相同的信息：在模式文件和Java类中。</strong> 这种方法容易出错，需要更多的项目维护工作。</p>","autoDesc":true}');export{r as comp,d as data};
