import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-DP78wUIH.js";const p={},o=t(`<hr><h1 id="如何检查两个字符串是否是彼此的旋转" tabindex="-1"><a class="header-anchor" href="#如何检查两个字符串是否是彼此的旋转"><span>如何检查两个字符串是否是彼此的旋转</span></a></h1><p>在本教程中，我们将学习如何检查一个字符串是否是另一个字符串的旋转。</p><p>我们将简要讨论什么是字符串旋转。然后，我们将查看一些算法来解决这个问题，并进行代码洞察和复杂度分析。</p><h2 id="_2-字符串旋转简介" tabindex="-1"><a class="header-anchor" href="#_2-字符串旋转简介"><span>2. 字符串旋转简介</span></a></h2><p>在深入一些解决方案之前，让我们讨论一下字符串旋转以及我们应该为算法测试什么。</p><h3 id="_2-1-字符串和字符串旋转" tabindex="-1"><a class="header-anchor" href="#_2-1-字符串和字符串旋转"><span>2.1. 字符串和字符串旋转</span></a></h3><p>字符串是原始字符的序列，在Java中，它被包装在_String_类中。尽管两个字符串可能是不同的对象，我们可以比较它们的内部字符，并检查，例如，它们是否相等或包含共同的模式。</p><p><strong>字符串的旋转是一个包含相同字符但顺序不同的字符串。具体来说，一个或多个字符从原始位置移动。</strong> 例如，字符串“cdab”是“abcd”的旋转。这可以通过两个步骤看到：</p><ul><li><em>abcd</em> -&gt; <em>dabc</em> 将最后一个_d_移动到第一个位置</li><li><em>dabc</em> -&gt; <em>cdab</em> 将最后一个_c_移动到第一个位置</li></ul><p>这是通过从右侧移动完成的，但也可以从未端进行。</p><p>值得注意的是，如果两个字符串的长度不同，它们就不能是彼此的旋转。</p><h3 id="_2-2-变量名称" tabindex="-1"><a class="header-anchor" href="#_2-2-变量名称"><span>2.2. 变量名称</span></a></h3><p>为了演示，我们将始终将_旋转_称为潜在的字符串候选项，以检查它是否是_原始_字符串的实际旋转。</p><h3 id="_2-3-单元测试" tabindex="-1"><a class="header-anchor" href="#_2-3-单元测试"><span>2.3. 单元测试</span></a></h3><p>我们只有两种情况来测试一个字符串是否是旋转。值得注意的是，一个字符串是它自己的旋转。因此，我们可能还想测试那个角落的情况。</p><h2 id="_3-旋转包含在加倍的字符串中" tabindex="-1"><a class="header-anchor" href="#_3-旋转包含在加倍的字符串中"><span>3. 旋转包含在加倍的字符串中</span></a></h2><p><strong>我们可以简单地认为，如果我们将原始字符串加倍，那么在某个时候，它将包含一个旋转。</strong> 我们可以直观地想象这一点：</p><h3 id="_3-1-算法" tabindex="-1"><a class="header-anchor" href="#_3-1-算法"><span>3.1. 算法</span></a></h3><p>算法很简单：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">boolean</span> <span class="token function">doubledOriginContainsRotation</span><span class="token punctuation">(</span><span class="token class-name">String</span> origin<span class="token punctuation">,</span> <span class="token class-name">String</span> rotation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>origin<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> rotation<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> origin<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>rotation<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-代码洞察" tabindex="-1"><a class="header-anchor" href="#_3-2-代码洞察"><span>3.2. 代码洞察</span></a></h3><p>我们连接原始字符串，并检查它是否包含潜在的旋转：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">return</span> origin<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>rotation<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>让我们看看算法的复杂度：</p><ul><li>时间复杂度：O(n*m) 其中n是连接的长度，m是旋转的长度</li><li>空间复杂度：O(n) 与字符串的长度成比例</li></ul><h3 id="_3-3-单元测试" tabindex="-1"><a class="header-anchor" href="#_3-3-单元测试"><span>3.3. 单元测试</span></a></h3><p>让我们测试当旋转包含在加倍的原始字符串中时旋转是正确的。我们还将测试原始字符串与旋转完全相同的情况：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenDoubledOrigin_whenCheckIfOriginContainsRotation_thenIsRotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token function">doubledOriginContainsRotation</span><span class="token punctuation">(</span><span class="token string">&quot;abcd&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cdab&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token function">doubledOriginContainsRotation</span><span class="token punctuation">(</span><span class="token string">&quot;abcd&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;abcd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们测试当旋转不包含时。我们还将测试当旋转比原始字符串长时：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenDoubledOrigin_whenCheckIfOriginContainsRotation_thenNoRotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token function">doubledOriginContainsRotation</span><span class="token punctuation">(</span><span class="token string">&quot;abcd&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bbbb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token function">doubledOriginContainsRotation</span><span class="token punctuation">(</span><span class="token string">&quot;abcd&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;abcde&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-从与原始字符串共同的起始点旋转" tabindex="-1"><a class="header-anchor" href="#_4-从与原始字符串共同的起始点旋转"><span>4. 从与原始字符串共同的起始点旋转</span></a></h2><p>我们可以使用前面的方法并构建一个更详细的算法。</p><p><strong>首先，让我们收集旋转中原始字符串起始字符的所有索引。最后，我们循环遍历原始字符串并在移位位置比较字符串。</strong> 让我们更详细地想象这些步骤：</p><h3 id="_4-1-算法" tabindex="-1"><a class="header-anchor" href="#_4-1-算法"><span>4.1. 算法</span></a></h3><p>一旦我们知道了共同的字符，我们就可以检查字符串是否继续相等：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">boolean</span> <span class="token function">isRotationUsingCommonStartWithOrigin</span><span class="token punctuation">(</span><span class="token class-name">String</span> origin<span class="token punctuation">,</span> <span class="token class-name">String</span> rotation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>origin<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> rotation<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>\` indexes <span class="token operator">=</span> <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> origin<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> rotation<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> origin<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> startingAt <span class="token operator">:</span> indexes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRotation</span><span class="token punctuation">(</span>startingAt<span class="token punctuation">,</span> rotation<span class="token punctuation">,</span> origin<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">boolean</span> <span class="token function">isRotation</span><span class="token punctuation">(</span><span class="token keyword">int</span> startingAt<span class="token punctuation">,</span> <span class="token class-name">String</span> rotation<span class="token punctuation">,</span> <span class="token class-name">String</span> origin<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> origin<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>rotation<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>startingAt <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">%</span> origin<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> origin<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-代码洞察" tabindex="-1"><a class="header-anchor" href="#_4-2-代码洞察"><span>4.2. 代码洞察</span></a></h3><p>有两个主要点需要关注。第一个是我们收集索引的地方：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>\` indexes <span class="token operator">=</span> <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> origin<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> rotation<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> origin<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些是在旋转中我们可以找到原始字符串起始字符的位置。</p><p>然后，我们循环遍历字符串并在移位位置进行检查：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i \`<span class="token operator">&lt;</span> origin<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rotation<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>startingAt <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">%</span> origin<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> origin<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>值得注意的是，我们使用模运算(%)在超出旋转长度时返回到第一个索引。</p><p>让我们看看算法的复杂度：</p><ul><li>时间复杂度：O(n*m) 其中n是原始字符串的长度，m是找到的索引数量</li><li>空间复杂度：O(n)</li></ul><h3 id="_4-3-单元测试" tabindex="-1"><a class="header-anchor" href="#_4-3-单元测试"><span>4.3. 单元测试</span></a></h3><p>让我们测试当旋转与原始字符串有共同的起始字符并且字符串的其余部分相等时：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenOriginAndRotationInput_whenCheckingCommonStartWithOrigin_thenIsRotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token function">isRotationUsingCommonStartWithOrigin</span><span class="token punctuation">(</span><span class="token string">&quot;abcd&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cdab&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token function">isRotationUsingCommonStartWithOrigin</span><span class="token punctuation">(</span><span class="token string">&quot;abcd&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;abcd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们测试当旋转有共同的起始字符，但是它要么太长，要么其余部分不匹配时：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenOriginAndRotationInput_whenCheckingCommonStartWithOrigin_thenNoRotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token function">isRotationUsingCommonStartWithOrigin</span><span class="token punctuation">(</span><span class="token string">&quot;abcd&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bbbb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token function">isRotationUsingCommonStartWithOrigin</span><span class="token punctuation">(</span><span class="token string">&quot;abcd&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;abcde&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-通过前缀和后缀比较旋转" tabindex="-1"><a class="header-anchor" href="#_5-通过前缀和后缀比较旋转"><span>5. 通过前缀和后缀比较旋转</span></a></h2><p><strong>如果我们找到原始字符串和旋转的共同起始字符，我们也可以说我们的字符串在该匹配点之前和之后将相等。</strong> 例如，我们的原始字符串“_abcd”在位置2上与“_cdab”有共同的<strong>c</strong>。然而，前缀和后缀需要相应地对字符串的其余部分相等：</p><h3 id="_5-1-算法" tabindex="-1"><a class="header-anchor" href="#_5-1-算法"><span>5.1. 算法</span></a></h3><p>每当我们找到一个共同的字符，我们就可以比较那些剩余字符段的前缀和后缀，反转原始字符串和旋转：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">boolean</span> <span class="token function">isRotationUsingSuffixAndPrefix</span><span class="token punctuation">(</span><span class="token class-name">String</span> origin<span class="token punctuation">,</span> <span class="token class-name">String</span> rotation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>origin<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> rotation<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">checkPrefixAndSuffix</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> rotation<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">boolean</span> <span class="token function">checkPrefixAndSuffix</span><span class="token punctuation">(</span><span class="token class-name">String</span> origin<span class="token punctuation">,</span> <span class="token class-name">String</span> rotation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>origin<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> rotation<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> origin<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>origin<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> rotation<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkRotationPrefixWithOriginSuffix</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> rotation<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkOriginPrefixWithRotationSuffix</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> rotation<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">boolean</span> <span class="token function">checkRotationPrefixWithOriginSuffix</span><span class="token punctuation">(</span><span class="token class-name">String</span> origin<span class="token punctuation">,</span> <span class="token class-name">String</span> rotation<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> origin<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>rotation<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> origin<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">boolean</span> <span class="token function">checkOriginPrefixWithRotationSuffix</span><span class="token punctuation">(</span><span class="token class-name">String</span> origin<span class="token punctuation">,</span> <span class="token class-name">String</span> rotation<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> origin<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>rotation<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>origin<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-代码洞察" tabindex="-1"><a class="header-anchor" href="#_5-2-代码洞察"><span>5.2. 代码洞察</span></a></h3><p>我们有两个检查要做。首先，我们比较旋转的前缀与原始字符串的后缀：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">return</span> origin<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>rotation<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> origin<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们比较旋转的后缀与原始字符串的前缀：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">return</span> origin<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>rotation<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>origin<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>值得注意的是，这些检查可以以任何顺序进行。</p><p>让我们看看算法的复杂度：</p><ul><li>时间复杂度：O(n*n) 比较两个长度为n的字符串</li><li>空间复杂度：O(n)</li></ul><h3 id="_5-3-单元测试" tabindex="-1"><a class="header-anchor" href="#_5-3-单元测试"><span>5.3. 单元测试</span></a></h3><p>让我们测试当旋转与原始字符串在给定共同字符的情况下具有相等的后缀和前缀时：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenOriginAndRotationInput_whenCheckingUsingSuffixAndPrefix_thenIsRotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token function">isRotationUsingSuffixAndPrefix</span><span class="token punctuation">(</span><span class="token string">&quot;abcd&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cdab&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token function">isRotationUsingSuffixAndPrefix</span><span class="token punctuation">(</span><span class="token string">&quot;abcd&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;abcd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们测试当旋转与原始字符串没有相等的后缀和前缀时：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenOriginAndRotationInput_whenCheckingUsingSuffixAndPrefix_thenNoRotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token function">isRotationUsingSuffixAndPrefix</span><span class="token punctuation">(</span><span class="token string">&quot;abcd&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bbbb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token function">isRotationUsingSuffixAndPrefix</span><span class="token punctuation">(</span><span class="token string">&quot;abcd&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;abcde&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-通过字符队列比较旋转" tabindex="-1"><a class="header-anchor" href="#_6-通过字符队列比较旋转"><span>6. 通过字符队列比较旋转</span></a></h2><p><strong>另一个看待问题的方法是将两个字符串想象成队列。然后，我们将旋转的顶部字符移至尾部并比较新的队列是否与原始字符串相等。</strong> 让我们简单看一下队列的图片：</p><h3 id="_6-1-算法" tabindex="-1"><a class="header-anchor" href="#_6-1-算法"><span>6.1. 算法</span></a></h3><p>我们创建两个队列。然后，我们在每一步将旋转的顶部字符移至底部，同时检查它是否在每一步与原始字符串相等。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">boolean</span> <span class="token function">isRotationUsingQueue</span><span class="token punctuation">(</span><span class="token class-name">String</span> origin<span class="token punctuation">,</span> <span class="token class-name">String</span> rotation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>origin<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> rotation<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">checkWithQueue</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> rotation<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">boolean</span> <span class="token function">checkWithQueue</span><span class="token punctuation">(</span><span class="token class-name">String</span> origin<span class="token punctuation">,</span> <span class="token class-name">String</span> rotation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>origin<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> rotation<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Queue</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">&gt;</span></span>\`\`\` originQueue <span class="token operator">=</span> <span class="token function">getCharactersQueue</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Queue</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">&gt;</span></span>\`\` rotationQueue <span class="token operator">=</span> <span class="token function">getCharactersQueue</span><span class="token punctuation">(</span>rotation<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span> k <span class="token operator">=</span> rotation<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">null</span> <span class="token operator">!=</span> rotationQueue<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            k<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token keyword">char</span> ch <span class="token operator">=</span> rotationQueue<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            rotationQueue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            rotationQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>rotationQueue<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>originQueue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">Queue</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">&gt;</span></span>\`\` <span class="token function">getCharactersQueue</span><span class="token punctuation">(</span><span class="token class-name">String</span> origin<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> origin<span class="token punctuation">.</span><span class="token function">chars</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">mapToObj</span><span class="token punctuation">(</span>c <span class="token operator">-&gt;</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> c<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toCollection</span><span class="token punctuation">(</span><span class="token class-name">LinkedList</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2-代码洞察" tabindex="-1"><a class="header-anchor" href="#_6-2-代码洞察"><span>6.2. 代码洞察</span></a></h3><p>创建队列后，相关的是如何断言我们的字符串是相等的：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> k <span class="token operator">=</span> rotation<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">null</span> <span class="token operator">!=</span> rotationQueue<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    k<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> ch <span class="token operator">=</span> rotationQueue<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    rotationQueue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    rotationQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rotationQueue<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>originQueue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将队列顶部的元素在常数时间内移动到底部，为我们提供了一个新的移位对象与原始字符串进行比较。</p><p>让我们看看算法的复杂度：</p><ul><li>时间复杂度：O(n*n) 在最坏情况下，我们在与原始字符串比较时循环遍历整个队列</li><li>空间复杂度：O(n)</li></ul><h3 id="_6-3-单元测试" tabindex="-1"><a class="header-anchor" href="#_6-3-单元测试"><span>6.3. 单元测试</span></a></h3><p>让我们测试使用队列时，将旋转从顶部移至尾部将与原始字符串匹配：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenOriginAndRotationInput_whenCheckingUsingQueues_thenIsRotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token function">isRotationUsingQueue</span><span class="token punctuation">(</span><span class="token string">&quot;abcd&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cdab&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token function">isRotationUsingQueue</span><span class="token punctuation">(</span><span class="token string">&quot;abcd&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;abcd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们测试使用队列时它们不会相等：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenOriginAndRotationInput_whenCheckingUsingQueues_thenNoRotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token function">isRotationUsingQueue</span><span class="token punctuation">(</span><span class="token string">&quot;abcd&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bbbb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token function">isRotationUsingQueue</span><span class="token punctuation">(</span><span class="token string">&quot;abcd&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;abcde&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-结论" tabindex="-1"><a class="header-anchor" href="#_7-结论"><span>7. 结论</span></a></h2><p>在本文中，我们看到了几种检查一个字符串是否是另一个字符串旋转的算法。我们看到了如何使用加倍的原始字符串和_string.contains()_方法来搜索共同字符并断言相等。同样，我们可以使用算法来检查在移位位置处字符串的其余部分是否匹配，或者使用后缀和前缀。最后，我们还看到了一个使用队列的例子，将旋转的顶部移到尾部，直到它与原始字符串相等。</p><p>如往常一样，本文中展示的代码可在GitHub上找到。</p><p>OK</p>`,89),e=[o];function c(i,u){return a(),s("div",null,e)}const r=n(p,[["render",c],["__file","2024-06-22-Check if Two Strings Are Rotations of Each Other.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-06-22/2024-06-22-Check%20if%20Two%20Strings%20Are%20Rotations%20of%20Each%20Other.html","title":"如何检查两个字符串是否是彼此的旋转","lang":"zh-CN","frontmatter":{"date":"2024-06-22T00:00:00.000Z","category":["Java","String Algorithms"],"tag":["String Rotation","Java"],"head":[["meta",{"name":"keywords","content":"Java, String Rotation, Algorithm"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-06-22/2024-06-22-Check%20if%20Two%20Strings%20Are%20Rotations%20of%20Each%20Other.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"如何检查两个字符串是否是彼此的旋转"}],["meta",{"property":"og:description","content":"如何检查两个字符串是否是彼此的旋转 在本教程中，我们将学习如何检查一个字符串是否是另一个字符串的旋转。 我们将简要讨论什么是字符串旋转。然后，我们将查看一些算法来解决这个问题，并进行代码洞察和复杂度分析。 2. 字符串旋转简介 在深入一些解决方案之前，让我们讨论一下字符串旋转以及我们应该为算法测试什么。 2.1. 字符串和字符串旋转 字符串是原始字符的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-22T03:34:25.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"String Rotation"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2024-06-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-22T03:34:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"如何检查两个字符串是否是彼此的旋转\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-22T03:34:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"如何检查两个字符串是否是彼此的旋转 在本教程中，我们将学习如何检查一个字符串是否是另一个字符串的旋转。 我们将简要讨论什么是字符串旋转。然后，我们将查看一些算法来解决这个问题，并进行代码洞察和复杂度分析。 2. 字符串旋转简介 在深入一些解决方案之前，让我们讨论一下字符串旋转以及我们应该为算法测试什么。 2.1. 字符串和字符串旋转 字符串是原始字符的..."},"headers":[{"level":2,"title":"2. 字符串旋转简介","slug":"_2-字符串旋转简介","link":"#_2-字符串旋转简介","children":[{"level":3,"title":"2.1. 字符串和字符串旋转","slug":"_2-1-字符串和字符串旋转","link":"#_2-1-字符串和字符串旋转","children":[]},{"level":3,"title":"2.2. 变量名称","slug":"_2-2-变量名称","link":"#_2-2-变量名称","children":[]},{"level":3,"title":"2.3. 单元测试","slug":"_2-3-单元测试","link":"#_2-3-单元测试","children":[]}]},{"level":2,"title":"3. 旋转包含在加倍的字符串中","slug":"_3-旋转包含在加倍的字符串中","link":"#_3-旋转包含在加倍的字符串中","children":[{"level":3,"title":"3.1. 算法","slug":"_3-1-算法","link":"#_3-1-算法","children":[]},{"level":3,"title":"3.2. 代码洞察","slug":"_3-2-代码洞察","link":"#_3-2-代码洞察","children":[]},{"level":3,"title":"3.3. 单元测试","slug":"_3-3-单元测试","link":"#_3-3-单元测试","children":[]}]},{"level":2,"title":"4. 从与原始字符串共同的起始点旋转","slug":"_4-从与原始字符串共同的起始点旋转","link":"#_4-从与原始字符串共同的起始点旋转","children":[{"level":3,"title":"4.1. 算法","slug":"_4-1-算法","link":"#_4-1-算法","children":[]},{"level":3,"title":"4.2. 代码洞察","slug":"_4-2-代码洞察","link":"#_4-2-代码洞察","children":[]},{"level":3,"title":"4.3. 单元测试","slug":"_4-3-单元测试","link":"#_4-3-单元测试","children":[]}]},{"level":2,"title":"5. 通过前缀和后缀比较旋转","slug":"_5-通过前缀和后缀比较旋转","link":"#_5-通过前缀和后缀比较旋转","children":[{"level":3,"title":"5.1. 算法","slug":"_5-1-算法","link":"#_5-1-算法","children":[]},{"level":3,"title":"5.2. 代码洞察","slug":"_5-2-代码洞察","link":"#_5-2-代码洞察","children":[]},{"level":3,"title":"5.3. 单元测试","slug":"_5-3-单元测试","link":"#_5-3-单元测试","children":[]}]},{"level":2,"title":"6. 通过字符队列比较旋转","slug":"_6-通过字符队列比较旋转","link":"#_6-通过字符队列比较旋转","children":[{"level":3,"title":"6.1. 算法","slug":"_6-1-算法","link":"#_6-1-算法","children":[]},{"level":3,"title":"6.2. 代码洞察","slug":"_6-2-代码洞察","link":"#_6-2-代码洞察","children":[]},{"level":3,"title":"6.3. 单元测试","slug":"_6-3-单元测试","link":"#_6-3-单元测试","children":[]}]},{"level":2,"title":"7. 结论","slug":"_7-结论","link":"#_7-结论","children":[]}],"git":{"createdTime":1719027265000,"updatedTime":1719027265000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":7.61,"words":2283},"filePathRelative":"posts/baeldung/2024-06-22/2024-06-22-Check if Two Strings Are Rotations of Each Other.md","localizedDate":"2024年6月22日","excerpt":"<hr>\\n<h1>如何检查两个字符串是否是彼此的旋转</h1>\\n<p>在本教程中，我们将学习如何检查一个字符串是否是另一个字符串的旋转。</p>\\n<p>我们将简要讨论什么是字符串旋转。然后，我们将查看一些算法来解决这个问题，并进行代码洞察和复杂度分析。</p>\\n<h2>2. 字符串旋转简介</h2>\\n<p>在深入一些解决方案之前，让我们讨论一下字符串旋转以及我们应该为算法测试什么。</p>\\n<h3>2.1. 字符串和字符串旋转</h3>\\n<p>字符串是原始字符的序列，在Java中，它被包装在_String_类中。尽管两个字符串可能是不同的对象，我们可以比较它们的内部字符，并检查，例如，它们是否相等或包含共同的模式。</p>","autoDesc":true}');export{r as comp,d as data};
