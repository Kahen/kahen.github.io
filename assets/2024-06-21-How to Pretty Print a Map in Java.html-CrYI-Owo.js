import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-C3FQLyyo.js";const p={},e=t('<h1 id="java中漂亮打印map的方法" tabindex="-1"><a class="header-anchor" href="#java中漂亮打印map的方法"><span>Java中漂亮打印Map的方法</span></a></h1><p>漂亮打印Java中的<code>Map</code>涉及到以一种视觉上吸引人且易于阅读的方式格式化和显示Map中的键值对。尽管Java没有提供内置的漂亮打印Map的方法，我们必须实现自定义解决方案。</p><p>在本教程中，我们将学习如何实现这一目标。根据我们的偏好和详细程度，我们将探索使用标准JDK和外部库的多种方法。</p><h2 id="_2-创建一个map" tabindex="-1"><a class="header-anchor" href="#_2-创建一个map"><span>2. 创建一个<code>Map</code></span></a></h2><p>在我们继续之前，让我们创建一个Map来操作：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Map</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>` map <span class="token operator">=</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>\n  <span class="token string">&quot;one&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;two&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;inner&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>\n    <span class="token string">&quot;ten&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;eleven&quot;</span><span class="token punctuation">,</span> <span class="token number">11</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>值得注意的是，我们通过添加一个内部嵌套的Map扩展了我们的示例。</p><h2 id="_3-使用核心java" tabindex="-1"><a class="header-anchor" href="#_3-使用核心java"><span>3. 使用核心Java</span></a></h2><p>正如我们所知，Java可以使用内置的<code>toString()</code>方法打印Map：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token punctuation">{</span>one<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> two<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> inner<span class="token operator">=</span><span class="token punctuation">{</span>eleven<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">,</span> ten<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出以简单的方式预格式化，在单行上用逗号分隔显示键值对。这对于简单的Map或在调试期间工作得很好。</p><p>但如果我们想要一个漂亮的打印Map，我们必须实现自定义方法。</p><h3 id="_3-1-使用for-each循环" tabindex="-1"><a class="header-anchor" href="#_3-1-使用for-each循环"><span>3.1. 使用<code>for</code>-each循环</span></a></h3><p>当我们需要遍历所有元素时，我们可以使用<code>for</code>-each循环：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span>```` entry <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%-15s : %s%n&quot;</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个循环将打印：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>one             <span class="token operator">:</span> <span class="token number">1</span>\ntwo             <span class="token operator">:</span> <span class="token number">2</span>\ninner           <span class="token operator">:</span> <span class="token punctuation">{</span>ten<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> eleven<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在输出看起来更好了，但我们的内部Map仍然没有被漂亮打印，因此我们必须手动处理复杂结构。</p><p>为了格式化我们的内部条目，让我们实现一个带有递归和左填充参数的辅助函数：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">printMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> leftPadding<span class="token punctuation">,</span> <span class="token class-name">Map</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span>```` map<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span>```` entry <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Map</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%-15s :%n&quot;</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token function">printMap</span><span class="token punctuation">(</span>leftPadding <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Map</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span>````<span class="token punctuation">)</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>leftPadding <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> leftPadding <span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;s&quot;</span> <span class="token comment">// 添加填充</span>\n              <span class="token operator">+</span> <span class="token string">&quot;%-15s : %s%n&quot;</span><span class="token punctuation">,</span>\n              <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，如果我们通过调用<code>printMap(0, map)</code>执行该方法，它将打印：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>one             <span class="token operator">:</span> <span class="token number">1</span>\ntwo             <span class="token operator">:</span> <span class="token number">2</span>\ninner           \n    ten             <span class="token operator">:</span> <span class="token number">10</span>\n    eleven          <span class="token operator">:</span> <span class="token number">11</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过实现我们的自定义解决方案，我们将始终在打印我们的Map时拥有完全的控制权。我们可以使用内置的格式化程序，如<code>Formatter</code>类、<code>String.format()</code>，甚至<code>System.out.printf()</code>来自定义我们的输出。另一方面，如果我们想要处理多类型或内部结构，自定义函数可能会有点复杂。</p><h3 id="_3-2-使用stream" tabindex="-1"><a class="header-anchor" href="#_3-2-使用stream"><span>3.2. 使用<code>Stream</code></span></a></h3><p>在Java中，我们几乎可以将任何<code>for</code>-each循环替换为<code>Stream</code>。我们可以用一行来打印和格式化我们的Map：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%-15s : %s%n&quot;</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果我们想要更多的控制，我们可以扩展流，并使用<code>map()</code>或<code>Collectors.joining()</code>函数：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token constant">MAP</span><span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>entry <span class="token operator">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%-15s : %s&quot;</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这两个例子中，我们都将得到：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>one             <span class="token operator">:</span> <span class="token number">1</span>\ntwo             <span class="token operator">:</span> <span class="token number">2</span>\ninner           <span class="token operator">:</span> <span class="token punctuation">{</span>ten<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> eleven<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次，这种方法为我们提供了更多的格式化控制，并且非常适合简单类型。我们必须记住<strong>手动处理任何复杂结构</strong>，就像我们之前做的那样。</p><h2 id="_4-外部库" tabindex="-1"><a class="header-anchor" href="#_4-外部库"><span>4. 外部库</span></a></h2><p>实现自定义的漂亮打印功能可能是一个不错的选择，如果我们没有复杂的Map。任何额外的映射都会使我们的代码更加复杂，不值得实现。让我们检查外部库提供的解决方案。</p><h3 id="_4-1-jackson" tabindex="-1"><a class="header-anchor" href="#_4-1-jackson"><span>4.1. Jackson</span></a></h3><p>如果我们比较JSON和Map，我们可以发现许多相似之处。在这两种情况下，键值对都被用来表示条目。</p><p>首先，让我们通过在<code>pom.xml</code>中包含它的依赖来检查Jackson，这是最受欢迎的JSON库之一：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>````com.fasterxml.jackson.core````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>````jackson-databind````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>````2.16.1````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>````\n````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Jackson提供了一个<code>ObjectMapper</code>类，不仅可以用于处理JSON，还可以用于处理标准Map：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writerWithDefaultPrettyPrinter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果，Jackson API漂亮地打印了我们的Map：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token punctuation">{</span>\n  <span class="token string">&quot;one&quot;</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;two&quot;</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;inner&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string">&quot;ten&quot;</span> <span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;eleven&quot;</span> <span class="token operator">:</span> <span class="token number">11</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个解决方案<strong>自动处理了我们的内部Map，并且比以前的方法简单得多</strong>。不幸的是，<strong>我们对映射没有完全的控制</strong>。</p><h3 id="_4-2-gson" tabindex="-1"><a class="header-anchor" href="#_4-2-gson"><span>4.2. Gson</span></a></h3><p>当然，其他JSON库也支持Map进行漂亮打印。让我们通过添加最新版本的依赖来检查Gson：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>````com.google.code.gson````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>````gson````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>````2.10.1````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>````\n````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>就像我们之前做的那样，让我们配置一个<code>GsonBuilder</code>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPrettyPrinting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token constant">MAP</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这是现在的结果：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token punctuation">{</span>\n  <span class="token string">&quot;one&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;two&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;inner&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string">&quot;ten&quot;</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;eleven&quot;</span><span class="token operator">:</span> <span class="token number">11</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>值得注意的是，我们有稍微不同的格式化（键后没有空格），但再次，<strong>它更容易进行漂亮打印Map支持嵌套值</strong>。</p><h3 id="_4-3-apache-commons-collections" tabindex="-1"><a class="header-anchor" href="#_4-3-apache-commons-collections"><span>4.3. Apache Commons Collections</span></a></h3><p>当我们知道JSON库通常支持JSON和Map进行漂亮打印时，让我们探索非JSON库提供的其他解决方案。</p><p>让我们通过向我们的项目添加依赖来检查Apache Commons Collections：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>````org.apache.commons````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>````commons-collections4````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>````4.4````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>````\n````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该库为我们带来了<code>MapUtils</code>类。让我们使用它来打印我们的Map：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">MapUtils</span><span class="token punctuation">.</span><span class="token function">debugPrint</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">,</span> <span class="token string">&quot;map&quot;</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果，我们将得到这样的格式化Map：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>map <span class="token operator">=</span>\n<span class="token punctuation">{</span>\n    one <span class="token operator">=</span> <span class="token number">1</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Integer</span>\n    two <span class="token operator">=</span> <span class="token number">2</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Integer</span>\n    inner <span class="token operator">=</span>\n    <span class="token punctuation">{</span>\n        ten <span class="token operator">=</span> <span class="token number">10</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Integer</span>\n        eleven <span class="token operator">=</span> <span class="token number">11</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Integer</span>\n    <span class="token punctuation">}</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>HashMap</span>\n<span class="token punctuation">}</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>HashMap</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们刚刚使用了一个<code>debugPrint()</code>方法来格式化Map。如果我们想要省略我们的值的类名，我们可以使用一个<code>verbosePrint()</code>。</p><h3 id="_4-4-google-guava" tabindex="-1"><a class="header-anchor" href="#_4-4-google-guava"><span>4.4. Google Guava</span></a></h3><p>最后，让我们检查Google Guava库提供的方法。在开始之前，让我们更新我们的<code>pom.xml</code>：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>````com.google.guava````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>````guava````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>````33.0.0-jre````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>````\n````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要打印我们的Map，我们可以使用<code>Joiner</code>类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> mapStr <span class="token operator">=</span> <span class="token class-name">Joiner</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;,\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withKeyValueSeparator</span><span class="token punctuation">(</span><span class="token string">&quot;=&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果我们现在检查结果，我们将得到：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>one<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>\ntwo<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>\ninner<span class="token operator">=</span><span class="token punctuation">{</span>ten<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> eleven<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不幸的是，这种方法<strong>不能处理嵌套条目</strong>，但它适用于单级结构。</p><h2 id="_5-结论" tabindex="-1"><a class="header-anchor" href="#_5-结论"><span>5. 结论</span></a></h2><p>在这篇文章中，我们学习了在Java中漂亮打印Map的不同方法。我们知道，使用内置的<code>toString()</code>方法打印可能会产生一个难以阅读的单行字符串。</p><p>我们首先使用标准Java API实现了自定义的漂亮打印方法，特别是<code>for</code>-each循环、流和格式化程序。这种方法适合我们，如果我们有简单的、非嵌套的Map或者想要对映射有完全的控制。</p><p>之后，我们检查了像Jackson、Gson、Apache Commons Collections或Guava这样的外部库提供的解决方案。外部API总是比实现自定义解决方案<strong>更简单</strong>，但我们对预定义的打印格式<strong>控制较少</strong>。</p><p>一如既往，伴随文章的源代码可以在GitHub上找到。</p>',72),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","2024-06-21-How to Pretty Print a Map in Java.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-06-21/2024-06-21-How%20to%20Pretty%20Print%20a%20Map%20in%20Java.html","title":"Java中漂亮打印Map的方法","lang":"zh-CN","frontmatter":{"date":"2024-06-22T00:00:00.000Z","category":["Java","教程"],"tag":["Java","地图","格式化输出"],"head":[["meta",{"name":"keywords","content":"Java, 地图, 格式化, 教程, 打印"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-06-21/2024-06-21-How%20to%20Pretty%20Print%20a%20Map%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Java中漂亮打印Map的方法"}],["meta",{"property":"og:description","content":"Java中漂亮打印Map的方法 漂亮打印Java中的Map涉及到以一种视觉上吸引人且易于阅读的方式格式化和显示Map中的键值对。尽管Java没有提供内置的漂亮打印Map的方法，我们必须实现自定义解决方案。 在本教程中，我们将学习如何实现这一目标。根据我们的偏好和详细程度，我们将探索使用标准JDK和外部库的多种方法。 2. 创建一个Map 在我们继续之前..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-21T22:31:27.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"地图"}],["meta",{"property":"article:tag","content":"格式化输出"}],["meta",{"property":"article:published_time","content":"2024-06-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-21T22:31:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java中漂亮打印Map的方法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-21T22:31:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Java中漂亮打印Map的方法 漂亮打印Java中的Map涉及到以一种视觉上吸引人且易于阅读的方式格式化和显示Map中的键值对。尽管Java没有提供内置的漂亮打印Map的方法，我们必须实现自定义解决方案。 在本教程中，我们将学习如何实现这一目标。根据我们的偏好和详细程度，我们将探索使用标准JDK和外部库的多种方法。 2. 创建一个Map 在我们继续之前..."},"headers":[{"level":2,"title":"2. 创建一个Map","slug":"_2-创建一个map","link":"#_2-创建一个map","children":[]},{"level":2,"title":"3. 使用核心Java","slug":"_3-使用核心java","link":"#_3-使用核心java","children":[{"level":3,"title":"3.1. 使用for-each循环","slug":"_3-1-使用for-each循环","link":"#_3-1-使用for-each循环","children":[]},{"level":3,"title":"3.2. 使用Stream","slug":"_3-2-使用stream","link":"#_3-2-使用stream","children":[]}]},{"level":2,"title":"4. 外部库","slug":"_4-外部库","link":"#_4-外部库","children":[{"level":3,"title":"4.1. Jackson","slug":"_4-1-jackson","link":"#_4-1-jackson","children":[]},{"level":3,"title":"4.2. Gson","slug":"_4-2-gson","link":"#_4-2-gson","children":[]},{"level":3,"title":"4.3. Apache Commons Collections","slug":"_4-3-apache-commons-collections","link":"#_4-3-apache-commons-collections","children":[]},{"level":3,"title":"4.4. Google Guava","slug":"_4-4-google-guava","link":"#_4-4-google-guava","children":[]}]},{"level":2,"title":"5. 结论","slug":"_5-结论","link":"#_5-结论","children":[]}],"git":{"createdTime":1719009087000,"updatedTime":1719009087000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":5.7,"words":1709},"filePathRelative":"posts/baeldung/2024-06-21/2024-06-21-How to Pretty Print a Map in Java.md","localizedDate":"2024年6月22日","excerpt":"\\n<p>漂亮打印Java中的<code>Map</code>涉及到以一种视觉上吸引人且易于阅读的方式格式化和显示Map中的键值对。尽管Java没有提供内置的漂亮打印Map的方法，我们必须实现自定义解决方案。</p>\\n<p>在本教程中，我们将学习如何实现这一目标。根据我们的偏好和详细程度，我们将探索使用标准JDK和外部库的多种方法。</p>\\n<h2>2. 创建一个<code>Map</code></h2>\\n<p>在我们继续之前，让我们创建一个Map来操作：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token class-name\\">Map</span>`<span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Object</span><span class=\\"token punctuation\\">&gt;</span></span>` map <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Map</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">of</span><span class=\\"token punctuation\\">(</span>\\n  <span class=\\"token string\\">\\"one\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token string\\">\\"two\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token string\\">\\"inner\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Map</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">of</span><span class=\\"token punctuation\\">(</span>\\n    <span class=\\"token string\\">\\"ten\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">10</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token string\\">\\"eleven\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">11</span>\\n  <span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}');export{k as comp,d as data};
