import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-C5QtKXnb.js";const e={},p=t(`<hr><h1 id="在java中仅在第一个分隔符处分割字符串" tabindex="-1"><a class="header-anchor" href="#在java中仅在第一个分隔符处分割字符串"><span>在Java中仅在第一个分隔符处分割字符串</span></a></h1><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p>在本教程中，我们将学习如何使用两种方法在Java中仅在第一个分隔符处分割一个_String_。</p><h2 id="_2-问题陈述" tabindex="-1"><a class="header-anchor" href="#_2-问题陈述"><span>2. 问题陈述</span></a></h2><p>假设我们有一个文本文件，每行都是一个字符串，由两部分组成——左部分表示一个人的名字，右部分表示他们的问候语：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Roberto &quot;I wish you a bug-free day!&quot;
Daniele &quot;Have a great day!&quot;
Jonas &quot;Good bye!&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>随后，我们希望从每行中获取人的名字。</p><p>我们可以看到，这两部分由一个空格（” ”）分隔，就像右部分的其他单词一样。因此，我们的分隔符将是空格字符。</p><h2 id="_3-使用-split-方法" tabindex="-1"><a class="header-anchor" href="#_3-使用-split-方法"><span>3. 使用 <em>split()</em> 方法</span></a></h2><p><em>String</em> 类的 <em>split()</em> 实例方法根据提供的正则表达式分割字符串。此外，我们可以使用其重载变体之一来获取所需的第一个出现。</p><p>我们可以向 <em>split()</em> 方法提供一个 <em>limit</em> 作为参数，以指定我们想要应用模式的次数，从而确定结果数组中的最大令牌数。例如，如果我们将 <em>limit</em> 设置为 <em>n</em>（<em>n</em> &gt; 0），这意味着模式将最多应用 <em>n-1</em> 次。</p><p>这里，我们将使用空格（” ”）作为正则表达式，在第一个空格出现时分割 <em>String</em>。</p><p>因此，我们可以使用重载的 <em>split()</em> 方法将每行标记为两部分：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getFirstWordUsingSplit</span><span class="token punctuation">(</span><span class="token class-name">String</span> input<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tokens <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> tokens<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，如果我们将示例中的第一行作为输入传递给此方法，它将返回“Roberto”。</p><p><strong>但是，如果输入_String_只有一个单词或没有空格，上述方法将简单地返回相同的_String_。</strong></p><p>让我们来测试一下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Roberto&quot;</span><span class="token punctuation">,</span> <span class="token function">getFirstWordUsingSplit</span><span class="token punctuation">(</span><span class="token string">&quot;Roberto \\&quot;I wish you a bug-free day\\&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;StringWithNoSpace&quot;</span><span class="token punctuation">,</span> <span class="token function">getFirstWordUsingSplit</span><span class="token punctuation">(</span><span class="token string">&quot;StringWithNoSpace&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-使用-substring-方法" tabindex="-1"><a class="header-anchor" href="#_4-使用-substring-方法"><span>4. 使用 <em>substring()</em> 方法</span></a></h2><p><em>String</em> 类的 <em>substring()</em> 方法返回一个_String_ 的子字符串。它是一个重载方法，其中一个重载版本接受 <em>index</em> 并返回给定索引之前的所有字符。</p><p>让我们结合 <em>substring()</em> 和 <em>indexOf()</em> 来解决同样的问题。</p><p>首先，我们将获取第一个空格字符的索引。然后，我们将获取到此索引的子字符串，这将是我们的结果，即人的名字：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getFirstWordUsingSubString</span><span class="token punctuation">(</span><span class="token class-name">String</span> input<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> input<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> input<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们传递与之前相同的输入_String_，我们的方法将返回_String_“Roberto”。</p><p><strong>但是，如果输入_String_不包含任何空格，那么这种方法将抛出 <em>StringIndexOutOfBoundsException</em>。</strong> 如果没有找到匹配项，<em>indexOf()</em> 方法返回 -1。</p><p>为了避免这种异常，我们可以修改上述方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getFirstWordUsingSubString</span><span class="token punctuation">(</span><span class="token class-name">String</span> input<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span> <span class="token operator">?</span> input<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> input<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，如果我们传递一个没有空格的_String_到这个方法，我们将得到一个空的_String_作为返回。</p><p>让我们来测试一下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Roberto&quot;</span><span class="token punctuation">,</span> <span class="token function">getFirstWordUsingSubString</span><span class="token punctuation">(</span><span class="token string">&quot;Roberto \\&quot;I wish you a bug-free day\\&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token function">getFirstWordUsingSubString</span><span class="token punctuation">(</span><span class="token string">&quot;StringWithNoSpace&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-结论" tabindex="-1"><a class="header-anchor" href="#_5-结论"><span>5. 结论</span></a></h2><p>在本文中，我们看到了在Java中仅在第一个分隔符处分割一个_String_的两种方法。</p>`,33),i=[p];function o(c,l){return s(),a("div",null,i)}const d=n(e,[["render",o],["__file","2024-07-24-Split a String Only on the First Occurrence of Delimiter.html.vue"]]),g=JSON.parse('{"path":"/posts/baeldung/2024-07-24/2024-07-24-Split%20a%20String%20Only%20on%20the%20First%20Occurrence%20of%20Delimiter.html","title":"在Java中仅在第一个分隔符处分割字符串","lang":"zh-CN","frontmatter":{"date":"2024-07-24T00:00:00.000Z","category":["Java"],"tag":["String","split"],"head":[["meta",{"name":"keywords","content":"Java, String, split, delimiter"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-24/2024-07-24-Split%20a%20String%20Only%20on%20the%20First%20Occurrence%20of%20Delimiter.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"在Java中仅在第一个分隔符处分割字符串"}],["meta",{"property":"og:description","content":"在Java中仅在第一个分隔符处分割字符串 1. 概述 在本教程中，我们将学习如何使用两种方法在Java中仅在第一个分隔符处分割一个_String_。 2. 问题陈述 假设我们有一个文本文件，每行都是一个字符串，由两部分组成——左部分表示一个人的名字，右部分表示他们的问候语： 随后，我们希望从每行中获取人的名字。 我们可以看到，这两部分由一个空格（” ”..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-24T15:52:28.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"String"}],["meta",{"property":"article:tag","content":"split"}],["meta",{"property":"article:published_time","content":"2024-07-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-24T15:52:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"在Java中仅在第一个分隔符处分割字符串\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-24T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-24T15:52:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"在Java中仅在第一个分隔符处分割字符串 1. 概述 在本教程中，我们将学习如何使用两种方法在Java中仅在第一个分隔符处分割一个_String_。 2. 问题陈述 假设我们有一个文本文件，每行都是一个字符串，由两部分组成——左部分表示一个人的名字，右部分表示他们的问候语： 随后，我们希望从每行中获取人的名字。 我们可以看到，这两部分由一个空格（” ”..."},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. 问题陈述","slug":"_2-问题陈述","link":"#_2-问题陈述","children":[]},{"level":2,"title":"3. 使用 split() 方法","slug":"_3-使用-split-方法","link":"#_3-使用-split-方法","children":[]},{"level":2,"title":"4. 使用 substring() 方法","slug":"_4-使用-substring-方法","link":"#_4-使用-substring-方法","children":[]},{"level":2,"title":"5. 结论","slug":"_5-结论","link":"#_5-结论","children":[]}],"git":{"createdTime":1721836348000,"updatedTime":1721836348000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":2.68,"words":804},"filePathRelative":"posts/baeldung/2024-07-24/2024-07-24-Split a String Only on the First Occurrence of Delimiter.md","localizedDate":"2024年7月24日","excerpt":"<hr>\\n<h1>在Java中仅在第一个分隔符处分割字符串</h1>\\n<h2>1. 概述</h2>\\n<p>在本教程中，我们将学习如何使用两种方法在Java中仅在第一个分隔符处分割一个_String_。</p>\\n<h2>2. 问题陈述</h2>\\n<p>假设我们有一个文本文件，每行都是一个字符串，由两部分组成——左部分表示一个人的名字，右部分表示他们的问候语：</p>\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code>Roberto \\"I wish you a bug-free day!\\"\\nDaniele \\"Have a great day!\\"\\nJonas \\"Good bye!\\"\\n</code></pre></div>","autoDesc":true}');export{d as comp,g as data};
