import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-D0vunQyr.js";const e={},p=t('<h1 id="java中使用泛型实现工厂模式" tabindex="-1"><a class="header-anchor" href="#java中使用泛型实现工厂模式"><span>Java中使用泛型实现工厂模式</span></a></h1><p>在本教程中，我们将学习如何在Java中使用泛型来实现工厂模式。</p><h2 id="_2-什么是工厂模式" tabindex="-1"><a class="header-anchor" href="#_2-什么是工厂模式"><span>2. 什么是工厂模式？</span></a></h2><p>在面向对象编程中，工厂模式是一种创建型设计模式，当被调用时负责创建对象。</p><p><strong>工厂是一个类，它通过方法调用来创建原型类，即接口的对象：</strong></p><p>工厂模式非常适合我们想要创建一个公共接口的对象，同时隐藏创建逻辑。</p><h2 id="_3-如何实现" tabindex="-1"><a class="header-anchor" href="#_3-如何实现"><span>3. 如何实现？</span></a></h2><p>现在让我们学习如何实现它。首先，让我们看看类图：</p><p>接下来，让我们实现图中的每个类。</p><h3 id="_3-1-实现-notifier-接口" tabindex="-1"><a class="header-anchor" href="#_3-1-实现-notifier-接口"><span>3.1. 实现_Notifier_接口</span></a></h3><p>_Notifier_接口是一个原型，其他通知器类实现它：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Notifier</span>``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>`````` <span class="token punctuation">{</span>\n    <span class="token keyword">void</span> <span class="token function">notify</span><span class="token punctuation">(</span><span class="token class-name">T</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如我们所见，_Notifier_类是一个泛型类，它有一个名为_notify_的方法。</p><h3 id="_3-2-实现-notifier-类" tabindex="-1"><a class="header-anchor" href="#_3-2-实现-notifier-类"><span>3.2. 实现_Notifier_类</span></a></h3><p>现在让我们实现另外两个通知器类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringNotifier</span> <span class="token keyword">implements</span> <span class="token class-name">Notifier</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>``` <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notify</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Notifying: &quot;</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateNotifier</span> <span class="token keyword">implements</span> <span class="token class-name">Notifier</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Date</span><span class="token punctuation">&gt;</span></span>``` <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notify</span><span class="token punctuation">(</span><span class="token class-name">Date</span> date<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Notifying: &quot;</span> <span class="token operator">+</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们有两个使用_Notifier_接口的类——一个将输出简单文本，另一个将发布日期。</p><h3 id="_3-3-实现工厂" tabindex="-1"><a class="header-anchor" href="#_3-3-实现工厂"><span>3.3. 实现工厂</span></a></h3><p>工厂类每次调用其唯一的方法_getNotifier()_时都会生成一个通知器实例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotifierFactory</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">public</span> ``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>`````` <span class="token class-name">Notifier</span>``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>`````` <span class="token function">getNotifier</span><span class="token punctuation">(</span><span class="token class-name">Class</span>``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>`````` c<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token class-name">Record</span><span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token class-name">Date</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token class-name">Record</span><span class="token punctuation">.</span><span class="token constant">DATE</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，<em>Record_是一个枚举，有两个常量分别命名为_STRING_和_DATE</em>。</p><h3 id="_3-4-实现-record" tabindex="-1"><a class="header-anchor" href="#_3-4-实现-record"><span>3.4. 实现_Record_</span></a></h3><p><strong>_Record_枚举保留有效通知器类的记录，并在工厂类调用它时每次创建一个实例：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Record</span> <span class="token punctuation">{</span>\n    <span class="token constant">STRING</span> <span class="token punctuation">{</span>\n        <span class="token annotation punctuation">@Override</span>\n        <span class="token keyword">public</span> <span class="token class-name">Notifier</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>``` <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StringNotifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token constant">DATE</span> <span class="token punctuation">{</span>\n        <span class="token annotation punctuation">@Override</span>\n        <span class="token keyword">public</span> <span class="token class-name">Notifier</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Date</span><span class="token punctuation">&gt;</span></span>``` <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DateNotifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">abstract</span> ``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>`````` <span class="token class-name">Notifier</span>``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>`````` <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们已经成功实现了工厂模式。</p><h2 id="_4-使用工厂" tabindex="-1"><a class="header-anchor" href="#_4-使用工厂"><span>4. 使用工厂</span></a></h2><p>让我们在_Main_类中使用工厂：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">NotifierFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NotifierFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Notifier</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>``` stringNotifier <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getNotifier</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Notifier</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Date</span><span class="token punctuation">&gt;</span></span>``` dateNotifier <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getNotifier</span><span class="token punctuation">(</span><span class="token class-name">Date</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    stringNotifier<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token string">&quot;Hello world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    dateNotifier<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们应该编译并运行我们的代码：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ javac Main.java\n$ <span class="token function">java</span> Main\nNotifying: Hello world<span class="token operator">!</span>\nNotifying: Wed Oct <span class="token number">19</span> <span class="token number">17</span>:36:38 TRT <span class="token number">2022</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如我们所见，工厂已成功创建了两个适当类型的通知器实例。</p><h2 id="_5-总结" tabindex="-1"><a class="header-anchor" href="#_5-总结"><span>5. 总结</span></a></h2><p>在本文中，我们学习了如何在Java中实现和使用工厂模式。</p><p>如常，源代码可在GitHub上找到。</p>',34),c=[p];function o(i,l){return s(),a("div",null,c)}const k=n(e,[["render",o],["__file","2024-07-13-Implementing Factory Pattern With Generics in Java.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-13/2024-07-13-Implementing%20Factory%20Pattern%20With%20Generics%20in%20Java.html","title":"Java中使用泛型实现工厂模式","lang":"zh-CN","frontmatter":{"date":"2022-10-19T00:00:00.000Z","category":["Java","设计模式"],"tag":["工厂模式","Java泛型"],"head":[["meta",{"name":"keywords","content":"Java工厂模式, 泛型, 设计模式"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-13/2024-07-13-Implementing%20Factory%20Pattern%20With%20Generics%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Java中使用泛型实现工厂模式"}],["meta",{"property":"og:description","content":"Java中使用泛型实现工厂模式 在本教程中，我们将学习如何在Java中使用泛型来实现工厂模式。 2. 什么是工厂模式？ 在面向对象编程中，工厂模式是一种创建型设计模式，当被调用时负责创建对象。 工厂是一个类，它通过方法调用来创建原型类，即接口的对象： 工厂模式非常适合我们想要创建一个公共接口的对象，同时隐藏创建逻辑。 3. 如何实现？ 现在让我们学习如..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-13T09:03:38.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"工厂模式"}],["meta",{"property":"article:tag","content":"Java泛型"}],["meta",{"property":"article:published_time","content":"2022-10-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-13T09:03:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java中使用泛型实现工厂模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-10-19T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-13T09:03:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Java中使用泛型实现工厂模式 在本教程中，我们将学习如何在Java中使用泛型来实现工厂模式。 2. 什么是工厂模式？ 在面向对象编程中，工厂模式是一种创建型设计模式，当被调用时负责创建对象。 工厂是一个类，它通过方法调用来创建原型类，即接口的对象： 工厂模式非常适合我们想要创建一个公共接口的对象，同时隐藏创建逻辑。 3. 如何实现？ 现在让我们学习如..."},"headers":[{"level":2,"title":"2. 什么是工厂模式？","slug":"_2-什么是工厂模式","link":"#_2-什么是工厂模式","children":[]},{"level":2,"title":"3. 如何实现？","slug":"_3-如何实现","link":"#_3-如何实现","children":[{"level":3,"title":"3.1. 实现_Notifier_接口","slug":"_3-1-实现-notifier-接口","link":"#_3-1-实现-notifier-接口","children":[]},{"level":3,"title":"3.2. 实现_Notifier_类","slug":"_3-2-实现-notifier-类","link":"#_3-2-实现-notifier-类","children":[]},{"level":3,"title":"3.3. 实现工厂","slug":"_3-3-实现工厂","link":"#_3-3-实现工厂","children":[]},{"level":3,"title":"3.4. 实现_Record_","slug":"_3-4-实现-record","link":"#_3-4-实现-record","children":[]}]},{"level":2,"title":"4. 使用工厂","slug":"_4-使用工厂","link":"#_4-使用工厂","children":[]},{"level":2,"title":"5. 总结","slug":"_5-总结","link":"#_5-总结","children":[]}],"git":{"createdTime":1720861418000,"updatedTime":1720861418000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":2.14,"words":642},"filePathRelative":"posts/baeldung/2024-07-13/2024-07-13-Implementing Factory Pattern With Generics in Java.md","localizedDate":"2022年10月19日","excerpt":"\\n<p>在本教程中，我们将学习如何在Java中使用泛型来实现工厂模式。</p>\\n<h2>2. 什么是工厂模式？</h2>\\n<p>在面向对象编程中，工厂模式是一种创建型设计模式，当被调用时负责创建对象。</p>\\n<p><strong>工厂是一个类，它通过方法调用来创建原型类，即接口的对象：</strong></p>\\n<p>工厂模式非常适合我们想要创建一个公共接口的对象，同时隐藏创建逻辑。</p>\\n<h2>3. 如何实现？</h2>\\n<p>现在让我们学习如何实现它。首先，让我们看看类图：</p>\\n<p>接下来，让我们实现图中的每个类。</p>\\n<h3>3.1. 实现_Notifier_接口</h3>","autoDesc":true}');export{k as comp,d as data};
