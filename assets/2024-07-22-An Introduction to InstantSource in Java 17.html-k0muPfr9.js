import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-0nXvcScy.js";const e={},p=t(`<h1 id="java-17中instantsource接口简介" tabindex="-1"><a class="header-anchor" href="#java-17中instantsource接口简介"><span>Java 17中InstantSource接口简介</span></a></h1><p>在这个教程中，我们将深入探讨Java 17中引入的InstantSource接口，它提供了当前瞬间的可插拔表示，并避免了对时区的引用。</p><h2 id="_2-instantsource接口" tabindex="-1"><a class="header-anchor" href="#_2-instantsource接口"><span>2. InstantSource接口</span></a></h2><p>正如我们在原始提案和相关问题中看到的，这个接口的第一个目标是创建一个抽象，以替代java.time.Clock提供的时区。它还简化了在测试期间为代码部分创建存根以检索瞬间。</p><p>它在Java 17中被添加，以提供一种安全的方式来访问当前瞬间，如以下示例所示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">AQuickTest</span> <span class="token punctuation">{</span>
    <span class="token class-name">InstantSource</span> source<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token class-name">Instant</span> <span class="token function">getInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> source<span class="token punctuation">.</span><span class="token function">instant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们可以简单地获取一个瞬间：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">var</span> quickTest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AQuickTest</span><span class="token punctuation">(</span><span class="token class-name">InstantSource</span><span class="token punctuation">.</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
quickTest<span class="token punctuation">.</span><span class="token function">getInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>它的实现创建了可以在任何地方用来检索瞬间的对象，并且它为测试目的提供了一种有效的方式来创建存根实现。</p><p>让我们更深入地了解使用这个接口的好处。</p><h2 id="_3-问题与解决方案" tabindex="-1"><a class="header-anchor" href="#_3-问题与解决方案"><span>3. 问题与解决方案</span></a></h2><p>为了更好地理解InstantSource接口，让我们深入探讨它被创建来解决的问题以及它提供的解决方案。</p><h3 id="_3-1-测试问题" tabindex="-1"><a class="header-anchor" href="#_3-1-测试问题"><span>3.1. 测试问题</span></a></h3><p>测试涉及检索Instant的代码通常是一场噩梦，尤其是当获取该Instant的方式基于当前数据解决方案，如LocalDateTime.now()。</p><p><strong>为了在测试中提供一个特定的日期，我们通常会创建一些变通方法，比如创建一个外部日期工厂，并在测试中提供一个存根实例。</strong></p><p>让我们看以下代码作为解决这个问题的变通方法的例子。</p><p>InstantExample类使用InstantWrapper（或变通方法）来恢复一个瞬间：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">InstantExample</span> <span class="token punctuation">{</span>
    <span class="token class-name">InstantWrapper</span> instantWrapper<span class="token punctuation">;</span>
    <span class="token class-name">Instant</span> <span class="token function">getCurrentInstantFromInstantWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> instantWrapper<span class="token punctuation">.</span><span class="token function">instant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而我们的InstantWrapper变通类本身看起来像这样：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">InstantWrapper</span> <span class="token punctuation">{</span>
    <span class="token class-name">Clock</span> clock<span class="token punctuation">;</span>
    <span class="token class-name">InstantWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>clock <span class="token operator">=</span> <span class="token class-name">Clock</span><span class="token punctuation">.</span><span class="token function">systemDefaultZone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">InstantWrapper</span><span class="token punctuation">(</span><span class="token class-name">ZonedDateTime</span> zonedDateTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>clock <span class="token operator">=</span> <span class="token class-name">Clock</span><span class="token punctuation">.</span><span class="token function">fixed</span><span class="token punctuation">(</span>zonedDateTime<span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> zonedDateTime<span class="token punctuation">.</span><span class="token function">getZone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">Instant</span> <span class="token function">instant</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> clock<span class="token punctuation">.</span><span class="token function">instant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们可以用它来为测试提供一个固定的瞬间：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// given</span>
<span class="token class-name">LocalDateTime</span> now <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">InstantExample</span> tested <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InstantExample</span><span class="token punctuation">(</span><span class="token class-name">InstantWrapper</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Instant</span> currentInstant <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token class-name">ZoneOffset</span><span class="token punctuation">.</span><span class="token constant">UTC</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// when</span>
<span class="token class-name">Instant</span> returnedInstant <span class="token operator">=</span> tested<span class="token punctuation">.</span><span class="token function">getCurrentInstantFromWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// then</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span>currentInstant<span class="token punctuation">,</span> returnedInstant<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-解决测试问题" tabindex="-1"><a class="header-anchor" href="#_3-2-解决测试问题"><span>3.2. 解决测试问题</span></a></h3><p>本质上，我们上面应用的变通方法就是InstantSource所做的。<strong>它提供了一个我们可以在任何需要的地方使用的外部Instant工厂。</strong> Java 17提供了一个默认的系统范围实现（在Clock类中），我们也可以提供我们自己的：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">InstantExample</span> <span class="token punctuation">{</span>
    <span class="token class-name">InstantSource</span> instantSource<span class="token punctuation">;</span>
    <span class="token class-name">Instant</span> <span class="token function">getCurrentInstantFromInstantSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> instantSource<span class="token punctuation">.</span><span class="token function">instant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>InstantSource是可插拔的。也就是说，它可以使用依赖注入框架注入，或者作为一个构造函数参数，传入我们正在测试的对象。因此，我们可以轻松地创建一个存根InstantSource，提供给它测试对象，并让它返回我们想要的瞬间进行测试：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// given</span>
<span class="token class-name">LocalDateTime</span> now <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">InstantSource</span> instantSource <span class="token operator">=</span> <span class="token class-name">InstantSource</span><span class="token punctuation">.</span><span class="token function">fixed</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token class-name">ZoneOffset</span><span class="token punctuation">.</span><span class="token constant">UTC</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">InstantExample</span> tested <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InstantExample</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> instantSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Instant</span> currentInstant <span class="token operator">=</span> instantSource<span class="token punctuation">.</span><span class="token function">instant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// when</span>
<span class="token class-name">Instant</span> returnedInstant <span class="token operator">=</span> tested<span class="token punctuation">.</span><span class="token function">getCurrentInstantFromInstantSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// then</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span>currentInstant<span class="token punctuation">,</span> returnedInstant<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-时区问题" tabindex="-1"><a class="header-anchor" href="#_3-3-时区问题"><span>3.3. 时区问题</span></a></h3><p><strong>当我们需要一个Instant时，我们有许多不同的地方可以获取它</strong>，比如Instant.now()，Clock.systemDefaultZone().instant()甚至LocalDateTime.now.toInstant(zoneOffset)。问题是，根据我们选择的风味，<strong>它可能会引入时区问题</strong>。</p><p>例如，让我们看看当我们在Clock类上请求一个瞬间会发生什么：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Clock</span><span class="token punctuation">.</span><span class="token function">systemDefaultZone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">instant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这段代码将产生以下结果：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">05</span><span class="token constant">T06</span><span class="token operator">:</span><span class="token number">47</span><span class="token operator">:</span><span class="token number">15.001890204</span>Z
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>让我们从不同的源请求相同的瞬间，看看它返回什么：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token class-name">ZoneOffset</span><span class="token punctuation">.</span><span class="token constant">UTC</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这产生了以下输出：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">05</span><span class="token constant">T07</span><span class="token operator">:</span><span class="token number">47</span><span class="token operator">:</span><span class="token number">15.001890204</span>Z
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们应该得到相同的瞬间，但实际上两者之间有60分钟的差异。</p><p>最糟糕的是，可能有两三个开发人员在同一段代码中使用这两种瞬间源的不同部分。如果是这样的话，我们就有问题了。</p><p><strong>我们通常不想在这一点上处理时区问题</strong>。但是，要创建瞬间，我们需要一个源，而这个源总是带有附加的时区。</p><h3 id="_3-4-解决时区问题" tabindex="-1"><a class="header-anchor" href="#_3-4-解决时区问题"><span>3.4. 解决时区问题</span></a></h3><p><strong>InstantSource抽象了我们选择瞬间源的过程</strong>。这个选择已经为我们做好了。可能是另一位程序员设置了一个系统范围的自定义实现，或者我们正在使用Java 17提供的实现，正如我们将在下一节中看到的。</p><p>正如InstantExample所示，我们插入了一个InstantSource，我们不需要知道其他任何事情。我们可以移除我们的InstantWrapper变通方法，只是使用插入的InstantSource。</p><p>现在我们已经看到了使用这个接口的好处，让我们通过了解它的静态和实例方法来看看它还提供了什么。</p><h2 id="_4-工厂方法" tabindex="-1"><a class="header-anchor" href="#_4-工厂方法"><span>4. 工厂方法</span></a></h2><p>可以使用以下工厂方法来创建一个InstantSource对象：</p><ul><li><strong>system() –</strong> 默认的系统范围实现</li><li><strong>tick(InstantSource, Duration) –</strong> 返回一个<strong>截断到给定持续时间的最近表示的InstantSource</strong></li><li><strong>fixed(Instant) –</strong> 返回一个<strong>总是产生相同Instant的InstantSource</strong></li><li><strong>offset(InstantSource, Duration) –</strong> 返回一个<strong>提供给定偏移的Instants的InstantSource</strong></li></ul><p>让我们看看这些方法的一些基本用法。</p><h3 id="_4-1-system" tabindex="-1"><a class="header-anchor" href="#_4-1-system"><span>4.1. system()</span></a></h3><p>Java 17中的当前默认实现是Clock.SystemInstantSource类。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Instant</span> i <span class="token operator">=</span> <span class="token class-name">InstantSource</span><span class="token punctuation">.</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">instant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-2-tick" tabindex="-1"><a class="header-anchor" href="#_4-2-tick"><span>4.2. tick()</span></a></h3><p>基于前面的示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Instant</span> i <span class="token operator">=</span> <span class="token class-name">InstantSource</span><span class="token punctuation">.</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">instant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>运行这段代码后，我们将得到以下输出：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">05</span><span class="token constant">T07</span><span class="token operator">:</span><span class="token number">44</span><span class="token operator">:</span><span class="token number">44.861040341</span>Z
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但是，如果我们应用了2小时的滴答持续时间：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Instant</span> i <span class="token operator">=</span> <span class="token class-name">InstantSource</span><span class="token punctuation">.</span><span class="token function">tick</span><span class="token punctuation">(</span><span class="token class-name">InstantSource</span><span class="token punctuation">.</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofHours</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">instant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后，我们将得到以下结果：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">05</span><span class="token constant">T06</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span>Z
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-3-fixed" tabindex="-1"><a class="header-anchor" href="#_4-3-fixed"><span>4.3. fixed()</span></a></h3><p>当我们需要为测试目的创建一个存根InstantSource时，这个方法非常方便：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">LocalDateTime</span> fixed <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Instant</span> i <span class="token operator">=</span> <span class="token class-name">InstantSource</span><span class="token punctuation">.</span><span class="token function">fixed</span><span class="token punctuation">(</span>fixed<span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token class-name">ZoneOffset</span><span class="token punctuation">.</span><span class="token constant">UTC</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">instant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述总是返回相同的瞬间：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span><span class="token constant">T00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span>Z
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-4-offset" tabindex="-1"><a class="header-anchor" href="#_4-4-offset"><span>4.4. offset()</span></a></h3><p>基于前面的示例，我们将对固定的InstantSource应用一个偏移，看看它返回什么：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">LocalDateTime</span> fixed <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">InstantSource</span> fixedSource <span class="token operator">=</span> <span class="token class-name">InstantSource</span><span class="token punctuation">.</span><span class="token function">fixed</span><span class="token punctuation">(</span>fixed<span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token class-name">ZoneOffset</span><span class="token punctuation">.</span><span class="token constant">UTC</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Instant</span> i <span class="token operator">=</span> <span class="token class-name">InstantSource</span><span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span>fixedSource<span class="token punctuation">,</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofDays</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">instant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行这段代码后，我们将得到以下输出：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">06</span><span class="token constant">T00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span>Z
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_5-实例方法" tabindex="-1"><a class="header-anchor" href="#_5-实例方法"><span>5. 实例方法</span></a></h2><p>可用于与InstantSource实例交互的方法是：</p><ul><li><strong>instant() –</strong> 返回由InstantSource提供的当前Instant</li><li><strong>millis() –</strong> 返回InstantSource提供的当前Instant的毫秒表示</li><li><strong>withZone(ZoneId) –</strong> 接收一个ZoneId，并返回一个基于给定InstantSource和指定ZoneId的时钟</li></ul><h3 id="_5-1-instant" tabindex="-1"><a class="header-anchor" href="#_5-1-instant"><span>5.1. instant()</span></a></h3><p>这种方法的最基本用法是：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Instant</span> i <span class="token operator">=</span> <span class="token class-name">InstantSource</span><span class="token punctuation">.</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">instant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>运行这段代码将显示以下输出：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token number">2022</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">05</span><span class="token constant">T08</span><span class="token operator">:</span><span class="token number">29</span><span class="token operator">:</span><span class="token number">17.641839778</span>Z
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-2-millis" tabindex="-1"><a class="header-anchor" href="#_5-2-millis"><span>5.2. millis()</span></a></h3><p>为了从InstantSource获取纪元：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">long</span> m <span class="token operator">=</span> <span class="token class-name">InstantSource</span><span class="token punctuation">.</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">millis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>运行后，我们将得到以下结果：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token number">1641371476655</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-3-withzone" tabindex="-1"><a class="header-anchor" href="#_5-3-withzone"><span>5.3. withZone()</span></a></h3><p>让我们为特定的ZoneId获取一个Clock实例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Clock</span> c <span class="token operator">=</span> <span class="token class-name">InstantSource</span><span class="token punctuation">.</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withZone</span><span class="token punctuation">(</span><span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;-4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这将</p>`,87),o=[p];function c(l,i){return s(),a("div",null,o)}const k=n(e,[["render",c],["__file","2024-07-22-An Introduction to InstantSource in Java 17.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-22/2024-07-22-An%20Introduction%20to%20InstantSource%20in%20Java%2017.html","title":"Java 17中InstantSource接口简介","lang":"zh-CN","frontmatter":{"date":"2024-07-22T00:00:00.000Z","category":["Java","InstantSource"],"tag":["Java 17","InstantSource"],"head":[["meta",{"name":"keywords","content":"Java, InstantSource, Java 17, 时间测试, 时间源抽象"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-22/2024-07-22-An%20Introduction%20to%20InstantSource%20in%20Java%2017.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Java 17中InstantSource接口简介"}],["meta",{"property":"og:description","content":"Java 17中InstantSource接口简介 在这个教程中，我们将深入探讨Java 17中引入的InstantSource接口，它提供了当前瞬间的可插拔表示，并避免了对时区的引用。 2. InstantSource接口 正如我们在原始提案和相关问题中看到的，这个接口的第一个目标是创建一个抽象，以替代java.time.Clock提供的时区。它还简..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-22T15:44:33.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java 17"}],["meta",{"property":"article:tag","content":"InstantSource"}],["meta",{"property":"article:published_time","content":"2024-07-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-22T15:44:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 17中InstantSource接口简介\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-22T15:44:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Java 17中InstantSource接口简介 在这个教程中，我们将深入探讨Java 17中引入的InstantSource接口，它提供了当前瞬间的可插拔表示，并避免了对时区的引用。 2. InstantSource接口 正如我们在原始提案和相关问题中看到的，这个接口的第一个目标是创建一个抽象，以替代java.time.Clock提供的时区。它还简..."},"headers":[{"level":2,"title":"2. InstantSource接口","slug":"_2-instantsource接口","link":"#_2-instantsource接口","children":[]},{"level":2,"title":"3. 问题与解决方案","slug":"_3-问题与解决方案","link":"#_3-问题与解决方案","children":[{"level":3,"title":"3.1. 测试问题","slug":"_3-1-测试问题","link":"#_3-1-测试问题","children":[]},{"level":3,"title":"3.2. 解决测试问题","slug":"_3-2-解决测试问题","link":"#_3-2-解决测试问题","children":[]},{"level":3,"title":"3.3. 时区问题","slug":"_3-3-时区问题","link":"#_3-3-时区问题","children":[]},{"level":3,"title":"3.4. 解决时区问题","slug":"_3-4-解决时区问题","link":"#_3-4-解决时区问题","children":[]}]},{"level":2,"title":"4. 工厂方法","slug":"_4-工厂方法","link":"#_4-工厂方法","children":[{"level":3,"title":"4.1. system()","slug":"_4-1-system","link":"#_4-1-system","children":[]},{"level":3,"title":"4.2. tick()","slug":"_4-2-tick","link":"#_4-2-tick","children":[]},{"level":3,"title":"4.3. fixed()","slug":"_4-3-fixed","link":"#_4-3-fixed","children":[]},{"level":3,"title":"4.4. offset()","slug":"_4-4-offset","link":"#_4-4-offset","children":[]}]},{"level":2,"title":"5. 实例方法","slug":"_5-实例方法","link":"#_5-实例方法","children":[{"level":3,"title":"5.1. instant()","slug":"_5-1-instant","link":"#_5-1-instant","children":[]},{"level":3,"title":"5.2. millis()","slug":"_5-2-millis","link":"#_5-2-millis","children":[]},{"level":3,"title":"5.3. withZone()","slug":"_5-3-withzone","link":"#_5-3-withzone","children":[]}]}],"git":{"createdTime":1721663073000,"updatedTime":1721663073000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":5.74,"words":1721},"filePathRelative":"posts/baeldung/2024-07-22/2024-07-22-An Introduction to InstantSource in Java 17.md","localizedDate":"2024年7月22日","excerpt":"\\n<p>在这个教程中，我们将深入探讨Java 17中引入的InstantSource接口，它提供了当前瞬间的可插拔表示，并避免了对时区的引用。</p>\\n<h2>2. InstantSource接口</h2>\\n<p>正如我们在原始提案和相关问题中看到的，这个接口的第一个目标是创建一个抽象，以替代java.time.Clock提供的时区。它还简化了在测试期间为代码部分创建存根以检索瞬间。</p>\\n<p>它在Java 17中被添加，以提供一种安全的方式来访问当前瞬间，如以下示例所示：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">AQuickTest</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token class-name\\">InstantSource</span> source<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span>\\n    <span class=\\"token class-name\\">Instant</span> <span class=\\"token function\\">getInstant</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> source<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">instant</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{k as comp,d as data};
