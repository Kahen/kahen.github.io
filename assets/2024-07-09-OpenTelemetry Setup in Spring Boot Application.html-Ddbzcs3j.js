import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-C5QtKXnb.js";const e={},p=t('<hr><h1 id="spring-boot-应用中的-opentelemetry-设置-baeldung" tabindex="-1"><a class="header-anchor" href="#spring-boot-应用中的-opentelemetry-设置-baeldung"><span>Spring Boot 应用中的 OpenTelemetry 设置 | Baeldung</span></a></h1><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p>在分布式系统中，提供请求服务时偶尔出现错误是意料之中的。一个集中的可观测性平台通过捕获应用程序的追踪/日志，并提供一个接口来查询特定请求，从而提供帮助。OpenTelemetry 通过标准化捕获和导出遥测数据的过程来提供帮助。</p><p>在本教程中，我们将学习如何将 Spring Boot 应用程序与 OpenTelemetry 集成。我们还将配置 OpenTelemetry 捕获应用程序追踪并将它们发送到中央系统以监控请求。</p><p>首先，让我们了解一些基本概念。</p><h2 id="_2-opentelemetry-简介" tabindex="-1"><a class="header-anchor" href="#_2-opentelemetry-简介"><span>2. OpenTelemetry 简介</span></a></h2><p>OpenTelemetry (Otel) 是一系列标准化的、与供应商无关的工具、API 和 SDK。它是一个 CNCF 孵化项目，是 OpenTracing 和 OpenCensus 项目的合并。</p><p>OpenTracing 是一个供应商中立的 API，用于将遥测数据发送到可观测性后端。OpenCensus 项目提供了一组特定于语言的库，开发人员可以使用这些库来对他们的代码进行仪器化，并将数据发送到任何支持的后端。Otel 使用与其前身项目相同的追踪和跨度概念来表示跨微服务的请求流。</p><p>OpenTelemetry 允许我们对代码进行仪器化、生成和收集遥测数据，这有助于分析应用程序的行为或性能。遥测数据可以包括日志、指标和追踪。我们可以自动或手动对 HTTP、数据库调用等进行代码的仪器化。</p><p>使用 Otel SDK，我们可以轻松地重写或向追踪添加更多属性。</p><p>让我们通过一个例子深入了解。</p><h2 id="_3-示例应用程序" tabindex="-1"><a class="header-anchor" href="#_3-示例应用程序"><span>3. 示例应用程序</span></a></h2><p>让我们想象我们需要构建两个微服务，其中一个服务与另一个服务进行交互。为了对应用程序进行遥测数据的仪器化，我们将应用程序与 Spring Cloud 和 OpenTelemetry 集成。</p><h3 id="_3-1-maven-依赖" tabindex="-1"><a class="header-anchor" href="#_3-1-maven-依赖"><span>3.1. Maven 依赖</span></a></h3><p><em>spring-cloud-starter-sleuth</em>、<em>spring-cloud-sleuth-otel-autoconfigure</em> 和 <em>opentelemetry-exporter-otlp</em> 依赖将自动捕获并导出追踪到任何支持的收集器。</p><p>首先，我们将创建一个 Spring Boot Web 项目，并将以下 Spring 和 OpenTelemetry 依赖项包含在两个应用程序中：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>``````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``````\n    ```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```````org.springframework.boot```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```````\n    ```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```````spring-boot-starter-web```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```````\n``````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>``````\n``````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``````\n    ```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```````org.springframework.cloud```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```````\n    ```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```````spring-cloud-starter-sleuth```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```````\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>`\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>`\n            ```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```````org.springframework.cloud```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```````\n            ```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```````spring-cloud-sleuth-brave```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```````\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>`\n   `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>`\n``````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>``````\n``````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``````\n    ```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```````org.springframework.cloud```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```````\n    ```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```````spring-cloud-sleuth-otel-autoconfigure```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```````\n``````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>``````\n``````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``````\n    ```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```````io.opentelemetry```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```````\n    ```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```````opentelemetry-exporter-otlp```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```````\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```1.23.1```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n``````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>``````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们应该注意，我们已经<strong>排除了 Spring Cloud Brave 依赖，用 Otel 替换了默认的追踪实现</strong>。</p><p>我们还需要包括 Spring 依赖管理 BOM 用于 Spring Cloud Sleuth：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>`\n        ``````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``````\n            ```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```````org.springframework.cloud```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```````\n            ```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```````spring-cloud-dependencies```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```````\n            ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```2021.0.5```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n            ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>``pom``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>``\n            ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>``import``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>``\n        ``````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>``````\n        ``````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>``````\n            ```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```````org.springframework.cloud```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```````\n            ```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```````spring-cloud-sleuth-otel-dependencies```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```````\n            ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```1.1.2```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n            ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>``import``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>``\n            ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>``pom``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>``\n        ``````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>``````\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-实现下游应用程序" tabindex="-1"><a class="header-anchor" href="#_3-2-实现下游应用程序"><span>3.2. 实现下游应用程序</span></a></h3><p>我们的下游应用程序将有一个端点来返回 <em>Price</em> 数据。</p><p>首先，让我们模拟 <em>Price</em> 类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Price</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">long</span> productId<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">double</span> priceAmount<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">double</span> discount<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，让我们实现带有 <em>Get Price</em> 端点的 <em>PriceController</em>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/price&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PriceController</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> <span class="token constant">LOGGER</span> <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">PriceController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Autowired</span>\n    <span class="token keyword">private</span> <span class="token class-name">PriceRepository</span> priceRepository<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;/{id}&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">Price</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token keyword">long</span> productId<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Getting Price details for Product Id {}&quot;</span><span class="token punctuation">,</span> productId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> priceRepository<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span>productId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们将在 <em>PriceRepository</em> 中实现 <em>getPrice</em> 方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Price</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token class-name">Long</span> productId<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Getting Price from Price Repo With Product Id {}&quot;</span><span class="token punctuation">,</span> productId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>priceMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>productId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Price Not Found for Product Id {}&quot;</span><span class="token punctuation">,</span> productId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">PriceNotFoundException</span><span class="token punctuation">(</span><span class="token string">&quot;Price Not Found&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> priceMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>productId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-实现上游应用程序" tabindex="-1"><a class="header-anchor" href="#_3-3-实现上游应用程序"><span>3.3. 实现上游应用程序</span></a></h3><p>上游应用程序还将具有一个端点来获取 <em>Product</em> 详细信息，并与上述 <em>Get Price</em> 端点集成。</p><p>首先，让我们实现 <em>Product</em> 类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">long</span> id<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">Price</span> price<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，让我们实现带有获取产品的端点的 <em>ProductController</em> 类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductController</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> <span class="token constant">LOGGER</span> <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">ProductController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Autowired</span>\n    <span class="token keyword">private</span> <span class="token class-name">PriceClient</span> priceClient<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Autowired</span>\n    <span class="token keyword">private</span> <span class="token class-name">ProductRepository</span> productRepository<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;/product/{id}&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">Product</span> <span class="token function">getProductDetails</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token keyword">long</span> productId<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Getting Product and Price Details with Product Id {}&quot;</span><span class="token punctuation">,</span> productId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Product</span> product <span class="token operator">=</span> productRepository<span class="token punctuation">.</span><span class="token function">getProduct</span><span class="token punctuation">(</span>productId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        product<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span>priceClient<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span>productId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> product<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们将在 <em>ProductRepository</em> 中实现 <em>getProduct</em> 方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Product</span> <span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token class-name">Long</span> productId<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Getting Product from Product Repo With Product Id {}&quot;</span><span class="token punctuation">,</span> productId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>productMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>productId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Product Not Found for Product Id {}&quot;</span><span class="token punctuation">,</span> productId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ProductNotFoundException</span><span class="token punctuation">(</span><span class="token string">&quot;Product Not Found&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> productMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>productId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，让我们在 <em>PriceClient</em> 中实现 <em>getPrice</em> 方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Price</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token keyword">long</span> productId<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Fetching Price Details With Product Id {}&quot;</span><span class="token punctuation">,</span> productId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%s/price/%d&quot;</span><span class="token punctuation">,</span> baseUrl<span class="token punctuation">,</span> productId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">ResponseEntity</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Price</span><span class="token punctuation">&gt;</span></span>` price <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForEntity</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token class-name">Price</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> price<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-使用-opentelemetry-配置-spring-boot" tabindex="-1"><a class="header-anchor" href="#_4-使用-opentelemetry-配置-spring-boot"><span>4. 使用 OpenTelemetry 配置 Spring Boot</span></a></h2><p>OpenTelemetry 提供了一个名为 Otel collector 的收集器，用于处理和导出遥测数据到任何可观测性后端，如 Jaeger、Prometheus 等。</p><p>可以使用一些 Spring Sleuth 配置将追踪导出到 Otel collector。</p><h3 id="_4-1-配置-spring-sleuth" tabindex="-1"><a class="header-anchor" href="#_4-1-配置-spring-sleuth"><span>4.1. 配置 Spring Sleuth</span></a></h3><p>我们需要使用 Otel 端点配置应用程序以发送遥测数据。</p><p>让我们在 <em>application.properties</em> 中包括 Spring Sleuth 配置：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.sleuth.otel.config.trace-id-ratio-based</span><span class="token punctuation">=</span><span class="token value attr-value">1.0</span>\n<span class="token key attr-name">spring.sleuth.otel.exporter.otlp.endpoint</span><span class="token punctuation">=</span><span class="token value attr-value">http://collector:4317</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><em>trace-id-ratio-based</em></strong> 属性定义了收集的跨度的采样比例。值 <em>1.0</em> 表示将导出所有跨度。</p><h3 id="_4-2-配置-opentelemetry-collector" tabindex="-1"><a class="header-anchor" href="#_4-2-配置-opentelemetry-collector"><span>4.2. 配置 OpenTelemetry Collector</span></a></h3><p>Otel collector 是 OpenTelemetry 追踪的引擎。它由接收器、处理器和导出器组件组成。还有一个可选的扩展组件，用于健康检查、服务发现或数据转发。扩展组件不涉及处理遥测数据。</p><p>为了快速启动 Otel 服务，我们将使用托管在端口 <em>14250</em> 的 Jaeger 后端端点。</p><p>让我们使用 Otel 管道阶段配置 <em>otel-config.yml</em>：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">receivers</span><span class="token punctuation">:</span>\n  <span class="token key atrule">otlp</span><span class="token punctuation">:</span>\n    <span class="token key atrule">protocols</span><span class="token punctuation">:</span>\n      <span class="token key atrule">grpc</span><span class="token punctuation">:</span>\n      <span class="token key atrule">http</span><span class="token punctuation">:</span>\n\n<span class="token key atrule">processors</span><span class="token punctuation">:</span>\n  <span class="token key atrule">batch</span><span class="token punctuation">:</span>\n\n<span class="token key atrule">exporters</span><span class="token punctuation">:</span>\n  <span class="token key atrule">logging</span><span class="token punctuation">:</span>\n    <span class="token key atrule">loglevel</span><span class="token punctuation">:</span> debug\n  <span class="token key atrule">jaeger</span><span class="token punctuation">:</span>\n    <span class="token key atrule">endpoint</span><span class="token punctuation">:</span> jaeger<span class="token punctuation">-</span>service<span class="token punctuation">:</span><span class="token number">14250</span>\n    <span class="token key atrule">tls</span><span class="token punctuation">:</span>\n      <span class="token key atrule">insecure</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n\n<span class="token key atrule">service</span><span class="token punctuation">:</span>\n  <span class="token key atrule">pipelines</span><span class="token punctuation">:</span>\n    <span class="token key atrule">traces</span><span class="token punctuation">:</span>\n      <span class="token key atrule">receivers</span><span class="token punctuation">:</span>  <span class="token punctuation">[</span> otlp <span class="token punctuation">]</span>\n      <span class="token key atrule">processors</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> batch <span class="token punctuation">]</span>\n      <span class="token key atrule">exporters</span><span class="token punctuation">:</span>  <span class="token punctuation">[</span> logging<span class="token punctuation">,</span> jaeger <span class="token punctuation">]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们应该注意到，上述 <em>processors</em> 配置是可选的，默认情况下不启用。<em>processors_batch</em> 选项有助于更好地压缩数据并减少传输数据所需的出站连接数量。</p><p>我们还应该注意到，接收器配置了 <em>GRPC</em> 和 <em>HTTP</em> 协议。</p><h2 id="_5-运行应用程序" tabindex="-1"><a class="header-anchor" href="#_5-运行应用程序"><span>5. 运行应用程序</span></a></h2><p>我们现在将配置并运行整个设置，应用程序和 Otel collector。</p><h3 id="_5-1-在应用程序中配置-dockerfile" tabindex="-1"><a class="header-anchor" href="#_5-1-在应用程序中配置-dockerfile"><span>5.1. 在应用程序中配置 Dockerfile</span></a></h3><p>让我们为我们的 ProductService 实现 Dockerfile：</p><div class="language-Dockerfile line-numbers-mode" data-ext="Dockerfile" data-title="Dockerfile"><pre class="language-Dockerfile"><code>FROM adoptopenjdk/openjdk11:alpine\nCOPY target/spring-cloud-open-telemetry1-1.0.0-SNAPSHOT.jar spring-cloud-open-telemetry.jar\nEXPOSE 8080\nENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;/spring-cloud-open-telemetry.jar&quot;]\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们应该注意到，PriceService 的 Dockerfile 本质上是相同的。</p><h3 id="_5-2-使用-docker-compose-配置服务" tabindex="-1"><a class="header-anchor" href="#_5-2-使用-docker-compose-配置服务"><span>5.2. 使用 Docker Compose 配置服务</span></a></h3><p>现在，让我们使用整个设置配置 docker-compose.yml：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;4.0&quot;</span>\n\n<span class="token key atrule">services</span><span class="token punctuation">:</span>\n  <span class="token key atrule">product-service</span><span class="token punctuation">:</span>\n    <span class="token key atrule">build</span><span class="token punctuation">:</span> spring<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>open<span class="token punctuation">-</span>telemetry1/\n    <span class="token key atrule">ports</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> <span class="token string">&quot;8080:8080&quot;</span>\n\n  <span class="token key atrule">price-service</span><span class="token punctuation">:</span>\n    <span class="token key atrule">build</span><span class="token punctuation">:</span> spring<span class="token punctuation">-</span>cloud<span class="token punctuation">-</span>open<span class="token punctuation">-</span>telemetry2/\n    <span class="token key atrule">ports</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> <span class="token string">&quot;8081&quot;</span>\n\n  <span class="token key atrule">collector</span><span class="token punctuation">:</span>\n    <span class="token key atrule">image</span><span class="token punctuation">:</span> otel/opentelemetry<span class="token punctuation">-</span>collector<span class="token punctuation">:</span>0.72.0\n    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;--config=/etc/otel-collector-config.yml&quot;</span><span class="token punctuation">]</span>\n    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> ./otel<span class="token punctuation">-</span>config.yml<span class="token punctuation">:</span>/etc/otel<span class="token punctuation">-</span>collector<span class="token punctuation">-</span>config.yml\n    <span class="token key atrule">ports</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> <span class="token string">&quot;4317:4317&quot;</span>\n    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> jaeger<span class="token punctuation">-</span>service\n\n  <span class="token key atrule">jaeger-service</span><span class="token punctuation">:</span>\n    <span class="token key atrule">image</span><span class="token punctuation">:</span> jaegertracing/all<span class="token punctuation">-</span>in<span class="token punctuation">-</span>one<span class="token punctuation">:</span>latest\n    <span class="token key atrule">ports</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> <span class="token string">&quot;16686:16686&quot;</span>\n      <span class="token punctuation">-</span> <span class="token string">&quot;14250&quot;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，让我们通过 docker-compose 运行服务：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker-compose</span> up\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-3-验证运行中的-docker-服务" tabindex="-1"><a class="header-anchor" href="#_5-3-验证运行中的-docker-服务"><span>5.3. 验证运行中的 Docker 服务</span></a></h3><p>除了 productService 和 priceService，我们还在整个设置中添加了 collector-service 和 jaeger-service。上述 productService 和 priceService 使用 collector 服务端口 4317 发送追踪数据。collector 服务又依赖于 jaeger-service 端点将追踪数据导出到 Jaeger 后端。</p><p>对于 jaeger-service，我们使用的是 jaegertracing/all-in-one 镜像，它包括其后端和 UI 组件。</p><p>让我们使用 docker container 命令验证服务的状态：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> container <span class="token function">ls</span> <span class="token parameter variable">--format</span> <span class="token string">&quot;table {{.ID}}<span class="token entity" title="\\t">\\t</span>{{.Names}}<span class="token entity" title="\\t">\\t</span>{{.Status}}<span class="token entity" title="\\t">\\t</span>{{.Ports}}&quot;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-plaintext line-numbers-mode" data-ext="plaintext" data-title="plaintext"><pre class="language-plaintext"><code>CONTAINER ID   NAMES                                           STATUS         PORTS\n7b874b9ee2e6   spring-cloud-open-telemetry-collector-1         Up 5 minutes   0.0.0.0:4317-&gt;4317/tcp, 55678-55679/tcp\n29ed09779f98   spring-cloud-open-telemetry-jaeger-service-1    Up 5 minutes   5775/udp, 5778/tcp, 6831-6832/udp, 14268/tcp, 0.0.0.0:16686-&gt;16686/tcp, 0.0.0.0:61686-&gt;14250/tcp\n75bfbf6d3551   spring-cloud-open-telemetry-product-service-1   Up 5 minutes   0.0.0.0:8080-&gt;8080/tcp, 8081/tcp\nd2ca1457b5ab   spring-cloud-open-telemetry-price-service-1     Up 5 minutes   0.0.0.0:61687-&gt;8081/tcp\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-在收集器中监控追踪" tabindex="-1"><a class="header-anchor" href="#_6-在收集器中监控追踪"><span>6. 在收集器中监控追踪</span></a></h2><p>像 Jaeger 这样的遥测收集器工具提供了前端应用程序来监控请求。我们可以实时查看请求追踪，或者稍后查看。</p><h3 id="_6-1-监控请求成功时的追踪" tabindex="-1"><a class="header-anchor" href="#_6-1-监控请求成功时的追踪"><span>6.1. 监控请求成功时的追踪</span></a></h3><p>首先，让我们调用 Product 端点 http://localhost:8080/product/100003。</p><p>请求将产生一些日志：</p><div class="language-plaintext line-numbers-mode" data-ext="plaintext" data-title="plaintext"><pre class="language-plaintext"><code>spring-cloud-open-telemetry-price-service-1 | 2023-01-06 19:03:03.985 INFO [price-service,825dad4a4a308e6f7c97171daf29041a,346a0590f545bbcf] 1 --- [nio-8081-exec-1] c.b.opentelemetry.PriceRepository : Getting Price from Price With Product Id 100003\nspring-cloud-open-telemetry-product-service-1 | 2023-01-06 19:03:04.432 INFO [,825dad4a4a308e6f7c97171daf29041a,fb9c54565b028eb8] 1 --- [nio-8080-exec-1] c.b.opentelemetry.ProductRepository : Getting Product from Product Repo With Product Id 100003\nspring-cloud-open-telemetry-collector-1 | Trace ID : 825dad4a4a308e6f7c97171daf29041a\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Spring Sleuth 将自动配置 ProductService 以将 <em>trace id</em> 附加到当前线程，并作为 HTTP <em>Header</em> 附加到下游 API 调用。PriceService 也将自动在线程上下文和日志中包含相同的 <em>trace id</em>。Otel 服务将使用此 trace id 来确定跨服务的请求流。</p><p>正如预期的那样，上述 <em>trace id ….f29041a</em> 在 PriceService 和 ProductService 日志中是相同的。</p><p>让我们在 Jaeger UI 的 16686 端口上可视化整个请求跨度时间线：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2023/02/Jaegar-UI-Success-Trace.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>上述显示了请求流程的时间线，并包含表示请求的元数据。</p><h3 id="_6-2-监控请求失败时的追踪" tabindex="-1"><a class="header-anchor" href="#_6-2-监控请求失败时的追踪"><span>6.2. 监控请求失败时的追踪</span></a></h3><p>想象一下，当下游服务抛出异常导致请求失败的场景。</p><p>同样，我们将利用相同的 UI 分析根本原因。</p><p>让我们通过调用 Product 端点 /product/100005 来测试上述场景，其中 <em>Product</em> 在下游应用程序中不存在。</p><p>现在，让我们可视化失败请求的跨度：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2023/03/Jaegar-UI-Error-Trace-e1677333985665.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>如上所见，我们可以追溯到请求的最终 API 调用，错误就起源于那里。</p><h2 id="_7-结论" tabindex="-1"><a class="header-anchor" href="#_7-结论"><span>7. 结论</span></a></h2><p>在本文中，我们学习了 OpenTelemetry 如何帮助标准化微服务的可观测性模式。</p><p>我们还看到了如何通过示例配置 Spring Boot 应用程序使用 OpenTelemetry。最后，在收集器中追踪了 API 请求流程。</p><p>像往常一样，示例代码可以在 GitHub 上找到。</p><p><img src="https://www.baeldung.com/wp-content/themes/baeldung/icon/logo.svg" alt="img" loading="lazy"><img src="https://secure.gravatar.com/avatar/dc417739e22ae675b0e1f7012bbddaa5?s=50&amp;r=g" alt="img" loading="lazy"><img src="https://secure.gravatar.com/avatar/6c3babf3d6ea5d49c2bc4e7957870d75?s=50&amp;r=g" alt="img" loading="lazy"><img src="https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png" alt="img" loading="lazy"></p><p>OK</p>',95),o=[p];function c(l,i){return a(),s("div",null,o)}const d=n(e,[["render",c],["__file","2024-07-09-OpenTelemetry Setup in Spring Boot Application.html.vue"]]),k=JSON.parse('{"path":"/posts/baeldung/2024-07-09/2024-07-09-OpenTelemetry%20Setup%20in%20Spring%20Boot%20Application.html","title":"Spring Boot 应用中的 OpenTelemetry 设置 | Baeldung","lang":"zh-CN","frontmatter":{"date":"2023-02-01T00:00:00.000Z","category":["Spring Boot","OpenTelemetry"],"tag":["Spring Boot","OpenTelemetry","微服务","监控","追踪"],"head":[["meta",{"name":"keywords","content":"Spring Boot, OpenTelemetry, 微服务监控, 分布式追踪"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-09/2024-07-09-OpenTelemetry%20Setup%20in%20Spring%20Boot%20Application.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Spring Boot 应用中的 OpenTelemetry 设置 | Baeldung"}],["meta",{"property":"og:description","content":"Spring Boot 应用中的 OpenTelemetry 设置 | Baeldung 1. 概述 在分布式系统中，提供请求服务时偶尔出现错误是意料之中的。一个集中的可观测性平台通过捕获应用程序的追踪/日志，并提供一个接口来查询特定请求，从而提供帮助。OpenTelemetry 通过标准化捕获和导出遥测数据的过程来提供帮助。 在本教程中，我们将学习如..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.baeldung.com/wp-content/uploads/2023/02/Jaegar-UI-Success-Trace.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-09T18:02:50.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Spring Boot"}],["meta",{"property":"article:tag","content":"OpenTelemetry"}],["meta",{"property":"article:tag","content":"微服务"}],["meta",{"property":"article:tag","content":"监控"}],["meta",{"property":"article:tag","content":"追踪"}],["meta",{"property":"article:published_time","content":"2023-02-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-09T18:02:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring Boot 应用中的 OpenTelemetry 设置 | Baeldung\\",\\"image\\":[\\"https://www.baeldung.com/wp-content/uploads/2023/02/Jaegar-UI-Success-Trace.png\\",\\"https://www.baeldung.com/wp-content/uploads/2023/03/Jaegar-UI-Error-Trace-e1677333985665.png\\",\\"https://www.baeldung.com/wp-content/themes/baeldung/icon/logo.svg\\",\\"https://secure.gravatar.com/avatar/dc417739e22ae675b0e1f7012bbddaa5?s=50&r=g\\",\\"https://secure.gravatar.com/avatar/6c3babf3d6ea5d49c2bc4e7957870d75?s=50&r=g\\",\\"https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png\\"],\\"datePublished\\":\\"2023-02-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-09T18:02:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Spring Boot 应用中的 OpenTelemetry 设置 | Baeldung 1. 概述 在分布式系统中，提供请求服务时偶尔出现错误是意料之中的。一个集中的可观测性平台通过捕获应用程序的追踪/日志，并提供一个接口来查询特定请求，从而提供帮助。OpenTelemetry 通过标准化捕获和导出遥测数据的过程来提供帮助。 在本教程中，我们将学习如..."},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. OpenTelemetry 简介","slug":"_2-opentelemetry-简介","link":"#_2-opentelemetry-简介","children":[]},{"level":2,"title":"3. 示例应用程序","slug":"_3-示例应用程序","link":"#_3-示例应用程序","children":[{"level":3,"title":"3.1. Maven 依赖","slug":"_3-1-maven-依赖","link":"#_3-1-maven-依赖","children":[]},{"level":3,"title":"3.2. 实现下游应用程序","slug":"_3-2-实现下游应用程序","link":"#_3-2-实现下游应用程序","children":[]},{"level":3,"title":"3.3. 实现上游应用程序","slug":"_3-3-实现上游应用程序","link":"#_3-3-实现上游应用程序","children":[]}]},{"level":2,"title":"4. 使用 OpenTelemetry 配置 Spring Boot","slug":"_4-使用-opentelemetry-配置-spring-boot","link":"#_4-使用-opentelemetry-配置-spring-boot","children":[{"level":3,"title":"4.1. 配置 Spring Sleuth","slug":"_4-1-配置-spring-sleuth","link":"#_4-1-配置-spring-sleuth","children":[]},{"level":3,"title":"4.2. 配置 OpenTelemetry Collector","slug":"_4-2-配置-opentelemetry-collector","link":"#_4-2-配置-opentelemetry-collector","children":[]}]},{"level":2,"title":"5. 运行应用程序","slug":"_5-运行应用程序","link":"#_5-运行应用程序","children":[{"level":3,"title":"5.1. 在应用程序中配置 Dockerfile","slug":"_5-1-在应用程序中配置-dockerfile","link":"#_5-1-在应用程序中配置-dockerfile","children":[]},{"level":3,"title":"5.2. 使用 Docker Compose 配置服务","slug":"_5-2-使用-docker-compose-配置服务","link":"#_5-2-使用-docker-compose-配置服务","children":[]},{"level":3,"title":"5.3. 验证运行中的 Docker 服务","slug":"_5-3-验证运行中的-docker-服务","link":"#_5-3-验证运行中的-docker-服务","children":[]}]},{"level":2,"title":"6. 在收集器中监控追踪","slug":"_6-在收集器中监控追踪","link":"#_6-在收集器中监控追踪","children":[{"level":3,"title":"6.1. 监控请求成功时的追踪","slug":"_6-1-监控请求成功时的追踪","link":"#_6-1-监控请求成功时的追踪","children":[]},{"level":3,"title":"6.2. 监控请求失败时的追踪","slug":"_6-2-监控请求失败时的追踪","link":"#_6-2-监控请求失败时的追踪","children":[]}]},{"level":2,"title":"7. 结论","slug":"_7-结论","link":"#_7-结论","children":[]}],"git":{"createdTime":1720548170000,"updatedTime":1720548170000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":8.16,"words":2447},"filePathRelative":"posts/baeldung/2024-07-09/2024-07-09-OpenTelemetry Setup in Spring Boot Application.md","localizedDate":"2023年2月1日","excerpt":"<hr>\\n<h1>Spring Boot 应用中的 OpenTelemetry 设置 | Baeldung</h1>\\n<h2>1. 概述</h2>\\n<p>在分布式系统中，提供请求服务时偶尔出现错误是意料之中的。一个集中的可观测性平台通过捕获应用程序的追踪/日志，并提供一个接口来查询特定请求，从而提供帮助。OpenTelemetry 通过标准化捕获和导出遥测数据的过程来提供帮助。</p>\\n<p>在本教程中，我们将学习如何将 Spring Boot 应用程序与 OpenTelemetry 集成。我们还将配置 OpenTelemetry 捕获应用程序追踪并将它们发送到中央系统以监控请求。</p>\\n<p>首先，让我们了解一些基本概念。</p>","autoDesc":true}');export{d as comp,k as data};
