import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-0nXvcScy.js";const e={},o=t(`<hr><h1 id="java中将long转换为int类型" tabindex="-1"><a class="header-anchor" href="#java中将long转换为int类型"><span>Java中将long转换为int类型</span></a></h1><p>在本教程中，我们将看到如何在Java中将<code>long</code>类型的值转换为<code>int</code>类型。在我们开始编码之前，我们需要指出一些关于这个数据类型的细节。</p><p>首先，在Java中，<code>long</code>值由有符号的64位数字表示。另一方面，<code>int</code>值由有符号的32位数字表示。因此，将一个更高数据类型的转换为一个较低数据类型称为窄化类型转换。这些转换的结果，当<code>long</code>值大于<code>Integer.MAX_VALUE</code>和<code>Integer.MIN_VALUE</code>时，一些位将会丢失。</p><p>此外，我们将展示每种转换变体，对于一个等于<code>Integer.MAX_VALUE</code>加一的<code>long</code>值是如何工作的。</p><h3 id="_2-1-强制类型转换" tabindex="-1"><a class="header-anchor" href="#_2-1-强制类型转换"><span>2.1. 强制类型转换</span></a></h3><p>首先，在Java中，强制类型转换是类型转换的最常见方式——它很简单直接：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">longToIntCast</span><span class="token punctuation">(</span><span class="token keyword">long</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> number<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-java-8" tabindex="-1"><a class="header-anchor" href="#_2-2-java-8"><span>2.2. Java 8</span></a></h3><p>自Java 8以来，我们可以使用另外两种方式进行类型转换：使用<code>Math</code>包或使用lambda函数。对于<code>Math</code>包，我们可以使用<code>toIntExact</code>方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">longToIntJavaWithMath</span><span class="token punctuation">(</span><span class="token keyword">long</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">toIntExact</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-包装类" tabindex="-1"><a class="header-anchor" href="#_2-3-包装类"><span>2.3. 包装类</span></a></h3><p>另一方面，我们可以使用包装类<code>Long</code>来获取<code>int</code>值：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">longToIntBoxingValues</span><span class="token punctuation">(</span><span class="token keyword">long</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-使用bigdecimal" tabindex="-1"><a class="header-anchor" href="#_2-4-使用bigdecimal"><span>2.4. 使用BigDecimal</span></a></h3><p>此外，我们可以使用<code>BigDecimal</code>类来完成这种转换：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">longToIntWithBigDecimal</span><span class="token punctuation">(</span><span class="token keyword">long</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValueExact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5-使用guava" tabindex="-1"><a class="header-anchor" href="#_2-5-使用guava"><span>2.5. 使用Guava</span></a></h3><p>接下来，我们将展示使用Google Guava的<code>Ints</code>类进行类型转换：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">longToIntGuava</span><span class="token punctuation">(</span><span class="token keyword">long</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Ints</span><span class="token punctuation">.</span><span class="token function">checkedCast</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除此之外，Google Guava的<code>Ints</code>类还提供了一个<code>saturatedCast</code>方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">longToIntGuavaSaturated</span><span class="token punctuation">(</span><span class="token keyword">long</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Ints</span><span class="token punctuation">.</span><span class="token function">saturatedCast</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-6-整数上限和下限" tabindex="-1"><a class="header-anchor" href="#_2-6-整数上限和下限"><span>2.6. 整数上限和下限</span></a></h3><p>最后，我们需要考虑到整数值有一个上限和下限。这些限制由<code>Integer.MAX_VALUE</code>和<code>Integer.MIN_VALUE</code>定义。对于那些超出这些限制的值，不同方法的结果各不相同。</p><p>在下一个代码片段中，我们将测试当整数值无法容纳长整数值的情况：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">longToIntSafeCast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> max <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">+</span> <span class="token number">10L</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> expected <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2147483639</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> <span class="token function">longToIntCast</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> <span class="token function">longToIntJavaWithLambda</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> <span class="token function">longToIntBoxingValues</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用直接强制转换，lambda或使用装箱值会产生一个负值。在这些情况下，长整数值大于<code>Integer.MAX_VALUE</code>，这就是为什么结果值用一个负数包装。如果长整数值小于<code>Integer.MIN_VALUE</code>，则结果值是一个正数。</p><p>另一方面，本文中描述的三种方法可能会抛出不同类型的异常：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">longToIntIntegerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> max <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">+</span> <span class="token number">10L</span><span class="token punctuation">;</span>
    <span class="token function">assertThrows</span><span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">ConvertLongToInt</span><span class="token punctuation">.</span><span class="token function">longToIntWithBigDecimal</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertThrows</span><span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">ConvertLongToInt</span><span class="token punctuation">.</span><span class="token function">longToIntJavaWithMath</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertThrows</span><span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">ConvertLongToInt</span><span class="token punctuation">.</span><span class="token function">longToIntGuava</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于前两个，抛出了<code>ArithmeticException</code>。对于后者，抛出了<code>IllegalArgumentException</code>。在这种情况下，<code>Ints.checkedCast</code>检查整数是否超出范围。</p><p>最后，来自Guava的<code>saturatedCast</code>方法，首先检查整数限制，并在传递的数字大于或低于整数上下限时返回限制值：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">longToIntGuavaSaturated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> max <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">+</span> <span class="token number">10L</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> expected <span class="token operator">=</span> <span class="token number">2147483647</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> <span class="token class-name">ConvertLongToInt</span><span class="token punctuation">.</span><span class="token function">longToIntGuavaSaturated</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-结论" tabindex="-1"><a class="header-anchor" href="#_3-结论"><span>3. 结论</span></a></h2><p>在本文中，我们通过一些示例了解了如何在Java中将<code>long</code>转换为<code>int</code>类型。使用原生Java强制转换和一些库。</p><p>如往常一样，本文中使用的所有代码片段都可以在GitHub上找到。</p>`,35),p=[o];function c(l,i){return s(),a("div",null,p)}const r=n(e,[["render",c],["__file","2024-07-20-Convert long to int Type in Java.html.vue"]]),k=JSON.parse('{"path":"/posts/baeldung/2024-07-20/2024-07-20-Convert%20long%20to%20int%20Type%20in%20Java.html","title":"Java中将long转换为int类型","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","Programming"],"tag":["Java","Convert","Long to Int"],"head":[["meta",{"name":"keywords","content":"Java, Convert, Long to Int, Type Casting"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-20/2024-07-20-Convert%20long%20to%20int%20Type%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Java中将long转换为int类型"}],["meta",{"property":"og:description","content":"Java中将long转换为int类型 在本教程中，我们将看到如何在Java中将long类型的值转换为int类型。在我们开始编码之前，我们需要指出一些关于这个数据类型的细节。 首先，在Java中，long值由有符号的64位数字表示。另一方面，int值由有符号的32位数字表示。因此，将一个更高数据类型的转换为一个较低数据类型称为窄化类型转换。这些转换的结果..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-20T19:37:42.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Convert"}],["meta",{"property":"article:tag","content":"Long to Int"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-20T19:37:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java中将long转换为int类型\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-20T19:37:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Java中将long转换为int类型 在本教程中，我们将看到如何在Java中将long类型的值转换为int类型。在我们开始编码之前，我们需要指出一些关于这个数据类型的细节。 首先，在Java中，long值由有符号的64位数字表示。另一方面，int值由有符号的32位数字表示。因此，将一个更高数据类型的转换为一个较低数据类型称为窄化类型转换。这些转换的结果..."},"headers":[{"level":3,"title":"2.1. 强制类型转换","slug":"_2-1-强制类型转换","link":"#_2-1-强制类型转换","children":[]},{"level":3,"title":"2.2. Java 8","slug":"_2-2-java-8","link":"#_2-2-java-8","children":[]},{"level":3,"title":"2.3. 包装类","slug":"_2-3-包装类","link":"#_2-3-包装类","children":[]},{"level":3,"title":"2.4. 使用BigDecimal","slug":"_2-4-使用bigdecimal","link":"#_2-4-使用bigdecimal","children":[]},{"level":3,"title":"2.5. 使用Guava","slug":"_2-5-使用guava","link":"#_2-5-使用guava","children":[]},{"level":3,"title":"2.6. 整数上限和下限","slug":"_2-6-整数上限和下限","link":"#_2-6-整数上限和下限","children":[]},{"level":2,"title":"3. 结论","slug":"_3-结论","link":"#_3-结论","children":[]}],"git":{"createdTime":1721504262000,"updatedTime":1721504262000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":2.76,"words":828},"filePathRelative":"posts/baeldung/2024-07-20/2024-07-20-Convert long to int Type in Java.md","localizedDate":"2022年4月1日","excerpt":"<hr>\\n<h1>Java中将long转换为int类型</h1>\\n<p>在本教程中，我们将看到如何在Java中将<code>long</code>类型的值转换为<code>int</code>类型。在我们开始编码之前，我们需要指出一些关于这个数据类型的细节。</p>\\n<p>首先，在Java中，<code>long</code>值由有符号的64位数字表示。另一方面，<code>int</code>值由有符号的32位数字表示。因此，将一个更高数据类型的转换为一个较低数据类型称为窄化类型转换。这些转换的结果，当<code>long</code>值大于<code>Integer.MAX_VALUE</code>和<code>Integer.MIN_VALUE</code>时，一些位将会丢失。</p>","autoDesc":true}');export{r as comp,k as data};
