import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as a,a as n}from"./app-C5QtKXnb.js";const s={},i=n(`<h1 id="在postman中为每个请求添加头部" tabindex="-1"><a class="header-anchor" href="#在postman中为每个请求添加头部"><span>在Postman中为每个请求添加头部</span></a></h1><p>在本教程中，我们将学习如何使用预请求脚本在Postman中为每个请求添加HTTP头部。</p><p>在深入实现之前，让我们回顾一下HTTP头部是什么。</p><p>在HTTP请求中，头部是提供客户端和服务器HTTP通信之间附加信息的字段。HTTP头部具有键值对格式，并且可以附加到请求和响应上。</p><p>授权、内容类型和cookie是通过HTTP头部提供的元数据的示例。</p><p>例如：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Authorization: Bearer YmFyIiwiaWF0IjoxN;
Content-Type: application/json;
Cookie: foo=bar;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>我们将使用Postman的预请求脚本功能通过执行JavaScript代码来设置头部。</strong></p><h3 id="_3-运行服务器" tabindex="-1"><a class="header-anchor" href="#_3-运行服务器"><span>3. 运行服务器</span></a></h3><p>在本教程中，我们将使用之前的Baeldung项目 <em>spring-boot-json</em> 进行演示。该应用程序包含一个单一的控制器 <em>StudentController</em>，它接受对 <em>Student</em> Java模型的CRUD操作。</p><p>我们必须使用Maven <em>install</em> 命令安装所有依赖项，然后运行 <em>SpringBootStudentsApplication</em> 文件，这将在端口8080上启动Tomcat服务器。</p><p>使用Postman，我们可以通过发送GET请求到以下端点并期望JSON响应来确认服务器正在运行：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>http://localhost:8080/students/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如： ![img]</p><p>现在我们已经验证了服务器正在运行，<strong>我们可以在Postman发送的请求中通过程序添加HTTP头部。</strong></p><p>要在Postman中使用预请求脚本为HTTP请求添加头部，我们需要访问Postman JavaScript API对象提供的请求数据，该对象名为 <em>pm</em>。</p><p><strong>我们可以通过调用 <em>pm</em> <em>.request</em> 对象来对请求元数据执行操作；因此，我们可以在发送请求之前添加、修改和删除HTTP头部。</strong></p><p>如前所述，HTTP头部具有键值对格式。Postman JavaScript API在添加请求头部时期望提供键和值。</p><p>我们可以使用 <em>name: value</em> 格式作为字符串来添加头部：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>pm.request.headers.add(&quot;foo: bar&quot;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们也可以按如下方式传递具有 <em>key</em> 和 <em>value</em> 属性的JavaScript对象：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>pm.request.headers.add({
  key: &quot;foo&quot;,
  value: &quot;bar&quot;
});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>然而，根据Postman文档，我们可以向头部对象添加额外的属性，如 <em>id</em>、<em>name</em> 和 <em>disabled</em>，这将在Postman JavaScript运行时环境中扩展功能。</strong></p><p>现在，让我们看看实际操作。首先，我们将向个别Postman请求添加脚本；然后，我们将为整个集合添加头部。</p><h3 id="_4-1-个别请求" tabindex="-1"><a class="header-anchor" href="#_4-1-个别请求"><span>4.1. 个别请求</span></a></h3><p>我们可以通过使用预请求脚本在Postman中为个别请求添加头部。我们可以参照上一节所示的实现；然而，我们将专注于第二个实现，其中我们传递一个JavaScript对象，以便我们可以添加扩展功能的额外属性。</p><p>在Postman窗口的预请求脚本中，我们添加以下脚本，指示客户端期望JSON类型的响应：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>pm.request.headers.add({
    key: &quot;Accept&quot;,
    value: &quot;application/json&quot;
});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Postman中，请求如下所示：</p><p>![img]</p><p>现在，我们通过点击 <em>Send</em> 按钮发送GET请求。一旦请求发送，我们必须打开Postman控制台（通常通过点击左下角的 <em>console</em> 按钮）并展开我们最近的请求，以查看 <em>Request Headers</em> 部分：</p><p>![img]</p><p>在控制台中，我们可以看到 <em>Accept: “application/json”</em> 头部，表明它已成功地通过脚本附加到GET请求上。此外，我们可以检查响应的正文和状态码，以确认请求是否成功。</p><p>为了进一步验证预请求脚本，我们可以添加以下头部，并期望一个空响应以及状态码 <em>406 Not Acceptable</em>：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>pm.request.headers.add({
    key: &quot;Accept&quot;,
    value: &quot;image/*&quot;
});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-集合" tabindex="-1"><a class="header-anchor" href="#_4-2-集合"><span>4.2. 集合</span></a></h3><p><strong>同样，我们可以使用预请求脚本为整个集合添加HTTP头部。</strong></p><p>首先，我们将创建一个Student API Collection来测试我们的API端点，并确认每个请求都包含我们用预请求脚本添加的头部。</p><p>在Postman中，我们可以通过在左侧的 <em>Collections</em> 菜单选项中点击加号按钮来分组Web API端点，并创建一个名为 <em>Student API Collection</em> 的新集合：</p><p>![img]</p><p>请注意，我们还向我们的集合中添加了两个端点：<em>http://localhost:8080/students/</em> 和 <em>http://localhost:8080/students/2</em>。</p><p>与个别请求类似，我们可以通过选择左侧菜单中的 <em>Student API Collection</em> 并转到 <em>Pre-request Script</em> 标签来向我们的集合添加预请求脚本。现在，我们可以添加我们的脚本：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>pm.request.headers.add({
    key: &quot;Accept&quot;,
    value: &quot;application/json&quot;
});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Postman中，<em>Student API Collection</em> 应该如下所示：</p><p>![img]</p><p>在运行集合之前，我们必须确保我们移除了之前在本节中添加的预请求脚本。否则，HTTP头部将被请求脚本中指定的那些覆盖，集合级别上的那些将被丢弃。</p><p>现在，我们准备运行我们的集合。点击集合栏上的 <em>Run</em> 按钮，<em>Runner</em> 标签将自动打开：</p><p>![img]</p><p><em>Runner</em> 标签允许我们对集合中的请求进行排序，选择或取消选择集合中的请求，并指定其他设置。点击 <em>Run Student API Collection</em> 来执行我们的请求。</p><p>一旦整个集合完成，我们可以看到执行顺序和测试结果，如果有的话。然而，我们要确保我们的HTTP头部是我们请求的一部分，我们可以通过打开Postman控制台来确认：</p><p>再次，我们可以在控制台中展开我们请求的 <em>Request Headers</em> 部分，并确认我们的预请求脚本添加了 <em>Accept</em> 头部。此外，通过查看状态码和响应正文，您可以确认请求是否成功。</p><h2 id="_5-结论" tabindex="-1"><a class="header-anchor" href="#_5-结论"><span>5. 结论</span></a></h2><p>在本文中，我们使用Postman的预请求脚本功能为每个请求添加了HTTP头部。首先，我们回顾了HTTP头部是什么；然后，我们向个别请求和集合都添加了预请求脚本以添加头部。请参阅Postman文档以进一步探索预请求脚本和其他功能。</p><p>本教程中创建的集合可在GitHub上获得。</p>`,54),o=[i];function d(r,p){return a(),t("div",null,o)}const c=e(s,[["render",d],["__file","2024-07-19-Add Header to Every Request in Postman.html.vue"]]),u=JSON.parse('{"path":"/posts/baeldung/2024-07-19/2024-07-19-Add%20Header%20to%20Every%20Request%20in%20Postman.html","title":"在Postman中为每个请求添加头部","lang":"zh-CN","frontmatter":{"date":"2022-05-01T00:00:00.000Z","category":["Postman","HTTP"],"tag":["Postman","HTTP headers","pre-request scripts"],"head":[["meta",{"name":"keywords","content":"Postman, HTTP headers, pre-request scripts, JavaScript"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-19/2024-07-19-Add%20Header%20to%20Every%20Request%20in%20Postman.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"在Postman中为每个请求添加头部"}],["meta",{"property":"og:description","content":"在Postman中为每个请求添加头部 在本教程中，我们将学习如何使用预请求脚本在Postman中为每个请求添加HTTP头部。 在深入实现之前，让我们回顾一下HTTP头部是什么。 在HTTP请求中，头部是提供客户端和服务器HTTP通信之间附加信息的字段。HTTP头部具有键值对格式，并且可以附加到请求和响应上。 授权、内容类型和cookie是通过HTTP头..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-19T04:10:42.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Postman"}],["meta",{"property":"article:tag","content":"HTTP headers"}],["meta",{"property":"article:tag","content":"pre-request scripts"}],["meta",{"property":"article:published_time","content":"2022-05-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-19T04:10:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"在Postman中为每个请求添加头部\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-05-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-19T04:10:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"在Postman中为每个请求添加头部 在本教程中，我们将学习如何使用预请求脚本在Postman中为每个请求添加HTTP头部。 在深入实现之前，让我们回顾一下HTTP头部是什么。 在HTTP请求中，头部是提供客户端和服务器HTTP通信之间附加信息的字段。HTTP头部具有键值对格式，并且可以附加到请求和响应上。 授权、内容类型和cookie是通过HTTP头..."},"headers":[{"level":3,"title":"3. 运行服务器","slug":"_3-运行服务器","link":"#_3-运行服务器","children":[]},{"level":3,"title":"4.1. 个别请求","slug":"_4-1-个别请求","link":"#_4-1-个别请求","children":[]},{"level":3,"title":"4.2. 集合","slug":"_4-2-集合","link":"#_4-2-集合","children":[]},{"level":2,"title":"5. 结论","slug":"_5-结论","link":"#_5-结论","children":[]}],"git":{"createdTime":1721362242000,"updatedTime":1721362242000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":5.1,"words":1531},"filePathRelative":"posts/baeldung/2024-07-19/2024-07-19-Add Header to Every Request in Postman.md","localizedDate":"2022年5月1日","excerpt":"\\n<p>在本教程中，我们将学习如何使用预请求脚本在Postman中为每个请求添加HTTP头部。</p>\\n<p>在深入实现之前，让我们回顾一下HTTP头部是什么。</p>\\n<p>在HTTP请求中，头部是提供客户端和服务器HTTP通信之间附加信息的字段。HTTP头部具有键值对格式，并且可以附加到请求和响应上。</p>\\n<p>授权、内容类型和cookie是通过HTTP头部提供的元数据的示例。</p>\\n<p>例如：</p>\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code>Authorization: Bearer YmFyIiwiaWF0IjoxN;\\nContent-Type: application/json;\\nCookie: foo=bar;\\n</code></pre></div>","autoDesc":true}');export{c as comp,u as data};
