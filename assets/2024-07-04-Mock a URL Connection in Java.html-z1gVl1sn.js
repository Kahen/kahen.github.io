import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-D0vunQyr.js";const p={},e=t('<h1 id="java中模拟url连接" tabindex="-1"><a class="header-anchor" href="#java中模拟url连接"><span>Java中模拟URL连接</span></a></h1><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p><code>UrlConnection</code>是一个抽象类，提供了与网络上的资源进行交互的接口，例如从URL检索数据以及向它们发送数据。</p><p><strong>在编写单元测试时，我们通常希望模拟网络连接和响应，而不需要实际进行网络请求。</strong></p><p>在本教程中，我们将探讨几种在Java中模拟URL连接的方法。</p><h2 id="_2-一个简单的url获取器类" tabindex="-1"><a class="header-anchor" href="#_2-一个简单的url获取器类"><span>2. 一个简单的URL获取器类</span></a></h2><p>在整个教程中，我们的测试重点将是一个简单的URL获取器类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UrlFetcher</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">URL</span> url<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">UrlFetcher</span><span class="token punctuation">(</span><span class="token class-name">URL</span> url<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> url<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isUrlAvailable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">getResponseCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">HttpURLConnection</span><span class="token punctuation">.</span><span class="token constant">HTTP_OK</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getResponseCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token class-name">HttpURLConnection</span> con <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpURLConnection</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> con<span class="token punctuation">.</span><span class="token function">getResponseCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了演示，我们有一个公共方法<code>isUrlAvailable()</code>，它指示给定地址的URL是否可用。返回值基于我们收到的HTTP响应消息的状态代码。</p><h2 id="_3-使用纯java进行单元测试" tabindex="-1"><a class="header-anchor" href="#_3-使用纯java进行单元测试"><span>3. 使用纯Java进行单元测试</span></a></h2><p>通常，使用模拟对象的第一步是使用第三方测试框架。然而，在某些情况下，这可能不是一个可行的选项。</p><p><strong>幸运的是，<code>URL</code>类提供了一种机制，允许我们提供知道如何建立连接的自定义处理器。</strong> 我们可以使用这个来提供我们的处理器，它将返回一个虚拟连接对象和响应。</p><h3 id="_3-1-支持类" tabindex="-1"><a class="header-anchor" href="#_3-1-支持类"><span>3.1. 支持类</span></a></h3><p>对于这种方法，我们需要几个支持类。让我们首先定义一个<code>MockHttpURLConnection</code>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MockHttpURLConnection</span> <span class="token keyword">extends</span> <span class="token class-name">HttpURLConnection</span> <span class="token punctuation">{</span>\n    <span class="token keyword">protected</span> <span class="token class-name">MockHttpURLConnection</span><span class="token punctuation">(</span><span class="token class-name">URL</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getResponseCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> responseCode<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setResponseCode</span><span class="token punctuation">(</span><span class="token keyword">int</span> responseCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>responseCode <span class="token operator">=</span> responseCode<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">usingProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如我们所看到的，这个类是对<code>HttpURLConnection</code>类的简单扩展，具有最小的实现。重要的部分是，我们提供了一个设置和获取HTTP响应代码的机制。</p><p>接下来，我们需要一个虚拟流处理器，返回我们新创建的<code>MockHttpURLConnection</code>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MockURLStreamHandler</span> <span class="token keyword">extends</span> <span class="token class-name">URLStreamHandler</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">MockHttpURLConnection</span> mockHttpURLConnection<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">MockURLStreamHandler</span><span class="token punctuation">(</span><span class="token class-name">MockHttpURLConnection</span> mockHttpURLConnection<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>mockHttpURLConnection <span class="token operator">=</span> mockHttpURLConnection<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">protected</span> <span class="token class-name">URLConnection</span> <span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token class-name">URL</span> url<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mockHttpURLConnection<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们需要提供一个流处理器工厂，它将返回我们新创建的流处理器：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MockURLStreamHandlerFactory</span> <span class="token keyword">implements</span> <span class="token class-name">URLStreamHandlerFactory</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">MockHttpURLConnection</span> mockHttpURLConnection<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">MockURLStreamHandlerFactory</span><span class="token punctuation">(</span><span class="token class-name">MockHttpURLConnection</span> mockHttpURLConnection<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>mockHttpURLConnection <span class="token operator">=</span> mockHttpURLConnection<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">URLStreamHandler</span> <span class="token function">createURLStreamHandler</span><span class="token punctuation">(</span><span class="token class-name">String</span> protocol<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MockURLStreamHandler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mockHttpURLConnection<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-整合在一起" tabindex="-1"><a class="header-anchor" href="#_3-2-整合在一起"><span>3.2. 整合在一起</span></a></h3><p>现在我们已经准备好了支持类，我们可以继续编写我们的第一个单元测试：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">MockHttpURLConnection</span> mockHttpURLConnection<span class="token punctuation">;</span>\n\n<span class="token annotation punctuation">@BeforeAll</span>\n<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    mockHttpURLConnection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MockHttpURLConnection</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">setURLStreamHandlerFactory</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MockURLStreamHandlerFactory</span><span class="token punctuation">(</span>mockHttpURLConnection<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenMockedUrl_whenRequestSent_thenIsUrlAvailableTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    mockHttpURLConnection<span class="token punctuation">.</span><span class="token function">setResponseCode</span><span class="token punctuation">(</span><span class="token class-name">HttpURLConnection</span><span class="token punctuation">.</span><span class="token constant">HTTP_OK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">&quot;https://www.baeldung.com/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">UrlFetcher</span> fetcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlFetcher</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertTrue</span><span class="token punctuation">(</span>fetcher<span class="token punctuation">.</span><span class="token function">isUrlAvailable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;Url should be available: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们浏览一下我们测试的关键部分：</p><ul><li>首先，我们开始定义<code>setUp()</code>方法，<strong>在这里我们创建我们的<code>MockHttpURLConnection</code>，并通过静态方法<code>setURLStreamHandlerFactory()</code>将其注入到<code>URL</code>类中。</strong></li><li>现在我们可以开始编写测试的主体。首先，我们需要使用我们的<code>mockHttpURLConnection</code>变量上的<code>setResponseCode()</code>方法设置预期的响应代码。</li><li>然后我们可以创建一个新的URL并构建我们的<code>UrlFetcher</code>，最后断言<code>isUrlAvailable()</code>方法。</li></ul><p>当我们运行测试时，无论网络地址是否可用，我们应该始终获得相同的行为。一个很好的测试是关闭你的Wi-Fi或网络连接，然后检查测试是否仍然以完全相同的方式运行。</p><h3 id="_3-3-这种方法的问题" tabindex="-1"><a class="header-anchor" href="#_3-3-这种方法的问题"><span>3.3. 这种方法的问题</span></a></h3><p>尽管这个解决方案有效，并且不依赖于第三方库，但由于几个原因，它有点麻烦。</p><p>首先，我们需要创建几个模拟支持类，随着我们的测试需求变得更加复杂，我们的模拟对象也会变得更加复杂。例如，如果我们开始模拟不同的响应体。</p><p><strong>同样，我们的测试有一些重要的设置，其中我们混合了静态方法调用与<code>URL</code>类的实例。</strong> 这很令人困惑，并且可能会导致后续出现意想不到的结果。</p><h2 id="_4-使用mockito进行工作" tabindex="-1"><a class="header-anchor" href="#_4-使用mockito进行工作"><span>4. 使用Mockito进行工作</span></a></h2><p>在接下来的部分中，我们将看到如何使用Mockito这个众所周知的单元测试框架来简化我们的测试。</p><p>首先，我们需要将<code>mockito</code>依赖项添加到我们的项目中：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```org.mockito```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```mockito-core```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```5.11.0```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>```test```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>```\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们可以定义我们的测试：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenMockedUrl_whenRequestSent_thenIsUrlAvailableFalse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token class-name">HttpURLConnection</span> mockHttpURLConnection <span class="token operator">=</span> <span class="token function">mock</span><span class="token punctuation">(</span><span class="token class-name">HttpURLConnection</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">when</span><span class="token punctuation">(</span>mockHttpURLConnection<span class="token punctuation">.</span><span class="token function">getResponseCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token class-name">HttpURLConnection</span><span class="token punctuation">.</span><span class="token constant">HTTP_NOT_FOUND</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">URL</span> mockURL <span class="token operator">=</span> <span class="token function">mock</span><span class="token punctuation">(</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">when</span><span class="token punctuation">(</span>mockURL<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span>mockHttpURLConnection<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">UrlFetcher</span> fetcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlFetcher</span><span class="token punctuation">(</span>mockURL<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertFalse</span><span class="token punctuation">(</span>fetcher<span class="token punctuation">.</span><span class="token function">isUrlAvailable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;Url should be available: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这一次，我们使用Mockito的<code>mock</code>方法创建了一个虚拟的URL连接。<strong>然后我们配置模拟对象，当它的<code>openConnection</code>方法被调用时返回一个虚拟的HTTP URL连接。</strong> 当然，我们的模拟HTTP连接已经包含了一个被存根化的响应代码。</p><p>我们应该注意到，对于Mockito 4.8.0以下的版本，当我们运行这个测试时可能会收到一个错误：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>mockito<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>base<span class="token punctuation">.</span></span>MockitoException</span><span class="token operator">:</span>\n<span class="token class-name">Cannot</span> mock<span class="token operator">/</span>spy <span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>URL</span>\n<span class="token class-name">Mockito</span> cannot mock<span class="token operator">/</span>spy because <span class="token operator">:</span>\n <span class="token operator">-</span> <span class="token keyword">final</span> <span class="token keyword">class</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是因为URL是一个最终类，而在Mockito的早期版本中，直接模拟最终类型和方法是不可行的。</p><p>为了解决这个问题，我们可以简单地在我们的<code>pom.xml</code>中添加一个额外的依赖项：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```org.mockito```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```mockito-inline```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```5.2.0```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>```test```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>```\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们的测试将成功运行！</p><h2 id="_5-使用jmockit进行工作" tabindex="-1"><a class="header-anchor" href="#_5-使用jmockit进行工作"><span>5. 使用JMockit进行工作</span></a></h2><p>在我们最后的示例中，我们将看看另一个名为JMockit的测试库，以确保完整性。</p><p>首先，我们需要将<code>jmockit</code>依赖项添加到我们的项目中：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```org.jmockit```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```jmockit```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```1.49```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>```test```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>```\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们可以继续定义我们的测试类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">JMockitExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">UrlFetcherJMockitUnitTest</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Test</span>\n    <span class="token keyword">void</span> <span class="token function">givenMockedUrl_whenRequestSent_thenIsUrlAvailableTrue</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Mocked</span> <span class="token class-name">URL</span> anyURL<span class="token punctuation">,</span>\n      <span class="token annotation punctuation">@Mocked</span> <span class="token class-name">HttpURLConnection</span> mockConn<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token keyword">new</span> <span class="token class-name">Expectations</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>\n            mockConn<span class="token punctuation">.</span><span class="token function">getResponseCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            result <span class="token operator">=</span> <span class="token class-name">HttpURLConnection</span><span class="token punctuation">.</span><span class="token constant">HTTP_OK</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">UrlFetcher</span> fetcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlFetcher</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">&quot;https://www.baeldung.com/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">assertTrue</span><span class="token punctuation">(</span>fetcher<span class="token punctuation">.</span><span class="token function">isUrlAvailable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;Url should be available: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JMockit最强大的一点是其表达能力。<strong>为了创建模拟并定义它们的行为，我们不需要调用模拟API的方法，我们只需要直接定义它们。</strong></p><h2 id="_6-结论" tabindex="-1"><a class="header-anchor" href="#_6-结论"><span>6. 结论</span></a></h2><p>在这篇文章中，我们学习了几种我们可以模拟URL连接的方法，以编写不依赖任何外部服务的独立单元测试。首先，我们看一个使用纯Java的例子，然后探索了使用Mockito和JMockit的另外两种选项。</p><p>如往常一样，文章的全部源代码可以在GitHub上找到。</p><p>OK</p>',54),o=[e];function c(l,i){return a(),s("div",null,o)}const d=n(p,[["render",c],["__file","2024-07-04-Mock a URL Connection in Java.html.vue"]]),r=JSON.parse('{"path":"/posts/baeldung/2024-07-04/2024-07-04-Mock%20a%20URL%20Connection%20in%20Java.html","title":"Java中模拟URL连接","lang":"zh-CN","frontmatter":{"date":"2023-04-22T00:00:00.000Z","category":["Java","Testing"],"tag":["URLConnection","Mockito","JMockit"],"head":[["meta",{"name":"keywords","content":"Java, Testing, URLConnection, Mockito, JMockit"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-04/2024-07-04-Mock%20a%20URL%20Connection%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Java中模拟URL连接"}],["meta",{"property":"og:description","content":"Java中模拟URL连接 1. 概述 UrlConnection是一个抽象类，提供了与网络上的资源进行交互的接口，例如从URL检索数据以及向它们发送数据。 在编写单元测试时，我们通常希望模拟网络连接和响应，而不需要实际进行网络请求。 在本教程中，我们将探讨几种在Java中模拟URL连接的方法。 2. 一个简单的URL获取器类 在整个教程中，我们的测试重..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-04T11:57:06.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"URLConnection"}],["meta",{"property":"article:tag","content":"Mockito"}],["meta",{"property":"article:tag","content":"JMockit"}],["meta",{"property":"article:published_time","content":"2023-04-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-04T11:57:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java中模拟URL连接\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-04-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-04T11:57:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Java中模拟URL连接 1. 概述 UrlConnection是一个抽象类，提供了与网络上的资源进行交互的接口，例如从URL检索数据以及向它们发送数据。 在编写单元测试时，我们通常希望模拟网络连接和响应，而不需要实际进行网络请求。 在本教程中，我们将探讨几种在Java中模拟URL连接的方法。 2. 一个简单的URL获取器类 在整个教程中，我们的测试重..."},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. 一个简单的URL获取器类","slug":"_2-一个简单的url获取器类","link":"#_2-一个简单的url获取器类","children":[]},{"level":2,"title":"3. 使用纯Java进行单元测试","slug":"_3-使用纯java进行单元测试","link":"#_3-使用纯java进行单元测试","children":[{"level":3,"title":"3.1. 支持类","slug":"_3-1-支持类","link":"#_3-1-支持类","children":[]},{"level":3,"title":"3.2. 整合在一起","slug":"_3-2-整合在一起","link":"#_3-2-整合在一起","children":[]},{"level":3,"title":"3.3. 这种方法的问题","slug":"_3-3-这种方法的问题","link":"#_3-3-这种方法的问题","children":[]}]},{"level":2,"title":"4. 使用Mockito进行工作","slug":"_4-使用mockito进行工作","link":"#_4-使用mockito进行工作","children":[]},{"level":2,"title":"5. 使用JMockit进行工作","slug":"_5-使用jmockit进行工作","link":"#_5-使用jmockit进行工作","children":[]},{"level":2,"title":"6. 结论","slug":"_6-结论","link":"#_6-结论","children":[]}],"git":{"createdTime":1720094226000,"updatedTime":1720094226000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":5.5,"words":1650},"filePathRelative":"posts/baeldung/2024-07-04/2024-07-04-Mock a URL Connection in Java.md","localizedDate":"2023年4月22日","excerpt":"\\n<h2>1. 概述</h2>\\n<p><code>UrlConnection</code>是一个抽象类，提供了与网络上的资源进行交互的接口，例如从URL检索数据以及向它们发送数据。</p>\\n<p><strong>在编写单元测试时，我们通常希望模拟网络连接和响应，而不需要实际进行网络请求。</strong></p>\\n<p>在本教程中，我们将探讨几种在Java中模拟URL连接的方法。</p>\\n<h2>2. 一个简单的URL获取器类</h2>\\n<p>在整个教程中，我们的测试重点将是一个简单的URL获取器类：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">UrlFetcher</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">URL</span> url<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">UrlFetcher</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">URL</span> url<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">IOException</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>url <span class=\\"token operator\\">=</span> url<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">boolean</span> <span class=\\"token function\\">isUrlAvailable</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">IOException</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">getResponseCode</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">==</span> <span class=\\"token class-name\\">HttpURLConnection</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">HTTP_OK</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">getResponseCode</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">IOException</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">HttpURLConnection</span> con <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">HttpURLConnection</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>url<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">openConnection</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> con<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getResponseCode</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{d as comp,r as data};
