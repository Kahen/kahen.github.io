import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-DNwYcgl6.js";const p={},e=t('<h1 id="java-8-中的-stream-分区技术" tabindex="-1"><a class="header-anchor" href="#java-8-中的-stream-分区技术"><span>Java 8 中的 Stream 分区技术</span></a></h1><p>在本教程中，我们将探索基于固定最大大小对 Java 8 的 Stream 进行分区的各种技术。</p><p>我们将首先重新审视如何使用 List 来完成这项工作。随后，我们将通过引入 Stream 特有的功能，如延迟评估和线程安全性，来增强我们的方法。</p><h2 id="_2-list-的分区" tabindex="-1"><a class="header-anchor" href="#_2-list-的分区"><span>2. List 的分区</span></a></h2><p>在 Java 中，有多种分区 List 的方法。一种简单的方法是首先根据所需的批量大小和源列表的大小来确定所需的批次数量：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> ```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>``````````` <span class="token class-name">Stream</span><span class="token operator">&lt;</span><span class="token class-name">List</span>```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>```````````<span class="token operator">&gt;</span> <span class="token function">partitionList</span><span class="token punctuation">(</span><span class="token class-name">List</span>```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>``````````` source<span class="token punctuation">,</span> <span class="token keyword">int</span> batchSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> nrOfFullBatches <span class="token operator">=</span> <span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> batchSize<span class="token punctuation">;</span>\n    <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了将源列表划分为更小的子列表，我们的第一步是计算划分每个批次的起始和结束点的索引。在执行此计算时，我们应该记住最后一个批次的大小可能与其他批次不同：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> startIndex <span class="token operator">=</span> batch <span class="token operator">*</span> batchSize<span class="token punctuation">;</span>\n<span class="token keyword">int</span> endIndex <span class="token operator">=</span> <span class="token punctuation">(</span>batch <span class="token operator">==</span> nrOfFullBatches<span class="token punctuation">)</span> <span class="token operator">?</span> source<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>batch <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> batchSize<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们可以添加一些验证，并涵盖所有边缘情况。例如，当源列表为空或者 batchSize 是一个负数时：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> ```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>``````````` <span class="token class-name">Stream</span><span class="token operator">&lt;</span><span class="token class-name">List</span>```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>```````````<span class="token operator">&gt;</span> <span class="token function">partitionList</span><span class="token punctuation">(</span><span class="token class-name">List</span>```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>``````````` source<span class="token punctuation">,</span> <span class="token keyword">int</span> batchSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>batchSize `<span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;The batchSize cannot be smaller than 0. Actual value: %s&quot;</span><span class="token punctuation">,</span> batchSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">int</span> nrOfFullBatches <span class="token operator">=</span> <span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> batchSize<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> nrOfFullBatches<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">mapToObj</span><span class="token punctuation">(</span>batch <span class="token operator">-&gt;</span>` <span class="token punctuation">{</span>\n          <span class="token keyword">int</span> startIndex <span class="token operator">=</span> batch <span class="token operator">*</span> batchSize<span class="token punctuation">;</span>\n          <span class="token keyword">int</span> endIndex <span class="token operator">=</span> <span class="token punctuation">(</span>batch <span class="token operator">==</span> nrOfFullBatches<span class="token punctuation">)</span> <span class="token operator">?</span> source<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>batch <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> batchSize<span class="token punctuation">;</span>\n          <span class="token keyword">return</span> source<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span>startIndex<span class="token punctuation">,</span> endIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，让我们测试一下解决方案。对于一个包含从 1 到 8 的数字的输入列表和批量大小为 3，我们将期望得到三个子列表：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">whenPartitionList_thenReturnThreeSubLists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">List</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>``` source <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">Stream</span><span class="token operator">&lt;</span><span class="token class-name">List</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>```<span class="token operator">&gt;</span> result <span class="token operator">=</span> <span class="token function">partitionList</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">assertThat</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">containsExactlyInAnyOrder</span><span class="token punctuation">(</span>\n      <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-并行-stream-的分区" tabindex="-1"><a class="header-anchor" href="#_3-并行-stream-的分区"><span>3. 并行 Stream 的分区</span></a></h2><p>Streams 具有独特的特性，如延迟评估和并行处理的能力。通过创建自定义的 Collector，我们可以利用这些特性。</p><p>此外，鉴于期望的返回类型是子列表的列表，我们还将使用已经由 Collectors.toList() 定义的某些函数，我们将称之为下游收集器：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> ```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>``````````` <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">List</span>```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>```````````<span class="token operator">&gt;</span> <span class="token function">partitionStream</span><span class="token punctuation">(</span><span class="token class-name">Stream</span>```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>``````````` source<span class="token punctuation">,</span> <span class="token keyword">int</span> batchSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> source<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">partitionBySize</span><span class="token punctuation">(</span>batchSize<span class="token punctuation">,</span> <span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">static</span> ```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span>``` <span class="token class-name">Collector</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span>``` <span class="token function">partitionBySize</span><span class="token punctuation">(</span><span class="token keyword">int</span> batchSize<span class="token punctuation">,</span> <span class="token class-name">Collector</span><span class="token operator">&lt;</span><span class="token class-name">List</span>```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>```````````<span class="token punctuation">,</span> <span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token operator">&gt;</span> downstream<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">Collector</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以使用静态工厂方法 Collector.of() 来创建一个 Collector。让我们查阅文档，看看每个参数代表什么：</p><ul><li>supplier – 新收集器的供应器函数</li><li>accumulator – 新收集器的累加器函数</li><li>combiner – 新收集器的合并器函数</li><li>finisher – 新收集器的完成器函数</li><li>characteristics – 新收集器的特性</li></ul><p>现在，让我们系统地逐一了解它们的功能。</p><h3 id="_3-1-the-supplier" tabindex="-1"><a class="header-anchor" href="#_3-1-the-supplier"><span>3.1. The Supplier</span></a></h3><p>我们将使用一个临时对象来累积数据并将其分割成批次。这个累加器通常被隐藏为实现细节。</p><p>在收集操作完成后，我们将调用完成器函数，该函数将累加器转换为收集器返回的最终结果。工厂方法 Collector.of() 的第一个参数将是一个函数，它提供了我们自定义累加器的实例。</p><p>这个临时累加器封装了一个值列表和固定的批量大小。此外，它还提供了调用者指定一个监听器的灵活性，当批次达到容量时，该监听器会被通知。它还包括一个通用字段，以适应下游收集器：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Accumulator</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">A</span><span class="token punctuation">&gt;</span></span>```` <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span>```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>``````````` values <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> batchSize<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">A</span> downstreamAccumulator<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">BiConsumer</span><span class="token operator">&lt;</span><span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">List</span>```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>```````````<span class="token operator">&gt;</span> batchFullListener<span class="token punctuation">;</span>\n\n    <span class="token comment">// constructor</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不用说，累加器完全封装。因此，我们将创建它作为一个静态内部类，并倾向于使用包保护的访问修饰符。</p><p>现在，让我们编写一个接受新值的方法。在将其添加到列表后，如果列表的大小达到 batchSize，我们将通知监听器，然后清除值：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">T</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    values<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>values<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> batchSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        batchFullListener<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>downstreamAccumulator<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        values<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们创建一个 Supplier 来实例化这个 Accumulator。当一个批次已满时，我们将委托给下游累加器，在我们的情况下，是来自 Collectors.toList() 的那个：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token punctuation">(</span>acc<span class="token punctuation">,</span> values<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> downstream<span class="token punctuation">.</span><span class="token function">accumulator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>acc<span class="token punctuation">,</span> values<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后，我们可以使用方法引用重写这个 BiConsumer 并创建我们的 Supplier：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Supplier</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Accumulator</span><span class="token punctuation">&gt;</span></span>` supplier <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Accumulator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>\n    batchSize<span class="token punctuation">,</span>\n    downstream<span class="token punctuation">.</span><span class="token function">supplier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    downstream<span class="token punctuation">.</span><span class="token function">accumulator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">::</span><span class="token function">accept</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-the-accumulator" tabindex="-1"><a class="header-anchor" href="#_3-2-the-accumulator"><span>3.2. The Accumulator</span></a></h3><p>创建自定义 Collector 的第二个参数将是一个接受 Accumulator 和新值的 BiConsumer。在我们的情况下，我们将简单地委托给 Accumulator 并允许它将值添加到当前批次：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">BiConsumer</span><span class="token operator">&lt;</span><span class="token class-name">Accumulator</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">A</span><span class="token punctuation">&gt;</span></span>````<span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token operator">&gt;</span> accumulator <span class="token operator">=</span> <span class="token punctuation">(</span>acc<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> acc<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-3-the-combiner" tabindex="-1"><a class="header-anchor" href="#_3-3-the-combiner"><span>3.3. The Combiner</span></a></h3><p>合并器是一个接受两个 Accumulator 并提供将它们合并在一起的方式的函数。首先，我们需要使用下游的合并器合并它们的 downstreamAccumulator。之后，我们可以流式传输一个累加器累积的所有值，并将它们添加到另一个累加器中：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">BinaryOperator</span><span class="token operator">&lt;</span><span class="token class-name">Accumulator</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">A</span><span class="token punctuation">&gt;</span></span>````<span class="token operator">&gt;</span> combiner <span class="token operator">=</span> <span class="token punctuation">(</span>acc1<span class="token punctuation">,</span> acc2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n    acc1<span class="token punctuation">.</span>downstreamAccumulator <span class="token operator">=</span> downstream<span class="token punctuation">.</span><span class="token function">combiner</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>acc1<span class="token punctuation">.</span>downstreamAccumulator<span class="token punctuation">,</span> acc2<span class="token punctuation">.</span>downstreamAccumulator<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    acc2<span class="token punctuation">.</span>values<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>acc1<span class="token operator">::</span><span class="token function">add</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> acc1<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们重构代码，并将此逻辑封装在 Accumulator 类本身中：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Accumulator</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">A</span><span class="token punctuation">&gt;</span></span>```` <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n\n    <span class="token class-name">Accumulator</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">A</span><span class="token punctuation">&gt;</span></span>```` <span class="token function">combine</span><span class="token punctuation">(</span><span class="token class-name">Accumulator</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">A</span><span class="token punctuation">&gt;</span></span>```` other<span class="token punctuation">,</span> <span class="token class-name">BinaryOperator</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">&gt;</span></span>` accumulatorCombiner<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>downstreamAccumulator <span class="token operator">=</span> accumulatorCombiner<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>downstreamAccumulator<span class="token punctuation">,</span> other<span class="token punctuation">.</span>downstreamAccumulator<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        other<span class="token punctuation">.</span>values<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">add</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这简化了我们的合并器为一行代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">BinaryOperator</span><span class="token operator">&lt;</span><span class="token class-name">Accumulator</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">A</span><span class="token punctuation">&gt;</span></span>````<span class="token operator">&gt;</span> combiner <span class="token operator">=</span> <span class="token punctuation">(</span>acc1<span class="token punctuation">,</span> acc2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> acc1<span class="token punctuation">.</span><span class="token function">combine</span><span class="token punctuation">(</span>acc2<span class="token punctuation">,</span> downstream<span class="token punctuation">.</span><span class="token function">combiner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-4-the-finisher" tabindex="-1"><a class="header-anchor" href="#_3-4-the-finisher"><span>3.4. The Finisher</span></a></h3><p>正如前面提到的，我们必须建立一种将这个自定义 Accumulator 转换为最终结果的方法：List of List。这是我们可以依靠下游收集器将所有批次聚合到单个列表中的另一个地方。</p><p>此外，如果累加器不为空，表明存在来自最后一个不完整批次的值，我们需要确保在调用下游完成器之前将这些值合并：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Function</span><span class="token operator">&lt;</span><span class="token class-name">Accumulator</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">A</span><span class="token punctuation">&gt;</span></span>````<span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token operator">&gt;</span> finisher <span class="token operator">=</span> acc <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>acc<span class="token punctuation">.</span>values<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        downstream<span class="token punctuation">.</span><span class="token function">accumulator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>acc<span class="token punctuation">.</span>downstreamAccumulator<span class="token punctuation">,</span> acc<span class="token punctuation">.</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> downstream<span class="token punctuation">.</span><span class="token function">finisher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>acc<span class="token punctuation">.</span>downstreamAccumulator<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-5-the-collector-characteristics" tabindex="-1"><a class="header-anchor" href="#_3-5-the-collector-characteristics"><span>3.5. The Collector Characteristics</span></a></h3><p>我们的收集器旨在是线程安全的，并且适用于与并行流一起使用。这意味着最终的归约过程是跨多个线程并发进行的。这种并行处理的一个自然后果是无法保证元素的顺序。</p><p>Collector Characteristics 可以用来优化归约实现。基于我们已经概述的考虑，我们将配置特性参数以使用 Collector.Characteristics.UNORDERED：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> ```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span>``` <span class="token class-name">Collector</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span>``` <span class="token function">partitionBySize</span><span class="token punctuation">(</span><span class="token keyword">int</span> batchSize<span class="token punctuation">,</span> <span class="token class-name">Collector</span><span class="token operator">&lt;</span><span class="token class-name">List</span>```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>```````````<span class="token punctuation">,</span> <span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token operator">&gt;</span> downstream<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n    <span class="token keyword">return</span> <span class="token class-name">Collector</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>\n      supplier<span class="token punctuation">,</span>\n      accumulator<span class="token punctuation">,</span>\n      combiner<span class="token punctuation">,</span>\n      finisher<span class="token punctuation">,</span>\n      <span class="token class-name">Collector<span class="token punctuation">.</span>Characteristics</span><span class="token punctuation">.</span><span class="token constant">UNORDERED</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-6-the-full-solution" tabindex="-1"><a class="header-anchor" href="#_3-6-the-full-solution"><span>3.6. The Full Solution</span></a></h3><p>现在我们已经了解了收集器创建中使用的每个函数所扮演的角色。让我们在进行测试之前重新审视整个方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> ```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>``````````` <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">List</span>```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>```````````<span class="token operator">&gt;</span> <span class="token function">partitionStream</span><span class="token punctuation">(</span><span class="token class-name">Stream</span>```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>``````````` source<span class="token punctuation">,</span> <span class="token keyword">int</span> batchSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> source<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">partitionBySize</span><span class="token punctuation">(</span>batchSize<span class="token punctuation">,</span> <span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">static</span> ```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span>``` <span class="token class-name">Collector</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span>``` <span class="token function">partitionBySize</span><span class="token punctuation">(</span><span class="token keyword">int</span> batchSize<span class="token punctuation">,</span> <span class="token class-name">Collector</span><span class="token operator">&lt;</span><span class="token class-name">List</span>```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>```````````<span class="token punctuation">,</span> <span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token operator">&gt;</span> downstream<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Supplier</span><span class="token operator">&lt;</span><span class="token class-name">Accumulator</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">A</span><span class="token punctuation">&gt;</span></span>````<span class="token operator">&gt;</span> supplier <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Accumulator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>\n      batchSize<span class="token punctuation">,</span>\n      downstream<span class="token punctuation">.</span><span class="token function">supplier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      downstream<span class="token punctuation">.</span><span class="token function">accumulator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">::</span><span class="token function">accept</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">BiConsumer</span><span class="token operator">&lt;</span><span class="token class-name">Accumulator</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">A</span><span class="token punctuation">&gt;</span></span>````<span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token operator">&gt;</span> accumulator <span class="token operator">=</span> <span class="token punctuation">(</span>acc<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> acc<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">BinaryOperator</span><span class="token operator">&lt;</span><span class="token class-name">Accumulator</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">A</span><span class="token punctuation">&gt;</span></span>````<span class="token operator">&gt;</span> combiner <span class="token operator">=</span> <span class="token punctuation">(</span>acc1<span class="token punctuation">,</span> acc2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> acc1<span class="token punctuation">.</span><span class="token function">combine</span><span class="token punctuation">(</span>acc2<span class="token punctuation">,</span> downstream<span class="token punctuation">.</span><span class="token function">combiner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">Function</span><span class="token operator">&lt;</span><span class="token class-name">Accumulator</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">A</span><span class="token punctuation">&gt;</span></span>````<span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token operator">&gt;</span> finisher <span class="token operator">=</span> acc <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>acc<span class="token punctuation">.</span>values<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            downstream<span class="token punctuation">.</span><span class="token function">accumulator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>acc<span class="token punctuation">.</span>downstreamAccumulator<span class="token punctuation">,</span> acc<span class="token punctuation">.</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> downstream<span class="token punctuation">.</span><span class="token function">finisher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>acc<span class="token punctuation">.</span>downstreamAccumulator<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token class-name">Collector</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>supplier<span class="token punctuation">,</span> accumulator<span class="token punctuation">,</span> combiner<span class="token punctuation">,</span> finisher<span class="token punctuation">,</span> <span class="token class-name">Collector<span class="token punctuation">.</span>Characteristics</span><span class="token punctuation">.</span><span class="token constant">UNORDERED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在测试期间，我们将无法再断言每个批次内的值。因此，我们的断言将仅关注验证批次的计数和大小。</strong> 例如，使用批量大小为 3 对包含 1 到 8 之间整数的并行流进行分区时，我们将生成两个完整的批次，每个批次包含三个元素，以及一个包含两个元素的批次：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">whenPartitionStream_thenReturnThreeSubLists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Stream</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>``` source <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">List</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>```<span class="token operator">&gt;</span> result <span class="token operator">=</span> <span class="token function">partitionStream</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">assertThat</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">hasSize</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">satisfies</span><span class="token punctuation">(</span>batch <span class="token operator">-&gt;</span> <span class="token function">assertThat</span><span class="token punctuation">(</span>batch<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasSize</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">atIndex</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">satisfies</span><span class="token punctuation">(</span>batch <span class="token operator">-&gt;</span> <span class="token function">assertThat</span><span class="token punctuation">(</span>batch<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasSize</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">atIndex</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">satisfies</span><span class="token punctuation">(</span>batch <span class="token operator">-&gt;</span> <span class="token function">assertThat</span><span class="token punctuation">(</span>batch<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasSize</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">atIndex</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-使用-guava-进行-stream-分区" tabindex="-1"><a class="header-anchor" href="#_4-使用-guava-进行-stream-分区"><span>4. 使用 Guava 进行 Stream 分区</span></a></h2><p><strong>为了避免潜在的错误，我们可以选择使用经过验证的第三方库</strong> 而不是从头开始构建线程安全的 Collector。例如，Google 的 Guava 提供了一个优雅且简洁的方法，将 Stream 分区为包含相同数据类型 List 的 Iterable。</p><p>首先，让我们将依赖项添加到我们的 pom.xml 中：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`com.google.guava`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`guava`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`33.0.0-jre`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们可以简单地使用静态方法 Iterables.partition()。这个函数接受一个 Iterable 和所需的批量大小作为其参数：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> ```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>``````````` <span class="token class-name">Iterable</span><span class="token operator">&lt;</span><span class="token class-name">List</span>```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>```````````<span class="token operator">&gt;</span> <span class="token function">partitionUsingGuava</span><span class="token punctuation">(</span><span class="token class-name">Stream</span>```````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>``````````` source<span class="token punctuation">,</span> <span class="token keyword">int</span> batchSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">Iterables</span><span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span>source<span class="token operator">::</span><span class="token function">iterator</span><span class="token punctuation">,</span> batchSize<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们测试方法的唯一区别在于更改了返回类型，现在是 Iterable。为了断言批次大小，我们将 Iterable 的所有元素收集到一个 ArrayList 中。除此之外，测试过程保持不变：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">whenPartitionParallelStreamWithGuava_thenReturnThreeSubLists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Stream</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>``` source <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">Iterable</span><span class="token operator">&lt;</span><span class="token class-name">List</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>```<span class="token operator">&gt;</span> result <span class="token operator">=</span> <span class="token function">partitionUsingGuava</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">assertThat</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">hasSize</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">satisfies</span><span class="token punctuation">(</span>batch <span class="token operator">-&gt;</span> <span class="token function">assertThat</span><span class="token punctuation">(</span>batch<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasSize</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">atIndex</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">satisfies</span><span class="token punctuation">(</span>batch <span class="token operator">-&gt;</span> <span class="token function">assertThat</span><span class="token punctuation">(</span>batch<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasSize</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">atIndex</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">satisfies</span><span class="token punctuation">(</span>batch <span class="token operator">-&gt;</span> <span class="token function">assertThat</span><span class="token punctuation">(</span>batch<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasSize</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">atIndex</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-结论" tabindex="-1"><a class="header-anchor" href="#_5-结论"><span>5. 结论</span></a></h2><p>在本文中，我们探索了在 Java 中分区 Stream 的多种方式。我们首先回顾了如何将 List 分割成较小的子列表。之后，我们讨论了 Stream 和并行 Stream 的优势，并为它们创建了自己的自定义 Collector。</p><p>最后，我们进入了 Guava 的 API，它使我们能够使用静态方法 Iterables.partition() 轻松实现相同的功能。</p><p>如往常一样，示例的完整源代码可在 GitHub 上获得。</p><p><a href="https://www.baeldung.com" target="_blank" rel="noopener noreferrer"><img src="https://www.baeldung.com/wp-content/themes/baeldung/icon/logo.svg" alt="Baeldung Logo" loading="lazy"></a><a href="https://www.baeldung.com/" target="_blank" rel="noopener noreferrer"><img src="https://secure.gravatar.com/avatar/475d4408e78071b2289e763a5887e617?s=50&amp;r=g" alt="Gravatar Image" loading="lazy"></a><a href="https://www.baeldung.com/author/eric-martin" target="_blank" rel="noopener noreferrer"><img src="https://www.baeldung.com/wp-content/uploads/custom_avatars/Eric-Martin-150x150.jpg" alt="Eric Martin" loading="lazy"></a><a href="https://www.baeldung.com/" target="_blank" rel="noopener noreferrer"><img src="https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png" alt="Announcement Icon" loading="lazy"></a><a href="https://www.baeldung.com/" target="_blank" rel="noopener noreferrer"><img src="https://www.baeldung.com/wp-content/uploads/2016/05/baeldung-rest-post-footer-main-1.2.0.jpg" alt="REST API Post Footer" loading="lazy"></a><a href="https://www.baeldung.com/" target="_blank" rel="noopener noreferrer"><img src="https://www.baeldung.com/wp-content/uploads/2016/05/baeldung-rest-post-footer-icn-1.0.0.png" alt="REST API Footer Icon" loading="lazy"></a></p><p>OK</p>',68),c=[e];function o(l,u){return a(),s("div",null,c)}const r=n(p,[["render",o],["__file","2024-06-29-Partition a Stream in Java.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-06-29/2024-06-29-Partition%20a%20Stream%20in%20Java.html","title":"Java 8 中的 Stream 分区技术","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","Stream API"],"tag":["Java 8","Stream","分区"],"head":[["meta",{"name":"keywords","content":"Java 8, Stream API, 分区, 并行流, Guava"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-06-29/2024-06-29-Partition%20a%20Stream%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Java 8 中的 Stream 分区技术"}],["meta",{"property":"og:description","content":"Java 8 中的 Stream 分区技术 在本教程中，我们将探索基于固定最大大小对 Java 8 的 Stream 进行分区的各种技术。 我们将首先重新审视如何使用 List 来完成这项工作。随后，我们将通过引入 Stream 特有的功能，如延迟评估和线程安全性，来增强我们的方法。 2. List 的分区 在 Java 中，有多种分区 List 的方..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.baeldung.com/wp-content/themes/baeldung/icon/logo.svg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-29T11:27:57.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java 8"}],["meta",{"property":"article:tag","content":"Stream"}],["meta",{"property":"article:tag","content":"分区"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-29T11:27:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 8 中的 Stream 分区技术\\",\\"image\\":[\\"https://www.baeldung.com/wp-content/themes/baeldung/icon/logo.svg\\",\\"https://secure.gravatar.com/avatar/475d4408e78071b2289e763a5887e617?s=50&r=g\\",\\"https://www.baeldung.com/wp-content/uploads/custom_avatars/Eric-Martin-150x150.jpg\\",\\"https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png\\",\\"https://www.baeldung.com/wp-content/uploads/2016/05/baeldung-rest-post-footer-main-1.2.0.jpg\\",\\"https://www.baeldung.com/wp-content/uploads/2016/05/baeldung-rest-post-footer-icn-1.0.0.png\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-29T11:27:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Java 8 中的 Stream 分区技术 在本教程中，我们将探索基于固定最大大小对 Java 8 的 Stream 进行分区的各种技术。 我们将首先重新审视如何使用 List 来完成这项工作。随后，我们将通过引入 Stream 特有的功能，如延迟评估和线程安全性，来增强我们的方法。 2. List 的分区 在 Java 中，有多种分区 List 的方..."},"headers":[{"level":2,"title":"2. List 的分区","slug":"_2-list-的分区","link":"#_2-list-的分区","children":[]},{"level":2,"title":"3. 并行 Stream 的分区","slug":"_3-并行-stream-的分区","link":"#_3-并行-stream-的分区","children":[{"level":3,"title":"3.1. The Supplier","slug":"_3-1-the-supplier","link":"#_3-1-the-supplier","children":[]},{"level":3,"title":"3.2. The Accumulator","slug":"_3-2-the-accumulator","link":"#_3-2-the-accumulator","children":[]},{"level":3,"title":"3.3. The Combiner","slug":"_3-3-the-combiner","link":"#_3-3-the-combiner","children":[]},{"level":3,"title":"3.4. The Finisher","slug":"_3-4-the-finisher","link":"#_3-4-the-finisher","children":[]},{"level":3,"title":"3.5. The Collector Characteristics","slug":"_3-5-the-collector-characteristics","link":"#_3-5-the-collector-characteristics","children":[]},{"level":3,"title":"3.6. The Full Solution","slug":"_3-6-the-full-solution","link":"#_3-6-the-full-solution","children":[]}]},{"level":2,"title":"4. 使用 Guava 进行 Stream 分区","slug":"_4-使用-guava-进行-stream-分区","link":"#_4-使用-guava-进行-stream-分区","children":[]},{"level":2,"title":"5. 结论","slug":"_5-结论","link":"#_5-结论","children":[]}],"git":{"createdTime":1719660477000,"updatedTime":1719660477000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":8.03,"words":2409},"filePathRelative":"posts/baeldung/2024-06-29/2024-06-29-Partition a Stream in Java.md","localizedDate":"2022年4月1日","excerpt":"\\n<p>在本教程中，我们将探索基于固定最大大小对 Java 8 的 Stream 进行分区的各种技术。</p>\\n<p>我们将首先重新审视如何使用 List 来完成这项工作。随后，我们将通过引入 Stream 特有的功能，如延迟评估和线程安全性，来增强我们的方法。</p>\\n<h2>2. List 的分区</h2>\\n<p>在 Java 中，有多种分区 List 的方法。一种简单的方法是首先根据所需的批量大小和源列表的大小来确定所需的批次数量：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">static</span> ```````````<span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">T</span><span class=\\"token punctuation\\">&gt;</span></span>``````````` <span class=\\"token class-name\\">Stream</span><span class=\\"token operator\\">&lt;</span><span class=\\"token class-name\\">List</span>```````````<span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">T</span><span class=\\"token punctuation\\">&gt;</span></span>```````````<span class=\\"token operator\\">&gt;</span> <span class=\\"token function\\">partitionList</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">List</span>```````````<span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">T</span><span class=\\"token punctuation\\">&gt;</span></span>``````````` source<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> batchSize<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> nrOfFullBatches <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>source<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">/</span> batchSize<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// ...</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{r as comp,d as data};
