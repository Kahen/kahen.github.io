import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,o as s,a as t}from"./app-DWhzy7sT.js";const e={},p=t(`<h1 id="java中的3des" tabindex="-1"><a class="header-anchor" href="#java中的3des"><span>Java中的3DES</span></a></h1><ol><li><strong>介绍</strong></li></ol><p>3DES或三重数据加密算法是一种对称密钥块密码算法，它将DES密码算法对每个数据块应用三次。</p><p>在本教程中，我们将学习如何在Java中<strong>创建3DES密钥并使用它们对字符串和文件进行加密和解密</strong>。</p><ol start="2"><li><strong>生成密钥</strong></li></ol><p>生成3DES密钥需要几个步骤。首先，我们需要生成一个用于加密解密过程的密钥。在我们的案例中，我们将使用一个由随机数字和字母构成的24字节密钥：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> secretKey <span class="token operator">=</span> <span class="token string">&quot;9mng65v8jf4lxn93nabf981m&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意，<strong>密钥不应该公开共享</strong>。</p><p>现在，我们将密钥包装在_SecretKeySpec_中，并结合选择的算法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">SecretKeySpec</span> secretKeySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecretKeySpec</span><span class="token punctuation">(</span>secretKey<span class="token punctuation">,</span> <span class="token string">&quot;TripleDES&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在我们的案例中，我们使用的是_TripleDES_，这是Java安全标准算法之一。</p><p><strong>我们事先应该生成的另一个项目是密钥的初始化向量</strong>。我们将使用一个8字节的随机数字和字母数组：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> iv <span class="token operator">=</span> <span class="token string">&quot;a76nb5h9&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后，我们将它包装在_IvParameterSpec_类中：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">IvParameterSpec</span> ivSpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IvParameterSpec</span><span class="token punctuation">(</span>iv<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li><strong>加密字符串</strong></li></ol><p>现在我们准备加密简单的字符串值。让我们首先定义一个我们要处理的字符串：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> secretMessage <span class="token operator">=</span> <span class="token string">&quot;Baeldung secret message&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来，<strong>我们需要一个初始化为加密模式、密钥和我们之前生成的初始化向量的_Cipher_对象</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Cipher</span> encryptCipher <span class="token operator">=</span> <span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;TripleDES/CBC/PKCS5Padding&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
encryptCipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">ENCRYPT_MODE</span><span class="token punctuation">,</span> secretKeySpec<span class="token punctuation">,</span> ivSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，我们使用的是带有CBC和PKCS#5填充方案的_TripleDES_算法。</p><p><strong>使用_Cipher_，我们可以运行_doFinal_方法来加密我们的消息</strong>。注意，它只适用于字节数组，所以我们需要先将我们的字符串转换：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> secretMessagesBytes <span class="token operator">=</span> secretMessage<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> encryptedMessageBytes <span class="token operator">=</span> encryptCipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>secretMessagesBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们的消息已成功加密。如果我们想将其存储在数据库中或通过REST API发送，使用Base64字母编码将更方便：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> encodedMessage <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>encryptedMessageBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Base64编码使消息更易读且更易于使用。</p><ol start="4"><li><strong>解密字符串</strong></li></ol><p>现在，让我们看看如何逆转加密过程并将消息解密回其原始形式。为此，<strong>我们需要一个新的_Cipher_实例，但这次，我们将在解密模式下初始化它</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Cipher</span> decryptCipher <span class="token operator">=</span> <span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;TripleDES/CBC/PKCS5Padding&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
decryptCipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">DECRYPT_MODE</span><span class="token punctuation">,</span> secretKeySpec<span class="token punctuation">,</span> ivSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们运行_doFinal_方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> decryptedMessageBytes <span class="token operator">=</span> decryptCipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>encryptedMessageBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在，我们将结果解码为字符串变量：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> decryptedMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>decryptedMessageBytes<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后，我们可以通过与初始值比较来验证结果，以确保解密过程正确执行：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>secretMessage<span class="token punctuation">,</span> decryptedMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5"><li><strong>处理文件</strong></li></ol><p>我们也可以加密整个文件。例如，让我们创建一个包含一些文本内容的临时文件：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> originalContent <span class="token operator">=</span> <span class="token string">&quot;Secret Baeldung message&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">Path</span> tempFile <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">createTempFile</span><span class="token punctuation">(</span><span class="token string">&quot;temp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">writeString</span><span class="token punctuation">(</span>tempFile<span class="token punctuation">,</span> originalContent<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，让我们将其内容转换为一个单一的字节数组：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fileBytes <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span>tempFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在，我们可以像处理字符串一样使用加密密钥：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Cipher</span> encryptCipher <span class="token operator">=</span> <span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;TripleDES/CBC/PKCS5Padding&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
encryptCipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">ENCRYPT_MODE</span><span class="token punctuation">,</span> secretKeySpec<span class="token punctuation">,</span> ivSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> encryptedFileBytes <span class="token operator">=</span> encryptCipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>fileBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，让我们用新的加密数据覆盖文件内容：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileOutputStream</span> stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>tempFile<span class="token punctuation">.</span><span class="token function">toFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    stream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>encryptedFileBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解密过程看起来非常相似。唯一的区别是初始化为解密模式的密码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>encryptedFileBytes <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span>tempFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Cipher</span> decryptCipher <span class="token operator">=</span> <span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;TripleDES/CBC/PKCS5Padding&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
decryptCipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">DECRYPT_MODE</span><span class="token punctuation">,</span> secretKeySpec<span class="token punctuation">,</span> ivSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> decryptedFileBytes <span class="token operator">=</span> decryptCipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>encryptedFileBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次，让我们用解密后的数据覆盖文件内容：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileOutputStream</span> stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>tempFile<span class="token punctuation">.</span><span class="token function">toFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    stream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>decryptedFileBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>作为最后一步，我们可以验证文件内容是否与原始值匹配：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> fileContent <span class="token operator">=</span> <span class="token function">readString</span><span class="token punctuation">(</span>tempFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>originalContent<span class="token punctuation">,</span> fileContent<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li><strong>总结</strong></li></ol><p>在本文中，我们学习了如何在Java中创建3DES密钥以及如何使用它来加密和解密字符串和文件。</p><p>如常，所有源代码都可以在GitHub上找到。</p>`,53),o=[p];function c(l,i){return s(),n("div",null,o)}const d=a(e,[["render",c],["__file","2024-07-28-3DES in Java.html.vue"]]),k=JSON.parse('{"path":"/posts/baeldung/2024-07-28/2024-07-28-3DES%20in%20Java.html","title":"Java中的3DES","lang":"zh-CN","frontmatter":{"date":"2024-07-28T00:00:00.000Z","category":["Java","3DES"],"tag":["Java","加密","解密"],"head":[["meta",{"name":"keywords","content":"Java, 3DES, 加密, 解密"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-28/2024-07-28-3DES%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Java中的3DES"}],["meta",{"property":"og:description","content":"Java中的3DES 介绍 3DES或三重数据加密算法是一种对称密钥块密码算法，它将DES密码算法对每个数据块应用三次。 在本教程中，我们将学习如何在Java中创建3DES密钥并使用它们对字符串和文件进行加密和解密。 生成密钥 生成3DES密钥需要几个步骤。首先，我们需要生成一个用于加密解密过程的密钥。在我们的案例中，我们将使用一个由随机数字和字母构成..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-28T12:04:17.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"加密"}],["meta",{"property":"article:tag","content":"解密"}],["meta",{"property":"article:published_time","content":"2024-07-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-28T12:04:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java中的3DES\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-28T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-28T12:04:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Java中的3DES 介绍 3DES或三重数据加密算法是一种对称密钥块密码算法，它将DES密码算法对每个数据块应用三次。 在本教程中，我们将学习如何在Java中创建3DES密钥并使用它们对字符串和文件进行加密和解密。 生成密钥 生成3DES密钥需要几个步骤。首先，我们需要生成一个用于加密解密过程的密钥。在我们的案例中，我们将使用一个由随机数字和字母构成..."},"headers":[],"git":{"createdTime":1722168257000,"updatedTime":1722168257000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":3.28,"words":983},"filePathRelative":"posts/baeldung/2024-07-28/2024-07-28-3DES in Java.md","localizedDate":"2024年7月28日","excerpt":"\\n<ol>\\n<li><strong>介绍</strong></li>\\n</ol>\\n<p>3DES或三重数据加密算法是一种对称密钥块密码算法，它将DES密码算法对每个数据块应用三次。</p>\\n<p>在本教程中，我们将学习如何在Java中<strong>创建3DES密钥并使用它们对字符串和文件进行加密和解密</strong>。</p>\\n<ol start=\\"2\\">\\n<li><strong>生成密钥</strong></li>\\n</ol>\\n<p>生成3DES密钥需要几个步骤。首先，我们需要生成一个用于加密解密过程的密钥。在我们的案例中，我们将使用一个由随机数字和字母构成的24字节密钥：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">byte</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> secretKey <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"9mng65v8jf4lxn93nabf981m\\"</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getBytes</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}');export{d as comp,k as data};
