import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-DWhzy7sT.js";const p={},e=t('<h1 id="flexypool-使用指南" tabindex="-1"><a class="header-anchor" href="#flexypool-使用指南"><span>FlexyPool 使用指南</span></a></h1><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p>在本教程中，我们将学习如何使用 FlexyPool 与 Spring Boot 和 H2 结合 HikariCP。这是一个构建在主要连接池之上的强大连接池管理器。</p><h2 id="_2-flexypool-是什么" tabindex="-1"><a class="header-anchor" href="#_2-flexypool-是什么"><span>2. FlexyPool 是什么？</span></a></h2><p>连接池是现代 Web 应用程序的重要方面。因为它确保数据库连接在多个客户端之间共享。这就是该技术允许更快、更有效地访问数据库的方式。</p><p>然而，管理连接池可能是一个复杂且具有挑战性的任务。当客户端数量和应用程序复杂性增加时，这一点尤为明显。这正是 FlexyPool 派上用场的地方。</p><p>FlexyPool 是一个强大的连接池管理工具。实际上，它使管理数据库连接和优化性能变得容易。简单来说，FlexyPool 充当主要连接池的代理，如 Hikari、C3P0、DBCP2、Tomcat 和 Vibur。<strong>为了实现其目标，该库提供了指标和故障转移策略，以帮助按需调整给定池的大小</strong>：</p><h3 id="_2-1-flexypool-属性" tabindex="-1"><a class="header-anchor" href="#_2-1-flexypool-属性"><span>2.1. FlexyPool 属性</span></a></h3><p>FlexyPool 提供了两个重要属性：</p><ul><li><strong>connectionAcquireTimeThresholdMillis</strong>：指定连接获取请求的时间阈值。超过此时间，将发布 ConnectionAcquireTimeThresholdExceededEvent。</li><li><strong>connectionLeaseTimeThresholdMillis</strong>：这是连接可以从池中租用的最大时间，超过此时间将返回池。当池超过此阈值时，FlexyPool 会发布 ConnectionLeaseTimeThresholdExceededEvent。</li></ul><h3 id="_2-2-flexypool-策略" tabindex="-1"><a class="header-anchor" href="#_2-2-flexypool-策略"><span>2.2. FlexyPool 策略</span></a></h3><p><strong>FlexyPool 提供两种策略来响应连接池中的连接获取失败。</strong></p><p>第一种策略是 IncrementPoolOnTimeoutConnectionAcquiringStrategy。使用此策略，如果在连接获取期间发生超时，FlexyPool 将增加目标连接池的最大大小。该策略有两个选项 - maxOverflowPoolSize 和 timeoutMillis。</p><p>maxOverflowPoolSize 设置目标连接池可以扩展到的最大限制。</p><p>timeoutMillis 设置尝试池增加之前的持续时间。默认值为连接池超时值。</p><p>策略 RetryConnectionAcquiringStrategy 指示 FlexyPool 在放弃之前，从池中重试获取连接 retryAttempts 次。retryAttempts 代表尝试的重试次数。</p><p>我们将在 FlexyPoolDataSource 配置中设置所有这些策略。</p><h2 id="_3-安装" tabindex="-1"><a class="header-anchor" href="#_3-安装"><span>3. 安装</span></a></h2><p>首先，让我们安装 HikariCP 连接池：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>````com.zaxxer````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>````HikariCP````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>````\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```5.1.0```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们将添加 FlexyPool 依赖项、HikariCP 适配器和 Micrometer 适配器：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>````com.vladmihalcea.flexy-pool````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>````flexy-hikaricp````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>````\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```2.2.3```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>`\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>`\n            ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>````com.vladmihalcea.flexy-pool````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>````\n            ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>````flexy-dropwizard-metrics````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>````\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>`\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>````com.vladmihalcea.flexy-pool````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>````flexy-micrometer-metrics````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>````\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```2.2.3```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于我们使用 Micrometer 作为指标实现，我们排除了默认的 Dropwizard-Metrics。<strong>此外，FlexyPool 还为其他支持的连接池框架提供了安装指南</strong>。如果使用的 Java 版本低于 1.8，也建议查阅它。</p><h2 id="_4-配置" tabindex="-1"><a class="header-anchor" href="#_4-配置"><span>4. 配置</span></a></h2><p>**要让 FlexyPool 运行起来，我们首先需要一个 FlexyPoolDataSource 数据源。**它需要一个特定于使用的连接池的数据源，在我们的情况下是 HikariDataSource 数据源。让我们设置它们。</p><h3 id="_4-1-hikaridatasource-配置" tabindex="-1"><a class="header-anchor" href="#_4-1-hikaridatasource-配置"><span>4.1. HikariDataSource 配置</span></a></h3><p>首先，我们使用内存中的 H2 数据库配置 Hikari 数据源：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">HikariDataSource</span> <span class="token function">hikariDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">HikariConfig</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HikariConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    config<span class="token punctuation">.</span><span class="token function">setJdbcUrl</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc:h2:mem:test;DB_CLOSE_DELAY=-1;INIT=runscript from &#39;classpath:/db.sql&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    config<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    config<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    config<span class="token punctuation">.</span><span class="token function">addDataSourceProperty</span><span class="token punctuation">(</span><span class="token string">&quot;cachePrepStmts&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    config<span class="token punctuation">.</span><span class="token function">addDataSourceProperty</span><span class="token punctuation">(</span><span class="token string">&quot;prepStmtCacheSize&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;250&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    config<span class="token punctuation">.</span><span class="token function">addDataSourceProperty</span><span class="token punctuation">(</span><span class="token string">&quot;prepStmtCacheSqlLimit&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2048&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    config<span class="token punctuation">.</span><span class="token function">addDataSourceProperty</span><span class="token punctuation">(</span><span class="token string">&quot;minimumPoolSize&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    config<span class="token punctuation">.</span><span class="token function">addDataSourceProperty</span><span class="token punctuation">(</span><span class="token string">&quot;maximumPoolSize&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    config<span class="token punctuation">.</span><span class="token function">addDataSourceProperty</span><span class="token punctuation">(</span><span class="token string">&quot;connectionTimeout&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HikariDataSource</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们添加了 maximumPoolSize 和 connectionTimeout 属性。正如我们之前看到的，它们对 FlexyPool 的 IncrementPoolOnTimeoutConnectionAcquiringStrategy 很有用。</p><p>接下来，我们使用 HikariDataSource 配置一个配置 Bean：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">Configuration</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HikariDataSource</span><span class="token punctuation">&gt;</span></span>````` <span class="token function">flexypoolConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">HikariDataSource</span> dataSource <span class="token operator">=</span> <span class="token function">hikariDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Configuration<span class="token punctuation">.</span>Builder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dataSource<span class="token punctuation">,</span> <span class="token class-name">HikariCPPoolAdapter</span><span class="token punctuation">.</span><span class="token constant">FACTORY</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">setMetricsFactory</span><span class="token punctuation">(</span><span class="token class-name">MicrometerMetrics</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">setConnectionProxyFactory</span><span class="token punctuation">(</span><span class="token class-name">ConnectionDecoratorFactoryResolver</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">setMetricLogReporterMillis</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">setMetricNamingUniqueName</span><span class="token punctuation">(</span><span class="token class-name">UniqueNamingStrategy</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">setJmxEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">setJmxAutoStart</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">setConnectionAcquireTimeThresholdMillis</span><span class="token punctuation">(</span><span class="token number">50L</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">setConnectionLeaseTimeThresholdMillis</span><span class="token punctuation">(</span><span class="token number">250L</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">setEventListenerResolver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>\n        <span class="token keyword">new</span> <span class="token class-name">ConnectionAcquireTimeoutEventListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token keyword">new</span> <span class="token class-name">ConnectionAcquireTimeThresholdExceededEventListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token keyword">new</span> <span class="token class-name">ConnectionLeaseTimeThresholdExceededEventListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此配置：</p><ul><li>启用了 JMX 报告</li><li>将指标实现设置为 Micrometer。Micrometer 适配器默认使用 SimpleMetricsRegistry。但是，它可以定制以使用集成的监控报告工具，如 Ganglia 或 Graphite。</li><li>为各种连接事件添加了侦听器：ConnectionAcquireTimeoutEvent、ConnectionAcquireTimeThresholdExceededEvent 和 ConnectionLeaseTimeThresholdExceeded。值得注意的是，这些侦听器是同步的，不应执行耗时的任务。</li><li>将连接租用时间设置为 250 毫秒</li><li>将连接获取时间设置为 50 毫秒</li></ul><h3 id="_4-2-flexypooldatasource-配置" tabindex="-1"><a class="header-anchor" href="#_4-2-flexypooldatasource-配置"><span>4.2. FlexyPoolDataSource 配置</span></a></h3><p>让我们配置一个 FlexyPoolDataSource Bean：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>initMethod <span class="token operator">=</span> <span class="token string">&quot;start&quot;</span><span class="token punctuation">,</span> destroyMethod <span class="token operator">=</span> <span class="token string">&quot;stop&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">FlexyPoolDataSource</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HikariDataSource</span><span class="token punctuation">&gt;</span></span>````` <span class="token function">flexypoolDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Configuration</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HikariDataSource</span><span class="token punctuation">&gt;</span></span>````` configuration <span class="token operator">=</span> <span class="token function">flexypoolConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FlexyPoolDataSource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>\n      configuration<span class="token punctuation">,</span>\n      <span class="token keyword">new</span> <span class="token class-name">IncrementPoolOnTimeoutConnectionAcquiringStrategy<span class="token punctuation">.</span>Factory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token keyword">new</span> <span class="token class-name">RetryConnectionAcquiringStrategy<span class="token punctuation">.</span>Factory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个 FlexyPoolDataSource 在连接超时时向 Hikari 池添加五个额外的连接。如果池无法检索到连接，它还最多重试两次。</p><p>最后，我们可以通过调用 FlexyPoolDataSource 来运行我们的应用程序：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlexypoolDemoApplication</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">FlexyPoolDataSource</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HikariDataSource</span><span class="token punctuation">&gt;</span></span>````` poolDataSource<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">FlexypoolDemoApplication</span><span class="token punctuation">(</span><span class="token class-name">FlexyPoolDataSource</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HikariDataSource</span><span class="token punctuation">&gt;</span></span>````` poolDataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">FlexypoolDemoApplication</span><span class="token punctuation">.</span>poolDataSource <span class="token operator">=</span> poolDataSource<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span>``` <span class="token function">getEmployees</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> <span class="token constant">SQL_QUERY</span> <span class="token operator">=</span> <span class="token string">&quot;select * from emp&quot;</span><span class="token punctuation">;</span>\n        <span class="token class-name">List</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span>``` employees<span class="token punctuation">;</span>\n        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Connection</span> con <span class="token operator">=</span> poolDataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">PreparedStatement</span> pst <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token constant">SQL_QUERY</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> pst<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            employees <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">Employee</span> employee<span class="token punctuation">;</span>\n            <span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                employee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                employee<span class="token punctuation">.</span><span class="token function">setEmpNo</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">&quot;empno&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                employee<span class="token punctuation">.</span><span class="token function">setEname</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;ename&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                employee<span class="token punctuation">.</span><span class="token function">setJob</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;job&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                employee<span class="token punctuation">.</span><span class="token function">setMgr</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">&quot;mgr&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                employee<span class="token punctuation">.</span><span class="token function">setHiredate</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token string">&quot;hiredate&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                employee<span class="token punctuation">.</span><span class="token function">setSal</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">&quot;sal&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                employee<span class="token punctuation">.</span><span class="token function">setComm</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">&quot;comm&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                employee<span class="token punctuation">.</span><span class="token function">setDeptno</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">&quot;deptno&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                employees<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> employees<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>\n        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">FlexypoolDemoApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">List</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span>``` employees <span class="token operator">=</span> <span class="token function">getEmployees</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>employees<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-结论" tabindex="-1"><a class="header-anchor" href="#_5-结论"><span>5. 结论</span></a></h2><p>在本文中，我们学习了如何使用 HikariCP 连接池与 Spring Boot 和 H2 结合使用 FlexyPool。</p>',42),o=[e];function c(l,i){return a(),s("div",null,o)}const r=n(p,[["render",c],["__file","2024-07-06-A Guide to FlexyPool.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-06/2024-07-06-A%20Guide%20to%20FlexyPool.html","title":"FlexyPool 使用指南","lang":"zh-CN","frontmatter":{"date":"2023-04-01T00:00:00.000Z","category":["Spring","FlexyPool"],"tag":["Spring Boot","H2","HikariCP"],"head":[["meta",{"name":"keywords","content":"FlexyPool, Spring Boot, HikariCP, 数据库连接池, 连接池管理"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-06/2024-07-06-A%20Guide%20to%20FlexyPool.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"FlexyPool 使用指南"}],["meta",{"property":"og:description","content":"FlexyPool 使用指南 1. 概述 在本教程中，我们将学习如何使用 FlexyPool 与 Spring Boot 和 H2 结合 HikariCP。这是一个构建在主要连接池之上的强大连接池管理器。 2. FlexyPool 是什么？ 连接池是现代 Web 应用程序的重要方面。因为它确保数据库连接在多个客户端之间共享。这就是该技术允许更快、更有效..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-06T18:58:48.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Spring Boot"}],["meta",{"property":"article:tag","content":"H2"}],["meta",{"property":"article:tag","content":"HikariCP"}],["meta",{"property":"article:published_time","content":"2023-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-06T18:58:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"FlexyPool 使用指南\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-06T18:58:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"FlexyPool 使用指南 1. 概述 在本教程中，我们将学习如何使用 FlexyPool 与 Spring Boot 和 H2 结合 HikariCP。这是一个构建在主要连接池之上的强大连接池管理器。 2. FlexyPool 是什么？ 连接池是现代 Web 应用程序的重要方面。因为它确保数据库连接在多个客户端之间共享。这就是该技术允许更快、更有效..."},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. FlexyPool 是什么？","slug":"_2-flexypool-是什么","link":"#_2-flexypool-是什么","children":[{"level":3,"title":"2.1. FlexyPool 属性","slug":"_2-1-flexypool-属性","link":"#_2-1-flexypool-属性","children":[]},{"level":3,"title":"2.2. FlexyPool 策略","slug":"_2-2-flexypool-策略","link":"#_2-2-flexypool-策略","children":[]}]},{"level":2,"title":"3. 安装","slug":"_3-安装","link":"#_3-安装","children":[]},{"level":2,"title":"4. 配置","slug":"_4-配置","link":"#_4-配置","children":[{"level":3,"title":"4.1. HikariDataSource 配置","slug":"_4-1-hikaridatasource-配置","link":"#_4-1-hikaridatasource-配置","children":[]},{"level":3,"title":"4.2. FlexyPoolDataSource 配置","slug":"_4-2-flexypooldatasource-配置","link":"#_4-2-flexypooldatasource-配置","children":[]}]},{"level":2,"title":"5. 结论","slug":"_5-结论","link":"#_5-结论","children":[]}],"git":{"createdTime":1720292328000,"updatedTime":1720292328000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":4.16,"words":1248},"filePathRelative":"posts/baeldung/2024-07-06/2024-07-06-A Guide to FlexyPool.md","localizedDate":"2023年4月1日","excerpt":"\\n<h2>1. 概述</h2>\\n<p>在本教程中，我们将学习如何使用 FlexyPool 与 Spring Boot 和 H2 结合 HikariCP。这是一个构建在主要连接池之上的强大连接池管理器。</p>\\n<h2>2. FlexyPool 是什么？</h2>\\n<p>连接池是现代 Web 应用程序的重要方面。因为它确保数据库连接在多个客户端之间共享。这就是该技术允许更快、更有效地访问数据库的方式。</p>\\n<p>然而，管理连接池可能是一个复杂且具有挑战性的任务。当客户端数量和应用程序复杂性增加时，这一点尤为明显。这正是 FlexyPool 派上用场的地方。</p>\\n<p>FlexyPool 是一个强大的连接池管理工具。实际上，它使管理数据库连接和优化性能变得容易。简单来说，FlexyPool 充当主要连接池的代理，如 Hikari、C3P0、DBCP2、Tomcat 和 Vibur。<strong>为了实现其目标，该库提供了指标和故障转移策略，以帮助按需调整给定池的大小</strong>：</p>","autoDesc":true}');export{r as comp,d as data};
