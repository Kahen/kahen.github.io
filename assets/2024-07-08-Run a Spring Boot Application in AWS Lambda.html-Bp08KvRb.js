import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-DNwYcgl6.js";const e={},p=t('<h1 id="在aws-lambda上运行spring-boot应用程序" tabindex="-1"><a class="header-anchor" href="#在aws-lambda上运行spring-boot应用程序"><span>在AWS Lambda上运行Spring Boot应用程序</span></a></h1><p>在本教程中，我们将探讨如何使用无服务器应用模型（Serverless Application Model，SAM）框架将Spring Boot应用程序部署到AWS Lambda上。</p><p>我们可能会发现这种方法对于将现有的API服务器迁移到无服务器非常有用。</p><p>通过这样做，我们可以利用AWS Lambda的可扩展性和按执行付费的定价模型，以高效且成本效益的方式运行我们的应用程序。</p><p>AWS Lambda是由Amazon Web Services（AWS）提供的无服务器计算服务。它允许我们在不需要提供或管理服务器的情况下运行我们的代码。</p><p>Lambda函数与传统服务器之间的一个关键区别在于<strong>Lambda函数是事件驱动的，并且生命周期非常短</strong>。</p><p>与像服务器一样持续运行不同，Lambda函数只在响应特定事件时才运行，例如API请求、队列中的消息或S3中的文件上传。</p><p>我们应该注意，Lambda在处理第一个请求时需要启动时间。这被称为“冷启动”。</p><p>如果短时间内下一个请求到来，可能会使用相同的Lambda运行时，这被称为“热启动”。如果有多个请求同时到达，会启动多个Lambda运行时。</p><p>由于<strong>Spring Boot的启动时间相对较长</strong>，与Lambda理想的毫秒级启动时间相比，我们将讨论这如何影响性能。</p><p>让我们通过修改_pom.xml_并添加一些配置来迁移现有的Spring Boot项目。</p><p>支持的Spring Boot版本是2.2.x、2.3.x、2.4.x、2.5.x、2.6.x和2.7.x。</p><h3 id="_3-1-示例spring-boot-api" tabindex="-1"><a class="header-anchor" href="#_3-1-示例spring-boot-api"><span>3.1. 示例Spring Boot API</span></a></h3><p>我们的应用程序由一个简单的API组成，它处理对_api/v1/users_端点的任何_GET_请求：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>\n<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/api/v1/&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProfileController</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;users&quot;</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON_VALUE</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">List</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span>` <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Doe&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;john.doe@baeldung.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                       <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Doe&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;john.doe-2@baeldung.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>响应的是一系列_User_对象：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> surname<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> emailAddress<span class="token punctuation">;</span>\n\n    <span class="token comment">// 标准构造函数，getter和setter</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们启动应用程序并调用API：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">java</span> <span class="token parameter variable">-jar</span> app.jar\n$ <span class="token function">curl</span> <span class="token parameter variable">-X</span> GET http://localhost:8080/api/v1/users <span class="token parameter variable">-H</span> <span class="token string">&quot;Content-Type: application/json&quot;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>API响应是：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">[</span>\n   <span class="token punctuation">{</span>\n      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;surname&quot;</span><span class="token operator">:</span><span class="token string">&quot;Doe&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;email&quot;</span><span class="token operator">:</span><span class="token string">&quot;john.doe@baeldung.com&quot;</span>\n   <span class="token punctuation">}</span><span class="token punctuation">,</span>\n   <span class="token punctuation">{</span>\n      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;surname&quot;</span><span class="token operator">:</span><span class="token string">&quot;Doe&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;email&quot;</span><span class="token operator">:</span><span class="token string">&quot;john.doe-2@baeldung.com&quot;</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-通过maven将spring-boot应用程序转换为lambda" tabindex="-1"><a class="header-anchor" href="#_3-2-通过maven将spring-boot应用程序转换为lambda"><span>3.2. 通过Maven将Spring Boot应用程序转换为Lambda</span></a></h3><p>为了在Lambda上运行我们的应用程序，让我们添加_aws-serverless-java-container-springboot2_依赖到我们的_pom.xml_文件：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>``com.amazonaws.serverless``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>``aws-serverless-java-container-springboot2``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>``${springboot2.aws.version}``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>``\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们将添加_maven-shade-plugin_并移除_spring-boot-maven-plugin_。</p><p>Maven Shade插件用于创建一个阴影（或超级）JAR文件。<strong>一个阴影JAR文件是一个自包含的可执行JAR文件，它将所有依赖项包含在JAR文件本身中，以便它可以独立运行</strong>：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>`\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>``org.apache.maven.plugins``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>``maven-shade-plugin``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>``3.3.0``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>``\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>``\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>createDependencyReducedPom</span><span class="token punctuation">&gt;</span></span>`false`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>createDependencyReducedPom</span><span class="token punctuation">&gt;</span></span>`\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>``\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">&gt;</span></span>`\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">&gt;</span></span>`\n            `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">&gt;</span></span>`package`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">&gt;</span></span>`\n            `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">&gt;</span></span>`\n                `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">&gt;</span></span>`shade`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">&gt;</span></span>`\n            `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">&gt;</span></span>`\n            ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>``\n                `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactSet</span><span class="token punctuation">&gt;</span></span>`\n                    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludes</span><span class="token punctuation">&gt;</span></span>`\n                        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">&gt;</span></span>`org.apache.tomcat.embed:*`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">&gt;</span></span>`\n                    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>excludes</span><span class="token punctuation">&gt;</span></span>`\n                `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactSet</span><span class="token punctuation">&gt;</span></span>`\n            ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>``\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总的来说，此配置将在Maven构建的打包阶段生成一个阴影JAR文件。</p><p>JAR文件将包括Spring Boot通常会打包的所有类和资源，除了Tomcat的那些。我们不需要为AWS Lambda使用嵌入式Web容器。</p><h2 id="_4-lambda处理器" tabindex="-1"><a class="header-anchor" href="#_4-lambda处理器"><span>4. Lambda处理器</span></a></h2><p>下一步是创建一个实现_RequestHandler_的类。</p><p><strong>_RequestHandler_是一个定义了单个方法_handleRequest_的接口</strong>。根据我们正在构建的Lambda的类型，有几种不同的处理请求的方式。</p><p>在这种情况下，我们正在处理来自API Gateway的请求，所以我们可以使用_RequestHandler<code>&lt;AwsProxyRequest, AwsProxyResponse&gt;</code>_版本，其中输入是API Gateway请求，响应是API Gateway响应。</p><p>由AWS提供的Spring Boot无服务器库为我们提供了一个特殊的_SpringBootLambdaContainerHandler_类，它用于通过Spring处理API调用，从而使Spring Boot API服务器代码库表现得像Lambda。</p><h3 id="_4-1-启动时间" tabindex="-1"><a class="header-anchor" href="#_4-1-启动时间"><span>4.1. 启动时间</span></a></h3><p>我们应该注意，在AWS Lambda中，<strong>初始化阶段的时间限制为10秒</strong>。</p><p>如果我们的应用程序启动时间超过这个时间限制，AWS Lambda将超时并尝试启动一个新的Lambda运行时。</p><p>根据我们的Spring Boot应用程序启动速度的快慢，我们可以选择两种初始化Lambda处理器的方式：</p><ul><li>同步 – 我们的应用程序启动时间远小于时间限制</li><li>异步 – 我们的应用程序启动时间可能较长</li></ul><h3 id="_4-2-同步初始化" tabindex="-1"><a class="header-anchor" href="#_4-2-同步初始化"><span>4.2. 同步初始化</span></a></h3><p>让我们在我们的Spring Boot项目中定义一个新的处理器：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LambdaHandler</span> <span class="token keyword">implements</span> <span class="token class-name">RequestHandler</span>``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AwsProxyRequest</span><span class="token punctuation">,</span> <span class="token class-name">AwsProxyResponse</span><span class="token punctuation">&gt;</span></span>`````` <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SpringBootLambdaContainerHandler</span>``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AwsProxyRequest</span><span class="token punctuation">,</span> <span class="token class-name">AwsProxyResponse</span><span class="token punctuation">&gt;</span></span>`````` handler<span class="token punctuation">;</span>\n\n    <span class="token keyword">static</span> <span class="token punctuation">{</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            handler <span class="token operator">=</span> <span class="token class-name">SpringBootLambdaContainerHandler</span><span class="token punctuation">.</span><span class="token function">getAwsProxyHandler</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ContainerInitializationException</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;Unable to load spring boot application&quot;</span><span class="token punctuation">,</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span> \n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">AwsProxyResponse</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token class-name">AwsProxyRequest</span> input<span class="token punctuation">,</span> <span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> handler<span class="token punctuation">.</span><span class="token function">proxy</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用_SpringBootLambdaContainerHandler_来处理API Gateway请求，并通过我们的应用程序上下文传递它们。我们在_LambaHandler_类的静态构造函数中初始化此处理器，并从_handleRequest_函数调用它。</p><p><strong>然后处理器调用Spring Boot应用程序中的适当方法来处理请求</strong>并生成响应。最后，它将响应返回给Lambda运行时，以便传回API Gateway。</p><p>让我们通过Lambda处理器调用我们的API：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">whenTheUsersPathIsInvokedViaLambda_thenShouldReturnAList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n    <span class="token class-name">LambdaHandler</span> lambdaHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">AwsProxyRequest</span> req <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AwsProxyRequestBuilder</span><span class="token punctuation">(</span><span class="token string">&quot;/api/v1/users&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;GET&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">AwsProxyResponse</span> resp <span class="token operator">=</span> lambdaHandler<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> lambdaContext<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertNotNull</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> resp<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-异步初始化" tabindex="-1"><a class="header-anchor" href="#_4-3-异步初始化"><span>4.3. 异步初始化</span></a></h3><p>有时Spring Boot应用程序启动可能较慢。这是因为，在启动阶段，Spring引擎构建其上下文，扫描并初始化代码库中的所有bean。</p><p>这个过程可能会影响启动时间，并在无服务器环境中造成许多问题。</p><p>为了解决这个问题，我们可以定义一个新的处理器：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsynchronousLambdaHandler</span> <span class="token keyword">implements</span> <span class="token class-name">RequestHandler</span>``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AwsProxyRequest</span><span class="token punctuation">,</span> <span class="token class-name">AwsProxyResponse</span><span class="token punctuation">&gt;</span></span>`````` <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">SpringBootLambdaContainerHandler</span>``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AwsProxyRequest</span><span class="token punctuation">,</span> <span class="token class-name">AwsProxyResponse</span><span class="token punctuation">&gt;</span></span>`````` handler<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">AsynchronousLambdaHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ContainerInitializationException</span> <span class="token punctuation">{</span>\n        handler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SpringBootLambdaContainerHandler</span>``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AwsProxyRequest</span><span class="token punctuation">,</span> <span class="token class-name">AwsProxyResponse</span><span class="token punctuation">&gt;</span></span>``````<span class="token punctuation">)</span>\n          <span class="token keyword">new</span> <span class="token class-name">SpringBootProxyHandlerBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">springBootApplication</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">asyncInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">buildAndInitialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">AwsProxyResponse</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token class-name">AwsProxyRequest</span> input<span class="token punctuation">,</span> <span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> handler<span class="token punctuation">.</span><span class="token function">proxy</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个方法与前一个类似。在这种情况下，_SpringBootLambdaContainerHandler_是在请求处理器的对象构造函数中构建的，而不是静态构造函数。因此，它在Lambda启动的不同阶段执行。</p><h2 id="_5-部署应用程序" tabindex="-1"><a class="header-anchor" href="#_5-部署应用程序"><span>5. 部署应用程序</span></a></h2><p>AWS SAM（Serverless Application Model）是一个用于在AWS上构建无服务器应用程序的开源框架。</p><p>在为我们的Spring Boot应用程序定义了Lambda处理器之后，我们需要准备所有组件，使用SAM进行部署。</p><h3 id="_5-1-sam模板" tabindex="-1"><a class="header-anchor" href="#_5-1-sam模板"><span>5.1. SAM模板</span></a></h3><p><strong>SAM模板（SAM YAML）是一个YAML格式的文件，定义了部署无服务器应用程序所需的AWS资源</strong>。基本上，它提供了一种声明性的方式来指定我们无服务器应用程序的配置。</p><p>所以，让我们定义我们的_template.yaml_：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">AWSTemplateFormatVersion</span><span class="token punctuation">:</span> <span class="token string">&#39;2010-09-09&#39;</span>\n<span class="token key atrule">Transform</span><span class="token punctuation">:</span> AWS<span class="token punctuation">:</span><span class="token punctuation">:</span>Serverless<span class="token punctuation">-</span><span class="token datetime number">2016-10-31</span>\n\n<span class="token key atrule">Globals</span><span class="token punctuation">:</span>\n  <span class="token key atrule">Function</span><span class="token punctuation">:</span>\n    <span class="token key atrule">Timeout</span><span class="token punctuation">:</span> <span class="token number">30</span>\n\n<span class="token key atrule">Resources</span><span class="token punctuation">:</span>\n  <span class="token key atrule">ProfileApiFunction</span><span class="token punctuation">:</span>\n    <span class="token key atrule">Type</span><span class="token punctuation">:</span> AWS<span class="token punctuation">:</span><span class="token punctuation">:</span>Serverless<span class="token punctuation">:</span><span class="token punctuation">:</span>Function\n    <span class="token key atrule">Properties</span><span class="token punctuation">:</span>\n      <span class="token key atrule">CodeUri</span><span class="token punctuation">:</span> .\n      <span class="token key atrule">Handler</span><span class="token punctuation">:</span> com.baeldung.aws.handler.LambdaHandler<span class="token punctuation">:</span><span class="token punctuation">:</span>handleRequest\n      <span class="token key atrule">Runtime</span><span class="token punctuation">:</span> java11\n      <span class="token key atrule">AutoPublishAlias</span><span class="token punctuation">:</span> production\n      <span class="token key atrule">SnapStart</span><span class="token punctuation">:</span>\n        <span class="token key atrule">ApplyOn</span><span class="token punctuation">:</span> PublishedVersions\n      <span class="token key atrule">Architectures</span><span class="token punctuation">:</span>\n        <span class="token punctuation">-</span> x86_64\n      <span class="token key atrule">MemorySize</span><span class="token punctuation">:</span> <span class="token number">2048</span>\n      <span class="token key atrule">Environment</span><span class="token punctuation">:</span>\n        <span class="token key atrule">Variables</span><span class="token punctuation">:</span>\n          <span class="token key atrule">JAVA_TOOL_OPTIONS</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>XX<span class="token punctuation">:</span>+TieredCompilation <span class="token punctuation">-</span>XX<span class="token punctuation">:</span>TieredStopAtLevel=1\n      <span class="token key atrule">Events</span><span class="token punctuation">:</span>\n        <span class="token key atrule">HelloWorld</span><span class="token punctuation">:</span>\n          <span class="token key atrule">Type</span><span class="token punctuation">:</span> Api\n          <span class="token key atrule">Properties</span><span class="token punctuation">:</span>\n            <span class="token key atrule">Path</span><span class="token punctuation">:</span> /<span class="token punctuation">{</span>proxy+<span class="token punctuation">}</span>\n            <span class="token key atrule">Method</span><span class="token punctuation">:</span> ANY\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们讨论一下我们配置中的一些字段：</p><ul><li><em>type</em> – 表示这是一个使用_AWS::Serverless::Function_资源类型定义的AWS Lambda函数。</li><li><em>CodeUri</em> – 指定函数代码的位置。</li><li><em>AutoPublishAlias</em> – 指定AWS Lambda在自动发布函数新版本时应使用的别名。</li><li><em>Handler</em> – 指定Lambda处理器类。</li><li><em>Events</em> – 指定触发Lambda函数的事件。</li><li><em>Type</em> – 指定这是一个_Api_事件源。</li><li><em>Properties</em> – 对于API事件，这定义了API Gateway应该响应的HTTP方法和路径。</li></ul><h3 id="_5-2-sam部署" tabindex="-1"><a class="header-anchor" href="#_5-2-sam部署"><span>5.2. SAM部署</span></a></h3><p>是时候将我们的应用程序作为AWS Lambda部署了。</p><p>第一步是下载并安装AWS CLI，然后是AWS SAM CLI。</p><p>让我们在_path_上运行AWS SAM CLI，该路径上存在_template.yaml_，并执行命令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ sam build\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当我们运行这个命令时，AWS SAM CLI将把我们的Lambda函数的源代码和依赖项打包和构建成一个ZIP文件，作为我们的部署包。</p><p>让我们本地部署我们的应用程序：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ sam <span class="token builtin class-name">local</span> start-api\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来，让我们通过_sam local_触发我们的Spring Boot服务，当它运行时：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> localhost:3000/api/v1/users\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>API响应与之前相同：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">[</span>\n   <span class="token punctuation">{</span>\n      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;surname&quot;</span><span class="token operator">:</span><span class="token string">&quot;Doe&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;email&quot;</span><span class="token operator">:</span><span class="token string">&quot;john.doe@baeldung.com&quot;</span>\n   <span class="token punctuation">}</span><span class="token punctuation">,</span>\n   <span class="token punctuation">{</span>\n      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;surname&quot;</span><span class="token operator">:</span><span class="token string">&quot;Doe&quot;</span><span class="token punctuation">,</span>\n      <span class="token property">&quot;email&quot;</span><span class="token operator">:</span><span class="token string">&quot;john.doe-2@baeldung.com&quot;</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们也可以将其部署到AWS：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ sam deploy\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_6-在lambda中使用spring的限制" tabindex="-1"><a class="header-anchor" href="#_6-在lambda中使用spring的限制"><span>6. 在Lambda中使用Spring的限制</span></a></h2><p>尽管Spring是一个强大且灵活的框架，用于构建复杂且可扩展的应用程序，但它并不总是Lambda环境中的最佳选择。</p><p>主要原因是<strong>Lambda旨在成为小的、单一目的的函数，它们能够快速高效地执行</strong>。</p><h3 id="_6-1-冷启动" tabindex="-1"><a class="header-anchor" href="#_6-1-冷启动"><span>6.1. 冷启动</span></a></h3><p>AWS Lambda函数的冷启动时间是在处理事件之前初始化函数环境所需的时间。</p><p>有几个因素可能影响Lambda函数的冷启动性能：</p><ul><li><p>包大小 – 更大的包大小可能导致更长的初始化时间，并导致更慢的冷启动。</p></li><li><p>初始化时间 – Spring框架初始化并设置应用程序上下文所需的时间。</p><p>这包括初始化任何依赖项，如数据库连接、HTTP客户端或缓存框架。</p></li><li><p>自定义初始化逻辑 – 重要的是要最小化自定义初始化逻辑的数量，并确保它针对冷启动进行了优化。 <strong>我们可以使用Lambda SnapStart来提高我们的启动时间</strong>。</p></li></ul><h3 id="_6-2-数据库连接池" tabindex="-1"><a class="header-anchor" href="#_6-2-数据库连接池"><span>6.2. 数据库连接池</span></a></h3><p>在AWS Lambda这样的无服务器环境中，函数按需执行，维护连接池可能具有挑战性。</p><p><strong>当事件触发Lambda时，AWS Lambda引擎可以创建应用程序的新实例</strong>。在请求之间，运行时被暂停或可能被终止。</p><p>许多连接池持有打开的连接。这可能导致在热启动后重用池时出现混淆或错误，并且可能导致某些数据库引擎的资源泄漏。简而言之，标准连接池依赖于服务器持续运行并维护连接。</p><p>为了解决这个问题，AWS提供了一个名为RDS Proxy的解决方案，它为Lambda函数提供了连接池服务。</p><p>通过使用RDS Proxy，Lambda函数可以连接到数据库，而无需维护自己的连接池。</p><h2 id="_7-结论" tabindex="-1"><a class="header-anchor" href="#_7-结论"><span>7. 结论</span></a></h2><p>在本文中，我们学习了如何将现有的Spring Boot API应用程序转换为AWS Lambda。</p><p>我们查看了AWS提供的帮助库。我们还考虑了Spring Boot的较慢启动时间可能如何影响我们的设置方式。</p><p>然后我们查看了如何使用SAM CLI部署Lambda并进行测试。</p><p>如往常一样，示例的完整源代码可以在GitHub上找到。</p><p><img src="https://www.baeldung.com/wp-content/themes/baeldung/icon/logo.svg" alt="img" loading="lazy"><img src="https://secure.gravatar.com/avatar/dc417739e22ae675b0e1f7012bbddaa5?s=50&amp;r=g" alt="img" loading="lazy"><img src="https://secure.gravatar.com/avatar/6c3babf3d6ea5d49c2bc4e7957870d75?s=50&amp;r=g" alt="img" loading="lazy"><img src="https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png" alt="img" loading="lazy"><img src="https://www.baeldung.com/wp-content/uploads/2018/07/Microservice-BookCover-1.png" alt="img" loading="lazy"><img src="https://www.baeldung.com/wp-content/uploads/2018/07/MicroserviceSpring-Icon.png" alt="img" loading="lazy"></p><p>OK</p>',95),o=[p];function l(c,i){return s(),a("div",null,o)}const d=n(e,[["render",l],["__file","2024-07-08-Run a Spring Boot Application in AWS Lambda.html.vue"]]),k=JSON.parse('{"path":"/posts/baeldung/2024-07-08/2024-07-08-Run%20a%20Spring%20Boot%20Application%20in%20AWS%20Lambda.html","title":"在AWS Lambda上运行Spring Boot应用程序","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Spring Boot","AWS Lambda"],"tag":["Serverless","AWS","Deployment"],"head":[["meta",{"name":"keywords","content":"Spring Boot, AWS Lambda, Serverless, Deployment, Java"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-08/2024-07-08-Run%20a%20Spring%20Boot%20Application%20in%20AWS%20Lambda.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"在AWS Lambda上运行Spring Boot应用程序"}],["meta",{"property":"og:description","content":"在AWS Lambda上运行Spring Boot应用程序 在本教程中，我们将探讨如何使用无服务器应用模型（Serverless Application Model，SAM）框架将Spring Boot应用程序部署到AWS Lambda上。 我们可能会发现这种方法对于将现有的API服务器迁移到无服务器非常有用。 通过这样做，我们可以利用AWS Lamb..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.baeldung.com/wp-content/themes/baeldung/icon/logo.svg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-08T01:53:44.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Serverless"}],["meta",{"property":"article:tag","content":"AWS"}],["meta",{"property":"article:tag","content":"Deployment"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-08T01:53:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"在AWS Lambda上运行Spring Boot应用程序\\",\\"image\\":[\\"https://www.baeldung.com/wp-content/themes/baeldung/icon/logo.svg\\",\\"https://secure.gravatar.com/avatar/dc417739e22ae675b0e1f7012bbddaa5?s=50&r=g\\",\\"https://secure.gravatar.com/avatar/6c3babf3d6ea5d49c2bc4e7957870d75?s=50&r=g\\",\\"https://www.baeldung.com/wp-content/uploads/2022/04/announcement-icon.png\\",\\"https://www.baeldung.com/wp-content/uploads/2018/07/Microservice-BookCover-1.png\\",\\"https://www.baeldung.com/wp-content/uploads/2018/07/MicroserviceSpring-Icon.png\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-08T01:53:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"在AWS Lambda上运行Spring Boot应用程序 在本教程中，我们将探讨如何使用无服务器应用模型（Serverless Application Model，SAM）框架将Spring Boot应用程序部署到AWS Lambda上。 我们可能会发现这种方法对于将现有的API服务器迁移到无服务器非常有用。 通过这样做，我们可以利用AWS Lamb..."},"headers":[{"level":3,"title":"3.1. 示例Spring Boot API","slug":"_3-1-示例spring-boot-api","link":"#_3-1-示例spring-boot-api","children":[]},{"level":3,"title":"3.2. 通过Maven将Spring Boot应用程序转换为Lambda","slug":"_3-2-通过maven将spring-boot应用程序转换为lambda","link":"#_3-2-通过maven将spring-boot应用程序转换为lambda","children":[]},{"level":2,"title":"4. Lambda处理器","slug":"_4-lambda处理器","link":"#_4-lambda处理器","children":[{"level":3,"title":"4.1. 启动时间","slug":"_4-1-启动时间","link":"#_4-1-启动时间","children":[]},{"level":3,"title":"4.2. 同步初始化","slug":"_4-2-同步初始化","link":"#_4-2-同步初始化","children":[]},{"level":3,"title":"4.3. 异步初始化","slug":"_4-3-异步初始化","link":"#_4-3-异步初始化","children":[]}]},{"level":2,"title":"5. 部署应用程序","slug":"_5-部署应用程序","link":"#_5-部署应用程序","children":[{"level":3,"title":"5.1. SAM模板","slug":"_5-1-sam模板","link":"#_5-1-sam模板","children":[]},{"level":3,"title":"5.2. SAM部署","slug":"_5-2-sam部署","link":"#_5-2-sam部署","children":[]}]},{"level":2,"title":"6. 在Lambda中使用Spring的限制","slug":"_6-在lambda中使用spring的限制","link":"#_6-在lambda中使用spring的限制","children":[{"level":3,"title":"6.1. 冷启动","slug":"_6-1-冷启动","link":"#_6-1-冷启动","children":[]},{"level":3,"title":"6.2. 数据库连接池","slug":"_6-2-数据库连接池","link":"#_6-2-数据库连接池","children":[]}]},{"level":2,"title":"7. 结论","slug":"_7-结论","link":"#_7-结论","children":[]}],"git":{"createdTime":1720403624000,"updatedTime":1720403624000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":9.1,"words":2730},"filePathRelative":"posts/baeldung/2024-07-08/2024-07-08-Run a Spring Boot Application in AWS Lambda.md","localizedDate":"2022年4月1日","excerpt":"\\n<p>在本教程中，我们将探讨如何使用无服务器应用模型（Serverless Application Model，SAM）框架将Spring Boot应用程序部署到AWS Lambda上。</p>\\n<p>我们可能会发现这种方法对于将现有的API服务器迁移到无服务器非常有用。</p>\\n<p>通过这样做，我们可以利用AWS Lambda的可扩展性和按执行付费的定价模型，以高效且成本效益的方式运行我们的应用程序。</p>\\n<p>AWS Lambda是由Amazon Web Services（AWS）提供的无服务器计算服务。它允许我们在不需要提供或管理服务器的情况下运行我们的代码。</p>\\n<p>Lambda函数与传统服务器之间的一个关键区别在于<strong>Lambda函数是事件驱动的，并且生命周期非常短</strong>。</p>","autoDesc":true}');export{d as comp,k as data};
