import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as a,a as n}from"./app-DpDzgwdT.js";const d={},s=n(`<h1 id="cassandra查询备忘单-baeldung" tabindex="-1"><a class="header-anchor" href="#cassandra查询备忘单-baeldung"><span>Cassandra查询备忘单 | Baeldung</span></a></h1><ol><li>引言</li></ol><p>有时，我们需要一个快速参考指南来开始我们的学习路径。特别是，备忘单是一个包含所有关键信息的文档。</p><p>在本教程中，我们将学习Cassandra查询语言（CQL）的基本概念以及如何使用我们将逐步构建的备忘单来应用它们。</p><ol start="2"><li>Cassandra概览</li></ol><p>Apache Cassandra是一个开源的、NoSQL的、分布式数据存储系统。这意味着它不仅可以在一台服务器上运行，而是可以跨越多个服务器。它还以其高可用性和分区容错性而闻名。</p><p>换句话说，Cassandra数据库的设计灵感来自于CAP定理中的“AP”。</p><p>此外，Cassandra是一个无主架构，具有巨大的可扩展性，最重要的是，它提供了简单的故障检测和恢复。</p><ol start="3"><li>数据类型</li></ol><p>通常，Cassandra支持丰富的数据类型。这些包括原生类型、集合类型、用户定义类型和元组，以及自定义类型。</p><h3 id="_3-1-原生类型" tabindex="-1"><a class="header-anchor" href="#_3-1-原生类型"><span>3.1. 原生类型</span></a></h3><p>原生类型是内置类型，为Cassandra提供了一系列的常量支持。</p><p>首先，字符串是编程世界中非常流行的数据类型。</p><p>CQL为字符串提供了四种不同的数据类型：</p><table><thead><tr><th>数据类型</th><th>支持的常量</th><th>描述</th></tr></thead><tbody><tr><td>ascii</td><td><em>string</em></td><td>ASCII字符字符串</td></tr><tr><td>inet</td><td><em>string</em></td><td>IPv4或IPv6地址字符串</td></tr><tr><td>text</td><td><em>string</em></td><td>UTF8编码的字符串</td></tr><tr><td>varchar</td><td><em>string</em></td><td>UTF8编码的字符串</td></tr></tbody></table><p>布尔值有两种可能的值，要么是_true_要么是_false_：</p><table><thead><tr><th>数据类型</th><th>支持的常量</th><th>描述</th></tr></thead><tbody><tr><td>boolean</td><td><em>boolean</em></td><td><em>true_或_false</em></td></tr></tbody></table><p>使用blob数据类型，我们可以将图像或多媒体数据作为数据库中的二进制流存储：</p><table><thead><tr><th>数据类型</th><th>支持的常量</th><th>描述</th></tr></thead><tbody><tr><td>blob</td><td><em>blob</em></td><td>任意字节</td></tr></tbody></table><p>Duration是一个三符号整数，表示月份、天数和纳秒：</p><table><thead><tr><th>数据类型</th><th>支持的常量</th><th>描述</th></tr></thead><tbody><tr><td>duration</td><td><em>duration</em></td><td>持续时间值</td></tr></tbody></table><p>Cassandra为整数数据提供了广泛的数据类型：</p><table><thead><tr><th>数据类型</th><th>支持的常量</th><th>描述</th></tr></thead><tbody><tr><td>tinyint</td><td><em>integer</em></td><td>8位有符号整数</td></tr><tr><td>smallint</td><td><em>integer</em></td><td>16位有符号整数</td></tr><tr><td>int</td><td><em>integer</em></td><td>32位有符号整数</td></tr><tr><td>bigint</td><td><em>integer</em></td><td>64位有符号长整数</td></tr><tr><td>variant</td><td><em>integer</em></td><td>任意精度整数</td></tr><tr><td>counter</td><td><em>integer</em></td><td>计数器列（64位有符号）</td></tr></tbody></table><p>对于整数和小数，我们有三种数据类型：</p><table><thead><tr><th>数据类型</th><th>支持的常量</th><th>描述</th></tr></thead><tbody><tr><td>decimal</td><td><em>integer, float</em></td><td>可变精度小数</td></tr><tr><td>double</td><td><em>integer, float</em></td><td>64位浮点数</td></tr><tr><td>float</td><td><em>integer, float</em></td><td>32位浮点数</td></tr></tbody></table><p>对于日期和时间相关的需求，Cassandra提供了三种数据类型：</p><table><thead><tr><th>数据类型</th><th>支持的常量</th><th>描述</th></tr></thead><tbody><tr><td>date</td><td><em>integer, string</em></td><td>一个日期值（没有时间）</td></tr><tr><td>time</td><td><em>integer, string</em></td><td>一个时间值（没有日期）</td></tr><tr><td>timestamp</td><td><em>integer, string</em></td><td>一个时间戳（带有日期和时间）</td></tr></tbody></table><p>通常，在使用INSERT或UPDATE命令时，我们必须避免冲突：</p><table><thead><tr><th>数据类型</th><th>支持的常量</th><th>描述</th></tr></thead><tbody><tr><td>uuid</td><td><em>uuid</em></td><td>一个UUID（任何版本）</td></tr><tr><td>timeuuid</td><td><em>uuid</em></td><td>版本1的UUID</td></tr></tbody></table><h3 id="_3-2-集合类型" tabindex="-1"><a class="header-anchor" href="#_3-2-集合类型"><span>3.2. 集合类型</span></a></h3><p>当用户在关系数据库中的一个字段中拥有多个值时，通常将它们存储在单独的表中。例如，用户有多个银行账户、联系信息或电子邮件地址。因此，在这种情况下，我们需要在两个表之间应用连接以检索所有数据。</p><p><strong>Cassandra提供了一种使用集合类型在列中分组和存储数据的方法。</strong></p><p>让我们快速看看这些类型：</p><ul><li><em>set –</em> 唯一值；以无序方式存储</li><li><em>list –</em> 可以包含重复值；顺序很重要</li><li><em>map –</em> 以键值对的形式存储数据</li></ul><h3 id="_3-3-用户定义类型" tabindex="-1"><a class="header-anchor" href="#_3-3-用户定义类型"><span>3.3. 用户定义类型</span></a></h3><p>用户定义类型允许我们在单个列中附加多个数据字段：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TYPE</span> student<span class="token punctuation">.</span>basic_info <span class="token punctuation">(</span>
  birthday <span class="token keyword">timestamp</span><span class="token punctuation">,</span>
  race <span class="token keyword">text</span><span class="token punctuation">,</span>
  weight <span class="token keyword">text</span><span class="token punctuation">,</span>
  height <span class="token keyword">text</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-元组类型" tabindex="-1"><a class="header-anchor" href="#_3-4-元组类型"><span>3.4. 元组类型</span></a></h3><p>元组是用户定义类型的替代品。它使用尖括号创建，并使用逗号分隔符来分隔它包含的元素类型。</p><p>这里是一些简单的元组命令：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 创建一个元组</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> subjects <span class="token punctuation">(</span>
  k <span class="token keyword">int</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>
  v tuple<span class="token identifier"><span class="token punctuation">\`</span>&lt;int, text, float&gt;<span class="token punctuation">\`</span></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 插入值</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> subjects <span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;cs&#39;</span><span class="token punctuation">,</span> <span class="token number">2.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 检索值</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> subjects<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>Cassandra CQL命令</li></ol><p>让我们看看几个类别的CQL命令。</p><h3 id="_4-1-键空间命令" tabindex="-1"><a class="header-anchor" href="#_4-1-键空间命令"><span>4.1. 键空间命令</span></a></h3><p><strong>首先要记住的是，在Cassandra中，键空间就像RDBMS中的数据库一样。</strong> 它是数据的最外层容器，定义了复制策略和其他选项，特别是对于键空间中的所有表。有了这个想法，一个好的通用规则是一个应用程序一个键空间。</p><p>让我们看看相关命令：</p><table><thead><tr><th>命令</th><th>示例</th><th>描述</th></tr></thead><tbody><tr><td>CREATE keyspace</td><td>CREATE KEYSPACE <em>keyspace_name</em> WITH replication = {‘class’:’SimpleStrategy’, ‘replication_factor’ : 2};</td><td>创建一个键空间。</td></tr><tr><td>DESCRIBE keyspace</td><td>DESCRIBE KEYSPACES;</td><td>它将列出所有的键空间。</td></tr><tr><td>USE keyspace</td><td>USE <em>keyspace_name</em>;</td><td>此命令将客户端会话连接到一个键空间。</td></tr><tr><td>ALTER keyspace</td><td>ALTER KEYSPACE <em>keyspace_name</em> WITH REPLICATION = { ‘class’ : ‘SimpleStrategy’, ‘replication_factor’ : 3 } AND DURABLE_WRITES = false;</td><td>更改一个键空间。</td></tr><tr><td>DROP keyspace</td><td>DROP KEYSPACE <em>keyspace_name</em>;</td><td>删除一个键空间。</td></tr></tbody></table><h3 id="_4-2-表命令" tabindex="-1"><a class="header-anchor" href="#_4-2-表命令"><span>4.2. 表命令</span></a></h3><p>在Cassandra中，表也被称为列族。我们已经知道主键的重要性。然而，在创建表时必须定义主键。</p><p>让我们回顾这些命令：</p><table><thead><tr><th>命令</th><th>示例</th><th>描述</th></tr></thead><tbody><tr><td>CREATE table</td><td>CREATE TABLE <em>table_name</em> ( <em>column_name</em> UUID PRIMARY KEY, <em>column_name</em> text, <em>column_name</em> text, <em>column_name</em> timestamp);</td><td>创建一个表。</td></tr><tr><td>ALTER table</td><td>ALTER TABLE <em>table_name</em> ADD <em>column_name</em> int;</td><td>它将向表中添加一个新列。</td></tr><tr><td>ALTER table</td><td>ALTER TABLE <em>table_name</em> ALTER <em>column_name</em> TYPE <em>datatype</em>;</td><td>我们可以更改现有列的数据类型。</td></tr><tr><td>ALTER table</td><td>ALTER TABLE <em>table_name</em> WITH caching = {‘keys’ : ‘NONE’, ‘rows_per_partition’ : ‘1’ };</td><td>此命令有助于更改表的属性。</td></tr><tr><td>DROP table</td><td>DROP TABLE <em>table_name</em>;</td><td>删除一个表。</td></tr><tr><td>TRUNCATE table</td><td>TRUNCATE <em>table_name</em>;</td><td>使用此命令，我们可以永久删除所有数据。</td></tr></tbody></table><h3 id="_4-3-索引命令" tabindex="-1"><a class="header-anchor" href="#_4-3-索引命令"><span>4.3. 索引命令</span></a></h3><p>而不是扫描整个表并等待结果，我们可以使用索引来加速查询。但是，我们必须记住，<strong>Cassandra中的主键已经被索引了。因此，它不能再次用于相同的目的。</strong></p><p>让我们看看命令：</p><table><thead><tr><th>命令</th><th>示例</th><th>描述</th></tr></thead><tbody><tr><td>CREATE index</td><td>CREATE INDEX <em>index_name</em> on <em>table_name</em> ( <em>column_name</em>);</td><td>创建一个索引。</td></tr><tr><td>DELETE index</td><td>DROP INDEX IF EXISTS <em>index_name</em>;</td><td>删除一个索引。</td></tr></tbody></table><h3 id="_4-4-基本命令" tabindex="-1"><a class="header-anchor" href="#_4-4-基本命令"><span>4.4. 基本命令</span></a></h3><p>这些命令用于读取和操作表中的值：</p><table><thead><tr><th>命令</th><th>示例</th><th>描述</th></tr></thead><tbody><tr><td>INSERT</td><td>INSERT INTO <em>table_name</em> ( <em>column_name1</em>, <em>column_name2</em>) VALUES( <em>value1</em>, <em>value2</em>);</td><td>在表中插入一条记录。</td></tr><tr><td>SELECT</td><td>SELECT * FROM <em>table_name</em>;</td><td>该命令用于从特定表中获取数据。</td></tr><tr><td>WHERE</td><td>SELECT * FROM <em>table_name</em> WHERE <em>column_name</em> = <em>value</em>;</td><td>它根据一个谓词过滤记录。</td></tr><tr><td>UPDATE</td><td>用来编辑记录。</td><td></td></tr><tr><td>DELETE</td><td>DELETE <em>identifier</em> FROM <em>table_name</em> WHERE <em>condition</em>;</td><td>此语句用于从表中删除值。</td></tr></tbody></table><h3 id="_4-5-其他命令" tabindex="-1"><a class="header-anchor" href="#_4-5-其他命令"><span>4.5. 其他命令</span></a></h3><p>Cassandra有两种不同类型的键：分区键和聚簇键。分区键指示存储数据的节点。</p><p>相比之下，聚簇键确定分区键内数据的顺序：</p><table><thead><tr><th>命令</th><th>示例</th><th>描述</th></tr></thead><tbody><tr><td>ORDER BY</td><td>SELECT * FROM <em>table_name</em> WHERE <em>column_name1</em> = <em>value</em> ORDER BY <em>column_name2</em> ASC;</td><td>为此，必须在WHERE子句中定义分区键。另外，ORDER BY子句表示用于排序的聚簇列。</td></tr><tr><td>GROUP BY</td><td>SELECT <em>column_name</em> FROM <em>table_name</em> GROUP BY <em>condition1</em>, <em>condition2</em>;</td><td>此子句仅支持使用分区键或分区键和聚簇键。</td></tr><tr><td>LIMIT</td><td>SELECT * FROM <em>table_name</em> LIMIT 3;</td><td>对于大型表，限制检索的行数。</td></tr></tbody></table><ol start="5"><li>运算符</li></ol><p>Cassandra支持算术和条件类型的运算符。在算术运算符中，我们有 +, -, *, /, % 和 –（一元）分别用于加法、减法、乘法、除法、余数和取反。</p><p>WHERE子句在Cassandra中非常重要。条件运算符在此子句中使用，并具有某些场景和限制。这些运算符是 CONTAINS, CONTAINS KEY, IN, =, &gt;, &gt;=, &lt;, 和 &lt;=。</p><ol start="6"><li>常用函数</li></ol><p>毫无疑问，无论是聚合函数还是标量函数，在将一个值转换为另一个值中都起着重要作用。因此，Cassandra提供了多个类别的几种内置函数。</p><p>让我们看看这些函数：</p><ul><li>Blob转换函数</li><li>UUID和Timeuuid函数</li><li>Token函数</li><li>WRITETIME函数</li><li>TTL函数</li><li>TOKEN函数</li><li>MIN(), MAX(), SUM(), AVG()</li></ul><p>除了这些内置函数外，它还允许用户定义函数和聚合。</p><ol start="7"><li>结论</li></ol><p>在这篇短文中，我们已经看到了Cassandra查询语言的构建块。首先，我们学习了它支持的数据类型以及如何定义它们。然后，我们查看了执行数据库操作的常用命令。最后，我们讨论了语言的运算符和函数。</p><p>OK</p>`,73),r=[s];function l(p,i){return a(),e("div",null,r)}const c=t(d,[["render",l],["__file","2024-07-22-Cassandra Query Cheat Sheet.html.vue"]]),h=JSON.parse('{"path":"/posts/baeldung/2024-07-22/2024-07-22-Cassandra%20Query%20Cheat%20Sheet.html","title":"Cassandra查询备忘单 | Baeldung","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Database","Cassandra"],"tag":["CQL","Cheat Sheet"],"head":[["meta",{"name":"Cassandra Query Language","content":"A quick reference guide for essential concepts of Cassandra query language (CQL) and its application."}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-22/2024-07-22-Cassandra%20Query%20Cheat%20Sheet.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Cassandra查询备忘单 | Baeldung"}],["meta",{"property":"og:description","content":"Cassandra查询备忘单 | Baeldung 引言 有时，我们需要一个快速参考指南来开始我们的学习路径。特别是，备忘单是一个包含所有关键信息的文档。 在本教程中，我们将学习Cassandra查询语言（CQL）的基本概念以及如何使用我们将逐步构建的备忘单来应用它们。 Cassandra概览 Apache Cassandra是一个开源的、NoSQL的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-22T06:44:22.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"CQL"}],["meta",{"property":"article:tag","content":"Cheat Sheet"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-22T06:44:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Cassandra查询备忘单 | Baeldung\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-22T06:44:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Cassandra查询备忘单 | Baeldung 引言 有时，我们需要一个快速参考指南来开始我们的学习路径。特别是，备忘单是一个包含所有关键信息的文档。 在本教程中，我们将学习Cassandra查询语言（CQL）的基本概念以及如何使用我们将逐步构建的备忘单来应用它们。 Cassandra概览 Apache Cassandra是一个开源的、NoSQL的..."},"headers":[{"level":3,"title":"3.1. 原生类型","slug":"_3-1-原生类型","link":"#_3-1-原生类型","children":[]},{"level":3,"title":"3.2. 集合类型","slug":"_3-2-集合类型","link":"#_3-2-集合类型","children":[]},{"level":3,"title":"3.3. 用户定义类型","slug":"_3-3-用户定义类型","link":"#_3-3-用户定义类型","children":[]},{"level":3,"title":"3.4. 元组类型","slug":"_3-4-元组类型","link":"#_3-4-元组类型","children":[]},{"level":3,"title":"4.1. 键空间命令","slug":"_4-1-键空间命令","link":"#_4-1-键空间命令","children":[]},{"level":3,"title":"4.2. 表命令","slug":"_4-2-表命令","link":"#_4-2-表命令","children":[]},{"level":3,"title":"4.3. 索引命令","slug":"_4-3-索引命令","link":"#_4-3-索引命令","children":[]},{"level":3,"title":"4.4. 基本命令","slug":"_4-4-基本命令","link":"#_4-4-基本命令","children":[]},{"level":3,"title":"4.5. 其他命令","slug":"_4-5-其他命令","link":"#_4-5-其他命令","children":[]}],"git":{"createdTime":1721630662000,"updatedTime":1721630662000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":7.19,"words":2156},"filePathRelative":"posts/baeldung/2024-07-22/2024-07-22-Cassandra Query Cheat Sheet.md","localizedDate":"2022年4月1日","excerpt":"\\n<ol>\\n<li>引言</li>\\n</ol>\\n<p>有时，我们需要一个快速参考指南来开始我们的学习路径。特别是，备忘单是一个包含所有关键信息的文档。</p>\\n<p>在本教程中，我们将学习Cassandra查询语言（CQL）的基本概念以及如何使用我们将逐步构建的备忘单来应用它们。</p>\\n<ol start=\\"2\\">\\n<li>Cassandra概览</li>\\n</ol>\\n<p>Apache Cassandra是一个开源的、NoSQL的、分布式数据存储系统。这意味着它不仅可以在一台服务器上运行，而是可以跨越多个服务器。它还以其高可用性和分区容错性而闻名。</p>\\n<p>换句话说，Cassandra数据库的设计灵感来自于CAP定理中的“AP”。</p>","autoDesc":true}');export{c as comp,h as data};
