import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-BTwZI-W8.js";const e={},p=t('<h1 id="java-concurrenthashmap-与线程安全的-hashset-等价实现" tabindex="-1"><a class="header-anchor" href="#java-concurrenthashmap-与线程安全的-hashset-等价实现"><span>Java ConcurrentHashMap 与线程安全的 HashSet 等价实现</span></a></h1><p>在本教程中，我们将探讨创建线程安全的 HashSet 实例的可能性，以及 HashSet 的 ConcurrentHashMap 等价物是什么。此外，我们将查看每种方法的优缺点。</p><h2 id="_2-使用-concurrenthashmap-工厂方法实现线程安全的-hashset" tabindex="-1"><a class="header-anchor" href="#_2-使用-concurrenthashmap-工厂方法实现线程安全的-hashset"><span>2. 使用 ConcurrentHashMap 工厂方法实现线程安全的 HashSet</span></a></h2><p>首先，我们将查看 ConcurrentHashMap 类公开的静态 newKeySet() 方法。基本上，此方法返回一个遵守 java.util.Set 接口的实例，并允许使用标准方法如 add()，contains() 等。</p><p>可以这样简单地创建：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Set</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>````` threadSafeUniqueNumbers <span class="token operator">=</span> <span class="token class-name">ConcurrentHashMap</span><span class="token punctuation">.</span><span class="token function">newKeySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nthreadSafeUniqueNumbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nthreadSafeUniqueNumbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>此外，返回的 Set 性能与 HashSet 类似，因为两者都使用基于哈希的算法实现。</strong> 而且，由于实现使用了 ConcurrentHashMap，同步逻辑带来的额外开销也很小。</p><p>最后，缺点是该方法<strong>仅从 Java 8 开始存在</strong>。</p><h2 id="_3-使用-concurrenthashmap-实例方法实现线程安全的-hashset" tabindex="-1"><a class="header-anchor" href="#_3-使用-concurrenthashmap-实例方法实现线程安全的-hashset"><span>3. 使用 ConcurrentHashMap 实例方法实现线程安全的 HashSet</span></a></h2><p>到目前为止，我们已经查看了 ConcurrentHashMap 的静态方法。接下来，我们将处理 ConcurrentHashMap 用于创建线程安全 Set 实例的实例方法。有两种方法可用，newKeySet() 和 newKeySet(defaultValue)，它们彼此略有不同。</p><p><strong>两种方法都创建了一个与原始映射链接的 Set。</strong> 换句话说，每次我们向原始 ConcurrentHashMap 添加新条目时，Set 将接收该值。接下来，让我们看看这两种方法之间的区别。</p><h3 id="_3-1-newkeyset-方法" tabindex="-1"><a class="header-anchor" href="#_3-1-newkeyset-方法"><span>3.1. newKeySet() 方法</span></a></h3><p>如上所述，newKeySet() 公开了一个包含原始映射所有键的 Set。此方法与 newKeySet(defaultValue) 的关键区别在于当前方法不支持向 Set 添加新元素。<strong>因此，如果我们尝试调用如 add() 或 addAll() 等方法，我们将得到一个 UnsupportedOperationException。</strong></p><p>尽管像 remove(object) 或 clear() 这样的操作按预期工作，但我们需要意识到 Set 上的任何更改都将反映在原始映射中：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ConcurrentHashMap</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`` numbersMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Set</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>````` numbersSet <span class="token operator">=</span> numbersMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nnumbersMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;One&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nnumbersMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;Two&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nnumbersMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;Three&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Map before remove: &quot;</span> <span class="token operator">+</span> numbersMap<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Set before remove: &quot;</span> <span class="token operator">+</span> numbersSet<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nnumbersSet<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Set after remove: &quot;</span> <span class="token operator">+</span> numbersSet<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Map after remove: &quot;</span> <span class="token operator">+</span> numbersMap<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码输出如下：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Map before remove: {1=One, 2=Two, 3=Three}\nSet before remove: [1, 2, 3]\n\nSet after remove: [1, 3]\nMap after remove: {1=One, 3=Three}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-newkeyset-defaultvalue-方法" tabindex="-1"><a class="header-anchor" href="#_3-2-newkeyset-defaultvalue-方法"><span>3.2. newKeySet(defaultValue) 方法</span></a></h3><p>让我们看看另一种从映射中的键创建 Set 的方法。<strong>与上面提到的相比，newKeySet(defaultValue) 返回一个 Set 实例，该实例通过调用 set 上的 add() 或 addAll() 支持添加新元素。</strong></p><p>进一步查看作为参数传递的默认值，这用作通过 add() 或 addAll() 方法添加到映射中的每个新条目的值。以下示例展示了它的工作原理：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ConcurrentHashMap</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`` numbersMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Set</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>````` numbersSet <span class="token operator">=</span> numbersMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token string">&quot;SET-ENTRY&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nnumbersMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;One&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nnumbersMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;Two&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nnumbersMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;Three&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Map before add: &quot;</span> <span class="token operator">+</span> numbersMap<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Set before add: &quot;</span> <span class="token operator">+</span> numbersSet<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nnumbersSet<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Map after add: &quot;</span> <span class="token operator">+</span> numbersMap<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Set after add: &quot;</span> <span class="token operator">+</span> numbersSet<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码输出如下：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Map before add: {1=One, 2=Two, 3=Three}\nSet before add: [1, 2, 3]\nMap after add: {1=One, 2=Two, 3=Three, 4=SET-ENTRY, 5=SET-ENTRY}\nSet after add: [1, 2, 3, 4, 5]\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-使用-collections-实用类实现线程安全的-hashset" tabindex="-1"><a class="header-anchor" href="#_4-使用-collections-实用类实现线程安全的-hashset"><span>4. 使用 Collections 实用类实现线程安全的 HashSet</span></a></h2><p>让我们使用 java.util.Collections 中可用的 synchronizedSet() 方法来创建一个线程安全的 HashSet 实例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Set</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>````` syncNumbers <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">synchronizedSet</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nsyncNumbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在使用这种方法之前，我们需要意识到它比上面讨论的方法效率低。</strong> 基本上，synchronizedSet() 只是将 Set 实例包装在一个同步装饰器中，与 ConcurrentHashMap 实现的低级并发机制相比。</p><h2 id="_5-使用-copyonwritearrayset-实现线程安全的-set" tabindex="-1"><a class="header-anchor" href="#_5-使用-copyonwritearrayset-实现线程安全的-set"><span>5. 使用 CopyOnWriteArraySet 实现线程安全的 Set</span></a></h2><p>创建线程安全 Set 实现的最后方法是 CopyOnWriteArraySet。创建这个 Set 的实例很简单：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Set</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>````` copyOnArraySet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArraySet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ncopyOnArraySet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>尽管使用这个类看起来很有吸引力，但我们需要考虑一些严重的性能缺点。在幕后，CopyOnWriteArraySet 使用数组而不是 HashMap 来存储数据。<strong>这意味着像 contains() 或 remove() 这样的操作具有 O(n) 复杂度，而使用由 ConcurrentHashMap 支持的 Set 时，复杂度是 O(1)。</strong></p><p>建议在 Set 大小通常保持较小且只读操作占多数的情况下使用此实现。</p><h2 id="_6-结论" tabindex="-1"><a class="header-anchor" href="#_6-结论"><span>6. 结论</span></a></h2><p>在本文中，我们看到了创建线程安全 Set 实例的不同可能性，并强调了它们之间的区别。<strong>首先我们看到了 ConcurrentHashMap.newKeySet() 静态方法。当需要线程安全的 HashSet 时，这应该是首选。</strong> 之后我们查看了 ConcurrentHashMap 静态方法和 newKeySet()、newKeySet(defaultValue) 之间的区别。</p><p>最后，我们还讨论了 Collections.synchronizedSet() 和 CopyOnWriteArraySet 以及它们的性能缺点。</p><p>如常，完整的源代码可在 GitHub 上获得。翻译已经完成，以下是剩余部分：</p><h2 id="_6-结论-1" tabindex="-1"><a class="header-anchor" href="#_6-结论-1"><span>6. 结论</span></a></h2><p>在本文中，我们探讨了创建线程安全的 Set 实例的不同方法，并强调了它们之间的差异。<strong>首先，我们看到了 ConcurrentHashMap.newKeySet() 静态方法。当需要线程安全的 HashSet 时，这应该是首选。</strong> 然后，我们探讨了 ConcurrentHashMap 静态方法和 newKeySet()、newKeySet(defaultValue) 实例方法的区别。</p><p>最后，我们也讨论了 Collections.synchronizedSet() 和 CopyOnWriteArraySet 以及它们的性能缺点。</p><p>通常，完整的源代码可以在 GitHub 上找到。</p><p>OK</p>',41),o=[p];function c(u,l){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","2024-07-22-Java Concurrent HashSet Equivalent to ConcurrentHashMap.html.vue"]]),k=JSON.parse('{"path":"/posts/baeldung/2024-07-22/2024-07-22-Java%20Concurrent%20HashSet%20Equivalent%20to%20ConcurrentHashMap.html","title":"Java ConcurrentHashMap 与线程安全的 HashSet 等价实现","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","Concurrency"],"tag":["Java","ConcurrentHashMap","HashSet","Thread Safety"],"head":[["meta",{"name":"keywords","content":"Java, ConcurrentHashMap, HashSet, Thread Safety, Thread-Safe Set"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-22/2024-07-22-Java%20Concurrent%20HashSet%20Equivalent%20to%20ConcurrentHashMap.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Java ConcurrentHashMap 与线程安全的 HashSet 等价实现"}],["meta",{"property":"og:description","content":"Java ConcurrentHashMap 与线程安全的 HashSet 等价实现 在本教程中，我们将探讨创建线程安全的 HashSet 实例的可能性，以及 HashSet 的 ConcurrentHashMap 等价物是什么。此外，我们将查看每种方法的优缺点。 2. 使用 ConcurrentHashMap 工厂方法实现线程安全的 HashSet ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-22T10:43:11.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"ConcurrentHashMap"}],["meta",{"property":"article:tag","content":"HashSet"}],["meta",{"property":"article:tag","content":"Thread Safety"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-22T10:43:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java ConcurrentHashMap 与线程安全的 HashSet 等价实现\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-22T10:43:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Java ConcurrentHashMap 与线程安全的 HashSet 等价实现 在本教程中，我们将探讨创建线程安全的 HashSet 实例的可能性，以及 HashSet 的 ConcurrentHashMap 等价物是什么。此外，我们将查看每种方法的优缺点。 2. 使用 ConcurrentHashMap 工厂方法实现线程安全的 HashSet ..."},"headers":[{"level":2,"title":"2. 使用 ConcurrentHashMap 工厂方法实现线程安全的 HashSet","slug":"_2-使用-concurrenthashmap-工厂方法实现线程安全的-hashset","link":"#_2-使用-concurrenthashmap-工厂方法实现线程安全的-hashset","children":[]},{"level":2,"title":"3. 使用 ConcurrentHashMap 实例方法实现线程安全的 HashSet","slug":"_3-使用-concurrenthashmap-实例方法实现线程安全的-hashset","link":"#_3-使用-concurrenthashmap-实例方法实现线程安全的-hashset","children":[{"level":3,"title":"3.1. newKeySet() 方法","slug":"_3-1-newkeyset-方法","link":"#_3-1-newkeyset-方法","children":[]},{"level":3,"title":"3.2. newKeySet(defaultValue) 方法","slug":"_3-2-newkeyset-defaultvalue-方法","link":"#_3-2-newkeyset-defaultvalue-方法","children":[]}]},{"level":2,"title":"4. 使用 Collections 实用类实现线程安全的 HashSet","slug":"_4-使用-collections-实用类实现线程安全的-hashset","link":"#_4-使用-collections-实用类实现线程安全的-hashset","children":[]},{"level":2,"title":"5. 使用 CopyOnWriteArraySet 实现线程安全的 Set","slug":"_5-使用-copyonwritearrayset-实现线程安全的-set","link":"#_5-使用-copyonwritearrayset-实现线程安全的-set","children":[]},{"level":2,"title":"6. 结论","slug":"_6-结论","link":"#_6-结论","children":[]},{"level":2,"title":"6. 结论","slug":"_6-结论-1","link":"#_6-结论-1","children":[]}],"git":{"createdTime":1721644991000,"updatedTime":1721644991000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":4.38,"words":1313},"filePathRelative":"posts/baeldung/2024-07-22/2024-07-22-Java Concurrent HashSet Equivalent to ConcurrentHashMap.md","localizedDate":"2022年4月1日","excerpt":"\\n<p>在本教程中，我们将探讨创建线程安全的 HashSet 实例的可能性，以及 HashSet 的 ConcurrentHashMap 等价物是什么。此外，我们将查看每种方法的优缺点。</p>\\n<h2>2. 使用 ConcurrentHashMap 工厂方法实现线程安全的 HashSet</h2>\\n<p>首先，我们将查看 ConcurrentHashMap 类公开的静态 newKeySet() 方法。基本上，此方法返回一个遵守 java.util.Set 接口的实例，并允许使用标准方法如 add()，contains() 等。</p>\\n<p>可以这样简单地创建：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token class-name\\">Set</span>`````<span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Integer</span><span class=\\"token punctuation\\">&gt;</span></span>````` threadSafeUniqueNumbers <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">ConcurrentHashMap</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">newKeySet</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nthreadSafeUniqueNumbers<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">23</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nthreadSafeUniqueNumbers<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">45</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}');export{d as comp,k as data};
