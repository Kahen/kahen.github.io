import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-BhHboa-m.js";const e={},p=t(`<h1 id="timefold-solver-员工调度问题求解指南" tabindex="-1"><a class="header-anchor" href="#timefold-solver-员工调度问题求解指南"><span>Timefold Solver 员工调度问题求解指南</span></a></h1><h2 id="_1-概览" tabindex="-1"><a class="header-anchor" href="#_1-概览"><span>1. 概览</span></a></h2><h3 id="_1-1-timefold-solver-是什么" tabindex="-1"><a class="header-anchor" href="#_1-1-timefold-solver-是什么"><span>1.1. Timefold Solver 是什么？</span></a></h3><p>Timefold Solver 是一个纯 Java 计划求解器 AI。Timefold 优化计划问题，例如车辆路径问题（VRP）、维护调度、作业车间调度和学校时间表编制。它生成的物流计划可以大幅降低成本，提高服务质量，并减少环境足迹——通常高达 25%——适用于复杂的现实世界调度操作。</p><p>Timefold 是 OptaPlanner 的延续。它是一种数学优化的形式（在更广泛的运筹学和人工智能领域中），支持以代码形式编写的约束。</p><h3 id="_1-2-我们将构建什么" tabindex="-1"><a class="header-anchor" href="#_1-2-我们将构建什么"><span>1.2. 我们将构建什么</span></a></h3><p>在本教程中，让我们使用 Timefold Solver 来<strong>优化简化版的员工轮班调度问题</strong>。</p><p>我们将自动分配轮班给员工，以便：</p><ul><li>没有员工在同一天有两次轮班</li><li>每个轮班都分配给具有适当技能的员工</li></ul><p>具体来说，我们将分配这五个轮班：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>  2030-04-01 06:00 - 14:00 （服务员）
  2030-04-01 09:00 - 17:00 （调酒师）
  2030-04-01 14:00 - 22:00 （调酒师）
  2030-04-02 06:00 - 14:00 （服务员）
  2030-04-02 14:00 - 22:00 （调酒师）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分配给这三位员工：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>  Ann （调酒师）
  Beth （服务员，调酒师）
  Carl （服务员）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这看起来比实际要难。在纸上尝试一下。</p><h2 id="_2-依赖项" tabindex="-1"><a class="header-anchor" href="#_2-依赖项"><span>2. 依赖项</span></a></h2><p>Timefold Solver 工件在 Maven Central 上发布，采用 Apache 许可证。让我们使用它们：</p><h3 id="_2-1-纯-java" tabindex="-1"><a class="header-anchor" href="#_2-1-纯-java"><span>2.1. 纯 Java</span></a></h3><p>我们在 Maven 或 Gradle 中添加对 <em>timefold-solver-core</em> 的依赖，以及对 <em>timefold-solver-test</em> 的测试依赖：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>\`&lt;dependencyManagement&gt;\`
    \`\`&lt;dependencies&gt;\`\`
        \`\`\`&lt;dependency&gt;\`\`\`
            \`\`\`&lt;groupId&gt;\`\`\`ai.timefold.solver\`\`\`&lt;/groupId&gt;\`\`\`
            \`\`\`&lt;artifactId&gt;\`\`\`timefold-solver-bom\`\`\`&lt;/artifactId&gt;\`\`\`
            \`&lt;version&gt;\`...\`&lt;/version&gt;\`
            \`&lt;type&gt;\`pom\`&lt;/type&gt;\`
            \`\`&lt;scope&gt;\`\`import\`\`&lt;/scope&gt;\`\`
        \`\`\`&lt;/dependency&gt;\`\`\`
    \`\`&lt;/dependencies&gt;\`\`
\`&lt;/dependencyManagement&gt;\`
\`\`&lt;dependencies&gt;\`\`
    \`\`\`&lt;dependency&gt;\`\`\`
        \`\`\`&lt;groupId&gt;\`\`\`ai.timefold.solver\`\`\`&lt;/groupId&gt;\`\`\`
        \`\`\`&lt;artifactId&gt;\`\`\`timefold-solver-core\`\`\`&lt;/artifactId&gt;\`\`\`
    \`\`\`&lt;/dependency&gt;\`\`\`
    \`\`\`&lt;dependency&gt;\`\`\`
        \`\`\`&lt;groupId&gt;\`\`\`ai.timefold.solver\`\`\`&lt;/groupId&gt;\`\`\`
        \`\`\`&lt;artifactId&gt;\`\`\`timefold-solver-test\`\`\`&lt;/artifactId&gt;\`\`\`
        \`\`&lt;scope&gt;\`\`test\`\`&lt;/scope&gt;\`\`
    \`\`\`&lt;/dependency&gt;\`\`\`
\`\`&lt;/dependencies&gt;\`\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-spring-boot" tabindex="-1"><a class="header-anchor" href="#_2-2-spring-boot"><span>2.2. Spring Boot</span></a></h3><p>在 Spring Boot 中，我们使用 <em>timefold-solver-spring-boot-starter</em> 依赖项。它自动处理大部分求解器配置，正如我们稍后将看到的，并且允许在 <em>application.properties</em> 中配置求解器时间和其他属性。</p><ol><li>访问 start.spring.io</li><li>点击 <em>Add dependencies</em> 添加 <em>Timefold Solver</em> 依赖项</li><li>生成项目并在您喜欢的 IDE 中打开</li></ol><h3 id="_2-3-quarkus" tabindex="-1"><a class="header-anchor" href="#_2-3-quarkus"><span>2.3. Quarkus</span></a></h3><p>在 Quarkus 中，我们同样在 code.quarkus.io 中使用 <em>timefold-solver-quarkus</em> 依赖项进行自动求解器配置和 <em>application.properties</em> 支持。</p><h2 id="_3-领域类" tabindex="-1"><a class="header-anchor" href="#_3-领域类"><span>3. 领域类</span></a></h2><p>领域类代表输入数据和输出数据。我们创建 <em>Employee</em> 和 <em>Shift</em> 类，以及包含特定数据集员工和轮班列表的 <em>ShiftSchedule</em>。</p><h3 id="_3-1-employee" tabindex="-1"><a class="header-anchor" href="#_3-1-employee"><span>3.1. <em>Employee</em></span></a></h3><p>员工是我们可以分配轮班的人。每个员工都有一个名字和一个或多个技能。</p><p><em>Employee</em> 类不需要任何 Timefold 注解，因为在求解过程中它不会改变：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>public class Employee {
    private String name;
    private Set\`\`&lt;String&gt;\`\` skills;

    public Employee(String name, Set\`\`&lt;String&gt;\`\` skills) {
        this.name = name;
        this.skills = skills;
    }

    @Override
    public String toString() {
        return name;
    }

    // Getters and setters
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-shift" tabindex="-1"><a class="header-anchor" href="#_3-2-shift"><span>3.2. <em>Shift</em></span></a></h3><p>轮班是为一个员工在特定日期从开始时间到结束时间的确切工作分配。同一时间可以有两次轮班。每个轮班都需要一个技能。</p><p><em>Shift</em> 对象在求解过程中会改变：每个轮班都被分配给一个员工。Timefold 需要知道这一点。只有在求解过程中 <em>employee</em> 字段会改变。因此，我们使用 <em>@PlanningEntity</em> 注解类，并使用 <em>@PlanningVariable</em> 注解 <em>employee</em> 字段，以便 Timefold 知道它应该为每个轮班填写员工：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>@PlanningEntity
public class Shift {
    private LocalDateTime start;
    private LocalDateTime end;
    private String requiredSkill;

    @PlanningVariable
    private Employee employee;

    // A no-arg constructor is required for @PlanningEntity annotated classes
    public Shift() {
    }

    public Shift(LocalDateTime start, LocalDateTime end, String requiredSkill) {
        this(start, end, requiredSkill, null);
    }

    public Shift(LocalDateTime start, LocalDateTime end, String requiredSkill, Employee employee) {
        this.start = start;
        this.end = end;
        this.requiredSkill = requiredSkill;
        this.employee = employee;
    }

    @Override
    public String toString() {
        return start + &quot; - &quot; + end;
    }

    // Getters and setters
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-shiftschedule" tabindex="-1"><a class="header-anchor" href="#_3-3-shiftschedule"><span>3.3. <em>ShiftSchedule</em></span></a></h3><p>时间表表示员工和轮班的单个数据集。它既是 Timefold 的输入也是输出：</p><ul><li>我们使用 <em>@PlanningSolution</em> 注解 <em>ShiftSchedule</em> 类，以便 Timefold 知道它代表输入和输出。</li><li>我们使用 <em>@ValueRangeProvider</em> 注解 <em>employees</em> 字段，以告诉 Timefold 它包含可以从中选择实例分配给 <em>Shift.employee</em> 的员工列表。</li><li>我们使用 <em>@PlanningEntityCollectionProperty</em> 注解 <em>shifts</em> 字段，以便 Timefold 查找所有要分配给员工的 <em>Shift</em> 实例。</li><li>我们包括一个带有 <em>@PlanningScore</em> 注解的 <em>score</em> 字段。Timefold 将为我们填充这个字段。让我们使用 <em>HardSoftScore</em> ，这样我们以后就可以区分硬约束和软约束。</li></ul><p>现在，让我们看看我们的类：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>@PlanningSolution
public class ShiftSchedule {
    @ValueRangeProvider
    private List\`\`&lt;Employee&gt;\`\` employees;
    @PlanningEntityCollectionProperty
    private List\`\`&lt;Shift&gt;\`\` shifts;

    @PlanningScore
    private HardSoftScore score;

    // A no-arg constructor is required for @PlanningSolution annotated classes
    public ShiftSchedule() {
    }

    public ShiftSchedule(List\`\`&lt;Employee&gt;\`\` employees, List\`\`&lt;Shift&gt;\`\` shifts) {
        this.employees = employees;
        this.shifts = shifts;
    }

    // Getters and setters
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-约束" tabindex="-1"><a class="header-anchor" href="#_4-约束"><span>4. 约束</span></a></h2><p>没有约束，Timefold 会将所有轮班分配给第一个员工。这不是一个可行的时间表。</p><p>为了教会它如何区分好和坏的时间表，让我们添加<strong>两个硬约束</strong>：</p><ul><li><em>atMostOneShiftPerDay()</em> 约束检查是否有两个在同一天分配给同一员工的轮班。如果是这样，它会通过扣除 1 个硬点来惩罚分数。</li><li><em>requiredSkill()</em> 约束检查轮班是否分配给具有轮班所需技能的员工。如果不是，它会通过扣除 1 个硬点来惩罚分数。</li></ul><p><strong>一个硬约束优先于所有软约束</strong>。通常，硬约束是不可能打破的，无论是在物理上还是法律上。另一方面，软约束可以被打破，但我们希望最小化这种情况。这些通常代表财务成本、服务质量或员工幸福感。硬约束和软约束使用相同的 API 实现。</p><h3 id="_4-1-constraintprovider" tabindex="-1"><a class="header-anchor" href="#_4-1-constraintprovider"><span>4.1. <em>ConstraintProvider</em></span></a></h3><p>首先，我们为我们的约束实现创建一个 <em>ConstraintProvider</em>：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>public class ShiftScheduleConstraintProvider implements ConstraintProvider {
    @Override
    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {
        return new Constraint[] {
          atMostOneShiftPerDay(constraintFactory),
          requiredSkill(constraintFactory)
        };
    }

    // Constraint implementations
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-单元测试-constraintprovider" tabindex="-1"><a class="header-anchor" href="#_4-2-单元测试-constraintprovider"><span>4.2. 单元测试 <em>ConstraintProvider</em></span></a></h3><p>如果它没有被测试，它就不会工作——特别是对于约束。让我们创建一个测试类来测试我们的 <em>ConstraintProvider</em> 的每个约束。</p><p>测试范围的 <em>timefold-solver-test</em> 依赖项包含 <em>ConstraintVerifier</em>，这是一个帮助测试每个约束的助手。这提高了可维护性——我们可以重构一个约束而不会破坏其他约束的测试：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>public class ShiftScheduleConstraintProviderTest {
    private static final LocalDate MONDAY = LocalDate.of(2030, 4, 1);
    private static抱歉，由于文本内容较长，我将分两部分完成翻译。以下是第二部分的翻译：

\`\`\`java
    private static final LocalDate TUESDAY = LocalDate.of(2030, 4, 2);

    ConstraintVerifier\`&lt;ShiftScheduleConstraintProvider, ShiftSchedule&gt;\` constraintVerifier
      = ConstraintVerifier.build(new ShiftScheduleConstraintProvider(), ShiftSchedule.class, Shift.class);

    // 每个约束的测试
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们已经准备了两个日期以在下面的测试中重复使用。让我们接下来添加实际的约束。</p><h3 id="_4-3-硬约束-每天最多一个轮班" tabindex="-1"><a class="header-anchor" href="#_4-3-硬约束-每天最多一个轮班"><span>4.3. 硬约束：每天最多一个轮班</span></a></h3><p>遵循 TDD（测试驱动开发），让我们首先在我们的测试类中为我们的新约束编写测试：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">whenTwoShiftsOnOneDay_thenPenalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Employee</span> ann <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">&quot;Ann&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    constraintVerifier<span class="token punctuation">.</span><span class="token function">verifyThat</span><span class="token punctuation">(</span><span class="token class-name">ShiftScheduleConstraintProvider</span><span class="token operator">::</span><span class="token function">atMostOneShiftPerDay</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">given</span><span class="token punctuation">(</span>
        <span class="token keyword">new</span> <span class="token class-name">Shift</span><span class="token punctuation">(</span><span class="token constant">MONDAY</span><span class="token punctuation">.</span><span class="token function">atTime</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">MONDAY</span><span class="token punctuation">.</span><span class="token function">atTime</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> ann<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token class-name">Shift</span><span class="token punctuation">(</span><span class="token constant">MONDAY</span><span class="token punctuation">.</span><span class="token function">atTime</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">MONDAY</span><span class="token punctuation">.</span><span class="token function">atTime</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> ann<span class="token punctuation">)</span>
      <span class="token punctuation">)</span>
      <span class="token comment">// 因为 {shiftA, shiftB} 和 {shiftB, shiftA} 都匹配，所以处罚 2 分。</span>
      <span class="token comment">// 为了避免这种情况，在约束实现中使用 forEachUniquePair() 而不是 forEach().join()。</span>
      <span class="token punctuation">.</span><span class="token function">penalizesBy</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">whenTwoShiftsOnDifferentDays_thenDoNotPenalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Employee</span> ann <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">&quot;Ann&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    constraintVerifier<span class="token punctuation">.</span><span class="token function">verifyThat</span><span class="token punctuation">(</span><span class="token class-name">ShiftScheduleConstraintProvider</span><span class="token operator">::</span><span class="token function">atMostOneShiftPerDay</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">given</span><span class="token punctuation">(</span>
        <span class="token keyword">new</span> <span class="token class-name">Shift</span><span class="token punctuation">(</span><span class="token constant">MONDAY</span><span class="token punctuation">.</span><span class="token function">atTime</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">MONDAY</span><span class="token punctuation">.</span><span class="token function">atTime</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> ann<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token class-name">Shift</span><span class="token punctuation">(</span><span class="token constant">TUESDAY</span><span class="token punctuation">.</span><span class="token function">atTime</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">TUESDAY</span><span class="token punctuation">.</span><span class="token function">atTime</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> ann<span class="token punctuation">)</span>
      <span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">penalizesBy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们在 <em>ConstraintProvider</em> 中实现它：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Constraint</span> <span class="token function">atMostOneShiftPerDay</span><span class="token punctuation">(</span><span class="token class-name">ConstraintFactory</span> constraintFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> constraintFactory<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">Shift</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token class-name">Shift</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
        <span class="token function">equal</span><span class="token punctuation">(</span>shift <span class="token operator">-&gt;</span> shift<span class="token punctuation">.</span><span class="token function">getStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocalDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">equal</span><span class="token punctuation">(</span><span class="token class-name">Shift</span><span class="token operator">::</span><span class="token function">getEmployee</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>shift1<span class="token punctuation">,</span> shift2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> shift1 <span class="token operator">!=</span> shift2<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">penalize</span><span class="token punctuation">(</span><span class="token class-name">HardSoftScore</span><span class="token punctuation">.</span><span class="token constant">ONE_HARD</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">asConstraint</span><span class="token punctuation">(</span><span class="token string">&quot;每天最多一个轮班&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了实现约束，我们使用 ConstraintStreams API：一个类似于 Stream/SQL 的 API，它在底层提供增量分数计算（增量）和索引哈希表查找。这种方法可以扩展到包含数十万个轮班的单个时间表的数据集。</p><p>让我们运行测试并验证它们是否通过。</p><h3 id="_4-4-硬约束-所需技能" tabindex="-1"><a class="header-anchor" href="#_4-4-硬约束-所需技能"><span>4.4. 硬约束：所需技能</span></a></h3><p>让我们在我们的测试类中编写测试：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">whenEmployeeLacksRequiredSkill_thenPenalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Employee</span> ann <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">&quot;Ann&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;Waiter&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    constraintVerifier<span class="token punctuation">.</span><span class="token function">verifyThat</span><span class="token punctuation">(</span><span class="token class-name">ShiftScheduleConstraintProvider</span><span class="token operator">::</span><span class="token function">requiredSkill</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">given</span><span class="token punctuation">(</span>
        <span class="token keyword">new</span> <span class="token class-name">Shift</span><span class="token punctuation">(</span><span class="token constant">MONDAY</span><span class="token punctuation">.</span><span class="token function">atTime</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">MONDAY</span><span class="token punctuation">.</span><span class="token function">atTime</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;Cook&quot;</span><span class="token punctuation">,</span> ann<span class="token punctuation">)</span>
      <span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">penalizesBy</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">whenEmployeeHasRequiredSkill_thenDoNotPenalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Employee</span> ann <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">&quot;Ann&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;Waiter&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    constraintVerifier<span class="token punctuation">.</span><span class="token function">verifyThat</span><span class="token punctuation">(</span><span class="token class-name">ShiftScheduleConstraintProvider</span><span class="token operator">::</span><span class="token function">requiredSkill</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">given</span><span class="token punctuation">(</span>
        <span class="token keyword">new</span> <span class="token class-name">Shift</span><span class="token punctuation">(</span><span class="token constant">MONDAY</span><span class="token punctuation">.</span><span class="token function">atTime</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">MONDAY</span><span class="token punctuation">.</span><span class="token function">atTime</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;Waiter&quot;</span><span class="token punctuation">,</span> ann<span class="token punctuation">)</span>
      <span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">penalizesBy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，让我们在我们的 <em>ConstraintProvider</em> 中实现新约束：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Constraint</span> <span class="token function">requiredSkill</span><span class="token punctuation">(</span><span class="token class-name">ConstraintFactory</span> constraintFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> constraintFactory<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">Shift</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>shift <span class="token operator">-&gt;</span> <span class="token operator">!</span>shift<span class="token punctuation">.</span><span class="token function">getEmployee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSkills</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>shift<span class="token punctuation">.</span><span class="token function">getRequiredSkill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">penalize</span><span class="token punctuation">(</span><span class="token class-name">HardSoftScore</span><span class="token punctuation">.</span><span class="token constant">ONE_HARD</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">asConstraint</span><span class="token punctuation">(</span><span class="token string">&quot;所需技能&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们再次运行测试。它们仍然通过。</p><p><strong>要将此变为软约束，我们将 <em>penalize(HardSoftScore.ONE_HARD)</em> 更改为 <em>penalize(HardSoftScore.ONE_SOFT)</em>。</strong> 要通过输入数据集进行动态决策，我们可以使用 <em>penalizeConfigurable()</em> 和 <em>@ConstraintWeight</em>。</p><h2 id="_5-应用" tabindex="-1"><a class="header-anchor" href="#_5-应用"><span>5. 应用</span></a></h2><p>我们准备将我们的应用程序整合在一起。</p><h3 id="_5-1-解决它" tabindex="-1"><a class="header-anchor" href="#_5-1-解决它"><span>5.1. 解决它</span></a></h3><p>要解决一个时间表，我们从我们的 <em>@PlanningSolution</em>、<em>@PlanningEntity</em> 和 <em>ConstraintProvider</em> 类中<strong>创建一个 <em>SolverFactory</em></strong>。一个 <em>SolverFactory</em> 是一个长期存在的对象。通常，每个应用程序只有一个实例。</p><p>我们还需要配置我们希望求解器运行多长时间。对于大型数据集，有数千个轮班和更多的约束，不可能在合理的时间内找到最优解（由于 NP-hard 问题的指数性质）。相反，我们希望在可用的时间内找到最佳可能的解决方案。现在让我们限制为两秒钟：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">SolverFactory</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ShiftSchedule</span><span class="token punctuation">&gt;</span></span>\`\`\` solverFactory <span class="token operator">=</span> <span class="token class-name">SolverFactory</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SolverConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">withSolutionClass</span><span class="token punctuation">(</span><span class="token class-name">ShiftSchedule</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">withEntityClasses</span><span class="token punctuation">(</span><span class="token class-name">Shift</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">withConstraintProviderClass</span><span class="token punctuation">(</span><span class="token class-name">ShiftScheduleConstraintProvider</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
  <span class="token comment">// 求解器在这个小数据集上只运行 2 秒钟。</span>
  <span class="token comment">// 建议在大型数据集上至少运行 5 分钟 (&quot;5m&quot;)。</span>
  <span class="token punctuation">.</span><span class="token function">withTerminationSpentLimit</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用 <em>SolverFactory</em> 来创建一个 <em>Solver</em> 实例，每个数据集一个。然后，我们调用 <em>Solver.solve()</em> 来解决一个数据集：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Solver</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ShiftSchedule</span><span class="token punctuation">&gt;</span></span>\`\`\` solver <span class="token operator">=</span> solverFactory<span class="token punctuation">.</span><span class="token function">buildSolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ShiftSchedule</span> problem <span class="token operator">=</span> <span class="token function">loadProblem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ShiftSchedule</span> solution <span class="token operator">=</span> solver<span class="token punctuation">.</span><span class="token function">solve</span><span class="token punctuation">(</span>problem<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printSolution</span><span class="token punctuation">(</span>solution<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Spring Boot 中，<em>SolverFactory</em> 是自动构建的，并注入到一个 <em>@Autowired</em> 字段中：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token class-name">SolverFactory</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ShiftSchedule</span><span class="token punctuation">&gt;</span></span>\`\`\` solverFactory<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在 <em>application.properties</em> 中配置求解器时间：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">timefold.solver.termination.spent-limit</span><span class="token punctuation">=</span><span class="token value attr-value">5s</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 Quarkus 中，类似地，<em>SolverFactory</em> 也是自动构建的，并注入到一个 <em>@Inject</em> 字段中。求解器时间也在 <em>application.properties</em> 中配置。</p><p>要异步求解，为了避免在调用 <em>Solver.solve()</em> 时占用当前线程，我们将注入并使用一个 <em>SolverManager</em>。</p><h3 id="_5-2-测试数据" tabindex="-1"><a class="header-anchor" href="#_5-2-测试数据"><span>5.2. 测试数据</span></a></h3><p>让我们生成一个包含五个轮班和三名员工的小数据集作为输入问题：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">ShiftSchedule</span> <span class="token function">loadProblem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">LocalDate</span> monday <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2030</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">LocalDate</span> tuesday <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2030</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ShiftSchedule</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>
      <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">&quot;Ann&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;Bartender&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">&quot;Beth&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;Waiter&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Bartender&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">&quot;Carl&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;Waiter&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>
      <span class="token keyword">new</span> <span class="token class-name">Shift</span><span class="token punctuation">(</span>monday<span class="token punctuation">.</span><span class="token function">atTime</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> monday<span class="token punctuation">.</span><span class="token function">atTime</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;Waiter&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token keyword">new</span> <span class="token class-name">Shift</span><span class="token punctuation">(</span>monday<span class="token punctuation">.</span><span class="token function">atTime</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> monday<span class="token punctuation">.</span><span class="token function">atTime</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;Bartender&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token keyword">new</span> <span class="token class-name">Shift</span><span class="token punctuation">(</span>monday<span class="token punctuation">.</span><span class="token function">atTime</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> monday<span class="token punctuation">.</span><span class="token function">atTime</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;Bartender&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token keyword">new</span> <span class="token class-name">Shift</span><span class="token punctuation">(</span>tuesday<span class="token punctuation">.</span><span class="token function">atTime</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tuesday<span class="token punctuation">.</span><span class="token function">atTime</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;Waiter&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token keyword">new</span> <span class="token class-name">Shift</span><span class="token punctuation">(</span>tuesday<span class="token punctuation">.</span><span class="token function">atTime</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tuesday<span class="token punctuation">.</span><span class="token function">atTime</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;Bartender&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3-结果" tabindex="-1"><a class="header-anchor" href="#_5-3-结果"><span>5.3. 结果</span></a></h3><p>在我们通过求解器运行测试数据后，我们将输出解决方案打印到 <em>System.out</em>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">printSolution</span><span class="token punctuation">(</span><span class="token class-name">ShiftSchedule</span> solution<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;轮班分配&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Shift</span> shift <span class="token operator">:</span> solution<span class="token punctuation">.</span><span class="token function">getShifts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;  &quot;</span> <span class="token operator">+</span> shift<span class="token punctuation">.</span><span class="token function">getStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocalDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> shift<span class="token punctuation">.</span><span class="token function">getStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocalTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token operator">+</span> <span class="token string">&quot; - &quot;</span> <span class="token operator">+</span> shift<span class="token punctuation">.</span><span class="token function">getEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocalTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token operator">+</span> <span class="token string">&quot;: &quot;</span> <span class="token operator">+</span> shift<span class="token punctuation">.</span><span class="token function">getEmployee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是我们数据集的结果：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>轮班分配
  2030-04-01 06:00 - 14:00: Carl
  2030-04-01 09:00 - 17:00: Ann
  2030-04-01 14:00 - 22:00: Beth
  2030-04-02 06:00 - 14:00: Beth
  2030-04-02 14:00 - 22:00: Ann
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ann 没有被分配到第一个</p>`,89),o=[p];function i(l,c){return a(),s("div",null,o)}const d=n(e,[["render",i],["__file","2024-06-26-A Guide to Timefold Solver for Employee Scheduling.html.vue"]]),k=JSON.parse('{"path":"/posts/baeldung/2024-06-26/2024-06-26-A%20Guide%20to%20Timefold%20Solver%20for%20Employee%20Scheduling.html","title":"Timefold Solver 员工调度问题求解指南","lang":"zh-CN","frontmatter":{"date":"2024-06-26T00:00:00.000Z","category":["Java","Timefold Solver"],"tag":["员工调度","优化"],"head":[["meta",{"name":"keywords","content":"Timefold Solver, Java, 员工调度, 优化"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-06-26/2024-06-26-A%20Guide%20to%20Timefold%20Solver%20for%20Employee%20Scheduling.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Timefold Solver 员工调度问题求解指南"}],["meta",{"property":"og:description","content":"Timefold Solver 员工调度问题求解指南 1. 概览 1.1. Timefold Solver 是什么？ Timefold Solver 是一个纯 Java 计划求解器 AI。Timefold 优化计划问题，例如车辆路径问题（VRP）、维护调度、作业车间调度和学校时间表编制。它生成的物流计划可以大幅降低成本，提高服务质量，并减少环境足迹——..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-26T01:51:38.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"员工调度"}],["meta",{"property":"article:tag","content":"优化"}],["meta",{"property":"article:published_time","content":"2024-06-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-26T01:51:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Timefold Solver 员工调度问题求解指南\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-26T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-26T01:51:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Timefold Solver 员工调度问题求解指南 1. 概览 1.1. Timefold Solver 是什么？ Timefold Solver 是一个纯 Java 计划求解器 AI。Timefold 优化计划问题，例如车辆路径问题（VRP）、维护调度、作业车间调度和学校时间表编制。它生成的物流计划可以大幅降低成本，提高服务质量，并减少环境足迹——..."},"headers":[{"level":2,"title":"1. 概览","slug":"_1-概览","link":"#_1-概览","children":[{"level":3,"title":"1.1. Timefold Solver 是什么？","slug":"_1-1-timefold-solver-是什么","link":"#_1-1-timefold-solver-是什么","children":[]},{"level":3,"title":"1.2. 我们将构建什么","slug":"_1-2-我们将构建什么","link":"#_1-2-我们将构建什么","children":[]}]},{"level":2,"title":"2. 依赖项","slug":"_2-依赖项","link":"#_2-依赖项","children":[{"level":3,"title":"2.1. 纯 Java","slug":"_2-1-纯-java","link":"#_2-1-纯-java","children":[]},{"level":3,"title":"2.2. Spring Boot","slug":"_2-2-spring-boot","link":"#_2-2-spring-boot","children":[]},{"level":3,"title":"2.3. Quarkus","slug":"_2-3-quarkus","link":"#_2-3-quarkus","children":[]}]},{"level":2,"title":"3. 领域类","slug":"_3-领域类","link":"#_3-领域类","children":[{"level":3,"title":"3.1. Employee","slug":"_3-1-employee","link":"#_3-1-employee","children":[]},{"level":3,"title":"3.2. Shift","slug":"_3-2-shift","link":"#_3-2-shift","children":[]},{"level":3,"title":"3.3. ShiftSchedule","slug":"_3-3-shiftschedule","link":"#_3-3-shiftschedule","children":[]}]},{"level":2,"title":"4. 约束","slug":"_4-约束","link":"#_4-约束","children":[{"level":3,"title":"4.1. ConstraintProvider","slug":"_4-1-constraintprovider","link":"#_4-1-constraintprovider","children":[]},{"level":3,"title":"4.2. 单元测试 ConstraintProvider","slug":"_4-2-单元测试-constraintprovider","link":"#_4-2-单元测试-constraintprovider","children":[]},{"level":3,"title":"4.3. 硬约束：每天最多一个轮班","slug":"_4-3-硬约束-每天最多一个轮班","link":"#_4-3-硬约束-每天最多一个轮班","children":[]},{"level":3,"title":"4.4. 硬约束：所需技能","slug":"_4-4-硬约束-所需技能","link":"#_4-4-硬约束-所需技能","children":[]}]},{"level":2,"title":"5. 应用","slug":"_5-应用","link":"#_5-应用","children":[{"level":3,"title":"5.1. 解决它","slug":"_5-1-解决它","link":"#_5-1-解决它","children":[]},{"level":3,"title":"5.2. 测试数据","slug":"_5-2-测试数据","link":"#_5-2-测试数据","children":[]},{"level":3,"title":"5.3. 结果","slug":"_5-3-结果","link":"#_5-3-结果","children":[]}]}],"git":{"createdTime":1719366698000,"updatedTime":1719366698000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":9.13,"words":2740},"filePathRelative":"posts/baeldung/2024-06-26/2024-06-26-A Guide to Timefold Solver for Employee Scheduling.md","localizedDate":"2024年6月26日","excerpt":"\\n<h2>1. 概览</h2>\\n<h3>1.1. Timefold Solver 是什么？</h3>\\n<p>Timefold Solver 是一个纯 Java 计划求解器 AI。Timefold 优化计划问题，例如车辆路径问题（VRP）、维护调度、作业车间调度和学校时间表编制。它生成的物流计划可以大幅降低成本，提高服务质量，并减少环境足迹——通常高达 25%——适用于复杂的现实世界调度操作。</p>\\n<p>Timefold 是 OptaPlanner 的延续。它是一种数学优化的形式（在更广泛的运筹学和人工智能领域中），支持以代码形式编写的约束。</p>\\n<h3>1.2. 我们将构建什么</h3>","autoDesc":true}');export{d as comp,k as data};
