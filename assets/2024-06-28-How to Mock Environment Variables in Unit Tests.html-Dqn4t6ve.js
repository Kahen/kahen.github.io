import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-CseMoHkL.js";const e={},p=t('<h1 id="如何在单元测试中模拟环境变量" tabindex="-1"><a class="header-anchor" href="#如何在单元测试中模拟环境变量"><span>如何在单元测试中模拟环境变量</span></a></h1><p>当我们的单元测试依赖于环境变量时，我们可能希望在测试实现中为它们提供特定的值。</p><p>Java不允许我们编辑环境变量，但我们可以使用一些变通方法，还有一些库可以帮助我们。</p><p>在本教程中，我们将探讨依赖环境变量进行单元测试的挑战，Java在最近版本中使这变得更加困难，以及JUnit Pioneer、System Stubs、System Lambda和System Rules库。我将为JUnit 4、JUnit 5和TestNG查看这些内容。</p><h2 id="_2-更改环境变量的挑战" tabindex="-1"><a class="header-anchor" href="#_2-更改环境变量的挑战"><span>2. 更改环境变量的挑战</span></a></h2><p>在其他语言中，比如JavaScript，我们可以非常容易地在测试中修改环境：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">MY_VARIABLE</span> <span class="token operator">=</span> <span class="token string">&#39;set&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java要严格得多。在Java中，环境变量映射是不可修改的。它是一个不可修改的映射，当JVM启动时初始化。虽然这样做有很好的理由，但我们可能仍然希望在测试时控制我们的环境。</p><h3 id="_2-1-环境为何不可修改" tabindex="-1"><a class="header-anchor" href="#_2-1-环境为何不可修改"><span>2.1. 环境为何不可修改</span></a></h3><p>在Java程序的正常执行中，如果像运行时环境配置这样全局的东西可以被修改，可能会变得非常混乱。这在涉及多个线程时尤其危险。例如，一个线程可能在同时修改环境，另一个线程使用该环境启动进程，任何冲突的设置都可能以意想不到的方式相互作用。</p><p>因此，Java的设计者保持了环境变量映射中的全局值的安全。相比之下，系统属性可以在运行时轻松更改。</p><h3 id="_2-2-绕过不可修改的映射" tabindex="-1"><a class="header-anchor" href="#_2-2-绕过不可修改的映射"><span>2.2. 绕过不可修改的映射</span></a></h3><p>对于不可修改的环境变量映射对象有一个变通方法。尽管其类型为只读的UnmodifiableMap，我们可以使用反射打破封装并访问内部字段：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Class</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span>` classOfMap <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Field</span> field <span class="token operator">=</span> classOfMap<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">&quot;m&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nfield<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Map</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`` writeableEnvironmentVariables <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>``<span class="token punctuation">)</span>field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>UnmodifiableMap包装器对象内的字段_m_是一个我们可以更改的可变映射：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>writeableEnvironmentVariables<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;baeldung&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;has set an environment variable&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">assertThat</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">&quot;baeldung&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;has set an environment variable&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上，在Windows上，还有一个替代的_ProcessEnvironment_实现，它也考虑了不区分大小写的环境变量，所以使用上述技术的库也必须考虑这一点。然而，原则上，这就是我们如何绕过不可修改的环境变量映射。</p><h3 id="_2-3-当反射访问不起作用时" tabindex="-1"><a class="header-anchor" href="#_2-3-当反射访问不起作用时"><span>2.3. 当反射访问不起作用时</span></a></h3><p>从JDK 17开始，默认情况下，Java模块系统通过禁用对其核心内部的反射修改来保护。这些被认为是不安全的做法，如果内部在未来发生变化，可能会导致运行时错误。</p><p>我们可能会收到这样的错误：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Unable</span> <span class="token keyword">to</span> <span class="token namespace">make</span> field <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>HashMap</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>ProcessEnvironment</span><span class="token punctuation">.</span>theEnvironment accessible<span class="token operator">:</span> \n  <span class="token keyword">module</span> <span class="token namespace">java<span class="token punctuation">.</span>base</span> does not <span class="token string">&quot;opens java.lang&quot;</span> <span class="token keyword">to</span> <span class="token namespace">unnamed</span> <span class="token keyword">module</span> <span class="token annotation punctuation">@fdefd3f</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这表明Java模块系统正在阻止使用反射。这可以通过向我们的测试运行器配置中的命令行参数添加一些额外的参数来解决_pom.xml_，使用_–add-opens_允许这种反射访问：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>``\n    `````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`````````org.apache.maven.plugins`````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`````````\n    `````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````````maven-surefire-plugin`````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````````\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>``\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>argLine</span><span class="token punctuation">&gt;</span></span>`\n            --add-opens java.base/java.util=ALL-UNNAMED\n            --add-opens java.base/java.lang=ALL-UNNAMED\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>argLine</span><span class="token punctuation">&gt;</span></span>`\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>``\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种变通方法允许我们编写代码并使用通过反射打破封装的工具。然而，我们可能希望避免这样做，因为打开这些模块可能会允许不安全的编码实践，这些实践在测试时有效，但在运行时意外失败。我们可以选择不需要这种变通的工具。</p><h3 id="_2-4-为什么我们需要以编程方式设置环境变量" tabindex="-1"><a class="header-anchor" href="#_2-4-为什么我们需要以编程方式设置环境变量"><span>2.4. 为什么我们需要以编程方式设置环境变量</span></a></h3><p>我们的单元测试可以由测试运行器设置的环境变量运行。这可能是我们的首选，如果我们有一个适用于整个测试套件的全局配置。</p><p>我们可以通过在_pom.xml_中的_surefire_配置中添加环境变量来实现这一点：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>``\n    `````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`````````org.apache.maven.plugins`````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`````````\n    `````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````````maven-surefire-plugin`````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````````\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>``\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environmentVariables</span><span class="token punctuation">&gt;</span></span>`\n            `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SET_BY_SUREFIRE</span><span class="token punctuation">&gt;</span></span>`YES`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>SET_BY_SUREFIRE</span><span class="token punctuation">&gt;</span></span>`\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environmentVariables</span><span class="token punctuation">&gt;</span></span>`\n    ``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>``\n``<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>``\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后这个变量对我们的测试可见：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">assertThat</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">&quot;SET_BY_SUREFIRE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;YES&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然而，我们可能有根据不同的环境变量设置操作不同的代码。我们可能更愿意能够使用不同测试用例中的不同环境变量值来测试这种行为的所有变体。</p><p>同样，我们可能有在测试时不可预测的值。一个很好的例子是我们在docker容器中运行WireMock或测试数据库的端口。</p><h3 id="_2-5-从测试库中获得正确的帮助" tabindex="-1"><a class="header-anchor" href="#_2-5-从测试库中获得正确的帮助"><span>2.5. 从测试库中获得正确的帮助</span></a></h3><p>有几个测试库可以帮助我们在测试时设置环境变量。每个库都具有不同程度的与不同测试框架和JDK版本的兼容性。</p><p>我们可以根据首选的工作流程、环境变量的值是否提前知道以及我们计划使用的JDK版本来选择合适的库。</p><p>我们应该注意到，所有这些库都不仅仅涵盖环境变量。它们都使用在测试之前捕获当前环境的方法，然后在测试完成后将环境恢复到原始状态。</p><h2 id="_3-使用junit-pioneer设置环境变量" tabindex="-1"><a class="header-anchor" href="#_3-使用junit-pioneer设置环境变量"><span>3. 使用JUnit Pioneer设置环境变量</span></a></h2><p>JUnit Pioneer是JUnit 5的一套扩展。它提供了一种基于注解的方式来设置和清除环境变量。</p><p>我们可以通过_junit-pioneer_依赖项添加它：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```````\n    `````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`````````org.junit-pioneer`````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`````````\n    `````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````````junit-pioneer`````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````````\n    ```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```````2.1.0```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```````\n    ```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>```````test```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>```````\n```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-1-使用-setenvironmentvariable-注解" tabindex="-1"><a class="header-anchor" href="#_3-1-使用-setenvironmentvariable-注解"><span>3.1. 使用_SetEnvironmentVariable_注解</span></a></h3><p>我们可以在测试类或方法上使用_SetEnvironmentVariable_注解，我们的测试代码就在环境中设置了该值：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SetEnvironmentVariable</span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token string">&quot;pioneer&quot;</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">&quot;is pioneering&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">EnvironmentVariablesSetByJUnitPioneerUnitTest</span> <span class="token punctuation">{</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们应该注意到_key_和_value_必须在编译时已知。</p><p>然后我们的测试可以使用环境变量：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">variableCanBeRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">assertThat</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">&quot;pioneer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;is pioneering&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以多次使用@SetEnvironmentVariable注解来设置多个变量。</p><h3 id="_3-2-清除环境变量" tabindex="-1"><a class="header-anchor" href="#_3-2-清除环境变量"><span>3.2. 清除环境变量</span></a></h3><p>我们可能还希望清除系统提供的环境变量，甚至在某些特定测试中清除在类级别设置的一些变量：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ClearEnvironmentVariable</span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token string">&quot;pioneer&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenEnvironmentVariableIsClear_thenItIsNotSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">assertThat</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">&quot;pioneer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-junit-pioneer的限制" tabindex="-1"><a class="header-anchor" href="#_3-3-junit-pioneer的限制"><span>3.3. JUnit Pioneer的限制</span></a></h3><p>**JUnit Pioneer只能与JUnit 5一起使用。**它使用反射，因此需要16或更低版本的Java，或者使用_add-opens_变通方法。</p><h2 id="_4-使用system-stubs设置环境变量" tabindex="-1"><a class="header-anchor" href="#_4-使用system-stubs设置环境变量"><span>4. 使用System Stubs设置环境变量</span></a></h2><p>System Stubs对JUnit 4、JUnit 5和TestNG都有测试支持。像它的前身System Lambda一样，它也可以在任何框架中的任何测试代码体中独立使用。<strong>System Stubs与从11开始的所有JDK版本兼容。</strong></p><h3 id="_4-1-在junit-5中设置环境变量" tabindex="-1"><a class="header-anchor" href="#_4-1-在junit-5中设置环境变量"><span>4.1. 在JUnit 5中设置环境变量</span></a></h3><p>为此我们需要System Stubs JUnit 5依赖项：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```````\n    `````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`````````uk.org.webcompere`````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`````````\n    `````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````````system-stubs-jupiter`````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````````\n    ```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```````2.1.3```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```````\n    ```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>```````test```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>```````\n```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，我们需要将扩展添加到我们的测试类中：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SystemStubsExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">EnvironmentVariablesUnitTest</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以将一个_EnvironmentVariables_存根对象初始化为测试类的字段，使用我们希望使用的環境变量：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SystemStub</span>\n<span class="token keyword">private</span> <span class="token class-name">EnvironmentVariables</span> environment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EnvironmentVariables</span><span class="token punctuation">(</span><span class="token string">&quot;MY VARIABLE&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;is set&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>值得注意的是，<strong>我们必须使用@SystemStub注解对象</strong>，以便扩展知道如何使用它。</p><p>_SystemStubsExtension_然后在测试期间激活这个替代环境，并在之后清理它。<strong>在测试期间，_EnvironmentVariables_对象也可以修改</strong>，并且对_System.getenv()_的调用接收到最新的配置。</p><p>让我们也看看一个更复杂的情况，我们希望设置一个环境变量，其值仅在测试初始化时才知道。在这种情况下，由于我们将在_beforeEach()_方法中提供值，我们不需要在初始化器列表中创建对象实例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SystemStub</span>\n<span class="token keyword">private</span> <span class="token class-name">EnvironmentVariables</span> environmentVariables<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>JUnit调用我们的_beforeEach()_方法时，扩展已经为我们创建了对象，我们可以使用它来设置我们需要的环境变量：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@BeforeEach</span>\n<span class="token keyword">void</span> <span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    environmentVariables<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>&quot;继续翻译：\n\n<span class="token string">&quot;systemstubs&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;creates stub objects&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenEnvironmentVariableHasBeenSet_thenCanReadIt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">assertThat</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">&quot;systemstubs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;creates stub objects&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当测试方法执行完成后，环境变量将恢复到修改之前的状态。</p><h3 id="_4-2-在junit-4中设置环境变量" tabindex="-1"><a class="header-anchor" href="#_4-2-在junit-4中设置环境变量"><span>4.2. 在JUnit 4中设置环境变量</span></a></h3><p>为此，我们需要System Stubs JUnit 4依赖项：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```````\n    `````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`````````uk.org.webcompere`````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`````````\n    `````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````````system-stubs-junit4`````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````````\n    ```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```````2.1.3```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```````\n    ```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>```````test```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>```````\n```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>System Stubs提供了一个JUnit 4规则</strong>。我们将其作为测试类的字段添加：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Rule</span>\n<span class="token keyword">public</span> <span class="token class-name">EnvironmentVariablesRule</span> environmentVariablesRule <span class="token operator">=</span>\n  <span class="token keyword">new</span> <span class="token class-name">EnvironmentVariablesRule</span><span class="token punctuation">(</span><span class="token string">&quot;system stubs&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;initializes variable&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们用一个环境变量进行了初始化。我们也可以在测试中或在_@Before_方法中调用规则的_set()_方法来修改变量。</p><p>一旦测试运行，环境变量就处于激活状态：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">canReadVariable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">assertThat</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">&quot;system stubs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;initializes variable&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-在testng中设置环境变量" tabindex="-1"><a class="header-anchor" href="#_4-3-在testng中设置环境变量"><span>4.3. 在TestNG中设置环境变量</span></a></h3><p>为此我们需要System Stubs TestNG依赖项：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```````\n    `````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`````````uk.org.webcompere`````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`````````\n    `````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````````system-stubs-testng`````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````````\n    ```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```````2.1.3```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```````\n    ```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>```````test```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>```````\n```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这提供了一个TestNG监听器，其工作方式与上述JUnit 5解决方案类似。</p><p>我们将监听器添加到测试类中：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Listeners</span><span class="token punctuation">(</span><span class="token class-name">SystemStubsListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnvironmentVariablesTestNGUnitTest</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@SystemStub</span>\n<span class="token keyword">private</span> <span class="token class-name">EnvironmentVariables</span> setEnvironment<span class="token punctuation">;</span>\n\n<span class="token annotation punctuation">@BeforeClass</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">beforeAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    setEnvironment<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;testng&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;has environment variables&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenEnvironmentVariableWasSet_thenItCanBeRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">assertThat</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">&quot;testng&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;has environment variables&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4-无需测试框架的system-stubs" tabindex="-1"><a class="header-anchor" href="#_4-4-无需测试框架的system-stubs"><span>4.4. 无需测试框架的System Stubs</span></a></h3><p>System Stubs最初基于System Lambda的代码库，后者带有只能用于单个测试方法的技术。这意味着测试框架的选择完全开放。</p><p>因此，System Stubs Core可以用于在JUnit测试方法中的任何位置设置环境变量。</p><p>首先，我们获取_system-stubs-core_依赖项：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```````\n    `````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`````````uk.org.webcompere`````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`````````\n    `````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````````system-stubs-core`````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````````\n    ```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```````2.1.3```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```````\n    ```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>```````test```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>```````\n```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，在我们的一个测试方法中，我们可以用一个结构暂时设置一些环境变量。首先，我们需要从_SystemStubs_静态导入：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">uk<span class="token punctuation">.</span>org<span class="token punctuation">.</span>webcompere<span class="token punctuation">.</span>systemstubs<span class="token punctuation">.</span></span><span class="token class-name">SystemStubs</span><span class="token punctuation">.</span><span class="token static">withEnvironmentVariables</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后我们可以使用_withEnvironmentVariables()_方法来包装我们的测试代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">useEnvironmentVariables</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token function">withEnvironmentVariables</span><span class="token punctuation">(</span><span class="token string">&quot;system stubs&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;in test&quot;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n          <span class="token function">assertThat</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">&quot;system stubs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;in test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里我们可以看到，_assertThat()_调用是对一个已经设置了变量的环境的操作。在_execute()_调用的闭包之外，环境变量不受影响。</p><p>我们应该注意，<strong>这种技术要求我们的测试方法有_throws Exception_</strong>，因为_execute()_函数必须处理可能调用具有检查异常的方法的闭包。</p><p>这种技术还要求每个测试设置自己的环境，并且如果我们试图与单个测试生命周期更长的测试对象一起工作，例如Spring Context，它就不太适用。</p><p>System Stubs允许它的每个存根对象独立于测试框架进行设置和拆卸。因此，我们可以使用测试类的_beforeAll()_和_afterAll()_方法来操作我们的_EnvironmentVariables_对象：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">EnvironmentVariables</span> environmentVariables <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EnvironmentVariables</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token annotation punctuation">@BeforeAll</span>\n<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">beforeAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    environmentVariables<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;system stubs&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;in test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    environmentVariables<span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@AfterAll</span>\n<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">afterAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    environmentVariables<span class="token punctuation">.</span><span class="token function">teardown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然而，测试框架扩展的好处是，我们可以避免这种样板代码，因为它们为我们执行了这些基本操作。</p><h3 id="_4-5-system-stubs的限制" tabindex="-1"><a class="header-anchor" href="#_4-5-system-stubs的限制"><span>4.5. System Stubs的限制</span></a></h3><p>System Stubs的TestNG功能仅在2.1+版本中可用，这些版本限于Java 11及更高版本。</p><p>在其2.x版本中，<strong>System Stubs偏离了早期描述的基于反射的技术</strong>。它现在使用ByteBuddy来拦截环境变量调用。然而，如果项目使用的JDK版本低于11，则也无需使用这些更高版本。</p><p>System Stubs版本1提供了与JDK 8到JDK 16的兼容性。</p><h2 id="_5-system-rules和system-lambda" tabindex="-1"><a class="header-anchor" href="#_5-system-rules和system-lambda"><span>5. System Rules和System Lambda</span></a></h2><p>作为环境变量设置的最长期测试库之一，<strong>System Rules为JUnit 4提供了一个解决方案</strong>，并且它的作者用System Lambda替换了它，以提供一种与测试框架无关的方法。它们都是基于在测试时替换环境变量的核心技术。</p><h3 id="_5-1-使用system-rules设置环境变量" tabindex="-1"><a class="header-anchor" href="#_5-1-使用system-rules设置环境变量"><span>5.1. 使用System Rules设置环境变量</span></a></h3><p>首先我们需要_system-rules_依赖项：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```````\n    `````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`````````com.github.stefanbirkner`````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`````````\n    `````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````````system-rules`````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````````\n    ```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```````1.19.0```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```````\n    ```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>```````test```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>```````\n```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们将规则添加到我们的JUnit 4测试类中：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Rule</span>\n<span class="token keyword">public</span> <span class="token class-name">EnvironmentVariables</span> environmentVariablesRule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EnvironmentVariables</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以在_@Before_方法中设置值：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Before</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    environmentVariablesRule<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;system rules&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;works&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在我们的测试方法中访问正确的环境：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenEnvironmentVariable_thenCanReadIt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">assertThat</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">&quot;system rules&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;works&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>规则对象——<em>environmentVariablesRule</em>——允许我们在测试方法中立即设置环境变量。</p><h3 id="_5-2-使用system-lambda设置环境变量" tabindex="-1"><a class="header-anchor" href="#_5-2-使用system-lambda设置环境变量"><span>5.2. 使用System Lambda设置环境变量</span></a></h3><p>为此我们需要_system-lambda_依赖项：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```````\n    `````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`````````com.github.stefanbirkner`````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`````````\n    `````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````````system-lambda`````````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````````\n    ```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>```````1.2.1```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>```````\n    ```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>```````test```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>```````\n```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如在System Stubs解决方案中已经演示的，我们可以将依赖环境的代码放在测试中的闭包内。为此我们应该静态导入_SystemLambda_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>stefanbirkner<span class="token punctuation">.</span>systemlambda<span class="token punctuation">.</span></span><span class="token class-name">SystemLambda</span><span class="token punctuation">.</span><span class="token static">withEnvironmentVariable</span></span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后我们可以编写测试：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">enviromentVariableIsSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token function">withEnvironmentVariable</span><span class="token punctuation">(</span><span class="token string">&quot;system lambda&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;in test&quot;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n          <span class="token function">assertThat</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">&quot;system lambda&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;in test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3-system-rules和system-lambda的限制" tabindex="-1"><a class="header-anchor" href="#_5-3-system-rules和system-lambda的限制"><span>5.3. System Rules和System Lambda的限制</span></a></h3><p>虽然这两个都是成熟且广泛的库，但它们不能用于在JDK 17及更高版本中操作环境变量。</p><p>System Rules严重依赖于JUnit 4。我们不能使用System Lambda来设置测试装置范围的环境变量，因此<strong>它无法帮助我们进行Spring上下文初始化</strong>。</p><h2 id="_6-避免模拟环境变量" tabindex="-1"><a class="header-anchor" href="#_6-避免模拟环境变量"><span>6. 避免模拟环境变量</span></a></h2><p>虽然我们已经讨论了在测试时修改环境变量的许多方法，但可能值得考虑这是否必要，甚至有益。</p><h3 id="_6-1-也许这太冒险了" tabindex="-1"><a class="header-anchor" href="#_6-1-也许这太冒险了"><span>6.1. 也许这太冒险了</span></a></h3><p>正如我们上面看到的每一种解决方案，运行时更改环境变量并不简单。在多线程代码的情况下，这可能更加棘手。如果有多个测试装置在同一JVM中并行运行，可能使用JUnit 5的并发特性，那么不同的测试可能同时以矛盾的方式尝试控制环境。</p><p>尽管上述一些测试库可能在多个线程同时使用时不会崩溃，但很难预测环境变量可能如何从一刻到下一刻被设置。更糟糕的是，一个线程可能会捕获另一个测试的临时环境变量，就好像它们是测试全部完成时系统应该留下的正确状态一样。</p><p>作为另一个测试库的一个例子，当Mockito模拟静态方法时，它限制了当前线程，因为这种<strong>模拟全局变量可能会破坏并发测试</strong>。因此，修改环境变量遇到了完全相同的风险。一个测试可以影响JVM的整个全局状态，并在其他地方引起副作用。</p><p>同样，如果我们运行的代码只能通过环境变量进行控制，那么测试起来可能非常困难，我们当然可以通过设计来避免这种情况？</p><h3 id="_6-2-使用依赖注入" tabindex="-1"><a class="header-anchor" href="#_6-2-使用依赖注入"><span>6.2. 使用依赖注入</span></a></h3><p>构建一个在构造时接收所有输入的系统比从系统资源中提取输入的系统更容易测试。</p><p>像Spring这样的依赖注入容器允许我们构建更容易在运行时隔离测试的对象。</p><p>我们还应该注意，Spring允许我们使用系统属性来代替环境变量来设置其属性值。本文讨论的所有工具也都支持在测试时设置和重置系统属性。</p><h3 id="_6-3-使用抽象" tabindex="-1"><a class="header-anchor" href="#_6-3-使用抽象"><span>6.3. 使用抽象</span></a></h3><p>如果一个模块必须提取环境变量，也许它不应该直接依赖于</p>',136),o=[p];function c(l,i){return a(),s("div",null,o)}const k=n(e,[["render",c],["__file","2024-06-28-How to Mock Environment Variables in Unit Tests.html.vue"]]),r=JSON.parse('{"path":"/posts/baeldung/2024-06-28/2024-06-28-How%20to%20Mock%20Environment%20Variables%20in%20Unit%20Tests.html","title":"如何在单元测试中模拟环境变量","lang":"zh-CN","frontmatter":{"date":"2022-04-07T00:00:00.000Z","category":["Testing","Java"],"tag":["JUnit","TestNG","Environment Variables"],"head":[["meta",{"name":"keywords","content":"JUnit, TestNG, Environment Variables, Java, Baeldung"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-06-28/2024-06-28-How%20to%20Mock%20Environment%20Variables%20in%20Unit%20Tests.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"如何在单元测试中模拟环境变量"}],["meta",{"property":"og:description","content":"如何在单元测试中模拟环境变量 当我们的单元测试依赖于环境变量时，我们可能希望在测试实现中为它们提供特定的值。 Java不允许我们编辑环境变量，但我们可以使用一些变通方法，还有一些库可以帮助我们。 在本教程中，我们将探讨依赖环境变量进行单元测试的挑战，Java在最近版本中使这变得更加困难，以及JUnit Pioneer、System Stubs、Syst..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-28T20:32:49.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"JUnit"}],["meta",{"property":"article:tag","content":"TestNG"}],["meta",{"property":"article:tag","content":"Environment Variables"}],["meta",{"property":"article:published_time","content":"2022-04-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-28T20:32:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"如何在单元测试中模拟环境变量\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-07T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-28T20:32:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"如何在单元测试中模拟环境变量 当我们的单元测试依赖于环境变量时，我们可能希望在测试实现中为它们提供特定的值。 Java不允许我们编辑环境变量，但我们可以使用一些变通方法，还有一些库可以帮助我们。 在本教程中，我们将探讨依赖环境变量进行单元测试的挑战，Java在最近版本中使这变得更加困难，以及JUnit Pioneer、System Stubs、Syst..."},"headers":[{"level":2,"title":"2. 更改环境变量的挑战","slug":"_2-更改环境变量的挑战","link":"#_2-更改环境变量的挑战","children":[{"level":3,"title":"2.1. 环境为何不可修改","slug":"_2-1-环境为何不可修改","link":"#_2-1-环境为何不可修改","children":[]},{"level":3,"title":"2.2. 绕过不可修改的映射","slug":"_2-2-绕过不可修改的映射","link":"#_2-2-绕过不可修改的映射","children":[]},{"level":3,"title":"2.3. 当反射访问不起作用时","slug":"_2-3-当反射访问不起作用时","link":"#_2-3-当反射访问不起作用时","children":[]},{"level":3,"title":"2.4. 为什么我们需要以编程方式设置环境变量","slug":"_2-4-为什么我们需要以编程方式设置环境变量","link":"#_2-4-为什么我们需要以编程方式设置环境变量","children":[]},{"level":3,"title":"2.5. 从测试库中获得正确的帮助","slug":"_2-5-从测试库中获得正确的帮助","link":"#_2-5-从测试库中获得正确的帮助","children":[]}]},{"level":2,"title":"3. 使用JUnit Pioneer设置环境变量","slug":"_3-使用junit-pioneer设置环境变量","link":"#_3-使用junit-pioneer设置环境变量","children":[{"level":3,"title":"3.1. 使用_SetEnvironmentVariable_注解","slug":"_3-1-使用-setenvironmentvariable-注解","link":"#_3-1-使用-setenvironmentvariable-注解","children":[]},{"level":3,"title":"3.2. 清除环境变量","slug":"_3-2-清除环境变量","link":"#_3-2-清除环境变量","children":[]},{"level":3,"title":"3.3. JUnit Pioneer的限制","slug":"_3-3-junit-pioneer的限制","link":"#_3-3-junit-pioneer的限制","children":[]}]},{"level":2,"title":"4. 使用System Stubs设置环境变量","slug":"_4-使用system-stubs设置环境变量","link":"#_4-使用system-stubs设置环境变量","children":[{"level":3,"title":"4.1. 在JUnit 5中设置环境变量","slug":"_4-1-在junit-5中设置环境变量","link":"#_4-1-在junit-5中设置环境变量","children":[]},{"level":3,"title":"4.2. 在JUnit 4中设置环境变量","slug":"_4-2-在junit-4中设置环境变量","link":"#_4-2-在junit-4中设置环境变量","children":[]},{"level":3,"title":"4.3. 在TestNG中设置环境变量","slug":"_4-3-在testng中设置环境变量","link":"#_4-3-在testng中设置环境变量","children":[]},{"level":3,"title":"4.4. 无需测试框架的System Stubs","slug":"_4-4-无需测试框架的system-stubs","link":"#_4-4-无需测试框架的system-stubs","children":[]},{"level":3,"title":"4.5. System Stubs的限制","slug":"_4-5-system-stubs的限制","link":"#_4-5-system-stubs的限制","children":[]}]},{"level":2,"title":"5. System Rules和System Lambda","slug":"_5-system-rules和system-lambda","link":"#_5-system-rules和system-lambda","children":[{"level":3,"title":"5.1. 使用System Rules设置环境变量","slug":"_5-1-使用system-rules设置环境变量","link":"#_5-1-使用system-rules设置环境变量","children":[]},{"level":3,"title":"5.2. 使用System Lambda设置环境变量","slug":"_5-2-使用system-lambda设置环境变量","link":"#_5-2-使用system-lambda设置环境变量","children":[]},{"level":3,"title":"5.3. System Rules和System Lambda的限制","slug":"_5-3-system-rules和system-lambda的限制","link":"#_5-3-system-rules和system-lambda的限制","children":[]}]},{"level":2,"title":"6. 避免模拟环境变量","slug":"_6-避免模拟环境变量","link":"#_6-避免模拟环境变量","children":[{"level":3,"title":"6.1. 也许这太冒险了","slug":"_6-1-也许这太冒险了","link":"#_6-1-也许这太冒险了","children":[]},{"level":3,"title":"6.2. 使用依赖注入","slug":"_6-2-使用依赖注入","link":"#_6-2-使用依赖注入","children":[]},{"level":3,"title":"6.3. 使用抽象","slug":"_6-3-使用抽象","link":"#_6-3-使用抽象","children":[]}]}],"git":{"createdTime":1719606769000,"updatedTime":1719606769000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":13.05,"words":3916},"filePathRelative":"posts/baeldung/2024-06-28/2024-06-28-How to Mock Environment Variables in Unit Tests.md","localizedDate":"2022年4月7日","excerpt":"\\n<p>当我们的单元测试依赖于环境变量时，我们可能希望在测试实现中为它们提供特定的值。</p>\\n<p>Java不允许我们编辑环境变量，但我们可以使用一些变通方法，还有一些库可以帮助我们。</p>\\n<p>在本教程中，我们将探讨依赖环境变量进行单元测试的挑战，Java在最近版本中使这变得更加困难，以及JUnit Pioneer、System Stubs、System Lambda和System Rules库。我将为JUnit 4、JUnit 5和TestNG查看这些内容。</p>\\n<h2>2. 更改环境变量的挑战</h2>\\n<p>在其他语言中，比如JavaScript，我们可以非常容易地在测试中修改环境：</p>","autoDesc":true}');export{k as comp,r as data};
