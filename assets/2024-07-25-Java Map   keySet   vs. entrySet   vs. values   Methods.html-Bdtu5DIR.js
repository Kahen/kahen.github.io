import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,o as s,a as t}from"./app-BTwZI-W8.js";const e={},p=t(`<h1 id="java-map-–-keyset-与-entryset-以及-values-方法-baeldung" tabindex="-1"><a class="header-anchor" href="#java-map-–-keyset-与-entryset-以及-values-方法-baeldung"><span>Java Map – keySet() 与 entrySet() 以及 values() 方法 | Baeldung</span></a></h1><p>在本教程中，我们将讨论 Java 中 Map 接口的三种方法：keySet()、entrySet() 和 values()。这些方法分别用于检索 Map 中的键集合、键值映射集合和值集合。</p><h3 id="_2-map-初始化" tabindex="-1"><a class="header-anchor" href="#_2-map-初始化"><span>2. Map 初始化</span></a></h3><p>虽然我们可以在任何实现 Map 接口的类上使用这些方法，如 HashMap、TreeMap 和 LinkedHashMap，但这里我们将使用 HashMap。</p><p>让我们创建并初始化一个键类型为 String，值为 Integer 类型的 HashMap：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Map</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>\` map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;two&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-keyset-方法" tabindex="-1"><a class="header-anchor" href="#_3-keyset-方法"><span>3. keySet() 方法</span></a></h3><p><strong>keySet() 方法返回 Map 中包含的键的 Set。</strong></p><p>让我们将 keySet() 方法应用于 Map 并将结果存储在一个名为 actualValues 的 Set 变量中：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Set</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>\` actualValues <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，让我们确认返回的 Set 的大小为 2：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> actualValues<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此外，我们可以看到返回的 Set 包含 Map 的键：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">assertTrue</span><span class="token punctuation">(</span>actualValues<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertTrue</span><span class="token punctuation">(</span>actualValues<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;two&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-entryset-方法" tabindex="-1"><a class="header-anchor" href="#_4-entryset-方法"><span>4. entrySet() 方法</span></a></h3><p><strong>entrySet() 方法返回键值映射的集合。</strong> 该方法不接受任何参数，返回类型为 Map.Entry 的 Set。</p><p>让我们将 entrySet() 方法应用于 Map：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>\`<span class="token operator">&gt;</span> actualValues <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>正如我们所看到的，actualValues 是 Map.Entry 对象的 Set。</p><p>Map.Entry 是一个静态接口，它同时持有键和值。内部，它有两种实现——AbstractMap.SimpleEntry 和 AbstractMap.SimpleImmutableEntry。</p><p>像以前一样，让我们确认返回的 Set 的大小为 2：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> actualValues<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此外，我们可以看到返回的 Set 包含 Map 的键值条目：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">assertTrue</span><span class="token punctuation">(</span>actualValues<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AbstractMap<span class="token punctuation">.</span>SimpleEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertTrue</span><span class="token punctuation">(</span>actualValues<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AbstractMap<span class="token punctuation">.</span>SimpleEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;two&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们选择了 Map.Entry 接口的 AbstractMap.SimpleEntry 实现来进行测试。</p><h3 id="_5-values-方法" tabindex="-1"><a class="header-anchor" href="#_5-values-方法"><span>5. values() 方法</span></a></h3><p><strong>values() 方法返回 Map 中包含的值的集合。</strong> 该方法不接受任何参数，返回类型为 Collection。</p><p>让我们将 values() 方法应用于 Map 并将结果存储在一个名为 actualValues 的 Collection 变量中：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Collection</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>\` actualValues <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在，让我们验证返回的 Collection 的大小：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> actualValues<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此外，我们可以看到返回的集合包含 Map 的值：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">assertTrue</span><span class="token punctuation">(</span>actualValues<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertTrue</span><span class="token punctuation">(</span>actualValues<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-结论" tabindex="-1"><a class="header-anchor" href="#_6-结论"><span>6. 结论</span></a></h3><p>在本文中，我们讨论了 Map 接口的 keySet()、entrySet() 和 values() 方法。</p><p>像往常一样，完整的源代码可以在 GitHub 上找到。</p>`,36),c=[p];function o(l,u){return s(),n("div",null,c)}const k=a(e,[["render",o],["__file","2024-07-25-Java Map   keySet   vs. entrySet   vs. values   Methods.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-25/2024-07-25-Java%20Map%20%20%20keySet%20%20%20vs.%20entrySet%20%20%20vs.%20values%20%20%20Methods.html","title":"Java Map – keySet() 与 entrySet() 以及 values() 方法 | Baeldung","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","Collections"],"tag":["Java Map","keySet","entrySet","values"],"head":[["meta",{"name":"keywords","content":"Java Map, keySet, entrySet, values"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-25/2024-07-25-Java%20Map%20%20%20keySet%20%20%20vs.%20entrySet%20%20%20vs.%20values%20%20%20Methods.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Java Map – keySet() 与 entrySet() 以及 values() 方法 | Baeldung"}],["meta",{"property":"og:description","content":"Java Map – keySet() 与 entrySet() 以及 values() 方法 | Baeldung 在本教程中，我们将讨论 Java 中 Map 接口的三种方法：keySet()、entrySet() 和 values()。这些方法分别用于检索 Map 中的键集合、键值映射集合和值集合。 2. Map 初始化 虽然我们可以在任何实现 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-25T03:23:25.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java Map"}],["meta",{"property":"article:tag","content":"keySet"}],["meta",{"property":"article:tag","content":"entrySet"}],["meta",{"property":"article:tag","content":"values"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-25T03:23:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java Map – keySet() 与 entrySet() 以及 values() 方法 | Baeldung\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-25T03:23:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Java Map – keySet() 与 entrySet() 以及 values() 方法 | Baeldung 在本教程中，我们将讨论 Java 中 Map 接口的三种方法：keySet()、entrySet() 和 values()。这些方法分别用于检索 Map 中的键集合、键值映射集合和值集合。 2. Map 初始化 虽然我们可以在任何实现 ..."},"headers":[{"level":3,"title":"2. Map 初始化","slug":"_2-map-初始化","link":"#_2-map-初始化","children":[]},{"level":3,"title":"3. keySet() 方法","slug":"_3-keyset-方法","link":"#_3-keyset-方法","children":[]},{"level":3,"title":"4. entrySet() 方法","slug":"_4-entryset-方法","link":"#_4-entryset-方法","children":[]},{"level":3,"title":"5. values() 方法","slug":"_5-values-方法","link":"#_5-values-方法","children":[]},{"level":3,"title":"6. 结论","slug":"_6-结论","link":"#_6-结论","children":[]}],"git":{"createdTime":1721877805000,"updatedTime":1721877805000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":1.92,"words":576},"filePathRelative":"posts/baeldung/2024-07-25/2024-07-25-Java Map   keySet   vs. entrySet   vs. values   Methods.md","localizedDate":"2022年4月1日","excerpt":"\\n<p>在本教程中，我们将讨论 Java 中 Map 接口的三种方法：keySet()、entrySet() 和 values()。这些方法分别用于检索 Map 中的键集合、键值映射集合和值集合。</p>\\n<h3>2. Map 初始化</h3>\\n<p>虽然我们可以在任何实现 Map 接口的类上使用这些方法，如 HashMap、TreeMap 和 LinkedHashMap，但这里我们将使用 HashMap。</p>\\n<p>让我们创建并初始化一个键类型为 String，值为 Integer 类型的 HashMap：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token class-name\\">Map</span>`<span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Integer</span><span class=\\"token punctuation\\">&gt;</span></span>` map <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">HashMap</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nmap<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"one\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nmap<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"two\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}');export{k as comp,d as data};
