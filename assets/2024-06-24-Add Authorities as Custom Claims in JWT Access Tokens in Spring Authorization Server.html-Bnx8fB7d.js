import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-WRJux_nM.js";const p={},e=t('<h1 id="在spring授权服务器中将权限作为自定义声明添加到jwt访问令牌" tabindex="-1"><a class="header-anchor" href="#在spring授权服务器中将权限作为自定义声明添加到jwt访问令牌"><span>在Spring授权服务器中将权限作为自定义声明添加到JWT访问令牌</span></a></h1><p>如果您正在处理Spring Security（特别是OAuth）实现，一定要看看《Learn Spring Security》课程。</p><h3 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h3><p>将自定义声明添加到JSON Web Token（JWT）访问令牌在许多场景中至关重要。自定义声明允许我们在令牌负载中包含额外的信息。</p><p>在本教程中，我们将学习如何在Spring授权服务器中将资源所有者的权限添加到JWT访问令牌。</p><p>Spring授权务器是Spring生态系统中的一个新项目，旨在为Spring应用程序提供授权服务器支持。它旨在简化使用熟悉且灵活的Spring编程模型实现OAuth 2.0和OpenID Connect（OIDC）授权服务器的过程。</p><h3 id="_2-1-maven依赖" tabindex="-1"><a class="header-anchor" href="#_2-1-maven依赖"><span>2.1. Maven依赖</span></a></h3><p>首先，我们将导入spring-boot-starter-web、spring-boot-starter-security、spring-boot-starter-test和spring-security-oauth2-authorization-server依赖到pom.xml中：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`````org.springframework.boot`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````spring-boot-starter-web`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`````2.5.4`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`````\n`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`````\n`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`````org.springframework.boot`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````spring-boot-starter-security`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`````2.5.4`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`````\n`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`````\n`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`````org.springframework.security`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````spring-security-oauth2-authorization-server`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`````0.2.0`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`````\n`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`````\n`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`````org.springframework.boot`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````spring-boot-starter-test`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`````2.5.4`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`````\n`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者，我们可以将spring-boot-starter-oauth2-authorization-server依赖添加到我们的pom.xml文件中：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`````org.springframework.boot`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````spring-boot-starter-oauth2-authorization-server`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`````3.2.0`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`````\n`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-项目设置" tabindex="-1"><a class="header-anchor" href="#_2-2-项目设置"><span>2.2. 项目设置</span></a></h3><p>让我们设置Spring授权服务器以发行访问令牌。为了保持简单，我们将使用Spring Security OAuth授权服务器应用程序。</p><p>假设我们正在使用GitHub上可用的授权服务器项目。</p><p><strong>在基于Spring Security OAuth2的应用程序中，</strong> <strong>我们可以通过自定义授权服务器中的令牌创建过程来将自定义声明添加到JWT访问令牌中。</strong> 这种类型的声明对于将额外信息注入JWT非常有用，这些信息随后可以由资源服务器或认证和授权流程中的其他组件使用。</p><h3 id="_3-1-添加基本自定义声明" tabindex="-1"><a class="header-anchor" href="#_3-1-添加基本自定义声明"><span>3.1. 添加基本自定义声明</span></a></h3><p><strong>我们可以使用_OAuth2TokenCustomizer<code>&lt;JWTEncodingContext&gt;</code>_ bean将自定义声明添加到访问令牌中。</strong> 通过使用它，授权服务器发行的每个访问令牌都将填充自定义声明。</p><p>让我们在DefaultSecurityConfig类中添加OAuth2TokenCustomizer bean：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n<span class="token annotation punctuation">@Profile</span><span class="token punctuation">(</span><span class="token string">&quot;basic-claim&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">OAuth2TokenCustomizer</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">JwtEncodingContext</span><span class="token punctuation">&gt;</span></span>``` <span class="token function">jwtTokenCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">OAuth2TokenType</span><span class="token punctuation">.</span><span class="token constant">ACCESS_TOKEN</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getTokenType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        context<span class="token punctuation">.</span><span class="token function">getClaims</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">claims</span><span class="token punctuation">(</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n          claims<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;claim-1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value-1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          claims<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;claim-2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value-2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>OAuth2TokenCustomizer接口是Spring Security OAuth2库的一部分，用于自定义OAuth 2.0令牌。在这种情况下，它特别在编码过程中自定义JWT令牌。</p><p>传递给jwtTokenCustomizer() bean的lambda表达式定义了自定义逻辑。context参数表示令牌编码过程中的JwtEncodingContext。</p><p>首先，我们使用context.getTokenType()方法检查正在处理的令牌是否是访问令牌。然后，我们使用context.getClaims()方法获取与正在构建的JWT关联的声明。最后，我们将自定义声明添加到JWT中。</p><p>在这个例子中，添加了两个声明（&quot;claim-1&quot;和&quot;claim-2&quot;）及其相应的值（&quot;value-1&quot;和&quot;value-2&quot;）。</p><h3 id="_3-2-测试自定义声明" tabindex="-1"><a class="header-anchor" href="#_3-2-测试自定义声明"><span>3.2. 测试自定义声明</span></a></h3><p>对于测试，我们将使用_client_credentials_授权类型。</p><p>首先，我们将从RegisteredClient对象中定义_AuthorizationServerConfig_的_client_credentials_授权类型作为授权的授权类型：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">RegisteredClientRepository</span> <span class="token function">registeredClientRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">RegisteredClient</span> registeredClient <span class="token operator">=</span> <span class="token class-name">RegisteredClient</span><span class="token punctuation">.</span><span class="token function">withId</span><span class="token punctuation">(</span><span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">clientId</span><span class="token punctuation">(</span><span class="token string">&quot;articles-client&quot;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">clientSecret</span><span class="token punctuation">(</span><span class="token string">&quot;{noop}secret&quot;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">clientAuthenticationMethod</span><span class="token punctuation">(</span><span class="token class-name">ClientAuthenticationMethod</span><span class="token punctuation">.</span><span class="token constant">CLIENT_SECRET_BASIC</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">authorizationGrantType</span><span class="token punctuation">(</span><span class="token class-name">AuthorizationGrantType</span><span class="token punctuation">.</span><span class="token constant">CLIENT_CREDENTIALS</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">authorizationGrantType</span><span class="token punctuation">(</span><span class="token class-name">AuthorizationGrantType</span><span class="token punctuation">.</span><span class="token constant">AUTHORIZATION_CODE</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">authorizationGrantType</span><span class="token punctuation">(</span><span class="token class-name">AuthorizationGrantType</span><span class="token punctuation">.</span><span class="token constant">REFRESH_TOKEN</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">redirectUri</span><span class="token punctuation">(</span><span class="token string">&quot;http://127.0.0.1:8080/login/oauth2/code/articles-client-oidc&quot;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">redirectUri</span><span class="token punctuation">(</span><span class="token string">&quot;http://127.0.0.1:8080/authorized&quot;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">scope</span><span class="token punctuation">(</span><span class="token class-name">OidcScopes</span><span class="token punctuation">.</span><span class="token constant">OPENID</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">scope</span><span class="token punctuation">(</span><span class="token string">&quot;articles.read&quot;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">InMemoryRegisteredClientRepository</span><span class="token punctuation">(</span>registeredClient<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，让我们在CustomClaimsConfigurationTest类中创建一个测试用例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ActiveProfiles</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;basic-claim&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomClaimsConfigurationTest</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">ISSUER_URL</span> <span class="token operator">=</span> <span class="token string">&quot;http://localhost:&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">USERNAME</span> <span class="token operator">=</span> <span class="token string">&quot;articles-client&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">PASSWORD</span> <span class="token operator">=</span> <span class="token string">&quot;secret&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">GRANT_TYPE</span> <span class="token operator">=</span> <span class="token string">&quot;client_credentials&quot;</span><span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Autowired</span>\n    <span class="token keyword">private</span> <span class="token class-name">TestRestTemplate</span> restTemplate<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@LocalServerPort</span>\n    <span class="token keyword">private</span> <span class="token keyword">int</span> serverPort<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Test</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenAccessToken_whenGetCustomClaim_thenSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token constant">ISSUER_URL</span> <span class="token operator">+</span> serverPort <span class="token operator">+</span> <span class="token string">&quot;/oauth2/token&quot;</span><span class="token punctuation">;</span>\n        <span class="token class-name">HttpHeaders</span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        headers<span class="token punctuation">.</span><span class="token function">setBasicAuth</span><span class="token punctuation">(</span><span class="token constant">USERNAME</span><span class="token punctuation">,</span> <span class="token constant">PASSWORD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">MultiValueMap</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>` params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedMultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        params<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;grant_type&quot;</span><span class="token punctuation">,</span> <span class="token constant">GRANT_TYPE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">HttpEntity</span><span class="token operator">&lt;</span><span class="token class-name">MultiValueMap</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`<span class="token operator">&gt;</span> requestEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">ResponseEntity</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TokenDTO</span><span class="token punctuation">&gt;</span></span>` response <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token constant">POST</span><span class="token punctuation">,</span> requestEntity<span class="token punctuation">,</span> <span class="token class-name">TokenDTO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">SignedJWT</span> signedJWT <span class="token operator">=</span> <span class="token class-name">SignedJWT</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAccessToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">JWTClaimsSet</span> claimsSet <span class="token operator">=</span> signedJWT<span class="token punctuation">.</span><span class="token function">getJWTClaimsSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Map</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>``` claims <span class="token operator">=</span> claimsSet<span class="token punctuation">.</span><span class="token function">getClaims</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;value-1&quot;</span><span class="token punctuation">,</span> claims<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;claim-1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;value-2&quot;</span><span class="token punctuation">,</span> claims<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;claim-2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">TokenDTO</span> <span class="token punctuation">{</span>\n        <span class="token annotation punctuation">@JsonProperty</span><span class="token punctuation">(</span><span class="token string">&quot;access_token&quot;</span><span class="token punctuation">)</span>\n        <span class="token keyword">private</span> <span class="token class-name">String</span> accessToken<span class="token punctuation">;</span>\n        <span class="token annotation punctuation">@JsonProperty</span><span class="token punctuation">(</span><span class="token string">&quot;token_type&quot;</span><span class="token punctuation">)</span>\n        <span class="token keyword">private</span> <span class="token class-name">String</span> tokenType<span class="token punctuation">;</span>\n        <span class="token annotation punctuation">@JsonProperty</span><span class="token punctuation">(</span><span class="token string">&quot;expires_in&quot;</span><span class="token punctuation">)</span>\n        <span class="token keyword">private</span> <span class="token class-name">String</span> expiresIn<span class="token punctuation">;</span>\n        <span class="token annotation punctuation">@JsonProperty</span><span class="token punctuation">(</span><span class="token string">&quot;scope&quot;</span><span class="token punctuation">)</span>\n        <span class="token keyword">private</span> <span class="token class-name">String</span> scope<span class="token punctuation">;</span>\n\n        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getAccessToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> accessToken<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们浏览测试的关键部分以了解发生了什么：</p><ul><li>首先构建OAuth2令牌端点的URL。</li><li>从对令牌端点的POST请求中检索包含TokenDTO类的响应。在这里，我们创建了一个带有标头（基本认证）和参数（授权类型）的HTTP请求实体。</li><li>使用SignedJWT类解析响应中的访问令牌。同时，我们从JWT中提取声明，并将它们存储在Map<code>&lt;String, Object&gt;</code>中。</li><li>使用JUnit断言断言JWT中的特定声明具有预期值。</li></ul><p><strong>此测试确认了我们的令牌编码过程正常工作，并且我们的声明按预期生成。太棒了！</strong></p><p>此外，我们可以使用curl命令获取访问令牌：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">--request</span> POST <span class="token punctuation">\\</span>\n  <span class="token parameter variable">--url</span> http://localhost:9000/oauth2/token <span class="token punctuation">\\</span>\n  <span class="token parameter variable">--header</span> <span class="token string">&#39;Authorization: Basic YXJ0aWNsZXMtY2xpZW50OnNlY3JldA==&#39;</span> <span class="token punctuation">\\</span>\n  <span class="token parameter variable">--header</span> <span class="token string">&#39;Content-Type: application/x-www-form-urlencoded&#39;</span> <span class="token punctuation">\\</span>\n  <span class="token parameter variable">--data</span> <span class="token assign-left variable">grant_type</span><span class="token operator">=</span>client_credentials\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，凭据被编码为客户端ID和客户端密钥的Base64字符串，由单个冒号“:”分隔。</p><p>现在，我们可以在_basic-claim_配置文件下运行我们的Spring Boot应用程序。</p><p>如果我们获取访问令牌并使用jwt.io对其进行解码，我们会发现令牌体中的测试声明：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;sub&quot;</span><span class="token operator">:</span> <span class="token string">&quot;articles-client&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;aud&quot;</span><span class="token operator">:</span> <span class="token string">&quot;articles-client&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;nbf&quot;</span><span class="token operator">:</span> <span class="token number">1704517985</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;scope&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">&quot;articles.read&quot;</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;openid&quot;</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;iss&quot;</span><span class="token operator">:</span> <span class="token string">&quot;http://auth-server:9000&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;exp&quot;</span><span class="token operator">:</span> <span class="token number">1704518285</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;claim-1&quot;</span><span class="token operator">:</span> <span class="token string">&quot;value-1&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;iat&quot;</span><span class="token operator">:</span> <span class="token number">1704517985</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;claim-2&quot;</span><span class="token operator">:</span> <span class="token string">&quot;value-2&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如我们所看到的，测试声明的值符合预期。</p><h2 id="_4-4-将权限作为自定义声明添加到jwt访问令牌" tabindex="-1"><a class="header-anchor" href="#_4-4-将权限作为自定义声明添加到jwt访问令牌"><span>4.### 4. 将权限作为自定义声明添加到JWT访问令牌</span></a></h2><p><strong>将权限作为自定义声明添加到JWT访问令牌通常是确保和管理Spring Boot应用程序访问的关键方面。</strong> 在Spring Security中，权限通常由_GrantedAuthority_对象表示，指示用户被允许执行的操作或角色。通过将这些权限作为自定义声明包含在JWT访问令牌中，我们为资源服务器提供了一种方便且标准化的方式来理解用户的权限。</p><h3 id="_4-1-将权限作为自定义声明添加" tabindex="-1"><a class="header-anchor" href="#_4-1-将权限作为自定义声明添加"><span>4.1. 将权限作为自定义声明添加</span></a></h3><p>首先，我们在_DefaultSecurityConfig_类中使用一个简单的内存用户配置，包含一组权限：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n<span class="token class-name">UserDetailsService</span> <span class="token function">users</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">UserDetails</span> user <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">withDefaultPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">username</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">&quot;USER&quot;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">InMemoryUserDetailsManager</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建了一个用户名为“<em>admin</em>”、密码为“<em>password</em>”和角色为“<em>USER</em>”的单个用户。</p><p>现在，让我们在访问令牌中用这些权限填充自定义声明：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n<span class="token annotation punctuation">@Profile</span><span class="token punctuation">(</span><span class="token string">&quot;authority-claim&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">OAuth2TokenCustomizer</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">JwtEncodingContext</span><span class="token punctuation">&gt;</span></span>``` <span class="token function">tokenCustomizer</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span> <span class="token class-name">UserDetailsService</span> userDetailsService<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n      <span class="token class-name">UserDetails</span> userDetails <span class="token operator">=</span> userDetailsService<span class="token punctuation">.</span><span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token class-name">Collection</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GrantedAuthority</span><span class="token punctuation">&gt;</span></span>` authorities <span class="token operator">=</span> userDetails<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      context<span class="token punctuation">.</span><span class="token function">getClaims</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">claims</span><span class="token punctuation">(</span>claims <span class="token operator">-&gt;</span>\n         claims<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;authorities&quot;</span><span class="token punctuation">,</span> authorities<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>authority <span class="token operator">-&gt;</span> authority<span class="token punctuation">.</span><span class="token function">getAuthority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，我们定义了一个lambda函数来实现_OAuth2TokenCustomizer<code>&lt;JwtEncodingContext&gt;</code>_接口。这个函数在编码过程中自定义JWT。</p><p>然后，我们从注入的_UserDetailsService_中检索与当前主体（用户）关联的_UserDetails_对象。主体的名称通常是用户名。</p><p>在那之后，我们检索与用户关联的_GrantedAuthority_对象集合。</p><p>最后，我们从_JwtEncodingContext_中检索JWT声明并应用自定义。它包括向JWT添加一个名为“<em>authorities</em>”的自定义声明。此外，这个声明包含了从与用户关联的_GrantedAuthority_对象中获得的权限字符串列表。</p><h3 id="_4-2-测试权限声明" tabindex="-1"><a class="header-anchor" href="#_4-2-测试权限声明"><span>4.2. 测试权限声明</span></a></h3><p>现在我们已经配置了授权服务器，让我们来测试它。为此，我们将使用GitHub上可用的客户端-服务器项目。</p><p>让我们创建一个REST API客户端，它将从访问令牌中获取声明列表：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/claims&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getClaims</span><span class="token punctuation">(</span>\n  <span class="token annotation punctuation">@RegisteredOAuth2AuthorizedClient</span><span class="token punctuation">(</span><span class="token string">&quot;articles-client-authorization-code&quot;</span><span class="token punctuation">)</span> <span class="token class-name">OAuth2AuthorizedClient</span> authorizedClient\n<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span> <span class="token punctuation">{</span>\n    <span class="token class-name">SignedJWT</span> signedJWT <span class="token operator">=</span> <span class="token class-name">SignedJWT</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>authorizedClient<span class="token punctuation">.</span><span class="token function">getAccessToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTokenValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">JWTClaimsSet</span> claimsSet <span class="token operator">=</span> signedJWT<span class="token punctuation">.</span><span class="token function">getJWTClaimsSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Map</span>```<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span>``` claims <span class="token operator">=</span> claimsSet<span class="token punctuation">.</span><span class="token function">getClaims</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> claims<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;authorities&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>_@RegisteredOAuth2AuthorizedClient_注解在Spring Boot控制器方法中使用，以指示该方法期望有一个使用指定客户端ID注册的OAuth 2.0授权客户端。在这种情况下，客户端ID是“<em>articles-client-authorization-code</em>”。</p><p>让我们在_authority-claim_配置文件下运行我们的Spring Boot应用程序。</p><p>现在，当我们在浏览器中尝试访问_http://127.0.0.1:8080/claims_页面时，我们将自动重定向到_http://auth-server:9000/login_ URL下的OAuth服务器登录页面。</p><p><strong>在提供正确的用户名和密码后，授权服务器将把我们重定向回请求的URL，即声明列表。</strong></p><h2 id="_5-结论" tabindex="-1"><a class="header-anchor" href="#_5-结论"><span>5. 结论</span></a></h2><p>总的来说，将自定义声明添加到JWT访问令牌提供了一种强大的机制，用于根据我们应用程序的特定需求定制令牌，并增强我们的身份验证和授权系统的整体安全性和功能。</p><p>在本文中，我们学习了如何在Spring授权服务器中将自定义声明和用户权限添加到JWT访问令牌。</p><p>如往常一样，完整的源代码可以在GitHub上找到。</p><p>OK</p>',64),o=[e];function c(i,l){return a(),s("div",null,o)}const k=n(p,[["render",c],["__file","2024-06-24-Add Authorities as Custom Claims in JWT Access Tokens in Spring Authorization Server.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-06-24/2024-06-24-Add%20Authorities%20as%20Custom%20Claims%20in%20JWT%20Access%20Tokens%20in%20Spring%20Authorization%20Server.html","title":"在Spring授权服务器中将权限作为自定义声明添加到JWT访问令牌","lang":"zh-CN","frontmatter":{"date":"2024-06-25T00:00:00.000Z","category":["Spring Security","OAuth"],"tag":["JWT","Custom Claims","Spring Authorization Server"],"head":[["meta",{"name":"keywords","content":"Spring Security, OAuth, JWT, Custom Claims, Spring Authorization Server"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-06-24/2024-06-24-Add%20Authorities%20as%20Custom%20Claims%20in%20JWT%20Access%20Tokens%20in%20Spring%20Authorization%20Server.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"在Spring授权服务器中将权限作为自定义声明添加到JWT访问令牌"}],["meta",{"property":"og:description","content":"在Spring授权服务器中将权限作为自定义声明添加到JWT访问令牌 如果您正在处理Spring Security（特别是OAuth）实现，一定要看看《Learn Spring Security》课程。 1. 概述 将自定义声明添加到JSON Web Token（JWT）访问令牌在许多场景中至关重要。自定义声明允许我们在令牌负载中包含额外的信息。 在本教..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-24T16:34:10.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"JWT"}],["meta",{"property":"article:tag","content":"Custom Claims"}],["meta",{"property":"article:tag","content":"Spring Authorization Server"}],["meta",{"property":"article:published_time","content":"2024-06-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-24T16:34:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"在Spring授权服务器中将权限作为自定义声明添加到JWT访问令牌\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-25T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-24T16:34:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"在Spring授权服务器中将权限作为自定义声明添加到JWT访问令牌 如果您正在处理Spring Security（特别是OAuth）实现，一定要看看《Learn Spring Security》课程。 1. 概述 将自定义声明添加到JSON Web Token（JWT）访问令牌在许多场景中至关重要。自定义声明允许我们在令牌负载中包含额外的信息。 在本教..."},"headers":[{"level":3,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":3,"title":"2.1. Maven依赖","slug":"_2-1-maven依赖","link":"#_2-1-maven依赖","children":[]},{"level":3,"title":"2.2. 项目设置","slug":"_2-2-项目设置","link":"#_2-2-项目设置","children":[]},{"level":3,"title":"3.1. 添加基本自定义声明","slug":"_3-1-添加基本自定义声明","link":"#_3-1-添加基本自定义声明","children":[]},{"level":3,"title":"3.2. 测试自定义声明","slug":"_3-2-测试自定义声明","link":"#_3-2-测试自定义声明","children":[]},{"level":2,"title":"4.### 4. 将权限作为自定义声明添加到JWT访问令牌","slug":"_4-4-将权限作为自定义声明添加到jwt访问令牌","link":"#_4-4-将权限作为自定义声明添加到jwt访问令牌","children":[{"level":3,"title":"4.1. 将权限作为自定义声明添加","slug":"_4-1-将权限作为自定义声明添加","link":"#_4-1-将权限作为自定义声明添加","children":[]},{"level":3,"title":"4.2. 测试权限声明","slug":"_4-2-测试权限声明","link":"#_4-2-测试权限声明","children":[]}]},{"level":2,"title":"5. 结论","slug":"_5-结论","link":"#_5-结论","children":[]}],"git":{"createdTime":1719246850000,"updatedTime":1719246850000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":7.45,"words":2235},"filePathRelative":"posts/baeldung/2024-06-24/2024-06-24-Add Authorities as Custom Claims in JWT Access Tokens in Spring Authorization Server.md","localizedDate":"2024年6月25日","excerpt":"\\n<p>如果您正在处理Spring Security（特别是OAuth）实现，一定要看看《Learn Spring Security》课程。</p>\\n<h3>1. 概述</h3>\\n<p>将自定义声明添加到JSON Web Token（JWT）访问令牌在许多场景中至关重要。自定义声明允许我们在令牌负载中包含额外的信息。</p>\\n<p>在本教程中，我们将学习如何在Spring授权服务器中将资源所有者的权限添加到JWT访问令牌。</p>\\n<p>Spring授权务器是Spring生态系统中的一个新项目，旨在为Spring应用程序提供授权服务器支持。它旨在简化使用熟悉且灵活的Spring编程模型实现OAuth 2.0和OpenID Connect（OIDC）授权服务器的过程。</p>","autoDesc":true}');export{k as comp,d as data};
