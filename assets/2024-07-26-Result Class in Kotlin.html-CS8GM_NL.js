import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-BwYTipZw.js";const e={},p=t(`<h1 id="kotlin中的result类-baeldung关于kotlin的教程" tabindex="-1"><a class="header-anchor" href="#kotlin中的result类-baeldung关于kotlin的教程"><span>Kotlin中的Result类 | Baeldung关于Kotlin的教程</span></a></h1><p>Kotlin提供了多种特性来增强代码的可读性、可维护性和健壮性。其中一种在错误处理中扮演关键角色的特性是_Result_类型。</p><p>在本教程中，我们将探讨什么是_Result_类，它为什么重要，以及如何在Kotlin中有效使用它。此外，我们将讨论实际用例，并提供代码片段以及相应的JUnit测试用例。</p><h3 id="_2-1-为什么-result-很重要" tabindex="-1"><a class="header-anchor" href="#_2-1-为什么-result-很重要"><span>2.1. 为什么_Result_很重要？</span></a></h3><p>Kotlin中_Result_类型的重要性在于它促进了显式的错误处理。通过强制开发者认真处理成功和失败的情况，_Result_最小化了忽视潜在错误的风险，有助于开发更健壮的应用程序。</p><p>此外，_Result_提供了比可空返回类型的优势，提供了一种有意识的方式来表示成功或失败。这不仅增强了代码的可读性，而且确保了代码的透明性，从而使开发者更容易理解程序流程，更容易推理代码。</p><h3 id="_3-使用-runcatching-的-result-类" tabindex="-1"><a class="header-anchor" href="#_3-使用-runcatching-的-result-类"><span>3. 使用_runCatching()_的_Result_类</span></a></h3><p>在探索手动创建_Result_实例之前，我们将探索提供的实用函数_runCatching()<em>。这个函数接受一个可能会抛出异常的lambda，并在发生异常时返回一个带有异常的_Result.failure()</em>。否则，它将返回lambda的返回值的_Result.success()_：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">divide</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Int<span class="token punctuation">,</span> b<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Result\`\`\`\`\`<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span>\`\`\`\`\` <span class="token punctuation">{</span>
    <span class="token keyword">return</span> runCatching <span class="token punctuation">{</span>
        a <span class="token operator">/</span> b
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在我们的代码中，如果除数_b_为零，_divide()<em>将抛出_ArithmeticException</em>。_runCatching()_函数是手动处理异常的_try/catch_块的替代品。</p><p>现在，让我们测试_divide()_函数的成功和失败结果：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Test</span>
<span class="token keyword">fun</span> <span class="token function">\`should handle successful division\`</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> resultValid <span class="token operator">=</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token function">assertTrue</span><span class="token punctuation">(</span>resultValid<span class="token punctuation">.</span>isSuccess<span class="token punctuation">)</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> resultValid<span class="token punctuation">.</span><span class="token function">getOrNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token annotation builtin">@Test</span>
<span class="token keyword">fun</span> <span class="token function">\`should handle division by zero\`</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> resultInvalid <span class="token operator">=</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token function">assertTrue</span><span class="token punctuation">(</span>resultInvalid<span class="token punctuation">.</span>isFailure<span class="token punctuation">)</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span>ArithmeticException<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> resultInvalid<span class="token punctuation">.</span><span class="token function">exceptionOrNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!!</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;/ by zero&quot;</span></span><span class="token punctuation">,</span> resultInvalid<span class="token punctuation">.</span><span class="token function">exceptionOrNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!!</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-如何使用-result" tabindex="-1"><a class="header-anchor" href="#_4-如何使用-result"><span>4. 如何使用_Result_</span></a></h3><p>虽然我们在编写代码时知道有特定的失败条件，但我们也可以直接创建自己的_Result_实例：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">divide</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Int<span class="token punctuation">,</span> b<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Result\`\`\`\`\`<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span>\`\`\`\`\` <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>a <span class="token operator">/</span> b<span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    Result<span class="token punctuation">.</span><span class="token function">failure</span><span class="token punctuation">(</span><span class="token function">Exception</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Division by zero is not allowed.&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们已经确定不能除以零。与其让除以零抛出异常，不如在我们的_divide()<em>函数中检查除数，并在除数为零时直接返回带有异常和错误消息的_Result.failure()</em>。否则，我们可以执行除法并在_Result.success()_中返回值。</p><p>让我们再次测试我们的_divide()_函数的两个路径：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Test</span>
<span class="token keyword">fun</span> <span class="token function">\`should test valid division\`</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> firstResult <span class="token operator">=</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span>Result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> firstResult<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token annotation builtin">@Test</span>
<span class="token keyword">fun</span> <span class="token function">\`should handle division by zero\`</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> expectedException <span class="token operator">=</span> assertFailsWith\`\`<span class="token operator">&lt;</span>Exception<span class="token operator">&gt;</span>\`\` <span class="token punctuation">{</span>
        result<span class="token punctuation">.</span><span class="token function">getOrThrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Division by zero is not allowed.&quot;</span></span><span class="token punctuation">,</span> expectedException<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-1-使用result类处理成功案例" tabindex="-1"><a class="header-anchor" href="#_4-1-使用result类处理成功案例"><span>4.1. 使用Result类处理成功案例</span></a></h3><p>让我们看看一个成功的_Result_案例。我们可以确认我们正在处理一个成功的结果，我们有多种方法来解包值本身：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Test</span>
<span class="token keyword">fun</span> <span class="token function">\`Should handle Successful States\`</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> result <span class="token operator">=</span> Result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span>
    <span class="token function">assertTrue</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>isSuccess<span class="token punctuation">)</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">getOrNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    result<span class="token punctuation">.</span><span class="token function">onSuccess</span> <span class="token punctuation">{</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">,</span> it<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，我们可以通过检查_isSuccess_属性来验证_Result_是成功的。我们还可以使用_getOrNull()<em>函数从_Result_中获取值。最后，我们甚至可以使用成功的结果作为lambda函数的主题_onSuccess()</em>，这只在_Result_成功时被调用。</p><h3 id="_4-2-使用-result-类处理失败案例" tabindex="-1"><a class="header-anchor" href="#_4-2-使用-result-类处理失败案例"><span>4.2. 使用_Result_类处理失败案例</span></a></h3><p>现在，让我们考虑一个失败的_Result_案例。我们将专注于确认失败并检查相关异常：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Test</span>
<span class="token keyword">fun</span> <span class="token function">\`Should handle Failure States\`</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> result <span class="token operator">=</span> Result<span class="token punctuation">.</span>failure\`\`\`\`\`<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span>\`\`\`\`\`<span class="token punctuation">(</span><span class="token function">Exception</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;We have an error!&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">assertTrue</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>isFailure<span class="token punctuation">)</span>
    <span class="token function">assertNotNull</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">exceptionOrNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    result<span class="token punctuation">.</span><span class="token function">onFailure</span> <span class="token punctuation">{</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;We have an error!&quot;</span></span><span class="token punctuation">,</span> it<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们的测试确认了_Result_是失败的_isFailure_属性。我们可以使用_exceptionOrNull()_函数从_Result_中提取具体的错误。最后，我们可以使用_onFailure()_函数对错误执行额外的逻辑，该函数只在失败的_Result_上被调用。</p><h2 id="_5-结论" tabindex="-1"><a class="header-anchor" href="#_5-结论"><span>5. 结论</span></a></h2><p>Kotlin中的_Result_类型是增强代码可靠性和可读性的宝贵工具，特别是在处理错误时。我们已经看到了如何使用_runCatching()<em>作为_try/catch_的替代品以及它如何返回一个_Result</em>。然后，我们看到了如何直接创建_Result_对象的实例来显式处理错误。最后，我们学习了如何解包在_Result_中返回的成功和失败对象。</p><p>通过显式表示成功和失败的结果，开发者可以构建更健壮的应用程序，优雅地处理潜在问题。</p><p>如常，这些示例的完整实现可以在GitHub上找到。我将继续翻译剩余部分：</p><h2 id="_4-如何使用-result-类" tabindex="-1"><a class="header-anchor" href="#_4-如何使用-result-类"><span>4. 如何使用 Result 类</span></a></h2><p>在我们知道代码中存在特定失败条件的情况下，我们可以直接创建 Result 实例：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">divide</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Int<span class="token punctuation">,</span> b<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Result\`\`\`\`\`<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span>\`\`\`\`\` <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>a <span class="token operator">/</span> b<span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    Result<span class="token punctuation">.</span><span class="token function">failure</span><span class="token punctuation">(</span><span class="token function">Exception</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;不允许除以零&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们已确定不能除以零。在 divide() 函数中，我们检查除数，如果除数为零，则直接返回带有异常和错误消息的 Result.failure()。否则，我们可以执行除法并返回 Result.success() 中的值。</p><p>让我们再次测试 divide() 函数的两个路径：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Test</span>
<span class="token keyword">fun</span> <span class="token function">\`应该测试有效的除法\`</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> firstResult <span class="token operator">=</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span>Result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> firstResult<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token annotation builtin">@Test</span>
<span class="token keyword">fun</span> <span class="token function">\`应该处理除以零的情况\`</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> expectedException <span class="token operator">=</span> assertFailsWith\`\`<span class="token operator">&lt;</span>Exception<span class="token operator">&gt;</span>\`\` <span class="token punctuation">{</span>
        result<span class="token punctuation">.</span><span class="token function">getOrThrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;不允许除以零&quot;</span></span><span class="token punctuation">,</span> expectedException<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-1-使用-result-类处理成功案例" tabindex="-1"><a class="header-anchor" href="#_4-1-使用-result-类处理成功案例"><span>4.1. 使用 Result 类处理成功案例</span></a></h3><p>让我们看看一个成功的 Result 情况。我们可以确认我们正在处理一个成功的结果，并且我们有多种方法来解包值本身：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Test</span>
<span class="token keyword">fun</span> <span class="token function">\`应该处理成功的结果\`</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> result <span class="token operator">=</span> Result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span>
    <span class="token function">assertTrue</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>isSuccess<span class="token punctuation">)</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">getOrNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    result<span class="token punctuation">.</span><span class="token function">onSuccess</span> <span class="token punctuation">{</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">,</span> it<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中，我们可以通过检查 isSuccess 属性来验证 Result 是否成功。我们还可以使用 getOrNull() 函数从 Result 中获取值。最后，我们甚至可以使用 onSuccess()，它将在 Result 成功时调用。</p><h3 id="_4-2-使用-result-类处理失败案例-1" tabindex="-1"><a class="header-anchor" href="#_4-2-使用-result-类处理失败案例-1"><span>4.2. 使用 Result 类处理失败案例</span></a></h3><p>现在，让我们考虑一个失败的 Result 情况。我们将专注于确认失败并检查相关异常：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Test</span>
<span class="token keyword">fun</span> <span class="token function">\`应该处理失败的结果\`</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> result <span class="token operator">=</span> Result<span class="token punctuation">.</span>failure\`\`\`\`\`<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span>\`\`\`\`\`<span class="token punctuation">(</span><span class="token function">Exception</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;我们有一个错误！&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">assertTrue</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>isFailure<span class="token punctuation">)</span>
    <span class="token function">assertNotNull</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">exceptionOrNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    result<span class="token punctuation">.</span><span class="token function">onFailure</span> <span class="token punctuation">{</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;我们有一个错误！&quot;</span></span><span class="token punctuation">,</span> it<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们的测试确认了 Result 是失败的，使用 isFailure 属性。我们可以使用 exceptionOrNull() 函数从 Result 中提取具体的错误。最后，我们可以使用 onFailure() 函数对错误执行额外的逻辑，该函数仅在 Result 失败时调用。</p><h2 id="_5-结论-1" tabindex="-1"><a class="header-anchor" href="#_5-结论-1"><span>5. 结论</span></a></h2><p>Kotlin 中的 Result 类型是处理错误时增强代码可靠性和可读性的有价值工具。我们已经看到了如何使用 runCatching() 作为 try/catch 的替代品，以及它如何返回 Result。然后，我们看到了如何直接创建 Result 对象的实例来显式处理错误。最后，我们学习了如何解包 Result 中返回的成功和失败对象。</p><p>通过显式表示成功和失败的结果，开发者可以构建更健壮的应用程序，优雅地处理潜在问题。</p><p>如常，这些示例的完整实现可以在 GitHub 上找到。</p><p>OK</p>`,49),l=[p];function o(i,c){return a(),s("div",null,l)}const k=n(e,[["render",o],["__file","2024-07-26-Result Class in Kotlin.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-26/2024-07-26-Result%20Class%20in%20Kotlin.html","title":"Kotlin中的Result类 | Baeldung关于Kotlin的教程","lang":"zh-CN","frontmatter":{"date":"2022-11-01T00:00:00.000Z","category":["Kotlin","Error Handling"],"tag":["Result Class","Kotlin"],"head":[["meta",{"name":"keywords","content":"Kotlin, Result Class, Error Handling"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-26/2024-07-26-Result%20Class%20in%20Kotlin.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Kotlin中的Result类 | Baeldung关于Kotlin的教程"}],["meta",{"property":"og:description","content":"Kotlin中的Result类 | Baeldung关于Kotlin的教程 Kotlin提供了多种特性来增强代码的可读性、可维护性和健壮性。其中一种在错误处理中扮演关键角色的特性是_Result_类型。 在本教程中，我们将探讨什么是_Result_类，它为什么重要，以及如何在Kotlin中有效使用它。此外，我们将讨论实际用例，并提供代码片段以及相应的J..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-26T09:22:57.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Result Class"}],["meta",{"property":"article:tag","content":"Kotlin"}],["meta",{"property":"article:published_time","content":"2022-11-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-26T09:22:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Kotlin中的Result类 | Baeldung关于Kotlin的教程\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-11-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-26T09:22:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Kotlin中的Result类 | Baeldung关于Kotlin的教程 Kotlin提供了多种特性来增强代码的可读性、可维护性和健壮性。其中一种在错误处理中扮演关键角色的特性是_Result_类型。 在本教程中，我们将探讨什么是_Result_类，它为什么重要，以及如何在Kotlin中有效使用它。此外，我们将讨论实际用例，并提供代码片段以及相应的J..."},"headers":[{"level":3,"title":"2.1. 为什么_Result_很重要？","slug":"_2-1-为什么-result-很重要","link":"#_2-1-为什么-result-很重要","children":[]},{"level":3,"title":"3. 使用_runCatching()_的_Result_类","slug":"_3-使用-runcatching-的-result-类","link":"#_3-使用-runcatching-的-result-类","children":[]},{"level":3,"title":"4. 如何使用_Result_","slug":"_4-如何使用-result","link":"#_4-如何使用-result","children":[]},{"level":3,"title":"4.1. 使用Result类处理成功案例","slug":"_4-1-使用result类处理成功案例","link":"#_4-1-使用result类处理成功案例","children":[]},{"level":3,"title":"4.2. 使用_Result_类处理失败案例","slug":"_4-2-使用-result-类处理失败案例","link":"#_4-2-使用-result-类处理失败案例","children":[]},{"level":2,"title":"5. 结论","slug":"_5-结论","link":"#_5-结论","children":[]},{"level":2,"title":"4. 如何使用 Result 类","slug":"_4-如何使用-result-类","link":"#_4-如何使用-result-类","children":[{"level":3,"title":"4.1. 使用 Result 类处理成功案例","slug":"_4-1-使用-result-类处理成功案例","link":"#_4-1-使用-result-类处理成功案例","children":[]},{"level":3,"title":"4.2. 使用 Result 类处理失败案例","slug":"_4-2-使用-result-类处理失败案例-1","link":"#_4-2-使用-result-类处理失败案例-1","children":[]}]},{"level":2,"title":"5. 结论","slug":"_5-结论-1","link":"#_5-结论-1","children":[]}],"git":{"createdTime":1721985777000,"updatedTime":1721985777000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":6.08,"words":1823},"filePathRelative":"posts/baeldung/2024-07-26/2024-07-26-Result Class in Kotlin.md","localizedDate":"2022年11月1日","excerpt":"\\n<p>Kotlin提供了多种特性来增强代码的可读性、可维护性和健壮性。其中一种在错误处理中扮演关键角色的特性是_Result_类型。</p>\\n<p>在本教程中，我们将探讨什么是_Result_类，它为什么重要，以及如何在Kotlin中有效使用它。此外，我们将讨论实际用例，并提供代码片段以及相应的JUnit测试用例。</p>\\n<h3>2.1. 为什么_Result_很重要？</h3>\\n<p>Kotlin中_Result_类型的重要性在于它促进了显式的错误处理。通过强制开发者认真处理成功和失败的情况，_Result_最小化了忽视潜在错误的风险，有助于开发更健壮的应用程序。</p>\\n<p>此外，_Result_提供了比可空返回类型的优势，提供了一种有意识的方式来表示成功或失败。这不仅增强了代码的可读性，而且确保了代码的透明性，从而使开发者更容易理解程序流程，更容易推理代码。</p>","autoDesc":true}');export{k as comp,d as data};
