import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as e}from"./app-CbPcg273.js";const t={},p=e(`<h1 id="spring-boot-测试中的陷阱" tabindex="-1"><a class="header-anchor" href="#spring-boot-测试中的陷阱"><span>Spring Boot 测试中的陷阱</span></a></h1><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p>编程中最重要的主题之一是测试。Spring 框架和 Spring Boot 通过提供测试框架扩展以及引导我们编写具有大量后台自动化的最小、可测试代码，提供了非常好的支持。要运行 Spring Boot 集成测试，我们只需要在我们的测试类中添加 <code>@SpringBootTest</code>。我们可以在 Spring Boot 中的测试中找到简短的介绍。即使我们在没有 Spring Boot 的情况下使用 Spring 框架，我们也可以非常高效地进行集成测试。</p><p>但是开发测试越容易，我们就越有可能遇到陷阱。在本教程中，我们将探讨 Spring Boot 测试是如何执行的，以及在编写测试时需要考虑什么。</p><h2 id="_2-陷阱示例" tabindex="-1"><a class="header-anchor" href="#_2-陷阱示例"><span>2. 陷阱示例</span></a></h2><p>让我们从一个小型示例开始：让我们实现一个服务来管理宠物（一个 <code>PetService</code>）如下所示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">record</span> <span class="token class-name">Pet</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PetService</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Set</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pet</span><span class="token punctuation">&gt;</span></span>\`\` pets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Set</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pet</span><span class="token punctuation">&gt;</span></span>\`\` <span class="token function">getPets</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableSet</span><span class="token punctuation">(</span>pets<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Pet</span> pet<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pets<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pet<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该服务不应允许重复项，因此测试可能看起来像这样：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">class</span> <span class="token class-name">PetServiceIntegrationTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">PetService</span> service<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">shouldAddPetWhenNotAlreadyExisting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> pet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pet</span><span class="token punctuation">(</span><span class="token string">&quot;Dog&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> result <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pet<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertThat</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertThat</span><span class="token punctuation">(</span>service<span class="token punctuation">.</span><span class="token function">getPets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasSize</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">shouldNotAddPetWhenAlreadyExisting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> pet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pet</span><span class="token punctuation">(</span><span class="token string">&quot;Cat&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> result <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pet<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertThat</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 再试一次</span>
        result <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pet<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertThat</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isFalse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertThat</span><span class="token punctuation">(</span>service<span class="token punctuation">.</span><span class="token function">getPets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasSize</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们单独执行每个测试时，一切都很好。但是当我们一起执行它们时，我们将得到一个测试失败：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2023/02/sample1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>但是为什么测试失败了呢？我们如何预防这种情况？我们将阐明这一点，但首先，让我们从一些基础知识开始。</p><h2 id="_3-功能测试的设计目标" tabindex="-1"><a class="header-anchor" href="#_3-功能测试的设计目标"><span>3. 功能测试的设计目标</span></a></h2><p>我们编写功能测试以记录需求并确保应用程序代码正确实现它们。因此，测试本身必须是正确的，并且易于理解，理想情况下是自解释的。但是，对于本文，我们将专注于进一步的设计目标：</p><ul><li>回归：测试必须是可重复的。它们必须产生确定性结果</li><li>隔离：测试不能相互影响。它们执行的顺序或是否并行执行都不应该重要</li><li>性能：测试应该尽可能快速和节省资源地运行，特别是那些是 CI 流水线或 TDD 的一部分的测试</li></ul><p>关于 Spring Boot 测试，我们需要意识到它们是一种集成测试，因为它们会导致 <code>ApplicationContext</code> 的初始化，即使用依赖注入初始化和连接 bean。因此隔离需要特别关注 - 上面展示的示例似乎有一个隔离问题。另一方面，良好的性能对于 Spring Boot 测试来说也是一个挑战。</p><p><strong>作为第一个结论，我们可以说避免集成测试是最重要的点。</strong> 对于 <code>PetService</code> 测试的最佳解决方案是单元测试：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 这里没有注解</span>
<span class="token keyword">class</span> <span class="token class-name">PetServiceUnitTest</span> <span class="token punctuation">{</span>

    <span class="token class-name">PetService</span> service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PetService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们只有在必要时才编写 Spring Boot 测试，例如，当我们想要测试我们的应用程序代码是否被框架正确处理（生命周期管理、依赖注入、事件处理）或者我们想要测试一个特殊层（HTTP 层、持久层）。</p><h2 id="_4-上下文缓存" tabindex="-1"><a class="header-anchor" href="#_4-上下文缓存"><span>4. 上下文缓存</span></a></h2><p>显然，当我们在测试类中添加 <code>@SpringBootTest</code> 时，<code>ApplicationContext</code> 会被启动，并且 bean 会被初始化。但是，为了支持隔离，JUnit 为每个测试方法初始化这一步。这将导致每个测试用例一个 <code>ApplicationContext</code>，显著降低测试性能。为了避免这种情况，Spring 测试框架缓存了上下文，并允许它在多个测试用例中重复使用。当然，这也导致了重复使用 bean 实例。这就是为什么 <code>PetService</code> 测试失败的原因 - 两个测试方法处理的是同一个 <code>PetService</code> 实例。</p><p>只有在它们彼此不同时，才会创建不同的 <code>ApplicationContext</code> s - 例如，如果它们包含不同的 bean 或具有不同的应用程序属性。我可以在 Spring 测试框架文档中找到详细信息。因为 <code>ApplicationContext</code> 配置是在类级别完成的，所以默认情况下，测试类中的所有方法共享相同的上下文。</p><p>下面的插图显示了这种情况：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2023/02/context-cache.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>上下文缓存作为一种性能优化与隔离相矛盾</strong>，所以我们只有在确保测试之间的隔离时才能重复使用 <code>ApplicationContext</code>。这是最重要的原因 <strong>Spring Boot 测试应该只在满足某些条件的情况下在同一 JVM 中并行运行</strong>。我们可以使用不同的 JVM 进程运行测试（例如，通过为 Maven Surefire 插件设置 <code>forkMode</code>），但那样我们会绕过缓存机制。</p><h3 id="_4-1-petservice-示例解决方案" tabindex="-1"><a class="header-anchor" href="#_4-1-petservice-示例解决方案"><span>4.1. <code>PetService</code> 示例解决方案</span></a></h3><p>关于 <code>PetService</code> 测试，可能有多解决方案。由于 <code>PetService</code> 是有状态的，所以它们都适用。</p><p>一种解决方案是在每个测试方法上注解 <code>@DirtiesContext</code>。这将 <code>ApplicationContext</code> 标记为脏的，因此在测试后会关闭并从缓存中移除。这阻止了性能优化，并且永远不应该是首选的方式：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">class</span> <span class="token class-name">PetServiceIntegrationTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">PetService</span> service<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token annotation punctuation">@DirtiesContext</span>
    <span class="token keyword">void</span> <span class="token function">shouldAddPetWhenNotAlreadyExisting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token annotation punctuation">@DirtiesContext</span>
    <span class="token keyword">void</span> <span class="token function">shouldNotAddPetWhenAlreadyExisting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另一种解决方案是在每个测试后重置 <code>PetService</code> 的状态：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">class</span> <span class="token class-name">PetServiceIntegrationTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">PetService</span> service<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@AfterEach</span>
    <span class="token keyword">void</span> <span class="token function">resetState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        service<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除所有宠物</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>然而，最佳解决方案是实现无状态的 <code>PetService</code></strong>。目前，宠物不是存储在内存中的，这在可扩展环境中永远不会是一个好的实践。</p><h3 id="_4-2-陷阱-太多的上下文" tabindex="-1"><a class="header-anchor" href="#_4-2-陷阱-太多的上下文"><span>4.2. 陷阱：太多的上下文</span></a></h3><p>为了避免无意中初始化额外的 <code>ApplicationContexts</code>，我们需要知道是什么导致了不同的配置。最明显的是直接配置 bean，例如使用 <code>@ComponentScan</code>、<code>@Import</code>、<code>@AutoConfigureXXX</code>（例如 <code>@AutoConfigureTestDatabase</code>）。但是，启用配置文件（<code>@ActiveProfiles</code>）或记录事件（<code>@RecordApplicationEvents</code>）也可能导致派生：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token comment">// 它们每个都是从原始（缓存的）上下文中派生的</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">&quot;com.baeldung.sample.blogposts&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">PetServiceTestConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@AutoConfigureTestDatabase</span>
<span class="token annotation punctuation">@ActiveProfiles</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@RecordApplicationEvents</span>
<span class="token keyword">class</span> <span class="token class-name">PetServiceIntegrationTest</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以在 Spring 测试框架文档中找到详细信息。</p><h3 id="_4-3-陷阱-模拟" tabindex="-1"><a class="header-anchor" href="#_4-3-陷阱-模拟"><span>4.3. 陷阱：模拟</span></a></h3><p>Spring 测试框架包括 Mockito 来创建和使用模拟。当使用 <code>@MockBean</code> 时，我们让 Mockito 创建一个模拟实例并将其放入 <code>ApplicationContext</code> 中。这个实例是特定于测试类的。<strong>结果是我们不能与其他测试类共享 <code>ApplicationContext</code></strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">class</span> <span class="token class-name">PetServiceIntegrationTest</span> <span class="token punctuation">{</span>

    <span class="token comment">// 这个上下文不能与其他测试类共享</span>
    <span class="token annotation punctuation">@MockBean</span>
    <span class="token class-name">PetServiceRepository</span> repository<span class="token punctuation">;</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个建议可能是避免使用模拟并测试整个应用程序。但如果我们想要测试异常处理，我们不能总是避免模拟。如果我们仍然想要与其他测试类共享 <code>ApplicationContext</code>，我们也必须共享模拟实例。当我们定义一个 <code>@TestConfiguration</code> 来创建模拟并在 <code>ApplicationContext</code> 中替换原始 bean 时，这是可能的。但然后，我们必须意识到隔离问题。</p><p>正如我们知道的，缓存和重用 <code>ApplicationContext</code> 假设我们在测试后重置上下文中的每个有状态 bean 的状态。模拟是一类特殊的有状态 bean，因为它们被配置为返回值或抛出异常，并且它们记录每个方法调用以供每个测试用例验证。测试后，我们也需要重置它们。当使用 <code>@MockBean</code> 时，这是自动完成的，但当我们在 <code>@TestConfiguration</code> 中创建模拟时，我们负责重置。幸运的是，Mockito 本身提供了一个设置。所以整个解决方案可能是：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@TestConfiguration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PetServiceTestConfiguration</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Primary</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token class-name">PetServiceRepository</span> <span class="token function">createRepositoryMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">mock</span><span class="token punctuation">(</span>
            <span class="token class-name">PetServiceRepository</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
            <span class="token class-name">MockReset</span><span class="token punctuation">.</span><span class="token function">withSettings</span><span class="token punctuation">(</span><span class="token class-name">MockReset</span><span class="token punctuation">.</span><span class="token constant">AFTER</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">PetServiceTestConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment">// 如果没有自动检测到</span>
<span class="token keyword">class</span> <span class="token class-name">PetServiceIntegrationTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">PetService</span> repository<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Autowired</span> <span class="token comment">// 模拟</span>
    <span class="token class-name">PetServiceRepository</span> repository<span class="token punctuation">;</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>##继续翻译：</p><h3 id="_4-4-配置上下文缓存" tabindex="-1"><a class="header-anchor" href="#_4-4-配置上下文缓存"><span>4.4. 配置上下文缓存</span></a></h3><p>如果我们想要了解在测试执行期间 <code>ApplicationContext</code> 被初始化了多少次，我们可以在 <code>application.properties</code> 中设置日志级别：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">logging.level.org.springframework.test.context.cache</span><span class="token punctuation">=</span><span class="token value attr-value">DEBUG</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后我们会得到包含如下统计信息的日志输出：</p><div class="language-plaintext line-numbers-mode" data-ext="plaintext" data-title="plaintext"><pre class="language-plaintext"><code>org.springframework.test.context.cache:
  Spring test ApplicationContext cache statistics:
  [DefaultContextCache@34585ac9 size = 1, maxSize = 32, parentContextCount = 0, hitCount = 8, missCount = 1]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认的缓存大小是 32（LRU）。如果我们想要增加或减少它，我们可以指定另一个缓存大小：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.test.context.cache.maxSize</span><span class="token punctuation">=</span><span class="token value attr-value">50</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果我们想要深入研究缓存机制的代码，<code>org.springframework.test.context.cache.ContextCache</code> 接口可以作为一个起点。</p><h2 id="_5-上下文配置" tabindex="-1"><a class="header-anchor" href="#_5-上下文配置"><span>5. 上下文配置</span></a></h2><p>不仅为了缓存目的，也为了 <code>ApplicationContext</code> 初始化性能，我们可能会优化配置。初始化次数越少，测试设置就越快。我们可以为测试配置延迟 bean 初始化，但我们必须注意潜在的副作用。另一种可能性是减少 bean 的数量。</p><h3 id="_5-1-配置检测" tabindex="-1"><a class="header-anchor" href="#_5-1-配置检测"><span>5.1. 配置检测</span></a></h3><p><code>@SpringBootTest</code> 默认从测试类的当前包开始搜索，然后向上通过包结构搜索，寻找带有 <code>@SpringBootConfiguration</code> 注解的类，然后从中读取配置以创建应用程序上下文。这个类通常是我们的主应用程序，因为 <code>@SpringBootApplication</code> 注解包括了 <code>@SpringBootConfiguration</code> 注解。然后它创建一个类似于在生产环境中启动的应用程序上下文。</p><h3 id="_5-2-最小化-applicationcontext" tabindex="-1"><a class="header-anchor" href="#_5-2-最小化-applicationcontext"><span>5.2. 最小化 <code>ApplicationContext</code></span></a></h3><p>如果我们的测试类需要一个不同的（最小的）<code>ApplicationContext</code>，我们可以创建一个静态内部 <code>@Configuration</code> 类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">class</span> <span class="token class-name">PetServiceIntegrationTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">PetService</span> service<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Configuration</span>
    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyCustomConfiguration</span> <span class="token punctuation">{</span>

        <span class="token annotation punctuation">@Bean</span>
        <span class="token class-name">PetService</span> <span class="token function">createMyPetService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 创建自定义的宠物服务</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与使用 <code>@TestConfiguration</code> 相比，这完全防止了 <code>@SpringBootConfiguration</code> 的自动检测。</p><p>另一种减少 <code>ApplicationContext</code> 大小的方法是使用 <code>@SpringBootTest(classes=…)</code>。这将忽略内部 <code>@Configuration</code> 类，并且只初始化给定的类。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token class-name">PetService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PetServiceIntegrationTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">PetService</span> service<span class="token punctuation">;</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们不需要任何 Spring Boot 功能，如配置文件和读取应用程序属性，我们可以替换 <code>@SpringBootTest</code>。让我们看看这个注释背后是什么：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@BootstrapWith</span><span class="token punctuation">(</span><span class="token class-name">SpringBootTestContextBootstrapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">SpringBootTest</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到，这个注释只启用了 JUnit 的 <code>SpringExtension</code>（这是 Spring 框架的一部分，不是 Spring Boot 的一部分）并声明了一个 Spring Boot 提供的 <code>TestContextBootstrapper</code>，它实现了搜索机制。如果我们移除 <code>@BootstrapWith</code>，将使用 <code>DefaultTestContextBootstrapper</code>，它不是 SpringBoot-aware 的。然后我们必须使用 <code>@ContextConfiguration</code> 指定上下文：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token class-name">PetService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">PetServiceIntegrationTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">PetService</span> service<span class="token punctuation">;</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3-测试切片" tabindex="-1"><a class="header-anchor" href="#_5-3-测试切片"><span>5.3. 测试切片</span></a></h3><p>Spring Boot 的自动配置系统对应用程序工作得很好，但有时对测试来说可能过于繁重。通常，只加载测试应用程序的‘切片’所需的配置部分是有帮助的。例如，我们可能想要测试 Spring MVC 控制器是否正确映射 URL，我们不想在这些测试中涉及数据库调用；或者我们可能想要测试 JPA 实体，当这些测试运行时，我们对 web 层不感兴趣。</p><p>我们可以在 Spring Boot 文档中找到可用测试切片的概述。</p><h3 id="_5-4-上下文优化与缓存" tabindex="-1"><a class="header-anchor" href="#_5-4-上下文优化与缓存"><span>5.4. 上下文优化与缓存</span></a></h3><p>上下文优化可以导致单个测试的启动时间更快，但我们应该意识到这将导致不同的配置，因此会有更多的 <code>ApplicationContext</code> 初始化。总的来说，整个测试执行时间可能会增加。因此，跳过上下文优化可能更好，但使用已经存在的配置，这些配置符合测试案例的要求。</p><h2 id="_6-建议-自定义切片" tabindex="-1"><a class="header-anchor" href="#_6-建议-自定义切片"><span>6. 建议：自定义切片</span></a></h2><p>正如我们所了解到的，我们必须在 <code>ApplicationContext</code> 的数量和大小之间找到折衷。挑战在于跟踪配置。解决这个问题的一种可能方案是定义几个自定义切片（可能每个层一个，一个用于整个应用程序），并在所有测试中专门使用它们，即我们必须避免在测试类中进一步配置和使用 <code>@MockBean</code> 进行模拟。</p><p>Pet 领域层的解决方案可能是：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Inherited</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackageClasses <span class="token operator">=</span> <span class="token class-name">PetsDomainTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">PetsDomainTest<span class="token punctuation">.</span>PetServiceTestConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token comment">// 进一步帮助配置和执行测试的功能</span>
<span class="token annotation punctuation">@ActiveProfiles</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;domain-test&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Tag</span><span class="token punctuation">(</span><span class="token string">&quot;integration-test&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Tag</span><span class="token punctuation">(</span><span class="token string">&quot;domain-test&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">PetsDomainTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@TestConfiguration</span>
    <span class="token keyword">class</span> <span class="token class-name">PetServiceTestConfiguration</span> <span class="token punctuation">{</span>

        <span class="token annotation punctuation">@Primary</span>
        <span class="token annotation punctuation">@Bean</span>
        <span class="token class-name">PetServiceRepository</span> <span class="token function">createRepositoryMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">mock</span><span class="token punctuation">(</span>
                <span class="token class-name">PetServiceRepository</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
                <span class="token class-name">MockReset</span><span class="token punctuation">.</span><span class="token function">withSettings</span><span class="token punctuation">(</span><span class="token class-name">MockReset</span><span class="token punctuation">.</span><span class="token constant">AFTER</span><span class="token punctuation">)</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后可以按如下方式使用：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@PetsDomainTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PetServiceIntegrationTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">PetService</span> service<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Autowired</span> <span class="token comment">// 模拟</span>
    <span class="token class-name">PetServiceRepository</span> repository<span class="token punctuation">;</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-进一步的陷阱" tabindex="-1"><a class="header-anchor" href="#_7-进一步的陷阱"><span>7. 进一步的陷阱</span></a></h2><h3 id="_7-1-派生测试配置" tabindex="-1"><a class="header-anchor" href="#_7-1-派生测试配置"><span>7.1. 派生测试配置</span></a></h3><p>集成测试的一个原则是我们尽可能地测试应用程序，使其接近生产状态。我们只为特定的测试案例派生。不幸的是，测试框架本身重新配置了我们应用程序的行为，我们应该意识到这一点。例如，内置的可观测性特性在测试期间是禁用的，所以如果我们想要测试我们应用程序中的观察，我们需要显式地使用 <code>@AutoConfigureObservability</code> 重新启用它。</p><h3 id="_7-2-包结构" tabindex="-1"><a class="header-anchor" href="#_7-2-包结构"><span>7.2. 包结构</span></a></h3><p>当我们想要测试应用程序的切片时，我们需要声明哪些组件需要在 <code>ApplicationContext</code> 中初始化。我们可以通过列出相应的类来做到这一点，但是为了获得更稳定的测试配置，最好指定包。例如，我们有这样一个映射器：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PetDtoMapper</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">PetDto</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Pet</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们需要在测试中使用这个映射器；我们可以用这个精简的解决方案配置测试：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token class-name">PetDtoMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">PetDtoMapperIntegrationTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">PetDtoMapper</span> mapper<span class="token punctuation">;</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们用 <code>MapStruct</code> 替换映射器实现，<code>PetDtoMapper</code> 类型将变成一个接口，然后 <code>MapStruct</code> 在同一个包中生成实现类。因此，除非我们导入整个包，否则给定的测试将失败：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PetDtoMapperIntegrationTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Configuration</span>
    <span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackageClasses <span class="token operator">=</span> <span class="token class-name">PetDtoMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">PetDtoMapperTestConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">PetDtoMapper</span> mapper<span class="token punctuation">;</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这会附带初始化同一包和子包中的所有其他 bean 的效果。这就是为什么我们应该根据切片的结构创建包结构。这包括特定于域的组件、安全配置、web 或持久层的全局配置，或事件处理器。</p><h2 id="_8-结论" tabindex="-1"><a class="header-anchor" href="#_8-结论"><span>8. 结论</span></a></h2><p>在本教程中，我们探讨了编写 Spring Boot 测试的陷阱。我们已经了解到 <code>ApplicationContext</code> 被缓存和重用，所以我们需要考虑隔离。</p><p>像往常一样，所有的代码实现都可以在 GitHub 上找到。</p><p>OK</p>`,92),o=[p];function i(c,l){return a(),s("div",null,o)}const r=n(t,[["render",i],["__file","2024-07-08-Pitfalls on Testing with Spring Boot.html.vue"]]),v=JSON.parse('{"path":"/posts/baeldung/2024-07-08/2024-07-08-Pitfalls%20on%20Testing%20with%20Spring%20Boot.html","title":"Spring Boot 测试中的陷阱","lang":"zh-CN","frontmatter":{"date":"2023-02-01T00:00:00.000Z","category":["Spring Boot","Testing"],"tag":["Spring Boot","Testing"],"head":[["meta",{"name":"keywords","content":"Spring Boot, Testing, Pitfalls, Integration Testing"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-08/2024-07-08-Pitfalls%20on%20Testing%20with%20Spring%20Boot.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Spring Boot 测试中的陷阱"}],["meta",{"property":"og:description","content":"Spring Boot 测试中的陷阱 1. 概述 编程中最重要的主题之一是测试。Spring 框架和 Spring Boot 通过提供测试框架扩展以及引导我们编写具有大量后台自动化的最小、可测试代码，提供了非常好的支持。要运行 Spring Boot 集成测试，我们只需要在我们的测试类中添加 @SpringBootTest。我们可以在 Spring B..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.baeldung.com/wp-content/uploads/2023/02/sample1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-08T22:41:16.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Spring Boot"}],["meta",{"property":"article:tag","content":"Testing"}],["meta",{"property":"article:published_time","content":"2023-02-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-08T22:41:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring Boot 测试中的陷阱\\",\\"image\\":[\\"https://www.baeldung.com/wp-content/uploads/2023/02/sample1.png\\",\\"https://www.baeldung.com/wp-content/uploads/2023/02/context-cache.png\\"],\\"datePublished\\":\\"2023-02-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-08T22:41:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Spring Boot 测试中的陷阱 1. 概述 编程中最重要的主题之一是测试。Spring 框架和 Spring Boot 通过提供测试框架扩展以及引导我们编写具有大量后台自动化的最小、可测试代码，提供了非常好的支持。要运行 Spring Boot 集成测试，我们只需要在我们的测试类中添加 @SpringBootTest。我们可以在 Spring B..."},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. 陷阱示例","slug":"_2-陷阱示例","link":"#_2-陷阱示例","children":[]},{"level":2,"title":"3. 功能测试的设计目标","slug":"_3-功能测试的设计目标","link":"#_3-功能测试的设计目标","children":[]},{"level":2,"title":"4. 上下文缓存","slug":"_4-上下文缓存","link":"#_4-上下文缓存","children":[{"level":3,"title":"4.1. PetService 示例解决方案","slug":"_4-1-petservice-示例解决方案","link":"#_4-1-petservice-示例解决方案","children":[]},{"level":3,"title":"4.2. 陷阱：太多的上下文","slug":"_4-2-陷阱-太多的上下文","link":"#_4-2-陷阱-太多的上下文","children":[]},{"level":3,"title":"4.3. 陷阱：模拟","slug":"_4-3-陷阱-模拟","link":"#_4-3-陷阱-模拟","children":[]},{"level":3,"title":"4.4. 配置上下文缓存","slug":"_4-4-配置上下文缓存","link":"#_4-4-配置上下文缓存","children":[]}]},{"level":2,"title":"5. 上下文配置","slug":"_5-上下文配置","link":"#_5-上下文配置","children":[{"level":3,"title":"5.1. 配置检测","slug":"_5-1-配置检测","link":"#_5-1-配置检测","children":[]},{"level":3,"title":"5.2. 最小化 ApplicationContext","slug":"_5-2-最小化-applicationcontext","link":"#_5-2-最小化-applicationcontext","children":[]},{"level":3,"title":"5.3. 测试切片","slug":"_5-3-测试切片","link":"#_5-3-测试切片","children":[]},{"level":3,"title":"5.4. 上下文优化与缓存","slug":"_5-4-上下文优化与缓存","link":"#_5-4-上下文优化与缓存","children":[]}]},{"level":2,"title":"6. 建议：自定义切片","slug":"_6-建议-自定义切片","link":"#_6-建议-自定义切片","children":[]},{"level":2,"title":"7. 进一步的陷阱","slug":"_7-进一步的陷阱","link":"#_7-进一步的陷阱","children":[{"level":3,"title":"7.1. 派生测试配置","slug":"_7-1-派生测试配置","link":"#_7-1-派生测试配置","children":[]},{"level":3,"title":"7.2. 包结构","slug":"_7-2-包结构","link":"#_7-2-包结构","children":[]}]},{"level":2,"title":"8. 结论","slug":"_8-结论","link":"#_8-结论","children":[]}],"git":{"createdTime":1720478476000,"updatedTime":1720478476000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":12.11,"words":3632},"filePathRelative":"posts/baeldung/2024-07-08/2024-07-08-Pitfalls on Testing with Spring Boot.md","localizedDate":"2023年2月1日","excerpt":"\\n<h2>1. 概述</h2>\\n<p>编程中最重要的主题之一是测试。Spring 框架和 Spring Boot 通过提供测试框架扩展以及引导我们编写具有大量后台自动化的最小、可测试代码，提供了非常好的支持。要运行 Spring Boot 集成测试，我们只需要在我们的测试类中添加 <code>@SpringBootTest</code>。我们可以在 Spring Boot 中的测试中找到简短的介绍。即使我们在没有 Spring Boot 的情况下使用 Spring 框架，我们也可以非常高效地进行集成测试。</p>\\n<p>但是开发测试越容易，我们就越有可能遇到陷阱。在本教程中，我们将探讨 Spring Boot 测试是如何执行的，以及在编写测试时需要考虑什么。</p>","autoDesc":true}');export{r as comp,v as data};
