import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-0nXvcScy.js";const p={},e=t(`<hr><h1 id="java中将字节大小转换为人类可读格式" tabindex="-1"><a class="header-anchor" href="#java中将字节大小转换为人类可读格式"><span>Java中将字节大小转换为人类可读格式</span></a></h1><p>当我们在Java中获取文件大小时，通常我们会得到字节值。然而，一旦文件足够大，例如123456789字节，以字节表示的长度就变得难以理解了。</p><p>在本教程中，我们将探讨如何在Java中将字节大小转换为人类可读的格式。</p><h2 id="_2-问题介绍" tabindex="-1"><a class="header-anchor" href="#_2-问题介绍"><span>2. 问题介绍</span></a></h2><p>正如我们之前讨论的，当文件的字节大小很大时，它对人类来说不容易理解。因此，当我们向人类展示数据量时，我们经常使用适当的国际单位制前缀，如KB、MB、GB等，以使大数字易于人类理解。例如，“270GB”比“282341192字节”更容易理解。</p><p>然而，当我们通过标准的Java API获取文件大小时，它通常以字节为单位。因此，要获得人类可读的格式，我们需要动态地将值从字节单位转换为相应的二进制前缀，例如将“282341192字节”转换为“207MiB”，或将“2048字节”转换为“2KiB”。</p><p>值得一提的是，有两种单位前缀的变体：</p><ul><li>二进制前缀 - 它们是1024的幂；例如，1MiB = 1024KiB，1GiB = 1024MiB等</li><li>国际单位制(SI)前缀 - 它们是1000的幂；例如，1MB = 1000KB，1GB = 1000MB等。</li></ul><p><strong>我们的教程将专注于二进制前缀和SI前缀。</strong></p><h2 id="_3-解决问题" tabindex="-1"><a class="header-anchor" href="#_3-解决问题"><span>3. 解决问题</span></a></h2><p>我们可能已经意识到，解决问题的关键是动态地找到合适的单位。</p><p>例如，如果输入小于1024，比如200，那么我们需要使用字节单位得到“200字节”。然而，当输入大于1024但小于1024*1024时，例如4096，我们应该使用KiB单位，这样我们得到“4KiB”。</p><p>但是，让我们一步一步解决问题。在我们深入单位确定逻辑之前，首先定义所有所需的单位及其边界。</p><h3 id="_3-1-定义所需的单位" tabindex="-1"><a class="header-anchor" href="#_3-1-定义所需的单位"><span>3.1. 定义所需的单位</span></a></h3><p>正如我们所知，<strong>一个单位乘以1024将转换为下一级的单位</strong>。因此，我们可以创建常量来指示所有所需的单位及其基本值：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token constant">BYTE</span> <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token class-name">KiB</span> <span class="token operator">=</span> <span class="token constant">BYTE</span> \`<span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token class-name">MiB</span> <span class="token operator">=</span> <span class="token class-name">KiB</span> <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token class-name">GiB</span> <span class="token operator">=</span> <span class="token class-name">MiB</span> <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token class-name">TiB</span> <span class="token operator">=</span> <span class="token class-name">GiB</span> <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token class-name">PiB</span> <span class="token operator">=</span> <span class="token class-name">TiB</span> <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token class-name">EiB</span> <span class="token operator">=</span> <span class="token class-name">PiB</span> <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如上面的代码所示，我们使用二进制左移运算符(&lt;&lt;)来计算基本值。在这里，<strong>“<em>x &lt;&lt; 10</em>”与“<em>x * 1024</em>”相同，因为1024是2的10次方</strong>。</p><p>对于SI前缀<strong>一个单位乘以1000将转换为下一级的单位</strong>。因此，我们可以创建常量来指示所有所需的单位及其基本值：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token constant">KB</span> <span class="token operator">=</span> <span class="token constant">BYTE</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token constant">MB</span> <span class="token operator">=</span> <span class="token constant">KB</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token constant">GB</span> <span class="token operator">=</span> <span class="token constant">MB</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token constant">TB</span> <span class="token operator">=</span> <span class="token constant">GB</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token constant">PB</span> <span class="token operator">=</span> <span class="token constant">TB</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token constant">EB</span> <span class="token operator">=</span> <span class="token constant">PB</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-确定单位" tabindex="-1"><a class="header-anchor" href="#_3-2-确定单位"><span>3.2. 确定单位</span></a></h3><p>让我们首先看一下单位确定方法的实现：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">toHumanReadableBinaryPrefixes</span><span class="token punctuation">(</span><span class="token keyword">long</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>size \`<span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Invalid file size: &quot;</span> <span class="token operator">+</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&gt;</span>\`\`<span class="token operator">=</span> <span class="token class-name">EiB</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">formatSize</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token class-name">EiB</span><span class="token punctuation">,</span> <span class="token string">&quot;EiB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&gt;=</span> <span class="token class-name">PiB</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">formatSize</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token class-name">PiB</span><span class="token punctuation">,</span> <span class="token string">&quot;PiB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&gt;=</span> <span class="token class-name">TiB</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">formatSize</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token class-name">TiB</span><span class="token punctuation">,</span> <span class="token string">&quot;TiB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&gt;=</span> <span class="token class-name">GiB</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">formatSize</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token class-name">GiB</span><span class="token punctuation">,</span> <span class="token string">&quot;GiB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&gt;=</span> <span class="token class-name">MiB</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">formatSize</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token class-name">MiB</span><span class="token punctuation">,</span> <span class="token string">&quot;MiB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&gt;=</span> <span class="token class-name">KiB</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">formatSize</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token class-name">KiB</span><span class="token punctuation">,</span> <span class="token string">&quot;KiB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">formatSize</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token constant">BYTE</span><span class="token punctuation">,</span> <span class="token string">&quot;Bytes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">toHumanReadableSIPrefixes</span><span class="token punctuation">(</span><span class="token keyword">long</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>size \`<span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Invalid file size: &quot;</span> <span class="token operator">+</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&gt;</span>\`<span class="token operator">=</span> <span class="token constant">EB</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">formatSize</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token constant">EB</span><span class="token punctuation">,</span> <span class="token string">&quot;EB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&gt;=</span> <span class="token constant">PB</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">formatSize</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token constant">PB</span><span class="token punctuation">,</span> <span class="token string">&quot;PB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&gt;=</span> <span class="token constant">TB</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">formatSize</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token constant">TB</span><span class="token punctuation">,</span> <span class="token string">&quot;TB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&gt;=</span> <span class="token constant">GB</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">formatSize</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token constant">GB</span><span class="token punctuation">,</span> <span class="token string">&quot;GB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&gt;=</span> <span class="token constant">MB</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">formatSize</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token constant">MB</span><span class="token punctuation">,</span> <span class="token string">&quot;MB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&gt;=</span> <span class="token constant">KB</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">formatSize</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token constant">KB</span><span class="token punctuation">,</span> <span class="token string">&quot;KB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">formatSize</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token constant">BYTE</span><span class="token punctuation">,</span> <span class="token string">&quot;Bytes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，让我们快速了解这个方法是如何工作的。</p><p>首先，我们要确保输入是一个正数。</p><p>**然后，我们从高到低（EB到Byte）检查单位。**一旦我们发现输入的_size_大于或等于当前单位的基本值，当前单位就是正确的单位。</p><p>一旦我们找到了正确的单位，我们就可以调用之前创建的_formatSize_方法来得到最终结果作为_String_。</p><h3 id="_3-3-测试解决方案" tabindex="-1"><a class="header-anchor" href="#_3-3-测试解决方案"><span>3.3. 测试解决方案</span></a></h3><p>现在，让我们编写一个单元测试方法来验证我们的解决方案是否按预期工作。为了简化测试方法，让我们初始化一个_Map<code>&lt;Long, String&gt;</code>_，其中包含输入和相应的预期结果：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span>\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\` <span class="token constant">DATA_MAP_BINARY_PREFIXES</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span>\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\`<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>
    <span class="token function">put</span><span class="token punctuation">(</span><span class="token number">0L</span><span class="token punctuation">,</span> <span class="token string">&quot;0 Bytes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1023L</span><span class="token punctuation">,</span> <span class="token string">&quot;1023 Bytes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1024L</span><span class="token punctuation">,</span> <span class="token string">&quot;1 KiB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">put</span><span class="token punctuation">(</span><span class="token number">12_345L</span><span class="token punctuation">,</span> <span class="token string">&quot;12.06 KiB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">put</span><span class="token punctuation">(</span><span class="token number">10_123_456L</span><span class="token punctuation">,</span> <span class="token string">&quot;9.65 MiB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">put</span><span class="token punctuation">(</span><span class="token number">10_123_456_798L</span><span class="token punctuation">,</span> <span class="token string">&quot;9.43 GiB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1_777_777_777_777_777_777L</span><span class="token punctuation">,</span> <span class="token string">&quot;1.54 EiB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Map</span>\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\` <span class="token constant">DATA_MAP_SI_PREFIXES</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span>\`\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\`<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>
    <span class="token function">put</span><span class="token punctuation">(</span><span class="token number">0L</span><span class="token punctuation">,</span> <span class="token string">&quot;0 Bytes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">put</span><span class="token punctuation">(</span><span class="token number">999L</span><span class="token punctuation">,</span> <span class="token string">&quot;999 Bytes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">,</span> <span class="token string">&quot;1 KB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">put</span><span class="token punctuation">(</span><span class="token number">12_345L</span><span class="token punctuation">,</span> <span class="token string">&quot;12.35 KB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">put</span><span class="token punctuation">(</span><span class="token number">10_123_456L</span><span class="token punctuation">,</span> <span class="token string">&quot;10.12 MB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">put</span><span class="token punctuation">(</span><span class="token number">10_123_456_798L</span><span class="token punctuation">,</span> <span class="token string">&quot;10.12 GB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1_777_777_777_777_777_777L</span><span class="token punctuation">,</span> <span class="token string">&quot;1.78 EB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，让我们通过_MAP DATA_MAP_，取每个键值作为输入，并验证我们是否能得到预期的结果：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token constant">DATA_MAP</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> expected<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> <span class="token class-name">FileSizeFormatUtil</span><span class="token punctuation">.</span><span class="token function">toHumanReadable</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当我们执行单元测试时，它通过了。</p><h2 id="_4-使用枚举和循环改进解决方案" tabindex="-1"><a class="header-anchor" href="#_4-使用枚举和循环改进解决方案"><span>4. 使用枚举和循环改进解决方案</span></a></h2><p>到目前为止，我们已经解决了问题。解决方案相当直接。在_toHumanReadable_方法中，我们写了很多_if_语句来确定单位。</p><p>如果我们仔细考虑解决方案，可能会有几个容易出错的地方：</p><ul><li>那些_if_语句的顺序必须像方法中那样固定。</li><li>在每个_if_语句中，我们都硬编码了单位常量和相应的名称作为_String_对象。</li></ul><p>接下来，让我们看看如何改进解决方案。</p><h3 id="_4-1-创建-sizeunit枚举" tabindex="-1"><a class="header-anchor" href="#_4-1-创建-sizeunit枚举"><span>4.1. 创建_SizeUnit枚举_</span></a></h3><p>实际上，我们可以将单位常量转换为_enum_，这样我们就不必在方法中硬编码名称了：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">enum</span> <span class="token class-name">SizeUnitBinaryPrefixes</span> <span class="token punctuation">{</span>
    <span class="token class-name">Bytes</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">KiB</span><span class="token punctuation">(</span><span class="token class-name">Bytes</span><span class="token punctuation">.</span>unitBase \`<span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">MiB</span><span class="token punctuation">(</span><span class="token class-name">KiB</span><span class="token punctuation">.</span>unitBase <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">GiB</span><span class="token punctuation">(</span><span class="token class-name">MiB</span><span class="token punctuation">.</span>unitBase <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">TiB</span><span class="token punctuation">(</span><span class="token class-name">GiB</span><span class="token punctuation">.</span>unitBase <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">PiB</span><span class="token punctuation">(</span><span class="token class-name">TiB</span><span class="token punctuation">.</span>unitBase <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">EiB</span><span class="token punctuation">(</span><span class="token class-name">PiB</span><span class="token punctuation">.</span>unitBase <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Long</span> unitBase<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SizeUnitBinaryPrefixes</span><span class="token punctuation">&gt;</span></span>\`\` <span class="token function">unitsInDescending</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SizeUnitBinaryPrefixes</span><span class="token punctuation">&gt;</span></span>\` list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> list<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
   <span class="token comment">//getter和构造函数被省略</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token class-name">SizeUnitSIPrefixes</span> <span class="token punctuation">{</span>
    <span class="token class-name">Bytes</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">KB</span><span class="token punctuation">(</span><span class="token class-name">Bytes</span><span class="token punctuation">.</span>unitBase <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">MB</span><span class="token punctuation">(</span><span class="token constant">KB</span><span class="token punctuation">.</span>unitBase <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">GB</span><span class="token punctuation">(</span><span class="token constant">MB</span><span class="token punctuation">.</span>unitBase <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">TB</span><span class="token punctuation">(</span><span class="token constant">GB</span><span class="token punctuation">.</span>unitBase <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">PB</span><span class="token punctuation">(</span><span class="token constant">TB</span><span class="token punctuation">.</span>unitBase <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">EB</span><span class="token punctuation">(</span><span class="token constant">PB</span><span class="token punctuation">.</span>unitBaseEB<span class="token punctuation">.</span>unitBase <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Long</span> unitBase<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SizeUnitSIPrefixes</span><span class="token punctuation">&gt;</span></span>\`\` <span class="token function">unitsInDescending</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SizeUnitSIPrefixes</span><span class="token punctuation">&gt;</span></span>\`\` list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> list<span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
    <span class="token comment">//getter和构造函数被省略</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如上面的_enum SizeUnit_所示，一个_SizeUnit_实例持有_both unitBase and name_。</p><p>此外，由于我们稍后想要按“降序”检查单位，我们创建了一个辅助方法_unitsInDescending_，以返回所有单位所需的顺序。</p><p><strong>有了这个_enum_，我们就不必手动编码名称了。</strong></p><p>接下来，让我们看看是否可以对一组_if_语句进行一些改进。</p><h3 id="_4-2-使用循环确定单位" tabindex="-1"><a class="header-anchor" href="#_4-2-使用循环确定单位"><span>4.2. 使用循环确定单位</span></a></h3><p>由于我们的_SizeUnit枚举_可以按降序提供一个_List_中的所有单位，我们可以将一组_if_语句替换为_for_循环：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">toHumanReadableWithEnum</span><span class="token punctuation">(</span><span class="token keyword">long</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SizeUnit</span><span class="token punctuation">&gt;</span></span>\` units <span class="token operator">=</span> <span class="token class-name">SizeUnit</span><span class="token punctuation">.</span><span class="token function">unitsInDescending</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>size \`<span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Invalid file size: &quot;</span> <span class="token operator">+</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SizeUnit</span> unit <span class="token operator">:</span> units<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&gt;</span>\`<span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">getUnitBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result <span class="token operator">=</span> <span class="token function">formatSize</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> unit<span class="token punctuation">.</span><span class="token function">getUnitBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> unit<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token function">formatSize</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token class-name">SizeUnit<span class="token punctuation">.</span>Bytes</span><span class="token punctuation">.</span><span class="token function">getUnitBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">SizeUnit<span class="token punctuation">.</span>Bytes</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如上面的代码所示，该方法遵循与第一个解决方案相同的逻辑。此外，<strong>它避免了那些单位常量、多个_if_语句和硬编码的单位名称。</strong></p><p>为了确保它按预期工作，让我们测试我们的解决方案：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token constant">DATA_MAP</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> expected<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> <span class="token class-name">FileSizeFormatUtil</span><span class="token punctuation">.</span><span class="token function">toHumanReadableWithEnum</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当我们执行测试时，它通过了。</p><h2 id="_5-使用-long-numberofleadingzeros-方法" tabindex="-1"><a class="header-anchor" href="#_5-使用-long-numberofleadingzeros-方法"><span>5. 使用_Long.numberOfLeadingZeros_方法</span></a></h2><p>我们已经通过逐个检查单位并采取第一个满足我们条件的单位来解决问题。</p><p>或者，我们可以使用Java标准API中的_Long.numberOfLeadingZeros_方法来确定给定大小值所属的单位。</p><p>接下来，让我们仔细看看这种有趣的方法。</p><h3 id="_5-1-long-numberofleadingzeros-方法介绍" tabindex="-1"><a class="header-anchor" href="#_5-1-long-numberofleadingzeros-方法介绍"><span>5.1. _Long.numberOfLeadingZeros_方法介绍</span></a></h3><p><strong>_Long.numberOfLeadingZeros_方法返回给定_Long_值的二进制表示中最左边的一位位的零位数量。</strong></p><p>由于**Java的_Long_类型是一个64位整数，<em>Long.numberOfLeadingZeros(0L) = 64</em>。**一些例子可能有助于我们快速理解这个方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token number">1L</span>  <span class="token operator">=</span> <span class="token number">00.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">(</span>总共<span class="token number">63</span>个零<span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token number">0001</span> <span class="token operator">-&gt;</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">numberOfLeadingZeros</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">63</span>
<span class="token number">1024L</span> <span class="token operator">=</span> <span class="token number">00.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">(</span>总共<span class="token number">53</span>个零<span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">0100</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token operator">-&gt;</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">numberOfLeadingZeros</span><span class="token punctuation">(</span><span class="token number">1024L</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">53</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们已经理解了_Long.numberOfLeadingZeros_方法。但它如何帮助我们确定单位呢？</p><p>让我们弄清楚。</p><h3 id="_5-2-解决问题的想法" tabindex="-1"><a class="header-anchor" href="#_5-2-解决问题的想法"><span>5.2. 解决问题的想法</span></a></h3><p>我们知道单位之间的因子是1024，这是2的10次幂（<em>2^10</em>）。因此，<strong>如果我们计算每个单位的基本值的前导零位的数量，两个相邻单位之间的差异总是10</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Index</span>  <span class="token class-name">Unit</span>\\<span class="token function">tnumberOfLeadingZeros</span><span class="token punctuation">(</span>unit<span class="token punctuation">.</span>baseValue<span class="token punctuation">)</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
<span class="token number">0</span>      <span class="token class-name">Byte</span>\\t63
<span class="token number">1</span>      <span class="token class-name">KiB</span>  \\t53
<span class="token number">2</span>      <span class="token class-name">MiB</span>  \\t43
<span class="token number">3</span>      <span class="token class-name">GiB</span>  \\t33
<span class="token number">4</span>      <span class="token class-name">TiB</span>  \\t23
<span class="token number">5</span>      <span class="token class-name">PiB</span>  \\t13
<span class="token number">6</span>      <span class="token class-name">EiB</span>       <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进一步，<strong>我们可以计算输入值的前导零位的数量，并查看结果落在哪个单位的范围内，以找到合适的单位</strong>。</p><p>接下来，让我们看一个例子 - 如何确定单位并计算大小为4096的单位基本值：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token number">4096</span> \`<span class="token operator">&lt;</span> <span class="token number">1024</span> <span class="token punctuation">(</span><span class="token class-name">Byte</span>&#39;s base value<span class="token punctuation">)</span>  <span class="token operator">-&gt;</span>\` <span class="token class-name">Byte</span>
<span class="token keyword">else</span><span class="token operator">:</span>
    <span class="token function">numberOfLeadingZeros</span><span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">51</span>
    unitIdx <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">numberOfLeadingZeros</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">51</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">63</span> <span class="token operator">-</span> <span class="token number">51</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">=</span> <span class="token number">1</span>
    unitIdx <span class="token operator">=</span> <span class="token number">1</span>  <span class="token operator">-&gt;</span> <span class="token constant">KB</span> <span class="token punctuation">(</span>找到了单位<span class="token punctuation">)</span>
    unitBase <span class="token operator">=</span> <span class="token number">1</span> \`<span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>unitIdx <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">10</span> <span class="token operator">=</span> <span class="token number">1024</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，让我们将这个逻辑实现为一个方法。</p><h3 id="_5-3-实现这个想法" tabindex="-1"><a class="header-anchor" href="#_5-3-实现这个想法"><span>5.3. 实现这个想法</span></a></h3><p>让我们创建一个方法来实现我们刚刚讨论的想法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">toHumanReadableByNumOfLeadingZeros</span><span class="token punctuation">(</span><span class="token keyword">long</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Invalid file size: &quot;</span> <span class="token operator">+</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;</span> <span class="token number">1024</span><span class="token punctuation">)</span> <span class="token keyword">return</span> size <span class="token operator">+</span> <span class="token string">&quot; Bytes&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> unitIdx <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">63</span> <span class="token operator">-</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">numberOfLeadingZeros</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">formatSize</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token number">1L</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>unitIdx <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot; KMGTPE&quot;</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>unitIdx<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;iB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如我们所看到的，上述方法非常紧凑。它不需要单位常量或_enum_。相反，<strong>我们创建了一个包含单位的_String_：“” KMGTPE”。然后，我们使用计算出的_unitIdx_来选择正确的单位字母，并附加“iB”以构建完整的单位名称。</strong></p><p>值得一提的是，我们故意在_String_“” KMGTPE“”中留下第一个字符为空。这是因为单位“<em>Byte</em>”不遵循模式“<em>*B</em>”，我们单独处理了它：<em>if (size &lt; 1024) return size + ” Bytes”;</em></p><p>再次，让我们编写一个测试方法，以确保它按预期工作：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token constant">DATA_MAP</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> expected<span class="token punctuation">)</span> <span class="token operator">-&gt;</span>\` <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> <span class="token class-name">FileSizeFormatUtil</span><span class="token punctuation">.</span><span class="token function">toHumanReadableByNumOfLeadingZeros</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当我们执行测试时，它通过了。</p><h2 id="_6-使用apache-commons-io" tabindex="-1"><a class="header-anchor" href="#_6-使用apache-commons-io"><span>6. 使用Apache Commons IO</span></a></h2><p>到目前为止，我们已经实现了两种将文件大小值转换为人类可读格式的不同方法。</p><p>实际上，一些外部库已经提供了一个方法来解决这个问题：Apache Commons-IO。</p><p>Apache Commons-IO的_FileUtils_允许我们通过_byteCountToDisplaySize_方法将字节大小转换为人类可读的格式。</p><p>然而，<strong>这个方法会自动四舍五入小数部分</strong>。</p><p>最后，让我们用我们的输入数据测试_byteCountToDisplaySize_方法，看看它打印了什么：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token constant">DATA_MAP</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> expected<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>in <span class="token operator">+</span> <span class="token string">&quot; bytes -&gt; &quot;</span> <span class="token operator">+</span> <span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">byteCountToDisplaySize</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>测试输出：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token number">0</span> bytes <span class="token operator">-&gt;</span> <span class="token number">0</span> bytes
<span class="token number">1024</span> bytes <span class="token operator">-&gt;</span> <span class="token number">1</span> <span class="token constant">KB</span>
<span class="token number">1777777777777777777</span> bytes <span class="token operator">-&gt;</span> <span class="token number">1</span> <span class="token constant">EB</span>
<span class="token number">12345</span> bytes <span class="token operator">-&gt;</span> <span class="token number">12</span> <span class="token constant">KB</span>
<span class="token number">10123456</span> bytes <span class="token operator">-&gt;</span> <span class="token number">9</span> <span class="token constant">MB</span>
<span class="token number">10123456798</span> bytes <span class="token operator">-&gt;</span> <span class="token number">9</span> <span class="token constant">GB</span>
<span class="token number">1023</span> bytes <span class="token operator">-&gt;</span> <span class="token number">1023</span> bytes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-结论" tabindex="-1"><a class="header-anchor" href="#_7-结论"><span>7. 结论</span></a></h2><p>在本文中，我们讨论了将字节大小转换为人类可读格式的不同方法。</p><p>一如既往，本文中展示的代码可以在GitHub上找到。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>
OK</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,90),o=[e];function c(l,i){return a(),s("div",null,o)}const r=n(p,[["render",c],["__file","2024-07-20-Convert Byte Size Into a Human Readable Format in Java.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-20/2024-07-20-Convert%20Byte%20Size%20Into%20a%20Human%20Readable%20Format%20in%20Java.html","title":"Java中将字节大小转换为人类可读格式","lang":"zh-CN","frontmatter":{"category":["Java","文件操作"],"tag":["Java","文件大小","可读格式"],"head":[["meta",{"name":"keywords","content":"Java, 文件大小, 可读格式, 转换"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-20/2024-07-20-Convert%20Byte%20Size%20Into%20a%20Human%20Readable%20Format%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Java中将字节大小转换为人类可读格式"}],["meta",{"property":"og:description","content":"Java中将字节大小转换为人类可读格式 当我们在Java中获取文件大小时，通常我们会得到字节值。然而，一旦文件足够大，例如123456789字节，以字节表示的长度就变得难以理解了。 在本教程中，我们将探讨如何在Java中将字节大小转换为人类可读的格式。 2. 问题介绍 正如我们之前讨论的，当文件的字节大小很大时，它对人类来说不容易理解。因此，当我们向人..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-20T02:14:28.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"文件大小"}],["meta",{"property":"article:tag","content":"可读格式"}],["meta",{"property":"article:modified_time","content":"2024-07-20T02:14:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java中将字节大小转换为人类可读格式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-20T02:14:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Java中将字节大小转换为人类可读格式 当我们在Java中获取文件大小时，通常我们会得到字节值。然而，一旦文件足够大，例如123456789字节，以字节表示的长度就变得难以理解了。 在本教程中，我们将探讨如何在Java中将字节大小转换为人类可读的格式。 2. 问题介绍 正如我们之前讨论的，当文件的字节大小很大时，它对人类来说不容易理解。因此，当我们向人..."},"headers":[{"level":2,"title":"2. 问题介绍","slug":"_2-问题介绍","link":"#_2-问题介绍","children":[]},{"level":2,"title":"3. 解决问题","slug":"_3-解决问题","link":"#_3-解决问题","children":[{"level":3,"title":"3.1. 定义所需的单位","slug":"_3-1-定义所需的单位","link":"#_3-1-定义所需的单位","children":[]},{"level":3,"title":"3.2. 确定单位","slug":"_3-2-确定单位","link":"#_3-2-确定单位","children":[]},{"level":3,"title":"3.3. 测试解决方案","slug":"_3-3-测试解决方案","link":"#_3-3-测试解决方案","children":[]}]},{"level":2,"title":"4. 使用枚举和循环改进解决方案","slug":"_4-使用枚举和循环改进解决方案","link":"#_4-使用枚举和循环改进解决方案","children":[{"level":3,"title":"4.1. 创建_SizeUnit枚举_","slug":"_4-1-创建-sizeunit枚举","link":"#_4-1-创建-sizeunit枚举","children":[]},{"level":3,"title":"4.2. 使用循环确定单位","slug":"_4-2-使用循环确定单位","link":"#_4-2-使用循环确定单位","children":[]}]},{"level":2,"title":"5. 使用_Long.numberOfLeadingZeros_方法","slug":"_5-使用-long-numberofleadingzeros-方法","link":"#_5-使用-long-numberofleadingzeros-方法","children":[{"level":3,"title":"5.1. _Long.numberOfLeadingZeros_方法介绍","slug":"_5-1-long-numberofleadingzeros-方法介绍","link":"#_5-1-long-numberofleadingzeros-方法介绍","children":[]},{"level":3,"title":"5.2. 解决问题的想法","slug":"_5-2-解决问题的想法","link":"#_5-2-解决问题的想法","children":[]},{"level":3,"title":"5.3. 实现这个想法","slug":"_5-3-实现这个想法","link":"#_5-3-实现这个想法","children":[]}]},{"level":2,"title":"6. 使用Apache Commons IO","slug":"_6-使用apache-commons-io","link":"#_6-使用apache-commons-io","children":[]},{"level":2,"title":"7. 结论","slug":"_7-结论","link":"#_7-结论","children":[]}],"git":{"createdTime":1721441668000,"updatedTime":1721441668000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":9.06,"words":2718},"filePathRelative":"posts/baeldung/2024-07-20/2024-07-20-Convert Byte Size Into a Human Readable Format in Java.md","localizedDate":"2024年7月20日","excerpt":"<hr>\\n<h1>Java中将字节大小转换为人类可读格式</h1>\\n<p>当我们在Java中获取文件大小时，通常我们会得到字节值。然而，一旦文件足够大，例如123456789字节，以字节表示的长度就变得难以理解了。</p>\\n<p>在本教程中，我们将探讨如何在Java中将字节大小转换为人类可读的格式。</p>\\n<h2>2. 问题介绍</h2>\\n<p>正如我们之前讨论的，当文件的字节大小很大时，它对人类来说不容易理解。因此，当我们向人类展示数据量时，我们经常使用适当的国际单位制前缀，如KB、MB、GB等，以使大数字易于人类理解。例如，“270GB”比“282341192字节”更容易理解。</p>\\n","autoDesc":true}');export{r as comp,d as data};
