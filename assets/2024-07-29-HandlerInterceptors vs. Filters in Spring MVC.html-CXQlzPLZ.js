import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as e,a}from"./app-C5QtKXnb.js";const t={},p=a(`<h1 id="spring-mvc中的handlerinterceptor与filter对比" tabindex="-1"><a class="header-anchor" href="#spring-mvc中的handlerinterceptor与filter对比"><span>Spring MVC中的HandlerInterceptor与Filter对比</span></a></h1><p>在本文中，我们将比较Java Servlet的_Filter_和Spring MVC的_HandlerInterceptor_，并讨论何时一个比另一个更可取。</p><p><strong>Filters是web服务器的一部分，而不是Spring框架的一部分。</strong> 对于传入的请求，我们可以使用filters来操作甚至阻止请求到达任何servlet。反之，我们也可以阻止响应到达客户端。</p><p>Spring Security是使用filters进行认证和授权的一个绝佳例子。要配置Spring Security，我们只需要添加一个filter，即_DelegatingFilterProxy_。然后Spring Security就可以拦截所有传入和传出的流量。这就是为什么Spring Security可以用于Spring MVC之外。</p><h3 id="_2-1-创建-filter" tabindex="-1"><a class="header-anchor" href="#_2-1-创建-filter"><span>2.1. 创建_Filter_</span></a></h3><p>要创建一个filter，首先我们创建一个实现_javax.servlet.Filter接口_的类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">LogFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Hello from: &quot;</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getLocalAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们覆盖_doFilter_方法，在这里我们可以访问或操作_ServletRequest_, <em>ServletResponse</em>, 或_FilterChain_对象。我们可以使用_FilterChain_对象来允许或阻止请求。</p><p>最后，我们通过使用_@Component_注解将_Filter_添加到Spring上下文中。Spring会做其余的工作。</p><h2 id="_3-handlerinterceptor" tabindex="-1"><a class="header-anchor" href="#_3-handlerinterceptor"><span>3. <em>HandlerInterceptor</em></span></a></h2><p><strong>_HandlerInterceptor_是Spring MVC框架的一部分，位于_DispatcherServlet_和我们的_Controller_之间。</strong> 我们可以在请求到达我们的controllers之前拦截请求，并在视图渲染之前和之后进行拦截。</p><h3 id="_3-1-创建-handlerinterceptor" tabindex="-1"><a class="header-anchor" href="#_3-1-创建-handlerinterceptor"><span>3.1. 创建_HandlerInterceptor_</span></a></h3><p>要创建一个_HandlerInterceptor_，我们创建一个实现_org.springframework.web.servlet.HandlerInterceptor_接口的类。这使我们可以选择覆盖三个方法：</p><ul><li><em>preHandle()</em> – 在调用目标处理器之前执行</li><li><em>postHandle()</em> – 在目标处理器之后但在_DispatcherServlet_渲染视图之前执行</li><li><em>afterCompletion()</em> – 请求处理和视图渲染完成后的回调</li></ul><p>让我们在我们的测试拦截器中向这三个方法添加日志记录：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">LogInterceptor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;preHandle&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">ModelAndView</span> modelAndView<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;postHandle&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;afterCompletion&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-关键差异和用例" tabindex="-1"><a class="header-anchor" href="#_4-关键差异和用例"><span>4. 关键差异和用例</span></a></h2><p>让我们看一张图表，显示_Filter_和_HandlerInterceptor_在请求/响应流程中的位置：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2021/05/filters_vs_interceptors.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>Filters在请求到达_DispatcherServlet_之前进行拦截，使它们非常适合粗粒度任务</strong>，例如：</p><ul><li>认证</li><li>日志记录和审计</li><li>图像和数据压缩</li><li>我们想要与Spring MVC解耦的任何功能</li></ul><p><strong>HandlerInterceptors另一方面，在_DispatcherServlet_和我们的_Controller_之间拦截请求。</strong> 这是在Spring MVC框架内完成的，提供了对_Handler_和_ModelAndView_对象的访问。这减少了重复，并允许更细粒度的功能，例如：</p><ul><li>处理应用程序日志记录等横切关注点</li><li>详细的授权检查</li><li>操作Spring上下文或模型</li></ul><h2 id="_5-结论" tabindex="-1"><a class="header-anchor" href="#_5-结论"><span>5. 结论</span></a></h2><p>在本文中，我们涵盖了_Filter_和_HandlerInterceptor_之间的差异。</p><p><strong>关键要点是，使用_Filter_，我们可以在请求到达我们的controllers之前操作请求，并且可以在Spring MVC之外操作。</strong> 否则，_HandlerInterceptor_是应用程序特定横切关注点的好地方。通过提供对目标_Handler_和_ModelAndView_对象的访问，我们有了更细粒度的控制。</p><p>所有这些示例和代码片段的实现可以在GitHub上找到。</p>`,27),l=[p];function r(o,i){return e(),s("div",null,l)}const d=n(t,[["render",r],["__file","2024-07-29-HandlerInterceptors vs. Filters in Spring MVC.html.vue"]]),k=JSON.parse('{"path":"/posts/baeldung/2024-07-29/2024-07-29-HandlerInterceptors%20vs.%20Filters%20in%20Spring%20MVC.html","title":"Spring MVC中的HandlerInterceptor与Filter对比","lang":"zh-CN","frontmatter":{"date":"2021-05-01T00:00:00.000Z","category":["Spring MVC","Java"],"tag":["Filter","HandlerInterceptor"],"head":[["meta",{"name":"keywords","content":"Spring MVC, Filter, HandlerInterceptor, Java Servlet"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-29/2024-07-29-HandlerInterceptors%20vs.%20Filters%20in%20Spring%20MVC.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Spring MVC中的HandlerInterceptor与Filter对比"}],["meta",{"property":"og:description","content":"Spring MVC中的HandlerInterceptor与Filter对比 在本文中，我们将比较Java Servlet的_Filter_和Spring MVC的_HandlerInterceptor_，并讨论何时一个比另一个更可取。 Filters是web服务器的一部分，而不是Spring框架的一部分。 对于传入的请求，我们可以使用filters..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.baeldung.com/wp-content/uploads/2021/05/filters_vs_interceptors.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-30T00:08:58.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Filter"}],["meta",{"property":"article:tag","content":"HandlerInterceptor"}],["meta",{"property":"article:published_time","content":"2021-05-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-30T00:08:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring MVC中的HandlerInterceptor与Filter对比\\",\\"image\\":[\\"https://www.baeldung.com/wp-content/uploads/2021/05/filters_vs_interceptors.jpg\\"],\\"datePublished\\":\\"2021-05-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-30T00:08:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Spring MVC中的HandlerInterceptor与Filter对比 在本文中，我们将比较Java Servlet的_Filter_和Spring MVC的_HandlerInterceptor_，并讨论何时一个比另一个更可取。 Filters是web服务器的一部分，而不是Spring框架的一部分。 对于传入的请求，我们可以使用filters..."},"headers":[{"level":3,"title":"2.1. 创建_Filter_","slug":"_2-1-创建-filter","link":"#_2-1-创建-filter","children":[]},{"level":2,"title":"3. HandlerInterceptor","slug":"_3-handlerinterceptor","link":"#_3-handlerinterceptor","children":[{"level":3,"title":"3.1. 创建_HandlerInterceptor_","slug":"_3-1-创建-handlerinterceptor","link":"#_3-1-创建-handlerinterceptor","children":[]}]},{"level":2,"title":"4. 关键差异和用例","slug":"_4-关键差异和用例","link":"#_4-关键差异和用例","children":[]},{"level":2,"title":"5. 结论","slug":"_5-结论","link":"#_5-结论","children":[]}],"git":{"createdTime":1722298138000,"updatedTime":1722298138000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":2.9,"words":869},"filePathRelative":"posts/baeldung/2024-07-29/2024-07-29-HandlerInterceptors vs. Filters in Spring MVC.md","localizedDate":"2021年5月1日","excerpt":"\\n<p>在本文中，我们将比较Java Servlet的_Filter_和Spring MVC的_HandlerInterceptor_，并讨论何时一个比另一个更可取。</p>\\n<p><strong>Filters是web服务器的一部分，而不是Spring框架的一部分。</strong> 对于传入的请求，我们可以使用filters来操作甚至阻止请求到达任何servlet。反之，我们也可以阻止响应到达客户端。</p>\\n<p>Spring Security是使用filters进行认证和授权的一个绝佳例子。要配置Spring Security，我们只需要添加一个filter，即_DelegatingFilterProxy_。然后Spring Security就可以拦截所有传入和传出的流量。这就是为什么Spring Security可以用于Spring MVC之外。</p>","autoDesc":true}');export{d as comp,k as data};
