import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as e}from"./app-DqWWR6Qm.js";const t={},p=e(`<h1 id="建造者模式与继承" tabindex="-1"><a class="header-anchor" href="#建造者模式与继承"><span>建造者模式与继承</span></a></h1><p>在这个教程中，我们将学习在处理层次继承时实现建造者设计模式所面临的挑战。层次继承的一个例子可能是电动汽车、汽车和车辆之间的继承关系。</p><p>建造者模式是一种创建型设计模式，它通过方法链的帮助，以逐步过程简化了构建具有许多属性的复杂对象。虽然继承有助于简化设计，但它也导致了在建造者模式中实现方法链以创建对象时的复杂性。</p><p>此外，我们将通过Java泛型API的帮助，找到一个高效的实现方法。</p><h2 id="_2-问题描述" tabindex="-1"><a class="header-anchor" href="#_2-问题描述"><span>2. 问题描述</span></a></h2><p>让我们以在创建_Vehicle_、_Car_和_ElectricCar_类型对象时应用建造者模式为例：</p><p>在对象层次结构的顶部，有_Vehicle_类。<strong>类_Car_扩展了_Vehicle_，然后_ElectricCar_扩展了_Car_。类似于这些对象，它们的建造者在它们之间也有层次关系。</strong></p><p>让我们实例化_CarBuilder_类，使用方法链设置其属性，最后调用_build()_方法来获取_car_对象：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">CarBuilder</span> carBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CarBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Car</span> car <span class="token operator">=</span> carBuilder<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string">&quot;Ford&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">&quot;F&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">fuelType</span><span class="token punctuation">(</span><span class="token string">&quot;Petrol&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">colour</span><span class="token punctuation">(</span><span class="token string">&quot;red&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们<strong>尝试改变方法调用的顺序</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">CarBuilder</span> carBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CarBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Car</span> car <span class="token operator">=</span> carBuilder<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string">&quot;Ford&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">colour</span><span class="token punctuation">(</span><span class="token string">&quot;red&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">fuelType</span><span class="token punctuation">(</span><span class="token string">&quot;Petrol&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">&quot;F&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法_colour()_和_fuelType()_返回_VehicleBuilder_类。因此，后续对_model()_的调用<strong>将导致编译错误</strong>，因为它在_VehicleBuilder_类中不存在。这是不方便的，也是一个缺点。当我们尝试使用_ElectricVehicleBuilder_类构建_ElectricVehicle_对象时，也会出现类似的行为。</p><h2 id="_3-没有泛型的解决方案" tabindex="-1"><a class="header-anchor" href="#_3-没有泛型的解决方案"><span>3. 没有泛型的解决方案</span></a></h2><p><strong>这是一个非常直接的实现，其中子建造者类覆盖了层次结构中所有基建造者类的链式方法。</strong> 因此，在设置属性值的方法链期间不会出现编译错误。</p><p>让我们首先看看_Vehicle_类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> fuelType<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> colour<span class="token punctuation">;</span>

    <span class="token comment">// 标准获取器方法...</span>

    <span class="token keyword">public</span> <span class="token class-name">Vehicle</span><span class="token punctuation">(</span><span class="token class-name">VehicleBuilder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>colour <span class="token operator">=</span> builder<span class="token punctuation">.</span>colour<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>fuelType <span class="token operator">=</span> builder<span class="token punctuation">.</span>fuelType<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">VehicleBuilder</span> <span class="token punctuation">{</span>

        <span class="token keyword">protected</span> <span class="token class-name">String</span> fuelType<span class="token punctuation">;</span>
        <span class="token keyword">protected</span> <span class="token class-name">String</span> colour<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">VehicleBuilder</span> <span class="token function">fuelType</span><span class="token punctuation">(</span><span class="token class-name">String</span> fuelType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>fuelType <span class="token operator">=</span> fuelType<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">VehicleBuilder</span> <span class="token function">colour</span><span class="token punctuation">(</span><span class="token class-name">String</span> colour<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>colour <span class="token operator">=</span> colour<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">Vehicle</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Vehicle</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>Vehicle_类有两个属性_fuelType_和_colour</em>。它还有一个内部类_VehicleBuilder_，其中的方法名称与_Vehicle_类中的属性相似。它们返回建造者类，以便支持方法链。</p><p>现在，让我们看看_Car_类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token keyword">extends</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> make<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> model<span class="token punctuation">;</span>

    <span class="token comment">// 标准获取器方法...</span>

    <span class="token keyword">public</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token class-name">CarBuilder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>make <span class="token operator">=</span> builder<span class="token punctuation">.</span>make<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>model <span class="token operator">=</span> builder<span class="token punctuation">.</span>model<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CarBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">VehicleBuilder</span> <span class="token punctuation">{</span>

        <span class="token keyword">protected</span> <span class="token class-name">String</span> make<span class="token punctuation">;</span>
        <span class="token keyword">protected</span> <span class="token class-name">String</span> model<span class="token punctuation">;</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">CarBuilder</span> <span class="token function">colour</span><span class="token punctuation">(</span><span class="token class-name">String</span> colour<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>colour <span class="token operator">=</span> colour<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">CarBuilder</span> <span class="token function">fuelType</span><span class="token punctuation">(</span><span class="token class-name">String</span> fuelType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>fuelType <span class="token operator">=</span> fuelType<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">CarBuilder</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token class-name">String</span> make<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>make <span class="token operator">=</span> make<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">CarBuilder</span> <span class="token function">model</span><span class="token punctuation">(</span><span class="token class-name">String</span> model<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>model <span class="token operator">=</span> model<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">Car</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类_Car_从_Vehicle_继承，同样，_CarBuilder_类从_VehicleBuilder_继承。此外，_CarBuilder_类必须覆盖方法_colour()<em>和_fuelType()</em>。</p><p>让我们现在构建一个_Car_对象：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenNoGenericImpl_whenBuild_thenReturnObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Car</span> car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car<span class="token punctuation">.</span>CarBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">colour</span><span class="token punctuation">(</span><span class="token string">&quot;red&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">fuelType</span><span class="token punctuation">(</span><span class="token string">&quot;Petrol&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string">&quot;Ford&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">&quot;F&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;red&quot;</span><span class="token punctuation">,</span> car<span class="token punctuation">.</span><span class="token function">getColour</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Ford&quot;</span><span class="token punctuation">,</span> car<span class="token punctuation">.</span><span class="token function">getMake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以在调用_build()_方法之前以任何顺序设置汽车的属性。</p><p>然而，对于_Car_的子类，如_ElectricCar_，我们必须在_ElectricCarBuilder_中覆盖_CarBuilder_和_VehicleBuilder_的所有方法。因此，<strong>这不是一个非常高效的实现</strong>。</p><h2 id="_4-使用泛型的解决方案" tabindex="-1"><a class="header-anchor" href="#_4-使用泛型的解决方案"><span>4. 使用泛型的解决方案</span></a></h2><p>泛型可以帮助我们克服前面讨论的实现中的挑战。</p><p>让我们修改_Vehicle_类中的内部_Builder_类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> colour<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> fuelType<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Vehicle</span><span class="token punctuation">(</span><span class="token class-name">Builder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>colour <span class="token operator">=</span> builder<span class="token punctuation">.</span>colour<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>fuelType <span class="token operator">=</span> builder<span class="token punctuation">.</span>fuelType<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 标准获取器方法...</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span>\`\`<span class="token operator">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Builder</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\`<span class="token operator">&gt;</span> <span class="token punctuation">{</span>

        <span class="token keyword">protected</span> <span class="token class-name">String</span> colour<span class="token punctuation">;</span>
        <span class="token keyword">protected</span> <span class="token class-name">String</span> fuelType<span class="token punctuation">;</span>

        <span class="token class-name">T</span> <span class="token function">self</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">colour</span><span class="token punctuation">(</span><span class="token class-name">String</span> colour<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>colour <span class="token operator">=</span> colour<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token function">self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">fuelType</span><span class="token punctuation">(</span><span class="token class-name">String</span> fuelType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>fuelType <span class="token operator">=</span> fuelType<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token function">self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">Vehicle</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Vehicle</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，在内部_Builder_类的_fuelType()_和_colour()_方法返回泛型类型。这种实现方式促进了流畅风格的编码或方法链。<strong>这是一种众所周知的设计模式，名为</strong> <strong>Curiously Recurring Template Pattern(CRTP)</strong>。</p><p>现在让我们实现_Car_类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token keyword">extends</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> make<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> model<span class="token punctuation">;</span>

    <span class="token comment">// 标准获取器...</span>
    <span class="token keyword">public</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token class-name">Builder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>make <span class="token operator">=</span> builder<span class="token punctuation">.</span>make<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>model <span class="token operator">=</span> builder<span class="token punctuation">.</span>model<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span>\`\`<span class="token operator">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Builder</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\`<span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token class-name">Vehicle<span class="token punctuation">.</span>Builder</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>\`\`\` <span class="token punctuation">{</span>

        <span class="token keyword">protected</span> <span class="token class-name">String</span> make<span class="token punctuation">;</span>
        <span class="token keyword">protected</span> <span class="token class-name">String</span> model<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token class-name">String</span> make<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>make <span class="token operator">=</span> make<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token function">self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">model</span><span class="token punctuation">(</span><span class="token class-name">String</span> model<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>model <span class="token operator">=</span> model<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token function">self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Car</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在内部_Builder_类的签名中应用了CRTP，并使内部类的方法返回泛型类型以支持方法链。</p><p>类似地，让我们实现_Car_的子类_ElectricCar_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ElectricCar</span> <span class="token keyword">extends</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> batteryType<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getBatteryType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> batteryType<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">ElectricCar</span><span class="token punctuation">(</span><span class="token class-name">Builder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>batteryType <span class="token operator">=</span> builder<span class="token punctuation">.</span>batteryType<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span>\`\`<span class="token operator">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Builder</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>\`\`\`\`\`<span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token class-name">Car<span class="token punctuation">.</span>Builder</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>\`\`\` <span class="token punctuation">{</span>
        <span class="token keyword">protected</span> <span class="token class-name">String</span> batteryType<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">batteryType</span><span class="token punctuation">(</span><span class="token class-name">String</span> batteryType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>batteryType <span class="token operator">=</span> batteryType<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token function">self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">ElectricCar</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ElectricCar</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现几乎相同，除了内部_Builder_类扩展了其父类_Builder.Car<code>&lt;T&gt;</code>_。相同的技术必须应用于_ElectricCar_的后续子类等等。</p><p>让我们看看实现在行动中：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenGenericImpl_whenBuild_thenReturnObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Car<span class="token punctuation">.</span>Builder</span>\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span>\`\`\`\` carBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Car</span> car <span class="token operator">=</span> carBuilder<span class="token punctuation">.</span><span class="token function">colour</span><span class="token punctuation">(</span><span class="token string">&quot;red&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">fuelType</span><span class="token punctuation">(</span><span class="token string">&quot;Petrol&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string">&quot;Ford&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">&quot;F&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">ElectricCar<span class="token punctuation">.</span>Builder</span>\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span>\`\`\`\` <span class="token class-name">ElectricCarBuilder</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ElectricCar<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ElectricCar</span> eCar <span class="token operator">=</span> <span class="token class-name">ElectricCarBuilder</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string">&quot;Mercedes&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">colour</span><span class="token punctuation">(</span><span class="token string">&quot;White&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">&quot;G&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">fuelType</span><span class="token punctuation">(</span><span class="token string">&quot;Electric&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">batteryType</span><span class="token punctuation">(</span><span class="token string">&quot;Lithium&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;red&quot;</span><span class="token punctuation">,</span> car<span class="token punctuation">.</span><span class="token function">getColour</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Ford&quot;</span><span class="token punctuation">,</span> car<span class="token punctuation">.</span><span class="token function">getMake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Electric&quot;</span><span class="token punctuation">,</span> eCar<span class="token punctuation">.</span><span class="token function">getFuelType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Lithium&quot;</span><span class="token punctuation">,</span> eCar<span class="token punctuation">.</span><span class="token function">getBatteryType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该方法成功构建了_Car_和_ElectricCar_类型的对象。</p><p><strong>有趣的是，我们使用了原始泛型类型_?_来声明内部类_Car.Builder<code>&lt;?&gt;</code><em>和_ElectricCar.Builder<code>&lt;?&gt;</code></em></strong>。这是因为我们需要确保方法调用如_carBuilder.colour()_和_carBuilder.fuelType()<em>返回_Car.Builder_而不是其父_Vehicle.Builder</em>。</p><p>同样，方法调用_ElectricCarBuilder.make()_和_ElectricCarBuilder.model()_应该返回_ElectricCarBuilder_而不是_CarBuilder_类。没有这种方法链是不可能的。</p><h2 id="_5-结论" tabindex="-1"><a class="header-anchor" href="#_5-结论"><span>5. 结论</span></a></h2><p>在本文中，我们讨论了在处理继承时建造者设计模式所面临的挑战。Java泛型和Curiously Recurring Template Pattern帮助我们实现了解决方案。通过这种方式，我们可以使用方法链，而不必担心设置建造者类中属性值的方法调用顺序。</p><p>像往常一样，使用的代码可以在GitHub上找到。</p><p>OK</p>`,44),c=[p];function l(o,i){return a(),s("div",null,c)}const k=n(t,[["render",l],["__file","2024-06-23-Builder Pattern and Inheritance.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-06-23/2024-06-23-Builder%20Pattern%20and%20Inheritance.html","title":"建造者模式与继承","lang":"zh-CN","frontmatter":{"date":"2024-06-24T00:00:00.000Z","category":["Software Engineering"],"tag":["Java","Design Pattern","Builder Pattern"],"head":[["meta",{"name":"keywords","content":"Java, Builder Pattern, Inheritance, Software Design"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-06-23/2024-06-23-Builder%20Pattern%20and%20Inheritance.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"建造者模式与继承"}],["meta",{"property":"og:description","content":"建造者模式与继承 在这个教程中，我们将学习在处理层次继承时实现建造者设计模式所面临的挑战。层次继承的一个例子可能是电动汽车、汽车和车辆之间的继承关系。 建造者模式是一种创建型设计模式，它通过方法链的帮助，以逐步过程简化了构建具有许多属性的复杂对象。虽然继承有助于简化设计，但它也导致了在建造者模式中实现方法链以创建对象时的复杂性。 此外，我们将通过Jav..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-23T17:50:41.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Design Pattern"}],["meta",{"property":"article:tag","content":"Builder Pattern"}],["meta",{"property":"article:published_time","content":"2024-06-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-23T17:50:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"建造者模式与继承\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-24T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-23T17:50:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"建造者模式与继承 在这个教程中，我们将学习在处理层次继承时实现建造者设计模式所面临的挑战。层次继承的一个例子可能是电动汽车、汽车和车辆之间的继承关系。 建造者模式是一种创建型设计模式，它通过方法链的帮助，以逐步过程简化了构建具有许多属性的复杂对象。虽然继承有助于简化设计，但它也导致了在建造者模式中实现方法链以创建对象时的复杂性。 此外，我们将通过Jav..."},"headers":[{"level":2,"title":"2. 问题描述","slug":"_2-问题描述","link":"#_2-问题描述","children":[]},{"level":2,"title":"3. 没有泛型的解决方案","slug":"_3-没有泛型的解决方案","link":"#_3-没有泛型的解决方案","children":[]},{"level":2,"title":"4. 使用泛型的解决方案","slug":"_4-使用泛型的解决方案","link":"#_4-使用泛型的解决方案","children":[]},{"level":2,"title":"5. 结论","slug":"_5-结论","link":"#_5-结论","children":[]}],"git":{"createdTime":1719165041000,"updatedTime":1719165041000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":5.07,"words":1520},"filePathRelative":"posts/baeldung/2024-06-23/2024-06-23-Builder Pattern and Inheritance.md","localizedDate":"2024年6月24日","excerpt":"\\n<p>在这个教程中，我们将学习在处理层次继承时实现建造者设计模式所面临的挑战。层次继承的一个例子可能是电动汽车、汽车和车辆之间的继承关系。</p>\\n<p>建造者模式是一种创建型设计模式，它通过方法链的帮助，以逐步过程简化了构建具有许多属性的复杂对象。虽然继承有助于简化设计，但它也导致了在建造者模式中实现方法链以创建对象时的复杂性。</p>\\n<p>此外，我们将通过Java泛型API的帮助，找到一个高效的实现方法。</p>\\n<h2>2. 问题描述</h2>\\n<p>让我们以在创建_Vehicle_、_Car_和_ElectricCar_类型对象时应用建造者模式为例：</p>\\n<p>在对象层次结构的顶部，有_Vehicle_类。<strong>类_Car_扩展了_Vehicle_，然后_ElectricCar_扩展了_Car_。类似于这些对象，它们的建造者在它们之间也有层次关系。</strong></p>","autoDesc":true}');export{k as comp,d as data};
