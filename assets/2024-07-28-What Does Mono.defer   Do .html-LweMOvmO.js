import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as e}from"./app-BTwZI-W8.js";const t={},p=e('<h1 id="mono-defer-是做什么用的-baeldung" tabindex="-1"><a class="header-anchor" href="#mono-defer-是做什么用的-baeldung"><span>Mono.defer() 是做什么用的？ | Baeldung</span></a></h1><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p>在响应式编程中，我们有多种方法可以创建类型为 <em>Mono</em> 或 <em>Flux</em> 的发布者。在这里，我们将探讨使用 <em>defer</em> 方法来延迟执行 <em>Mono</em> 发布者。</p><h2 id="_2-mono-defer-方法是什么" tabindex="-1"><a class="header-anchor" href="#_2-mono-defer-方法是什么"><span>2. Mono.defer 方法是什么？</span></a></h2><p>我们可以使用 <em>defer</em> 方法创建一个最多产生一个值的冷发布者。让我们看看方法签名：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> ````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>```` <span class="token class-name">Mono</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>```` <span class="token function">defer</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span>``<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>``<span class="token operator">&gt;</span> supplier<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在这里，<em>defer</em> 接受一个 <em>Mono</em> 发布者的 <em>Supplier</em> 并返回该 <em>Mono</em>，当下游订阅时才懒加载地返回。</p><p>然而，问题是，什么是冷发布者或懒发布者？让我们深入研究。</p><p><strong>消费者订阅时，执行线程仅评估冷发布者。</strong> <strong>而热发布者在任何订阅之前就急切地评估。</strong> 我们有 <em>Mono.just()</em> 方法，它提供了一个类型的 <em>Mono</em> 的热发布者。</p><h2 id="_3-它是如何工作的" tabindex="-1"><a class="header-anchor" href="#_3-它是如何工作的"><span>3. 它是如何工作的？</span></a></h2><p>让我们探索一个具有 <em>Mono</em> 类型 <em>Supplier</em> 的示例用例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">Mono</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````````` <span class="token function">sampleMsg</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Call to Retrieve Sample Message!! --&gt; {} at: {}&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，这个方法返回一个热 <em>Mono</em> 发布者。让我们急切地订阅它：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenUsingMonoJust_thenEagerEvaluation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>\n    \n    <span class="token class-name">Mono</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````````` msg <span class="token operator">=</span> <span class="token function">sampleMsg</span><span class="token punctuation">(</span><span class="token string">&quot;Eager Publisher&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Intermediate Test Message....&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    <span class="token class-name">StepVerifier</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">expectNext</span><span class="token punctuation">(</span><span class="token string">&quot;Eager Publisher&quot;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">verifyComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    <span class="token class-name">StepVerifier</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">expectNext</span><span class="token punctuation">(</span><span class="token string">&quot;Eager Publisher&quot;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">verifyComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行时，我们可以看到日志中的以下内容：</p><div class="language-plaintext line-numbers-mode" data-ext="plaintext" data-title="plaintext"><pre class="language-plaintext"><code>20:44:30.250 [main] DEBUG com.baeldung.mono.MonoUnitTest - Call to Retrieve Sample Message!! --&gt; Eager Publisher at: 1622819670247\n20:44:30.365 [main] DEBUG reactor.util.Loggers$LoggerFactory - Using Slf4j logging framework\n20:44:30.365 [main] DEBUG com.baeldung.mono.MonoUnitTest - Intermediate Test Message....\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们可以注意到：</p><ul><li>根据指令序列，主线程急切地执行 <em>sampleMsg</em> 方法。</li><li>在使用 <em>StepVerifier</em> 的两次订阅中，主线程使用 <em>sampleMsg</em> 的相同输出。因此，没有新的评估。</li></ul><p>让我们看看 <em>Mono.defer()</em> 如何将其转换为冷（懒）发布者：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenUsingMonoDefer_thenLazyEvaluation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>\n    \n    <span class="token class-name">Mono</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````````` deferMsg <span class="token operator">=</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">defer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">sampleMsg</span><span class="token punctuation">(</span><span class="token string">&quot;Lazy Publisher&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Intermediate Test Message....&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    <span class="token class-name">StepVerifier</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>deferMsg<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">expectNext</span><span class="token punctuation">(</span><span class="token string">&quot;Lazy Publisher&quot;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">verifyComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    <span class="token class-name">StepVerifier</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>deferMsg<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">expectNext</span><span class="token punctuation">(</span><span class="token string">&quot;Lazy Publisher&quot;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">verifyComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行这个方法时，我们可以看到控制台中的以下日志：</p><div class="language-plaintext line-numbers-mode" data-ext="plaintext" data-title="plaintext"><pre class="language-plaintext"><code>20:01:05.149 [main] DEBUG com.baeldung.mono.MonoUnitTest - Intermediate Test Message....\n20:01:05.187 [main] DEBUG com.baeldung.mono.MonoUnitTest - Call to Retrieve Sample Message!! --&gt; Lazy Publisher at: 1622817065187\n20:01:10.197 [main] DEBUG com.baeldung.mono.MonoUnitTest - Call to Retrieve Sample Message!! --&gt; Lazy Publisher at: 1622817070197\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们可以从日志序列中注意到几点：</p><ul><li><em>StepVerifier</em> 在每次订阅时执行 <em>sampleMsg</em> 方法，而不是在我们定义它时。</li><li>在5秒的延迟之后，第二个订阅 <em>sampleMsg</em> 方法的消费者再次执行它。</li></ul><p>这就是 <em>defer</em> 方法将热发布者转换为冷发布者的方式。</p><h2 id="_4-mono-defer-的使用场景" tabindex="-1"><a class="header-anchor" href="#_4-mono-defer-的使用场景"><span>4. <em>Mono.defer</em> 的使用场景？</span></a></h2><p>让我们看看我们可以在哪里使用 <em>Mono.defer()</em> 方法的可能用例：</p><ul><li>当我们必须有条件地订阅发布者时</li><li>当每个订阅的执行可能产生不同的结果时</li><li><strong><em>deferContextual</em> 可以用于基于当前上下文的发布者评估</strong></li></ul><h3 id="_4-1-示例用法" tabindex="-1"><a class="header-anchor" href="#_4-1-示例用法"><span>4.1. 示例用法</span></a></h3><p>让我们通过一个使用条件 <em>Mono.defer()</em> 方法的示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenEmptyList_thenMonoDeferExecuted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    \n    <span class="token class-name">Mono</span><span class="token operator">&lt;</span><span class="token class-name">List</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>``````````<span class="token operator">&gt;</span> emptyList <span class="token operator">=</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">defer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">monoOfEmptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    <span class="token comment">// 空列表，因此在 switchIfEmpty 中的 Mono 发布者在条件评估后执行</span>\n    <span class="token class-name">Flux</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````````` emptyListElements <span class="token operator">=</span> emptyList<span class="token punctuation">.</span><span class="token function">flatMapIterable</span><span class="token punctuation">(</span>l <span class="token operator">-&gt;</span> l<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">switchIfEmpty</span><span class="token punctuation">(</span><span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">defer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">sampleMsg</span><span class="token punctuation">(</span><span class="token string">&quot;EmptyList&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    <span class="token class-name">StepVerifier</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>emptyListElements<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">expectNext</span><span class="token punctuation">(</span><span class="token string">&quot;EmptyList&quot;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">verifyComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，发布者 <em>sampleMsg</em> 的 <em>Supplier</em> 被放置在 <em>switchIfEmpty</em> 方法中，用于条件执行。因此，仅当它被懒加载订阅时才执行 <em>sampleMsg</em>。</p><p>现在，让我们看看非空列表的相同代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenNonEmptyList_thenMonoDeferNotExecuted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    \n    <span class="token class-name">Mono</span><span class="token operator">&lt;</span><span class="token class-name">List</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>``````````<span class="token operator">&gt;</span> nonEmptyList <span class="token operator">=</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">defer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">monoOfList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    <span class="token comment">// 非空列表，因此在 switchIfEmpty 中的 Mono 发布者不会被评估。</span>\n    <span class="token class-name">Flux</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````````` listElements <span class="token operator">=</span> nonEmptyList<span class="token punctuation">.</span><span class="token function">flatMapIterable</span><span class="token punctuation">(</span>l <span class="token operator">-&gt;</span> l<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">switchIfEmpty</span><span class="token punctuation">(</span><span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">defer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">sampleMsg</span><span class="token punctuation">(</span><span class="token string">&quot;NonEmptyList&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    <span class="token class-name">StepVerifier</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>listElements<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">expectNext</span><span class="token punctuation">(</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;two&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;three&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;four&quot;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">verifyComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，<em>sampleMsg</em> 没有被执行，因为它没有被订阅。</p><h2 id="_5-结论" tabindex="-1"><a class="header-anchor" href="#_5-结论"><span>5. 结论</span></a></h2><p>在本文中，我们讨论了 <em>Mono.defer()</em> 方法和热/冷发布者。此外，我们如何将热发布者转换为冷发布者。最后，我们还讨论了它的工作原理以及示例用例。</p><p>如往常一样，代码示例可在 GitHub 上找到。我已经完成了翻译，以下是翻译的完整内容：</p><hr><p>date: 2023-06-22 category:</p><ul><li>Java</li><li>Reactive Programming tag:</li><li>Mono</li><li>defer</li><li>Reactive Streams head:</li><li><ul><li>meta</li><li>name: keywords content: Java, Reactive Programming, Mono, defer, Reactive Streams</li></ul></li></ul><hr><h1 id="mono-defer-是做什么用的-baeldung-1" tabindex="-1"><a class="header-anchor" href="#mono-defer-是做什么用的-baeldung-1"><span>Mono.defer() 是做什么用的？ | Baeldung</span></a></h1><h2 id="_1-概述-1" tabindex="-1"><a class="header-anchor" href="#_1-概述-1"><span>1. 概述</span></a></h2><p>在响应式编程中，我们有多种方法可以创建类型为 <em>Mono</em> 或 <em>Flux</em> 的发布者。在这里，我们将探讨使用 <em>defer</em> 方法来延迟执行 <em>Mono</em> 发布者。</p><h2 id="_2-mono-defer-方法是什么-1" tabindex="-1"><a class="header-anchor" href="#_2-mono-defer-方法是什么-1"><span>2. Mono.defer 方法是什么？</span></a></h2><p>我们可以使用 <em>defer</em> 方法创建一个最多产生一个值的冷发布者。让我们看看方法签名：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> ````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>```` <span class="token class-name">Mono</span>````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>```` <span class="token function">defer</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span>``<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>``<span class="token operator">&gt;</span> supplier<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在这里，<em>defer</em> 接受一个 <em>Mono</em> 发布者的 <em>Supplier</em> 并返回该 <em>Mono</em>，当下游订阅时才懒加载地返回。</p><p>然而，问题是，什么是冷发布者或懒发布者？让我们深入研究。</p><p><strong>消费者订阅时，执行线程仅评估冷发布者。</strong> <strong>而热发布者在任何订阅之前就急切地评估。</strong> 我们有 <em>Mono.just()</em> 方法，它提供了一个类型的 <em>Mono</em> 的热发布者。</p><h2 id="_3-它是如何工作的-1" tabindex="-1"><a class="header-anchor" href="#_3-它是如何工作的-1"><span>3. 它是如何工作的？</span></a></h2><p>让我们探索一个具有 <em>Mono</em> 类型 <em>Supplier</em> 的示例用例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">Mono</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````````` <span class="token function">sampleMsg</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Call to Retrieve Sample Message!! --&gt; {} at: {}&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，这个方法返回一个热 <em>Mono</em> 发布者。让我们急切地订阅它：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenUsingMonoJust_thenEagerEvaluation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>\n    \n    <span class="token class-name">Mono</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````````` msg <span class="token operator">=</span> <span class="token function">sampleMsg</span><span class="token punctuation">(</span><span class="token string">&quot;Eager Publisher&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Intermediate Test Message....&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    <span class="token class-name">StepVerifier</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">expectNext</span><span class="token punctuation">(</span><span class="token string">&quot;Eager Publisher&quot;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">verifyComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    <span class="token class-name">StepVerifier</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">expectNext</span><span class="token punctuation">(</span><span class="token string">&quot;Eager Publisher&quot;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">verifyComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行时，我们可以看到日志中的以下内容：</p><div class="language-plaintext line-numbers-mode" data-ext="plaintext" data-title="plaintext"><pre class="language-plaintext"><code>20:44:30.250 [main] DEBUG com.baeldung.mono.MonoUnitTest - Call to Retrieve Sample Message!! --&gt; Eager Publisher at: 1622819670247\n20:44:30.365 [main] DEBUG reactor.util.Loggers$LoggerFactory - Using Slf4j logging framework\n20:44:30.365 [main] DEBUG com.baeldung.mono.MonoUnitTest - Intermediate Test Message....\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们可以注意到：</p><ul><li>根据指令序列，主线程急切地执行 <em>sampleMsg</em> 方法。</li><li>在使用 <em>StepVerifier</em> 的两次订阅中，主线程使用 <em>sampleMsg</em> 的相同输出。因此，没有新的评估。</li></ul><p>让我们看看 <em>Mono.defer()</em> 如何将其转换为冷（懒）发布者：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenUsingMonoDefer_thenLazyEvaluation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>\n    \n    <span class="token class-name">Mono</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````````` deferMsg <span class="token operator">=</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">defer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">sampleMsg</span><span class="token punctuation">(</span><span class="token string">&quot;Lazy Publisher&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Intermediate Test Message....&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    <span class="token class-name">StepVerifier</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>deferMsg<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">expectNext</span><span class="token punctuation">(</span><span class="token string">&quot;Lazy Publisher&quot;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">verifyComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    <span class="token class-name">StepVerifier</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>deferMsg<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">expectNext</span><span class="token punctuation">(</span><span class="token string">&quot;Lazy Publisher&quot;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">verifyComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行这个方法时，我们可以看到控制台中的以下日志：</p><div class="language-plaintext line-numbers-mode" data-ext="plaintext" data-title="plaintext"><pre class="language-plaintext"><code>20:01:05.149 [main] DEBUG com.baeldung.mono.MonoUnitTest - Intermediate Test Message....\n20:01:05.187 [main] DEBUG com.baeldung.mono.MonoUnitTest - Call to Retrieve Sample Message!! --&gt; Lazy Publisher at: 1622817065187\n20:01:10.197 [main] DEBUG com.baeldung.mono.MonoUnitTest - Call to Retrieve Sample Message!! --&gt; Lazy Publisher at: 1622817070197\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们可以从日志序列中注意到几点：</p><ul><li><em>StepVerifier</em> 在每次订阅时执行 <em>sampleMsg</em> 方法，而不是在我们定义它时。</li><li>在5秒的延迟之后，第二个订阅 <em>sampleMsg</em> 方法的消费者再次执行它。</li></ul><p>这就是 <em>defer</em> 方法将热发布者转换为冷发布者的方式。</p><h2 id="_4-mono-defer-的使用场景-1" tabindex="-1"><a class="header-anchor" href="#_4-mono-defer-的使用场景-1"><span>4. <em>Mono.defer</em> 的使用场景？</span></a></h2><p>让我们看看我们可以在哪里使用 <em>Mono.defer()</em> 方法的可能用例：</p><ul><li>当我们必须有条件地订阅发布者时</li><li>当每个订阅的执行可能产生不同的结果时</li><li><strong><em>deferContextual</em> 可以用于基于当前上下文的发布者评估</strong></li></ul><h3 id="_4-1-示例用法-1" tabindex="-1"><a class="header-anchor" href="#_4-1-示例用法-1"><span>4.1. 示例用法</span></a></h3><p>让我们通过一个使用条件 <em>Mono.defer()</em> 方法的示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenEmptyList_thenMonoDeferExecuted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    \n    <span class="token class-name">Mono</span><span class="token operator">&lt;</span><span class="token class-name">List</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>``````````<span class="token operator">&gt;</span> emptyList <span class="token operator">=</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">defer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">monoOfEmptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    <span class="token comment">// 空列表，因此在 switchIfEmpty 中的 Mono 发布者在条件评估后执行</span>\n    <span class="token class-name">Flux</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````````` emptyListElements <span class="token operator">=</span> emptyList<span class="token punctuation">.</span><span class="token function">flatMapIterable</span><span class="token punctuation">(</span>l <span class="token operator">-&gt;</span> l<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">switchIfEmpty</span><span class="token punctuation">(</span><span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">defer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">sampleMsg</span><span class="token punctuation">(</span><span class="token string">&quot;EmptyList&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    <span class="token class-name">StepVerifier</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>emptyListElements<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">expectNext</span><span class="token punctuation">(</span><span class="token string">&quot;EmptyList&quot;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">verifyComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，发布者 <em>sampleMsg</em> 的 <em>Supplier</em> 被放置在 <em>switchIfEmpty</em> 方法中，用于条件执行。因此，仅当它被懒加载订阅时才执行 <em>sampleMsg</em>。</p><p>现在，让我们看看非空列表的相同代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenNonEmptyList_thenMonoDeferNotExecuted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    \n    <span class="token class-name">Mono</span><span class="token operator">&lt;</span><span class="token class-name">List</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>``````````<span class="token operator">&gt;</span> nonEmptyList <span class="token operator">=</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">defer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">monoOfList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    <span class="token comment">// 非空列表，因此在 switchIfEmpty 中的 Mono 发布者不会被评估。</span>\n    <span class="token class-name">Flux</span>``````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````````` listElements <span class="token operator">=</span> nonEmptyList<span class="token punctuation">.</span><span class="token function">flatMapIterable</span><span class="token punctuation">(</span>l <span class="token operator">-&gt;</span> l<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">switchIfEmpty</span><span class="token punctuation">(</span><span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">defer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">sampleMsg</span><span class="token punctuation">(</span><span class="token string">&quot;NonEmptyList&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    <span class="token class-name">StepVerifier</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>listElements<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">expectNext</span><span class="token punctuation">(</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;two&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;three&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;four&quot;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">verifyComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，<em>sampleMsg</em> 没有被执行，因为它没有被订阅。</p><h2 id="_5-结论-1" tabindex="-1"><a class="header-anchor" href="#_5-结论-1"><span>5. 结论</span></a></h2><p>在本文中，我们讨论了 <em>Mono.defer()</em> 方法和热/冷发布者。此外，我们如何将热发布者转换为冷发布者。最后，我们还讨论了它的工作原理以及示例用例。</p><p>如往常一样，代码示例可在 GitHub 上找到。</p><p>OK</p>',81),o=[p];function c(l,i){return a(),s("div",null,o)}const k=n(t,[["render",c],["__file","2024-07-28-What Does Mono.defer   Do .html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-28/2024-07-28-What%20Does%20Mono.defer%20%20%20Do%20.html","title":"Mono.defer() 是做什么用的？ | Baeldung","lang":"zh-CN","frontmatter":{"date":"2023-06-22T00:00:00.000Z","category":["Java","Reactive Programming"],"tag":["Mono","defer","Reactive Streams"],"head":[["meta",{"name":"keywords","content":"Java, Reactive Programming, Mono, defer, Reactive Streams"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-28/2024-07-28-What%20Does%20Mono.defer%20%20%20Do%20.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Mono.defer() 是做什么用的？ | Baeldung"}],["meta",{"property":"og:description","content":"Mono.defer() 是做什么用的？ | Baeldung 1. 概述 在响应式编程中，我们有多种方法可以创建类型为 Mono 或 Flux 的发布者。在这里，我们将探讨使用 defer 方法来延迟执行 Mono 发布者。 2. Mono.defer 方法是什么？ 我们可以使用 defer 方法创建一个最多产生一个值的冷发布者。让我们看看方法签名：..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-28T19:04:28.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Mono"}],["meta",{"property":"article:tag","content":"defer"}],["meta",{"property":"article:tag","content":"Reactive Streams"}],["meta",{"property":"article:published_time","content":"2023-06-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-28T19:04:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Mono.defer() 是做什么用的？ | Baeldung\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-28T19:04:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Mono.defer() 是做什么用的？ | Baeldung 1. 概述 在响应式编程中，我们有多种方法可以创建类型为 Mono 或 Flux 的发布者。在这里，我们将探讨使用 defer 方法来延迟执行 Mono 发布者。 2. Mono.defer 方法是什么？ 我们可以使用 defer 方法创建一个最多产生一个值的冷发布者。让我们看看方法签名：..."},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. Mono.defer 方法是什么？","slug":"_2-mono-defer-方法是什么","link":"#_2-mono-defer-方法是什么","children":[]},{"level":2,"title":"3. 它是如何工作的？","slug":"_3-它是如何工作的","link":"#_3-它是如何工作的","children":[]},{"level":2,"title":"4. Mono.defer 的使用场景？","slug":"_4-mono-defer-的使用场景","link":"#_4-mono-defer-的使用场景","children":[{"level":3,"title":"4.1. 示例用法","slug":"_4-1-示例用法","link":"#_4-1-示例用法","children":[]}]},{"level":2,"title":"5. 结论","slug":"_5-结论","link":"#_5-结论","children":[]},{"level":2,"title":"1. 概述","slug":"_1-概述-1","link":"#_1-概述-1","children":[]},{"level":2,"title":"2. Mono.defer 方法是什么？","slug":"_2-mono-defer-方法是什么-1","link":"#_2-mono-defer-方法是什么-1","children":[]},{"level":2,"title":"3. 它是如何工作的？","slug":"_3-它是如何工作的-1","link":"#_3-它是如何工作的-1","children":[]},{"level":2,"title":"4. Mono.defer 的使用场景？","slug":"_4-mono-defer-的使用场景-1","link":"#_4-mono-defer-的使用场景-1","children":[{"level":3,"title":"4.1. 示例用法","slug":"_4-1-示例用法-1","link":"#_4-1-示例用法-1","children":[]}]},{"level":2,"title":"5. 结论","slug":"_5-结论-1","link":"#_5-结论-1","children":[]}],"git":{"createdTime":1722193468000,"updatedTime":1722193468000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":6.78,"words":2035},"filePathRelative":"posts/baeldung/2024-07-28/2024-07-28-What Does Mono.defer   Do .md","localizedDate":"2023年6月22日","excerpt":"\\n<h2>1. 概述</h2>\\n<p>在响应式编程中，我们有多种方法可以创建类型为 <em>Mono</em> 或 <em>Flux</em> 的发布者。在这里，我们将探讨使用 <em>defer</em> 方法来延迟执行 <em>Mono</em> 发布者。</p>\\n<h2>2. Mono.defer 方法是什么？</h2>\\n<p>我们可以使用 <em>defer</em> 方法创建一个最多产生一个值的冷发布者。让我们看看方法签名：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> ````<span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">T</span><span class=\\"token punctuation\\">&gt;</span></span>```` <span class=\\"token class-name\\">Mono</span>````<span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">T</span><span class=\\"token punctuation\\">&gt;</span></span>```` <span class=\\"token function\\">defer</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Supplier</span>``<span class=\\"token operator\\">&lt;</span><span class=\\"token operator\\">?</span> <span class=\\"token keyword\\">extends</span> <span class=\\"token class-name\\">Mono</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token operator\\">?</span> <span class=\\"token keyword\\">extends</span> <span class=\\"token class-name\\">T</span><span class=\\"token punctuation\\">&gt;</span></span>``<span class=\\"token operator\\">&gt;</span> supplier<span class=\\"token punctuation\\">)</span>\\n</code></pre></div>","autoDesc":true}');export{k as comp,d as data};
