import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-DNGMkCCj.js";const p={},o=t('<h1 id="java-8-中使用-stream-api-的-collectors-tomap-与-collectors-groupingby-的比较" tabindex="-1"><a class="header-anchor" href="#java-8-中使用-stream-api-的-collectors-tomap-与-collectors-groupingby-的比较"><span>Java 8 中使用 Stream API 的 Collectors.toMap() 与 Collectors.groupingBy() 的比较</span></a></h1><p>在 Java 编程中，处理集合和流是常见任务，特别是在现代的函数式编程范式中。Java 8 引入了 Stream API，为处理数据集合提供了强大的工具。</p><p>Stream API 中的两个基本的 Collector 是 Collectors.toMap() 和 Collectors.groupingBy()，它们在将 Stream 元素转换为 Map 方面有着不同的目的。</p><p>在本教程中，我们将深入探讨这两种 Collector 的差异，并探索每种 Collector 更适用的场景。</p><h2 id="_2-城市示例" tabindex="-1"><a class="header-anchor" href="#_2-城市示例"><span>2. 城市示例</span></a></h2><p>示例可以帮助我们说明问题。因此，让我们创建一个简单的不可变 POJO 类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">City</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> country<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">City</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> country<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>country <span class="token operator">=</span> country<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// ... 省略了getters, equals(), 和 hashCode()方法</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如上面的代码所示，City 类只有两个属性：城市名称和城市所在的国家。</p><p>由于我们将在示例中使用 Collectors.toMap() 和 Collectors.groupingBy() 作为终端 Stream 操作，让我们创建一些 City 对象来为 Stream 提供数据：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">City</span> <span class="token constant">PARIS</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">City</span><span class="token punctuation">(</span><span class="token string">&quot;Paris&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;France&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">City</span> <span class="token constant">BERLIN</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">City</span><span class="token punctuation">(</span><span class="token string">&quot;Berlin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Germany&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">City</span> <span class="token constant">TOKYO</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">City</span><span class="token punctuation">(</span><span class="token string">&quot;Tokyo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Japan&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们可以轻松地从这些 City 实例创建一个 Stream：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token constant">PARIS</span><span class="token punctuation">,</span> <span class="token constant">BERLIN</span><span class="token punctuation">,</span> <span class="token constant">TOKYO</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来，我们将使用 Collectors.toMap() 和 Collectors.groupingBy() 将 City 实例的 Stream 转换为 Map，并讨论这两种 Collector 的差异。</p><p>为了简单起见，我们将在教程中使用 &quot;toMap()&quot; 和 &quot;groupingBy()&quot; 来引用这两种 Collector，并使用单元测试断言来验证转换是否产生了预期的结果。</p><h2 id="_3-以-city-country-作为键" tabindex="-1"><a class="header-anchor" href="#_3-以-city-country-作为键"><span>3. 以 City.country 作为键</span></a></h2><p>首先，让我们探索 toMap() 和 groupingBy() Collector 的基本用法。我们将使用这两种 Collector 来转换 Stream。在转换后的 Map 结果中，我们将每个 City 的 country 作为键。</p><p>此外，键也可以是 null。因此，让我们创建一个 country 为 null 的 City：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">City</span> <span class="token constant">COUNTRY_NULL</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">City</span><span class="token punctuation">(</span><span class="token string">&quot;Unknown&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-1-使用-tomap-collector" tabindex="-1"><a class="header-anchor" href="#_3-1-使用-tomap-collector"><span>3.1. 使用 toMap() Collector</span></a></h3><p>toMap() 允许我们定义如何从输入 Stream 中的元素映射键和值。我们可以将 keyMapper 和 valueMapper 参数传递给 toMap() 方法。这两个参数都是函数，提供结果 Map 中的键和值。</p><p>如果我们希望 City 实例本身是结果中的值，并且想要得到一个 Map<code>&lt;String, City&gt;</code>，<strong>我们可以使用 Function.identity() 作为 valueMapper</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Map</span>```````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">City</span><span class="token punctuation">&gt;</span></span>``````` result <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token constant">PARIS</span><span class="token punctuation">,</span> <span class="token constant">BERLIN</span><span class="token punctuation">,</span> <span class="token constant">TOKYO</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">City</span><span class="token operator">::</span><span class="token function">getCountry</span><span class="token punctuation">,</span> <span class="token class-name">Function</span><span class="token punctuation">.</span><span class="token function">identity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">Map</span>```````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">City</span><span class="token punctuation">&gt;</span></span>``````` expected <span class="token operator">=</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>\n  <span class="token string">&quot;France&quot;</span><span class="token punctuation">,</span> <span class="token constant">PARIS</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;Germany&quot;</span><span class="token punctuation">,</span> <span class="token constant">BERLIN</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;Japan&quot;</span><span class="token punctuation">,</span> <span class="token constant">TOKYO</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">assertEquals</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，<strong>toMap() 即使 keyMapper 函数返回 null 也按预期工作</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Map</span>```````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">City</span><span class="token punctuation">&gt;</span></span>``````` result <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token constant">PARIS</span><span class="token punctuation">,</span> <span class="token constant">COUNTRY_NULL</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">City</span><span class="token operator">::</span><span class="token function">getCountry</span><span class="token punctuation">,</span> <span class="token class-name">Function</span><span class="token punctuation">.</span><span class="token function">identity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">Map</span>```````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">City</span><span class="token punctuation">&gt;</span></span>``````` expected <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span>```````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">City</span><span class="token punctuation">&gt;</span></span>```````<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>\n    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;France&quot;</span><span class="token punctuation">,</span> <span class="token constant">PARIS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token constant">COUNTRY_NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token function">assertEquals</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-使用-groupingby-collector" tabindex="-1"><a class="header-anchor" href="#_3-2-使用-groupingby-collector"><span>3.2. 使用 groupingBy() Collector</span></a></h3><p><strong>groupingBy() Collector 擅长根据指定的分类器函数将 Stream 元素分隔成组</strong>。因此，结果 Map 中的值类型是一个 Collection。默认情况下，它是 List。</p><p>接下来，让我们按 City.country 对我们的 Stream 进行分组：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Map</span>````<span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">City</span><span class="token punctuation">&gt;</span></span>````<span class="token operator">&gt;</span> result <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token constant">PARIS</span><span class="token punctuation">,</span> <span class="token constant">BERLIN</span><span class="token punctuation">,</span> <span class="token constant">TOKYO</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">City</span><span class="token operator">::</span><span class="token function">getCountry</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">Map</span>````<span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">City</span><span class="token punctuation">&gt;</span></span>````<span class="token operator">&gt;</span> expected <span class="token operator">=</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>\n  <span class="token string">&quot;France&quot;</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token constant">PARIS</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;Germany&quot;</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token constant">BERLIN</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;Japan&quot;</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token constant">TOKYO</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">assertEquals</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与 toMap() 不同，<strong>groupingBy() 不能处理 null 作为分类器</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">assertThrows</span><span class="token punctuation">(</span><span class="token class-name">NullPointerException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token constant">PARIS</span><span class="token punctuation">,</span> <span class="token constant">COUNTRY_NULL</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">City</span><span class="token operator">::</span><span class="token function">getCountry</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>正如示例所示，<strong>当分类器函数返回 null 时，它抛出 NullPointerException</strong>。</p><p>我们已经通过示例探索了两种 Collector 的基本用法。然而，在我们的 Stream 中，City 实例之间没有重复的国家。在现实世界项目中，处理键冲突可能是我们需要解决的常见场景。</p><p>接下来，让我们看看这两种 Collector 如何处理重复键。</p><h2 id="_4-当出现重复键时" tabindex="-1"><a class="header-anchor" href="#_4-当出现重复键时"><span>4. 当出现重复键时</span></a></h2><p>让我们创建三个额外的城市：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">City</span> <span class="token constant">NICE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">City</span><span class="token punctuation">(</span><span class="token string">&quot;Nice&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;France&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">City</span> <span class="token constant">AACHEN</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">City</span><span class="token punctuation">(</span><span class="token string">&quot;Aachen&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Germany&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">City</span> <span class="token constant">HAMBURG</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">City</span><span class="token punctuation">(</span><span class="token string">&quot;Hamburg&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Germany&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与之前生成的 City 实例一起，我们现在有具有重复国家的城市。例如，BERLIN、HAMBURG 和 AACHEN 有相同的国家：&quot;Germany&quot;。</p><p>接下来，让我们探索 toMap() 和 groupingBy() Collector 如何处理重复键。</p><h3 id="_4-1-使用-tomap-collector" tabindex="-1"><a class="header-anchor" href="#_4-1-使用-tomap-collector"><span>4.1. 使用 toMap() Collector</span></a></h3><p>如果我们继续使用之前的方法，<strong>只传递 keyMapper 和 valueMapper 给 toMap() Collector，由于存在重复键，会抛出 IllegalStateException</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">assertThrows</span><span class="token punctuation">(</span><span class="token class-name">IllegalStateException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token constant">PARIS</span><span class="token punctuation">,</span> <span class="token constant">BERLIN</span><span class="token punctuation">,</span> <span class="token constant">TOKYO</span><span class="token punctuation">,</span> <span class="token constant">NICE</span><span class="token punctuation">,</span> <span class="token constant">HAMBURG</span><span class="token punctuation">,</span> <span class="token constant">AACHEN</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">City</span><span class="token operator">::</span><span class="token function">getCountry</span><span class="token punctuation">,</span> <span class="token class-name">Function</span><span class="token punctuation">.</span><span class="token function">identity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当可能出现重复键时，需要<strong>提供 toMap() 的第三个参数 mergeFunction 来解决与同一键关联的值之间的冲突</strong>。</p><p>接下来，让我们提供一个 lambda 表达式作为 toMap() 的 mergeFunction，它<strong>在选择城市名称按字典顺序比较时选择“较小”的 City，当它们的国家相同</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Map</span>```````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">City</span><span class="token punctuation">&gt;</span></span>``````` result <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token constant">PARIS</span><span class="token punctuation">,</span> <span class="token constant">BERLIN</span><span class="token punctuation">,</span> <span class="token constant">TOKYO</span><span class="token punctuation">,</span> <span class="token constant">NICE</span><span class="token punctuation">,</span> <span class="token constant">HAMBURG</span><span class="token punctuation">,</span> <span class="token constant">AACHEN</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">City</span><span class="token operator">::</span><span class="token function">getCountry</span><span class="token punctuation">,</span> <span class="token class-name">Function</span><span class="token punctuation">.</span><span class="token function">identity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span>\n    c1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>c2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> c1 <span class="token operator">:</span> c2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">Map</span>```````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">City</span><span class="token punctuation">&gt;</span></span>``````` expected <span class="token operator">=</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>\n  <span class="token string">&quot;France&quot;</span><span class="token punctuation">,</span> <span class="token constant">NICE</span><span class="token punctuation">,</span> <span class="token comment">// &lt;-- 来自 Paris 和 Nice</span>\n  <span class="token string">&quot;Germany&quot;</span><span class="token punctuation">,</span> <span class="token constant">AACHEN</span><span class="token punctuation">,</span> <span class="token comment">// &lt;-- 来自 Berlin, Hamburg 和 Aachen</span>\n  <span class="token string">&quot;Japan&quot;</span><span class="token punctuation">,</span> <span class="token constant">TOKYO</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">assertEquals</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如上述示例所示，mergeFunction 根据给定的规则返回一个 City 实例。因此，在调用 collect() 方法后，我们仍然获得一个 Map<code>&lt;String, City&gt;</code> 作为结果。</p><h3 id="_4-2-使用-groupingby-collector" tabindex="-1"><a class="header-anchor" href="#_4-2-使用-groupingby-collector"><span>4.2. 使用 groupingBy() Collector</span></a></h3><p>另一方面，由于 groupingBy() 使用分类器将 Stream 元素分组到 Collection 中，<strong>尽管输入 Stream 中的城市有相同的国家值，之前的代码仍然有效</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Map</span>````<span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">City</span><span class="token punctuation">&gt;</span></span>````<span class="token operator">&gt;</span> result <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token constant">PARIS</span><span class="token punctuation">,</span> <span class="token constant">BERLIN</span><span class="token punctuation">,</span> <span class="token constant">TOKYO</span><span class="token punctuation">,</span> <span class="token constant">NICE</span><span class="token punctuation">,</span> <span class="token constant">HAMBURG</span><span class="token punctuation">,</span> <span class="token constant">AACHEN</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">City</span><span class="token operator">::</span><span class="token function">getCountry</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">Map</span>````<span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">City</span><span class="token punctuation">&gt;</span></span>````<span class="token operator">&gt;</span> expected <span class="token operator">=</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>\n  <span class="token string">&quot;France&quot;</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token constant">PARIS</span><span class="token punctuation">,</span> <span class="token constant">NICE</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;Germany&quot;</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token constant">BERLIN</span><span class="token punctuation">,</span> <span class="token constant">HAMBURG</span><span class="token punctuation">,</span> <span class="token constant">AACHEN</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;Japan&quot;</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token constant">TOKYO</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">assertEquals</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如我们所看到的，<strong>具有相同国家名称的城市被分组到同一个 List 中</strong>，这可以从结果中的 &quot;France&quot; 和 &quot;Germany&quot; 条目中看出。</p><h2 id="_5-使用值映射器" tabindex="-1"><a class="header-anchor" href="#_5-使用值映射器"><span>5. 使用值映射器</span></a></h2><p>到目前为止，我们已经使用 toMap() 和 groupingBy() Collector 获得了 country -&gt; City 或 country -&gt; City 实例集合的关联。</p><p>然而，有时我们可能需要将 Stream 元素映射到不同的值。例如，我们可能希望获得 country -&gt; City.name 或 country -&gt; City.name 值集合的关联。</p><p>此外，重要的是要注意映射的值可以是 null。因此，我们可能需要处理值为 null 的情况。让我们创建一个名称为 null 的 City：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">City</span> <span class="token constant">FRANCE_NULL</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">City</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;France&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来，让我们探索如何将值映射器应用于 toMap() 和 groupingBy() Collector。</p><h3 id="_5-1-使用-tomap-collector" tabindex="-1"><a class="header-anchor" href="#_5-1-使用-tomap-collector"><span>5.1. 使用 toMap() Collector</span></a></h3><p>正如我们之前提到的，<strong>我们可以将 valueMapper 函数作为第二个参数传递给 toMap() 方法，允许我们将输入 Stream 中的对象映射到不同的值</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">MapString</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token operator">&gt;</span> result <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token constant">PARIS</span><span class="token punctuation">,</span> <span class="token constant">BERLIN</span><span class="token punctuation">,</span> <span class="token constant">TOKYO</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">City</span><span class="token operator">::</span><span class="token function">getCountry</span><span class="token punctuation">,</span> <span class="token class-name">City</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">Map</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>` expected <span class="token operator">=</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>\n  <span class="token string">&quot;France&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Paris&quot;</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;Germany&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Berlin&quot;</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;Japan&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Tokyo&quot;</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">assertEquals</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<strong>我们使用方法引用 City::getName 作为 valueMapper 参数，将 City 映射到它的名称</strong>。</p><p>然而，当映射的值包含 null 时，toMap() 遇到问题：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">assertThrows</span><span class="token punctuation">(</span><span class="token class-name">NullPointerException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token constant">PARIS</span><span class="token punctuation">,</span> <span class="token constant">FRANCE_NULL</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">City</span><span class="token operator">::</span><span class="token function">getCountry</span><span class="token punctuation">,</span> <span class="token class-name">City</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>正如我们所看到的，<strong>如果映射的值包含 null，toMap() 抛出 NullPointerException</strong>。</p><h3 id="_5-2-使用-groupingby-collector" tabindex="-1"><a class="header-anchor" href="#_5-2-使用-groupingby-collector"><span>5.2. 使用 groupingBy() Collector</span></a></h3><p>与 toMap() 不同，<strong>groupingBy() 并不直接支持 valueMapper 函数作为其参数</strong>。然而，我们可以<strong>将另一个 Collector 作为第二个参数提供给 groupingBy()，允许我们执行下游的归约操作</strong>。例如，我们可以使用 mapping() Collector 将分组的 City 实例映射到它们的名称：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Map</span>````<span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>````<span class="token operator">&gt;</span> result <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token constant">PARIS</span><span class="token punctuation">,</span> <span class="token constant">BERLIN</span><span class="token punctuation">,</span> <span class="token constant">TOKYO</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">City</span><span class="token operator">::</span><span class="token function">getCountry</span><span class="token punctuation">,</span> <span class="token function">mapping</span><span class="token punctuation">(</span><span class="token class-name">City</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">,</span> <span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">Map</span>````<span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>````<span class="token operator">&gt;</span> expected <span class="token operator">=</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>\n  <span class="token string">&quot;France&quot;</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;Paris&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;Germany&quot;</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;Berlin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;Japan&quot;</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;Tokyo&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">assertEquals</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，<strong>groupingBy() 和 mapping() 的组合可以无缝处理 null 值</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Map</span>````<span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>````<span class="token operator">&gt;</span> resultWithNull <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token constant">PARIS</span><span class="token punctuation">,</span> <span class="token constant">BERLIN</span><span class="token punctuation">,</span> <span class="token constant">TOKYO</span><span class="token punctuation">,</span> <span class="token constant">FRANCE_NULL</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">City</span><span class="token operator">::</span><span class="token function">getCountry</span><span class="token punctuation">,</span> <span class="token function">mapping</span><span class="token punctuation">(</span><span class="token class-name">City</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">,</span> <span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">Map</span>````<span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>````<span class="token operator">&gt;</span> expectedWithNull <span class="token operator">=</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>\n  <span class="token string">&quot;France&quot;</span><span class="token punctuation">,</span> <span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">&quot;Paris&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;Germany&quot;</span><span class="token punctuation">,</span> <span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">&quot;Berlin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;Japan&quot;</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;Tokyo&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">assertEquals</span><span class="token punctuation">(</span>expectedWithNull<span class="token punctuation">,</span> resultWithNull<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-结论" tabindex="-1"><a class="header-anchor" href="#_6-结论"><span>6. 结论</span></a></h2><p>正如我们在本文中所看到的，Collectors.toMap() 和 Collectors.groupingBy() 是功能强大的 Collector，每种都服务于不同的目的。</p><p><strong>toMap() 适合将 Stream 直接转换为 Map，而 groupingBy() 擅长根据某些标准将 Stream 元素分类到组中</strong>。</p><p>此外，toMap() 即使 keyMapper 函数返回 null 也能正常工作。但是，<strong>如果分类器函数返回 null，groupingBy() 会抛出 NullPointerException</strong>。</p><p>由于 toMap() 支持 valueMapper 参数，它非常方便地将值映射到所需的类型。然而，重要的是要注意，<strong>如果 valueMapper 函数返回 null，toMap() 会抛出 NullPointerException</strong>。相比之下，<strong>groupingBy() 依赖其他 Collector 将 Stream 元素映射到不同类型，并且它有效地处理 null 值</strong>。</p><p>通过理解它们的差异和用例，我们可以有效地在 Java 应用程序中使用这些 Collector 来操作和处理数据流。</p><p>如常，示例的完整源代码可在 GitHub 上获取。</p><p>文章发布后 30 天内开放评论。对于此日期之后的任何问题，请使用网站上的联系表单。</p><p>OK</p>',76),e=[o];function c(l,u){return a(),s("div",null,e)}const r=n(p,[["render",c],["__file","Collecting into Map using Collectors.toMap   vs Collectors.groupingBy  .html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/Archive/Collecting%20into%20Map%20using%20Collectors.toMap%20%20%20vs%20Collectors.groupingBy%20%20.html","title":"Java 8 中使用 Stream API 的 Collectors.toMap() 与 Collectors.groupingBy() 的比较","lang":"zh-CN","frontmatter":{"date":"2024-06-16T00:00:00.000Z","category":["Java","编程"],"tag":["Java 8","Stream API","Collectors"],"description":"Java 8 中使用 Stream API 的 Collectors.toMap() 与 Collectors.groupingBy() 的比较 在 Java 编程中，处理集合和流是常见任务，特别是在现代的函数式编程范式中。Java 8 引入了 Stream API，为处理数据集合提供了强大的工具。 Stream API 中的两个基本的 Collect...","head":[["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/Archive/Collecting%20into%20Map%20using%20Collectors.toMap%20%20%20vs%20Collectors.groupingBy%20%20.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Java 8 中使用 Stream API 的 Collectors.toMap() 与 Collectors.groupingBy() 的比较"}],["meta",{"property":"og:description","content":"Java 8 中使用 Stream API 的 Collectors.toMap() 与 Collectors.groupingBy() 的比较 在 Java 编程中，处理集合和流是常见任务，特别是在现代的函数式编程范式中。Java 8 引入了 Stream API，为处理数据集合提供了强大的工具。 Stream API 中的两个基本的 Collect..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-21T09:54:56.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java 8"}],["meta",{"property":"article:tag","content":"Stream API"}],["meta",{"property":"article:tag","content":"Collectors"}],["meta",{"property":"article:published_time","content":"2024-06-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-21T09:54:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 8 中使用 Stream API 的 Collectors.toMap() 与 Collectors.groupingBy() 的比较\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-16T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-21T09:54:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]]},"headers":[{"level":2,"title":"2. 城市示例","slug":"_2-城市示例","link":"#_2-城市示例","children":[]},{"level":2,"title":"3. 以 City.country 作为键","slug":"_3-以-city-country-作为键","link":"#_3-以-city-country-作为键","children":[{"level":3,"title":"3.1. 使用 toMap() Collector","slug":"_3-1-使用-tomap-collector","link":"#_3-1-使用-tomap-collector","children":[]},{"level":3,"title":"3.2. 使用 groupingBy() Collector","slug":"_3-2-使用-groupingby-collector","link":"#_3-2-使用-groupingby-collector","children":[]}]},{"level":2,"title":"4. 当出现重复键时","slug":"_4-当出现重复键时","link":"#_4-当出现重复键时","children":[{"level":3,"title":"4.1. 使用 toMap() Collector","slug":"_4-1-使用-tomap-collector","link":"#_4-1-使用-tomap-collector","children":[]},{"level":3,"title":"4.2. 使用 groupingBy() Collector","slug":"_4-2-使用-groupingby-collector","link":"#_4-2-使用-groupingby-collector","children":[]}]},{"level":2,"title":"5. 使用值映射器","slug":"_5-使用值映射器","link":"#_5-使用值映射器","children":[{"level":3,"title":"5.1. 使用 toMap() Collector","slug":"_5-1-使用-tomap-collector","link":"#_5-1-使用-tomap-collector","children":[]},{"level":3,"title":"5.2. 使用 groupingBy() Collector","slug":"_5-2-使用-groupingby-collector","link":"#_5-2-使用-groupingby-collector","children":[]}]},{"level":2,"title":"6. 结论","slug":"_6-结论","link":"#_6-结论","children":[]}],"git":{"createdTime":1718963696000,"updatedTime":1718963696000,"contributors":[{"name":"Lance Li","email":"lance.jx.li@gtomato.com","commits":1}]},"readingTime":{"minutes":7.1,"words":2131},"filePathRelative":"posts/baeldung/Archive/Collecting into Map using Collectors.toMap   vs Collectors.groupingBy  .md","localizedDate":"2024年6月16日","excerpt":"\\n<p>在 Java 编程中，处理集合和流是常见任务，特别是在现代的函数式编程范式中。Java 8 引入了 Stream API，为处理数据集合提供了强大的工具。</p>\\n<p>Stream API 中的两个基本的 Collector 是 Collectors.toMap() 和 Collectors.groupingBy()，它们在将 Stream 元素转换为 Map 方面有着不同的目的。</p>\\n<p>在本教程中，我们将深入探讨这两种 Collector 的差异，并探索每种 Collector 更适用的场景。</p>\\n<h2>2. 城市示例</h2>\\n<p>示例可以帮助我们说明问题。因此，让我们创建一个简单的不可变 POJO 类：</p>","autoDesc":true}');export{r as comp,d as data};
