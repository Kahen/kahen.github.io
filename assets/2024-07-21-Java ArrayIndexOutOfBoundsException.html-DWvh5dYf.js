import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as e}from"./app-DpDzgwdT.js";const t={},o=e(`<h1 id="java中的arrayindexoutofboundsexception" tabindex="-1"><a class="header-anchor" href="#java中的arrayindexoutofboundsexception"><span>Java中的ArrayIndexOutOfBoundsException</span></a></h1><p>在本教程中，我们将讨论Java中的_ArrayIndexOutOfBoundsException_。我们将理解它为何发生以及如何避免它。</p><h2 id="何时会发生-arrayindexoutofboundsexception" tabindex="-1"><a class="header-anchor" href="#何时会发生-arrayindexoutofboundsexception"><span>何时会发生_ArrayIndexOutOfBoundsException_？</span></a></h2><p>正如我们所知，在Java中，数组是一个静态数据结构，我们在创建时定义其大小。</p><p>我们使用索引来访问数组的元素。数组的索引从零开始，且永远不能大于或等于数组的大小。</p><p>简而言之，<strong>经验法则是0 \`&lt;= index &lt; (数组大小)</strong>。</p><p><strong>当我们使用无效的索引访问数组或由数组支持的_Collection_时，就会发生_ArrayIndexOutOfBoundsException_</strong>。这意味着索引要么小于零，要么大于或等于数组的大小。</p><p>此外，边界检查发生在运行时。因此，_ArrayIndexOutOfBoundsException_是一个运行时异常。因此，我们在访问数组的边界元素时需要格外小心。</p><p>让我们了解一些导致_ArrayIndexOutOfBoundsException_的常见操作。</p><h3 id="_2-1-访问数组" tabindex="-1"><a class="header-anchor" href="#_2-1-访问数组"><span>2.1. 访问数组</span></a></h3><p>在访问数组时可能发生的最常见错误是忘记了上下限。</p><p>数组的下界始终是0，而上界是其长度减一。</p><p><strong>超出这些界限访问数组元素将抛出_ArrayIndexOutOfBoundsException_</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> lastNumber <span class="token operator">=</span> numbers<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，数组的大小是5，这意味着索引将从0到4的范围。</p><p>在这种情况下，访问第5个索引会导致一个_ArrayIndexOutOfBoundsException_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Exception</span> in thread <span class="token string">&quot;main&quot;</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>ArrayIndexOutOfBoundsException</span><span class="token operator">:</span> <span class="token class-name">Index</span> <span class="token number">5</span> out of bounds <span class="token keyword">for</span> length <span class="token number">5</span>
    at <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>同样，如果我们将小于零的值作为索引传递给_numbers_，我们会得到类似的结果。</p><h3 id="_2-2-访问由-arrays-aslist-返回的-list" tabindex="-1"><a class="header-anchor" href="#_2-2-访问由-arrays-aslist-返回的-list"><span>2.2. 访问由_Arrays.asList()<em>返回的_List</em></span></a></h3><p>静态方法_Arrays.asList()_返回一个固定大小的列表，由指定的数组支持。此外，它作为数组基础和集合基础API之间的桥梁。</p><p>这个返回的_List_有基于索引访问其元素的方法。同样，像数组一样，索引从零开始，范围到其大小减一。</p><p><strong>如果我们尝试访问由_Arrays.asList()<em>返回的_List_的元素超出这个范围，我们将得到一个_ArrayIndexOutOfBoundsException</em></strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>\` numbersList <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> lastNumber <span class="token operator">=</span> numbersList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>同样，我们再次尝试获取_List_的最后一个元素。最后一个元素的位置是5，但其索引是4（大小 - 1）。因此，我们得到如下的_ArrayIndexOutOfBoundsException_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Exception</span> in thread <span class="token string">&quot;main&quot;</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>ArrayIndexOutOfBoundsException</span><span class="token operator">:</span> <span class="token class-name">Index</span> <span class="token number">5</span> out of bounds <span class="token keyword">for</span> length <span class="token number">5</span>
    at java<span class="token punctuation">.</span>base<span class="token operator">/</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Arrays</span>$<span class="token class-name">ArrayList</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">4351</span><span class="token punctuation">)</span>
    at  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样，如果我们传递一个负索引，比如-1，我们会得到类似的结果。</p><h3 id="_2-3-循环中的迭代" tabindex="-1"><a class="header-anchor" href="#_2-3-循环中的迭代"><span>2.3. 循环中的迭代</span></a></h3><p><strong>有时，在for循环中迭代数组时，我们可能会放置一个错误的终止表达式。</strong></p><p>不是在数组长度减一的地方终止索引，我们可能会迭代到其长度：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i \`<span class="token operator">&lt;=</span> numbers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    sum <span class="token operator">+=</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的终止表达式中，循环变量_i_被比较为小于或等于现有数组_numbers_的长度。因此，在最后一次迭代中，_i_的值将变为5。</p><p>由于索引5超出了_numbers_的范围，它将再次导致_ArrayIndexOutOfBoundsException_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Exception</span> in thread <span class="token string">&quot;main&quot;</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>ArrayIndexOutOfBoundsException</span><span class="token operator">:</span> <span class="token class-name">Index</span> <span class="token number">5</span> out of bounds <span class="token keyword">for</span> length <span class="token number">5</span>
    at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>baeldung<span class="token punctuation">.</span>concatenate<span class="token punctuation">.</span></span>IndexOutOfBoundExceptionExamples</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">IndexOutOfBoundExceptionExamples</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">22</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="如何避免-arrayindexoutofboundsexception" tabindex="-1"><a class="header-anchor" href="#如何避免-arrayindexoutofboundsexception"><span>如何避免_ArrayIndexOutOfBoundsException_？</span></a></h2><p>现在让我们了解一些避免_ArrayIndexOutOfBoundsException_的方法。</p><h3 id="_3-1-记住起始索引" tabindex="-1"><a class="header-anchor" href="#_3-1-记住起始索引"><span>3.1. 记住起始索引</span></a></h3><p><strong>我们必须始终记住Java中的数组索引从0开始</strong>。因此，第一个元素总是在索引0处，而最后一个元素在数组长度减一的索引处。</p><p>记住这个规则将帮助我们大多数时候避免_ArrayIndexOutOfBoundsException_。</p><h3 id="_3-2-在循环中正确使用运算符" tabindex="-1"><a class="header-anchor" href="#_3-2-在循环中正确使用运算符"><span>3.2. 在循环中正确使用运算符</span></a></h3><p><strong>如果循环变量初始化为1，可能会导致_ArrayIndexOutOfBoundsException_</strong>。</p><p><strong>同样，在循环的终止表达式中错误使用运算符&lt;, &lt;=, &gt;\`或&gt;=是发生此异常的常见原因</strong>。</p><p>我们应该正确确定这些运算符在循环中的使用。</p><h3 id="_3-3-使用增强的-for-循环" tabindex="-1"><a class="header-anchor" href="#_3-3-使用增强的-for-循环"><span>3.3. 使用增强的_for_循环</span></a></h3><p>如果我们的应用程序运行在Java 1.5或更高版本，我们应该使用增强的_for_循环语句，它专门开发用于迭代集合和数组。此外，它使我们的循环更加简洁易读。</p><p><strong>此外，使用增强的_for_循环有助于我们完全避免_ArrayIndexOutOfBoundsException_，因为它不涉及索引变量</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> number <span class="token operator">:</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    sum <span class="token operator">+=</span> number<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们不必担心索引。增强的_for_循环在每次迭代中拾取一个元素并将其分配给循环变量_number_。因此，它完全避免了_ArrayIndexOutOfBoundsException_。</p><h2 id="indexoutofboundsexception-与-arrayindexoutofboundsexception" tabindex="-1"><a class="header-anchor" href="#indexoutofboundsexception-与-arrayindexoutofboundsexception"><span><em>IndexOutOfBoundsException_与_ArrayIndexOutOfBoundsException</em></span></a></h2><p>_IndexOutOfBoundsException_发生在我们尝试访问某种类型（<em>String</em>, 数组, _List_等）的索引超出其范围时。它是_ArrayIndexOutOfBoundsException_和_StringIndexOutOfBoundsException_的超类。</p><p>与_ArrayIndexOutOfBoundsException_类似，当我们尝试使用超出其长度的索引访问_String_中的字符时，会抛出_StringIndexOutOfBoundsException_。</p><h2 id="结论" tabindex="-1"><a class="header-anchor" href="#结论"><span>结论</span></a></h2><p>在本文中，我们探讨了_ArrayIndexOutOfBoundsException_，一些它发生的例子，以及一些常见的避免技术。</p><p>如往常一样，所有这些示例的源代码都可以在GitHub上找到。抱歉，上文翻译中缺少了一部分内容，我将继续翻译剩余部分。</p><h2 id="_4-indexoutofboundsexception-与-arrayindexoutofboundsexception" tabindex="-1"><a class="header-anchor" href="#_4-indexoutofboundsexception-与-arrayindexoutofboundsexception"><span>4. <em>IndexOutOfBoundsException_与_ArrayIndexOutOfBoundsException</em></span></a></h2><p><em>IndexOutOfBoundsException</em> 发生在我们尝试访问某种类型（如 <em>String</em>、数组、<em>List</em> 等）的索引超出其范围时。它是 <em>ArrayIndexOutOfBoundsException</em> 和 <em>StringIndexOutOfBoundsException</em> 的超类。</p><p>与 <em>ArrayIndexOutOfBoundsException</em> 类似，<em>StringIndexOutOfBoundsException</em> 会在我们尝试使用超出字符串长度的索引来访问 <em>String</em> 中的字符时抛出。</p><h2 id="结论-1" tabindex="-1"><a class="header-anchor" href="#结论-1"><span>结论</span></a></h2><p>在本文中，我们探讨了 <em>ArrayIndexOutOfBoundsException</em>，一些它发生的例子，以及一些常见的避免技术。</p><p>如往常一样，所有这些示例的源代码都可以在 GitHub 上找到。</p><hr><p>OK</p>`,61),p=[o];function c(i,r){return s(),a("div",null,p)}const d=n(t,[["render",c],["__file","2024-07-21-Java ArrayIndexOutOfBoundsException.html.vue"]]),x=JSON.parse('{"path":"/posts/baeldung/2024-07-21/2024-07-21-Java%20ArrayIndexOutOfBoundsException.html","title":"Java中的ArrayIndexOutOfBoundsException","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","Exception Handling"],"tag":["Java","ArrayIndexOutOfBoundsException"],"head":[["meta",{"name":"keywords","content":"Java, ArrayIndexOutOfBoundsException, Exception Handling"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-21/2024-07-21-Java%20ArrayIndexOutOfBoundsException.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Java中的ArrayIndexOutOfBoundsException"}],["meta",{"property":"og:description","content":"Java中的ArrayIndexOutOfBoundsException 在本教程中，我们将讨论Java中的_ArrayIndexOutOfBoundsException_。我们将理解它为何发生以及如何避免它。 何时会发生_ArrayIndexOutOfBoundsException_？ 正如我们所知，在Java中，数组是一个静态数据结构，我们在创建时..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-21T23:13:46.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"ArrayIndexOutOfBoundsException"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-21T23:13:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java中的ArrayIndexOutOfBoundsException\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-21T23:13:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Java中的ArrayIndexOutOfBoundsException 在本教程中，我们将讨论Java中的_ArrayIndexOutOfBoundsException_。我们将理解它为何发生以及如何避免它。 何时会发生_ArrayIndexOutOfBoundsException_？ 正如我们所知，在Java中，数组是一个静态数据结构，我们在创建时..."},"headers":[{"level":2,"title":"何时会发生_ArrayIndexOutOfBoundsException_？","slug":"何时会发生-arrayindexoutofboundsexception","link":"#何时会发生-arrayindexoutofboundsexception","children":[{"level":3,"title":"2.1. 访问数组","slug":"_2-1-访问数组","link":"#_2-1-访问数组","children":[]},{"level":3,"title":"2.2. 访问由_Arrays.asList()返回的_List","slug":"_2-2-访问由-arrays-aslist-返回的-list","link":"#_2-2-访问由-arrays-aslist-返回的-list","children":[]},{"level":3,"title":"2.3. 循环中的迭代","slug":"_2-3-循环中的迭代","link":"#_2-3-循环中的迭代","children":[]}]},{"level":2,"title":"如何避免_ArrayIndexOutOfBoundsException_？","slug":"如何避免-arrayindexoutofboundsexception","link":"#如何避免-arrayindexoutofboundsexception","children":[{"level":3,"title":"3.1. 记住起始索引","slug":"_3-1-记住起始索引","link":"#_3-1-记住起始索引","children":[]},{"level":3,"title":"3.2. 在循环中正确使用运算符","slug":"_3-2-在循环中正确使用运算符","link":"#_3-2-在循环中正确使用运算符","children":[]},{"level":3,"title":"3.3. 使用增强的_for_循环","slug":"_3-3-使用增强的-for-循环","link":"#_3-3-使用增强的-for-循环","children":[]}]},{"level":2,"title":"IndexOutOfBoundsException_与_ArrayIndexOutOfBoundsException","slug":"indexoutofboundsexception-与-arrayindexoutofboundsexception","link":"#indexoutofboundsexception-与-arrayindexoutofboundsexception","children":[]},{"level":2,"title":"结论","slug":"结论","link":"#结论","children":[]},{"level":2,"title":"4. IndexOutOfBoundsException_与_ArrayIndexOutOfBoundsException","slug":"_4-indexoutofboundsexception-与-arrayindexoutofboundsexception","link":"#_4-indexoutofboundsexception-与-arrayindexoutofboundsexception","children":[]},{"level":2,"title":"结论","slug":"结论-1","link":"#结论-1","children":[]}],"git":{"createdTime":1721603626000,"updatedTime":1721603626000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":4.77,"words":1432},"filePathRelative":"posts/baeldung/2024-07-21/2024-07-21-Java ArrayIndexOutOfBoundsException.md","localizedDate":"2022年4月1日","excerpt":"\\n<p>在本教程中，我们将讨论Java中的_ArrayIndexOutOfBoundsException_。我们将理解它为何发生以及如何避免它。</p>\\n<h2>何时会发生_ArrayIndexOutOfBoundsException_？</h2>\\n<p>正如我们所知，在Java中，数组是一个静态数据结构，我们在创建时定义其大小。</p>\\n<p>我们使用索引来访问数组的元素。数组的索引从零开始，且永远不能大于或等于数组的大小。</p>\\n<p>简而言之，<strong>经验法则是0 `&lt;= index &lt; (数组大小)</strong>。</p>\\n<p><strong>当我们使用无效的索引访问数组或由数组支持的_Collection_时，就会发生_ArrayIndexOutOfBoundsException_</strong>。这意味着索引要么小于零，要么大于或等于数组的大小。</p>","autoDesc":true}');export{d as comp,x as data};
