import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-0nXvcScy.js";const e={},p=t(`<hr><h1 id="如何在java中检查字符串是否以特定模式结束" tabindex="-1"><a class="header-anchor" href="#如何在java中检查字符串是否以特定模式结束"><span>如何在Java中检查字符串是否以特定模式结束</span></a></h1><p>在这篇简短的教程中，我们将深入介绍如何在Java中检查字符串是否以某个特定模式结束。</p><p>首先，我们将考虑使用Java核心类库的解决方案。然后，我们将展示如何使用外部库来完成相同的任务。</p><h3 id="使用string类" tabindex="-1"><a class="header-anchor" href="#使用string类"><span>使用String类</span></a></h3><p>简单来说，String提供了多种方便的选项来验证给定的字符串是否以特定的子字符串结束。</p><p>让我们更详细地看看每个选项。</p><h4 id="_2-1-string-endswith方法" tabindex="-1"><a class="header-anchor" href="#_2-1-string-endswith方法"><span>2.1. String#endsWith方法</span></a></h4><p>这个方法通常是为了这个目的而引入的。<strong>这是检查一个String对象是否以另一个字符串结束的最直接方式</strong>。</p><p>让我们看看它在实际中的应用：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">usingStringEndsWithMethod</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token class-name">String</span> suffix<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>text <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> suffix <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> text<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span>suffix<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意endsWith不是null安全的。因此，我们需要首先确保text和suffix不是null，以避免NullPointerException。</p><h4 id="_2-2-string-matches方法" tabindex="-1"><a class="header-anchor" href="#_2-2-string-matches方法"><span>2.2. String#matches方法</span></a></h4><p>matches是另一个我们可以用来实现我们目标的好方法。它简单地检查一个字符串是否与给定的正则表达式匹配。</p><p>基本上，我们需要做的就是指定适合我们用例的正则表达式：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">usingStringMatchesMethod</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token class-name">String</span> suffix<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>text <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> suffix <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">&quot;.*&quot;</span> <span class="token operator">+</span> suffix <span class="token operator">+</span> <span class="token string">&quot;$&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> text<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如我们所看到的，我们使用了一个正则表达式，它在字符串text的末尾($)匹配suffix。然后，我们将正则表达式传递给matches方法。</p><h4 id="_2-3-string-regionmatches方法" tabindex="-1"><a class="header-anchor" href="#_2-3-string-regionmatches方法"><span>2.3. String#regionMatches方法</span></a></h4><p>同样，我们可以使用regionMatches方法来解决我们的中心问题。<strong>如果字符串的一部分与指定的字符串完全匹配，它返回true；否则返回false</strong>。</p><p>现在，让我们用一个例子来说明这一点：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">usingStringRegionMatchesMethod</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token class-name">String</span> suffix<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>text <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> suffix <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> toffset <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> suffix<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> text<span class="token punctuation">.</span><span class="token function">regionMatches</span><span class="token punctuation">(</span>toffset<span class="token punctuation">,</span> suffix<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> suffix<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>toffset表示我们字符串中的子区域的起始偏移量。因此，为了检查text是否以指定的suffix结束，toffset应该等于text的长度减去suffix的长度。</p><h3 id="使用pattern类" tabindex="-1"><a class="header-anchor" href="#使用pattern类"><span>使用Pattern类</span></a></h3><p>另外，我们可以使用Pattern类来编译一个正则表达式，以检查字符串是否以一个模式结束。</p><p>话不多说，让我们重用前一节中指定的相同正则表达式：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">usingPatternClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token class-name">String</span> suffix<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>text <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> suffix <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&quot;.*&quot;</span> <span class="token operator">+</span> suffix <span class="token operator">+</span> <span class="token string">&quot;$&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上所示，Pattern编译了前面的正则表达式，它表示字符串的结尾，并尝试将其与我们的字符串text匹配。</p><h3 id="使用apache-commons-lang" tabindex="-1"><a class="header-anchor" href="#使用apache-commons-lang"><span>使用Apache Commons Lang</span></a></h3><p>Apache Commons Lang提供了一组用于字符串操作的现成的实用类。在这些类中，我们找到了StringUtils。</p><p>这个实用类带有一个有趣的方法叫做endsWith。它<strong>以null安全的方式检查一个字符序列是否以后缀结束</strong>。</p><p>现在，让我们举例说明StringUtils.endsWith方法的使用：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">usingApacheCommonsLang</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token class-name">String</span> suffix<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> suffix<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="结论" tabindex="-1"><a class="header-anchor" href="#结论"><span>结论</span></a></h3><p>在本文中，我们探索了检查字符串是否以特定模式结束的不同方法。</p><p>首先，我们看到了使用内置Java类库实现这一点的几种方法。然后，我们解释了如何使用Apache Commons Lang库来做同样的事情。</p><p>正如往常一样，本文中使用的代码可以在GitHub上找到。</p>`,36),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","2024-07-22-Check if a String Ends with a Certain Pattern in Java.html.vue"]]),k=JSON.parse('{"path":"/posts/baeldung/2024-07-22/2024-07-22-Check%20if%20a%20String%20Ends%20with%20a%20Certain%20Pattern%20in%20Java.html","title":"如何在Java中检查字符串是否以特定模式结束","lang":"zh-CN","frontmatter":{"date":"2024-07-23T00:00:00.000Z","category":["Java","String Manipulation"],"tag":["Java","String","Pattern Matching"],"head":[["meta",{"name":"keywords","content":"Java, String, Pattern, EndsWith, Regular Expression"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-22/2024-07-22-Check%20if%20a%20String%20Ends%20with%20a%20Certain%20Pattern%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"如何在Java中检查字符串是否以特定模式结束"}],["meta",{"property":"og:description","content":"如何在Java中检查字符串是否以特定模式结束 在这篇简短的教程中，我们将深入介绍如何在Java中检查字符串是否以某个特定模式结束。 首先，我们将考虑使用Java核心类库的解决方案。然后，我们将展示如何使用外部库来完成相同的任务。 使用String类 简单来说，String提供了多种方便的选项来验证给定的字符串是否以特定的子字符串结束。 让我们更详细地看..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-22T18:46:07.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"String"}],["meta",{"property":"article:tag","content":"Pattern Matching"}],["meta",{"property":"article:published_time","content":"2024-07-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-22T18:46:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"如何在Java中检查字符串是否以特定模式结束\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-23T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-22T18:46:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"如何在Java中检查字符串是否以特定模式结束 在这篇简短的教程中，我们将深入介绍如何在Java中检查字符串是否以某个特定模式结束。 首先，我们将考虑使用Java核心类库的解决方案。然后，我们将展示如何使用外部库来完成相同的任务。 使用String类 简单来说，String提供了多种方便的选项来验证给定的字符串是否以特定的子字符串结束。 让我们更详细地看..."},"headers":[{"level":3,"title":"使用String类","slug":"使用string类","link":"#使用string类","children":[]},{"level":3,"title":"使用Pattern类","slug":"使用pattern类","link":"#使用pattern类","children":[]},{"level":3,"title":"使用Apache Commons Lang","slug":"使用apache-commons-lang","link":"#使用apache-commons-lang","children":[]},{"level":3,"title":"结论","slug":"结论","link":"#结论","children":[]}],"git":{"createdTime":1721673967000,"updatedTime":1721673967000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":3.02,"words":907},"filePathRelative":"posts/baeldung/2024-07-22/2024-07-22-Check if a String Ends with a Certain Pattern in Java.md","localizedDate":"2024年7月23日","excerpt":"<hr>\\n<h1>如何在Java中检查字符串是否以特定模式结束</h1>\\n<p>在这篇简短的教程中，我们将深入介绍如何在Java中检查字符串是否以某个特定模式结束。</p>\\n<p>首先，我们将考虑使用Java核心类库的解决方案。然后，我们将展示如何使用外部库来完成相同的任务。</p>\\n<h3>使用String类</h3>\\n<p>简单来说，String提供了多种方便的选项来验证给定的字符串是否以特定的子字符串结束。</p>\\n<p>让我们更详细地看看每个选项。</p>\\n<h4>2.1. String#endsWith方法</h4>\\n<p>这个方法通常是为了这个目的而引入的。<strong>这是检查一个String对象是否以另一个字符串结束的最直接方式</strong>。</p>","autoDesc":true}');export{d as comp,k as data};
