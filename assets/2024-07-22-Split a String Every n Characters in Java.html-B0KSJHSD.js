import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-0nXvcScy.js";const p={},e=t('<h1 id="java中每n个字符分割字符串" tabindex="-1"><a class="header-anchor" href="#java中每n个字符分割字符串"><span>Java中每n个字符分割字符串</span></a></h1><p>在本教程中，我们将探讨如何在Java中每n个字符分割字符串。首先，我们将探索使用内置Java方法实现此操作的可能方式。然后，我们将展示如何使用Guava库达到相同的目标。</p><h2 id="_2-使用string-split方法" tabindex="-1"><a class="header-anchor" href="#_2-使用string-split方法"><span>2. 使用String#split方法</span></a></h2><p>String类提供了一个方便的方法叫做split。顾名思义，它根据给定的分隔符或正则表达式将字符串分割成多个部分。</p><p>让我们看看它的实际应用：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span>````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````` <span class="token function">usingSplitMethod</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> results <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;(?&lt;=\\\\G.{&quot;</span> <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token string">&quot;})&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如我们所见，我们使用了正则表达式&quot;(?&lt;=\\G.{&quot; + n + &quot;})&quot;, 其中n是字符的数量。这是一个正向后瞻断言，它匹配一个字符串，该字符串在最后一个匹配(\\G)之后有n个字符。</p><p>现在，让我们创建一个测试用例来检查一切是否按预期工作：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SplitStringEveryNthCharUnitTest</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">TEXT</span> <span class="token operator">=</span> <span class="token string">&quot;abcdefgh123456&quot;</span><span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Test</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenString_whenUsingSplit_thenSplit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">List</span>````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````` results <span class="token operator">=</span> <span class="token class-name">SplitStringEveryNthChar</span><span class="token punctuation">.</span><span class="token function">usingSplitMethod</span><span class="token punctuation">(</span><span class="token constant">TEXT</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token function">assertThat</span><span class="token punctuation">(</span>results<span class="token punctuation">,</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;def&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;gh1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;234&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;56&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-使用string-substring方法" tabindex="-1"><a class="header-anchor" href="#_3-使用string-substring方法"><span>3. 使用String#substring方法</span></a></h2><p>另一种在每个第n个字符处分割String对象的方法是使用substring方法。</p><p>基本上，我们可以循环遍历字符串并调用substring，根据指定的n字符将其分割成多个部分：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span>````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````` <span class="token function">usingSubstringMethod</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">List</span>````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````` results <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> length <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i <span class="token operator">+=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        results<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span> i <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> results<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上所示，substring方法允许我们获取字符串在当前索引i和i+n之间的部分。</p><p>现在，让我们使用一个测试用例来确认这一点：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenString_whenUsingSubstring_thenSplit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">List</span>````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````` results <span class="token operator">=</span> <span class="token class-name">SplitStringEveryNthChar</span><span class="token punctuation">.</span><span class="token function">usingSubstringMethod</span><span class="token punctuation">(</span><span class="token constant">TEXT</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">assertThat</span><span class="token punctuation">(</span>results<span class="token punctuation">,</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;abcd&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;efgh&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1234&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;56&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-使用pattern类" tabindex="-1"><a class="header-anchor" href="#_4-使用pattern类"><span>4. 使用Pattern类</span></a></h2><p>Pattern提供了一种简洁的方式来编译正则表达式并将其与给定的字符串匹配。</p><p>因此，使用正确的正则表达式，我们可以使用Pattern实现我们的目标：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span>````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````` <span class="token function">usingPattern</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&quot;.{1,&quot;</span> <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token string">&quot;}&quot;</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">results</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">MatchResult</span><span class="token operator">::</span><span class="token function">group</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如我们所见，我们使用了&quot;.{1,n}&quot;作为正则表达式来创建我们的Pattern对象。它至少匹配一个字符，最多匹配n个字符。</p><p>最后，让我们编写一个简单的测试：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenString_whenUsingPattern_thenSplit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">List</span>````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````` results <span class="token operator">=</span> <span class="token class-name">SplitStringEveryNthChar</span><span class="token punctuation">.</span><span class="token function">usingPattern</span><span class="token punctuation">(</span><span class="token constant">TEXT</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">assertThat</span><span class="token punctuation">(</span>results<span class="token punctuation">,</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;abcde&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;fgh12&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-使用guava" tabindex="-1"><a class="header-anchor" href="#_5-使用guava"><span>5. 使用Guava</span></a></h2><p>现在我们已经知道如何使用核心Java方法每n个字符分割字符串，让我们看看如何使用Guava库来做同样的事情：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span>````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````` <span class="token function">usingGuava</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Iterable</span>````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````` parts <span class="token operator">=</span> <span class="token class-name">Splitter</span><span class="token punctuation">.</span><span class="token function">fixedLength</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token class-name">ImmutableList</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>parts<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Guava提供了Splitter类来简化从字符串中提取子字符串的逻辑。fixedLength()方法将给定的字符串分割成指定长度的片段。</p><p>让我们用一个测试用例来验证我们的方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenString_whenUsingGuava_thenSplit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">List</span>````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>```````` results <span class="token operator">=</span> <span class="token class-name">SplitStringEveryNthChar</span><span class="token punctuation">.</span><span class="token function">usingGuava</span><span class="token punctuation">(</span><span class="token constant">TEXT</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">assertThat</span><span class="token punctuation">(</span>results<span class="token punctuation">,</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;abcdef&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;gh1234&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;56&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-结论" tabindex="-1"><a class="header-anchor" href="#_6-结论"><span>6. 结论</span></a></h2><p>总结起来，我们解释了如何使用Java方法在每个第n个字符处分割字符串。</p><p>在那之后，我们展示了如何使用Guava库完成相同的目标。</p><p>正如往常一样，本文中使用的代码可以在GitHub上找到。</p>',33),c=[e];function o(i,l){return a(),s("div",null,c)}const k=n(p,[["render",o],["__file","2024-07-22-Split a String Every n Characters in Java.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-22/2024-07-22-Split%20a%20String%20Every%20n%20Characters%20in%20Java.html","title":"Java中每n个字符分割字符串","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","字符串处理"],"tag":["Java","字符串分割"],"head":[["meta",{"name":"keywords","content":"Java, 字符串分割, 正则表达式, Guava库"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-22/2024-07-22-Split%20a%20String%20Every%20n%20Characters%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Java中每n个字符分割字符串"}],["meta",{"property":"og:description","content":"Java中每n个字符分割字符串 在本教程中，我们将探讨如何在Java中每n个字符分割字符串。首先，我们将探索使用内置Java方法实现此操作的可能方式。然后，我们将展示如何使用Guava库达到相同的目标。 2. 使用String#split方法 String类提供了一个方便的方法叫做split。顾名思义，它根据给定的分隔符或正则表达式将字符串分割成多个部..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-22T22:44:20.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"字符串分割"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-22T22:44:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java中每n个字符分割字符串\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-22T22:44:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Java中每n个字符分割字符串 在本教程中，我们将探讨如何在Java中每n个字符分割字符串。首先，我们将探索使用内置Java方法实现此操作的可能方式。然后，我们将展示如何使用Guava库达到相同的目标。 2. 使用String#split方法 String类提供了一个方便的方法叫做split。顾名思义，它根据给定的分隔符或正则表达式将字符串分割成多个部..."},"headers":[{"level":2,"title":"2. 使用String#split方法","slug":"_2-使用string-split方法","link":"#_2-使用string-split方法","children":[]},{"level":2,"title":"3. 使用String#substring方法","slug":"_3-使用string-substring方法","link":"#_3-使用string-substring方法","children":[]},{"level":2,"title":"4. 使用Pattern类","slug":"_4-使用pattern类","link":"#_4-使用pattern类","children":[]},{"level":2,"title":"5. 使用Guava","slug":"_5-使用guava","link":"#_5-使用guava","children":[]},{"level":2,"title":"6. 结论","slug":"_6-结论","link":"#_6-结论","children":[]}],"git":{"createdTime":1721688260000,"updatedTime":1721688260000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":2.9,"words":869},"filePathRelative":"posts/baeldung/2024-07-22/2024-07-22-Split a String Every n Characters in Java.md","localizedDate":"2022年4月1日","excerpt":"\\n<p>在本教程中，我们将探讨如何在Java中每n个字符分割字符串。首先，我们将探索使用内置Java方法实现此操作的可能方式。然后，我们将展示如何使用Guava库达到相同的目标。</p>\\n<h2>2. 使用String#split方法</h2>\\n<p>String类提供了一个方便的方法叫做split。顾名思义，它根据给定的分隔符或正则表达式将字符串分割成多个部分。</p>\\n<p>让我们看看它的实际应用：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token class-name\\">List</span>````````<span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">&gt;</span></span>```````` <span class=\\"token function\\">usingSplitMethod</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> text<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> n<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> results <span class=\\"token operator\\">=</span> text<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">split</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"(?&lt;=\\\\\\\\G.{\\"</span> <span class=\\"token operator\\">+</span> n <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"})\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token class-name\\">Arrays</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">asList</span><span class=\\"token punctuation\\">(</span>results<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{k as comp,d as data};
