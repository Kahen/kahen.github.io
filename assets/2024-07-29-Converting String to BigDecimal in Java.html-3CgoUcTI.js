import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-DFhKiB50.js";const e={},p=t(`<h1 id="java中将字符串转换为bigdecimal" tabindex="-1"><a class="header-anchor" href="#java中将字符串转换为bigdecimal"><span>Java中将字符串转换为BigDecimal</span></a></h1><p>在本教程中，我们将介绍Java中将字符串转换为BigDecimal的多种方法。</p><p><strong>BigDecimal</strong> 表示一个不可变的任意精度的有符号十进制数字。它由两部分组成：</p><ul><li>未缩放值 - 一个任意精度的整数</li><li>小数位 - 表示小数点右边数字数量的32位整数</li></ul><p>例如，BigDecimal 3.14 有一个未缩放值为314，小数位为2。</p><p>如果为零或正数，小数位是小数点右边的位数。</p><p>如果是负数，数字的未缩放值将乘以10的负小数位次幂。因此，<strong>BigDecimal表示的数值是（未缩放值 × 10^(-小数位)）</strong>。</p><p>Java中的<strong>BigDecimal</strong>类提供了基本算术运算、小数位操作、比较、格式转换和哈希计算的操作。</p><p>此外，我们使用<strong>BigDecimal</strong>进行高精度算术运算，需要控制小数位和舍入行为的计算。一个例子是涉及金融交易的计算。</p><p>我们可以使用以下方法之一在Java中将字符串转换为BigDecimal：</p><ul><li><strong>BigDecimal(String)</strong> 构造器</li><li><strong>BigDecimal.valueOf()</strong> 方法</li><li><strong>DecimalFormat.parse()</strong> 方法</li></ul><p>让我们在下面详细讨论它们。</p><h2 id="_3-bigdecimal-string" tabindex="-1"><a class="header-anchor" href="#_3-bigdecimal-string"><span>3. <strong>BigDecimal(String)</strong></span></a></h2><p>在Java中将字符串转换为BigDecimal的最简单方法是使用<strong>BigDecimal(String)</strong> 构造器：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">BigDecimal</span> bigDecimal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bigDecimal<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-bigdecimal-valueof" tabindex="-1"><a class="header-anchor" href="#_4-bigdecimal-valueof"><span>4. <strong>BigDecimal.valueOf()</strong></span></a></h2><p>我们还可以通过使用<strong>BigDecimal.valueOf(double)</strong> 方法将字符串转换为BigDecimal。</p><p>这是一个两步过程。第一步是将字符串转换为Double。第二步是将Double转换为BigDecimal：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">BigDecimal</span> bigDecimal <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">&quot;123.42&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">123.42</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setScale</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token constant">ROUND_HALF_UP</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bigDecimal<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>必须注意，有些浮点数不能使用Double值精确表示。这是因为Double类型的浮点数在内存中的表示形式。实际上，该数字以尽可能接近输入的Double数字的有理数形式表示。结果，一些浮点数变得不准确。</p><h2 id="_5-decimalformat-parse" tabindex="-1"><a class="header-anchor" href="#_5-decimalformat-parse"><span>5. <strong>DecimalFormat.parse()</strong></span></a></h2><p>当表示值的字符串具有更复杂格式时，我们可以使用<strong>DecimalFormat</strong>。</p><p>例如，我们可以在不移除非数字符号的情况下转换基于小数的长值：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">BigDecimal</span> bigDecimal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">10692467440017.111</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setScale</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token constant">ROUND_HALF_UP</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">DecimalFormatSymbols</span> symbols <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DecimalFormatSymbols</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
symbols<span class="token punctuation">.</span><span class="token function">setGroupingSeparator</span><span class="token punctuation">(</span><span class="token char">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
symbols<span class="token punctuation">.</span><span class="token function">setDecimalSeparator</span><span class="token punctuation">(</span><span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> pattern <span class="token operator">=</span> <span class="token string">&quot;#,##0.0#&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">DecimalFormat</span> decimalFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> symbols<span class="token punctuation">)</span><span class="token punctuation">;</span>
decimalFormat<span class="token punctuation">.</span><span class="token function">setParseBigDecimal</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 解析字符串值</span>
<span class="token class-name">BigDecimal</span> parsedStringValue <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">)</span> decimalFormat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot;10,692,467,440,017.111&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">assertEquals</span><span class="token punctuation">(</span>bigDecimal<span class="token punctuation">,</span> parsedStringValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>DecimalFormat.parse</strong> 方法返回一个<strong>Number</strong>，我们使用_setParseBigDecimal(true)_将其转换为BigDecimal数字。</p><p>通常，<strong>DecimalFormat</strong> 比我们要求的更高级。因此，我们应该更倾向于使用<strong>new BigDecimal(String)</strong> 或 <strong>BigDecimal.valueOf()</strong>。</p><h2 id="_6-无效转换" tabindex="-1"><a class="header-anchor" href="#_6-无效转换"><span>6. <strong>无效转换</strong></span></a></h2><p>Java为处理无效的数字字符串提供了通用异常。</p><p>特别是，<strong>new BigDecimal(String), BigDecimal.valueOf()</strong> 和 <strong>DecimalFormat.parse</strong> 在我们传递<strong>null</strong>时抛出<strong>NullPointerException</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span><span class="token punctuation">(</span>expected <span class="token operator">=</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenNullString_WhenBigDecimalObjectWithStringParameter_ThenNullPointerExceptionIsThrown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> bigDecimal <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>bigDecimal<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Test</span><span class="token punctuation">(</span>expected <span class="token operator">=</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenNullString_WhenValueOfDoubleFromString_ThenNullPointerExceptionIsThrown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Test</span><span class="token punctuation">(</span>expected <span class="token operator">=</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenNullString_WhenDecimalFormatOfString_ThenNullPointerExceptionIsThrown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">throws</span> <span class="token class-name">ParseException</span> <span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span><span class="token string">&quot;#&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样，<strong>new BigDecimal(String)</strong> 和 <strong>BigDecimal.valueOf()</strong> 在我们传递无法解析为BigDecimal的无效字符串（例如**&amp;<strong>）时抛出</strong>NumberFormatException**：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span><span class="token punctuation">(</span>expected <span class="token operator">=</span> <span class="token class-name">NumberFormatException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenInalidString_WhenBigDecimalObjectWithStringParameter_ThenNumberFormatExceptionIsThrown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">&quot;&amp;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Test</span><span class="token punctuation">(</span>expected <span class="token operator">=</span> <span class="token class-name">NumberFormatException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenInalidString_WhenValueOfDoubleFromString_ThenNumberFormatExceptionIsThrown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">&quot;&amp;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，<strong>DecimalFormat.parse</strong> 在我们传递无效的字符串时抛出<strong>ParseException</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span><span class="token punctuation">(</span>expected <span class="token operator">=</span> <span class="token class-name">ParseException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenInalidString_WhenDecimalFormatOfString_ThenNumberFormatExceptionIsThrown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">throws</span> <span class="token class-name">ParseException</span> <span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span><span class="token string">&quot;#&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot;&amp;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-结论" tabindex="-1"><a class="header-anchor" href="#_7-结论"><span>7. <strong>结论</strong></span></a></h2><p>在本文中，我们了解到Java为我们提供了多种将字符串转换为BigDecimal值的方法。通常，我们推荐使用<strong>new BigDecimal(String)</strong> 方法来实现这一目的。</p><p>如常，本文中使用的代码可以在GitHub上找到。</p>`,37),o=[p];function c(i,l){return s(),a("div",null,o)}const m=n(e,[["render",c],["__file","2024-07-29-Converting String to BigDecimal in Java.html.vue"]]),k=JSON.parse('{"path":"/posts/baeldung/2024-07-29/2024-07-29-Converting%20String%20to%20BigDecimal%20in%20Java.html","title":"Java中将字符串转换为BigDecimal","lang":"zh-CN","frontmatter":{"date":"2024-07-30T00:00:00.000Z","category":["Java","BigDecimal"],"tag":["String","Convert","BigDecimal"],"head":[["meta",{"name":"keywords","content":"Java, BigDecimal, String, Convert"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-29/2024-07-29-Converting%20String%20to%20BigDecimal%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Java中将字符串转换为BigDecimal"}],["meta",{"property":"og:description","content":"Java中将字符串转换为BigDecimal 在本教程中，我们将介绍Java中将字符串转换为BigDecimal的多种方法。 BigDecimal 表示一个不可变的任意精度的有符号十进制数字。它由两部分组成： 未缩放值 - 一个任意精度的整数 小数位 - 表示小数点右边数字数量的32位整数 例如，BigDecimal 3.14 有一个未缩放值为314，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-29T22:08:45.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"String"}],["meta",{"property":"article:tag","content":"Convert"}],["meta",{"property":"article:tag","content":"BigDecimal"}],["meta",{"property":"article:published_time","content":"2024-07-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-29T22:08:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java中将字符串转换为BigDecimal\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-30T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-29T22:08:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Java中将字符串转换为BigDecimal 在本教程中，我们将介绍Java中将字符串转换为BigDecimal的多种方法。 BigDecimal 表示一个不可变的任意精度的有符号十进制数字。它由两部分组成： 未缩放值 - 一个任意精度的整数 小数位 - 表示小数点右边数字数量的32位整数 例如，BigDecimal 3.14 有一个未缩放值为314，..."},"headers":[{"level":2,"title":"3. BigDecimal(String)","slug":"_3-bigdecimal-string","link":"#_3-bigdecimal-string","children":[]},{"level":2,"title":"4. BigDecimal.valueOf()","slug":"_4-bigdecimal-valueof","link":"#_4-bigdecimal-valueof","children":[]},{"level":2,"title":"5. DecimalFormat.parse()","slug":"_5-decimalformat-parse","link":"#_5-decimalformat-parse","children":[]},{"level":2,"title":"6. 无效转换","slug":"_6-无效转换","link":"#_6-无效转换","children":[]},{"level":2,"title":"7. 结论","slug":"_7-结论","link":"#_7-结论","children":[]}],"git":{"createdTime":1722290925000,"updatedTime":1722290925000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":2.92,"words":876},"filePathRelative":"posts/baeldung/2024-07-29/2024-07-29-Converting String to BigDecimal in Java.md","localizedDate":"2024年7月30日","excerpt":"\\n<p>在本教程中，我们将介绍Java中将字符串转换为BigDecimal的多种方法。</p>\\n<p><strong>BigDecimal</strong> 表示一个不可变的任意精度的有符号十进制数字。它由两部分组成：</p>\\n<ul>\\n<li>未缩放值 - 一个任意精度的整数</li>\\n<li>小数位 - 表示小数点右边数字数量的32位整数</li>\\n</ul>\\n<p>例如，BigDecimal 3.14 有一个未缩放值为314，小数位为2。</p>\\n<p>如果为零或正数，小数位是小数点右边的位数。</p>\\n<p>如果是负数，数字的未缩放值将乘以10的负小数位次幂。因此，<strong>BigDecimal表示的数值是（未缩放值 × 10^(-小数位)）</strong>。</p>","autoDesc":true}');export{m as comp,k as data};
