import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-DpDzgwdT.js";const p={},e=t(`<hr><h1 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h1><p>在本教程中，<strong>我们将学习在Spring Boot应用程序中配置MongoDB连接的不同方法</strong>。我们将利用Spring Data MongoDB项目提供的强大的功能。通过利用Spring Data MongoDB项目，我们可以使用丰富的工具和功能，简化在Spring环境中使用MongoDB数据库的过程。</p><p>通过深入研究Spring的灵活配置选项，我们将探索建立数据库连接的各种方法。通过动手示例，我们将为每种方法创建单独的应用程序，使我们能够选择最适合我们特定需求的配置方法。</p><h1 id="_2-测试我们的连接" tabindex="-1"><a class="header-anchor" href="#_2-测试我们的连接"><span>2. 测试我们的连接</span></a></h1><p>在我们开始构建应用程序之前，我们将创建一个测试类。让我们从一些我们将重用的常量开始：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MongoConnectionApplicationLiveTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">HOST</span> <span class="token operator">=</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">PORT</span> <span class="token operator">=</span> <span class="token string">&quot;27017&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">DB</span> <span class="token operator">=</span> <span class="token string">&quot;baeldung&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">USER</span> <span class="token operator">=</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">PASS</span> <span class="token operator">=</span> <span class="token string">&quot;password&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">// 测试用例</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>我们的测试包括运行我们的应用程序，然后尝试在名为 <em>“items”</em> 的集合中插入一个文档</strong>。插入我们的文档后，我们应该从我们的数据库中收到一个 <em>“_id”</em>，我们将认为测试成功。现在让我们创建一个助手方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">assertInsertSucceeds</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableApplicationContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">;</span>

    <span class="token class-name">MongoTemplate</span> mongo <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">MongoTemplate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Document</span> doc <span class="token operator">=</span> <span class="token class-name">Document</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot;{\\&quot;name\\&quot;:\\&quot;&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;\\&quot;}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Document</span> inserted <span class="token operator">=</span> mongo<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>doc<span class="token punctuation">,</span> <span class="token string">&quot;items&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">assertNotNull</span><span class="token punctuation">(</span>inserted<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;_id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span>inserted<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们的方法接收来自我们应用程序的Spring上下文，以便我们可以检索 <em>MongoTemplate</em> 实例。接下来，我们将使用 <em>Document.parse()</em> 从字符串构建一个简单的JSON文档。</p><p><strong>这样，我们就不需要创建一个仓库或文档类</strong>。然后，在插入后，我们将断言我们插入的文档的属性是我们期望的。</p><p>重要的是要注意，我们需要运行一个真实的MongoDB实例。为此，我们可以将MongoDB作为docker容器运行。</p><h1 id="_3-通过属性配置连接" tabindex="-1"><a class="header-anchor" href="#_3-通过属性配置连接"><span>3. 通过属性配置连接</span></a></h1><p>在Spring Boot应用程序中配置MongoDB连接，我们通常使用属性。在属性中，我们定义了诸如数据库主机、端口、认证凭据和数据库名称等基本连接详细信息。我们将在以下小节中详细查看这些属性。</p><h3 id="_3-1-使用-application-properties" tabindex="-1"><a class="header-anchor" href="#_3-1-使用-application-properties"><span>3.1. 使用 <em>application.properties</em></span></a></h3><p>我们的第一个示例是配置连接的最常见方式。<strong>我们只需要在我们的 <em>application.properties</em> 中提供我们的数据库信息：</strong></p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.data.mongodb.host</span><span class="token punctuation">=</span><span class="token value attr-value">localhost</span>
<span class="token key attr-name">spring.data.mongodb.port</span><span class="token punctuation">=</span><span class="token value attr-value">27017</span>
<span class="token key attr-name">spring.data.mongodb.database</span><span class="token punctuation">=</span><span class="token value attr-value">baeldung</span>
<span class="token key attr-name">spring.data.mongodb.username</span><span class="token punctuation">=</span><span class="token value attr-value">admin</span>
<span class="token key attr-name">spring.data.mongodb.password</span><span class="token punctuation">=</span><span class="token value attr-value">password</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所有可用的属性都位于Spring Boot的 <em>MongoProperties</em> 类中。我们还可以使用这个类来检查默认值。<strong>我们可以通过应用程序参数在我们的属性文件中定义任何配置。</strong></p><p>在我们的应用程序类中，我们需要排除 <em>EmbeddedMongoAutoConfiguration</em> 类以启动和运行：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span><span class="token punctuation">(</span>exclude<span class="token operator">=</span><span class="token punctuation">{</span><span class="token class-name">EmbeddedMongoAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringMongoConnectionViaPropertiesApp</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SpringMongoConnectionViaPropertiesApp</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>这种配置是我们连接到数据库实例所需的全部</strong>。<em>@SpringBootApplication</em> 注解包括 <em>@EnableAutoConfiguration</em>。它负责发现我们的应用程序是基于我们的类路径的MongoDB应用程序。</p><p>要测试它，我们可以使用 <em>SpringApplicationBuilder</em> 来获取应用程序上下文的引用。<strong>然后，为了断言我们的连接有效，我们将使用之前创建的 <em>assertInsertSucceeds</em> 方法：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenPropertiesConfig_thenInsertSucceeds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">SpringApplicationBuilder</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringApplicationBuilder</span><span class="token punctuation">(</span><span class="token class-name">SpringMongoConnectionViaPropertiesApp</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    app<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">assertInsertSucceeds</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们的应用程序成功地使用我们的 <em>application.properties</em> 文件连接。</p><h3 id="_3-2-使用命令行参数覆盖属性" tabindex="-1"><a class="header-anchor" href="#_3-2-使用命令行参数覆盖属性"><span>3.2. 使用命令行参数覆盖属性</span></a></h3><p><strong>我们可以在运行应用程序时使用命令行参数覆盖我们的属性文件</strong>。这些是在运行应用程序时传递给应用程序的，可以通过java命令、mvn命令或IDE配置传递。提供这些的方法将取决于我们使用的命令。</p><p>让我们看看使用 <em>mvn</em> 运行我们的Spring Boot应用程序的示例：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>mvn spring-boot:run -Dspring-boot.run.arguments<span class="token operator">=</span><span class="token string">&#39;--spring.data.mongodb.port=7017 --spring.data.mongodb.host=localhost&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要使用它，我们指定我们的属性作为 <em>spring-boot.run.arguments</em> 参数的值。我们使用与预期的Spring Data变量相同的属性名称，但前面加上两个破折号。<strong>自Spring Boot 2以来，多个属性应通过空格分隔。</strong> 最后，在运行命令后，不应该有任何错误。</p><p>以这种方式配置的选项始终优先于属性文件。<strong>这种选项在我们不需要更改属性文件就可以更改应用程序参数时非常有用</strong>。例如，如果我们的凭据已更改，我们无法再连接。</p><p>为了在我们的测试中模拟这一点，我们可以在运行应用程序之前设置系统属性。我们还可以使用 <em>properties</em> 方法覆盖我们的 <em>application.properties</em>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenPrecedence_whenSystemConfig_thenInsertSucceeds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&quot;spring.data.mongodb.host&quot;</span><span class="token punctuation">,</span> <span class="token constant">HOST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&quot;spring.data.mongodb.port&quot;</span><span class="token punctuation">,</span> <span class="token constant">PORT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&quot;spring.data.mongodb.database&quot;</span><span class="token punctuation">,</span> <span class="token constant">DB</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&quot;spring.data.mongodb.username&quot;</span><span class="token punctuation">,</span> <span class="token constant">USER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&quot;spring.data.mongodb.password&quot;</span><span class="token punctuation">,</span> <span class="token constant">PASS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">SpringApplicationBuilder</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringApplicationBuilder</span><span class="token punctuation">(</span><span class="token class-name">SpringMongoConnectionViaPropertiesApp</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">properties</span><span class="token punctuation">(</span>
        <span class="token string">&quot;spring.data.mongodb.host=oldValue&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;spring.data.mongodb.port=oldValue&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;spring.data.mongodb.database=oldValue&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;spring.data.mongodb.username=oldValue&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;spring.data.mongodb.password=oldValue&quot;</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    app<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">assertInsertSucceeds</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>结果，我们属性文件中的旧值不会影响我们的应用程序，因为系统属性具有更高的优先级</strong>。这在我们需要在不更改代码的情况下使用新的连接详细信息重新启动应用程序时非常有用。</p><h3 id="_3-3-使用连接uri属性" tabindex="-1"><a class="header-anchor" href="#_3-3-使用连接uri属性"><span>3.3. 使用连接URI属性</span></a></h3><p>也可以使用单个属性而不是单独的主机、端口等：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.data.mongodb.uri</span><span class="token punctuation">=</span><span class="token value attr-value">&quot;mongodb://admin:password@localhost:27017/baeldung&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>此属性包括初始属性中的所有值，因此我们不需要指定全部五个</strong>。让我们检查基本格式：</p><div class="language-plaintext line-numbers-mode" data-ext="plaintext" data-title="plaintext"><pre class="language-plaintext"><code>mongodb://\`&lt;username&gt;\`:\`&lt;password&gt;\`@\`&lt;host&gt;\`:\`&lt;port&gt;\`/\`&lt;database&gt;\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>URI中的 <em>database</em> 部分更具体地说是默认认证数据库。<strong>最重要的是，<em>spring.data.mongodb.uri</em> 属性不能与单独的主机、端口和凭据一起指定</strong>。否则，我们在运行应用程序时会收到以下错误：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenConnectionUri_whenAlsoIncludingIndividualParameters_thenInvalidConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>
      <span class="token string">&quot;spring.data.mongodb.uri&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;mongodb://&quot;</span> <span class="token operator">+</span> <span class="token constant">USER</span> <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> <span class="token constant">PASS</span> <span class="token operator">+</span> <span class="token string">&quot;@&quot;</span> <span class="token operator">+</span> <span class="token constant">HOST</span> <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> <span class="token constant">PORT</span> <span class="token operator">+</span> <span class="token string">&quot;/&quot;</span> <span class="token operator">+</span> <span class="token constant">DB</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">SpringApplicationBuilder</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringApplicationBuilder</span><span class="token punctuation">(</span><span class="token class-name">SpringMongoConnectionViaPropertiesApp</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">properties</span><span class="token punctuation">(</span>
        <span class="token string">&quot;spring.data.mongodb.host=&quot;</span> <span class="token operator">+</span> <span class="token constant">HOST</span><span class="token punctuation">,</span>
        <span class="token string">&quot;spring.data.mongodb.port=&quot;</span> <span class="token operator">+</span> <span class="token constant">PORT</span><span class="token punctuation">,</span>
        <span class="token string">&quot;spring.data.mongodb.username=&quot;</span> <span class="token operator">+</span> <span class="token constant">USER</span><span class="token punctuation">,</span>
        <span class="token string">&quot;spring.data.mongodb.password=&quot;</span> <span class="token operator">+</span> <span class="token constant">PASS</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">BeanCreationException</span> e <span class="token operator">=</span> <span class="token function">assertThrows</span><span class="token punctuation">(</span><span class="token class-name">BeanCreationException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        app<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Throwable</span> rootCause <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getRootCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertTrue</span><span class="token punctuation">(</span>rootCause <span class="token keyword">instanceof</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertThat</span><span class="token punctuation">(</span>rootCause<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;Invalid mongo configuration, either uri or host/port/credentials/replicaSet must be specified&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>最后，这种配置选项不仅更短，有时还是必须的</strong>。这是因为某些选项只能通过连接字符串使用，比如使用 <em>mongodb+srv</em> 连接到副本集。因此，我们将仅在下一个示例中使用这个更简单的配置属性。</p><h1 id="_4-使用mongoclient的java设置" tabindex="-1"><a class="header-anchor" href="#_4-使用mongoclient的java设置"><span>4. 使用MongoClient的Java设置</span></a></h1><p><strong><em>MongoClient</em> 代表我们与MongoDB数据库的连接，总是在后台创建，但我们也可以以编程方式设置它</strong>。尽管这种方法更冗长，但它有一些优点。让我们在接下来的几个小节中看看它们。</p><h3 id="_4-1-通过-abstractmongoclientconfiguration-连接" tabindex="-1"><a class="header-anchor" href="#_4-1-通过-abstractmongoclientconfiguration-连接"><span>4.1. 通过 <em>AbstractMongoClientConfiguration</em> 连接</span></a></h3><p>在我们的第一个示例中，我们将在我们的应用程序类中扩展Spring Data MongoDB的 <em>AbstractMongoClientConfiguration</em> 类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringMongoConnectionViaClientApp</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractMongoClientConfiguration</span> <span class="token punctuation">{</span>
    <span class="token comment">// main method</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们将注入我们需要的属性：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${spring.data.mongodb.uri}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> uri<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${spring.data.mongodb.database}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> db<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要说明的是，这些属性可以硬编码。此外，它们可以使用与预期的Spring Data变量不同的名称。<strong>最重要的是，这次我们使用URI而不是单独的连接属性，这不能混合使用</strong>。因此，我们不能为此应用程序重用 <em>application.properties</em>，我们应该将其移动到其他地方。</p><p><em>AbstractMongoClientConfiguration</em> 要求我们重写 <em>getDatabaseName()</em>。这是因为URI中不需要数据库名称：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token class-name">String</span> <span class="token function">getDatabaseName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> db<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到目前为止，因为我们使用了默认的Spring Data变量，我们已经能够连接到我们的数据库。此外，如果数据库不存在，MongoDB会创建它。让我们测试一下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenClientConfig_thenInsertSucceeds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">SpringApplicationBuilder</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringApplicationBuilder</span><span class="token punctuation">(</span><span class="token class-name">SpringMongoConnectionViaClientApp</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    app<span class="token punctuation">.</span><span class="token function">web</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationType</span><span class="token punctuation">.</span><span class="token constant">NONE</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>
        <span class="token string">&quot;--spring.data.mongodb.uri=mongodb://&quot;</span> <span class="token operator">+</span> <span class="token constant">USER</span> <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> <span class="token constant">PASS</span> <span class="token operator">+</span> <span class="token string">&quot;@&quot;</span> <span class="token operator">+</span> <span class="token constant">HOST</span> <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> <span class="token constant">PORT</span> <span class="token operator">+</span> <span class="token string">&quot;/&quot;</span> <span class="token operator">+</span> <span class="token constant">DB</span><span class="token punctuation">,</span>
        <span class="token string">&quot;--spring.data.mongodb.database=&quot;</span> <span class="token operator">+</span> <span class="token constant">DB</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">assertInsertSucceeds</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们可以重写 <em>mongoClient()</em> 来获得比传统配置更多的优势。<strong>这个方法将使用我们的URI变量来构建MongoDB客户端。这样，我们可以直接引用它</strong>。例如，这使我们能够列出我们连接的所有数据库：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">MongoClient</span> <span class="token function">mongoClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">MongoClient</span> client <span class="token operator">=</span> <span class="token class-name">MongoClients</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ListDatabasesIterable</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span>\` databases <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">listDatabases</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    databases<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> client<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以这种方式配置连接对我们想要完全控制MongoDB客户端的创建非常有用。</p><h3 id="_4-2-创建自定义-mongoclientfactorybean" tabindex="-1"><a class="header-anchor" href="#_4-2-创建自定义-mongoclientfactorybean"><span>4.2. 创建自定义 <em>MongoClientFactoryBean</em></span></a></h3><p>接下来的例子中，我们将创建一个 <em>MongoClientFactoryBean</em>。<strong>这次，我们将创建一个名为 <em>custom.uri</em> 的属性来保存我们的连接配置：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringMongoConnectionViaFactoryApp</span> <span class="token punctuation">{</span>

    <span class="token comment">// main method</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">MongoClientFactoryBean</span> <span class="token function">mongo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${custom.uri}&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> uri<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">MongoClientFactoryBean</span> mongo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MongoClientFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ConnectionString</span> conn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionString</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mongo<span class="token punctuation">.</span><span class="token function">setConnectionString</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">MongoClient</span> client <span class="token operator">=</span> mongo<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        client<span class="token punctuation">.</span><span class="token function">listDatabaseNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> mongo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>这种方法，我们不需要扩展 <em>AbstractMongoClientConfiguration</em></strong>。我们还控制了我们的 <em>MongoClient</em> 的创建。例如，通过调用 <em>mongo.setSingleton(false)</em>，每次调用 <em>mongo.getObject()</em> 时我们都会得到一个新的客户端，而不是单例。</p><h3 id="_4-3-使用-mongoclientsettingsbuildercustomizer-设置连接详细信息" tabindex="-1"><a class="header-anchor" href="#_4-3-使用-mongoclientsettingsbuildercustomizer-设置连接详细信息"><span>4.3. 使用 MongoClientSettingsBuilderCustomizer 设置连接详细信息</span></a></h3><p>在我们最后一个示例中，我们将使用一个 <em>MongoClientSettingsBuilderCustomizer</em>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringMongoConnectionViaBuilderApp</span> <span class="token punctuation">{</span>

    <span class="token comment">// main method</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">MongoClientSettingsBuilderCustomizer</span> <span class="token function">customizer</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${custom.uri}&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> uri<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ConnectionString</span> connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionString</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> settings <span class="token operator">-&gt;</span> settings<span class="token punctuation">.</span><span class="token function">applyConnectionString</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用这个类来自定义我们连接的某些部分，但仍然有其余部分的自动配置。这 <strong>在我们只需要以编程方式设置一些属性时非常有用</strong>。</p><h1 id="_5-结论" tabindex="-1"><a class="header-anchor" href="#_5-结论"><span>5. 结论</span></a></h1><p>在本文中，我们检查了Spring Data MongoDB带来的不同工具。我们使用它们以不同的方式创建连接。此外，我们构建了测试用例以确保我们的配置按预期工作。最后，我们看到了配置优先级如何影响我们的连接属性。</p><p>如常，源代码可在GitHub上获得。</p><p><a href="kimi://action?name=cheer-on-kimi">给Kimi加油</a></p><p>OK</p>`,69),o=[e];function c(i,l){return a(),s("div",null,o)}const d=n(p,[["render",c],["__file","2024-07-16-Spring Data MongoDB   Configure Connection.html.vue"]]),k=JSON.parse('{"path":"/posts/baeldung/2024-07-16/2024-07-16-Spring%20Data%20MongoDB%20%20%20Configure%20Connection.html","title":"1. 概述","lang":"zh-CN","frontmatter":{"date":"2024-07-16T00:00:00.000Z","category":["Spring Data MongoDB","MongoDB"],"tag":["Spring Boot","MongoDB","Database Connection"],"head":[["meta",{"name":"keywords","content":"MongoDB, Spring Boot, Database Connection"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-16/2024-07-16-Spring%20Data%20MongoDB%20%20%20Configure%20Connection.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"1. 概述"}],["meta",{"property":"og:description","content":"1. 概述 在本教程中，我们将学习在Spring Boot应用程序中配置MongoDB连接的不同方法。我们将利用Spring Data MongoDB项目提供的强大的功能。通过利用Spring Data MongoDB项目，我们可以使用丰富的工具和功能，简化在Spring环境中使用MongoDB数据库的过程。 通过深入研究Spring的灵活配置选项，我..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-16T10:08:08.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Spring Boot"}],["meta",{"property":"article:tag","content":"MongoDB"}],["meta",{"property":"article:tag","content":"Database Connection"}],["meta",{"property":"article:published_time","content":"2024-07-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-16T10:08:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"1. 概述\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-16T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-16T10:08:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"1. 概述 在本教程中，我们将学习在Spring Boot应用程序中配置MongoDB连接的不同方法。我们将利用Spring Data MongoDB项目提供的强大的功能。通过利用Spring Data MongoDB项目，我们可以使用丰富的工具和功能，简化在Spring环境中使用MongoDB数据库的过程。 通过深入研究Spring的灵活配置选项，我..."},"headers":[{"level":3,"title":"3.1. 使用 application.properties","slug":"_3-1-使用-application-properties","link":"#_3-1-使用-application-properties","children":[]},{"level":3,"title":"3.2. 使用命令行参数覆盖属性","slug":"_3-2-使用命令行参数覆盖属性","link":"#_3-2-使用命令行参数覆盖属性","children":[]},{"level":3,"title":"3.3. 使用连接URI属性","slug":"_3-3-使用连接uri属性","link":"#_3-3-使用连接uri属性","children":[]},{"level":3,"title":"4.1. 通过 AbstractMongoClientConfiguration 连接","slug":"_4-1-通过-abstractmongoclientconfiguration-连接","link":"#_4-1-通过-abstractmongoclientconfiguration-连接","children":[]},{"level":3,"title":"4.2. 创建自定义 MongoClientFactoryBean","slug":"_4-2-创建自定义-mongoclientfactorybean","link":"#_4-2-创建自定义-mongoclientfactorybean","children":[]},{"level":3,"title":"4.3. 使用 MongoClientSettingsBuilderCustomizer 设置连接详细信息","slug":"_4-3-使用-mongoclientsettingsbuildercustomizer-设置连接详细信息","link":"#_4-3-使用-mongoclientsettingsbuildercustomizer-设置连接详细信息","children":[]}],"git":{"createdTime":1721124488000,"updatedTime":1721124488000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":8.17,"words":2451},"filePathRelative":"posts/baeldung/2024-07-16/2024-07-16-Spring Data MongoDB   Configure Connection.md","localizedDate":"2024年7月16日","excerpt":"<hr>\\n<h1>1. 概述</h1>\\n<p>在本教程中，<strong>我们将学习在Spring Boot应用程序中配置MongoDB连接的不同方法</strong>。我们将利用Spring Data MongoDB项目提供的强大的功能。通过利用Spring Data MongoDB项目，我们可以使用丰富的工具和功能，简化在Spring环境中使用MongoDB数据库的过程。</p>\\n<p>通过深入研究Spring的灵活配置选项，我们将探索建立数据库连接的各种方法。通过动手示例，我们将为每种方法创建单独的应用程序，使我们能够选择最适合我们特定需求的配置方法。</p>\\n<h1>2. 测试我们的连接</h1>","autoDesc":true}');export{d as comp,k as data};
