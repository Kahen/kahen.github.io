import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-CbPcg273.js";const e={},p=t('<h1 id="resilience4j-在-spring-boot-中的使用指南" tabindex="-1"><a class="header-anchor" href="#resilience4j-在-spring-boot-中的使用指南"><span>Resilience4j 在 Spring Boot 中的使用指南</span></a></h1><p>Resilience4j 是一个轻量级的容错库，它为 web 应用程序提供了多种容错和稳定性模式。</p><p>在本教程中，我们将<strong>学习如何将这个库与一个简单的 Spring Boot 应用程序一起使用</strong>。</p><h2 id="_2-搭建环境" tabindex="-1"><a class="header-anchor" href="#_2-搭建环境"><span>2. 搭建环境</span></a></h2><p>在这一部分，我们将专注于<strong>为我们的 Spring Boot 项目设置关键方面</strong>。</p><h3 id="_2-1-maven-依赖" tabindex="-1"><a class="header-anchor" href="#_2-1-maven-依赖"><span>2.1. Maven 依赖</span></a></h3><p>首先，我们需要添加 <em>spring-boot-starter-web</em> 依赖来引导一个简单的 web 应用程序：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`````org.springframework.boot`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````spring-boot-starter-web`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````\n`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，<strong>我们需要 <em>resilience4j-spring-boot2</em> 和 <em>spring-boot-starter-aop</em> 依赖，以便在我们的 Spring Boot 应用程序中使用 Resilience-4j 库的注解</strong>：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`````io.github.resilience4j`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````resilience4j-spring-boot2`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````\n`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`````\n\n`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`````org.springframework.boot`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````spring-boot-starter-aop`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````\n`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，我们还需要添加 <em>spring-boot-starter-actuator</em> 依赖，以便通过一组暴露的端点监控应用程序的当前状态：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`````org.springframework.boot`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````spring-boot-starter-actuator`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````\n`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们将添加 <em>wiremock-jre8</em> 依赖，因为它将帮助我们使用模拟 HTTP 服务器测试我们的 REST API：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>`````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>`````com.github.tomakehurst`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>`````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````wiremock-jre8`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>`test`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>`\n`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>`````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-restcontroller-和外部-api-调用者" tabindex="-1"><a class="header-anchor" href="#_2-2-restcontroller-和外部-api-调用者"><span>2.2. RestController 和外部 API 调用者</span></a></h3><p>在使用 Resilience4j 库的不同特性时，我们的 web 应用程序需要与外部 API 交互。因此，让我们继续添加一个 <em>RestTemplate</em> 的 bean，这将帮助我们进行 API 调用：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplateBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rootUri</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost:9090&quot;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们将定义 <em>ExternalAPICaller</em> 类作为一个 <em>Component,</em> 并使用 <em>restTemplate</em> bean 作为一个成员：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExternalAPICaller</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Autowired</span>\n    <span class="token keyword">public</span> <span class="token class-name">ExternalAPICaller</span><span class="token punctuation">(</span><span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>restTemplate <span class="token operator">=</span> restTemplate<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们将<strong>定义 <em>ResilientAppController</em> 类，它公开 REST API 端点，并在内部使用 <em>ExternalAPICaller</em> bean 调用外部 API</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>\n<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/api/&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResilientAppController</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ExternalAPICaller</span> externalAPICaller<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-执行器端点" tabindex="-1"><a class="header-anchor" href="#_2-3-执行器端点"><span>2.3. 执行器端点</span></a></h3><p>我们可以通过 Spring Boot 执行器公开健康端点，以了解应用程序在任何给定时间的确切状态。</p><p>因此，让我们将配置添加到 <em>application.properties</em> 文件中，并启用端点：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">management.endpoints.web.exposure.include</span><span class="token punctuation">=</span><span class="token value attr-value">*</span>\n<span class="token key attr-name">management.endpoint.health.show-details</span><span class="token punctuation">=</span><span class="token value attr-value">always</span>\n\n<span class="token key attr-name">management.health.circuitbreakers.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>\n<span class="token key attr-name">management.health.ratelimiters.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，根据需要，我们将在同一个 <em>application.properties</em> 文件中添加特定于功能的配置。</p><h3 id="_2-4-单元测试" tabindex="-1"><a class="header-anchor" href="#_2-4-单元测试"><span>2.4. 单元测试</span></a></h3><p>我们的 web 应用程序将在现实世界场景中调用外部服务。然而，我们可以通过使用 <em>WireMockExtension</em> 类启动外部服务来<strong>模拟这样一个运行中的服务的存在</strong>。</p><p>因此，让我们在 <em>ResilientAppControllerUnitTest</em> 类中定义 <em>EXTERNAL_SERVICE</em> 作为静态成员：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>webEnvironment <span class="token operator">=</span> <span class="token class-name">SpringBootTest<span class="token punctuation">.</span>WebEnvironment</span><span class="token punctuation">.</span><span class="token constant">RANDOM_PORT</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">ResilientAppControllerUnitTest</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@RegisterExtension</span>\n    <span class="token keyword">static</span> <span class="token class-name">WireMockExtension</span> <span class="token constant">EXTERNAL_SERVICE</span> <span class="token operator">=</span> <span class="token class-name">WireMockExtension</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span><span class="token class-name">WireMockConfiguration</span><span class="token punctuation">.</span><span class="token function">wireMockConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">port</span><span class="token punctuation">(</span><span class="token number">9090</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们将添加一个 <em>TestRestTemplate</em> 的实例来调用 API：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>\n<span class="token keyword">private</span> <span class="token class-name">TestRestTemplate</span> restTemplate<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5-异常处理器" tabindex="-1"><a class="header-anchor" href="#_2-5-异常处理器"><span>2.5. 异常处理器</span></a></h3><p>Resilience4j 库将通过抛出异常来保护服务资源，这取决于上下文中的容错模式。然而，这些异常应该转换为对客户端具有有意义状态代码的 HTTP 响应。</p><p>因此，我们将<strong>定义 <em>ApiExceptionHandler</em> 类来持有不同异常的处理程序</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ControllerAdvice</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApiExceptionHandler</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将在探索不同的容错模式时，在此类中添加处理程序。</p><h2 id="_3-断路器" tabindex="-1"><a class="header-anchor" href="#_3-断路器"><span>3. 断路器</span></a></h2><p><strong>断路器模式通过限制上游服务在部分或完全停机期间调用下游服务来保护下游服务</strong>。</p><p>让我们首先公开 <em>/api/circuit-breaker</em> 端点并添加 <em>@CircuitBreaker</em> 注解：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/circuit-breaker&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@CircuitBreaker</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;CircuitBreakerService&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">circuitBreakerApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> externalAPICaller<span class="token punctuation">.</span><span class="token function">callApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如需要，我们还需要在 <em>ExternalAPICaller</em> 类中定义 <em>callApi()</em> 方法来调用外部端点 <em>/api/external</em>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">callApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">&quot;/api/external&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们将在 <em>application.properties</em> 文件中添加断路器的配置：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">resilience4j.circuitbreaker.instances.CircuitBreakerService.failure-rate-threshold</span><span class="token punctuation">=</span><span class="token value attr-value">50</span>\n<span class="token key attr-name">resilience4j.circuitbreaker.instances.CircuitBreakerService.minimum-number-of-calls</span><span class="token punctuation">=</span><span class="token value attr-value">5</span>\n<span class="token key attr-name">resilience4j.circuitbreaker.instances.CircuitBreakerService.automatic-transition-from-open-to-half-open-enabled</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>\n<span class="token key attr-name">resilience4j.circuitbreaker.instances.CircuitBreakerService.wait-duration-in-open-state</span><span class="token punctuation">=</span><span class="token value attr-value">5s</span>\n<span class="token key attr-name">resilience4j.circuitbreaker.instances.CircuitBreakerService.permitted-number-of-calls-in-half-open-state</span><span class="token punctuation">=</span><span class="token value attr-value">3</span>\n<span class="token key attr-name">resilience4j.circuitbreaker.instances.CircuitBreakerService.sliding-window-size</span><span class="token punctuation">=</span><span class="token value attr-value">10</span>\n<span class="token key attr-name">resilience4j.circuitbreaker.instances.CircuitBreakerService.sliding-window-type</span><span class="token punctuation">=</span><span class="token value attr-value">count_based</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>本质上，配置将允许在封闭状态下对服务的调用失败率达到 50%，之后它将打开电路并开始用 <em>CallNotPermittedException</em> 拒绝请求。因此，最好在 <em>ApiExceptionHandler</em> 类中添加一个处理此异常的处理器：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">CallNotPermittedException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">SERVICE_UNAVAILABLE</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleCallNotPermittedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们将通过使用 <em>EXTERNAL_SERVICE</em> 模拟下游服务停机的情况来测试 <em>/api/circuit-breaker</em> API 端点：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testCircuitBreaker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token constant">EXTERNAL_SERVICE</span><span class="token punctuation">.</span><span class="token function">stubFor</span><span class="token punctuation">(</span><span class="token class-name">WireMock</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/api/external&quot;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">willReturn</span><span class="token punctuation">(</span><span class="token function">serverError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n          <span class="token class-name">ResponseEntity</span> response <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForEntity</span><span class="token punctuation">(</span><span class="token string">&quot;/api/circuit-breaker&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token function">assertThat</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">INTERNAL_SERVER_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n          <span class="token class-name">ResponseEntity</span> response <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForEntity</span><span class="token punctuation">(</span><span class="token string">&quot;/api/circuit-breaker&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token function">assertThat</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">SERVICE_UNAVAILABLE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token constant">EXTERNAL_SERVICE</span><span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token function">getRequestedFor</span><span class="token punctuation">(</span><span class="token function">urlEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;/api/external&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到，前五次调用失败，因为下游服务处于停机状态。之后，电路切换到打开状态，随后的五次尝试被拒绝，没有实际调用底层 API，而是返回了 <em>503</em> HTTP 状态代码。</p><h2 id="_4-重试" tabindex="-1"><a class="header-anchor" href="#_4-重试"><span>4. 重试</span></a></h2><p><strong>重试模式通过从瞬时问题中恢复，为系统提供弹性</strong>。让我们首先添加带有 <em>@Retry</em> 注解的 <em>/api/retry</em> API 端点：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/retry&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@Retry</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;retryApi&quot;</span><span class="token punctuation">,</span> fallbackMethod <span class="token operator">=</span> <span class="token string">&quot;fallbackAfterRetry&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">retryApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> externalAPICaller<span class="token punctuation">.</span><span class="token function">callApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可选地，我们可以<strong>在所有重试尝试失败时提供回退机制</strong>。在这种情况下，我们提供了 <em>fallbackAfterRetry</em> 作为回退方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">fallbackAfterRetry</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;all retries have exhausted&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们将更新 <em>application.properties</em> 文件以添加将管理重试行为的配置：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">resilience4j.retry.instances.retryApi.max-attempts</span><span class="token punctuation">=</span><span class="token value attr-value">3</span>\n<span class="token key attr-name">resilience4j.retry.instances.retryApi.waitduration</span><span class="token punctuation">=</span><span class="token value attr-value">1s</span>\n<span class="token key attr-name">resilience4j.retry.metrics.legacy.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>\n<span class="token key attr-name">resilience4j.retry.metrics.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上所示，我们计划最多重试三次，每次延迟 <em>1s</em>。</p><p>最后，我们将测试 <em>/api/retry</em> API 端点的重试行为：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRetry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token constant">EXTERNAL_SERVICE</span><span class="token punctuation">.</span><span class="token function">stubFor</span><span class="token punctuation">(</span><span class="token class-name">WireMock</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/api/external&quot;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">willReturn</span><span class="token punctuation">(</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">ResponseEntity</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>````` response1 <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForEntity</span><span class="token punctuation">(</span><span class="token string">&quot;/api/retry&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token constant">EXTERNAL_SERVICE</span><span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">getRequestedFor</span><span class="token punctuation">(</span><span class="token function">urlEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;/api/external&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token constant">EXTERNAL_SERVICE</span><span class="token punctuation">.</span><span class="token function">resetRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token constant">EXTERNAL_SERVICE</span><span class="token punctuation">.</span><span class="token function">stubFor</span><span class="token punctuation">(</span><span class="token class-name">WireMock</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/api/external&quot;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">willReturn</span><span class="token punctuation">(</span><span class="token function">serverError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">ResponseEntity</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>````` response2 <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForEntity</span><span class="token punctuation">(</span><span class="token string">&quot;/api/retry&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>response2<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;all retries have exhausted&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token constant">EXTERNAL_SERVICE</span><span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token function">getRequestedFor</span><span class="token punctuation">(</span><span class="token function">urlEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;/api/external&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到，在第一种情况下，没有出现问题，所以一次尝试就足够了。另一方面，当出现问题时，有三次尝试，之后 API 通过回退机制响应。</p><h2 id="_5-时间限制器" tabindex="-1"><a class="header-anchor" href="#_5-时间限制器"><span>5. 时间限制器</span></a></h2><p>我们可以<strong>使用时间限制器模式为对外部系统进行的异步调用设置阈值超时值</strong>。</p><p>让我们添加 <em>/api/time-limiter</em> API 端点，它在内部调用一个慢速 API：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/time-limiter&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@TimeLimiter</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;timeLimiterApi&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">CompletableFuture</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>````` <span class="token function">timeLimiterApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span>externalAPICaller<span class="token operator">::</span><span class="token function">callApiWithDelay</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们将通过在 <em>callApiWithDelay()</em> 方法中添加睡眠时间来模拟外部 API 调用的延迟：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">callApiWithDelay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> result <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">&quot;/api/external&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ignore<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们需要在 <em>application.properties</em> 文件中为 <em>timeLimiterApi</em> 提供配置：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">resilience4j.timelimiter.metrics.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>\n<span class="token key attr-name">resilience4j.timelimiter.instances.timeLimiterApi.timeout-duration</span><span class="token punctuation">=</span><span class="token value attr-value">2s</span>\n<span class="token key attr-name">resilience4j.timelimiter.instances.timeLimiterApi.cancel-running-future</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到阈值设置为 2s。之后，Resilience4j 库将内部取消异步操作，并抛出 <em>TimeoutException</em>。因此，我们将在 <em>ApiExceptionHandler</em> 类中<strong>添加一个处理器，以返回带有 <em>408</em> HTTP 状态代码的 API 响应</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">TimeoutException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">REQUEST_TIMEOUT</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleTimeoutException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们将验证 <em>/api/time-limiter</em> API 端点配置的时间限制器模式：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTimeLimiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token constant">EXTERNAL_SERVICE</span><span class="token punctuation">.</span><span class="token function">stubFor</span><span class="token punctuation">(</span><span class="token class-name">WireMock</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/api/external&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">willReturn</span><span class="token punctuation">(</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">ResponseEntity</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>````` response <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForEntity</span><span class="token punctuation">(</span><span class="token string">&quot;/api/time-limiter&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">assertThat</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">REQUEST_TIMEOUT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token constant">EXTERNAL_SERVICE</span><span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">getRequestedFor</span><span class="token punctuation">(</span><span class="token function">urlEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;/api/external&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如预期的那样，由于下游 API 调用被设置为超过五秒钟才能完成，我们见证了 API 调用的超时。</p><h2 id="_6-舱壁" tabindex="-1"><a class="header-anchor" href="#_6-舱壁"><span>6. 舱壁</span></a></h2><p><strong>舱壁模式限制了对外部服务的最大并发调用数量</strong>。</p><p>让我们首先添加带有 <em>@Bulkhead</em> 注解的 <em>/api/bulkhead</em> API 端点：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/bulkhead&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@Bulkhead</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;bulkheadApi&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">bulkheadApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> externalAPICaller<span class="token punctuation">.</span><span class="token function">callApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们将在 <em>application.properties</em> 文件中定义控制舱壁功能的配置：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">resilience4j.bulkhead.metrics.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>\n<span class="token key attr-name">resilience4j.bulkhead.instances.bulkheadApi.max-concurrent-calls</span><span class="token punctuation">=</span><span class="token value attr-value">3</span>\n<span class="token key attr-name">resilience4j.bulkhead.instances.bulkheadApi.max-wait-duration</span><span class="token punctuation">=</span><span class="token value attr-value">1</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了这个，我们想要将并发调用的最大数量限制为三个，以便如果舱壁已满，每个线程只能等待 <em>1ms</em>。之后，请求将被拒绝，并抛出 <em>BulkheadFullException</em> 异常。我们还想向客户端返回一个有意义的 HTTP 状态代码，因此我们将在 <em>ApiExceptionHandler</em> 类中添加一个异常处理器：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">BulkheadFullException</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">BANDWIDTH_LIMIT_EXCEEDED</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleBulkheadFullException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们将通过并行调用五个请求来测试舱壁行为：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">testBulkhead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n  <span class="token constant">EXTERNAL_SERVICE</span><span class="token punctuation">.</span><span class="token function">stubFor</span><span class="token punctuation">(</span><span class="token class-name">WireMock</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/api/external&quot;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">willReturn</span><span class="token punctuation">(</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token class-name">Map</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>`` responseStatusCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token class-name">CountDownLatch</span> latch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n          <span class="token class-name">ResponseEntity</span> response <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForEntity</span><span class="token punctuation">(</span><span class="token string">&quot;/api/bulkhead&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token keyword">int</span> statusCode <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getStatusCodeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          responseStatusCount<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>statusCode<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          latch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  latch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> responseStatusCount<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Response statuses: &quot;</span> <span class="token operator">+</span> responseStatusCount<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">assertTrue</span><span class="token punctuation">(</span>responseStatusCount<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token constant">BANDWIDTH_LIMIT_EXCEEDED</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">assertTrue</span><span class="token punctuation">(</span>responseStatusCount<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token constant">OK</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token constant">EXTERNAL_SERVICE</span><span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token function">getRequestedFor</span><span class="token punctuation">(</span><span class="token function">urlEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;/api/external&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到<strong>只有三个请求成功，而其他请求被拒绝，并返回了 <em>BANDWIDTH_LIMIT_EXCEEDED</em> HTTP 状态代码</strong>。</p><h2 id="_7-限流器" tabindex="-1"><a class="header-anchor" href="#_7-限流器"><span>7. 限流器</span></a></h2><p><strong>限流器模式限制了对资源的请求速率</strong>。</p><p>让我们首先添加带有 <em>@RateLimiter</em> 注解的 <em>/api/rate-limiter</em> API 端点：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/rate-limiter&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@RateLimiter</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;rateLimiterApi&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">rateLimitApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> externalAPICaller<span class="token punctuation">.</span><span class="token function">callApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们将在 <em>application.properties</em> 文件中定义限流器的配置：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">resilience4j.ratelimiter.metrics.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>\n<span class="token key attr-name">resilience4j.ratelimiter.instances.rateLimiterApi.register-health-indicator</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>\n<span class="token key attr-name">resilience4j.ratelimiter.instances.rateLimiterApi.limit-for-period</span><span class="token punctuation">=</span><span class="token value attr-value">5</span>\n<span class="token key attr-name">resilience4j.ratelimiter.instances.rateLimiterApi.limit-refresh-period</span><span class="token punctuation">=</span><span class="token value attr-value">60s</span>\n<span class="token key attr-name">resilience4j.ratelimiter.instances.rateLimiterApi.timeout-duration</span><span class="token punctuation">=</span><span class="token value attr-value">0s</span>\n<span class="token key attr-name">resilience4j.ratelimiter.instances.rateLimiterApi.allow-health-indicator-to-fail</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>\n<span class="token key attr-name">resilience4j.ratelimiter.instances.rateLimiterApi.subscribe-for-events</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>\n<span class="token key attr-name">resilience4j.ratelimiter.instances.rateLimiterApi.event-consumer-buffer-size</span><span class="token punctuation">=</span><span class="token value attr-value">50</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了这个配置，我们想要将 API 调用速率限制为 <em>5</em> <em>req/min</em>，不等待。<strong>达到允许速率的阈值后，请求将被拒绝，并抛出 <em>RequestNotPermitted</em> 异常</strong>。因此，我们将在 <em>ApiExceptionHandler</em> 类中定义一个处理器，将其转换为有意义的 HTTP 状态响应代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">RequestNotPermitted</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">TOO_MANY_REQUESTS</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleRequestNotPermitted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们将用 <em>50</em> 个请求测试我们的限流 API 端点：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRatelimiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token constant">EXTERNAL_SERVICE</span><span class="token punctuation">.</span><span class="token function">stubFor</span><span class="token punctuation">(</span><span class="token class-name">WireMock</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/api/external&quot;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">willReturn</span><span class="token punctuation">(</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Map</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>`` responseStatusCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n          <span class="token class-name">ResponseEntity</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>````` response <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForEntity</span><span class="token punctuation">(</span><span class="token string">&quot;/api/rate-limiter&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token keyword">int</span> statusCode <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getStatusCodeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          responseStatusCount<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>statusCode<span class="token punctuation">,</span> responseStatusCount<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>statusCode<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> responseStatusCount<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertTrue</span><span class="token punctuation">(</span>responseStatusCount<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token constant">TOO_MANY_REQUESTS</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">assertTrue</span><span class="token punctuation">(</span>responseStatusCount<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token constant">OK</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token constant">EXTERNAL_SERVICE</span><span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token function">getRequestedFor</span><span class="token punctuation">(</span><span class="token function">urlEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;/api/external&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如预期的那样，<strong>只有五个请求成功，而所有其他请求都以 <em>TOO_MANY_REQUESTS</em> HTTP 状态代码失败</strong>。</p><h2 id="_8-执行器端点" tabindex="-1"><a class="header-anchor" href="#_8-执行器端点"><span>8. 执行器端点</span></a></h2><p>我们配置了应用程序以支持执行器端点，用于监控目的。使用这些端点，我们可以使用一个或多个配置的容错模式来确定应用程序随时间的行为。</p><p>首先，我们可以通过向 <em>/actuator</em> 端点发送 GET 请求来<strong>找到所有暴露的端点</strong>：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code>http<span class="token operator">:</span><span class="token comment">//localhost:8080/actuator/</span>\n<span class="token punctuation">{</span>\n    <span class="token property">&quot;_links&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;self&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span>...<span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;bulkheads&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span>...<span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;circuitbreakers&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span>...<span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;ratelimiters&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span>...<span class="token punctuation">}</span><span class="token punctuation">,</span>\n        ...\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们</p>',101),o=[p];function c(i,l){return a(),s("div",null,o)}const k=n(e,[["render",c],["__file","2024-07-13-Guide to Resilience4j With Spring Boot.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-13/2024-07-13-Guide%20to%20Resilience4j%20With%20Spring%20Boot.html","title":"Resilience4j 在 Spring Boot 中的使用指南","lang":"zh-CN","frontmatter":{"date":"2024-07-13T00:00:00.000Z","category":["Spring Boot","Resilience4j"],"tag":["Spring Boot","Resilience4j","容错","断路器","重试"],"head":[["meta",{"name":"keywords","content":"Spring Boot, Resilience4j, 容错, 断路器, 重试"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-13/2024-07-13-Guide%20to%20Resilience4j%20With%20Spring%20Boot.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Resilience4j 在 Spring Boot 中的使用指南"}],["meta",{"property":"og:description","content":"Resilience4j 在 Spring Boot 中的使用指南 Resilience4j 是一个轻量级的容错库，它为 web 应用程序提供了多种容错和稳定性模式。 在本教程中，我们将学习如何将这个库与一个简单的 Spring Boot 应用程序一起使用。 2. 搭建环境 在这一部分，我们将专注于为我们的 Spring Boot 项目设置关键方面。 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-13T15:43:19.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Spring Boot"}],["meta",{"property":"article:tag","content":"Resilience4j"}],["meta",{"property":"article:tag","content":"容错"}],["meta",{"property":"article:tag","content":"断路器"}],["meta",{"property":"article:tag","content":"重试"}],["meta",{"property":"article:published_time","content":"2024-07-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-13T15:43:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Resilience4j 在 Spring Boot 中的使用指南\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-13T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-13T15:43:19.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Resilience4j 在 Spring Boot 中的使用指南 Resilience4j 是一个轻量级的容错库，它为 web 应用程序提供了多种容错和稳定性模式。 在本教程中，我们将学习如何将这个库与一个简单的 Spring Boot 应用程序一起使用。 2. 搭建环境 在这一部分，我们将专注于为我们的 Spring Boot 项目设置关键方面。 ..."},"headers":[{"level":2,"title":"2. 搭建环境","slug":"_2-搭建环境","link":"#_2-搭建环境","children":[{"level":3,"title":"2.1. Maven 依赖","slug":"_2-1-maven-依赖","link":"#_2-1-maven-依赖","children":[]},{"level":3,"title":"2.2. RestController 和外部 API 调用者","slug":"_2-2-restcontroller-和外部-api-调用者","link":"#_2-2-restcontroller-和外部-api-调用者","children":[]},{"level":3,"title":"2.3. 执行器端点","slug":"_2-3-执行器端点","link":"#_2-3-执行器端点","children":[]},{"level":3,"title":"2.4. 单元测试","slug":"_2-4-单元测试","link":"#_2-4-单元测试","children":[]},{"level":3,"title":"2.5. 异常处理器","slug":"_2-5-异常处理器","link":"#_2-5-异常处理器","children":[]}]},{"level":2,"title":"3. 断路器","slug":"_3-断路器","link":"#_3-断路器","children":[]},{"level":2,"title":"4. 重试","slug":"_4-重试","link":"#_4-重试","children":[]},{"level":2,"title":"5. 时间限制器","slug":"_5-时间限制器","link":"#_5-时间限制器","children":[]},{"level":2,"title":"6. 舱壁","slug":"_6-舱壁","link":"#_6-舱壁","children":[]},{"level":2,"title":"7. 限流器","slug":"_7-限流器","link":"#_7-限流器","children":[]},{"level":2,"title":"8. 执行器端点","slug":"_8-执行器端点","link":"#_8-执行器端点","children":[]}],"git":{"createdTime":1720885399000,"updatedTime":1720885399000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":8.28,"words":2485},"filePathRelative":"posts/baeldung/2024-07-13/2024-07-13-Guide to Resilience4j With Spring Boot.md","localizedDate":"2024年7月13日","excerpt":"\\n<p>Resilience4j 是一个轻量级的容错库，它为 web 应用程序提供了多种容错和稳定性模式。</p>\\n<p>在本教程中，我们将<strong>学习如何将这个库与一个简单的 Spring Boot 应用程序一起使用</strong>。</p>\\n<h2>2. 搭建环境</h2>\\n<p>在这一部分，我们将专注于<strong>为我们的 Spring Boot 项目设置关键方面</strong>。</p>\\n<h3>2.1. Maven 依赖</h3>\\n<p>首先，我们需要添加 <em>spring-boot-starter-web</em> 依赖来引导一个简单的 web 应用程序：</p>","autoDesc":true}');export{k as comp,d as data};
