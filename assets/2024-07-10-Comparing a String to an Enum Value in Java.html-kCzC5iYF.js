import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-DWhzy7sT.js";const p={},e=t('<h1 id="java中将字符串与枚举值进行比较" tabindex="-1"><a class="header-anchor" href="#java中将字符串与枚举值进行比较"><span>Java中将字符串与枚举值进行比较</span></a></h1><p>Java在版本5中引入了枚举，枚举提供了一种安全和简洁的方式来管理常量。</p><p>在这篇快速教程中，我们将探讨如何将字符串与枚举对象进行比较。</p><h2 id="_2-问题介绍" tabindex="-1"><a class="header-anchor" href="#_2-问题介绍"><span>2. 问题介绍</span></a></h2><p>首先，让我们看一个枚举的例子：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">enum</span> <span class="token class-name">Weekday</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Mon</span><span class="token punctuation">(</span><span class="token string">&quot;Monday&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token class-name">Tue</span><span class="token punctuation">(</span><span class="token string">&quot;Tuesday&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token class-name">Wed</span><span class="token punctuation">(</span><span class="token string">&quot;Wednesday&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token class-name">Thu</span><span class="token punctuation">(</span><span class="token string">&quot;Thursday&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token class-name">Fri</span><span class="token punctuation">(</span><span class="token string">&quot;Friday&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token class-name">Sat</span><span class="token punctuation">(</span><span class="token string">&quot;Saturday&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">private</span> <span class="token class-name">String</span> fullName<span class="token punctuation">;</span>\n\n    <span class="token class-name">Weekday</span><span class="token punctuation">(</span><span class="token class-name">String</span> fullName<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>fullName <span class="token operator">=</span> fullName<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> fullName<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上代码所示，Weekday枚举包含了六个以每个星期日缩写命名的常量。此外，它还有一个fullName属性，用于存储每个星期日的完整名称。</p><p>现在假设我们有一个字符串s。那么将s与枚举实例进行比较可以有两种可能性：</p><ul><li>将s与枚举实例名称进行比较</li><li>将s与枚举实例的一个字符串属性进行比较</li></ul><p>本教程涵盖了这两种场景。此外，我们将执行不区分大小写的比较。</p><p>为了简化，我们将使用单元测试断言来验证比较结果。</p><p>接下来，让我们创建两个字符串作为输入：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SAT</span> <span class="token operator">=</span> <span class="token string">&quot;sAt&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SATURDAY</span> <span class="token operator">=</span> <span class="token string">&quot;sAtuRdAy&quot;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将使用SAT字符串进行枚举名称比较，使用SATURDAY变量进行枚举属性比较。为了完整性，让我们再创建两个字符串用于负测试：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">TYPO_FRI</span> <span class="token operator">=</span> <span class="token string">&quot;ffri&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">TYPO_FRIDAY</span> <span class="token operator">=</span> <span class="token string">&quot;ffriday&quot;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在了解了如何比较字符串和枚举实例之后，我们还将讨论这些比较的常见用例。那么接下来，让我们在实际中看看它们。</p><h2 id="_3-将给定的字符串与枚举实例的名称或属性进行比较" tabindex="-1"><a class="header-anchor" href="#_3-将给定的字符串与枚举实例的名称或属性进行比较"><span>3. 将给定的字符串与枚举实例的名称或属性进行比较</span></a></h2><p>首先，让我们看看将给定的字符串与枚举实例的名称进行比较。</p><p><strong>所有枚举类都继承了抽象的java.lang.Enum类</strong>。这个抽象类定义了name()方法，用于返回枚举实例的名称：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Enum</span>`<span class="token operator">&lt;</span><span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">Enum</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span>``<span class="token operator">&gt;</span> <span class="token keyword">implements</span> <span class="token class-name">Constable</span><span class="token punctuation">,</span> <span class="token class-name">Comparable</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span>`<span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，我们可以使用name()方法来获取枚举常量的名称，并将其与给定的字符串进行比较：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token constant">SAT</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token class-name">Sat</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token constant">TYPO_FRI</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token class-name">Fri</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如上测试所示，我们使用了equalsIgnoreCase()方法进行不区分大小写的比较。</p><p>我们提到，根据需求，我们可能想要将字符串与枚举常量的属性进行比较，例如Weekday中的fullName属性。这并不困难，因为Weekday枚举有一个getter方法来获取属性的值：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token constant">SATURDAY</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token class-name">Sat</span><span class="token punctuation">.</span><span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token constant">TYPO_FRI</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token class-name">Fri</span><span class="token punctuation">.</span><span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>所以，正如我们所看到的，无论哪种场景，将字符串与枚举进行比较都是相当直接的。</p><p>但我们在实践中何时需要这种比较呢？让我们通过例子来讨论这个问题。</p><h2 id="_4-通过名称和属性查找枚举实例" tabindex="-1"><a class="header-anchor" href="#_4-通过名称和属性查找枚举实例"><span>4. 通过名称和属性查找枚举实例</span></a></h2><p>需要比较的一个常见用例是<strong>通过给定的字符串确定枚举实例</strong>。例如，我们想通过字符串“SAT”找到Weekday.Sat常量。</p><p>接下来，让我们在Weekday枚举中添加两个“find”方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">enum</span> <span class="token class-name">Weekday</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Mon</span><span class="token punctuation">(</span><span class="token string">&quot;Monday&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n\n    <span class="token keyword">static</span> <span class="token class-name">Optional</span>```````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Weekday</span><span class="token punctuation">&gt;</span></span>``````` <span class="token function">byNameIgnoreCase</span><span class="token punctuation">(</span><span class="token class-name">String</span> givenName<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>it <span class="token operator">-&gt;</span> it<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>givenName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">static</span> <span class="token class-name">Optional</span>```````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Weekday</span><span class="token punctuation">&gt;</span></span>``````` <span class="token function">byFullNameIgnoreCase</span><span class="token punctuation">(</span><span class="token class-name">String</span> givenFullName<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>it <span class="token operator">-&gt;</span> it<span class="token punctuation">.</span>fullName<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>givenFullName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这两个方法的实现非常相似。一个是按名称查找，另一个是按fullName属性查找。</p><p>我们在实现中使用了Stream API。首先，values()是一个静态方法。此外，<strong>它在任何枚举类型中都可用，并返回相应枚举类型的所有枚举常量的数组</strong>。因此，Weekday.values()给我们提供了所有Weekday常量。</p><p>然后，我们将常量数组转换为Stream对象。接下来，我们将不区分大小写的比较逻辑作为lambda表达式传递给filter()方法。</p><p>由于我们不知道filter()方法是否可以找到一个匹配的枚举实例，<strong>我们返回findAny()方法的结果，这是一个Optional<code>&lt;Weekday&gt;</code>对象</strong>。</p><p>方法调用者可以通过检查这个Optional结果来决定下一步的操作。接下来，让我们看看它在测试方法中的工作方式：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Optional</span>```````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Weekday</span><span class="token punctuation">&gt;</span></span>``````` optResult <span class="token operator">=</span> <span class="token class-name">Weekday</span><span class="token punctuation">.</span><span class="token function">byNameIgnoreCase</span><span class="token punctuation">(</span><span class="token constant">SAT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">assertTrue</span><span class="token punctuation">(</span>optResult<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token class-name">Sat</span><span class="token punctuation">,</span> optResult<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">Optional</span>```````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Weekday</span><span class="token punctuation">&gt;</span></span>``````` optResult2 <span class="token operator">=</span> <span class="token class-name">Weekday</span><span class="token punctuation">.</span><span class="token function">byNameIgnoreCase</span><span class="token punctuation">(</span><span class="token constant">TYPO_FRI</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">assertFalse</span><span class="token punctuation">(</span>optResult2<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上测试所示，<strong>只有当byNameIgnoreCase()找到一个常量时，Optional结果的isPresent()才会返回true</strong>。</p><p>对于“通过属性查找枚举常量”的场景，情况将非常类似。让我们为byFullNameIgnoreCase()方法创建一个测试以确保完整性：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Optional</span>```````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Weekday</span><span class="token punctuation">&gt;</span></span>``````` optResult <span class="token operator">=</span> <span class="token class-name">Weekday</span><span class="token punctuation">.</span><span class="token function">byFullNameIgnoreCase</span><span class="token punctuation">(</span><span class="token constant">SATURDAY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">assertTrue</span><span class="token punctuation">(</span>optResult<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token class-name">Sat</span><span class="token punctuation">,</span> optResult<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">Optional</span>```````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Weekday</span><span class="token punctuation">&gt;</span></span>``````` optResult2 <span class="token operator">=</span> <span class="token class-name">Weekday</span><span class="token punctuation">.</span><span class="token function">byFullNameIgnoreCase</span><span class="token punctuation">(</span><span class="token constant">TYPO_FRIDAY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">assertFalse</span><span class="token punctuation">(</span>optResult2<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-结论" tabindex="-1"><a class="header-anchor" href="#_5-结论"><span>5. 结论</span></a></h2><p>在这篇文章中，我们学习了如何将字符串与枚举常量进行比较。此外，我们还通过例子讨论了比较的常见用例。</p><p>像往常一样，这里展示的所有代码片段都可以在GitHub上找到。</p>',43),c=[e];function o(l,u){return s(),a("div",null,c)}const r=n(p,[["render",o],["__file","2024-07-10-Comparing a String to an Enum Value in Java.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-10/2024-07-10-Comparing%20a%20String%20to%20an%20Enum%20Value%20in%20Java.html","title":"Java中将字符串与枚举值进行比较","lang":"zh-CN","frontmatter":{"date":"2024-07-10T00:00:00.000Z","category":["Java","编程"],"tag":["Java","枚举","字符串比较"],"head":[["meta",{"name":"keywords","content":"Java, 枚举, 字符串比较, 枚举实例, 枚举属性"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-10/2024-07-10-Comparing%20a%20String%20to%20an%20Enum%20Value%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Java中将字符串与枚举值进行比较"}],["meta",{"property":"og:description","content":"Java中将字符串与枚举值进行比较 Java在版本5中引入了枚举，枚举提供了一种安全和简洁的方式来管理常量。 在这篇快速教程中，我们将探讨如何将字符串与枚举对象进行比较。 2. 问题介绍 首先，让我们看一个枚举的例子： 如上代码所示，Weekday枚举包含了六个以每个星期日缩写命名的常量。此外，它还有一个fullName属性，用于存储每个星期日的完整名..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-10T04:00:49.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"枚举"}],["meta",{"property":"article:tag","content":"字符串比较"}],["meta",{"property":"article:published_time","content":"2024-07-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-10T04:00:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java中将字符串与枚举值进行比较\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-10T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-10T04:00:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Java中将字符串与枚举值进行比较 Java在版本5中引入了枚举，枚举提供了一种安全和简洁的方式来管理常量。 在这篇快速教程中，我们将探讨如何将字符串与枚举对象进行比较。 2. 问题介绍 首先，让我们看一个枚举的例子： 如上代码所示，Weekday枚举包含了六个以每个星期日缩写命名的常量。此外，它还有一个fullName属性，用于存储每个星期日的完整名..."},"headers":[{"level":2,"title":"2. 问题介绍","slug":"_2-问题介绍","link":"#_2-问题介绍","children":[]},{"level":2,"title":"3. 将给定的字符串与枚举实例的名称或属性进行比较","slug":"_3-将给定的字符串与枚举实例的名称或属性进行比较","link":"#_3-将给定的字符串与枚举实例的名称或属性进行比较","children":[]},{"level":2,"title":"4. 通过名称和属性查找枚举实例","slug":"_4-通过名称和属性查找枚举实例","link":"#_4-通过名称和属性查找枚举实例","children":[]},{"level":2,"title":"5. 结论","slug":"_5-结论","link":"#_5-结论","children":[]}],"git":{"createdTime":1720584049000,"updatedTime":1720584049000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":4.28,"words":1284},"filePathRelative":"posts/baeldung/2024-07-10/2024-07-10-Comparing a String to an Enum Value in Java.md","localizedDate":"2024年7月10日","excerpt":"\\n<p>Java在版本5中引入了枚举，枚举提供了一种安全和简洁的方式来管理常量。</p>\\n<p>在这篇快速教程中，我们将探讨如何将字符串与枚举对象进行比较。</p>\\n<h2>2. 问题介绍</h2>\\n<p>首先，让我们看一个枚举的例子：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">enum</span> <span class=\\"token class-name\\">Weekday</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token class-name\\">Mon</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Monday\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token class-name\\">Tue</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Tuesday\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token class-name\\">Wed</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Wednesday\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token class-name\\">Thu</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Thursday\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token class-name\\">Fri</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Friday\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token class-name\\">Sat</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Saturday\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">String</span> fullName<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token class-name\\">Weekday</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> fullName<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>fullName <span class=\\"token operator\\">=</span> fullName<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">String</span> <span class=\\"token function\\">getFullName</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> fullName<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{r as comp,d as data};
