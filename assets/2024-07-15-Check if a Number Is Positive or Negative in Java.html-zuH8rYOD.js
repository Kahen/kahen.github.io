import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-DpDzgwdT.js";const e={},p=t(`<h1 id="java中检查数字是正数还是负数" tabindex="-1"><a class="header-anchor" href="#java中检查数字是正数还是负数"><span>Java中检查数字是正数还是负数</span></a></h1><p>在Java中，当我们使用诸如_Integer_、<em>Long</em>、_Float_和_Double_这样的类型时，我们经常需要检查这些数字是正数还是负数。这是一种基本且常见的数字操作。</p><p>在本快速教程中，我们将讨论如何检查给定的数字是正数还是负数。</p><h3 id="_2-问题介绍" tabindex="-1"><a class="header-anchor" href="#_2-问题介绍"><span>2. 问题介绍</span></a></h3><p>检查一个数字是正数还是负数是一个相当直接的问题。然而，在我们开始查看实现之前，让我们先理解正数和负数的定义。</p><p>给定一个实数_n_，如果_n_大于零，它就是正数。否则，如果_n_小于零，它就是负数。所以，我们还有一个特殊情况：零。<strong>零既不是正数也不是负数</strong>。</p><p>因此，我们可以创建一个_enum_来涵盖这三种可能性：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">enum</span> <span class="token class-name">Result</span> <span class="token punctuation">{</span>
    <span class="token constant">POSITIVE</span><span class="token punctuation">,</span> <span class="token constant">NEGATIVE</span><span class="token punctuation">,</span> <span class="token constant">ZERO</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在本教程中，我们将解决两种不同的方法来检查数字是正数、负数还是零。为了简单起见，我们将使用单元测试断言来验证结果。</p><p>接下来，让我们看看它们是如何工作的。</p><h3 id="_3-使用-和-运算符" tabindex="-1"><a class="header-anchor" href="#_3-使用-和-运算符"><span>3. 使用‘&gt;’和‘\`&lt;’运算符</span></a></h3><p>根据定义，一个数字是正数还是负数取决于它与零的比较结果。因此，<strong>我们可以使用Java的“大于(&gt;<code>)”和“小于(</code>&lt;)”运算符来解决问题</strong>。</p><p>接下来，让我们以_Integer_类型为例，创建一个方法来进行检查：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token class-name">Result</span> <span class="token function">byOperator</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>integer <span class="token operator">&gt;</span>\` <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">POSITIVE</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>integer \`<span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">NEGATIVE</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token constant">ZERO</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码清楚地说明了自己。根据与零的比较结果，我们确定结果是正数、负数还是零。</p><p>让我们创建一个测试来验证我们的方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token constant">POSITIVE</span><span class="token punctuation">,</span> <span class="token class-name">PositiveOrNegative</span><span class="token punctuation">.</span><span class="token function">byOperator</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token constant">ZERO</span><span class="token punctuation">,</span> <span class="token class-name">PositiveOrNegative</span><span class="token punctuation">.</span><span class="token function">byOperator</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token constant">NEGATIVE</span><span class="token punctuation">,</span> <span class="token class-name">PositiveOrNegative</span><span class="token punctuation">.</span><span class="token function">byOperator</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">700</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们执行它，测试就会通过。</p><p>当然，如果我们将_Integer_参数更改为_Long_、<em>Float_或_Double</em>，同样的逻辑也是有效的。</p><h3 id="_4-使用signum-方法" tabindex="-1"><a class="header-anchor" href="#_4-使用signum-方法"><span>4. 使用signum()方法</span></a></h3><p>我们已经看到了如何使用&lt;和&gt;\`运算符来检查数字是正数还是负数。或者，我们可以使用signum()方法来获取给定数字的符号。</p><p><strong>对于_Integer_和_Long_数字，我们可以调用_Integer.signum()_和_Long.signum()_方法。</strong></p><p>signum(n)方法在_n_为负数、零或正数时返回-1、0和1。</p><p>让我们以_Integer_为例来创建一个检查方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token class-name">Result</span> <span class="token function">bySignum</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">signum</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token constant">POSITIVE</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token constant">NEGATIVE</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token constant">ZERO</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面的测试验证了我们的方法按预期工作：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token constant">POSITIVE</span><span class="token punctuation">,</span> <span class="token class-name">PositiveOrNegative</span><span class="token punctuation">.</span><span class="token function">bySignum</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token constant">ZERO</span><span class="token punctuation">,</span> <span class="token class-name">PositiveOrNegative</span><span class="token punctuation">.</span><span class="token function">bySignum</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token constant">NEGATIVE</span><span class="token punctuation">,</span> <span class="token class-name">PositiveOrNegative</span><span class="token punctuation">.</span><span class="token function">bySignum</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">700</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与_Integer_和_Long_不同，_Float_和_Double_类没有提供_signum()_方法。然而，<strong>_Math.signum()_方法接受_Float_和_Double_数字作为参数</strong>，例如：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token class-name">Result</span> <span class="token function">bySignum</span><span class="token punctuation">(</span><span class="token class-name">Float</span> floatNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">float</span> result <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">signum</span><span class="token punctuation">(</span>floatNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token number">1.0f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token constant">POSITIVE</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1.0f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token constant">NEGATIVE</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token constant">ZERO</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，让我们创建一个测试来验证该方法是否可以检查浮点数是正数还是负数：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token constant">POSITIVE</span><span class="token punctuation">,</span> <span class="token class-name">PositiveOrNegative</span><span class="token punctuation">.</span><span class="token function">bySignum</span><span class="token punctuation">(</span><span class="token number">4.2f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token constant">ZERO</span><span class="token punctuation">,</span> <span class="token class-name">PositiveOrNegative</span><span class="token punctuation">.</span><span class="token function">bySignum</span><span class="token punctuation">(</span><span class="token number">0f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token constant">NEGATIVE</span><span class="token punctuation">,</span> <span class="token class-name">PositiveOrNegative</span><span class="token punctuation">.</span><span class="token function">bySignum</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">7.7f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们运行它，测试就会通过。</p><h3 id="_5-结论" tabindex="-1"><a class="header-anchor" href="#_5-结论"><span>5. 结论</span></a></h3><p>在本文中，我们学习了两种确定给定数字是正数、负数还是零的方法。</p><p>像往常一样，这里展示的所有代码片段都可以在GitHub上找到。</p>`,35),o=[p];function c(l,i){return s(),a("div",null,o)}const k=n(e,[["render",c],["__file","2024-07-15-Check if a Number Is Positive or Negative in Java.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-15/2024-07-15-Check%20if%20a%20Number%20Is%20Positive%20or%20Negative%20in%20Java.html","title":"Java中检查数字是正数还是负数","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","Programming"],"tag":["Java","Number","Positive","Negative"],"head":[["meta",{"name":"keywords","content":"Java, Number, Positive, Negative"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-15/2024-07-15-Check%20if%20a%20Number%20Is%20Positive%20or%20Negative%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Java中检查数字是正数还是负数"}],["meta",{"property":"og:description","content":"Java中检查数字是正数还是负数 在Java中，当我们使用诸如_Integer_、Long、_Float_和_Double_这样的类型时，我们经常需要检查这些数字是正数还是负数。这是一种基本且常见的数字操作。 在本快速教程中，我们将讨论如何检查给定的数字是正数还是负数。 2. 问题介绍 检查一个数字是正数还是负数是一个相当直接的问题。然而，在我们开始查..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-15T22:06:13.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Number"}],["meta",{"property":"article:tag","content":"Positive"}],["meta",{"property":"article:tag","content":"Negative"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-15T22:06:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java中检查数字是正数还是负数\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-15T22:06:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Java中检查数字是正数还是负数 在Java中，当我们使用诸如_Integer_、Long、_Float_和_Double_这样的类型时，我们经常需要检查这些数字是正数还是负数。这是一种基本且常见的数字操作。 在本快速教程中，我们将讨论如何检查给定的数字是正数还是负数。 2. 问题介绍 检查一个数字是正数还是负数是一个相当直接的问题。然而，在我们开始查..."},"headers":[{"level":3,"title":"2. 问题介绍","slug":"_2-问题介绍","link":"#_2-问题介绍","children":[]},{"level":3,"title":"3. 使用‘>’和‘`<’运算符","slug":"_3-使用-和-运算符","link":"#_3-使用-和-运算符","children":[]},{"level":3,"title":"4. 使用signum()方法","slug":"_4-使用signum-方法","link":"#_4-使用signum-方法","children":[]},{"level":3,"title":"5. 结论","slug":"_5-结论","link":"#_5-结论","children":[]}],"git":{"createdTime":1721081173000,"updatedTime":1721081173000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":2.87,"words":862},"filePathRelative":"posts/baeldung/2024-07-15/2024-07-15-Check if a Number Is Positive or Negative in Java.md","localizedDate":"2022年4月1日","excerpt":"\\n<p>在Java中，当我们使用诸如_Integer_、<em>Long</em>、_Float_和_Double_这样的类型时，我们经常需要检查这些数字是正数还是负数。这是一种基本且常见的数字操作。</p>\\n<p>在本快速教程中，我们将讨论如何检查给定的数字是正数还是负数。</p>\\n<h3>2. 问题介绍</h3>\\n<p>检查一个数字是正数还是负数是一个相当直接的问题。然而，在我们开始查看实现之前，让我们先理解正数和负数的定义。</p>\\n<p>给定一个实数_n_，如果_n_大于零，它就是正数。否则，如果_n_小于零，它就是负数。所以，我们还有一个特殊情况：零。<strong>零既不是正数也不是负数</strong>。</p>","autoDesc":true}');export{k as comp,d as data};
