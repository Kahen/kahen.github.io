import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-DSo3IuB6.js";const p={},e=t(`<h1 id="使用java合并多个pdf文件" tabindex="-1"><a class="header-anchor" href="#使用java合并多个pdf文件"><span>使用Java合并多个PDF文件</span></a></h1><p>在现代商业和文档管理流程中，将多个PDF文件合并成一个单独的PDF文档是一个常见的需求。常见的用例包括演示文稿、整合报告或将多个包编译成一个单一的包。</p><p>在Java中，存在多个库，它们提供了现成的功能来处理PDF并将它们合并成一个单独的PDF。Apache PDFBox和iText是其中最受欢迎的。</p><p>在本教程中，我们将使用Apache PDFBox和iText实现PDF合并功能。</p><h2 id="_2-设置" tabindex="-1"><a class="header-anchor" href="#_2-设置"><span>2. 设置</span></a></h2><p>在深入实现之前，让我们先了解必要的设置步骤。我们将为项目添加所需的依赖项，此外，我们将为我们的测试创建辅助方法。</p><h3 id="_2-1-依赖项" tabindex="-1"><a class="header-anchor" href="#_2-1-依赖项"><span>2.1. 依赖项</span></a></h3><p>我们将使用Apache PDFBox和iText来合并PDF文件。要使用Apache PDFBox，我们需要在_pom.xml_文件中添加以下依赖项：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>\\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency\\</span><span class="token punctuation">&gt;</span></span>
    \\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId\\</span><span class="token punctuation">&gt;</span></span>org.apache.pdfbox\\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId\\</span><span class="token punctuation">&gt;</span></span>
    \\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId\\</span><span class="token punctuation">&gt;</span></span>pdfbox\\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId\\</span><span class="token punctuation">&gt;</span></span>
    \\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version\\</span><span class="token punctuation">&gt;</span></span>2.0.31\\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version\\</span><span class="token punctuation">&gt;</span></span>
\\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency\\</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要使用iText，我们需要在_pom.xml_文件中添加以下依赖项：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>\\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency\\</span><span class="token punctuation">&gt;</span></span>
    \\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId\\</span><span class="token punctuation">&gt;</span></span>com.itextpdf\\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId\\</span><span class="token punctuation">&gt;</span></span>
    \\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId\\</span><span class="token punctuation">&gt;</span></span>itextpdf\\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId\\</span><span class="token punctuation">&gt;</span></span>
    \\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version\\</span><span class="token punctuation">&gt;</span></span>5.5.13.3\\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version\\</span><span class="token punctuation">&gt;</span></span>
\\<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency\\</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-测试设置" tabindex="-1"><a class="header-anchor" href="#_2-2-测试设置"><span>2.2. 测试设置</span></a></h3><p>让我们创建一个我们将用于测试我们逻辑的示例PDF文件。我们可以创建一个实用方法来创建PDF，这样我们就可以跨不同的测试使用它：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">createPDFDoc</span><span class="token punctuation">(</span><span class="token class-name">String</span> content<span class="token punctuation">,</span> <span class="token class-name">String</span> filePath<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token class-name">PDDocument</span> document <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i \\<span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">PDPage</span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        document<span class="token punctuation">.</span><span class="token function">addPage</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">PDPageContentStream</span> contentStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDPageContentStream</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> page<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            contentStream<span class="token punctuation">.</span><span class="token function">beginText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            contentStream<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span><span class="token class-name">PDType1Font</span><span class="token punctuation">.</span><span class="token constant">HELVETICA_BOLD</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            contentStream<span class="token punctuation">.</span><span class="token function">showText</span><span class="token punctuation">(</span>content <span class="token operator">+</span> <span class="token string">&quot;, page:&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            contentStream<span class="token punctuation">.</span><span class="token function">endText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    document<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token string">&quot;src/test/resources/temp/&quot;</span> <span class="token operator">+</span> filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    document<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的逻辑中，我们创建了一个PDF文档，并使用自定义字体添加了三页。既然我们有了_createPDFDoc()_方法，让我们在每个测试之前调用它，并在测试完成后删除文件：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@BeforeEach</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token class-name">File</span> tempDirectory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;src/test/resources/temp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    tempDirectory<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;hello_world1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;file1.pdf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;hello_world2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;file2.pdf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>pair <span class="token operator">-</span>\\<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token function">createPDFDoc</span><span class="token punctuation">(</span>pair<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pair<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@AfterEach</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token class-name">Stream</span>\\<span class="token operator">&lt;</span><span class="token class-name">Path</span>\\<span class="token operator">&gt;</span> paths <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;src/test/resources/temp/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    paths<span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span> <span class="token operator">-</span>\\<span class="token operator">&gt;</span> <span class="token operator">-</span>p1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">)</span>
         <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>path <span class="token operator">-</span>\\<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-使用apache-pdfbox" tabindex="-1"><a class="header-anchor" href="#_3-使用apache-pdfbox"><span>3. 使用Apache PDFBox</span></a></h2><p>Apache PDFBox是一个开源的Java库，用于处理PDF文档。它提供了一系列的功能，以编程方式创建、操作和从PDF文件中提取内容。</p><p><strong>PDFBox提供了一个_PDFMergerUtility_帮助类来合并多个PDF文档。我们可以使用_addSource()_方法添加PDF文件。_mergeDocuments()_方法合并所有添加的源，结果是一个最终合并的PDF文档：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">mergeUsingPDFBox</span><span class="token punctuation">(</span><span class="token class-name">List</span>\\<span class="token operator">&lt;</span><span class="token class-name">String</span>\\<span class="token operator">&gt;</span> pdfFiles<span class="token punctuation">,</span> <span class="token class-name">String</span> outputFile<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token class-name">PDFMergerUtility</span> pdfMergerUtility <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDFMergerUtility</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pdfMergerUtility<span class="token punctuation">.</span><span class="token function">setDestinationFileName</span><span class="token punctuation">(</span>outputFile<span class="token punctuation">)</span><span class="token punctuation">;</span>

    pdfFiles<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>file <span class="token operator">-</span>\\<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            pdfMergerUtility<span class="token punctuation">.</span><span class="token function">addSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    pdfMergerUtility<span class="token punctuation">.</span><span class="token function">mergeDocuments</span><span class="token punctuation">(</span><span class="token class-name">MemoryUsageSetting</span><span class="token punctuation">.</span><span class="token function">setupMainMemoryOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上所示，_mergeDocuments()_方法接受一个参数来配置合并文档时的内存使用。我们定义仅使用主内存，即RAM，在合并文档期间进行缓冲。我们可以选择许多其他缓冲内存的选项，包括磁盘、RAM和磁盘的组合等。</p><p>我们可以编写一个单元测试来验证合并逻辑是否按预期工作：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenMultiplePdfs_whenMergeUsingPDFBoxExecuted_thenPdfsMerged</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span>\\<span class="token operator">&lt;</span><span class="token class-name">String</span>\\<span class="token operator">&gt;</span> files <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;src/test/resources/temp/file1.pdf&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;src/test/resources/temp/file2.pdf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">PDFMerge</span> pdfMerge <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDFMerge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pdfMerge<span class="token punctuation">.</span><span class="token function">mergeUsingPDFBox</span><span class="token punctuation">(</span>files<span class="token punctuation">,</span> <span class="token string">&quot;src/test/resources/temp/output.pdf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">PDDocument</span> document <span class="token operator">=</span> <span class="token class-name">PDDocument</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;src/test/resources/temp/output.pdf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">PDFTextStripper</span> pdfStripper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDFTextStripper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> actual <span class="token operator">=</span> pdfStripper<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> expected <span class="token operator">=</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;
            hello_world1, page:0
            hello_world1, page:1
            hello_world1, page:2
            hello_world2, page:0
            hello_world2, page:1
            hello_world2, page:2
            &quot;&quot;&quot;</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> actual<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的测试中，我们使用PDFBox将两个PDF文件合并到一个输出文件中，并验证了合并的内容。</p><h2 id="_4-使用itext" tabindex="-1"><a class="header-anchor" href="#_4-使用itext"><span>4. 使用iText</span></a></h2><p>iText是另一个流行的Java库，用于创建和操作PDF文档。它提供了广泛的功能，如在生成PDF文件时包括文本、图像、表格和其他元素，如超链接和表单字段。</p><p><strong>iText提供了_PdfReader_和_PdfWriter_类，这些类在读取输入文件和将它们写入输出文件时非常有用：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">mergeUsingIText</span><span class="token punctuation">(</span><span class="token class-name">List</span>\\<span class="token operator">&lt;</span><span class="token class-name">String</span>\\<span class="token operator">&gt;</span> pdfFiles<span class="token punctuation">,</span> <span class="token class-name">String</span> outputFile<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">DocumentException</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span>\\<span class="token operator">&lt;</span><span class="token class-name">PdfReader</span>\\<span class="token operator">&gt;</span> pdfReaders <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PdfReader</span><span class="token punctuation">(</span>pdfFiles<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">PdfReader</span><span class="token punctuation">(</span>pdfFiles<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Document</span> document <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Document</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>outputFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">PdfWriter</span> writer <span class="token operator">=</span> <span class="token class-name">PdfWriter</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> fos<span class="token punctuation">)</span><span class="token punctuation">;</span>
    document<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">PdfContentByte</span> directContent <span class="token operator">=</span> writer<span class="token punctuation">.</span><span class="token function">getDirectContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">PdfImportedPage</span> pdfImportedPage<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">PdfReader</span> pdfReader <span class="token operator">:</span> pdfReaders<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> currentPdfReaderPage <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>currentPdfReaderPage \\<span class="token operator">&lt;=</span> pdfReader<span class="token punctuation">.</span><span class="token function">getNumberOfPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            document<span class="token punctuation">.</span><span class="token function">newPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            pdfImportedPage <span class="token operator">=</span> writer<span class="token punctuation">.</span><span class="token function">getImportedPage</span><span class="token punctuation">(</span>pdfReader<span class="token punctuation">,</span> currentPdfReaderPage<span class="token punctuation">)</span><span class="token punctuation">;</span>
            directContent<span class="token punctuation">.</span><span class="token function">addTemplate</span><span class="token punctuation">(</span>pdfImportedPage<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            currentPdfReaderPage<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    fos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    document<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的逻辑中，我们读取然后导入_PdfReader_的页面到_PdfWrite_使用_getImportedPage()<em>方法，然后将它们添加到_directContent_对象，该对象本质上存储了内容的读取缓冲区。一旦我们完成阅读，我们刷新输出流_fos</em>，它写入输出文件。</p><p>我们可以通过编写单元测试来验证我们的逻辑：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenMultiplePdfs_whenMergeUsingITextExecuted_thenPdfsMerged</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">DocumentException</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span>\\<span class="token operator">&lt;</span><span class="token class-name">String</span>\\<span class="token operator">&gt;</span> files <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;src/test/resources/temp/file1.pdf&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;src/test/resources/temp/file2.pdf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">PDFMerge</span> pdfMerge <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDFMerge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pdfMerge<span class="token punctuation">.</span><span class="token function">mergeUsingIText</span><span class="token punctuation">(</span>files<span class="token punctuation">,</span> <span class="token string">&quot;src/test/resources/temp/output1.pdf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">PDDocument</span> document <span class="token operator">=</span> <span class="token class-name">PDDocument</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;src/test/resources/temp/output1.pdf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">PDFTextStripper</span> pdfStripper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDFTextStripper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> actual <span class="token operator">=</span> pdfStripper<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> expected <span class="token operator">=</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;
            hello_world1, page:0
            hello_world1, page:1
            hello_world1, page:2
            hello_world2, page:0
            hello_world2, page:1
            hello_world2, page:2
            &quot;&quot;&quot;</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> actual<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们的测试与前一节几乎相同。唯一的区别是我们调用了_mergeUsingIText()_方法，它使用_iText_来合并PDF文件。</p><h2 id="_5-结论" tabindex="-1"><a class="header-anchor" href="#_5-结论"><span>5. 结论</span></a></h2><p>在本文中，我们探讨了如何使用Apache PDFBox和iText合并PDF文件。这两个库都功能丰富，允许我们处理PDF文件中的不同类型的内容。我们实现了合并功能，并编写了测试来验证结果。</p><p>像往常一样，示例的完整源代码可以在GitHub上找到。</p>`,35),o=[e];function c(l,i){return a(),s("div",null,o)}const r=n(p,[["render",c],["__file","Merge Multiple PDF Files Into a Single PDF Using Java.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/Merge%20Multiple%20PDF%20Files%20Into%20a%20Single%20PDF%20Using%20Java.html","title":"使用Java合并多个PDF文件","lang":"zh-CN","frontmatter":{"date":"2024-06-14T00:00:00.000Z","category":["Java","PDF"],"tag":["Apache PDFBox","iText"],"description":"使用Java合并多个PDF文件 在现代商业和文档管理流程中，将多个PDF文件合并成一个单独的PDF文档是一个常见的需求。常见的用例包括演示文稿、整合报告或将多个包编译成一个单一的包。 在Java中，存在多个库，它们提供了现成的功能来处理PDF并将它们合并成一个单独的PDF。Apache PDFBox和iText是其中最受欢迎的。 在本教程中，我们将使用...","head":[["meta",{"property":"og:url","content":"https://kahen.github.io/posts/baeldung/Merge%20Multiple%20PDF%20Files%20Into%20a%20Single%20PDF%20Using%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文站"}],["meta",{"property":"og:title","content":"使用Java合并多个PDF文件"}],["meta",{"property":"og:description","content":"使用Java合并多个PDF文件 在现代商业和文档管理流程中，将多个PDF文件合并成一个单独的PDF文档是一个常见的需求。常见的用例包括演示文稿、整合报告或将多个包编译成一个单一的包。 在Java中，存在多个库，它们提供了现成的功能来处理PDF并将它们合并成一个单独的PDF。Apache PDFBox和iText是其中最受欢迎的。 在本教程中，我们将使用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-14T03:42:46.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Apache PDFBox"}],["meta",{"property":"article:tag","content":"iText"}],["meta",{"property":"article:published_time","content":"2024-06-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-14T03:42:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用Java合并多个PDF文件\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-14T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-14T03:42:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://kahen.github.io\\"}]}"]]},"headers":[{"level":2,"title":"2. 设置","slug":"_2-设置","link":"#_2-设置","children":[{"level":3,"title":"2.1. 依赖项","slug":"_2-1-依赖项","link":"#_2-1-依赖项","children":[]},{"level":3,"title":"2.2. 测试设置","slug":"_2-2-测试设置","link":"#_2-2-测试设置","children":[]}]},{"level":2,"title":"3. 使用Apache PDFBox","slug":"_3-使用apache-pdfbox","link":"#_3-使用apache-pdfbox","children":[]},{"level":2,"title":"4. 使用iText","slug":"_4-使用itext","link":"#_4-使用itext","children":[]},{"level":2,"title":"5. 结论","slug":"_5-结论","link":"#_5-结论","children":[]}],"git":{"createdTime":1718299959000,"updatedTime":1718336566000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1},{"name":"Lance Li","email":"lance.jx.li@gtomato.com","commits":1}]},"readingTime":{"minutes":4.39,"words":1318},"filePathRelative":"posts/baeldung/Merge Multiple PDF Files Into a Single PDF Using Java.md","localizedDate":"2024年6月14日","excerpt":"\\n<p>在现代商业和文档管理流程中，将多个PDF文件合并成一个单独的PDF文档是一个常见的需求。常见的用例包括演示文稿、整合报告或将多个包编译成一个单一的包。</p>\\n<p>在Java中，存在多个库，它们提供了现成的功能来处理PDF并将它们合并成一个单独的PDF。Apache PDFBox和iText是其中最受欢迎的。</p>\\n<p>在本教程中，我们将使用Apache PDFBox和iText实现PDF合并功能。</p>\\n<h2>2. 设置</h2>\\n<p>在深入实现之前，让我们先了解必要的设置步骤。我们将为项目添加所需的依赖项，此外，我们将为我们的测试创建辅助方法。</p>\\n<h3>2.1. 依赖项</h3>","autoDesc":true}');export{r as comp,d as data};
