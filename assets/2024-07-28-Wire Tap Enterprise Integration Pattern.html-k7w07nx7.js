import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-CbPcg273.js";const p={},e=t('<h1 id="监控系统消息流的wire-tap企业集成模式" tabindex="-1"><a class="header-anchor" href="#监控系统消息流的wire-tap企业集成模式"><span>监控系统消息流的Wire Tap企业集成模式</span></a></h1><p>在这个教程中，我们将介绍Wire Tap企业集成模式（EIP），它帮助我们监控通过系统流动的消息。</p><p>这种模式允许我们<strong>拦截消息而不永久地从通道上消耗它们</strong>。</p><p>Wire Tap检查在点对点通道上传输的消息。它接收消息，进行复制，然后将其发送到<strong>Tap目的地</strong>：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2021/06/Wire-tap-EnterpriseIntegrationPattern.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>为了更好地理解这一点，让我们创建一个带有ActiveMQ和Camel的Spring Boot应用程序。</p><h2 id="_3-maven依赖项" tabindex="-1"><a class="header-anchor" href="#_3-maven依赖项"><span>3. Maven依赖项</span></a></h2><p>让我们添加_camel-spring-boot-dependencies_：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>`\n        ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n            ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```org.apache.camel.springboot```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n            ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```camel-spring-boot-dependencies```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n            `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`${camel.version}`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`\n            `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>`pom`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>`\n            `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>`import`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>`\n        ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们将添加_camel-spring-boot-starter_：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```org.apache.camel.springboot```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```camel-spring-boot-starter```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了查看通过路由流动的消息，我们还需要包括_ActiveMQ_：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```org.apache.camel.springboot```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```camel-activemq-starter```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-消息交换" tabindex="-1"><a class="header-anchor" href="#_4-消息交换"><span>4. 消息交换</span></a></h2><p>让我们创建一个消息对象：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyPayload</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> value<span class="token punctuation">;</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将向_direct:source_发送此消息以启动路由：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">CamelContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultCamelContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">ActiveMQConnectionFactory</span> connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQConnectionFactory</span><span class="token punctuation">(</span><span class="token string">&quot;vm://localhost?broker.persistent=false&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    connectionFactory<span class="token punctuation">.</span><span class="token function">setTrustAllPackages</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    context<span class="token punctuation">.</span><span class="token function">addComponent</span><span class="token punctuation">(</span><span class="token string">&quot;direct&quot;</span><span class="token punctuation">,</span> <span class="token class-name">JmsComponent</span><span class="token punctuation">.</span><span class="token function">jmsComponentAutoAcknowledge</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">addRoute</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">ProducerTemplate</span> template <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">createProducerTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        context<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">MyPayload</span> payload <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPayload</span><span class="token punctuation">(</span><span class="token string">&quot;One&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        template<span class="token punctuation">.</span><span class="token function">sendBody</span><span class="token punctuation">(</span><span class="token string">&quot;direct:source&quot;</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n        context<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们将添加一个路由和Tap目的地。</p><h2 id="_5-监听交换" tabindex="-1"><a class="header-anchor" href="#_5-监听交换"><span>5. 监听交换</span></a></h2><p>我们将使用**<em>wireTap</em><strong>方法来设置Tap目的地的端点URI。Camel不会等待来自_wireTap_的响应，因为它</strong>将消息交换模式设置为_InOnly_<strong>。Wire Tap处理器</strong>在单独的线程上处理它**：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">wireTap</span><span class="token punctuation">(</span><span class="token string">&quot;direct:tap&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Camel的Wire Tap节点在监听交换时支持两种风格：</p><h3 id="_5-1-传统wire-tap" tabindex="-1"><a class="header-anchor" href="#_5-1-传统wire-tap"><span>5.1. 传统Wire Tap</span></a></h3><p>让我们添加一个传统的Wire Tap路由：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">RoutesBuilder</span> <span class="token function">traditionalWireTapRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RouteBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;direct:source&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">wireTap</span><span class="token punctuation">(</span><span class="token string">&quot;direct:tap&quot;</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">bean</span><span class="token punctuation">(</span><span class="token class-name">MyBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;addTwo&quot;</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token string">&quot;direct:destination&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;direct:tap&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Tap Wire route: received&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;direct:destination&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Output at destination: &#39;${body}&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，Camel将<strong>只复制_Exchange_</strong> - <strong>它不会进行深度克隆</strong>。所有副本可能共享原始交换中的对象。</p><p><strong>在并发处理多个消息时，有可能</strong> <strong>破坏最终的有效载荷</strong>。我们可以在将其传递给Tap目的地之前创建有效载荷的深度克隆以防止这种情况。</p><h3 id="_5-2-发送新交换" tabindex="-1"><a class="header-anchor" href="#_5-2-发送新交换"><span>5.2. 发送新交换</span></a></h3><p>Wire Tap EIP支持一个_Expression_或_Processor_，预先填充了交换的副本。一个_Expression_只能用于设置消息体。</p><p>_Processor_变体提供了完全的控制权，用于如何填充交换（设置属性，头等）。</p><p>让我们在有效载荷中实现深度克隆：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyPayload</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">private</span> <span class="token class-name">String</span> value<span class="token punctuation">;</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    <span class="token keyword">public</span> <span class="token class-name">MyPayload</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">MyPayload</span> myPayload <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPayload</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> myPayload<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，让我们实现一个_Processor_类，输入为原始交换的副本：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyPayloadClonePrepare</span> <span class="token keyword">implements</span> <span class="token class-name">Processor</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">Exchange</span> exchange<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token class-name">MyPayload</span> myPayload <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token class-name">MyPayload</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        exchange<span class="token punctuation">.</span><span class="token function">getIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span>myPayload<span class="token punctuation">.</span><span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        exchange<span class="token punctuation">.</span><span class="token function">getIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;date&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将在_wireTap_之后立即使用_onPrepare_调用它：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">RoutesBuilder</span> <span class="token function">newExchangeRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RouteBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n\n            <span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;direct:source&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">wireTap</span><span class="token punctuation">(</span><span class="token string">&quot;direct:tap&quot;</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">onPrepare</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyPayloadClonePrepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;direct:tap&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bean</span><span class="token punctuation">(</span><span class="token class-name">MyBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;addThree&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n       <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-结论" tabindex="-1"><a class="header-anchor" href="#_6-结论"><span>6. 结论</span></a></h2><p>在本文中，我们实现了Wire Tap模式来监控通过特定消息端点传递的消息。使用Apache Camel的_wireTap_，我们复制消息并将其发送到不同的端点，而不改变现有的流程。</p><p>Camel支持两种监听交换的方式。在传统的Wire Tap中，原始交换被复制。在第二种方式中，我们可以创建一个新的交换。我们可以使用_Expression_用新的消息体值填充这个新交换，或者我们可以使用_Processor_设置头 - 并且可选地，使用_Processor_设置体。</p><p>代码示例可在GitHub上找到。</p>',41),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","2024-07-28-Wire Tap Enterprise Integration Pattern.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-28/2024-07-28-Wire%20Tap%20Enterprise%20Integration%20Pattern.html","title":"监控系统消息流的Wire Tap企业集成模式","lang":"zh-CN","frontmatter":{"date":"2021-06-01T00:00:00.000Z","category":["Enterprise Integration Patterns","Apache Camel"],"tag":["Wire Tap","EIP","Spring Boot","ActiveMQ"],"head":[["meta",{"name":"keywords","content":"Wire Tap, EIP, Spring Boot, ActiveMQ, Apache Camel"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-28/2024-07-28-Wire%20Tap%20Enterprise%20Integration%20Pattern.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"监控系统消息流的Wire Tap企业集成模式"}],["meta",{"property":"og:description","content":"监控系统消息流的Wire Tap企业集成模式 在这个教程中，我们将介绍Wire Tap企业集成模式（EIP），它帮助我们监控通过系统流动的消息。 这种模式允许我们拦截消息而不永久地从通道上消耗它们。 Wire Tap检查在点对点通道上传输的消息。它接收消息，进行复制，然后将其发送到Tap目的地： imgimg 为了更好地理解这一点，让我们创建一个带有A..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.baeldung.com/wp-content/uploads/2021/06/Wire-tap-EnterpriseIntegrationPattern.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-28T22:03:35.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Wire Tap"}],["meta",{"property":"article:tag","content":"EIP"}],["meta",{"property":"article:tag","content":"Spring Boot"}],["meta",{"property":"article:tag","content":"ActiveMQ"}],["meta",{"property":"article:published_time","content":"2021-06-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-28T22:03:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"监控系统消息流的Wire Tap企业集成模式\\",\\"image\\":[\\"https://www.baeldung.com/wp-content/uploads/2021/06/Wire-tap-EnterpriseIntegrationPattern.png\\"],\\"datePublished\\":\\"2021-06-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-28T22:03:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"监控系统消息流的Wire Tap企业集成模式 在这个教程中，我们将介绍Wire Tap企业集成模式（EIP），它帮助我们监控通过系统流动的消息。 这种模式允许我们拦截消息而不永久地从通道上消耗它们。 Wire Tap检查在点对点通道上传输的消息。它接收消息，进行复制，然后将其发送到Tap目的地： imgimg 为了更好地理解这一点，让我们创建一个带有A..."},"headers":[{"level":2,"title":"3. Maven依赖项","slug":"_3-maven依赖项","link":"#_3-maven依赖项","children":[]},{"level":2,"title":"4. 消息交换","slug":"_4-消息交换","link":"#_4-消息交换","children":[]},{"level":2,"title":"5. 监听交换","slug":"_5-监听交换","link":"#_5-监听交换","children":[{"level":3,"title":"5.1. 传统Wire Tap","slug":"_5-1-传统wire-tap","link":"#_5-1-传统wire-tap","children":[]},{"level":3,"title":"5.2. 发送新交换","slug":"_5-2-发送新交换","link":"#_5-2-发送新交换","children":[]}]},{"level":2,"title":"6. 结论","slug":"_6-结论","link":"#_6-结论","children":[]}],"git":{"createdTime":1722204215000,"updatedTime":1722204215000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":3.21,"words":962},"filePathRelative":"posts/baeldung/2024-07-28/2024-07-28-Wire Tap Enterprise Integration Pattern.md","localizedDate":"2021年6月1日","excerpt":"\\n<p>在这个教程中，我们将介绍Wire Tap企业集成模式（EIP），它帮助我们监控通过系统流动的消息。</p>\\n<p>这种模式允许我们<strong>拦截消息而不永久地从通道上消耗它们</strong>。</p>\\n<p>Wire Tap检查在点对点通道上传输的消息。它接收消息，进行复制，然后将其发送到<strong>Tap目的地</strong>：</p>\\n<figure><img src=\\"https://www.baeldung.com/wp-content/uploads/2021/06/Wire-tap-EnterpriseIntegrationPattern.png\\" alt=\\"img\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>img</figcaption></figure>","autoDesc":true}');export{k as comp,d as data};
