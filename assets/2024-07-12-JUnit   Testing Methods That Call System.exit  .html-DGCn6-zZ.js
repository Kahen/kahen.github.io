import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-BTwZI-W8.js";const p={},e=t('<h1 id="junit-测试调用-system-exit-的方法" tabindex="-1"><a class="header-anchor" href="#junit-测试调用-system-exit-的方法"><span>JUnit - 测试调用 System.exit() 的方法</span></a></h1><p>在某些情况下，可能需要一个方法调用_System.exit()_并关闭应用程序。例如，这可能是因为应用程序应该只运行一次然后退出，或者在出现严重错误如丢失数据库连接时。</p><p>如果一个方法调用了_System.exit()_，那么从单元测试中调用它并进行断言就会变得困难，因为这将导致单元测试退出。</p><p>在本教程中，我们将探讨在使用JUnit时如何测试调用_System.exit()_的方法。</p><h2 id="_2-项目设置" tabindex="-1"><a class="header-anchor" href="#_2-项目设置"><span>2. 项目设置</span></a></h2><p>让我们首先创建一个Java项目。我们将创建一个服务，用于将任务保存到数据库。如果保存任务到数据库时抛出异常，该服务将调用_System.exit()_。</p><h3 id="_2-1-junit和mockito依赖" tabindex="-1"><a class="header-anchor" href="#_2-1-junit和mockito依赖"><span>2.1. JUnit和Mockito依赖</span></a></h3><p>让我们添加JUnit和Mockito依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>`\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n        ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>````org.junit.jupiter````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>````\n        `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````junit-jupiter-api`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````\n        `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`````5.11.0-M2`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`````\n        ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>````test````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n        ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>````org.mockito````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>````\n        `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````mockito-core`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````\n        `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`````5.11.0`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`````\n        ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>````test````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-代码设置" tabindex="-1"><a class="header-anchor" href="#_2-2-代码设置"><span>2.2. 代码设置</span></a></h3><p>我们首先添加一个名为_Task_的实体类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Task</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n\n    <span class="token comment">// 访问器，修改器和构造函数</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，让我们创建一个DAO，负责与数据库交互：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskDAO</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">Task</span> task<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 保存任务</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>_save()_方法的实现对于本文的目的并不重要。</p><p>接下来，让我们创建一个调用DAO的_TaskService_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskService</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">TaskDAO</span> taskDAO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskDAO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveTask</span><span class="token punctuation">(</span><span class="token class-name">Task</span> task<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            taskDAO<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们应该注意到，如果_save()_方法抛出异常，<strong>应用程序将退出</strong>。</p><h3 id="_2-3-单元测试" tabindex="-1"><a class="header-anchor" href="#_2-3-单元测试"><span>2.3. 单元测试</span></a></h3><p>让我们尝试为我们上面的_saveTask()_方法编写单元测试：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenDAOThrowsException_whenSaveTaskIsCalled_thenSystemExitIsCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Task</span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">TaskDAO</span> taskDAO <span class="token operator">=</span> <span class="token function">mock</span><span class="token punctuation">(</span><span class="token class-name">TaskDAO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">TaskService</span> service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskService</span><span class="token punctuation">(</span>taskDAO<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">doThrow</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span>taskDAO<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    service<span class="token punctuation">.</span><span class="token function">saveTask</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们模拟了_TaskDAO_，以便在调用_save()_方法时抛出异常。这将导致执行_saveTask()<em>的_catch_块，该块调用_System.exit()</em>。</p><p><strong>如果我们运行这个测试，我们会发现它在完成之前就退出了</strong>：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2022/11/system-exits-test-skipped.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_3-使用安全管理员的解决方法-java-17之前" tabindex="-1"><a class="header-anchor" href="#_3-使用安全管理员的解决方法-java-17之前"><span>3. 使用安全管理员的解决方法（Java 17之前）</span></a></h2><p><strong>我们可以提供我们的安全管理员来防止单元测试退出。</strong> 我们的安全管理员将防止对_System.exit()_的调用，并在调用发生时抛出异常。然后我们可以捕获抛出的异常来进行断言。默认情况下，Java不使用安全管理员，并且允许调用所有_System_方法。</p><p><strong>需要注意的是，SecurityManager在Java 17中被弃用，如果使用Java 17或更高版本，将抛出异常。</strong></p><h3 id="_3-1-安全管理员" tabindex="-1"><a class="header-anchor" href="#_3-1-安全管理员"><span>3.1. 安全管理员</span></a></h3><p>让我们看看安全管理员的实现：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">NoExitSecurityManager</span> <span class="token keyword">extends</span> <span class="token class-name">SecurityManager</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkPermission</span><span class="token punctuation">(</span><span class="token class-name">Permission</span> perm<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkExit</span><span class="token punctuation">(</span><span class="token keyword">int</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">checkExit</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们谈谈这段代码的一些重要行为：</p><ul><li>方法_checkPermission()_需要被重写，因为安全管理员的默认实现会在调用_System.exit()_时抛出异常。</li><li>每当我们的代码调用_System.exit()_，_NoExitSecurityManager_的_checkExit()_方法将介入并抛出异常。</li><li>可以抛出任何其他异常而不是_RuntimeException_，只要它是一个未检查异常。</li></ul><h3 id="_3-2-修改测试" tabindex="-1"><a class="header-anchor" href="#_3-2-修改测试"><span>3.2. 修改测试</span></a></h3><p>下一步是修改测试以使用_SecurityManager_实现。我们将<strong>添加_setUp()_和_tearDown()_方法，在测试运行时设置和移除安全管理员</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@BeforeEach</span>\n<span class="token keyword">void</span> <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NoExitSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，让我们<strong>更改测试用例，以捕获在调用_System.exit()<em>时将抛出的_RuntimeException</em></strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenDAOThrowsException_whenSaveTaskIsCalled_thenSystemExitIsCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Task</span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">TaskDAO</span> taskDAO <span class="token operator">=</span> <span class="token function">mock</span><span class="token punctuation">(</span><span class="token class-name">TaskDAO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">TaskService</span> service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskService</span><span class="token punctuation">(</span>taskDAO<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        <span class="token function">doThrow</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span>taskDAO<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        service<span class="token punctuation">.</span><span class="token function">saveTask</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用_catch_块来验证<strong>退出消息的状态是否与DAO设置的退出代码相同</strong>。</p><h2 id="_4-使用system-lambda库" tabindex="-1"><a class="header-anchor" href="#_4-使用system-lambda库"><span>4. 使用System Lambda库</span></a></h2><p>另一种编写测试的方法是使用System Lambda库。这个库协助测试调用_System_类方法的代码。我们将探讨如何使用这个库编写我们的测试。</p><h3 id="_4-1-依赖" tabindex="-1"><a class="header-anchor" href="#_4-1-依赖"><span>4.1. 依赖</span></a></h3><p>让我们首先添加_system-lambda_依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>````com.github.stefanbirkner````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````system-lambda`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`````1.2.1`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>````test````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>````\n````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-修改测试用例" tabindex="-1"><a class="header-anchor" href="#_4-2-修改测试用例"><span>4.2. 修改测试用例</span></a></h3><p>接下来，让我们修改测试用例。我们将<strong>使用库的_catchSystemExit()_方法包装我们原始的测试代码。这个方法将防止系统退出，并将返回退出代码</strong>。然后我们将断言退出代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">void</span> <span class="token function">givenDAOThrowsException_whenSaveTaskIsCalled_thenSystemExitIsCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> statusCode <span class="token operator">=</span> <span class="token function">catchSystemExit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Task</span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">TaskDAO</span> taskDAO <span class="token operator">=</span> <span class="token function">mock</span><span class="token punctuation">(</span><span class="token class-name">TaskDAO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">TaskService</span> service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskService</span><span class="token punctuation">(</span>taskDAO<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">doThrow</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span>taskDAO<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        service<span class="token punctuation">.</span><span class="token function">saveTask</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> statusCode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-使用jmockit" tabindex="-1"><a class="header-anchor" href="#_5-使用jmockit"><span>5. 使用JMockit</span></a></h2><p><strong>JMockit库提供了一种模拟_System_类的方法。我们可以使用它来改变_System.exit()_的行为并防止系统退出。</strong> 让我们探讨如何做到这一点。</p><h3 id="_5-1-依赖" tabindex="-1"><a class="header-anchor" href="#_5-1-依赖"><span>5.1. 依赖</span></a></h3><p>让我们添加JMockit依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>````org.jmockit````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````jmockit`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````\n    `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`````1.49`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>````test````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>````\n````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除此之外，我们需要为JMockit添加_-javaagent_ JVM初始化参数。我们可以使用Maven Surefire插件来实现这一点：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>`\n        `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````maven-surefire-plugin`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>`````\n        `````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>`````2.22.2`````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>`````\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>`\n           `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>argLine</span><span class="token punctuation">&gt;</span></span>`\n               -javaagent:&quot;${settings.localRepository}&quot;/org/jmockit/jmockit/1.49/jmockit-1.49.jar\n           `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>argLine</span><span class="token punctuation">&gt;</span></span>`\n        `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>`\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>`\n`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这将导致JMockit在JUnit之前初始化。这样，所有的测试用例都通过JMockit运行。如果使用旧版本的JMockit，则不需要初始化参数。</p><h3 id="_5-2-修改测试" tabindex="-1"><a class="header-anchor" href="#_5-2-修改测试"><span>5.2. 修改测试</span></a></h3><p>让我们修改测试以模拟_System.exit()_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">givenDAOThrowsException_whenSaveTaskIsCalled_thenSystemExitIsCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token keyword">new</span> <span class="token class-name">MockUp</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">System</span><span class="token punctuation">&gt;</span></span>`<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token annotation punctuation">@Mock</span>\n        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">Task</span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">TaskDAO</span> taskDAO <span class="token operator">=</span> <span class="token function">mock</span><span class="token punctuation">(</span><span class="token class-name">TaskDAO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">TaskService</span> service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskService</span><span class="token punctuation">(</span>taskDAO<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        <span class="token function">doThrow</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span>taskDAO<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        service<span class="token punctuation">.</span><span class="token function">saveTask</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这将抛出一个我们可以捕获并像早期安全管理员示例中那样断言的异常。</p><h2 id="_6-结论" tabindex="-1"><a class="header-anchor" href="#_6-结论"><span>6. 结论</span></a></h2><p>在本文中，我们探讨了使用JUnit测试调用_System.exit()_的代码可能存在的困难。然后我们通过添加安全管理员找到了解决方法。我们还查看了System Lambda和J</p>',60),c=[e];function o(l,i){return a(),s("div",null,c)}const d=n(p,[["render",o],["__file","2024-07-12-JUnit   Testing Methods That Call System.exit  .html.vue"]]),r=JSON.parse('{"path":"/posts/baeldung/2024-07-12/2024-07-12-JUnit%20%20%20Testing%20Methods%20That%20Call%20System.exit%20%20.html","title":"JUnit - 测试调用 System.exit() 的方法","lang":"zh-CN","frontmatter":{"date":"2022-11-01T00:00:00.000Z","category":["Testing","Java"],"tag":["JUnit","Mockito","System.exit"],"head":[["meta",{"name":"keywords","content":"JUnit, Testing, Java, System.exit, Mockito"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-12/2024-07-12-JUnit%20%20%20Testing%20Methods%20That%20Call%20System.exit%20%20.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"JUnit - 测试调用 System.exit() 的方法"}],["meta",{"property":"og:description","content":"JUnit - 测试调用 System.exit() 的方法 在某些情况下，可能需要一个方法调用_System.exit()_并关闭应用程序。例如，这可能是因为应用程序应该只运行一次然后退出，或者在出现严重错误如丢失数据库连接时。 如果一个方法调用了_System.exit()_，那么从单元测试中调用它并进行断言就会变得困难，因为这将导致单元测试退出。..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.baeldung.com/wp-content/uploads/2022/11/system-exits-test-skipped.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-12T21:41:27.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"JUnit"}],["meta",{"property":"article:tag","content":"Mockito"}],["meta",{"property":"article:tag","content":"System.exit"}],["meta",{"property":"article:published_time","content":"2022-11-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-12T21:41:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JUnit - 测试调用 System.exit() 的方法\\",\\"image\\":[\\"https://www.baeldung.com/wp-content/uploads/2022/11/system-exits-test-skipped.png\\"],\\"datePublished\\":\\"2022-11-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-12T21:41:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"JUnit - 测试调用 System.exit() 的方法 在某些情况下，可能需要一个方法调用_System.exit()_并关闭应用程序。例如，这可能是因为应用程序应该只运行一次然后退出，或者在出现严重错误如丢失数据库连接时。 如果一个方法调用了_System.exit()_，那么从单元测试中调用它并进行断言就会变得困难，因为这将导致单元测试退出。..."},"headers":[{"level":2,"title":"2. 项目设置","slug":"_2-项目设置","link":"#_2-项目设置","children":[{"level":3,"title":"2.1. JUnit和Mockito依赖","slug":"_2-1-junit和mockito依赖","link":"#_2-1-junit和mockito依赖","children":[]},{"level":3,"title":"2.2. 代码设置","slug":"_2-2-代码设置","link":"#_2-2-代码设置","children":[]},{"level":3,"title":"2.3. 单元测试","slug":"_2-3-单元测试","link":"#_2-3-单元测试","children":[]}]},{"level":2,"title":"3. 使用安全管理员的解决方法（Java 17之前）","slug":"_3-使用安全管理员的解决方法-java-17之前","link":"#_3-使用安全管理员的解决方法-java-17之前","children":[{"level":3,"title":"3.1. 安全管理员","slug":"_3-1-安全管理员","link":"#_3-1-安全管理员","children":[]},{"level":3,"title":"3.2. 修改测试","slug":"_3-2-修改测试","link":"#_3-2-修改测试","children":[]}]},{"level":2,"title":"4. 使用System Lambda库","slug":"_4-使用system-lambda库","link":"#_4-使用system-lambda库","children":[{"level":3,"title":"4.1. 依赖","slug":"_4-1-依赖","link":"#_4-1-依赖","children":[]},{"level":3,"title":"4.2. 修改测试用例","slug":"_4-2-修改测试用例","link":"#_4-2-修改测试用例","children":[]}]},{"level":2,"title":"5. 使用JMockit","slug":"_5-使用jmockit","link":"#_5-使用jmockit","children":[{"level":3,"title":"5.1. 依赖","slug":"_5-1-依赖","link":"#_5-1-依赖","children":[]},{"level":3,"title":"5.2. 修改测试","slug":"_5-2-修改测试","link":"#_5-2-修改测试","children":[]}]},{"level":2,"title":"6. 结论","slug":"_6-结论","link":"#_6-结论","children":[]}],"git":{"createdTime":1720820487000,"updatedTime":1720820487000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":5.05,"words":1515},"filePathRelative":"posts/baeldung/2024-07-12/2024-07-12-JUnit   Testing Methods That Call System.exit  .md","localizedDate":"2022年11月1日","excerpt":"\\n<p>在某些情况下，可能需要一个方法调用_System.exit()_并关闭应用程序。例如，这可能是因为应用程序应该只运行一次然后退出，或者在出现严重错误如丢失数据库连接时。</p>\\n<p>如果一个方法调用了_System.exit()_，那么从单元测试中调用它并进行断言就会变得困难，因为这将导致单元测试退出。</p>\\n<p>在本教程中，我们将探讨在使用JUnit时如何测试调用_System.exit()_的方法。</p>\\n<h2>2. 项目设置</h2>\\n<p>让我们首先创建一个Java项目。我们将创建一个服务，用于将任务保存到数据库。如果保存任务到数据库时抛出异常，该服务将调用_System.exit()_。</p>","autoDesc":true}');export{d as comp,r as data};
