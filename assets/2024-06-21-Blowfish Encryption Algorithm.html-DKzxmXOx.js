import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as e}from"./app-CLkVNUFR.js";const t={},p=e(`<h1 id="blowfish加密算法-baeldung" tabindex="-1"><a class="header-anchor" href="#blowfish加密算法-baeldung"><span>Blowfish加密算法 | Baeldung</span></a></h1><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p>Blowfish加密算法最初是作为DES加密算法的替代品设计的，是当今最流行的加密算法之一。<strong>Blowfish是由Bruce Schneier在1993年设计的一种对称密钥块密码，其块大小为64位，密钥长度为446位，优于DES和3DES算法。</strong></p><p>在本教程中，我们将学习如何使用Java Cryptography Architecture（JCA）在JDK中实现Blowfish密码的加密和解密。</p><h2 id="_2-生成密钥" tabindex="-1"><a class="header-anchor" href="#_2-生成密钥"><span>2. 生成密钥</span></a></h2><p>由于Blowfish是一种对称密钥块密码，它对加密和解密使用相同的密钥。因此，我们将在接下来的步骤中创建一个密钥来加密文本。**这个密钥应该安全地保存，并且不应该公开分享。**让我们定义密钥：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 生成密钥</span>
<span class="token class-name">String</span> secretKey <span class="token operator">=</span> <span class="token string">&quot;MyKey123&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keyData <span class="token operator">=</span> secretKey<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用Blowfish算法构建SecretKeySpec</span>
<span class="token class-name">SecretKeySpec</span> secretKeySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecretKeySpec</span><span class="token punctuation">(</span>keyData<span class="token punctuation">,</span> <span class="token string">&quot;Blowfish&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，<strong>我们可以继续使用Blowfish算法构建密码机：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 使用Blowfish算法构建密码机</span>
<span class="token class-name">Cipher</span> cipher <span class="token operator">=</span> <span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;Blowfish&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们将使用我们的密钥初始化密码机为加密模式（<em>Cipher.ENCRYPT_MODE</em>）：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 使用密钥初始化密码机为加密模式</span>
cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">ENCRYPT_MODE</span><span class="token punctuation">,</span> secretKeySpec<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-加密字符串" tabindex="-1"><a class="header-anchor" href="#_3-加密字符串"><span>3. 加密字符串</span></a></h2><p>让我们看看如何使用实例化的Blowfish密码机和密钥来加密字符串：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 要加密的文本</span>
<span class="token class-name">String</span> secretMessage <span class="token operator">=</span> <span class="token string">&quot;需要加密的秘密信息&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 加密消息</span>
<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> encryptedBytes <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>secretMessage<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如我们所看到的，**密码机以字节数组的形式给我们提供了加密消息。**但是，如果我们想要将其存储在数据库中或通过REST API发送加密消息，使用Base64字母编码会更合适、更安全：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 使用Base64编码器编码</span>
<span class="token class-name">String</span> encryptedtext <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>encryptedBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们得到了最终的加密文本，它是可读的且易于处理。</p><h2 id="_4-解密字符串" tabindex="-1"><a class="header-anchor" href="#_4-解密字符串"><span>4. 解密字符串</span></a></h2><p>使用Blowfish加密算法解密字符串同样简单。让我们看看实际操作。</p><p>首先，<strong>我们需要使用解密模式（<em>Cipher.DECRYPT_MODE</em>）以及_SecretKeySpec_初始化密码机：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 创建Blowfish密码机</span>
<span class="token class-name">Cipher</span> cipher <span class="token operator">=</span> <span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;Blowfish&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 使用解密模式和SecretKeySpec初始化</span>
cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">DECRYPT_MODE</span><span class="token punctuation">,</span> secretKeySpec<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们可以使用这个密码机来解密消息：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 使用Base64解码并解密消息</span>
<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> decrypted <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span><span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>encryptedtext<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 将解密后的字节转换为字符串</span>
<span class="token class-name">String</span> decryptedString <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>decrypted<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们可以通过与原始值进行比较来验证解密过程是否正确执行：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>secretMessage<span class="token punctuation">,</span> decryptedString<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此外，我们可以注意到，在加密和解密过程中我们都使用了_StandardCharsets.UTF_8_字符集。这样，我们可以确保加密或解密总是用UTF-8字符集的替换字节数组替换输入文本中包含的畸形和不可映射的字符序列。</p><h2 id="_5-文件操作" tabindex="-1"><a class="header-anchor" href="#_5-文件操作"><span>5. 文件操作</span></a></h2><p>有时，我们可能需要加密或解密整个文件，而不仅仅是单个字符串。**Blowfish加密算法允许加密和解密整个文件。**让我们看一个示例，创建一个临时文件并包含一些示例内容：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> originalContent <span class="token operator">=</span> <span class="token string">&quot;一些秘密文本文件&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">Path</span> tempFile <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">createTempFile</span><span class="token punctuation">(</span><span class="token string">&quot;temp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">writeFile</span><span class="token punctuation">(</span>tempFile<span class="token punctuation">,</span> originalContent<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们需要将内容转换为字节数组：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fileBytes <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span>tempFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在，我们可以使用加密密码机对整个文件进行加密：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Cipher</span> encryptCipher <span class="token operator">=</span> <span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;Blowfish&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
encryptCipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">ENCRYPT_MODE</span><span class="token punctuation">,</span> secretKeySpec<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> encryptedFileBytes <span class="token operator">=</span> encryptCipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>fileBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们可以覆盖临时文件中的加密内容：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileOutputStream</span> stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>tempFile<span class="token punctuation">.</span><span class="token function">toFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    stream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>encryptedFileBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解密整个文件的过程类似。唯一的区别是将密码机模式更改为进行解密：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>encryptedFileBytes <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span>tempFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Cipher</span> decryptCipher <span class="token operator">=</span> <span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;Blowfish&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
decryptCipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token constant">DECRYPT_MODE</span><span class="token punctuation">,</span> secretKeySpec<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> decryptedFileBytes <span class="token operator">=</span> decryptCipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>encryptedFileBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileOutputStream</span> stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>tempFile<span class="token punctuation">.</span><span class="token function">toFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    stream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>decryptedFileBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们可以验证文件内容是否与原始值匹配：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> fileContent <span class="token operator">=</span> <span class="token function">readFile</span><span class="token punctuation">(</span>tempFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>originalContent<span class="token punctuation">,</span> fileContent<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-弱点和后继者" tabindex="-1"><a class="header-anchor" href="#_6-弱点和后继者"><span>6. 弱点和后继者</span></a></h2><p>Blowfish是第一个不受专利限制且可自由供公众使用的安全的加密算法之一。尽管Blowfish算法在加密速度方面优于DES和3DES算法，但由于其固有设计，它有一些限制。</p><p><strong>Blowfish算法使用64位块大小，与AES的128位块大小相比</strong>。因此，这使其容易受到生日攻击，特别是在HTTPS上下文中。攻击者已经证明，他们可以利用64位块大小的密码来进行明文恢复（通过解密密文）。此外，由于其小块大小，开源项目如GnuPG建议不要使用Blowfish算法来加密大于4GB的文件。</p><p>更换新密钥会减慢进程。例如，每个新密钥需要预处理并占用大约4KB的文本，与其他块密码相比速度较慢。</p><p>Bruce Schneier推荐迁移到他的Blowfish后继者，即Twofish加密算法，它具有128位的块大小。它也有免费许可证，可供公众使用。</p><p>2005年，发布了Blowfish II，由除Bruce Schneier之外的人开发。Blowfish II具有相同的设计，但拥有两倍的S表，并使用64位整数而不是32位整数。此外，它像AES算法一样在128位块上工作。</p><p><strong>高级加密标准（AES）是一种流行且广泛使用的对称密钥加密算法</strong>。AES支持不同的密钥长度，如128、192和256位，以加密和解密数据。然而，其块大小固定为128位。</p><h2 id="_7-结论" tabindex="-1"><a class="header-anchor" href="#_7-结论"><span>7. 结论</span></a></h2><p>在本文中，我们学习了如何生成密钥以及如何使用Blowfish加密算法加密和解密字符串。此外，我们还看到了加密和解密文件同样简单。最后，我们还讨论了Blowfish的弱点和各种后继者。</p><p>如往常一样，本文的完整源代码可在GitHub上找到。</p>`,49),c=[p];function o(l,i){return s(),a("div",null,c)}const d=n(t,[["render",o],["__file","2024-06-21-Blowfish Encryption Algorithm.html.vue"]]),k=JSON.parse('{"path":"/posts/baeldung/2024-06-21/2024-06-21-Blowfish%20Encryption%20Algorithm.html","title":"Blowfish加密算法 | Baeldung","lang":"zh-CN","frontmatter":{"date":"2024-06-21T00:00:00.000Z","category":["Java","Cryptography"],"tag":["Blowfish","Encryption","Decryption"],"head":[["meta",{"name":"keywords","content":"Blowfish, Encryption, Decryption, Java, JCA"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-06-21/2024-06-21-Blowfish%20Encryption%20Algorithm.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Blowfish加密算法 | Baeldung"}],["meta",{"property":"og:description","content":"Blowfish加密算法 | Baeldung 1. 概述 Blowfish加密算法最初是作为DES加密算法的替代品设计的，是当今最流行的加密算法之一。Blowfish是由Bruce Schneier在1993年设计的一种对称密钥块密码，其块大小为64位，密钥长度为446位，优于DES和3DES算法。 在本教程中，我们将学习如何使用Java Crypt..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Blowfish"}],["meta",{"property":"article:tag","content":"Encryption"}],["meta",{"property":"article:tag","content":"Decryption"}],["meta",{"property":"article:published_time","content":"2024-06-21T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Blowfish加密算法 | Baeldung\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-21T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Blowfish加密算法 | Baeldung 1. 概述 Blowfish加密算法最初是作为DES加密算法的替代品设计的，是当今最流行的加密算法之一。Blowfish是由Bruce Schneier在1993年设计的一种对称密钥块密码，其块大小为64位，密钥长度为446位，优于DES和3DES算法。 在本教程中，我们将学习如何使用Java Crypt..."},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. 生成密钥","slug":"_2-生成密钥","link":"#_2-生成密钥","children":[]},{"level":2,"title":"3. 加密字符串","slug":"_3-加密字符串","link":"#_3-加密字符串","children":[]},{"level":2,"title":"4. 解密字符串","slug":"_4-解密字符串","link":"#_4-解密字符串","children":[]},{"level":2,"title":"5. 文件操作","slug":"_5-文件操作","link":"#_5-文件操作","children":[]},{"level":2,"title":"6. 弱点和后继者","slug":"_6-弱点和后继者","link":"#_6-弱点和后继者","children":[]},{"level":2,"title":"7. 结论","slug":"_7-结论","link":"#_7-结论","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":4.95,"words":1484},"filePathRelative":"posts/baeldung/2024-06-21/2024-06-21-Blowfish Encryption Algorithm.md","localizedDate":"2024年6月21日","excerpt":"\\n<h2>1. 概述</h2>\\n<p>Blowfish加密算法最初是作为DES加密算法的替代品设计的，是当今最流行的加密算法之一。<strong>Blowfish是由Bruce Schneier在1993年设计的一种对称密钥块密码，其块大小为64位，密钥长度为446位，优于DES和3DES算法。</strong></p>\\n<p>在本教程中，我们将学习如何使用Java Cryptography Architecture（JCA）在JDK中实现Blowfish密码的加密和解密。</p>\\n<h2>2. 生成密钥</h2>\\n<p>由于Blowfish是一种对称密钥块密码，它对加密和解密使用相同的密钥。因此，我们将在接下来的步骤中创建一个密钥来加密文本。**这个密钥应该安全地保存，并且不应该公开分享。**让我们定义密钥：</p>","autoDesc":true}');export{d as comp,k as data};
