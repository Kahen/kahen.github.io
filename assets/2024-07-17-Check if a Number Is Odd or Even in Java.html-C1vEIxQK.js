import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-DFhKiB50.js";const e={},p=t(`<hr><h1 id="在java中检查数字是奇数还是偶数" tabindex="-1"><a class="header-anchor" href="#在java中检查数字是奇数还是偶数"><span>在Java中检查数字是奇数还是偶数</span></a></h1><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p>众所周知，数字的奇偶性由其除以2的余数决定。偶数的余数为0，而奇数的余数为1。</p><p>在本教程中，<strong>我们将看到多种在Java中检查数字是偶数还是奇数的方法。</strong></p><h2 id="_2-除法方法" tabindex="-1"><a class="header-anchor" href="#_2-除法方法"><span>2. 除法方法</span></a></h2><p>返回除法余数的算术运算符是模运算符 <em>%</em>。</p><p>我们可以通过将数字除以2并检查余数来验证数字是偶数还是奇数的最简单方法是：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">boolean</span> <span class="token function">isEven</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">boolean</span> <span class="token function">isOdd</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们编写一些测试来确认我们方法的行为：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token function">isEven</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token function">isOdd</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-位运算方法" tabindex="-1"><a class="header-anchor" href="#_3-位运算方法"><span>3. 位运算方法</span></a></h2><p>我们可以对数字执行多个位运算来确定它是偶数还是奇数。</p><p><strong>位运算</strong> <strong>比其他方法更高效</strong> <strong>以确定数字的奇偶性。</strong></p><h3 id="_3-1-位运算-or" tabindex="-1"><a class="header-anchor" href="#_3-1-位运算-or"><span>3.1. 位运算 <em>OR</em> (\\|)</span></a></h3><p><strong>偶数 <em>OR</em> 1 总是将数字增加1。</strong></p><p><strong>奇数 <em>OR</em> 1 总是得到</strong> <strong>相同的数字：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">boolean</span> <span class="token function">isOrEven</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> x<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">boolean</span> <span class="token function">isOrOdd</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> x<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们用一些测试来演示我们的代码行为：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token function">isOrEven</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token function">isOrOdd</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-位运算-and-u0026" tabindex="-1"><a class="header-anchor" href="#_3-2-位运算-and-u0026"><span>3.2. 位运算 <em>AND</em> ( <em>\\u0026</em>)</span></a></h3><p><strong>偶数 <em>AND</em> 1 总是得到0。</strong> 另一方面，<strong>奇数 <em>AND</em> 1</strong> <strong>总是得到1：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">boolean</span> <span class="token function">isAndEven</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">boolean</span> <span class="token function">isAndOdd</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将通过一个小测试来确认这种行为：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token function">isAndEven</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token function">isAndOdd</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-位运算-xor" tabindex="-1"><a class="header-anchor" href="#_3-3-位运算-xor"><span>3.3. 位运算 <em>XOR</em> ( <em>^</em>)</span></a></h3><p><strong>位运算 <em>XOR</em> 是</strong> <strong>检查数字奇偶性的</strong> <strong>最佳解决方案。</strong></p><p><strong>偶数 <em>XOR</em> 1 总是</strong> <strong>增加数字1，而</strong> <strong>奇数 <em>XOR</em> 1 总是</strong> <strong>减少它1：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">boolean</span> <span class="token function">isXorEven</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> x<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">boolean</span> <span class="token function">isXorOdd</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> x<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们编写一些小型测试来检查我们的代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token function">isXorEven</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token function">isXorOdd</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-最低有效位-lsb" tabindex="-1"><a class="header-anchor" href="#_4-最低有效位-lsb"><span>4. 最低有效位 (LSB)</span></a></h2><p>我们展示的最后方法是读取数字的最低有效位。</p><p><strong>偶数的最低有效位</strong> <strong>总是0，而奇数的最低有效位总是1：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">boolean</span> <span class="token function">isLsbEven</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">boolean</span> <span class="token function">isLsbOdd</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将通过几行代码来演示这种行为：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token function">isLsbEven</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token function">isLsbOdd</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-结论" tabindex="-1"><a class="header-anchor" href="#_5-结论"><span>5. 结论</span></a></h2><p>在本文中，我们学习了多种检查数字奇偶性的方法，即它是偶数还是奇数。我们看到<strong>检查奇偶性的最佳解决方案是位运算 <em>XOR</em> 操作。</strong></p><p>一如既往，示例的源代码可以在GitHub上找到。</p>`,40),o=[p];function c(l,i){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","2024-07-17-Check if a Number Is Odd or Even in Java.html.vue"]]),k=JSON.parse('{"path":"/posts/baeldung/2024-07-17/2024-07-17-Check%20if%20a%20Number%20Is%20Odd%20or%20Even%20in%20Java.html","title":"在Java中检查数字是奇数还是偶数","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","Programming"],"tag":["Java","Number Parity","Bitwise Operations","Least Significant Bit"],"head":[["meta",{"name":"keywords","content":"Java, Number Parity, Bitwise Operations, Least Significant Bit"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-17/2024-07-17-Check%20if%20a%20Number%20Is%20Odd%20or%20Even%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"在Java中检查数字是奇数还是偶数"}],["meta",{"property":"og:description","content":"在Java中检查数字是奇数还是偶数 1. 概述 众所周知，数字的奇偶性由其除以2的余数决定。偶数的余数为0，而奇数的余数为1。 在本教程中，我们将看到多种在Java中检查数字是偶数还是奇数的方法。 2. 除法方法 返回除法余数的算术运算符是模运算符 %。 我们可以通过将数字除以2并检查余数来验证数字是偶数还是奇数的最简单方法是： 让我们编写一些测试来确..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-17T15:29:41.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Number Parity"}],["meta",{"property":"article:tag","content":"Bitwise Operations"}],["meta",{"property":"article:tag","content":"Least Significant Bit"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-17T15:29:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"在Java中检查数字是奇数还是偶数\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-17T15:29:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"在Java中检查数字是奇数还是偶数 1. 概述 众所周知，数字的奇偶性由其除以2的余数决定。偶数的余数为0，而奇数的余数为1。 在本教程中，我们将看到多种在Java中检查数字是偶数还是奇数的方法。 2. 除法方法 返回除法余数的算术运算符是模运算符 %。 我们可以通过将数字除以2并检查余数来验证数字是偶数还是奇数的最简单方法是： 让我们编写一些测试来确..."},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. 除法方法","slug":"_2-除法方法","link":"#_2-除法方法","children":[]},{"level":2,"title":"3. 位运算方法","slug":"_3-位运算方法","link":"#_3-位运算方法","children":[{"level":3,"title":"3.1. 位运算 OR (\\\\|)","slug":"_3-1-位运算-or","link":"#_3-1-位运算-or","children":[]},{"level":3,"title":"3.2. 位运算 AND ( \\\\u0026)","slug":"_3-2-位运算-and-u0026","link":"#_3-2-位运算-and-u0026","children":[]},{"level":3,"title":"3.3. 位运算 XOR ( ^)","slug":"_3-3-位运算-xor","link":"#_3-3-位运算-xor","children":[]}]},{"level":2,"title":"4. 最低有效位 (LSB)","slug":"_4-最低有效位-lsb","link":"#_4-最低有效位-lsb","children":[]},{"level":2,"title":"5. 结论","slug":"_5-结论","link":"#_5-结论","children":[]}],"git":{"createdTime":1721230181000,"updatedTime":1721230181000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":2.24,"words":672},"filePathRelative":"posts/baeldung/2024-07-17/2024-07-17-Check if a Number Is Odd or Even in Java.md","localizedDate":"2022年4月1日","excerpt":"<hr>\\n<h1>在Java中检查数字是奇数还是偶数</h1>\\n<h2>1. 概述</h2>\\n<p>众所周知，数字的奇偶性由其除以2的余数决定。偶数的余数为0，而奇数的余数为1。</p>\\n<p>在本教程中，<strong>我们将看到多种在Java中检查数字是偶数还是奇数的方法。</strong></p>\\n<h2>2. 除法方法</h2>\\n<p>返回除法余数的算术运算符是模运算符 <em>%</em>。</p>\\n<p>我们可以通过将数字除以2并检查余数来验证数字是偶数还是奇数的最简单方法是：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">boolean</span> <span class=\\"token function\\">isEven</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> x<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> x <span class=\\"token operator\\">%</span> <span class=\\"token number\\">2</span> <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">boolean</span> <span class=\\"token function\\">isOdd</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> x<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> x <span class=\\"token operator\\">%</span> <span class=\\"token number\\">2</span> <span class=\\"token operator\\">!=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{d as comp,k as data};
