import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-D9qUUkNr.js";const p={},e=t(`<h1 id="在java中比较两个文件的内容-baeldung" tabindex="-1"><a class="header-anchor" href="#在java中比较两个文件的内容-baeldung"><span>在Java中比较两个文件的内容 | Baeldung</span></a></h1><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p>在本教程中，我们将回顾不同的方法来确定两个文件的内容是否相等。我们将使用Java核心Stream I/O库来读取文件内容并实现基本比较。</p><p>最后，我们将回顾Apache Commons I/O提供的支持，以检查两个文件内容的相等性。</p><h2 id="_2-字节比较" tabindex="-1"><a class="header-anchor" href="#_2-字节比较"><span>2. 字节比较</span></a></h2><p>让我们从一种<strong>简单的方式来读取两个文件的字节并顺序比较它们</strong>。</p><p>为了加快文件读取速度，我们将使用_BufferedInputStream_。正如我们将看到的，_BufferedInputStream_从底层_InputStream_读取大块字节到内部缓冲区。当客户端读取完块中的所有字节时，缓冲区会从流中读取另一块字节。</p><p>显然，<strong>使用_BufferedInputStream_比一次从底层流中读取一个字节要快得多</strong>。</p><p>让我们编写一个使用_BufferedInputStream_比较两个文件的方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">filesCompareByByte</span><span class="token punctuation">(</span><span class="token class-name">Path</span> path1<span class="token punctuation">,</span> <span class="token class-name">Path</span> path2<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">BufferedInputStream</span> fis1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>path1<span class="token punctuation">.</span><span class="token function">toFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token class-name">BufferedInputStream</span> fis2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>path2<span class="token punctuation">.</span><span class="token function">toFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> pos <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> fis1<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">!=</span> fis2<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> pos<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            pos<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>fis2<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> pos<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用_try-with-resources_语句确保两个_BufferedInputStream_在语句结束时关闭。</p><p>使用_while_循环，我们读取第一个文件的每个字节并与第二个文件的相应字节进行比较。如果我们发现差异，我们返回不匹配的字节位置。否则，文件相同，方法返回-1L。</p><p>我们可以看到，如果文件大小不同，但较小文件的字节与较大文件的相应字节匹配，则它返回较小文件的大小（以字节为单位）。</p><h2 id="_3-逐行比较" tabindex="-1"><a class="header-anchor" href="#_3-逐行比较"><span>3. 逐行比较</span></a></h2><p><strong>要比较文本文件，我们可以进行实现，逐行读取文件并检查它们之间的相等性</strong>。</p><p>让我们使用_BufferedReader_，它使用与_InputStreamBuffer_相同的策略，将数据块从文件复制到内部缓冲区以加快读取过程。</p><p>让我们回顾一下我们的实现：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">filesCompareByLine</span><span class="token punctuation">(</span><span class="token class-name">Path</span> path1<span class="token punctuation">,</span> <span class="token class-name">Path</span> path2<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">BufferedReader</span> bf1 <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">newBufferedReader</span><span class="token punctuation">(</span>path1<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token class-name">BufferedReader</span> bf2 <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">newBufferedReader</span><span class="token punctuation">(</span>path2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">long</span> lineNumber <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> line1 <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> line2 <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line1 <span class="token operator">=</span> bf1<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            line2 <span class="token operator">=</span> bf2<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>line2 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>line1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>line2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> lineNumber<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            lineNumber<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>bf2<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> lineNumber<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码遵循与前一个示例相同的策略。在_while_循环中，我们不是读取字节，而是读取每个文件的一行并检查它们是否相等。如果两个文件的所有行都相同，那么我们返回-1L，但如果有差异，我们返回第一个不匹配行的行号。</p><p>如果文件大小不同，但较小的文件与较大文件的相应行匹配，则它返回较小文件的行数。</p><h2 id="_4-使用-files-mismatch" tabindex="-1"><a class="header-anchor" href="#_4-使用-files-mismatch"><span>4. 使用_Files::mismatch_</span></a></h2><p><strong>_Files::mismatch_方法，添加于Java 12，比较两个文件的内容</strong>。如果文件相同，它返回-1L，否则，它返回第一个不匹配的字节位置。</p><p>这个方法<strong>内部从文件的_InputStream_ s读取数据块，并使用Java 9引入的_Arrays::mismatch_来比较它们</strong>。</p><p>与我们的第一个示例一样，对于大小不同但小文件的内容与大文件的相应内容相同的文件，它返回较小文件的大小（以字节为单位）。</p><p>要查看如何使用这个方法的示例，请参见我们涵盖Java 12新特性的文章。</p><h2 id="_5-使用内存映射文件" tabindex="-1"><a class="header-anchor" href="#_5-使用内存映射文件"><span>5. 使用内存映射文件</span></a></h2><p>内存映射文件是一个内核对象，它将磁盘文件的字节映射到计算机的内存地址空间。绕过了堆内存，因为Java代码操作内存映射文件的内容就好像我们直接访问内存一样。</p><p><strong>对于大文件，从内存映射文件中读写数据比使用标准Java I/O库要快得多</strong>。重要的是计算机有足够的内存来处理任务，以防止颠簸。</p><p>让我们编写一个非常简单的示例，展示如何使用内存映射文件比较两个文件的内容：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">compareByMemoryMappedFiles</span><span class="token punctuation">(</span><span class="token class-name">Path</span> path1<span class="token punctuation">,</span> <span class="token class-name">Path</span> path2<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">RandomAccessFile</span> randomAccessFile1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span>path1<span class="token punctuation">.</span><span class="token function">toFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token class-name">RandomAccessFile</span> randomAccessFile2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span>path2<span class="token punctuation">.</span><span class="token function">toFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">FileChannel</span> ch1 <span class="token operator">=</span> randomAccessFile1<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">FileChannel</span> ch2 <span class="token operator">=</span> randomAccessFile2<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ch1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> ch2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">long</span> size <span class="token operator">=</span> ch1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">MappedByteBuffer</span> m1 <span class="token operator">=</span> ch1<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">FileChannel<span class="token punctuation">.</span>MapMode</span><span class="token punctuation">.</span><span class="token constant">READ_ONLY</span><span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">MappedByteBuffer</span> m2 <span class="token operator">=</span> ch2<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">FileChannel<span class="token punctuation">.</span>MapMode</span><span class="token punctuation">.</span><span class="token constant">READ_ONLY</span><span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> m1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果文件内容相同，该方法返回_true_，否则返回_false_。</p><p>我们使用_RamdomAccessFile_类打开文件，并访问它们各自的_FileChannel_以获取_MappedByteBuffer_。这是一个直接字节缓冲区，是文件的内存映射区域。在这个简单的实现中，我们使用它的_equals_方法在内存中一次性比较整个文件的字节。</p><h2 id="_6-使用apache-commons-i-o" tabindex="-1"><a class="header-anchor" href="#_6-使用apache-commons-i-o"><span>6. 使用Apache Commons I/O</span></a></h2><p><strong>_IOUtils::contentEquals_和_IOUtils::contentEqualsIgnoreEOL_方法比较两个文件的内容以确定相等性</strong>。它们之间的差异在于**_contentEqualsIgnoreEOL_忽略了换行符(\\\\n)和回车符(\\\\r)**。这样做的动机是操作系统使用不同的这些控制字符组合来定义新行。</p><p>让我们看一个简单的示例来检查相等性：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenFilesIdentical_thenReturnTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token class-name">Path</span> path1 <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">createTempFile</span><span class="token punctuation">(</span><span class="token string">&quot;file1Test&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Path</span> path2 <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">createTempFile</span><span class="token punctuation">(</span><span class="token string">&quot;file2Test&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">InputStream</span> inputStream1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>path1<span class="token punctuation">.</span><span class="token function">toFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">InputStream</span> inputStream2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>path2<span class="token punctuation">.</span><span class="token function">toFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span>path1<span class="token punctuation">,</span> <span class="token string">&quot;testing line 1&quot;</span> <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">lineSeparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;line 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span>path2<span class="token punctuation">,</span> <span class="token string">&quot;testing line 1&quot;</span> <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">lineSeparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;line 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">contentEquals</span><span class="token punctuation">(</span>inputStream1<span class="token punctuation">,</span> inputStream2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们想忽略换行控制字符，但除此之外检查内容的相等性：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenFilesIdenticalIgnoreEOF_thenReturnTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token class-name">Path</span> path1 <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">createTempFile</span><span class="token punctuation">(</span><span class="token string">&quot;file1Test&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Path</span> path2 <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">createTempFile</span><span class="token punctuation">(</span><span class="token string">&quot;file2Test&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span>path1<span class="token punctuation">,</span> <span class="token string">&quot;testing line 1 \\n line 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span>path2<span class="token punctuation">,</span> <span class="token string">&quot;testing line 1 \\r\\n line 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Reader</span> reader1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>path1<span class="token punctuation">.</span><span class="token function">toFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Reader</span> reader2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>path2<span class="token punctuation">.</span><span class="token function">toFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">contentEqualsIgnoreEOL</span><span class="token punctuation">(</span>reader1<span class="token punctuation">,</span> reader2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-结论" tabindex="-1"><a class="header-anchor" href="#_7-结论"><span>7. 结论</span></a></h2><p>在本文中，我们涵盖了几种实现比较两个文件内容以检查相等性的方法。</p><p>源代码可以在GitHub上找到。</p>`,41),o=[e];function c(l,i){return a(),s("div",null,o)}const r=n(p,[["render",c],["__file","2024-07-26-Compare the Content of Two Files in Java.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-26/2024-07-26-Compare%20the%20Content%20of%20Two%20Files%20in%20Java.html","title":"在Java中比较两个文件的内容 | Baeldung","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","文件操作"],"tag":["文件比较","Java Stream I/O","Apache Commons I/O"],"head":[["meta",{"name":"keywords","content":"Java文件比较, 文件内容比较, Java Stream I/O, Apache Commons I/O"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-26/2024-07-26-Compare%20the%20Content%20of%20Two%20Files%20in%20Java.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"在Java中比较两个文件的内容 | Baeldung"}],["meta",{"property":"og:description","content":"在Java中比较两个文件的内容 | Baeldung 1. 概述 在本教程中，我们将回顾不同的方法来确定两个文件的内容是否相等。我们将使用Java核心Stream I/O库来读取文件内容并实现基本比较。 最后，我们将回顾Apache Commons I/O提供的支持，以检查两个文件内容的相等性。 2. 字节比较 让我们从一种简单的方式来读取两个文件的字..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-26T21:58:51.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"文件比较"}],["meta",{"property":"article:tag","content":"Java Stream I/O"}],["meta",{"property":"article:tag","content":"Apache Commons I/O"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-26T21:58:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"在Java中比较两个文件的内容 | Baeldung\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-26T21:58:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"在Java中比较两个文件的内容 | Baeldung 1. 概述 在本教程中，我们将回顾不同的方法来确定两个文件的内容是否相等。我们将使用Java核心Stream I/O库来读取文件内容并实现基本比较。 最后，我们将回顾Apache Commons I/O提供的支持，以检查两个文件内容的相等性。 2. 字节比较 让我们从一种简单的方式来读取两个文件的字..."},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. 字节比较","slug":"_2-字节比较","link":"#_2-字节比较","children":[]},{"level":2,"title":"3. 逐行比较","slug":"_3-逐行比较","link":"#_3-逐行比较","children":[]},{"level":2,"title":"4. 使用_Files::mismatch_","slug":"_4-使用-files-mismatch","link":"#_4-使用-files-mismatch","children":[]},{"level":2,"title":"5. 使用内存映射文件","slug":"_5-使用内存映射文件","link":"#_5-使用内存映射文件","children":[]},{"level":2,"title":"6. 使用Apache Commons I/O","slug":"_6-使用apache-commons-i-o","link":"#_6-使用apache-commons-i-o","children":[]},{"level":2,"title":"7. 结论","slug":"_7-结论","link":"#_7-结论","children":[]}],"git":{"createdTime":1722031131000,"updatedTime":1722031131000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":4.93,"words":1478},"filePathRelative":"posts/baeldung/2024-07-26/2024-07-26-Compare the Content of Two Files in Java.md","localizedDate":"2022年4月1日","excerpt":"\\n<h2>1. 概述</h2>\\n<p>在本教程中，我们将回顾不同的方法来确定两个文件的内容是否相等。我们将使用Java核心Stream I/O库来读取文件内容并实现基本比较。</p>\\n<p>最后，我们将回顾Apache Commons I/O提供的支持，以检查两个文件内容的相等性。</p>\\n<h2>2. 字节比较</h2>\\n<p>让我们从一种<strong>简单的方式来读取两个文件的字节并顺序比较它们</strong>。</p>\\n<p>为了加快文件读取速度，我们将使用_BufferedInputStream_。正如我们将看到的，_BufferedInputStream_从底层_InputStream_读取大块字节到内部缓冲区。当客户端读取完块中的所有字节时，缓冲区会从流中读取另一块字节。</p>","autoDesc":true}');export{r as comp,d as data};
