import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as e}from"./app-D0vunQyr.js";const t={},p=e(`<h1 id="java-bytebuffer-指南" tabindex="-1"><a class="header-anchor" href="#java-bytebuffer-指南"><span>Java ByteBuffer 指南</span></a></h1><h2 id="_1-概览" tabindex="-1"><a class="header-anchor" href="#_1-概览"><span>1. 概览</span></a></h2><p>Buffer 类是 Java NIO 的基础。然而，在这些类中，ByteBuffer 类是最受欢迎。这是因为 byte 类型是最通用的。例如，我们可以使用字节来组成 JVM 中的其他非布尔基本类型。此外，我们还可以使用字节在 JVM 与外部 I/O 设备之间传输数据。</p><p>在本教程中，我们将检查 ByteBuffer 类的不同方面。</p><h2 id="_2-bytebuffer-创建" tabindex="-1"><a class="header-anchor" href="#_2-bytebuffer-创建"><span>2. ByteBuffer 创建</span></a></h2><p>ByteBuffer 是一个抽象类，所以我们不能直接构造一个新的实例。但是，它提供了静态工厂方法来方便实例创建。简单来说，有两种方式可以创建 ByteBuffer 实例，一种是通过分配，另一种是通过包装：</p><h3 id="_2-1-分配" tabindex="-1"><a class="header-anchor" href="#_2-1-分配"><span>2.1. 分配</span></a></h3><p>分配将创建一个实例并分配具有特定容量的私有空间。具体来说，ByteBuffer 类有两种分配方法：allocate 和 allocateDirect。</p><p>使用 allocate 方法，我们将得到一个非直接缓冲区 - 即，一个具有底层字节数组的缓冲区实例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当我们使用 allocateDirect 方法时，它将生成一个直接缓冲区：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocateDirect</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>为了简单起见，让我们专注于非直接缓冲区，并稍后讨论直接缓冲区。</p><h3 id="_2-2-包装" tabindex="-1"><a class="header-anchor" href="#_2-2-包装"><span>2.2. 包装</span></a></h3><p>包装允许一个实例重用现有的字节数组：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码等同于：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对现有字节数组中的数据元素所做的任何更改都将反映在缓冲区实例中，反之亦然。</p><h3 id="_2-3-洋葱模型" tabindex="-1"><a class="header-anchor" href="#_2-3-洋葱模型"><span>2.3. 洋葱模型</span></a></h3><p>现在，我们知道了如何获取 ByteBuffer 实例。接下来，让我们将 ByteBuffer 类视为一个三层洋葱模型，并从内到外逐层理解它：</p><ul><li>数据和索引层</li><li>传输数据层</li><li>视图层</li></ul><p>在最内层，我们将 ByteBuffer 类视为一个带有额外索引的字节数组容器。在中间层，我们专注于使用 ByteBuffer 实例将数据从/到其他数据类型传输。在最外层，我们使用不同的基于缓冲区的视图检查相同的底层数据。</p><h2 id="_3-bytebuffer-索引" tabindex="-1"><a class="header-anchor" href="#_3-bytebuffer-索引"><span>3. ByteBuffer 索引</span></a></h2><p>概念上，ByteBuffer 类是一个包装在对象内部的字节数组。它提供了许多方便的方法来促进对底层数据的读写操作。而且，这些方法高度依赖于维护的索引。</p><p>现在，让我们故意简化 ByteBuffer 类为带有额外索引的字节数组容器：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ByteBuffer</span> <span class="token operator">=</span> 字节数组 <span class="token operator">+</span> 索引
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>有了这个概念，我们可以将索引相关的方法分为四类：</p><ul><li>基本</li><li>标记和重置</li><li>清除、翻转、倒带和压缩</li><li>剩余</li></ul><h3 id="_3-1-四个基本索引" tabindex="-1"><a class="header-anchor" href="#_3-1-四个基本索引"><span>3.1. 四个基本索引</span></a></h3><p>在 Buffer 类中定义了四个索引。这些索引记录了底层数据元素的状态：</p><ul><li>容量：缓冲区可以容纳的数据元素的最大数量</li><li>限制：停止读写的索引</li><li>位置：当前读写的索引</li><li>标记：记住的位置</li></ul><p>还有这些索引之间的不变关系：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token number">0</span> \`<span class="token operator">&lt;=</span> mark <span class="token operator">&lt;=</span> position <span class="token operator">&lt;=</span> limit <span class="token operator">&lt;=</span> capacity
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>并且，我们应该注意 <strong>所有索引相关的方法都围绕这四个索引旋转</strong>。</p><p>当我们创建一个新的 ByteBuffer 实例时，标记是未定义的，位置保持为 0，限制等于容量。例如，让我们分配一个包含 10 个数据元素的 ByteBuffer：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者，让我们用包含 10 个数据元素的现有字节数组包装：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>结果，标记将是 -1，位置将是 0，限制和容量都将是 10：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> position <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
<span class="token keyword">int</span> limit <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 10</span>
<span class="token keyword">int</span> capacity <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>容量是只读的，不能更改。但是，我们可以使用 position(int) 和 limit(int) 方法来更改相应的位置和限制：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>buffer<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
buffer<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，位置将是 2，限制将是 5。</p><h3 id="_3-2-标记和重置" tabindex="-1"><a class="header-anchor" href="#_3-2-标记和重置"><span>3.2. 标记和重置</span></a></h3><p>mark() 和 reset() 方法允许我们记住特定位置并在以后返回。当我们第一次创建一个 ByteBuffer 实例时，标记是未定义的。然后，我们可以调用 mark() 方法，将标记设置为当前位置。在一些操作之后，调用 reset() 方法将位置更改回标记。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// mark = -1, position = 0</span>
buffer<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">// mark = -1, position = 2</span>
buffer<span class="token punctuation">.</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment">// mark = 2,  position = 2</span>
buffer<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">// mark = 2,  position = 5</span>
buffer<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token comment">// mark = 2,  position = 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的一点：如果标记是未定义的，调用 reset() 方法将导致 InvalidMarkException。</p><h3 id="_3-3-清除、翻转、倒带和压缩" tabindex="-1"><a class="header-anchor" href="#_3-3-清除、翻转、倒带和压缩"><span>3.3. 清除、翻转、倒带和压缩</span></a></h3><p>clear()、flip()、rewind() 和 compact() 方法有一些共同点和轻微的不同：</p><p>为了比较这些方法，让我们准备一个代码片段：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// mark = -1, position = 0, limit = 10</span>
buffer<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">// mark = -1, position = 2, limit = 10</span>
buffer<span class="token punctuation">.</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment">// mark = 2,  position = 2, limit = 10</span>
buffer<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">// mark = 2,  position = 5, limit = 10</span>
buffer<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                             <span class="token comment">// mark = 2,  position = 5, limit = 8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>clear() 方法将限制更改为容量，位置更改为 0，并将标记更改为 -1：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>buffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token comment">// mark = -1, position = 0, limit = 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>flip() 方法将限制更改为位置，位置更改为 0，并将标记更改为 -1：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment">// mark = -1, position = 0, limit = 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>rewind() 方法保持限制不变，将位置更改为 0，并将标记更改为 -1：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>buffer<span class="token punctuation">.</span><span class="token function">rewind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                             <span class="token comment">// mark = -1, position = 0, limit = 8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>compact() 方法将限制更改为容量，位置更改为剩余（限制 - 位置），并将标记更改为 -1：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>buffer<span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment">// mark = -1, position = 3, limit = 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上述四种方法各自有自己的用例：</p><ul><li>要重用缓冲区，clear() 方法很有用。它将索引设置为初始状态，并准备好进行新的写操作。</li><li>调用 flip() 方法后，缓冲区实例从写模式切换到读模式。但是，我们应该避免两次调用 flip() 方法。那是因为第二次调用将限制设置为 0，没有数据元素可以读取。</li><li>如果我们想多次读取底层数据，rewind() 方法很有用。</li><li>compact() 方法适用于部分重用缓冲区。例如，假设我们想读取一些，但不是全部的底层数据，然后我们想将数据写入缓冲区。compact() 方法将未读数据复制到缓冲区的开头，并更改缓冲区索引，以准备好进行写操作。</li></ul><h3 id="_3-4-剩余" tabindex="-1"><a class="header-anchor" href="#_3-4-剩余"><span>3.4. 剩余</span></a></h3><p>hasRemaining() 和 remaining() 方法计算限制和位置之间的关系：</p><p>当限制大于位置时，hasRemaining() 将返回 true。此外，remaining() 方法返回限制和位置之间的差异。</p><p>例如，如果一个缓冲区的位置为 2，限制为 8，那么它的剩余将是 6：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// mark = -1, position = 0, limit = 10</span>
buffer<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">// mark = -1, position = 2, limit = 10</span>
buffer<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                             <span class="token comment">// mark = -1, position = 2, limit = 8</span>
<span class="token keyword">boolean</span> flag <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">hasRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// true</span>
<span class="token keyword">int</span> remaining <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">remaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-传输数据" tabindex="-1"><a class="header-anchor" href="#_4-传输数据"><span>4. 传输数据</span></a></h2><p>洋葱模型的第二层关注于数据传输。具体来说，ByteBuffer 类提供了将数据从/到其他数据类型（字节、字符、短整型、整型、长整型、浮点型和双精度型）传输的方法：</p><h3 id="_4-1-传输字节数据" tabindex="-1"><a class="header-anchor" href="#_4-1-传输字节数据"><span>4.1. 传输字节数据</span></a></h3><p>要传输字节数据，ByteBuffer 类提供了单个和批量操作。</p><p><strong>我们可以在单个操作中从缓冲区的底层数据中读取或写入单个字节。</strong> 这些操作包括：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">byte</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">ByteBuffer</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">byte</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">byte</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">ByteBuffer</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">byte</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以从上述方法中注意到 get()/put方法有两种版本：没有参数的和接受索引的。那么，有什么区别呢？</p><p>没有索引的是一个相对操作，它作用于当前位置的数据元素，然后位置增加 1。但是，接受索引的是一个绝对操作，它作用于索引处的数据元素，不会改变位置。</p><p><strong>相比之下，批量操作可以从缓冲区的底层数据中读取或写入多个字节。</strong> 这些操作包括：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ByteBuffer</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dst<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token class-name">ByteBuffer</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dst<span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token class-name">ByteBuffer</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token class-name">ByteBuffer</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> src<span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述方法都属于相对操作。也就是说，它们将从当前位置读取或写入，并分别改变位置值。</p><p>还有另一个 put() 方法，它接受一个 ByteBuffer 参数：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ByteBuffer</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-2-传输整型数据" tabindex="-1"><a class="header-anchor" href="#_4-2-传输整型数据"><span>4.2. 传输整型数据</span></a></h3><p>除了读写字节数据外，ByteBuffer 类还支持除布尔类型之外的其他原始类型。让我们以整型为例。相关方法包括：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">getInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">ByteBuffer</span> <span class="token function">putInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">getInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">ByteBuffer</span> <span class="token function">putInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样，带有索引参数的 getInt() 和 putInt() 方法是绝对操作，否则是相对操作。</p><h2 id="_5-不同视图" tabindex="-1"><a class="header-anchor" href="#_5-不同视图"><span>5. 不同视图</span></a></h2><p>洋葱模型的第三层是关于<strong>用不同视角读取相同的底层数据</strong>。</p><p>上图中的每个方法都会生成一个新的视图，这些视图与原始缓冲区共享相同的底层数据。要理解一个新视图，我们应该关注两个问题：</p><ul><li>新视图将如何解析底层数据？</li><li>新视图将如何记录其索引？</li></ul><h3 id="_5-1-bytebuffer-视图" tabindex="-1"><a class="header-anchor" href="#_5-1-bytebuffer-视图"><span>5.1. ByteBuffer 视图</span></a></h3><p>要将 ByteBuffer 实例读取为另一个 ByteBuffer 视图，它有三种方法：duplicate()、slice() 和 asReadOnlyBuffer()。</p><p>让我们看看这些差异的说明：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// mark = -1, position = 0, limit = 10, capacity = 10</span>
buffer<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">// mark = -1, position = 2, limit = 10, capacity = 10</span>
buffer<span class="token punctuation">.</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment">// mark = 2,  position = 2, limit = 10, capacity = 10</span>
buffer<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">// mark = 2,  position = 5, limit = 10, capacity = 10</span>
buffer<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                             <span class="token comment">// mark = 2,  position = 5, limit = 8,  capacity = 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>duplicate() 方法创建一个新的 ByteBuffer 实例，就像原始的一样。但是，两个缓冲区将各自拥有独立的限制、位置和标记：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ByteBuffer</span> view <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">duplicate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// mark = 2,  position = 5, limit = 8,  capacity = 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>slice() 方法创建了一个共享的底层数据子视图。视图的位置将是 0，其限制和容量将是原始缓冲区的剩余部分：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ByteBuffer</span> view <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// mark = -1, position = 0, limit = 3,  capacity = 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>与 duplicate() 方法相比，asReadOnlyBuffer() 方法的工作方式类似，但它生成的是一个只读缓冲区。这意味着我们不能使用这个只读视图来更改底层数据：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ByteBuffer</span> view <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">asReadOnlyBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// mark = 2,  position = 5, limit = 8,  capacity = 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-2-其他视图" tabindex="-1"><a class="header-anchor" href="#_5-2-其他视图"><span>5.2. 其他视图</span></a></h3><p>ByteBuffer 还提供了其他视图：asCharBuffer()、asShortBuffer()、asIntBuffer()、asLongBuffer()、asFloatBuffer() 和 asDoubleBuffer()。这些方法与 slice() 方法类似，即它们提供了一个对应于底层数据当前位置和限制的切片视图。它们之间的主要区别在于将底层数据解释为其他原始类型值。</p><p>我们应该关心的问题是：</p><ul><li>如何解释底层数据</li><li>从哪里开始解释</li><li>新生成的视图中将呈现多少个元素</li></ul><p>新视图将多个字节组合成目标原类型，并从原始缓冲区的当前位置开始解释。新视图的容量将等于原始缓冲区剩余元素的数量除以视图的原始类型字节数。原始缓冲区末尾的任何剩余字节在视图中将不可见。</p><p>现在，让我们以 asIntBuffer() 为例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>
  <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0xCA</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0xFE</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0xBA</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0xBE</span><span class="token punctuation">,</span> <span class="token comment">// CAFEBABE --&gt;\` cafebabe</span>
  <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0xF0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0x07</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0xBA</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0x11</span><span class="token punctuation">,</span> <span class="token comment">// F007BA11 --&gt; football</span>
  <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0x0F</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0xF1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0xCE</span>               <span class="token comment">// 0FF1CE   ---&gt; office</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">IntBuffer</span> intBuffer <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">asIntBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> capacity <span class="token operator">=</span> intBuffer<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码片段中，buffer 有 11 个数据元素，而 int 类型占用 4 个字节。因此，intBuffer 将有 2 个数据元素（11 / 4 = 2），并留下额外的 3 个字节（11 % 4 = 3）。</p><h2 id="_6-直接缓冲区" tabindex="-1"><a class="header-anchor" href="#_6-直接缓冲区"><span>6. 直接缓冲区</span></a></h2><p>什么是直接缓冲区？直接缓冲区是指其底层数据分配在操作系统函数可以直接访问的内存区域的缓冲区。非直接缓冲区是指其底层数据是一个在 Java 堆区域分配的字节数组的缓冲区。</p><p>那么，我们如何创建一个直接缓冲区呢？通过调用带有所需容量的 allocateDirect() 方法来创建一个直接 ByteBuffer：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocateDirect</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>我们为什么需要一个直接缓冲区？</strong> 答案很简单：非直接缓冲区总是涉及不必要的复制操作。当发送非直接缓冲区的数据到 I/O 设备时，本地代码必须“锁定”底层字节数组，将其复制到 Java 堆之外，然后调用操作系统函数来刷新数据。然而，本地代码可以直接访问底层数据，并使用直接缓冲区调用操作系统函数来刷新数据，而无需任何额外开销。</p><p>鉴于上述情况，直接缓冲区是否完美？不。主要问题是分配和释放直接缓冲区的成本很高。那么，在现实中，直接缓冲区是否总是比非直接缓冲区运行得更快？不一定。这是因为许多因素在起作用。而且，性能权衡可以因 JVM、操作系统和代码设计而大不相同。</p><p>最后，有一个实用的软件格言要遵循：<strong>首先让它工作，然后让它变快</strong>。这意味着，让我们首先集中精力确保代码的正确性。如果代码运行不够快，那么让我们进行相应的优化。</p><h2 id="_7-杂项" tabindex="-1"><a class="header-anchor" href="#_7-杂项"><span>7. 杂项</span></a></h2><p>ByteBuffer 类还提供了一些辅助方法：</p><p>isDirect() 方法可以告诉我们缓冲区是直接缓冲区还是非直接缓冲区。请注意，使用 wrap() 方法创建的包装缓冲区总是非直接的。</p><p>所有缓冲区都是可读的，但并非所有都是可写的。isReadOnly() 方法指示我们是否可以写入底层数据。</p><p>要比较这两种方法，<strong>isDirect() 方法关心底层数据存在的位置，在 Java 堆还是内存区域</strong>。然而，<strong>isReadOnly() 方法关心是否可以更改底层数据元素</strong>。</p><p>如果原始缓冲区是直接的或只读的，新生成的视图将继承这些属性。</p><p>如果 ByteBuffer 实例是直接的或只读的，我们不能获取其底层字节数组。但是，如果缓冲区是非直接且非只读的，这并不一定意味着其底层数据是可访问的。</p><p>要准确地说，<strong>hasArray() 方法可以告诉我们缓冲区是否有一个可访问的支撑数组</strong>。如果 hasArray() 方法返回 true，那么我们就可以使用 array() 和 arrayOffset() 方法来获取更多相关信息。</p><h3 id="_7-3-字节顺序" tabindex="-1"><a class="header-anchor" href="#_7-3-字节顺序"><span>7.3. 字节顺序</span></a></h3><p>ByteBuffer 类的字节顺序默认始终是 ByteOrder.BIG_ENDIAN。我们可以使用 order() 和 order(ByteOrder) 方法分别获取和设置当前字节顺序。</p><p>字节顺序影响如何解释底层数据。例如，假设我们有一个 buffer 实例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0xCA</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0xFE</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0xBA</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0xBE</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 ByteOrder.BIG_ENDIAN，val 将是 -889275714 (0xCAFEBABE)：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>buffer<span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span><span class="token class-name">ByteOrder</span><span class="token punctuation">.</span><span class="token constant">BIG_ENDIAN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> val <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>但是，使用 ByteOrder.LITTLE_ENDIAN，val 将是 -1095041334 (0xBEBAFECA)：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>buffer<span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span><span class="token class-name">ByteOrder</span><span class="token punctuation">.</span><span class="token constant">LITTLE_ENDIAN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> val <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-4-比较" tabindex="-1"><a class="header-anchor" href="#_7-4-比较"><span>7.4. 比较</span></a></h3><p>ByteBuffer 类提供了 equals() 和 compareTo() 方法来比较两个缓冲区实例。这两种方法都是基于剩余数据元素进行比较，这些数据元素在范围 [position, limit) 内。</p><p>例如，两个缓冲区实例具有不同的底层数据和索引，但可以相等：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes1 <span class="token operator">=</span> <span class="token string">&quot;World&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes2 <span class="token operator">=</span> <span class="token string">&quot;HelloWorld&quot;</span><span class="token punctuation">.</span>getBytes</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,133),o=[p];function c(l,i){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","2024-07-21-Guide to ByteBuffer.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-21/2024-07-21-Guide%20to%20ByteBuffer.html","title":"Java ByteBuffer 指南","lang":"zh-CN","frontmatter":{"date":"2022-03-01T00:00:00.000Z","category":["Java","NIO"],"tag":["ByteBuffer","Java NIO"],"head":[["meta",{"name":"keywords","content":"Java, ByteBuffer, NIO, 教程"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-21/2024-07-21-Guide%20to%20ByteBuffer.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Java ByteBuffer 指南"}],["meta",{"property":"og:description","content":"Java ByteBuffer 指南 1. 概览 Buffer 类是 Java NIO 的基础。然而，在这些类中，ByteBuffer 类是最受欢迎。这是因为 byte 类型是最通用的。例如，我们可以使用字节来组成 JVM 中的其他非布尔基本类型。此外，我们还可以使用字节在 JVM 与外部 I/O 设备之间传输数据。 在本教程中，我们将检查 ByteB..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-21T04:41:15.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"ByteBuffer"}],["meta",{"property":"article:tag","content":"Java NIO"}],["meta",{"property":"article:published_time","content":"2022-03-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-21T04:41:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java ByteBuffer 指南\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-03-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-21T04:41:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Java ByteBuffer 指南 1. 概览 Buffer 类是 Java NIO 的基础。然而，在这些类中，ByteBuffer 类是最受欢迎。这是因为 byte 类型是最通用的。例如，我们可以使用字节来组成 JVM 中的其他非布尔基本类型。此外，我们还可以使用字节在 JVM 与外部 I/O 设备之间传输数据。 在本教程中，我们将检查 ByteB..."},"headers":[{"level":2,"title":"1. 概览","slug":"_1-概览","link":"#_1-概览","children":[]},{"level":2,"title":"2. ByteBuffer 创建","slug":"_2-bytebuffer-创建","link":"#_2-bytebuffer-创建","children":[{"level":3,"title":"2.1. 分配","slug":"_2-1-分配","link":"#_2-1-分配","children":[]},{"level":3,"title":"2.2. 包装","slug":"_2-2-包装","link":"#_2-2-包装","children":[]},{"level":3,"title":"2.3. 洋葱模型","slug":"_2-3-洋葱模型","link":"#_2-3-洋葱模型","children":[]}]},{"level":2,"title":"3. ByteBuffer 索引","slug":"_3-bytebuffer-索引","link":"#_3-bytebuffer-索引","children":[{"level":3,"title":"3.1. 四个基本索引","slug":"_3-1-四个基本索引","link":"#_3-1-四个基本索引","children":[]},{"level":3,"title":"3.2. 标记和重置","slug":"_3-2-标记和重置","link":"#_3-2-标记和重置","children":[]},{"level":3,"title":"3.3. 清除、翻转、倒带和压缩","slug":"_3-3-清除、翻转、倒带和压缩","link":"#_3-3-清除、翻转、倒带和压缩","children":[]},{"level":3,"title":"3.4. 剩余","slug":"_3-4-剩余","link":"#_3-4-剩余","children":[]}]},{"level":2,"title":"4. 传输数据","slug":"_4-传输数据","link":"#_4-传输数据","children":[{"level":3,"title":"4.1. 传输字节数据","slug":"_4-1-传输字节数据","link":"#_4-1-传输字节数据","children":[]},{"level":3,"title":"4.2. 传输整型数据","slug":"_4-2-传输整型数据","link":"#_4-2-传输整型数据","children":[]}]},{"level":2,"title":"5. 不同视图","slug":"_5-不同视图","link":"#_5-不同视图","children":[{"level":3,"title":"5.1. ByteBuffer 视图","slug":"_5-1-bytebuffer-视图","link":"#_5-1-bytebuffer-视图","children":[]},{"level":3,"title":"5.2. 其他视图","slug":"_5-2-其他视图","link":"#_5-2-其他视图","children":[]}]},{"level":2,"title":"6. 直接缓冲区","slug":"_6-直接缓冲区","link":"#_6-直接缓冲区","children":[]},{"level":2,"title":"7. 杂项","slug":"_7-杂项","link":"#_7-杂项","children":[{"level":3,"title":"7.3. 字节顺序","slug":"_7-3-字节顺序","link":"#_7-3-字节顺序","children":[]},{"level":3,"title":"7.4. 比较","slug":"_7-4-比较","link":"#_7-4-比较","children":[]}]}],"git":{"createdTime":1721536875000,"updatedTime":1721536875000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":12.79,"words":3837},"filePathRelative":"posts/baeldung/2024-07-21/2024-07-21-Guide to ByteBuffer.md","localizedDate":"2022年3月1日","excerpt":"\\n<h2>1. 概览</h2>\\n<p>Buffer 类是 Java NIO 的基础。然而，在这些类中，ByteBuffer 类是最受欢迎。这是因为 byte 类型是最通用的。例如，我们可以使用字节来组成 JVM 中的其他非布尔基本类型。此外，我们还可以使用字节在 JVM 与外部 I/O 设备之间传输数据。</p>\\n<p>在本教程中，我们将检查 ByteBuffer 类的不同方面。</p>\\n<h2>2. ByteBuffer 创建</h2>\\n<p>ByteBuffer 是一个抽象类，所以我们不能直接构造一个新的实例。但是，它提供了静态工厂方法来方便实例创建。简单来说，有两种方式可以创建 ByteBuffer 实例，一种是通过分配，另一种是通过包装：</p>","autoDesc":true}');export{k as comp,d as data};
