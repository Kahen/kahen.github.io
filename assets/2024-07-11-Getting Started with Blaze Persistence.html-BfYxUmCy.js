import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-D0vunQyr.js";const e={},p=t('<h1 id="使用blaze-persistence入门指南" tabindex="-1"><a class="header-anchor" href="#使用blaze-persistence入门指南"><span>使用Blaze Persistence入门指南</span></a></h1><p>在这个教程中，我们将讨论在Spring Boot应用程序中使用Blaze Persistence库的方法。</p><p>该库提供了丰富的Criteria API，用于以编程方式创建SQL查询。它允许我们应用各种类型的过滤器、函数和逻辑条件。</p><p>我们将涵盖项目设置，提供一些如何创建查询的例子，并看看如何将实体映射到DTO对象。</p><h2 id="_2-maven依赖" tabindex="-1"><a class="header-anchor" href="#_2-maven依赖"><span>2. Maven依赖</span></a></h2><p>要在项目中包含Blaze Persistence核心，我们需要在_pom.xml_文件中添加依赖blaze-persistence-core-api-jakarta、blaze-persistence-core-impl-jakarta和blaze-persistence-integration-hibernate-6.2：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```````\n    ```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```````com.blazebit```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```````\n    ```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```````blaze-persistence-core-api-jakarta```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```````\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>```compile```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>```\n```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```````\n```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```````\n    ```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```````com.blazebit```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```````\n    ```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```````blaze-persistence-core-impl-jakarta```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```````\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>```runtime```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>```\n```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```````\n```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```````\n    ```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```````com.blazebit```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```````\n    ```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```````blaze-persistence-integration-hibernate-6.2```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```````\n    ```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>```runtime```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>```\n```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据我们使用的Hibernate版本，最后一个依赖可能不同。</p><h2 id="_3-实体模型" tabindex="-1"><a class="header-anchor" href="#_3-实体模型"><span>3. 实体模型</span></a></h2><p>作为第一步，让我们定义我们将在示例中使用的数据模型。为了自动创建表，我们将使用Hibernate。</p><p>我们将有两个实体，<em>Person_和_Post</em>，它们通过一对多的关系连接：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Id</span>\n    <span class="token annotation punctuation">@GeneratedValue</span>\n    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>\n\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@OneToMany</span><span class="token punctuation">(</span>mappedBy <span class="token operator">=</span> <span class="token string">&quot;author&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token class-name">Set</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Post</span><span class="token punctuation">&gt;</span></span>````` posts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Post</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Id</span>\n    <span class="token annotation punctuation">@GeneratedValue</span>\n    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>\n\n    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>\n\n    <span class="token keyword">private</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@ManyToOne</span><span class="token punctuation">(</span>fetch <span class="token operator">=</span> <span class="token class-name">FetchType</span><span class="token punctuation">.</span><span class="token constant">LAZY</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token class-name">Person</span> author<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-criteria-api" tabindex="-1"><a class="header-anchor" href="#_4-criteria-api"><span>4. Criteria API</span></a></h2><p>Blaze Persistence库是JPA Criteria API的替代品。两个API都允许我们在运行时定义动态查询。</p><p>然而，JPA Criteria API在开发人员中并不流行，因为它难以读写。相比之下，Blaze Persistence旨在更加用户友好和易于使用。此外，它与各种JPA实现集成，并提供了广泛的查询功能。</p><h3 id="_4-1-配置" tabindex="-1"><a class="header-anchor" href="#_4-1-配置"><span>4.1. 配置</span></a></h3><p><strong>为了使用Blaze Persistence Criteria API，我们需要在我们的配置类中定义_CriteriaBuilderFactory_ bean：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>\n<span class="token keyword">private</span> <span class="token class-name">EntityManagerFactory</span> entityManagerFactory<span class="token punctuation">;</span>\n\n<span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">CriteriaBuilderFactory</span> <span class="token function">createCriteriaBuilderFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">CriteriaBuilderConfiguration</span> config <span class="token operator">=</span> <span class="token class-name">Criteria</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> config<span class="token punctuation">.</span><span class="token function">createCriteriaBuilderFactory</span><span class="token punctuation">(</span>entityManagerFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-基本查询" tabindex="-1"><a class="header-anchor" href="#_4-2-基本查询"><span>4.2. 基本查询</span></a></h3><p>现在，让我们从一个简单的查询开始，它从数据库中选择每一个_Post_。我们只需要两个方法调用来定义和执行查询：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Post</span><span class="token punctuation">&gt;</span></span>````` posts <span class="token operator">=</span> builderFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>entityManager<span class="token punctuation">,</span> <span class="token class-name">Post</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResultList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>_create_方法创建一个查询，而调用_getResultList_方法返回查询返回的结果。</p><p>此外，在_create_方法中，_Post.class_参数有多个用途：</p><ul><li>确定查询的结果类型</li><li>确定隐式的查询根</li><li>为Post表添加隐式的SELECT和FROM子句</li></ul><p>执行后，查询将生成以下JPQL：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> post\n<span class="token keyword">FROM</span> Post post<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-where子句" tabindex="-1"><a class="header-anchor" href="#_4-3-where子句"><span>4.3. WHERE子句</span></a></h3><p>我们可以通过在_create_方法之后调用_where_方法来在我们的条件构建器中添加WHERE子句。</p><p>让我们看看如何获取由至少写了两篇文章的人写的帖子，并且年龄在18到40岁之间：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">CriteriaBuilder</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span>` personCriteriaBuilder <span class="token operator">=</span> builderFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>entityManager<span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;p&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&quot;p.age&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">betweenExpression</span><span class="token punctuation">(</span><span class="token string">&quot;18&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">andExpression</span><span class="token punctuation">(</span><span class="token string">&quot;40&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&quot;SIZE(p.posts)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">geExpression</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">orderByAsc</span><span class="token punctuation">(</span><span class="token string">&quot;p.name&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">orderByAsc</span><span class="token punctuation">(</span><span class="token string">&quot;p.id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>由于Blaze Persistence支持直接函数调用语法，我们可以轻松地检索与个人连接的帖子的大小。</strong></p><p>**此外，我们可以通过调用_whereAnd_或_whereOr_方法来定义复合谓词。**它们返回构建器实例，我们可以使用它来通过多次调用_where_方法来定义嵌套复合谓词。一旦我们完成，我们需要调用_endAnd_或_endOr_方法来关闭复合谓词。</p><p>例如，让我们创建一个查询，选择具有特定标题或作者名称的帖子：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">CriteriaBuilder</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Post</span><span class="token punctuation">&gt;</span></span>````` postCriteriaBuilder <span class="token operator">=</span> builderFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>entityManager<span class="token punctuation">,</span> <span class="token class-name">Post</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;p&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">whereOr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&quot;p.title&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>title <span class="token operator">+</span> <span class="token string">&quot;%&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">noEscape</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&quot;p.author.name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>authorName<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">endOr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4-from子句" tabindex="-1"><a class="header-anchor" href="#_4-4-from子句"><span>4.4. FROM子句</span></a></h3><p>FROM子句包含应该被查询的实体。如前所述，我们可以在create方法中指定根实体。然而，我们可以定义FROM子句来指定根。这样，隐式创建的查询根将被移除：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">CriteriaBuilder</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Post</span><span class="token punctuation">&gt;</span></span>````` postCriteriaBuilder <span class="token operator">=</span> builderFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>entityManager<span class="token punctuation">,</span> <span class="token class-name">Post</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;person&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&quot;person.posts&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，_Post.class_参数只定义了返回类型。</p><p>由于我们从不同的表中选择，构建器将在生成的查询中添加隐式JOIN：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> posts_1\n<span class="token keyword">FROM</span> Person person\n<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> person<span class="token punctuation">.</span>posts posts_1<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-实体视图模块" tabindex="-1"><a class="header-anchor" href="#_5-实体视图模块"><span>5. 实体视图模块</span></a></h2><p>**Blaze Persistence实体视图模块试图解决实体和DTO类之间高效映射的问题。**使用这个模块，我们可以定义DTO类为接口，并使用注释提供到实体类的映射。</p><h3 id="_5-1-maven依赖" tabindex="-1"><a class="header-anchor" href="#_5-1-maven依赖"><span>5.1. Maven依赖</span></a></h3><p>我们需要在项目中包含额外的entity-view依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```````\n    ```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```````com.blazebit```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```````\n    ```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```````blaze-persistence-entity-view-api-jakarta```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```````\n```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```````\n```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```````\n    ```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```````com.blazebit```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```````\n    ```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```````blaze-persistence-entity-view-impl-jakarta```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```````\n```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```````\n```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```````\n    ```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```````com.blazebit```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```````\n    ```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```````blaze-persistence-entity-view-processor-jakarta```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```````\n```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-配置" tabindex="-1"><a class="header-anchor" href="#_5-2-配置"><span>5.2. 配置</span></a></h3><p>此外，我们需要一个_entityViewManager_ bean，注册实体视图类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">EntityViewManager</span> <span class="token function">createEntityViewManager</span><span class="token punctuation">(</span>\n  <span class="token class-name">CriteriaBuilderFactory</span> criteriaBuilderFactory<span class="token punctuation">,</span> <span class="token class-name">EntityViewConfiguration</span> entityViewConfiguration<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> entityViewConfiguration<span class="token punctuation">.</span><span class="token function">createEntityViewManager</span><span class="token punctuation">(</span>criteriaBuilderFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>由于_EntityViewManager_绑定到_EntityManagerFactory_和_CriteriaBuilderFactory_，其作用域应该是相同的。</strong></p><h3 id="_5-3-映射" tabindex="-1"><a class="header-anchor" href="#_5-3-映射"><span>5.3. 映射</span></a></h3><p>实体视图表示是一个简单的接口或抽象类，描述了我们想要的投影结构。</p><p>让我们创建一个接口，将代表_Post_类的实体视图：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@EntityView</span><span class="token punctuation">(</span><span class="token class-name">Post</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PostView</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@IdMapping</span>\n    <span class="token class-name">Long</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">String</span> <span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">String</span> <span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>我们需要使用_@EntityView_注释来注释我们的接口，并提供实体类。</strong></p><p>虽然不是必需的，但我们应该在可能的情况下使用_@IdMapping_注释定义id映射。没有这样的映射的实体视图将具有考虑所有属性的_equals_和_hashCode_实现，而有了id映射，只考虑id。</p><p>然而，如果我们想为getter方法使用不同的名称，我们可以添加一个_@Mapping_注释。使用这个注释，我们可以定义整个表达式：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span><span class="token string">&quot;UPPER(title)&quot;</span><span class="token punctuation">)</span>\n<span class="token class-name">String</span> <span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>作为结果，映射将返回_Post_实体的大写标题。</p><p>此外，我们可以扩展实体视图。假设我们想定义一个视图，它将返回一个帖子以及附加的作者信息。</p><p>首先，我们将定义一个_PersonView_接口：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@EntityView</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PersonView</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@IdMapping</span>\n    <span class="token class-name">Long</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其次，让我们定义一个新的接口，它扩展了_PostView_接口，并返回_PersonView_信息的方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@EntityView</span><span class="token punctuation">(</span><span class="token class-name">Post</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PostWithAuthorView</span> <span class="token keyword">extends</span> <span class="token class-name">PostView</span> <span class="token punctuation">{</span>\n    <span class="token class-name">PersonView</span> <span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，让我们使用视图与条件构建器。它们可以直接应用到查询中。</p><p>我们可以定义一个基本查询，然后创建映射：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">CriteriaBuilder</span>`````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Post</span><span class="token punctuation">&gt;</span></span>````` postCriteriaBuilder <span class="token operator">=</span> builderFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>entityManager<span class="token punctuation">,</span> <span class="token class-name">Post</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;p&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">whereOr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&quot;p.title&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string">&quot;title%&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">noEscape</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&quot;p.author.name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>authorName<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">endOr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">CriteriaBuilder</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PostWithAuthorView</span><span class="token punctuation">&gt;</span></span>` postWithAuthorViewCriteriaBuilder <span class="token operator">=</span>\n  viewManager<span class="token punctuation">.</span><span class="token function">applySetting</span><span class="token punctuation">(</span><span class="token class-name">EntityViewSetting</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">PostWithAuthorView</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> postCriteriaBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码将会创建一个优化的查询，并基于结果构建我们的实体视图：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> p<span class="token punctuation">.</span>id <span class="token keyword">AS</span> PostWithAuthorView_id<span class="token punctuation">,</span>\n  p<span class="token punctuation">.</span>author<span class="token punctuation">.</span>id <span class="token keyword">AS</span> PostWithAuthorView_author_id<span class="token punctuation">,</span>\n  author_1<span class="token punctuation">.</span>age <span class="token keyword">AS</span> PostWithAuthorView_author_age<span class="token punctuation">,</span>\n  author_1<span class="token punctuation">.</span>name <span class="token keyword">AS</span> PostWithAuthorView_author_name<span class="token punctuation">,</span>\n  p<span class="token punctuation">.</span>content <span class="token keyword">AS</span> PostWithAuthorView_content<span class="token punctuation">,</span>\n  UPPER<span class="token punctuation">(</span>p<span class="token punctuation">.</span>title<span class="token punctuation">)</span> <span class="token keyword">AS</span> PostWithAuthorView_title\n<span class="token keyword">FROM</span> com<span class="token punctuation">.</span>baeldung<span class="token punctuation">.</span>model<span class="token punctuation">.</span>Post p\n<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> p<span class="token punctuation">.</span>author author_1\n<span class="token keyword">WHERE</span> p<span class="token punctuation">.</span>title <span class="token operator">LIKE</span> <span class="token keyword">REPLACE</span><span class="token punctuation">(</span>:param_0<span class="token punctuation">,</span> <span class="token string">&#39;\\\\&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;\\\\\\\\&#39;</span><span class="token punctuation">)</span>\n  <span class="token operator">OR</span> author_1<span class="token punctuation">.</span>name <span class="token operator">=</span> :param_1\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-4-实体视图和spring-data" tabindex="-1"><a class="header-anchor" href="#_5-4-实体视图和spring-data"><span>5.4. 实体视图和Spring Data</span></a></h3><p>除了与Spring集成外，Blaze Persistence还提供了一个Spring Data集成模块，使得使用实体视图和使用实体一样方便。</p><p>此外，我们需要包括一个Spring集成依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```````\n    ```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>```````com.blazebit```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>```````\n    ```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>```````blaze-persistence-integration-spring-data-3.1```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>```````\n```````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>```````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而且，为了启用Spring Data，我们需要使用_@EnableBlazeRepositories_注释我们的配置类。可选地，我们可以指定用于存储库类扫描的基础包。</p><p><strong>集成提供了一个基础的_EntityViewRepository_接口，我们可以用它来定义我们的存储库定义。</strong></p><p>现在，让我们定义一个与_PostWithAuthorView_一起工作的接口：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Repository</span>\n<span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>readOnly <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PostViewRepository</span> <span class="token keyword">extends</span> <span class="token class-name">EntityViewRepository</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PostWithAuthorView</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span>` <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们的接口继承了最常用的存储库方法，如_findAll_、<em>findOne_和_exists</em>。如果需要，我们可以使用Spring Data JPA方法命名约定定义我们自己的方法。</p><h2 id="_6-结论" tabindex="-1"><a class="header-anchor" href="#_6-结论"><span>6. 结论</span></a></h2><p>在本文中，我们学习了如何配置和使用Blaze Persistence库创建简单查询。</p><p>像往常一样，所有源代码都可以在GitHub上找到。</p><p>OK</p>',82),c=[p];function o(i,l){return s(),a("div",null,c)}const d=n(e,[["render",o],["__file","2024-07-11-Getting Started with Blaze Persistence.html.vue"]]),k=JSON.parse('{"path":"/posts/baeldung/2024-07-11/2024-07-11-Getting%20Started%20with%20Blaze%20Persistence.html","title":"使用Blaze Persistence入门指南","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","Spring Boot"],"tag":["Blaze Persistence","JPA","Hibernate"],"head":[["meta",{"name":"keywords","content":"Blaze Persistence, Spring Boot, JPA, Hibernate, 教程"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-11/2024-07-11-Getting%20Started%20with%20Blaze%20Persistence.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"使用Blaze Persistence入门指南"}],["meta",{"property":"og:description","content":"使用Blaze Persistence入门指南 在这个教程中，我们将讨论在Spring Boot应用程序中使用Blaze Persistence库的方法。 该库提供了丰富的Criteria API，用于以编程方式创建SQL查询。它允许我们应用各种类型的过滤器、函数和逻辑条件。 我们将涵盖项目设置，提供一些如何创建查询的例子，并看看如何将实体映射到DTO..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-11T16:46:36.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Blaze Persistence"}],["meta",{"property":"article:tag","content":"JPA"}],["meta",{"property":"article:tag","content":"Hibernate"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-11T16:46:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用Blaze Persistence入门指南\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-11T16:46:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"使用Blaze Persistence入门指南 在这个教程中，我们将讨论在Spring Boot应用程序中使用Blaze Persistence库的方法。 该库提供了丰富的Criteria API，用于以编程方式创建SQL查询。它允许我们应用各种类型的过滤器、函数和逻辑条件。 我们将涵盖项目设置，提供一些如何创建查询的例子，并看看如何将实体映射到DTO..."},"headers":[{"level":2,"title":"2. Maven依赖","slug":"_2-maven依赖","link":"#_2-maven依赖","children":[]},{"level":2,"title":"3. 实体模型","slug":"_3-实体模型","link":"#_3-实体模型","children":[]},{"level":2,"title":"4. Criteria API","slug":"_4-criteria-api","link":"#_4-criteria-api","children":[{"level":3,"title":"4.1. 配置","slug":"_4-1-配置","link":"#_4-1-配置","children":[]},{"level":3,"title":"4.2. 基本查询","slug":"_4-2-基本查询","link":"#_4-2-基本查询","children":[]},{"level":3,"title":"4.3. WHERE子句","slug":"_4-3-where子句","link":"#_4-3-where子句","children":[]},{"level":3,"title":"4.4. FROM子句","slug":"_4-4-from子句","link":"#_4-4-from子句","children":[]}]},{"level":2,"title":"5. 实体视图模块","slug":"_5-实体视图模块","link":"#_5-实体视图模块","children":[{"level":3,"title":"5.1. Maven依赖","slug":"_5-1-maven依赖","link":"#_5-1-maven依赖","children":[]},{"level":3,"title":"5.2. 配置","slug":"_5-2-配置","link":"#_5-2-配置","children":[]},{"level":3,"title":"5.3. 映射","slug":"_5-3-映射","link":"#_5-3-映射","children":[]},{"level":3,"title":"5.4. 实体视图和Spring Data","slug":"_5-4-实体视图和spring-data","link":"#_5-4-实体视图和spring-data","children":[]}]},{"level":2,"title":"6. 结论","slug":"_6-结论","link":"#_6-结论","children":[]}],"git":{"createdTime":1720716396000,"updatedTime":1720716396000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":6.51,"words":1952},"filePathRelative":"posts/baeldung/2024-07-11/2024-07-11-Getting Started with Blaze Persistence.md","localizedDate":"2022年4月1日","excerpt":"\\n<p>在这个教程中，我们将讨论在Spring Boot应用程序中使用Blaze Persistence库的方法。</p>\\n<p>该库提供了丰富的Criteria API，用于以编程方式创建SQL查询。它允许我们应用各种类型的过滤器、函数和逻辑条件。</p>\\n<p>我们将涵盖项目设置，提供一些如何创建查询的例子，并看看如何将实体映射到DTO对象。</p>\\n<h2>2. Maven依赖</h2>\\n<p>要在项目中包含Blaze Persistence核心，我们需要在_pom.xml_文件中添加依赖blaze-persistence-core-api-jakarta、blaze-persistence-core-impl-jakarta和blaze-persistence-integration-hibernate-6.2：</p>","autoDesc":true}');export{d as comp,k as data};
