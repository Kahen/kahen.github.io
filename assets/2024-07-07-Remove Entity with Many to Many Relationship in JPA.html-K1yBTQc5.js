import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-CseMoHkL.js";const p={},e=t(`<h1 id="在jpa中删除多对多关系的实体" tabindex="-1"><a class="header-anchor" href="#在jpa中删除多对多关系的实体"><span>在JPA中删除多对多关系的实体</span></a></h1><p>在本教程中，我们将习如何在JPA中从多对多关系中删除实体。</p><p>多对多关系是一种两个实体通过一个额外的连接表相连的关系。为了有效地映射这些实体，我们应该遵循一些指导原则。</p><p><strong>首先，在定义多对多关系时，我们应该考虑使用_Set_而不是_List_。</strong> 作为JPA实现的Hibernate不会以高效的方式从_List_中删除实体。</p><p>当使用_List_时，Hibernate会从连接表中删除所有实体，然后插入剩余的实体。这可能会导致性能问题。我们可以通过使用_Set_来轻松避免这个问题。</p><p><strong>其次，我们不应该在映射中使用_CascadeType.REMOVE_，因此也不应该使用_CascadeType.ALL_。</strong></p><p>在多对多关系中，两个实体是相互独立的。例如，假设我们有两个实体，<em>Post_和_Category</em>。当从_Post_实体中删除记录时，我们通常不想删除相关的_Category_实体。使用_CascadeType.REMOVE_，JPA将删除所有相关实体，即使那些可能仍然与其他实体相连的实体。</p><p>要定义JPA中的多对多关系，我们可以使用_@ManyToMany_注解。</p><p>多对多关联可以是单向的或双向的。</p><h3 id="_3-从单向-manytomany-中删除" tabindex="-1"><a class="header-anchor" href="#_3-从单向-manytomany-中删除"><span>3. 从单向_@ManyToMany_中删除</span></a></h3><p>现在，让我们看看如何从单向多对多关联中删除实体。</p><p>首先，让我们定义我们将在示例中使用的数据模型，<em>Post_和_Category</em>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span>
<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;post&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Post</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Id</span>
    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">IDENTITY</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;title&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@ManyToMany</span><span class="token punctuation">(</span>cascade <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">CascadeType</span><span class="token punctuation">.</span><span class="token constant">PERSIST</span><span class="token punctuation">,</span> <span class="token class-name">CascadeType</span><span class="token punctuation">.</span><span class="token constant">MERGE</span><span class="token punctuation">,</span> <span class="token class-name">CascadeType</span><span class="token punctuation">.</span><span class="token constant">REFRESH</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@JoinTable</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;post_category&quot;</span><span class="token punctuation">,</span>
      joinColumns <span class="token operator">=</span> <span class="token annotation punctuation">@JoinColumn</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;post_id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      inverseJoinColumns <span class="token operator">=</span> <span class="token annotation punctuation">@JoinColumn</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;category_id&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Set</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Category</span><span class="token punctuation">&gt;</span></span>\` categories <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// getters and setters</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span>
<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;category&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Category</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Id</span>
    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">IDENTITY</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token comment">// getters and setters</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们定义了关系为单向的，因为不需要从_Category_表中使用关联。此外，我们声明了_Post_实体为负责管理关系的实体。</p><p>现在，假设我们有两个_Post_实体，都与同一个_Category_相关联：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Category</span> category1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Category</span><span class="token punctuation">(</span><span class="token string">&quot;JPA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Category</span> category2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Category</span><span class="token punctuation">(</span><span class="token string">&quot;Persistence&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Post</span> post1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Post</span><span class="token punctuation">(</span><span class="token string">&quot;Many-to-Many Relationship&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
post1<span class="token punctuation">.</span><span class="token function">getCategories</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>category1<span class="token punctuation">)</span><span class="token punctuation">;</span>
post1<span class="token punctuation">.</span><span class="token function">getCategories</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>category2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Post</span> post2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Post</span><span class="token punctuation">(</span><span class="token string">&quot;Entity Manager&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
post2<span class="token punctuation">.</span><span class="token function">getCategories</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>category1<span class="token punctuation">)</span><span class="token punctuation">;</span>

entityManager<span class="token punctuation">.</span><span class="token function">persist</span><span class="token punctuation">(</span>post1<span class="token punctuation">)</span><span class="token punctuation">;</span>
entityManager<span class="token punctuation">.</span><span class="token function">persist</span><span class="token punctuation">(</span>post2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，让我们从第一个_Post_实体中删除类别：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">givenEntities_whenRemove_thenRemoveAssociation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token class-name">Post</span> post1 <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token class-name">Post</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token class-name">Post</span> post2 <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token class-name">Post</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token number">2L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token class-name">Category</span> category <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token class-name">Category</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   post1<span class="token punctuation">.</span><span class="token function">getCategories</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>category<span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> post1<span class="token punctuation">.</span><span class="token function">getCategories</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> post2<span class="token punctuation">.</span><span class="token function">getCategories</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果，第一个_Post_和Category之间的关系被删除。此外，JPA并没有删除相关的类别。</p><p>由于我们使用的是_Set_而不是_List_，JPA<strong>生成了一个单独的删除语句来从连接表中删除关联</strong>。</p><h3 id="_4-从双向-manytomany-中删除" tabindex="-1"><a class="header-anchor" href="#_4-从双向-manytomany-中删除"><span>4. 从双向_@ManyToMany_中删除</span></a></h3><p>在双向关系中，我们可以从两边管理关联。</p><p>首先，让我们在_Book_和_Author_实体之间创建一个双向关联：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span>
<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;book&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Id</span>
    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">IDENTITY</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;title&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@ManyToMany</span><span class="token punctuation">(</span>cascade <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">CascadeType</span><span class="token punctuation">.</span><span class="token constant">PERSIST</span><span class="token punctuation">,</span> <span class="token class-name">CascadeType</span><span class="token punctuation">.</span><span class="token constant">MERGE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@JoinTable</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;book_author&quot;</span><span class="token punctuation">,</span>
      joinColumns <span class="token operator">=</span> <span class="token annotation punctuation">@JoinColumn</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;book_id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      inverseJoinColumns <span class="token operator">=</span> <span class="token annotation punctuation">@JoinColumn</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;author_id&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Set</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">&gt;</span></span>\` authors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// getters and setters</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span>
<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;author&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Author</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Id</span>
    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">IDENTITY</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@ManyToMany</span><span class="token punctuation">(</span>mappedBy <span class="token operator">=</span> <span class="token string">&quot;authors&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Set</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span>\` books <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// getters and setters</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JPA将创建一个额外的连接表来存储两个实体之间的连接。这个表作为关联的子端。因此，_Author_和_Book_实体都代表父端。</p><p>然而，尽管父端看起来可能相同，但它们并不是。<strong>关系的所有权是由_mappedBy_属性确定的。</strong> 不是所有者的实体将具有_mappedBy_属性。</p><p>在我们的例子中，_Book_实体是所有者。因此，它将把关联更改传播到连接表。</p><h3 id="_4-1-从所有者实体中删除" tabindex="-1"><a class="header-anchor" href="#_4-1-从所有者实体中删除"><span>4.1. 从所有者实体中删除</span></a></h3><p>让我们看看如何从所有者侧删除实体。</p><p><strong>我们将向充当关联所有者的实体添加辅助方法。</strong> 在我们的例子中，是_Book_实体：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeAuthor</span><span class="token punctuation">(</span><span class="token class-name">Author</span> author<span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>authors<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>
   author<span class="token punctuation">.</span><span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当删除作者时，我们可以调用辅助方法来删除关联：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">givenEntities_whenRemoveFromOwner_thenRemoveAssociation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token class-name">Author</span> author <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Author</span><span class="token punctuation">)</span> entityManager
     <span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT author from Author author where author.name = ?1&quot;</span><span class="token punctuation">)</span>
     <span class="token punctuation">.</span><span class="token function">setParameter</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;Ralph Johnson&quot;</span><span class="token punctuation">)</span>
     <span class="token punctuation">.</span><span class="token function">getSingleResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token class-name">Book</span> book1 <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token class-name">Book</span> book2 <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token number">2L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   book1<span class="token punctuation">.</span><span class="token function">removeAuthor</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>
   entityManager<span class="token punctuation">.</span><span class="token function">persist</span><span class="token punctuation">(</span>book1<span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> book1<span class="token punctuation">.</span><span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> book2<span class="token punctuation">.</span><span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-从非所有者实体中删除" tabindex="-1"><a class="header-anchor" href="#_4-2-从非所有者实体中删除"><span>4.2. 从非所有者实体中删除</span></a></h3><p>当从不是关系所有者的实体中删除记录时，<strong>我们应该手动删除关联</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Book</span> book <span class="token operator">:</span> author1<span class="token punctuation">.</span><span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   book<span class="token punctuation">.</span><span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>author1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
entityManager<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>author1<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，让我们将代码放在方法内，并用_@PreRemove_注解进行注释：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@PreRemove</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">removeBookAssociations</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Book</span> book<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       book<span class="token punctuation">.</span><span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JPA将在删除实体之前执行此方法中的所有内容。</p><p>最后，让我们创建一个测试来检查功能是否正常工作：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">givenEntities_whenRemoveFromNotOwner_thenRemoveAssociation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Author</span> author <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Author</span><span class="token punctuation">)</span> entityManager
      <span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT author from Author author where author.name = ?1&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">setParameter</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;Ralph Johnson&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">getSingleResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Book</span> book1 <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Book</span> book2 <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token number">2L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    entityManager<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> book1<span class="token punctuation">.</span><span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> book2<span class="token punctuation">.</span><span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-结论" tabindex="-1"><a class="header-anchor" href="#_5-结论"><span>5. 结论</span></a></h2><p>在本文中，我们学习了如何在JPA中从多对多关系中删除实体。</p><p>像往常一样，示例可以在GitHub上找到。</p>`,46),o=[e];function c(i,l){return a(),s("div",null,o)}const r=n(p,[["render",c],["__file","2024-07-07-Remove Entity with Many to Many Relationship in JPA.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-07/2024-07-07-Remove%20Entity%20with%20Many%20to%20Many%20Relationship%20in%20JPA.html","title":"在JPA中删除多对多关系的实体","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["JPA","多对多关系"],"tag":["JPA","多对多","实体删除"],"head":[["meta",{"name":"keywords","content":"JPA, 多对多关系, 实体删除, 数据库操作"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-07/2024-07-07-Remove%20Entity%20with%20Many%20to%20Many%20Relationship%20in%20JPA.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"在JPA中删除多对多关系的实体"}],["meta",{"property":"og:description","content":"在JPA中删除多对多关系的实体 在本教程中，我们将习如何在JPA中从多对多关系中删除实体。 多对多关系是一种两个实体通过一个额外的连接表相连的关系。为了有效地映射这些实体，我们应该遵循一些指导原则。 首先，在定义多对多关系时，我们应该考虑使用_Set_而不是_List_。 作为JPA实现的Hibernate不会以高效的方式从_List_中删除实体。 当..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-07T22:59:25.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"JPA"}],["meta",{"property":"article:tag","content":"多对多"}],["meta",{"property":"article:tag","content":"实体删除"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-07T22:59:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"在JPA中删除多对多关系的实体\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-07T22:59:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"在JPA中删除多对多关系的实体 在本教程中，我们将习如何在JPA中从多对多关系中删除实体。 多对多关系是一种两个实体通过一个额外的连接表相连的关系。为了有效地映射这些实体，我们应该遵循一些指导原则。 首先，在定义多对多关系时，我们应该考虑使用_Set_而不是_List_。 作为JPA实现的Hibernate不会以高效的方式从_List_中删除实体。 当..."},"headers":[{"level":3,"title":"3. 从单向_@ManyToMany_中删除","slug":"_3-从单向-manytomany-中删除","link":"#_3-从单向-manytomany-中删除","children":[]},{"level":3,"title":"4. 从双向_@ManyToMany_中删除","slug":"_4-从双向-manytomany-中删除","link":"#_4-从双向-manytomany-中删除","children":[]},{"level":3,"title":"4.1. 从所有者实体中删除","slug":"_4-1-从所有者实体中删除","link":"#_4-1-从所有者实体中删除","children":[]},{"level":3,"title":"4.2. 从非所有者实体中删除","slug":"_4-2-从非所有者实体中删除","link":"#_4-2-从非所有者实体中删除","children":[]},{"level":2,"title":"5. 结论","slug":"_5-结论","link":"#_5-结论","children":[]}],"git":{"createdTime":1720393165000,"updatedTime":1720393165000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":4.39,"words":1318},"filePathRelative":"posts/baeldung/2024-07-07/2024-07-07-Remove Entity with Many to Many Relationship in JPA.md","localizedDate":"2022年4月1日","excerpt":"\\n<p>在本教程中，我们将习如何在JPA中从多对多关系中删除实体。</p>\\n<p>多对多关系是一种两个实体通过一个额外的连接表相连的关系。为了有效地映射这些实体，我们应该遵循一些指导原则。</p>\\n<p><strong>首先，在定义多对多关系时，我们应该考虑使用_Set_而不是_List_。</strong> 作为JPA实现的Hibernate不会以高效的方式从_List_中删除实体。</p>\\n<p>当使用_List_时，Hibernate会从连接表中删除所有实体，然后插入剩余的实体。这可能会导致性能问题。我们可以通过使用_Set_来轻松避免这个问题。</p>\\n<p><strong>其次，我们不应该在映射中使用_CascadeType.REMOVE_，因此也不应该使用_CascadeType.ALL_。</strong></p>","autoDesc":true}');export{r as comp,d as data};
