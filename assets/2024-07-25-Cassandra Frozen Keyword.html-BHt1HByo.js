import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as i}from"./app-D0vunQyr.js";const n={},l=i(`<h1 id="apache-cassandra数据库中的冻结关键字" tabindex="-1"><a class="header-anchor" href="#apache-cassandra数据库中的冻结关键字"><span>Apache Cassandra数据库中的冻结关键字</span></a></h1><p>在这个教程中，我们将讨论Apache Cassandra数据库中的_冻结_关键字。首先，我们将展示如何声明冻结的集合或用户定义类型（UDT）。接下来，我们将讨论使用示例以及它如何影响持久存储的基本操作。</p><h2 id="_2-cassandra数据库配置" tabindex="-1"><a class="header-anchor" href="#_2-cassandra数据库配置"><span>2. Cassandra数据库配置</span></a></h2><p>让我们使用docker镜像创建一个数据库，并使用_cqlsh_连接到数据库。接下来，我们应该创建一个_keyspace_：</p><div class="language-cql line-numbers-mode" data-ext="cql" data-title="cql"><pre class="language-cql"><code>CREATE KEYSPACE mykeyspace WITH replication = {&#39;class&#39;:&#39;SimpleStrategy&#39;, &#39;replication_factor&#39; : 1};
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在这个教程中，我们创建了一个_keyspace_，数据只有一份副本。现在，让我们将客户端会话连接到一个_keyspace_：</p><div class="language-cql line-numbers-mode" data-ext="cql" data-title="cql"><pre class="language-cql"><code>USE mykeyspace;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_3-冻结集合类型" tabindex="-1"><a class="header-anchor" href="#_3-冻结集合类型"><span>3. 冻结集合类型</span></a></h2><p><strong>一个列的类型如果是冻结集合（<em>set</em>, <em>map</em>, 或 <em>list</em>），那么它的值只能整体替换。</strong> 换句话说，我们不能像在非冻结集合类型中那样添加、更新或删除集合中的单个元素。因此，当我们想要保护集合不受单个值更新的影响时，_冻结_关键字可能会很有用。</p><p>此外，<strong>由于冻结，我们可以将冻结集合用作表中的主键。</strong> 我们可以通过使用集合类型如_set_, <em>list</em>, 或 _map_来声明集合列。然后我们添加集合的类型。</p><p>要声明一个_冻结_集合，我们必须在集合定义之前添加关键字：</p><div class="language-cql line-numbers-mode" data-ext="cql" data-title="cql"><pre class="language-cql"><code>CREATE TABLE mykeyspace.users
(
    id         uuid PRIMARY KEY,
    ip_numbers frozen\`\`&lt;set&lt;inet&gt;\`\`&gt;,
    addresses  frozen\`\`&lt;map&lt;text, tuple&lt;text&gt;\`\`&gt;&gt;,
    emails     frozen\`\`&lt;list&lt;varchar&gt;\`\`&gt;,
);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们插入一些数据：</p><div class="language-cql line-numbers-mode" data-ext="cql" data-title="cql"><pre class="language-cql"><code>INSERT INTO mykeyspace.users (id, ip_numbers)
VALUES (6ab09bec-e68e-48d9-a5f8-97e6fb4c9b47, {&#39;10.10.11.1&#39;, &#39;10.10.10.1&#39;, &#39;10.10.12.1&#39;});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>重要的是，正如我们上面提到的，一个_冻结_集合只能整体替换。这意味着我们不能添加或删除元素。让我们尝试向_ip_numbers_集合中添加一个新元素：</p><div class="language-cql line-numbers-mode" data-ext="cql" data-title="cql"><pre class="language-cql"><code>UPDATE mykeyspace.users
SET ip_numbers = ip_numbers + {&#39;10.10.14.1&#39;}
WHERE id = 6ab09bec-e68e-48d9-a5f8-97e6fb4c9b47;

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行更新后，我们会得到错误：</p><div class="language-cql line-numbers-mode" data-ext="cql" data-title="cql"><pre class="language-cql"><code>InvalidRequest: Error from server: code=2200 [Invalid query] message=&quot;Invalid operation (ip_numbers = ip_numbers + {&#39;10.10.14.1&#39;}) for frozen collection column ip_numbers&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果我们想更新集合中的数据，我们需要更新整个集合：</p><div class="language-cql line-numbers-mode" data-ext="cql" data-title="cql"><pre class="language-cql"><code>UPDATE mykeyspace.users
SET ip_numbers = {&#39;11.10.11.1&#39;, &#39;11.10.10.1&#39;, &#39;11.10.12.1&#39;}
WHERE id = 6ab09bec-e68e-48d9-a5f8-97e6fb4c9b47;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-1-嵌套集合" tabindex="-1"><a class="header-anchor" href="#_3-1-嵌套集合"><span>3.1. 嵌套集合</span></a></h3><p>有时我们需要在Cassandra数据库中使用嵌套集合。<strong>嵌套集合只有在我们将其标记为_冻结_时才可能</strong>。这意味着这个集合将是不可变的。我们可以在_冻结_和_非冻结_集合中冻结嵌套集合。让我们看一个例子：</p><div class="language-cql line-numbers-mode" data-ext="cql" data-title="cql"><pre class="language-cql"><code>CREATE TABLE mykeyspace.users_score
(
    id    uuid PRIMARY KEY,
    score set\`\`&lt;frozen&lt;set&lt;int&gt;\`\`&gt;&gt;
);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-冻结用户定义类型" tabindex="-1"><a class="header-anchor" href="#_4-冻结用户定义类型"><span>4. 冻结用户定义类型</span></a></h2><p>用户定义类型（UDT）可以将多个数据字段，每个字段都有名称和类型，附加到单个列。用于创建用户定义类型的字段可以是任何有效的数据类型，包括集合或其他UDT。让我们创建我们的UDT：</p><div class="language-cql line-numbers-mode" data-ext="cql" data-title="cql"><pre class="language-cql"><code>CREATE TYPE mykeyspace.address (
    city text,
    street text,
    streetNo int,
    zipcode text
);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们看看_冻结_用户定义类型的声明：</p><div class="language-cql line-numbers-mode" data-ext="cql" data-title="cql"><pre class="language-cql"><code>CREATE TABLE mykeyspace.building
(
    id      uuid PRIMARY KEY,
    address frozen\`\`&lt;address&gt;\`\`
);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们在用户定义类型上使用_冻结_时，Cassandra将该值视为一个blob。这个blob是通过将我们的UDT序列化为单个值获得的。所以，<strong>我们不能更新用户定义类型值的部分</strong>。我们必须覆盖整个值。</p><p>首先，让我们插入一些数据：</p><div class="language-cql line-numbers-mode" data-ext="cql" data-title="cql"><pre class="language-cql"><code>INSERT INTO mykeyspace.building (id, address)
VALUES (6ab09bec-e68e-48d9-a5f8-97e6fb4c9b48,
  {city: &#39;City&#39;, street: &#39;Street&#39;, streetNo: 2, zipcode: &#39;02-212&#39;});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们看看当我们尝试只更新一个字段时会发生什么：</p><div class="language-cql line-numbers-mode" data-ext="cql" data-title="cql"><pre class="language-cql"><code>UPDATE mykeyspace.building
SET address.city = &#39;City2&#39;
WHERE id = 6ab09bec-e68e-48d9-a5f8-97e6fb4c9b48;

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们又会得到错误：</p><div class="language-cql line-numbers-mode" data-ext="cql" data-title="cql"><pre class="language-cql"><code>InvalidRequest: Error from server: code=2200 [Invalid query] message=&quot;Invalid operation (address.city = &#39;City2&#39;) for frozen UDT column address&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>所以，让我们更新整个值：</p><div class="language-cql line-numbers-mode" data-ext="cql" data-title="cql"><pre class="language-cql"><code>UPDATE mykeyspace.building
SET address = {city : &#39;City2&#39;, street : &#39;Street2&#39;}
WHERE id = 6ab09bec-e68e-48d9-a5f8-97e6fb4c9b48;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这次，地址将被更新。查询中未包括的字将用_null_值填充。</p><h2 id="_5-元组" tabindex="-1"><a class="header-anchor" href="#_5-元组"><span>5. 元组</span></a></h2><p>与其他组合类型不同，<strong>元组总是冻结的</strong>。因此，我们不必用_冻结_关键字标记元组。因此，不可能只更新元组的一些元素。与冻结集合或UDT一样，我们必须覆盖整个值。</p><h2 id="_6-结论" tabindex="-1"><a class="header-anchor" href="#_6-结论"><span>6. 结论</span></a></h2><p>在这个快速教程中，我们探讨了Cassandra数据库中冻结组件的基本概念。接下来，我们创建了冻结的集合和用户定义类型。然后，我们检查了这些数据结构的行为。之后，我们讨论了元组数据类型。和往常一样，文章的完整源代码可以在GitHub上找到。我已经完成了翻译，以下是翻译的完整内容：</p><hr><p>date: 2022-04-01 category:</p><ul><li>数据库</li><li>Apache Cassandra tag:</li><li>冻结关键字</li><li>集合</li><li>用户定义类型 head:</li><li><ul><li>meta</li><li>name: keywords content: Cassandra, 冻结关键字, 数据库, 集合, 用户定义类型</li></ul></li></ul><hr><h1 id="apache-cassandra数据库中的冻结关键字-1" tabindex="-1"><a class="header-anchor" href="#apache-cassandra数据库中的冻结关键字-1"><span>Apache Cassandra数据库中的冻结关键字</span></a></h1><p>在这个教程中，我们将讨论Apache Cassandra数据库中的_冻结_关键字。首先，我们将展示如何声明冻结的集合或用户定义类型（UDT）。接下来，我们将讨论使用示例以及它如何影响持久存储的基本操作。</p><h2 id="_2-cassandra数据库配置-1" tabindex="-1"><a class="header-anchor" href="#_2-cassandra数据库配置-1"><span>2. Cassandra数据库配置</span></a></h2><p>让我们使用docker镜像创建一个数据库，并使用_cqlsh_连接到数据库。接下来，我们应该创建一个_keyspace_：</p><div class="language-cql line-numbers-mode" data-ext="cql" data-title="cql"><pre class="language-cql"><code>CREATE KEYSPACE mykeyspace WITH replication = {&#39;class&#39;:&#39;SimpleStrategy&#39;, &#39;replication_factor&#39; : 1};
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在这个教程中，我们创建了一个_keyspace_，数据只有一份副本。现在，让我们将客户端会话连接到一个_keyspace_：</p><div class="language-cql line-numbers-mode" data-ext="cql" data-title="cql"><pre class="language-cql"><code>USE mykeyspace;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_3-冻结集合类型-1" tabindex="-1"><a class="header-anchor" href="#_3-冻结集合类型-1"><span>3. 冻结集合类型</span></a></h2><p><strong>一个列的类型如果是冻结集合（<em>set</em>, <em>map</em>, 或 <em>list</em>），那么它的值只能整体替换。</strong> 换句话说，我们不能像在非冻结集合类型中那样添加、更新或删除集合中的单个元素。因此，当我们想要保护集合不受单个值更新的影响时，_冻结_关键字可能会很有用。</p><p>此外，<strong>由于冻结，我们可以将冻结集合用作表中的主键。</strong> 我们可以通过使用集合类型如_set_, <em>list</em>, 或 _map_来声明集合列。然后我们添加集合的类型。</p><p>要声明一个_冻结_集合，我们必须在集合定义之前添加关键字：</p><div class="language-cql line-numbers-mode" data-ext="cql" data-title="cql"><pre class="language-cql"><code>CREATE TABLE mykeyspace.users
(
    id         uuid PRIMARY KEY,
    ip_numbers frozen\`\`&lt;set&lt;inet&gt;\`\`&gt;,
    addresses  frozen\`\`&lt;map&lt;text, tuple&lt;text&gt;\`\`&gt;&gt;,
    emails     frozen\`\`&lt;list&lt;varchar&gt;\`\`&gt;,
);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们插入一些数据：</p><div class="language-cql line-numbers-mode" data-ext="cql" data-title="cql"><pre class="language-cql"><code>INSERT INTO mykeyspace.users (id, ip_numbers)
VALUES (6ab09bec-e68e-48d9-a5f8-97e6fb4c9b47, {&#39;10.10.11.1&#39;, &#39;10.10.10.1&#39;, &#39;10.10.12.1&#39;});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>重要的是，正如我们上面提到的，一个_冻结_集合只能整体替换。这意味着我们不能添加或删除元素。让我们尝试向_ip_numbers_集合中添加一个新元素：</p><div class="language-cql line-numbers-mode" data-ext="cql" data-title="cql"><pre class="language-cql"><code>UPDATE mykeyspace.users
SET ip_numbers = ip_numbers + {&#39;10.10.14.1&#39;}
WHERE id = 6ab09bec-e68e-48d9-a5f8-97e6fb4c9b47;

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行更新后，我们会得到错误：</p><div class="language-cql line-numbers-mode" data-ext="cql" data-title="cql"><pre class="language-cql"><code>InvalidRequest: Error from server: code=2200 [Invalid query] message=&quot;Invalid operation (ip_numbers = ip_numbers + {&#39;10.10.14.1&#39;}) for frozen collection column ip_numbers&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果我们想更新集合中的数据，我们需要更新整个集合：</p><div class="language-cql line-numbers-mode" data-ext="cql" data-title="cql"><pre class="language-cql"><code>UPDATE mykeyspace.users
SET ip_numbers = {&#39;11.10.11.1&#39;, &#39;11.10.10.1&#39;, &#39;11.10.12.1&#39;}
WHERE id = 6ab09bec-e68e-48d9-a5f8-97e6fb4c9b47;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-1-嵌套集合-1" tabindex="-1"><a class="header-anchor" href="#_3-1-嵌套集合-1"><span>3.1. 嵌套集合</span></a></h3><p>有时我们需要在Cassandra数据库中使用嵌套集合。<strong>嵌套集合只有在我们将其标记为_冻结_时才可能</strong>。这意味着这个集合将是不可变的。我们可以在_冻结_和_非冻结_集合中冻结嵌套集合。让我们看一个例子：</p><div class="language-cql line-numbers-mode" data-ext="cql" data-title="cql"><pre class="language-cql"><code>CREATE TABLE mykeyspace.users_score
(
    id    uuid PRIMARY KEY,
    score set\`\`&lt;frozen&lt;set&lt;int&gt;\`\`&gt;&gt;
);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-冻结用户定义类型-1" tabindex="-1"><a class="header-anchor" href="#_4-冻结用户定义类型-1"><span>4. 冻结用户定义类型</span></a></h2><p>用户定义类型（UDT）可以将多个数据字段，每个字段都有名称和类型，附加到单个列。用于创建用户定义类型的字段可以是任何有效的数据类型，包括集合或其他UDT。让我们创建我们的UDT：</p><div class="language-cql line-numbers-mode" data-ext="cql" data-title="cql"><pre class="language-cql"><code>CREATE TYPE mykeyspace.address (
    city text,
    street text,
    streetNo int,
    zipcode text
);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们看看_冻结_用户定义类型的声明：</p><div class="language-cql line-numbers-mode" data-ext="cql" data-title="cql"><pre class="language-cql"><code>CREATE TABLE mykeyspace.building
(
    id      uuid PRIMARY KEY,
    address frozen\`\`&lt;address&gt;\`\`
);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们在用户定义类型上使用_冻结_时，Cassandra将该值视为一个blob。这个blob是通过将我们的UDT序列化为单个值获得的。所以，<strong>我们不能更新用户定义类型值的部分</strong>。我们必须覆盖整个值。</p><p>首先，让我们插入一些数据：</p><div class="language-cql line-numbers-mode" data-ext="cql" data-title="cql"><pre class="language-cql"><code>INSERT INTO mykeyspace.building (id, address)
VALUES (6ab09bec-e68e-48d9-a5f8-97e6fb4c9b48,
  {city: &#39;City&#39;, street: &#39;Street&#39;, streetNo: 2, zipcode: &#39;02-212&#39;});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们看看当我们尝试只更新一个字段时会发生什么：</p><div class="language-cql line-numbers-mode" data-ext="cql" data-title="cql"><pre class="language-cql"><code>UPDATE mykeyspace.building
SET address.city = &#39;City2&#39;
WHERE id = 6ab09bec-e68e-48d9-a5f8-97e6fb4c9b48;

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们又会得到错误：</p><div class="language-cql line-numbers-mode" data-ext="cql" data-title="cql"><pre class="language-cql"><code>InvalidRequest: Error from server: code=2200 [Invalid query] message=&quot;Invalid operation (address.city = &#39;City2&#39;) for frozen UDT column address&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>所以，让我们更新整个值：</p><div class="language-cql line-numbers-mode" data-ext="cql" data-title="cql"><pre class="language-cql"><code>UPDATE mykeyspace.building
SET address = {city : &#39;City2&#39;, street : &#39;Street2&#39;}
WHERE id = 6ab09bec-e68e-48d9-a5f8-97e6fb4c9b48;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这次，地址将被更新。查询中未包括的字段将用_null_值填充。</p><h2 id="_5-元组-1" tabindex="-1"><a class="header-anchor" href="#_5-元组-1"><span>5. 元组</span></a></h2><p>与其他组合类型不同，<strong>元组总是冻结的</strong>。因此，我们不必用_冻结_关键字标记元组。因此，不可能只更新元组的一些元素。与冻结集合或UDT一样，我们必须覆盖整个值。</p><h2 id="_6-结论-1" tabindex="-1"><a class="header-anchor" href="#_6-结论-1"><span>6. 结论</span></a></h2><p>在这个快速教程中，我们探讨了Cassandra数据库中冻结组件的基本概念。接下来，我们创建了冻结的集合和用户定义类型。然后，我们检查了这些数据结构的行为。之后，我们讨论了元组数据类型。和往常一样，文章的完整源代码可以在GitHub上找到。</p><p>OK</p>`,89),d=[l];function r(c,t){return s(),a("div",null,d)}const p=e(n,[["render",r],["__file","2024-07-25-Cassandra Frozen Keyword.html.vue"]]),o=JSON.parse(`{"path":"/posts/baeldung/2024-07-25/2024-07-25-Cassandra%20Frozen%20Keyword.html","title":"Apache Cassandra数据库中的冻结关键字","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Database","Apache Cassandra"],"tag":["frozen keyword","collections","user-defined types"],"head":[["meta",{"name":"keywords","content":"Cassandra, frozen keyword, database, collections, user-defined types"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-25/2024-07-25-Cassandra%20Frozen%20Keyword.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Apache Cassandra数据库中的冻结关键字"}],["meta",{"property":"og:description","content":"Apache Cassandra数据库中的冻结关键字 在这个教程中，我们将讨论Apache Cassandra数据库中的_冻结_关键字。首先，我们将展示如何声明冻结的集合或用户定义类型（UDT）。接下来，我们将讨论使用示例以及它如何影响持久存储的基本操作。 2. Cassandra数据库配置 让我们使用docker镜像创建一个数据库，并使用_cqlsh..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-25T12:54:41.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"frozen keyword"}],["meta",{"property":"article:tag","content":"collections"}],["meta",{"property":"article:tag","content":"user-defined types"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-25T12:54:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Apache Cassandra数据库中的冻结关键字\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-25T12:54:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Apache Cassandra数据库中的冻结关键字 在这个教程中，我们将讨论Apache Cassandra数据库中的_冻结_关键字。首先，我们将展示如何声明冻结的集合或用户定义类型（UDT）。接下来，我们将讨论使用示例以及它如何影响持久存储的基本操作。 2. Cassandra数据库配置 让我们使用docker镜像创建一个数据库，并使用_cqlsh..."},"headers":[{"level":2,"title":"2. Cassandra数据库配置","slug":"_2-cassandra数据库配置","link":"#_2-cassandra数据库配置","children":[]},{"level":2,"title":"3. 冻结集合类型","slug":"_3-冻结集合类型","link":"#_3-冻结集合类型","children":[{"level":3,"title":"3.1. 嵌套集合","slug":"_3-1-嵌套集合","link":"#_3-1-嵌套集合","children":[]}]},{"level":2,"title":"4. 冻结用户定义类型","slug":"_4-冻结用户定义类型","link":"#_4-冻结用户定义类型","children":[]},{"level":2,"title":"5. 元组","slug":"_5-元组","link":"#_5-元组","children":[]},{"level":2,"title":"6. 结论","slug":"_6-结论","link":"#_6-结论","children":[]},{"level":2,"title":"2. Cassandra数据库配置","slug":"_2-cassandra数据库配置-1","link":"#_2-cassandra数据库配置-1","children":[]},{"level":2,"title":"3. 冻结集合类型","slug":"_3-冻结集合类型-1","link":"#_3-冻结集合类型-1","children":[{"level":3,"title":"3.1. 嵌套集合","slug":"_3-1-嵌套集合-1","link":"#_3-1-嵌套集合-1","children":[]}]},{"level":2,"title":"4. 冻结用户定义类型","slug":"_4-冻结用户定义类型-1","link":"#_4-冻结用户定义类型-1","children":[]},{"level":2,"title":"5. 元组","slug":"_5-元组-1","link":"#_5-元组-1","children":[]},{"level":2,"title":"6. 结论","slug":"_6-结论-1","link":"#_6-结论-1","children":[]}],"git":{"createdTime":1721912081000,"updatedTime":1721912081000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":8.17,"words":2450},"filePathRelative":"posts/baeldung/2024-07-25/2024-07-25-Cassandra Frozen Keyword.md","localizedDate":"2022年4月1日","excerpt":"\\n<p>在这个教程中，我们将讨论Apache Cassandra数据库中的_冻结_关键字。首先，我们将展示如何声明冻结的集合或用户定义类型（UDT）。接下来，我们将讨论使用示例以及它如何影响持久存储的基本操作。</p>\\n<h2>2. Cassandra数据库配置</h2>\\n<p>让我们使用docker镜像创建一个数据库，并使用_cqlsh_连接到数据库。接下来，我们应该创建一个_keyspace_：</p>\\n<div class=\\"language-cql\\" data-ext=\\"cql\\" data-title=\\"cql\\"><pre class=\\"language-cql\\"><code>CREATE KEYSPACE mykeyspace WITH replication = {'class':'SimpleStrategy', 'replication_factor' : 1};\\n</code></pre></div>","autoDesc":true}`);export{p as comp,o as data};
