import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-Bx_7oN2A.js";const e={},p=t('<hr><h1 id="guava的futures和listenablefuture" tabindex="-1"><a class="header-anchor" href="#guava的futures和listenablefuture"><span>Guava的Futures和ListenableFuture</span></a></h1><p>Guava为我们提供了ListenableFuture，它是一个比Java默认的Future拥有更丰富的API。让我们看看如何利用这一点。</p><p>让我们简单了解一下这些不同的类以及它们之间的关系。</p><h3 id="_2-1-future" tabindex="-1"><a class="header-anchor" href="#_2-1-future"><span>2.1 Future</span></a></h3><p>从Java 5开始，我们可以使用java.util.concurrent.Future来表示异步任务。</p><p>Future允许我们访问已经完成或将来可能完成的任务的结果，同时支持取消它们。</p><h3 id="_2-2-listenablefuture" tabindex="-1"><a class="header-anchor" href="#_2-2-listenablefuture"><span>2.2 ListenableFuture</span></a></h3><p>使用java.util.concurrent.Future的一个不足之处是它不能添加在完成时运行的侦听器，这是大多数流行的异步框架提供的常见特性。</p><p><strong>Guava通过允许我们在其com.google.common.util.concurrent.ListenableFuture上附加侦听器来解决这个问题。</strong></p><h3 id="_2-3-futures" tabindex="-1"><a class="header-anchor" href="#_2-3-futures"><span>2.3 Futures</span></a></h3><p>Guava提供了便利类com.google.common.util.concurrent.Futures，使它更容易使用他们的ListenableFuture。</p><p>这个类提供了与ListenableFuture交互的多种方式，其中包括支持添加成功/失败回调以及允许我们使用聚合或转换来协调多个Future。</p><h2 id="_3-简单用法" tabindex="-1"><a class="header-anchor" href="#_3-简单用法"><span>3 简单用法</span></a></h2><p>现在让我们看看如何以最简单的方式使用ListenableFuture；创建和添加回调。</p><h3 id="_3-1-创建listenablefuture" tabindex="-1"><a class="header-anchor" href="#_3-1-创建listenablefuture"><span>3.1 创建ListenableFuture</span></a></h3><p><strong>我们可以获得ListenableFuture的最简单方式是将任务提交给ListeningExecutorService</strong>（就像我们使用普通的ExecutorService来获得普通的Future一样）：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ExecutorService</span> execService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">ListeningExecutorService</span> lExecService <span class="token operator">=</span> <span class="token class-name">MoreExecutors</span><span class="token punctuation">.</span><span class="token function">listeningDecorator</span><span class="token punctuation">(</span>execService<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">ListenableFuture</span>```````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>``````` asyncTask <span class="token operator">=</span> lExecService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n    <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 长时间运行的任务</span>\n    <span class="token keyword">return</span> <span class="token number">5</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意我们如何使用MoreExecutors类将我们的ExecutorService装饰为ListeningExecutorService。我们可以在Guava的线程池实现中了解更多关于MoreExecutors的信息。</p><p>如果我们已经有了一个返回Future的API，我们需要将其转换为ListenableFuture，这可以通过初始化其具体实现ListenableFutureTask来轻松完成：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 旧API</span>\n<span class="token keyword">public</span> <span class="token class-name">FutureTask</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````````````````` <span class="token function">fetchConfigTask</span><span class="token punctuation">(</span><span class="token class-name">String</span> configKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%s.%d&quot;</span><span class="token punctuation">,</span> configKey<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 新API</span>\n<span class="token keyword">public</span> <span class="token class-name">ListenableFutureTask</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````````````````` <span class="token function">fetchConfigListenableTask</span><span class="token punctuation">(</span><span class="token class-name">String</span> configKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">ListenableFutureTask</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%s.%d&quot;</span><span class="token punctuation">,</span> configKey<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们需要意识到，除非我们将它们提交给Executor，否则这些任务不会运行。<strong>直接与ListenableFutureTask交互不是常见的用法，只在少数场景中进行（例如：实现我们自己的ExecutorService）</strong>。请参阅Guava的_AbstractListeningExecutorService以了解实际用法。</p><p>我们还可以使用com.google.common.util.concurrent.SettableFuture，如果我们的异步任务不能使用ListeningExecutorService或提供的Futures实用方法，我们需要手动设置未来的值。对于更复杂的用法，我们还可以考虑com.google.common.util.concurrent.AbstractFuture。</p><h3 id="_3-2-添加侦听器-回调" tabindex="-1"><a class="header-anchor" href="#_3-2-添加侦听器-回调"><span>3.2 添加侦听器/回调</span></a></h3><p>我们可以通过使用Futures.addCallback()注册回调来<strong>向ListenableFuture添加一个侦听器</strong>，这让我们在成功或失败时访问结果或异常：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Executor</span> listeningExecutor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">ListenableFuture</span>```````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>``````` asyncTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListenableFutureService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">succeedingTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token class-name">Futures</span><span class="token punctuation">.</span><span class="token function">addCallback</span><span class="token punctuation">(</span>asyncTask<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">FutureCallback</span>```````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>```````<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 操作成功</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFailure</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 操作失败</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> listeningExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们也可以通过直接将其添加到ListenableFuture上<strong>添加一个侦听器</strong>。注意，这个侦听器将在future成功或异常完成时运行。同样注意，我们没有访问异步任务的结果：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Executor</span> listeningExecutor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">int</span> nextTask <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token class-name">Set</span>```````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>``````` runningTasks <span class="token operator">=</span> <span class="token class-name">ConcurrentHashMap</span><span class="token punctuation">.</span><span class="token function">newKeySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nrunningTasks<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nextTask<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">ListenableFuture</span>```````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>``````` asyncTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListenableFutureService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">succeedingTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nasyncTask<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> runningTasks<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>nextTask<span class="token punctuation">)</span><span class="token punctuation">,</span> listeningExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-复杂用法" tabindex="-1"><a class="header-anchor" href="#_4-复杂用法"><span>4 复杂用法</span></a></h2><p>现在让我们看看如何在更复杂的情况下使用这些futures。</p><h3 id="_4-1-扇入" tabindex="-1"><a class="header-anchor" href="#_4-1-扇入"><span>4.1 扇入</span></a></h3><p>有时我们需要调用多个异步任务并收集它们的结果，通常称为扇入操作。</p><p>Guava提供了两种方法来实现这一点。然而，我们需要根据我们的要求谨慎选择正确的方法。让我们假设我们需要协调以下异步任务：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ListenableFuture</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````````````````` task1 <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">fetchConfig</span><span class="token punctuation">(</span><span class="token string">&quot;config.0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">ListenableFuture</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````````````````` task2 <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">fetchConfig</span><span class="token punctuation">(</span><span class="token string">&quot;config.1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">ListenableFuture</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````````````````` task3 <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">fetchConfig</span><span class="token punctuation">(</span><span class="token string">&quot;config.2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>一种扇入多个futures的方法是使用Futures.allAsList()方法。这允许我们在所有futures都成功时收集它们的结果</strong>，按照提供的futures的顺序。如果任何一个future失败，那么整个结果就是一个失败的future：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ListenableFuture</span><span class="token operator">&lt;</span><span class="token class-name">List</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>``````````````````<span class="token operator">&gt;</span> configsTask <span class="token operator">=</span> <span class="token class-name">Futures</span><span class="token punctuation">.</span><span class="token function">allAsList</span><span class="token punctuation">(</span>task1<span class="token punctuation">,</span> task2<span class="token punctuation">,</span> task3<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Futures</span><span class="token punctuation">.</span><span class="token function">addCallback</span><span class="token punctuation">(</span>configsTask<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">FutureCallback</span><span class="token operator">&lt;</span><span class="token class-name">List</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>``````````````````<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">List</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````````````````` configResults<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 所有futures成功时操作</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFailure</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 至少一个失败时处理</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> someExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>如果我们需要收集所有异步任务的结果，不管它们是否失败，我们可以使用Futures.successfulAsList()</strong>。这将返回一个列表，其结果将与传入参数的任务顺序相同，失败的任务将在列表的相应位置分配_null_：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ListenableFuture</span><span class="token operator">&lt;</span><span class="token class-name">List</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>``````````````````<span class="token operator">&gt;</span> configsTask <span class="token operator">=</span> <span class="token class-name">Futures</span><span class="token punctuation">.</span><span class="token function">successfulAsList</span><span class="token punctuation">(</span>task1<span class="token punctuation">,</span> task2<span class="token punctuation">,</span> task3<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Futures</span><span class="token punctuation">.</span><span class="token function">addCallback</span><span class="token punctuation">(</span>configsTask<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">FutureCallback</span><span class="token operator">&lt;</span><span class="token class-name">List</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>``````````````````<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">List</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````````````````` configResults<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 处理结果。如果task2失败，则configResults.get(1) == null</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFailure</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 处理失败</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> listeningExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们应该在上述用法中注意，<strong>如果future任务通常在成功时返回_null_，它将无法与失败的任务（也将结果设置为_null_）区分开来。</strong></p><h3 id="_4-2-使用组合器的扇入" tabindex="-1"><a class="header-anchor" href="#_4-2-使用组合器的扇入"><span>4.2 使用组合器的扇入</span></a></h3><p>如果我们有一个要求协调多个返回不同结果的futures，上述解决方案可能不够用。在这种情况下，我们可以使用扇入操作的组合器变体来协调这种混合的futures。</p><p>与简单的扇入操作类似，<strong>Guava提供了两种变体；一种在所有任务成功完成时成功，一种即使有些任务失败也成功的使用Futures.whenAllSucceed()和Futures.whenAllComplete()方法。</strong></p><p>让我们看看如何使用Futures.whenAllSucceed()将来自多个futures的不同结果类型组合起来：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ListenableFuture</span>```````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>``````` cartIdTask <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">getCartId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">ListenableFuture</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````````````````` customerNameTask <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">getCustomerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">ListenableFuture</span><span class="token operator">&lt;</span><span class="token class-name">List</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>``````````````````<span class="token operator">&gt;</span> cartItemsTask <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">getCartItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">ListenableFuture</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CartInfo</span><span class="token punctuation">&gt;</span></span>`` cartInfoTask <span class="token operator">=</span> <span class="token class-name">Futures</span><span class="token punctuation">.</span><span class="token function">whenAllSucceed</span><span class="token punctuation">(</span>cartIdTask<span class="token punctuation">,</span> customerNameTask<span class="token punctuation">,</span> cartItemsTask<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> cartId <span class="token operator">=</span> <span class="token class-name">Futures</span><span class="token punctuation">.</span><span class="token function">getDone</span><span class="token punctuation">(</span>cartIdTask<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">String</span> customerName <span class="token operator">=</span> <span class="token class-name">Futures</span><span class="token punctuation">.</span><span class="token function">getDone</span><span class="token punctuation">(</span>customerNameTask<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">List</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````````````````` cartItems <span class="token operator">=</span> <span class="token class-name">Futures</span><span class="token punctuation">.</span><span class="token function">getDone</span><span class="token punctuation">(</span>cartItemsTask<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CartInfo</span><span class="token punctuation">(</span>cartId<span class="token punctuation">,</span> customerName<span class="token punctuation">,</span> cartItems<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> someExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">Futures</span><span class="token punctuation">.</span><span class="token function">addCallback</span><span class="token punctuation">(</span>cartInfoTask<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">FutureCallback</span>``<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CartInfo</span><span class="token punctuation">&gt;</span></span>``<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">CartInfo</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 所有成功和组合成功时处理</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFailure</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 任一任务失败或组合失败时处理</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> listeningExecService<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们需要允许一些任务失败，我们可以使用Futures.whenAllComplete()。虽然语义大多与上述类似，但我们应该意识到失败的futures将在调用Futures.getDone()时抛出一个ExecutionException。</p><h3 id="_4-3-转换" tabindex="-1"><a class="header-anchor" href="#_4-3-转换"><span>4.3 转换</span></a></h3><p>有时我们需要在成功后转换future的结果。Guava提供了两种方法来实现这一点，使用Futures.transform()和Futures.lazyTransform()。</p><p>让我们看看如何<strong>使用Futures.transform()转换future的结果。只要转换计算不重，就可以使用它：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ListenableFuture</span><span class="token operator">&lt;</span><span class="token class-name">List</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>``````````````````<span class="token operator">&gt;</span> cartItemsTask <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">getCartItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">Function</span><span class="token operator">&lt;</span><span class="token class-name">List</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>``````````````````<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token operator">&gt;</span> itemCountFunc <span class="token operator">=</span> cartItems <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">assertNotNull</span><span class="token punctuation">(</span>cartItems<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> cartItems<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token class-name">ListenableFuture</span>```````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>``````` itemCountTask <span class="token operator">=</span> <span class="token class-name">Futures</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>cartItemsTask<span class="token punctuation">,</span> itemCountFunc<span class="token punctuation">,</span> listenExecService<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>**我们还可以使用Futures.lazyTransform()**将转换函数应用于java.util.concurrent.Future。我们需要记住，这个选项不返回一个ListenableFuture，但返回一个普通的java.util.concurrent.Future，并且转换函数每次在结果future的get()被调用时都会应用。</p><h3 id="_4-4-链式futures" tabindex="-1"><a class="header-anchor" href="#_4-4-链式futures"><span>4.4 链式Futures</span></a></h3><p>我们可能会遇到需要一个future调用另一个future的情况。在这种情况下，Guava提供了async()变体来安全地链式这些future，一个接一个地执行。</p><p>让我们看看如何<strong>使用Futures.submitAsync()从提交的Callable中调用一个future：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">AsyncCallable</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````````````````` asyncConfigTask <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n    <span class="token class-name">ListenableFuture</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````````````````` configTask <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">fetchConfig</span><span class="token punctuation">(</span><span class="token string">&quot;config.a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 一些长时间运行的任务</span>\n    <span class="token keyword">return</span> configTask<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token class-name">ListenableFuture</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````````````````` configTask <span class="token operator">=</span> <span class="token class-name">Futures</span><span class="token punctuation">.</span><span class="token function">submitAsync</span><span class="token punctuation">(</span>asyncConfigTask<span class="token punctuation">,</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>如果我们想要真正的链式，其中一个future的结果被输入到另一个future的计算中，我们可以使用Futures.transformAsync()：</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ListenableFuture</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````````````````` usernameTask <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">generateUsername</span><span class="token punctuation">(</span><span class="token string">&quot;john&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">AsyncFunction</span>`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>` passwordFunc <span class="token operator">=</span> username <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n    <span class="token class-name">ListenableFuture</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````````````````` generatePasswordTask <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">generatePassword</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 一些长时间运行的任务</span>\n    <span class="token keyword">return</span> generatePasswordTask<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token class-name">ListenableFuture</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````````````````` passwordTask <span class="token operator">=</span> <span class="token class-name">Futures</span><span class="token punctuation">.</span><span class="token function">transformAsync</span><span class="token punctuation">(</span>usernameTask<span class="token punctuation">,</span> passwordFunc<span class="token punctuation">,</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Guava还提供了Futures.scheduleAsync()和Futures.catchingAsync()来提交一个计划任务和在错误恢复时提供回退任务。虽然它们适用于不同的场景，但我们将不讨论它们，因为它们类似于其他async()调用。</p><h2 id="_5-使用注意事项" tabindex="-1"><a class="header-anchor" href="#_5-使用注意事项"><span>5. 使用注意事项</span></a></h2><p>现在让我们研究一下在使用futures和提供的执行器时可能遇到的一些常见陷阱以及如何避免它们。</p><h3 id="_5-1-工作与侦听执行器" tabindex="-1"><a class="header-anchor" href="#_5-1-工作与侦听执行器"><span>5.1 工作与侦听执行器</span></a></h3><p>在使用Guava futures时，理解工作执行器和侦听执行器之间的区别非常重要。例如，假设我们有一个异步任务来获取配置：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ListenableFuture</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````````````````` <span class="token function">fetchConfig</span><span class="token punctuation">(</span><span class="token class-name">String</span> configKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> lExecService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%s.%d&quot;</span><span class="token punctuation">,</span> configKey<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设我们想为上述future附加一个侦听器：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ListenableFuture</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````````````````` configsTask <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">fetchConfig</span><span class="token punctuation">(</span><span class="token string">&quot;config.0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Futures</span><span class="token punctuation">.</span><span class="token function">addCallback</span><span class="token punctuation">(</span>configsTask<span class="token punctuation">,</span> someListener<span class="token punctuation">,</span> listeningExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意这里的lExecService是运行我们的异步任务的执行器，而listeningExecutor是我们的侦听器被调用的执行器。</p><p>如上所见，**我们总是要考虑将这两个执行器分开，以避免我们侦听器和工作者争夺同一线程池资源的场景。**共享同一个执行器可能会导致我们的重型任务饿死侦听器执行，或者一个写得不好的重型侦听器最终阻塞我们的重要重型任务。</p><h3 id="_5-2-小心使用directexecutor" tabindex="-1"><a class="header-anchor" href="#_5-2-小心使用directexecutor"><span>5.2 小心使用directExecutor()</span></a></h3><p>虽然我们可以使用MoreExecutors.directExecutor()和MoreExecutors.newDirectExecutorService()在单元测试中使异步执行更容易处理，但我们在生产代码中应该小心使用它们。</p><p><strong>当我们从上述方法获取执行器时，我们提交的任何任务，无论是重型还是侦听器，都将在当前线程上执行。如果当前执行上下文需要高吞吐量，这可能是危险的。</strong></p><p>例如，在UI线程中使用directExecutor并提交一个重型任务将自动阻塞我们的UI线程。</p><p>我们还可能面临一个场景，我们的侦听器最终减慢了我们所有其他侦听器的速度（即使是那些不涉及directExecutor的）。这是因为Guava在其各自的执行器中使用while循环执行所有侦听器，但directExecutor将导致侦听器在while循环的同一线程中运行。</p><h3 id="_5-3-嵌套futures是不好的" tabindex="-1"><a class="header-anchor" href="#_5-3-嵌套futures是不好的"><span>5.3 嵌套Futures是不好的</span></a></h3><p>在使用链式futures时，我们应该小心不要从一个future内部调用另一个future，以这种方式创建嵌套futures：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ListenableFuture</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>`````````````````` <span class="token function">generatePassword</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> lExecService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> username <span class="token operator">+</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token class-name">String</span> firstName <span class="token operator">=</span> <span class="token string">&quot;john&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">ListenableFuture</span><span class="token operator">&lt;</span><span class="token class-name">ListenableFuture</span>``````````````````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>``````````````````<span class="token operator">&gt;</span> badTask <span class="token operator">=</span> lExecService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">final</span> <span class="token class-name">String</span> username <span class="token operator">=</span> firstName<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&quot;[^a-zA-Z]+&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">&quot;@service.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token function">generatePassword</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>如果我们看到代码中有ListenableFuture<code>&lt;ListenableFuture&lt;V&gt;</code>&gt;，那么我们应该知道这是一个写得不好的future</strong>，因为外部future的取消和完成可能会竞争，取消可能不会传播到内部future。</p><p>如果我们看到上述场景，我们应该总是使用Futures.async()变体来安全地以连接的方式解包这些链式futures。</p><h3 id="_5-4-小心使用jdkfutureadapters-listeninpoolthread" tabindex="-1"><a class="header-anchor" href="#_5-4-小心使用jdkfutureadapters-listeninpoolthread"><span>5.4 小心使用JdkFutureAdapters.listenInPoolThread()</span></a></h3><p>Guava建议我们利用其ListenableFuture的最佳方式是通过将所有使用Future的代码转换为ListenableFuture。</p><p>如果这种转换在某些场景中不可行，**Guava提供了使用JdkFutureAdapters.listenInPoolThread()覆盖的适配器来实现这一点。**虽然这看起来有帮助，<strong>Guava警告我们这些是重型适配器，应尽可能避免使用。</strong></p><h2 id="_6-结论" tabindex="-1"><a class="header-anchor" href="#_6-结论"><span>6. 结论</span></a></h2><p>在本文中，我们已经看到了如何使用Guava的ListenableFuture来丰富我们对futures的使用，以及如何使用Futures API使它更容易与这些futures一起工作。</p><p>我们还看到了在使用这些futures和提供的执行器时可能犯的一些常见错误。</p><p>一如既往，带有我们示例的完整源代码可在GitHub上获得。</p>',83),c=[p];function o(u,l){return a(),s("div",null,c)}const k=n(e,[["render",o],["__file","2024-07-27-Guava s Futures and ListenableFuture.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-27/2024-07-27-Guava%20s%20Futures%20and%20ListenableFuture.html","title":"Guava的Futures和ListenableFuture","lang":"zh-CN","frontmatter":{"date":"2022-04-01T00:00:00.000Z","category":["Java","Guava"],"tag":["ListenableFuture","Futures"],"head":[["meta",{"name":"keywords","content":"Guava Futures, ListenableFuture, Java 异步编程"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-27/2024-07-27-Guava%20s%20Futures%20and%20ListenableFuture.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Guava的Futures和ListenableFuture"}],["meta",{"property":"og:description","content":"Guava的Futures和ListenableFuture Guava为我们提供了ListenableFuture，它是一个比Java默认的Future拥有更丰富的API。让我们看看如何利用这一点。 让我们简单了解一下这些不同的类以及它们之间的关系。 2.1 Future 从Java 5开始，我们可以使用java.util.concurrent.Fu..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-27T19:25:15.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"ListenableFuture"}],["meta",{"property":"article:tag","content":"Futures"}],["meta",{"property":"article:published_time","content":"2022-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-27T19:25:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Guava的Futures和ListenableFuture\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-27T19:25:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Guava的Futures和ListenableFuture Guava为我们提供了ListenableFuture，它是一个比Java默认的Future拥有更丰富的API。让我们看看如何利用这一点。 让我们简单了解一下这些不同的类以及它们之间的关系。 2.1 Future 从Java 5开始，我们可以使用java.util.concurrent.Fu..."},"headers":[{"level":3,"title":"2.1 Future","slug":"_2-1-future","link":"#_2-1-future","children":[]},{"level":3,"title":"2.2 ListenableFuture","slug":"_2-2-listenablefuture","link":"#_2-2-listenablefuture","children":[]},{"level":3,"title":"2.3 Futures","slug":"_2-3-futures","link":"#_2-3-futures","children":[]},{"level":2,"title":"3 简单用法","slug":"_3-简单用法","link":"#_3-简单用法","children":[{"level":3,"title":"3.1 创建ListenableFuture","slug":"_3-1-创建listenablefuture","link":"#_3-1-创建listenablefuture","children":[]},{"level":3,"title":"3.2 添加侦听器/回调","slug":"_3-2-添加侦听器-回调","link":"#_3-2-添加侦听器-回调","children":[]}]},{"level":2,"title":"4 复杂用法","slug":"_4-复杂用法","link":"#_4-复杂用法","children":[{"level":3,"title":"4.1 扇入","slug":"_4-1-扇入","link":"#_4-1-扇入","children":[]},{"level":3,"title":"4.2 使用组合器的扇入","slug":"_4-2-使用组合器的扇入","link":"#_4-2-使用组合器的扇入","children":[]},{"level":3,"title":"4.3 转换","slug":"_4-3-转换","link":"#_4-3-转换","children":[]},{"level":3,"title":"4.4 链式Futures","slug":"_4-4-链式futures","link":"#_4-4-链式futures","children":[]}]},{"level":2,"title":"5. 使用注意事项","slug":"_5-使用注意事项","link":"#_5-使用注意事项","children":[{"level":3,"title":"5.1 工作与侦听执行器","slug":"_5-1-工作与侦听执行器","link":"#_5-1-工作与侦听执行器","children":[]},{"level":3,"title":"5.2 小心使用directExecutor()","slug":"_5-2-小心使用directexecutor","link":"#_5-2-小心使用directexecutor","children":[]},{"level":3,"title":"5.3 嵌套Futures是不好的","slug":"_5-3-嵌套futures是不好的","link":"#_5-3-嵌套futures是不好的","children":[]},{"level":3,"title":"5.4 小心使用JdkFutureAdapters.listenInPoolThread()","slug":"_5-4-小心使用jdkfutureadapters-listeninpoolthread","link":"#_5-4-小心使用jdkfutureadapters-listeninpoolthread","children":[]}]},{"level":2,"title":"6. 结论","slug":"_6-结论","link":"#_6-结论","children":[]}],"git":{"createdTime":1722108315000,"updatedTime":1722108315000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":9.42,"words":2826},"filePathRelative":"posts/baeldung/2024-07-27/2024-07-27-Guava s Futures and ListenableFuture.md","localizedDate":"2022年4月1日","excerpt":"<hr>\\n<h1>Guava的Futures和ListenableFuture</h1>\\n<p>Guava为我们提供了ListenableFuture，它是一个比Java默认的Future拥有更丰富的API。让我们看看如何利用这一点。</p>\\n<p>让我们简单了解一下这些不同的类以及它们之间的关系。</p>\\n<h3>2.1 Future</h3>\\n<p>从Java 5开始，我们可以使用java.util.concurrent.Future来表示异步任务。</p>\\n<p>Future允许我们访问已经完成或将来可能完成的任务的结果，同时支持取消它们。</p>\\n<h3>2.2 ListenableFuture</h3>","autoDesc":true}');export{k as comp,d as data};
