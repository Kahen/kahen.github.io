import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,o as a,a as t}from"./app-BwYTipZw.js";const e={},p=t(`<h1 id="arrays-aslist-与-collections-singletonlist-的比较" tabindex="-1"><a class="header-anchor" href="#arrays-aslist-与-collections-singletonlist-的比较"><span>Arrays.asList() 与 Collections.singletonList() 的比较</span></a></h1><p>列表是在Java中常用的集合类型。</p><p>众所周知，我们可以轻松地在一行代码中初始化列表。例如，当我们想要用只有一个元素初始化列表时，我们可以使用 Arrays.asList() 方法或 Collections.singletonList() 方法。</p><p>在本教程中，我们将讨论这两种方法之间的区别。然后，为了简单起见，我们将使用单元测试断言来验证某些操作是否符合预期。</p><h3 id="arrays-aslist-方法" tabindex="-1"><a class="header-anchor" href="#arrays-aslist-方法"><span>Arrays.asList() 方法</span></a></h3><p>首先，Arrays.asList() 方法返回的是一个固定大小的列表。</p><p>任何结构性更改都会抛出 UnsupportedOperationException，例如，向列表中添加新元素或从列表中删除元素。现在，让我们通过测试来检查：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>\`\`\` arraysAsList <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;ONE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertThatExceptionOfType</span><span class="token punctuation">(</span><span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isThrownBy</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> arraysAsList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;TWO&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们运行测试，它会通过。在上面的代码中，我们使用了 Assertj 的异常断言来验证当我们尝试向列表中添加新元素时是否抛出 UnsupportedOperationException。</p><p>即使我们不能在列表上调用 add() 或 remove() 操作，<strong>我们可以使用 set() 方法更改列表中的元素</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>arraysAsList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;A brand new string&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertThat</span><span class="token punctuation">(</span>arraysAsList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;A brand new string&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这次，我们用一个新的 String 对象设置列表中的元素。如果我们执行测试，它会通过。</p><p>最后，让我们讨论 Arrays.asList() 方法的数组和返回的列表之间的关系。</p><p>顾名思义，这个方法使数组像列表一样工作。让我们理解“使数组像列表一样工作”的含义。</p><p><strong>Arrays.asList() 方法返回的列表对象是由给定数组支持的</strong>。也就是说，该方法不会将数组中的元素复制到新的列表对象中。相反，该方法提供了给定数组的列表视图。因此，<strong>我们对数组所做的任何更改都将在返回的列表中可见。同样，对列表所做的更改也将在数组中可见</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> theArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">&quot;ONE&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;TWO&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">List</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>\`\`\` theList <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>theArray<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 改变列表，数组也变了</span>
theList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;ONE [changed in list]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertThat</span><span class="token punctuation">(</span>theArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;ONE [changed in list]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 改变数组，列表也变了</span>
theArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;TWO [changed in array]&quot;</span><span class="token punctuation">;</span>
<span class="token function">assertThat</span><span class="token punctuation">(</span>theList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;TWO [changed in array]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试通过。因此，对于数组和返回的列表，如果我们在一边做了一些更改，另一边也会相应地改变。</p><h3 id="collections-singletonlist-方法" tabindex="-1"><a class="header-anchor" href="#collections-singletonlist-方法"><span>Collections.singletonList() 方法</span></a></h3><p>首先，由 singletonList() 方法返回的列表只有一个元素。与 Arrays.asList() 方法不同，<strong>singletonList() 返回的是一个不可变的列表</strong>。</p><p>换句话说，不允许对 singletonList() 返回的列表进行结构性和非结构性更改。一个测试可以快速说明这一点：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span>\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>\`\`\` singletonList <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span><span class="token string">&quot;ONE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertThatExceptionOfType</span><span class="token punctuation">(</span><span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isThrownBy</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> singletonList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;TWO&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertThatExceptionOfType</span><span class="token punctuation">(</span><span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isThrownBy</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> singletonList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;A brand new string&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们运行测试，它会通过。因此，无论我们是向列表中添加元素还是更改列表中的元素，都会抛出 UnsupportedOperationException。</p><p>值得一提的是，如果我们查看返回列表的源代码，与其他 List 实现不同，返回列表中的单个元素不是存储在数组或任何其他复杂数据结构中。相反，<strong>列表直接持有元素对象</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonList</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span>\`\` <span class="token keyword">extends</span> <span class="token class-name">AbstractList</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span>\`\` <span class="token keyword">implements</span> <span class="token class-name">RandomAccess</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">E</span> element<span class="token punctuation">;</span>

    <span class="token class-name">SingletonList</span><span class="token punctuation">(</span><span class="token class-name">E</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>element <span class="token operator">=</span> obj<span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，它将占用较少的内存。</p><h3 id="简短总结" tabindex="-1"><a class="header-anchor" href="#简短总结"><span>简短总结</span></a></h3><p>最后，让我们在表格中总结 Arrays.asList() 方法和 Collections.singletonList() 方法的特性，以便获得更好的概览：</p><table><thead><tr><th></th><th>Arrays.asList()</th><th>Collections.singletonList()</th></tr></thead><tbody><tr><td>结构性更改</td><td>不允许</td><td>不允许</td></tr><tr><td>非结构性更改</td><td>允许</td><td>不允许</td></tr><tr><td>数据结构</td><td>由数组支持</td><td>直接持有元素</td></tr></tbody></table><h3 id="结论" tabindex="-1"><a class="header-anchor" href="#结论"><span>结论</span></a></h3><p>在这篇简短的文章中，我们讨论了 Arrays.asList() 方法和 Collections.singletonList() 方法。</p><p>当我们想要用只有一个元素初始化固定大小的列表时，我们可以考虑使用 Collections.singletonList() 方法。然而，如果需要更改返回列表中的元素，我们可以选择 Arrays.asList() 方法。</p><p>如常，示例的完整源代码可在 GitHub 上获得。</p>`,32),o=[p];function i(c,l){return a(),n("div",null,o)}const k=s(e,[["render",i],["__file","2024-07-16-Arrays.asList   vs Collections.singletonList  .html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-16/2024-07-16-Arrays.asList%20%20%20vs%20Collections.singletonList%20%20.html","title":"Arrays.asList() 与 Collections.singletonList() 的比较","lang":"zh-CN","frontmatter":{"date":"2024-07-16T00:00:00.000Z","category":["Java","Collections"],"tag":["Arrays.asList()","Collections.singletonList()"],"head":[["meta",{"name":"keywords","content":"Java, Arrays.asList(), Collections.singletonList(), 集合, 列表, 比较"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-16/2024-07-16-Arrays.asList%20%20%20vs%20Collections.singletonList%20%20.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Arrays.asList() 与 Collections.singletonList() 的比较"}],["meta",{"property":"og:description","content":"Arrays.asList() 与 Collections.singletonList() 的比较 列表是在Java中常用的集合类型。 众所周知，我们可以轻松地在一行代码中初始化列表。例如，当我们想要用只有一个元素初始化列表时，我们可以使用 Arrays.asList() 方法或 Collections.singletonList() 方法。 在本教程..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-16T15:06:20.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Arrays.asList()"}],["meta",{"property":"article:tag","content":"Collections.singletonList()"}],["meta",{"property":"article:published_time","content":"2024-07-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-16T15:06:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Arrays.asList() 与 Collections.singletonList() 的比较\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-16T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-16T15:06:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Arrays.asList() 与 Collections.singletonList() 的比较 列表是在Java中常用的集合类型。 众所周知，我们可以轻松地在一行代码中初始化列表。例如，当我们想要用只有一个元素初始化列表时，我们可以使用 Arrays.asList() 方法或 Collections.singletonList() 方法。 在本教程..."},"headers":[{"level":3,"title":"Arrays.asList() 方法","slug":"arrays-aslist-方法","link":"#arrays-aslist-方法","children":[]},{"level":3,"title":"Collections.singletonList() 方法","slug":"collections-singletonlist-方法","link":"#collections-singletonlist-方法","children":[]},{"level":3,"title":"简短总结","slug":"简短总结","link":"#简短总结","children":[]},{"level":3,"title":"结论","slug":"结论","link":"#结论","children":[]}],"git":{"createdTime":1721142380000,"updatedTime":1721142380000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":3.46,"words":1038},"filePathRelative":"posts/baeldung/2024-07-16/2024-07-16-Arrays.asList   vs Collections.singletonList  .md","localizedDate":"2024年7月16日","excerpt":"\\n<p>列表是在Java中常用的集合类型。</p>\\n<p>众所周知，我们可以轻松地在一行代码中初始化列表。例如，当我们想要用只有一个元素初始化列表时，我们可以使用 Arrays.asList() 方法或 Collections.singletonList() 方法。</p>\\n<p>在本教程中，我们将讨论这两种方法之间的区别。然后，为了简单起见，我们将使用单元测试断言来验证某些操作是否符合预期。</p>\\n<h3>Arrays.asList() 方法</h3>\\n<p>首先，Arrays.asList() 方法返回的是一个固定大小的列表。</p>\\n<p>任何结构性更改都会抛出 UnsupportedOperationException，例如，向列表中添加新元素或从列表中删除元素。现在，让我们通过测试来检查：</p>","autoDesc":true}');export{k as comp,d as data};
