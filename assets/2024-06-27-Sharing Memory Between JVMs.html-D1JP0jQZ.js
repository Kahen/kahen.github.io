import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-Bx_7oN2A.js";const p={},e=t(`<h1 id="在同一机器上运行的多个jvm之间共享内存" tabindex="-1"><a class="header-anchor" href="#在同一机器上运行的多个jvm之间共享内存"><span>在同一机器上运行的多个JVM之间共享内存</span></a></h1><p>在本教程中，我们将展示如何在同一台机器上运行的两个或更多JVM之间共享内存。这种能力实现了非常快速的进程间通信，因为我们可以在没有任何I/O操作的情况下移动数据块。</p><p>任何在现代操作系统中运行的进程都会获得所谓的虚拟内存空间。我们称之为“虚拟”，因为它看起来像是一个大型的、连续的、可私有寻址的内存空间，实际上它是由遍布物理RAM的页面组成的。这里，“页面”只是操作系统术语，指的是一块连续的内存，其大小范围取决于所使用的特定CPU架构。对于x86-64，页面可以小至4KB或大至1GB。</p><p>在给定时间，只有这个虚拟空间的一部分实际上被映射到物理页面。随着时间的推移，当进程开始为其任务消耗更多内存时，操作系统开始分配更多的物理页面，并将它们映射到虚拟空间。当对内存的需求超过物理上可用的内存时，操作系统将开始将当前未使用的页面交换到二级存储中，以为请求腾出空间。</p><p>共享内存块的行为就像常规内存一样，但与常规内存不同，它不是私有的单一进程。当一个进程更改了此块内任何字节的内容时，任何其他可以访问这个共享内存的进程都会立即“看到”这个变化。</p><p>以下是共享内存的常见用途：</p><ul><li>调试器（是否曾想知道调试器如何检查另一个进程中的变量？）</li><li>进程间通信</li><li>进程间只读内容共享（例如：动态库代码）</li><li>各种黑客行为；^)</li></ul><p>正如名，内存映射文件是一个其内容直接映射到进程虚拟内存的连续区域的常规文件。这意味着我们可以在不显式使用I/O操作的情况下读取和/或更改其内容。操作系统将检测到映射区域的任何写入，并安排后台I/O操作以持久化修改的数据。</p><p>由于不能保证这个后台操作何时会发生，操作系统还提供了一个系统调用来刷新任何待处理的更改。这对于像数据库重做日志这样的用例很重要，但对于我们的进程间通信（简称IPC）场景则不需要。</p><p>内存映射文件通常由数据库服务器使用，以实现高吞吐量的I/O操作，但我们也可以使用它们来引导基于共享内存的IPC机制。基本思想是所有需要共享数据的进程都映射同一个文件，瞧，它们现在就有了一个共享的内存区域。</p><h3 id="在java中创建内存映射文件" tabindex="-1"><a class="header-anchor" href="#在java中创建内存映射文件"><span>在Java中创建内存映射文件</span></a></h3><p>在Java中，我们使用_FileChannel_的_map()<em>方法将文件的一个区域映射到内存中，它返回一个_MappedByteBuffer</em>，允许我们访问其内容：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">MappedByteBuffer</span> <span class="token function">createSharedMemory</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">,</span> <span class="token keyword">long</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileChannel</span> fc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">FileChannel</span><span class="token punctuation">)</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">newByteChannel</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token class-name">EnumSet</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>
        <span class="token class-name">StandardOpenOption</span><span class="token punctuation">.</span><span class="token constant">CREATE</span><span class="token punctuation">,</span>
        <span class="token class-name">StandardOpenOption</span><span class="token punctuation">.</span><span class="token constant">SPARSE</span><span class="token punctuation">,</span>
        <span class="token class-name">StandardOpenOption</span><span class="token punctuation">.</span><span class="token constant">WRITE</span><span class="token punctuation">,</span>
        <span class="token class-name">StandardOpenOption</span><span class="token punctuation">.</span><span class="token constant">READ</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">return</span> fc<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">FileChannel<span class="token punctuation">.</span>MapMode</span><span class="token punctuation">.</span><span class="token constant">READ_WRITE</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span><span class="token punctuation">(</span> <span class="token class-name">IOException</span> ioe <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>ioe<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里使用_SPARSE_选项非常相关。只要底层操作系统和文件系统支持它，我们就可以映射一个相当大的内存区域而实际上不消耗磁盘空间。</p><p>现在，让我们创建一个简单的演示应用程序。_Producer_应用程序将分配一个足够大的共享内存来容纳64KB的数据加上一个SHA1哈希（20字节）。接下来，它将开始一个循环，在这个循环中，它将用随机数据填充缓冲区，然后是它的SHA1哈希。我们将连续执行这个操作30秒然后退出：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// ... SHA1摘要初始化省略</span>

<span class="token class-name">MappedByteBuffer</span> shm <span class="token operator">=</span> <span class="token function">createSharedMemory</span><span class="token punctuation">(</span><span class="token string">&quot;some_path.dat&quot;</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token operator">*</span><span class="token number">1024</span> <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Random</span> rnd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> iterations <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> capacity <span class="token operator">=</span> shm<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Starting producer iterations...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start \`<span class="token operator">&lt;</span> <span class="token number">30000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> capacity <span class="token operator">-</span> hashLen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">byte</span> value <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>rnd<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x00ff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        digest<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        shm<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 在最后写入哈希</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hash <span class="token operator">=</span> digest<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    shm<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>capacity <span class="token operator">-</span> hashLen<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
    iterations<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d iterations run\\n&quot;</span><span class="token punctuation">,</span> iterations<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了测试我们确实可以共享内存，我们还将创建一个_Consumer_应用程序，它将读取缓冲区的内容，计算它的哈希，并与_Producer_生成的哈希进行比较。我们将在30秒内重复这个过程。在每次迭代中，我们还将计算缓冲区内容的哈希，并将其与缓冲区末端的一个进行比较：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// ...摘要初始化省略</span>

<span class="token class-name">MappedByteBuffer</span> shm <span class="token operator">=</span> <span class="token function">createSharedMemory</span><span class="token punctuation">(</span><span class="token string">&quot;some_path.dat&quot;</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token operator">*</span><span class="token number">1024</span> <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> iterations <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> capacity <span class="token operator">=</span> shm<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Starting consumer iterations...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">long</span> matchCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> mismatchCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> expectedHash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>hashLen<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start <span class="token operator">&lt;</span> <span class="token number">30000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> capacity <span class="token operator">-</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">byte</span> value <span class="token operator">=</span> shm<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        digest<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hash <span class="token operator">=</span> digest<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    shm<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>capacity <span class="token operator">-</span> hashLen<span class="token punctuation">,</span> expectedHash<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> expectedHash<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        matchCount<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        mismatchCount<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    iterations<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d iterations run. matches=%d, mismatches=%d\\n&quot;</span><span class="token punctuation">,</span> iterations<span class="token punctuation">,</span> matchCount<span class="token punctuation">,</span> mismatchCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了测试我们的内存共享方案，让我们同时启动这两个程序。这是它们在3GHz，四核Intel I7机器上运行的输出：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># Producer output</span>
Starting producer iterations<span class="token punctuation">..</span>.
<span class="token number">11722</span> iterations run

<span class="token comment"># Consumer output</span>
Starting consumer iterations<span class="token punctuation">..</span>.
<span class="token number">18893</span> iterations run. <span class="token assign-left variable">matches</span><span class="token operator">=</span><span class="token number">11714</span>, <span class="token assign-left variable">mismatches</span><span class="token operator">=</span><span class="token number">7179</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>我们可以看到，在许多情况下，消费者检测到预期计算的值是不同的</strong>。欢迎来到并发问题的精彩世界！</p><p><strong>我们看到的问题的根本原因是我们需要同步对共享内存缓冲区的访问</strong>。_Consumer_必须等待_Producer_完成写入哈希后才能开始读取数据。另一方面，_Producer_也必须等待_Consumer_完成消费数据后再写入。</p><p>对于常规的多线程应用程序，解决这个问题并不难。标准库提供了几种同步原语，允许我们控制谁可以在给定时间写入共享内存。</p><p>然而，我们的情况是多JVM场景，所以这些标准方法都不适用。那么，我们该怎么办呢？<strong>简短的回答是，我们将不得不作弊</strong>。我们可以诉诸于操作系统特定的机制，如信号量，但这将妨碍我们应用程序的可移植性。这也意味着使用JNI或JNA，这也使事情复杂化。</p><p><strong>进入_Unsafe_</strong>。尽管它的名字有点可怕，但这个标准库类提供了我们实现简单锁定机制所需的确切功能：_compareAndSwapInt()_方法。</p><p>这个方法实现了一个原子测试和设置原语，它接受四个参数。<strong>尽管文档中没有明确说明，它可以针对不仅是Java对象，还可以是原始内存地址</strong>。对于后者，我们在第一个参数中传递_null_，这使它将_offset_参数视为虚拟内存地址。</p><p>当我们调用这个方法时，它首先会检查目标地址的值，并将其与_expected_值进行比较。如果它们相等，那么它将修改位置的内容为新值，并返回_true_表示成功。如果位置的值与_expected_不同，什么也不发生，方法返回_false_。</p><p><strong>更重要的是，这个原子操作保证即使在多核架构中也能工作，这是同步多个执行线程的关键特性</strong>。</p><p>让我们创建一个_SpinLock_类，利用这个方法实现一个（非常！）简单的锁定机制：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//... 包和导入省略</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpinLock</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Unsafe</span> unsafe<span class="token punctuation">;</span>

    <span class="token comment">// ... unsafe初始化省略</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> addr<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">SpinLock</span><span class="token punctuation">(</span><span class="token keyword">long</span> addr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>addr <span class="token operator">=</span> addr<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token keyword">long</span> maxWait<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> deadline <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> maxWait<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> deadline <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> addr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        unsafe<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个实现缺少关键特性，比如在释放锁之前检查它是否拥有锁，但这对我们的目的来说足够了。</p><p>好的，我们如何获得我们将用于存储锁状态的内存地址呢？这必须是共享内存缓冲区内的地址，以便两个进程都可以使用它，但_MappedByteBuffer_类没有公开实际的内存地址。</p><p>检查_map()<em>返回的对象，我们可以看到它是一个_DirectByteBuffer</em>。**这个类有一个公共方法叫做_address()_，它返回我们想要的确切内容。不幸的是，这个类是包私有的，所以我们不能使用简单的类型转换来访问这个方法。</p><p>要绕过这个限制，我们将再次使用一点技巧，并使用反射来调用这个方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">getBufferAddress</span><span class="token punctuation">(</span><span class="token class-name">MappedByteBuffer</span> shm<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span>\` cls <span class="token operator">=</span> shm<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Method</span> maddr <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">&quot;address&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        maddr<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Long</span> addr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">)</span> maddr<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>shm<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>addr <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;Unable to retrieve buffer&#39;s address&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> addr<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> <span class="token operator">|</span> <span class="token class-name">InvocationTargetException</span> <span class="token operator">|</span> <span class="token class-name">IllegalAccessException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们使用_setAccessible()_使_address()<em>方法可以通过_Method_句柄调用。**然而，请注意，从Java 17开始，除非我们明确使用运行时</em>–add-opens_标志，否则这种技术将不起作用。**</p><h3 id="向-producer-和-consumer-添加同步" tabindex="-1"><a class="header-anchor" href="#向-producer-和-consumer-添加同步"><span>向_Producer_和_Consumer_添加同步</span></a></h3><p>现在我们有了锁定机制，让我们首先应用到_Producer_。为了这个演示的目的，我们假设_Producer_总是在_Consumer_之前启动。我们需要这样做，这样我们就可以初始化缓冲区，清除其内容，包括我们将与_SpinLock_一起使用的区域：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>

    <span class="token comment">// ... 摘要初始化省略</span>
    <span class="token class-name">MappedByteBuffer</span> shm <span class="token operator">=</span> <span class="token function">createSharedMemory</span><span class="token punctuation">(</span><span class="token string">&quot;some_path.dat&quot;</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token operator">*</span><span class="token number">1024</span> <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 清理锁区域</span>
    shm<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">long</span> addr <span class="token operator">=</span> <span class="token function">getBufferAddress</span><span class="token punctuation">(</span>shm<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Starting producer iterations...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> iterations <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">Random</span> rnd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> capacity <span class="token operator">=</span> shm<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">SpinLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpinLock</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start <span class="token operator">&lt;</span> <span class="token number">30000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;Unable to acquire lock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 跳过前4个字节，因为它们被锁使用</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> capacity <span class="token operator">-</span> hashLen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">byte</span> value <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>rnd<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x00ff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                digest<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
                shm<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 在最后写入哈希</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hash <span class="token operator">=</span> digest<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            shm<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>capacity <span class="token operator">-</span> hashLen<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
            iterations<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d iterations run\\n&quot;</span><span class="token punctuation">,</span> iterations<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与未同步版本相比，只有微小的变化：</p><ul><li>获取与_MappedByteBuffer_关联的内存地址</li><li>使用这个地址创建一个_SpinLock_实例。锁使用一个_int_，所以它将占用缓冲区最初的四个字节</li><li>使用_SpinLock_实例来保护填充随机数据及其哈希的代码</li></ul><p>现在，让我们对_Consumer_端进行类似的更改：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>

    <span class="token comment">// ... 摘要初始化省略</span>
    <span class="token class-name">MappedByteBuffer</span> shm <span class="token operator">=</span> <span class="token function">createSharedMemory</span><span class="token punctuation">(</span><span class="token string">&quot;some_path.dat&quot;</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token operator">*</span><span class="token number">1024</span> <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> addr <span class="token operator">=</span> <span class="token function">getBufferAddress</span><span class="token punctuation">(</span>shm<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Starting consumer iterations...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Random</span> rnd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> iterations <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> capacity <span class="token operator">=</span> shm<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">long</span> matchCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> mismatchCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> expectedHash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>hashLen<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name">SpinLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpinLock</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start <span class="token operator">&lt;</span> <span class="token number">30000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;Unable to acquire lock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> capacity <span class="token operator">-</span> hashLen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">byte</span> value <span class="token operator">=</span> shm<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                digest<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hash <span class="token operator">=</span> digest<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            shm<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>capacity <span class="token operator">-</span> hashLen<span class="token punctuation">,</span> expectedHash<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> expectedHash<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                matchCount<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                mismatchCount<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            iterations<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d iterations run. matches=%d, mismatches=%d\\n&quot;</span><span class="token punctuation">,</span> iterations<span class="token punctuation">,</span> matchCount<span class="token punctuation">,</span> mismatchCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了这些更改，我们现在可以运行双方，并与之前的结果进行比较：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># Producer output</span>
Starting producer iterations<span class="token punctuation">..</span>.
<span class="token number">8543</span> iterations run

<span class="token comment"># Consumer output</span>
Starting consumer iterations<span class="token punctuation">..</span>.
<span class="token number">8607</span> iterations run. <span class="token assign-left variable">matches</span><span class="token operator">=</span><span class="token number">8607</span>, <span class="token assign-left variable">mismatches</span><span class="token operator">=</span><span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>正如预期的那样，报告的迭代次数将低于未同步版本</strong>。主要原因是我们大部分时间都在持有锁的代码的关键部分。持有锁的程序阻止了对方做任何事情。</p><p>如果我们比较第一种情况报告的平均迭代次数，它将大约与我们这次得到的迭代次数之和相同。这表明锁机制本身增加的开销是最小的。</p><h3 id="结论" tabindex="-1"><a class="header-anchor" href="#结论"><span>结论</span></a></h3><p>在本教程中，我们探讨了如何在运行在同一台机器上的两个JVM之间共享内存区域。我们可以将这里介绍的技术作为构建高吞吐量、低延迟进程间通信库的基础。</p><p>像往常一样，所有代码都可以在GitHub上找到。</p><p>OK</p>`,51),o=[e];function c(l,i){return a(),s("div",null,o)}const r=n(p,[["render",c],["__file","2024-06-27-Sharing Memory Between JVMs.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-06-27/2024-06-27-Sharing%20Memory%20Between%20JVMs.html","title":"在同一机器上运行的多个JVM之间共享内存","lang":"zh-CN","frontmatter":{"date":"2024-06-27T00:00:00.000Z","category":["Java","内存共享"],"tag":["JVM","内存映射","共享内存"],"head":[["meta",{"name":"keywords","content":"Java, 内存共享, JVM, 内存映射, 进程间通信"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-06-27/2024-06-27-Sharing%20Memory%20Between%20JVMs.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"在同一机器上运行的多个JVM之间共享内存"}],["meta",{"property":"og:description","content":"在同一机器上运行的多个JVM之间共享内存 在本教程中，我们将展示如何在同一台机器上运行的两个或更多JVM之间共享内存。这种能力实现了非常快速的进程间通信，因为我们可以在没有任何I/O操作的情况下移动数据块。 任何在现代操作系统中运行的进程都会获得所谓的虚拟内存空间。我们称之为“虚拟”，因为它看起来像是一个大型的、连续的、可私有寻址的内存空间，实际上它是..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-27T12:50:09.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"JVM"}],["meta",{"property":"article:tag","content":"内存映射"}],["meta",{"property":"article:tag","content":"共享内存"}],["meta",{"property":"article:published_time","content":"2024-06-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-27T12:50:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"在同一机器上运行的多个JVM之间共享内存\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-27T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-27T12:50:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"在同一机器上运行的多个JVM之间共享内存 在本教程中，我们将展示如何在同一台机器上运行的两个或更多JVM之间共享内存。这种能力实现了非常快速的进程间通信，因为我们可以在没有任何I/O操作的情况下移动数据块。 任何在现代操作系统中运行的进程都会获得所谓的虚拟内存空间。我们称之为“虚拟”，因为它看起来像是一个大型的、连续的、可私有寻址的内存空间，实际上它是..."},"headers":[{"level":3,"title":"在Java中创建内存映射文件","slug":"在java中创建内存映射文件","link":"#在java中创建内存映射文件","children":[]},{"level":3,"title":"向_Producer_和_Consumer_添加同步","slug":"向-producer-和-consumer-添加同步","link":"#向-producer-和-consumer-添加同步","children":[]},{"level":3,"title":"结论","slug":"结论","link":"#结论","children":[]}],"git":{"createdTime":1719492609000,"updatedTime":1719492609000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":10.04,"words":3013},"filePathRelative":"posts/baeldung/2024-06-27/2024-06-27-Sharing Memory Between JVMs.md","localizedDate":"2024年6月27日","excerpt":"\\n<p>在本教程中，我们将展示如何在同一台机器上运行的两个或更多JVM之间共享内存。这种能力实现了非常快速的进程间通信，因为我们可以在没有任何I/O操作的情况下移动数据块。</p>\\n<p>任何在现代操作系统中运行的进程都会获得所谓的虚拟内存空间。我们称之为“虚拟”，因为它看起来像是一个大型的、连续的、可私有寻址的内存空间，实际上它是由遍布物理RAM的页面组成的。这里，“页面”只是操作系统术语，指的是一块连续的内存，其大小范围取决于所使用的特定CPU架构。对于x86-64，页面可以小至4KB或大至1GB。</p>\\n<p>在给定时间，只有这个虚拟空间的一部分实际上被映射到物理页面。随着时间的推移，当进程开始为其任务消耗更多内存时，操作系统开始分配更多的物理页面，并将它们映射到虚拟空间。当对内存的需求超过物理上可用的内存时，操作系统将开始将当前未使用的页面交换到二级存储中，以为请求腾出空间。</p>","autoDesc":true}');export{r as comp,d as data};
