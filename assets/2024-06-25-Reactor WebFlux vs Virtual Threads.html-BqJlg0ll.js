import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-DdMTD3lb.js";const p={},c=t(`<h1 id="reactor-webflux-与虚拟线程-baeldung" tabindex="-1"><a class="header-anchor" href="#reactor-webflux-与虚拟线程-baeldung"><span>Reactor WebFlux 与虚拟线程 | Baeldung</span></a></h1><p>在本教程中，我们将比较 Java 19 的虚拟线程与 Reactor 项目的 WebFlux。我们将首先回顾每种方法的基本工作原理，然后分析它们的优势和劣势。</p><p>我们将从探索响应式框架的优势开始，并看看为什么 WebFlux 仍然具有价值。之后，我们将讨论每个请求一个线程的方法，并强调虚拟线程可能是更好选择的场景。</p><h2 id="_2-代码示例" tabindex="-1"><a class="header-anchor" href="#_2-代码示例"><span>2. 代码示例</span></a></h2><p>在本文的代码示例中，我们假设我们正在开发一个电子商务应用程序的后端。我们将专注于负责计算和发布添加到购物车中的商品价格的函数：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">ProductService</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">PRODUCT_ADDED_TO_CART_TOPIC</span> <span class="token operator">=</span> <span class="token string">&quot;product-added-to-cart&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ProductRepository</span> repository<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DiscountService</span> discountService<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">KafkaTemplate</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ProductAddedToCartEvent</span><span class="token punctuation">&gt;</span></span>\` kafkaTemplate<span class="token punctuation">;</span>

    <span class="token comment">// 构造函数</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addProductToCart</span><span class="token punctuation">(</span><span class="token class-name">String</span> productId<span class="token punctuation">,</span> <span class="token class-name">String</span> cartId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Product</span> product <span class="token operator">=</span> repository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>productId<span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;not found!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Price</span> price <span class="token operator">=</span> product<span class="token punctuation">.</span><span class="token function">basePrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>product<span class="token punctuation">.</span><span class="token function">category</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEligibleForDiscount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">BigDecimal</span> discount <span class="token operator">=</span> discountService<span class="token punctuation">.</span><span class="token function">discountForProduct</span><span class="token punctuation">(</span>productId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            price<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>price<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>discount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">var</span> event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProductAddedToCartEvent</span><span class="token punctuation">(</span>productId<span class="token punctuation">,</span> price<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> price<span class="token punctuation">.</span><span class="token function">getCurrency</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cartId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        kafkaTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">PRODUCT_ADDED_TO_CART_TOPIC</span><span class="token punctuation">,</span> cartId<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如我们所看到的，我们首先使用 <em>MongoRepository</em> 从 MongoDB 数据库中检索 <em>Product</em>。检索到后，我们确定 <em>Product</em> 是否符合折扣条件。如果符合，我们使用 <em>DiscountService</em> 执行 HTTP 请求以确定产品是否有可用的折扣。</p><p>最后，我们计算产品的价格。完成后，我们发送一个包含 <em>productId, cartId</em> 和计算出的价格的 Kafka 消息。</p><p><strong>WebFlux 是一个用于构建异步、非阻塞和事件驱动应用程序的框架</strong>。它基于响应式编程原则，利用 <em>Flux</em> 和 <em>Mono</em> 类型来处理异步通信的复杂性。这些类型实现了发布者-订阅者设计模式，解耦了数据的消费者和生产者。</p><h3 id="_3-1-响应式库" tabindex="-1"><a class="header-anchor" href="#_3-1-响应式库"><span>3.1. 响应式库</span></a></h3><p><strong>Spring 生态系统中的许多模块与 WebFlux 集成，用于响应式编程</strong>。让我们在重构代码向响应式范式转变时使用这些模块。</p><p>例如，我们可以将 <em>MongoRepository</em> 切换到 <em>ReactiveMongoRepository</em>。这个变化意味着我们将不得不使用 <em>Mono<code>&lt;Product&gt;</code></em> 而不是 <em>Optional<code>&lt;Product&gt;</code></em>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Mono</span>\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">&gt;</span></span>\`\`\`\` product <span class="token operator">=</span> repository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>productId<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">switchIfEmpty</span><span class="token punctuation">(</span><span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;not found!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>同样，我们可以改变 <em>ProductService</em>，使其异步且非阻塞。例如，我们可以使用 WebClient 执行 HTTP 请求，并相应地返回折扣作为 <em>Mono<code>&lt;BigDecimal&gt;</code></em>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Mono</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BigDecimal</span><span class="token punctuation">&gt;</span></span>\`\` discount <span class="token operator">=</span> discountService<span class="token punctuation">.</span><span class="token function">discountForProduct</span><span class="token punctuation">(</span>productId<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-2-不可变性" tabindex="-1"><a class="header-anchor" href="#_3-2-不可变性"><span>3.2. 不可变性</span></a></h3><p><strong>在函数式和响应式编程范式中，不可变性总是比可变数据更受青睐</strong>。我们最初的方法涉及使用 setter 修改 <em>Price</em> 的值。然而，随着我们转向响应式方法，让我们重构 <em>Price</em> 对象并使其不可变。</p><p>例如，我们可以引入一个专用方法来应用折扣并生成一个新的 <em>Price</em> 实例，而不是修改现有的实例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">record</span> <span class="token class-name">Price</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span> value<span class="token punctuation">,</span> <span class="token class-name">String</span> currency<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">Price</span> <span class="token function">applyDiscount</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span> discount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Price</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>discount<span class="token punctuation">)</span><span class="token punctuation">,</span> currency<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们可以使用 WebFlux 的 <em>map()</em> 方法，根据折扣计算新价格：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Mono</span>\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Price</span><span class="token punctuation">&gt;</span></span>\`\`\`\` price <span class="token operator">=</span> discountService<span class="token punctuation">.</span><span class="token function">discountForProduct</span><span class="token punctuation">(</span>productId<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>discount <span class="token operator">-&gt;</span> price<span class="token punctuation">.</span><span class="token function">applyDiscount</span><span class="token punctuation">(</span>discount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，我们甚至可以在这里使用方法引用，以保持代码紧凑：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Mono</span>\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Price</span><span class="token punctuation">&gt;</span></span>\`\`\`\` price <span class="token operator">=</span> discountService<span class="token punctuation">.</span><span class="token function">discountForProduct</span><span class="token punctuation">(</span>productId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>price<span class="token operator">::</span><span class="token function">applyDiscount</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-3-函数式流水线" tabindex="-1"><a class="header-anchor" href="#_3-3-函数式流水线"><span>3.3. 函数式流水线</span></a></h3><p><strong><em>Mono</em> 和 <em>Flux</em> 遵循 functor 和 monad 模式，通过 <em>map()</em> 和 <em>flatMap()</em> 等方法。这允许我们将用例描述为不可变数据上的转换流水线</strong>。</p><p>让我们尝试确定我们用例所需的转换：</p><ul><li>我们从原始的 <em>productId</em> 开始</li><li>我们将其转换为 <em>Product</em></li><li>我们使用 <em>Product</em> 计算 <em>Price</em></li><li>我们使用 <em>Price</em> 创建一个 <em>event</em></li><li>最后，我们在消息队列上发布 <em>event</em></li></ul><p>现在，让我们重构代码以反映这个函数链：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">addProductToCart</span><span class="token punctuation">(</span><span class="token class-name">String</span> productId<span class="token punctuation">,</span> <span class="token class-name">String</span> cartId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Mono</span>\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">&gt;</span></span>\`\`\`\` productMono <span class="token operator">=</span> repository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>productId<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">switchIfEmpty</span><span class="token punctuation">(</span><span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;not found!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Mono</span>\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Price</span><span class="token punctuation">&gt;</span></span>\`\`\`\` priceMono <span class="token operator">=</span> productMono<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>product <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>product<span class="token punctuation">.</span><span class="token function">category</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEligibleForDiscount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> discountService<span class="token punctuation">.</span><span class="token function">discountForProduct</span><span class="token punctuation">(</span>productId<span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>product<span class="token punctuation">.</span><span class="token function">basePrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">::</span><span class="token function">applyDiscount</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>product<span class="token punctuation">.</span><span class="token function">basePrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Mono</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ProductAddedToCartEvent</span><span class="token punctuation">&gt;</span></span>\` eventMono <span class="token operator">=</span> priceMono<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>
      price <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">ProductAddedToCartEvent</span><span class="token punctuation">(</span>productId<span class="token punctuation">,</span> price<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> price<span class="token punctuation">.</span><span class="token function">currency</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cartId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    eventMono<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>event <span class="token operator">-&gt;</span> kafkaTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">PRODUCT_ADDED_TO_CART_TOPIC</span><span class="token punctuation">,</span> cartId<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，让我们内联局部变量以保持代码紧凑。此外，让我们提取一个计算价格的函数，并在 <em>flatMap()</em> 内部使用它：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">addProductToCart</span><span class="token punctuation">(</span><span class="token class-name">String</span> productId<span class="token punctuation">,</span> <span class="token class-name">String</span> cartId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    repository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>productId<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">switchIfEmpty</span><span class="token punctuation">(</span><span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;not found!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">computePrice</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>price <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">ProductAddedToCartEvent</span><span class="token punctuation">(</span>productId<span class="token punctuation">,</span> price<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> price<span class="token punctuation">.</span><span class="token function">currency</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cartId<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>event <span class="token operator">-&gt;</span> kafkaTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">PRODUCT_ADDED_TO_CART_TOPIC</span><span class="token punctuation">,</span> cartId<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">Mono</span>\`\`\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Price</span><span class="token punctuation">&gt;</span></span>\`\`\`\` <span class="token function">computePrice</span><span class="token punctuation">(</span><span class="token class-name">Product</span> product<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>product<span class="token punctuation">.</span><span class="token function">category</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEligibleForDiscount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> discountService<span class="token punctuation">.</span><span class="token function">discountForProduct</span><span class="token punctuation">(</span>product<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>product<span class="token punctuation">.</span><span class="token function">basePrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">::</span><span class="token function">applyDiscount</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>product<span class="token punctuation">.</span><span class="token function">basePrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-虚拟线程" tabindex="-1"><a class="header-anchor" href="#_4-虚拟线程"><span>4. 虚拟线程</span></a></h2><p><strong>虚拟线程是通过 Project Loom 作为并行处理的替代解决方案引入 Java 的</strong>。它们是轻量级的，由 Java 虚拟机 (JVM) 管理的用户模式线程。因此，它们特别适合 I/O 操作，其中传统线程可能在等待外部资源上花费大量时间。</p><p>与传统的异步或响应式解决方案不同，虚拟线程使我们能够继续使用每个请求一个线程的处理模型。换句话说，我们可以继续顺序编写代码，而不需要混合业务逻辑和响应式 API。</p><h3 id="_4-1-虚拟线程" tabindex="-1"><a class="header-anchor" href="#_4-1-虚拟线程"><span>4.1. 虚拟线程</span></a></h3><p>有几种方法可以利用虚拟线程执行我们的代码。<strong>对于单个方法，如前一个示例中演示的那样，我们可以使用 <em>startVirtualThread()</em>。</strong> 这个静态方法是最近添加到 <em>Thread</em> API 中的，它在一个新的虚拟线程上执行一个 <em>Runnable</em>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addProductToCart</span><span class="token punctuation">(</span><span class="token class-name">String</span> productId<span class="token punctuation">,</span> <span class="token class-name">String</span> cartId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">startVirtualThread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">computePriceAndPublishMessage</span><span class="token punctuation">(</span>productId<span class="token punctuation">,</span> cartId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">computePriceAndPublishMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> productId<span class="token punctuation">,</span> <span class="token class-name">String</span> cartId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>或者，我们可以创建一个依赖于虚拟线程的 <em>ExecutorService</em>，使用新的静态工厂方法 <em>Executors.newVirtualThreadPerTaskExecutor()</em>。</strong> 此外，对于使用 Spring Framework 6 和 Spring Boot 3 的应用程序，我们可以利用新的 <em>Executor</em> 并配置 Spring 以优先使用虚拟线程而不是平台线程。</p><h3 id="_4-2-兼容性" tabindex="-1"><a class="header-anchor" href="#_4-2-兼容性"><span>4.2. 兼容性</span></a></h3><p>虚拟线程通过使用更传统的同步编程模型来简化代码。因此，我们可以以顺序的方式编写代码，类似于阻塞 I/O 操作，而不必担心显式的响应式结构。</p><p><strong>此外，我们可以从常规的单线程代码无缝切换到虚拟线程，几乎不需要或不需要进行修改</strong>。例如，在我们之前的示例中，我们只需要使用静态工厂方法 <em>startVirtualThread()</em> 创建一个虚拟线程，并在其中执行逻辑：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">addProductToCart</span><span class="token punctuation">(</span><span class="token class-name">String</span> productId<span class="token punctuation">,</span> <span class="token class-name">String</span> cartId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">startVirtualThread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">computePriceAndPublishMessage</span><span class="token punctuation">(</span>productId<span class="token punctuation">,</span> cartId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">computePriceAndPublishMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> productId<span class="token punctuation">,</span> <span class="token class-name">String</span> cartId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Product</span> product <span class="token operator">=</span> repository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>productId<span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;not found!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Price</span> price <span class="token operator">=</span> <span class="token function">computePrice</span><span class="token punctuation">(</span>productId<span class="token punctuation">,</span> product<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">var</span> event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProductAddedToCartEvent</span><span class="token punctuation">(</span>productId<span class="token punctuation">,</span> price<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> price<span class="token punctuation">.</span><span class="token function">currency</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cartId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        kafkaTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">PRODUCT_ADDED_TO_CART_TOPIC</span><span class="token punctuation">,</span> cartId<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">Price</span> <span class="token function">computePrice</span><span class="token punctuation">(</span><span class="token class-name">String</span> productId<span class="token punctuation">,</span> <span class="token class-name">Product</span> product<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>product<span class="token punctuation">.</span><span class="token function">category</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEligibleForDiscount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">BigDecimal</span> discount <span class="token operator">=</span> discountService<span class="token punctuation">.</span><span class="token function">discountForProduct</span><span class="token punctuation">(</span>productId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> product<span class="token punctuation">.</span><span class="token function">basePrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">applyDiscount</span><span class="token punctuation">(</span>discount<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> product<span class="token punctuation">.</span><span class="token function">basePrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-可读性" tabindex="-1"><a class="header-anchor" href="#_4-3-可读性"><span>4.3. 可读性</span></a></h3><p><strong>使用每个请求一个线程的处理模型，可以更容易地理解和推理业务逻辑。这可以减少与响应式编程范式相关的认知负担。</strong></p><p>换句话说，虚拟线程允许我们清晰地将技术问题与我们的业务逻辑分开。因此，它消除了在实现我们的业务用例时需要外部 API 的需求。</p><h2 id="_5-结论" tabindex="-1"><a class="header-anchor" href="#_5-结论"><span>5. 结论</span></a></h2><p>在本文中，我们比较了两种不同的并发和异步处理方法。我们首先分析了 Reactor 的 WebFlux 和响应式编程范式。我们发现这种方法偏爱不可变对象和函数式流水线。</p><p>之后，我们讨论了虚拟线程以及它们与允许平滑过渡到非阻塞代码的旧代码库的卓越兼容性。此外，它们还有将业务逻辑与基础设施代码和其他技术问题清晰分离的额外好处。</p><p>像往常一样，本文中使用的所有代码示例都可以在 GitHub 上找到。</p><p>OK</p>`,50),e=[c];function o(u,l){return a(),s("div",null,e)}const r=n(p,[["render",o],["__file","2024-06-25-Reactor WebFlux vs Virtual Threads.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-06-25/2024-06-25-Reactor%20WebFlux%20vs%20Virtual%20Threads.html","title":"Reactor WebFlux 与虚拟线程 | Baeldung","lang":"zh-CN","frontmatter":{"date":"2024-06-26T00:00:00.000Z","category":["Java","WebFlux"],"tag":["Reactor","Virtual Threads"],"head":[["meta",{"name":"keywords","content":"Java, WebFlux, Virtual Threads, 异步编程, 响应式编程"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-06-25/2024-06-25-Reactor%20WebFlux%20vs%20Virtual%20Threads.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"Reactor WebFlux 与虚拟线程 | Baeldung"}],["meta",{"property":"og:description","content":"Reactor WebFlux 与虚拟线程 | Baeldung 在本教程中，我们将比较 Java 19 的虚拟线程与 Reactor 项目的 WebFlux。我们将首先回顾每种方法的基本工作原理，然后分析它们的优势和劣势。 我们将从探索响应式框架的优势开始，并看看为什么 WebFlux 仍然具有价值。之后，我们将讨论每个请求一个线程的方法，并强调虚拟..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-25T20:29:48.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Reactor"}],["meta",{"property":"article:tag","content":"Virtual Threads"}],["meta",{"property":"article:published_time","content":"2024-06-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-25T20:29:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Reactor WebFlux 与虚拟线程 | Baeldung\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-26T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-25T20:29:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"Reactor WebFlux 与虚拟线程 | Baeldung 在本教程中，我们将比较 Java 19 的虚拟线程与 Reactor 项目的 WebFlux。我们将首先回顾每种方法的基本工作原理，然后分析它们的优势和劣势。 我们将从探索响应式框架的优势开始，并看看为什么 WebFlux 仍然具有价值。之后，我们将讨论每个请求一个线程的方法，并强调虚拟..."},"headers":[{"level":2,"title":"2. 代码示例","slug":"_2-代码示例","link":"#_2-代码示例","children":[{"level":3,"title":"3.1. 响应式库","slug":"_3-1-响应式库","link":"#_3-1-响应式库","children":[]},{"level":3,"title":"3.2. 不可变性","slug":"_3-2-不可变性","link":"#_3-2-不可变性","children":[]},{"level":3,"title":"3.3. 函数式流水线","slug":"_3-3-函数式流水线","link":"#_3-3-函数式流水线","children":[]}]},{"level":2,"title":"4. 虚拟线程","slug":"_4-虚拟线程","link":"#_4-虚拟线程","children":[{"level":3,"title":"4.1. 虚拟线程","slug":"_4-1-虚拟线程","link":"#_4-1-虚拟线程","children":[]},{"level":3,"title":"4.2. 兼容性","slug":"_4-2-兼容性","link":"#_4-2-兼容性","children":[]},{"level":3,"title":"4.3. 可读性","slug":"_4-3-可读性","link":"#_4-3-可读性","children":[]}]},{"level":2,"title":"5. 结论","slug":"_5-结论","link":"#_5-结论","children":[]}],"git":{"createdTime":1719347388000,"updatedTime":1719347388000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":6.4,"words":1920},"filePathRelative":"posts/baeldung/2024-06-25/2024-06-25-Reactor WebFlux vs Virtual Threads.md","localizedDate":"2024年6月26日","excerpt":"\\n<p>在本教程中，我们将比较 Java 19 的虚拟线程与 Reactor 项目的 WebFlux。我们将首先回顾每种方法的基本工作原理，然后分析它们的优势和劣势。</p>\\n<p>我们将从探索响应式框架的优势开始，并看看为什么 WebFlux 仍然具有价值。之后，我们将讨论每个请求一个线程的方法，并强调虚拟线程可能是更好选择的场景。</p>\\n<h2>2. 代码示例</h2>\\n<p>在本文的代码示例中，我们假设我们正在开发一个电子商务应用程序的后端。我们将专注于负责计算和发布添加到购物车中的商品价格的函数：</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">ProductService</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">final</span> <span class=\\"token class-name\\">String</span> <span class=\\"token constant\\">PRODUCT_ADDED_TO_CART_TOPIC</span> <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"product-added-to-cart\\"</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">final</span> <span class=\\"token class-name\\">ProductRepository</span> repository<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">final</span> <span class=\\"token class-name\\">DiscountService</span> discountService<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">final</span> <span class=\\"token class-name\\">KafkaTemplate</span>`<span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">ProductAddedToCartEvent</span><span class=\\"token punctuation\\">&gt;</span></span>` kafkaTemplate<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// 构造函数</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">addProductToCart</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> productId<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">String</span> cartId<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">Product</span> product <span class=\\"token operator\\">=</span> repository<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">findById</span><span class=\\"token punctuation\\">(</span>productId<span class=\\"token punctuation\\">)</span>\\n          <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">orElseThrow</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-&gt;</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">IllegalArgumentException</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"not found!\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token class-name\\">Price</span> price <span class=\\"token operator\\">=</span> product<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">basePrice</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>product<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">category</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">isEligibleForDiscount</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token class-name\\">BigDecimal</span> discount <span class=\\"token operator\\">=</span> discountService<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">discountForProduct</span><span class=\\"token punctuation\\">(</span>productId<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            price<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setValue</span><span class=\\"token punctuation\\">(</span>price<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getValue</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">subtract</span><span class=\\"token punctuation\\">(</span>discount<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token keyword\\">var</span> event <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ProductAddedToCartEvent</span><span class=\\"token punctuation\\">(</span>productId<span class=\\"token punctuation\\">,</span> price<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getValue</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> price<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getCurrency</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> cartId<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        kafkaTemplate<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">send</span><span class=\\"token punctuation\\">(</span><span class=\\"token constant\\">PRODUCT_ADDED_TO_CART_TOPIC</span><span class=\\"token punctuation\\">,</span> cartId<span class=\\"token punctuation\\">,</span> event<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{r as comp,d as data};
