import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-DNwYcgl6.js";const e={},p=t('<hr><h1 id="在feign客户端中提供oauth2令牌" tabindex="-1"><a class="header-anchor" href="#在feign客户端中提供oauth2令牌"><span>在Feign客户端中提供OAuth2令牌</span></a></h1><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1. 概述</span></a></h2><p>OpenFeign 是一个声明式的 REST 客户端，我们可以在 Spring Boot 应用程序中使用它。假设我们有一个使用 OAuth2 保护的 REST API，我们希望使用 OpenFeign 调用它。在这种情况下，我们需要为 OpenFeign 提供一个访问令牌。</p><p>在本教程中，我们将描述<strong>如何为 OpenFeign 客户端添加 OAuth2 支持</strong>。</p><h2 id="_2-服务间认证" tabindex="-1"><a class="header-anchor" href="#_2-服务间认证"><span>2. 服务间认证</span></a></h2><p>服务间认证是 API 安全性的热门话题。我们可以使用 mTLS 或 JWT 为 REST API 提供认证机制。然而，<strong>OAuth2 协议是保护 API 的事实上的解决方案</strong>。假设我们希望使用另一个服务（客户端角色）调用一个安全服务（服务器角色）。在这种情况下，我们使用客户端凭据授权类型。我们通常使用<strong>客户端凭据在没有最终用户的两个 API 或系统之间进行认证</strong>。下图显示了这种授权类型中的主要参与者：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2022/02/openfeign-client-credential1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>在客户端凭据中，客户端服务从授权服务器使用令牌端点获取访问令牌。然后它使用访问令牌访问由资源服务器保护的资源。资源服务器验证访问令牌，如果有效，则提供请求。</p><p>让我们为颁发访问令牌设置一个授权服务器。为了现在保持简单，我们将在 Spring Boot 应用程序中嵌入 Keycloak。假设我们使用在 GitHub 上可用的授权服务器项目。首先，我们在嵌入的 Keycloak 服务器的 <em>master</em> 领域中定义 <em>payment-app</em> 客户端：</p><figure><img src="https://www.baeldung.com/wp-content/uploads/2022/02/openfeign-payment_client1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>我们将 <em>访问类型</em> 设置为 <em>凭据</em> 并启用 <em>启用服务帐户</em> 选项。然后，我们将领域详细信息导出为 <em>feign-realm.json</em> 并在我们的 <em>application-feign.yml</em> 中设置领域文件：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">keycloak</span><span class="token punctuation">:</span>\n  <span class="token key atrule">server</span><span class="token punctuation">:</span>\n    <span class="token key atrule">contextPath</span><span class="token punctuation">:</span> /auth\n    <span class="token key atrule">adminUser</span><span class="token punctuation">:</span>\n      <span class="token key atrule">username</span><span class="token punctuation">:</span> bael<span class="token punctuation">-</span>admin\n      <span class="token key atrule">password</span><span class="token punctuation">:</span> pass\n    <span class="token key atrule">realmImportFile</span><span class="token punctuation">:</span> feign<span class="token punctuation">-</span>realm.json\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，授权服务器已经准备好。最后，我们可以使用 <em>–spring.profiles.active=feign</em> 选项运行应用程序。由于我们本教程的重点是 OpenFeign OAuth2 支持，我们不需要深入了解它。</p><h3 id="_2-2-资源服务器" tabindex="-1"><a class="header-anchor" href="#_2-2-资源服务器"><span>2.2. 资源服务器</span></a></h3><p><strong>现在我们已经配置了授权服务器，让我们设置资源服务器。</strong> 为此，我们将使用在 GitHub 上可用的资源服务器项目。首先，我们添加 <em>Payment</em> 类作为资源：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Payment</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">double</span> amount<span class="token punctuation">;</span>\n\n   <span class="token comment">// 标准 getter 和 setter</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们在 <em>PaymentController</em> 类中声明一个 API：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentController</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/payments&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">List</span>``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">&gt;</span></span>`````` <span class="token function">getPayments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">List</span>``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">&gt;</span></span>`````` payments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i `<span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token class-name">Payment</span> payment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Payment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            payment<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            payment<span class="token punctuation">.</span><span class="token function">setAmount</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            payments<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>payment<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> payments<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>getPayments()</em> API 返回一个支付列表。此外，我们在我们的 <em>application-feign.yml</em> 文件中配置资源服务器：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>\n  <span class="token key atrule">security</span><span class="token punctuation">:</span>\n    <span class="token key atrule">oauth2</span><span class="token punctuation">:</span>\n      <span class="token key atrule">resourceserver</span><span class="token punctuation">:</span>\n        <span class="token key atrule">jwt</span><span class="token punctuation">:</span>\n          <span class="token key atrule">issuer-uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>8083/auth/realms/master\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，<em>getPayments()</em> API 使用 OAuth2 授权服务器进行保护，我们必须提供一个有效的访问令牌来调用这个 API：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">--location</span> <span class="token parameter variable">--request</span> POST <span class="token string">&#39;http://localhost:8083/auth/realms/master/protocol/openid-connect/token&#39;</span> <span class="token punctuation">\\</span>\n  <span class="token parameter variable">--header</span> <span class="token string">&#39;Content-Type: application/x-www-form-urlencoded&#39;</span> <span class="token punctuation">\\</span>\n  --data-urlencode <span class="token string">&#39;client_id=payment-app&#39;</span> <span class="token punctuation">\\</span>\n  --data-urlencode <span class="token string">&#39;client_secret=863e9de4-33d4-4471-b35e-f8d2434385bb&#39;</span> <span class="token punctuation">\\</span>\n  --data-urlencode <span class="token string">&#39;grant_type=client_credentials&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在获取访问令牌后，我们将其设置在请求的 <em>Authorization</em> 头中：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">--location</span> <span class="token parameter variable">--request</span> GET <span class="token string">&#39;http://localhost:8081/resource-server-jwt/payments&#39;</span> <span class="token punctuation">\\</span>\n  <span class="token parameter variable">--header</span> <span class="token string">&#39;Authorization: Bearer Access_Token&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们希望使用 OpenFeign 而不是 cURL 或 Postman 调用安全 API。</p><h2 id="_3-openfeign-客户端" tabindex="-1"><a class="header-anchor" href="#_3-openfeign-客户端"><span>3. OpenFeign 客户端</span></a></h2><h3 id="_3-1-依赖" tabindex="-1"><a class="header-anchor" href="#_3-1-依赖"><span>3.1. 依赖</span></a></h3><p>为了使用 Spring Cloud OpenFeign 调用安全 API，我们需要将 <em>spring-cloud-starter-openfeign</em> 添加到我们的 <em>pom.xml</em> 文件中：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>````org.springframework.cloud````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>````spring-cloud-starter-openfeign````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>````3.1.0````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>````\n````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，我们需要将 <em>spring-cloud-dependencies</em> 添加到 <em>pom.xml</em>：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>````org.springframework.cloud````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>````spring-cloud-dependencies````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>````2021.0.0````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>````\n    `<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>`pom`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>`\n````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-配置" tabindex="-1"><a class="header-anchor" href="#_3-2-配置"><span>3.2. 配置</span></a></h3><p>首先，我们需要在我们的主类中添加 <em>@EnableFeignClients</em>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>\n<span class="token annotation punctuation">@EnableFeignClients</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleApplication</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ExampleApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们定义 <em>PaymentClient</em> 接口以调用 <em>getPayments()</em> API。同时，我们需要在 <em>PaymentClient</em> 接口上添加 <em>@FeignClient</em>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>\n  name <span class="token operator">=</span> <span class="token string">&quot;payment-client&quot;</span><span class="token punctuation">,</span>\n  url <span class="token operator">=</span> <span class="token string">&quot;http://localhost:8081/resource-server-jwt&quot;</span><span class="token punctuation">,</span>\n  configuration <span class="token operator">=</span> <span class="token class-name">OAuthFeignConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PaymentClient</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/payments&quot;</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">)</span>\n    <span class="token class-name">List</span>``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">&gt;</span></span>`````` <span class="token function">getPayments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们根据资源服务器的地址设置 <em>url</em>。在这种情况下，<em>@FeignClient</em> 的主要参数是支持 OAuth2 的 <em>configuration</em> 属性。之后，我们定义一个 <em>PaymentController</em> 类并将 <em>PaymentClient</em> 注入其中：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentController</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">PaymentClient</span> paymentClient<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">PaymentController</span><span class="token punctuation">(</span><span class="token class-name">PaymentClient</span> paymentClient<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>paymentClient <span class="token operator">=</span> paymentClient<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/payments&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">List</span>``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">&gt;</span></span>`````` <span class="token function">getPayments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">List</span>``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">&gt;</span></span>`````` payments <span class="token operator">=</span> paymentClient<span class="token punctuation">.</span><span class="token function">getPayments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> payments<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-oauth2-支持" tabindex="-1"><a class="header-anchor" href="#_4-oauth2-支持"><span>4. OAuth2 支持</span></a></h2><h3 id="_4-1-依赖" tabindex="-1"><a class="header-anchor" href="#_4-1-依赖"><span>4.1. 依赖</span></a></h3><p>为了将 OAuth2 支持添加到 Spring Cloud OpenFeign，我们需要将 <em>spring-security-oauth2-client</em> 和 <em>spring-boot-starter-security</em> 添加到我们的 <em>pom.xml</em> 文件中：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>````org.springframework.boot````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>````spring-boot-starter-security````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>````2.6.1````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>````\n````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>```\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>````org.springframework.security````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>````spring-security-oauth2-client````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>````\n    ````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>````5.6.0````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>````\n````<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>````\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-配置" tabindex="-1"><a class="header-anchor" href="#_4-2-配置"><span>4.2. 配置</span></a></h3><p>现在，我们想要创建一个配置。<strong>想法是获取并添加一个访问令牌到 OpenFeign 请求中。</strong> <strong>拦截器可以为每个 HTTP 请求/响应执行此任务</strong>。添加拦截器是 Feign 提供的一个有用功能。<strong>我们将使用一个 <em>RequestInterceptor</em>，它通过添加授权承载头将 OAuth2 访问令牌注入到 OpenFeign 客户端的请求中</strong>。让我们定义 <em>OAuthFeignConfig</em> 配置类并定义 <em>requestInterceptor()</em> bean：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OAuthFeignConfig</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">CLIENT_REGISTRATION_ID</span> <span class="token operator">=</span> <span class="token string">&quot;keycloak&quot;</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">OAuth2AuthorizedClientService</span> oAuth2AuthorizedClientService<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ClientRegistrationRepository</span> clientRegistrationRepository<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">OAuthFeignConfig</span><span class="token punctuation">(</span><span class="token class-name">OAuth2AuthorizedClientService</span> oAuth2AuthorizedClientService<span class="token punctuation">,</span>\n      <span class="token class-name">ClientRegistrationRepository</span> clientRegistrationRepository<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>oAuth2AuthorizedClientService <span class="token operator">=</span> oAuth2AuthorizedClientService<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>clientRegistrationRepository <span class="token operator">=</span> clientRegistrationRepository<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Bean</span>\n    <span class="token keyword">public</span> <span class="token class-name">RequestInterceptor</span> <span class="token function">requestInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">ClientRegistration</span> clientRegistration <span class="token operator">=</span> clientRegistrationRepository<span class="token punctuation">.</span><span class="token function">findByRegistrationId</span><span class="token punctuation">(</span><span class="token constant">CLIENT_REGISTRATION_ID</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">OAuthClientCredentialsFeignManager</span> clientCredentialsFeignManager <span class="token operator">=</span>\n          <span class="token keyword">new</span> <span class="token class-name">OAuthClientCredentialsFeignManager</span><span class="token punctuation">(</span><span class="token function">authorizedClientManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> clientRegistration<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> requestTemplate <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n            requestTemplate<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&quot;Authorization&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Bearer &quot;</span> <span class="token operator">+</span> clientCredentialsFeignManager<span class="token punctuation">.</span><span class="token function">getAccessToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n```在 <span class="token function">_requestInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>_ bean 中，我们使用 _ClientRegistration_ 和 _OAuthClientCredentialsFeignManager_ 类来注册 oauth2 客户端并从授权服务器获取访问令牌。为此，我们需要在我们的 _application<span class="token punctuation">.</span>properties_ 文件中定义 _oauth2_ 客户端属性：\n\n```properties\nspring<span class="token punctuation">.</span>security<span class="token punctuation">.</span>oauth2<span class="token punctuation">.</span>client<span class="token punctuation">.</span>registration<span class="token punctuation">.</span>keycloak<span class="token punctuation">.</span>authorization<span class="token operator">-</span>grant<span class="token operator">-</span>type<span class="token operator">=</span>client_credentials\nspring<span class="token punctuation">.</span>security<span class="token punctuation">.</span>oauth2<span class="token punctuation">.</span>client<span class="token punctuation">.</span>registration<span class="token punctuation">.</span>keycloak<span class="token punctuation">.</span>client<span class="token operator">-</span>id<span class="token operator">=</span>payment<span class="token operator">-</span>app\nspring<span class="token punctuation">.</span>security<span class="token punctuation">.</span>oauth2<span class="token punctuation">.</span>client<span class="token punctuation">.</span>registration<span class="token punctuation">.</span>keycloak<span class="token punctuation">.</span>client<span class="token operator">-</span>secret<span class="token operator">=</span><span class="token number">863e9d</span>e4<span class="token operator">-</span><span class="token number">33d</span><span class="token number">4</span><span class="token operator">-</span><span class="token number">4471</span><span class="token operator">-</span>b35e<span class="token operator">-</span>f8d2434385bb\nspring<span class="token punctuation">.</span>security<span class="token punctuation">.</span>oauth2<span class="token punctuation">.</span>client<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>keycloak<span class="token punctuation">.</span>token<span class="token operator">-</span>uri<span class="token operator">=</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">8083</span><span class="token operator">/</span>auth<span class="token operator">/</span>realms<span class="token operator">/</span>master<span class="token operator">/</span>protocol<span class="token operator">/</span>openid<span class="token operator">-</span>connect<span class="token operator">/</span>token\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们创建 <em>OAuthClientCredentialsFeignManager</em> 类并定义 <em>getAccessToken()</em> 方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getAccessToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        <span class="token class-name">OAuth2AuthorizeRequest</span> oAuth2AuthorizeRequest <span class="token operator">=</span> <span class="token class-name">OAuth2AuthorizeRequest</span>\n          <span class="token punctuation">.</span><span class="token function">withClientRegistrationId</span><span class="token punctuation">(</span>clientRegistration<span class="token punctuation">.</span><span class="token function">getRegistrationId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">principal</span><span class="token punctuation">(</span>principal<span class="token punctuation">)</span>\n          <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">OAuth2AuthorizedClient</span> client <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token function">authorize</span><span class="token punctuation">(</span>oAuth2AuthorizeRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNull</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;client credentials flow on &quot;</span> <span class="token operator">+</span> clientRegistration<span class="token punctuation">.</span><span class="token function">getRegistrationId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; failed, client is null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">getAccessToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTokenValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> exp<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;client credentials error &quot;</span> <span class="token operator">+</span> exp<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用 <em>OAuth2AuthorizeRequest</em> 和 <em>OAuth2AuthorizedClient</em> 类从授权服务器获取访问令牌。<strong>现在对于每个请求，OpenFeign 拦截器管理 oauth2 客户端并将访问令牌添加到请求中。</strong></p><h2 id="_5-测试" tabindex="-1"><a class="header-anchor" href="#_5-测试"><span>5. 测试</span></a></h2><p>要测试 OpenFeign 客户端，让我们创建 <em>PaymentClientUnitTest</em> 类：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@SpringBootTest</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentClientUnitTest</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Autowired</span>\n    <span class="token keyword">private</span> <span class="token class-name">PaymentClient</span> paymentClient<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Test</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whenGetPayment_thenListPayments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">List</span>``````<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Payment</span><span class="token punctuation">&gt;</span></span>`````` payments <span class="token operator">=</span> paymentClient<span class="token punctuation">.</span><span class="token function">getPayments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">assertFalse</span><span class="token punctuation">(</span>payments<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个测试中，我们调用 <em>getPayments()</em> API。底层的 <em>PaymentClient</em> 连接到 OAuth2 客户端并使用拦截器获取访问令牌。</p><h2 id="_6-结论" tabindex="-1"><a class="header-anchor" href="#_6-结论"><span>6. 结论</span></a></h2><p>在本文中，我们设置了调用安全 API 所需的环境。然后，我们通过一个实际的例子配置了 OpenFeign 来调用安全 API。为此，我们添加并配置了拦截器到 OpenFeign。拦截器管理 OAuth2 客户端并将访问令牌添加到请求中。</p><p>如常，本教程的完整源代码可在 GitHub 上获取。此外，资源和授权服务器的源代码也可在 GitHub 上获取。</p><p><a href="kimi://action?name=cheer-on-kimi">给Kimi加油</a></p><p>OK</p>',58),o=[p];function c(i,l){return a(),s("div",null,o)}const k=n(e,[["render",c],["__file","2024-07-21-Provide an OAuth2 Token to a Feign Client.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-21/2024-07-21-Provide%20an%20OAuth2%20Token%20to%20a%20Feign%20Client.html","title":"在Feign客户端中提供OAuth2令牌","lang":"zh-CN","frontmatter":{"date":"2022-02-01T00:00:00.000Z","category":["Spring Cloud","OAuth2"],"tag":["Spring Boot","Feign Client","OAuth2"],"head":[["meta",{"name":"keywords","content":"Spring Cloud, OAuth2, Spring Boot, Feign Client"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-21/2024-07-21-Provide%20an%20OAuth2%20Token%20to%20a%20Feign%20Client.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"在Feign客户端中提供OAuth2令牌"}],["meta",{"property":"og:description","content":"在Feign客户端中提供OAuth2令牌 1. 概述 OpenFeign 是一个声明式的 REST 客户端，我们可以在 Spring Boot 应用程序中使用它。假设我们有一个使用 OAuth2 保护的 REST API，我们希望使用 OpenFeign 调用它。在这种情况下，我们需要为 OpenFeign 提供一个访问令牌。 在本教程中，我们将描述如..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.baeldung.com/wp-content/uploads/2022/02/openfeign-client-credential1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-21T19:40:44.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Spring Boot"}],["meta",{"property":"article:tag","content":"Feign Client"}],["meta",{"property":"article:tag","content":"OAuth2"}],["meta",{"property":"article:published_time","content":"2022-02-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-21T19:40:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"在Feign客户端中提供OAuth2令牌\\",\\"image\\":[\\"https://www.baeldung.com/wp-content/uploads/2022/02/openfeign-client-credential1.png\\",\\"https://www.baeldung.com/wp-content/uploads/2022/02/openfeign-payment_client1.png\\"],\\"datePublished\\":\\"2022-02-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-21T19:40:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"在Feign客户端中提供OAuth2令牌 1. 概述 OpenFeign 是一个声明式的 REST 客户端，我们可以在 Spring Boot 应用程序中使用它。假设我们有一个使用 OAuth2 保护的 REST API，我们希望使用 OpenFeign 调用它。在这种情况下，我们需要为 OpenFeign 提供一个访问令牌。 在本教程中，我们将描述如..."},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. 服务间认证","slug":"_2-服务间认证","link":"#_2-服务间认证","children":[{"level":3,"title":"2.2. 资源服务器","slug":"_2-2-资源服务器","link":"#_2-2-资源服务器","children":[]}]},{"level":2,"title":"3. OpenFeign 客户端","slug":"_3-openfeign-客户端","link":"#_3-openfeign-客户端","children":[{"level":3,"title":"3.1. 依赖","slug":"_3-1-依赖","link":"#_3-1-依赖","children":[]},{"level":3,"title":"3.2. 配置","slug":"_3-2-配置","link":"#_3-2-配置","children":[]}]},{"level":2,"title":"4. OAuth2 支持","slug":"_4-oauth2-支持","link":"#_4-oauth2-支持","children":[{"level":3,"title":"4.1. 依赖","slug":"_4-1-依赖","link":"#_4-1-依赖","children":[]},{"level":3,"title":"4.2. 配置","slug":"_4-2-配置","link":"#_4-2-配置","children":[]}]},{"level":2,"title":"5. 测试","slug":"_5-测试","link":"#_5-测试","children":[]},{"level":2,"title":"6. 结论","slug":"_6-结论","link":"#_6-结论","children":[]}],"git":{"createdTime":1721590844000,"updatedTime":1721590844000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":5.87,"words":1762},"filePathRelative":"posts/baeldung/2024-07-21/2024-07-21-Provide an OAuth2 Token to a Feign Client.md","localizedDate":"2022年2月1日","excerpt":"<hr>\\n<h1>在Feign客户端中提供OAuth2令牌</h1>\\n<h2>1. 概述</h2>\\n<p>OpenFeign 是一个声明式的 REST 客户端，我们可以在 Spring Boot 应用程序中使用它。假设我们有一个使用 OAuth2 保护的 REST API，我们希望使用 OpenFeign 调用它。在这种情况下，我们需要为 OpenFeign 提供一个访问令牌。</p>\\n<p>在本教程中，我们将描述<strong>如何为 OpenFeign 客户端添加 OAuth2 支持</strong>。</p>\\n<h2>2. 服务间认证</h2>\\n<p>服务间认证是 API 安全性的热门话题。我们可以使用 mTLS 或 JWT 为 REST API 提供认证机制。然而，<strong>OAuth2 协议是保护 API 的事实上的解决方案</strong>。假设我们希望使用另一个服务（客户端角色）调用一个安全服务（服务器角色）。在这种情况下，我们使用客户端凭据授权类型。我们通常使用<strong>客户端凭据在没有最终用户的两个 API 或系统之间进行认证</strong>。下图显示了这种授权类型中的主要参与者：</p>","autoDesc":true}');export{k as comp,d as data};
