import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-D9qUUkNr.js";const p={},e=t('<h1 id="如何在-kotlin-中从列表中移除空值和-null-值-baeldung-关于-kotlin" tabindex="-1"><a class="header-anchor" href="#如何在-kotlin-中从列表中移除空值和-null-值-baeldung-关于-kotlin"><span>如何在 Kotlin 中从列表中移除空值和 null 值 | Baeldung 关于 Kotlin</span></a></h1><h2 id="_1-引言" tabindex="-1"><a class="header-anchor" href="#_1-引言"><span>1. 引言</span></a></h2><p>在 Kotlin 中使用列表时，经常需要移除空值和 null 值。null 值可能会在我们的代码中引起错误，而空值可能会给我们的列表增加不必要的冗余。</p><p>在本教程中，我们将探索在 Kotlin 中从列表中移除 null 和空值的不同方法。</p><h2 id="_2-使用简单的列表迭代" tabindex="-1"><a class="header-anchor" href="#_2-使用简单的列表迭代"><span>2. 使用简单的列表迭代</span></a></h2><p>我们将使用的第一个方法是程序化方法。它涉及遍历列表，并在此过程中移除所有 null 和空元素：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">removeValuesViaIteration</span><span class="token punctuation">(</span>listWithNullsAndEmpty<span class="token operator">:</span> MutableList````````````<span class="token operator">&lt;</span>String<span class="token operator">?</span><span class="token operator">&gt;</span>````````````<span class="token punctuation">)</span><span class="token operator">:</span> List``````````````<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span>`````````````` <span class="token punctuation">{</span>\n    <span class="token keyword">val</span> iterator <span class="token operator">=</span> listWithNullsAndEmpty<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">val</span> element <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>element <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> element<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            iterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> listWithNullsAndEmpty <span class="token keyword">as</span> List``````````````<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span>``````````````\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述方法接受一个可能包含 null 和空值的 <code>MutableList</code>。<strong>一旦我们将这个列表传递给我们的 <code>removeValuesViaIteration()</code> 方法，我们就为列表创建一个 <code>Iterator</code> 来遍历列表中的每个元素</strong>。</p><p>在每次迭代中，我们检查当前元素是否为 null 或空。如果是，我们使用迭代器的 <code>remove()</code> 函数从列表中移除此元素。最后，我们在完全遍历列表后返回相同的列表。注意，我们可以进行类型转换，因为 null 已经被移除。</p><p>让我们编写一个测试以确保我们的方法正常工作：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Test</span>\n<span class="token keyword">fun</span> <span class="token function">`通过列表迭代从列表中移除 null 和空值`</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">val</span> listWithNullsAndEmpty<span class="token operator">:</span> MutableList````````````<span class="token operator">&lt;</span>String<span class="token operator">?</span><span class="token operator">&gt;</span>```````````` <span class="token operator">=</span> <span class="token function">mutableListOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;A&quot;</span></span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;C&quot;</span></span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;E&quot;</span></span><span class="token punctuation">)</span>\n    <span class="token keyword">val</span> listWithoutNullsAndEmpty <span class="token operator">=</span> <span class="token function">removeValuesViaIteration</span><span class="token punctuation">(</span>listWithNullsAndEmpty<span class="token punctuation">)</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;A&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;C&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;E&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> listWithoutNullsAndEmpty<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-使用-filternotnull-和-filternot-方法" tabindex="-1"><a class="header-anchor" href="#_3-使用-filternotnull-和-filternot-方法"><span>3. 使用 <code>filterNotNull()</code> 和 <code>filterNot()</code> 方法</span></a></h2><p>从列表中移除空值和 null 值的另一种方法是利用 <code>filterNotNull()</code> 和 <code>filterNot()</code> 方法。<strong><code>filterNotNull()</code> 方法返回一个新列表，其中只包含原始列表中的非 null 元素</strong>：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> listWithNulls<span class="token operator">:</span> List````````````<span class="token operator">&lt;</span>String<span class="token operator">?</span><span class="token operator">&gt;</span>```````````` <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;A&quot;</span></span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;C&quot;</span></span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;E&quot;</span></span><span class="token punctuation">)</span>\n<span class="token keyword">val</span> listWithoutNulls<span class="token operator">:</span> List``````````````<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span>`````````````` <span class="token operator">=</span> listWithNulls<span class="token punctuation">.</span><span class="token function">filterNotNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码片段展示了我们如何使用 <code>filterNotNull()</code> 方法在一行代码中从列表中移除所有 null 值。因此，通过调用这个方法，我们最终得到一个新列表，包含值 <code>[&quot;A&quot;, &quot;&quot;, &quot;C&quot;, &quot;E&quot;]</code>。</p><p><strong>同样，<code>filterNot()</code> 方法对于从列表中移除所有空值非常有用</strong>。<code>filterNot()</code> 方法接受一个 lambda 谓词函数作为参数，并返回一个新列表，其中只包含谓词返回 <code>false</code> 的元素。</p><p>让我们也演示一下 <code>filterNot()</code> 方法的使用：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> listWithEmpty<span class="token operator">:</span> List``````````````<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span>`````````````` <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;A&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;C&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;E&quot;</span></span><span class="token punctuation">)</span>\n<span class="token keyword">val</span> listWithoutEmpty<span class="token operator">:</span> List``````````````<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span>`````````````` <span class="token operator">=</span> listWithEmpty<span class="token punctuation">.</span><span class="token function">filterNot</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>将所有这些结合起来，我们可以通过连续调用这两个方法来实现我们的目标：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Test</span>\n<span class="token keyword">fun</span> <span class="token function">`使用 filterNotNull 和 filterNot 方法从列表中移除 null 和空值`</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">val</span> listWithNullsAndEmpty<span class="token operator">:</span> List````````````<span class="token operator">&lt;</span>String<span class="token operator">?</span><span class="token operator">&gt;</span>```````````` <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;A&quot;</span></span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;C&quot;</span></span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;E&quot;</span></span><span class="token punctuation">)</span>\n    <span class="token keyword">val</span> listWithoutNulls<span class="token operator">:</span> List``````````````<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span>`````````````` <span class="token operator">=</span> listWithNullsAndEmpty<span class="token punctuation">.</span><span class="token function">filterNotNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">val</span> listWithoutNullsAndEmpty<span class="token operator">:</span> List``````````````<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span>`````````````` <span class="token operator">=</span> listWithoutNulls<span class="token punctuation">.</span><span class="token function">filterNot</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;A&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;C&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;E&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> listWithoutNulls<span class="token punctuation">)</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;A&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;C&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;E&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> listWithoutNullsAndEmpty<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们创建了一个包含 null 和空值的列表。然后我们调用这个列表的 <code>filterNotNull()</code> 方法以获得只包含非 null 值的列表，如第一个断言所示。随后，我们在调用 <code>filterNotNull()</code> 方法获得的列表上调用 <code>filterNot()</code> 方法，从而获得我们最终的列表，不包含 null 和空值。</p><h2 id="_4-使用-removeif-方法" tabindex="-1"><a class="header-anchor" href="#_4-使用-removeif-方法"><span>4. 使用 <code>removeIf()</code> 方法</span></a></h2><p>我们探索的前一种方法最终创建了一个新的列表。然而，<strong>如果我们有一个 <code>MutableList</code>，我们可以使用 <code>removeIf()</code> 方法来就地移除所有 null 和空值</strong>。同样，这个方法接受一个谓词作为参数，并移除所有谓词返回 <code>true</code> 的元素：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> listWithNullsAndEmpty<span class="token operator">:</span> MutableList````````````<span class="token operator">&lt;</span>String<span class="token operator">?</span><span class="token operator">&gt;</span>```````````` <span class="token operator">=</span> <span class="token function">mutableListOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;A&quot;</span></span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;C&quot;</span></span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;E&quot;</span></span><span class="token punctuation">)</span>\nlistWithNullsAndEmpty<span class="token punctuation">.</span><span class="token function">removeIf</span> <span class="token punctuation">{</span> it <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> it<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>创建了一个包含 null 和空值的 <code>MutableList</code> 后，我们使用 <code>removeIf()</code> 方法一次性从列表中移除这些值。我们示例中的结果是 <code>[&quot;A&quot;, &quot;C&quot;, &quot;E&quot;]</code>。</p><p>最后，我们也将测试上述代码以确保它按预期工作：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Test</span>\n<span class="token keyword">fun</span> <span class="token function">`使用 removeIf 方法从列表中移除 null 和空值`</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">val</span> listWithNullsAndEmpty<span class="token operator">:</span> MutableList````````````<span class="token operator">&lt;</span>String<span class="token operator">?</span><span class="token operator">&gt;</span>```````````` <span class="token operator">=</span> <span class="token function">mutableListOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;A&quot;</span></span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;C&quot;</span></span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;E&quot;</span></span><span class="token punctuation">)</span>\n    listWithNullsAndEmpty<span class="token punctuation">.</span><span class="token function">removeIf</span> <span class="token punctuation">{</span> it <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> it<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;A&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;C&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;E&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> listWithNullsAndEmpty<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-结论" tabindex="-1"><a class="header-anchor" href="#_5-结论"><span>5. 结论</span></a></h2><p>本文探讨了在 Kotlin 中从列表中移除 null 和空值的方法。首先，我们讨论了涉及迭代列表并移除任何 null 或空元素的程序化方法。接下来，我们看到了如何使用内置方法实现相同的目标。</p><p>记住，<strong>虽然 <code>removeIf()</code> 方法就地消除所有 null 和空值，但使用 <code>filterNotNull()</code> 和 <code>filterNot()</code> 方法各自返回一个新列表</strong>。</p><p>如往常一样，本文中使用的代码可在 GitHub 上找到。我已经完成了翻译，以下是翻译的完整内容：</p><hr><p>date: 2022-11-01 category:</p><ul><li>Kotlin tag:</li><li>Lists</li><li>Null and Empty Values head:</li><li><ul><li>meta</li><li>name: keywords content: Kotlin, Lists, Null Values, Empty Values, Remove</li></ul></li></ul><hr><h1 id="如何在-kotlin-中从列表中移除空值和-null-值-baeldung-关于-kotlin-1" tabindex="-1"><a class="header-anchor" href="#如何在-kotlin-中从列表中移除空值和-null-值-baeldung-关于-kotlin-1"><span>如何在 Kotlin 中从列表中移除空值和 null 值 | Baeldung 关于 Kotlin</span></a></h1><h2 id="_1-引言-1" tabindex="-1"><a class="header-anchor" href="#_1-引言-1"><span>1. 引言</span></a></h2><p>在 Kotlin 中使用列表时，经常需要移除空值和 null 值。null 值可能会在我们的代码中引起错误，而空值可能会给我们的列表增加不必要的冗余。</p><p>在本教程中，我们将探索在 Kotlin 中从列表中移除 null 和空值的不同方法。</p><h2 id="_2-使用简单的列表迭代-1" tabindex="-1"><a class="header-anchor" href="#_2-使用简单的列表迭代-1"><span>2. 使用简单的列表迭代</span></a></h2><p>我们将使用的第一个方法是程序化方法。它涉及遍历列表，并在此过程中移除所有 null 和空元素：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">removeValuesViaIteration</span><span class="token punctuation">(</span>listWithNullsAndEmpty<span class="token operator">:</span> MutableList````````````<span class="token operator">&lt;</span>String<span class="token operator">?</span><span class="token operator">&gt;</span>````````````<span class="token punctuation">)</span><span class="token operator">:</span> List``````````````<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span>`````````````` <span class="token punctuation">{</span>\n    <span class="token keyword">val</span> iterator <span class="token operator">=</span> listWithNullsAndEmpty<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">val</span> element <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>element <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> element<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            iterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> listWithNullsAndEmpty <span class="token keyword">as</span> List``````````````<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span>``````````````\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述方法接受一个可能包含 null 和空值的 <code>MutableList</code>。<strong>一旦我们将这个列表传递给我们的 <code>removeValuesViaIteration()</code> 方法，我们就为列表创建一个 <code>Iterator</code> 来遍历列表中的每个元素</strong>。</p><p>在每次迭代中，我们检查当前元素是否为 null 或空。如果是，我们使用迭代器的 <code>remove()</code> 函数从列表中移除此元素。最后，我们在完全遍历列表后返回相同的列表。注意，我们可以进行类型转换，因为 null 已经被移除。</p><p>让我们编写一个测试以确保我们的方法正常工作：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Test</span>\n<span class="token keyword">fun</span> <span class="token function">`通过列表迭代从列表中移除 null 和空值`</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">val</span> listWithNullsAndEmpty<span class="token operator">:</span> MutableList````````````<span class="token operator">&lt;</span>String<span class="token operator">?</span><span class="token operator">&gt;</span>```````````` <span class="token operator">=</span> <span class="token function">mutableListOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;A&quot;</span></span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;C&quot;</span></span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;E&quot;</span></span><span class="token punctuation">)</span>\n    <span class="token keyword">val</span> listWithoutNullsAndEmpty <span class="token operator">=</span> <span class="token function">removeValuesViaIteration</span><span class="token punctuation">(</span>listWithNullsAndEmpty<span class="token punctuation">)</span>\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;A&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;C&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;E&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> listWithoutNullsAndEmpty<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-使用-filternotnull-和-filternot-方法-1" tabindex="-1"><a class="header-anchor" href="#_3-使用-filternotnull-和-filternot-方法-1"><span>3. 使用 <code>filterNotNull()</code> 和 <code>filterNot()</code> 方法</span></a></h2><p>从列表中移除空值和 null 值的另一种方法是利用 <code>filterNotNull()</code> 和 <code>filterNot()</code> 方法。<strong><code>filterNotNull()</code> 方法返回一个新列表，其中只包含原始列表中的非 null 元素</strong>：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> listWithNulls<span class="token operator">:</span> List````````````<span class="token operator">&lt;</span>String<span class="token operator">?</span><span class="token operator">&gt;</span>```````````` <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;A&quot;</span></span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;C&quot;</span></span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;E&quot;</span></span><span class="token punctuation">)</span>\n<span class="token keyword">val</span> listWithoutNulls<span class="token operator">:</span> List``````````````<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span>`````````````` <span class="token operator">=</span> listWithNulls<span class="token punctuation">.</span><span class="token function">filterNotNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码片段展示了我们如何使用 <code>filterNotNull()</code> 方法在一行代码中从列表中移除所有 null 值。因此，通过调用这个方法，我们最终得到一个新列表，包含值 <code>[&quot;A&quot;, &quot;&quot;, &quot;C&quot;, &quot;E&quot;]</code>。</p><p><strong>同样，<code>filterNot()</code> 方法对于从列表中移除所有空值非常有用</strong>。<code>filterNot()</code> 方法接受一个 lambda 谓词函数作为参数，并返回一个新列表，其中只包含谓词返回 <code>false</code> 的元素。</p><p>让我们也演示一下 <code>filterNot()</code> 方法的使用：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> listWithEmpty<span class="token operator">:</span> List``````````````<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span>`````````````` <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;A&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;C&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;E&quot;</span></span><span class="token punctuation">)</span>\n<span class="token keyword">val</span> listWithoutEmpty<span class="token operator">:</span> List``````````````<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span>`````````````` <span class="token operator">=</span> listWithEmpty<span class="token punctuation">.</span><span class="token function">filterNot</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>将所有这些结合起来，我们可以通过连续调用这两个方法来实现我们的目标：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Test</span>\n<span class="token keyword">fun</span> <span class="token function">`使用 filterNotNull 和 filterNot 方法从列表中移除 null 和空值`</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">val</span> listWithNullsAndEmpty<span class="token operator">:</span> List````````````<span class="token operator">&lt;</span>String<span class="token operator">?</span><span class="token operator">&gt;</span>```````````` <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;A&quot;</span></span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;C&quot;</span></span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;E&quot;</span></span><span class="token punctuation">)</span>\n    <span class="token keyword">val</span> listWithoutNulls<span class="token operator">:</span> List``````````````<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span>`````````````` <span class="token operator">=</span> listWithNullsAndEmpty<span class="token punctuation">.</span><span class="token function">filterNotNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">val</span> listWithoutNullsAndEmpty<span class="token operator">:</span> List``````````````<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span>`````````````` <span class="token operator">=</span> listWithoutNulls<span class="token punctuation">.</span><span class="token function">filterNot</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;A&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;C&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;E&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> listWithoutNullsAndEmpty<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们创建了一个包含 null 和空值的列表。然后我们调用这个列表的 <code>filterNotNull()</code> 方法以获得只包含非 null 值的列表，如第一个断言所示。随后，我们在调用 <code>filterNotNull()</code> 方法获得的列表上调用 <code>filterNot()</code> 方法，从而获得我们最终的列表，不包含 null 和空值。</p><h2 id="_4-使用-removeif-方法-1" tabindex="-1"><a class="header-anchor" href="#_4-使用-removeif-方法-1"><span>4. 使用 <code>removeIf()</code> 方法</span></a></h2><p>我们探索的前一种方法最终创建了一个新的列表。然而，<strong>如果我们有一个 <code>MutableList</code>，我们可以使用 <code>removeIf()</code> 方法来就地移除所有 null 和空值</strong>。同样，这个方法接受一个谓词作为参数，并移除所有谓词返回 <code>true</code> 的元素：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> listWithNullsAndEmpty<span class="token operator">:</span> MutableList````````````<span class="token operator">&lt;</span>String<span class="token operator">?</span><span class="token operator">&gt;</span>```````````` <span class="token operator">=</span> <span class="token function">mutableListOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;A&quot;</span></span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;C&quot;</span></span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;E&quot;</span></span><span class="token punctuation">)</span>\nlistWithNullsAndEmpty<span class="token punctuation">.</span><span class="token function">removeIf</span> <span class="token punctuation">{</span> it <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> it<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>创建了一个包含 null 和空值的 <code>MutableList</code> 后，我们使用 <code>removeIf()</code> 方法一次性从列表中移除这些值。我们示例中的结果是 <code>[&quot;A&quot;, &quot;C&quot;, &quot;E&quot;]</code>。</p><p>最后，我们也将测试上述代码以确保它按预期工作：</p><div class="language-kotlin line-numbers-mode" data-ext="kt" data-title="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Test</span>\n<span class="token keyword">fun</span> <span class="token function">`使用 removeIf 方法从列表中移除 null 和空值`</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">val</span> listWithNullsAndEmpty<span class="token operator">:</span> MutableList````````````<span class="token operator">&lt;</span>String<span class="token operator">?</span><span class="token operator">&gt;</span>```````````` <span class="token operator">=</span> <span class="token function">mutableListOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;A&quot;</span></span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;C&quot;</span></span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;E&quot;</span></span><span class="token punctuation">)</span>\n    listWithNullsAndEmpty<span class="token punctuation">.</span><span class="token function">removeIf</span> <span class="token punctuation">{</span> it <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> it<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n\n    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;A&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;C&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;E&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> listWithNullsAndEmpty<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-结论-1" tabindex="-1"><a class="header-anchor" href="#_5-结论-1"><span>5. 结论</span></a></h2><p>本文探讨了在 Kotlin 中从列表中移除 null 和空值的方法。首先，我们讨论了涉及迭代列表并移除任何 null 或空元素的程序化方法。接下来，我们看到了如何使用内置方法实现相同的目标。</p><p>记住，<strong>虽然 <code>removeIf()</code> 方法就地消除所有 null 和空值，但使用 <code>filterNotNull()</code> 和 <code>filterNot()</code> 方法各自返回一个新列表</strong>。</p><p>如往常一样，本文中使用的代码可在 GitHub 上找到。</p><p>OK</p>',67),o=[e];function l(i,c){return a(),s("div",null,o)}const k=n(p,[["render",l],["__file","2024-07-19-How to Remove Null and Empty Values from a List in Kotlin.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-07-19/2024-07-19-How%20to%20Remove%20Null%20and%20Empty%20Values%20from%20a%20List%20in%20Kotlin.html","title":"如何在 Kotlin 中从列表中移除空值和 null 值 | Baeldung 关于 Kotlin","lang":"zh-CN","frontmatter":{"date":"2022-11-01T00:00:00.000Z","category":["Kotlin"],"tag":["Lists","Null and Empty Values"],"head":[["meta",{"name":"keywords","content":"Kotlin, Lists, Null Values, Empty Values, Remove"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-07-19/2024-07-19-How%20to%20Remove%20Null%20and%20Empty%20Values%20from%20a%20List%20in%20Kotlin.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"如何在 Kotlin 中从列表中移除空值和 null 值 | Baeldung 关于 Kotlin"}],["meta",{"property":"og:description","content":"如何在 Kotlin 中从列表中移除空值和 null 值 | Baeldung 关于 Kotlin 1. 引言 在 Kotlin 中使用列表时，经常需要移除空值和 null 值。null 值可能会在我们的代码中引起错误，而空值可能会给我们的列表增加不必要的冗余。 在本教程中，我们将探索在 Kotlin 中从列表中移除 null 和空值的不同方法。 2...."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-19T22:13:08.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Lists"}],["meta",{"property":"article:tag","content":"Null and Empty Values"}],["meta",{"property":"article:published_time","content":"2022-11-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-19T22:13:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"如何在 Kotlin 中从列表中移除空值和 null 值 | Baeldung 关于 Kotlin\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-11-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-19T22:13:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"如何在 Kotlin 中从列表中移除空值和 null 值 | Baeldung 关于 Kotlin 1. 引言 在 Kotlin 中使用列表时，经常需要移除空值和 null 值。null 值可能会在我们的代码中引起错误，而空值可能会给我们的列表增加不必要的冗余。 在本教程中，我们将探索在 Kotlin 中从列表中移除 null 和空值的不同方法。 2...."},"headers":[{"level":2,"title":"1. 引言","slug":"_1-引言","link":"#_1-引言","children":[]},{"level":2,"title":"2. 使用简单的列表迭代","slug":"_2-使用简单的列表迭代","link":"#_2-使用简单的列表迭代","children":[]},{"level":2,"title":"3. 使用 filterNotNull() 和 filterNot() 方法","slug":"_3-使用-filternotnull-和-filternot-方法","link":"#_3-使用-filternotnull-和-filternot-方法","children":[]},{"level":2,"title":"4. 使用 removeIf() 方法","slug":"_4-使用-removeif-方法","link":"#_4-使用-removeif-方法","children":[]},{"level":2,"title":"5. 结论","slug":"_5-结论","link":"#_5-结论","children":[]},{"level":2,"title":"1. 引言","slug":"_1-引言-1","link":"#_1-引言-1","children":[]},{"level":2,"title":"2. 使用简单的列表迭代","slug":"_2-使用简单的列表迭代-1","link":"#_2-使用简单的列表迭代-1","children":[]},{"level":2,"title":"3. 使用 filterNotNull() 和 filterNot() 方法","slug":"_3-使用-filternotnull-和-filternot-方法-1","link":"#_3-使用-filternotnull-和-filternot-方法-1","children":[]},{"level":2,"title":"4. 使用 removeIf() 方法","slug":"_4-使用-removeif-方法-1","link":"#_4-使用-removeif-方法-1","children":[]},{"level":2,"title":"5. 结论","slug":"_5-结论-1","link":"#_5-结论-1","children":[]}],"git":{"createdTime":1721427188000,"updatedTime":1721427188000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":7.63,"words":2289},"filePathRelative":"posts/baeldung/2024-07-19/2024-07-19-How to Remove Null and Empty Values from a List in Kotlin.md","localizedDate":"2022年11月1日","excerpt":"\\n<h2>1. 引言</h2>\\n<p>在 Kotlin 中使用列表时，经常需要移除空值和 null 值。null 值可能会在我们的代码中引起错误，而空值可能会给我们的列表增加不必要的冗余。</p>\\n<p>在本教程中，我们将探索在 Kotlin 中从列表中移除 null 和空值的不同方法。</p>\\n<h2>2. 使用简单的列表迭代</h2>\\n<p>我们将使用的第一个方法是程序化方法。它涉及遍历列表，并在此过程中移除所有 null 和空元素：</p>\\n<div class=\\"language-kotlin\\" data-ext=\\"kt\\" data-title=\\"kt\\"><pre class=\\"language-kotlin\\"><code><span class=\\"token keyword\\">fun</span> <span class=\\"token function\\">removeValuesViaIteration</span><span class=\\"token punctuation\\">(</span>listWithNullsAndEmpty<span class=\\"token operator\\">:</span> MutableList````````````<span class=\\"token operator\\">&lt;</span>String<span class=\\"token operator\\">?</span><span class=\\"token operator\\">&gt;</span>````````````<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> List``````````````<span class=\\"token operator\\">&lt;</span>String<span class=\\"token operator\\">&gt;</span>`````````````` <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">val</span> iterator <span class=\\"token operator\\">=</span> listWithNullsAndEmpty<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">iterator</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>iterator<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">hasNext</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">val</span> element <span class=\\"token operator\\">=</span> iterator<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">next</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>element <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span> <span class=\\"token operator\\">||</span> element<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">isEmpty</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            iterator<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">remove</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">return</span> listWithNullsAndEmpty <span class=\\"token keyword\\">as</span> List``````````````<span class=\\"token operator\\">&lt;</span>String<span class=\\"token operator\\">&gt;</span>``````````````\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{k as comp,d as data};
