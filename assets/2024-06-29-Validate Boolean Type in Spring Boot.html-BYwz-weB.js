import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-DFhKiB50.js";const o={},e=t(`<h1 id="在spring-boot中验证布尔类型" tabindex="-1"><a class="header-anchor" href="#在spring-boot中验证布尔类型"><span>在Spring Boot中验证布尔类型</span></a></h1><p>在本教程中，我们将学习如何在Spring Boot应用程序中验证布尔类型，并查看执行验证的各种方式。此外，我们将在Spring Boot应用程序的不同层，如控制器或服务层，验证类型为布尔的对象。</p><h2 id="_2-程序化验证" tabindex="-1"><a class="header-anchor" href="#_2-程序化验证"><span>2. 程序化验证</span></a></h2><p>Boolean类提供了两个基本方法来创建类的实例：Boolean.valueOf()和Boolean.parseBoolean()。</p><p>Boolean.valueOf()接受字符串和布尔值。它检查输入字段的值是否为true或false，并相应地提供Boolean对象。Boolean.parseBoolean()方法只接受字符串值。</p><p><strong>这些方法不区分大小写 - 例如，“true”，“True”，“TRUE”，“false”，“False”和“FALSE”都是可接受的输入。</strong></p><p>让我们通过单元测试来验证字符串到布尔的转换：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenInputAsString_whenStringToBoolean_thenValidBooleanConversion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">TRUE</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">&quot;TRUE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">FALSE</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">&quot;false&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">TRUE</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token function">parseBoolean</span><span class="token punctuation">(</span><span class="token string">&quot;True&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们将验证从原始布尔值到Boolean包装类的转换：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenInputAsboolean_whenbooleanToBoolean_thenValidBooleanConversion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">TRUE</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">FALSE</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-使用自定义jackson反序列化器进行验证" tabindex="-1"><a class="header-anchor" href="#_3-使用自定义jackson反序列化器进行验证"><span>3. 使用自定义Jackson反序列化器进行验证</span></a></h2><p>由于Spring Boot API经常处理JSON数据，我们还将查看如何通过数据反序列化来验证JSON到Boolean的转换。我们可以使用自定义反序列化器来反序列化布尔值的自定义表示。</p><p>让我们考虑一个场景，我们想要使用JSON数据表示布尔值，使用“+”（代表true）和“-”（代表false）。让我们编写一个JSON反序列化器来实现这一点：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BooleanDeserializer</span> <span class="token keyword">extends</span> <span class="token class-name">JsonDeserializer</span>\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span>\` <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token class-name">JsonParser</span> parser<span class="token punctuation">,</span> <span class="token class-name">DeserializationContext</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> value <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">TRUE</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">FALSE</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Only values accepted as Boolean are + and -&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-使用注解进行bean验证" tabindex="-1"><a class="header-anchor" href="#_4-使用注解进行bean验证"><span>4. 使用注解进行Bean验证</span></a></h2><p>Bean验证约束是另一种流行的验证字段的方法。要使用这个，我们需要spring-boot-starter-validation依赖项。在所有可用的验证注解中，有三个可以用于布尔字段：</p><ul><li><strong>@NotNull</strong>: 如果Boolean字段为null，则产生错误</li><li><strong>@AssertTrue</strong>: 如果Boolean字段设置为false，则产生错误</li><li><strong>@AssertFalse</strong>: 如果Boolean字段设置为true，则产生错误</li></ul><p>**需要注意的是，@AssertTrue和@AssertFalse都认为null值为有效输入。**这意味着，如果我们想确保只接受实际的布尔值，我们需要将这两个注解与@NotNull结合使用。</p><h2 id="_5-boolean验证示例" tabindex="-1"><a class="header-anchor" href="#_5-boolean验证示例"><span>5. Boolean验证示例</span></a></h2><p>为了演示这一点，我们将在控制器和服务层同时使用bean约束和自定义JSON反序列化器。让我们创建一个名为BooleanObject的自定义对象，它有四个Boolean类型的参数。每个参数将使用不同的验证方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BooleanObject</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;boolField不能为null&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">Boolean</span> boolField<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@AssertTrue</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;trueField必须有true值&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">Boolean</span> trueField<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;falseField不能为null&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@AssertFalse</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;falseField必须有false值&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">Boolean</span> falseField<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@JsonDeserialize</span><span class="token punctuation">(</span>using <span class="token operator">=</span> <span class="token class-name">BooleanDeserializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token class-name">Boolean</span> boolStringVar<span class="token punctuation">;</span>

    <span class="token comment">//getters和setters</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-控制器中的验证" tabindex="-1"><a class="header-anchor" href="#_6-控制器中的验证"><span>6. 控制器中的验证</span></a></h2><p>每当我们通过RequestBody将对象传递到REST端点时，我们可以使用@Valid注解来验证对象。<strong>当我们将@Valid注解应用于方法参数时，我们指示Spring验证相应的用户对象</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValidationController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">ValidationService</span> service<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/validateBoolean&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>\`\` <span class="token function">processBooleanObject</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token annotation punctuation">@Valid</span> <span class="token class-name">BooleanObject</span> booleanObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token string">&quot;BooleanObject is valid&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/validateBooleanAtService&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span>\`\`<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>\`\` <span class="token function">processBooleanObjectAtService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">BooleanObject</span> boolObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BooleanObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        boolObj<span class="token punctuation">.</span><span class="token function">setBoolField</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">TRUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        boolObj<span class="token punctuation">.</span><span class="token function">setTrueField</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">FALSE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        service<span class="token punctuation">.</span><span class="token function">processBoolean</span><span class="token punctuation">(</span>boolObj<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token string">&quot;BooleanObject is valid&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>验证后，如果发现任何违规，Spring将抛出MethodArgumentNotValidException。为此，可以使用ControllerAdvice和相关的ExceptionHandler方法来处理。让我们创建三种方法来处理来自控制器和服务层的相应异常：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestControllerAdvice</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">MethodArgumentNotValidException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">BAD_REQUEST</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">handleValidationException</span><span class="token punctuation">(</span><span class="token class-name">MethodArgumentNotValidException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> ex<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">getFieldErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> e<span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">BAD_REQUEST</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">handleIllegalArugmentException</span><span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">ConstraintViolationException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">INTERNAL_SERVER_ERROR</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">handleConstraintViolationException</span><span class="token punctuation">(</span><span class="token class-name">ConstraintViolationException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">return</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在测试REST功能之前，我们建议先浏览Spring Boot中的API测试。让我们为控制器创建测试类的框架：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@WebMvcTest</span><span class="token punctuation">(</span>controllers <span class="token operator">=</span> <span class="token class-name">ValidationController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">ValidationControllerUnitTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">MockMvc</span> mockMvc<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@TestConfiguration</span>
    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">EmployeeServiceImplTestContextConfiguration</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Bean</span>
        <span class="token keyword">public</span> <span class="token class-name">ValidationService</span> <span class="token function">validationService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ValidationService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">ValidationService</span> service<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了这个，我们现在可以测试我们在类中使用的验证注解。</p><h3 id="_6-1-验证-notnull注解" tabindex="-1"><a class="header-anchor" href="#_6-1-验证-notnull注解"><span>6.1. 验证@NotNull注解</span></a></h3><p>让我们看看@NotNull是如何工作的。当我们传递一个带有null Boolean参数的BooleanObject时，@Valid注解将验证bean并抛出“400 Bad Request”HTTP响应：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">whenNullInputForBooleanField_thenHttpBadRequestAsHttpResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> postBody <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;boolField\\&quot;:null,\\&quot;trueField\\&quot;:true,\\&quot;falseField\\&quot;:false,\\&quot;boolStringVar\\&quot;:\\&quot;+\\&quot;}&quot;</span><span class="token punctuation">;</span>

    mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/validateBoolean&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token string">&quot;application/json&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span>postBody<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isBadRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2-验证-asserttrue注解" tabindex="-1"><a class="header-anchor" href="#_6-2-验证-asserttrue注解"><span>6.2. 验证@AssertTrue注解</span></a></h3><p>接下来，我们将测试@AssertTrue的工作。当我们传递一个带有false Boolean参数的BooleanObject时，@Valid注解将验证bean并抛出“400 Bad Request”HTTP响应。如果我们捕获响应体，我们可以得到@AssertTrue注解中设置的错误消息：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">whenInvalidInputForTrueBooleanField_thenErrorResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> postBody <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;boolField\\&quot;:true,\\&quot;trueField\\&quot;:false,\\&quot;falseField\\&quot;:false,\\&quot;boolStringVar\\&quot;:\\&quot;+\\&quot;}&quot;</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> output <span class="token operator">=</span> mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/validateBoolean&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token string">&quot;application/json&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span>postBody<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">andReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">getContentAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;trueField must have true value&quot;</span><span class="token punctuation">,</span> output<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们也检查一下如果我们提供null会发生什么。由于我们只对字段使用了@AssertTrue注解，而没有使用@NotNull，所以没有验证错误：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">whenNullInputForTrueBooleanField_thenCorrectResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> postBody <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;boolField\\&quot;:true,\\&quot;trueField\\&quot;:null,\\&quot;falseField\\&quot;:false,\\&quot;boolStringVar\\&quot;:\\&quot;+\\&quot;}&quot;</span><span class="token punctuation">;</span>

    mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/validateBoolean&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token string">&quot;application/json&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span>postBody<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-3-验证-assertfalse注解" tabindex="-1"><a class="header-anchor" href="#_6-3-验证-assertfalse注解"><span>6.3. 验证@AssertFalse注解</span></a></h3><p>我们现在将理解@AssertFalse的工作原理。当我们为@AssertFalse参数传递一个true值时，@Valid注解会抛出一个错误请求。我们可以在响应体中得到@AssertFalse注解中设置的错误消息：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">whenInvalidInputForFalseBooleanField_thenErrorResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> postBody <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;boolField\\&quot;:true,\\&quot;trueField\\&quot;:true,\\&quot;falseField\\&quot;:true,\\&quot;boolStringVar\\&quot;:\\&quot;+\\&quot;}&quot;</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> output <span class="token operator">=</span> mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/validateBoolean&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token string">&quot;application/json&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span>postBody<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">andReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">getContentAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;falseField must have false value&quot;</span><span class="token punctuation">,</span> output<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次，让我们看看如果我们提供null会发生什么。我们对字段使用了@AssertFalse和@NotNull，因此我们会得到一个验证错误：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">whenNullInputForFalseBooleanField_thenHttpBadRequestAsHttpResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> postBody <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;boolField\\&quot;:true,\\&quot;trueField\\&quot;:true,\\&quot;falseField\\&quot;:null,\\&quot;boolStringVar\\&quot;:\\&quot;+\\&quot;}&quot;</span><span class="token punctuation">;</span>

    mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/validateBoolean&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token string">&quot;application/json&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span>postBody<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isBadRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-4-验证自定义json反序列化器对boolean类型的验证" tabindex="-1"><a class="header-anchor" href="#_6-4-验证自定义json反序列化器对boolean类型的验证"><span>6.4. 验证自定义JSON反序列化器对Boolean类型的验证</span></a></h3><p>让我们验证标记为我们自定义JSON反序列化器的参数。自定义反序列化器只接受“+”和“-”的值。如果我们传递任何其他值，验证将失败并触发错误。让我们在输入JSON中传递“plus”文本值，并看看验证是如何工作的：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">whenInvalidBooleanFromJson_thenErrorResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> postBody <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;boolField\\&quot;:true,\\&quot;trueField\\&quot;:true,\\&quot;falseField\\&quot;:false,\\&quot;boolStringVar\\&quot;:\\&quot;plus\\&quot;}&quot;</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> output <span class="token operator">=</span> mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/validateBoolean&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token string">&quot;application/json&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span>postBody<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">andReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">getContentAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Only values accepted as Boolean are + and -&quot;</span><span class="token punctuation">,</span> output<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，让我们测试一下快乐场景。我们将“+”作为自定义反序列化字段的输入。由于它是一个有效的输入，验证将通过并给出成功的响应：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">whenAllBooleanFieldsValid_thenCorrectResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> postBody <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;boolField\\&quot;:true,\\&quot;trueField\\&quot;:true,\\&quot;falseField\\&quot;:false,\\&quot;boolStringVar\\&quot;:\\&quot;+\\&quot;}&quot;</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> output <span class="token operator">=</span> mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/validateBoolean&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token string">&quot;application/json&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span>postBody<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">andReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">getContentAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;BooleanObject is valid&quot;</span><span class="token punctuation">,</span> output<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-服务中的验证" tabindex="-1"><a class="header-anchor" href="#_7-服务中的验证"><span>7. 服务中的验证</span></a></h2><p>现在让我们看看服务层的验证。为了实现这一点，我们使用@Validated注解标记服务类，并将@Valid注解放在方法参数上。这两个注解的组合将导致Spring Boot验证对象。</p><p>与控制器层的@RequestBody不同，服务层的验证是针对一个简单的Java对象进行的，因此<strong>框架会因为验证失败而触发一个_ConstraintViolationException_</strong>。在这种情况下，Spring框架将返回_HttpStatus.INTERNAL_SERVER_ERROR_作为响应状态。</p><p><strong>服务层验证更适用于在控制器层创建或修改的对象，然后传递到服务层进行处理。</strong></p><p>让我们检查一下这个服务类的框架：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@Validated</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValidationService</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processBoolean</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Valid</span> <span class="token class-name">BooleanObject</span> booleanObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 进一步处理</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在前一节中，我们创建了一个测试服务层的端点和异常处理方法来处理_ConstraintViolationException_。让我们编写一个新的测试用例来检查这一点：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">givenAllBooleanFieldsValid_whenServiceValidationFails_thenErrorResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/validateBooleanAtService&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token string">&quot;application/json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInternalServerError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-结论" tabindex="-1"><a class="header-anchor" href="#_8-结论"><span>8. 结论</span></a></h2><p>我们学习了如何使用三种方法在控制器和服务层验证布尔类型：程序化验证、bean验证和使用自定义JSON反序列化器。本文的参考代码可以在GitHub上找到。 OK</p>`,57),p=[e];function c(l,i){return a(),s("div",null,p)}const r=n(o,[["render",c],["__file","2024-06-29-Validate Boolean Type in Spring Boot.html.vue"]]),d=JSON.parse('{"path":"/posts/baeldung/2024-06-29/2024-06-29-Validate%20Boolean%20Type%20in%20Spring%20Boot.html","title":"在Spring Boot中验证布尔类型","lang":"zh-CN","frontmatter":{"date":"2024-06-29T00:00:00.000Z","category":["Spring Boot","Validation"],"tag":["Boolean","Validation"],"head":[["meta",{"name":"keywords","content":"Spring Boot, Boolean Validation, Programmatic Validation, Bean Validation, Custom JSON Deserializer"}],["meta",{"property":"og:url","content":"https://www.kahen.xyz/posts/baeldung/2024-06-29/2024-06-29-Validate%20Boolean%20Type%20in%20Spring%20Boot.html"}],["meta",{"property":"og:site_name","content":"Baeldung 中文网"}],["meta",{"property":"og:title","content":"在Spring Boot中验证布尔类型"}],["meta",{"property":"og:description","content":"在Spring Boot中验证布尔类型 在本教程中，我们将学习如何在Spring Boot应用程序中验证布尔类型，并查看执行验证的各种方式。此外，我们将在Spring Boot应用程序的不同层，如控制器或服务层，验证类型为布尔的对象。 2. 程序化验证 Boolean类提供了两个基本方法来创建类的实例：Boolean.valueOf()和Boolean..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-29T02:56:26.000Z"}],["meta",{"property":"article:author","content":"Kahen"}],["meta",{"property":"article:tag","content":"Boolean"}],["meta",{"property":"article:tag","content":"Validation"}],["meta",{"property":"article:published_time","content":"2024-06-29T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-29T02:56:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"在Spring Boot中验证布尔类型\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-29T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-29T02:56:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Kahen\\",\\"url\\":\\"https://www.kahen.xyz\\"}]}"]],"description":"在Spring Boot中验证布尔类型 在本教程中，我们将学习如何在Spring Boot应用程序中验证布尔类型，并查看执行验证的各种方式。此外，我们将在Spring Boot应用程序的不同层，如控制器或服务层，验证类型为布尔的对象。 2. 程序化验证 Boolean类提供了两个基本方法来创建类的实例：Boolean.valueOf()和Boolean..."},"headers":[{"level":2,"title":"2. 程序化验证","slug":"_2-程序化验证","link":"#_2-程序化验证","children":[]},{"level":2,"title":"3. 使用自定义Jackson反序列化器进行验证","slug":"_3-使用自定义jackson反序列化器进行验证","link":"#_3-使用自定义jackson反序列化器进行验证","children":[]},{"level":2,"title":"4. 使用注解进行Bean验证","slug":"_4-使用注解进行bean验证","link":"#_4-使用注解进行bean验证","children":[]},{"level":2,"title":"5. Boolean验证示例","slug":"_5-boolean验证示例","link":"#_5-boolean验证示例","children":[]},{"level":2,"title":"6. 控制器中的验证","slug":"_6-控制器中的验证","link":"#_6-控制器中的验证","children":[{"level":3,"title":"6.1. 验证@NotNull注解","slug":"_6-1-验证-notnull注解","link":"#_6-1-验证-notnull注解","children":[]},{"level":3,"title":"6.2. 验证@AssertTrue注解","slug":"_6-2-验证-asserttrue注解","link":"#_6-2-验证-asserttrue注解","children":[]},{"level":3,"title":"6.3. 验证@AssertFalse注解","slug":"_6-3-验证-assertfalse注解","link":"#_6-3-验证-assertfalse注解","children":[]},{"level":3,"title":"6.4. 验证自定义JSON反序列化器对Boolean类型的验证","slug":"_6-4-验证自定义json反序列化器对boolean类型的验证","link":"#_6-4-验证自定义json反序列化器对boolean类型的验证","children":[]}]},{"level":2,"title":"7. 服务中的验证","slug":"_7-服务中的验证","link":"#_7-服务中的验证","children":[]},{"level":2,"title":"8. 结论","slug":"_8-结论","link":"#_8-结论","children":[]}],"git":{"createdTime":1719629786000,"updatedTime":1719629786000,"contributors":[{"name":"Kahen","email":"Kahen@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":6.78,"words":2033},"filePathRelative":"posts/baeldung/2024-06-29/2024-06-29-Validate Boolean Type in Spring Boot.md","localizedDate":"2024年6月29日","excerpt":"\\n<p>在本教程中，我们将学习如何在Spring Boot应用程序中验证布尔类型，并查看执行验证的各种方式。此外，我们将在Spring Boot应用程序的不同层，如控制器或服务层，验证类型为布尔的对象。</p>\\n<h2>2. 程序化验证</h2>\\n<p>Boolean类提供了两个基本方法来创建类的实例：Boolean.valueOf()和Boolean.parseBoolean()。</p>\\n<p>Boolean.valueOf()接受字符串和布尔值。它检查输入字段的值是否为true或false，并相应地提供Boolean对象。Boolean.parseBoolean()方法只接受字符串值。</p>","autoDesc":true}');export{r as comp,d as data};
